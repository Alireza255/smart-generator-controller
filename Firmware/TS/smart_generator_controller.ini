; This file contains code to make tuner studio operate.
; Author: Alireza Eskandari

[MegaTune]
     MTversion  = 2.25
     signature  = "alicu 32u"

[TunerStudio]

     iniSpecVersion = 3.2
    
[PcVariables]


[Constants]
;The primary goal of this section is to map the controller calibration data to referenced variables with Meta data attributes:
;Formatting of a Constant entry:
; name = class, type, offset, shape, units, scale, translate, lo, hi, digits
     endianness          = little
     nPages              = 3
     pageSize            = 128
page = 1
    

;Page 2 is the fuel map and axis bins only
page = 2
   ;  name       = bits,   type,    offset, bits
   ;  name       = array,  type,    offset, shape, units,     scale, translate,    lo,      hi, digits
   ;  name       = scalar, type,    offset,        units,     scale, translate,    lo,      hi, digits

;--------------------------------------------------
;Start Ignition table (Page 3)
;--------------------------------------------------
page = 3

[OutputChannels]
    RPM_value = scalar, U16, 0, "RPM", 1, 0	
    MAP_value = scalar, U16, 2, "kPa", 0.03333333333333333, 0
    TPS_value = scalar, S16, 4, "%", 0.01, 0
    lambda_value = scalar, U16, 6, "", 1.0E-4, 0
    ignition_advance_value = scalar, S16, 8, "deg", 0.02, 0
    spark_dwell_value = scalar, F32, 10, "ms", 1,0
    VBatt_value = scalar, U16, 14, "V", 0.001, 0
    coolant_temp_value = scalar, F32, 18, "C", 0.001, 0


[Replay]
[ExtendedReplay]
[TableEditor]
[GaugeConfigurations]
   ;-------------------------------------------------------------------------------
   ; Define a gauge's characteristics here, then go to a specific layout
   ; block (Tuning or FrontPage) and use the name you've defined here to
   ; display that gauge in a particular position.
   ;
   ; Name  = Case-sensitive, user-defined name for this gauge configuration.
   ; Var   = Case-sensitive name of variable to be displayed, see the
   ;         OutputChannels block in this file for possible values.
   ; Title = Title displayed at the top of the gauge.
   ; Units = Units displayed below value on gauge.
   ; Lo    = Lower scale limit of gauge.
   ; Hi    = Upper scale limit of gauge.
   ; LoD   = Lower limit at which danger color is used for gauge background.
   ; LoW   = Lower limit at which warning color is used.
   ; HiW   = Upper limit at which warning color is used.
   ; HiD   = Upper limit at which danger color is used.
   ; vd    = Decimal places in displayed value
   ; ld    = Label decimal places for display of Lo and Hi, above.

    gaugeCategory = "Main"
    ;Name               Var            Title                 Units     Lo     Hi     LoD    LoW   HiW   HiD vd ld
    rpm_gauge			= RPM_value,			"RPM - engine speed",		"RPM",		0, {rpmHardLimit + 2000},	200, {cranking_rpm}, {rpmHardLimit - 500},  {rpmHardLimit},	0,	0
	map_gauge		    = MAP_value,					"MAP",		"kPa",		0,	300,		10,	10,	200,	200,	0,	0
	tps_gauge			= TPS_value,		"Throttle position",			"%",		0,	100,		0,		0,	100,	100,	1,	1
	lambda_gauge		= lambda_value, "Lambda",	"",		0.65,	1.2,		0.7,	0.75,		1.1,	1.15,	3,	2
	advance_gauge       = ignition_advance_value,		"Timing: ignition",	"degrees",	-100,	100,	-999,	-999,	999,	999,	1, 1
	dwell_gauge		    = spark_dwell_value,			"Dwell",		"mSec",		0,	10,	0.5,	1.0,	6.0,	8.0,	1, 1
	vbatt_gauge		    = VBatt_value,		"Battery",			"V",		8,	21,		9,	10,		17,	19,	1,	1
    clt_gauge			= coolant_temp_value,		"Coolant temp",		"C",		-40,	140,	-15,		1,		95,	110,	1,	1




[ControllerCommands]

[PortEditor]
[CurveEditor]
[TriggerWheel]
[UiDialogs] / [UserDefined]
[FTPBrowser]
[Menu]

   ;----------------------------------------------------------------------------
   ;  There are five pre-defined values that may be used to define your menus.
   ;  The first four allow access to the "standard" dialog boxes, the last one
   ;  merely draws a separator (horizontal line) in the menu.
   ;
   ;     std_constants
   ;     std_enrichments
   ;     std_realtime
   ;     std_warmup
   ;
   ;     std_separator
   ;
   ;  If you use any of the std_constants, std_enrichments or std_warmup
   ;  editors, they may be optionally suffixed with a page number (only
   ;  useful for multi-page code variants), which causes them to edit the
   ;  specified page.  If you leave off the page specifier, they edit logical
   ;  page one as specified in the Constants section.
   ;
   ;  There are four special menu names, which when used append to the standard
   ;  menus of the same name instead of creating a new one.  The menu names
   ;  are "File", "Communications", "Tools" and "Help".
   ;
   ;----------------------------------------------------------------------------

menuDialog = main

   menu = "Settings"
        subMenu = engine_constants,   "Engine Constants"
        subMenu = trigger_settings,    "Trigger Setup"
        subMenu = std_separator
        groupMenu = "Limits and protection"
            groupChildMenu = limits_and_fallbacks,      "Limits and fallbacks"
            groupChildMenu = oil_pressure_protection,   "Oil pressure protection"
            groupChildMenu = coolant_temp_protection,   "Coolant temp protection"
        subMenu = std_separator

    menu = "Fuel"
        subMenu = fuel_type_settings,       "Fuel type settings", 0, {is_fuel_enabled}
        subMenu = fuel_gasoline_settings,   "Gasoline fuel settings", 0, {is_fuel_enabled && is_fuel_gasoline_enabled}
        subMenu = fuel_gas_settings,        "Gas fuel settings", 0, {is_fuel_enabled && is_fuel_gas_enabled}
        subMenu = std_separator

        # Air mass model
		subMenu = veTableDialog,			"VE", 0, {isInjectionEnabled == 1}
        subMenu = veTableMap,               "VE 3D view", 0, {isInjectionEnabled}
        subMenu = std_separator
        
        subMenu = clt_fuel_corr_curve,		"CLT correction", 0, {isInjectionEnabled == 1}
		subMenu = iat_fuel_corr_curve,		"IAT correction", 0, {isInjectionEnabled == 1}
        subMenu = fuel_closed_loop_dialog,	"Closed loop fuel correction", 0, {isInjectionEnabled == 1}
    	subMenu = labmda_target,			"Target lambda", 0, {isInjectionEnabled == 1}
        subMenu = std_separator

		# Accel enrichment
		subMenu = accel_enrich,				"Acceleration enrichment", 0, {isInjectionEnabled == 1}
		subMenu = tpsTpsDialog,			    "TPS/TPS acceleration extra fuel", 0, {isInjectionEnabled == 1}
		subMenu = tpsTspRpmCorrection,      "TPS/TPS extra fuel RPM correction", 0, {isInjectionEnabled == 1}
        subMenu = std_separator

    menu = "Spark"
        subMenu = ignition_settings,        "Ignition settings"
        subMenu = dwell_settings,			"Dwell", 0, {isIgnitionEnabled}
        subMenu = std_separator
        
        subMenu = ignition_table,           "Advance", 0, {isIgnitionEnabled}
		subMenu = multi_spark_settings,		"Multispark", 0, {isIgnitionEnabled == 1}
        subMenu = std_separator


        subMenu = clt_timing_corr_cure,		"Coolant temp correction", 0, {isIgnitionEnabled}
        subMenu = std_separator
	
    menu = "Cranking"
		subMenu = crankingDialog,			"Cranking settings"
		subMenu = postCrankingEnrichmentTbl,"After-start enrichment", { 1 }, { uiMode == 0 || uiMode == 1 }
		subMenu = primingFuelPulsePanel,	"Priming pulse", { 1 }, { uiMode == 0 || uiMode == 1 }
		subMenu = std_separator

		subMenu = cltCrankingCurve,			"Cranking Idle Air CLT multiplier", {overrideCrankingIacSetting == 1}, { uiMode == 0 || uiMode == 1 }
        subMenu = crankingCltCurve,			"Fuel CLT multiplier"
		subMenu = crankingTpsCurve,			"Fuel TPS multiplier"
		subMenu = std_separator

		subMenu = crankingAdvanceCurve,		"Cranking ignition advance", {useSeparateAdvanceForCranking == 1}, { uiMode == 0 || uiMode == 1 }
		subMenu = std_separator

    menu = "Idle and Governer"
        subMenu = air_control_hardware,     "Air control hardware"
        subMenu = air_control_settings,     "Air control settings"
        subMenu = std_separator

        subMenu = clt_idle_rpm_curve,       "Target idle RPM"
        subMenu = governer_target_rpm       "Governer target RPM"
        subMenu = std_separator
    
    menu = "Fan control"
        subMenu = fan_control_hardware,     "Fan control hardware"
        subMenu = fan_control_temp,         "Fan tempratures"
        subMenu = std_separator

    menu = "Sensors"
		# Thermistors
		subMenu = cltSensor,				"Coolant temp sensor", { 1 }, { uiMode == 0 || uiMode == 1 }
		subMenu = iatSensor,				"Intake air temp sensor", { 1 }, { uiMode == 0 || uiMode == 1 }
		subMenu = std_separator

		# Misc sensors
		subMenu = oilPressureSensor,	    "Oil pressure"
		subMenu = std_separator

		# O2 sensor(s)
		subMenu = egoSettings,				"O2 sensor", { 1 }, { uiMode == 0 || uiMode == 1 }
		subMenu = widebandConfig,			"Alireza Wideband Controller", 0, { canReadEnabled && canWriteEnabled }
		subMenu = std_separator

;-------------------------------------------------------------------------------

[KeyActions]
[Datalog]
[FrontPage]
    gauge1 = rpm_gauge
    gauge2 = tps_gauge
    gauge3 = map_gauge
    gauge4 = lambda_gauge
    guage5 = advance_gauge
    gauge6 = dwell_gauge
    gauge7 = vbatt_gauge
    gauge8 = clt_gauge
;			=							expression,				off-label,				on-label, off-bg, off-fg,  on-bg,  on-fg

	indicator =						{ need_burn },	"Settings saved",	"Unsaved changes",  white,  black, yellow,  black
	indicator =						{ isWarnNow },		"No warnings",			"Warning",  white,  black, yellow,  black
	indicator =					{ is_trigger_error},			"Trigger OK",		"Trigger ERR",  white,  black,	red,  black
	; minor info
	indicator =				{ fan1_state },			"Fan off",				"Fan on",  white,  black,  green,  black
	indicator =				{ fan2_state },			"Fan 2 off",			"Fan 2 on",  white,  black,  green,  black
	indicator =				{ main_relay_state },		"Main relay off",	"Main relay on",  white,  black,  green,  black
    indicator =				{ gas_solenoid_state },		"Gas solenoid off",	"Gas solenoid on",  white,  black,  green,  black
    indicator =             { fuel_pump_state },	"Fuel pump off",	"Fuel pump on",  white,  black,  green,  black
	;			=							expression,				off-label,				on-label, off-bg, off-fg,  on-bg,  on-fg
	indicator =					{ is_clt_error },				"CLT OK",			"CLT error",  white,  black,	red,  black
	indicator =					{ is_iat_error },				"IAT OK",			"IAT error",  white,  black,	red,  black
    indicator =             { is_etb1_error },				"ETB1 OK",			"ETB1 error",  white,  black,	red,  black
    indicator =             { is_etb2_error },				"ETB2 OK",			"ETB2 error",  white,  black,	red,  black

    indicator =             { is_etb_rev_limit },				"No ETB RPM Limit",			"ETB RPM Limit",  white,  black, yellow,  black
    indicator =             { is_ignition_rev_limit }, "No ignition RPM Limit",			"Ignition RPM Limit", white,  black,	red,  black

[VerbiageOverrides]
[ConstantExtensions]
[TurboBaud]
[EventTriggers]
[VeAnalyze]
[WueAnalyze]
[Tools]
[LoggerDefinition]
[SettingContextHelp]
[DatalogViews]
