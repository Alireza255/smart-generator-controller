
build/debug/SGC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008098  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08008238  08008238  00009238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008388  08008388  0000a14c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008388  08008388  00009388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008390  08008390  0000a14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008390  08008390  00009390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008394  08008394  00009394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  08008398  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006618  2000014c  080084e4  0000a14c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006764  080084e4  0000a764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b028  00000000  00000000  0000a1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006485  00000000  00000000  000351dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00014454  00000000  00000000  0003b662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c68  00000000  00000000  0004fab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000016ac  00000000  00000000  00051720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ecdd  00000000  00000000  00052dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009b63  00000000  00000000  00071aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c90  00000000  00000000  0007b60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000194  00000000  00000000  0008029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b80c 	b.w	8000280 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f007 fe5a 	bl	8007f28 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__aeabi_idiv0>:
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop

08000284 <__do_global_dtors_aux>:
 8000284:	b510      	push	{r4, lr}
 8000286:	4c05      	ldr	r4, [pc, #20]	@ (800029c <__do_global_dtors_aux+0x18>)
 8000288:	7823      	ldrb	r3, [r4, #0]
 800028a:	b933      	cbnz	r3, 800029a <__do_global_dtors_aux+0x16>
 800028c:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x1c>)
 800028e:	b113      	cbz	r3, 8000296 <__do_global_dtors_aux+0x12>
 8000290:	4804      	ldr	r0, [pc, #16]	@ (80002a4 <__do_global_dtors_aux+0x20>)
 8000292:	f3af 8000 	nop.w
 8000296:	2301      	movs	r3, #1
 8000298:	7023      	strb	r3, [r4, #0]
 800029a:	bd10      	pop	{r4, pc}
 800029c:	2000014c 	.word	0x2000014c
 80002a0:	00000000 	.word	0x00000000
 80002a4:	08008220 	.word	0x08008220

080002a8 <frame_dummy>:
 80002a8:	b508      	push	{r3, lr}
 80002aa:	4b03      	ldr	r3, [pc, #12]	@ (80002b8 <frame_dummy+0x10>)
 80002ac:	b11b      	cbz	r3, 80002b6 <frame_dummy+0xe>
 80002ae:	4903      	ldr	r1, [pc, #12]	@ (80002bc <frame_dummy+0x14>)
 80002b0:	4803      	ldr	r0, [pc, #12]	@ (80002c0 <frame_dummy+0x18>)
 80002b2:	f3af 8000 	nop.w
 80002b6:	bd08      	pop	{r3, pc}
 80002b8:	00000000 	.word	0x00000000
 80002bc:	20000150 	.word	0x20000150
 80002c0:	08008220 	.word	0x08008220

080002c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002c4:	b500      	push	{lr}
 80002c6:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002c8:	2300      	movs	r3, #0
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	9302      	str	r3, [sp, #8]
 80002d0:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80002d2:	4864      	ldr	r0, [pc, #400]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80002d4:	4a64      	ldr	r2, [pc, #400]	@ (8000468 <MX_ADC1_Init+0x1a4>)
 80002d6:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002d8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80002dc:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002de:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80002e0:	2201      	movs	r2, #1
 80002e2:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002e4:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002ea:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ec:	495f      	ldr	r1, [pc, #380]	@ (800046c <MX_ADC1_Init+0x1a8>)
 80002ee:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f0:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 13;
 80002f2:	210d      	movs	r1, #13
 80002f4:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002f6:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002fa:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002fc:	f001 faee 	bl	80018dc <HAL_ADC_Init>
 8000300:	2800      	cmp	r0, #0
 8000302:	f040 8084 	bne.w	800040e <MX_ADC1_Init+0x14a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000306:	230a      	movs	r3, #10
 8000308:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800030a:	2301      	movs	r3, #1
 800030c:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800030e:	2300      	movs	r3, #0
 8000310:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000312:	4669      	mov	r1, sp
 8000314:	4853      	ldr	r0, [pc, #332]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 8000316:	f001 fc0b 	bl	8001b30 <HAL_ADC_ConfigChannel>
 800031a:	2800      	cmp	r0, #0
 800031c:	d17a      	bne.n	8000414 <MX_ADC1_Init+0x150>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800031e:	230b      	movs	r3, #11
 8000320:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8000322:	2302      	movs	r3, #2
 8000324:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000326:	4669      	mov	r1, sp
 8000328:	484e      	ldr	r0, [pc, #312]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 800032a:	f001 fc01 	bl	8001b30 <HAL_ADC_ConfigChannel>
 800032e:	2800      	cmp	r0, #0
 8000330:	d173      	bne.n	800041a <MX_ADC1_Init+0x156>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000332:	230c      	movs	r3, #12
 8000334:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000336:	2303      	movs	r3, #3
 8000338:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800033a:	4669      	mov	r1, sp
 800033c:	4849      	ldr	r0, [pc, #292]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 800033e:	f001 fbf7 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000342:	2800      	cmp	r0, #0
 8000344:	d16c      	bne.n	8000420 <MX_ADC1_Init+0x15c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000346:	230d      	movs	r3, #13
 8000348:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 800034a:	2304      	movs	r3, #4
 800034c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034e:	4669      	mov	r1, sp
 8000350:	4844      	ldr	r0, [pc, #272]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 8000352:	f001 fbed 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000356:	2800      	cmp	r0, #0
 8000358:	d165      	bne.n	8000426 <MX_ADC1_Init+0x162>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800035a:	2300      	movs	r3, #0
 800035c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 5;
 800035e:	2305      	movs	r3, #5
 8000360:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000362:	4669      	mov	r1, sp
 8000364:	483f      	ldr	r0, [pc, #252]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 8000366:	f001 fbe3 	bl	8001b30 <HAL_ADC_ConfigChannel>
 800036a:	2800      	cmp	r0, #0
 800036c:	d15e      	bne.n	800042c <MX_ADC1_Init+0x168>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800036e:	2301      	movs	r3, #1
 8000370:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 6;
 8000372:	2306      	movs	r3, #6
 8000374:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000376:	4669      	mov	r1, sp
 8000378:	483a      	ldr	r0, [pc, #232]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 800037a:	f001 fbd9 	bl	8001b30 <HAL_ADC_ConfigChannel>
 800037e:	2800      	cmp	r0, #0
 8000380:	d157      	bne.n	8000432 <MX_ADC1_Init+0x16e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000382:	2302      	movs	r3, #2
 8000384:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 7;
 8000386:	2307      	movs	r3, #7
 8000388:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	4669      	mov	r1, sp
 800038c:	4835      	ldr	r0, [pc, #212]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 800038e:	f001 fbcf 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000392:	2800      	cmp	r0, #0
 8000394:	d150      	bne.n	8000438 <MX_ADC1_Init+0x174>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000396:	2303      	movs	r3, #3
 8000398:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 8;
 800039a:	2308      	movs	r3, #8
 800039c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039e:	4669      	mov	r1, sp
 80003a0:	4830      	ldr	r0, [pc, #192]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80003a2:	f001 fbc5 	bl	8001b30 <HAL_ADC_ConfigChannel>
 80003a6:	2800      	cmp	r0, #0
 80003a8:	d149      	bne.n	800043e <MX_ADC1_Init+0x17a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80003aa:	2304      	movs	r3, #4
 80003ac:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 9;
 80003ae:	2309      	movs	r3, #9
 80003b0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b2:	4669      	mov	r1, sp
 80003b4:	482b      	ldr	r0, [pc, #172]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80003b6:	f001 fbbb 	bl	8001b30 <HAL_ADC_ConfigChannel>
 80003ba:	2800      	cmp	r0, #0
 80003bc:	d142      	bne.n	8000444 <MX_ADC1_Init+0x180>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003be:	2305      	movs	r3, #5
 80003c0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 10;
 80003c2:	230a      	movs	r3, #10
 80003c4:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c6:	4669      	mov	r1, sp
 80003c8:	4826      	ldr	r0, [pc, #152]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80003ca:	f001 fbb1 	bl	8001b30 <HAL_ADC_ConfigChannel>
 80003ce:	2800      	cmp	r0, #0
 80003d0:	d13b      	bne.n	800044a <MX_ADC1_Init+0x186>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80003d2:	2306      	movs	r3, #6
 80003d4:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 11;
 80003d6:	230b      	movs	r3, #11
 80003d8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003da:	4669      	mov	r1, sp
 80003dc:	4821      	ldr	r0, [pc, #132]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80003de:	f001 fba7 	bl	8001b30 <HAL_ADC_ConfigChannel>
 80003e2:	bba8      	cbnz	r0, 8000450 <MX_ADC1_Init+0x18c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003e4:	2307      	movs	r3, #7
 80003e6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 12;
 80003e8:	230c      	movs	r3, #12
 80003ea:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ec:	4669      	mov	r1, sp
 80003ee:	481d      	ldr	r0, [pc, #116]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80003f0:	f001 fb9e 	bl	8001b30 <HAL_ADC_ConfigChannel>
 80003f4:	bb78      	cbnz	r0, 8000456 <MX_ADC1_Init+0x192>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80003f6:	230e      	movs	r3, #14
 80003f8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 13;
 80003fa:	230d      	movs	r3, #13
 80003fc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fe:	4669      	mov	r1, sp
 8000400:	4818      	ldr	r0, [pc, #96]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 8000402:	f001 fb95 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000406:	bb48      	cbnz	r0, 800045c <MX_ADC1_Init+0x198>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000408:	b005      	add	sp, #20
 800040a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800040e:	f000 fbfb 	bl	8000c08 <Error_Handler>
 8000412:	e778      	b.n	8000306 <MX_ADC1_Init+0x42>
    Error_Handler();
 8000414:	f000 fbf8 	bl	8000c08 <Error_Handler>
 8000418:	e781      	b.n	800031e <MX_ADC1_Init+0x5a>
    Error_Handler();
 800041a:	f000 fbf5 	bl	8000c08 <Error_Handler>
 800041e:	e788      	b.n	8000332 <MX_ADC1_Init+0x6e>
    Error_Handler();
 8000420:	f000 fbf2 	bl	8000c08 <Error_Handler>
 8000424:	e78f      	b.n	8000346 <MX_ADC1_Init+0x82>
    Error_Handler();
 8000426:	f000 fbef 	bl	8000c08 <Error_Handler>
 800042a:	e796      	b.n	800035a <MX_ADC1_Init+0x96>
    Error_Handler();
 800042c:	f000 fbec 	bl	8000c08 <Error_Handler>
 8000430:	e79d      	b.n	800036e <MX_ADC1_Init+0xaa>
    Error_Handler();
 8000432:	f000 fbe9 	bl	8000c08 <Error_Handler>
 8000436:	e7a4      	b.n	8000382 <MX_ADC1_Init+0xbe>
    Error_Handler();
 8000438:	f000 fbe6 	bl	8000c08 <Error_Handler>
 800043c:	e7ab      	b.n	8000396 <MX_ADC1_Init+0xd2>
    Error_Handler();
 800043e:	f000 fbe3 	bl	8000c08 <Error_Handler>
 8000442:	e7b2      	b.n	80003aa <MX_ADC1_Init+0xe6>
    Error_Handler();
 8000444:	f000 fbe0 	bl	8000c08 <Error_Handler>
 8000448:	e7b9      	b.n	80003be <MX_ADC1_Init+0xfa>
    Error_Handler();
 800044a:	f000 fbdd 	bl	8000c08 <Error_Handler>
 800044e:	e7c0      	b.n	80003d2 <MX_ADC1_Init+0x10e>
    Error_Handler();
 8000450:	f000 fbda 	bl	8000c08 <Error_Handler>
 8000454:	e7c6      	b.n	80003e4 <MX_ADC1_Init+0x120>
    Error_Handler();
 8000456:	f000 fbd7 	bl	8000c08 <Error_Handler>
 800045a:	e7cc      	b.n	80003f6 <MX_ADC1_Init+0x132>
    Error_Handler();
 800045c:	f000 fbd4 	bl	8000c08 <Error_Handler>
}
 8000460:	e7d2      	b.n	8000408 <MX_ADC1_Init+0x144>
 8000462:	bf00      	nop
 8000464:	200001c8 	.word	0x200001c8
 8000468:	40012000 	.word	0x40012000
 800046c:	0f000001 	.word	0x0f000001

08000470 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	2300      	movs	r3, #0
 8000476:	9303      	str	r3, [sp, #12]
 8000478:	9304      	str	r3, [sp, #16]
 800047a:	9305      	str	r3, [sp, #20]
 800047c:	9306      	str	r3, [sp, #24]
 800047e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000480:	6802      	ldr	r2, [r0, #0]
 8000482:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000486:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 800048a:	429a      	cmp	r2, r3
 800048c:	d001      	beq.n	8000492 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800048e:	b009      	add	sp, #36	@ 0x24
 8000490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000492:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000494:	2500      	movs	r5, #0
 8000496:	9500      	str	r5, [sp, #0]
 8000498:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 800049c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800049e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80004a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80004a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004a6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80004aa:	9200      	str	r2, [sp, #0]
 80004ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	9501      	str	r5, [sp, #4]
 80004b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004b2:	f042 0204 	orr.w	r2, r2, #4
 80004b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80004b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004ba:	f002 0204 	and.w	r2, r2, #4
 80004be:	9201      	str	r2, [sp, #4]
 80004c0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	9502      	str	r5, [sp, #8]
 80004c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004c6:	f042 0201 	orr.w	r2, r2, #1
 80004ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80004cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	9302      	str	r3, [sp, #8]
 80004d4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD_INPUT1_PIN_Pin|AD_INPUT2_PIN_Pin|AD_INPUT3_PIN_Pin|AD_INPUT4_PIN_Pin
 80004d6:	231f      	movs	r3, #31
 80004d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004da:	2703      	movs	r7, #3
 80004dc:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004de:	ae03      	add	r6, sp, #12
 80004e0:	4631      	mov	r1, r6
 80004e2:	4814      	ldr	r0, [pc, #80]	@ (8000534 <HAL_ADC_MspInit+0xc4>)
 80004e4:	f001 fe5a 	bl	800219c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ETB1_SENSE1_Pin|ETB1_SENSE2_Pin|ETB2_SENSE1_Pin|ETB2_SENSE2_Pin
 80004e8:	23ff      	movs	r3, #255	@ 0xff
 80004ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ec:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	4631      	mov	r1, r6
 80004f2:	4811      	ldr	r0, [pc, #68]	@ (8000538 <HAL_ADC_MspInit+0xc8>)
 80004f4:	f001 fe52 	bl	800219c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80004f8:	4810      	ldr	r0, [pc, #64]	@ (800053c <HAL_ADC_MspInit+0xcc>)
 80004fa:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <HAL_ADC_MspInit+0xd0>)
 80004fc:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80004fe:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000500:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000502:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000504:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000508:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800050a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800050e:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000510:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000514:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000516:	61c5      	str	r5, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000518:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800051c:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800051e:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000520:	f001 fcb4 	bl	8001e8c <HAL_DMA_Init>
 8000524:	b918      	cbnz	r0, 800052e <HAL_ADC_MspInit+0xbe>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000526:	4b05      	ldr	r3, [pc, #20]	@ (800053c <HAL_ADC_MspInit+0xcc>)
 8000528:	63a3      	str	r3, [r4, #56]	@ 0x38
 800052a:	639c      	str	r4, [r3, #56]	@ 0x38
}
 800052c:	e7af      	b.n	800048e <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 800052e:	f000 fb6b 	bl	8000c08 <Error_Handler>
 8000532:	e7f8      	b.n	8000526 <HAL_ADC_MspInit+0xb6>
 8000534:	40020800 	.word	0x40020800
 8000538:	40020000 	.word	0x40020000
 800053c:	20000168 	.word	0x20000168
 8000540:	40026410 	.word	0x40026410

08000544 <HAL_ADC_ConvCpltCallback>:

volatile bool conversion_is_happening = false;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
    conversion_is_happening = false;
 8000544:	4b01      	ldr	r3, [pc, #4]	@ (800054c <HAL_ADC_ConvCpltCallback+0x8>)
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
}
 800054a:	4770      	bx	lr
 800054c:	20000210 	.word	0x20000210

08000550 <analog_inputs_init>:
 *             the configuration information for the specified ADC.
 * @param instance Pointer to the analog_inputs_s structure instance
 *                 that holds the state and configuration of the analog inputs.
 */
void analog_inputs_init(ADC_HandleTypeDef *adc_handle)
{
 8000550:	b508      	push	{r3, lr}
    if (adc_handle == NULL)
 8000552:	b148      	cbz	r0, 8000568 <analog_inputs_init+0x18>
    {
        log_error("Analog input init failed! adc handle is null.");
        return;
    }
    
    hadc = adc_handle;
 8000554:	4a06      	ldr	r2, [pc, #24]	@ (8000570 <analog_inputs_init+0x20>)
 8000556:	6010      	str	r0, [r2, #0]

    conversion_is_happening = true;
 8000558:	4a06      	ldr	r2, [pc, #24]	@ (8000574 <analog_inputs_init+0x24>)
 800055a:	2101      	movs	r1, #1
 800055c:	7011      	strb	r1, [r2, #0]
    HAL_ADC_Start_DMA(hadc, (uint32_t*)&analog_data->raw_values, ANALOG_INPUTS_MAX);
 800055e:	220d      	movs	r2, #13
 8000560:	4905      	ldr	r1, [pc, #20]	@ (8000578 <analog_inputs_init+0x28>)
 8000562:	f001 f9e7 	bl	8001934 <HAL_ADC_Start_DMA>
}
 8000566:	bd08      	pop	{r3, pc}
        log_error("Analog input init failed! adc handle is null.");
 8000568:	4804      	ldr	r0, [pc, #16]	@ (800057c <analog_inputs_init+0x2c>)
 800056a:	f000 f8fb 	bl	8000764 <log_error>
        return;
 800056e:	e7fa      	b.n	8000566 <analog_inputs_init+0x16>
 8000570:	20000368 	.word	0x20000368
 8000574:	20000210 	.word	0x20000210
 8000578:	20000214 	.word	0x20000214
 800057c:	08008238 	.word	0x08008238

08000580 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8000580:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8000582:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000586:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8000588:	f005 f830 	bl	80055ec <xTaskGetSchedulerState>
 800058c:	2801      	cmp	r0, #1
 800058e:	d100      	bne.n	8000592 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8000590:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8000592:	f000 fc8f 	bl	8000eb4 <xPortSysTickHandler>
}
 8000596:	e7fb      	b.n	8000590 <SysTick_Handler+0x10>

08000598 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000598:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800059c:	b92b      	cbnz	r3, 80005aa <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800059e:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <osKernelInitialize+0x20>)
 80005a0:	6818      	ldr	r0, [r3, #0]
 80005a2:	b928      	cbnz	r0, 80005b0 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80005a4:	2201      	movs	r2, #1
 80005a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80005a8:	4770      	bx	lr
    stat = osErrorISR;
 80005aa:	f06f 0005 	mvn.w	r0, #5
 80005ae:	4770      	bx	lr
    } else {
      stat = osError;
 80005b0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000a24 	.word	0x20000a24

080005bc <osKernelStart>:
 80005bc:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80005c0:	b973      	cbnz	r3, 80005e0 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80005c2:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <osKernelStart+0x30>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d10d      	bne.n	80005e6 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 80005ca:	b510      	push	{r4, lr}
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	2400      	movs	r4, #0
 80005ce:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <osKernelStart+0x34>)
 80005d0:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <osKernelStart+0x30>)
 80005d4:	2202      	movs	r2, #2
 80005d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80005d8:	f004 fd64 	bl	80050a4 <vTaskStartScheduler>
      stat = osOK;
 80005dc:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80005de:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80005e0:	f06f 0005 	mvn.w	r0, #5
 80005e4:	4770      	bx	lr
      stat = osError;
 80005e6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80005ea:	4770      	bx	lr
 80005ec:	20000a24 	.word	0x20000a24
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80005f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f6:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80005f8:	2400      	movs	r4, #0
 80005fa:	9405      	str	r4, [sp, #20]
 80005fc:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8000600:	bb04      	cbnz	r4, 8000644 <osThreadNew+0x50>
 8000602:	b1f8      	cbz	r0, 8000644 <osThreadNew+0x50>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8000604:	2a00      	cmp	r2, #0
 8000606:	d034      	beq.n	8000672 <osThreadNew+0x7e>
      if (attr->name != NULL) {
 8000608:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800060a:	6993      	ldr	r3, [r2, #24]
 800060c:	b12b      	cbz	r3, 800061a <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 800060e:	461e      	mov	r6, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000610:	3b01      	subs	r3, #1
 8000612:	2b37      	cmp	r3, #55	@ 0x37
 8000614:	d902      	bls.n	800061c <osThreadNew+0x28>
        return (NULL);
 8000616:	2000      	movs	r0, #0
 8000618:	e015      	b.n	8000646 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;
 800061a:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800061c:	6853      	ldr	r3, [r2, #4]
 800061e:	f013 0f01 	tst.w	r3, #1
 8000622:	d13f      	bne.n	80006a4 <osThreadNew+0xb0>
      }

      if (attr->stack_size > 0U) {
 8000624:	6954      	ldr	r4, [r2, #20]
 8000626:	b184      	cbz	r4, 800064a <osThreadNew+0x56>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8000628:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800062c:	6893      	ldr	r3, [r2, #8]
 800062e:	b12b      	cbz	r3, 800063c <osThreadNew+0x48>
 8000630:	68d7      	ldr	r7, [r2, #12]
 8000632:	2f5b      	cmp	r7, #91	@ 0x5b
 8000634:	d902      	bls.n	800063c <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000636:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000638:	b107      	cbz	r7, 800063c <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800063a:	b984      	cbnz	r4, 800065e <osThreadNew+0x6a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800063c:	b143      	cbz	r3, 8000650 <osThreadNew+0x5c>
    mem  = -1;
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8000642:	b30b      	cbz	r3, 8000688 <osThreadNew+0x94>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8000644:	9805      	ldr	r0, [sp, #20]
}
 8000646:	b007      	add	sp, #28
 8000648:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800064a:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 800064e:	e7ed      	b.n	800062c <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000650:	68d3      	ldr	r3, [r2, #12]
 8000652:	b9a3      	cbnz	r3, 800067e <osThreadNew+0x8a>
 8000654:	6913      	ldr	r3, [r2, #16]
 8000656:	b1ab      	cbz	r3, 8000684 <osThreadNew+0x90>
    mem  = -1;
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
 800065c:	e7f1      	b.n	8000642 <osThreadNew+0x4e>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800065e:	9302      	str	r3, [sp, #8]
 8000660:	9701      	str	r7, [sp, #4]
 8000662:	9600      	str	r6, [sp, #0]
 8000664:	460b      	mov	r3, r1
 8000666:	4662      	mov	r2, ip
 8000668:	4629      	mov	r1, r5
 800066a:	f004 fcad 	bl	8004fc8 <xTaskCreateStatic>
 800066e:	9005      	str	r0, [sp, #20]
 8000670:	e7e8      	b.n	8000644 <osThreadNew+0x50>
    name = NULL;
 8000672:	4615      	mov	r5, r2
      mem = 0;
 8000674:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8000676:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 8000678:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 800067c:	e7e1      	b.n	8000642 <osThreadNew+0x4e>
    mem  = -1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	e7de      	b.n	8000642 <osThreadNew+0x4e>
          mem = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	e7dc      	b.n	8000642 <osThreadNew+0x4e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000688:	ab05      	add	r3, sp, #20
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	9600      	str	r6, [sp, #0]
 800068e:	460b      	mov	r3, r1
 8000690:	fa1f f28c 	uxth.w	r2, ip
 8000694:	4629      	mov	r1, r5
 8000696:	f004 fcd2 	bl	800503e <xTaskCreate>
 800069a:	2801      	cmp	r0, #1
 800069c:	d0d2      	beq.n	8000644 <osThreadNew+0x50>
            hTask = NULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	9305      	str	r3, [sp, #20]
 80006a2:	e7cf      	b.n	8000644 <osThreadNew+0x50>
        return (NULL);
 80006a4:	2000      	movs	r0, #0
 80006a6:	e7ce      	b.n	8000646 <osThreadNew+0x52>

080006a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80006a8:	b508      	push	{r3, lr}
 80006aa:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80006ae:	b933      	cbnz	r3, 80006be <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80006b0:	b908      	cbnz	r0, 80006b6 <osDelay+0xe>
    stat = osOK;
 80006b2:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80006b4:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 80006b6:	f004 fe57 	bl	8005368 <vTaskDelay>
    stat = osOK;
 80006ba:	2000      	movs	r0, #0
 80006bc:	e7fa      	b.n	80006b4 <osDelay+0xc>
    stat = osErrorISR;
 80006be:	f06f 0005 	mvn.w	r0, #5
 80006c2:	e7f7      	b.n	80006b4 <osDelay+0xc>

080006c4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80006c4:	4b03      	ldr	r3, [pc, #12]	@ (80006d4 <vApplicationGetIdleTaskMemory+0x10>)
 80006c6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80006c8:	4b03      	ldr	r3, [pc, #12]	@ (80006d8 <vApplicationGetIdleTaskMemory+0x14>)
 80006ca:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80006cc:	2380      	movs	r3, #128	@ 0x80
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	200009c8 	.word	0x200009c8
 80006d8:	200007c8 	.word	0x200007c8

080006dc <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80006dc:	4b03      	ldr	r3, [pc, #12]	@ (80006ec <vApplicationGetTimerTaskMemory+0x10>)
 80006de:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80006e0:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <vApplicationGetTimerTaskMemory+0x14>)
 80006e2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80006e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e8:	6013      	str	r3, [r2, #0]
}
 80006ea:	4770      	bx	lr
 80006ec:	2000076c 	.word	0x2000076c
 80006f0:	2000036c 	.word	0x2000036c

080006f4 <controller_time_start>:

TIM_HandleTypeDef *timer = NULL;

void controller_time_start(TIM_HandleTypeDef *htim)
{
    if (htim == NULL)
 80006f4:	b178      	cbz	r0, 8000716 <controller_time_start+0x22>
{
 80006f6:	b510      	push	{r4, lr}
        /**
         * @todo throw an error
         */
        return;
    }
    timer = htim;
 80006f8:	4c07      	ldr	r4, [pc, #28]	@ (8000718 <controller_time_start+0x24>)
 80006fa:	6020      	str	r0, [r4, #0]
    /**
     * This assumes that sys clock is the same as timer clock
     */
    timer->Instance->PSC = (HAL_RCC_GetSysClockFreq() / 1000000UL) - 1;
 80006fc:	f002 fe9a 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <controller_time_start+0x28>)
 8000702:	fba3 2300 	umull	r2, r3, r3, r0
 8000706:	0c9b      	lsrs	r3, r3, #18
 8000708:	6820      	ldr	r0, [r4, #0]
 800070a:	6802      	ldr	r2, [r0, #0]
 800070c:	3b01      	subs	r3, #1
 800070e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_TIM_Base_Start(timer);
 8000710:	f003 f874 	bl	80037fc <HAL_TIM_Base_Start>
}
 8000714:	bd10      	pop	{r4, pc}
 8000716:	4770      	bx	lr
 8000718:	20000a28 	.word	0x20000a28
 800071c:	431bde83 	.word	0x431bde83

08000720 <get_time_us>:

time_us_t get_time_us(void)
{
    return timer->Instance->CNT;
 8000720:	4b02      	ldr	r3, [pc, #8]	@ (800072c <get_time_us+0xc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000a28 	.word	0x20000a28

08000730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000730:	b500      	push	{lr}
 8000732:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000734:	2200      	movs	r2, #0
 8000736:	9201      	str	r2, [sp, #4]
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_DMA_Init+0x30>)
 800073a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800073c:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8000740:	6319      	str	r1, [r3, #48]	@ 0x30
 8000742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000748:	9301      	str	r3, [sp, #4]
 800074a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800074c:	2105      	movs	r1, #5
 800074e:	2038      	movs	r0, #56	@ 0x38
 8000750:	f001 fb0c 	bl	8001d6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000754:	2038      	movs	r0, #56	@ 0x38
 8000756:	f001 fb19 	bl	8001d8c <HAL_NVIC_EnableIRQ>

}
 800075a:	b003      	add	sp, #12
 800075c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000760:	40023800 	.word	0x40023800

08000764 <log_error>:
#include "error_handling.h"


void log_error(const char* message)
{
    if (message == NULL) return;
 8000764:	b1c0      	cbz	r0, 8000798 <log_error+0x34>
{
 8000766:	b570      	push	{r4, r5, r6, lr}
 8000768:	b09a      	sub	sp, #104	@ 0x68
 800076a:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 800076c:	ac01      	add	r4, sp, #4
 800076e:	2564      	movs	r5, #100	@ 0x64
 8000770:	462a      	mov	r2, r5
 8000772:	2100      	movs	r1, #0
 8000774:	4620      	mov	r0, r4
 8000776:	f006 ff53 	bl	8007620 <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Error: %s\n", message);
 800077a:	4633      	mov	r3, r6
 800077c:	4a07      	ldr	r2, [pc, #28]	@ (800079c <log_error+0x38>)
 800077e:	4629      	mov	r1, r5
 8000780:	4620      	mov	r0, r4
 8000782:	f006 ff17 	bl	80075b4 <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 8000786:	4620      	mov	r0, r4
 8000788:	f7ff fd0a 	bl	80001a0 <strlen>
 800078c:	b281      	uxth	r1, r0
 800078e:	4620      	mov	r0, r4
 8000790:	f005 fefc 	bl	800658c <CDC_Transmit_FS>
}
 8000794:	b01a      	add	sp, #104	@ 0x68
 8000796:	bd70      	pop	{r4, r5, r6, pc}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	08008268 	.word	0x08008268

080007a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007a0:	b508      	push	{r3, lr}
 80007a2:	ed2d 8b02 	vpush	{d8}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007a6:	f005 fc23 	bl	8005ff0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  for (size_t i = 0; i < 16; i++)
 80007aa:	2100      	movs	r1, #0
 80007ac:	e01e      	b.n	80007ec <StartDefaultTask+0x4c>
  {
    for (size_t j = 0; j < 16; j++)
    {
      test_table.data[i][j] = (float)i * (float)j / (float)16 / (float)16 * FIRMWARE_LIMIT_MAX_MAP;
 80007ae:	ee07 1a90 	vmov	s15, r1
 80007b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007b6:	ee07 3a10 	vmov	s14, r3
 80007ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80007be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007c2:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800082c <StartDefaultTask+0x8c>
 80007c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007ce:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000830 <StartDefaultTask+0x90>
 80007d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007d6:	eb03 1001 	add.w	r0, r3, r1, lsl #4
 80007da:	4a16      	ldr	r2, [pc, #88]	@ (8000834 <StartDefaultTask+0x94>)
 80007dc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80007e0:	edc2 7a00 	vstr	s15, [r2]
    for (size_t j = 0; j < 16; j++)
 80007e4:	3301      	adds	r3, #1
 80007e6:	2b0f      	cmp	r3, #15
 80007e8:	d9e1      	bls.n	80007ae <StartDefaultTask+0xe>
  for (size_t i = 0; i < 16; i++)
 80007ea:	3101      	adds	r1, #1
 80007ec:	290f      	cmp	r1, #15
 80007ee:	d819      	bhi.n	8000824 <StartDefaultTask+0x84>
    for (size_t j = 0; j < 16; j++)
 80007f0:	2300      	movs	r3, #0
 80007f2:	e7f8      	b.n	80007e6 <StartDefaultTask+0x46>
  /* Infinite loop */
  for(;;)
  {
    for (rpm_t i = 0; i < FIRMWARE_LIMIT_MAX_RPM; i = i + 200)
    { 
      table_result = table_ve_get_value(&test_table, i, 50);
 80007f4:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8000838 <StartDefaultTask+0x98>
 80007f8:	eeb0 0a48 	vmov.f32	s0, s16
 80007fc:	480d      	ldr	r0, [pc, #52]	@ (8000834 <StartDefaultTask+0x94>)
 80007fe:	f004 fa17 	bl	8004c30 <table_ve_get_value>
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <StartDefaultTask+0x9c>)
 8000804:	ed83 0a00 	vstr	s0, [r3]
      osDelay(250);
 8000808:	20fa      	movs	r0, #250	@ 0xfa
 800080a:	f7ff ff4d 	bl	80006a8 <osDelay>
    for (rpm_t i = 0; i < FIRMWARE_LIMIT_MAX_RPM; i = i + 200)
 800080e:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8000840 <StartDefaultTask+0xa0>
 8000812:	ee38 8a27 	vadd.f32	s16, s16, s15
 8000816:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8000844 <StartDefaultTask+0xa4>
 800081a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800081e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000822:	d4e7      	bmi.n	80007f4 <StartDefaultTask+0x54>
 8000824:	ed9f 8a08 	vldr	s16, [pc, #32]	@ 8000848 <StartDefaultTask+0xa8>
 8000828:	e7f5      	b.n	8000816 <StartDefaultTask+0x76>
 800082a:	bf00      	nop
 800082c:	3d800000 	.word	0x3d800000
 8000830:	42f00000 	.word	0x42f00000
 8000834:	20000a34 	.word	0x20000a34
 8000838:	42480000 	.word	0x42480000
 800083c:	20000a30 	.word	0x20000a30
 8000840:	43480000 	.word	0x43480000
 8000844:	45bb8000 	.word	0x45bb8000
 8000848:	00000000 	.word	0x00000000

0800084c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800084c:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800084e:	4a04      	ldr	r2, [pc, #16]	@ (8000860 <MX_FREERTOS_Init+0x14>)
 8000850:	2100      	movs	r1, #0
 8000852:	4804      	ldr	r0, [pc, #16]	@ (8000864 <MX_FREERTOS_Init+0x18>)
 8000854:	f7ff fece 	bl	80005f4 <osThreadNew>
 8000858:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <MX_FREERTOS_Init+0x1c>)
 800085a:	6018      	str	r0, [r3, #0]
}
 800085c:	bd08      	pop	{r3, pc}
 800085e:	bf00      	nop
 8000860:	08008310 	.word	0x08008310
 8000864:	080007a1 	.word	0x080007a1
 8000868:	20000a2c 	.word	0x20000a2c

0800086c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800086c:	b510      	push	{r4, lr}
 800086e:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	a905      	add	r1, sp, #20
 8000872:	2400      	movs	r4, #0
 8000874:	9405      	str	r4, [sp, #20]
 8000876:	604c      	str	r4, [r1, #4]
 8000878:	608c      	str	r4, [r1, #8]
 800087a:	60cc      	str	r4, [r1, #12]
 800087c:	610c      	str	r4, [r1, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	9401      	str	r4, [sp, #4]
 8000880:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <MX_GPIO_Init+0x90>)
 8000882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000884:	f042 0204 	orr.w	r2, r2, #4
 8000888:	631a      	str	r2, [r3, #48]	@ 0x30
 800088a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800088c:	f002 0204 	and.w	r2, r2, #4
 8000890:	9201      	str	r2, [sp, #4]
 8000892:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000894:	9402      	str	r4, [sp, #8]
 8000896:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000898:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800089c:	631a      	str	r2, [r3, #48]	@ 0x30
 800089e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008a0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80008a4:	9202      	str	r2, [sp, #8]
 80008a6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	9403      	str	r4, [sp, #12]
 80008aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008ac:	f042 0201 	orr.w	r2, r2, #1
 80008b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80008b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008b4:	f002 0201 	and.w	r2, r2, #1
 80008b8:	9203      	str	r2, [sp, #12]
 80008ba:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	9404      	str	r4, [sp, #16]
 80008be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008c0:	f042 0202 	orr.w	r2, r2, #2
 80008c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80008c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c8:	f003 0302 	and.w	r3, r3, #2
 80008cc:	9304      	str	r3, [sp, #16]
 80008ce:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008da:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008dc:	2302      	movs	r3, #2
 80008de:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	4807      	ldr	r0, [pc, #28]	@ (8000900 <MX_GPIO_Init+0x94>)
 80008e2:	f001 fc5b 	bl	800219c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008e6:	4622      	mov	r2, r4
 80008e8:	2105      	movs	r1, #5
 80008ea:	2028      	movs	r0, #40	@ 0x28
 80008ec:	f001 fa3e 	bl	8001d6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008f0:	2028      	movs	r0, #40	@ 0x28
 80008f2:	f001 fa4b 	bl	8001d8c <HAL_NVIC_EnableIRQ>

}
 80008f6:	b00a      	add	sp, #40	@ 0x28
 80008f8:	bd10      	pop	{r4, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020400 	.word	0x40020400

08000904 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000904:	4a12      	ldr	r2, [pc, #72]	@ (8000950 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000906:	f012 0f07 	tst.w	r2, #7
 800090a:	d01e      	beq.n	800094a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800090c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800090e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000912:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 8000916:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000918:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800091a:	480e      	ldr	r0, [pc, #56]	@ (8000954 <prvHeapInit+0x50>)
 800091c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800091e:	2100      	movs	r1, #0
 8000920:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000922:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8000924:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000926:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800092a:	480b      	ldr	r0, [pc, #44]	@ (8000958 <prvHeapInit+0x54>)
 800092c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800092e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000930:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000932:	1a99      	subs	r1, r3, r2
 8000934:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000936:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000938:	4b08      	ldr	r3, [pc, #32]	@ (800095c <prvHeapInit+0x58>)
 800093a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <prvHeapInit+0x5c>)
 800093e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <prvHeapInit+0x60>)
 8000942:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000946:	601a      	str	r2, [r3, #0]
}
 8000948:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800094a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800094e:	e7e4      	b.n	800091a <prvHeapInit+0x16>
 8000950:	20000e54 	.word	0x20000e54
 8000954:	20000e4c 	.word	0x20000e4c
 8000958:	20000e48 	.word	0x20000e48
 800095c:	20000e40 	.word	0x20000e40
 8000960:	20000e44 	.word	0x20000e44
 8000964:	20000e34 	.word	0x20000e34

08000968 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000968:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <prvInsertBlockIntoFreeList+0x5c>)
 800096a:	461a      	mov	r2, r3
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4283      	cmp	r3, r0
 8000970:	d3fb      	bcc.n	800096a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000972:	6851      	ldr	r1, [r2, #4]
 8000974:	eb02 0c01 	add.w	ip, r2, r1
 8000978:	4584      	cmp	ip, r0
 800097a:	d009      	beq.n	8000990 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800097c:	6841      	ldr	r1, [r0, #4]
 800097e:	eb00 0c01 	add.w	ip, r0, r1
 8000982:	4563      	cmp	r3, ip
 8000984:	d009      	beq.n	800099a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000986:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000988:	4290      	cmp	r0, r2
 800098a:	d019      	beq.n	80009c0 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800098c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800098e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000990:	6840      	ldr	r0, [r0, #4]
 8000992:	4401      	add	r1, r0
 8000994:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8000996:	4610      	mov	r0, r2
 8000998:	e7f0      	b.n	800097c <prvInsertBlockIntoFreeList+0x14>
{
 800099a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800099c:	4c0a      	ldr	r4, [pc, #40]	@ (80009c8 <prvInsertBlockIntoFreeList+0x60>)
 800099e:	6824      	ldr	r4, [r4, #0]
 80009a0:	42a3      	cmp	r3, r4
 80009a2:	d00b      	beq.n	80009bc <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	4419      	add	r1, r3
 80009a8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80009aa:	6813      	ldr	r3, [r2, #0]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80009b0:	4290      	cmp	r0, r2
 80009b2:	d000      	beq.n	80009b6 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80009b4:	6010      	str	r0, [r2, #0]
	}
}
 80009b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009ba:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80009bc:	6004      	str	r4, [r0, #0]
 80009be:	e7f7      	b.n	80009b0 <prvInsertBlockIntoFreeList+0x48>
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000e4c 	.word	0x20000e4c
 80009c8:	20000e48 	.word	0x20000e48

080009cc <pvPortMalloc>:
{
 80009cc:	b538      	push	{r3, r4, r5, lr}
 80009ce:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80009d0:	f004 fbb4 	bl	800513c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80009d4:	4b38      	ldr	r3, [pc, #224]	@ (8000ab8 <pvPortMalloc+0xec>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	b1b3      	cbz	r3, 8000a08 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009da:	4b38      	ldr	r3, [pc, #224]	@ (8000abc <pvPortMalloc+0xf0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	421c      	tst	r4, r3
 80009e0:	d150      	bne.n	8000a84 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 80009e2:	2c00      	cmp	r4, #0
 80009e4:	d050      	beq.n	8000a88 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 80009e6:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80009ea:	f014 0f07 	tst.w	r4, #7
 80009ee:	d002      	beq.n	80009f6 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80009f0:	f022 0207 	bic.w	r2, r2, #7
 80009f4:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80009f6:	2a00      	cmp	r2, #0
 80009f8:	d055      	beq.n	8000aa6 <pvPortMalloc+0xda>
 80009fa:	4b31      	ldr	r3, [pc, #196]	@ (8000ac0 <pvPortMalloc+0xf4>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d353      	bcc.n	8000aaa <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8000a02:	4930      	ldr	r1, [pc, #192]	@ (8000ac4 <pvPortMalloc+0xf8>)
 8000a04:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a06:	e004      	b.n	8000a12 <pvPortMalloc+0x46>
			prvHeapInit();
 8000a08:	f7ff ff7c 	bl	8000904 <prvHeapInit>
 8000a0c:	e7e5      	b.n	80009da <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8000a0e:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a10:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a12:	6863      	ldr	r3, [r4, #4]
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d202      	bcs.n	8000a1e <pvPortMalloc+0x52>
 8000a18:	6823      	ldr	r3, [r4, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1f7      	bne.n	8000a0e <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8000a1e:	4b26      	ldr	r3, [pc, #152]	@ (8000ab8 <pvPortMalloc+0xec>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	42a3      	cmp	r3, r4
 8000a24:	d043      	beq.n	8000aae <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a26:	680d      	ldr	r5, [r1, #0]
 8000a28:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a2a:	6823      	ldr	r3, [r4, #0]
 8000a2c:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a2e:	6863      	ldr	r3, [r4, #4]
 8000a30:	1a9b      	subs	r3, r3, r2
 8000a32:	2b10      	cmp	r3, #16
 8000a34:	d910      	bls.n	8000a58 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a36:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a38:	f010 0f07 	tst.w	r0, #7
 8000a3c:	d008      	beq.n	8000a50 <pvPortMalloc+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a42:	f383 8811 	msr	BASEPRI, r3
 8000a46:	f3bf 8f6f 	isb	sy
 8000a4a:	f3bf 8f4f 	dsb	sy
 8000a4e:	e7fe      	b.n	8000a4e <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000a50:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000a52:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000a54:	f7ff ff88 	bl	8000968 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000a58:	6862      	ldr	r2, [r4, #4]
 8000a5a:	4919      	ldr	r1, [pc, #100]	@ (8000ac0 <pvPortMalloc+0xf4>)
 8000a5c:	680b      	ldr	r3, [r1, #0]
 8000a5e:	1a9b      	subs	r3, r3, r2
 8000a60:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000a62:	4919      	ldr	r1, [pc, #100]	@ (8000ac8 <pvPortMalloc+0xfc>)
 8000a64:	6809      	ldr	r1, [r1, #0]
 8000a66:	428b      	cmp	r3, r1
 8000a68:	d201      	bcs.n	8000a6e <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000a6a:	4917      	ldr	r1, [pc, #92]	@ (8000ac8 <pvPortMalloc+0xfc>)
 8000a6c:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <pvPortMalloc+0xf0>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8000a7a:	4a14      	ldr	r2, [pc, #80]	@ (8000acc <pvPortMalloc+0x100>)
 8000a7c:	6813      	ldr	r3, [r2, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e002      	b.n	8000a8a <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8000a84:	2500      	movs	r5, #0
 8000a86:	e000      	b.n	8000a8a <pvPortMalloc+0xbe>
 8000a88:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8000a8a:	f004 fbf1 	bl	8005270 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a8e:	f015 0f07 	tst.w	r5, #7
 8000a92:	d00e      	beq.n	8000ab2 <pvPortMalloc+0xe6>
 8000a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a98:	f383 8811 	msr	BASEPRI, r3
 8000a9c:	f3bf 8f6f 	isb	sy
 8000aa0:	f3bf 8f4f 	dsb	sy
 8000aa4:	e7fe      	b.n	8000aa4 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8000aa6:	2500      	movs	r5, #0
 8000aa8:	e7ef      	b.n	8000a8a <pvPortMalloc+0xbe>
 8000aaa:	2500      	movs	r5, #0
 8000aac:	e7ed      	b.n	8000a8a <pvPortMalloc+0xbe>
 8000aae:	2500      	movs	r5, #0
 8000ab0:	e7eb      	b.n	8000a8a <pvPortMalloc+0xbe>
}
 8000ab2:	4628      	mov	r0, r5
 8000ab4:	bd38      	pop	{r3, r4, r5, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000e48 	.word	0x20000e48
 8000abc:	20000e34 	.word	0x20000e34
 8000ac0:	20000e44 	.word	0x20000e44
 8000ac4:	20000e4c 	.word	0x20000e4c
 8000ac8:	20000e40 	.word	0x20000e40
 8000acc:	20000e3c 	.word	0x20000e3c

08000ad0 <vPortFree>:
	if( pv != NULL )
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d034      	beq.n	8000b3e <vPortFree+0x6e>
{
 8000ad4:	b538      	push	{r3, r4, r5, lr}
 8000ad6:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8000ad8:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000adc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8000ae0:	4a17      	ldr	r2, [pc, #92]	@ (8000b40 <vPortFree+0x70>)
 8000ae2:	6812      	ldr	r2, [r2, #0]
 8000ae4:	4213      	tst	r3, r2
 8000ae6:	d108      	bne.n	8000afa <vPortFree+0x2a>
 8000ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000aec:	f383 8811 	msr	BASEPRI, r3
 8000af0:	f3bf 8f6f 	isb	sy
 8000af4:	f3bf 8f4f 	dsb	sy
 8000af8:	e7fe      	b.n	8000af8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000afa:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8000afe:	b141      	cbz	r1, 8000b12 <vPortFree+0x42>
 8000b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b04:	f383 8811 	msr	BASEPRI, r3
 8000b08:	f3bf 8f6f 	isb	sy
 8000b0c:	f3bf 8f4f 	dsb	sy
 8000b10:	e7fe      	b.n	8000b10 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000b12:	ea23 0302 	bic.w	r3, r3, r2
 8000b16:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8000b1a:	f004 fb0f 	bl	800513c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000b1e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8000b22:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <vPortFree+0x74>)
 8000b24:	6813      	ldr	r3, [r2, #0]
 8000b26:	440b      	add	r3, r1
 8000b28:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	f7ff ff1c 	bl	8000968 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000b30:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <vPortFree+0x78>)
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8000b38:	f004 fb9a 	bl	8005270 <xTaskResumeAll>
}
 8000b3c:	bd38      	pop	{r3, r4, r5, pc}
 8000b3e:	4770      	bx	lr
 8000b40:	20000e34 	.word	0x20000e34
 8000b44:	20000e44 	.word	0x20000e44
 8000b48:	20000e38 	.word	0x20000e38

08000b4c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b4c:	f100 0308 	add.w	r3, r0, #8
 8000b50:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000b52:	f04f 32ff 	mov.w	r2, #4294967295
 8000b56:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b58:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b5a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000b60:	4770      	bx	lr

08000b62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000b66:	4770      	bx	lr

08000b68 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000b68:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000b6a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000b70:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000b72:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000b74:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000b76:	6803      	ldr	r3, [r0, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	6003      	str	r3, [r0, #0]
}
 8000b7c:	4770      	bx	lr

08000b7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000b7e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000b80:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000b82:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000b86:	d011      	beq.n	8000bac <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000b88:	f100 0308 	add.w	r3, r0, #8
 8000b8c:	461c      	mov	r4, r3
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	42aa      	cmp	r2, r5
 8000b94:	d9fa      	bls.n	8000b8c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000b96:	6863      	ldr	r3, [r4, #4]
 8000b98:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000b9a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000b9c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000b9e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000ba0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000ba2:	6803      	ldr	r3, [r0, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	6003      	str	r3, [r0, #0]
}
 8000ba8:	bc30      	pop	{r4, r5}
 8000baa:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8000bac:	6904      	ldr	r4, [r0, #16]
 8000bae:	e7f2      	b.n	8000b96 <vListInsert+0x18>

08000bb0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000bb0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000bb2:	6841      	ldr	r1, [r0, #4]
 8000bb4:	6882      	ldr	r2, [r0, #8]
 8000bb6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000bb8:	6841      	ldr	r1, [r0, #4]
 8000bba:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000bbc:	685a      	ldr	r2, [r3, #4]
 8000bbe:	4282      	cmp	r2, r0
 8000bc0:	d006      	beq.n	8000bd0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	3a01      	subs	r2, #1
 8000bca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000bcc:	6818      	ldr	r0, [r3, #0]
}
 8000bce:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000bd0:	6882      	ldr	r2, [r0, #8]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	e7f5      	b.n	8000bc2 <uxListRemove+0x12>
	...

08000bd8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_12)
 8000bd8:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8000bdc:	d000      	beq.n	8000be0 <HAL_GPIO_EXTI_Callback+0x8>
 8000bde:	4770      	bx	lr
{
 8000be0:	b508      	push	{r3, lr}
  {
    trigger_tooth_handle(&engine.trigger);
 8000be2:	4802      	ldr	r0, [pc, #8]	@ (8000bec <HAL_GPIO_EXTI_Callback+0x14>)
 8000be4:	f005 f958 	bl	8005e98 <trigger_tooth_handle>
  }
}
 8000be8:	bd08      	pop	{r3, pc}
 8000bea:	bf00      	nop
 8000bec:	20004a6c 	.word	0x20004a6c

08000bf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 8000bf2:	6802      	ldr	r2, [r0, #0]
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d000      	beq.n	8000bfc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfa:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000bfc:	f000 fdae 	bl	800175c <HAL_IncTick>
}
 8000c00:	e7fb      	b.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0xa>
 8000c02:	bf00      	nop
 8000c04:	40014800 	.word	0x40014800

08000c08 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <Error_Handler+0x2>

08000c0c <SystemClock_Config>:
{
 8000c0c:	b510      	push	{r4, lr}
 8000c0e:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c10:	ac08      	add	r4, sp, #32
 8000c12:	2230      	movs	r2, #48	@ 0x30
 8000c14:	2100      	movs	r1, #0
 8000c16:	4620      	mov	r0, r4
 8000c18:	f006 fd02 	bl	8007620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	9303      	str	r3, [sp, #12]
 8000c20:	9304      	str	r3, [sp, #16]
 8000c22:	9305      	str	r3, [sp, #20]
 8000c24:	9306      	str	r3, [sp, #24]
 8000c26:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	4a21      	ldr	r2, [pc, #132]	@ (8000cb0 <SystemClock_Config+0xa4>)
 8000c2c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000c2e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000c32:	6411      	str	r1, [r2, #64]	@ 0x40
 8000c34:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000c36:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000c3a:	9201      	str	r2, [sp, #4]
 8000c3c:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c3e:	9302      	str	r3, [sp, #8]
 8000c40:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb4 <SystemClock_Config+0xa8>)
 8000c42:	6813      	ldr	r3, [r2, #0]
 8000c44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c54:	9302      	str	r3, [sp, #8]
 8000c56:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c60:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c62:	2302      	movs	r3, #2
 8000c64:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c6a:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c6c:	2319      	movs	r3, #25
 8000c6e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c70:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c74:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c76:	2304      	movs	r3, #4
 8000c78:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	4620      	mov	r0, r4
 8000c80:	f002 f9dc 	bl	800303c <HAL_RCC_OscConfig>
 8000c84:	b978      	cbnz	r0, 8000ca6 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c86:	230f      	movs	r3, #15
 8000c88:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c96:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c98:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c9a:	a803      	add	r0, sp, #12
 8000c9c:	f002 fc1e 	bl	80034dc <HAL_RCC_ClockConfig>
 8000ca0:	b918      	cbnz	r0, 8000caa <SystemClock_Config+0x9e>
}
 8000ca2:	b014      	add	sp, #80	@ 0x50
 8000ca4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ca6:	f7ff ffaf 	bl	8000c08 <Error_Handler>
    Error_Handler();
 8000caa:	f7ff ffad 	bl	8000c08 <Error_Handler>
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40007000 	.word	0x40007000

08000cb8 <main>:
{
 8000cb8:	b508      	push	{r3, lr}
  HAL_Init();
 8000cba:	f000 fd35 	bl	8001728 <HAL_Init>
  SystemClock_Config();
 8000cbe:	f7ff ffa5 	bl	8000c0c <SystemClock_Config>
  MX_GPIO_Init();
 8000cc2:	f7ff fdd3 	bl	800086c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc6:	f7ff fd33 	bl	8000730 <MX_DMA_Init>
  MX_TIM5_Init();
 8000cca:	f004 fce7 	bl	800569c <MX_TIM5_Init>
  MX_TIM3_Init();
 8000cce:	f004 fe43 	bl	8005958 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000cd2:	f7ff faf7 	bl	80002c4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000cd6:	f004 fdaf 	bl	8005838 <MX_TIM1_Init>
  controller_time_start(&htim5);
 8000cda:	4806      	ldr	r0, [pc, #24]	@ (8000cf4 <main+0x3c>)
 8000cdc:	f7ff fd0a 	bl	80006f4 <controller_time_start>
  analog_inputs_init(&hadc1);
 8000ce0:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <main+0x40>)
 8000ce2:	f7ff fc35 	bl	8000550 <analog_inputs_init>
  osKernelInitialize();
 8000ce6:	f7ff fc57 	bl	8000598 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000cea:	f7ff fdaf 	bl	800084c <MX_FREERTOS_Init>
  osKernelStart();
 8000cee:	f7ff fc65 	bl	80005bc <osKernelStart>
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <main+0x3a>
 8000cf4:	20005030 	.word	0x20005030
 8000cf8:	200001c8 	.word	0x200001c8

08000cfc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000cfc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <prvTaskExitError+0x3c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0a:	d008      	beq.n	8000d1e <prvTaskExitError+0x22>
 8000d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d10:	f383 8811 	msr	BASEPRI, r3
 8000d14:	f3bf 8f6f 	isb	sy
 8000d18:	f3bf 8f4f 	dsb	sy
 8000d1c:	e7fe      	b.n	8000d1c <prvTaskExitError+0x20>
 8000d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d22:	f383 8811 	msr	BASEPRI, r3
 8000d26:	f3bf 8f6f 	isb	sy
 8000d2a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000d2e:	9b01      	ldr	r3, [sp, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0fc      	beq.n	8000d2e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000d34:	b002      	add	sp, #8
 8000d36:	4770      	bx	lr
 8000d38:	20000000 	.word	0x20000000

08000d3c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8000d3c:	4808      	ldr	r0, [pc, #32]	@ (8000d60 <prvPortStartFirstTask+0x24>)
 8000d3e:	6800      	ldr	r0, [r0, #0]
 8000d40:	6800      	ldr	r0, [r0, #0]
 8000d42:	f380 8808 	msr	MSP, r0
 8000d46:	f04f 0000 	mov.w	r0, #0
 8000d4a:	f380 8814 	msr	CONTROL, r0
 8000d4e:	b662      	cpsie	i
 8000d50:	b661      	cpsie	f
 8000d52:	f3bf 8f4f 	dsb	sy
 8000d56:	f3bf 8f6f 	isb	sy
 8000d5a:	df00      	svc	0
 8000d5c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000d5e:	0000      	.short	0x0000
 8000d60:	e000ed08 	.word	0xe000ed08

08000d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000d64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8000d74 <vPortEnableVFP+0x10>
 8000d68:	6801      	ldr	r1, [r0, #0]
 8000d6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000d6e:	6001      	str	r1, [r0, #0]
 8000d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8000d72:	0000      	.short	0x0000
 8000d74:	e000ed88 	.word	0xe000ed88

08000d78 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000d78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d7c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000d80:	f021 0101 	bic.w	r1, r1, #1
 8000d84:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <pxPortInitialiseStack+0x28>)
 8000d8a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000d8e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8000d92:	f06f 0302 	mvn.w	r3, #2
 8000d96:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8000d9a:	3844      	subs	r0, #68	@ 0x44
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	08000cfd 	.word	0x08000cfd
	...

08000db0 <SVC_Handler>:
	__asm volatile (
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <pxCurrentTCBConst2>)
 8000db2:	6819      	ldr	r1, [r3, #0]
 8000db4:	6808      	ldr	r0, [r1, #0]
 8000db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dba:	f380 8809 	msr	PSP, r0
 8000dbe:	f3bf 8f6f 	isb	sy
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f380 8811 	msr	BASEPRI, r0
 8000dca:	4770      	bx	lr
 8000dcc:	f3af 8000 	nop.w

08000dd0 <pxCurrentTCBConst2>:
 8000dd0:	2000502c 	.word	0x2000502c

08000dd4 <vPortEnterCritical>:
 8000dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dd8:	f383 8811 	msr	BASEPRI, r3
 8000ddc:	f3bf 8f6f 	isb	sy
 8000de0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8000de4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e14 <vPortEnterCritical+0x40>)
 8000de6:	6813      	ldr	r3, [r2, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d000      	beq.n	8000df2 <vPortEnterCritical+0x1e>
}
 8000df0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000df2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000df6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8000dfa:	f013 0fff 	tst.w	r3, #255	@ 0xff
 8000dfe:	d0f7      	beq.n	8000df0 <vPortEnterCritical+0x1c>
 8000e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e04:	f383 8811 	msr	BASEPRI, r3
 8000e08:	f3bf 8f6f 	isb	sy
 8000e0c:	f3bf 8f4f 	dsb	sy
 8000e10:	e7fe      	b.n	8000e10 <vPortEnterCritical+0x3c>
 8000e12:	bf00      	nop
 8000e14:	20000000 	.word	0x20000000

08000e18 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8000e18:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <vPortExitCritical+0x28>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	b943      	cbnz	r3, 8000e30 <vPortExitCritical+0x18>
 8000e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e22:	f383 8811 	msr	BASEPRI, r3
 8000e26:	f3bf 8f6f 	isb	sy
 8000e2a:	f3bf 8f4f 	dsb	sy
 8000e2e:	e7fe      	b.n	8000e2e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8000e30:	3b01      	subs	r3, #1
 8000e32:	4a03      	ldr	r2, [pc, #12]	@ (8000e40 <vPortExitCritical+0x28>)
 8000e34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000e36:	b90b      	cbnz	r3, 8000e3c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000e38:	f383 8811 	msr	BASEPRI, r3
}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000000 	.word	0x20000000
	...

08000e50 <PendSV_Handler>:
	__asm volatile
 8000e50:	f3ef 8009 	mrs	r0, PSP
 8000e54:	f3bf 8f6f 	isb	sy
 8000e58:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <pxCurrentTCBConst>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	f01e 0f10 	tst.w	lr, #16
 8000e60:	bf08      	it	eq
 8000e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e6a:	6010      	str	r0, [r2, #0]
 8000e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000e70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8000e74:	f380 8811 	msr	BASEPRI, r0
 8000e78:	f3bf 8f4f 	dsb	sy
 8000e7c:	f3bf 8f6f 	isb	sy
 8000e80:	f004 fa98 	bl	80053b4 <vTaskSwitchContext>
 8000e84:	f04f 0000 	mov.w	r0, #0
 8000e88:	f380 8811 	msr	BASEPRI, r0
 8000e8c:	bc09      	pop	{r0, r3}
 8000e8e:	6819      	ldr	r1, [r3, #0]
 8000e90:	6808      	ldr	r0, [r1, #0]
 8000e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e96:	f01e 0f10 	tst.w	lr, #16
 8000e9a:	bf08      	it	eq
 8000e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000ea0:	f380 8809 	msr	PSP, r0
 8000ea4:	f3bf 8f6f 	isb	sy
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	f3af 8000 	nop.w

08000eb0 <pxCurrentTCBConst>:
 8000eb0:	2000502c 	.word	0x2000502c

08000eb4 <xPortSysTickHandler>:
{
 8000eb4:	b508      	push	{r3, lr}
	__asm volatile
 8000eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000eba:	f383 8811 	msr	BASEPRI, r3
 8000ebe:	f3bf 8f6f 	isb	sy
 8000ec2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8000ec6:	f004 f947 	bl	8005158 <xTaskIncrementTick>
 8000eca:	b128      	cbz	r0, 8000ed8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000ecc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000ed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ed4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f383 8811 	msr	BASEPRI, r3
}
 8000ede:	bd08      	pop	{r3, pc}

08000ee0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000ee0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000ee8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000eea:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <vPortSetupTimerInterrupt+0x20>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4905      	ldr	r1, [pc, #20]	@ (8000f04 <vPortSetupTimerInterrupt+0x24>)
 8000ef0:	fba1 1303 	umull	r1, r3, r1, r3
 8000ef4:	099b      	lsrs	r3, r3, #6
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000efa:	2307      	movs	r3, #7
 8000efc:	6113      	str	r3, [r2, #16]
}
 8000efe:	4770      	bx	lr
 8000f00:	2000000c 	.word	0x2000000c
 8000f04:	10624dd3 	.word	0x10624dd3

08000f08 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000f08:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000f0c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8000f10:	4b3d      	ldr	r3, [pc, #244]	@ (8001008 <xPortStartScheduler+0x100>)
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d01c      	beq.n	8000f50 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000f16:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000f1a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800100c <xPortStartScheduler+0x104>)
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d01e      	beq.n	8000f62 <xPortStartScheduler+0x5a>
{
 8000f24:	b530      	push	{r4, r5, lr}
 8000f26:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000f28:	4b39      	ldr	r3, [pc, #228]	@ (8001010 <xPortStartScheduler+0x108>)
 8000f2a:	781a      	ldrb	r2, [r3, #0]
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000f30:	22ff      	movs	r2, #255	@ 0xff
 8000f32:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000f3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000f40:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8000f44:	4a33      	ldr	r2, [pc, #204]	@ (8001014 <xPortStartScheduler+0x10c>)
 8000f46:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000f48:	4b33      	ldr	r3, [pc, #204]	@ (8001018 <xPortStartScheduler+0x110>)
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000f4e:	e01b      	b.n	8000f88 <xPortStartScheduler+0x80>
	__asm volatile
 8000f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f54:	f383 8811 	msr	BASEPRI, r3
 8000f58:	f3bf 8f6f 	isb	sy
 8000f5c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000f60:	e7fe      	b.n	8000f60 <xPortStartScheduler+0x58>
 8000f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f66:	f383 8811 	msr	BASEPRI, r3
 8000f6a:	f3bf 8f6f 	isb	sy
 8000f6e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000f72:	e7fe      	b.n	8000f72 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8000f74:	4a28      	ldr	r2, [pc, #160]	@ (8001018 <xPortStartScheduler+0x110>)
 8000f76:	6813      	ldr	r3, [r2, #0]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000f7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000f88:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000f8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000f90:	d1f0      	bne.n	8000f74 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000f92:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <xPortStartScheduler+0x110>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d008      	beq.n	8000fac <xPortStartScheduler+0xa4>
 8000f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f9e:	f383 8811 	msr	BASEPRI, r3
 8000fa2:	f3bf 8f6f 	isb	sy
 8000fa6:	f3bf 8f4f 	dsb	sy
 8000faa:	e7fe      	b.n	8000faa <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	4a1a      	ldr	r2, [pc, #104]	@ (8001018 <xPortStartScheduler+0x110>)
 8000fb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000fb2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8000fb6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000fb8:	9b01      	ldr	r3, [sp, #4]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4a14      	ldr	r2, [pc, #80]	@ (8001010 <xPortStartScheduler+0x108>)
 8000fbe:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000fc0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8000fc4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fcc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000fd0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8000fd4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8000fd8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8000fdc:	f7ff ff80 	bl	8000ee0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8000fe0:	2500      	movs	r5, #0
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <xPortStartScheduler+0x114>)
 8000fe4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8000fe6:	f7ff febd 	bl	8000d64 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000fea:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8000fee:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8000ff2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8000ff6:	f7ff fea1 	bl	8000d3c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8000ffa:	f004 f9db 	bl	80053b4 <vTaskSwitchContext>
	prvTaskExitError();
 8000ffe:	f7ff fe7d 	bl	8000cfc <prvTaskExitError>
}
 8001002:	4628      	mov	r0, r5
 8001004:	b003      	add	sp, #12
 8001006:	bd30      	pop	{r4, r5, pc}
 8001008:	410fc271 	.word	0x410fc271
 800100c:	410fc270 	.word	0x410fc270
 8001010:	e000e400 	.word	0xe000e400
 8001014:	20004a9c 	.word	0x20004a9c
 8001018:	20004a98 	.word	0x20004a98
 800101c:	20000000 	.word	0x20000000

08001020 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001020:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d90e      	bls.n	8001046 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001028:	4a11      	ldr	r2, [pc, #68]	@ (8001070 <vPortValidateInterruptPriority+0x50>)
 800102a:	5c9a      	ldrb	r2, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <vPortValidateInterruptPriority+0x54>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d208      	bcs.n	8001046 <vPortValidateInterruptPriority+0x26>
 8001034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001038:	f383 8811 	msr	BASEPRI, r3
 800103c:	f3bf 8f6f 	isb	sy
 8001040:	f3bf 8f4f 	dsb	sy
 8001044:	e7fe      	b.n	8001044 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001046:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800104a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800104e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001052:	4a09      	ldr	r2, [pc, #36]	@ (8001078 <vPortValidateInterruptPriority+0x58>)
 8001054:	6812      	ldr	r2, [r2, #0]
 8001056:	4293      	cmp	r3, r2
 8001058:	d908      	bls.n	800106c <vPortValidateInterruptPriority+0x4c>
 800105a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800105e:	f383 8811 	msr	BASEPRI, r3
 8001062:	f3bf 8f6f 	isb	sy
 8001066:	f3bf 8f4f 	dsb	sy
 800106a:	e7fe      	b.n	800106a <vPortValidateInterruptPriority+0x4a>
	}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e3f0 	.word	0xe000e3f0
 8001074:	20004a9c 	.word	0x20004a9c
 8001078:	20004a98 	.word	0x20004a98

0800107c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800107c:	b510      	push	{r4, lr}
 800107e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001080:	f7ff fea8 	bl	8000dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001084:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001086:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001088:	429a      	cmp	r2, r3
 800108a:	d004      	beq.n	8001096 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800108c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800108e:	f7ff fec3 	bl	8000e18 <vPortExitCritical>

	return xReturn;
}
 8001092:	4620      	mov	r0, r4
 8001094:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8001096:	2401      	movs	r4, #1
 8001098:	e7f9      	b.n	800108e <prvIsQueueFull+0x12>

0800109a <prvIsQueueEmpty>:
{
 800109a:	b510      	push	{r4, lr}
 800109c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800109e:	f7ff fe99 	bl	8000dd4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80010a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80010a4:	b923      	cbnz	r3, 80010b0 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80010a6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80010a8:	f7ff feb6 	bl	8000e18 <vPortExitCritical>
}
 80010ac:	4620      	mov	r0, r4
 80010ae:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80010b0:	2400      	movs	r4, #0
 80010b2:	e7f9      	b.n	80010a8 <prvIsQueueEmpty+0xe>

080010b4 <prvCopyDataToQueue>:
{
 80010b4:	b570      	push	{r4, r5, r6, lr}
 80010b6:	4604      	mov	r4, r0
 80010b8:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80010ba:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80010bc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80010be:	b95a      	cbnz	r2, 80010d8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80010c0:	6803      	ldr	r3, [r0, #0]
 80010c2:	b11b      	cbz	r3, 80010cc <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80010c4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80010c6:	3601      	adds	r6, #1
 80010c8:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 80010ca:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80010cc:	6880      	ldr	r0, [r0, #8]
 80010ce:	f004 fa9d 	bl	800560c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60a3      	str	r3, [r4, #8]
 80010d6:	e7f6      	b.n	80010c6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80010d8:	b96d      	cbnz	r5, 80010f6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80010da:	6840      	ldr	r0, [r0, #4]
 80010dc:	f006 fad4 	bl	8007688 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80010e0:	6863      	ldr	r3, [r4, #4]
 80010e2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80010e4:	4413      	add	r3, r2
 80010e6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80010e8:	68a2      	ldr	r2, [r4, #8]
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d319      	bcc.n	8001122 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80010f2:	4628      	mov	r0, r5
 80010f4:	e7e7      	b.n	80010c6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80010f6:	68c0      	ldr	r0, [r0, #12]
 80010f8:	f006 fac6 	bl	8007688 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80010fc:	68e3      	ldr	r3, [r4, #12]
 80010fe:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001100:	4251      	negs	r1, r2
 8001102:	1a9b      	subs	r3, r3, r2
 8001104:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001106:	6822      	ldr	r2, [r4, #0]
 8001108:	4293      	cmp	r3, r2
 800110a:	d202      	bcs.n	8001112 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800110c:	68a3      	ldr	r3, [r4, #8]
 800110e:	440b      	add	r3, r1
 8001110:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001112:	2d02      	cmp	r5, #2
 8001114:	d001      	beq.n	800111a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8001116:	2000      	movs	r0, #0
 8001118:	e7d5      	b.n	80010c6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800111a:	b126      	cbz	r6, 8001126 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800111c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800111e:	2000      	movs	r0, #0
 8001120:	e7d1      	b.n	80010c6 <prvCopyDataToQueue+0x12>
 8001122:	4628      	mov	r0, r5
 8001124:	e7cf      	b.n	80010c6 <prvCopyDataToQueue+0x12>
 8001126:	2000      	movs	r0, #0
 8001128:	e7cd      	b.n	80010c6 <prvCopyDataToQueue+0x12>

0800112a <prvCopyDataFromQueue>:
{
 800112a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800112c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800112e:	b16a      	cbz	r2, 800114c <prvCopyDataFromQueue+0x22>
{
 8001130:	b510      	push	{r4, lr}
 8001132:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001134:	68d9      	ldr	r1, [r3, #12]
 8001136:	4411      	add	r1, r2
 8001138:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800113a:	689c      	ldr	r4, [r3, #8]
 800113c:	42a1      	cmp	r1, r4
 800113e:	d301      	bcc.n	8001144 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001140:	6819      	ldr	r1, [r3, #0]
 8001142:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001144:	68d9      	ldr	r1, [r3, #12]
 8001146:	f006 fa9f 	bl	8007688 <memcpy>
}
 800114a:	bd10      	pop	{r4, pc}
 800114c:	4770      	bx	lr

0800114e <prvUnlockQueue>:
{
 800114e:	b538      	push	{r3, r4, r5, lr}
 8001150:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8001152:	f7ff fe3f 	bl	8000dd4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001156:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800115a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800115c:	e001      	b.n	8001162 <prvUnlockQueue+0x14>
			--cTxLock;
 800115e:	3c01      	subs	r4, #1
 8001160:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001162:	2c00      	cmp	r4, #0
 8001164:	dd0a      	ble.n	800117c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001166:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001168:	b143      	cbz	r3, 800117c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800116a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800116e:	f004 f9a1 	bl	80054b4 <xTaskRemoveFromEventList>
 8001172:	2800      	cmp	r0, #0
 8001174:	d0f3      	beq.n	800115e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8001176:	f004 fa33 	bl	80055e0 <vTaskMissedYield>
 800117a:	e7f0      	b.n	800115e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800117c:	23ff      	movs	r3, #255	@ 0xff
 800117e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8001182:	f7ff fe49 	bl	8000e18 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001186:	f7ff fe25 	bl	8000dd4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800118a:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 800118e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001190:	e001      	b.n	8001196 <prvUnlockQueue+0x48>
				--cRxLock;
 8001192:	3c01      	subs	r4, #1
 8001194:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001196:	2c00      	cmp	r4, #0
 8001198:	dd0a      	ble.n	80011b0 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800119a:	692b      	ldr	r3, [r5, #16]
 800119c:	b143      	cbz	r3, 80011b0 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800119e:	f105 0010 	add.w	r0, r5, #16
 80011a2:	f004 f987 	bl	80054b4 <xTaskRemoveFromEventList>
 80011a6:	2800      	cmp	r0, #0
 80011a8:	d0f3      	beq.n	8001192 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80011aa:	f004 fa19 	bl	80055e0 <vTaskMissedYield>
 80011ae:	e7f0      	b.n	8001192 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80011b0:	23ff      	movs	r3, #255	@ 0xff
 80011b2:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80011b6:	f7ff fe2f 	bl	8000e18 <vPortExitCritical>
}
 80011ba:	bd38      	pop	{r3, r4, r5, pc}

080011bc <xQueueGenericReset>:
{
 80011bc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80011be:	b1e0      	cbz	r0, 80011fa <xQueueGenericReset+0x3e>
 80011c0:	460d      	mov	r5, r1
 80011c2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80011c4:	f7ff fe06 	bl	8000dd4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80011c8:	6823      	ldr	r3, [r4, #0]
 80011ca:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80011cc:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80011ce:	fb01 3002 	mla	r0, r1, r2, r3
 80011d2:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80011d4:	2000      	movs	r0, #0
 80011d6:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80011d8:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80011da:	3a01      	subs	r2, #1
 80011dc:	fb02 3301 	mla	r3, r2, r1, r3
 80011e0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80011e2:	23ff      	movs	r3, #255	@ 0xff
 80011e4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80011e8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80011ec:	b9fd      	cbnz	r5, 800122e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011ee:	6923      	ldr	r3, [r4, #16]
 80011f0:	b963      	cbnz	r3, 800120c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80011f2:	f7ff fe11 	bl	8000e18 <vPortExitCritical>
}
 80011f6:	2001      	movs	r0, #1
 80011f8:	bd38      	pop	{r3, r4, r5, pc}
 80011fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011fe:	f383 8811 	msr	BASEPRI, r3
 8001202:	f3bf 8f6f 	isb	sy
 8001206:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800120a:	e7fe      	b.n	800120a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800120c:	f104 0010 	add.w	r0, r4, #16
 8001210:	f004 f950 	bl	80054b4 <xTaskRemoveFromEventList>
 8001214:	2800      	cmp	r0, #0
 8001216:	d0ec      	beq.n	80011f2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8001218:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800121c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001220:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001224:	f3bf 8f4f 	dsb	sy
 8001228:	f3bf 8f6f 	isb	sy
 800122c:	e7e1      	b.n	80011f2 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800122e:	f104 0010 	add.w	r0, r4, #16
 8001232:	f7ff fc8b 	bl	8000b4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001236:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800123a:	f7ff fc87 	bl	8000b4c <vListInitialise>
 800123e:	e7d8      	b.n	80011f2 <xQueueGenericReset+0x36>

08001240 <prvInitialiseNewQueue>:
{
 8001240:	b538      	push	{r3, r4, r5, lr}
 8001242:	461d      	mov	r5, r3
 8001244:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001246:	460b      	mov	r3, r1
 8001248:	b949      	cbnz	r1, 800125e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800124a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800124c:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800124e:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001250:	2101      	movs	r1, #1
 8001252:	4620      	mov	r0, r4
 8001254:	f7ff ffb2 	bl	80011bc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8001258:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800125c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800125e:	6022      	str	r2, [r4, #0]
 8001260:	e7f4      	b.n	800124c <prvInitialiseNewQueue+0xc>

08001262 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001262:	b940      	cbnz	r0, 8001276 <xQueueGenericCreateStatic+0x14>
 8001264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001268:	f383 8811 	msr	BASEPRI, r3
 800126c:	f3bf 8f6f 	isb	sy
 8001270:	f3bf 8f4f 	dsb	sy
 8001274:	e7fe      	b.n	8001274 <xQueueGenericCreateStatic+0x12>
	{
 8001276:	b510      	push	{r4, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	461c      	mov	r4, r3
 800127c:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800127e:	b153      	cbz	r3, 8001296 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001280:	b192      	cbz	r2, 80012a8 <xQueueGenericCreateStatic+0x46>
 8001282:	b989      	cbnz	r1, 80012a8 <xQueueGenericCreateStatic+0x46>
 8001284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001288:	f383 8811 	msr	BASEPRI, r3
 800128c:	f3bf 8f6f 	isb	sy
 8001290:	f3bf 8f4f 	dsb	sy
 8001294:	e7fe      	b.n	8001294 <xQueueGenericCreateStatic+0x32>
 8001296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800129a:	f383 8811 	msr	BASEPRI, r3
 800129e:	f3bf 8f6f 	isb	sy
 80012a2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80012a6:	e7fe      	b.n	80012a6 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80012a8:	b16a      	cbz	r2, 80012c6 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80012aa:	2350      	movs	r3, #80	@ 0x50
 80012ac:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80012ae:	9b03      	ldr	r3, [sp, #12]
 80012b0:	2b50      	cmp	r3, #80	@ 0x50
 80012b2:	d013      	beq.n	80012dc <xQueueGenericCreateStatic+0x7a>
 80012b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012b8:	f383 8811 	msr	BASEPRI, r3
 80012bc:	f3bf 8f6f 	isb	sy
 80012c0:	f3bf 8f4f 	dsb	sy
 80012c4:	e7fe      	b.n	80012c4 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80012c6:	2900      	cmp	r1, #0
 80012c8:	d0ef      	beq.n	80012aa <xQueueGenericCreateStatic+0x48>
 80012ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012ce:	f383 8811 	msr	BASEPRI, r3
 80012d2:	f3bf 8f6f 	isb	sy
 80012d6:	f3bf 8f4f 	dsb	sy
 80012da:	e7fe      	b.n	80012da <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80012dc:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80012de:	2301      	movs	r3, #1
 80012e0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80012e4:	9400      	str	r4, [sp, #0]
 80012e6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80012ea:	4660      	mov	r0, ip
 80012ec:	f7ff ffa8 	bl	8001240 <prvInitialiseNewQueue>
	}
 80012f0:	4620      	mov	r0, r4
 80012f2:	b004      	add	sp, #16
 80012f4:	bd10      	pop	{r4, pc}

080012f6 <xQueueGenericSend>:
{
 80012f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f8:	b085      	sub	sp, #20
 80012fa:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80012fc:	b188      	cbz	r0, 8001322 <xQueueGenericSend+0x2c>
 80012fe:	460f      	mov	r7, r1
 8001300:	461d      	mov	r5, r3
 8001302:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001304:	b1b1      	cbz	r1, 8001334 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001306:	2d02      	cmp	r5, #2
 8001308:	d120      	bne.n	800134c <xQueueGenericSend+0x56>
 800130a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800130c:	2b01      	cmp	r3, #1
 800130e:	d01d      	beq.n	800134c <xQueueGenericSend+0x56>
 8001310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001314:	f383 8811 	msr	BASEPRI, r3
 8001318:	f3bf 8f6f 	isb	sy
 800131c:	f3bf 8f4f 	dsb	sy
 8001320:	e7fe      	b.n	8001320 <xQueueGenericSend+0x2a>
 8001322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001326:	f383 8811 	msr	BASEPRI, r3
 800132a:	f3bf 8f6f 	isb	sy
 800132e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001332:	e7fe      	b.n	8001332 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001334:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0e5      	beq.n	8001306 <xQueueGenericSend+0x10>
 800133a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800133e:	f383 8811 	msr	BASEPRI, r3
 8001342:	f3bf 8f6f 	isb	sy
 8001346:	f3bf 8f4f 	dsb	sy
 800134a:	e7fe      	b.n	800134a <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800134c:	f004 f94e 	bl	80055ec <xTaskGetSchedulerState>
 8001350:	4606      	mov	r6, r0
 8001352:	b958      	cbnz	r0, 800136c <xQueueGenericSend+0x76>
 8001354:	9b01      	ldr	r3, [sp, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d048      	beq.n	80013ec <xQueueGenericSend+0xf6>
 800135a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800135e:	f383 8811 	msr	BASEPRI, r3
 8001362:	f3bf 8f6f 	isb	sy
 8001366:	f3bf 8f4f 	dsb	sy
 800136a:	e7fe      	b.n	800136a <xQueueGenericSend+0x74>
 800136c:	2600      	movs	r6, #0
 800136e:	e03d      	b.n	80013ec <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001370:	462a      	mov	r2, r5
 8001372:	4639      	mov	r1, r7
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff fe9d 	bl	80010b4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800137a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800137c:	b97b      	cbnz	r3, 800139e <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800137e:	b148      	cbz	r0, 8001394 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8001380:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001388:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800138c:	f3bf 8f4f 	dsb	sy
 8001390:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001394:	f7ff fd40 	bl	8000e18 <vPortExitCritical>
				return pdPASS;
 8001398:	2001      	movs	r0, #1
}
 800139a:	b005      	add	sp, #20
 800139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800139e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80013a2:	f004 f887 	bl	80054b4 <xTaskRemoveFromEventList>
 80013a6:	2800      	cmp	r0, #0
 80013a8:	d0f4      	beq.n	8001394 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 80013aa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80013ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80013b6:	f3bf 8f4f 	dsb	sy
 80013ba:	f3bf 8f6f 	isb	sy
 80013be:	e7e9      	b.n	8001394 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 80013c0:	f7ff fd2a 	bl	8000e18 <vPortExitCritical>
					return errQUEUE_FULL;
 80013c4:	2000      	movs	r0, #0
 80013c6:	e7e8      	b.n	800139a <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80013c8:	a802      	add	r0, sp, #8
 80013ca:	f004 f8b9 	bl	8005540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80013ce:	2601      	movs	r6, #1
 80013d0:	e019      	b.n	8001406 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 80013d2:	2300      	movs	r3, #0
 80013d4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80013d8:	e021      	b.n	800141e <xQueueGenericSend+0x128>
 80013da:	2300      	movs	r3, #0
 80013dc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80013e0:	e023      	b.n	800142a <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff feb3 	bl	800114e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80013e8:	f003 ff42 	bl	8005270 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80013ec:	f7ff fcf2 	bl	8000dd4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80013f0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80013f2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d3bb      	bcc.n	8001370 <xQueueGenericSend+0x7a>
 80013f8:	2d02      	cmp	r5, #2
 80013fa:	d0b9      	beq.n	8001370 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80013fc:	9b01      	ldr	r3, [sp, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0de      	beq.n	80013c0 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8001402:	2e00      	cmp	r6, #0
 8001404:	d0e0      	beq.n	80013c8 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8001406:	f7ff fd07 	bl	8000e18 <vPortExitCritical>
		vTaskSuspendAll();
 800140a:	f003 fe97 	bl	800513c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800140e:	f7ff fce1 	bl	8000dd4 <vPortEnterCritical>
 8001412:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8001416:	b252      	sxtb	r2, r2
 8001418:	f1b2 3fff 	cmp.w	r2, #4294967295
 800141c:	d0d9      	beq.n	80013d2 <xQueueGenericSend+0xdc>
 800141e:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8001422:	b252      	sxtb	r2, r2
 8001424:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001428:	d0d7      	beq.n	80013da <xQueueGenericSend+0xe4>
 800142a:	f7ff fcf5 	bl	8000e18 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800142e:	a901      	add	r1, sp, #4
 8001430:	a802      	add	r0, sp, #8
 8001432:	f004 f891 	bl	8005558 <xTaskCheckForTimeOut>
 8001436:	b9d8      	cbnz	r0, 8001470 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001438:	4620      	mov	r0, r4
 800143a:	f7ff fe1f 	bl	800107c <prvIsQueueFull>
 800143e:	2800      	cmp	r0, #0
 8001440:	d0cf      	beq.n	80013e2 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001442:	9901      	ldr	r1, [sp, #4]
 8001444:	f104 0010 	add.w	r0, r4, #16
 8001448:	f004 f800 	bl	800544c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff fe7e 	bl	800114e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001452:	f003 ff0d 	bl	8005270 <xTaskResumeAll>
 8001456:	2800      	cmp	r0, #0
 8001458:	d1c8      	bne.n	80013ec <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800145a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800145e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001462:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001466:	f3bf 8f4f 	dsb	sy
 800146a:	f3bf 8f6f 	isb	sy
 800146e:	e7bd      	b.n	80013ec <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff fe6c 	bl	800114e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001476:	f003 fefb 	bl	8005270 <xTaskResumeAll>
			return errQUEUE_FULL;
 800147a:	2000      	movs	r0, #0
 800147c:	e78d      	b.n	800139a <xQueueGenericSend+0xa4>

0800147e <xQueueGenericSendFromISR>:
{
 800147e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8001482:	b190      	cbz	r0, 80014aa <xQueueGenericSendFromISR+0x2c>
 8001484:	460f      	mov	r7, r1
 8001486:	4616      	mov	r6, r2
 8001488:	461c      	mov	r4, r3
 800148a:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800148c:	b1b1      	cbz	r1, 80014bc <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800148e:	2c02      	cmp	r4, #2
 8001490:	d120      	bne.n	80014d4 <xQueueGenericSendFromISR+0x56>
 8001492:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8001494:	2b01      	cmp	r3, #1
 8001496:	d01d      	beq.n	80014d4 <xQueueGenericSendFromISR+0x56>
 8001498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800149c:	f383 8811 	msr	BASEPRI, r3
 80014a0:	f3bf 8f6f 	isb	sy
 80014a4:	f3bf 8f4f 	dsb	sy
 80014a8:	e7fe      	b.n	80014a8 <xQueueGenericSendFromISR+0x2a>
 80014aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014ae:	f383 8811 	msr	BASEPRI, r3
 80014b2:	f3bf 8f6f 	isb	sy
 80014b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80014ba:	e7fe      	b.n	80014ba <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80014bc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0e5      	beq.n	800148e <xQueueGenericSendFromISR+0x10>
 80014c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014c6:	f383 8811 	msr	BASEPRI, r3
 80014ca:	f3bf 8f6f 	isb	sy
 80014ce:	f3bf 8f4f 	dsb	sy
 80014d2:	e7fe      	b.n	80014d2 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80014d4:	f7ff fda4 	bl	8001020 <vPortValidateInterruptPriority>
	__asm volatile
 80014d8:	f3ef 8811 	mrs	r8, BASEPRI
 80014dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014e0:	f383 8811 	msr	BASEPRI, r3
 80014e4:	f3bf 8f6f 	isb	sy
 80014e8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80014ec:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 80014ee:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d306      	bcc.n	8001502 <xQueueGenericSendFromISR+0x84>
 80014f4:	2c02      	cmp	r4, #2
 80014f6:	d004      	beq.n	8001502 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80014f8:	2000      	movs	r0, #0
	__asm volatile
 80014fa:	f388 8811 	msr	BASEPRI, r8
}
 80014fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8001502:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8001506:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800150a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800150c:	4622      	mov	r2, r4
 800150e:	4639      	mov	r1, r7
 8001510:	4628      	mov	r0, r5
 8001512:	f7ff fdcf 	bl	80010b4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001516:	f1b9 3fff 	cmp.w	r9, #4294967295
 800151a:	d006      	beq.n	800152a <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800151c:	f109 0301 	add.w	r3, r9, #1
 8001520:	b25b      	sxtb	r3, r3
 8001522:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8001526:	2001      	movs	r0, #1
 8001528:	e7e7      	b.n	80014fa <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800152a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800152c:	b90b      	cbnz	r3, 8001532 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800152e:	2001      	movs	r0, #1
 8001530:	e7e3      	b.n	80014fa <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001532:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8001536:	f003 ffbd 	bl	80054b4 <xTaskRemoveFromEventList>
 800153a:	b118      	cbz	r0, 8001544 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800153c:	b126      	cbz	r6, 8001548 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800153e:	2001      	movs	r0, #1
 8001540:	6030      	str	r0, [r6, #0]
 8001542:	e7da      	b.n	80014fa <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8001544:	2001      	movs	r0, #1
 8001546:	e7d8      	b.n	80014fa <xQueueGenericSendFromISR+0x7c>
 8001548:	2001      	movs	r0, #1
 800154a:	e7d6      	b.n	80014fa <xQueueGenericSendFromISR+0x7c>

0800154c <xQueueReceive>:
{
 800154c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154e:	b085      	sub	sp, #20
 8001550:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001552:	b190      	cbz	r0, 800157a <xQueueReceive+0x2e>
 8001554:	460f      	mov	r7, r1
 8001556:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001558:	b1c1      	cbz	r1, 800158c <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800155a:	f004 f847 	bl	80055ec <xTaskGetSchedulerState>
 800155e:	4606      	mov	r6, r0
 8001560:	bb00      	cbnz	r0, 80015a4 <xQueueReceive+0x58>
 8001562:	9b01      	ldr	r3, [sp, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d05e      	beq.n	8001626 <xQueueReceive+0xda>
	__asm volatile
 8001568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800156c:	f383 8811 	msr	BASEPRI, r3
 8001570:	f3bf 8f6f 	isb	sy
 8001574:	f3bf 8f4f 	dsb	sy
 8001578:	e7fe      	b.n	8001578 <xQueueReceive+0x2c>
 800157a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800157e:	f383 8811 	msr	BASEPRI, r3
 8001582:	f3bf 8f6f 	isb	sy
 8001586:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800158a:	e7fe      	b.n	800158a <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800158c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0e3      	beq.n	800155a <xQueueReceive+0xe>
 8001592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001596:	f383 8811 	msr	BASEPRI, r3
 800159a:	f3bf 8f6f 	isb	sy
 800159e:	f3bf 8f4f 	dsb	sy
 80015a2:	e7fe      	b.n	80015a2 <xQueueReceive+0x56>
 80015a4:	2600      	movs	r6, #0
 80015a6:	e03e      	b.n	8001626 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80015a8:	4639      	mov	r1, r7
 80015aa:	4620      	mov	r0, r4
 80015ac:	f7ff fdbd 	bl	800112a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80015b0:	3d01      	subs	r5, #1
 80015b2:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015b4:	6923      	ldr	r3, [r4, #16]
 80015b6:	b923      	cbnz	r3, 80015c2 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80015b8:	f7ff fc2e 	bl	8000e18 <vPortExitCritical>
				return pdPASS;
 80015bc:	2001      	movs	r0, #1
}
 80015be:	b005      	add	sp, #20
 80015c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015c2:	f104 0010 	add.w	r0, r4, #16
 80015c6:	f003 ff75 	bl	80054b4 <xTaskRemoveFromEventList>
 80015ca:	2800      	cmp	r0, #0
 80015cc:	d0f4      	beq.n	80015b8 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80015ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80015d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80015da:	f3bf 8f4f 	dsb	sy
 80015de:	f3bf 8f6f 	isb	sy
 80015e2:	e7e9      	b.n	80015b8 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80015e4:	f7ff fc18 	bl	8000e18 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80015e8:	2000      	movs	r0, #0
 80015ea:	e7e8      	b.n	80015be <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80015ec:	a802      	add	r0, sp, #8
 80015ee:	f003 ffa7 	bl	8005540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80015f2:	2601      	movs	r6, #1
 80015f4:	e021      	b.n	800163a <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 80015f6:	2300      	movs	r3, #0
 80015f8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80015fc:	e029      	b.n	8001652 <xQueueReceive+0x106>
 80015fe:	2300      	movs	r3, #0
 8001600:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8001604:	e02b      	b.n	800165e <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8001606:	4620      	mov	r0, r4
 8001608:	f7ff fda1 	bl	800114e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800160c:	f003 fe30 	bl	8005270 <xTaskResumeAll>
 8001610:	e009      	b.n	8001626 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8001612:	4620      	mov	r0, r4
 8001614:	f7ff fd9b 	bl	800114e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001618:	f003 fe2a 	bl	8005270 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800161c:	4620      	mov	r0, r4
 800161e:	f7ff fd3c 	bl	800109a <prvIsQueueEmpty>
 8001622:	2800      	cmp	r0, #0
 8001624:	d13f      	bne.n	80016a6 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8001626:	f7ff fbd5 	bl	8000dd4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800162a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800162c:	2d00      	cmp	r5, #0
 800162e:	d1bb      	bne.n	80015a8 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001630:	9b01      	ldr	r3, [sp, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0d6      	beq.n	80015e4 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8001636:	2e00      	cmp	r6, #0
 8001638:	d0d8      	beq.n	80015ec <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800163a:	f7ff fbed 	bl	8000e18 <vPortExitCritical>
		vTaskSuspendAll();
 800163e:	f003 fd7d 	bl	800513c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001642:	f7ff fbc7 	bl	8000dd4 <vPortEnterCritical>
 8001646:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800164a:	b25b      	sxtb	r3, r3
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001650:	d0d1      	beq.n	80015f6 <xQueueReceive+0xaa>
 8001652:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8001656:	b25b      	sxtb	r3, r3
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165c:	d0cf      	beq.n	80015fe <xQueueReceive+0xb2>
 800165e:	f7ff fbdb 	bl	8000e18 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001662:	a901      	add	r1, sp, #4
 8001664:	a802      	add	r0, sp, #8
 8001666:	f003 ff77 	bl	8005558 <xTaskCheckForTimeOut>
 800166a:	2800      	cmp	r0, #0
 800166c:	d1d1      	bne.n	8001612 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff fd13 	bl	800109a <prvIsQueueEmpty>
 8001674:	2800      	cmp	r0, #0
 8001676:	d0c6      	beq.n	8001606 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001678:	9901      	ldr	r1, [sp, #4]
 800167a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800167e:	f003 fee5 	bl	800544c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001682:	4620      	mov	r0, r4
 8001684:	f7ff fd63 	bl	800114e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001688:	f003 fdf2 	bl	8005270 <xTaskResumeAll>
 800168c:	2800      	cmp	r0, #0
 800168e:	d1ca      	bne.n	8001626 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8001690:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001698:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800169c:	f3bf 8f4f 	dsb	sy
 80016a0:	f3bf 8f6f 	isb	sy
 80016a4:	e7bf      	b.n	8001626 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80016a6:	2000      	movs	r0, #0
 80016a8:	e789      	b.n	80015be <xQueueReceive+0x72>
	...

080016ac <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80016ac:	2300      	movs	r3, #0
 80016ae:	2b07      	cmp	r3, #7
 80016b0:	d80c      	bhi.n	80016cc <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80016b2:	4a07      	ldr	r2, [pc, #28]	@ (80016d0 <vQueueAddToRegistry+0x24>)
 80016b4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80016b8:	b10a      	cbz	r2, 80016be <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80016ba:	3301      	adds	r3, #1
 80016bc:	e7f7      	b.n	80016ae <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80016be:	4a04      	ldr	r2, [pc, #16]	@ (80016d0 <vQueueAddToRegistry+0x24>)
 80016c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80016c4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80016c8:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80016ca:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20004aa0 	.word	0x20004aa0

080016d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80016d4:	b570      	push	{r4, r5, r6, lr}
 80016d6:	4604      	mov	r4, r0
 80016d8:	460d      	mov	r5, r1
 80016da:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80016dc:	f7ff fb7a 	bl	8000dd4 <vPortEnterCritical>
 80016e0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ea:	d00d      	beq.n	8001708 <vQueueWaitForMessageRestricted+0x34>
 80016ec:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f6:	d00b      	beq.n	8001710 <vQueueWaitForMessageRestricted+0x3c>
 80016f8:	f7ff fb8e 	bl	8000e18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80016fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80016fe:	b15b      	cbz	r3, 8001718 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001700:	4620      	mov	r0, r4
 8001702:	f7ff fd24 	bl	800114e <prvUnlockQueue>
	}
 8001706:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8001708:	2300      	movs	r3, #0
 800170a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800170e:	e7ed      	b.n	80016ec <vQueueWaitForMessageRestricted+0x18>
 8001710:	2300      	movs	r3, #0
 8001712:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8001716:	e7ef      	b.n	80016f8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001718:	4632      	mov	r2, r6
 800171a:	4629      	mov	r1, r5
 800171c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001720:	f003 feac 	bl	800547c <vTaskPlaceOnEventListRestricted>
 8001724:	e7ec      	b.n	8001700 <vQueueWaitForMessageRestricted+0x2c>
	...

08001728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001728:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800172a:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_Init+0x30>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001732:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800173a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001742:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001744:	2003      	movs	r0, #3
 8001746:	f000 faff 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174a:	200f      	movs	r0, #15
 800174c:	f002 fc16 	bl	8003f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001750:	f000 fe16 	bl	8002380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001754:	2000      	movs	r0, #0
 8001756:	bd08      	pop	{r3, pc}
 8001758:	40023c00 	.word	0x40023c00

0800175c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800175c:	4a03      	ldr	r2, [pc, #12]	@ (800176c <HAL_IncTick+0x10>)
 800175e:	6811      	ldr	r1, [r2, #0]
 8001760:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <HAL_IncTick+0x14>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	440b      	add	r3, r1
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20004ae0 	.word	0x20004ae0
 8001770:	20000004 	.word	0x20000004

08001774 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001774:	4b01      	ldr	r3, [pc, #4]	@ (800177c <HAL_GetTick+0x8>)
 8001776:	6818      	ldr	r0, [r3, #0]
}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20004ae0 	.word	0x20004ae0

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b538      	push	{r3, r4, r5, lr}
 8001782:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff fff6 	bl	8001774 <HAL_GetTick>
 8001788:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800178e:	d002      	beq.n	8001796 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <HAL_Delay+0x24>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001796:	f7ff ffed 	bl	8001774 <HAL_GetTick>
 800179a:	1b40      	subs	r0, r0, r5
 800179c:	42a0      	cmp	r0, r4
 800179e:	d3fa      	bcc.n	8001796 <HAL_Delay+0x16>
  {
  }
}
 80017a0:	bd38      	pop	{r3, r4, r5, pc}
 80017a2:	bf00      	nop
 80017a4:	20000004 	.word	0x20000004

080017a8 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017a8:	4b4a      	ldr	r3, [pc, #296]	@ (80018d4 <ADC_Init+0x12c>)
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80017b0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	6841      	ldr	r1, [r0, #4]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017ba:	6802      	ldr	r2, [r0, #0]
 80017bc:	6853      	ldr	r3, [r2, #4]
 80017be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017c2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017c4:	6802      	ldr	r2, [r0, #0]
 80017c6:	6853      	ldr	r3, [r2, #4]
 80017c8:	6901      	ldr	r1, [r0, #16]
 80017ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80017ce:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017d0:	6802      	ldr	r2, [r0, #0]
 80017d2:	6853      	ldr	r3, [r2, #4]
 80017d4:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80017d8:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017da:	6802      	ldr	r2, [r0, #0]
 80017dc:	6853      	ldr	r3, [r2, #4]
 80017de:	6881      	ldr	r1, [r0, #8]
 80017e0:	430b      	orrs	r3, r1
 80017e2:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017e4:	6802      	ldr	r2, [r0, #0]
 80017e6:	6893      	ldr	r3, [r2, #8]
 80017e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80017ec:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017ee:	6802      	ldr	r2, [r0, #0]
 80017f0:	6893      	ldr	r3, [r2, #8]
 80017f2:	68c1      	ldr	r1, [r0, #12]
 80017f4:	430b      	orrs	r3, r1
 80017f6:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80017fa:	4b37      	ldr	r3, [pc, #220]	@ (80018d8 <ADC_Init+0x130>)
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d057      	beq.n	80018b0 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001800:	6802      	ldr	r2, [r0, #0]
 8001802:	6893      	ldr	r3, [r2, #8]
 8001804:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001808:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800180a:	6802      	ldr	r2, [r0, #0]
 800180c:	6893      	ldr	r3, [r2, #8]
 800180e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8001810:	430b      	orrs	r3, r1
 8001812:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001814:	6802      	ldr	r2, [r0, #0]
 8001816:	6893      	ldr	r3, [r2, #8]
 8001818:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800181c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800181e:	6802      	ldr	r2, [r0, #0]
 8001820:	6893      	ldr	r3, [r2, #8]
 8001822:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8001824:	430b      	orrs	r3, r1
 8001826:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001828:	6802      	ldr	r2, [r0, #0]
 800182a:	6893      	ldr	r3, [r2, #8]
 800182c:	f023 0302 	bic.w	r3, r3, #2
 8001830:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001832:	6802      	ldr	r2, [r0, #0]
 8001834:	6893      	ldr	r3, [r2, #8]
 8001836:	7e01      	ldrb	r1, [r0, #24]
 8001838:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800183c:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800183e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d03f      	beq.n	80018c6 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001846:	6802      	ldr	r2, [r0, #0]
 8001848:	6853      	ldr	r3, [r2, #4]
 800184a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800184e:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001850:	6802      	ldr	r2, [r0, #0]
 8001852:	6853      	ldr	r3, [r2, #4]
 8001854:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001858:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800185a:	6801      	ldr	r1, [r0, #0]
 800185c:	684b      	ldr	r3, [r1, #4]
 800185e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8001860:	3a01      	subs	r2, #1
 8001862:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001866:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001868:	6802      	ldr	r2, [r0, #0]
 800186a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800186c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001870:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001872:	6801      	ldr	r1, [r0, #0]
 8001874:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8001876:	69c2      	ldr	r2, [r0, #28]
 8001878:	3a01      	subs	r2, #1
 800187a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800187e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001880:	6802      	ldr	r2, [r0, #0]
 8001882:	6893      	ldr	r3, [r2, #8]
 8001884:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001888:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800188a:	6802      	ldr	r2, [r0, #0]
 800188c:	6893      	ldr	r3, [r2, #8]
 800188e:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8001892:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001896:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001898:	6802      	ldr	r2, [r0, #0]
 800189a:	6893      	ldr	r3, [r2, #8]
 800189c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80018a0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018a2:	6802      	ldr	r2, [r0, #0]
 80018a4:	6893      	ldr	r3, [r2, #8]
 80018a6:	6941      	ldr	r1, [r0, #20]
 80018a8:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80018ac:	6093      	str	r3, [r2, #8]
}
 80018ae:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018b0:	6802      	ldr	r2, [r0, #0]
 80018b2:	6893      	ldr	r3, [r2, #8]
 80018b4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80018b8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ba:	6802      	ldr	r2, [r0, #0]
 80018bc:	6893      	ldr	r3, [r2, #8]
 80018be:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80018c2:	6093      	str	r3, [r2, #8]
 80018c4:	e7b0      	b.n	8001828 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018c6:	6802      	ldr	r2, [r0, #0]
 80018c8:	6853      	ldr	r3, [r2, #4]
 80018ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80018ce:	6053      	str	r3, [r2, #4]
 80018d0:	e7ca      	b.n	8001868 <ADC_Init+0xc0>
 80018d2:	bf00      	nop
 80018d4:	40012300 	.word	0x40012300
 80018d8:	0f000001 	.word	0x0f000001

080018dc <HAL_ADC_Init>:
  if (hadc == NULL)
 80018dc:	b338      	cbz	r0, 800192e <HAL_ADC_Init+0x52>
{
 80018de:	b510      	push	{r4, lr}
 80018e0:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018e2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80018e4:	b143      	cbz	r3, 80018f8 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80018e8:	f013 0f10 	tst.w	r3, #16
 80018ec:	d00b      	beq.n	8001906 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80018ee:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80018f0:	2300      	movs	r3, #0
 80018f2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80018f6:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80018f8:	f7fe fdba 	bl	8000470 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80018fc:	2300      	movs	r3, #0
 80018fe:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001900:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8001904:	e7ef      	b.n	80018e6 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001906:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001908:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800190c:	f023 0302 	bic.w	r3, r3, #2
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8001916:	4620      	mov	r0, r4
 8001918:	f7ff ff46 	bl	80017a8 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 800191c:	2000      	movs	r0, #0
 800191e:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001920:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001922:	f023 0303 	bic.w	r3, r3, #3
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6423      	str	r3, [r4, #64]	@ 0x40
 800192c:	e7e0      	b.n	80018f0 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800192e:	2001      	movs	r0, #1
}
 8001930:	4770      	bx	lr
	...

08001934 <HAL_ADC_Start_DMA>:
{
 8001934:	b510      	push	{r4, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 800193a:	2200      	movs	r2, #0
 800193c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800193e:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001942:	2a01      	cmp	r2, #1
 8001944:	f000 8094 	beq.w	8001a70 <HAL_ADC_Start_DMA+0x13c>
 8001948:	4604      	mov	r4, r0
 800194a:	2201      	movs	r2, #1
 800194c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001950:	6802      	ldr	r2, [r0, #0]
 8001952:	6890      	ldr	r0, [r2, #8]
 8001954:	f010 0f01 	tst.w	r0, #1
 8001958:	d113      	bne.n	8001982 <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 800195a:	6890      	ldr	r0, [r2, #8]
 800195c:	f040 0001 	orr.w	r0, r0, #1
 8001960:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001962:	4a46      	ldr	r2, [pc, #280]	@ (8001a7c <HAL_ADC_Start_DMA+0x148>)
 8001964:	6810      	ldr	r0, [r2, #0]
 8001966:	4a46      	ldr	r2, [pc, #280]	@ (8001a80 <HAL_ADC_Start_DMA+0x14c>)
 8001968:	fba2 2000 	umull	r2, r0, r2, r0
 800196c:	0c80      	lsrs	r0, r0, #18
 800196e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001972:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8001974:	e002      	b.n	800197c <HAL_ADC_Start_DMA+0x48>
      counter--;
 8001976:	9801      	ldr	r0, [sp, #4]
 8001978:	3801      	subs	r0, #1
 800197a:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 800197c:	9801      	ldr	r0, [sp, #4]
 800197e:	2800      	cmp	r0, #0
 8001980:	d1f9      	bne.n	8001976 <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001982:	6822      	ldr	r2, [r4, #0]
 8001984:	6890      	ldr	r0, [r2, #8]
 8001986:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800198a:	d003      	beq.n	8001994 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800198c:	6890      	ldr	r0, [r2, #8]
 800198e:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8001992:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001994:	6822      	ldr	r2, [r4, #0]
 8001996:	6890      	ldr	r0, [r2, #8]
 8001998:	f010 0f01 	tst.w	r0, #1
 800199c:	d05d      	beq.n	8001a5a <HAL_ADC_Start_DMA+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 800199e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80019a0:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 80019a4:	f020 0001 	bic.w	r0, r0, #1
 80019a8:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 80019ac:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019ae:	6852      	ldr	r2, [r2, #4]
 80019b0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80019b4:	d005      	beq.n	80019c2 <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019b6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80019b8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80019bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80019c0:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80019c4:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 80019c8:	d034      	beq.n	8001a34 <HAL_ADC_Start_DMA+0x100>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019ca:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80019cc:	f022 0206 	bic.w	r2, r2, #6
 80019d0:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 80019d2:	2200      	movs	r2, #0
 80019d4:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019d8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80019da:	482a      	ldr	r0, [pc, #168]	@ (8001a84 <HAL_ADC_Start_DMA+0x150>)
 80019dc:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019de:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80019e0:	4829      	ldr	r0, [pc, #164]	@ (8001a88 <HAL_ADC_Start_DMA+0x154>)
 80019e2:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80019e6:	4829      	ldr	r0, [pc, #164]	@ (8001a8c <HAL_ADC_Start_DMA+0x158>)
 80019e8:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019ea:	6822      	ldr	r2, [r4, #0]
 80019ec:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 80019f0:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019f2:	6820      	ldr	r0, [r4, #0]
 80019f4:	6842      	ldr	r2, [r0, #4]
 80019f6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80019fa:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80019fc:	6820      	ldr	r0, [r4, #0]
 80019fe:	6882      	ldr	r2, [r0, #8]
 8001a00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a04:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a06:	6820      	ldr	r0, [r4, #0]
 8001a08:	460a      	mov	r2, r1
 8001a0a:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 8001a0e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001a10:	f000 faa2 	bl	8001f58 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a14:	4b1e      	ldr	r3, [pc, #120]	@ (8001a90 <HAL_ADC_Start_DMA+0x15c>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f013 0f1f 	tst.w	r3, #31
 8001a1c:	d10d      	bne.n	8001a3a <HAL_ADC_Start_DMA+0x106>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001a26:	d125      	bne.n	8001a74 <HAL_ADC_Start_DMA+0x140>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001a30:	2000      	movs	r0, #0
 8001a32:	e01b      	b.n	8001a6c <HAL_ADC_Start_DMA+0x138>
      ADC_CLEAR_ERRORCODE(hadc);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6462      	str	r2, [r4, #68]	@ 0x44
 8001a38:	e7cb      	b.n	80019d2 <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	4a15      	ldr	r2, [pc, #84]	@ (8001a94 <HAL_ADC_Start_DMA+0x160>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d001      	beq.n	8001a46 <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 8001a42:	2000      	movs	r0, #0
 8001a44:	e012      	b.n	8001a6c <HAL_ADC_Start_DMA+0x138>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001a4c:	d114      	bne.n	8001a78 <HAL_ADC_Start_DMA+0x144>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001a56:	2000      	movs	r0, #0
 8001a58:	e008      	b.n	8001a6c <HAL_ADC_Start_DMA+0x138>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a62:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 8001a6a:	2000      	movs	r0, #0
}
 8001a6c:	b002      	add	sp, #8
 8001a6e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001a70:	2002      	movs	r0, #2
 8001a72:	e7fb      	b.n	8001a6c <HAL_ADC_Start_DMA+0x138>
  return HAL_OK;
 8001a74:	2000      	movs	r0, #0
 8001a76:	e7f9      	b.n	8001a6c <HAL_ADC_Start_DMA+0x138>
 8001a78:	2000      	movs	r0, #0
 8001a7a:	e7f7      	b.n	8001a6c <HAL_ADC_Start_DMA+0x138>
 8001a7c:	2000000c 	.word	0x2000000c
 8001a80:	431bde83 	.word	0x431bde83
 8001a84:	08001abd 	.word	0x08001abd
 8001a88:	08001a9b 	.word	0x08001a9b
 8001a8c:	08001aa7 	.word	0x08001aa7
 8001a90:	40012300 	.word	0x40012300
 8001a94:	40012000 	.word	0x40012000

08001a98 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001a98:	4770      	bx	lr

08001a9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a9a:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a9c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001a9e:	f7ff fffb 	bl	8001a98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aa2:	bd08      	pop	{r3, pc}

08001aa4 <HAL_ADC_ErrorCallback>:
}
 8001aa4:	4770      	bx	lr

08001aa6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001aa6:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001aa8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001aaa:	2340      	movs	r3, #64	@ 0x40
 8001aac:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001aae:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ab6:	f7ff fff5 	bl	8001aa4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aba:	bd08      	pop	{r3, pc}

08001abc <ADC_DMAConvCplt>:
{
 8001abc:	b508      	push	{r3, lr}
 8001abe:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ac0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ac2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001ac4:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8001ac8:	d125      	bne.n	8001b16 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aca:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001acc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ad0:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ad2:	6803      	ldr	r3, [r0, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001ada:	d119      	bne.n	8001b10 <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001adc:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ade:	b9ba      	cbnz	r2, 8001b10 <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ae2:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8001ae6:	d003      	beq.n	8001af0 <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ae8:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aea:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001aee:	d10f      	bne.n	8001b10 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	f022 0220 	bic.w	r2, r2, #32
 8001af6:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001af8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001afa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001afe:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b00:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001b02:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001b06:	d103      	bne.n	8001b10 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b08:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001b10:	f7fe fd18 	bl	8000544 <HAL_ADC_ConvCpltCallback>
}
 8001b14:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b16:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001b18:	f012 0f10 	tst.w	r2, #16
 8001b1c:	d104      	bne.n	8001b28 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b1e:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8001b20:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b22:	4618      	mov	r0, r3
 8001b24:	4790      	blx	r2
}
 8001b26:	e7f5      	b.n	8001b14 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8001b28:	f7ff ffbc 	bl	8001aa4 <HAL_ADC_ErrorCallback>
 8001b2c:	e7f2      	b.n	8001b14 <ADC_DMAConvCplt+0x58>
	...

08001b30 <HAL_ADC_ConfigChannel>:
{
 8001b30:	b430      	push	{r4, r5}
 8001b32:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001b34:	2200      	movs	r2, #0
 8001b36:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001b38:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001b3c:	2a01      	cmp	r2, #1
 8001b3e:	f000 80b6 	beq.w	8001cae <HAL_ADC_ConfigChannel+0x17e>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2201      	movs	r2, #1
 8001b46:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b4a:	680a      	ldr	r2, [r1, #0]
 8001b4c:	2a09      	cmp	r2, #9
 8001b4e:	d940      	bls.n	8001bd2 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b50:	6804      	ldr	r4, [r0, #0]
 8001b52:	68e0      	ldr	r0, [r4, #12]
 8001b54:	b292      	uxth	r2, r2
 8001b56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001b5a:	3a1e      	subs	r2, #30
 8001b5c:	f04f 0c07 	mov.w	ip, #7
 8001b60:	fa0c f202 	lsl.w	r2, ip, r2
 8001b64:	ea20 0202 	bic.w	r2, r0, r2
 8001b68:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b6a:	681c      	ldr	r4, [r3, #0]
 8001b6c:	68e0      	ldr	r0, [r4, #12]
 8001b6e:	880a      	ldrh	r2, [r1, #0]
 8001b70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001b74:	3a1e      	subs	r2, #30
 8001b76:	688d      	ldr	r5, [r1, #8]
 8001b78:	fa05 f202 	lsl.w	r2, r5, r2
 8001b7c:	4302      	orrs	r2, r0
 8001b7e:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8001b80:	684a      	ldr	r2, [r1, #4]
 8001b82:	2a06      	cmp	r2, #6
 8001b84:	d83c      	bhi.n	8001c00 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b86:	681c      	ldr	r4, [r3, #0]
 8001b88:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001b8a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001b8e:	3a05      	subs	r2, #5
 8001b90:	f04f 0c1f 	mov.w	ip, #31
 8001b94:	fa0c f202 	lsl.w	r2, ip, r2
 8001b98:	ea20 0202 	bic.w	r2, r0, r2
 8001b9c:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b9e:	681c      	ldr	r4, [r3, #0]
 8001ba0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001ba2:	684a      	ldr	r2, [r1, #4]
 8001ba4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001ba8:	3a05      	subs	r2, #5
 8001baa:	f8b1 c000 	ldrh.w	ip, [r1]
 8001bae:	fa0c f202 	lsl.w	r2, ip, r2
 8001bb2:	4302      	orrs	r2, r0
 8001bb4:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	4a3e      	ldr	r2, [pc, #248]	@ (8001cb4 <HAL_ADC_ConfigChannel+0x184>)
 8001bba:	4290      	cmp	r0, r2
 8001bbc:	d050      	beq.n	8001c60 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8001cb4 <HAL_ADC_ConfigChannel+0x184>)
 8001bc2:	4290      	cmp	r0, r2
 8001bc4:	d055      	beq.n	8001c72 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8001bcc:	b002      	add	sp, #8
 8001bce:	bc30      	pop	{r4, r5}
 8001bd0:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bd2:	6804      	ldr	r4, [r0, #0]
 8001bd4:	6920      	ldr	r0, [r4, #16]
 8001bd6:	b292      	uxth	r2, r2
 8001bd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001bdc:	f04f 0c07 	mov.w	ip, #7
 8001be0:	fa0c f202 	lsl.w	r2, ip, r2
 8001be4:	ea20 0202 	bic.w	r2, r0, r2
 8001be8:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bea:	681c      	ldr	r4, [r3, #0]
 8001bec:	6920      	ldr	r0, [r4, #16]
 8001bee:	880a      	ldrh	r2, [r1, #0]
 8001bf0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001bf4:	688d      	ldr	r5, [r1, #8]
 8001bf6:	fa05 f202 	lsl.w	r2, r5, r2
 8001bfa:	4302      	orrs	r2, r0
 8001bfc:	6122      	str	r2, [r4, #16]
 8001bfe:	e7bf      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8001c00:	2a0c      	cmp	r2, #12
 8001c02:	d816      	bhi.n	8001c32 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c04:	681d      	ldr	r5, [r3, #0]
 8001c06:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001c08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c0c:	3a23      	subs	r2, #35	@ 0x23
 8001c0e:	241f      	movs	r4, #31
 8001c10:	fa04 f202 	lsl.w	r2, r4, r2
 8001c14:	ea20 0202 	bic.w	r2, r0, r2
 8001c18:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c1a:	681d      	ldr	r5, [r3, #0]
 8001c1c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001c1e:	684a      	ldr	r2, [r1, #4]
 8001c20:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c24:	3a23      	subs	r2, #35	@ 0x23
 8001c26:	880c      	ldrh	r4, [r1, #0]
 8001c28:	fa04 f202 	lsl.w	r2, r4, r2
 8001c2c:	4302      	orrs	r2, r0
 8001c2e:	632a      	str	r2, [r5, #48]	@ 0x30
 8001c30:	e7c1      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c32:	681d      	ldr	r5, [r3, #0]
 8001c34:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001c36:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c3a:	3a41      	subs	r2, #65	@ 0x41
 8001c3c:	241f      	movs	r4, #31
 8001c3e:	fa04 f202 	lsl.w	r2, r4, r2
 8001c42:	ea20 0202 	bic.w	r2, r0, r2
 8001c46:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c48:	681d      	ldr	r5, [r3, #0]
 8001c4a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001c4c:	684a      	ldr	r2, [r1, #4]
 8001c4e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c52:	3a41      	subs	r2, #65	@ 0x41
 8001c54:	880c      	ldrh	r4, [r1, #0]
 8001c56:	fa04 f202 	lsl.w	r2, r4, r2
 8001c5a:	4302      	orrs	r2, r0
 8001c5c:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8001c5e:	e7aa      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c60:	680a      	ldr	r2, [r1, #0]
 8001c62:	2a12      	cmp	r2, #18
 8001c64:	d1ab      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c66:	4814      	ldr	r0, [pc, #80]	@ (8001cb8 <HAL_ADC_ConfigChannel+0x188>)
 8001c68:	6842      	ldr	r2, [r0, #4]
 8001c6a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001c6e:	6042      	str	r2, [r0, #4]
 8001c70:	e7a5      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c72:	680a      	ldr	r2, [r1, #0]
 8001c74:	3a10      	subs	r2, #16
 8001c76:	2a01      	cmp	r2, #1
 8001c78:	d8a5      	bhi.n	8001bc6 <HAL_ADC_ConfigChannel+0x96>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c7a:	480f      	ldr	r0, [pc, #60]	@ (8001cb8 <HAL_ADC_ConfigChannel+0x188>)
 8001c7c:	6842      	ldr	r2, [r0, #4]
 8001c7e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c82:	6042      	str	r2, [r0, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c84:	680a      	ldr	r2, [r1, #0]
 8001c86:	2a10      	cmp	r2, #16
 8001c88:	d19d      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001cbc <HAL_ADC_ConfigChannel+0x18c>)
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	490c      	ldr	r1, [pc, #48]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x190>)
 8001c90:	fba1 1202 	umull	r1, r2, r1, r2
 8001c94:	0c92      	lsrs	r2, r2, #18
 8001c96:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c9a:	0052      	lsls	r2, r2, #1
 8001c9c:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001c9e:	e002      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x176>
        counter--;
 8001ca0:	9a01      	ldr	r2, [sp, #4]
 8001ca2:	3a01      	subs	r2, #1
 8001ca4:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001ca6:	9a01      	ldr	r2, [sp, #4]
 8001ca8:	2a00      	cmp	r2, #0
 8001caa:	d1f9      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x170>
 8001cac:	e78b      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 8001cae:	2002      	movs	r0, #2
 8001cb0:	e78c      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x9c>
 8001cb2:	bf00      	nop
 8001cb4:	40012000 	.word	0x40012000
 8001cb8:	40012300 	.word	0x40012300
 8001cbc:	2000000c 	.word	0x2000000c
 8001cc0:	431bde83 	.word	0x431bde83

08001cc4 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	db07      	blt.n	8001cd8 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc8:	f000 021f 	and.w	r2, r0, #31
 8001ccc:	0940      	lsrs	r0, r0, #5
 8001cce:	2301      	movs	r3, #1
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	4a02      	ldr	r2, [pc, #8]	@ (8001cdc <__NVIC_EnableIRQ+0x18>)
 8001cd4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	db08      	blt.n	8001cf6 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce4:	0109      	lsls	r1, r1, #4
 8001ce6:	b2c9      	uxtb	r1, r1
 8001ce8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001cec:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001cf0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001cf4:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	f000 000f 	and.w	r0, r0, #15
 8001cfa:	0109      	lsls	r1, r1, #4
 8001cfc:	b2c9      	uxtb	r1, r1
 8001cfe:	4b01      	ldr	r3, [pc, #4]	@ (8001d04 <__NVIC_SetPriority+0x24>)
 8001d00:	5419      	strb	r1, [r3, r0]
  }
}
 8001d02:	4770      	bx	lr
 8001d04:	e000ed14 	.word	0xe000ed14

08001d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d0a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0e:	f1c0 0c07 	rsb	ip, r0, #7
 8001d12:	f1bc 0f04 	cmp.w	ip, #4
 8001d16:	bf28      	it	cs
 8001d18:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1c:	1d03      	adds	r3, r0, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d90f      	bls.n	8001d42 <NVIC_EncodePriority+0x3a>
 8001d22:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	f04f 3eff 	mov.w	lr, #4294967295
 8001d28:	fa0e f00c 	lsl.w	r0, lr, ip
 8001d2c:	ea21 0100 	bic.w	r1, r1, r0
 8001d30:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d32:	fa0e fe03 	lsl.w	lr, lr, r3
 8001d36:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001d3a:	ea41 0002 	orr.w	r0, r1, r2
 8001d3e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	2300      	movs	r3, #0
 8001d44:	e7ee      	b.n	8001d24 <NVIC_EncodePriority+0x1c>
	...

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4a07      	ldr	r2, [pc, #28]	@ (8001d68 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001d4a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d50:	041b      	lsls	r3, r3, #16
 8001d52:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d54:	0200      	lsls	r0, r0, #8
 8001d56:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001d5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001d64:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6c:	b510      	push	{r4, lr}
 8001d6e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <HAL_NVIC_SetPriority+0x1c>)
 8001d72:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d74:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001d78:	f7ff ffc6 	bl	8001d08 <NVIC_EncodePriority>
 8001d7c:	4601      	mov	r1, r0
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f7ff ffae 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001d84:	bd10      	pop	{r4, pc}
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8e:	f7ff ff99 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001d92:	bd08      	pop	{r3, pc}

08001d94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d94:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d96:	6805      	ldr	r5, [r0, #0]
 8001d98:	682c      	ldr	r4, [r5, #0]
 8001d9a:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8001d9e:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001da0:	6804      	ldr	r4, [r0, #0]
 8001da2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001da4:	6883      	ldr	r3, [r0, #8]
 8001da6:	2b40      	cmp	r3, #64	@ 0x40
 8001da8:	d005      	beq.n	8001db6 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001daa:	6803      	ldr	r3, [r0, #0]
 8001dac:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001dae:	6803      	ldr	r3, [r0, #0]
 8001db0:	60da      	str	r2, [r3, #12]
  }
}
 8001db2:	bc30      	pop	{r4, r5}
 8001db4:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001db6:	6803      	ldr	r3, [r0, #0]
 8001db8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001dba:	6803      	ldr	r3, [r0, #0]
 8001dbc:	60d9      	str	r1, [r3, #12]
 8001dbe:	e7f8      	b.n	8001db2 <DMA_SetConfig+0x1e>

08001dc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dc2:	6803      	ldr	r3, [r0, #0]
 8001dc4:	b2d9      	uxtb	r1, r3
 8001dc6:	3910      	subs	r1, #16
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <DMA_CalcBaseAndBitshift+0x34>)
 8001dca:	fba2 4201 	umull	r4, r2, r2, r1
 8001dce:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dd0:	4c09      	ldr	r4, [pc, #36]	@ (8001df8 <DMA_CalcBaseAndBitshift+0x38>)
 8001dd2:	5ca2      	ldrb	r2, [r4, r2]
 8001dd4:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001dd6:	295f      	cmp	r1, #95	@ 0x5f
 8001dd8:	d907      	bls.n	8001dea <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dda:	f36f 0309 	bfc	r3, #0, #10
 8001dde:	3304      	adds	r3, #4
 8001de0:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001de2:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8001de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001de8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dea:	f36f 0309 	bfc	r3, #0, #10
 8001dee:	6583      	str	r3, [r0, #88]	@ 0x58
 8001df0:	e7f7      	b.n	8001de2 <DMA_CalcBaseAndBitshift+0x22>
 8001df2:	bf00      	nop
 8001df4:	aaaaaaab 	.word	0xaaaaaaab
 8001df8:	08008334 	.word	0x08008334

08001dfc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001dfc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dfe:	6982      	ldr	r2, [r0, #24]
 8001e00:	b992      	cbnz	r2, 8001e28 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d00a      	beq.n	8001e1c <DMA_CheckFifoParam+0x20>
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d002      	beq.n	8001e10 <DMA_CheckFifoParam+0x14>
 8001e0a:	b10b      	cbz	r3, 8001e10 <DMA_CheckFifoParam+0x14>
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e10:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001e12:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001e16:	d128      	bne.n	8001e6a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001e18:	2000      	movs	r0, #0
 8001e1a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e1c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001e1e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e22:	d024      	beq.n	8001e6e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001e24:	2000      	movs	r0, #0
 8001e26:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e28:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001e2c:	d009      	beq.n	8001e42 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d925      	bls.n	8001e7e <DMA_CheckFifoParam+0x82>
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d125      	bne.n	8001e82 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e36:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001e38:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001e3c:	d123      	bne.n	8001e86 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001e3e:	2000      	movs	r0, #0
 8001e40:	4770      	bx	lr
    switch (tmp)
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d803      	bhi.n	8001e4e <DMA_CheckFifoParam+0x52>
 8001e46:	e8df f003 	tbb	[pc, r3]
 8001e4a:	0414      	.short	0x0414
 8001e4c:	0a14      	.short	0x0a14
 8001e4e:	2000      	movs	r0, #0
 8001e50:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e52:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001e54:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001e58:	d10d      	bne.n	8001e76 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e5e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001e60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e64:	d009      	beq.n	8001e7a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001e66:	2000      	movs	r0, #0
 8001e68:	4770      	bx	lr
        status = HAL_ERROR;
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	4770      	bx	lr
        status = HAL_ERROR;
 8001e6e:	2001      	movs	r0, #1
 8001e70:	4770      	bx	lr
      status = HAL_ERROR;
 8001e72:	2001      	movs	r0, #1
 8001e74:	4770      	bx	lr
        status = HAL_ERROR;
 8001e76:	2001      	movs	r0, #1
 8001e78:	4770      	bx	lr
        status = HAL_ERROR;
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	4770      	bx	lr
      status = HAL_ERROR;
 8001e7e:	2001      	movs	r0, #1
 8001e80:	4770      	bx	lr
    switch (tmp)
 8001e82:	2000      	movs	r0, #0
 8001e84:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001e86:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001e88:	4770      	bx	lr
	...

08001e8c <HAL_DMA_Init>:
{
 8001e8c:	b570      	push	{r4, r5, r6, lr}
 8001e8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff fc70 	bl	8001774 <HAL_GetTick>
  if(hdma == NULL)
 8001e94:	2c00      	cmp	r4, #0
 8001e96:	d05b      	beq.n	8001f50 <HAL_DMA_Init+0xc4>
 8001e98:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001ea6:	6822      	ldr	r2, [r4, #0]
 8001ea8:	6813      	ldr	r3, [r2, #0]
 8001eaa:	f023 0301 	bic.w	r3, r3, #1
 8001eae:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	f012 0f01 	tst.w	r2, #1
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eba:	f7ff fc5b 	bl	8001774 <HAL_GetTick>
 8001ebe:	1b43      	subs	r3, r0, r5
 8001ec0:	2b05      	cmp	r3, #5
 8001ec2:	d9f5      	bls.n	8001eb0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001ece:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001ed0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed2:	4920      	ldr	r1, [pc, #128]	@ (8001f54 <HAL_DMA_Init+0xc8>)
 8001ed4:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed6:	6862      	ldr	r2, [r4, #4]
 8001ed8:	68a0      	ldr	r0, [r4, #8]
 8001eda:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001edc:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ede:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee0:	6920      	ldr	r0, [r4, #16]
 8001ee2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee4:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee8:	69a0      	ldr	r0, [r4, #24]
 8001eea:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eec:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eee:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef0:	6a20      	ldr	r0, [r4, #32]
 8001ef2:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef4:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001ef8:	2904      	cmp	r1, #4
 8001efa:	d01e      	beq.n	8001f3a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001efc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001efe:	6826      	ldr	r6, [r4, #0]
 8001f00:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f02:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001f06:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f08:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d107      	bne.n	8001f1e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001f0e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001f10:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f12:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001f14:	b11b      	cbz	r3, 8001f1e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f16:	4620      	mov	r0, r4
 8001f18:	f7ff ff70 	bl	8001dfc <DMA_CheckFifoParam>
 8001f1c:	b990      	cbnz	r0, 8001f44 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001f1e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f20:	4620      	mov	r0, r4
 8001f22:	f7ff ff4d 	bl	8001dc0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f26:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001f28:	233f      	movs	r3, #63	@ 0x3f
 8001f2a:	4093      	lsls	r3, r2
 8001f2c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2e:	2000      	movs	r0, #0
 8001f30:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001f38:	e7c9      	b.n	8001ece <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f3a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001f3c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001f3e:	4301      	orrs	r1, r0
 8001f40:	430a      	orrs	r2, r1
 8001f42:	e7db      	b.n	8001efc <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f44:	2340      	movs	r3, #64	@ 0x40
 8001f46:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001f4e:	e7be      	b.n	8001ece <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001f50:	2001      	movs	r0, #1
 8001f52:	e7bc      	b.n	8001ece <HAL_DMA_Init+0x42>
 8001f54:	f010803f 	.word	0xf010803f

08001f58 <HAL_DMA_Start_IT>:
{
 8001f58:	b538      	push	{r3, r4, r5, lr}
 8001f5a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5c:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001f5e:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001f62:	2801      	cmp	r0, #1
 8001f64:	d02a      	beq.n	8001fbc <HAL_DMA_Start_IT+0x64>
 8001f66:	2001      	movs	r0, #1
 8001f68:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f6c:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001f70:	2801      	cmp	r0, #1
 8001f72:	d004      	beq.n	8001f7e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8001f74:	2300      	movs	r3, #0
 8001f76:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001f7a:	2002      	movs	r0, #2
}
 8001f7c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f7e:	2002      	movs	r0, #2
 8001f80:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f84:	2000      	movs	r0, #0
 8001f86:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7ff ff03 	bl	8001d94 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f8e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001f90:	233f      	movs	r3, #63	@ 0x3f
 8001f92:	4093      	lsls	r3, r2
 8001f94:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f96:	6822      	ldr	r2, [r4, #0]
 8001f98:	6813      	ldr	r3, [r2, #0]
 8001f9a:	f043 0316 	orr.w	r3, r3, #22
 8001f9e:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001fa0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001fa2:	b123      	cbz	r3, 8001fae <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fa4:	6822      	ldr	r2, [r4, #0]
 8001fa6:	6813      	ldr	r3, [r2, #0]
 8001fa8:	f043 0308 	orr.w	r3, r3, #8
 8001fac:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001fae:	6822      	ldr	r2, [r4, #0]
 8001fb0:	6813      	ldr	r3, [r2, #0]
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb8:	2000      	movs	r0, #0
 8001fba:	e7df      	b.n	8001f7c <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8001fbc:	2002      	movs	r0, #2
 8001fbe:	e7dd      	b.n	8001f7c <HAL_DMA_Start_IT+0x24>

08001fc0 <HAL_DMA_IRQHandler>:
{
 8001fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fca:	4b72      	ldr	r3, [pc, #456]	@ (8002194 <HAL_DMA_IRQHandler+0x1d4>)
 8001fcc:	681d      	ldr	r5, [r3, #0]
 8001fce:	4b72      	ldr	r3, [pc, #456]	@ (8002198 <HAL_DMA_IRQHandler+0x1d8>)
 8001fd0:	fba3 3505 	umull	r3, r5, r3, r5
 8001fd4:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd6:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8001fd8:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fda:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001fdc:	2308      	movs	r3, #8
 8001fde:	4093      	lsls	r3, r2
 8001fe0:	4233      	tst	r3, r6
 8001fe2:	d010      	beq.n	8002006 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fe4:	6803      	ldr	r3, [r0, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	f012 0f04 	tst.w	r2, #4
 8001fec:	d00b      	beq.n	8002006 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	f022 0204 	bic.w	r2, r2, #4
 8001ff4:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ff6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001ff8:	2308      	movs	r3, #8
 8001ffa:	4093      	lsls	r3, r2
 8001ffc:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ffe:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002006:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002008:	2301      	movs	r3, #1
 800200a:	4093      	lsls	r3, r2
 800200c:	4233      	tst	r3, r6
 800200e:	d009      	beq.n	8002024 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002010:	6822      	ldr	r2, [r4, #0]
 8002012:	6952      	ldr	r2, [r2, #20]
 8002014:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002018:	d004      	beq.n	8002024 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800201a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800201c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002024:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002026:	2304      	movs	r3, #4
 8002028:	4093      	lsls	r3, r2
 800202a:	4233      	tst	r3, r6
 800202c:	d009      	beq.n	8002042 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800202e:	6822      	ldr	r2, [r4, #0]
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	f012 0f02 	tst.w	r2, #2
 8002036:	d004      	beq.n	8002042 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002038:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800203a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002042:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002044:	2310      	movs	r3, #16
 8002046:	4093      	lsls	r3, r2
 8002048:	4233      	tst	r3, r6
 800204a:	d024      	beq.n	8002096 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800204c:	6822      	ldr	r2, [r4, #0]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	f012 0f08 	tst.w	r2, #8
 8002054:	d01f      	beq.n	8002096 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002056:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002060:	d00d      	beq.n	800207e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002068:	d104      	bne.n	8002074 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800206a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800206c:	b19b      	cbz	r3, 8002096 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800206e:	4620      	mov	r0, r4
 8002070:	4798      	blx	r3
 8002072:	e010      	b.n	8002096 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002074:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002076:	b173      	cbz	r3, 8002096 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002078:	4620      	mov	r0, r4
 800207a:	4798      	blx	r3
 800207c:	e00b      	b.n	8002096 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8002084:	d103      	bne.n	800208e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	f022 0208 	bic.w	r2, r2, #8
 800208c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800208e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002090:	b10b      	cbz	r3, 8002096 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8002092:	4620      	mov	r0, r4
 8002094:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002096:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002098:	2320      	movs	r3, #32
 800209a:	4093      	lsls	r3, r2
 800209c:	4233      	tst	r3, r6
 800209e:	d054      	beq.n	800214a <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020a0:	6822      	ldr	r2, [r4, #0]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	f012 0f10 	tst.w	r2, #16
 80020a8:	d04f      	beq.n	800214a <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020aa:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020ac:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80020b0:	2b05      	cmp	r3, #5
 80020b2:	d00e      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80020bc:	d033      	beq.n	8002126 <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80020c4:	d12a      	bne.n	800211c <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 80020c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d03e      	beq.n	800214a <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 80020cc:	4620      	mov	r0, r4
 80020ce:	4798      	blx	r3
 80020d0:	e03b      	b.n	800214a <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020d2:	6822      	ldr	r2, [r4, #0]
 80020d4:	6813      	ldr	r3, [r2, #0]
 80020d6:	f023 0316 	bic.w	r3, r3, #22
 80020da:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020dc:	6822      	ldr	r2, [r4, #0]
 80020de:	6953      	ldr	r3, [r2, #20]
 80020e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020e4:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020e8:	b1a3      	cbz	r3, 8002114 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ea:	6822      	ldr	r2, [r4, #0]
 80020ec:	6813      	ldr	r3, [r2, #0]
 80020ee:	f023 0308 	bic.w	r3, r3, #8
 80020f2:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80020f6:	233f      	movs	r3, #63	@ 0x3f
 80020f8:	4093      	lsls	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80020fc:	2301      	movs	r3, #1
 80020fe:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002102:	2300      	movs	r3, #0
 8002104:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8002108:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800210a:	2b00      	cmp	r3, #0
 800210c:	d03f      	beq.n	800218e <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 800210e:	4620      	mov	r0, r4
 8002110:	4798      	blx	r3
        return;
 8002112:	e03c      	b.n	800218e <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002114:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1e7      	bne.n	80020ea <HAL_DMA_IRQHandler+0x12a>
 800211a:	e7eb      	b.n	80020f4 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 800211c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800211e:	b1a3      	cbz	r3, 800214a <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8002120:	4620      	mov	r0, r4
 8002122:	4798      	blx	r3
 8002124:	e011      	b.n	800214a <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800212c:	d109      	bne.n	8002142 <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	f022 0210 	bic.w	r2, r2, #16
 8002134:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002136:	2301      	movs	r3, #1
 8002138:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800213c:	2300      	movs	r3, #0
 800213e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8002142:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002144:	b10b      	cbz	r3, 800214a <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 8002146:	4620      	mov	r0, r4
 8002148:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800214a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800214c:	b1fb      	cbz	r3, 800218e <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800214e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002150:	f013 0f01 	tst.w	r3, #1
 8002154:	d017      	beq.n	8002186 <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002156:	2305      	movs	r3, #5
 8002158:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800215c:	6822      	ldr	r2, [r4, #0]
 800215e:	6813      	ldr	r3, [r2, #0]
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002166:	9b01      	ldr	r3, [sp, #4]
 8002168:	3301      	adds	r3, #1
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	42ab      	cmp	r3, r5
 800216e:	d804      	bhi.n	800217a <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f013 0f01 	tst.w	r3, #1
 8002178:	d1f5      	bne.n	8002166 <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 800217a:	2301      	movs	r3, #1
 800217c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8002180:	2300      	movs	r3, #0
 8002182:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8002186:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002188:	b10b      	cbz	r3, 800218e <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 800218a:	4620      	mov	r0, r4
 800218c:	4798      	blx	r3
}
 800218e:	b003      	add	sp, #12
 8002190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002192:	bf00      	nop
 8002194:	2000000c 	.word	0x2000000c
 8002198:	1b4e81b5 	.word	0x1b4e81b5

0800219c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219c:	2300      	movs	r3, #0
 800219e:	2b0f      	cmp	r3, #15
 80021a0:	f200 80d7 	bhi.w	8002352 <HAL_GPIO_Init+0x1b6>
{
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	e065      	b.n	8002276 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021aa:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021ac:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80021b0:	2403      	movs	r4, #3
 80021b2:	fa04 f40e 	lsl.w	r4, r4, lr
 80021b6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ba:	68cc      	ldr	r4, [r1, #12]
 80021bc:	fa04 f40e 	lsl.w	r4, r4, lr
 80021c0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80021c2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ca:	684a      	ldr	r2, [r1, #4]
 80021cc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80021d0:	409a      	lsls	r2, r3
 80021d2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80021d4:	6042      	str	r2, [r0, #4]
 80021d6:	e05c      	b.n	8002292 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d8:	08dc      	lsrs	r4, r3, #3
 80021da:	3408      	adds	r4, #8
 80021dc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021e0:	f003 0507 	and.w	r5, r3, #7
 80021e4:	00ad      	lsls	r5, r5, #2
 80021e6:	f04f 0e0f 	mov.w	lr, #15
 80021ea:	fa0e fe05 	lsl.w	lr, lr, r5
 80021ee:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f2:	690a      	ldr	r2, [r1, #16]
 80021f4:	40aa      	lsls	r2, r5
 80021f6:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80021fa:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80021fe:	e05c      	b.n	80022ba <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002200:	2204      	movs	r2, #4
 8002202:	e000      	b.n	8002206 <HAL_GPIO_Init+0x6a>
 8002204:	2200      	movs	r2, #0
 8002206:	fa02 f20e 	lsl.w	r2, r2, lr
 800220a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800220c:	3402      	adds	r4, #2
 800220e:	4d51      	ldr	r5, [pc, #324]	@ (8002354 <HAL_GPIO_Init+0x1b8>)
 8002210:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002214:	4a50      	ldr	r2, [pc, #320]	@ (8002358 <HAL_GPIO_Init+0x1bc>)
 8002216:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002218:	ea6f 020c 	mvn.w	r2, ip
 800221c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002220:	684e      	ldr	r6, [r1, #4]
 8002222:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8002226:	d001      	beq.n	800222c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8002228:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 800222c:	4c4a      	ldr	r4, [pc, #296]	@ (8002358 <HAL_GPIO_Init+0x1bc>)
 800222e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8002230:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002232:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002236:	684e      	ldr	r6, [r1, #4]
 8002238:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 800223c:	d001      	beq.n	8002242 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800223e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8002242:	4c45      	ldr	r4, [pc, #276]	@ (8002358 <HAL_GPIO_Init+0x1bc>)
 8002244:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8002246:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002248:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800224c:	684e      	ldr	r6, [r1, #4]
 800224e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8002252:	d001      	beq.n	8002258 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8002254:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8002258:	4c3f      	ldr	r4, [pc, #252]	@ (8002358 <HAL_GPIO_Init+0x1bc>)
 800225a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800225c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800225e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002260:	684d      	ldr	r5, [r1, #4]
 8002262:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8002266:	d001      	beq.n	800226c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8002268:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 800226c:	4c3a      	ldr	r4, [pc, #232]	@ (8002358 <HAL_GPIO_Init+0x1bc>)
 800226e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002270:	3301      	adds	r3, #1
 8002272:	2b0f      	cmp	r3, #15
 8002274:	d86b      	bhi.n	800234e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8002276:	2201      	movs	r2, #1
 8002278:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227a:	680c      	ldr	r4, [r1, #0]
 800227c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8002280:	ea32 0404 	bics.w	r4, r2, r4
 8002284:	d1f4      	bne.n	8002270 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002286:	684c      	ldr	r4, [r1, #4]
 8002288:	f004 0403 	and.w	r4, r4, #3
 800228c:	3c01      	subs	r4, #1
 800228e:	2c01      	cmp	r4, #1
 8002290:	d98b      	bls.n	80021aa <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002292:	684a      	ldr	r2, [r1, #4]
 8002294:	f002 0203 	and.w	r2, r2, #3
 8002298:	2a03      	cmp	r2, #3
 800229a:	d009      	beq.n	80022b0 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800229c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800229e:	005d      	lsls	r5, r3, #1
 80022a0:	2203      	movs	r2, #3
 80022a2:	40aa      	lsls	r2, r5
 80022a4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a8:	688a      	ldr	r2, [r1, #8]
 80022aa:	40aa      	lsls	r2, r5
 80022ac:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80022ae:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b0:	684a      	ldr	r2, [r1, #4]
 80022b2:	f002 0203 	and.w	r2, r2, #3
 80022b6:	2a02      	cmp	r2, #2
 80022b8:	d08e      	beq.n	80021d8 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80022ba:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022bc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	fa02 f20e 	lsl.w	r2, r2, lr
 80022c6:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ca:	684a      	ldr	r2, [r1, #4]
 80022cc:	f002 0203 	and.w	r2, r2, #3
 80022d0:	fa02 f20e 	lsl.w	r2, r2, lr
 80022d4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80022d6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d8:	684a      	ldr	r2, [r1, #4]
 80022da:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80022de:	d0c7      	beq.n	8002270 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e0:	2200      	movs	r2, #0
 80022e2:	9201      	str	r2, [sp, #4]
 80022e4:	4a1d      	ldr	r2, [pc, #116]	@ (800235c <HAL_GPIO_Init+0x1c0>)
 80022e6:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80022e8:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80022ec:	6454      	str	r4, [r2, #68]	@ 0x44
 80022ee:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022f0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80022f4:	9201      	str	r2, [sp, #4]
 80022f6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80022f8:	089c      	lsrs	r4, r3, #2
 80022fa:	1ca5      	adds	r5, r4, #2
 80022fc:	4a15      	ldr	r2, [pc, #84]	@ (8002354 <HAL_GPIO_Init+0x1b8>)
 80022fe:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002302:	f003 0e03 	and.w	lr, r3, #3
 8002306:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800230a:	220f      	movs	r2, #15
 800230c:	fa02 f20e 	lsl.w	r2, r2, lr
 8002310:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002314:	4a12      	ldr	r2, [pc, #72]	@ (8002360 <HAL_GPIO_Init+0x1c4>)
 8002316:	4290      	cmp	r0, r2
 8002318:	f43f af74 	beq.w	8002204 <HAL_GPIO_Init+0x68>
 800231c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002320:	4290      	cmp	r0, r2
 8002322:	d00e      	beq.n	8002342 <HAL_GPIO_Init+0x1a6>
 8002324:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002328:	4290      	cmp	r0, r2
 800232a:	d00c      	beq.n	8002346 <HAL_GPIO_Init+0x1aa>
 800232c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002330:	4290      	cmp	r0, r2
 8002332:	d00a      	beq.n	800234a <HAL_GPIO_Init+0x1ae>
 8002334:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002338:	4290      	cmp	r0, r2
 800233a:	f43f af61 	beq.w	8002200 <HAL_GPIO_Init+0x64>
 800233e:	2207      	movs	r2, #7
 8002340:	e761      	b.n	8002206 <HAL_GPIO_Init+0x6a>
 8002342:	2201      	movs	r2, #1
 8002344:	e75f      	b.n	8002206 <HAL_GPIO_Init+0x6a>
 8002346:	2202      	movs	r2, #2
 8002348:	e75d      	b.n	8002206 <HAL_GPIO_Init+0x6a>
 800234a:	2203      	movs	r2, #3
 800234c:	e75b      	b.n	8002206 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800234e:	b002      	add	sp, #8
 8002350:	bd70      	pop	{r4, r5, r6, pc}
 8002352:	4770      	bx	lr
 8002354:	40013800 	.word	0x40013800
 8002358:	40013c00 	.word	0x40013c00
 800235c:	40023800 	.word	0x40023800
 8002360:	40020000 	.word	0x40020000

08002364 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002364:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002366:	4b05      	ldr	r3, [pc, #20]	@ (800237c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	4203      	tst	r3, r0
 800236c:	d100      	bne.n	8002370 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800236e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002370:	4b02      	ldr	r3, [pc, #8]	@ (800237c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002372:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002374:	f7fe fc30 	bl	8000bd8 <HAL_GPIO_EXTI_Callback>
}
 8002378:	e7f9      	b.n	800236e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800237a:	bf00      	nop
 800237c:	40013c00 	.word	0x40013c00

08002380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002380:	b500      	push	{lr}
 8002382:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002384:	2200      	movs	r2, #0
 8002386:	9200      	str	r2, [sp, #0]
 8002388:	4b0d      	ldr	r3, [pc, #52]	@ (80023c0 <HAL_MspInit+0x40>)
 800238a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800238c:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8002390:	6459      	str	r1, [r3, #68]	@ 0x44
 8002392:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002394:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8002398:	9100      	str	r1, [sp, #0]
 800239a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239c:	9201      	str	r2, [sp, #4]
 800239e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80023a0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80023a4:	6419      	str	r1, [r3, #64]	@ 0x40
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023b0:	210f      	movs	r1, #15
 80023b2:	f06f 0001 	mvn.w	r0, #1
 80023b6:	f7ff fcd9 	bl	8001d6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ba:	b003      	add	sp, #12
 80023bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80023c0:	40023800 	.word	0x40023800

080023c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023c8:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ca:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80023ce:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80023d2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80023d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	429a      	cmp	r2, r3
 80023dc:	d854      	bhi.n	8002488 <PCD_WriteEmptyTxFifo+0xc4>
 80023de:	4607      	mov	r7, r0
 80023e0:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 80023e2:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 80023e4:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 80023e8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80023ec:	69d2      	ldr	r2, [r2, #28]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d300      	bcc.n	80023f4 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 80023f2:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 80023f4:	f102 0903 	add.w	r9, r2, #3
 80023f8:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023fc:	e015      	b.n	800242a <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 80023fe:	f106 0903 	add.w	r9, r6, #3
 8002402:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 8002406:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002408:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 800240c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8002410:	6a29      	ldr	r1, [r5, #32]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	b2b3      	uxth	r3, r6
 8002416:	b2e2      	uxtb	r2, r4
 8002418:	4640      	mov	r0, r8
 800241a:	f002 f956 	bl	80046ca <USB_WritePacket>

    ep->xfer_buff  += len;
 800241e:	6a2b      	ldr	r3, [r5, #32]
 8002420:	4433      	add	r3, r6
 8002422:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8002424:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002426:	4433      	add	r3, r6
 8002428:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800242a:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 800242e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002436:	454b      	cmp	r3, r9
 8002438:	d312      	bcc.n	8002460 <PCD_WriteEmptyTxFifo+0x9c>
 800243a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800243e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8002442:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002446:	429a      	cmp	r2, r3
 8002448:	d20a      	bcs.n	8002460 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800244a:	b14b      	cbz	r3, 8002460 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 800244c:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 800244e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8002452:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8002456:	69d6      	ldr	r6, [r2, #28]
 8002458:	429e      	cmp	r6, r3
 800245a:	d3d0      	bcc.n	80023fe <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 800245c:	461e      	mov	r6, r3
 800245e:	e7ce      	b.n	80023fe <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002460:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002464:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8002468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800246a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246c:	429a      	cmp	r2, r3
 800246e:	d80f      	bhi.n	8002490 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002470:	f004 040f 	and.w	r4, r4, #15
 8002474:	2201      	movs	r2, #1
 8002476:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002478:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 800247c:	ea23 0302 	bic.w	r3, r3, r2
 8002480:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 8002484:	2000      	movs	r0, #0
 8002486:	e000      	b.n	800248a <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 8002488:	2001      	movs	r0, #1
}
 800248a:	b003      	add	sp, #12
 800248c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8002490:	2000      	movs	r0, #0
 8002492:	e7fa      	b.n	800248a <PCD_WriteEmptyTxFifo+0xc6>

08002494 <HAL_PCD_Init>:
{
 8002494:	b530      	push	{r4, r5, lr}
 8002496:	b083      	sub	sp, #12
  if (hpcd == NULL)
 8002498:	2800      	cmp	r0, #0
 800249a:	d07a      	beq.n	8002592 <HAL_PCD_Init+0xfe>
 800249c:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 800249e:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024a0:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 80024a4:	b1c3      	cbz	r3, 80024d8 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80024a6:	2303      	movs	r3, #3
 80024a8:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 80024ac:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 80024b0:	d017      	beq.n	80024e2 <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 80024b2:	6820      	ldr	r0, [r4, #0]
 80024b4:	f001 feba 	bl	800422c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024b8:	7c23      	ldrb	r3, [r4, #16]
 80024ba:	f88d 3000 	strb.w	r3, [sp]
 80024be:	1d23      	adds	r3, r4, #4
 80024c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024c2:	6820      	ldr	r0, [r4, #0]
 80024c4:	f001 fdf1 	bl	80040aa <USB_CoreInit>
 80024c8:	b170      	cbz	r0, 80024e8 <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ca:	2302      	movs	r3, #2
 80024cc:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80024d0:	2501      	movs	r5, #1
}
 80024d2:	4628      	mov	r0, r5
 80024d4:	b003      	add	sp, #12
 80024d6:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80024d8:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 80024dc:	f004 f86c 	bl	80065b8 <HAL_PCD_MspInit>
 80024e0:	e7e1      	b.n	80024a6 <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	71a3      	strb	r3, [r4, #6]
 80024e6:	e7e4      	b.n	80024b2 <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024e8:	2100      	movs	r1, #0
 80024ea:	6820      	ldr	r0, [r4, #0]
 80024ec:	f002 fb03 	bl	8004af6 <USB_SetCurrentMode>
 80024f0:	4602      	mov	r2, r0
 80024f2:	b9b8      	cbnz	r0, 8002524 <HAL_PCD_Init+0x90>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f4:	4603      	mov	r3, r0
 80024f6:	7920      	ldrb	r0, [r4, #4]
 80024f8:	4298      	cmp	r0, r3
 80024fa:	d918      	bls.n	800252e <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 80024fc:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8002500:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002504:	2001      	movs	r0, #1
 8002506:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8002508:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800250a:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800250c:	2000      	movs	r0, #0
 800250e:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002510:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002512:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002514:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8002518:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800251c:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251e:	3301      	adds	r3, #1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	e7e8      	b.n	80024f6 <HAL_PCD_Init+0x62>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002524:	2302      	movs	r3, #2
 8002526:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800252a:	2501      	movs	r5, #1
 800252c:	e7d1      	b.n	80024d2 <HAL_PCD_Init+0x3e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252e:	4290      	cmp	r0, r2
 8002530:	d917      	bls.n	8002562 <HAL_PCD_Init+0xce>
    hpcd->OUT_ep[i].is_in = 0U;
 8002532:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8002536:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800253a:	2100      	movs	r1, #0
 800253c:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8002540:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002544:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002548:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800254c:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002550:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8002554:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002558:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800255c:	3201      	adds	r2, #1
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	e7e5      	b.n	800252e <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002562:	7c23      	ldrb	r3, [r4, #16]
 8002564:	f88d 3000 	strb.w	r3, [sp]
 8002568:	1d23      	adds	r3, r4, #4
 800256a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800256c:	6820      	ldr	r0, [r4, #0]
 800256e:	f001 feb3 	bl	80042d8 <USB_DevInit>
 8002572:	4605      	mov	r5, r0
 8002574:	b120      	cbz	r0, 8002580 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002576:	2302      	movs	r3, #2
 8002578:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800257c:	2501      	movs	r5, #1
 800257e:	e7a8      	b.n	80024d2 <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002584:	2301      	movs	r3, #1
 8002586:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 800258a:	6820      	ldr	r0, [r4, #0]
 800258c:	f002 fa72 	bl	8004a74 <USB_DevDisconnect>
  return HAL_OK;
 8002590:	e79f      	b.n	80024d2 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8002592:	2501      	movs	r5, #1
 8002594:	e79d      	b.n	80024d2 <HAL_PCD_Init+0x3e>

08002596 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002596:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 8002598:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 800259c:	2a01      	cmp	r2, #1
 800259e:	d01a      	beq.n	80025d6 <HAL_PCD_Start+0x40>
{
 80025a0:	b510      	push	{r4, lr}
 80025a2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80025a4:	2201      	movs	r2, #1
 80025a6:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80025b0:	d002      	beq.n	80025b8 <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 80025b2:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80025b4:	2a01      	cmp	r2, #1
 80025b6:	d009      	beq.n	80025cc <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 80025b8:	6820      	ldr	r0, [r4, #0]
 80025ba:	f001 fe31 	bl	8004220 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025be:	6820      	ldr	r0, [r4, #0]
 80025c0:	f002 fa4a 	bl	8004a58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80025ca:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025ce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80025d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80025d4:	e7f0      	b.n	80025b8 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 80025d6:	2002      	movs	r0, #2
}
 80025d8:	4770      	bx	lr
	...

080025dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025dc:	b570      	push	{r4, r5, r6, lr}
 80025de:	4604      	mov	r4, r0
 80025e0:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025e2:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80025e4:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025e6:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80025ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025ee:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 80025f0:	79a1      	ldrb	r1, [r4, #6]
 80025f2:	2901      	cmp	r1, #1
 80025f4:	d011      	beq.n	800261a <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025f6:	4938      	ldr	r1, [pc, #224]	@ (80026d8 <PCD_EP_OutXfrComplete_int+0xfc>)
 80025f8:	428e      	cmp	r6, r1
 80025fa:	d056      	beq.n	80026aa <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025fc:	b93d      	cbnz	r5, 800260e <PCD_EP_OutXfrComplete_int+0x32>
 80025fe:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8002602:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002606:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800260a:	2b00      	cmp	r3, #0
 800260c:	d05e      	beq.n	80026cc <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800260e:	b2e9      	uxtb	r1, r5
 8002610:	4620      	mov	r0, r4
 8002612:	f004 f81d 	bl	8006650 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8002616:	2000      	movs	r0, #0
 8002618:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800261a:	f012 0f08 	tst.w	r2, #8
 800261e:	d009      	beq.n	8002634 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002620:	492e      	ldr	r1, [pc, #184]	@ (80026dc <PCD_EP_OutXfrComplete_int+0x100>)
 8002622:	428e      	cmp	r6, r1
 8002624:	d9f7      	bls.n	8002616 <PCD_EP_OutXfrComplete_int+0x3a>
 8002626:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800262a:	d0f4      	beq.n	8002616 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800262c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	e7f0      	b.n	8002616 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002634:	f012 0f20 	tst.w	r2, #32
 8002638:	d002      	beq.n	8002640 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800263a:	2220      	movs	r2, #32
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	e7ea      	b.n	8002616 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002640:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8002644:	d1e7      	bne.n	8002616 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002646:	4925      	ldr	r1, [pc, #148]	@ (80026dc <PCD_EP_OutXfrComplete_int+0x100>)
 8002648:	428e      	cmp	r6, r1
 800264a:	d906      	bls.n	800265a <PCD_EP_OutXfrComplete_int+0x7e>
 800264c:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8002650:	d003      	beq.n	800265a <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002652:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	e7dd      	b.n	8002616 <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800265a:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800265e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002662:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266c:	1acb      	subs	r3, r1, r3
 800266e:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 8002672:	b97d      	cbnz	r5, 8002694 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 8002674:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8002678:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800267c:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 8002680:	b16a      	cbz	r2, 800269e <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 8002682:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8002686:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800268a:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 800268e:	4419      	add	r1, r3
 8002690:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002694:	b2e9      	uxtb	r1, r5
 8002696:	4620      	mov	r0, r4
 8002698:	f003 ffda 	bl	8006650 <HAL_PCD_DataOutStageCallback>
 800269c:	e7bb      	b.n	8002616 <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800269e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80026a2:	2101      	movs	r1, #1
 80026a4:	f002 fa66 	bl	8004b74 <USB_EP0_OutStart>
 80026a8:	e7f4      	b.n	8002694 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026aa:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80026ae:	d003      	beq.n	80026b8 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	e7ae      	b.n	8002616 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026b8:	f012 0f20 	tst.w	r2, #32
 80026bc:	d001      	beq.n	80026c2 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026be:	2220      	movs	r2, #32
 80026c0:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026c2:	b2e9      	uxtb	r1, r5
 80026c4:	4620      	mov	r0, r4
 80026c6:	f003 ffc3 	bl	8006650 <HAL_PCD_DataOutStageCallback>
 80026ca:	e7a4      	b.n	8002616 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026cc:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80026d0:	2100      	movs	r1, #0
 80026d2:	f002 fa4f 	bl	8004b74 <USB_EP0_OutStart>
 80026d6:	e79a      	b.n	800260e <PCD_EP_OutXfrComplete_int+0x32>
 80026d8:	4f54310a 	.word	0x4f54310a
 80026dc:	4f54300a 	.word	0x4f54300a

080026e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026e0:	b538      	push	{r3, r4, r5, lr}
 80026e2:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026e4:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80026e6:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80026ec:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026f0:	4a0e      	ldr	r2, [pc, #56]	@ (800272c <PCD_EP_OutSetupPacket_int+0x4c>)
 80026f2:	4295      	cmp	r5, r2
 80026f4:	d907      	bls.n	8002706 <PCD_EP_OutSetupPacket_int+0x26>
 80026f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026fa:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 80026fe:	d002      	beq.n	8002706 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002700:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002704:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002706:	4620      	mov	r0, r4
 8002708:	f003 ff9a 	bl	8006640 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800270c:	4b07      	ldr	r3, [pc, #28]	@ (800272c <PCD_EP_OutSetupPacket_int+0x4c>)
 800270e:	429d      	cmp	r5, r3
 8002710:	d902      	bls.n	8002718 <PCD_EP_OutSetupPacket_int+0x38>
 8002712:	79a3      	ldrb	r3, [r4, #6]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d001      	beq.n	800271c <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8002718:	2000      	movs	r0, #0
 800271a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800271c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002720:	2101      	movs	r1, #1
 8002722:	6820      	ldr	r0, [r4, #0]
 8002724:	f002 fa26 	bl	8004b74 <USB_EP0_OutStart>
 8002728:	e7f6      	b.n	8002718 <PCD_EP_OutSetupPacket_int+0x38>
 800272a:	bf00      	nop
 800272c:	4f54300a 	.word	0x4f54300a

08002730 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002730:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8002734:	2b01      	cmp	r3, #1
 8002736:	d00c      	beq.n	8002752 <HAL_PCD_SetAddress+0x22>
{
 8002738:	b510      	push	{r4, lr}
 800273a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800273c:	2301      	movs	r3, #1
 800273e:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002742:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002744:	6800      	ldr	r0, [r0, #0]
 8002746:	f002 f977 	bl	8004a38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800274a:	2000      	movs	r0, #0
 800274c:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8002750:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002752:	2002      	movs	r0, #2
}
 8002754:	4770      	bx	lr

08002756 <HAL_PCD_EP_Open>:
{
 8002756:	b538      	push	{r3, r4, r5, lr}
 8002758:	4605      	mov	r5, r0
 800275a:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800275c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002760:	d12b      	bne.n	80027ba <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002762:	f001 0e0f 	and.w	lr, r1, #15
 8002766:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 800276a:	00a4      	lsls	r4, r4, #2
 800276c:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 8002770:	4404      	add	r4, r0
 8002772:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8002774:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8002778:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800277c:	2000      	movs	r0, #0
 800277e:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8002782:	f00c 0c0f 	and.w	ip, ip, #15
 8002786:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800278a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800278e:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8002790:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8002792:	784a      	ldrb	r2, [r1, #1]
 8002794:	b10a      	cbz	r2, 800279a <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 8002796:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 800279a:	2b02      	cmp	r3, #2
 800279c:	d01c      	beq.n	80027d8 <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 800279e:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d01b      	beq.n	80027de <HAL_PCD_EP_Open+0x88>
 80027a6:	2301      	movs	r3, #1
 80027a8:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027ac:	6828      	ldr	r0, [r5, #0]
 80027ae:	f001 fe70 	bl	8004492 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 80027b8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ba:	f001 000f 	and.w	r0, r1, #15
 80027be:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 80027c2:	0089      	lsls	r1, r1, #2
 80027c4:	3110      	adds	r1, #16
 80027c6:	4429      	add	r1, r5
 80027c8:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80027ca:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80027ce:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80027d2:	2401      	movs	r4, #1
 80027d4:	7544      	strb	r4, [r0, #21]
 80027d6:	e7d4      	b.n	8002782 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	714b      	strb	r3, [r1, #5]
 80027dc:	e7df      	b.n	800279e <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 80027de:	2002      	movs	r0, #2
 80027e0:	e7ea      	b.n	80027b8 <HAL_PCD_EP_Open+0x62>

080027e2 <HAL_PCD_EP_Close>:
{
 80027e2:	b510      	push	{r4, lr}
 80027e4:	4604      	mov	r4, r0
 80027e6:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80027e8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80027ec:	d120      	bne.n	8002830 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ee:	f001 000f 	and.w	r0, r1, #15
 80027f2:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027fc:	4423      	add	r3, r4
 80027fe:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8002800:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8002804:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002808:	2300      	movs	r3, #0
 800280a:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 800280e:	f002 020f 	and.w	r2, r2, #15
 8002812:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002814:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002818:	2b01      	cmp	r3, #1
 800281a:	d018      	beq.n	800284e <HAL_PCD_EP_Close+0x6c>
 800281c:	2301      	movs	r3, #1
 800281e:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002822:	6820      	ldr	r0, [r4, #0]
 8002824:	f001 fe82 	bl	800452c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002828:	2000      	movs	r0, #0
 800282a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800282e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002830:	f001 000f 	and.w	r0, r1, #15
 8002834:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	3310      	adds	r3, #16
 800283c:	4423      	add	r3, r4
 800283e:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8002840:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8002844:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002848:	2301      	movs	r3, #1
 800284a:	7543      	strb	r3, [r0, #21]
 800284c:	e7df      	b.n	800280e <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 800284e:	2002      	movs	r0, #2
 8002850:	e7ed      	b.n	800282e <HAL_PCD_EP_Close+0x4c>

08002852 <HAL_PCD_EP_Receive>:
{
 8002852:	b510      	push	{r4, lr}
 8002854:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002856:	f001 0c0f 	and.w	ip, r1, #15
 800285a:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 800285e:	0089      	lsls	r1, r1, #2
 8002860:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8002864:	4401      	add	r1, r0
 8002866:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8002868:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 800286c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8002870:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 8002874:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 800287e:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8002882:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 8002886:	7982      	ldrb	r2, [r0, #6]
 8002888:	2a01      	cmp	r2, #1
 800288a:	d004      	beq.n	8002896 <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800288c:	6800      	ldr	r0, [r0, #0]
 800288e:	f001 ff33 	bl	80046f8 <USB_EPStartXfer>
}
 8002892:	2000      	movs	r0, #0
 8002894:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002896:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 800289a:	e7f7      	b.n	800288c <HAL_PCD_EP_Receive+0x3a>

0800289c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800289c:	f001 010f 	and.w	r1, r1, #15
 80028a0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80028a4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80028a8:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 80028ac:	4770      	bx	lr

080028ae <HAL_PCD_EP_Transmit>:
{
 80028ae:	b510      	push	{r4, lr}
 80028b0:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028b2:	f001 0c0f 	and.w	ip, r1, #15
 80028b6:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80028ba:	0089      	lsls	r1, r1, #2
 80028bc:	3110      	adds	r1, #16
 80028be:	4401      	add	r1, r0
 80028c0:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80028c2:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80028c6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80028ca:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 80028ce:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 80028d8:	2301      	movs	r3, #1
 80028da:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028de:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 80028e2:	7982      	ldrb	r2, [r0, #6]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d004      	beq.n	80028f2 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028e8:	6800      	ldr	r0, [r0, #0]
 80028ea:	f001 ff05 	bl	80046f8 <USB_EPStartXfer>
}
 80028ee:	2000      	movs	r0, #0
 80028f0:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80028f2:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 80028f6:	e7f7      	b.n	80028e8 <HAL_PCD_EP_Transmit+0x3a>

080028f8 <HAL_PCD_EP_SetStall>:
{
 80028f8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028fa:	f001 050f 	and.w	r5, r1, #15
 80028fe:	7902      	ldrb	r2, [r0, #4]
 8002900:	42aa      	cmp	r2, r5
 8002902:	d338      	bcc.n	8002976 <HAL_PCD_EP_SetStall+0x7e>
 8002904:	4604      	mov	r4, r0
 8002906:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8002908:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800290c:	d11f      	bne.n	800294e <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 800290e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002912:	0089      	lsls	r1, r1, #2
 8002914:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8002918:	4401      	add	r1, r0
 800291a:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800291c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002920:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 800292a:	2301      	movs	r3, #1
 800292c:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800292e:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002930:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002934:	2b01      	cmp	r3, #1
 8002936:	d020      	beq.n	800297a <HAL_PCD_EP_SetStall+0x82>
 8002938:	2301      	movs	r3, #1
 800293a:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800293e:	6820      	ldr	r0, [r4, #0]
 8002940:	f002 f81f 	bl	8004982 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002944:	b185      	cbz	r5, 8002968 <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 8002946:	2000      	movs	r0, #0
 8002948:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800294c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294e:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8002952:	0089      	lsls	r1, r1, #2
 8002954:	3110      	adds	r1, #16
 8002956:	4401      	add	r1, r0
 8002958:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800295a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800295e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002962:	2201      	movs	r2, #1
 8002964:	755a      	strb	r2, [r3, #21]
 8002966:	e7e0      	b.n	800292a <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002968:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800296c:	79a1      	ldrb	r1, [r4, #6]
 800296e:	6820      	ldr	r0, [r4, #0]
 8002970:	f002 f900 	bl	8004b74 <USB_EP0_OutStart>
 8002974:	e7e7      	b.n	8002946 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8002976:	2001      	movs	r0, #1
 8002978:	e7e8      	b.n	800294c <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 800297a:	2002      	movs	r0, #2
 800297c:	e7e6      	b.n	800294c <HAL_PCD_EP_SetStall+0x54>

0800297e <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800297e:	f001 030f 	and.w	r3, r1, #15
 8002982:	7902      	ldrb	r2, [r0, #4]
 8002984:	429a      	cmp	r2, r3
 8002986:	d330      	bcc.n	80029ea <HAL_PCD_EP_ClrStall+0x6c>
{
 8002988:	b510      	push	{r4, lr}
 800298a:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800298c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002990:	d11e      	bne.n	80029d0 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002992:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8002996:	0089      	lsls	r1, r1, #2
 8002998:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800299c:	4401      	add	r1, r0
 800299e:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80029a0:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80029a4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80029a8:	2000      	movs	r0, #0
 80029aa:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 80029ae:	2200      	movs	r2, #0
 80029b0:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029b2:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80029b4:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d018      	beq.n	80029ee <HAL_PCD_EP_ClrStall+0x70>
 80029bc:	2301      	movs	r3, #1
 80029be:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029c2:	6820      	ldr	r0, [r4, #0]
 80029c4:	f002 f80a 	bl	80049dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80029ce:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029d0:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80029d4:	0089      	lsls	r1, r1, #2
 80029d6:	3110      	adds	r1, #16
 80029d8:	4401      	add	r1, r0
 80029da:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80029dc:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80029e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80029e4:	2001      	movs	r0, #1
 80029e6:	7550      	strb	r0, [r2, #21]
 80029e8:	e7e1      	b.n	80029ae <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 80029ea:	2001      	movs	r0, #1
}
 80029ec:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80029ee:	2002      	movs	r0, #2
 80029f0:	e7ed      	b.n	80029ce <HAL_PCD_EP_ClrStall+0x50>

080029f2 <HAL_PCD_EP_Abort>:
{
 80029f2:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 80029f4:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80029f8:	d10c      	bne.n	8002a14 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029fa:	f001 010f 	and.w	r1, r1, #15
 80029fe:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002a02:	0089      	lsls	r1, r1, #2
 8002a04:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8002a08:	4401      	add	r1, r0
 8002a0a:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a0c:	6800      	ldr	r0, [r0, #0]
 8002a0e:	f001 fdfd 	bl	800460c <USB_EPStopXfer>
}
 8002a12:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a14:	f001 010f 	and.w	r1, r1, #15
 8002a18:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002a1c:	0089      	lsls	r1, r1, #2
 8002a1e:	3110      	adds	r1, #16
 8002a20:	4401      	add	r1, r0
 8002a22:	3104      	adds	r1, #4
 8002a24:	e7f2      	b.n	8002a0c <HAL_PCD_EP_Abort+0x1a>

08002a26 <HAL_PCD_IRQHandler>:
{
 8002a26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a2e:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a30:	4628      	mov	r0, r5
 8002a32:	f002 f85c 	bl	8004aee <USB_GetMode>
 8002a36:	b110      	cbz	r0, 8002a3e <HAL_PCD_IRQHandler+0x18>
}
 8002a38:	b003      	add	sp, #12
 8002a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a3e:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a40:	6820      	ldr	r0, [r4, #0]
 8002a42:	f002 f825 	bl	8004a90 <USB_ReadInterrupts>
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d0f6      	beq.n	8002a38 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a4a:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8002a54:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a58:	6820      	ldr	r0, [r4, #0]
 8002a5a:	f002 f819 	bl	8004a90 <USB_ReadInterrupts>
 8002a5e:	f010 0f02 	tst.w	r0, #2
 8002a62:	d004      	beq.n	8002a6e <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a64:	6822      	ldr	r2, [r4, #0]
 8002a66:	6953      	ldr	r3, [r2, #20]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a6e:	6820      	ldr	r0, [r4, #0]
 8002a70:	f002 f80e 	bl	8004a90 <USB_ReadInterrupts>
 8002a74:	f010 0f10 	tst.w	r0, #16
 8002a78:	d015      	beq.n	8002aa6 <HAL_PCD_IRQHandler+0x80>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a7a:	6822      	ldr	r2, [r4, #0]
 8002a7c:	6993      	ldr	r3, [r2, #24]
 8002a7e:	f023 0310 	bic.w	r3, r3, #16
 8002a82:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8002a84:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a88:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a8c:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 8002a90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a94:	d04c      	beq.n	8002b30 <HAL_PCD_IRQHandler+0x10a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a96:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a9a:	d06f      	beq.n	8002b7c <HAL_PCD_IRQHandler+0x156>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a9c:	6822      	ldr	r2, [r4, #0]
 8002a9e:	6993      	ldr	r3, [r2, #24]
 8002aa0:	f043 0310 	orr.w	r3, r3, #16
 8002aa4:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002aa6:	6820      	ldr	r0, [r4, #0]
 8002aa8:	f001 fff2 	bl	8004a90 <USB_ReadInterrupts>
 8002aac:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8002ab0:	d176      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x17a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ab2:	6820      	ldr	r0, [r4, #0]
 8002ab4:	f001 ffec 	bl	8004a90 <USB_ReadInterrupts>
 8002ab8:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8002abc:	f040 80e0 	bne.w	8002c80 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ac0:	6820      	ldr	r0, [r4, #0]
 8002ac2:	f001 ffe5 	bl	8004a90 <USB_ReadInterrupts>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	f2c0 8161 	blt.w	8002d8e <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002acc:	6820      	ldr	r0, [r4, #0]
 8002ace:	f001 ffdf 	bl	8004a90 <USB_ReadInterrupts>
 8002ad2:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8002ad6:	d009      	beq.n	8002aec <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f013 0f01 	tst.w	r3, #1
 8002ade:	f040 816e 	bne.w	8002dbe <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ae2:	6822      	ldr	r2, [r4, #0]
 8002ae4:	6953      	ldr	r3, [r2, #20]
 8002ae6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aea:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002aec:	6820      	ldr	r0, [r4, #0]
 8002aee:	f001 ffcf 	bl	8004a90 <USB_ReadInterrupts>
 8002af2:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8002af6:	f040 8166 	bne.w	8002dc6 <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002afa:	6820      	ldr	r0, [r4, #0]
 8002afc:	f001 ffc8 	bl	8004a90 <USB_ReadInterrupts>
 8002b00:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8002b04:	f040 81b3 	bne.w	8002e6e <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b08:	6820      	ldr	r0, [r4, #0]
 8002b0a:	f001 ffc1 	bl	8004a90 <USB_ReadInterrupts>
 8002b0e:	f010 0f08 	tst.w	r0, #8
 8002b12:	f040 81c4 	bne.w	8002e9e <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b16:	6820      	ldr	r0, [r4, #0]
 8002b18:	f001 ffba 	bl	8004a90 <USB_ReadInterrupts>
 8002b1c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8002b20:	f000 81d7 	beq.w	8002ed2 <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b24:	69ab      	ldr	r3, [r5, #24]
 8002b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b2a:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b2c:	2601      	movs	r6, #1
 8002b2e:	e1c0      	b.n	8002eb2 <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b30:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002b34:	ea18 0f03 	tst.w	r8, r3
 8002b38:	d0b0      	beq.n	8002a9c <HAL_PCD_IRQHandler+0x76>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b3a:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b42:	9301      	str	r3, [sp, #4]
 8002b44:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 8002b48:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8002b4c:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8002b50:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8002b54:	4628      	mov	r0, r5
 8002b56:	f001 fef1 	bl	800493c <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b5a:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8002b5e:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8002b62:	4453      	add	r3, sl
 8002b64:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b68:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 8002b6c:	9a01      	ldr	r2, [sp, #4]
 8002b6e:	444a      	add	r2, r9
 8002b70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002b74:	4453      	add	r3, sl
 8002b76:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8002b7a:	e78f      	b.n	8002a9c <HAL_PCD_IRQHandler+0x76>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8002b82:	4628      	mov	r0, r5
 8002b84:	f001 feda 	bl	800493c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b88:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002b8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002b90:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8002b94:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8002b98:	4442      	add	r2, r8
 8002b9a:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 8002b9e:	e77d      	b.n	8002a9c <HAL_PCD_IRQHandler+0x76>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002ba0:	6820      	ldr	r0, [r4, #0]
 8002ba2:	f001 ff79 	bl	8004a98 <USB_ReadDevAllOutEpInterrupt>
 8002ba6:	4680      	mov	r8, r0
      epnum = 0U;
 8002ba8:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002baa:	e035      	b.n	8002c18 <HAL_PCD_IRQHandler+0x1f2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002bac:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f7ff fd0f 	bl	80025dc <PCD_EP_OutXfrComplete_int>
 8002bbe:	e03c      	b.n	8002c3a <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bc0:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bca:	4649      	mov	r1, r9
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f7ff fd87 	bl	80026e0 <PCD_EP_OutSetupPacket_int>
 8002bd2:	e035      	b.n	8002c40 <HAL_PCD_IRQHandler+0x21a>
            if (ep->is_iso_incomplete == 1U)
 8002bd4:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002bd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002bdc:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d041      	beq.n	8002c68 <HAL_PCD_IRQHandler+0x242>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002be4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002be8:	2202      	movs	r2, #2
 8002bea:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002bee:	f01a 0f20 	tst.w	sl, #32
 8002bf2:	d004      	beq.n	8002bfe <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bf4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002bfe:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8002c02:	d005      	beq.n	8002c10 <HAL_PCD_IRQHandler+0x1ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c04:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002c08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c0c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8002c10:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002c14:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8002c18:	f1b8 0f00 	cmp.w	r8, #0
 8002c1c:	f43f af49 	beq.w	8002ab2 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 8002c20:	f018 0f01 	tst.w	r8, #1
 8002c24:	d0f4      	beq.n	8002c10 <HAL_PCD_IRQHandler+0x1ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c26:	fa5f fb89 	uxtb.w	fp, r9
 8002c2a:	4659      	mov	r1, fp
 8002c2c:	6820      	ldr	r0, [r4, #0]
 8002c2e:	f001 ff43 	bl	8004ab8 <USB_ReadDevOutEPInterrupt>
 8002c32:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c34:	f010 0f01 	tst.w	r0, #1
 8002c38:	d1b8      	bne.n	8002bac <HAL_PCD_IRQHandler+0x186>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c3a:	f01a 0f08 	tst.w	sl, #8
 8002c3e:	d1bf      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x19a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c40:	f01a 0f10 	tst.w	sl, #16
 8002c44:	d004      	beq.n	8002c50 <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c46:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002c4a:	2210      	movs	r2, #16
 8002c4c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c50:	f01a 0f02 	tst.w	sl, #2
 8002c54:	d0cb      	beq.n	8002bee <HAL_PCD_IRQHandler+0x1c8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c56:	696b      	ldr	r3, [r5, #20]
 8002c58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002c5c:	d0ba      	beq.n	8002bd4 <HAL_PCD_IRQHandler+0x1ae>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	e7b5      	b.n	8002bd4 <HAL_PCD_IRQHandler+0x1ae>
              ep->is_iso_incomplete = 0U;
 8002c68:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002c6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c76:	4659      	mov	r1, fp
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f003 fd37 	bl	80066ec <HAL_PCD_ISOOUTIncompleteCallback>
 8002c7e:	e7b1      	b.n	8002be4 <HAL_PCD_IRQHandler+0x1be>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c80:	6820      	ldr	r0, [r4, #0]
 8002c82:	f001 ff11 	bl	8004aa8 <USB_ReadDevAllInEpInterrupt>
 8002c86:	4680      	mov	r8, r0
      epnum = 0U;
 8002c88:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002c8a:	e025      	b.n	8002cd8 <HAL_PCD_IRQHandler+0x2b2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c8c:	4659      	mov	r1, fp
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f003 fcea 	bl	8006668 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c94:	f01a 0f08 	tst.w	sl, #8
 8002c98:	d004      	beq.n	8002ca4 <HAL_PCD_IRQHandler+0x27e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c9a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ca4:	f01a 0f10 	tst.w	sl, #16
 8002ca8:	d004      	beq.n	8002cb4 <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002caa:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002cae:	2210      	movs	r2, #16
 8002cb0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cb4:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8002cb8:	d004      	beq.n	8002cc4 <HAL_PCD_IRQHandler+0x29e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cba:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002cbe:	2240      	movs	r2, #64	@ 0x40
 8002cc0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002cc4:	f01a 0f02 	tst.w	sl, #2
 8002cc8:	d140      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x326>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cca:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8002cce:	d159      	bne.n	8002d84 <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 8002cd0:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002cd4:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8002cd8:	f1b8 0f00 	cmp.w	r8, #0
 8002cdc:	f43f aef0 	beq.w	8002ac0 <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ce0:	f018 0f01 	tst.w	r8, #1
 8002ce4:	d0f4      	beq.n	8002cd0 <HAL_PCD_IRQHandler+0x2aa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ce6:	fa5f fb89 	uxtb.w	fp, r9
 8002cea:	4659      	mov	r1, fp
 8002cec:	6820      	ldr	r0, [r4, #0]
 8002cee:	f001 feec 	bl	8004aca <USB_ReadDevInEPInterrupt>
 8002cf2:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002cf4:	f010 0f01 	tst.w	r0, #1
 8002cf8:	d0cc      	beq.n	8002c94 <HAL_PCD_IRQHandler+0x26e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cfa:	f009 020f 	and.w	r2, r9, #15
 8002cfe:	2101      	movs	r1, #1
 8002d00:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d06:	ea23 0302 	bic.w	r3, r3, r2
 8002d0a:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d0c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002d10:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8002d14:	79a3      	ldrb	r3, [r4, #6]
 8002d16:	428b      	cmp	r3, r1
 8002d18:	d1b8      	bne.n	8002c8c <HAL_PCD_IRQHandler+0x266>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d1a:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002d1e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	69d9      	ldr	r1, [r3, #28]
 8002d26:	440a      	add	r2, r1
 8002d28:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d2a:	f1b9 0f00 	cmp.w	r9, #0
 8002d2e:	d1ad      	bne.n	8002c8c <HAL_PCD_IRQHandler+0x266>
 8002d30:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002d34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1a6      	bne.n	8002c8c <HAL_PCD_IRQHandler+0x266>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d3e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002d42:	2101      	movs	r1, #1
 8002d44:	6820      	ldr	r0, [r4, #0]
 8002d46:	f001 ff15 	bl	8004b74 <USB_EP0_OutStart>
 8002d4a:	e79f      	b.n	8002c8c <HAL_PCD_IRQHandler+0x266>
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	4628      	mov	r0, r5
 8002d50:	f001 fa72 	bl	8004238 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8002d54:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002d58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002d5c:	7ddb      	ldrb	r3, [r3, #23]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d005      	beq.n	8002d6e <HAL_PCD_IRQHandler+0x348>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d62:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002d66:	2202      	movs	r2, #2
 8002d68:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8002d6c:	e7ad      	b.n	8002cca <HAL_PCD_IRQHandler+0x2a4>
              ep->is_iso_incomplete = 0U;
 8002d6e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002d72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002d76:	2200      	movs	r2, #0
 8002d78:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d7a:	4659      	mov	r1, fp
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f003 fcbb 	bl	80066f8 <HAL_PCD_ISOINIncompleteCallback>
 8002d82:	e7ee      	b.n	8002d62 <HAL_PCD_IRQHandler+0x33c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d84:	4649      	mov	r1, r9
 8002d86:	4620      	mov	r0, r4
 8002d88:	f7ff fb1c 	bl	80023c4 <PCD_WriteEmptyTxFifo>
 8002d8c:	e7a0      	b.n	8002cd0 <HAL_PCD_IRQHandler+0x2aa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8002d96:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d008      	beq.n	8002db0 <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f003 fc9e 	bl	80066e0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002da4:	6822      	ldr	r2, [r4, #0]
 8002da6:	6953      	ldr	r3, [r2, #20]
 8002da8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dac:	6153      	str	r3, [r2, #20]
 8002dae:	e68d      	b.n	8002acc <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 8002db0:	2100      	movs	r1, #0
 8002db2:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002db6:	4620      	mov	r0, r4
 8002db8:	f000 f93f 	bl	800303a <HAL_PCDEx_LPM_Callback>
 8002dbc:	e7f2      	b.n	8002da4 <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f003 fc76 	bl	80066b0 <HAL_PCD_SuspendCallback>
 8002dc4:	e68d      	b.n	8002ae2 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002dce:	2110      	movs	r1, #16
 8002dd0:	6820      	ldr	r0, [r4, #0]
 8002dd2:	f001 fa31 	bl	8004238 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd6:	e01a      	b.n	8002e0e <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002dd8:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8002ddc:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8002de0:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002de4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002de8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002dec:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002df0:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002df4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8002df8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002dfc:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e00:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8002e04:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8002e08:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e0c:	3601      	adds	r6, #1
 8002e0e:	7923      	ldrb	r3, [r4, #4]
 8002e10:	42b3      	cmp	r3, r6
 8002e12:	d8e1      	bhi.n	8002dd8 <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e1a:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e1c:	7be3      	ldrb	r3, [r4, #15]
 8002e1e:	b1db      	cbz	r3, 8002e58 <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e24:	f043 030b 	orr.w	r3, r3, #11
 8002e28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e2e:	f043 030b 	orr.w	r3, r3, #11
 8002e32:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e34:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 8002e38:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e3c:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e40:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002e44:	79a1      	ldrb	r1, [r4, #6]
 8002e46:	6820      	ldr	r0, [r4, #0]
 8002e48:	f001 fe94 	bl	8004b74 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e4c:	6822      	ldr	r2, [r4, #0]
 8002e4e:	6953      	ldr	r3, [r2, #20]
 8002e50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e54:	6153      	str	r3, [r2, #20]
 8002e56:	e650      	b.n	8002afa <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e5e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002e62:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f043 030b 	orr.w	r3, r3, #11
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	e7e2      	b.n	8002e34 <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e6e:	6820      	ldr	r0, [r4, #0]
 8002e70:	f001 fe72 	bl	8004b58 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e74:	6820      	ldr	r0, [r4, #0]
 8002e76:	f001 fafb 	bl	8004470 <USB_GetDevSpeed>
 8002e7a:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e7c:	6826      	ldr	r6, [r4, #0]
 8002e7e:	f000 fbdd 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8002e82:	4601      	mov	r1, r0
 8002e84:	79e2      	ldrb	r2, [r4, #7]
 8002e86:	4630      	mov	r0, r6
 8002e88:	f001 f958 	bl	800413c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f003 fbfc 	bl	800668a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e92:	6822      	ldr	r2, [r4, #0]
 8002e94:	6953      	ldr	r3, [r2, #20]
 8002e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e9a:	6153      	str	r3, [r2, #20]
 8002e9c:	e634      	b.n	8002b08 <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f003 fbed 	bl	800667e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ea4:	6822      	ldr	r2, [r4, #0]
 8002ea6:	6953      	ldr	r3, [r2, #20]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	6153      	str	r3, [r2, #20]
 8002eae:	e632      	b.n	8002b16 <HAL_PCD_IRQHandler+0xf0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eb0:	3601      	adds	r6, #1
 8002eb2:	7923      	ldrb	r3, [r4, #4]
 8002eb4:	42b3      	cmp	r3, r6
 8002eb6:	d90c      	bls.n	8002ed2 <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002eb8:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8002ebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002ec0:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d1f3      	bne.n	8002eb0 <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ec8:	b2f1      	uxtb	r1, r6
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f7ff fd91 	bl	80029f2 <HAL_PCD_EP_Abort>
 8002ed0:	e7ee      	b.n	8002eb0 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ed2:	6820      	ldr	r0, [r4, #0]
 8002ed4:	f001 fddc 	bl	8004a90 <USB_ReadInterrupts>
 8002ed8:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8002edc:	d125      	bne.n	8002f2a <HAL_PCD_IRQHandler+0x504>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ede:	6820      	ldr	r0, [r4, #0]
 8002ee0:	f001 fdd6 	bl	8004a90 <USB_ReadInterrupts>
 8002ee4:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8002ee8:	d059      	beq.n	8002f9e <HAL_PCD_IRQHandler+0x578>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eea:	2301      	movs	r3, #1
 8002eec:	e026      	b.n	8002f3c <HAL_PCD_IRQHandler+0x516>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eee:	3601      	adds	r6, #1
 8002ef0:	7923      	ldrb	r3, [r4, #4]
 8002ef2:	42b3      	cmp	r3, r6
 8002ef4:	d91b      	bls.n	8002f2e <HAL_PCD_IRQHandler+0x508>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ef6:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8002efa:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002efe:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8002f02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002f06:	7e1b      	ldrb	r3, [r3, #24]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d1f0      	bne.n	8002eee <HAL_PCD_IRQHandler+0x4c8>
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	daee      	bge.n	8002eee <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f10:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8002f14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002f18:	2201      	movs	r2, #1
 8002f1a:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f1c:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8002f20:	b2c9      	uxtb	r1, r1
 8002f22:	4620      	mov	r0, r4
 8002f24:	f7ff fd65 	bl	80029f2 <HAL_PCD_EP_Abort>
 8002f28:	e7e1      	b.n	8002eee <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f2a:	2601      	movs	r6, #1
 8002f2c:	e7e0      	b.n	8002ef0 <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f2e:	6822      	ldr	r2, [r4, #0]
 8002f30:	6953      	ldr	r3, [r2, #20]
 8002f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f36:	6153      	str	r3, [r2, #20]
 8002f38:	e7d1      	b.n	8002ede <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	7922      	ldrb	r2, [r4, #4]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d928      	bls.n	8002f94 <HAL_PCD_IRQHandler+0x56e>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f42:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002f46:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f4a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002f4e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002f52:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 8002f56:	2a01      	cmp	r2, #1
 8002f58:	d1ef      	bne.n	8002f3a <HAL_PCD_IRQHandler+0x514>
 8002f5a:	2900      	cmp	r1, #0
 8002f5c:	daed      	bge.n	8002f3a <HAL_PCD_IRQHandler+0x514>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f5e:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 8002f62:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8002f66:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f6a:	4291      	cmp	r1, r2
 8002f6c:	d1e5      	bne.n	8002f3a <HAL_PCD_IRQHandler+0x514>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f6e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002f72:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002f76:	2101      	movs	r1, #1
 8002f78:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f7c:	69aa      	ldr	r2, [r5, #24]
 8002f7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f82:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f84:	696a      	ldr	r2, [r5, #20]
 8002f86:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002f8a:	d1d6      	bne.n	8002f3a <HAL_PCD_IRQHandler+0x514>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f92:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f94:	6822      	ldr	r2, [r4, #0]
 8002f96:	6953      	ldr	r3, [r2, #20]
 8002f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f9c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f9e:	6820      	ldr	r0, [r4, #0]
 8002fa0:	f001 fd76 	bl	8004a90 <USB_ReadInterrupts>
 8002fa4:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8002fa8:	d110      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x5a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002faa:	6820      	ldr	r0, [r4, #0]
 8002fac:	f001 fd70 	bl	8004a90 <USB_ReadInterrupts>
 8002fb0:	f010 0f04 	tst.w	r0, #4
 8002fb4:	f43f ad40 	beq.w	8002a38 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fbc:	f015 0f04 	tst.w	r5, #4
 8002fc0:	d10d      	bne.n	8002fde <HAL_PCD_IRQHandler+0x5b8>
      hpcd->Instance->GOTGINT |= RegVal;
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	6853      	ldr	r3, [r2, #4]
 8002fc6:	432b      	orrs	r3, r5
 8002fc8:	6053      	str	r3, [r2, #4]
 8002fca:	e535      	b.n	8002a38 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f003 fb99 	bl	8006704 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fd2:	6822      	ldr	r2, [r4, #0]
 8002fd4:	6953      	ldr	r3, [r2, #20]
 8002fd6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fda:	6153      	str	r3, [r2, #20]
 8002fdc:	e7e5      	b.n	8002faa <HAL_PCD_IRQHandler+0x584>
        HAL_PCD_DisconnectCallback(hpcd);
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f003 fb96 	bl	8006710 <HAL_PCD_DisconnectCallback>
 8002fe4:	e7ed      	b.n	8002fc2 <HAL_PCD_IRQHandler+0x59c>

08002fe6 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002fe6:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002fe8:	6804      	ldr	r4, [r0, #0]
 8002fea:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8002fec:	b931      	cbnz	r1, 8002ffc <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002fee:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002ff2:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ffe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003000:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003004:	2300      	movs	r3, #0
 8003006:	e008      	b.n	800301a <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003008:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800300c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003010:	6849      	ldr	r1, [r1, #4]
 8003012:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003016:	3301      	adds	r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800301e:	428b      	cmp	r3, r1
 8003020:	d3f2      	bcc.n	8003008 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003022:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003026:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 800302a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800302e:	6060      	str	r0, [r4, #4]
 8003030:	e7e0      	b.n	8002ff4 <HAL_PCDEx_SetTxFiFo+0xe>

08003032 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003032:	6803      	ldr	r3, [r0, #0]
 8003034:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8003036:	2000      	movs	r0, #0
 8003038:	4770      	bx	lr

0800303a <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800303a:	4770      	bx	lr

0800303c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800303c:	2800      	cmp	r0, #0
 800303e:	f000 81e0 	beq.w	8003402 <HAL_RCC_OscConfig+0x3c6>
{
 8003042:	b570      	push	{r4, r5, r6, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003048:	6803      	ldr	r3, [r0, #0]
 800304a:	f013 0f01 	tst.w	r3, #1
 800304e:	d03b      	beq.n	80030c8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003050:	4b9f      	ldr	r3, [pc, #636]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b04      	cmp	r3, #4
 800305a:	d02c      	beq.n	80030b6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800305c:	4b9c      	ldr	r3, [pc, #624]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003064:	2b08      	cmp	r3, #8
 8003066:	d021      	beq.n	80030ac <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	6863      	ldr	r3, [r4, #4]
 800306a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800306e:	d04f      	beq.n	8003110 <HAL_RCC_OscConfig+0xd4>
 8003070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003074:	d052      	beq.n	800311c <HAL_RCC_OscConfig+0xe0>
 8003076:	4b96      	ldr	r3, [pc, #600]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003086:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003088:	6863      	ldr	r3, [r4, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d050      	beq.n	8003130 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308e:	f7fe fb71 	bl	8001774 <HAL_GetTick>
 8003092:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003094:	4b8e      	ldr	r3, [pc, #568]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800309c:	d114      	bne.n	80030c8 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309e:	f7fe fb69 	bl	8001774 <HAL_GetTick>
 80030a2:	1b40      	subs	r0, r0, r5
 80030a4:	2864      	cmp	r0, #100	@ 0x64
 80030a6:	d9f5      	bls.n	8003094 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80030a8:	2003      	movs	r0, #3
 80030aa:	e1b1      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ac:	4b88      	ldr	r3, [pc, #544]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80030b4:	d0d8      	beq.n	8003068 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b6:	4b86      	ldr	r3, [pc, #536]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80030be:	d003      	beq.n	80030c8 <HAL_RCC_OscConfig+0x8c>
 80030c0:	6863      	ldr	r3, [r4, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 819f 	beq.w	8003406 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	f013 0f02 	tst.w	r3, #2
 80030ce:	d054      	beq.n	800317a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030d0:	4b7f      	ldr	r3, [pc, #508]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f013 0f0c 	tst.w	r3, #12
 80030d8:	d03e      	beq.n	8003158 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030da:	4b7d      	ldr	r3, [pc, #500]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d033      	beq.n	800314e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030e6:	68e3      	ldr	r3, [r4, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d068      	beq.n	80031be <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ec:	4b79      	ldr	r3, [pc, #484]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fe fb3f 	bl	8001774 <HAL_GetTick>
 80030f6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f8:	4b75      	ldr	r3, [pc, #468]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f013 0f02 	tst.w	r3, #2
 8003100:	d154      	bne.n	80031ac <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003102:	f7fe fb37 	bl	8001774 <HAL_GetTick>
 8003106:	1b40      	subs	r0, r0, r5
 8003108:	2802      	cmp	r0, #2
 800310a:	d9f5      	bls.n	80030f8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800310c:	2003      	movs	r0, #3
 800310e:	e17f      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003110:	4a6f      	ldr	r2, [pc, #444]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 8003112:	6813      	ldr	r3, [r2, #0]
 8003114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e7b5      	b.n	8003088 <HAL_RCC_OscConfig+0x4c>
 800311c:	4b6c      	ldr	r3, [pc, #432]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e7ab      	b.n	8003088 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8003130:	f7fe fb20 	bl	8001774 <HAL_GetTick>
 8003134:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003136:	4b66      	ldr	r3, [pc, #408]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800313e:	d0c3      	beq.n	80030c8 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe fb18 	bl	8001774 <HAL_GetTick>
 8003144:	1b40      	subs	r0, r0, r5
 8003146:	2864      	cmp	r0, #100	@ 0x64
 8003148:	d9f5      	bls.n	8003136 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800314a:	2003      	movs	r0, #3
 800314c:	e160      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314e:	4b60      	ldr	r3, [pc, #384]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003156:	d1c6      	bne.n	80030e6 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003158:	4b5d      	ldr	r3, [pc, #372]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f013 0f02 	tst.w	r3, #2
 8003160:	d003      	beq.n	800316a <HAL_RCC_OscConfig+0x12e>
 8003162:	68e3      	ldr	r3, [r4, #12]
 8003164:	2b01      	cmp	r3, #1
 8003166:	f040 8150 	bne.w	800340a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316a:	4a59      	ldr	r2, [pc, #356]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 800316c:	6813      	ldr	r3, [r2, #0]
 800316e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003172:	6921      	ldr	r1, [r4, #16]
 8003174:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003178:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	f013 0f08 	tst.w	r3, #8
 8003180:	d042      	beq.n	8003208 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003182:	6963      	ldr	r3, [r4, #20]
 8003184:	b36b      	cbz	r3, 80031e2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003186:	4b53      	ldr	r3, [pc, #332]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 8003188:	2201      	movs	r2, #1
 800318a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318e:	f7fe faf1 	bl	8001774 <HAL_GetTick>
 8003192:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003194:	4b4e      	ldr	r3, [pc, #312]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 8003196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003198:	f013 0f02 	tst.w	r3, #2
 800319c:	d134      	bne.n	8003208 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800319e:	f7fe fae9 	bl	8001774 <HAL_GetTick>
 80031a2:	1b40      	subs	r0, r0, r5
 80031a4:	2802      	cmp	r0, #2
 80031a6:	d9f5      	bls.n	8003194 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80031a8:	2003      	movs	r0, #3
 80031aa:	e131      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ac:	4a48      	ldr	r2, [pc, #288]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 80031ae:	6813      	ldr	r3, [r2, #0]
 80031b0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80031b4:	6921      	ldr	r1, [r4, #16]
 80031b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	e7dd      	b.n	800317a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80031be:	4b45      	ldr	r3, [pc, #276]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031c4:	f7fe fad6 	bl	8001774 <HAL_GetTick>
 80031c8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	4b41      	ldr	r3, [pc, #260]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f013 0f02 	tst.w	r3, #2
 80031d2:	d0d2      	beq.n	800317a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d4:	f7fe face 	bl	8001774 <HAL_GetTick>
 80031d8:	1b40      	subs	r0, r0, r5
 80031da:	2802      	cmp	r0, #2
 80031dc:	d9f5      	bls.n	80031ca <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80031de:	2003      	movs	r0, #3
 80031e0:	e116      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e2:	4b3c      	ldr	r3, [pc, #240]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ea:	f7fe fac3 	bl	8001774 <HAL_GetTick>
 80031ee:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f0:	4b37      	ldr	r3, [pc, #220]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 80031f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f4:	f013 0f02 	tst.w	r3, #2
 80031f8:	d006      	beq.n	8003208 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fa:	f7fe fabb 	bl	8001774 <HAL_GetTick>
 80031fe:	1b40      	subs	r0, r0, r5
 8003200:	2802      	cmp	r0, #2
 8003202:	d9f5      	bls.n	80031f0 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8003204:	2003      	movs	r0, #3
 8003206:	e103      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	f013 0f04 	tst.w	r3, #4
 800320e:	d077      	beq.n	8003300 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003210:	4b2f      	ldr	r3, [pc, #188]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003218:	d133      	bne.n	8003282 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	4b2c      	ldr	r3, [pc, #176]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 8003220:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003222:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003226:	641a      	str	r2, [r3, #64]	@ 0x40
 8003228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003232:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003234:	4b28      	ldr	r3, [pc, #160]	@ (80032d8 <HAL_RCC_OscConfig+0x29c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800323c:	d023      	beq.n	8003286 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323e:	68a3      	ldr	r3, [r4, #8]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d034      	beq.n	80032ae <HAL_RCC_OscConfig+0x272>
 8003244:	2b05      	cmp	r3, #5
 8003246:	d038      	beq.n	80032ba <HAL_RCC_OscConfig+0x27e>
 8003248:	4b21      	ldr	r3, [pc, #132]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 800324a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800324c:	f022 0201 	bic.w	r2, r2, #1
 8003250:	671a      	str	r2, [r3, #112]	@ 0x70
 8003252:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003254:	f022 0204 	bic.w	r2, r2, #4
 8003258:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800325a:	68a3      	ldr	r3, [r4, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d03d      	beq.n	80032dc <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe fa88 	bl	8001774 <HAL_GetTick>
 8003264:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003266:	4b1a      	ldr	r3, [pc, #104]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326a:	f013 0f02 	tst.w	r3, #2
 800326e:	d146      	bne.n	80032fe <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fe fa80 	bl	8001774 <HAL_GetTick>
 8003274:	1b80      	subs	r0, r0, r6
 8003276:	f241 3388 	movw	r3, #5000	@ 0x1388
 800327a:	4298      	cmp	r0, r3
 800327c:	d9f3      	bls.n	8003266 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800327e:	2003      	movs	r0, #3
 8003280:	e0c6      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8003282:	2500      	movs	r5, #0
 8003284:	e7d6      	b.n	8003234 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003286:	4a14      	ldr	r2, [pc, #80]	@ (80032d8 <HAL_RCC_OscConfig+0x29c>)
 8003288:	6813      	ldr	r3, [r2, #0]
 800328a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800328e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003290:	f7fe fa70 	bl	8001774 <HAL_GetTick>
 8003294:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003296:	4b10      	ldr	r3, [pc, #64]	@ (80032d8 <HAL_RCC_OscConfig+0x29c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800329e:	d1ce      	bne.n	800323e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a0:	f7fe fa68 	bl	8001774 <HAL_GetTick>
 80032a4:	1b80      	subs	r0, r0, r6
 80032a6:	2802      	cmp	r0, #2
 80032a8:	d9f5      	bls.n	8003296 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80032aa:	2003      	movs	r0, #3
 80032ac:	e0b0      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ae:	4a08      	ldr	r2, [pc, #32]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 80032b0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032b8:	e7cf      	b.n	800325a <HAL_RCC_OscConfig+0x21e>
 80032ba:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 80032bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032be:	f042 0204 	orr.w	r2, r2, #4
 80032c2:	671a      	str	r2, [r3, #112]	@ 0x70
 80032c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	671a      	str	r2, [r3, #112]	@ 0x70
 80032cc:	e7c5      	b.n	800325a <HAL_RCC_OscConfig+0x21e>
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	42470000 	.word	0x42470000
 80032d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032dc:	f7fe fa4a 	bl	8001774 <HAL_GetTick>
 80032e0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e2:	4b52      	ldr	r3, [pc, #328]	@ (800342c <HAL_RCC_OscConfig+0x3f0>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e6:	f013 0f02 	tst.w	r3, #2
 80032ea:	d008      	beq.n	80032fe <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ec:	f7fe fa42 	bl	8001774 <HAL_GetTick>
 80032f0:	1b80      	subs	r0, r0, r6
 80032f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80032f6:	4298      	cmp	r0, r3
 80032f8:	d9f3      	bls.n	80032e2 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80032fa:	2003      	movs	r0, #3
 80032fc:	e088      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032fe:	b9ed      	cbnz	r5, 800333c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003300:	69a3      	ldr	r3, [r4, #24]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 8083 	beq.w	800340e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003308:	4a48      	ldr	r2, [pc, #288]	@ (800342c <HAL_RCC_OscConfig+0x3f0>)
 800330a:	6892      	ldr	r2, [r2, #8]
 800330c:	f002 020c 	and.w	r2, r2, #12
 8003310:	2a08      	cmp	r2, #8
 8003312:	d051      	beq.n	80033b8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003314:	2b02      	cmp	r3, #2
 8003316:	d017      	beq.n	8003348 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003318:	4b45      	ldr	r3, [pc, #276]	@ (8003430 <HAL_RCC_OscConfig+0x3f4>)
 800331a:	2200      	movs	r2, #0
 800331c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331e:	f7fe fa29 	bl	8001774 <HAL_GetTick>
 8003322:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003324:	4b41      	ldr	r3, [pc, #260]	@ (800342c <HAL_RCC_OscConfig+0x3f0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800332c:	d042      	beq.n	80033b4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332e:	f7fe fa21 	bl	8001774 <HAL_GetTick>
 8003332:	1b00      	subs	r0, r0, r4
 8003334:	2802      	cmp	r0, #2
 8003336:	d9f5      	bls.n	8003324 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003338:	2003      	movs	r0, #3
 800333a:	e069      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800333c:	4a3b      	ldr	r2, [pc, #236]	@ (800342c <HAL_RCC_OscConfig+0x3f0>)
 800333e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003344:	6413      	str	r3, [r2, #64]	@ 0x40
 8003346:	e7db      	b.n	8003300 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8003348:	4b39      	ldr	r3, [pc, #228]	@ (8003430 <HAL_RCC_OscConfig+0x3f4>)
 800334a:	2200      	movs	r2, #0
 800334c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800334e:	f7fe fa11 	bl	8001774 <HAL_GetTick>
 8003352:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003354:	4b35      	ldr	r3, [pc, #212]	@ (800342c <HAL_RCC_OscConfig+0x3f0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800335c:	d006      	beq.n	800336c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335e:	f7fe fa09 	bl	8001774 <HAL_GetTick>
 8003362:	1b40      	subs	r0, r0, r5
 8003364:	2802      	cmp	r0, #2
 8003366:	d9f5      	bls.n	8003354 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8003368:	2003      	movs	r0, #3
 800336a:	e051      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800336c:	69e3      	ldr	r3, [r4, #28]
 800336e:	6a22      	ldr	r2, [r4, #32]
 8003370:	4313      	orrs	r3, r2
 8003372:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003374:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003378:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800337a:	0852      	lsrs	r2, r2, #1
 800337c:	3a01      	subs	r2, #1
 800337e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003382:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003384:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003388:	4a28      	ldr	r2, [pc, #160]	@ (800342c <HAL_RCC_OscConfig+0x3f0>)
 800338a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800338c:	4b28      	ldr	r3, [pc, #160]	@ (8003430 <HAL_RCC_OscConfig+0x3f4>)
 800338e:	2201      	movs	r2, #1
 8003390:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003392:	f7fe f9ef 	bl	8001774 <HAL_GetTick>
 8003396:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003398:	4b24      	ldr	r3, [pc, #144]	@ (800342c <HAL_RCC_OscConfig+0x3f0>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80033a0:	d106      	bne.n	80033b0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fe f9e7 	bl	8001774 <HAL_GetTick>
 80033a6:	1b00      	subs	r0, r0, r4
 80033a8:	2802      	cmp	r0, #2
 80033aa:	d9f5      	bls.n	8003398 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80033ac:	2003      	movs	r0, #3
 80033ae:	e02f      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80033b0:	2000      	movs	r0, #0
 80033b2:	e02d      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
 80033b4:	2000      	movs	r0, #0
 80033b6:	e02b      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d02b      	beq.n	8003414 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80033bc:	4b1b      	ldr	r3, [pc, #108]	@ (800342c <HAL_RCC_OscConfig+0x3f0>)
 80033be:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80033c4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c6:	4291      	cmp	r1, r2
 80033c8:	d126      	bne.n	8003418 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033ce:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d0:	428a      	cmp	r2, r1
 80033d2:	d123      	bne.n	800341c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d6:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80033da:	401a      	ands	r2, r3
 80033dc:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80033e0:	d11e      	bne.n	8003420 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80033e6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80033e8:	0852      	lsrs	r2, r2, #1
 80033ea:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ec:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80033f0:	d118      	bne.n	8003424 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033f2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80033f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80033fc:	d114      	bne.n	8003428 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80033fe:	2000      	movs	r0, #0
 8003400:	e006      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8003402:	2001      	movs	r0, #1
}
 8003404:	4770      	bx	lr
        return HAL_ERROR;
 8003406:	2001      	movs	r0, #1
 8003408:	e002      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800340a:	2001      	movs	r0, #1
 800340c:	e000      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800340e:	2000      	movs	r0, #0
}
 8003410:	b002      	add	sp, #8
 8003412:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003414:	2001      	movs	r0, #1
 8003416:	e7fb      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8003418:	2001      	movs	r0, #1
 800341a:	e7f9      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
 800341c:	2001      	movs	r0, #1
 800341e:	e7f7      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
 8003420:	2001      	movs	r0, #1
 8003422:	e7f5      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
 8003424:	2001      	movs	r0, #1
 8003426:	e7f3      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
 8003428:	2001      	movs	r0, #1
 800342a:	e7f1      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
 800342c:	40023800 	.word	0x40023800
 8003430:	42470000 	.word	0x42470000

08003434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003434:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003436:	4b26      	ldr	r3, [pc, #152]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b04      	cmp	r3, #4
 8003440:	d041      	beq.n	80034c6 <HAL_RCC_GetSysClockFreq+0x92>
 8003442:	2b08      	cmp	r3, #8
 8003444:	d141      	bne.n	80034ca <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003446:	4b22      	ldr	r3, [pc, #136]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003454:	d012      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003456:	4b1e      	ldr	r3, [pc, #120]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800345e:	481d      	ldr	r0, [pc, #116]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003460:	2300      	movs	r3, #0
 8003462:	fba1 0100 	umull	r0, r1, r1, r0
 8003466:	f7fc fef3 	bl	8000250 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800346a:	4b19      	ldr	r3, [pc, #100]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003472:	3301      	adds	r3, #1
 8003474:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8003476:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800347a:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347c:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800347e:	6858      	ldr	r0, [r3, #4]
 8003480:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003484:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003488:	ebbc 0c00 	subs.w	ip, ip, r0
 800348c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003490:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003494:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003498:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800349c:	ebb1 010c 	subs.w	r1, r1, ip
 80034a0:	eb63 030e 	sbc.w	r3, r3, lr
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034aa:	00c9      	lsls	r1, r1, #3
 80034ac:	eb11 0c00 	adds.w	ip, r1, r0
 80034b0:	f143 0300 	adc.w	r3, r3, #0
 80034b4:	0299      	lsls	r1, r3, #10
 80034b6:	2300      	movs	r3, #0
 80034b8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80034bc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80034c0:	f7fc fec6 	bl	8000250 <__aeabi_uldivmod>
 80034c4:	e7d1      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80034c6:	4803      	ldr	r0, [pc, #12]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034c8:	e7d7      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ca:	4803      	ldr	r0, [pc, #12]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 80034cc:	e7d5      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x46>
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	017d7840 	.word	0x017d7840
 80034d8:	00f42400 	.word	0x00f42400

080034dc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80034dc:	2800      	cmp	r0, #0
 80034de:	f000 809b 	beq.w	8003618 <HAL_RCC_ClockConfig+0x13c>
{
 80034e2:	b570      	push	{r4, r5, r6, lr}
 80034e4:	460d      	mov	r5, r1
 80034e6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003628 <HAL_RCC_ClockConfig+0x14c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	428b      	cmp	r3, r1
 80034f2:	d208      	bcs.n	8003506 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f4:	b2cb      	uxtb	r3, r1
 80034f6:	4a4c      	ldr	r2, [pc, #304]	@ (8003628 <HAL_RCC_ClockConfig+0x14c>)
 80034f8:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	6813      	ldr	r3, [r2, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	428b      	cmp	r3, r1
 8003502:	f040 808b 	bne.w	800361c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	f013 0f02 	tst.w	r3, #2
 800350c:	d017      	beq.n	800353e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350e:	f013 0f04 	tst.w	r3, #4
 8003512:	d004      	beq.n	800351e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003514:	4a45      	ldr	r2, [pc, #276]	@ (800362c <HAL_RCC_ClockConfig+0x150>)
 8003516:	6893      	ldr	r3, [r2, #8]
 8003518:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800351c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	f013 0f08 	tst.w	r3, #8
 8003524:	d004      	beq.n	8003530 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003526:	4a41      	ldr	r2, [pc, #260]	@ (800362c <HAL_RCC_ClockConfig+0x150>)
 8003528:	6893      	ldr	r3, [r2, #8]
 800352a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800352e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003530:	4a3e      	ldr	r2, [pc, #248]	@ (800362c <HAL_RCC_ClockConfig+0x150>)
 8003532:	6893      	ldr	r3, [r2, #8]
 8003534:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003538:	68a1      	ldr	r1, [r4, #8]
 800353a:	430b      	orrs	r3, r1
 800353c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	f013 0f01 	tst.w	r3, #1
 8003544:	d032      	beq.n	80035ac <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003546:	6863      	ldr	r3, [r4, #4]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d021      	beq.n	8003590 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354c:	1e9a      	subs	r2, r3, #2
 800354e:	2a01      	cmp	r2, #1
 8003550:	d925      	bls.n	800359e <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003552:	4a36      	ldr	r2, [pc, #216]	@ (800362c <HAL_RCC_ClockConfig+0x150>)
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	f012 0f02 	tst.w	r2, #2
 800355a:	d061      	beq.n	8003620 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800355c:	4933      	ldr	r1, [pc, #204]	@ (800362c <HAL_RCC_ClockConfig+0x150>)
 800355e:	688a      	ldr	r2, [r1, #8]
 8003560:	f022 0203 	bic.w	r2, r2, #3
 8003564:	4313      	orrs	r3, r2
 8003566:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003568:	f7fe f904 	bl	8001774 <HAL_GetTick>
 800356c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356e:	4b2f      	ldr	r3, [pc, #188]	@ (800362c <HAL_RCC_ClockConfig+0x150>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	6862      	ldr	r2, [r4, #4]
 8003578:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800357c:	d016      	beq.n	80035ac <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357e:	f7fe f8f9 	bl	8001774 <HAL_GetTick>
 8003582:	1b80      	subs	r0, r0, r6
 8003584:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003588:	4298      	cmp	r0, r3
 800358a:	d9f0      	bls.n	800356e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800358c:	2003      	movs	r0, #3
 800358e:	e042      	b.n	8003616 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003590:	4a26      	ldr	r2, [pc, #152]	@ (800362c <HAL_RCC_ClockConfig+0x150>)
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8003598:	d1e0      	bne.n	800355c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800359a:	2001      	movs	r0, #1
 800359c:	e03b      	b.n	8003616 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359e:	4a23      	ldr	r2, [pc, #140]	@ (800362c <HAL_RCC_ClockConfig+0x150>)
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80035a6:	d1d9      	bne.n	800355c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80035a8:	2001      	movs	r0, #1
 80035aa:	e034      	b.n	8003616 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003628 <HAL_RCC_ClockConfig+0x14c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	42ab      	cmp	r3, r5
 80035b6:	d907      	bls.n	80035c8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b8:	b2ea      	uxtb	r2, r5
 80035ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <HAL_RCC_ClockConfig+0x14c>)
 80035bc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	42ab      	cmp	r3, r5
 80035c6:	d12d      	bne.n	8003624 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	f013 0f04 	tst.w	r3, #4
 80035ce:	d006      	beq.n	80035de <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d0:	4a16      	ldr	r2, [pc, #88]	@ (800362c <HAL_RCC_ClockConfig+0x150>)
 80035d2:	6893      	ldr	r3, [r2, #8]
 80035d4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80035d8:	68e1      	ldr	r1, [r4, #12]
 80035da:	430b      	orrs	r3, r1
 80035dc:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	f013 0f08 	tst.w	r3, #8
 80035e4:	d007      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035e6:	4a11      	ldr	r2, [pc, #68]	@ (800362c <HAL_RCC_ClockConfig+0x150>)
 80035e8:	6893      	ldr	r3, [r2, #8]
 80035ea:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80035ee:	6921      	ldr	r1, [r4, #16]
 80035f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80035f4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035f6:	f7ff ff1d 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80035fa:	4b0c      	ldr	r3, [pc, #48]	@ (800362c <HAL_RCC_ClockConfig+0x150>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003602:	4a0b      	ldr	r2, [pc, #44]	@ (8003630 <HAL_RCC_ClockConfig+0x154>)
 8003604:	5cd3      	ldrb	r3, [r2, r3]
 8003606:	40d8      	lsrs	r0, r3
 8003608:	4b0a      	ldr	r3, [pc, #40]	@ (8003634 <HAL_RCC_ClockConfig+0x158>)
 800360a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800360c:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <HAL_RCC_ClockConfig+0x15c>)
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	f000 fcb4 	bl	8003f7c <HAL_InitTick>
  return HAL_OK;
 8003614:	2000      	movs	r0, #0
}
 8003616:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003618:	2001      	movs	r0, #1
}
 800361a:	4770      	bx	lr
      return HAL_ERROR;
 800361c:	2001      	movs	r0, #1
 800361e:	e7fa      	b.n	8003616 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8003620:	2001      	movs	r0, #1
 8003622:	e7f8      	b.n	8003616 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003624:	2001      	movs	r0, #1
 8003626:	e7f6      	b.n	8003616 <HAL_RCC_ClockConfig+0x13a>
 8003628:	40023c00 	.word	0x40023c00
 800362c:	40023800 	.word	0x40023800
 8003630:	08008344 	.word	0x08008344
 8003634:	2000000c 	.word	0x2000000c
 8003638:	20000008 	.word	0x20000008

0800363c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800363c:	4b01      	ldr	r3, [pc, #4]	@ (8003644 <HAL_RCC_GetHCLKFreq+0x8>)
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	2000000c 	.word	0x2000000c

08003648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003648:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800364a:	f7ff fff7 	bl	800363c <HAL_RCC_GetHCLKFreq>
 800364e:	4b04      	ldr	r3, [pc, #16]	@ (8003660 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003656:	4a03      	ldr	r2, [pc, #12]	@ (8003664 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003658:	5cd3      	ldrb	r3, [r2, r3]
}
 800365a:	40d8      	lsrs	r0, r3
 800365c:	bd08      	pop	{r3, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	0800833c 	.word	0x0800833c

08003668 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003668:	230f      	movs	r3, #15
 800366a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <HAL_RCC_GetClockConfig+0x34>)
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	f002 0203 	and.w	r2, r2, #3
 8003674:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800367c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8003684:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	08db      	lsrs	r3, r3, #3
 800368a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800368e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003690:	4b03      	ldr	r3, [pc, #12]	@ (80036a0 <HAL_RCC_GetClockConfig+0x38>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	600b      	str	r3, [r1, #0]
}
 800369a:	4770      	bx	lr
 800369c:	40023800 	.word	0x40023800
 80036a0:	40023c00 	.word	0x40023c00

080036a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036a4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a6:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a8:	6a03      	ldr	r3, [r0, #32]
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036b2:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036b4:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036b8:	680c      	ldr	r4, [r1, #0]
 80036ba:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036bc:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036c0:	688b      	ldr	r3, [r1, #8]
 80036c2:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036c4:	4a0b      	ldr	r2, [pc, #44]	@ (80036f4 <TIM_OC1_SetConfig+0x50>)
 80036c6:	4290      	cmp	r0, r2
 80036c8:	d006      	beq.n	80036d8 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ca:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036cc:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ce:	684a      	ldr	r2, [r1, #4]
 80036d0:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d2:	6203      	str	r3, [r0, #32]
}
 80036d4:	bc30      	pop	{r4, r5}
 80036d6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80036d8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80036dc:	68ca      	ldr	r2, [r1, #12]
 80036de:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 80036e0:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036e4:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80036e8:	694a      	ldr	r2, [r1, #20]
 80036ea:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80036ec:	698d      	ldr	r5, [r1, #24]
 80036ee:	4315      	orrs	r5, r2
 80036f0:	e7eb      	b.n	80036ca <TIM_OC1_SetConfig+0x26>
 80036f2:	bf00      	nop
 80036f4:	40010000 	.word	0x40010000

080036f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036f8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fa:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036fc:	6a02      	ldr	r2, [r0, #32]
 80036fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003702:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003704:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003706:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003708:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800370c:	680d      	ldr	r5, [r1, #0]
 800370e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003714:	688a      	ldr	r2, [r1, #8]
 8003716:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800371a:	4a0d      	ldr	r2, [pc, #52]	@ (8003750 <TIM_OC3_SetConfig+0x58>)
 800371c:	4290      	cmp	r0, r2
 800371e:	d006      	beq.n	800372e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003720:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003722:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003724:	684a      	ldr	r2, [r1, #4]
 8003726:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003728:	6203      	str	r3, [r0, #32]
}
 800372a:	bc30      	pop	{r4, r5}
 800372c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800372e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003732:	68ca      	ldr	r2, [r1, #12]
 8003734:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003738:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800373c:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003740:	694a      	ldr	r2, [r1, #20]
 8003742:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003746:	698a      	ldr	r2, [r1, #24]
 8003748:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 800374c:	e7e8      	b.n	8003720 <TIM_OC3_SetConfig+0x28>
 800374e:	bf00      	nop
 8003750:	40010000 	.word	0x40010000

08003754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003754:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003756:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003758:	6a02      	ldr	r2, [r0, #32]
 800375a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800375e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003760:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003762:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003764:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003768:	680d      	ldr	r5, [r1, #0]
 800376a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800376e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003772:	688d      	ldr	r5, [r1, #8]
 8003774:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003778:	4d07      	ldr	r5, [pc, #28]	@ (8003798 <TIM_OC4_SetConfig+0x44>)
 800377a:	42a8      	cmp	r0, r5
 800377c:	d006      	beq.n	800378c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003780:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003782:	684a      	ldr	r2, [r1, #4]
 8003784:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003786:	6203      	str	r3, [r0, #32]
}
 8003788:	bc30      	pop	{r4, r5}
 800378a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 800378c:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003790:	694d      	ldr	r5, [r1, #20]
 8003792:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003796:	e7f2      	b.n	800377e <TIM_OC4_SetConfig+0x2a>
 8003798:	40010000 	.word	0x40010000

0800379c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800379c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800379e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a0:	6a04      	ldr	r4, [r0, #32]
 80037a2:	f024 0401 	bic.w	r4, r4, #1
 80037a6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037aa:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037ae:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037b2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80037b6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037b8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80037ba:	6203      	str	r3, [r0, #32]
}
 80037bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037c2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037c4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c6:	6a04      	ldr	r4, [r0, #32]
 80037c8:	f024 0410 	bic.w	r4, r4, #16
 80037cc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ce:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037d0:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037d4:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80037dc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037e0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80037e2:	6203      	str	r3, [r0, #32]
}
 80037e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037ea:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037f0:	430b      	orrs	r3, r1
 80037f2:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037f6:	6083      	str	r3, [r0, #8]
}
 80037f8:	4770      	bx	lr
	...

080037fc <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80037fc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003800:	2b01      	cmp	r3, #1
 8003802:	d12a      	bne.n	800385a <HAL_TIM_Base_Start+0x5e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	2302      	movs	r3, #2
 8003806:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380a:	6803      	ldr	r3, [r0, #0]
 800380c:	4a15      	ldr	r2, [pc, #84]	@ (8003864 <HAL_TIM_Base_Start+0x68>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d018      	beq.n	8003844 <HAL_TIM_Base_Start+0x48>
 8003812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003816:	d015      	beq.n	8003844 <HAL_TIM_Base_Start+0x48>
 8003818:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800381c:	4293      	cmp	r3, r2
 800381e:	d011      	beq.n	8003844 <HAL_TIM_Base_Start+0x48>
 8003820:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003824:	4293      	cmp	r3, r2
 8003826:	d00d      	beq.n	8003844 <HAL_TIM_Base_Start+0x48>
 8003828:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800382c:	4293      	cmp	r3, r2
 800382e:	d009      	beq.n	8003844 <HAL_TIM_Base_Start+0x48>
 8003830:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8003834:	4293      	cmp	r3, r2
 8003836:	d005      	beq.n	8003844 <HAL_TIM_Base_Start+0x48>
    __HAL_TIM_ENABLE(htim);
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003840:	2000      	movs	r0, #0
 8003842:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384a:	2a06      	cmp	r2, #6
 800384c:	d007      	beq.n	800385e <HAL_TIM_Base_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	f042 0201 	orr.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003856:	2000      	movs	r0, #0
 8003858:	4770      	bx	lr
    return HAL_ERROR;
 800385a:	2001      	movs	r0, #1
 800385c:	4770      	bx	lr
  return HAL_OK;
 800385e:	2000      	movs	r0, #0
}
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40010000 	.word	0x40010000

08003868 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003868:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800386c:	2b01      	cmp	r3, #1
 800386e:	d12f      	bne.n	80038d0 <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	2302      	movs	r3, #2
 8003872:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003876:	6802      	ldr	r2, [r0, #0]
 8003878:	68d3      	ldr	r3, [r2, #12]
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003880:	6803      	ldr	r3, [r0, #0]
 8003882:	4a15      	ldr	r2, [pc, #84]	@ (80038d8 <HAL_TIM_Base_Start_IT+0x70>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d018      	beq.n	80038ba <HAL_TIM_Base_Start_IT+0x52>
 8003888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800388c:	d015      	beq.n	80038ba <HAL_TIM_Base_Start_IT+0x52>
 800388e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003892:	4293      	cmp	r3, r2
 8003894:	d011      	beq.n	80038ba <HAL_TIM_Base_Start_IT+0x52>
 8003896:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800389a:	4293      	cmp	r3, r2
 800389c:	d00d      	beq.n	80038ba <HAL_TIM_Base_Start_IT+0x52>
 800389e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_TIM_Base_Start_IT+0x52>
 80038a6:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d005      	beq.n	80038ba <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80038b6:	2000      	movs	r0, #0
 80038b8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c0:	2a06      	cmp	r2, #6
 80038c2:	d007      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80038cc:	2000      	movs	r0, #0
 80038ce:	4770      	bx	lr
    return HAL_ERROR;
 80038d0:	2001      	movs	r0, #1
 80038d2:	4770      	bx	lr
  return HAL_OK;
 80038d4:	2000      	movs	r0, #0
}
 80038d6:	4770      	bx	lr
 80038d8:	40010000 	.word	0x40010000

080038dc <HAL_TIM_OC_MspInit>:
}
 80038dc:	4770      	bx	lr

080038de <HAL_TIM_OC_DelayElapsedCallback>:
}
 80038de:	4770      	bx	lr

080038e0 <HAL_TIM_IC_CaptureCallback>:
}
 80038e0:	4770      	bx	lr

080038e2 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80038e2:	4770      	bx	lr

080038e4 <HAL_TIM_TriggerCallback>:
}
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIM_IRQHandler>:
{
 80038e6:	b570      	push	{r4, r5, r6, lr}
 80038e8:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80038ea:	6803      	ldr	r3, [r0, #0]
 80038ec:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038ee:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038f0:	f015 0f02 	tst.w	r5, #2
 80038f4:	d010      	beq.n	8003918 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038f6:	f016 0f02 	tst.w	r6, #2
 80038fa:	d00d      	beq.n	8003918 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038fc:	f06f 0202 	mvn.w	r2, #2
 8003900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003902:	2301      	movs	r3, #1
 8003904:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003906:	6803      	ldr	r3, [r0, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f013 0f03 	tst.w	r3, #3
 800390e:	d05e      	beq.n	80039ce <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8003910:	f7ff ffe6 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003914:	2300      	movs	r3, #0
 8003916:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003918:	f015 0f04 	tst.w	r5, #4
 800391c:	d012      	beq.n	8003944 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800391e:	f016 0f04 	tst.w	r6, #4
 8003922:	d00f      	beq.n	8003944 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	f06f 0204 	mvn.w	r2, #4
 800392a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800392c:	2302      	movs	r3, #2
 800392e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003938:	d04f      	beq.n	80039da <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800393a:	4620      	mov	r0, r4
 800393c:	f7ff ffd0 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003940:	2300      	movs	r3, #0
 8003942:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003944:	f015 0f08 	tst.w	r5, #8
 8003948:	d012      	beq.n	8003970 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800394a:	f016 0f08 	tst.w	r6, #8
 800394e:	d00f      	beq.n	8003970 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	f06f 0208 	mvn.w	r2, #8
 8003956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003958:	2304      	movs	r3, #4
 800395a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f013 0f03 	tst.w	r3, #3
 8003964:	d040      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8003966:	4620      	mov	r0, r4
 8003968:	f7ff ffba 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396c:	2300      	movs	r3, #0
 800396e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003970:	f015 0f10 	tst.w	r5, #16
 8003974:	d012      	beq.n	800399c <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003976:	f016 0f10 	tst.w	r6, #16
 800397a:	d00f      	beq.n	800399c <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	f06f 0210 	mvn.w	r2, #16
 8003982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003984:	2308      	movs	r3, #8
 8003986:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003990:	d031      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8003992:	4620      	mov	r0, r4
 8003994:	f7ff ffa4 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003998:	2300      	movs	r3, #0
 800399a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800399c:	f015 0f01 	tst.w	r5, #1
 80039a0:	d002      	beq.n	80039a8 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039a2:	f016 0f01 	tst.w	r6, #1
 80039a6:	d12d      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039a8:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80039ac:	d002      	beq.n	80039b4 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039ae:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80039b2:	d12f      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039b4:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80039b8:	d002      	beq.n	80039c0 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039ba:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80039be:	d131      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039c0:	f015 0f20 	tst.w	r5, #32
 80039c4:	d002      	beq.n	80039cc <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039c6:	f016 0f20 	tst.w	r6, #32
 80039ca:	d133      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x14e>
}
 80039cc:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ce:	f7ff ff86 	bl	80038de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d2:	4620      	mov	r0, r4
 80039d4:	f7ff ff85 	bl	80038e2 <HAL_TIM_PWM_PulseFinishedCallback>
 80039d8:	e79c      	b.n	8003914 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	4620      	mov	r0, r4
 80039dc:	f7ff ff7f 	bl	80038de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e0:	4620      	mov	r0, r4
 80039e2:	f7ff ff7e 	bl	80038e2 <HAL_TIM_PWM_PulseFinishedCallback>
 80039e6:	e7ab      	b.n	8003940 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e8:	4620      	mov	r0, r4
 80039ea:	f7ff ff78 	bl	80038de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ee:	4620      	mov	r0, r4
 80039f0:	f7ff ff77 	bl	80038e2 <HAL_TIM_PWM_PulseFinishedCallback>
 80039f4:	e7ba      	b.n	800396c <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	4620      	mov	r0, r4
 80039f8:	f7ff ff71 	bl	80038de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	4620      	mov	r0, r4
 80039fe:	f7ff ff70 	bl	80038e2 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a02:	e7c9      	b.n	8003998 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	f06f 0201 	mvn.w	r2, #1
 8003a0a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	f7fd f8ef 	bl	8000bf0 <HAL_TIM_PeriodElapsedCallback>
 8003a12:	e7c9      	b.n	80039a8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	f000 faab 	bl	8003f78 <HAL_TIMEx_BreakCallback>
 8003a22:	e7c7      	b.n	80039b4 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a2a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f7ff ff59 	bl	80038e4 <HAL_TIM_TriggerCallback>
 8003a32:	e7c5      	b.n	80039c0 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	f06f 0220 	mvn.w	r2, #32
 8003a3a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f000 fa9a 	bl	8003f76 <HAL_TIMEx_CommutCallback>
}
 8003a42:	e7c3      	b.n	80039cc <HAL_TIM_IRQHandler+0xe6>

08003a44 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003a44:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a46:	4a29      	ldr	r2, [pc, #164]	@ (8003aec <TIM_Base_SetConfig+0xa8>)
 8003a48:	4290      	cmp	r0, r2
 8003a4a:	d00e      	beq.n	8003a6a <TIM_Base_SetConfig+0x26>
 8003a4c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003a50:	d00b      	beq.n	8003a6a <TIM_Base_SetConfig+0x26>
 8003a52:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003a56:	4290      	cmp	r0, r2
 8003a58:	d007      	beq.n	8003a6a <TIM_Base_SetConfig+0x26>
 8003a5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a5e:	4290      	cmp	r0, r2
 8003a60:	d003      	beq.n	8003a6a <TIM_Base_SetConfig+0x26>
 8003a62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a66:	4290      	cmp	r0, r2
 8003a68:	d103      	bne.n	8003a72 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a6e:	684a      	ldr	r2, [r1, #4]
 8003a70:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a72:	4a1e      	ldr	r2, [pc, #120]	@ (8003aec <TIM_Base_SetConfig+0xa8>)
 8003a74:	4290      	cmp	r0, r2
 8003a76:	d01a      	beq.n	8003aae <TIM_Base_SetConfig+0x6a>
 8003a78:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003a7c:	d017      	beq.n	8003aae <TIM_Base_SetConfig+0x6a>
 8003a7e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003a82:	4290      	cmp	r0, r2
 8003a84:	d013      	beq.n	8003aae <TIM_Base_SetConfig+0x6a>
 8003a86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a8a:	4290      	cmp	r0, r2
 8003a8c:	d00f      	beq.n	8003aae <TIM_Base_SetConfig+0x6a>
 8003a8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a92:	4290      	cmp	r0, r2
 8003a94:	d00b      	beq.n	8003aae <TIM_Base_SetConfig+0x6a>
 8003a96:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8003a9a:	4290      	cmp	r0, r2
 8003a9c:	d007      	beq.n	8003aae <TIM_Base_SetConfig+0x6a>
 8003a9e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003aa2:	4290      	cmp	r0, r2
 8003aa4:	d003      	beq.n	8003aae <TIM_Base_SetConfig+0x6a>
 8003aa6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003aaa:	4290      	cmp	r0, r2
 8003aac:	d103      	bne.n	8003ab6 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ab2:	68ca      	ldr	r2, [r1, #12]
 8003ab4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aba:	694a      	ldr	r2, [r1, #20]
 8003abc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003abe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac0:	688b      	ldr	r3, [r1, #8]
 8003ac2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ac4:	680b      	ldr	r3, [r1, #0]
 8003ac6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac8:	4b08      	ldr	r3, [pc, #32]	@ (8003aec <TIM_Base_SetConfig+0xa8>)
 8003aca:	4298      	cmp	r0, r3
 8003acc:	d00a      	beq.n	8003ae4 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ad2:	6903      	ldr	r3, [r0, #16]
 8003ad4:	f013 0f01 	tst.w	r3, #1
 8003ad8:	d003      	beq.n	8003ae2 <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ada:	6903      	ldr	r3, [r0, #16]
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	6103      	str	r3, [r0, #16]
}
 8003ae2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae4:	690b      	ldr	r3, [r1, #16]
 8003ae6:	6303      	str	r3, [r0, #48]	@ 0x30
 8003ae8:	e7f1      	b.n	8003ace <TIM_Base_SetConfig+0x8a>
 8003aea:	bf00      	nop
 8003aec:	40010000 	.word	0x40010000

08003af0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003af0:	b340      	cbz	r0, 8003b44 <HAL_TIM_Base_Init+0x54>
{
 8003af2:	b510      	push	{r4, lr}
 8003af4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003af6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003afa:	b1f3      	cbz	r3, 8003b3a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003afc:	2302      	movs	r3, #2
 8003afe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b02:	4621      	mov	r1, r4
 8003b04:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b08:	f7ff ff9c 	bl	8003a44 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b12:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003b16:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003b1a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003b1e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b22:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b2a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003b2e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003b32:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003b36:	2000      	movs	r0, #0
}
 8003b38:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003b3a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003b3e:	f001 fde3 	bl	8005708 <HAL_TIM_Base_MspInit>
 8003b42:	e7db      	b.n	8003afc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003b44:	2001      	movs	r0, #1
}
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8003b48:	b340      	cbz	r0, 8003b9c <HAL_TIM_OC_Init+0x54>
{
 8003b4a:	b510      	push	{r4, lr}
 8003b4c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003b52:	b1f3      	cbz	r3, 8003b92 <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	2302      	movs	r3, #2
 8003b56:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b60:	f7ff ff70 	bl	8003a44 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003b6e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003b72:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003b76:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b82:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003b86:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003b8a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003b8e:	2000      	movs	r0, #0
}
 8003b90:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003b92:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8003b96:	f7ff fea1 	bl	80038dc <HAL_TIM_OC_MspInit>
 8003b9a:	e7db      	b.n	8003b54 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8003b9c:	2001      	movs	r0, #1
}
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003ba0:	b340      	cbz	r0, 8003bf4 <HAL_TIM_PWM_Init+0x54>
{
 8003ba2:	b510      	push	{r4, lr}
 8003ba4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003baa:	b1f3      	cbz	r3, 8003bea <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	2302      	movs	r3, #2
 8003bae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	f851 0b04 	ldr.w	r0, [r1], #4
 8003bb8:	f7ff ff44 	bl	8003a44 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003bc6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003bca:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003bce:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bda:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003bde:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003be2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003be6:	2000      	movs	r0, #0
}
 8003be8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003bea:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003bee:	f001 fdbf 	bl	8005770 <HAL_TIM_PWM_MspInit>
 8003bf2:	e7db      	b.n	8003bac <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003bf4:	2001      	movs	r0, #1
}
 8003bf6:	4770      	bx	lr

08003bf8 <TIM_OC2_SetConfig>:
{
 8003bf8:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8003bfa:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfc:	6a02      	ldr	r2, [r0, #32]
 8003bfe:	f022 0210 	bic.w	r2, r2, #16
 8003c02:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003c04:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003c06:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c08:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c0c:	680d      	ldr	r5, [r1, #0]
 8003c0e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003c12:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c16:	688d      	ldr	r5, [r1, #8]
 8003c18:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c1c:	4d0c      	ldr	r5, [pc, #48]	@ (8003c50 <TIM_OC2_SetConfig+0x58>)
 8003c1e:	42a8      	cmp	r0, r5
 8003c20:	d006      	beq.n	8003c30 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8003c22:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003c24:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003c26:	684a      	ldr	r2, [r1, #4]
 8003c28:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003c2a:	6203      	str	r3, [r0, #32]
}
 8003c2c:	bc30      	pop	{r4, r5}
 8003c2e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c34:	68cd      	ldr	r5, [r1, #12]
 8003c36:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c3e:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c42:	694d      	ldr	r5, [r1, #20]
 8003c44:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c48:	698d      	ldr	r5, [r1, #24]
 8003c4a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003c4e:	e7e8      	b.n	8003c22 <TIM_OC2_SetConfig+0x2a>
 8003c50:	40010000 	.word	0x40010000

08003c54 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8003c54:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d028      	beq.n	8003cae <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003c60:	2301      	movs	r3, #1
 8003c62:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003c66:	2a0c      	cmp	r2, #12
 8003c68:	d81c      	bhi.n	8003ca4 <HAL_TIM_OC_ConfigChannel+0x50>
 8003c6a:	e8df f002 	tbb	[pc, r2]
 8003c6e:	1b07      	.short	0x1b07
 8003c70:	1b0c1b1b 	.word	0x1b0c1b1b
 8003c74:	1b111b1b 	.word	0x1b111b1b
 8003c78:	1b1b      	.short	0x1b1b
 8003c7a:	16          	.byte	0x16
 8003c7b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c7c:	6800      	ldr	r0, [r0, #0]
 8003c7e:	f7ff fd11 	bl	80036a4 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003c82:	2000      	movs	r0, #0
      break;
 8003c84:	e00f      	b.n	8003ca6 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c86:	6800      	ldr	r0, [r0, #0]
 8003c88:	f7ff ffb6 	bl	8003bf8 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003c8c:	2000      	movs	r0, #0
      break;
 8003c8e:	e00a      	b.n	8003ca6 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c90:	6800      	ldr	r0, [r0, #0]
 8003c92:	f7ff fd31 	bl	80036f8 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2000      	movs	r0, #0
      break;
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c9a:	6800      	ldr	r0, [r0, #0]
 8003c9c:	f7ff fd5a 	bl	8003754 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003ca0:	2000      	movs	r0, #0
      break;
 8003ca2:	e000      	b.n	8003ca6 <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 8003ca4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003cac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8003cae:	2002      	movs	r0, #2
}
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_TIM_PWM_ConfigChannel>:
{
 8003cb2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003cb4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d066      	beq.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	460d      	mov	r5, r1
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003cc6:	2a0c      	cmp	r2, #12
 8003cc8:	d85a      	bhi.n	8003d80 <HAL_TIM_PWM_ConfigChannel+0xce>
 8003cca:	e8df f002 	tbb	[pc, r2]
 8003cce:	5907      	.short	0x5907
 8003cd0:	591b5959 	.word	0x591b5959
 8003cd4:	59305959 	.word	0x59305959
 8003cd8:	5959      	.short	0x5959
 8003cda:	44          	.byte	0x44
 8003cdb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cdc:	6800      	ldr	r0, [r0, #0]
 8003cde:	f7ff fce1 	bl	80036a4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ce2:	6822      	ldr	r2, [r4, #0]
 8003ce4:	6993      	ldr	r3, [r2, #24]
 8003ce6:	f043 0308 	orr.w	r3, r3, #8
 8003cea:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cec:	6822      	ldr	r2, [r4, #0]
 8003cee:	6993      	ldr	r3, [r2, #24]
 8003cf0:	f023 0304 	bic.w	r3, r3, #4
 8003cf4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cf6:	6822      	ldr	r2, [r4, #0]
 8003cf8:	6993      	ldr	r3, [r2, #24]
 8003cfa:	6929      	ldr	r1, [r5, #16]
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003d00:	2000      	movs	r0, #0
      break;
 8003d02:	e03e      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d04:	6800      	ldr	r0, [r0, #0]
 8003d06:	f7ff ff77 	bl	8003bf8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d0a:	6822      	ldr	r2, [r4, #0]
 8003d0c:	6993      	ldr	r3, [r2, #24]
 8003d0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d12:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d14:	6822      	ldr	r2, [r4, #0]
 8003d16:	6993      	ldr	r3, [r2, #24]
 8003d18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d1c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	6993      	ldr	r3, [r2, #24]
 8003d22:	6929      	ldr	r1, [r5, #16]
 8003d24:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d28:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2a:	2000      	movs	r0, #0
      break;
 8003d2c:	e029      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d2e:	6800      	ldr	r0, [r0, #0]
 8003d30:	f7ff fce2 	bl	80036f8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d34:	6822      	ldr	r2, [r4, #0]
 8003d36:	69d3      	ldr	r3, [r2, #28]
 8003d38:	f043 0308 	orr.w	r3, r3, #8
 8003d3c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d3e:	6822      	ldr	r2, [r4, #0]
 8003d40:	69d3      	ldr	r3, [r2, #28]
 8003d42:	f023 0304 	bic.w	r3, r3, #4
 8003d46:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d48:	6822      	ldr	r2, [r4, #0]
 8003d4a:	69d3      	ldr	r3, [r2, #28]
 8003d4c:	6929      	ldr	r1, [r5, #16]
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003d52:	2000      	movs	r0, #0
      break;
 8003d54:	e015      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d56:	6800      	ldr	r0, [r0, #0]
 8003d58:	f7ff fcfc 	bl	8003754 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d5c:	6822      	ldr	r2, [r4, #0]
 8003d5e:	69d3      	ldr	r3, [r2, #28]
 8003d60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d64:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d66:	6822      	ldr	r2, [r4, #0]
 8003d68:	69d3      	ldr	r3, [r2, #28]
 8003d6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d6e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d70:	6822      	ldr	r2, [r4, #0]
 8003d72:	69d3      	ldr	r3, [r2, #28]
 8003d74:	6929      	ldr	r1, [r5, #16]
 8003d76:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d7a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7c:	2000      	movs	r0, #0
      break;
 8003d7e:	e000      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003d80:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003d82:	2300      	movs	r3, #0
 8003d84:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003d88:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003d8a:	2002      	movs	r0, #2
 8003d8c:	e7fc      	b.n	8003d88 <HAL_TIM_PWM_ConfigChannel+0xd6>

08003d8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d8e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d90:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d92:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d96:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003da0:	6082      	str	r2, [r0, #8]
}
 8003da2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003da8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d078      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0xfa>
{
 8003db0:	b510      	push	{r4, lr}
 8003db2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003db4:	2301      	movs	r3, #1
 8003db6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003dc0:	6802      	ldr	r2, [r0, #0]
 8003dc2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dc8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003dcc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003dce:	680b      	ldr	r3, [r1, #0]
 8003dd0:	2b60      	cmp	r3, #96	@ 0x60
 8003dd2:	d04c      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0xc6>
 8003dd4:	d823      	bhi.n	8003e1e <HAL_TIM_ConfigClockSource+0x76>
 8003dd6:	2b40      	cmp	r3, #64	@ 0x40
 8003dd8:	d054      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0xdc>
 8003dda:	d811      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x58>
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d003      	beq.n	8003de8 <HAL_TIM_ConfigClockSource+0x40>
 8003de0:	d80a      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x50>
 8003de2:	b10b      	cbz	r3, 8003de8 <HAL_TIM_ConfigClockSource+0x40>
 8003de4:	2b10      	cmp	r3, #16
 8003de6:	d105      	bne.n	8003df4 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003de8:	4619      	mov	r1, r3
 8003dea:	6820      	ldr	r0, [r4, #0]
 8003dec:	f7ff fcfd 	bl	80037ea <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003df0:	2000      	movs	r0, #0
      break;
 8003df2:	e028      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003df4:	2001      	movs	r0, #1
 8003df6:	e026      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003df8:	2b30      	cmp	r3, #48	@ 0x30
 8003dfa:	d0f5      	beq.n	8003de8 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	e022      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003e00:	2b50      	cmp	r3, #80	@ 0x50
 8003e02:	d10a      	bne.n	8003e1a <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e04:	68ca      	ldr	r2, [r1, #12]
 8003e06:	6849      	ldr	r1, [r1, #4]
 8003e08:	6800      	ldr	r0, [r0, #0]
 8003e0a:	f7ff fcc7 	bl	800379c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e0e:	2150      	movs	r1, #80	@ 0x50
 8003e10:	6820      	ldr	r0, [r4, #0]
 8003e12:	f7ff fcea 	bl	80037ea <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003e16:	2000      	movs	r0, #0
      break;
 8003e18:	e015      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	e013      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e22:	d03a      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0xf2>
 8003e24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e28:	d014      	beq.n	8003e54 <HAL_TIM_ConfigClockSource+0xac>
 8003e2a:	2b70      	cmp	r3, #112	@ 0x70
 8003e2c:	d137      	bne.n	8003e9e <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8003e2e:	68cb      	ldr	r3, [r1, #12]
 8003e30:	684a      	ldr	r2, [r1, #4]
 8003e32:	6889      	ldr	r1, [r1, #8]
 8003e34:	6800      	ldr	r0, [r0, #0]
 8003e36:	f7ff ffaa 	bl	8003d8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e3a:	6822      	ldr	r2, [r4, #0]
 8003e3c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e3e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003e42:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e44:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003e52:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8003e54:	68cb      	ldr	r3, [r1, #12]
 8003e56:	684a      	ldr	r2, [r1, #4]
 8003e58:	6889      	ldr	r1, [r1, #8]
 8003e5a:	6800      	ldr	r0, [r0, #0]
 8003e5c:	f7ff ff97 	bl	8003d8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e60:	6822      	ldr	r2, [r4, #0]
 8003e62:	6893      	ldr	r3, [r2, #8]
 8003e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e68:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6a:	2000      	movs	r0, #0
      break;
 8003e6c:	e7eb      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e6e:	68ca      	ldr	r2, [r1, #12]
 8003e70:	6849      	ldr	r1, [r1, #4]
 8003e72:	6800      	ldr	r0, [r0, #0]
 8003e74:	f7ff fca5 	bl	80037c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e78:	2160      	movs	r1, #96	@ 0x60
 8003e7a:	6820      	ldr	r0, [r4, #0]
 8003e7c:	f7ff fcb5 	bl	80037ea <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003e80:	2000      	movs	r0, #0
      break;
 8003e82:	e7e0      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e84:	68ca      	ldr	r2, [r1, #12]
 8003e86:	6849      	ldr	r1, [r1, #4]
 8003e88:	6800      	ldr	r0, [r0, #0]
 8003e8a:	f7ff fc87 	bl	800379c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8e:	2140      	movs	r1, #64	@ 0x40
 8003e90:	6820      	ldr	r0, [r4, #0]
 8003e92:	f7ff fcaa 	bl	80037ea <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003e96:	2000      	movs	r0, #0
      break;
 8003e98:	e7d5      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	e7d3      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003e9e:	2001      	movs	r0, #1
 8003ea0:	e7d1      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8003ea2:	2002      	movs	r0, #2
}
 8003ea4:	4770      	bx	lr
	...

08003ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003eac:	2a01      	cmp	r2, #1
 8003eae:	d035      	beq.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8003eb0:	b410      	push	{r4}
 8003eb2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec0:	6802      	ldr	r2, [r0, #0]
 8003ec2:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec4:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ec6:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eca:	6808      	ldr	r0, [r1, #0]
 8003ecc:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ed0:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4812      	ldr	r0, [pc, #72]	@ (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8003ed6:	4282      	cmp	r2, r0
 8003ed8:	d012      	beq.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003eda:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003ede:	d00f      	beq.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003ee0:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8003ee4:	4282      	cmp	r2, r0
 8003ee6:	d00b      	beq.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003ee8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003eec:	4282      	cmp	r2, r0
 8003eee:	d007      	beq.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003ef0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003ef4:	4282      	cmp	r2, r0
 8003ef6:	d003      	beq.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003ef8:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8003efc:	4282      	cmp	r2, r0
 8003efe:	d104      	bne.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f00:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f04:	6849      	ldr	r1, [r1, #4]
 8003f06:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f08:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f10:	2000      	movs	r0, #0
 8003f12:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f1a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003f1c:	2002      	movs	r0, #2
}
 8003f1e:	4770      	bx	lr
 8003f20:	40010000 	.word	0x40010000

08003f24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f24:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f26:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d021      	beq.n	8003f72 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f34:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f3a:	6888      	ldr	r0, [r1, #8]
 8003f3c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f42:	6848      	ldr	r0, [r1, #4]
 8003f44:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f4a:	6808      	ldr	r0, [r1, #0]
 8003f4c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f52:	6908      	ldr	r0, [r1, #16]
 8003f54:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f5a:	6948      	ldr	r0, [r1, #20]
 8003f5c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f62:	69c9      	ldr	r1, [r1, #28]
 8003f64:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f66:	6811      	ldr	r1, [r2, #0]
 8003f68:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8003f70:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003f72:	2002      	movs	r0, #2
}
 8003f74:	4770      	bx	lr

08003f76 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f78:	4770      	bx	lr
	...

08003f7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f7c:	b530      	push	{r4, r5, lr}
 8003f7e:	b089      	sub	sp, #36	@ 0x24
 8003f80:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8003f82:	2400      	movs	r4, #0
 8003f84:	9401      	str	r4, [sp, #4]
 8003f86:	4b1d      	ldr	r3, [pc, #116]	@ (8003ffc <HAL_InitTick+0x80>)
 8003f88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f8a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003f8e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f9a:	a902      	add	r1, sp, #8
 8003f9c:	a803      	add	r0, sp, #12
 8003f9e:	f7ff fb63 	bl	8003668 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003fa2:	f7ff fb51 	bl	8003648 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003fa6:	4a16      	ldr	r2, [pc, #88]	@ (8004000 <HAL_InitTick+0x84>)
 8003fa8:	fba2 2300 	umull	r2, r3, r2, r0
 8003fac:	0c9b      	lsrs	r3, r3, #18
 8003fae:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8003fb0:	4814      	ldr	r0, [pc, #80]	@ (8004004 <HAL_InitTick+0x88>)
 8003fb2:	4a15      	ldr	r2, [pc, #84]	@ (8004008 <HAL_InitTick+0x8c>)
 8003fb4:	6002      	str	r2, [r0, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8003fb6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003fba:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8003fbc:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 8003fbe:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc0:	6084      	str	r4, [r0, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc2:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8003fc4:	f7ff fd94 	bl	8003af0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8003fc8:	4604      	mov	r4, r0
 8003fca:	b110      	cbz	r0, 8003fd2 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8003fcc:	4620      	mov	r0, r4
 8003fce:	b009      	add	sp, #36	@ 0x24
 8003fd0:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim11);
 8003fd2:	480c      	ldr	r0, [pc, #48]	@ (8004004 <HAL_InitTick+0x88>)
 8003fd4:	f7ff fc48 	bl	8003868 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8003fd8:	4604      	mov	r4, r0
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d1f6      	bne.n	8003fcc <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003fde:	201a      	movs	r0, #26
 8003fe0:	f7fd fed4 	bl	8001d8c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fe4:	2d0f      	cmp	r5, #15
 8003fe6:	d901      	bls.n	8003fec <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8003fe8:	2401      	movs	r4, #1
 8003fea:	e7ef      	b.n	8003fcc <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8003fec:	2200      	movs	r2, #0
 8003fee:	4629      	mov	r1, r5
 8003ff0:	201a      	movs	r0, #26
 8003ff2:	f7fd febb 	bl	8001d6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ff6:	4b05      	ldr	r3, [pc, #20]	@ (800400c <HAL_InitTick+0x90>)
 8003ff8:	601d      	str	r5, [r3, #0]
 8003ffa:	e7e7      	b.n	8003fcc <HAL_InitTick+0x50>
 8003ffc:	40023800 	.word	0x40023800
 8004000:	431bde83 	.word	0x431bde83
 8004004:	20004ae4 	.word	0x20004ae4
 8004008:	40014800 	.word	0x40014800
 800400c:	20000008 	.word	0x20000008

08004010 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004010:	e7fe      	b.n	8004010 <NMI_Handler>

08004012 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004012:	e7fe      	b.n	8004012 <HardFault_Handler>

08004014 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004014:	e7fe      	b.n	8004014 <MemManage_Handler>

08004016 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004016:	e7fe      	b.n	8004016 <BusFault_Handler>

08004018 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004018:	e7fe      	b.n	8004018 <UsageFault_Handler>

0800401a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800401a:	4770      	bx	lr

0800401c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800401c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800401e:	4803      	ldr	r0, [pc, #12]	@ (800402c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004020:	f7ff fc61 	bl	80038e6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004024:	4802      	ldr	r0, [pc, #8]	@ (8004030 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004026:	f7ff fc5e 	bl	80038e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800402a:	bd08      	pop	{r3, pc}
 800402c:	200050c0 	.word	0x200050c0
 8004030:	20004ae4 	.word	0x20004ae4

08004034 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004034:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004036:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800403a:	f7fe f993 	bl	8002364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800403e:	bd08      	pop	{r3, pc}

08004040 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004040:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004042:	4802      	ldr	r0, [pc, #8]	@ (800404c <DMA2_Stream0_IRQHandler+0xc>)
 8004044:	f7fd ffbc 	bl	8001fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004048:	bd08      	pop	{r3, pc}
 800404a:	bf00      	nop
 800404c:	20000168 	.word	0x20000168

08004050 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004050:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004052:	4802      	ldr	r0, [pc, #8]	@ (800405c <OTG_FS_IRQHandler+0xc>)
 8004054:	f7fe fce7 	bl	8002a26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004058:	bd08      	pop	{r3, pc}
 800405a:	bf00      	nop
 800405c:	20005f34 	.word	0x20005f34

08004060 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004060:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004066:	9b01      	ldr	r3, [sp, #4]
 8004068:	3301      	adds	r3, #1
 800406a:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 800406c:	9b01      	ldr	r3, [sp, #4]
 800406e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004072:	d815      	bhi.n	80040a0 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004074:	6903      	ldr	r3, [r0, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	daf5      	bge.n	8004066 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800407e:	6903      	ldr	r3, [r0, #16]
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8004086:	9b01      	ldr	r3, [sp, #4]
 8004088:	3301      	adds	r3, #1
 800408a:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 800408c:	9b01      	ldr	r3, [sp, #4]
 800408e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004092:	d808      	bhi.n	80040a6 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004094:	6903      	ldr	r3, [r0, #16]
 8004096:	f013 0f01 	tst.w	r3, #1
 800409a:	d1f4      	bne.n	8004086 <USB_CoreReset+0x26>

  return HAL_OK;
 800409c:	2000      	movs	r0, #0
 800409e:	e000      	b.n	80040a2 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 80040a0:	2003      	movs	r0, #3
}
 80040a2:	b002      	add	sp, #8
 80040a4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80040a6:	2003      	movs	r0, #3
 80040a8:	e7fb      	b.n	80040a2 <USB_CoreReset+0x42>

080040aa <USB_CoreInit>:
{
 80040aa:	b084      	sub	sp, #16
 80040ac:	b510      	push	{r4, lr}
 80040ae:	4604      	mov	r4, r0
 80040b0:	a803      	add	r0, sp, #12
 80040b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040b6:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d121      	bne.n	8004102 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040be:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80040c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040c4:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040c6:	68e3      	ldr	r3, [r4, #12]
 80040c8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80040cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d0:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040d2:	68e3      	ldr	r3, [r4, #12]
 80040d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80040d8:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80040da:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d00a      	beq.n	80040f8 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 80040e2:	4620      	mov	r0, r4
 80040e4:	f7ff ffbc 	bl	8004060 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80040e8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d01c      	beq.n	800412a <USB_CoreInit+0x80>
}
 80040f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040f4:	b004      	add	sp, #16
 80040f6:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040f8:	68e3      	ldr	r3, [r4, #12]
 80040fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040fe:	60e3      	str	r3, [r4, #12]
 8004100:	e7ef      	b.n	80040e2 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004102:	68e3      	ldr	r3, [r4, #12]
 8004104:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004108:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800410a:	4620      	mov	r0, r4
 800410c:	f7ff ffa8 	bl	8004060 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8004110:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8004114:	b923      	cbnz	r3, 8004120 <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004116:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800411c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800411e:	e7e3      	b.n	80040e8 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004120:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004126:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004128:	e7de      	b.n	80040e8 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800412a:	68a3      	ldr	r3, [r4, #8]
 800412c:	f043 0306 	orr.w	r3, r3, #6
 8004130:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004132:	68a3      	ldr	r3, [r4, #8]
 8004134:	f043 0320 	orr.w	r3, r3, #32
 8004138:	60a3      	str	r3, [r4, #8]
 800413a:	e7d9      	b.n	80040f0 <USB_CoreInit+0x46>

0800413c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800413c:	2a02      	cmp	r2, #2
 800413e:	d00a      	beq.n	8004156 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004140:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004142:	68c3      	ldr	r3, [r0, #12]
 8004144:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8004148:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800414a:	68c3      	ldr	r3, [r0, #12]
 800414c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8004150:	60c3      	str	r3, [r0, #12]
}
 8004152:	2000      	movs	r0, #0
 8004154:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004156:	4b23      	ldr	r3, [pc, #140]	@ (80041e4 <USB_SetTurnaroundTime+0xa8>)
 8004158:	440b      	add	r3, r1
 800415a:	4a23      	ldr	r2, [pc, #140]	@ (80041e8 <USB_SetTurnaroundTime+0xac>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d92f      	bls.n	80041c0 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004160:	4b22      	ldr	r3, [pc, #136]	@ (80041ec <USB_SetTurnaroundTime+0xb0>)
 8004162:	440b      	add	r3, r1
 8004164:	4a22      	ldr	r2, [pc, #136]	@ (80041f0 <USB_SetTurnaroundTime+0xb4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d92c      	bls.n	80041c4 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800416a:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 800416e:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 8004172:	4a20      	ldr	r2, [pc, #128]	@ (80041f4 <USB_SetTurnaroundTime+0xb8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d927      	bls.n	80041c8 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004178:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 800417c:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8004180:	4a1d      	ldr	r2, [pc, #116]	@ (80041f8 <USB_SetTurnaroundTime+0xbc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d322      	bcc.n	80041cc <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004186:	4b1d      	ldr	r3, [pc, #116]	@ (80041fc <USB_SetTurnaroundTime+0xc0>)
 8004188:	440b      	add	r3, r1
 800418a:	4a1d      	ldr	r2, [pc, #116]	@ (8004200 <USB_SetTurnaroundTime+0xc4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d91f      	bls.n	80041d0 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004190:	4b1c      	ldr	r3, [pc, #112]	@ (8004204 <USB_SetTurnaroundTime+0xc8>)
 8004192:	440b      	add	r3, r1
 8004194:	4a1c      	ldr	r2, [pc, #112]	@ (8004208 <USB_SetTurnaroundTime+0xcc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d31c      	bcc.n	80041d4 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800419a:	4b1c      	ldr	r3, [pc, #112]	@ (800420c <USB_SetTurnaroundTime+0xd0>)
 800419c:	440b      	add	r3, r1
 800419e:	4a1c      	ldr	r2, [pc, #112]	@ (8004210 <USB_SetTurnaroundTime+0xd4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d319      	bcc.n	80041d8 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80041a4:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 80041a8:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 80041ac:	4a19      	ldr	r2, [pc, #100]	@ (8004214 <USB_SetTurnaroundTime+0xd8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d314      	bcc.n	80041dc <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80041b2:	4b19      	ldr	r3, [pc, #100]	@ (8004218 <USB_SetTurnaroundTime+0xdc>)
 80041b4:	440b      	add	r3, r1
 80041b6:	4a19      	ldr	r2, [pc, #100]	@ (800421c <USB_SetTurnaroundTime+0xe0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d211      	bcs.n	80041e0 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 80041bc:	2207      	movs	r2, #7
 80041be:	e7c0      	b.n	8004142 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80041c0:	220f      	movs	r2, #15
 80041c2:	e7be      	b.n	8004142 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80041c4:	220e      	movs	r2, #14
 80041c6:	e7bc      	b.n	8004142 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80041c8:	220d      	movs	r2, #13
 80041ca:	e7ba      	b.n	8004142 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80041cc:	220c      	movs	r2, #12
 80041ce:	e7b8      	b.n	8004142 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80041d0:	220b      	movs	r2, #11
 80041d2:	e7b6      	b.n	8004142 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80041d4:	220a      	movs	r2, #10
 80041d6:	e7b4      	b.n	8004142 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80041d8:	2209      	movs	r2, #9
 80041da:	e7b2      	b.n	8004142 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80041dc:	2208      	movs	r2, #8
 80041de:	e7b0      	b.n	8004142 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 80041e0:	2206      	movs	r2, #6
 80041e2:	e7ae      	b.n	8004142 <USB_SetTurnaroundTime+0x6>
 80041e4:	ff275340 	.word	0xff275340
 80041e8:	000c34ff 	.word	0x000c34ff
 80041ec:	ff1b1e40 	.word	0xff1b1e40
 80041f0:	000f423f 	.word	0x000f423f
 80041f4:	00124f7f 	.word	0x00124f7f
 80041f8:	0013d620 	.word	0x0013d620
 80041fc:	fee5b660 	.word	0xfee5b660
 8004200:	0016e35f 	.word	0x0016e35f
 8004204:	feced300 	.word	0xfeced300
 8004208:	001b7740 	.word	0x001b7740
 800420c:	feb35bc0 	.word	0xfeb35bc0
 8004210:	002191c0 	.word	0x002191c0
 8004214:	00387520 	.word	0x00387520
 8004218:	fe5954e0 	.word	0xfe5954e0
 800421c:	00419ce0 	.word	0x00419ce0

08004220 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004220:	6883      	ldr	r3, [r0, #8]
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6083      	str	r3, [r0, #8]
}
 8004228:	2000      	movs	r0, #0
 800422a:	4770      	bx	lr

0800422c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800422c:	6883      	ldr	r3, [r0, #8]
 800422e:	f023 0301 	bic.w	r3, r3, #1
 8004232:	6083      	str	r3, [r0, #8]
}
 8004234:	2000      	movs	r0, #0
 8004236:	4770      	bx	lr

08004238 <USB_FlushTxFifo>:
{
 8004238:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	9301      	str	r3, [sp, #4]
    count++;
 800423e:	9b01      	ldr	r3, [sp, #4]
 8004240:	3301      	adds	r3, #1
 8004242:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004244:	9b01      	ldr	r3, [sp, #4]
 8004246:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800424a:	d815      	bhi.n	8004278 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800424c:	6903      	ldr	r3, [r0, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	daf5      	bge.n	800423e <USB_FlushTxFifo+0x6>
  count = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004256:	0189      	lsls	r1, r1, #6
 8004258:	f041 0120 	orr.w	r1, r1, #32
 800425c:	6101      	str	r1, [r0, #16]
    count++;
 800425e:	9b01      	ldr	r3, [sp, #4]
 8004260:	3301      	adds	r3, #1
 8004262:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004264:	9b01      	ldr	r3, [sp, #4]
 8004266:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800426a:	d808      	bhi.n	800427e <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800426c:	6903      	ldr	r3, [r0, #16]
 800426e:	f013 0f20 	tst.w	r3, #32
 8004272:	d1f4      	bne.n	800425e <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8004274:	2000      	movs	r0, #0
 8004276:	e000      	b.n	800427a <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8004278:	2003      	movs	r0, #3
}
 800427a:	b002      	add	sp, #8
 800427c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800427e:	2003      	movs	r0, #3
 8004280:	e7fb      	b.n	800427a <USB_FlushTxFifo+0x42>

08004282 <USB_FlushRxFifo>:
{
 8004282:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	9301      	str	r3, [sp, #4]
    count++;
 8004288:	9b01      	ldr	r3, [sp, #4]
 800428a:	3301      	adds	r3, #1
 800428c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800428e:	9b01      	ldr	r3, [sp, #4]
 8004290:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004294:	d813      	bhi.n	80042be <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004296:	6903      	ldr	r3, [r0, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	daf5      	bge.n	8004288 <USB_FlushRxFifo+0x6>
  count = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042a0:	2310      	movs	r3, #16
 80042a2:	6103      	str	r3, [r0, #16]
    count++;
 80042a4:	9b01      	ldr	r3, [sp, #4]
 80042a6:	3301      	adds	r3, #1
 80042a8:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80042aa:	9b01      	ldr	r3, [sp, #4]
 80042ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042b0:	d808      	bhi.n	80042c4 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042b2:	6903      	ldr	r3, [r0, #16]
 80042b4:	f013 0f10 	tst.w	r3, #16
 80042b8:	d1f4      	bne.n	80042a4 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 80042ba:	2000      	movs	r0, #0
 80042bc:	e000      	b.n	80042c0 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 80042be:	2003      	movs	r0, #3
}
 80042c0:	b002      	add	sp, #8
 80042c2:	4770      	bx	lr
      return HAL_TIMEOUT;
 80042c4:	2003      	movs	r0, #3
 80042c6:	e7fb      	b.n	80042c0 <USB_FlushRxFifo+0x3e>

080042c8 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80042c8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 80042cc:	4319      	orrs	r1, r3
 80042ce:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 80042d2:	2000      	movs	r0, #0
 80042d4:	4770      	bx	lr
	...

080042d8 <USB_DevInit>:
{
 80042d8:	b084      	sub	sp, #16
 80042da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042dc:	4604      	mov	r4, r0
 80042de:	a807      	add	r0, sp, #28
 80042e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80042e4:	2300      	movs	r3, #0
 80042e6:	e006      	b.n	80042f6 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 80042e8:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80042ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80042f0:	2100      	movs	r1, #0
 80042f2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80042f4:	3301      	adds	r3, #1
 80042f6:	2b0e      	cmp	r3, #14
 80042f8:	d9f6      	bls.n	80042e8 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 80042fa:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 80042fe:	bb06      	cbnz	r6, 8004342 <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004300:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8004304:	f043 0302 	orr.w	r3, r3, #2
 8004308:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800430c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800430e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004312:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004314:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004316:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800431a:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800431c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800431e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004322:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800432a:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800432e:	2b01      	cmp	r3, #1
 8004330:	d115      	bne.n	800435e <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 8004332:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004336:	b96b      	cbnz	r3, 8004354 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004338:	2100      	movs	r1, #0
 800433a:	4620      	mov	r0, r4
 800433c:	f7ff ffc4 	bl	80042c8 <USB_SetDevSpeed>
 8004340:	e011      	b.n	8004366 <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004342:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004344:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004348:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800434a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800434c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004350:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004352:	e7e7      	b.n	8004324 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004354:	2101      	movs	r1, #1
 8004356:	4620      	mov	r0, r4
 8004358:	f7ff ffb6 	bl	80042c8 <USB_SetDevSpeed>
 800435c:	e003      	b.n	8004366 <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800435e:	2103      	movs	r1, #3
 8004360:	4620      	mov	r0, r4
 8004362:	f7ff ffb1 	bl	80042c8 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004366:	2110      	movs	r1, #16
 8004368:	4620      	mov	r0, r4
 800436a:	f7ff ff65 	bl	8004238 <USB_FlushTxFifo>
 800436e:	4605      	mov	r5, r0
 8004370:	b100      	cbz	r0, 8004374 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 8004372:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004374:	4620      	mov	r0, r4
 8004376:	f7ff ff84 	bl	8004282 <USB_FlushRxFifo>
 800437a:	b100      	cbz	r0, 800437e <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 800437c:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800437e:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8004382:	2300      	movs	r3, #0
 8004384:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004388:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800438c:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004390:	e00d      	b.n	80043ae <USB_DevInit+0xd6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004392:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004396:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 800439a:	e002      	b.n	80043a2 <USB_DevInit+0xca>
      USBx_INEP(i)->DIEPCTL = 0U;
 800439c:	2000      	movs	r0, #0
 800439e:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043a2:	2200      	movs	r2, #0
 80043a4:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043a6:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 80043aa:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ac:	3301      	adds	r3, #1
 80043ae:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80043b2:	4299      	cmp	r1, r3
 80043b4:	d90e      	bls.n	80043d4 <USB_DevInit+0xfc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043b6:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80043ba:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 80043be:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 80043c2:	2800      	cmp	r0, #0
 80043c4:	daea      	bge.n	800439c <USB_DevInit+0xc4>
      if (i == 0U)
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e3      	bne.n	8004392 <USB_DevInit+0xba>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043ca:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80043ce:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 80043d2:	e7e6      	b.n	80043a2 <USB_DevInit+0xca>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043d4:	2300      	movs	r3, #0
 80043d6:	e00a      	b.n	80043ee <USB_DevInit+0x116>
      if (i == 0U)
 80043d8:	b1bb      	cbz	r3, 800440a <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043da:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 80043de:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043e2:	2200      	movs	r2, #0
 80043e4:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043e6:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 80043ea:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ec:	3301      	adds	r3, #1
 80043ee:	4299      	cmp	r1, r3
 80043f0:	d910      	bls.n	8004414 <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043f2:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80043f6:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 80043fa:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 80043fe:	2f00      	cmp	r7, #0
 8004400:	dbea      	blt.n	80043d8 <USB_DevInit+0x100>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004402:	2700      	movs	r7, #0
 8004404:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8004408:	e7eb      	b.n	80043e2 <USB_DevInit+0x10a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800440a:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 800440e:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8004412:	e7e6      	b.n	80043e2 <USB_DevInit+0x10a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004414:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8004418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800441c:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004424:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8004428:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800442a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800442e:	b91b      	cbnz	r3, 8004438 <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004430:	69a3      	ldr	r3, [r4, #24]
 8004432:	f043 0310 	orr.w	r3, r3, #16
 8004436:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004438:	69a2      	ldr	r2, [r4, #24]
 800443a:	4b0c      	ldr	r3, [pc, #48]	@ (800446c <USB_DevInit+0x194>)
 800443c:	4313      	orrs	r3, r2
 800443e:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004440:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8004444:	b11b      	cbz	r3, 800444e <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004446:	69a3      	ldr	r3, [r4, #24]
 8004448:	f043 0308 	orr.w	r3, r3, #8
 800444c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800444e:	2e01      	cmp	r6, #1
 8004450:	d004      	beq.n	800445c <USB_DevInit+0x184>
}
 8004452:	4628      	mov	r0, r5
 8004454:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004458:	b004      	add	sp, #16
 800445a:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800445c:	69a3      	ldr	r3, [r4, #24]
 800445e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	61a3      	str	r3, [r4, #24]
 8004468:	e7f3      	b.n	8004452 <USB_DevInit+0x17a>
 800446a:	bf00      	nop
 800446c:	803c3800 	.word	0x803c3800

08004470 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004470:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004474:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004478:	2b02      	cmp	r3, #2
 800447a:	d004      	beq.n	8004486 <USB_GetDevSpeed+0x16>
 800447c:	2b06      	cmp	r3, #6
 800447e:	d004      	beq.n	800448a <USB_GetDevSpeed+0x1a>
 8004480:	b92b      	cbnz	r3, 800448e <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004482:	2000      	movs	r0, #0
 8004484:	4770      	bx	lr
 8004486:	2002      	movs	r0, #2
 8004488:	4770      	bx	lr
 800448a:	2002      	movs	r0, #2
 800448c:	4770      	bx	lr
 800448e:	200f      	movs	r0, #15
}
 8004490:	4770      	bx	lr

08004492 <USB_ActivateEndpoint>:
{
 8004492:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8004494:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8004498:	784b      	ldrb	r3, [r1, #1]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d023      	beq.n	80044e6 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800449e:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 80044a2:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 80044a6:	f00c 040f 	and.w	r4, ip, #15
 80044aa:	2201      	movs	r2, #1
 80044ac:	40a2      	lsls	r2, r4
 80044ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044b2:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80044b6:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80044ba:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80044be:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80044c2:	d10e      	bne.n	80044e2 <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044c4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80044c8:	688a      	ldr	r2, [r1, #8]
 80044ca:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80044ce:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044d0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044de:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 80044e2:	2000      	movs	r0, #0
 80044e4:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80044e6:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80044ea:	f00c 0e0f 	and.w	lr, ip, #15
 80044ee:	fa03 f30e 	lsl.w	r3, r3, lr
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80044fa:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80044fe:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004502:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004506:	d1ec      	bne.n	80044e2 <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004508:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800450c:	688a      	ldr	r2, [r1, #8]
 800450e:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004512:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004514:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004518:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800451c:	4313      	orrs	r3, r2
 800451e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004526:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 800452a:	e7da      	b.n	80044e2 <USB_ActivateEndpoint+0x50>

0800452c <USB_DeactivateEndpoint>:
{
 800452c:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800452e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004530:	784a      	ldrb	r2, [r1, #1]
 8004532:	2a01      	cmp	r2, #1
 8004534:	d026      	beq.n	8004584 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004536:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800453a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800453e:	2a00      	cmp	r2, #0
 8004540:	db52      	blt.n	80045e8 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004542:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8004546:	780a      	ldrb	r2, [r1, #0]
 8004548:	f002 020f 	and.w	r2, r2, #15
 800454c:	f04f 0c01 	mov.w	ip, #1
 8004550:	fa0c f202 	lsl.w	r2, ip, r2
 8004554:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8004558:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800455c:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8004560:	7809      	ldrb	r1, [r1, #0]
 8004562:	f001 010f 	and.w	r1, r1, #15
 8004566:	fa0c fc01 	lsl.w	ip, ip, r1
 800456a:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 800456e:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004572:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8004576:	4a23      	ldr	r2, [pc, #140]	@ (8004604 <USB_DeactivateEndpoint+0xd8>)
 8004578:	400a      	ands	r2, r1
 800457a:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 800457e:	2000      	movs	r0, #0
 8004580:	bc30      	pop	{r4, r5}
 8004582:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004584:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004588:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800458c:	2a00      	cmp	r2, #0
 800458e:	db1e      	blt.n	80045ce <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004590:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8004594:	780a      	ldrb	r2, [r1, #0]
 8004596:	f002 020f 	and.w	r2, r2, #15
 800459a:	2401      	movs	r4, #1
 800459c:	fa04 f202 	lsl.w	r2, r4, r2
 80045a0:	b292      	uxth	r2, r2
 80045a2:	ea25 0202 	bic.w	r2, r5, r2
 80045a6:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045aa:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80045ae:	7809      	ldrb	r1, [r1, #0]
 80045b0:	f001 010f 	and.w	r1, r1, #15
 80045b4:	408c      	lsls	r4, r1
 80045b6:	b2a4      	uxth	r4, r4
 80045b8:	ea22 0204 	bic.w	r2, r2, r4
 80045bc:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80045c0:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80045c4:	4a10      	ldr	r2, [pc, #64]	@ (8004608 <USB_DeactivateEndpoint+0xdc>)
 80045c6:	400a      	ands	r2, r1
 80045c8:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 80045cc:	e7d7      	b.n	800457e <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80045ce:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80045d2:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80045d6:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80045da:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80045de:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80045e2:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 80045e6:	e7d3      	b.n	8004590 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045e8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80045ec:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80045f0:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80045f4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80045f8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80045fc:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8004600:	e79f      	b.n	8004542 <USB_DeactivateEndpoint+0x16>
 8004602:	bf00      	nop
 8004604:	eff37800 	.word	0xeff37800
 8004608:	ec337800 	.word	0xec337800

0800460c <USB_EPStopXfer>:
{
 800460c:	b410      	push	{r4}
 800460e:	b083      	sub	sp, #12
 8004610:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8004616:	7848      	ldrb	r0, [r1, #1]
 8004618:	2801      	cmp	r0, #1
 800461a:	d00b      	beq.n	8004634 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800461c:	780b      	ldrb	r3, [r1, #0]
 800461e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004622:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8004626:	2800      	cmp	r0, #0
 8004628:	db2d      	blt.n	8004686 <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 800462a:	2000      	movs	r0, #0
}
 800462c:	b003      	add	sp, #12
 800462e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004632:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004634:	780b      	ldrb	r3, [r1, #0]
 8004636:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800463a:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800463e:	2c00      	cmp	r4, #0
 8004640:	db01      	blt.n	8004646 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 8004642:	2000      	movs	r0, #0
 8004644:	e7f2      	b.n	800462c <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004646:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800464a:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 800464e:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004652:	780b      	ldrb	r3, [r1, #0]
 8004654:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004658:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800465c:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8004660:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8004664:	9b01      	ldr	r3, [sp, #4]
 8004666:	3301      	adds	r3, #1
 8004668:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800466a:	9c01      	ldr	r4, [sp, #4]
 800466c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004670:	429c      	cmp	r4, r3
 8004672:	d8db      	bhi.n	800462c <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004674:	780b      	ldrb	r3, [r1, #0]
 8004676:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800467a:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800467e:	2b00      	cmp	r3, #0
 8004680:	dbf0      	blt.n	8004664 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 8004682:	2000      	movs	r0, #0
 8004684:	e7d2      	b.n	800462c <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004686:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 800468a:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 800468e:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004692:	780b      	ldrb	r3, [r1, #0]
 8004694:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004698:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 800469c:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80046a0:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 80046a4:	9b01      	ldr	r3, [sp, #4]
 80046a6:	3301      	adds	r3, #1
 80046a8:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80046aa:	9801      	ldr	r0, [sp, #4]
 80046ac:	f242 7310 	movw	r3, #10000	@ 0x2710
 80046b0:	4298      	cmp	r0, r3
 80046b2:	d808      	bhi.n	80046c6 <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80046b4:	780b      	ldrb	r3, [r1, #0]
 80046b6:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80046ba:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 80046be:	2b00      	cmp	r3, #0
 80046c0:	dbf0      	blt.n	80046a4 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 80046c2:	2000      	movs	r0, #0
 80046c4:	e7b2      	b.n	800462c <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 80046c6:	2001      	movs	r0, #1
 80046c8:	e7b0      	b.n	800462c <USB_EPStopXfer+0x20>

080046ca <USB_WritePacket>:
{
 80046ca:	b510      	push	{r4, lr}
 80046cc:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 80046d0:	b984      	cbnz	r4, 80046f4 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 80046d2:	3303      	adds	r3, #3
 80046d4:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 80046d8:	f04f 0c00 	mov.w	ip, #0
 80046dc:	e008      	b.n	80046f0 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046de:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 80046e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046e6:	f851 4b04 	ldr.w	r4, [r1], #4
 80046ea:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 80046ec:	f10c 0c01 	add.w	ip, ip, #1
 80046f0:	45f4      	cmp	ip, lr
 80046f2:	d3f4      	bcc.n	80046de <USB_WritePacket+0x14>
}
 80046f4:	2000      	movs	r0, #0
 80046f6:	bd10      	pop	{r4, pc}

080046f8 <USB_EPStartXfer>:
{
 80046f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046fa:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 80046fc:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80046fe:	784b      	ldrb	r3, [r1, #1]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d02d      	beq.n	8004760 <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004704:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8004708:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 800470c:	691d      	ldr	r5, [r3, #16]
 800470e:	f36f 0512 	bfc	r5, #0, #19
 8004712:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004714:	691d      	ldr	r5, [r3, #16]
 8004716:	f36f 45dc 	bfc	r5, #19, #10
 800471a:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 800471c:	2c00      	cmp	r4, #0
 800471e:	f040 80ce 	bne.w	80048be <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 8004722:	690c      	ldr	r4, [r1, #16]
 8004724:	b10c      	cbz	r4, 800472a <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8004726:	688c      	ldr	r4, [r1, #8]
 8004728:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 800472a:	688c      	ldr	r4, [r1, #8]
 800472c:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800472e:	691d      	ldr	r5, [r3, #16]
 8004730:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004734:	432c      	orrs	r4, r5
 8004736:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004738:	691c      	ldr	r4, [r3, #16]
 800473a:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800473e:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8004740:	2a01      	cmp	r2, #1
 8004742:	f000 80df 	beq.w	8004904 <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 8004746:	790b      	ldrb	r3, [r1, #4]
 8004748:	2b01      	cmp	r3, #1
 800474a:	f000 80e1 	beq.w	8004910 <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800474e:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8004752:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004756:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 800475a:	2000      	movs	r0, #0
 800475c:	b003      	add	sp, #12
 800475e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8004760:	690b      	ldr	r3, [r1, #16]
 8004762:	bb73      	cbnz	r3, 80047c2 <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004764:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8004768:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 800476c:	f36f 45dc 	bfc	r5, #19, #10
 8004770:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004774:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8004778:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 800477c:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004780:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8004784:	f36f 0512 	bfc	r5, #0, #19
 8004788:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 800478c:	2a01      	cmp	r2, #1
 800478e:	d054      	beq.n	800483a <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004790:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004794:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004798:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800479c:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 80047a0:	790b      	ldrb	r3, [r1, #4]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d072      	beq.n	800488c <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 80047a6:	690b      	ldr	r3, [r1, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0d6      	beq.n	800475a <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047ac:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 80047b0:	7809      	ldrb	r1, [r1, #0]
 80047b2:	f001 010f 	and.w	r1, r1, #15
 80047b6:	2201      	movs	r2, #1
 80047b8:	408a      	lsls	r2, r1
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 80047c0:	e7cb      	b.n	800475a <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047c2:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80047c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ca:	691d      	ldr	r5, [r3, #16]
 80047cc:	f36f 0512 	bfc	r5, #0, #19
 80047d0:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047d2:	691d      	ldr	r5, [r3, #16]
 80047d4:	f36f 45dc 	bfc	r5, #19, #10
 80047d8:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 80047da:	b984      	cbnz	r4, 80047fe <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 80047dc:	690e      	ldr	r6, [r1, #16]
 80047de:	688d      	ldr	r5, [r1, #8]
 80047e0:	42ae      	cmp	r6, r5
 80047e2:	d900      	bls.n	80047e6 <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 80047e4:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047e6:	691d      	ldr	r5, [r3, #16]
 80047e8:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 80047ec:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047ee:	691d      	ldr	r5, [r3, #16]
 80047f0:	690e      	ldr	r6, [r1, #16]
 80047f2:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 80047f6:	ea45 050c 	orr.w	r5, r5, ip
 80047fa:	611d      	str	r5, [r3, #16]
 80047fc:	e7c6      	b.n	800478c <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80047fe:	690d      	ldr	r5, [r1, #16]
 8004800:	688e      	ldr	r6, [r1, #8]
 8004802:	4435      	add	r5, r6
 8004804:	3d01      	subs	r5, #1
 8004806:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800480a:	691e      	ldr	r6, [r3, #16]
 800480c:	fa1f fc85 	uxth.w	ip, r5
 8004810:	4f49      	ldr	r7, [pc, #292]	@ (8004938 <USB_EPStartXfer+0x240>)
 8004812:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8004816:	4335      	orrs	r5, r6
 8004818:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 800481a:	790d      	ldrb	r5, [r1, #4]
 800481c:	2d01      	cmp	r5, #1
 800481e:	d1e6      	bne.n	80047ee <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004820:	691d      	ldr	r5, [r3, #16]
 8004822:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8004826:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004828:	691d      	ldr	r5, [r3, #16]
 800482a:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 800482e:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 8004832:	ea45 050c 	orr.w	r5, r5, ip
 8004836:	611d      	str	r5, [r3, #16]
 8004838:	e7d9      	b.n	80047ee <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 800483a:	69cb      	ldr	r3, [r1, #28]
 800483c:	b11b      	cbz	r3, 8004846 <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800483e:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8004842:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8004846:	790b      	ldrb	r3, [r1, #4]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d008      	beq.n	800485e <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800484c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004850:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004854:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004858:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 800485c:	e77d      	b.n	800475a <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800485e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004862:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004866:	d108      	bne.n	800487a <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004868:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800486c:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8004870:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004874:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8004878:	e7e8      	b.n	800484c <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800487a:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800487e:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8004882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004886:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 800488a:	e7df      	b.n	800484c <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800488c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004890:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004894:	d10c      	bne.n	80048b0 <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004896:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800489a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800489e:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80048a2:	9200      	str	r2, [sp, #0]
 80048a4:	8a0b      	ldrh	r3, [r1, #16]
 80048a6:	780a      	ldrb	r2, [r1, #0]
 80048a8:	68c9      	ldr	r1, [r1, #12]
 80048aa:	f7ff ff0e 	bl	80046ca <USB_WritePacket>
 80048ae:	e754      	b.n	800475a <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048b0:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b8:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 80048bc:	e7f1      	b.n	80048a2 <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 80048be:	690c      	ldr	r4, [r1, #16]
 80048c0:	b954      	cbnz	r4, 80048d8 <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80048c2:	691c      	ldr	r4, [r3, #16]
 80048c4:	688d      	ldr	r5, [r1, #8]
 80048c6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80048ca:	432c      	orrs	r4, r5
 80048cc:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048ce:	691c      	ldr	r4, [r3, #16]
 80048d0:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 80048d4:	611c      	str	r4, [r3, #16]
 80048d6:	e733      	b.n	8004740 <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80048d8:	688d      	ldr	r5, [r1, #8]
 80048da:	442c      	add	r4, r5
 80048dc:	3c01      	subs	r4, #1
 80048de:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 80048e2:	b2a4      	uxth	r4, r4
 80048e4:	fb04 f505 	mul.w	r5, r4, r5
 80048e8:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80048ea:	691d      	ldr	r5, [r3, #16]
 80048ec:	4e12      	ldr	r6, [pc, #72]	@ (8004938 <USB_EPStartXfer+0x240>)
 80048ee:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 80048f2:	432c      	orrs	r4, r5
 80048f4:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80048f6:	691c      	ldr	r4, [r3, #16]
 80048f8:	6a0d      	ldr	r5, [r1, #32]
 80048fa:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80048fe:	432c      	orrs	r4, r5
 8004900:	611c      	str	r4, [r3, #16]
 8004902:	e71d      	b.n	8004740 <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004904:	68ca      	ldr	r2, [r1, #12]
 8004906:	2a00      	cmp	r2, #0
 8004908:	f43f af1d 	beq.w	8004746 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800490c:	615a      	str	r2, [r3, #20]
 800490e:	e71a      	b.n	8004746 <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004910:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004914:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004918:	d106      	bne.n	8004928 <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800491a:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800491e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004922:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8004926:	e712      	b.n	800474e <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004928:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800492c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004930:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8004934:	e70b      	b.n	800474e <USB_EPStartXfer+0x56>
 8004936:	bf00      	nop
 8004938:	1ff80000 	.word	0x1ff80000

0800493c <USB_ReadPacket>:
{
 800493c:	b510      	push	{r4, lr}
 800493e:	4684      	mov	ip, r0
 8004940:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8004942:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8004946:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 800494a:	2300      	movs	r3, #0
 800494c:	e005      	b.n	800495a <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800494e:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 8004952:	6809      	ldr	r1, [r1, #0]
 8004954:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8004958:	3301      	adds	r3, #1
 800495a:	4573      	cmp	r3, lr
 800495c:	d3f7      	bcc.n	800494e <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 800495e:	b17a      	cbz	r2, 8004980 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004960:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8004964:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8004968:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800496a:	b2cb      	uxtb	r3, r1
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	fa24 f303 	lsr.w	r3, r4, r3
 8004972:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8004976:	3101      	adds	r1, #1
      remaining_bytes--;
 8004978:	3a01      	subs	r2, #1
 800497a:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 800497c:	2a00      	cmp	r2, #0
 800497e:	d1f4      	bne.n	800496a <USB_ReadPacket+0x2e>
}
 8004980:	bd10      	pop	{r4, pc}

08004982 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8004982:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004984:	784a      	ldrb	r2, [r1, #1]
 8004986:	2a01      	cmp	r2, #1
 8004988:	d014      	beq.n	80049b4 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800498a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800498e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8004992:	2a00      	cmp	r2, #0
 8004994:	db06      	blt.n	80049a4 <USB_EPSetStall+0x22>
 8004996:	b12b      	cbz	r3, 80049a4 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004998:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800499c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049a0:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049a4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80049a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80049ac:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 80049b0:	2000      	movs	r0, #0
 80049b2:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049b4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80049b8:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 80049bc:	2a00      	cmp	r2, #0
 80049be:	db06      	blt.n	80049ce <USB_EPSetStall+0x4c>
 80049c0:	b12b      	cbz	r3, 80049ce <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80049c2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80049c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049ca:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80049ce:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80049d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80049d6:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80049da:	e7e9      	b.n	80049b0 <USB_EPSetStall+0x2e>

080049dc <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80049dc:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80049de:	784a      	ldrb	r2, [r1, #1]
 80049e0:	2a01      	cmp	r2, #1
 80049e2:	d00e      	beq.n	8004a02 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049e4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80049e8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80049ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049f0:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049f4:	790b      	ldrb	r3, [r1, #4]
 80049f6:	3b02      	subs	r3, #2
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d915      	bls.n	8004a2a <USB_EPClearStall+0x4e>
}
 80049fe:	2000      	movs	r0, #0
 8004a00:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a02:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004a06:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004a0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a0e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a12:	790b      	ldrb	r3, [r1, #4]
 8004a14:	3b02      	subs	r3, #2
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d8f0      	bhi.n	80049fe <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a1c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a24:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8004a28:	e7e9      	b.n	80049fe <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a2a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a32:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8004a36:	e7e2      	b.n	80049fe <USB_EPClearStall+0x22>

08004a38 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a38:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004a3c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004a40:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a44:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004a48:	0109      	lsls	r1, r1, #4
 8004a4a:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8004a54:	2000      	movs	r0, #0
 8004a56:	4770      	bx	lr

08004a58 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a58:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8004a5c:	f023 0303 	bic.w	r3, r3, #3
 8004a60:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004a64:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8004a68:	f023 0302 	bic.w	r3, r3, #2
 8004a6c:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8004a70:	2000      	movs	r0, #0
 8004a72:	4770      	bx	lr

08004a74 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a74:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8004a78:	f023 0303 	bic.w	r3, r3, #3
 8004a7c:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a80:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8004a84:	f043 0302 	orr.w	r3, r3, #2
 8004a88:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	4770      	bx	lr

08004a90 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004a90:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004a92:	6980      	ldr	r0, [r0, #24]
}
 8004a94:	4010      	ands	r0, r2
 8004a96:	4770      	bx	lr

08004a98 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004a98:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004a9c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004aa0:	69c0      	ldr	r0, [r0, #28]
 8004aa2:	4018      	ands	r0, r3
}
 8004aa4:	0c00      	lsrs	r0, r0, #16
 8004aa6:	4770      	bx	lr

08004aa8 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004aa8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004aac:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ab0:	69c0      	ldr	r0, [r0, #28]
 8004ab2:	4018      	ands	r0, r3
}
 8004ab4:	b280      	uxth	r0, r0
 8004ab6:	4770      	bx	lr

08004ab8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004ab8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004abc:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ac0:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8004ac4:	6940      	ldr	r0, [r0, #20]
}
 8004ac6:	4010      	ands	r0, r2
 8004ac8:	4770      	bx	lr

08004aca <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8004aca:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ace:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004ad2:	f001 0c0f 	and.w	ip, r1, #15
 8004ad6:	fa23 f30c 	lsr.w	r3, r3, ip
 8004ada:	01db      	lsls	r3, r3, #7
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ae0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8004ae4:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8004ae8:	6880      	ldr	r0, [r0, #8]
}
 8004aea:	4018      	ands	r0, r3
 8004aec:	4770      	bx	lr

08004aee <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004aee:	6940      	ldr	r0, [r0, #20]
}
 8004af0:	f000 0001 	and.w	r0, r0, #1
 8004af4:	4770      	bx	lr

08004af6 <USB_SetCurrentMode>:
{
 8004af6:	b538      	push	{r3, r4, r5, lr}
 8004af8:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004afa:	68c3      	ldr	r3, [r0, #12]
 8004afc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004b00:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004b02:	2901      	cmp	r1, #1
 8004b04:	d013      	beq.n	8004b2e <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8004b06:	bb19      	cbnz	r1, 8004b50 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b08:	68c3      	ldr	r3, [r0, #12]
 8004b0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b0e:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004b10:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8004b12:	200a      	movs	r0, #10
 8004b14:	f7fc fe34 	bl	8001780 <HAL_Delay>
      ms += 10U;
 8004b18:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	f7ff ffe7 	bl	8004aee <USB_GetMode>
 8004b20:	b108      	cbz	r0, 8004b26 <USB_SetCurrentMode+0x30>
 8004b22:	2cc7      	cmp	r4, #199	@ 0xc7
 8004b24:	d9f5      	bls.n	8004b12 <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004b26:	2cc8      	cmp	r4, #200	@ 0xc8
 8004b28:	d014      	beq.n	8004b54 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8004b2a:	2000      	movs	r0, #0
}
 8004b2c:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b2e:	68c3      	ldr	r3, [r0, #12]
 8004b30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004b34:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004b36:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8004b38:	200a      	movs	r0, #10
 8004b3a:	f7fc fe21 	bl	8001780 <HAL_Delay>
      ms += 10U;
 8004b3e:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b40:	4628      	mov	r0, r5
 8004b42:	f7ff ffd4 	bl	8004aee <USB_GetMode>
 8004b46:	2801      	cmp	r0, #1
 8004b48:	d0ed      	beq.n	8004b26 <USB_SetCurrentMode+0x30>
 8004b4a:	2cc7      	cmp	r4, #199	@ 0xc7
 8004b4c:	d9f4      	bls.n	8004b38 <USB_SetCurrentMode+0x42>
 8004b4e:	e7ea      	b.n	8004b26 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8004b50:	2001      	movs	r0, #1
 8004b52:	e7eb      	b.n	8004b2c <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8004b54:	2001      	movs	r0, #1
 8004b56:	e7e9      	b.n	8004b2c <USB_SetCurrentMode+0x36>

08004b58 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b58:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004b5c:	f36f 030a 	bfc	r3, #0, #11
 8004b60:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b64:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8004b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b6c:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8004b70:	2000      	movs	r0, #0
 8004b72:	4770      	bx	lr

08004b74 <USB_EP0_OutStart>:
{
 8004b74:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b76:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b78:	4b15      	ldr	r3, [pc, #84]	@ (8004bd0 <USB_EP0_OutStart+0x5c>)
 8004b7a:	429c      	cmp	r4, r3
 8004b7c:	d903      	bls.n	8004b86 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b7e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	db16      	blt.n	8004bb4 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b86:	2400      	movs	r4, #0
 8004b88:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b8c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8004b90:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004b94:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b98:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8004b9c:	f044 0418 	orr.w	r4, r4, #24
 8004ba0:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ba4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8004ba8:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8004bac:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8004bb0:	2901      	cmp	r1, #1
 8004bb2:	d003      	beq.n	8004bbc <USB_EP0_OutStart+0x48>
}
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bba:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004bbc:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004bc0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004bc4:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004bc8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8004bcc:	e7f2      	b.n	8004bb4 <USB_EP0_OutStart+0x40>
 8004bce:	bf00      	nop
 8004bd0:	4f54300a 	.word	0x4f54300a

08004bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8004c0c <_sbrk+0x38>)
 8004bda:	490d      	ldr	r1, [pc, #52]	@ (8004c10 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bdc:	480d      	ldr	r0, [pc, #52]	@ (8004c14 <_sbrk+0x40>)
 8004bde:	6800      	ldr	r0, [r0, #0]
 8004be0:	b140      	cbz	r0, 8004bf4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004be2:	480c      	ldr	r0, [pc, #48]	@ (8004c14 <_sbrk+0x40>)
 8004be4:	6800      	ldr	r0, [r0, #0]
 8004be6:	4403      	add	r3, r0
 8004be8:	1a52      	subs	r2, r2, r1
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d806      	bhi.n	8004bfc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004bee:	4a09      	ldr	r2, [pc, #36]	@ (8004c14 <_sbrk+0x40>)
 8004bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004bf2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004bf4:	4807      	ldr	r0, [pc, #28]	@ (8004c14 <_sbrk+0x40>)
 8004bf6:	4c08      	ldr	r4, [pc, #32]	@ (8004c18 <_sbrk+0x44>)
 8004bf8:	6004      	str	r4, [r0, #0]
 8004bfa:	e7f2      	b.n	8004be2 <_sbrk+0xe>
    errno = ENOMEM;
 8004bfc:	f002 fd18 	bl	8007630 <__errno>
 8004c00:	230c      	movs	r3, #12
 8004c02:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004c04:	f04f 30ff 	mov.w	r0, #4294967295
 8004c08:	e7f3      	b.n	8004bf2 <_sbrk+0x1e>
 8004c0a:	bf00      	nop
 8004c0c:	20010000 	.word	0x20010000
 8004c10:	00000400 	.word	0x00000400
 8004c14:	20004b2c 	.word	0x20004b2c
 8004c18:	20006768 	.word	0x20006768

08004c1c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c1c:	4a03      	ldr	r2, [pc, #12]	@ (8004c2c <SystemInit+0x10>)
 8004c1e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004c22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c26:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c2a:	4770      	bx	lr
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <table_ve_get_value>:
#include "tables.h"
#include "error_handling.h"
#include "utils.h"

percent_t table_ve_get_value(table_ve_t *table, rpm_t rpm, pressure_t load)
{
 8004c30:	b500      	push	{lr}
 8004c32:	b083      	sub	sp, #12
    if (!IS_IN_RANGE(rpm, 0, FIRMWARE_LIMIT_MAX_RPM) || !IS_IN_RANGE(load, 0, FIRMWARE_LIMIT_MAX_MAP))
 8004c34:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3c:	db2c      	blt.n	8004c98 <table_ve_get_value+0x68>
 8004c3e:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8004ca8 <table_ve_get_value+0x78>
 8004c42:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4a:	d825      	bhi.n	8004c98 <table_ve_get_value+0x68>
 8004c4c:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c54:	db20      	blt.n	8004c98 <table_ve_get_value+0x68>
 8004c56:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8004cac <table_ve_get_value+0x7c>
 8004c5a:	eef4 0ae7 	vcmpe.f32	s1, s15
 8004c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c62:	d819      	bhi.n	8004c98 <table_ve_get_value+0x68>
        return 0;
    }
    rpm_t rpm_bin_size = FIRMWARE_LIMIT_MAX_RPM / x_size;
    pressure_t load_bin_size = FIRMWARE_LIMIT_MAX_MAP / y_size;

    uint8_t rpm_index = (uint8_t)(rpm / rpm_bin_size);
 8004c64:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8004cb0 <table_ve_get_value+0x80>
 8004c68:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8004c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c70:	edcd 7a01 	vstr	s15, [sp, #4]
 8004c74:	f89d 2004 	ldrb.w	r2, [sp, #4]
    uint8_t load_index = (uint8_t)(load / load_bin_size);
 8004c78:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8004c7c:	eec0 7a87 	vdiv.f32	s15, s1, s14
 8004c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c84:	ee17 3a90 	vmov	r3, s15

    return table->data[rpm_index][load_index];
 8004c88:	0112      	lsls	r2, r2, #4
 8004c8a:	fa52 f383 	uxtab	r3, r2, r3
 8004c8e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004c92:	ed90 0a00 	vldr	s0, [r0]
 8004c96:	e004      	b.n	8004ca2 <table_ve_get_value+0x72>
        log_error("Table error! Out of bound access request");
 8004c98:	4806      	ldr	r0, [pc, #24]	@ (8004cb4 <table_ve_get_value+0x84>)
 8004c9a:	f7fb fd63 	bl	8000764 <log_error>
        return 0;
 8004c9e:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8004cb8 <table_ve_get_value+0x88>

}
 8004ca2:	b003      	add	sp, #12
 8004ca4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ca8:	45bb8000 	.word	0x45bb8000
 8004cac:	42f00000 	.word	0x42f00000
 8004cb0:	43bb8000 	.word	0x43bb8000
 8004cb4:	08008280 	.word	0x08008280
 8004cb8:	00000000 	.word	0x00000000

08004cbc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cbc:	4b08      	ldr	r3, [pc, #32]	@ (8004ce0 <prvResetNextTaskUnblockTime+0x24>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	b923      	cbnz	r3, 8004cce <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cc4:	4b07      	ldr	r3, [pc, #28]	@ (8004ce4 <prvResetNextTaskUnblockTime+0x28>)
 8004cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cce:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <prvResetNextTaskUnblockTime+0x24>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	4b02      	ldr	r3, [pc, #8]	@ (8004ce4 <prvResetNextTaskUnblockTime+0x28>)
 8004cda:	601a      	str	r2, [r3, #0]
	}
}
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20004ba0 	.word	0x20004ba0
 8004ce4:	20004b38 	.word	0x20004b38

08004ce8 <prvInitialiseNewTask>:
{
 8004ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cec:	4680      	mov	r8, r0
 8004cee:	460d      	mov	r5, r1
 8004cf0:	4617      	mov	r7, r2
 8004cf2:	4699      	mov	r9, r3
 8004cf4:	9e08      	ldr	r6, [sp, #32]
 8004cf6:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8004cfa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004cfc:	0092      	lsls	r2, r2, #2
 8004cfe:	21a5      	movs	r1, #165	@ 0xa5
 8004d00:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004d02:	f002 fc8d 	bl	8007620 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004d08:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d12:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8004d16:	b3a5      	cbz	r5, 8004d82 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d18:	f04f 0c00 	mov.w	ip, #0
 8004d1c:	f1bc 0f0f 	cmp.w	ip, #15
 8004d20:	d809      	bhi.n	8004d36 <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d22:	f815 300c 	ldrb.w	r3, [r5, ip]
 8004d26:	eb04 020c 	add.w	r2, r4, ip
 8004d2a:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8004d2e:	b113      	cbz	r3, 8004d36 <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d30:	f10c 0c01 	add.w	ip, ip, #1
 8004d34:	e7f2      	b.n	8004d1c <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d36:	2300      	movs	r3, #0
 8004d38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d3c:	2e37      	cmp	r6, #55	@ 0x37
 8004d3e:	d900      	bls.n	8004d42 <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d40:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8004d42:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004d44:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d46:	2500      	movs	r5, #0
 8004d48:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d4a:	1d20      	adds	r0, r4, #4
 8004d4c:	f7fb ff09 	bl	8000b62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d50:	f104 0018 	add.w	r0, r4, #24
 8004d54:	f7fb ff05 	bl	8000b62 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d58:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d5a:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8004d5e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d60:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8004d62:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d64:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d68:	464a      	mov	r2, r9
 8004d6a:	4641      	mov	r1, r8
 8004d6c:	4638      	mov	r0, r7
 8004d6e:	f7fc f803 	bl	8000d78 <pxPortInitialiseStack>
 8004d72:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004d74:	f1ba 0f00 	cmp.w	sl, #0
 8004d78:	d001      	beq.n	8004d7e <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d7a:	f8ca 4000 	str.w	r4, [sl]
}
 8004d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8004d88:	e7d8      	b.n	8004d3c <prvInitialiseNewTask+0x54>
	...

08004d8c <prvInitialiseTaskLists>:
{
 8004d8c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d8e:	2400      	movs	r4, #0
 8004d90:	e007      	b.n	8004da2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d92:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004d96:	0093      	lsls	r3, r2, #2
 8004d98:	480e      	ldr	r0, [pc, #56]	@ (8004dd4 <prvInitialiseTaskLists+0x48>)
 8004d9a:	4418      	add	r0, r3
 8004d9c:	f7fb fed6 	bl	8000b4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004da0:	3401      	adds	r4, #1
 8004da2:	2c37      	cmp	r4, #55	@ 0x37
 8004da4:	d9f5      	bls.n	8004d92 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8004da6:	4d0c      	ldr	r5, [pc, #48]	@ (8004dd8 <prvInitialiseTaskLists+0x4c>)
 8004da8:	4628      	mov	r0, r5
 8004daa:	f7fb fecf 	bl	8000b4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dae:	4c0b      	ldr	r4, [pc, #44]	@ (8004ddc <prvInitialiseTaskLists+0x50>)
 8004db0:	4620      	mov	r0, r4
 8004db2:	f7fb fecb 	bl	8000b4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004db6:	480a      	ldr	r0, [pc, #40]	@ (8004de0 <prvInitialiseTaskLists+0x54>)
 8004db8:	f7fb fec8 	bl	8000b4c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004dbc:	4809      	ldr	r0, [pc, #36]	@ (8004de4 <prvInitialiseTaskLists+0x58>)
 8004dbe:	f7fb fec5 	bl	8000b4c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004dc2:	4809      	ldr	r0, [pc, #36]	@ (8004de8 <prvInitialiseTaskLists+0x5c>)
 8004dc4:	f7fb fec2 	bl	8000b4c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dc8:	4b08      	ldr	r3, [pc, #32]	@ (8004dec <prvInitialiseTaskLists+0x60>)
 8004dca:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004dcc:	4b08      	ldr	r3, [pc, #32]	@ (8004df0 <prvInitialiseTaskLists+0x64>)
 8004dce:	601c      	str	r4, [r3, #0]
}
 8004dd0:	bd38      	pop	{r3, r4, r5, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20004bcc 	.word	0x20004bcc
 8004dd8:	20004bb8 	.word	0x20004bb8
 8004ddc:	20004ba4 	.word	0x20004ba4
 8004de0:	20004b88 	.word	0x20004b88
 8004de4:	20004b74 	.word	0x20004b74
 8004de8:	20004b5c 	.word	0x20004b5c
 8004dec:	20004ba0 	.word	0x20004ba0
 8004df0:	20004b9c 	.word	0x20004b9c

08004df4 <prvAddNewTaskToReadyList>:
{
 8004df4:	b510      	push	{r4, lr}
 8004df6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004df8:	f7fb ffec 	bl	8000dd4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004dfc:	4a22      	ldr	r2, [pc, #136]	@ (8004e88 <prvAddNewTaskToReadyList+0x94>)
 8004dfe:	6813      	ldr	r3, [r2, #0]
 8004e00:	3301      	adds	r3, #1
 8004e02:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e04:	4b21      	ldr	r3, [pc, #132]	@ (8004e8c <prvAddNewTaskToReadyList+0x98>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	b15b      	cbz	r3, 8004e22 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8004e0a:	4b21      	ldr	r3, [pc, #132]	@ (8004e90 <prvAddNewTaskToReadyList+0x9c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	b96b      	cbnz	r3, 8004e2c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e10:	4b1e      	ldr	r3, [pc, #120]	@ (8004e8c <prvAddNewTaskToReadyList+0x98>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e16:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d807      	bhi.n	8004e2c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e8c <prvAddNewTaskToReadyList+0x98>)
 8004e1e:	601c      	str	r4, [r3, #0]
 8004e20:	e004      	b.n	8004e2c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8004e22:	4b1a      	ldr	r3, [pc, #104]	@ (8004e8c <prvAddNewTaskToReadyList+0x98>)
 8004e24:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d029      	beq.n	8004e80 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8004e2c:	4a19      	ldr	r2, [pc, #100]	@ (8004e94 <prvAddNewTaskToReadyList+0xa0>)
 8004e2e:	6813      	ldr	r3, [r2, #0]
 8004e30:	3301      	adds	r3, #1
 8004e32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e34:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004e36:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004e38:	4b17      	ldr	r3, [pc, #92]	@ (8004e98 <prvAddNewTaskToReadyList+0xa4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4298      	cmp	r0, r3
 8004e3e:	d901      	bls.n	8004e44 <prvAddNewTaskToReadyList+0x50>
 8004e40:	4b15      	ldr	r3, [pc, #84]	@ (8004e98 <prvAddNewTaskToReadyList+0xa4>)
 8004e42:	6018      	str	r0, [r3, #0]
 8004e44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004e48:	1d21      	adds	r1, r4, #4
 8004e4a:	4b14      	ldr	r3, [pc, #80]	@ (8004e9c <prvAddNewTaskToReadyList+0xa8>)
 8004e4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004e50:	f7fb fe8a 	bl	8000b68 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004e54:	f7fb ffe0 	bl	8000e18 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004e58:	4b0d      	ldr	r3, [pc, #52]	@ (8004e90 <prvAddNewTaskToReadyList+0x9c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	b17b      	cbz	r3, 8004e7e <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e8c <prvAddNewTaskToReadyList+0x98>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e64:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d209      	bcs.n	8004e7e <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8004e6a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e72:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	f3bf 8f6f 	isb	sy
}
 8004e7e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8004e80:	f7ff ff84 	bl	8004d8c <prvInitialiseTaskLists>
 8004e84:	e7d2      	b.n	8004e2c <prvAddNewTaskToReadyList+0x38>
 8004e86:	bf00      	nop
 8004e88:	20004b58 	.word	0x20004b58
 8004e8c:	2000502c 	.word	0x2000502c
 8004e90:	20004b4c 	.word	0x20004b4c
 8004e94:	20004b3c 	.word	0x20004b3c
 8004e98:	20004b50 	.word	0x20004b50
 8004e9c:	20004bcc 	.word	0x20004bcc

08004ea0 <prvDeleteTCB>:
	{
 8004ea0:	b510      	push	{r4, lr}
 8004ea2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ea4:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 8004ea8:	b163      	cbz	r3, 8004ec4 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d011      	beq.n	8004ed2 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d00e      	beq.n	8004ed0 <prvDeleteTCB+0x30>
 8004eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	e7fe      	b.n	8004ec2 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8004ec4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8004ec6:	f7fb fe03 	bl	8000ad0 <vPortFree>
				vPortFree( pxTCB );
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f7fb fe00 	bl	8000ad0 <vPortFree>
	}
 8004ed0:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8004ed2:	f7fb fdfd 	bl	8000ad0 <vPortFree>
 8004ed6:	e7fb      	b.n	8004ed0 <prvDeleteTCB+0x30>

08004ed8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8004f18 <prvCheckTasksWaitingTermination+0x40>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	b1d3      	cbz	r3, 8004f14 <prvCheckTasksWaitingTermination+0x3c>
{
 8004ede:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8004ee0:	f7fb ff78 	bl	8000dd4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8004f1c <prvCheckTasksWaitingTermination+0x44>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eea:	1d20      	adds	r0, r4, #4
 8004eec:	f7fb fe60 	bl	8000bb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8004f20 <prvCheckTasksWaitingTermination+0x48>)
 8004ef2:	6813      	ldr	r3, [r2, #0]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ef8:	4a07      	ldr	r2, [pc, #28]	@ (8004f18 <prvCheckTasksWaitingTermination+0x40>)
 8004efa:	6813      	ldr	r3, [r2, #0]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8004f00:	f7fb ff8a 	bl	8000e18 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004f04:	4620      	mov	r0, r4
 8004f06:	f7ff ffcb 	bl	8004ea0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f0a:	4b03      	ldr	r3, [pc, #12]	@ (8004f18 <prvCheckTasksWaitingTermination+0x40>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e6      	bne.n	8004ee0 <prvCheckTasksWaitingTermination+0x8>
}
 8004f12:	bd10      	pop	{r4, pc}
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	20004b70 	.word	0x20004b70
 8004f1c:	20004b74 	.word	0x20004b74
 8004f20:	20004b58 	.word	0x20004b58

08004f24 <prvIdleTask>:
{
 8004f24:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8004f26:	f7ff ffd7 	bl	8004ed8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f2a:	4b07      	ldr	r3, [pc, #28]	@ (8004f48 <prvIdleTask+0x24>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d9f9      	bls.n	8004f26 <prvIdleTask+0x2>
				taskYIELD();
 8004f32:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f3a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	e7ee      	b.n	8004f26 <prvIdleTask+0x2>
 8004f48:	20004bcc 	.word	0x20004bcc

08004f4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	4604      	mov	r4, r0
 8004f50:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f52:	4b17      	ldr	r3, [pc, #92]	@ (8004fb0 <prvAddCurrentTaskToDelayedList+0x64>)
 8004f54:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f56:	4b17      	ldr	r3, [pc, #92]	@ (8004fb4 <prvAddCurrentTaskToDelayedList+0x68>)
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	3004      	adds	r0, #4
 8004f5c:	f7fb fe28 	bl	8000bb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f60:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004f64:	d00d      	beq.n	8004f82 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f66:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f68:	4b12      	ldr	r3, [pc, #72]	@ (8004fb4 <prvAddCurrentTaskToDelayedList+0x68>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004f6e:	42a6      	cmp	r6, r4
 8004f70:	d910      	bls.n	8004f94 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f72:	4b11      	ldr	r3, [pc, #68]	@ (8004fb8 <prvAddCurrentTaskToDelayedList+0x6c>)
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb4 <prvAddCurrentTaskToDelayedList+0x68>)
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	3104      	adds	r1, #4
 8004f7c:	f7fb fdff 	bl	8000b7e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f80:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f82:	2d00      	cmp	r5, #0
 8004f84:	d0ef      	beq.n	8004f66 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f86:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb4 <prvAddCurrentTaskToDelayedList+0x68>)
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	3104      	adds	r1, #4
 8004f8c:	480b      	ldr	r0, [pc, #44]	@ (8004fbc <prvAddCurrentTaskToDelayedList+0x70>)
 8004f8e:	f7fb fdeb 	bl	8000b68 <vListInsertEnd>
 8004f92:	e7f5      	b.n	8004f80 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f94:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc0 <prvAddCurrentTaskToDelayedList+0x74>)
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	4b06      	ldr	r3, [pc, #24]	@ (8004fb4 <prvAddCurrentTaskToDelayedList+0x68>)
 8004f9a:	6819      	ldr	r1, [r3, #0]
 8004f9c:	3104      	adds	r1, #4
 8004f9e:	f7fb fdee 	bl	8000b7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fa2:	4b08      	ldr	r3, [pc, #32]	@ (8004fc4 <prvAddCurrentTaskToDelayedList+0x78>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	42a3      	cmp	r3, r4
 8004fa8:	d9ea      	bls.n	8004f80 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8004faa:	4b06      	ldr	r3, [pc, #24]	@ (8004fc4 <prvAddCurrentTaskToDelayedList+0x78>)
 8004fac:	601c      	str	r4, [r3, #0]
}
 8004fae:	e7e7      	b.n	8004f80 <prvAddCurrentTaskToDelayedList+0x34>
 8004fb0:	20004b54 	.word	0x20004b54
 8004fb4:	2000502c 	.word	0x2000502c
 8004fb8:	20004b9c 	.word	0x20004b9c
 8004fbc:	20004b5c 	.word	0x20004b5c
 8004fc0:	20004ba0 	.word	0x20004ba0
 8004fc4:	20004b38 	.word	0x20004b38

08004fc8 <xTaskCreateStatic>:
	{
 8004fc8:	b530      	push	{r4, r5, lr}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8004fce:	b17c      	cbz	r4, 8004ff0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004fd0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004fd2:	b1b5      	cbz	r5, 8005002 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fd4:	255c      	movs	r5, #92	@ 0x5c
 8004fd6:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fd8:	9d04      	ldr	r5, [sp, #16]
 8004fda:	2d5c      	cmp	r5, #92	@ 0x5c
 8004fdc:	d01a      	beq.n	8005014 <xTaskCreateStatic+0x4c>
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	e7fe      	b.n	8004fee <xTaskCreateStatic+0x26>
 8004ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005000:	e7fe      	b.n	8005000 <xTaskCreateStatic+0x38>
 8005002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005012:	e7fe      	b.n	8005012 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005014:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005016:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005018:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800501a:	2402      	movs	r4, #2
 800501c:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005020:	2400      	movs	r4, #0
 8005022:	9403      	str	r4, [sp, #12]
 8005024:	9502      	str	r5, [sp, #8]
 8005026:	ac05      	add	r4, sp, #20
 8005028:	9401      	str	r4, [sp, #4]
 800502a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800502c:	9400      	str	r4, [sp, #0]
 800502e:	f7ff fe5b 	bl	8004ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005032:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005034:	f7ff fede 	bl	8004df4 <prvAddNewTaskToReadyList>
	}
 8005038:	9805      	ldr	r0, [sp, #20]
 800503a:	b007      	add	sp, #28
 800503c:	bd30      	pop	{r4, r5, pc}

0800503e <xTaskCreate>:
	{
 800503e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005042:	b085      	sub	sp, #20
 8005044:	4607      	mov	r7, r0
 8005046:	4688      	mov	r8, r1
 8005048:	4614      	mov	r4, r2
 800504a:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800504c:	0090      	lsls	r0, r2, #2
 800504e:	f7fb fcbd 	bl	80009cc <pvPortMalloc>
			if( pxStack != NULL )
 8005052:	b308      	cbz	r0, 8005098 <xTaskCreate+0x5a>
 8005054:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005056:	205c      	movs	r0, #92	@ 0x5c
 8005058:	f7fb fcb8 	bl	80009cc <pvPortMalloc>
				if( pxNewTCB != NULL )
 800505c:	4605      	mov	r5, r0
 800505e:	b1a8      	cbz	r0, 800508c <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8005060:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005064:	2300      	movs	r3, #0
 8005066:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800506a:	9303      	str	r3, [sp, #12]
 800506c:	9002      	str	r0, [sp, #8]
 800506e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	4633      	mov	r3, r6
 8005078:	4622      	mov	r2, r4
 800507a:	4641      	mov	r1, r8
 800507c:	4638      	mov	r0, r7
 800507e:	f7ff fe33 	bl	8004ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005082:	4628      	mov	r0, r5
 8005084:	f7ff feb6 	bl	8004df4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005088:	2001      	movs	r0, #1
 800508a:	e007      	b.n	800509c <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800508c:	4648      	mov	r0, r9
 800508e:	f7fb fd1f 	bl	8000ad0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005092:	f04f 30ff 	mov.w	r0, #4294967295
 8005096:	e001      	b.n	800509c <xTaskCreate+0x5e>
 8005098:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800509c:	b005      	add	sp, #20
 800509e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080050a4 <vTaskStartScheduler>:
{
 80050a4:	b510      	push	{r4, lr}
 80050a6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050a8:	2400      	movs	r4, #0
 80050aa:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050ac:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050ae:	aa07      	add	r2, sp, #28
 80050b0:	a906      	add	r1, sp, #24
 80050b2:	a805      	add	r0, sp, #20
 80050b4:	f7fb fb06 	bl	80006c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050b8:	9b05      	ldr	r3, [sp, #20]
 80050ba:	9302      	str	r3, [sp, #8]
 80050bc:	9b06      	ldr	r3, [sp, #24]
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	9400      	str	r4, [sp, #0]
 80050c2:	4623      	mov	r3, r4
 80050c4:	9a07      	ldr	r2, [sp, #28]
 80050c6:	4917      	ldr	r1, [pc, #92]	@ (8005124 <vTaskStartScheduler+0x80>)
 80050c8:	4817      	ldr	r0, [pc, #92]	@ (8005128 <vTaskStartScheduler+0x84>)
 80050ca:	f7ff ff7d 	bl	8004fc8 <xTaskCreateStatic>
 80050ce:	4b17      	ldr	r3, [pc, #92]	@ (800512c <vTaskStartScheduler+0x88>)
 80050d0:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 80050d2:	b1c0      	cbz	r0, 8005106 <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 80050d4:	f000 fd08 	bl	8005ae8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80050d8:	2801      	cmp	r0, #1
 80050da:	d115      	bne.n	8005108 <vTaskStartScheduler+0x64>
 80050dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80050ec:	4b10      	ldr	r3, [pc, #64]	@ (8005130 <vTaskStartScheduler+0x8c>)
 80050ee:	f04f 32ff 	mov.w	r2, #4294967295
 80050f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005134 <vTaskStartScheduler+0x90>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005138 <vTaskStartScheduler+0x94>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005100:	f7fb ff02 	bl	8000f08 <xPortStartScheduler>
		}
 8005104:	e003      	b.n	800510e <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 8005106:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005108:	f1b0 3fff 	cmp.w	r0, #4294967295
 800510c:	d001      	beq.n	8005112 <vTaskStartScheduler+0x6e>
}
 800510e:	b008      	add	sp, #32
 8005110:	bd10      	pop	{r4, pc}
 8005112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005122:	e7fe      	b.n	8005122 <vTaskStartScheduler+0x7e>
 8005124:	080082ac 	.word	0x080082ac
 8005128:	08004f25 	.word	0x08004f25
 800512c:	20004b34 	.word	0x20004b34
 8005130:	20004b38 	.word	0x20004b38
 8005134:	20004b4c 	.word	0x20004b4c
 8005138:	20004b54 	.word	0x20004b54

0800513c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800513c:	4a02      	ldr	r2, [pc, #8]	@ (8005148 <vTaskSuspendAll+0xc>)
 800513e:	6813      	ldr	r3, [r2, #0]
 8005140:	3301      	adds	r3, #1
 8005142:	6013      	str	r3, [r2, #0]
}
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	20004b30 	.word	0x20004b30

0800514c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800514c:	4b01      	ldr	r3, [pc, #4]	@ (8005154 <xTaskGetTickCount+0x8>)
 800514e:	6818      	ldr	r0, [r3, #0]
}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20004b54 	.word	0x20004b54

08005158 <xTaskIncrementTick>:
{
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800515a:	4b3a      	ldr	r3, [pc, #232]	@ (8005244 <xTaskIncrementTick+0xec>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d169      	bne.n	8005236 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005162:	4b39      	ldr	r3, [pc, #228]	@ (8005248 <xTaskIncrementTick+0xf0>)
 8005164:	681d      	ldr	r5, [r3, #0]
 8005166:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8005168:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800516a:	b9c5      	cbnz	r5, 800519e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800516c:	4b37      	ldr	r3, [pc, #220]	@ (800524c <xTaskIncrementTick+0xf4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	b143      	cbz	r3, 8005186 <xTaskIncrementTick+0x2e>
 8005174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	e7fe      	b.n	8005184 <xTaskIncrementTick+0x2c>
 8005186:	4a31      	ldr	r2, [pc, #196]	@ (800524c <xTaskIncrementTick+0xf4>)
 8005188:	6811      	ldr	r1, [r2, #0]
 800518a:	4b31      	ldr	r3, [pc, #196]	@ (8005250 <xTaskIncrementTick+0xf8>)
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	6010      	str	r0, [r2, #0]
 8005190:	6019      	str	r1, [r3, #0]
 8005192:	4a30      	ldr	r2, [pc, #192]	@ (8005254 <xTaskIncrementTick+0xfc>)
 8005194:	6813      	ldr	r3, [r2, #0]
 8005196:	3301      	adds	r3, #1
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	f7ff fd8f 	bl	8004cbc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800519e:	4b2e      	ldr	r3, [pc, #184]	@ (8005258 <xTaskIncrementTick+0x100>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	42ab      	cmp	r3, r5
 80051a4:	d93d      	bls.n	8005222 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80051a6:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051a8:	4b2c      	ldr	r3, [pc, #176]	@ (800525c <xTaskIncrementTick+0x104>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051b2:	009a      	lsls	r2, r3, #2
 80051b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005260 <xTaskIncrementTick+0x108>)
 80051b6:	589b      	ldr	r3, [r3, r2]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d900      	bls.n	80051be <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80051bc:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 80051be:	4b29      	ldr	r3, [pc, #164]	@ (8005264 <xTaskIncrementTick+0x10c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d03c      	beq.n	8005240 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 80051c6:	2701      	movs	r7, #1
	return xSwitchRequired;
 80051c8:	e03a      	b.n	8005240 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 80051ca:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051cc:	4b1f      	ldr	r3, [pc, #124]	@ (800524c <xTaskIncrementTick+0xf4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	b343      	cbz	r3, 8005226 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d4:	4b1d      	ldr	r3, [pc, #116]	@ (800524c <xTaskIncrementTick+0xf4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051dc:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80051de:	429d      	cmp	r5, r3
 80051e0:	d326      	bcc.n	8005230 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051e2:	1d26      	adds	r6, r4, #4
 80051e4:	4630      	mov	r0, r6
 80051e6:	f7fb fce3 	bl	8000bb0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051ea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80051ec:	b11b      	cbz	r3, 80051f6 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051ee:	f104 0018 	add.w	r0, r4, #24
 80051f2:	f7fb fcdd 	bl	8000bb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051f6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80051f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005268 <xTaskIncrementTick+0x110>)
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d901      	bls.n	8005204 <xTaskIncrementTick+0xac>
 8005200:	4a19      	ldr	r2, [pc, #100]	@ (8005268 <xTaskIncrementTick+0x110>)
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005208:	009a      	lsls	r2, r3, #2
 800520a:	4631      	mov	r1, r6
 800520c:	4814      	ldr	r0, [pc, #80]	@ (8005260 <xTaskIncrementTick+0x108>)
 800520e:	4410      	add	r0, r2
 8005210:	f7fb fcaa 	bl	8000b68 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005214:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005216:	4b11      	ldr	r3, [pc, #68]	@ (800525c <xTaskIncrementTick+0x104>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521c:	429a      	cmp	r2, r3
 800521e:	d2d4      	bcs.n	80051ca <xTaskIncrementTick+0x72>
 8005220:	e7d4      	b.n	80051cc <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8005222:	2700      	movs	r7, #0
 8005224:	e7d2      	b.n	80051cc <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005226:	4b0c      	ldr	r3, [pc, #48]	@ (8005258 <xTaskIncrementTick+0x100>)
 8005228:	f04f 32ff 	mov.w	r2, #4294967295
 800522c:	601a      	str	r2, [r3, #0]
					break;
 800522e:	e7bb      	b.n	80051a8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8005230:	4a09      	ldr	r2, [pc, #36]	@ (8005258 <xTaskIncrementTick+0x100>)
 8005232:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005234:	e7b8      	b.n	80051a8 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8005236:	4a0d      	ldr	r2, [pc, #52]	@ (800526c <xTaskIncrementTick+0x114>)
 8005238:	6813      	ldr	r3, [r2, #0]
 800523a:	3301      	adds	r3, #1
 800523c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800523e:	2700      	movs	r7, #0
}
 8005240:	4638      	mov	r0, r7
 8005242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005244:	20004b30 	.word	0x20004b30
 8005248:	20004b54 	.word	0x20004b54
 800524c:	20004ba0 	.word	0x20004ba0
 8005250:	20004b9c 	.word	0x20004b9c
 8005254:	20004b40 	.word	0x20004b40
 8005258:	20004b38 	.word	0x20004b38
 800525c:	2000502c 	.word	0x2000502c
 8005260:	20004bcc 	.word	0x20004bcc
 8005264:	20004b44 	.word	0x20004b44
 8005268:	20004b50 	.word	0x20004b50
 800526c:	20004b48 	.word	0x20004b48

08005270 <xTaskResumeAll>:
{
 8005270:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8005272:	4b35      	ldr	r3, [pc, #212]	@ (8005348 <xTaskResumeAll+0xd8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	b943      	cbnz	r3, 800528a <xTaskResumeAll+0x1a>
 8005278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	e7fe      	b.n	8005288 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800528a:	f7fb fda3 	bl	8000dd4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800528e:	4b2e      	ldr	r3, [pc, #184]	@ (8005348 <xTaskResumeAll+0xd8>)
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	3a01      	subs	r2, #1
 8005294:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d14f      	bne.n	800533c <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800529c:	4b2b      	ldr	r3, [pc, #172]	@ (800534c <xTaskResumeAll+0xdc>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	b90b      	cbnz	r3, 80052a6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80052a2:	2400      	movs	r4, #0
 80052a4:	e04b      	b.n	800533e <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80052a6:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052a8:	4b29      	ldr	r3, [pc, #164]	@ (8005350 <xTaskResumeAll+0xe0>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	b31b      	cbz	r3, 80052f6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ae:	4b28      	ldr	r3, [pc, #160]	@ (8005350 <xTaskResumeAll+0xe0>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052b4:	f104 0018 	add.w	r0, r4, #24
 80052b8:	f7fb fc7a 	bl	8000bb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052bc:	1d25      	adds	r5, r4, #4
 80052be:	4628      	mov	r0, r5
 80052c0:	f7fb fc76 	bl	8000bb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052c4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80052c6:	4b23      	ldr	r3, [pc, #140]	@ (8005354 <xTaskResumeAll+0xe4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4298      	cmp	r0, r3
 80052cc:	d901      	bls.n	80052d2 <xTaskResumeAll+0x62>
 80052ce:	4b21      	ldr	r3, [pc, #132]	@ (8005354 <xTaskResumeAll+0xe4>)
 80052d0:	6018      	str	r0, [r3, #0]
 80052d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80052d6:	4629      	mov	r1, r5
 80052d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005358 <xTaskResumeAll+0xe8>)
 80052da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80052de:	f7fb fc43 	bl	8000b68 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052e2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80052e4:	4b1d      	ldr	r3, [pc, #116]	@ (800535c <xTaskResumeAll+0xec>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d3dc      	bcc.n	80052a8 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 80052ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005360 <xTaskResumeAll+0xf0>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e7d8      	b.n	80052a8 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 80052f6:	b10c      	cbz	r4, 80052fc <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 80052f8:	f7ff fce0 	bl	8004cbc <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052fc:	4b19      	ldr	r3, [pc, #100]	@ (8005364 <xTaskResumeAll+0xf4>)
 80052fe:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005300:	b984      	cbnz	r4, 8005324 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8005302:	4b17      	ldr	r3, [pc, #92]	@ (8005360 <xTaskResumeAll+0xf0>)
 8005304:	681c      	ldr	r4, [r3, #0]
 8005306:	b1d4      	cbz	r4, 800533e <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8005308:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800530c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005310:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800531c:	2401      	movs	r4, #1
 800531e:	e00e      	b.n	800533e <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005320:	3c01      	subs	r4, #1
 8005322:	d007      	beq.n	8005334 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8005324:	f7ff ff18 	bl	8005158 <xTaskIncrementTick>
 8005328:	2800      	cmp	r0, #0
 800532a:	d0f9      	beq.n	8005320 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800532c:	4b0c      	ldr	r3, [pc, #48]	@ (8005360 <xTaskResumeAll+0xf0>)
 800532e:	2201      	movs	r2, #1
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	e7f5      	b.n	8005320 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8005334:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <xTaskResumeAll+0xf4>)
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	e7e2      	b.n	8005302 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800533c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800533e:	f7fb fd6b 	bl	8000e18 <vPortExitCritical>
}
 8005342:	4620      	mov	r0, r4
 8005344:	bd38      	pop	{r3, r4, r5, pc}
 8005346:	bf00      	nop
 8005348:	20004b30 	.word	0x20004b30
 800534c:	20004b58 	.word	0x20004b58
 8005350:	20004b88 	.word	0x20004b88
 8005354:	20004b50 	.word	0x20004b50
 8005358:	20004bcc 	.word	0x20004bcc
 800535c:	2000502c 	.word	0x2000502c
 8005360:	20004b44 	.word	0x20004b44
 8005364:	20004b48 	.word	0x20004b48

08005368 <vTaskDelay>:
	{
 8005368:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800536a:	b1a8      	cbz	r0, 8005398 <vTaskDelay+0x30>
 800536c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800536e:	4b10      	ldr	r3, [pc, #64]	@ (80053b0 <vTaskDelay+0x48>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	b143      	cbz	r3, 8005386 <vTaskDelay+0x1e>
 8005374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	e7fe      	b.n	8005384 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005386:	f7ff fed9 	bl	800513c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800538a:	2100      	movs	r1, #0
 800538c:	4620      	mov	r0, r4
 800538e:	f7ff fddd 	bl	8004f4c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005392:	f7ff ff6d 	bl	8005270 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005396:	b948      	cbnz	r0, 80053ac <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8005398:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800539c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	f3bf 8f6f 	isb	sy
	}
 80053ac:	bd10      	pop	{r4, pc}
 80053ae:	bf00      	nop
 80053b0:	20004b30 	.word	0x20004b30

080053b4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053b4:	4b20      	ldr	r3, [pc, #128]	@ (8005438 <vTaskSwitchContext+0x84>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	b11b      	cbz	r3, 80053c2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80053ba:	4b20      	ldr	r3, [pc, #128]	@ (800543c <vTaskSwitchContext+0x88>)
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80053c2:	4b1e      	ldr	r3, [pc, #120]	@ (800543c <vTaskSwitchContext+0x88>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005440 <vTaskSwitchContext+0x8c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80053d0:	008a      	lsls	r2, r1, #2
 80053d2:	491c      	ldr	r1, [pc, #112]	@ (8005444 <vTaskSwitchContext+0x90>)
 80053d4:	588a      	ldr	r2, [r1, r2]
 80053d6:	b95a      	cbnz	r2, 80053f0 <vTaskSwitchContext+0x3c>
 80053d8:	b10b      	cbz	r3, 80053de <vTaskSwitchContext+0x2a>
 80053da:	3b01      	subs	r3, #1
 80053dc:	e7f6      	b.n	80053cc <vTaskSwitchContext+0x18>
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	e7fe      	b.n	80053ee <vTaskSwitchContext+0x3a>
 80053f0:	4608      	mov	r0, r1
 80053f2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80053f6:	008a      	lsls	r2, r1, #2
 80053f8:	4402      	add	r2, r0
 80053fa:	6851      	ldr	r1, [r2, #4]
 80053fc:	6849      	ldr	r1, [r1, #4]
 80053fe:	6051      	str	r1, [r2, #4]
 8005400:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8005404:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8005408:	3208      	adds	r2, #8
 800540a:	4402      	add	r2, r0
 800540c:	4291      	cmp	r1, r2
 800540e:	d00b      	beq.n	8005428 <vTaskSwitchContext+0x74>
 8005410:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005414:	0091      	lsls	r1, r2, #2
 8005416:	4a0b      	ldr	r2, [pc, #44]	@ (8005444 <vTaskSwitchContext+0x90>)
 8005418:	440a      	add	r2, r1
 800541a:	6852      	ldr	r2, [r2, #4]
 800541c:	68d1      	ldr	r1, [r2, #12]
 800541e:	4a0a      	ldr	r2, [pc, #40]	@ (8005448 <vTaskSwitchContext+0x94>)
 8005420:	6011      	str	r1, [r2, #0]
 8005422:	4a07      	ldr	r2, [pc, #28]	@ (8005440 <vTaskSwitchContext+0x8c>)
 8005424:	6013      	str	r3, [r2, #0]
}
 8005426:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005428:	6848      	ldr	r0, [r1, #4]
 800542a:	4662      	mov	r2, ip
 800542c:	0091      	lsls	r1, r2, #2
 800542e:	4a05      	ldr	r2, [pc, #20]	@ (8005444 <vTaskSwitchContext+0x90>)
 8005430:	440a      	add	r2, r1
 8005432:	6050      	str	r0, [r2, #4]
 8005434:	e7ec      	b.n	8005410 <vTaskSwitchContext+0x5c>
 8005436:	bf00      	nop
 8005438:	20004b30 	.word	0x20004b30
 800543c:	20004b44 	.word	0x20004b44
 8005440:	20004b50 	.word	0x20004b50
 8005444:	20004bcc 	.word	0x20004bcc
 8005448:	2000502c 	.word	0x2000502c

0800544c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800544c:	b158      	cbz	r0, 8005466 <vTaskPlaceOnEventList+0x1a>
{
 800544e:	b510      	push	{r4, lr}
 8005450:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005452:	4a09      	ldr	r2, [pc, #36]	@ (8005478 <vTaskPlaceOnEventList+0x2c>)
 8005454:	6811      	ldr	r1, [r2, #0]
 8005456:	3118      	adds	r1, #24
 8005458:	f7fb fb91 	bl	8000b7e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800545c:	2101      	movs	r1, #1
 800545e:	4620      	mov	r0, r4
 8005460:	f7ff fd74 	bl	8004f4c <prvAddCurrentTaskToDelayedList>
}
 8005464:	bd10      	pop	{r4, pc}
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8005476:	e7fe      	b.n	8005476 <vTaskPlaceOnEventList+0x2a>
 8005478:	2000502c 	.word	0x2000502c

0800547c <vTaskPlaceOnEventListRestricted>:
	{
 800547c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800547e:	b170      	cbz	r0, 800549e <vTaskPlaceOnEventListRestricted+0x22>
 8005480:	460d      	mov	r5, r1
 8005482:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005484:	4a0a      	ldr	r2, [pc, #40]	@ (80054b0 <vTaskPlaceOnEventListRestricted+0x34>)
 8005486:	6811      	ldr	r1, [r2, #0]
 8005488:	3118      	adds	r1, #24
 800548a:	f7fb fb6d 	bl	8000b68 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800548e:	b10c      	cbz	r4, 8005494 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8005490:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005494:	4621      	mov	r1, r4
 8005496:	4628      	mov	r0, r5
 8005498:	f7ff fd58 	bl	8004f4c <prvAddCurrentTaskToDelayedList>
	}
 800549c:	bd38      	pop	{r3, r4, r5, pc}
 800549e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80054ae:	e7fe      	b.n	80054ae <vTaskPlaceOnEventListRestricted+0x32>
 80054b0:	2000502c 	.word	0x2000502c

080054b4 <xTaskRemoveFromEventList>:
{
 80054b4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b6:	68c3      	ldr	r3, [r0, #12]
 80054b8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80054ba:	b324      	cbz	r4, 8005506 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054bc:	f104 0518 	add.w	r5, r4, #24
 80054c0:	4628      	mov	r0, r5
 80054c2:	f7fb fb75 	bl	8000bb0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054c6:	4b18      	ldr	r3, [pc, #96]	@ (8005528 <xTaskRemoveFromEventList+0x74>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	bb2b      	cbnz	r3, 8005518 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054cc:	1d25      	adds	r5, r4, #4
 80054ce:	4628      	mov	r0, r5
 80054d0:	f7fb fb6e 	bl	8000bb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054d4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80054d6:	4b15      	ldr	r3, [pc, #84]	@ (800552c <xTaskRemoveFromEventList+0x78>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4298      	cmp	r0, r3
 80054dc:	d901      	bls.n	80054e2 <xTaskRemoveFromEventList+0x2e>
 80054de:	4b13      	ldr	r3, [pc, #76]	@ (800552c <xTaskRemoveFromEventList+0x78>)
 80054e0:	6018      	str	r0, [r3, #0]
 80054e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80054e6:	4629      	mov	r1, r5
 80054e8:	4b11      	ldr	r3, [pc, #68]	@ (8005530 <xTaskRemoveFromEventList+0x7c>)
 80054ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80054ee:	f7fb fb3b 	bl	8000b68 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054f2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80054f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005534 <xTaskRemoveFromEventList+0x80>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d911      	bls.n	8005522 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80054fe:	2001      	movs	r0, #1
 8005500:	4b0d      	ldr	r3, [pc, #52]	@ (8005538 <xTaskRemoveFromEventList+0x84>)
 8005502:	6018      	str	r0, [r3, #0]
}
 8005504:	bd38      	pop	{r3, r4, r5, pc}
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005516:	e7fe      	b.n	8005516 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005518:	4629      	mov	r1, r5
 800551a:	4808      	ldr	r0, [pc, #32]	@ (800553c <xTaskRemoveFromEventList+0x88>)
 800551c:	f7fb fb24 	bl	8000b68 <vListInsertEnd>
 8005520:	e7e7      	b.n	80054f2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8005522:	2000      	movs	r0, #0
	return xReturn;
 8005524:	e7ee      	b.n	8005504 <xTaskRemoveFromEventList+0x50>
 8005526:	bf00      	nop
 8005528:	20004b30 	.word	0x20004b30
 800552c:	20004b50 	.word	0x20004b50
 8005530:	20004bcc 	.word	0x20004bcc
 8005534:	2000502c 	.word	0x2000502c
 8005538:	20004b44 	.word	0x20004b44
 800553c:	20004b88 	.word	0x20004b88

08005540 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005540:	4b03      	ldr	r3, [pc, #12]	@ (8005550 <vTaskInternalSetTimeOutState+0x10>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005546:	4b03      	ldr	r3, [pc, #12]	@ (8005554 <vTaskInternalSetTimeOutState+0x14>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6043      	str	r3, [r0, #4]
}
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	20004b40 	.word	0x20004b40
 8005554:	20004b54 	.word	0x20004b54

08005558 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8005558:	b1e0      	cbz	r0, 8005594 <xTaskCheckForTimeOut+0x3c>
{
 800555a:	b570      	push	{r4, r5, r6, lr}
 800555c:	460c      	mov	r4, r1
 800555e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8005560:	b309      	cbz	r1, 80055a6 <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 8005562:	f7fb fc37 	bl	8000dd4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005566:	4b1c      	ldr	r3, [pc, #112]	@ (80055d8 <xTaskCheckForTimeOut+0x80>)
 8005568:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800556a:	686b      	ldr	r3, [r5, #4]
 800556c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800556e:	6822      	ldr	r2, [r4, #0]
 8005570:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005574:	d028      	beq.n	80055c8 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005576:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80055dc <xTaskCheckForTimeOut+0x84>
 800557a:	f8dc c000 	ldr.w	ip, [ip]
 800557e:	682e      	ldr	r6, [r5, #0]
 8005580:	4566      	cmp	r6, ip
 8005582:	d001      	beq.n	8005588 <xTaskCheckForTimeOut+0x30>
 8005584:	428b      	cmp	r3, r1
 8005586:	d924      	bls.n	80055d2 <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005588:	4282      	cmp	r2, r0
 800558a:	d815      	bhi.n	80055b8 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 800558c:	2300      	movs	r3, #0
 800558e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005590:	2401      	movs	r4, #1
 8005592:	e01a      	b.n	80055ca <xTaskCheckForTimeOut+0x72>
 8005594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80055a4:	e7fe      	b.n	80055a4 <xTaskCheckForTimeOut+0x4c>
 80055a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80055b6:	e7fe      	b.n	80055b6 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 80055b8:	1a5b      	subs	r3, r3, r1
 80055ba:	4413      	add	r3, r2
 80055bc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055be:	4628      	mov	r0, r5
 80055c0:	f7ff ffbe 	bl	8005540 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055c4:	2400      	movs	r4, #0
 80055c6:	e000      	b.n	80055ca <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 80055c8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80055ca:	f7fb fc25 	bl	8000e18 <vPortExitCritical>
}
 80055ce:	4620      	mov	r0, r4
 80055d0:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 80055d2:	2401      	movs	r4, #1
 80055d4:	e7f9      	b.n	80055ca <xTaskCheckForTimeOut+0x72>
 80055d6:	bf00      	nop
 80055d8:	20004b54 	.word	0x20004b54
 80055dc:	20004b40 	.word	0x20004b40

080055e0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80055e0:	4b01      	ldr	r3, [pc, #4]	@ (80055e8 <vTaskMissedYield+0x8>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
}
 80055e6:	4770      	bx	lr
 80055e8:	20004b44 	.word	0x20004b44

080055ec <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80055ec:	4b05      	ldr	r3, [pc, #20]	@ (8005604 <xTaskGetSchedulerState+0x18>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	b133      	cbz	r3, 8005600 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055f2:	4b05      	ldr	r3, [pc, #20]	@ (8005608 <xTaskGetSchedulerState+0x1c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	b10b      	cbz	r3, 80055fc <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80055f8:	2000      	movs	r0, #0
	}
 80055fa:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80055fc:	2002      	movs	r0, #2
 80055fe:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005600:	2001      	movs	r0, #1
 8005602:	4770      	bx	lr
 8005604:	20004b4c 	.word	0x20004b4c
 8005608:	20004b30 	.word	0x20004b30

0800560c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800560c:	2800      	cmp	r0, #0
 800560e:	d03b      	beq.n	8005688 <xTaskPriorityDisinherit+0x7c>
	{
 8005610:	b538      	push	{r3, r4, r5, lr}
 8005612:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8005614:	4b1e      	ldr	r3, [pc, #120]	@ (8005690 <xTaskPriorityDisinherit+0x84>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4283      	cmp	r3, r0
 800561a:	d008      	beq.n	800562e <xTaskPriorityDisinherit+0x22>
 800561c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	e7fe      	b.n	800562c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800562e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8005630:	b943      	cbnz	r3, 8005644 <xTaskPriorityDisinherit+0x38>
 8005632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	e7fe      	b.n	8005642 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8005644:	3b01      	subs	r3, #1
 8005646:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005648:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800564a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800564c:	4291      	cmp	r1, r2
 800564e:	d01d      	beq.n	800568c <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005650:	b10b      	cbz	r3, 8005656 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8005652:	2000      	movs	r0, #0
	}
 8005654:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005656:	1d05      	adds	r5, r0, #4
 8005658:	4628      	mov	r0, r5
 800565a:	f7fb faa9 	bl	8000bb0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800565e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8005660:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005662:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8005666:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005668:	4b0a      	ldr	r3, [pc, #40]	@ (8005694 <xTaskPriorityDisinherit+0x88>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4298      	cmp	r0, r3
 800566e:	d901      	bls.n	8005674 <xTaskPriorityDisinherit+0x68>
 8005670:	4b08      	ldr	r3, [pc, #32]	@ (8005694 <xTaskPriorityDisinherit+0x88>)
 8005672:	6018      	str	r0, [r3, #0]
 8005674:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005678:	4629      	mov	r1, r5
 800567a:	4b07      	ldr	r3, [pc, #28]	@ (8005698 <xTaskPriorityDisinherit+0x8c>)
 800567c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005680:	f7fb fa72 	bl	8000b68 <vListInsertEnd>
					xReturn = pdTRUE;
 8005684:	2001      	movs	r0, #1
 8005686:	e7e5      	b.n	8005654 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8005688:	2000      	movs	r0, #0
	}
 800568a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800568c:	2000      	movs	r0, #0
 800568e:	e7e1      	b.n	8005654 <xTaskPriorityDisinherit+0x48>
 8005690:	2000502c 	.word	0x2000502c
 8005694:	20004b50 	.word	0x20004b50
 8005698:	20004bcc 	.word	0x20004bcc

0800569c <MX_TIM5_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800569c:	b500      	push	{lr}
 800569e:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056a0:	2300      	movs	r3, #0
 80056a2:	9302      	str	r3, [sp, #8]
 80056a4:	9303      	str	r3, [sp, #12]
 80056a6:	9304      	str	r3, [sp, #16]
 80056a8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80056ae:	4814      	ldr	r0, [pc, #80]	@ (8005700 <MX_TIM5_Init+0x64>)
 80056b0:	4a14      	ldr	r2, [pc, #80]	@ (8005704 <MX_TIM5_Init+0x68>)
 80056b2:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 0;
 80056b4:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056b6:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 4294967295;
 80056b8:	f04f 32ff 	mov.w	r2, #4294967295
 80056bc:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056be:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056c0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80056c2:	f7fe fa15 	bl	8003af0 <HAL_TIM_Base_Init>
 80056c6:	b990      	cbnz	r0, 80056ee <MX_TIM5_Init+0x52>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80056cc:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80056ce:	a902      	add	r1, sp, #8
 80056d0:	480b      	ldr	r0, [pc, #44]	@ (8005700 <MX_TIM5_Init+0x64>)
 80056d2:	f7fe fb69 	bl	8003da8 <HAL_TIM_ConfigClockSource>
 80056d6:	b968      	cbnz	r0, 80056f4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056d8:	2300      	movs	r3, #0
 80056da:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056dc:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80056de:	4669      	mov	r1, sp
 80056e0:	4807      	ldr	r0, [pc, #28]	@ (8005700 <MX_TIM5_Init+0x64>)
 80056e2:	f7fe fbe1 	bl	8003ea8 <HAL_TIMEx_MasterConfigSynchronization>
 80056e6:	b940      	cbnz	r0, 80056fa <MX_TIM5_Init+0x5e>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80056e8:	b007      	add	sp, #28
 80056ea:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80056ee:	f7fb fa8b 	bl	8000c08 <Error_Handler>
 80056f2:	e7e9      	b.n	80056c8 <MX_TIM5_Init+0x2c>
    Error_Handler();
 80056f4:	f7fb fa88 	bl	8000c08 <Error_Handler>
 80056f8:	e7ee      	b.n	80056d8 <MX_TIM5_Init+0x3c>
    Error_Handler();
 80056fa:	f7fb fa85 	bl	8000c08 <Error_Handler>
}
 80056fe:	e7f3      	b.n	80056e8 <MX_TIM5_Init+0x4c>
 8005700:	20005030 	.word	0x20005030
 8005704:	40000c00 	.word	0x40000c00

08005708 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005708:	b500      	push	{lr}
 800570a:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM1)
 800570c:	6803      	ldr	r3, [r0, #0]
 800570e:	4a15      	ldr	r2, [pc, #84]	@ (8005764 <HAL_TIM_Base_MspInit+0x5c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d005      	beq.n	8005720 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 8005714:	4a14      	ldr	r2, [pc, #80]	@ (8005768 <HAL_TIM_Base_MspInit+0x60>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d016      	beq.n	8005748 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800571a:	b003      	add	sp, #12
 800571c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005720:	2200      	movs	r2, #0
 8005722:	9200      	str	r2, [sp, #0]
 8005724:	4b11      	ldr	r3, [pc, #68]	@ (800576c <HAL_TIM_Base_MspInit+0x64>)
 8005726:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005728:	f041 0101 	orr.w	r1, r1, #1
 800572c:	6459      	str	r1, [r3, #68]	@ 0x44
 800572e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8005738:	210f      	movs	r1, #15
 800573a:	201a      	movs	r0, #26
 800573c:	f7fc fb16 	bl	8001d6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005740:	201a      	movs	r0, #26
 8005742:	f7fc fb23 	bl	8001d8c <HAL_NVIC_EnableIRQ>
 8005746:	e7e8      	b.n	800571a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005748:	2300      	movs	r3, #0
 800574a:	9301      	str	r3, [sp, #4]
 800574c:	4b07      	ldr	r3, [pc, #28]	@ (800576c <HAL_TIM_Base_MspInit+0x64>)
 800574e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005750:	f042 0208 	orr.w	r2, r2, #8
 8005754:	641a      	str	r2, [r3, #64]	@ 0x40
 8005756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	9301      	str	r3, [sp, #4]
 800575e:	9b01      	ldr	r3, [sp, #4]
}
 8005760:	e7db      	b.n	800571a <HAL_TIM_Base_MspInit+0x12>
 8005762:	bf00      	nop
 8005764:	40010000 	.word	0x40010000
 8005768:	40000c00 	.word	0x40000c00
 800576c:	40023800 	.word	0x40023800

08005770 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM3)
 8005770:	6802      	ldr	r2, [r0, #0]
 8005772:	4b09      	ldr	r3, [pc, #36]	@ (8005798 <HAL_TIM_PWM_MspInit+0x28>)
 8005774:	429a      	cmp	r2, r3
 8005776:	d000      	beq.n	800577a <HAL_TIM_PWM_MspInit+0xa>
 8005778:	4770      	bx	lr
{
 800577a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800577c:	2300      	movs	r3, #0
 800577e:	9301      	str	r3, [sp, #4]
 8005780:	4b06      	ldr	r3, [pc, #24]	@ (800579c <HAL_TIM_PWM_MspInit+0x2c>)
 8005782:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005784:	f042 0202 	orr.w	r2, r2, #2
 8005788:	641a      	str	r2, [r3, #64]	@ 0x40
 800578a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005794:	b002      	add	sp, #8
 8005796:	4770      	bx	lr
 8005798:	40000400 	.word	0x40000400
 800579c:	40023800 	.word	0x40023800

080057a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80057a0:	b500      	push	{lr}
 80057a2:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057a4:	2300      	movs	r3, #0
 80057a6:	9303      	str	r3, [sp, #12]
 80057a8:	9304      	str	r3, [sp, #16]
 80057aa:	9305      	str	r3, [sp, #20]
 80057ac:	9306      	str	r3, [sp, #24]
 80057ae:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 80057b0:	6803      	ldr	r3, [r0, #0]
 80057b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005824 <HAL_TIM_MspPostInit+0x84>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d005      	beq.n	80057c4 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 80057b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005828 <HAL_TIM_MspPostInit+0x88>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d01a      	beq.n	80057f4 <HAL_TIM_MspPostInit+0x54>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80057be:	b009      	add	sp, #36	@ 0x24
 80057c0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057c4:	2300      	movs	r3, #0
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	4b18      	ldr	r3, [pc, #96]	@ (800582c <HAL_TIM_MspPostInit+0x8c>)
 80057ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057cc:	f042 0201 	orr.w	r2, r2, #1
 80057d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80057d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_OUT1_PIN_Pin|PWM_OUT2_PIN_Pin|PWM_OUT3_PIN_Pin;
 80057dc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80057e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e2:	2302      	movs	r3, #2
 80057e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80057e6:	2301      	movs	r3, #1
 80057e8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057ea:	a903      	add	r1, sp, #12
 80057ec:	4810      	ldr	r0, [pc, #64]	@ (8005830 <HAL_TIM_MspPostInit+0x90>)
 80057ee:	f7fc fcd5 	bl	800219c <HAL_GPIO_Init>
 80057f2:	e7e4      	b.n	80057be <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057f4:	2300      	movs	r3, #0
 80057f6:	9302      	str	r3, [sp, #8]
 80057f8:	4b0c      	ldr	r3, [pc, #48]	@ (800582c <HAL_TIM_MspPostInit+0x8c>)
 80057fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057fc:	f042 0204 	orr.w	r2, r2, #4
 8005800:	631a      	str	r2, [r3, #48]	@ 0x30
 8005802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	9302      	str	r3, [sp, #8]
 800580a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ETB1_MOTOR1_Pin|ETB1_MOTOR2_Pin|ETB2_MOTOR1_Pin|ETB2_MOTOR2_Pin;
 800580c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8005810:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005812:	2302      	movs	r3, #2
 8005814:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005816:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005818:	a903      	add	r1, sp, #12
 800581a:	4806      	ldr	r0, [pc, #24]	@ (8005834 <HAL_TIM_MspPostInit+0x94>)
 800581c:	f7fc fcbe 	bl	800219c <HAL_GPIO_Init>
}
 8005820:	e7cd      	b.n	80057be <HAL_TIM_MspPostInit+0x1e>
 8005822:	bf00      	nop
 8005824:	40010000 	.word	0x40010000
 8005828:	40000400 	.word	0x40000400
 800582c:	40023800 	.word	0x40023800
 8005830:	40020000 	.word	0x40020000
 8005834:	40020800 	.word	0x40020800

08005838 <MX_TIM1_Init>:
{
 8005838:	b510      	push	{r4, lr}
 800583a:	b096      	sub	sp, #88	@ 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800583c:	2400      	movs	r4, #0
 800583e:	9412      	str	r4, [sp, #72]	@ 0x48
 8005840:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005842:	9414      	str	r4, [sp, #80]	@ 0x50
 8005844:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005846:	9410      	str	r4, [sp, #64]	@ 0x40
 8005848:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 800584a:	9409      	str	r4, [sp, #36]	@ 0x24
 800584c:	940a      	str	r4, [sp, #40]	@ 0x28
 800584e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005850:	940c      	str	r4, [sp, #48]	@ 0x30
 8005852:	940d      	str	r4, [sp, #52]	@ 0x34
 8005854:	940e      	str	r4, [sp, #56]	@ 0x38
 8005856:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005858:	2220      	movs	r2, #32
 800585a:	4621      	mov	r1, r4
 800585c:	a801      	add	r0, sp, #4
 800585e:	f001 fedf 	bl	8007620 <memset>
  htim1.Instance = TIM1;
 8005862:	483b      	ldr	r0, [pc, #236]	@ (8005950 <MX_TIM1_Init+0x118>)
 8005864:	4b3b      	ldr	r3, [pc, #236]	@ (8005954 <MX_TIM1_Init+0x11c>)
 8005866:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8005868:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800586a:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 65535;
 800586c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005870:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005872:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8005874:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005876:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005878:	f7fe f93a 	bl	8003af0 <HAL_TIM_Base_Init>
 800587c:	2800      	cmp	r0, #0
 800587e:	d14c      	bne.n	800591a <MX_TIM1_Init+0xe2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005880:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005884:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005886:	a912      	add	r1, sp, #72	@ 0x48
 8005888:	4831      	ldr	r0, [pc, #196]	@ (8005950 <MX_TIM1_Init+0x118>)
 800588a:	f7fe fa8d 	bl	8003da8 <HAL_TIM_ConfigClockSource>
 800588e:	2800      	cmp	r0, #0
 8005890:	d146      	bne.n	8005920 <MX_TIM1_Init+0xe8>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005892:	482f      	ldr	r0, [pc, #188]	@ (8005950 <MX_TIM1_Init+0x118>)
 8005894:	f7fe f984 	bl	8003ba0 <HAL_TIM_PWM_Init>
 8005898:	2800      	cmp	r0, #0
 800589a:	d144      	bne.n	8005926 <MX_TIM1_Init+0xee>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800589c:	482c      	ldr	r0, [pc, #176]	@ (8005950 <MX_TIM1_Init+0x118>)
 800589e:	f7fe f953 	bl	8003b48 <HAL_TIM_OC_Init>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	d142      	bne.n	800592c <MX_TIM1_Init+0xf4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058a6:	2300      	movs	r3, #0
 80058a8:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058aa:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80058ac:	a910      	add	r1, sp, #64	@ 0x40
 80058ae:	4828      	ldr	r0, [pc, #160]	@ (8005950 <MX_TIM1_Init+0x118>)
 80058b0:	f7fe fafa 	bl	8003ea8 <HAL_TIMEx_MasterConfigSynchronization>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	d13c      	bne.n	8005932 <MX_TIM1_Init+0xfa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058b8:	2360      	movs	r3, #96	@ 0x60
 80058ba:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80058bc:	2200      	movs	r2, #0
 80058be:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058c0:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80058c2:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058c4:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80058c6:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80058c8:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80058ca:	a909      	add	r1, sp, #36	@ 0x24
 80058cc:	4820      	ldr	r0, [pc, #128]	@ (8005950 <MX_TIM1_Init+0x118>)
 80058ce:	f7fe f9f0 	bl	8003cb2 <HAL_TIM_PWM_ConfigChannel>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	d130      	bne.n	8005938 <MX_TIM1_Init+0x100>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80058d6:	2204      	movs	r2, #4
 80058d8:	a909      	add	r1, sp, #36	@ 0x24
 80058da:	481d      	ldr	r0, [pc, #116]	@ (8005950 <MX_TIM1_Init+0x118>)
 80058dc:	f7fe f9e9 	bl	8003cb2 <HAL_TIM_PWM_ConfigChannel>
 80058e0:	bb68      	cbnz	r0, 800593e <MX_TIM1_Init+0x106>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80058e2:	2300      	movs	r3, #0
 80058e4:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80058e6:	2208      	movs	r2, #8
 80058e8:	a909      	add	r1, sp, #36	@ 0x24
 80058ea:	4819      	ldr	r0, [pc, #100]	@ (8005950 <MX_TIM1_Init+0x118>)
 80058ec:	f7fe f9b2 	bl	8003c54 <HAL_TIM_OC_ConfigChannel>
 80058f0:	bb40      	cbnz	r0, 8005944 <MX_TIM1_Init+0x10c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80058f2:	2300      	movs	r3, #0
 80058f4:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80058f6:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80058f8:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80058fa:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80058fc:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80058fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005902:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005904:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005906:	a901      	add	r1, sp, #4
 8005908:	4811      	ldr	r0, [pc, #68]	@ (8005950 <MX_TIM1_Init+0x118>)
 800590a:	f7fe fb0b 	bl	8003f24 <HAL_TIMEx_ConfigBreakDeadTime>
 800590e:	b9e0      	cbnz	r0, 800594a <MX_TIM1_Init+0x112>
  HAL_TIM_MspPostInit(&htim1);
 8005910:	480f      	ldr	r0, [pc, #60]	@ (8005950 <MX_TIM1_Init+0x118>)
 8005912:	f7ff ff45 	bl	80057a0 <HAL_TIM_MspPostInit>
}
 8005916:	b016      	add	sp, #88	@ 0x58
 8005918:	bd10      	pop	{r4, pc}
    Error_Handler();
 800591a:	f7fb f975 	bl	8000c08 <Error_Handler>
 800591e:	e7af      	b.n	8005880 <MX_TIM1_Init+0x48>
    Error_Handler();
 8005920:	f7fb f972 	bl	8000c08 <Error_Handler>
 8005924:	e7b5      	b.n	8005892 <MX_TIM1_Init+0x5a>
    Error_Handler();
 8005926:	f7fb f96f 	bl	8000c08 <Error_Handler>
 800592a:	e7b7      	b.n	800589c <MX_TIM1_Init+0x64>
    Error_Handler();
 800592c:	f7fb f96c 	bl	8000c08 <Error_Handler>
 8005930:	e7b9      	b.n	80058a6 <MX_TIM1_Init+0x6e>
    Error_Handler();
 8005932:	f7fb f969 	bl	8000c08 <Error_Handler>
 8005936:	e7bf      	b.n	80058b8 <MX_TIM1_Init+0x80>
    Error_Handler();
 8005938:	f7fb f966 	bl	8000c08 <Error_Handler>
 800593c:	e7cb      	b.n	80058d6 <MX_TIM1_Init+0x9e>
    Error_Handler();
 800593e:	f7fb f963 	bl	8000c08 <Error_Handler>
 8005942:	e7ce      	b.n	80058e2 <MX_TIM1_Init+0xaa>
    Error_Handler();
 8005944:	f7fb f960 	bl	8000c08 <Error_Handler>
 8005948:	e7d3      	b.n	80058f2 <MX_TIM1_Init+0xba>
    Error_Handler();
 800594a:	f7fb f95d 	bl	8000c08 <Error_Handler>
 800594e:	e7df      	b.n	8005910 <MX_TIM1_Init+0xd8>
 8005950:	200050c0 	.word	0x200050c0
 8005954:	40010000 	.word	0x40010000

08005958 <MX_TIM3_Init>:
{
 8005958:	b500      	push	{lr}
 800595a:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800595c:	2300      	movs	r3, #0
 800595e:	9308      	str	r3, [sp, #32]
 8005960:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005962:	9301      	str	r3, [sp, #4]
 8005964:	9302      	str	r3, [sp, #8]
 8005966:	9303      	str	r3, [sp, #12]
 8005968:	9304      	str	r3, [sp, #16]
 800596a:	9305      	str	r3, [sp, #20]
 800596c:	9306      	str	r3, [sp, #24]
 800596e:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8005970:	4825      	ldr	r0, [pc, #148]	@ (8005a08 <MX_TIM3_Init+0xb0>)
 8005972:	4a26      	ldr	r2, [pc, #152]	@ (8005a0c <MX_TIM3_Init+0xb4>)
 8005974:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8005976:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005978:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 800597a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800597e:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005980:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005982:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005984:	f7fe f90c 	bl	8003ba0 <HAL_TIM_PWM_Init>
 8005988:	bb58      	cbnz	r0, 80059e2 <MX_TIM3_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800598a:	2300      	movs	r3, #0
 800598c:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800598e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005990:	a908      	add	r1, sp, #32
 8005992:	481d      	ldr	r0, [pc, #116]	@ (8005a08 <MX_TIM3_Init+0xb0>)
 8005994:	f7fe fa88 	bl	8003ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8005998:	bb30      	cbnz	r0, 80059e8 <MX_TIM3_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800599a:	2360      	movs	r3, #96	@ 0x60
 800599c:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800599e:	2200      	movs	r2, #0
 80059a0:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059a2:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059a4:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80059a6:	a901      	add	r1, sp, #4
 80059a8:	4817      	ldr	r0, [pc, #92]	@ (8005a08 <MX_TIM3_Init+0xb0>)
 80059aa:	f7fe f982 	bl	8003cb2 <HAL_TIM_PWM_ConfigChannel>
 80059ae:	b9f0      	cbnz	r0, 80059ee <MX_TIM3_Init+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80059b0:	2204      	movs	r2, #4
 80059b2:	eb0d 0102 	add.w	r1, sp, r2
 80059b6:	4814      	ldr	r0, [pc, #80]	@ (8005a08 <MX_TIM3_Init+0xb0>)
 80059b8:	f7fe f97b 	bl	8003cb2 <HAL_TIM_PWM_ConfigChannel>
 80059bc:	b9d0      	cbnz	r0, 80059f4 <MX_TIM3_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80059be:	2208      	movs	r2, #8
 80059c0:	a901      	add	r1, sp, #4
 80059c2:	4811      	ldr	r0, [pc, #68]	@ (8005a08 <MX_TIM3_Init+0xb0>)
 80059c4:	f7fe f975 	bl	8003cb2 <HAL_TIM_PWM_ConfigChannel>
 80059c8:	b9b8      	cbnz	r0, 80059fa <MX_TIM3_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80059ca:	220c      	movs	r2, #12
 80059cc:	a901      	add	r1, sp, #4
 80059ce:	480e      	ldr	r0, [pc, #56]	@ (8005a08 <MX_TIM3_Init+0xb0>)
 80059d0:	f7fe f96f 	bl	8003cb2 <HAL_TIM_PWM_ConfigChannel>
 80059d4:	b9a0      	cbnz	r0, 8005a00 <MX_TIM3_Init+0xa8>
  HAL_TIM_MspPostInit(&htim3);
 80059d6:	480c      	ldr	r0, [pc, #48]	@ (8005a08 <MX_TIM3_Init+0xb0>)
 80059d8:	f7ff fee2 	bl	80057a0 <HAL_TIM_MspPostInit>
}
 80059dc:	b00b      	add	sp, #44	@ 0x2c
 80059de:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80059e2:	f7fb f911 	bl	8000c08 <Error_Handler>
 80059e6:	e7d0      	b.n	800598a <MX_TIM3_Init+0x32>
    Error_Handler();
 80059e8:	f7fb f90e 	bl	8000c08 <Error_Handler>
 80059ec:	e7d5      	b.n	800599a <MX_TIM3_Init+0x42>
    Error_Handler();
 80059ee:	f7fb f90b 	bl	8000c08 <Error_Handler>
 80059f2:	e7dd      	b.n	80059b0 <MX_TIM3_Init+0x58>
    Error_Handler();
 80059f4:	f7fb f908 	bl	8000c08 <Error_Handler>
 80059f8:	e7e1      	b.n	80059be <MX_TIM3_Init+0x66>
    Error_Handler();
 80059fa:	f7fb f905 	bl	8000c08 <Error_Handler>
 80059fe:	e7e4      	b.n	80059ca <MX_TIM3_Init+0x72>
    Error_Handler();
 8005a00:	f7fb f902 	bl	8000c08 <Error_Handler>
 8005a04:	e7e7      	b.n	80059d6 <MX_TIM3_Init+0x7e>
 8005a06:	bf00      	nop
 8005a08:	20005078 	.word	0x20005078
 8005a0c:	40000400 	.word	0x40000400

08005a10 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a10:	4b06      	ldr	r3, [pc, #24]	@ (8005a2c <prvGetNextExpireTime+0x1c>)
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	6813      	ldr	r3, [r2, #0]
 8005a16:	b92b      	cbnz	r3, 8005a24 <prvGetNextExpireTime+0x14>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a1c:	b923      	cbnz	r3, 8005a28 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a1e:	68d3      	ldr	r3, [r2, #12]
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a24:	2300      	movs	r3, #0
 8005a26:	e7f8      	b.n	8005a1a <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a28:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8005a2a:	4770      	bx	lr
 8005a2c:	20005208 	.word	0x20005208

08005a30 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a30:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a32:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a34:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a36:	4291      	cmp	r1, r2
 8005a38:	d80c      	bhi.n	8005a54 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a3a:	1ad2      	subs	r2, r2, r3
 8005a3c:	6983      	ldr	r3, [r0, #24]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d301      	bcc.n	8005a46 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a42:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8005a44:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a46:	1d01      	adds	r1, r0, #4
 8005a48:	4b09      	ldr	r3, [pc, #36]	@ (8005a70 <prvInsertTimerInActiveList+0x40>)
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	f7fb f897 	bl	8000b7e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005a50:	2000      	movs	r0, #0
 8005a52:	e7f7      	b.n	8005a44 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d201      	bcs.n	8005a5c <prvInsertTimerInActiveList+0x2c>
 8005a58:	4299      	cmp	r1, r3
 8005a5a:	d206      	bcs.n	8005a6a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a5c:	1d01      	adds	r1, r0, #4
 8005a5e:	4b05      	ldr	r3, [pc, #20]	@ (8005a74 <prvInsertTimerInActiveList+0x44>)
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	f7fb f88c 	bl	8000b7e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005a66:	2000      	movs	r0, #0
 8005a68:	e7ec      	b.n	8005a44 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8005a6a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8005a6c:	e7ea      	b.n	8005a44 <prvInsertTimerInActiveList+0x14>
 8005a6e:	bf00      	nop
 8005a70:	20005204 	.word	0x20005204
 8005a74:	20005208 	.word	0x20005208

08005a78 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a78:	b530      	push	{r4, r5, lr}
 8005a7a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a7c:	f7fb f9aa 	bl	8000dd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a80:	4b11      	ldr	r3, [pc, #68]	@ (8005ac8 <prvCheckForValidListAndQueue+0x50>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	b11b      	cbz	r3, 8005a8e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a86:	f7fb f9c7 	bl	8000e18 <vPortExitCritical>
}
 8005a8a:	b003      	add	sp, #12
 8005a8c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8005a8e:	4d0f      	ldr	r5, [pc, #60]	@ (8005acc <prvCheckForValidListAndQueue+0x54>)
 8005a90:	4628      	mov	r0, r5
 8005a92:	f7fb f85b 	bl	8000b4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a96:	4c0e      	ldr	r4, [pc, #56]	@ (8005ad0 <prvCheckForValidListAndQueue+0x58>)
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f7fb f857 	bl	8000b4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad4 <prvCheckForValidListAndQueue+0x5c>)
 8005aa0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad8 <prvCheckForValidListAndQueue+0x60>)
 8005aa4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8005adc <prvCheckForValidListAndQueue+0x64>)
 8005aac:	4a0c      	ldr	r2, [pc, #48]	@ (8005ae0 <prvCheckForValidListAndQueue+0x68>)
 8005aae:	2110      	movs	r1, #16
 8005ab0:	200a      	movs	r0, #10
 8005ab2:	f7fb fbd6 	bl	8001262 <xQueueGenericCreateStatic>
 8005ab6:	4b04      	ldr	r3, [pc, #16]	@ (8005ac8 <prvCheckForValidListAndQueue+0x50>)
 8005ab8:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d0e3      	beq.n	8005a86 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005abe:	4909      	ldr	r1, [pc, #36]	@ (8005ae4 <prvCheckForValidListAndQueue+0x6c>)
 8005ac0:	f7fb fdf4 	bl	80016ac <vQueueAddToRegistry>
 8005ac4:	e7df      	b.n	8005a86 <prvCheckForValidListAndQueue+0xe>
 8005ac6:	bf00      	nop
 8005ac8:	20005200 	.word	0x20005200
 8005acc:	20005220 	.word	0x20005220
 8005ad0:	2000520c 	.word	0x2000520c
 8005ad4:	20005208 	.word	0x20005208
 8005ad8:	20005204 	.word	0x20005204
 8005adc:	20005108 	.word	0x20005108
 8005ae0:	20005158 	.word	0x20005158
 8005ae4:	080082b4 	.word	0x080082b4

08005ae8 <xTimerCreateTimerTask>:
{
 8005ae8:	b510      	push	{r4, lr}
 8005aea:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8005aec:	f7ff ffc4 	bl	8005a78 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005af0:	4b12      	ldr	r3, [pc, #72]	@ (8005b3c <xTimerCreateTimerTask+0x54>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	b1cb      	cbz	r3, 8005b2a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005af6:	2400      	movs	r4, #0
 8005af8:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005afa:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005afc:	aa07      	add	r2, sp, #28
 8005afe:	a906      	add	r1, sp, #24
 8005b00:	a805      	add	r0, sp, #20
 8005b02:	f7fa fdeb 	bl	80006dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b06:	9b05      	ldr	r3, [sp, #20]
 8005b08:	9302      	str	r3, [sp, #8]
 8005b0a:	9b06      	ldr	r3, [sp, #24]
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	2302      	movs	r3, #2
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	4623      	mov	r3, r4
 8005b14:	9a07      	ldr	r2, [sp, #28]
 8005b16:	490a      	ldr	r1, [pc, #40]	@ (8005b40 <xTimerCreateTimerTask+0x58>)
 8005b18:	480a      	ldr	r0, [pc, #40]	@ (8005b44 <xTimerCreateTimerTask+0x5c>)
 8005b1a:	f7ff fa55 	bl	8004fc8 <xTaskCreateStatic>
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b48 <xTimerCreateTimerTask+0x60>)
 8005b20:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8005b22:	b110      	cbz	r0, 8005b2a <xTimerCreateTimerTask+0x42>
}
 8005b24:	2001      	movs	r0, #1
 8005b26:	b008      	add	sp, #32
 8005b28:	bd10      	pop	{r4, pc}
 8005b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8005b3a:	e7fe      	b.n	8005b3a <xTimerCreateTimerTask+0x52>
 8005b3c:	20005200 	.word	0x20005200
 8005b40:	080082bc 	.word	0x080082bc
 8005b44:	08005e4d 	.word	0x08005e4d
 8005b48:	200051fc 	.word	0x200051fc

08005b4c <xTimerGenericCommand>:
	configASSERT( xTimer );
 8005b4c:	b1b8      	cbz	r0, 8005b7e <xTimerGenericCommand+0x32>
 8005b4e:	469c      	mov	ip, r3
 8005b50:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8005b52:	4818      	ldr	r0, [pc, #96]	@ (8005bb4 <xTimerGenericCommand+0x68>)
 8005b54:	6800      	ldr	r0, [r0, #0]
 8005b56:	b358      	cbz	r0, 8005bb0 <xTimerGenericCommand+0x64>
{
 8005b58:	b500      	push	{lr}
 8005b5a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8005b5c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b5e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b60:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b62:	2905      	cmp	r1, #5
 8005b64:	dc1c      	bgt.n	8005ba0 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b66:	f7ff fd41 	bl	80055ec <xTaskGetSchedulerState>
 8005b6a:	2802      	cmp	r0, #2
 8005b6c:	d010      	beq.n	8005b90 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b6e:	2300      	movs	r3, #0
 8005b70:	461a      	mov	r2, r3
 8005b72:	4669      	mov	r1, sp
 8005b74:	480f      	ldr	r0, [pc, #60]	@ (8005bb4 <xTimerGenericCommand+0x68>)
 8005b76:	6800      	ldr	r0, [r0, #0]
 8005b78:	f7fb fbbd 	bl	80012f6 <xQueueGenericSend>
 8005b7c:	e015      	b.n	8005baa <xTimerGenericCommand+0x5e>
 8005b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8005b8e:	e7fe      	b.n	8005b8e <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b90:	2300      	movs	r3, #0
 8005b92:	9a06      	ldr	r2, [sp, #24]
 8005b94:	4669      	mov	r1, sp
 8005b96:	4807      	ldr	r0, [pc, #28]	@ (8005bb4 <xTimerGenericCommand+0x68>)
 8005b98:	6800      	ldr	r0, [r0, #0]
 8005b9a:	f7fb fbac 	bl	80012f6 <xQueueGenericSend>
 8005b9e:	e004      	b.n	8005baa <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	4662      	mov	r2, ip
 8005ba4:	4669      	mov	r1, sp
 8005ba6:	f7fb fc6a 	bl	800147e <xQueueGenericSendFromISR>
}
 8005baa:	b005      	add	sp, #20
 8005bac:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8005bb0:	2000      	movs	r0, #0
}
 8005bb2:	4770      	bx	lr
 8005bb4:	20005200 	.word	0x20005200

08005bb8 <prvSwitchTimerLists>:
{
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8005c2c <prvSwitchTimerLists+0x74>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	b362      	cbz	r2, 8005c1e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc8:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bca:	1d25      	adds	r5, r4, #4
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f7fa ffef 	bl	8000bb0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bd2:	6a23      	ldr	r3, [r4, #32]
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bd8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005bdc:	f013 0f04 	tst.w	r3, #4
 8005be0:	d0ec      	beq.n	8005bbc <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005be2:	69a3      	ldr	r3, [r4, #24]
 8005be4:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8005be6:	429e      	cmp	r6, r3
 8005be8:	d207      	bcs.n	8005bfa <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005bea:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bec:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bee:	4629      	mov	r1, r5
 8005bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8005c2c <prvSwitchTimerLists+0x74>)
 8005bf2:	6818      	ldr	r0, [r3, #0]
 8005bf4:	f7fa ffc3 	bl	8000b7e <vListInsert>
 8005bf8:	e7e0      	b.n	8005bbc <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	9100      	str	r1, [sp, #0]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4632      	mov	r2, r6
 8005c02:	4620      	mov	r0, r4
 8005c04:	f7ff ffa2 	bl	8005b4c <xTimerGenericCommand>
				configASSERT( xResult );
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d1d7      	bne.n	8005bbc <prvSwitchTimerLists+0x4>
 8005c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	e7fe      	b.n	8005c1c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8005c1e:	4a04      	ldr	r2, [pc, #16]	@ (8005c30 <prvSwitchTimerLists+0x78>)
 8005c20:	6810      	ldr	r0, [r2, #0]
 8005c22:	4902      	ldr	r1, [pc, #8]	@ (8005c2c <prvSwitchTimerLists+0x74>)
 8005c24:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8005c26:	6013      	str	r3, [r2, #0]
}
 8005c28:	b002      	add	sp, #8
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	20005208 	.word	0x20005208
 8005c30:	20005204 	.word	0x20005204

08005c34 <prvSampleTimeNow>:
{
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8005c38:	f7ff fa88 	bl	800514c <xTaskGetTickCount>
 8005c3c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8005c3e:	4b07      	ldr	r3, [pc, #28]	@ (8005c5c <prvSampleTimeNow+0x28>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4283      	cmp	r3, r0
 8005c44:	d805      	bhi.n	8005c52 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8005c4a:	4b04      	ldr	r3, [pc, #16]	@ (8005c5c <prvSampleTimeNow+0x28>)
 8005c4c:	601c      	str	r4, [r3, #0]
}
 8005c4e:	4620      	mov	r0, r4
 8005c50:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8005c52:	f7ff ffb1 	bl	8005bb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c56:	2301      	movs	r3, #1
 8005c58:	602b      	str	r3, [r5, #0]
 8005c5a:	e7f6      	b.n	8005c4a <prvSampleTimeNow+0x16>
 8005c5c:	200051f8 	.word	0x200051f8

08005c60 <prvProcessExpiredTimer>:
{
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	4606      	mov	r6, r0
 8005c66:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c68:	4917      	ldr	r1, [pc, #92]	@ (8005cc8 <prvProcessExpiredTimer+0x68>)
 8005c6a:	6809      	ldr	r1, [r1, #0]
 8005c6c:	68c9      	ldr	r1, [r1, #12]
 8005c6e:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c70:	1d20      	adds	r0, r4, #4
 8005c72:	f7fa ff9d 	bl	8000bb0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c76:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8005c7a:	f01c 0f04 	tst.w	ip, #4
 8005c7e:	d108      	bne.n	8005c92 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c80:	f02c 0c01 	bic.w	ip, ip, #1
 8005c84:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c88:	6a23      	ldr	r3, [r4, #32]
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	4798      	blx	r3
}
 8005c8e:	b002      	add	sp, #8
 8005c90:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c92:	69a1      	ldr	r1, [r4, #24]
 8005c94:	4633      	mov	r3, r6
 8005c96:	462a      	mov	r2, r5
 8005c98:	4431      	add	r1, r6
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f7ff fec8 	bl	8005a30 <prvInsertTimerInActiveList>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d0f1      	beq.n	8005c88 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	9100      	str	r1, [sp, #0]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4632      	mov	r2, r6
 8005cac:	4620      	mov	r0, r4
 8005cae:	f7ff ff4d 	bl	8005b4c <xTimerGenericCommand>
			configASSERT( xResult );
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d1e8      	bne.n	8005c88 <prvProcessExpiredTimer+0x28>
 8005cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	e7fe      	b.n	8005cc6 <prvProcessExpiredTimer+0x66>
 8005cc8:	20005208 	.word	0x20005208

08005ccc <prvProcessTimerOrBlockTask>:
{
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	4606      	mov	r6, r0
 8005cd2:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8005cd4:	f7ff fa32 	bl	800513c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cd8:	a801      	add	r0, sp, #4
 8005cda:	f7ff ffab 	bl	8005c34 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8005cde:	9b01      	ldr	r3, [sp, #4]
 8005ce0:	bb33      	cbnz	r3, 8005d30 <prvProcessTimerOrBlockTask+0x64>
 8005ce2:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ce4:	b9e4      	cbnz	r4, 8005d20 <prvProcessTimerOrBlockTask+0x54>
 8005ce6:	42b0      	cmp	r0, r6
 8005ce8:	d213      	bcs.n	8005d12 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005cea:	4622      	mov	r2, r4
 8005cec:	1b71      	subs	r1, r6, r5
 8005cee:	4b12      	ldr	r3, [pc, #72]	@ (8005d38 <prvProcessTimerOrBlockTask+0x6c>)
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	f7fb fcef 	bl	80016d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cf6:	f7ff fabb 	bl	8005270 <xTaskResumeAll>
 8005cfa:	b9d8      	cbnz	r0, 8005d34 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8005cfc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005d00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d04:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	e010      	b.n	8005d34 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8005d12:	f7ff faad 	bl	8005270 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d16:	4629      	mov	r1, r5
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f7ff ffa1 	bl	8005c60 <prvProcessExpiredTimer>
 8005d1e:	e009      	b.n	8005d34 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d20:	4a06      	ldr	r2, [pc, #24]	@ (8005d3c <prvProcessTimerOrBlockTask+0x70>)
 8005d22:	6812      	ldr	r2, [r2, #0]
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	b90a      	cbnz	r2, 8005d2c <prvProcessTimerOrBlockTask+0x60>
 8005d28:	2401      	movs	r4, #1
 8005d2a:	e7de      	b.n	8005cea <prvProcessTimerOrBlockTask+0x1e>
 8005d2c:	461c      	mov	r4, r3
 8005d2e:	e7dc      	b.n	8005cea <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8005d30:	f7ff fa9e 	bl	8005270 <xTaskResumeAll>
}
 8005d34:	b002      	add	sp, #8
 8005d36:	bd70      	pop	{r4, r5, r6, pc}
 8005d38:	20005200 	.word	0x20005200
 8005d3c:	20005204 	.word	0x20005204

08005d40 <prvProcessReceivedCommands>:
{
 8005d40:	b510      	push	{r4, lr}
 8005d42:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d44:	e002      	b.n	8005d4c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d46:	9b04      	ldr	r3, [sp, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	da0f      	bge.n	8005d6c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	a904      	add	r1, sp, #16
 8005d50:	4b3d      	ldr	r3, [pc, #244]	@ (8005e48 <prvProcessReceivedCommands+0x108>)
 8005d52:	6818      	ldr	r0, [r3, #0]
 8005d54:	f7fb fbfa 	bl	800154c <xQueueReceive>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d072      	beq.n	8005e42 <prvProcessReceivedCommands+0x102>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d5c:	9b04      	ldr	r3, [sp, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	daf1      	bge.n	8005d46 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d62:	9907      	ldr	r1, [sp, #28]
 8005d64:	9806      	ldr	r0, [sp, #24]
 8005d66:	9b05      	ldr	r3, [sp, #20]
 8005d68:	4798      	blx	r3
 8005d6a:	e7ec      	b.n	8005d46 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d6c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d6e:	6963      	ldr	r3, [r4, #20]
 8005d70:	b113      	cbz	r3, 8005d78 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d72:	1d20      	adds	r0, r4, #4
 8005d74:	f7fa ff1c 	bl	8000bb0 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d78:	a803      	add	r0, sp, #12
 8005d7a:	f7ff ff5b 	bl	8005c34 <prvSampleTimeNow>
 8005d7e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8005d80:	9b04      	ldr	r3, [sp, #16]
 8005d82:	2b09      	cmp	r3, #9
 8005d84:	d8e2      	bhi.n	8005d4c <prvProcessReceivedCommands+0xc>
 8005d86:	e8df f003 	tbb	[pc, r3]
 8005d8a:	0505      	.short	0x0505
 8005d8c:	4e362f05 	.word	0x4e362f05
 8005d90:	362f0505 	.word	0x362f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d94:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005d98:	f043 0301 	orr.w	r3, r3, #1
 8005d9c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005da0:	9b05      	ldr	r3, [sp, #20]
 8005da2:	69a1      	ldr	r1, [r4, #24]
 8005da4:	4419      	add	r1, r3
 8005da6:	4620      	mov	r0, r4
 8005da8:	f7ff fe42 	bl	8005a30 <prvInsertTimerInActiveList>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d0cd      	beq.n	8005d4c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005db0:	6a23      	ldr	r3, [r4, #32]
 8005db2:	4620      	mov	r0, r4
 8005db4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005db6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005dba:	f013 0f04 	tst.w	r3, #4
 8005dbe:	d0c5      	beq.n	8005d4c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005dc0:	69a2      	ldr	r2, [r4, #24]
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	9100      	str	r1, [sp, #0]
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	9805      	ldr	r0, [sp, #20]
 8005dca:	4402      	add	r2, r0
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f7ff febd 	bl	8005b4c <xTimerGenericCommand>
							configASSERT( xResult );
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d1ba      	bne.n	8005d4c <prvProcessReceivedCommands+0xc>
 8005dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	e7fe      	b.n	8005de6 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005de8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8005df4:	e7aa      	b.n	8005d4c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005df6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005dfa:	f043 0301 	orr.w	r3, r3, #1
 8005dfe:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e02:	9905      	ldr	r1, [sp, #20]
 8005e04:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e06:	b129      	cbz	r1, 8005e14 <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e08:	4603      	mov	r3, r0
 8005e0a:	4401      	add	r1, r0
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f7ff fe0f 	bl	8005a30 <prvInsertTimerInActiveList>
					break;
 8005e12:	e79b      	b.n	8005d4c <prvProcessReceivedCommands+0xc>
 8005e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e24:	e7fe      	b.n	8005e24 <prvProcessReceivedCommands+0xe4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e26:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005e2a:	f013 0f02 	tst.w	r3, #2
 8005e2e:	d004      	beq.n	8005e3a <prvProcessReceivedCommands+0xfa>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e30:	f023 0301 	bic.w	r3, r3, #1
 8005e34:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8005e38:	e788      	b.n	8005d4c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f7fa fe48 	bl	8000ad0 <vPortFree>
 8005e40:	e784      	b.n	8005d4c <prvProcessReceivedCommands+0xc>
}
 8005e42:	b008      	add	sp, #32
 8005e44:	bd10      	pop	{r4, pc}
 8005e46:	bf00      	nop
 8005e48:	20005200 	.word	0x20005200

08005e4c <prvTimerTask>:
{
 8005e4c:	b500      	push	{lr}
 8005e4e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e50:	a801      	add	r0, sp, #4
 8005e52:	f7ff fddd 	bl	8005a10 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e56:	9901      	ldr	r1, [sp, #4]
 8005e58:	f7ff ff38 	bl	8005ccc <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8005e5c:	f7ff ff70 	bl	8005d40 <prvProcessReceivedCommands>
	for( ;; )
 8005e60:	e7f6      	b.n	8005e50 <prvTimerTask+0x4>

08005e62 <set_filtering>:

trigger_s *trigger = NULL;

void set_filtering(trigger_s *trigger)
{
  switch (trigger->settings.filtering)
 8005e62:	7903      	ldrb	r3, [r0, #4]
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d813      	bhi.n	8005e90 <set_filtering+0x2e>
 8005e68:	e8df f003 	tbb	[pc, r3]
 8005e6c:	0c090502 	.word	0x0c090502
  {
    case TF_FILTERING_NONE:
      trigger->_trigger_filter_time_us = 0;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60c3      	str	r3, [r0, #12]
        break;
 8005e74:	4770      	bx	lr
    case TF_FILTERING_LITE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 4U; 
 8005e76:	69c3      	ldr	r3, [r0, #28]
 8005e78:	089b      	lsrs	r3, r3, #2
 8005e7a:	60c3      	str	r3, [r0, #12]
        break;
 8005e7c:	4770      	bx	lr
    case TF_FILTERING_MEDIUM:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 1U;
 8005e7e:	69c3      	ldr	r3, [r0, #28]
 8005e80:	60c3      	str	r3, [r0, #12]
        break;
 8005e82:	4770      	bx	lr
    case TF_FILTERING_AGGRESSIVE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us * 3 / 4;
 8005e84:	69c3      	ldr	r3, [r0, #28]
 8005e86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005e8a:	089b      	lsrs	r3, r3, #2
 8005e8c:	60c3      	str	r3, [r0, #12]
        break;
 8005e8e:	4770      	bx	lr
    default:
        // Handle invalid filtering level
        trigger->_trigger_filter_time_us = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60c3      	str	r3, [r0, #12]
        break;
  }
}
 8005e94:	4770      	bx	lr
	...

08005e98 <trigger_tooth_handle>:
  trigger->initialized = temp_status;
    
}

void trigger_tooth_handle()
{
 8005e98:	b538      	push	{r3, r4, r5, lr}

  if (!trigger->initialized)
 8005e9a:	4b51      	ldr	r3, [pc, #324]	@ (8005fe0 <trigger_tooth_handle+0x148>)
 8005e9c:	681c      	ldr	r4, [r3, #0]
 8005e9e:	7825      	ldrb	r5, [r4, #0]
 8005ea0:	b905      	cbnz	r5, 8005ea4 <trigger_tooth_handle+0xc>
    set_filtering(trigger); 
  }
  
  trigger->_tooth_time_us[2] = trigger->_tooth_time_us[1];
  trigger->_tooth_time_us[1] = trigger->_tooth_time_us[0];
}
 8005ea2:	bd38      	pop	{r3, r4, r5, pc}
  trigger->_tooth_time_us[0] = get_time_us();
 8005ea4:	f7fa fc3c 	bl	8000720 <get_time_us>
 8005ea8:	6120      	str	r0, [r4, #16]
  trigger->_current_tooth_gap_us = trigger->_tooth_time_us[0] - trigger->_tooth_time_us[1];
 8005eaa:	4b4d      	ldr	r3, [pc, #308]	@ (8005fe0 <trigger_tooth_handle+0x148>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	6958      	ldr	r0, [r3, #20]
 8005eb2:	1a12      	subs	r2, r2, r0
 8005eb4:	61da      	str	r2, [r3, #28]
  if (trigger->_current_tooth_gap_us < trigger->_trigger_filter_time_us) // Pulses should never be less than _trigger_filter_time_us, so if they are it means a false trigger. (A 36-1 wheel at 8000rpm will have triggers approx. every 200uS)
 8005eb6:	68d9      	ldr	r1, [r3, #12]
 8005eb8:	428a      	cmp	r2, r1
 8005eba:	d3f2      	bcc.n	8005ea2 <trigger_tooth_handle+0xa>
  trigger->_counted_tooth++; //Increment the tooth counter
 8005ebc:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 8005ebe:	3101      	adds	r1, #1
 8005ec0:	b289      	uxth	r1, r1
 8005ec2:	8519      	strh	r1, [r3, #40]	@ 0x28
  previous_tooth_gap = trigger->_tooth_time_us[1] - trigger->_tooth_time_us[2];
 8005ec4:	699c      	ldr	r4, [r3, #24]
 8005ec6:	1b00      	subs	r0, r0, r4
  if (previous_tooth_gap < trigger->_current_tooth_gap_us) 
 8005ec8:	4282      	cmp	r2, r0
 8005eca:	d956      	bls.n	8005f7a <trigger_tooth_handle+0xe2>
    trigger->_shorter_tooth_gap = previous_tooth_gap;
 8005ecc:	6218      	str	r0, [r3, #32]
  if(trigger->settings.missing_teeth == 1)
 8005ece:	7998      	ldrb	r0, [r3, #6]
 8005ed0:	2801      	cmp	r0, #1
 8005ed2:	d054      	beq.n	8005f7e <trigger_tooth_handle+0xe6>
    trigger->_target_tooth_gap_us = trigger->_shorter_tooth_gap * trigger->settings.missing_teeth;
 8005ed4:	6a1c      	ldr	r4, [r3, #32]
 8005ed6:	fb00 f404 	mul.w	r4, r0, r4
 8005eda:	625c      	str	r4, [r3, #36]	@ 0x24
  if ((trigger->_current_tooth_gap_us > trigger->_target_tooth_gap_us) || (trigger->_counted_tooth > trigger->_trigger_actual_teeth))
 8005edc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005ede:	4282      	cmp	r2, r0
 8005ee0:	d803      	bhi.n	8005eea <trigger_tooth_handle+0x52>
 8005ee2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8005ee6:	4291      	cmp	r1, r2
 8005ee8:	d95a      	bls.n	8005fa0 <trigger_tooth_handle+0x108>
    if (trigger->_counted_tooth < trigger->_trigger_actual_teeth)
 8005eea:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8005eee:	4291      	cmp	r1, r2
 8005ef0:	d24b      	bcs.n	8005f8a <trigger_tooth_handle+0xf2>
      trigger->sync_status = TS_NOT_SYNCED;
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	705a      	strb	r2, [r3, #1]
      trigger->sync_loss_counter++;
 8005ef6:	493a      	ldr	r1, [pc, #232]	@ (8005fe0 <trigger_tooth_handle+0x148>)
 8005ef8:	6808      	ldr	r0, [r1, #0]
 8005efa:	8843      	ldrh	r3, [r0, #2]
 8005efc:	3301      	adds	r3, #1
 8005efe:	8043      	strh	r3, [r0, #2]
      engine.total_revolutions = 0;
 8005f00:	4b38      	ldr	r3, [pc, #224]	@ (8005fe4 <trigger_tooth_handle+0x14c>)
 8005f02:	601a      	str	r2, [r3, #0]
      engine.rpm = 0;
 8005f04:	2000      	movs	r0, #0
 8005f06:	60d8      	str	r0, [r3, #12]
      trigger->_counted_tooth = 0;
 8005f08:	680b      	ldr	r3, [r1, #0]
 8005f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
  engine.crankshaft_angle = 360.0f / (angle_t)trigger->settings.full_teeth * (angle_t)trigger->_counted_tooth;
 8005f0c:	4b34      	ldr	r3, [pc, #208]	@ (8005fe0 <trigger_tooth_handle+0x148>)
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	7943      	ldrb	r3, [r0, #5]
 8005f12:	ee07 3a10 	vmov	s14, r3
 8005f16:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005f1a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8005fe8 <trigger_tooth_handle+0x150>
 8005f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f22:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 8005f24:	ee07 3a10 	vmov	s14, r3
 8005f28:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f30:	4a2c      	ldr	r2, [pc, #176]	@ (8005fe4 <trigger_tooth_handle+0x14c>)
 8005f32:	edc2 7a01 	vstr	s15, [r2, #4]
  engine.rpm = (rpm_t)(CONVERSION_FACTOR_SECONDS_TO_MICROSECONDS * CONVERSION_FACTOR_MINUTES_TO_SECONDS / trigger->_shorter_tooth_gap / trigger->settings.full_teeth);
 8005f36:	6a01      	ldr	r1, [r0, #32]
 8005f38:	4b2c      	ldr	r3, [pc, #176]	@ (8005fec <trigger_tooth_handle+0x154>)
 8005f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f3e:	7941      	ldrb	r1, [r0, #5]
 8005f40:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f44:	ee07 3a90 	vmov	s15, r3
 8005f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4c:	edc2 7a03 	vstr	s15, [r2, #12]
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= trigger->cranking_rpm_threshold)
 8005f50:	7843      	ldrb	r3, [r0, #1]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d026      	beq.n	8005fa4 <trigger_tooth_handle+0x10c>
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < trigger->cranking_rpm_threshold)
 8005f56:	7843      	ldrb	r3, [r0, #1]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d02e      	beq.n	8005fba <trigger_tooth_handle+0x122>
  if (trigger->sync_status == TS_NOT_SYNCED)
 8005f5c:	7843      	ldrb	r3, [r0, #1]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d136      	bne.n	8005fd0 <trigger_tooth_handle+0x138>
    engine.spinning_state = SS_SPINNING_UP;
 8005f62:	4b20      	ldr	r3, [pc, #128]	@ (8005fe4 <trigger_tooth_handle+0x14c>)
 8005f64:	2201      	movs	r2, #1
 8005f66:	745a      	strb	r2, [r3, #17]
  if(is_missing_teeth == false)
 8005f68:	2d00      	cmp	r5, #0
 8005f6a:	d035      	beq.n	8005fd8 <trigger_tooth_handle+0x140>
  trigger->_tooth_time_us[2] = trigger->_tooth_time_us[1];
 8005f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8005fe0 <trigger_tooth_handle+0x148>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695a      	ldr	r2, [r3, #20]
 8005f72:	619a      	str	r2, [r3, #24]
  trigger->_tooth_time_us[1] = trigger->_tooth_time_us[0];
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	615a      	str	r2, [r3, #20]
 8005f78:	e793      	b.n	8005ea2 <trigger_tooth_handle+0xa>
    trigger->_shorter_tooth_gap = trigger->_current_tooth_gap_us;
 8005f7a:	621a      	str	r2, [r3, #32]
 8005f7c:	e7a7      	b.n	8005ece <trigger_tooth_handle+0x36>
    trigger->_target_tooth_gap_us = (3 * trigger->_shorter_tooth_gap) >> 1; 
 8005f7e:	6a18      	ldr	r0, [r3, #32]
 8005f80:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005f84:	0840      	lsrs	r0, r0, #1
 8005f86:	6258      	str	r0, [r3, #36]	@ 0x24
 8005f88:	e7a8      	b.n	8005edc <trigger_tooth_handle+0x44>
      trigger->sync_status = TS_FULLY_SYNCED;
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	705a      	strb	r2, [r3, #1]
      engine.total_revolutions++;
 8005f8e:	4a15      	ldr	r2, [pc, #84]	@ (8005fe4 <trigger_tooth_handle+0x14c>)
 8005f90:	6813      	ldr	r3, [r2, #0]
 8005f92:	3301      	adds	r3, #1
 8005f94:	6013      	str	r3, [r2, #0]
      trigger->_counted_tooth = 0;
 8005f96:	4b12      	ldr	r3, [pc, #72]	@ (8005fe0 <trigger_tooth_handle+0x148>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f9e:	e7b5      	b.n	8005f0c <trigger_tooth_handle+0x74>
  bool is_missing_teeth = false;
 8005fa0:	2500      	movs	r5, #0
 8005fa2:	e7b3      	b.n	8005f0c <trigger_tooth_handle+0x74>
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= trigger->cranking_rpm_threshold)
 8005fa4:	ed90 7a02 	vldr	s14, [r0, #8]
 8005fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb0:	dbd1      	blt.n	8005f56 <trigger_tooth_handle+0xbe>
    engine.spinning_state = SS_RUNNING;
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	2203      	movs	r2, #3
 8005fb6:	745a      	strb	r2, [r3, #17]
 8005fb8:	e7cd      	b.n	8005f56 <trigger_tooth_handle+0xbe>
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < trigger->cranking_rpm_threshold)
 8005fba:	ed90 7a02 	vldr	s14, [r0, #8]
 8005fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc6:	d5c9      	bpl.n	8005f5c <trigger_tooth_handle+0xc4>
    engine.spinning_state = SS_CRANKING;
 8005fc8:	4b06      	ldr	r3, [pc, #24]	@ (8005fe4 <trigger_tooth_handle+0x14c>)
 8005fca:	2202      	movs	r2, #2
 8005fcc:	745a      	strb	r2, [r3, #17]
 8005fce:	e7c5      	b.n	8005f5c <trigger_tooth_handle+0xc4>
    engine.spinning_state = SS_STOPPED;
 8005fd0:	4b04      	ldr	r3, [pc, #16]	@ (8005fe4 <trigger_tooth_handle+0x14c>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	745a      	strb	r2, [r3, #17]
 8005fd6:	e7c7      	b.n	8005f68 <trigger_tooth_handle+0xd0>
    set_filtering(trigger); 
 8005fd8:	f7ff ff43 	bl	8005e62 <set_filtering>
 8005fdc:	e7c6      	b.n	8005f6c <trigger_tooth_handle+0xd4>
 8005fde:	bf00      	nop
 8005fe0:	20005234 	.word	0x20005234
 8005fe4:	20004a54 	.word	0x20004a54
 8005fe8:	43b40000 	.word	0x43b40000
 8005fec:	03938700 	.word	0x03938700

08005ff0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005ff0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	490f      	ldr	r1, [pc, #60]	@ (8006034 <MX_USB_DEVICE_Init+0x44>)
 8005ff6:	4810      	ldr	r0, [pc, #64]	@ (8006038 <MX_USB_DEVICE_Init+0x48>)
 8005ff8:	f000 fc32 	bl	8006860 <USBD_Init>
 8005ffc:	b970      	cbnz	r0, 800601c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005ffe:	490f      	ldr	r1, [pc, #60]	@ (800603c <MX_USB_DEVICE_Init+0x4c>)
 8006000:	480d      	ldr	r0, [pc, #52]	@ (8006038 <MX_USB_DEVICE_Init+0x48>)
 8006002:	f000 fc44 	bl	800688e <USBD_RegisterClass>
 8006006:	b960      	cbnz	r0, 8006022 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006008:	490d      	ldr	r1, [pc, #52]	@ (8006040 <MX_USB_DEVICE_Init+0x50>)
 800600a:	480b      	ldr	r0, [pc, #44]	@ (8006038 <MX_USB_DEVICE_Init+0x48>)
 800600c:	f000 fa39 	bl	8006482 <USBD_CDC_RegisterInterface>
 8006010:	b950      	cbnz	r0, 8006028 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006012:	4809      	ldr	r0, [pc, #36]	@ (8006038 <MX_USB_DEVICE_Init+0x48>)
 8006014:	f000 fc5b 	bl	80068ce <USBD_Start>
 8006018:	b948      	cbnz	r0, 800602e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800601a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800601c:	f7fa fdf4 	bl	8000c08 <Error_Handler>
 8006020:	e7ed      	b.n	8005ffe <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8006022:	f7fa fdf1 	bl	8000c08 <Error_Handler>
 8006026:	e7ef      	b.n	8006008 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8006028:	f7fa fdee 	bl	8000c08 <Error_Handler>
 800602c:	e7f1      	b.n	8006012 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800602e:	f7fa fdeb 	bl	8000c08 <Error_Handler>
}
 8006032:	e7f2      	b.n	800601a <MX_USB_DEVICE_Init+0x2a>
 8006034:	200000e0 	.word	0x200000e0
 8006038:	20005238 	.word	0x20005238
 800603c:	20000054 	.word	0x20000054
 8006040:	20000098 	.word	0x20000098

08006044 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006044:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006046:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800604a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800604e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 8006052:	b18c      	cbz	r4, 8006078 <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006054:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8006058:	6843      	ldr	r3, [r0, #4]
 800605a:	b17b      	cbz	r3, 800607c <USBD_CDC_EP0_RxReady+0x38>
 800605c:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8006060:	28ff      	cmp	r0, #255	@ 0xff
 8006062:	d00d      	beq.n	8006080 <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800606a:	4621      	mov	r1, r4
 800606c:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800606e:	23ff      	movs	r3, #255	@ 0xff
 8006070:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006074:	2000      	movs	r0, #0
}
 8006076:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8006078:	2003      	movs	r0, #3
 800607a:	e7fc      	b.n	8006076 <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 800607c:	2000      	movs	r0, #0
 800607e:	e7fa      	b.n	8006076 <USBD_CDC_EP0_RxReady+0x32>
 8006080:	2000      	movs	r0, #0
 8006082:	e7f8      	b.n	8006076 <USBD_CDC_EP0_RxReady+0x32>

08006084 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006084:	230a      	movs	r3, #10
 8006086:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8006088:	4800      	ldr	r0, [pc, #0]	@ (800608c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800608a:	4770      	bx	lr
 800608c:	2000008c 	.word	0x2000008c

08006090 <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006094:	4f0f      	ldr	r7, [pc, #60]	@ (80060d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8006096:	2182      	movs	r1, #130	@ 0x82
 8006098:	4638      	mov	r0, r7
 800609a:	f000 fdcb 	bl	8006c34 <USBD_GetEpDesc>
 800609e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060a0:	2101      	movs	r1, #1
 80060a2:	4638      	mov	r0, r7
 80060a4:	f000 fdc6 	bl	8006c34 <USBD_GetEpDesc>
 80060a8:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060aa:	2181      	movs	r1, #129	@ 0x81
 80060ac:	4638      	mov	r0, r7
 80060ae:	f000 fdc1 	bl	8006c34 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80060b2:	b10d      	cbz	r5, 80060b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80060b4:	2210      	movs	r2, #16
 80060b6:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80060b8:	b11c      	cbz	r4, 80060c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060ba:	2240      	movs	r2, #64	@ 0x40
 80060bc:	7122      	strb	r2, [r4, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80060c2:	b118      	cbz	r0, 80060cc <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060c4:	2240      	movs	r2, #64	@ 0x40
 80060c6:	7102      	strb	r2, [r0, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060cc:	2343      	movs	r3, #67	@ 0x43
 80060ce:	8033      	strh	r3, [r6, #0]
}
 80060d0:	4800      	ldr	r0, [pc, #0]	@ (80060d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80060d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060d4:	20000010 	.word	0x20000010

080060d8 <USBD_CDC_GetFSCfgDesc>:
{
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80060dc:	4f0f      	ldr	r7, [pc, #60]	@ (800611c <USBD_CDC_GetFSCfgDesc+0x44>)
 80060de:	2182      	movs	r1, #130	@ 0x82
 80060e0:	4638      	mov	r0, r7
 80060e2:	f000 fda7 	bl	8006c34 <USBD_GetEpDesc>
 80060e6:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060e8:	2101      	movs	r1, #1
 80060ea:	4638      	mov	r0, r7
 80060ec:	f000 fda2 	bl	8006c34 <USBD_GetEpDesc>
 80060f0:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060f2:	2181      	movs	r1, #129	@ 0x81
 80060f4:	4638      	mov	r0, r7
 80060f6:	f000 fd9d 	bl	8006c34 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80060fa:	b10d      	cbz	r5, 8006100 <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80060fc:	2210      	movs	r2, #16
 80060fe:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8006100:	b11c      	cbz	r4, 800610a <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006102:	2240      	movs	r2, #64	@ 0x40
 8006104:	7122      	strb	r2, [r4, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800610a:	b118      	cbz	r0, 8006114 <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800610c:	2240      	movs	r2, #64	@ 0x40
 800610e:	7102      	strb	r2, [r0, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006114:	2343      	movs	r3, #67	@ 0x43
 8006116:	8033      	strh	r3, [r6, #0]
}
 8006118:	4800      	ldr	r0, [pc, #0]	@ (800611c <USBD_CDC_GetFSCfgDesc+0x44>)
 800611a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800611c:	20000010 	.word	0x20000010

08006120 <USBD_CDC_GetHSCfgDesc>:
{
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006124:	4f0f      	ldr	r7, [pc, #60]	@ (8006164 <USBD_CDC_GetHSCfgDesc+0x44>)
 8006126:	2182      	movs	r1, #130	@ 0x82
 8006128:	4638      	mov	r0, r7
 800612a:	f000 fd83 	bl	8006c34 <USBD_GetEpDesc>
 800612e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006130:	2101      	movs	r1, #1
 8006132:	4638      	mov	r0, r7
 8006134:	f000 fd7e 	bl	8006c34 <USBD_GetEpDesc>
 8006138:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800613a:	2181      	movs	r1, #129	@ 0x81
 800613c:	4638      	mov	r0, r7
 800613e:	f000 fd79 	bl	8006c34 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8006142:	b10d      	cbz	r5, 8006148 <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006144:	2210      	movs	r2, #16
 8006146:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8006148:	b11c      	cbz	r4, 8006152 <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800614a:	2200      	movs	r2, #0
 800614c:	7122      	strb	r2, [r4, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8006152:	b118      	cbz	r0, 800615c <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006154:	2200      	movs	r2, #0
 8006156:	7102      	strb	r2, [r0, #4]
 8006158:	2202      	movs	r2, #2
 800615a:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800615c:	2343      	movs	r3, #67	@ 0x43
 800615e:	8033      	strh	r3, [r6, #0]
}
 8006160:	4800      	ldr	r0, [pc, #0]	@ (8006164 <USBD_CDC_GetHSCfgDesc+0x44>)
 8006162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006164:	20000010 	.word	0x20000010

08006168 <USBD_CDC_DataOut>:
{
 8006168:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800616a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800616e:	33b0      	adds	r3, #176	@ 0xb0
 8006170:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006174:	b195      	cbz	r5, 800619c <USBD_CDC_DataOut+0x34>
 8006176:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006178:	f000 fb1a 	bl	80067b0 <USBD_LL_GetRxDataSize>
 800617c:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006180:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8006184:	33b0      	adds	r3, #176	@ 0xb0
 8006186:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800618a:	6863      	ldr	r3, [r4, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8006192:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8006196:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8006198:	2000      	movs	r0, #0
}
 800619a:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800619c:	2003      	movs	r0, #3
 800619e:	e7fc      	b.n	800619a <USBD_CDC_DataOut+0x32>

080061a0 <USBD_CDC_DataIn>:
{
 80061a0:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80061a2:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061a6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80061aa:	33b0      	adds	r3, #176	@ 0xb0
 80061ac:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80061b0:	b384      	cbz	r4, 8006214 <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80061b2:	f001 030f 	and.w	r3, r1, #15
 80061b6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80061ba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80061be:	6992      	ldr	r2, [r2, #24]
 80061c0:	b14a      	cbz	r2, 80061d6 <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80061c2:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 80061c6:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 80061ca:	69ed      	ldr	r5, [r5, #28]
 80061cc:	fbb2 fcf5 	udiv	ip, r2, r5
 80061d0:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80061d4:	b192      	cbz	r2, 80061fc <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80061dc:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80061e0:	33b0      	adds	r3, #176	@ 0xb0
 80061e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80061e6:	6843      	ldr	r3, [r0, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	b1ab      	cbz	r3, 8006218 <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80061ec:	460a      	mov	r2, r1
 80061ee:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 80061f2:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 80061f6:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80061f8:	2000      	movs	r0, #0
}
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80061fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006200:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006204:	2400      	movs	r4, #0
 8006206:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006208:	4623      	mov	r3, r4
 800620a:	4622      	mov	r2, r4
 800620c:	f000 fb18 	bl	8006840 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8006210:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006212:	e7f2      	b.n	80061fa <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 8006214:	2003      	movs	r0, #3
 8006216:	e7f0      	b.n	80061fa <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 8006218:	2000      	movs	r0, #0
 800621a:	e7ee      	b.n	80061fa <USBD_CDC_DataIn+0x5a>

0800621c <USBD_CDC_Setup>:
{
 800621c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800621e:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006220:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006224:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8006228:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 800622c:	2200      	movs	r2, #0
 800622e:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 8006232:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 8006236:	2f00      	cmp	r7, #0
 8006238:	d078      	beq.n	800632c <USBD_CDC_Setup+0x110>
 800623a:	4604      	mov	r4, r0
 800623c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800623e:	7809      	ldrb	r1, [r1, #0]
 8006240:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 8006244:	d034      	beq.n	80062b0 <USBD_CDC_Setup+0x94>
 8006246:	2e20      	cmp	r6, #32
 8006248:	d169      	bne.n	800631e <USBD_CDC_Setup+0x102>
      if (req->wLength != 0U)
 800624a:	88ea      	ldrh	r2, [r5, #6]
 800624c:	b32a      	cbz	r2, 800629a <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 800624e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8006252:	d10e      	bne.n	8006272 <USBD_CDC_Setup+0x56>
          hcdc->CmdOpCode = req->bRequest;
 8006254:	786b      	ldrb	r3, [r5, #1]
 8006256:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800625a:	88ea      	ldrh	r2, [r5, #6]
 800625c:	2a3f      	cmp	r2, #63	@ 0x3f
 800625e:	d81a      	bhi.n	8006296 <USBD_CDC_Setup+0x7a>
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006266:	4639      	mov	r1, r7
 8006268:	4620      	mov	r0, r4
 800626a:	f001 f94c 	bl	8007506 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800626e:	2600      	movs	r6, #0
 8006270:	e059      	b.n	8006326 <USBD_CDC_Setup+0x10a>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006272:	33b0      	adds	r3, #176	@ 0xb0
 8006274:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4639      	mov	r1, r7
 800627e:	7868      	ldrb	r0, [r5, #1]
 8006280:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006282:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006284:	2a07      	cmp	r2, #7
 8006286:	bf28      	it	cs
 8006288:	2207      	movcs	r2, #7
 800628a:	4639      	mov	r1, r7
 800628c:	4620      	mov	r0, r4
 800628e:	f001 f925 	bl	80074dc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006292:	2600      	movs	r6, #0
 8006294:	e047      	b.n	8006326 <USBD_CDC_Setup+0x10a>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006296:	2240      	movs	r2, #64	@ 0x40
 8006298:	e7e3      	b.n	8006262 <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800629a:	33b0      	adds	r3, #176	@ 0xb0
 800629c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	2200      	movs	r2, #0
 80062a6:	4629      	mov	r1, r5
 80062a8:	7868      	ldrb	r0, [r5, #1]
 80062aa:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 80062ac:	2600      	movs	r6, #0
 80062ae:	e03a      	b.n	8006326 <USBD_CDC_Setup+0x10a>
      switch (req->bRequest)
 80062b0:	786f      	ldrb	r7, [r5, #1]
 80062b2:	2f0b      	cmp	r7, #11
 80062b4:	d82e      	bhi.n	8006314 <USBD_CDC_Setup+0xf8>
 80062b6:	e8df f007 	tbb	[pc, r7]
 80062ba:	3606      	.short	0x3606
 80062bc:	2d2d2d2d 	.word	0x2d2d2d2d
 80062c0:	2d2d2d2d 	.word	0x2d2d2d2d
 80062c4:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d004      	beq.n	80062d8 <USBD_CDC_Setup+0xbc>
            USBD_CtlError(pdev, req);
 80062ce:	4629      	mov	r1, r5
 80062d0:	f000 fced 	bl	8006cae <USBD_CtlError>
            ret = USBD_FAIL;
 80062d4:	2603      	movs	r6, #3
 80062d6:	e026      	b.n	8006326 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062d8:	2202      	movs	r2, #2
 80062da:	a901      	add	r1, sp, #4
 80062dc:	f001 f8fe 	bl	80074dc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80062e0:	463e      	mov	r6, r7
 80062e2:	e020      	b.n	8006326 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062e4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d004      	beq.n	80062f6 <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 80062ec:	4629      	mov	r1, r5
 80062ee:	f000 fcde 	bl	8006cae <USBD_CtlError>
            ret = USBD_FAIL;
 80062f2:	2603      	movs	r6, #3
 80062f4:	e017      	b.n	8006326 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062f6:	2201      	movs	r2, #1
 80062f8:	f10d 0107 	add.w	r1, sp, #7
 80062fc:	f001 f8ee 	bl	80074dc <USBD_CtlSendData>
 8006300:	e011      	b.n	8006326 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006302:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006306:	2b03      	cmp	r3, #3
 8006308:	d00d      	beq.n	8006326 <USBD_CDC_Setup+0x10a>
            USBD_CtlError(pdev, req);
 800630a:	4629      	mov	r1, r5
 800630c:	f000 fccf 	bl	8006cae <USBD_CtlError>
            ret = USBD_FAIL;
 8006310:	2603      	movs	r6, #3
 8006312:	e008      	b.n	8006326 <USBD_CDC_Setup+0x10a>
          USBD_CtlError(pdev, req);
 8006314:	4629      	mov	r1, r5
 8006316:	f000 fcca 	bl	8006cae <USBD_CtlError>
          ret = USBD_FAIL;
 800631a:	2603      	movs	r6, #3
          break;
 800631c:	e003      	b.n	8006326 <USBD_CDC_Setup+0x10a>
      USBD_CtlError(pdev, req);
 800631e:	4629      	mov	r1, r5
 8006320:	f000 fcc5 	bl	8006cae <USBD_CtlError>
      ret = USBD_FAIL;
 8006324:	2603      	movs	r6, #3
}
 8006326:	4630      	mov	r0, r6
 8006328:	b003      	add	sp, #12
 800632a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800632c:	2603      	movs	r6, #3
 800632e:	e7fa      	b.n	8006326 <USBD_CDC_Setup+0x10a>

08006330 <USBD_CDC_DeInit>:
{
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006334:	2181      	movs	r1, #129	@ 0x81
 8006336:	f000 fa63 	bl	8006800 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800633a:	2500      	movs	r5, #0
 800633c:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800633e:	2101      	movs	r1, #1
 8006340:	4620      	mov	r0, r4
 8006342:	f000 fa5d 	bl	8006800 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006346:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800634a:	2182      	movs	r1, #130	@ 0x82
 800634c:	4620      	mov	r0, r4
 800634e:	f000 fa57 	bl	8006800 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006352:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006356:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800635a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800635e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8006362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006366:	b19a      	cbz	r2, 8006390 <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006368:	33b0      	adds	r3, #176	@ 0xb0
 800636a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006374:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8006378:	33b0      	adds	r3, #176	@ 0xb0
 800637a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800637e:	f000 fa21 	bl	80067c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006382:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8006386:	33b0      	adds	r3, #176	@ 0xb0
 8006388:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 800638c:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8006390:	2000      	movs	r0, #0
 8006392:	bd38      	pop	{r3, r4, r5, pc}

08006394 <USBD_CDC_Init>:
{
 8006394:	b570      	push	{r4, r5, r6, lr}
 8006396:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006398:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800639c:	f000 fa0e 	bl	80067bc <USBD_static_malloc>
  if (hcdc == NULL)
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d049      	beq.n	8006438 <USBD_CDC_Init+0xa4>
 80063a4:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80063a6:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80063aa:	2100      	movs	r1, #0
 80063ac:	f001 f938 	bl	8007620 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80063b0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80063b4:	33b0      	adds	r3, #176	@ 0xb0
 80063b6:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80063ba:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063be:	7c23      	ldrb	r3, [r4, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d141      	bne.n	8006448 <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80063c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063c8:	2202      	movs	r2, #2
 80063ca:	2181      	movs	r1, #129	@ 0x81
 80063cc:	4620      	mov	r0, r4
 80063ce:	f000 fa0c 	bl	80067ea <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80063d2:	2601      	movs	r6, #1
 80063d4:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80063d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063da:	2202      	movs	r2, #2
 80063dc:	4631      	mov	r1, r6
 80063de:	4620      	mov	r0, r4
 80063e0:	f000 fa03 	bl	80067ea <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80063e4:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80063e8:	2310      	movs	r3, #16
 80063ea:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063ee:	2308      	movs	r3, #8
 80063f0:	2203      	movs	r2, #3
 80063f2:	2182      	movs	r1, #130	@ 0x82
 80063f4:	4620      	mov	r0, r4
 80063f6:	f000 f9f8 	bl	80067ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80063fa:	2301      	movs	r3, #1
 80063fc:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
  hcdc->RxBuffer = NULL;
 8006400:	2600      	movs	r6, #0
 8006402:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006406:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800640a:	33b0      	adds	r3, #176	@ 0xb0
 800640c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4798      	blx	r3
  hcdc->TxState = 0U;
 8006416:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 800641a:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 800641e:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8006422:	b362      	cbz	r2, 800647e <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006424:	7c25      	ldrb	r5, [r4, #16]
 8006426:	bb1d      	cbnz	r5, 8006470 <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006428:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800642c:	2101      	movs	r1, #1
 800642e:	4620      	mov	r0, r4
 8006430:	f000 fa0e 	bl	8006850 <USBD_LL_PrepareReceive>
}
 8006434:	4628      	mov	r0, r5
 8006436:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006438:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800643c:	33b0      	adds	r3, #176	@ 0xb0
 800643e:	2200      	movs	r2, #0
 8006440:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006444:	2502      	movs	r5, #2
 8006446:	e7f5      	b.n	8006434 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006448:	2340      	movs	r3, #64	@ 0x40
 800644a:	2202      	movs	r2, #2
 800644c:	2181      	movs	r1, #129	@ 0x81
 800644e:	4620      	mov	r0, r4
 8006450:	f000 f9cb 	bl	80067ea <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006454:	2601      	movs	r6, #1
 8006456:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006458:	2340      	movs	r3, #64	@ 0x40
 800645a:	2202      	movs	r2, #2
 800645c:	4631      	mov	r1, r6
 800645e:	4620      	mov	r0, r4
 8006460:	f000 f9c3 	bl	80067ea <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006464:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006468:	2310      	movs	r3, #16
 800646a:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 800646e:	e7be      	b.n	80063ee <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006470:	2340      	movs	r3, #64	@ 0x40
 8006472:	2101      	movs	r1, #1
 8006474:	4620      	mov	r0, r4
 8006476:	f000 f9eb 	bl	8006850 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800647a:	2500      	movs	r5, #0
 800647c:	e7da      	b.n	8006434 <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 800647e:	2502      	movs	r5, #2
 8006480:	e7d8      	b.n	8006434 <USBD_CDC_Init+0xa0>

08006482 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8006482:	b139      	cbz	r1, 8006494 <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8006484:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006488:	33b0      	adds	r3, #176	@ 0xb0
 800648a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800648e:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 8006490:	2000      	movs	r0, #0
 8006492:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006494:	2003      	movs	r0, #3
}
 8006496:	4770      	bx	lr

08006498 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006498:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800649c:	33b0      	adds	r3, #176	@ 0xb0
 800649e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80064a2:	b12b      	cbz	r3, 80064b0 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 80064a4:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80064a8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80064ac:	2000      	movs	r0, #0
 80064ae:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80064b0:	2003      	movs	r0, #3
}
 80064b2:	4770      	bx	lr

080064b4 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064b4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80064b8:	33b0      	adds	r3, #176	@ 0xb0
 80064ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 80064be:	b11b      	cbz	r3, 80064c8 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 80064c0:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80064c4:	2000      	movs	r0, #0
 80064c6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80064c8:	2003      	movs	r0, #3
}
 80064ca:	4770      	bx	lr

080064cc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80064cc:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064ce:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80064d2:	33b0      	adds	r3, #176	@ 0xb0
 80064d4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80064d8:	b18a      	cbz	r2, 80064fe <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 80064da:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 80064de:	b10b      	cbz	r3, 80064e4 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 80064e0:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 80064e2:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80064ea:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 80064ee:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80064f0:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 80064f4:	2181      	movs	r1, #129	@ 0x81
 80064f6:	f000 f9a3 	bl	8006840 <USBD_LL_Transmit>
    ret = USBD_OK;
 80064fa:	2000      	movs	r0, #0
 80064fc:	e7f1      	b.n	80064e2 <USBD_CDC_TransmitPacket+0x16>
    return (uint8_t)USBD_FAIL;
 80064fe:	2003      	movs	r0, #3
 8006500:	e7ef      	b.n	80064e2 <USBD_CDC_TransmitPacket+0x16>

08006502 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006502:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006504:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006508:	33b0      	adds	r3, #176	@ 0xb0
 800650a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800650e:	b192      	cbz	r2, 8006536 <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006510:	7c04      	ldrb	r4, [r0, #16]
 8006512:	b944      	cbnz	r4, 8006526 <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006514:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006518:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 800651c:	2101      	movs	r1, #1
 800651e:	f000 f997 	bl	8006850 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8006522:	4620      	mov	r0, r4
 8006524:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006526:	2340      	movs	r3, #64	@ 0x40
 8006528:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 800652c:	2101      	movs	r1, #1
 800652e:	f000 f98f 	bl	8006850 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8006532:	2400      	movs	r4, #0
 8006534:	e7f5      	b.n	8006522 <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 8006536:	2403      	movs	r4, #3
 8006538:	e7f3      	b.n	8006522 <USBD_CDC_ReceivePacket+0x20>

0800653a <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800653a:	2000      	movs	r0, #0
 800653c:	4770      	bx	lr

0800653e <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800653e:	2000      	movs	r0, #0
 8006540:	4770      	bx	lr

08006542 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8006542:	2000      	movs	r0, #0
 8006544:	4770      	bx	lr
	...

08006548 <CDC_Receive_FS>:
{
 8006548:	b510      	push	{r4, lr}
 800654a:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800654c:	4c04      	ldr	r4, [pc, #16]	@ (8006560 <CDC_Receive_FS+0x18>)
 800654e:	4620      	mov	r0, r4
 8006550:	f7ff ffb0 	bl	80064b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006554:	4620      	mov	r0, r4
 8006556:	f7ff ffd4 	bl	8006502 <USBD_CDC_ReceivePacket>
}
 800655a:	2000      	movs	r0, #0
 800655c:	bd10      	pop	{r4, pc}
 800655e:	bf00      	nop
 8006560:	20005238 	.word	0x20005238

08006564 <CDC_Init_FS>:
{
 8006564:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006566:	4c06      	ldr	r4, [pc, #24]	@ (8006580 <CDC_Init_FS+0x1c>)
 8006568:	2200      	movs	r2, #0
 800656a:	4906      	ldr	r1, [pc, #24]	@ (8006584 <CDC_Init_FS+0x20>)
 800656c:	4620      	mov	r0, r4
 800656e:	f7ff ff93 	bl	8006498 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006572:	4905      	ldr	r1, [pc, #20]	@ (8006588 <CDC_Init_FS+0x24>)
 8006574:	4620      	mov	r0, r4
 8006576:	f7ff ff9d 	bl	80064b4 <USBD_CDC_SetRxBuffer>
}
 800657a:	2000      	movs	r0, #0
 800657c:	bd10      	pop	{r4, pc}
 800657e:	bf00      	nop
 8006580:	20005238 	.word	0x20005238
 8006584:	20005514 	.word	0x20005514
 8006588:	20005914 	.word	0x20005914

0800658c <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800658c:	4b09      	ldr	r3, [pc, #36]	@ (80065b4 <CDC_Transmit_FS+0x28>)
 800658e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 8006592:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006596:	b10b      	cbz	r3, 800659c <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8006598:	2001      	movs	r0, #1
}
 800659a:	4770      	bx	lr
{
 800659c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800659e:	4c05      	ldr	r4, [pc, #20]	@ (80065b4 <CDC_Transmit_FS+0x28>)
 80065a0:	460a      	mov	r2, r1
 80065a2:	4601      	mov	r1, r0
 80065a4:	4620      	mov	r0, r4
 80065a6:	f7ff ff77 	bl	8006498 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80065aa:	4620      	mov	r0, r4
 80065ac:	f7ff ff8e 	bl	80064cc <USBD_CDC_TransmitPacket>
}
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	bf00      	nop
 80065b4:	20005238 	.word	0x20005238

080065b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80065b8:	b530      	push	{r4, r5, lr}
 80065ba:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065bc:	2300      	movs	r3, #0
 80065be:	9303      	str	r3, [sp, #12]
 80065c0:	9304      	str	r3, [sp, #16]
 80065c2:	9305      	str	r3, [sp, #20]
 80065c4:	9306      	str	r3, [sp, #24]
 80065c6:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 80065c8:	6803      	ldr	r3, [r0, #0]
 80065ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065ce:	d001      	beq.n	80065d4 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80065d0:	b009      	add	sp, #36	@ 0x24
 80065d2:	bd30      	pop	{r4, r5, pc}
 80065d4:	aa03      	add	r2, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065d6:	2500      	movs	r5, #0
 80065d8:	9501      	str	r5, [sp, #4]
 80065da:	4c17      	ldr	r4, [pc, #92]	@ (8006638 <HAL_PCD_MspInit+0x80>)
 80065dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80065de:	f043 0301 	orr.w	r3, r3, #1
 80065e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80065e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80065ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80065f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065f4:	2302      	movs	r3, #2
 80065f6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065f8:	2303      	movs	r3, #3
 80065fa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80065fc:	230a      	movs	r3, #10
 80065fe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006600:	4611      	mov	r1, r2
 8006602:	480e      	ldr	r0, [pc, #56]	@ (800663c <HAL_PCD_MspInit+0x84>)
 8006604:	f7fb fdca 	bl	800219c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006608:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800660a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800660e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006610:	9502      	str	r5, [sp, #8]
 8006612:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006614:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006618:	6463      	str	r3, [r4, #68]	@ 0x44
 800661a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800661c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006620:	9302      	str	r3, [sp, #8]
 8006622:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8006624:	462a      	mov	r2, r5
 8006626:	2105      	movs	r1, #5
 8006628:	2043      	movs	r0, #67	@ 0x43
 800662a:	f7fb fb9f 	bl	8001d6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800662e:	2043      	movs	r0, #67	@ 0x43
 8006630:	f7fb fbac 	bl	8001d8c <HAL_NVIC_EnableIRQ>
}
 8006634:	e7cc      	b.n	80065d0 <HAL_PCD_MspInit+0x18>
 8006636:	bf00      	nop
 8006638:	40023800 	.word	0x40023800
 800663c:	40020000 	.word	0x40020000

08006640 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006640:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006642:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8006646:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800664a:	f000 f956 	bl	80068fa <USBD_LL_SetupStage>
}
 800664e:	bd08      	pop	{r3, pc}

08006650 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006650:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006652:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8006656:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800665a:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800665e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006662:	f000 fa17 	bl	8006a94 <USBD_LL_DataOutStage>
}
 8006666:	bd08      	pop	{r3, pc}

08006668 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006668:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800666a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800666e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006672:	6a1a      	ldr	r2, [r3, #32]
 8006674:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006678:	f000 fa6c 	bl	8006b54 <USBD_LL_DataInStage>
}
 800667c:	bd08      	pop	{r3, pc}

0800667e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800667e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006680:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006684:	f000 f9b4 	bl	80069f0 <USBD_LL_SOF>
}
 8006688:	bd08      	pop	{r3, pc}

0800668a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800668a:	b510      	push	{r4, lr}
 800668c:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800668e:	79c3      	ldrb	r3, [r0, #7]
 8006690:	2b02      	cmp	r3, #2
 8006692:	d109      	bne.n	80066a8 <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006694:	2101      	movs	r1, #1
 8006696:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800669a:	f000 f98c 	bl	80069b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800669e:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 80066a2:	f000 f956 	bl	8006952 <USBD_LL_Reset>
}
 80066a6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80066a8:	f7fa faae 	bl	8000c08 <Error_Handler>
 80066ac:	e7f2      	b.n	8006694 <HAL_PCD_ResetCallback+0xa>
	...

080066b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066b0:	b510      	push	{r4, lr}
 80066b2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80066b4:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80066b8:	f000 f980 	bl	80069bc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80066bc:	6822      	ldr	r2, [r4, #0]
 80066be:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80066ca:	7ae3      	ldrb	r3, [r4, #11]
 80066cc:	b123      	cbz	r3, 80066d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80066ce:	4a03      	ldr	r2, [pc, #12]	@ (80066dc <HAL_PCD_SuspendCallback+0x2c>)
 80066d0:	6913      	ldr	r3, [r2, #16]
 80066d2:	f043 0306 	orr.w	r3, r3, #6
 80066d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80066d8:	bd10      	pop	{r4, pc}
 80066da:	bf00      	nop
 80066dc:	e000ed00 	.word	0xe000ed00

080066e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80066e2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80066e6:	f000 f977 	bl	80069d8 <USBD_LL_Resume>
}
 80066ea:	bd08      	pop	{r3, pc}

080066ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066ec:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80066ee:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80066f2:	f000 f9a3 	bl	8006a3c <USBD_LL_IsoOUTIncomplete>
}
 80066f6:	bd08      	pop	{r3, pc}

080066f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066f8:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80066fa:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80066fe:	f000 f987 	bl	8006a10 <USBD_LL_IsoINIncomplete>
}
 8006702:	bd08      	pop	{r3, pc}

08006704 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006704:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006706:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800670a:	f000 f9ad 	bl	8006a68 <USBD_LL_DevConnected>
}
 800670e:	bd08      	pop	{r3, pc}

08006710 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006710:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006712:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006716:	f000 f9a9 	bl	8006a6c <USBD_LL_DevDisconnected>
}
 800671a:	bd08      	pop	{r3, pc}

0800671c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800671c:	7802      	ldrb	r2, [r0, #0]
 800671e:	b10a      	cbz	r2, 8006724 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8006720:	2000      	movs	r0, #0
 8006722:	4770      	bx	lr
{
 8006724:	b510      	push	{r4, lr}
 8006726:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8006728:	4815      	ldr	r0, [pc, #84]	@ (8006780 <USBD_LL_Init+0x64>)
 800672a:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800672e:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006732:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006736:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006738:	2304      	movs	r3, #4
 800673a:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800673c:	2202      	movs	r2, #2
 800673e:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006740:	2300      	movs	r3, #0
 8006742:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006744:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006746:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006748:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800674a:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800674c:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800674e:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006750:	f7fb fea0 	bl	8002494 <HAL_PCD_Init>
 8006754:	b980      	cbnz	r0, 8006778 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006756:	4c0a      	ldr	r4, [pc, #40]	@ (8006780 <USBD_LL_Init+0x64>)
 8006758:	2180      	movs	r1, #128	@ 0x80
 800675a:	4620      	mov	r0, r4
 800675c:	f7fc fc69 	bl	8003032 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006760:	2240      	movs	r2, #64	@ 0x40
 8006762:	2100      	movs	r1, #0
 8006764:	4620      	mov	r0, r4
 8006766:	f7fc fc3e 	bl	8002fe6 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800676a:	2280      	movs	r2, #128	@ 0x80
 800676c:	2101      	movs	r1, #1
 800676e:	4620      	mov	r0, r4
 8006770:	f7fc fc39 	bl	8002fe6 <HAL_PCDEx_SetTxFiFo>
}
 8006774:	2000      	movs	r0, #0
 8006776:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006778:	f7fa fa46 	bl	8000c08 <Error_Handler>
 800677c:	e7eb      	b.n	8006756 <USBD_LL_Init+0x3a>
 800677e:	bf00      	nop
 8006780:	20005f34 	.word	0x20005f34

08006784 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006784:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8006788:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800678c:	d108      	bne.n	80067a0 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800678e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006792:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006796:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800679a:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 800679e:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80067a0:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80067a4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80067a8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80067ac:	7d98      	ldrb	r0, [r3, #22]
 80067ae:	4770      	bx	lr

080067b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067b0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80067b2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80067b6:	f7fc f871 	bl	800289c <HAL_PCD_EP_GetRxCount>
}
 80067ba:	bd08      	pop	{r3, pc}

080067bc <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80067bc:	4800      	ldr	r0, [pc, #0]	@ (80067c0 <USBD_static_malloc+0x4>)
 80067be:	4770      	bx	lr
 80067c0:	20005d14 	.word	0x20005d14

080067c4 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 80067c4:	4770      	bx	lr

080067c6 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80067c6:	2803      	cmp	r0, #3
 80067c8:	d805      	bhi.n	80067d6 <USBD_Get_USB_Status+0x10>
 80067ca:	e8df f000 	tbb	[pc, r0]
 80067ce:	0405      	.short	0x0405
 80067d0:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80067d2:	2001      	movs	r0, #1
    break;
 80067d4:	4770      	bx	lr
      usb_status = USBD_FAIL;
 80067d6:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80067d8:	4770      	bx	lr

080067da <USBD_LL_Start>:
{
 80067da:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80067dc:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80067e0:	f7fb fed9 	bl	8002596 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80067e4:	f7ff ffef 	bl	80067c6 <USBD_Get_USB_Status>
}
 80067e8:	bd08      	pop	{r3, pc}

080067ea <USBD_LL_OpenEP>:
{
 80067ea:	b508      	push	{r3, lr}
 80067ec:	4694      	mov	ip, r2
 80067ee:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80067f0:	4663      	mov	r3, ip
 80067f2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80067f6:	f7fb ffae 	bl	8002756 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80067fa:	f7ff ffe4 	bl	80067c6 <USBD_Get_USB_Status>
}
 80067fe:	bd08      	pop	{r3, pc}

08006800 <USBD_LL_CloseEP>:
{
 8006800:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006802:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006806:	f7fb ffec 	bl	80027e2 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800680a:	f7ff ffdc 	bl	80067c6 <USBD_Get_USB_Status>
}
 800680e:	bd08      	pop	{r3, pc}

08006810 <USBD_LL_StallEP>:
{
 8006810:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006812:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006816:	f7fc f86f 	bl	80028f8 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800681a:	f7ff ffd4 	bl	80067c6 <USBD_Get_USB_Status>
}
 800681e:	bd08      	pop	{r3, pc}

08006820 <USBD_LL_ClearStallEP>:
{
 8006820:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006822:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006826:	f7fc f8aa 	bl	800297e <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800682a:	f7ff ffcc 	bl	80067c6 <USBD_Get_USB_Status>
}
 800682e:	bd08      	pop	{r3, pc}

08006830 <USBD_LL_SetUSBAddress>:
{
 8006830:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006832:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006836:	f7fb ff7b 	bl	8002730 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800683a:	f7ff ffc4 	bl	80067c6 <USBD_Get_USB_Status>
}
 800683e:	bd08      	pop	{r3, pc}

08006840 <USBD_LL_Transmit>:
{
 8006840:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006842:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006846:	f7fc f832 	bl	80028ae <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800684a:	f7ff ffbc 	bl	80067c6 <USBD_Get_USB_Status>
}
 800684e:	bd08      	pop	{r3, pc}

08006850 <USBD_LL_PrepareReceive>:
{
 8006850:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006852:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006856:	f7fb fffc 	bl	8002852 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800685a:	f7ff ffb4 	bl	80067c6 <USBD_Get_USB_Status>
}
 800685e:	bd08      	pop	{r3, pc}

08006860 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006860:	b198      	cbz	r0, 800688a <USBD_Init+0x2a>
{
 8006862:	b508      	push	{r3, lr}
 8006864:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006866:	2000      	movs	r0, #0
 8006868:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800686c:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006870:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006874:	b109      	cbz	r1, 800687a <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8006876:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800687a:	2101      	movs	r1, #1
 800687c:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006880:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff ff4a 	bl	800671c <USBD_LL_Init>

  return ret;
}
 8006888:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800688a:	2003      	movs	r0, #3
}
 800688c:	4770      	bx	lr

0800688e <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800688e:	b510      	push	{r4, lr}
 8006890:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8006898:	b1b9      	cbz	r1, 80068ca <USBD_RegisterClass+0x3c>
 800689a:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800689c:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80068a0:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 80068a4:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80068a6:	b143      	cbz	r3, 80068ba <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80068a8:	32ae      	adds	r2, #174	@ 0xae
 80068aa:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80068ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b0:	f10d 0006 	add.w	r0, sp, #6
 80068b4:	4798      	blx	r3
 80068b6:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80068ba:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 80068be:	3301      	adds	r3, #1
 80068c0:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 80068c4:	2000      	movs	r0, #0
}
 80068c6:	b002      	add	sp, #8
 80068c8:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80068ca:	2003      	movs	r0, #3
 80068cc:	e7fb      	b.n	80068c6 <USBD_RegisterClass+0x38>

080068ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80068ce:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80068d0:	f7ff ff83 	bl	80067da <USBD_LL_Start>
}
 80068d4:	bd08      	pop	{r3, pc}

080068d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068d6:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80068dc:	b113      	cbz	r3, 80068e4 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80068e2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 80068e4:	2000      	movs	r0, #0
 80068e6:	e7fc      	b.n	80068e2 <USBD_SetClassConfig+0xc>

080068e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068e8:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80068ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	4798      	blx	r3
 80068f2:	b900      	cbnz	r0, 80068f6 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80068f4:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 80068f6:	2003      	movs	r0, #3
 80068f8:	e7fc      	b.n	80068f4 <USBD_ClrClassConfig+0xc>

080068fa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068fa:	b538      	push	{r3, r4, r5, lr}
 80068fc:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068fe:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8006902:	4628      	mov	r0, r5
 8006904:	f000 f9bf 	bl	8006c86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006908:	2301      	movs	r3, #1
 800690a:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800690e:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8006912:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006916:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 800691a:	f001 031f 	and.w	r3, r1, #31
 800691e:	2b01      	cmp	r3, #1
 8006920:	d007      	beq.n	8006932 <USBD_LL_SetupStage+0x38>
 8006922:	2b02      	cmp	r3, #2
 8006924:	d00a      	beq.n	800693c <USBD_LL_SetupStage+0x42>
 8006926:	b973      	cbnz	r3, 8006946 <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006928:	4629      	mov	r1, r5
 800692a:	4620      	mov	r0, r4
 800692c:	f000 fb80 	bl	8007030 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8006930:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006932:	4629      	mov	r1, r5
 8006934:	4620      	mov	r0, r4
 8006936:	f000 fbb6 	bl	80070a6 <USBD_StdItfReq>
      break;
 800693a:	e7f9      	b.n	8006930 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800693c:	4629      	mov	r1, r5
 800693e:	4620      	mov	r0, r4
 8006940:	f000 fbf3 	bl	800712a <USBD_StdEPReq>
      break;
 8006944:	e7f4      	b.n	8006930 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006946:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800694a:	4620      	mov	r0, r4
 800694c:	f7ff ff60 	bl	8006810 <USBD_LL_StallEP>
      break;
 8006950:	e7ee      	b.n	8006930 <USBD_LL_SetupStage+0x36>

08006952 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006954:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006956:	2301      	movs	r3, #1
 8006958:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800695c:	2300      	movs	r3, #0
 800695e:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006962:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8006964:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006968:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800696c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006970:	b1db      	cbz	r3, 80069aa <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	b1db      	cbz	r3, 80069ae <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006976:	2100      	movs	r1, #0
 8006978:	4798      	blx	r3
 800697a:	4607      	mov	r7, r0
 800697c:	b9c8      	cbnz	r0, 80069b2 <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800697e:	2340      	movs	r3, #64	@ 0x40
 8006980:	2200      	movs	r2, #0
 8006982:	4611      	mov	r1, r2
 8006984:	4620      	mov	r0, r4
 8006986:	f7ff ff30 	bl	80067ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800698a:	2601      	movs	r6, #1
 800698c:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006990:	2540      	movs	r5, #64	@ 0x40
 8006992:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006996:	462b      	mov	r3, r5
 8006998:	2200      	movs	r2, #0
 800699a:	2180      	movs	r1, #128	@ 0x80
 800699c:	4620      	mov	r0, r4
 800699e:	f7ff ff24 	bl	80067ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069a2:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069a4:	6225      	str	r5, [r4, #32]

  return ret;
}
 80069a6:	4638      	mov	r0, r7
 80069a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 80069aa:	2700      	movs	r7, #0
 80069ac:	e7e7      	b.n	800697e <USBD_LL_Reset+0x2c>
 80069ae:	2700      	movs	r7, #0
 80069b0:	e7e5      	b.n	800697e <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 80069b2:	2703      	movs	r7, #3
 80069b4:	e7e3      	b.n	800697e <USBD_LL_Reset+0x2c>

080069b6 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80069b6:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80069b8:	2000      	movs	r0, #0
 80069ba:	4770      	bx	lr

080069bc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80069bc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d004      	beq.n	80069ce <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 80069c4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80069ce:	2304      	movs	r3, #4
 80069d0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 80069d4:	2000      	movs	r0, #0
 80069d6:	4770      	bx	lr

080069d8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80069d8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80069dc:	2b04      	cmp	r3, #4
 80069de:	d001      	beq.n	80069e4 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 80069e0:	2000      	movs	r0, #0
 80069e2:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 80069e4:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 80069ee:	e7f7      	b.n	80069e0 <USBD_LL_Resume+0x8>

080069f0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80069f0:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d001      	beq.n	80069fe <USBD_LL_SOF+0xe>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 80069fa:	2000      	movs	r0, #0
 80069fc:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 80069fe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0f9      	beq.n	80069fa <USBD_LL_SOF+0xa>
      if (pdev->pClass[0]->SOF != NULL)
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0f6      	beq.n	80069fa <USBD_LL_SOF+0xa>
        (void)pdev->pClass[0]->SOF(pdev);
 8006a0c:	4798      	blx	r3
 8006a0e:	e7f4      	b.n	80069fa <USBD_LL_SOF+0xa>

08006a10 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006a10:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8006a12:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006a16:	33ae      	adds	r3, #174	@ 0xae
 8006a18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006a1c:	b153      	cbz	r3, 8006a34 <USBD_LL_IsoINIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a1e:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8006a22:	2a03      	cmp	r2, #3
 8006a24:	d001      	beq.n	8006a2a <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8006a26:	2000      	movs	r0, #0
}
 8006a28:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	b123      	cbz	r3, 8006a38 <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006a2e:	4798      	blx	r3
  return USBD_OK;
 8006a30:	2000      	movs	r0, #0
 8006a32:	e7f9      	b.n	8006a28 <USBD_LL_IsoINIncomplete+0x18>
    return USBD_FAIL;
 8006a34:	2003      	movs	r0, #3
 8006a36:	e7f7      	b.n	8006a28 <USBD_LL_IsoINIncomplete+0x18>
  return USBD_OK;
 8006a38:	2000      	movs	r0, #0
 8006a3a:	e7f5      	b.n	8006a28 <USBD_LL_IsoINIncomplete+0x18>

08006a3c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006a3c:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8006a3e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006a42:	33ae      	adds	r3, #174	@ 0xae
 8006a44:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006a48:	b153      	cbz	r3, 8006a60 <USBD_LL_IsoOUTIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a4a:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8006a4e:	2a03      	cmp	r2, #3
 8006a50:	d001      	beq.n	8006a56 <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8006a52:	2000      	movs	r0, #0
}
 8006a54:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a58:	b123      	cbz	r3, 8006a64 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006a5a:	4798      	blx	r3
  return USBD_OK;
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e7f9      	b.n	8006a54 <USBD_LL_IsoOUTIncomplete+0x18>
    return USBD_FAIL;
 8006a60:	2003      	movs	r0, #3
 8006a62:	e7f7      	b.n	8006a54 <USBD_LL_IsoOUTIncomplete+0x18>
  return USBD_OK;
 8006a64:	2000      	movs	r0, #0
 8006a66:	e7f5      	b.n	8006a54 <USBD_LL_IsoOUTIncomplete+0x18>

08006a68 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8006a68:	2000      	movs	r0, #0
 8006a6a:	4770      	bx	lr

08006a6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a6c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a74:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006a78:	b123      	cbz	r3, 8006a84 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	7901      	ldrb	r1, [r0, #4]
 8006a7e:	4798      	blx	r3
 8006a80:	b910      	cbnz	r0, 8006a88 <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8006a82:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8006a84:	2000      	movs	r0, #0
 8006a86:	e7fc      	b.n	8006a82 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 8006a88:	2003      	movs	r0, #3
 8006a8a:	e7fa      	b.n	8006a82 <USBD_LL_DevDisconnected+0x16>

08006a8c <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	4770      	bx	lr

08006a90 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8006a90:	2000      	movs	r0, #0
 8006a92:	4770      	bx	lr

08006a94 <USBD_LL_DataOutStage>:
{
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	4604      	mov	r4, r0
  if (epnum == 0U)
 8006a98:	460d      	mov	r5, r1
 8006a9a:	2900      	cmp	r1, #0
 8006a9c:	d141      	bne.n	8006b22 <USBD_LL_DataOutStage+0x8e>
 8006a9e:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006aa0:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8006aa4:	2a03      	cmp	r2, #3
 8006aa6:	d001      	beq.n	8006aac <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 8006aa8:	4608      	mov	r0, r1
}
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8006aac:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 8006ab0:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 8006ab4:	4291      	cmp	r1, r2
 8006ab6:	d809      	bhi.n	8006acc <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 8006ab8:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 8006abc:	f003 031f 	and.w	r3, r3, #31
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d00e      	beq.n	8006ae2 <USBD_LL_DataOutStage+0x4e>
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d01a      	beq.n	8006afe <USBD_LL_DataOutStage+0x6a>
 8006ac8:	4628      	mov	r0, r5
 8006aca:	e00f      	b.n	8006aec <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 8006acc:	1a89      	subs	r1, r1, r2
 8006ace:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ad2:	428a      	cmp	r2, r1
 8006ad4:	bf28      	it	cs
 8006ad6:	460a      	movcs	r2, r1
 8006ad8:	4619      	mov	r1, r3
 8006ada:	f000 fd23 	bl	8007524 <USBD_CtlContinueRx>
  return USBD_OK;
 8006ade:	4628      	mov	r0, r5
 8006ae0:	e7e3      	b.n	8006aaa <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ae2:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8006ae6:	f7ff ffd1 	bl	8006a8c <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006aea:	b918      	cbnz	r0, 8006af4 <USBD_LL_DataOutStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aec:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d009      	beq.n	8006b08 <USBD_LL_DataOutStage+0x74>
        (void)USBD_CtlSendStatus(pdev);
 8006af4:	4620      	mov	r0, r4
 8006af6:	f000 fd1d 	bl	8007534 <USBD_CtlSendStatus>
  return USBD_OK;
 8006afa:	4628      	mov	r0, r5
 8006afc:	e7d5      	b.n	8006aaa <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006afe:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8006b02:	f7ff ffc5 	bl	8006a90 <USBD_CoreFindEP>
            break;
 8006b06:	e7f0      	b.n	8006aea <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b08:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8006b0c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006b10:	691a      	ldr	r2, [r3, #16]
 8006b12:	2a00      	cmp	r2, #0
 8006b14:	d0ee      	beq.n	8006af4 <USBD_LL_DataOutStage+0x60>
              pdev->classId = idx;
 8006b16:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	4798      	blx	r3
 8006b20:	e7e8      	b.n	8006af4 <USBD_LL_DataOutStage+0x60>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b22:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006b26:	f7ff ffb3 	bl	8006a90 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b2a:	b988      	cbnz	r0, 8006b50 <USBD_LL_DataOutStage+0xbc>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b2c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d1ba      	bne.n	8006aaa <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b34:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8006b38:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	2a00      	cmp	r2, #0
 8006b40:	d0b3      	beq.n	8006aaa <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 8006b42:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	4629      	mov	r1, r5
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	4798      	blx	r3
      if (ret != USBD_OK)
 8006b4e:	e7ac      	b.n	8006aaa <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8006b50:	2000      	movs	r0, #0
 8006b52:	e7aa      	b.n	8006aaa <USBD_LL_DataOutStage+0x16>

08006b54 <USBD_LL_DataInStage>:
{
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4604      	mov	r4, r0
  if (epnum == 0U)
 8006b58:	460d      	mov	r5, r1
 8006b5a:	2900      	cmp	r1, #0
 8006b5c:	d14a      	bne.n	8006bf4 <USBD_LL_DataInStage+0xa0>
 8006b5e:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b60:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8006b64:	2a02      	cmp	r2, #2
 8006b66:	d007      	beq.n	8006b78 <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 8006b68:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 8006b6c:	b118      	cbz	r0, 8006b76 <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8006b74:	4628      	mov	r0, r5
}
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8006b78:	69c2      	ldr	r2, [r0, #28]
 8006b7a:	6a01      	ldr	r1, [r0, #32]
 8006b7c:	428a      	cmp	r2, r1
 8006b7e:	d80d      	bhi.n	8006b9c <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 8006b80:	428a      	cmp	r2, r1
 8006b82:	d017      	beq.n	8006bb4 <USBD_LL_DataInStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b84:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d027      	beq.n	8006bdc <USBD_LL_DataInStage+0x88>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b8c:	2180      	movs	r1, #128	@ 0x80
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f7ff fe3e 	bl	8006810 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b94:	4620      	mov	r0, r4
 8006b96:	f000 fcd8 	bl	800754a <USBD_CtlReceiveStatus>
 8006b9a:	e7e5      	b.n	8006b68 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8006b9c:	1a52      	subs	r2, r2, r1
 8006b9e:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	f000 fca8 	bl	80074f6 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4619      	mov	r1, r3
 8006bac:	4620      	mov	r0, r4
 8006bae:	f7ff fe4f 	bl	8006850 <USBD_LL_PrepareReceive>
 8006bb2:	e7d9      	b.n	8006b68 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8006bb4:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8006bb6:	4299      	cmp	r1, r3
 8006bb8:	d8e4      	bhi.n	8006b84 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 8006bba:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d2e0      	bcs.n	8006b84 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	f000 fc96 	bl	80074f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bca:	2100      	movs	r1, #0
 8006bcc:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	460a      	mov	r2, r1
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f7ff fe3b 	bl	8006850 <USBD_LL_PrepareReceive>
 8006bda:	e7c5      	b.n	8006b68 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006bdc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	2a00      	cmp	r2, #0
 8006be4:	d0d2      	beq.n	8006b8c <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	4798      	blx	r3
 8006bf2:	e7cb      	b.n	8006b8c <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006bf4:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006bf8:	f7ff ff4a 	bl	8006a90 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bfc:	b988      	cbnz	r0, 8006c22 <USBD_LL_DataInStage+0xce>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfe:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d1b7      	bne.n	8006b76 <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 8006c06:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8006c0a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006c0e:	695a      	ldr	r2, [r3, #20]
 8006c10:	2a00      	cmp	r2, #0
 8006c12:	d0b0      	beq.n	8006b76 <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 8006c14:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	4798      	blx	r3
          if (ret != USBD_OK)
 8006c20:	e7a9      	b.n	8006b76 <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 8006c22:	2000      	movs	r0, #0
 8006c24:	e7a7      	b.n	8006b76 <USBD_LL_DataInStage+0x22>

08006c26 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8006c26:	880b      	ldrh	r3, [r1, #0]
 8006c28:	7802      	ldrb	r2, [r0, #0]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006c2e:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 8006c30:	4418      	add	r0, r3
 8006c32:	4770      	bx	lr

08006c34 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 8006c34:	8842      	ldrh	r2, [r0, #2]
 8006c36:	7803      	ldrb	r3, [r0, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d918      	bls.n	8006c6e <USBD_GetEpDesc+0x3a>
{
 8006c3c:	b530      	push	{r4, r5, lr}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	4604      	mov	r4, r0
 8006c42:	460d      	mov	r5, r1
    ptr = desc->bLength;
 8006c44:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 8006c48:	8863      	ldrh	r3, [r4, #2]
 8006c4a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d20a      	bcs.n	8006c68 <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006c52:	f10d 0106 	add.w	r1, sp, #6
 8006c56:	f7ff ffe6 	bl	8006c26 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006c5a:	7843      	ldrb	r3, [r0, #1]
 8006c5c:	2b05      	cmp	r3, #5
 8006c5e:	d1f3      	bne.n	8006c48 <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8006c60:	7883      	ldrb	r3, [r0, #2]
 8006c62:	42ab      	cmp	r3, r5
 8006c64:	d1f0      	bne.n	8006c48 <USBD_GetEpDesc+0x14>
 8006c66:	e000      	b.n	8006c6a <USBD_GetEpDesc+0x36>
 8006c68:	2000      	movs	r0, #0
}
 8006c6a:	b003      	add	sp, #12
 8006c6c:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006c6e:	2000      	movs	r0, #0
}
 8006c70:	4770      	bx	lr

08006c72 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c72:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8006c74:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8006c76:	e002      	b.n	8006c7e <USBD_GetLen+0xc>
  {
    len++;
 8006c78:	3001      	adds	r0, #1
 8006c7a:	b2c0      	uxtb	r0, r0
    pbuff++;
 8006c7c:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8006c7e:	781a      	ldrb	r2, [r3, #0]
 8006c80:	2a00      	cmp	r2, #0
 8006c82:	d1f9      	bne.n	8006c78 <USBD_GetLen+0x6>
  }

  return len;
}
 8006c84:	4770      	bx	lr

08006c86 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8006c86:	780b      	ldrb	r3, [r1, #0]
 8006c88:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c8a:	784b      	ldrb	r3, [r1, #1]
 8006c8c:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8006c8e:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8006c90:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8006c96:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8006c98:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8006c9a:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8006ca0:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8006ca2:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ca4:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ca6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8006caa:	80c3      	strh	r3, [r0, #6]
}
 8006cac:	4770      	bx	lr

08006cae <USBD_CtlError>:
{
 8006cae:	b510      	push	{r4, lr}
 8006cb0:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cb2:	2180      	movs	r1, #128	@ 0x80
 8006cb4:	f7ff fdac 	bl	8006810 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f7ff fda8 	bl	8006810 <USBD_LL_StallEP>
}
 8006cc0:	bd10      	pop	{r4, pc}

08006cc2 <USBD_GetDescriptor>:
{
 8006cc2:	b530      	push	{r4, r5, lr}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8006cd0:	884a      	ldrh	r2, [r1, #2]
 8006cd2:	0a13      	lsrs	r3, r2, #8
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	2b06      	cmp	r3, #6
 8006cd8:	f200 80aa 	bhi.w	8006e30 <USBD_GetDescriptor+0x16e>
 8006cdc:	e8df f003 	tbb	[pc, r3]
 8006ce0:	a8321e04 	.word	0xa8321e04
 8006ce4:	8ca8      	.short	0x8ca8
 8006ce6:	99          	.byte	0x99
 8006ce7:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ce8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f10d 0106 	add.w	r1, sp, #6
 8006cf2:	7c00      	ldrb	r0, [r0, #16]
 8006cf4:	4798      	blx	r3
  if (req->wLength != 0U)
 8006cf6:	88ea      	ldrh	r2, [r5, #6]
 8006cf8:	2a00      	cmp	r2, #0
 8006cfa:	f000 80a3 	beq.w	8006e44 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 8006cfe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 8099 	beq.w	8006e3a <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	bf28      	it	cs
 8006d0c:	461a      	movcs	r2, r3
 8006d0e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d12:	4601      	mov	r1, r0
 8006d14:	4620      	mov	r0, r4
 8006d16:	f000 fbe1 	bl	80074dc <USBD_CtlSendData>
 8006d1a:	e08c      	b.n	8006e36 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d1c:	7c03      	ldrb	r3, [r0, #16]
 8006d1e:	b943      	cbnz	r3, 8006d32 <USBD_GetDescriptor+0x70>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006d20:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d26:	f10d 0006 	add.w	r0, sp, #6
 8006d2a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006d30:	e7e1      	b.n	8006cf6 <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006d32:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d38:	f10d 0006 	add.w	r0, sp, #6
 8006d3c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006d42:	e7d8      	b.n	8006cf6 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	2a05      	cmp	r2, #5
 8006d48:	d852      	bhi.n	8006df0 <USBD_GetDescriptor+0x12e>
 8006d4a:	e8df f002 	tbb	[pc, r2]
 8006d4e:	1003      	.short	0x1003
 8006d50:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d54:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	b123      	cbz	r3, 8006d66 <USBD_GetDescriptor+0xa4>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d5c:	f10d 0106 	add.w	r1, sp, #6
 8006d60:	7c00      	ldrb	r0, [r0, #16]
 8006d62:	4798      	blx	r3
  if (err != 0U)
 8006d64:	e7c7      	b.n	8006cf6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006d66:	4629      	mov	r1, r5
 8006d68:	f7ff ffa1 	bl	8006cae <USBD_CtlError>
  if (err != 0U)
 8006d6c:	e063      	b.n	8006e36 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d6e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	b123      	cbz	r3, 8006d80 <USBD_GetDescriptor+0xbe>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d76:	f10d 0106 	add.w	r1, sp, #6
 8006d7a:	7c00      	ldrb	r0, [r0, #16]
 8006d7c:	4798      	blx	r3
  if (err != 0U)
 8006d7e:	e7ba      	b.n	8006cf6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006d80:	4629      	mov	r1, r5
 8006d82:	f7ff ff94 	bl	8006cae <USBD_CtlError>
  if (err != 0U)
 8006d86:	e056      	b.n	8006e36 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d88:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	b123      	cbz	r3, 8006d9a <USBD_GetDescriptor+0xd8>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d90:	f10d 0106 	add.w	r1, sp, #6
 8006d94:	7c00      	ldrb	r0, [r0, #16]
 8006d96:	4798      	blx	r3
  if (err != 0U)
 8006d98:	e7ad      	b.n	8006cf6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	f7ff ff87 	bl	8006cae <USBD_CtlError>
  if (err != 0U)
 8006da0:	e049      	b.n	8006e36 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006da2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	b123      	cbz	r3, 8006db4 <USBD_GetDescriptor+0xf2>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006daa:	f10d 0106 	add.w	r1, sp, #6
 8006dae:	7c00      	ldrb	r0, [r0, #16]
 8006db0:	4798      	blx	r3
  if (err != 0U)
 8006db2:	e7a0      	b.n	8006cf6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006db4:	4629      	mov	r1, r5
 8006db6:	f7ff ff7a 	bl	8006cae <USBD_CtlError>
  if (err != 0U)
 8006dba:	e03c      	b.n	8006e36 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006dbc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	b123      	cbz	r3, 8006dce <USBD_GetDescriptor+0x10c>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006dc4:	f10d 0106 	add.w	r1, sp, #6
 8006dc8:	7c00      	ldrb	r0, [r0, #16]
 8006dca:	4798      	blx	r3
  if (err != 0U)
 8006dcc:	e793      	b.n	8006cf6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006dce:	4629      	mov	r1, r5
 8006dd0:	f7ff ff6d 	bl	8006cae <USBD_CtlError>
  if (err != 0U)
 8006dd4:	e02f      	b.n	8006e36 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006dd6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	b123      	cbz	r3, 8006de8 <USBD_GetDescriptor+0x126>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006dde:	f10d 0106 	add.w	r1, sp, #6
 8006de2:	7c00      	ldrb	r0, [r0, #16]
 8006de4:	4798      	blx	r3
  if (err != 0U)
 8006de6:	e786      	b.n	8006cf6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006de8:	4629      	mov	r1, r5
 8006dea:	f7ff ff60 	bl	8006cae <USBD_CtlError>
  if (err != 0U)
 8006dee:	e022      	b.n	8006e36 <USBD_GetDescriptor+0x174>
          USBD_CtlError(pdev, req);
 8006df0:	4629      	mov	r1, r5
 8006df2:	f7ff ff5c 	bl	8006cae <USBD_CtlError>
  if (err != 0U)
 8006df6:	e01e      	b.n	8006e36 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006df8:	7c03      	ldrb	r3, [r0, #16]
 8006dfa:	b933      	cbnz	r3, 8006e0a <USBD_GetDescriptor+0x148>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006dfc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e02:	f10d 0006 	add.w	r0, sp, #6
 8006e06:	4798      	blx	r3
  if (err != 0U)
 8006e08:	e775      	b.n	8006cf6 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	f7ff ff4f 	bl	8006cae <USBD_CtlError>
  if (err != 0U)
 8006e10:	e011      	b.n	8006e36 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e12:	7c03      	ldrb	r3, [r0, #16]
 8006e14:	b943      	cbnz	r3, 8006e28 <USBD_GetDescriptor+0x166>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006e16:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1c:	f10d 0006 	add.w	r0, sp, #6
 8006e20:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e22:	2307      	movs	r3, #7
 8006e24:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006e26:	e766      	b.n	8006cf6 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8006e28:	4629      	mov	r1, r5
 8006e2a:	f7ff ff40 	bl	8006cae <USBD_CtlError>
  if (err != 0U)
 8006e2e:	e002      	b.n	8006e36 <USBD_GetDescriptor+0x174>
      USBD_CtlError(pdev, req);
 8006e30:	4629      	mov	r1, r5
 8006e32:	f7ff ff3c 	bl	8006cae <USBD_CtlError>
}
 8006e36:	b003      	add	sp, #12
 8006e38:	bd30      	pop	{r4, r5, pc}
      USBD_CtlError(pdev, req);
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f7ff ff36 	bl	8006cae <USBD_CtlError>
 8006e42:	e7f8      	b.n	8006e36 <USBD_GetDescriptor+0x174>
    (void)USBD_CtlSendStatus(pdev);
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 fb75 	bl	8007534 <USBD_CtlSendStatus>
 8006e4a:	e7f4      	b.n	8006e36 <USBD_GetDescriptor+0x174>

08006e4c <USBD_SetAddress>:
{
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e50:	888b      	ldrh	r3, [r1, #4]
 8006e52:	b9f3      	cbnz	r3, 8006e92 <USBD_SetAddress+0x46>
 8006e54:	88cb      	ldrh	r3, [r1, #6]
 8006e56:	b9e3      	cbnz	r3, 8006e92 <USBD_SetAddress+0x46>
 8006e58:	884b      	ldrh	r3, [r1, #2]
 8006e5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e5c:	d819      	bhi.n	8006e92 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e5e:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e62:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d00c      	beq.n	8006e84 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8006e6a:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e6e:	4629      	mov	r1, r5
 8006e70:	f7ff fcde 	bl	8006830 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 fb5d 	bl	8007534 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006e7a:	b135      	cbz	r5, 8006e8a <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006e82:	e009      	b.n	8006e98 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8006e84:	f7ff ff13 	bl	8006cae <USBD_CtlError>
 8006e88:	e006      	b.n	8006e98 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006e90:	e002      	b.n	8006e98 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8006e92:	4620      	mov	r0, r4
 8006e94:	f7ff ff0b 	bl	8006cae <USBD_CtlError>
}
 8006e98:	bd38      	pop	{r3, r4, r5, pc}
	...

08006e9c <USBD_SetConfig>:
{
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8006ea2:	788d      	ldrb	r5, [r1, #2]
 8006ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8006f64 <USBD_SetConfig+0xc8>)
 8006ea6:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ea8:	2d01      	cmp	r5, #1
 8006eaa:	d810      	bhi.n	8006ece <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8006eac:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d00f      	beq.n	8006ed6 <USBD_SetConfig+0x3a>
 8006eb6:	2a03      	cmp	r2, #3
 8006eb8:	d026      	beq.n	8006f08 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 8006eba:	f7ff fef8 	bl	8006cae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ebe:	4b29      	ldr	r3, [pc, #164]	@ (8006f64 <USBD_SetConfig+0xc8>)
 8006ec0:	7819      	ldrb	r1, [r3, #0]
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f7ff fd10 	bl	80068e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006ec8:	2503      	movs	r5, #3
}
 8006eca:	4628      	mov	r0, r5
 8006ecc:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8006ece:	f7ff feee 	bl	8006cae <USBD_CtlError>
    return USBD_FAIL;
 8006ed2:	2503      	movs	r5, #3
 8006ed4:	e7f9      	b.n	8006eca <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8006ed6:	b1a5      	cbz	r5, 8006f02 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 8006ed8:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006eda:	4629      	mov	r1, r5
 8006edc:	f7ff fcfb 	bl	80068d6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	b138      	cbz	r0, 8006ef4 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f7ff fee1 	bl	8006cae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006eec:	2302      	movs	r3, #2
 8006eee:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006ef2:	e7ea      	b.n	8006eca <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 fb1d 	bl	8007534 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006efa:	2303      	movs	r3, #3
 8006efc:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006f00:	e7e3      	b.n	8006eca <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8006f02:	f000 fb17 	bl	8007534 <USBD_CtlSendStatus>
 8006f06:	e7e0      	b.n	8006eca <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8006f08:	b1cd      	cbz	r5, 8006f3e <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 8006f0a:	6841      	ldr	r1, [r0, #4]
 8006f0c:	428d      	cmp	r5, r1
 8006f0e:	d025      	beq.n	8006f5c <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f10:	b2c9      	uxtb	r1, r1
 8006f12:	f7ff fce9 	bl	80068e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f16:	4b13      	ldr	r3, [pc, #76]	@ (8006f64 <USBD_SetConfig+0xc8>)
 8006f18:	7819      	ldrb	r1, [r3, #0]
 8006f1a:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f7ff fcda 	bl	80068d6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006f22:	4605      	mov	r5, r0
 8006f24:	b1b0      	cbz	r0, 8006f54 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 8006f26:	4631      	mov	r1, r6
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f7ff fec0 	bl	8006cae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f2e:	7921      	ldrb	r1, [r4, #4]
 8006f30:	4620      	mov	r0, r4
 8006f32:	f7ff fcd9 	bl	80068e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f36:	2302      	movs	r3, #2
 8006f38:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006f3c:	e7c5      	b.n	8006eca <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f3e:	2302      	movs	r3, #2
 8006f40:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006f44:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f46:	4629      	mov	r1, r5
 8006f48:	f7ff fcce 	bl	80068e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f000 faf1 	bl	8007534 <USBD_CtlSendStatus>
 8006f52:	e7ba      	b.n	8006eca <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8006f54:	4620      	mov	r0, r4
 8006f56:	f000 faed 	bl	8007534 <USBD_CtlSendStatus>
 8006f5a:	e7b6      	b.n	8006eca <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8006f5c:	f000 faea 	bl	8007534 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8006f60:	2500      	movs	r5, #0
 8006f62:	e7b2      	b.n	8006eca <USBD_SetConfig+0x2e>
 8006f64:	20006418 	.word	0x20006418

08006f68 <USBD_GetConfig>:
{
 8006f68:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8006f6a:	88cb      	ldrh	r3, [r1, #6]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d10b      	bne.n	8006f88 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8006f70:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d909      	bls.n	8006f8e <USBD_GetConfig+0x26>
 8006f7a:	2a03      	cmp	r2, #3
 8006f7c:	d111      	bne.n	8006fa2 <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f7e:	2201      	movs	r2, #1
 8006f80:	1d01      	adds	r1, r0, #4
 8006f82:	f000 faab 	bl	80074dc <USBD_CtlSendData>
        break;
 8006f86:	e001      	b.n	8006f8c <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8006f88:	f7ff fe91 	bl	8006cae <USBD_CtlError>
}
 8006f8c:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8006f8e:	b252      	sxtb	r2, r2
 8006f90:	b13a      	cbz	r2, 8006fa2 <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 8006f92:	4601      	mov	r1, r0
 8006f94:	2300      	movs	r3, #0
 8006f96:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f000 fa9e 	bl	80074dc <USBD_CtlSendData>
        break;
 8006fa0:	e7f4      	b.n	8006f8c <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 8006fa2:	f7ff fe84 	bl	8006cae <USBD_CtlError>
}
 8006fa6:	e7f1      	b.n	8006f8c <USBD_GetConfig+0x24>

08006fa8 <USBD_GetStatus>:
{
 8006fa8:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8006faa:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d812      	bhi.n	8006fda <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8006fb4:	88cb      	ldrh	r3, [r1, #6]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d10c      	bne.n	8006fd4 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8006fbe:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8006fc2:	b10b      	cbz	r3, 8006fc8 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006fc8:	2202      	movs	r2, #2
 8006fca:	f100 010c 	add.w	r1, r0, #12
 8006fce:	f000 fa85 	bl	80074dc <USBD_CtlSendData>
}
 8006fd2:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8006fd4:	f7ff fe6b 	bl	8006cae <USBD_CtlError>
        break;
 8006fd8:	e7fb      	b.n	8006fd2 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8006fda:	f7ff fe68 	bl	8006cae <USBD_CtlError>
}
 8006fde:	e7f8      	b.n	8006fd2 <USBD_GetStatus+0x2a>

08006fe0 <USBD_SetFeature>:
{
 8006fe0:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fe2:	884b      	ldrh	r3, [r1, #2]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d004      	beq.n	8006ff2 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d007      	beq.n	8006ffc <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 8006fec:	f7ff fe5f 	bl	8006cae <USBD_CtlError>
}
 8006ff0:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8006ff2:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ff6:	f000 fa9d 	bl	8007534 <USBD_CtlSendStatus>
 8006ffa:	e7f9      	b.n	8006ff0 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006ffc:	888b      	ldrh	r3, [r1, #4]
 8006ffe:	0a1b      	lsrs	r3, r3, #8
 8007000:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007004:	f000 fa96 	bl	8007534 <USBD_CtlSendStatus>
 8007008:	e7f2      	b.n	8006ff0 <USBD_SetFeature+0x10>

0800700a <USBD_ClrFeature>:
{
 800700a:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800700c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007010:	3b01      	subs	r3, #1
 8007012:	2b02      	cmp	r3, #2
 8007014:	d809      	bhi.n	800702a <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007016:	884b      	ldrh	r3, [r1, #2]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d000      	beq.n	800701e <USBD_ClrFeature+0x14>
}
 800701c:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007024:	f000 fa86 	bl	8007534 <USBD_CtlSendStatus>
 8007028:	e7f8      	b.n	800701c <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800702a:	f7ff fe40 	bl	8006cae <USBD_CtlError>
}
 800702e:	e7f5      	b.n	800701c <USBD_ClrFeature+0x12>

08007030 <USBD_StdDevReq>:
{
 8007030:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007032:	780c      	ldrb	r4, [r1, #0]
 8007034:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8007038:	2c20      	cmp	r4, #32
 800703a:	d006      	beq.n	800704a <USBD_StdDevReq+0x1a>
 800703c:	2c40      	cmp	r4, #64	@ 0x40
 800703e:	d004      	beq.n	800704a <USBD_StdDevReq+0x1a>
 8007040:	b16c      	cbz	r4, 800705e <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8007042:	f7ff fe34 	bl	8006cae <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007046:	2400      	movs	r4, #0
      break;
 8007048:	e007      	b.n	800705a <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800704a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800704e:	33ae      	adds	r3, #174	@ 0xae
 8007050:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	4798      	blx	r3
 8007058:	4604      	mov	r4, r0
}
 800705a:	4620      	mov	r0, r4
 800705c:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800705e:	784d      	ldrb	r5, [r1, #1]
 8007060:	2d09      	cmp	r5, #9
 8007062:	d81d      	bhi.n	80070a0 <USBD_StdDevReq+0x70>
 8007064:	e8df f005 	tbb	[pc, r5]
 8007068:	161c1912 	.word	0x161c1912
 800706c:	1c05081c 	.word	0x1c05081c
 8007070:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8007072:	f7ff fe26 	bl	8006cc2 <USBD_GetDescriptor>
          break;
 8007076:	e7f0      	b.n	800705a <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 8007078:	f7ff fee8 	bl	8006e4c <USBD_SetAddress>
          break;
 800707c:	e7ed      	b.n	800705a <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 800707e:	f7ff ff0d 	bl	8006e9c <USBD_SetConfig>
 8007082:	4604      	mov	r4, r0
          break;
 8007084:	e7e9      	b.n	800705a <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 8007086:	f7ff ff6f 	bl	8006f68 <USBD_GetConfig>
          break;
 800708a:	e7e6      	b.n	800705a <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 800708c:	f7ff ff8c 	bl	8006fa8 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8007090:	462c      	mov	r4, r5
          break;
 8007092:	e7e2      	b.n	800705a <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 8007094:	f7ff ffa4 	bl	8006fe0 <USBD_SetFeature>
          break;
 8007098:	e7df      	b.n	800705a <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 800709a:	f7ff ffb6 	bl	800700a <USBD_ClrFeature>
          break;
 800709e:	e7dc      	b.n	800705a <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 80070a0:	f7ff fe05 	bl	8006cae <USBD_CtlError>
          break;
 80070a4:	e7d9      	b.n	800705a <USBD_StdDevReq+0x2a>

080070a6 <USBD_StdItfReq>:
{
 80070a6:	b570      	push	{r4, r5, r6, lr}
 80070a8:	4605      	mov	r5, r0
 80070aa:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ac:	780b      	ldrb	r3, [r1, #0]
 80070ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d007      	beq.n	80070c6 <USBD_StdItfReq+0x20>
 80070b6:	2b40      	cmp	r3, #64	@ 0x40
 80070b8:	d005      	beq.n	80070c6 <USBD_StdItfReq+0x20>
 80070ba:	b123      	cbz	r3, 80070c6 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 80070bc:	f7ff fdf7 	bl	8006cae <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80070c0:	2600      	movs	r6, #0
}
 80070c2:	4630      	mov	r0, r6
 80070c4:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80070c6:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 80070ca:	3b01      	subs	r3, #1
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d826      	bhi.n	800711e <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070d0:	7921      	ldrb	r1, [r4, #4]
 80070d2:	2901      	cmp	r1, #1
 80070d4:	d905      	bls.n	80070e2 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 80070d6:	4621      	mov	r1, r4
 80070d8:	4628      	mov	r0, r5
 80070da:	f7ff fde8 	bl	8006cae <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80070de:	2600      	movs	r6, #0
 80070e0:	e7ef      	b.n	80070c2 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070e2:	4628      	mov	r0, r5
 80070e4:	f7ff fcd2 	bl	8006a8c <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070e8:	b968      	cbnz	r0, 8007106 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 80070ea:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 80070ee:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80070f2:	6891      	ldr	r1, [r2, #8]
 80070f4:	b189      	cbz	r1, 800711a <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 80070f6:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80070fa:	6893      	ldr	r3, [r2, #8]
 80070fc:	4621      	mov	r1, r4
 80070fe:	4628      	mov	r0, r5
 8007100:	4798      	blx	r3
 8007102:	4606      	mov	r6, r0
 8007104:	e000      	b.n	8007108 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 8007106:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007108:	88e3      	ldrh	r3, [r4, #6]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1d9      	bne.n	80070c2 <USBD_StdItfReq+0x1c>
 800710e:	2e00      	cmp	r6, #0
 8007110:	d1d7      	bne.n	80070c2 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8007112:	4628      	mov	r0, r5
 8007114:	f000 fa0e 	bl	8007534 <USBD_CtlSendStatus>
 8007118:	e7d3      	b.n	80070c2 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 800711a:	2603      	movs	r6, #3
 800711c:	e7f4      	b.n	8007108 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 800711e:	4621      	mov	r1, r4
 8007120:	4628      	mov	r0, r5
 8007122:	f7ff fdc4 	bl	8006cae <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007126:	2600      	movs	r6, #0
          break;
 8007128:	e7cb      	b.n	80070c2 <USBD_StdItfReq+0x1c>

0800712a <USBD_StdEPReq>:
{
 800712a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800712e:	4606      	mov	r6, r0
 8007130:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8007132:	888b      	ldrh	r3, [r1, #4]
 8007134:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007136:	780c      	ldrb	r4, [r1, #0]
 8007138:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800713c:	2c20      	cmp	r4, #32
 800713e:	d008      	beq.n	8007152 <USBD_StdEPReq+0x28>
 8007140:	2c40      	cmp	r4, #64	@ 0x40
 8007142:	d006      	beq.n	8007152 <USBD_StdEPReq+0x28>
 8007144:	b1dc      	cbz	r4, 800717e <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 8007146:	f7ff fdb2 	bl	8006cae <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800714a:	2400      	movs	r4, #0
}
 800714c:	4620      	mov	r0, r4
 800714e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007152:	4639      	mov	r1, r7
 8007154:	4630      	mov	r0, r6
 8007156:	f7ff fc9b 	bl	8006a90 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800715a:	4604      	mov	r4, r0
 800715c:	2800      	cmp	r0, #0
 800715e:	f040 80fc 	bne.w	800735a <USBD_StdEPReq+0x230>
        pdev->classId = idx;
 8007162:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 8007166:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800716a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0eb      	beq.n	800714c <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007174:	4629      	mov	r1, r5
 8007176:	4630      	mov	r0, r6
 8007178:	4798      	blx	r3
 800717a:	4604      	mov	r4, r0
 800717c:	e7e6      	b.n	800714c <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800717e:	f891 8001 	ldrb.w	r8, [r1, #1]
 8007182:	f1b8 0f01 	cmp.w	r8, #1
 8007186:	d031      	beq.n	80071ec <USBD_StdEPReq+0xc2>
 8007188:	f1b8 0f03 	cmp.w	r8, #3
 800718c:	d005      	beq.n	800719a <USBD_StdEPReq+0x70>
 800718e:	f1b8 0f00 	cmp.w	r8, #0
 8007192:	d067      	beq.n	8007264 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 8007194:	f7ff fd8b 	bl	8006cae <USBD_CtlError>
          break;
 8007198:	e7d8      	b.n	800714c <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800719a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d004      	beq.n	80071ae <USBD_StdEPReq+0x84>
 80071a4:	2a03      	cmp	r2, #3
 80071a6:	d012      	beq.n	80071ce <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 80071a8:	f7ff fd81 	bl	8006cae <USBD_CtlError>
              break;
 80071ac:	e7ce      	b.n	800714c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071ae:	b10f      	cbz	r7, 80071b4 <USBD_StdEPReq+0x8a>
 80071b0:	2f80      	cmp	r7, #128	@ 0x80
 80071b2:	d104      	bne.n	80071be <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 80071b4:	4629      	mov	r1, r5
 80071b6:	4630      	mov	r0, r6
 80071b8:	f7ff fd79 	bl	8006cae <USBD_CtlError>
 80071bc:	e7c6      	b.n	800714c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071be:	4639      	mov	r1, r7
 80071c0:	f7ff fb26 	bl	8006810 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071c4:	2180      	movs	r1, #128	@ 0x80
 80071c6:	4630      	mov	r0, r6
 80071c8:	f7ff fb22 	bl	8006810 <USBD_LL_StallEP>
 80071cc:	e7be      	b.n	800714c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071ce:	884b      	ldrh	r3, [r1, #2]
 80071d0:	b923      	cbnz	r3, 80071dc <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071d2:	b11f      	cbz	r7, 80071dc <USBD_StdEPReq+0xb2>
 80071d4:	2f80      	cmp	r7, #128	@ 0x80
 80071d6:	d001      	beq.n	80071dc <USBD_StdEPReq+0xb2>
 80071d8:	88cb      	ldrh	r3, [r1, #6]
 80071da:	b11b      	cbz	r3, 80071e4 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 80071dc:	4630      	mov	r0, r6
 80071de:	f000 f9a9 	bl	8007534 <USBD_CtlSendStatus>
              break;
 80071e2:	e7b3      	b.n	800714c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071e4:	4639      	mov	r1, r7
 80071e6:	f7ff fb13 	bl	8006810 <USBD_LL_StallEP>
 80071ea:	e7f7      	b.n	80071dc <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 80071ec:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d004      	beq.n	8007200 <USBD_StdEPReq+0xd6>
 80071f6:	2a03      	cmp	r2, #3
 80071f8:	d012      	beq.n	8007220 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 80071fa:	f7ff fd58 	bl	8006cae <USBD_CtlError>
              break;
 80071fe:	e7a5      	b.n	800714c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007200:	b10f      	cbz	r7, 8007206 <USBD_StdEPReq+0xdc>
 8007202:	2f80      	cmp	r7, #128	@ 0x80
 8007204:	d104      	bne.n	8007210 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 8007206:	4629      	mov	r1, r5
 8007208:	4630      	mov	r0, r6
 800720a:	f7ff fd50 	bl	8006cae <USBD_CtlError>
 800720e:	e79d      	b.n	800714c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007210:	4639      	mov	r1, r7
 8007212:	f7ff fafd 	bl	8006810 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007216:	2180      	movs	r1, #128	@ 0x80
 8007218:	4630      	mov	r0, r6
 800721a:	f7ff faf9 	bl	8006810 <USBD_LL_StallEP>
 800721e:	e795      	b.n	800714c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007220:	884b      	ldrh	r3, [r1, #2]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d192      	bne.n	800714c <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8007226:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800722a:	d117      	bne.n	800725c <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 800722c:	4630      	mov	r0, r6
 800722e:	f000 f981 	bl	8007534 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007232:	4639      	mov	r1, r7
 8007234:	4630      	mov	r0, r6
 8007236:	f7ff fc2b 	bl	8006a90 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800723a:	2800      	cmp	r0, #0
 800723c:	d186      	bne.n	800714c <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 800723e:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8007242:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8007246:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800724a:	6892      	ldr	r2, [r2, #8]
 800724c:	2a00      	cmp	r2, #0
 800724e:	f000 8086 	beq.w	800735e <USBD_StdEPReq+0x234>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007252:	4629      	mov	r1, r5
 8007254:	4630      	mov	r0, r6
 8007256:	4790      	blx	r2
 8007258:	4604      	mov	r4, r0
 800725a:	e777      	b.n	800714c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800725c:	4639      	mov	r1, r7
 800725e:	f7ff fadf 	bl	8006820 <USBD_LL_ClearStallEP>
 8007262:	e7e3      	b.n	800722c <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 8007264:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8007268:	b2d1      	uxtb	r1, r2
 800726a:	2a02      	cmp	r2, #2
 800726c:	d006      	beq.n	800727c <USBD_StdEPReq+0x152>
 800726e:	2903      	cmp	r1, #3
 8007270:	d029      	beq.n	80072c6 <USBD_StdEPReq+0x19c>
              USBD_CtlError(pdev, req);
 8007272:	4629      	mov	r1, r5
 8007274:	f7ff fd1b 	bl	8006cae <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007278:	4644      	mov	r4, r8
              break;
 800727a:	e767      	b.n	800714c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800727c:	b10f      	cbz	r7, 8007282 <USBD_StdEPReq+0x158>
 800727e:	2f80      	cmp	r7, #128	@ 0x80
 8007280:	d113      	bne.n	80072aa <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007282:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007286:	d115      	bne.n	80072b4 <USBD_StdEPReq+0x18a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007288:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800728c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8007290:	00b9      	lsls	r1, r7, #2
 8007292:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8007296:	4431      	add	r1, r6
 8007298:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800729a:	2300      	movs	r3, #0
 800729c:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800729e:	2202      	movs	r2, #2
 80072a0:	4630      	mov	r0, r6
 80072a2:	f000 f91b 	bl	80074dc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80072a6:	4644      	mov	r4, r8
              break;
 80072a8:	e750      	b.n	800714c <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 80072aa:	4629      	mov	r1, r5
 80072ac:	f7ff fcff 	bl	8006cae <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80072b0:	4644      	mov	r4, r8
                break;
 80072b2:	e74b      	b.n	800714c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072b4:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 80072b8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80072bc:	00b9      	lsls	r1, r7, #2
 80072be:	3110      	adds	r1, #16
 80072c0:	4431      	add	r1, r6
 80072c2:	3104      	adds	r1, #4
 80072c4:	e7e9      	b.n	800729a <USBD_StdEPReq+0x170>
              if ((ep_addr & 0x80U) == 0x80U)
 80072c6:	b25b      	sxtb	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	db1f      	blt.n	800730c <USBD_StdEPReq+0x1e2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80072cc:	f007 020f 	and.w	r2, r7, #15
 80072d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80072d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80072d8:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 80072dc:	b322      	cbz	r2, 8007328 <USBD_StdEPReq+0x1fe>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072de:	2b00      	cmp	r3, #0
 80072e0:	db27      	blt.n	8007332 <USBD_StdEPReq+0x208>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072e2:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80072ea:	009c      	lsls	r4, r3, #2
 80072ec:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 80072f0:	4434      	add	r4, r6
 80072f2:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80072f4:	b10f      	cbz	r7, 80072fa <USBD_StdEPReq+0x1d0>
 80072f6:	2f80      	cmp	r7, #128	@ 0x80
 80072f8:	d124      	bne.n	8007344 <USBD_StdEPReq+0x21a>
                pep->status = 0x0000U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072fe:	2202      	movs	r2, #2
 8007300:	4621      	mov	r1, r4
 8007302:	4630      	mov	r0, r6
 8007304:	f000 f8ea 	bl	80074dc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8007308:	4644      	mov	r4, r8
              break;
 800730a:	e71f      	b.n	800714c <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800730c:	f007 020f 	and.w	r2, r7, #15
 8007310:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007314:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007318:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800731a:	2a00      	cmp	r2, #0
 800731c:	d1df      	bne.n	80072de <USBD_StdEPReq+0x1b4>
                  USBD_CtlError(pdev, req);
 800731e:	4629      	mov	r1, r5
 8007320:	f7ff fcc5 	bl	8006cae <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007324:	4644      	mov	r4, r8
                  break;
 8007326:	e711      	b.n	800714c <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8007328:	4629      	mov	r1, r5
 800732a:	f7ff fcc0 	bl	8006cae <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800732e:	4644      	mov	r4, r8
                  break;
 8007330:	e70c      	b.n	800714c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007332:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 8007336:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800733a:	009c      	lsls	r4, r3, #2
 800733c:	3410      	adds	r4, #16
 800733e:	4434      	add	r4, r6
 8007340:	3404      	adds	r4, #4
 8007342:	e7d7      	b.n	80072f4 <USBD_StdEPReq+0x1ca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007344:	4639      	mov	r1, r7
 8007346:	4630      	mov	r0, r6
 8007348:	f7ff fa1c 	bl	8006784 <USBD_LL_IsStallEP>
 800734c:	b110      	cbz	r0, 8007354 <USBD_StdEPReq+0x22a>
                pep->status = 0x0001U;
 800734e:	2301      	movs	r3, #1
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	e7d4      	b.n	80072fe <USBD_StdEPReq+0x1d4>
                pep->status = 0x0000U;
 8007354:	2300      	movs	r3, #0
 8007356:	6023      	str	r3, [r4, #0]
 8007358:	e7d1      	b.n	80072fe <USBD_StdEPReq+0x1d4>
  USBD_StatusTypeDef ret = USBD_OK;
 800735a:	2400      	movs	r4, #0
 800735c:	e6f6      	b.n	800714c <USBD_StdEPReq+0x22>
 800735e:	4604      	mov	r4, r0
 8007360:	e6f4      	b.n	800714c <USBD_StdEPReq+0x22>

08007362 <USBD_GetString>:
  if (desc == NULL)
 8007362:	b300      	cbz	r0, 80073a6 <USBD_GetString+0x44>
{
 8007364:	b570      	push	{r4, r5, r6, lr}
 8007366:	460d      	mov	r5, r1
 8007368:	4616      	mov	r6, r2
 800736a:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800736c:	f7ff fc81 	bl	8006c72 <USBD_GetLen>
 8007370:	3001      	adds	r0, #1
 8007372:	0043      	lsls	r3, r0, #1
 8007374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007378:	d806      	bhi.n	8007388 <USBD_GetString+0x26>
 800737a:	b29b      	uxth	r3, r3
 800737c:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800737e:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007380:	2303      	movs	r3, #3
 8007382:	706b      	strb	r3, [r5, #1]
  idx++;
 8007384:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8007386:	e00a      	b.n	800739e <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007388:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800738c:	e7f6      	b.n	800737c <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 800738e:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8007390:	3401      	adds	r4, #1
    idx++;
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8007396:	2100      	movs	r1, #0
 8007398:	54a9      	strb	r1, [r5, r2]
    idx++;
 800739a:	3302      	adds	r3, #2
 800739c:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800739e:	7822      	ldrb	r2, [r4, #0]
 80073a0:	2a00      	cmp	r2, #0
 80073a2:	d1f4      	bne.n	800738e <USBD_GetString+0x2c>
}
 80073a4:	bd70      	pop	{r4, r5, r6, pc}
 80073a6:	4770      	bx	lr

080073a8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073a8:	2312      	movs	r3, #18
 80073aa:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80073ac:	4800      	ldr	r0, [pc, #0]	@ (80073b0 <USBD_FS_DeviceDescriptor+0x8>)
 80073ae:	4770      	bx	lr
 80073b0:	200000cc 	.word	0x200000cc

080073b4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073b4:	2304      	movs	r3, #4
 80073b6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80073b8:	4800      	ldr	r0, [pc, #0]	@ (80073bc <USBD_FS_LangIDStrDescriptor+0x8>)
 80073ba:	4770      	bx	lr
 80073bc:	200000c8 	.word	0x200000c8

080073c0 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80073c0:	2300      	movs	r3, #0
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d21e      	bcs.n	8007404 <IntToUnicode+0x44>
{
 80073c6:	b500      	push	{lr}
 80073c8:	e010      	b.n	80073ec <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80073ca:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 80073ce:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 80073d2:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 80073d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80073d8:	f10c 0c01 	add.w	ip, ip, #1
 80073dc:	f04f 0e00 	mov.w	lr, #0
 80073e0:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 80073e4:	3301      	adds	r3, #1
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d209      	bcs.n	8007400 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 80073ec:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 80073f0:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 80073f4:	d2e9      	bcs.n	80073ca <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 80073f6:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 80073fa:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 80073fe:	e7e8      	b.n	80073d2 <IntToUnicode+0x12>
  }
}
 8007400:	f85d fb04 	ldr.w	pc, [sp], #4
 8007404:	4770      	bx	lr
	...

08007408 <Get_SerialNum>:
{
 8007408:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800740a:	4b0b      	ldr	r3, [pc, #44]	@ (8007438 <Get_SerialNum+0x30>)
 800740c:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007410:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007414:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 8007418:	18c0      	adds	r0, r0, r3
 800741a:	d100      	bne.n	800741e <Get_SerialNum+0x16>
}
 800741c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800741e:	4d07      	ldr	r5, [pc, #28]	@ (800743c <Get_SerialNum+0x34>)
 8007420:	2208      	movs	r2, #8
 8007422:	4629      	mov	r1, r5
 8007424:	f7ff ffcc 	bl	80073c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007428:	2204      	movs	r2, #4
 800742a:	f105 0110 	add.w	r1, r5, #16
 800742e:	4620      	mov	r0, r4
 8007430:	f7ff ffc6 	bl	80073c0 <IntToUnicode>
}
 8007434:	e7f2      	b.n	800741c <Get_SerialNum+0x14>
 8007436:	bf00      	nop
 8007438:	1fff7000 	.word	0x1fff7000
 800743c:	200000ae 	.word	0x200000ae

08007440 <USBD_FS_SerialStrDescriptor>:
{
 8007440:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8007442:	231a      	movs	r3, #26
 8007444:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8007446:	f7ff ffdf 	bl	8007408 <Get_SerialNum>
}
 800744a:	4801      	ldr	r0, [pc, #4]	@ (8007450 <USBD_FS_SerialStrDescriptor+0x10>)
 800744c:	bd08      	pop	{r3, pc}
 800744e:	bf00      	nop
 8007450:	200000ac 	.word	0x200000ac

08007454 <USBD_FS_ProductStrDescriptor>:
{
 8007454:	b508      	push	{r3, lr}
 8007456:	460a      	mov	r2, r1
  if(speed == 0)
 8007458:	b928      	cbnz	r0, 8007466 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800745a:	4905      	ldr	r1, [pc, #20]	@ (8007470 <USBD_FS_ProductStrDescriptor+0x1c>)
 800745c:	4805      	ldr	r0, [pc, #20]	@ (8007474 <USBD_FS_ProductStrDescriptor+0x20>)
 800745e:	f7ff ff80 	bl	8007362 <USBD_GetString>
}
 8007462:	4803      	ldr	r0, [pc, #12]	@ (8007470 <USBD_FS_ProductStrDescriptor+0x1c>)
 8007464:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007466:	4902      	ldr	r1, [pc, #8]	@ (8007470 <USBD_FS_ProductStrDescriptor+0x1c>)
 8007468:	4802      	ldr	r0, [pc, #8]	@ (8007474 <USBD_FS_ProductStrDescriptor+0x20>)
 800746a:	f7ff ff7a 	bl	8007362 <USBD_GetString>
 800746e:	e7f8      	b.n	8007462 <USBD_FS_ProductStrDescriptor+0xe>
 8007470:	2000641c 	.word	0x2000641c
 8007474:	080082c4 	.word	0x080082c4

08007478 <USBD_FS_ManufacturerStrDescriptor>:
{
 8007478:	b510      	push	{r4, lr}
 800747a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800747c:	4c03      	ldr	r4, [pc, #12]	@ (800748c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800747e:	4621      	mov	r1, r4
 8007480:	4803      	ldr	r0, [pc, #12]	@ (8007490 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007482:	f7ff ff6e 	bl	8007362 <USBD_GetString>
}
 8007486:	4620      	mov	r0, r4
 8007488:	bd10      	pop	{r4, pc}
 800748a:	bf00      	nop
 800748c:	2000641c 	.word	0x2000641c
 8007490:	080082e0 	.word	0x080082e0

08007494 <USBD_FS_ConfigStrDescriptor>:
{
 8007494:	b508      	push	{r3, lr}
 8007496:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8007498:	b928      	cbnz	r0, 80074a6 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800749a:	4905      	ldr	r1, [pc, #20]	@ (80074b0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800749c:	4805      	ldr	r0, [pc, #20]	@ (80074b4 <USBD_FS_ConfigStrDescriptor+0x20>)
 800749e:	f7ff ff60 	bl	8007362 <USBD_GetString>
}
 80074a2:	4803      	ldr	r0, [pc, #12]	@ (80074b0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80074a4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074a6:	4902      	ldr	r1, [pc, #8]	@ (80074b0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80074a8:	4802      	ldr	r0, [pc, #8]	@ (80074b4 <USBD_FS_ConfigStrDescriptor+0x20>)
 80074aa:	f7ff ff5a 	bl	8007362 <USBD_GetString>
 80074ae:	e7f8      	b.n	80074a2 <USBD_FS_ConfigStrDescriptor+0xe>
 80074b0:	2000641c 	.word	0x2000641c
 80074b4:	080082f4 	.word	0x080082f4

080074b8 <USBD_FS_InterfaceStrDescriptor>:
{
 80074b8:	b508      	push	{r3, lr}
 80074ba:	460a      	mov	r2, r1
  if(speed == 0)
 80074bc:	b928      	cbnz	r0, 80074ca <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074be:	4905      	ldr	r1, [pc, #20]	@ (80074d4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80074c0:	4805      	ldr	r0, [pc, #20]	@ (80074d8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80074c2:	f7ff ff4e 	bl	8007362 <USBD_GetString>
}
 80074c6:	4803      	ldr	r0, [pc, #12]	@ (80074d4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80074c8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074ca:	4902      	ldr	r1, [pc, #8]	@ (80074d4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80074cc:	4802      	ldr	r0, [pc, #8]	@ (80074d8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80074ce:	f7ff ff48 	bl	8007362 <USBD_GetString>
 80074d2:	e7f8      	b.n	80074c6 <USBD_FS_InterfaceStrDescriptor+0xe>
 80074d4:	2000641c 	.word	0x2000641c
 80074d8:	08008300 	.word	0x08008300

080074dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074dc:	b508      	push	{r3, lr}
 80074de:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074e0:	2202      	movs	r2, #2
 80074e2:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80074e6:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80074e8:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074ea:	460a      	mov	r2, r1
 80074ec:	2100      	movs	r1, #0
 80074ee:	f7ff f9a7 	bl	8006840 <USBD_LL_Transmit>

  return USBD_OK;
}
 80074f2:	2000      	movs	r0, #0
 80074f4:	bd08      	pop	{r3, pc}

080074f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80074f6:	b508      	push	{r3, lr}
 80074f8:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074fa:	460a      	mov	r2, r1
 80074fc:	2100      	movs	r1, #0
 80074fe:	f7ff f99f 	bl	8006840 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007502:	2000      	movs	r0, #0
 8007504:	bd08      	pop	{r3, pc}

08007506 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007506:	b508      	push	{r3, lr}
 8007508:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800750a:	2203      	movs	r2, #3
 800750c:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007510:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007514:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007518:	460a      	mov	r2, r1
 800751a:	2100      	movs	r1, #0
 800751c:	f7ff f998 	bl	8006850 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007520:	2000      	movs	r0, #0
 8007522:	bd08      	pop	{r3, pc}

08007524 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007524:	b508      	push	{r3, lr}
 8007526:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007528:	460a      	mov	r2, r1
 800752a:	2100      	movs	r1, #0
 800752c:	f7ff f990 	bl	8006850 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007530:	2000      	movs	r0, #0
 8007532:	bd08      	pop	{r3, pc}

08007534 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007534:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007536:	2204      	movs	r2, #4
 8007538:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800753c:	2300      	movs	r3, #0
 800753e:	461a      	mov	r2, r3
 8007540:	4619      	mov	r1, r3
 8007542:	f7ff f97d 	bl	8006840 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007546:	2000      	movs	r0, #0
 8007548:	bd08      	pop	{r3, pc}

0800754a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800754a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800754c:	2205      	movs	r2, #5
 800754e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007552:	2300      	movs	r3, #0
 8007554:	461a      	mov	r2, r3
 8007556:	4619      	mov	r1, r3
 8007558:	f7ff f97a 	bl	8006850 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800755c:	2000      	movs	r0, #0
 800755e:	bd08      	pop	{r3, pc}

08007560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007598 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007564:	f7fd fb5a 	bl	8004c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007568:	480c      	ldr	r0, [pc, #48]	@ (800759c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800756a:	490d      	ldr	r1, [pc, #52]	@ (80075a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800756c:	4a0d      	ldr	r2, [pc, #52]	@ (80075a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800756e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007570:	e002      	b.n	8007578 <LoopCopyDataInit>

08007572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007576:	3304      	adds	r3, #4

08007578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800757a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800757c:	d3f9      	bcc.n	8007572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800757e:	4a0a      	ldr	r2, [pc, #40]	@ (80075a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007580:	4c0a      	ldr	r4, [pc, #40]	@ (80075ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8007582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007584:	e001      	b.n	800758a <LoopFillZerobss>

08007586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007588:	3204      	adds	r2, #4

0800758a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800758a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800758c:	d3fb      	bcc.n	8007586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800758e:	f000 f855 	bl	800763c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007592:	f7f9 fb91 	bl	8000cb8 <main>
  bx  lr    
 8007596:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007598:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800759c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80075a0:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80075a4:	08008398 	.word	0x08008398
  ldr r2, =_sbss
 80075a8:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80075ac:	20006764 	.word	0x20006764

080075b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80075b0:	e7fe      	b.n	80075b0 <ADC_IRQHandler>
	...

080075b4 <sniprintf>:
 80075b4:	b40c      	push	{r2, r3}
 80075b6:	b530      	push	{r4, r5, lr}
 80075b8:	4b18      	ldr	r3, [pc, #96]	@ (800761c <sniprintf+0x68>)
 80075ba:	1e0c      	subs	r4, r1, #0
 80075bc:	681d      	ldr	r5, [r3, #0]
 80075be:	b09d      	sub	sp, #116	@ 0x74
 80075c0:	da08      	bge.n	80075d4 <sniprintf+0x20>
 80075c2:	238b      	movs	r3, #139	@ 0x8b
 80075c4:	602b      	str	r3, [r5, #0]
 80075c6:	f04f 30ff 	mov.w	r0, #4294967295
 80075ca:	b01d      	add	sp, #116	@ 0x74
 80075cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075d0:	b002      	add	sp, #8
 80075d2:	4770      	bx	lr
 80075d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80075d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80075dc:	f04f 0300 	mov.w	r3, #0
 80075e0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80075e2:	bf14      	ite	ne
 80075e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80075e8:	4623      	moveq	r3, r4
 80075ea:	9304      	str	r3, [sp, #16]
 80075ec:	9307      	str	r3, [sp, #28]
 80075ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80075f2:	9002      	str	r0, [sp, #8]
 80075f4:	9006      	str	r0, [sp, #24]
 80075f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80075fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80075fc:	ab21      	add	r3, sp, #132	@ 0x84
 80075fe:	a902      	add	r1, sp, #8
 8007600:	4628      	mov	r0, r5
 8007602:	9301      	str	r3, [sp, #4]
 8007604:	f000 f9a6 	bl	8007954 <_svfiprintf_r>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	bfbc      	itt	lt
 800760c:	238b      	movlt	r3, #139	@ 0x8b
 800760e:	602b      	strlt	r3, [r5, #0]
 8007610:	2c00      	cmp	r4, #0
 8007612:	d0da      	beq.n	80075ca <sniprintf+0x16>
 8007614:	9b02      	ldr	r3, [sp, #8]
 8007616:	2200      	movs	r2, #0
 8007618:	701a      	strb	r2, [r3, #0]
 800761a:	e7d6      	b.n	80075ca <sniprintf+0x16>
 800761c:	200000fc 	.word	0x200000fc

08007620 <memset>:
 8007620:	4402      	add	r2, r0
 8007622:	4603      	mov	r3, r0
 8007624:	4293      	cmp	r3, r2
 8007626:	d100      	bne.n	800762a <memset+0xa>
 8007628:	4770      	bx	lr
 800762a:	f803 1b01 	strb.w	r1, [r3], #1
 800762e:	e7f9      	b.n	8007624 <memset+0x4>

08007630 <__errno>:
 8007630:	4b01      	ldr	r3, [pc, #4]	@ (8007638 <__errno+0x8>)
 8007632:	6818      	ldr	r0, [r3, #0]
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	200000fc 	.word	0x200000fc

0800763c <__libc_init_array>:
 800763c:	b570      	push	{r4, r5, r6, lr}
 800763e:	4b0d      	ldr	r3, [pc, #52]	@ (8007674 <__libc_init_array+0x38>)
 8007640:	4d0d      	ldr	r5, [pc, #52]	@ (8007678 <__libc_init_array+0x3c>)
 8007642:	1b5b      	subs	r3, r3, r5
 8007644:	109c      	asrs	r4, r3, #2
 8007646:	2600      	movs	r6, #0
 8007648:	42a6      	cmp	r6, r4
 800764a:	d109      	bne.n	8007660 <__libc_init_array+0x24>
 800764c:	f000 fde8 	bl	8008220 <_init>
 8007650:	4d0a      	ldr	r5, [pc, #40]	@ (800767c <__libc_init_array+0x40>)
 8007652:	4b0b      	ldr	r3, [pc, #44]	@ (8007680 <__libc_init_array+0x44>)
 8007654:	1b5b      	subs	r3, r3, r5
 8007656:	109c      	asrs	r4, r3, #2
 8007658:	2600      	movs	r6, #0
 800765a:	42a6      	cmp	r6, r4
 800765c:	d105      	bne.n	800766a <__libc_init_array+0x2e>
 800765e:	bd70      	pop	{r4, r5, r6, pc}
 8007660:	f855 3b04 	ldr.w	r3, [r5], #4
 8007664:	4798      	blx	r3
 8007666:	3601      	adds	r6, #1
 8007668:	e7ee      	b.n	8007648 <__libc_init_array+0xc>
 800766a:	f855 3b04 	ldr.w	r3, [r5], #4
 800766e:	4798      	blx	r3
 8007670:	3601      	adds	r6, #1
 8007672:	e7f2      	b.n	800765a <__libc_init_array+0x1e>
 8007674:	08008390 	.word	0x08008390
 8007678:	08008390 	.word	0x08008390
 800767c:	08008390 	.word	0x08008390
 8007680:	08008394 	.word	0x08008394

08007684 <__retarget_lock_acquire_recursive>:
 8007684:	4770      	bx	lr

08007686 <__retarget_lock_release_recursive>:
 8007686:	4770      	bx	lr

08007688 <memcpy>:
 8007688:	440a      	add	r2, r1
 800768a:	4291      	cmp	r1, r2
 800768c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007690:	d100      	bne.n	8007694 <memcpy+0xc>
 8007692:	4770      	bx	lr
 8007694:	b510      	push	{r4, lr}
 8007696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800769a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800769e:	4291      	cmp	r1, r2
 80076a0:	d1f9      	bne.n	8007696 <memcpy+0xe>
 80076a2:	bd10      	pop	{r4, pc}

080076a4 <_free_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4605      	mov	r5, r0
 80076a8:	2900      	cmp	r1, #0
 80076aa:	d041      	beq.n	8007730 <_free_r+0x8c>
 80076ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076b0:	1f0c      	subs	r4, r1, #4
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	bfb8      	it	lt
 80076b6:	18e4      	addlt	r4, r4, r3
 80076b8:	f000 f8e0 	bl	800787c <__malloc_lock>
 80076bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007734 <_free_r+0x90>)
 80076be:	6813      	ldr	r3, [r2, #0]
 80076c0:	b933      	cbnz	r3, 80076d0 <_free_r+0x2c>
 80076c2:	6063      	str	r3, [r4, #4]
 80076c4:	6014      	str	r4, [r2, #0]
 80076c6:	4628      	mov	r0, r5
 80076c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076cc:	f000 b8dc 	b.w	8007888 <__malloc_unlock>
 80076d0:	42a3      	cmp	r3, r4
 80076d2:	d908      	bls.n	80076e6 <_free_r+0x42>
 80076d4:	6820      	ldr	r0, [r4, #0]
 80076d6:	1821      	adds	r1, r4, r0
 80076d8:	428b      	cmp	r3, r1
 80076da:	bf01      	itttt	eq
 80076dc:	6819      	ldreq	r1, [r3, #0]
 80076de:	685b      	ldreq	r3, [r3, #4]
 80076e0:	1809      	addeq	r1, r1, r0
 80076e2:	6021      	streq	r1, [r4, #0]
 80076e4:	e7ed      	b.n	80076c2 <_free_r+0x1e>
 80076e6:	461a      	mov	r2, r3
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	b10b      	cbz	r3, 80076f0 <_free_r+0x4c>
 80076ec:	42a3      	cmp	r3, r4
 80076ee:	d9fa      	bls.n	80076e6 <_free_r+0x42>
 80076f0:	6811      	ldr	r1, [r2, #0]
 80076f2:	1850      	adds	r0, r2, r1
 80076f4:	42a0      	cmp	r0, r4
 80076f6:	d10b      	bne.n	8007710 <_free_r+0x6c>
 80076f8:	6820      	ldr	r0, [r4, #0]
 80076fa:	4401      	add	r1, r0
 80076fc:	1850      	adds	r0, r2, r1
 80076fe:	4283      	cmp	r3, r0
 8007700:	6011      	str	r1, [r2, #0]
 8007702:	d1e0      	bne.n	80076c6 <_free_r+0x22>
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	6053      	str	r3, [r2, #4]
 800770a:	4408      	add	r0, r1
 800770c:	6010      	str	r0, [r2, #0]
 800770e:	e7da      	b.n	80076c6 <_free_r+0x22>
 8007710:	d902      	bls.n	8007718 <_free_r+0x74>
 8007712:	230c      	movs	r3, #12
 8007714:	602b      	str	r3, [r5, #0]
 8007716:	e7d6      	b.n	80076c6 <_free_r+0x22>
 8007718:	6820      	ldr	r0, [r4, #0]
 800771a:	1821      	adds	r1, r4, r0
 800771c:	428b      	cmp	r3, r1
 800771e:	bf04      	itt	eq
 8007720:	6819      	ldreq	r1, [r3, #0]
 8007722:	685b      	ldreq	r3, [r3, #4]
 8007724:	6063      	str	r3, [r4, #4]
 8007726:	bf04      	itt	eq
 8007728:	1809      	addeq	r1, r1, r0
 800772a:	6021      	streq	r1, [r4, #0]
 800772c:	6054      	str	r4, [r2, #4]
 800772e:	e7ca      	b.n	80076c6 <_free_r+0x22>
 8007730:	bd38      	pop	{r3, r4, r5, pc}
 8007732:	bf00      	nop
 8007734:	20006760 	.word	0x20006760

08007738 <sbrk_aligned>:
 8007738:	b570      	push	{r4, r5, r6, lr}
 800773a:	4e0f      	ldr	r6, [pc, #60]	@ (8007778 <sbrk_aligned+0x40>)
 800773c:	460c      	mov	r4, r1
 800773e:	6831      	ldr	r1, [r6, #0]
 8007740:	4605      	mov	r5, r0
 8007742:	b911      	cbnz	r1, 800774a <sbrk_aligned+0x12>
 8007744:	f000 fbaa 	bl	8007e9c <_sbrk_r>
 8007748:	6030      	str	r0, [r6, #0]
 800774a:	4621      	mov	r1, r4
 800774c:	4628      	mov	r0, r5
 800774e:	f000 fba5 	bl	8007e9c <_sbrk_r>
 8007752:	1c43      	adds	r3, r0, #1
 8007754:	d103      	bne.n	800775e <sbrk_aligned+0x26>
 8007756:	f04f 34ff 	mov.w	r4, #4294967295
 800775a:	4620      	mov	r0, r4
 800775c:	bd70      	pop	{r4, r5, r6, pc}
 800775e:	1cc4      	adds	r4, r0, #3
 8007760:	f024 0403 	bic.w	r4, r4, #3
 8007764:	42a0      	cmp	r0, r4
 8007766:	d0f8      	beq.n	800775a <sbrk_aligned+0x22>
 8007768:	1a21      	subs	r1, r4, r0
 800776a:	4628      	mov	r0, r5
 800776c:	f000 fb96 	bl	8007e9c <_sbrk_r>
 8007770:	3001      	adds	r0, #1
 8007772:	d1f2      	bne.n	800775a <sbrk_aligned+0x22>
 8007774:	e7ef      	b.n	8007756 <sbrk_aligned+0x1e>
 8007776:	bf00      	nop
 8007778:	2000675c 	.word	0x2000675c

0800777c <_malloc_r>:
 800777c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007780:	1ccd      	adds	r5, r1, #3
 8007782:	f025 0503 	bic.w	r5, r5, #3
 8007786:	3508      	adds	r5, #8
 8007788:	2d0c      	cmp	r5, #12
 800778a:	bf38      	it	cc
 800778c:	250c      	movcc	r5, #12
 800778e:	2d00      	cmp	r5, #0
 8007790:	4606      	mov	r6, r0
 8007792:	db01      	blt.n	8007798 <_malloc_r+0x1c>
 8007794:	42a9      	cmp	r1, r5
 8007796:	d904      	bls.n	80077a2 <_malloc_r+0x26>
 8007798:	230c      	movs	r3, #12
 800779a:	6033      	str	r3, [r6, #0]
 800779c:	2000      	movs	r0, #0
 800779e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007878 <_malloc_r+0xfc>
 80077a6:	f000 f869 	bl	800787c <__malloc_lock>
 80077aa:	f8d8 3000 	ldr.w	r3, [r8]
 80077ae:	461c      	mov	r4, r3
 80077b0:	bb44      	cbnz	r4, 8007804 <_malloc_r+0x88>
 80077b2:	4629      	mov	r1, r5
 80077b4:	4630      	mov	r0, r6
 80077b6:	f7ff ffbf 	bl	8007738 <sbrk_aligned>
 80077ba:	1c43      	adds	r3, r0, #1
 80077bc:	4604      	mov	r4, r0
 80077be:	d158      	bne.n	8007872 <_malloc_r+0xf6>
 80077c0:	f8d8 4000 	ldr.w	r4, [r8]
 80077c4:	4627      	mov	r7, r4
 80077c6:	2f00      	cmp	r7, #0
 80077c8:	d143      	bne.n	8007852 <_malloc_r+0xd6>
 80077ca:	2c00      	cmp	r4, #0
 80077cc:	d04b      	beq.n	8007866 <_malloc_r+0xea>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	4639      	mov	r1, r7
 80077d2:	4630      	mov	r0, r6
 80077d4:	eb04 0903 	add.w	r9, r4, r3
 80077d8:	f000 fb60 	bl	8007e9c <_sbrk_r>
 80077dc:	4581      	cmp	r9, r0
 80077de:	d142      	bne.n	8007866 <_malloc_r+0xea>
 80077e0:	6821      	ldr	r1, [r4, #0]
 80077e2:	1a6d      	subs	r5, r5, r1
 80077e4:	4629      	mov	r1, r5
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7ff ffa6 	bl	8007738 <sbrk_aligned>
 80077ec:	3001      	adds	r0, #1
 80077ee:	d03a      	beq.n	8007866 <_malloc_r+0xea>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	442b      	add	r3, r5
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	f8d8 3000 	ldr.w	r3, [r8]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	bb62      	cbnz	r2, 8007858 <_malloc_r+0xdc>
 80077fe:	f8c8 7000 	str.w	r7, [r8]
 8007802:	e00f      	b.n	8007824 <_malloc_r+0xa8>
 8007804:	6822      	ldr	r2, [r4, #0]
 8007806:	1b52      	subs	r2, r2, r5
 8007808:	d420      	bmi.n	800784c <_malloc_r+0xd0>
 800780a:	2a0b      	cmp	r2, #11
 800780c:	d917      	bls.n	800783e <_malloc_r+0xc2>
 800780e:	1961      	adds	r1, r4, r5
 8007810:	42a3      	cmp	r3, r4
 8007812:	6025      	str	r5, [r4, #0]
 8007814:	bf18      	it	ne
 8007816:	6059      	strne	r1, [r3, #4]
 8007818:	6863      	ldr	r3, [r4, #4]
 800781a:	bf08      	it	eq
 800781c:	f8c8 1000 	streq.w	r1, [r8]
 8007820:	5162      	str	r2, [r4, r5]
 8007822:	604b      	str	r3, [r1, #4]
 8007824:	4630      	mov	r0, r6
 8007826:	f000 f82f 	bl	8007888 <__malloc_unlock>
 800782a:	f104 000b 	add.w	r0, r4, #11
 800782e:	1d23      	adds	r3, r4, #4
 8007830:	f020 0007 	bic.w	r0, r0, #7
 8007834:	1ac2      	subs	r2, r0, r3
 8007836:	bf1c      	itt	ne
 8007838:	1a1b      	subne	r3, r3, r0
 800783a:	50a3      	strne	r3, [r4, r2]
 800783c:	e7af      	b.n	800779e <_malloc_r+0x22>
 800783e:	6862      	ldr	r2, [r4, #4]
 8007840:	42a3      	cmp	r3, r4
 8007842:	bf0c      	ite	eq
 8007844:	f8c8 2000 	streq.w	r2, [r8]
 8007848:	605a      	strne	r2, [r3, #4]
 800784a:	e7eb      	b.n	8007824 <_malloc_r+0xa8>
 800784c:	4623      	mov	r3, r4
 800784e:	6864      	ldr	r4, [r4, #4]
 8007850:	e7ae      	b.n	80077b0 <_malloc_r+0x34>
 8007852:	463c      	mov	r4, r7
 8007854:	687f      	ldr	r7, [r7, #4]
 8007856:	e7b6      	b.n	80077c6 <_malloc_r+0x4a>
 8007858:	461a      	mov	r2, r3
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	42a3      	cmp	r3, r4
 800785e:	d1fb      	bne.n	8007858 <_malloc_r+0xdc>
 8007860:	2300      	movs	r3, #0
 8007862:	6053      	str	r3, [r2, #4]
 8007864:	e7de      	b.n	8007824 <_malloc_r+0xa8>
 8007866:	230c      	movs	r3, #12
 8007868:	6033      	str	r3, [r6, #0]
 800786a:	4630      	mov	r0, r6
 800786c:	f000 f80c 	bl	8007888 <__malloc_unlock>
 8007870:	e794      	b.n	800779c <_malloc_r+0x20>
 8007872:	6005      	str	r5, [r0, #0]
 8007874:	e7d6      	b.n	8007824 <_malloc_r+0xa8>
 8007876:	bf00      	nop
 8007878:	20006760 	.word	0x20006760

0800787c <__malloc_lock>:
 800787c:	4801      	ldr	r0, [pc, #4]	@ (8007884 <__malloc_lock+0x8>)
 800787e:	f7ff bf01 	b.w	8007684 <__retarget_lock_acquire_recursive>
 8007882:	bf00      	nop
 8007884:	20006758 	.word	0x20006758

08007888 <__malloc_unlock>:
 8007888:	4801      	ldr	r0, [pc, #4]	@ (8007890 <__malloc_unlock+0x8>)
 800788a:	f7ff befc 	b.w	8007686 <__retarget_lock_release_recursive>
 800788e:	bf00      	nop
 8007890:	20006758 	.word	0x20006758

08007894 <__ssputs_r>:
 8007894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007898:	688e      	ldr	r6, [r1, #8]
 800789a:	461f      	mov	r7, r3
 800789c:	42be      	cmp	r6, r7
 800789e:	4682      	mov	sl, r0
 80078a0:	460c      	mov	r4, r1
 80078a2:	4690      	mov	r8, r2
 80078a4:	4633      	mov	r3, r6
 80078a6:	d853      	bhi.n	8007950 <__ssputs_r+0xbc>
 80078a8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80078ac:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 80078b0:	d02b      	beq.n	800790a <__ssputs_r+0x76>
 80078b2:	6965      	ldr	r5, [r4, #20]
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	6909      	ldr	r1, [r1, #16]
 80078b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078bc:	eba3 0901 	sub.w	r9, r3, r1
 80078c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078c4:	1c7b      	adds	r3, r7, #1
 80078c6:	106d      	asrs	r5, r5, #1
 80078c8:	444b      	add	r3, r9
 80078ca:	42ab      	cmp	r3, r5
 80078cc:	462a      	mov	r2, r5
 80078ce:	bf84      	itt	hi
 80078d0:	461d      	movhi	r5, r3
 80078d2:	462a      	movhi	r2, r5
 80078d4:	0543      	lsls	r3, r0, #21
 80078d6:	d527      	bpl.n	8007928 <__ssputs_r+0x94>
 80078d8:	4611      	mov	r1, r2
 80078da:	4650      	mov	r0, sl
 80078dc:	f7ff ff4e 	bl	800777c <_malloc_r>
 80078e0:	4606      	mov	r6, r0
 80078e2:	b358      	cbz	r0, 800793c <__ssputs_r+0xa8>
 80078e4:	6921      	ldr	r1, [r4, #16]
 80078e6:	464a      	mov	r2, r9
 80078e8:	f7ff fece 	bl	8007688 <memcpy>
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80078f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078f6:	81a3      	strh	r3, [r4, #12]
 80078f8:	6126      	str	r6, [r4, #16]
 80078fa:	6165      	str	r5, [r4, #20]
 80078fc:	444e      	add	r6, r9
 80078fe:	eba5 0509 	sub.w	r5, r5, r9
 8007902:	6026      	str	r6, [r4, #0]
 8007904:	60a5      	str	r5, [r4, #8]
 8007906:	463e      	mov	r6, r7
 8007908:	463b      	mov	r3, r7
 800790a:	461f      	mov	r7, r3
 800790c:	6820      	ldr	r0, [r4, #0]
 800790e:	463a      	mov	r2, r7
 8007910:	4641      	mov	r1, r8
 8007912:	f000 faa9 	bl	8007e68 <memmove>
 8007916:	68a3      	ldr	r3, [r4, #8]
 8007918:	1b9b      	subs	r3, r3, r6
 800791a:	60a3      	str	r3, [r4, #8]
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	443b      	add	r3, r7
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	2000      	movs	r0, #0
 8007924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007928:	4650      	mov	r0, sl
 800792a:	f000 fac7 	bl	8007ebc <_realloc_r>
 800792e:	4606      	mov	r6, r0
 8007930:	2800      	cmp	r0, #0
 8007932:	d1e1      	bne.n	80078f8 <__ssputs_r+0x64>
 8007934:	6921      	ldr	r1, [r4, #16]
 8007936:	4650      	mov	r0, sl
 8007938:	f7ff feb4 	bl	80076a4 <_free_r>
 800793c:	230c      	movs	r3, #12
 800793e:	f8ca 3000 	str.w	r3, [sl]
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007948:	81a3      	strh	r3, [r4, #12]
 800794a:	f04f 30ff 	mov.w	r0, #4294967295
 800794e:	e7e9      	b.n	8007924 <__ssputs_r+0x90>
 8007950:	463e      	mov	r6, r7
 8007952:	e7db      	b.n	800790c <__ssputs_r+0x78>

08007954 <_svfiprintf_r>:
 8007954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	4698      	mov	r8, r3
 800795a:	898b      	ldrh	r3, [r1, #12]
 800795c:	061b      	lsls	r3, r3, #24
 800795e:	b09d      	sub	sp, #116	@ 0x74
 8007960:	4607      	mov	r7, r0
 8007962:	460d      	mov	r5, r1
 8007964:	4614      	mov	r4, r2
 8007966:	d510      	bpl.n	800798a <_svfiprintf_r+0x36>
 8007968:	690b      	ldr	r3, [r1, #16]
 800796a:	b973      	cbnz	r3, 800798a <_svfiprintf_r+0x36>
 800796c:	2140      	movs	r1, #64	@ 0x40
 800796e:	f7ff ff05 	bl	800777c <_malloc_r>
 8007972:	6028      	str	r0, [r5, #0]
 8007974:	6128      	str	r0, [r5, #16]
 8007976:	b930      	cbnz	r0, 8007986 <_svfiprintf_r+0x32>
 8007978:	230c      	movs	r3, #12
 800797a:	603b      	str	r3, [r7, #0]
 800797c:	f04f 30ff 	mov.w	r0, #4294967295
 8007980:	b01d      	add	sp, #116	@ 0x74
 8007982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007986:	2340      	movs	r3, #64	@ 0x40
 8007988:	616b      	str	r3, [r5, #20]
 800798a:	2300      	movs	r3, #0
 800798c:	9309      	str	r3, [sp, #36]	@ 0x24
 800798e:	2320      	movs	r3, #32
 8007990:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007994:	f8cd 800c 	str.w	r8, [sp, #12]
 8007998:	2330      	movs	r3, #48	@ 0x30
 800799a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b38 <_svfiprintf_r+0x1e4>
 800799e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079a2:	f04f 0901 	mov.w	r9, #1
 80079a6:	4623      	mov	r3, r4
 80079a8:	469a      	mov	sl, r3
 80079aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079ae:	b10a      	cbz	r2, 80079b4 <_svfiprintf_r+0x60>
 80079b0:	2a25      	cmp	r2, #37	@ 0x25
 80079b2:	d1f9      	bne.n	80079a8 <_svfiprintf_r+0x54>
 80079b4:	ebba 0b04 	subs.w	fp, sl, r4
 80079b8:	d00b      	beq.n	80079d2 <_svfiprintf_r+0x7e>
 80079ba:	465b      	mov	r3, fp
 80079bc:	4622      	mov	r2, r4
 80079be:	4629      	mov	r1, r5
 80079c0:	4638      	mov	r0, r7
 80079c2:	f7ff ff67 	bl	8007894 <__ssputs_r>
 80079c6:	3001      	adds	r0, #1
 80079c8:	f000 80a7 	beq.w	8007b1a <_svfiprintf_r+0x1c6>
 80079cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079ce:	445a      	add	r2, fp
 80079d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80079d2:	f89a 3000 	ldrb.w	r3, [sl]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 809f 	beq.w	8007b1a <_svfiprintf_r+0x1c6>
 80079dc:	2300      	movs	r3, #0
 80079de:	f04f 32ff 	mov.w	r2, #4294967295
 80079e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e6:	f10a 0a01 	add.w	sl, sl, #1
 80079ea:	9304      	str	r3, [sp, #16]
 80079ec:	9307      	str	r3, [sp, #28]
 80079ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80079f4:	4654      	mov	r4, sl
 80079f6:	2205      	movs	r2, #5
 80079f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fc:	484e      	ldr	r0, [pc, #312]	@ (8007b38 <_svfiprintf_r+0x1e4>)
 80079fe:	f7f8 fbd7 	bl	80001b0 <memchr>
 8007a02:	9a04      	ldr	r2, [sp, #16]
 8007a04:	b9d8      	cbnz	r0, 8007a3e <_svfiprintf_r+0xea>
 8007a06:	06d0      	lsls	r0, r2, #27
 8007a08:	bf44      	itt	mi
 8007a0a:	2320      	movmi	r3, #32
 8007a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a10:	0711      	lsls	r1, r2, #28
 8007a12:	bf44      	itt	mi
 8007a14:	232b      	movmi	r3, #43	@ 0x2b
 8007a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a20:	d015      	beq.n	8007a4e <_svfiprintf_r+0xfa>
 8007a22:	9a07      	ldr	r2, [sp, #28]
 8007a24:	4654      	mov	r4, sl
 8007a26:	2000      	movs	r0, #0
 8007a28:	f04f 0c0a 	mov.w	ip, #10
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a32:	3b30      	subs	r3, #48	@ 0x30
 8007a34:	2b09      	cmp	r3, #9
 8007a36:	d94b      	bls.n	8007ad0 <_svfiprintf_r+0x17c>
 8007a38:	b1b0      	cbz	r0, 8007a68 <_svfiprintf_r+0x114>
 8007a3a:	9207      	str	r2, [sp, #28]
 8007a3c:	e014      	b.n	8007a68 <_svfiprintf_r+0x114>
 8007a3e:	eba0 0308 	sub.w	r3, r0, r8
 8007a42:	fa09 f303 	lsl.w	r3, r9, r3
 8007a46:	4313      	orrs	r3, r2
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	46a2      	mov	sl, r4
 8007a4c:	e7d2      	b.n	80079f4 <_svfiprintf_r+0xa0>
 8007a4e:	9b03      	ldr	r3, [sp, #12]
 8007a50:	1d19      	adds	r1, r3, #4
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	9103      	str	r1, [sp, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	bfbb      	ittet	lt
 8007a5a:	425b      	neglt	r3, r3
 8007a5c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a60:	9307      	strge	r3, [sp, #28]
 8007a62:	9307      	strlt	r3, [sp, #28]
 8007a64:	bfb8      	it	lt
 8007a66:	9204      	strlt	r2, [sp, #16]
 8007a68:	7823      	ldrb	r3, [r4, #0]
 8007a6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a6c:	d10a      	bne.n	8007a84 <_svfiprintf_r+0x130>
 8007a6e:	7863      	ldrb	r3, [r4, #1]
 8007a70:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a72:	d132      	bne.n	8007ada <_svfiprintf_r+0x186>
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	1d1a      	adds	r2, r3, #4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	9203      	str	r2, [sp, #12]
 8007a7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a80:	3402      	adds	r4, #2
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b48 <_svfiprintf_r+0x1f4>
 8007a88:	7821      	ldrb	r1, [r4, #0]
 8007a8a:	2203      	movs	r2, #3
 8007a8c:	4650      	mov	r0, sl
 8007a8e:	f7f8 fb8f 	bl	80001b0 <memchr>
 8007a92:	b138      	cbz	r0, 8007aa4 <_svfiprintf_r+0x150>
 8007a94:	9b04      	ldr	r3, [sp, #16]
 8007a96:	eba0 000a 	sub.w	r0, r0, sl
 8007a9a:	2240      	movs	r2, #64	@ 0x40
 8007a9c:	4082      	lsls	r2, r0
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	3401      	adds	r4, #1
 8007aa2:	9304      	str	r3, [sp, #16]
 8007aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa8:	4824      	ldr	r0, [pc, #144]	@ (8007b3c <_svfiprintf_r+0x1e8>)
 8007aaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007aae:	2206      	movs	r2, #6
 8007ab0:	f7f8 fb7e 	bl	80001b0 <memchr>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d036      	beq.n	8007b26 <_svfiprintf_r+0x1d2>
 8007ab8:	4b21      	ldr	r3, [pc, #132]	@ (8007b40 <_svfiprintf_r+0x1ec>)
 8007aba:	bb1b      	cbnz	r3, 8007b04 <_svfiprintf_r+0x1b0>
 8007abc:	9b03      	ldr	r3, [sp, #12]
 8007abe:	3307      	adds	r3, #7
 8007ac0:	f023 0307 	bic.w	r3, r3, #7
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	9303      	str	r3, [sp, #12]
 8007ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aca:	4433      	add	r3, r6
 8007acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ace:	e76a      	b.n	80079a6 <_svfiprintf_r+0x52>
 8007ad0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	2001      	movs	r0, #1
 8007ad8:	e7a8      	b.n	8007a2c <_svfiprintf_r+0xd8>
 8007ada:	2300      	movs	r3, #0
 8007adc:	3401      	adds	r4, #1
 8007ade:	9305      	str	r3, [sp, #20]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	f04f 0c0a 	mov.w	ip, #10
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aec:	3a30      	subs	r2, #48	@ 0x30
 8007aee:	2a09      	cmp	r2, #9
 8007af0:	d903      	bls.n	8007afa <_svfiprintf_r+0x1a6>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0c6      	beq.n	8007a84 <_svfiprintf_r+0x130>
 8007af6:	9105      	str	r1, [sp, #20]
 8007af8:	e7c4      	b.n	8007a84 <_svfiprintf_r+0x130>
 8007afa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007afe:	4604      	mov	r4, r0
 8007b00:	2301      	movs	r3, #1
 8007b02:	e7f0      	b.n	8007ae6 <_svfiprintf_r+0x192>
 8007b04:	ab03      	add	r3, sp, #12
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	462a      	mov	r2, r5
 8007b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b44 <_svfiprintf_r+0x1f0>)
 8007b0c:	a904      	add	r1, sp, #16
 8007b0e:	4638      	mov	r0, r7
 8007b10:	f3af 8000 	nop.w
 8007b14:	1c42      	adds	r2, r0, #1
 8007b16:	4606      	mov	r6, r0
 8007b18:	d1d6      	bne.n	8007ac8 <_svfiprintf_r+0x174>
 8007b1a:	89ab      	ldrh	r3, [r5, #12]
 8007b1c:	065b      	lsls	r3, r3, #25
 8007b1e:	f53f af2d 	bmi.w	800797c <_svfiprintf_r+0x28>
 8007b22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b24:	e72c      	b.n	8007980 <_svfiprintf_r+0x2c>
 8007b26:	ab03      	add	r3, sp, #12
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	462a      	mov	r2, r5
 8007b2c:	4b05      	ldr	r3, [pc, #20]	@ (8007b44 <_svfiprintf_r+0x1f0>)
 8007b2e:	a904      	add	r1, sp, #16
 8007b30:	4638      	mov	r0, r7
 8007b32:	f000 f879 	bl	8007c28 <_printf_i>
 8007b36:	e7ed      	b.n	8007b14 <_svfiprintf_r+0x1c0>
 8007b38:	08008354 	.word	0x08008354
 8007b3c:	0800835e 	.word	0x0800835e
 8007b40:	00000000 	.word	0x00000000
 8007b44:	08007895 	.word	0x08007895
 8007b48:	0800835a 	.word	0x0800835a

08007b4c <_printf_common>:
 8007b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b50:	4616      	mov	r6, r2
 8007b52:	4698      	mov	r8, r3
 8007b54:	688a      	ldr	r2, [r1, #8]
 8007b56:	690b      	ldr	r3, [r1, #16]
 8007b58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	bfb8      	it	lt
 8007b60:	4613      	movlt	r3, r2
 8007b62:	6033      	str	r3, [r6, #0]
 8007b64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b68:	4607      	mov	r7, r0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	b10a      	cbz	r2, 8007b72 <_printf_common+0x26>
 8007b6e:	3301      	adds	r3, #1
 8007b70:	6033      	str	r3, [r6, #0]
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	0699      	lsls	r1, r3, #26
 8007b76:	bf42      	ittt	mi
 8007b78:	6833      	ldrmi	r3, [r6, #0]
 8007b7a:	3302      	addmi	r3, #2
 8007b7c:	6033      	strmi	r3, [r6, #0]
 8007b7e:	6825      	ldr	r5, [r4, #0]
 8007b80:	f015 0506 	ands.w	r5, r5, #6
 8007b84:	d106      	bne.n	8007b94 <_printf_common+0x48>
 8007b86:	f104 0a19 	add.w	sl, r4, #25
 8007b8a:	68e3      	ldr	r3, [r4, #12]
 8007b8c:	6832      	ldr	r2, [r6, #0]
 8007b8e:	1a9b      	subs	r3, r3, r2
 8007b90:	42ab      	cmp	r3, r5
 8007b92:	dc26      	bgt.n	8007be2 <_printf_common+0x96>
 8007b94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b98:	6822      	ldr	r2, [r4, #0]
 8007b9a:	3b00      	subs	r3, #0
 8007b9c:	bf18      	it	ne
 8007b9e:	2301      	movne	r3, #1
 8007ba0:	0692      	lsls	r2, r2, #26
 8007ba2:	d42b      	bmi.n	8007bfc <_printf_common+0xb0>
 8007ba4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ba8:	4641      	mov	r1, r8
 8007baa:	4638      	mov	r0, r7
 8007bac:	47c8      	blx	r9
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d01e      	beq.n	8007bf0 <_printf_common+0xa4>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	6922      	ldr	r2, [r4, #16]
 8007bb6:	f003 0306 	and.w	r3, r3, #6
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	bf02      	ittt	eq
 8007bbe:	68e5      	ldreq	r5, [r4, #12]
 8007bc0:	6833      	ldreq	r3, [r6, #0]
 8007bc2:	1aed      	subeq	r5, r5, r3
 8007bc4:	68a3      	ldr	r3, [r4, #8]
 8007bc6:	bf0c      	ite	eq
 8007bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bcc:	2500      	movne	r5, #0
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	bfc4      	itt	gt
 8007bd2:	1a9b      	subgt	r3, r3, r2
 8007bd4:	18ed      	addgt	r5, r5, r3
 8007bd6:	2600      	movs	r6, #0
 8007bd8:	341a      	adds	r4, #26
 8007bda:	42b5      	cmp	r5, r6
 8007bdc:	d11a      	bne.n	8007c14 <_printf_common+0xc8>
 8007bde:	2000      	movs	r0, #0
 8007be0:	e008      	b.n	8007bf4 <_printf_common+0xa8>
 8007be2:	2301      	movs	r3, #1
 8007be4:	4652      	mov	r2, sl
 8007be6:	4641      	mov	r1, r8
 8007be8:	4638      	mov	r0, r7
 8007bea:	47c8      	blx	r9
 8007bec:	3001      	adds	r0, #1
 8007bee:	d103      	bne.n	8007bf8 <_printf_common+0xac>
 8007bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf8:	3501      	adds	r5, #1
 8007bfa:	e7c6      	b.n	8007b8a <_printf_common+0x3e>
 8007bfc:	18e1      	adds	r1, r4, r3
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	2030      	movs	r0, #48	@ 0x30
 8007c02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c06:	4422      	add	r2, r4
 8007c08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c10:	3302      	adds	r3, #2
 8007c12:	e7c7      	b.n	8007ba4 <_printf_common+0x58>
 8007c14:	2301      	movs	r3, #1
 8007c16:	4622      	mov	r2, r4
 8007c18:	4641      	mov	r1, r8
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	47c8      	blx	r9
 8007c1e:	3001      	adds	r0, #1
 8007c20:	d0e6      	beq.n	8007bf0 <_printf_common+0xa4>
 8007c22:	3601      	adds	r6, #1
 8007c24:	e7d9      	b.n	8007bda <_printf_common+0x8e>
	...

08007c28 <_printf_i>:
 8007c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c2c:	7e0f      	ldrb	r7, [r1, #24]
 8007c2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c30:	2f78      	cmp	r7, #120	@ 0x78
 8007c32:	4691      	mov	r9, r2
 8007c34:	4680      	mov	r8, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	469a      	mov	sl, r3
 8007c3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c3e:	d807      	bhi.n	8007c50 <_printf_i+0x28>
 8007c40:	2f62      	cmp	r7, #98	@ 0x62
 8007c42:	d80a      	bhi.n	8007c5a <_printf_i+0x32>
 8007c44:	2f00      	cmp	r7, #0
 8007c46:	f000 80d2 	beq.w	8007dee <_printf_i+0x1c6>
 8007c4a:	2f58      	cmp	r7, #88	@ 0x58
 8007c4c:	f000 80b7 	beq.w	8007dbe <_printf_i+0x196>
 8007c50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c58:	e03a      	b.n	8007cd0 <_printf_i+0xa8>
 8007c5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c5e:	2b15      	cmp	r3, #21
 8007c60:	d8f6      	bhi.n	8007c50 <_printf_i+0x28>
 8007c62:	a101      	add	r1, pc, #4	@ (adr r1, 8007c68 <_printf_i+0x40>)
 8007c64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c68:	08007cc1 	.word	0x08007cc1
 8007c6c:	08007cd5 	.word	0x08007cd5
 8007c70:	08007c51 	.word	0x08007c51
 8007c74:	08007c51 	.word	0x08007c51
 8007c78:	08007c51 	.word	0x08007c51
 8007c7c:	08007c51 	.word	0x08007c51
 8007c80:	08007cd5 	.word	0x08007cd5
 8007c84:	08007c51 	.word	0x08007c51
 8007c88:	08007c51 	.word	0x08007c51
 8007c8c:	08007c51 	.word	0x08007c51
 8007c90:	08007c51 	.word	0x08007c51
 8007c94:	08007dd5 	.word	0x08007dd5
 8007c98:	08007cff 	.word	0x08007cff
 8007c9c:	08007d8b 	.word	0x08007d8b
 8007ca0:	08007c51 	.word	0x08007c51
 8007ca4:	08007c51 	.word	0x08007c51
 8007ca8:	08007df7 	.word	0x08007df7
 8007cac:	08007c51 	.word	0x08007c51
 8007cb0:	08007cff 	.word	0x08007cff
 8007cb4:	08007c51 	.word	0x08007c51
 8007cb8:	08007c51 	.word	0x08007c51
 8007cbc:	08007d93 	.word	0x08007d93
 8007cc0:	6833      	ldr	r3, [r6, #0]
 8007cc2:	1d1a      	adds	r2, r3, #4
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6032      	str	r2, [r6, #0]
 8007cc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ccc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e09d      	b.n	8007e10 <_printf_i+0x1e8>
 8007cd4:	6833      	ldr	r3, [r6, #0]
 8007cd6:	6820      	ldr	r0, [r4, #0]
 8007cd8:	1d19      	adds	r1, r3, #4
 8007cda:	6031      	str	r1, [r6, #0]
 8007cdc:	0606      	lsls	r6, r0, #24
 8007cde:	d501      	bpl.n	8007ce4 <_printf_i+0xbc>
 8007ce0:	681d      	ldr	r5, [r3, #0]
 8007ce2:	e003      	b.n	8007cec <_printf_i+0xc4>
 8007ce4:	0645      	lsls	r5, r0, #25
 8007ce6:	d5fb      	bpl.n	8007ce0 <_printf_i+0xb8>
 8007ce8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cec:	2d00      	cmp	r5, #0
 8007cee:	da03      	bge.n	8007cf8 <_printf_i+0xd0>
 8007cf0:	232d      	movs	r3, #45	@ 0x2d
 8007cf2:	426d      	negs	r5, r5
 8007cf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cf8:	4859      	ldr	r0, [pc, #356]	@ (8007e60 <_printf_i+0x238>)
 8007cfa:	230a      	movs	r3, #10
 8007cfc:	e010      	b.n	8007d20 <_printf_i+0xf8>
 8007cfe:	6821      	ldr	r1, [r4, #0]
 8007d00:	6833      	ldr	r3, [r6, #0]
 8007d02:	0608      	lsls	r0, r1, #24
 8007d04:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d08:	d402      	bmi.n	8007d10 <_printf_i+0xe8>
 8007d0a:	0649      	lsls	r1, r1, #25
 8007d0c:	bf48      	it	mi
 8007d0e:	b2ad      	uxthmi	r5, r5
 8007d10:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d12:	4853      	ldr	r0, [pc, #332]	@ (8007e60 <_printf_i+0x238>)
 8007d14:	6033      	str	r3, [r6, #0]
 8007d16:	d159      	bne.n	8007dcc <_printf_i+0x1a4>
 8007d18:	2308      	movs	r3, #8
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d20:	6866      	ldr	r6, [r4, #4]
 8007d22:	60a6      	str	r6, [r4, #8]
 8007d24:	2e00      	cmp	r6, #0
 8007d26:	db05      	blt.n	8007d34 <_printf_i+0x10c>
 8007d28:	6821      	ldr	r1, [r4, #0]
 8007d2a:	432e      	orrs	r6, r5
 8007d2c:	f021 0104 	bic.w	r1, r1, #4
 8007d30:	6021      	str	r1, [r4, #0]
 8007d32:	d04d      	beq.n	8007dd0 <_printf_i+0x1a8>
 8007d34:	4616      	mov	r6, r2
 8007d36:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d3a:	fb03 5711 	mls	r7, r3, r1, r5
 8007d3e:	5dc7      	ldrb	r7, [r0, r7]
 8007d40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d44:	462f      	mov	r7, r5
 8007d46:	42bb      	cmp	r3, r7
 8007d48:	460d      	mov	r5, r1
 8007d4a:	d9f4      	bls.n	8007d36 <_printf_i+0x10e>
 8007d4c:	2b08      	cmp	r3, #8
 8007d4e:	d10b      	bne.n	8007d68 <_printf_i+0x140>
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	07df      	lsls	r7, r3, #31
 8007d54:	d508      	bpl.n	8007d68 <_printf_i+0x140>
 8007d56:	6923      	ldr	r3, [r4, #16]
 8007d58:	6861      	ldr	r1, [r4, #4]
 8007d5a:	4299      	cmp	r1, r3
 8007d5c:	bfde      	ittt	le
 8007d5e:	2330      	movle	r3, #48	@ 0x30
 8007d60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d68:	1b92      	subs	r2, r2, r6
 8007d6a:	6122      	str	r2, [r4, #16]
 8007d6c:	f8cd a000 	str.w	sl, [sp]
 8007d70:	464b      	mov	r3, r9
 8007d72:	aa03      	add	r2, sp, #12
 8007d74:	4621      	mov	r1, r4
 8007d76:	4640      	mov	r0, r8
 8007d78:	f7ff fee8 	bl	8007b4c <_printf_common>
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	d14c      	bne.n	8007e1a <_printf_i+0x1f2>
 8007d80:	f04f 30ff 	mov.w	r0, #4294967295
 8007d84:	b004      	add	sp, #16
 8007d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	f043 0320 	orr.w	r3, r3, #32
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	4834      	ldr	r0, [pc, #208]	@ (8007e64 <_printf_i+0x23c>)
 8007d94:	2778      	movs	r7, #120	@ 0x78
 8007d96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	6831      	ldr	r1, [r6, #0]
 8007d9e:	061f      	lsls	r7, r3, #24
 8007da0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007da4:	d402      	bmi.n	8007dac <_printf_i+0x184>
 8007da6:	065f      	lsls	r7, r3, #25
 8007da8:	bf48      	it	mi
 8007daa:	b2ad      	uxthmi	r5, r5
 8007dac:	6031      	str	r1, [r6, #0]
 8007dae:	07d9      	lsls	r1, r3, #31
 8007db0:	bf44      	itt	mi
 8007db2:	f043 0320 	orrmi.w	r3, r3, #32
 8007db6:	6023      	strmi	r3, [r4, #0]
 8007db8:	b11d      	cbz	r5, 8007dc2 <_printf_i+0x19a>
 8007dba:	2310      	movs	r3, #16
 8007dbc:	e7ad      	b.n	8007d1a <_printf_i+0xf2>
 8007dbe:	4828      	ldr	r0, [pc, #160]	@ (8007e60 <_printf_i+0x238>)
 8007dc0:	e7e9      	b.n	8007d96 <_printf_i+0x16e>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	f023 0320 	bic.w	r3, r3, #32
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	e7f6      	b.n	8007dba <_printf_i+0x192>
 8007dcc:	230a      	movs	r3, #10
 8007dce:	e7a4      	b.n	8007d1a <_printf_i+0xf2>
 8007dd0:	4616      	mov	r6, r2
 8007dd2:	e7bb      	b.n	8007d4c <_printf_i+0x124>
 8007dd4:	6833      	ldr	r3, [r6, #0]
 8007dd6:	6825      	ldr	r5, [r4, #0]
 8007dd8:	6961      	ldr	r1, [r4, #20]
 8007dda:	1d18      	adds	r0, r3, #4
 8007ddc:	6030      	str	r0, [r6, #0]
 8007dde:	062e      	lsls	r6, r5, #24
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	d501      	bpl.n	8007de8 <_printf_i+0x1c0>
 8007de4:	6019      	str	r1, [r3, #0]
 8007de6:	e002      	b.n	8007dee <_printf_i+0x1c6>
 8007de8:	0668      	lsls	r0, r5, #25
 8007dea:	d5fb      	bpl.n	8007de4 <_printf_i+0x1bc>
 8007dec:	8019      	strh	r1, [r3, #0]
 8007dee:	2300      	movs	r3, #0
 8007df0:	6123      	str	r3, [r4, #16]
 8007df2:	4616      	mov	r6, r2
 8007df4:	e7ba      	b.n	8007d6c <_printf_i+0x144>
 8007df6:	6833      	ldr	r3, [r6, #0]
 8007df8:	1d1a      	adds	r2, r3, #4
 8007dfa:	6032      	str	r2, [r6, #0]
 8007dfc:	681e      	ldr	r6, [r3, #0]
 8007dfe:	6862      	ldr	r2, [r4, #4]
 8007e00:	2100      	movs	r1, #0
 8007e02:	4630      	mov	r0, r6
 8007e04:	f7f8 f9d4 	bl	80001b0 <memchr>
 8007e08:	b108      	cbz	r0, 8007e0e <_printf_i+0x1e6>
 8007e0a:	1b80      	subs	r0, r0, r6
 8007e0c:	6060      	str	r0, [r4, #4]
 8007e0e:	6863      	ldr	r3, [r4, #4]
 8007e10:	6123      	str	r3, [r4, #16]
 8007e12:	2300      	movs	r3, #0
 8007e14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e18:	e7a8      	b.n	8007d6c <_printf_i+0x144>
 8007e1a:	6923      	ldr	r3, [r4, #16]
 8007e1c:	4632      	mov	r2, r6
 8007e1e:	4649      	mov	r1, r9
 8007e20:	4640      	mov	r0, r8
 8007e22:	47d0      	blx	sl
 8007e24:	3001      	adds	r0, #1
 8007e26:	d0ab      	beq.n	8007d80 <_printf_i+0x158>
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	079b      	lsls	r3, r3, #30
 8007e2c:	d413      	bmi.n	8007e56 <_printf_i+0x22e>
 8007e2e:	68e0      	ldr	r0, [r4, #12]
 8007e30:	9b03      	ldr	r3, [sp, #12]
 8007e32:	4298      	cmp	r0, r3
 8007e34:	bfb8      	it	lt
 8007e36:	4618      	movlt	r0, r3
 8007e38:	e7a4      	b.n	8007d84 <_printf_i+0x15c>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	4632      	mov	r2, r6
 8007e3e:	4649      	mov	r1, r9
 8007e40:	4640      	mov	r0, r8
 8007e42:	47d0      	blx	sl
 8007e44:	3001      	adds	r0, #1
 8007e46:	d09b      	beq.n	8007d80 <_printf_i+0x158>
 8007e48:	3501      	adds	r5, #1
 8007e4a:	68e3      	ldr	r3, [r4, #12]
 8007e4c:	9903      	ldr	r1, [sp, #12]
 8007e4e:	1a5b      	subs	r3, r3, r1
 8007e50:	42ab      	cmp	r3, r5
 8007e52:	dcf2      	bgt.n	8007e3a <_printf_i+0x212>
 8007e54:	e7eb      	b.n	8007e2e <_printf_i+0x206>
 8007e56:	2500      	movs	r5, #0
 8007e58:	f104 0619 	add.w	r6, r4, #25
 8007e5c:	e7f5      	b.n	8007e4a <_printf_i+0x222>
 8007e5e:	bf00      	nop
 8007e60:	08008365 	.word	0x08008365
 8007e64:	08008376 	.word	0x08008376

08007e68 <memmove>:
 8007e68:	4288      	cmp	r0, r1
 8007e6a:	b510      	push	{r4, lr}
 8007e6c:	eb01 0402 	add.w	r4, r1, r2
 8007e70:	d902      	bls.n	8007e78 <memmove+0x10>
 8007e72:	4284      	cmp	r4, r0
 8007e74:	4623      	mov	r3, r4
 8007e76:	d807      	bhi.n	8007e88 <memmove+0x20>
 8007e78:	1e43      	subs	r3, r0, #1
 8007e7a:	42a1      	cmp	r1, r4
 8007e7c:	d007      	beq.n	8007e8e <memmove+0x26>
 8007e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e86:	e7f8      	b.n	8007e7a <memmove+0x12>
 8007e88:	4402      	add	r2, r0
 8007e8a:	4282      	cmp	r2, r0
 8007e8c:	d100      	bne.n	8007e90 <memmove+0x28>
 8007e8e:	bd10      	pop	{r4, pc}
 8007e90:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8007e94:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8007e98:	e7f7      	b.n	8007e8a <memmove+0x22>
	...

08007e9c <_sbrk_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4d06      	ldr	r5, [pc, #24]	@ (8007eb8 <_sbrk_r+0x1c>)
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	4608      	mov	r0, r1
 8007ea6:	602b      	str	r3, [r5, #0]
 8007ea8:	f7fc fe94 	bl	8004bd4 <_sbrk>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	d102      	bne.n	8007eb6 <_sbrk_r+0x1a>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	b103      	cbz	r3, 8007eb6 <_sbrk_r+0x1a>
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	20006754 	.word	0x20006754

08007ebc <_realloc_r>:
 8007ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec0:	4607      	mov	r7, r0
 8007ec2:	4614      	mov	r4, r2
 8007ec4:	460d      	mov	r5, r1
 8007ec6:	b921      	cbnz	r1, 8007ed2 <_realloc_r+0x16>
 8007ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ecc:	4611      	mov	r1, r2
 8007ece:	f7ff bc55 	b.w	800777c <_malloc_r>
 8007ed2:	b92a      	cbnz	r2, 8007ee0 <_realloc_r+0x24>
 8007ed4:	f7ff fbe6 	bl	80076a4 <_free_r>
 8007ed8:	4625      	mov	r5, r4
 8007eda:	4628      	mov	r0, r5
 8007edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee0:	f000 f81a 	bl	8007f18 <_malloc_usable_size_r>
 8007ee4:	4284      	cmp	r4, r0
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	d802      	bhi.n	8007ef0 <_realloc_r+0x34>
 8007eea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007eee:	d8f4      	bhi.n	8007eda <_realloc_r+0x1e>
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	f7ff fc42 	bl	800777c <_malloc_r>
 8007ef8:	4680      	mov	r8, r0
 8007efa:	b908      	cbnz	r0, 8007f00 <_realloc_r+0x44>
 8007efc:	4645      	mov	r5, r8
 8007efe:	e7ec      	b.n	8007eda <_realloc_r+0x1e>
 8007f00:	42b4      	cmp	r4, r6
 8007f02:	4622      	mov	r2, r4
 8007f04:	4629      	mov	r1, r5
 8007f06:	bf28      	it	cs
 8007f08:	4632      	movcs	r2, r6
 8007f0a:	f7ff fbbd 	bl	8007688 <memcpy>
 8007f0e:	4629      	mov	r1, r5
 8007f10:	4638      	mov	r0, r7
 8007f12:	f7ff fbc7 	bl	80076a4 <_free_r>
 8007f16:	e7f1      	b.n	8007efc <_realloc_r+0x40>

08007f18 <_malloc_usable_size_r>:
 8007f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f1c:	1f18      	subs	r0, r3, #4
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	bfbc      	itt	lt
 8007f22:	580b      	ldrlt	r3, [r1, r0]
 8007f24:	18c0      	addlt	r0, r0, r3
 8007f26:	4770      	bx	lr

08007f28 <__udivmoddi4>:
 8007f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f2c:	9d08      	ldr	r5, [sp, #32]
 8007f2e:	460f      	mov	r7, r1
 8007f30:	4604      	mov	r4, r0
 8007f32:	468c      	mov	ip, r1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d148      	bne.n	8007fca <__udivmoddi4+0xa2>
 8007f38:	428a      	cmp	r2, r1
 8007f3a:	4616      	mov	r6, r2
 8007f3c:	d961      	bls.n	8008002 <__udivmoddi4+0xda>
 8007f3e:	fab2 f382 	clz	r3, r2
 8007f42:	b14b      	cbz	r3, 8007f58 <__udivmoddi4+0x30>
 8007f44:	f1c3 0220 	rsb	r2, r3, #32
 8007f48:	fa01 fc03 	lsl.w	ip, r1, r3
 8007f4c:	fa20 f202 	lsr.w	r2, r0, r2
 8007f50:	409e      	lsls	r6, r3
 8007f52:	ea42 0c0c 	orr.w	ip, r2, ip
 8007f56:	409c      	lsls	r4, r3
 8007f58:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8007f5c:	b2b7      	uxth	r7, r6
 8007f5e:	fbbc f1fe 	udiv	r1, ip, lr
 8007f62:	0c22      	lsrs	r2, r4, #16
 8007f64:	fb0e cc11 	mls	ip, lr, r1, ip
 8007f68:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8007f6c:	fb01 f007 	mul.w	r0, r1, r7
 8007f70:	4290      	cmp	r0, r2
 8007f72:	d909      	bls.n	8007f88 <__udivmoddi4+0x60>
 8007f74:	18b2      	adds	r2, r6, r2
 8007f76:	f101 3cff 	add.w	ip, r1, #4294967295
 8007f7a:	f080 80ee 	bcs.w	800815a <__udivmoddi4+0x232>
 8007f7e:	4290      	cmp	r0, r2
 8007f80:	f240 80eb 	bls.w	800815a <__udivmoddi4+0x232>
 8007f84:	3902      	subs	r1, #2
 8007f86:	4432      	add	r2, r6
 8007f88:	1a12      	subs	r2, r2, r0
 8007f8a:	b2a4      	uxth	r4, r4
 8007f8c:	fbb2 f0fe 	udiv	r0, r2, lr
 8007f90:	fb0e 2210 	mls	r2, lr, r0, r2
 8007f94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007f98:	fb00 f707 	mul.w	r7, r0, r7
 8007f9c:	42a7      	cmp	r7, r4
 8007f9e:	d909      	bls.n	8007fb4 <__udivmoddi4+0x8c>
 8007fa0:	1934      	adds	r4, r6, r4
 8007fa2:	f100 32ff 	add.w	r2, r0, #4294967295
 8007fa6:	f080 80da 	bcs.w	800815e <__udivmoddi4+0x236>
 8007faa:	42a7      	cmp	r7, r4
 8007fac:	f240 80d7 	bls.w	800815e <__udivmoddi4+0x236>
 8007fb0:	4434      	add	r4, r6
 8007fb2:	3802      	subs	r0, #2
 8007fb4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8007fb8:	1be4      	subs	r4, r4, r7
 8007fba:	2100      	movs	r1, #0
 8007fbc:	b11d      	cbz	r5, 8007fc6 <__udivmoddi4+0x9e>
 8007fbe:	40dc      	lsrs	r4, r3
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	e9c5 4300 	strd	r4, r3, [r5]
 8007fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fca:	428b      	cmp	r3, r1
 8007fcc:	d906      	bls.n	8007fdc <__udivmoddi4+0xb4>
 8007fce:	b10d      	cbz	r5, 8007fd4 <__udivmoddi4+0xac>
 8007fd0:	e9c5 0100 	strd	r0, r1, [r5]
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	4608      	mov	r0, r1
 8007fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fdc:	fab3 f183 	clz	r1, r3
 8007fe0:	2900      	cmp	r1, #0
 8007fe2:	d148      	bne.n	8008076 <__udivmoddi4+0x14e>
 8007fe4:	42bb      	cmp	r3, r7
 8007fe6:	d302      	bcc.n	8007fee <__udivmoddi4+0xc6>
 8007fe8:	4282      	cmp	r2, r0
 8007fea:	f200 8107 	bhi.w	80081fc <__udivmoddi4+0x2d4>
 8007fee:	1a84      	subs	r4, r0, r2
 8007ff0:	eb67 0203 	sbc.w	r2, r7, r3
 8007ff4:	2001      	movs	r0, #1
 8007ff6:	4694      	mov	ip, r2
 8007ff8:	2d00      	cmp	r5, #0
 8007ffa:	d0e4      	beq.n	8007fc6 <__udivmoddi4+0x9e>
 8007ffc:	e9c5 4c00 	strd	r4, ip, [r5]
 8008000:	e7e1      	b.n	8007fc6 <__udivmoddi4+0x9e>
 8008002:	2a00      	cmp	r2, #0
 8008004:	f000 8092 	beq.w	800812c <__udivmoddi4+0x204>
 8008008:	fab2 f382 	clz	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	f040 80a8 	bne.w	8008162 <__udivmoddi4+0x23a>
 8008012:	1a8a      	subs	r2, r1, r2
 8008014:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8008018:	fa1f fc86 	uxth.w	ip, r6
 800801c:	2101      	movs	r1, #1
 800801e:	0c20      	lsrs	r0, r4, #16
 8008020:	fbb2 f7fe 	udiv	r7, r2, lr
 8008024:	fb0e 2217 	mls	r2, lr, r7, r2
 8008028:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800802c:	fb0c f007 	mul.w	r0, ip, r7
 8008030:	4290      	cmp	r0, r2
 8008032:	d907      	bls.n	8008044 <__udivmoddi4+0x11c>
 8008034:	18b2      	adds	r2, r6, r2
 8008036:	f107 38ff 	add.w	r8, r7, #4294967295
 800803a:	d202      	bcs.n	8008042 <__udivmoddi4+0x11a>
 800803c:	4290      	cmp	r0, r2
 800803e:	f200 80e2 	bhi.w	8008206 <__udivmoddi4+0x2de>
 8008042:	4647      	mov	r7, r8
 8008044:	1a12      	subs	r2, r2, r0
 8008046:	b2a4      	uxth	r4, r4
 8008048:	fbb2 f0fe 	udiv	r0, r2, lr
 800804c:	fb0e 2210 	mls	r2, lr, r0, r2
 8008050:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008054:	fb0c fc00 	mul.w	ip, ip, r0
 8008058:	45a4      	cmp	ip, r4
 800805a:	d907      	bls.n	800806c <__udivmoddi4+0x144>
 800805c:	1934      	adds	r4, r6, r4
 800805e:	f100 32ff 	add.w	r2, r0, #4294967295
 8008062:	d202      	bcs.n	800806a <__udivmoddi4+0x142>
 8008064:	45a4      	cmp	ip, r4
 8008066:	f200 80cb 	bhi.w	8008200 <__udivmoddi4+0x2d8>
 800806a:	4610      	mov	r0, r2
 800806c:	eba4 040c 	sub.w	r4, r4, ip
 8008070:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008074:	e7a2      	b.n	8007fbc <__udivmoddi4+0x94>
 8008076:	f1c1 0620 	rsb	r6, r1, #32
 800807a:	408b      	lsls	r3, r1
 800807c:	fa22 fc06 	lsr.w	ip, r2, r6
 8008080:	ea4c 0c03 	orr.w	ip, ip, r3
 8008084:	fa07 f401 	lsl.w	r4, r7, r1
 8008088:	fa20 f306 	lsr.w	r3, r0, r6
 800808c:	40f7      	lsrs	r7, r6
 800808e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008092:	4323      	orrs	r3, r4
 8008094:	fa00 f801 	lsl.w	r8, r0, r1
 8008098:	fa1f fe8c 	uxth.w	lr, ip
 800809c:	fbb7 f0f9 	udiv	r0, r7, r9
 80080a0:	0c1c      	lsrs	r4, r3, #16
 80080a2:	fb09 7710 	mls	r7, r9, r0, r7
 80080a6:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80080aa:	fb00 f70e 	mul.w	r7, r0, lr
 80080ae:	42a7      	cmp	r7, r4
 80080b0:	fa02 f201 	lsl.w	r2, r2, r1
 80080b4:	d90a      	bls.n	80080cc <__udivmoddi4+0x1a4>
 80080b6:	eb1c 0404 	adds.w	r4, ip, r4
 80080ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80080be:	f080 809b 	bcs.w	80081f8 <__udivmoddi4+0x2d0>
 80080c2:	42a7      	cmp	r7, r4
 80080c4:	f240 8098 	bls.w	80081f8 <__udivmoddi4+0x2d0>
 80080c8:	3802      	subs	r0, #2
 80080ca:	4464      	add	r4, ip
 80080cc:	1be4      	subs	r4, r4, r7
 80080ce:	b29f      	uxth	r7, r3
 80080d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80080d4:	fb09 4413 	mls	r4, r9, r3, r4
 80080d8:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 80080dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80080e0:	45a6      	cmp	lr, r4
 80080e2:	d909      	bls.n	80080f8 <__udivmoddi4+0x1d0>
 80080e4:	eb1c 0404 	adds.w	r4, ip, r4
 80080e8:	f103 37ff 	add.w	r7, r3, #4294967295
 80080ec:	f080 8082 	bcs.w	80081f4 <__udivmoddi4+0x2cc>
 80080f0:	45a6      	cmp	lr, r4
 80080f2:	d97f      	bls.n	80081f4 <__udivmoddi4+0x2cc>
 80080f4:	3b02      	subs	r3, #2
 80080f6:	4464      	add	r4, ip
 80080f8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80080fc:	eba4 040e 	sub.w	r4, r4, lr
 8008100:	fba0 e702 	umull	lr, r7, r0, r2
 8008104:	42bc      	cmp	r4, r7
 8008106:	4673      	mov	r3, lr
 8008108:	46b9      	mov	r9, r7
 800810a:	d363      	bcc.n	80081d4 <__udivmoddi4+0x2ac>
 800810c:	d060      	beq.n	80081d0 <__udivmoddi4+0x2a8>
 800810e:	b15d      	cbz	r5, 8008128 <__udivmoddi4+0x200>
 8008110:	ebb8 0203 	subs.w	r2, r8, r3
 8008114:	eb64 0409 	sbc.w	r4, r4, r9
 8008118:	fa04 f606 	lsl.w	r6, r4, r6
 800811c:	fa22 f301 	lsr.w	r3, r2, r1
 8008120:	431e      	orrs	r6, r3
 8008122:	40cc      	lsrs	r4, r1
 8008124:	e9c5 6400 	strd	r6, r4, [r5]
 8008128:	2100      	movs	r1, #0
 800812a:	e74c      	b.n	8007fc6 <__udivmoddi4+0x9e>
 800812c:	0862      	lsrs	r2, r4, #1
 800812e:	0848      	lsrs	r0, r1, #1
 8008130:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8008134:	0c0b      	lsrs	r3, r1, #16
 8008136:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800813a:	b28a      	uxth	r2, r1
 800813c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008140:	fbb3 f1f6 	udiv	r1, r3, r6
 8008144:	07e4      	lsls	r4, r4, #31
 8008146:	46b4      	mov	ip, r6
 8008148:	4637      	mov	r7, r6
 800814a:	46b6      	mov	lr, r6
 800814c:	231f      	movs	r3, #31
 800814e:	fbb0 f0f6 	udiv	r0, r0, r6
 8008152:	1bd2      	subs	r2, r2, r7
 8008154:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008158:	e761      	b.n	800801e <__udivmoddi4+0xf6>
 800815a:	4661      	mov	r1, ip
 800815c:	e714      	b.n	8007f88 <__udivmoddi4+0x60>
 800815e:	4610      	mov	r0, r2
 8008160:	e728      	b.n	8007fb4 <__udivmoddi4+0x8c>
 8008162:	f1c3 0120 	rsb	r1, r3, #32
 8008166:	fa20 f201 	lsr.w	r2, r0, r1
 800816a:	409e      	lsls	r6, r3
 800816c:	fa27 f101 	lsr.w	r1, r7, r1
 8008170:	409f      	lsls	r7, r3
 8008172:	433a      	orrs	r2, r7
 8008174:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8008178:	fa1f fc86 	uxth.w	ip, r6
 800817c:	fbb1 f7fe 	udiv	r7, r1, lr
 8008180:	fb0e 1017 	mls	r0, lr, r7, r1
 8008184:	0c11      	lsrs	r1, r2, #16
 8008186:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800818a:	fb07 f80c 	mul.w	r8, r7, ip
 800818e:	4588      	cmp	r8, r1
 8008190:	fa04 f403 	lsl.w	r4, r4, r3
 8008194:	d93a      	bls.n	800820c <__udivmoddi4+0x2e4>
 8008196:	1871      	adds	r1, r6, r1
 8008198:	f107 30ff 	add.w	r0, r7, #4294967295
 800819c:	d201      	bcs.n	80081a2 <__udivmoddi4+0x27a>
 800819e:	4588      	cmp	r8, r1
 80081a0:	d81f      	bhi.n	80081e2 <__udivmoddi4+0x2ba>
 80081a2:	eba1 0108 	sub.w	r1, r1, r8
 80081a6:	fbb1 f8fe 	udiv	r8, r1, lr
 80081aa:	fb08 f70c 	mul.w	r7, r8, ip
 80081ae:	fb0e 1118 	mls	r1, lr, r8, r1
 80081b2:	b292      	uxth	r2, r2
 80081b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80081b8:	42ba      	cmp	r2, r7
 80081ba:	d22f      	bcs.n	800821c <__udivmoddi4+0x2f4>
 80081bc:	18b2      	adds	r2, r6, r2
 80081be:	f108 31ff 	add.w	r1, r8, #4294967295
 80081c2:	d2c6      	bcs.n	8008152 <__udivmoddi4+0x22a>
 80081c4:	42ba      	cmp	r2, r7
 80081c6:	d2c4      	bcs.n	8008152 <__udivmoddi4+0x22a>
 80081c8:	f1a8 0102 	sub.w	r1, r8, #2
 80081cc:	4432      	add	r2, r6
 80081ce:	e7c0      	b.n	8008152 <__udivmoddi4+0x22a>
 80081d0:	45f0      	cmp	r8, lr
 80081d2:	d29c      	bcs.n	800810e <__udivmoddi4+0x1e6>
 80081d4:	ebbe 0302 	subs.w	r3, lr, r2
 80081d8:	eb67 070c 	sbc.w	r7, r7, ip
 80081dc:	3801      	subs	r0, #1
 80081de:	46b9      	mov	r9, r7
 80081e0:	e795      	b.n	800810e <__udivmoddi4+0x1e6>
 80081e2:	eba6 0808 	sub.w	r8, r6, r8
 80081e6:	4441      	add	r1, r8
 80081e8:	1eb8      	subs	r0, r7, #2
 80081ea:	fbb1 f8fe 	udiv	r8, r1, lr
 80081ee:	fb08 f70c 	mul.w	r7, r8, ip
 80081f2:	e7dc      	b.n	80081ae <__udivmoddi4+0x286>
 80081f4:	463b      	mov	r3, r7
 80081f6:	e77f      	b.n	80080f8 <__udivmoddi4+0x1d0>
 80081f8:	4650      	mov	r0, sl
 80081fa:	e767      	b.n	80080cc <__udivmoddi4+0x1a4>
 80081fc:	4608      	mov	r0, r1
 80081fe:	e6fb      	b.n	8007ff8 <__udivmoddi4+0xd0>
 8008200:	4434      	add	r4, r6
 8008202:	3802      	subs	r0, #2
 8008204:	e732      	b.n	800806c <__udivmoddi4+0x144>
 8008206:	3f02      	subs	r7, #2
 8008208:	4432      	add	r2, r6
 800820a:	e71b      	b.n	8008044 <__udivmoddi4+0x11c>
 800820c:	eba1 0108 	sub.w	r1, r1, r8
 8008210:	4638      	mov	r0, r7
 8008212:	fbb1 f8fe 	udiv	r8, r1, lr
 8008216:	fb08 f70c 	mul.w	r7, r8, ip
 800821a:	e7c8      	b.n	80081ae <__udivmoddi4+0x286>
 800821c:	4641      	mov	r1, r8
 800821e:	e798      	b.n	8008152 <__udivmoddi4+0x22a>

08008220 <_init>:
 8008220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008222:	bf00      	nop
 8008224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008226:	bc08      	pop	{r3}
 8008228:	469e      	mov	lr, r3
 800822a:	4770      	bx	lr

0800822c <_fini>:
 800822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822e:	bf00      	nop
 8008230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008232:	bc08      	pop	{r3}
 8008234:	469e      	mov	lr, r3
 8008236:	4770      	bx	lr
