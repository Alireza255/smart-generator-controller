
build/debug/SGC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b960  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a94  0800bb00  0800bb00  0000cb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c594  0800c594  0000e1b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c594  0800c594  0000d594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c59c  0800c59c  0000e1b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c59c  0800c59c  0000d59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5a0  0800c5a0  0000d5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b0  20000000  0800c5a4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008a3c  200001b0  0800c754  0000e1b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008bec  0800c754  0000ebec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a375  00000000  00000000  0000e219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008e1a  00000000  00000000  0004858e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001a9b8  00000000  00000000  000513a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002440  00000000  00000000  0006bd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001d33  00000000  00000000  0006e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002af44  00000000  00000000  0006fed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c914  00000000  00000000  0009ae17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006394  00000000  00000000  000a772c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000001a1  00000000  00000000  000adac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__aeabi_d2uiz>:
 80009ec:	004a      	lsls	r2, r1, #1
 80009ee:	d211      	bcs.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009f4:	d211      	bcs.n	8000a1a <__aeabi_d2uiz+0x2e>
 80009f6:	d50d      	bpl.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a00:	d40e      	bmi.n	8000a20 <__aeabi_d2uiz+0x34>
 8000a02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a1e:	d102      	bne.n	8000a26 <__aeabi_d2uiz+0x3a>
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	4770      	bx	lr
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	4770      	bx	lr

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b80c 	b.w	8000a5c <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f00a fed0 	bl	800b7f0 <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_idiv0>:
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__do_global_dtors_aux>:
 8000a60:	b510      	push	{r4, lr}
 8000a62:	4c05      	ldr	r4, [pc, #20]	@ (8000a78 <__do_global_dtors_aux+0x18>)
 8000a64:	7823      	ldrb	r3, [r4, #0]
 8000a66:	b933      	cbnz	r3, 8000a76 <__do_global_dtors_aux+0x16>
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <__do_global_dtors_aux+0x1c>)
 8000a6a:	b113      	cbz	r3, 8000a72 <__do_global_dtors_aux+0x12>
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <__do_global_dtors_aux+0x20>)
 8000a6e:	f3af 8000 	nop.w
 8000a72:	2301      	movs	r3, #1
 8000a74:	7023      	strb	r3, [r4, #0]
 8000a76:	bd10      	pop	{r4, pc}
 8000a78:	200001b0 	.word	0x200001b0
 8000a7c:	00000000 	.word	0x00000000
 8000a80:	0800bae8 	.word	0x0800bae8

08000a84 <frame_dummy>:
 8000a84:	b508      	push	{r3, lr}
 8000a86:	4b03      	ldr	r3, [pc, #12]	@ (8000a94 <frame_dummy+0x10>)
 8000a88:	b11b      	cbz	r3, 8000a92 <frame_dummy+0xe>
 8000a8a:	4903      	ldr	r1, [pc, #12]	@ (8000a98 <frame_dummy+0x14>)
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <frame_dummy+0x18>)
 8000a8e:	f3af 8000 	nop.w
 8000a92:	bd08      	pop	{r3, pc}
 8000a94:	00000000 	.word	0x00000000
 8000a98:	200001b4 	.word	0x200001b4
 8000a9c:	0800bae8 	.word	0x0800bae8

08000aa0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000aa0:	b510      	push	{r4, lr}
 8000aa2:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa4:	2400      	movs	r4, #0
 8000aa6:	9408      	str	r4, [sp, #32]
 8000aa8:	9409      	str	r4, [sp, #36]	@ 0x24
 8000aaa:	940a      	str	r4, [sp, #40]	@ 0x28
 8000aac:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000aae:	2220      	movs	r2, #32
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	4668      	mov	r0, sp
 8000ab4:	f00a f8e8 	bl	800ac88 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ab8:	4883      	ldr	r0, [pc, #524]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000aba:	4b84      	ldr	r3, [pc, #528]	@ (8000ccc <MX_ADC1_Init+0x22c>)
 8000abc:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000abe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac2:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac4:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aca:	7604      	strb	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000acc:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad0:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad2:	4a7f      	ldr	r2, [pc, #508]	@ (8000cd0 <MX_ADC1_Init+0x230>)
 8000ad4:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad6:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 13;
 8000ad8:	220d      	movs	r2, #13
 8000ada:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000adc:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae0:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae2:	f003 fb13 	bl	800410c <HAL_ADC_Init>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	f040 80b8 	bne.w	8000c5c <MX_ADC1_Init+0x1bc>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 8000af0:	2201      	movs	r2, #1
 8000af2:	9209      	str	r2, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000af4:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af6:	a908      	add	r1, sp, #32
 8000af8:	4873      	ldr	r0, [pc, #460]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000afa:	f003 fc31 	bl	8004360 <HAL_ADC_ConfigChannel>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	f040 80af 	bne.w	8000c62 <MX_ADC1_Init+0x1c2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	a908      	add	r1, sp, #32
 8000b0e:	486e      	ldr	r0, [pc, #440]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b10:	f003 fc26 	bl	8004360 <HAL_ADC_ConfigChannel>
 8000b14:	2800      	cmp	r0, #0
 8000b16:	f040 80a7 	bne.w	8000c68 <MX_ADC1_Init+0x1c8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 3;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b22:	a908      	add	r1, sp, #32
 8000b24:	4868      	ldr	r0, [pc, #416]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b26:	f003 fc1b 	bl	8004360 <HAL_ADC_ConfigChannel>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	f040 809f 	bne.w	8000c6e <MX_ADC1_Init+0x1ce>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b30:	2303      	movs	r3, #3
 8000b32:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 4;
 8000b34:	2304      	movs	r3, #4
 8000b36:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b38:	a908      	add	r1, sp, #32
 8000b3a:	4863      	ldr	r0, [pc, #396]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b3c:	f003 fc10 	bl	8004360 <HAL_ADC_ConfigChannel>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	f040 8097 	bne.w	8000c74 <MX_ADC1_Init+0x1d4>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b46:	2304      	movs	r3, #4
 8000b48:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 5;
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4e:	a908      	add	r1, sp, #32
 8000b50:	485d      	ldr	r0, [pc, #372]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b52:	f003 fc05 	bl	8004360 <HAL_ADC_ConfigChannel>
 8000b56:	2800      	cmp	r0, #0
 8000b58:	f040 808f 	bne.w	8000c7a <MX_ADC1_Init+0x1da>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b5c:	2305      	movs	r3, #5
 8000b5e:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 6;
 8000b60:	2306      	movs	r3, #6
 8000b62:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b64:	a908      	add	r1, sp, #32
 8000b66:	4858      	ldr	r0, [pc, #352]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b68:	f003 fbfa 	bl	8004360 <HAL_ADC_ConfigChannel>
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	f040 8087 	bne.w	8000c80 <MX_ADC1_Init+0x1e0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b72:	2306      	movs	r3, #6
 8000b74:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 7;
 8000b76:	2307      	movs	r3, #7
 8000b78:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7a:	a908      	add	r1, sp, #32
 8000b7c:	4852      	ldr	r0, [pc, #328]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b7e:	f003 fbef 	bl	8004360 <HAL_ADC_ConfigChannel>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	d17f      	bne.n	8000c86 <MX_ADC1_Init+0x1e6>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b86:	2307      	movs	r3, #7
 8000b88:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 8;
 8000b8a:	2308      	movs	r3, #8
 8000b8c:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8e:	a908      	add	r1, sp, #32
 8000b90:	484d      	ldr	r0, [pc, #308]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b92:	f003 fbe5 	bl	8004360 <HAL_ADC_ConfigChannel>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d178      	bne.n	8000c8c <MX_ADC1_Init+0x1ec>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b9a:	230e      	movs	r3, #14
 8000b9c:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 9;
 8000b9e:	2309      	movs	r3, #9
 8000ba0:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba2:	a908      	add	r1, sp, #32
 8000ba4:	4848      	ldr	r0, [pc, #288]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000ba6:	f003 fbdb 	bl	8004360 <HAL_ADC_ConfigChannel>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	d171      	bne.n	8000c92 <MX_ADC1_Init+0x1f2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bae:	230a      	movs	r3, #10
 8000bb0:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 10;
 8000bb2:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb4:	a908      	add	r1, sp, #32
 8000bb6:	4844      	ldr	r0, [pc, #272]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bb8:	f003 fbd2 	bl	8004360 <HAL_ADC_ConfigChannel>
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	d16b      	bne.n	8000c98 <MX_ADC1_Init+0x1f8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 11;
 8000bc4:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc6:	a908      	add	r1, sp, #32
 8000bc8:	483f      	ldr	r0, [pc, #252]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bca:	f003 fbc9 	bl	8004360 <HAL_ADC_ConfigChannel>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	d165      	bne.n	8000c9e <MX_ADC1_Init+0x1fe>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 12;
 8000bd6:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd8:	a908      	add	r1, sp, #32
 8000bda:	483b      	ldr	r0, [pc, #236]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bdc:	f003 fbc0 	bl	8004360 <HAL_ADC_ConfigChannel>
 8000be0:	2800      	cmp	r0, #0
 8000be2:	d15f      	bne.n	8000ca4 <MX_ADC1_Init+0x204>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000be4:	230d      	movs	r3, #13
 8000be6:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 13;
 8000be8:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bea:	a908      	add	r1, sp, #32
 8000bec:	4836      	ldr	r0, [pc, #216]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bee:	f003 fbb7 	bl	8004360 <HAL_ADC_ConfigChannel>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d159      	bne.n	8000caa <MX_ADC1_Init+0x20a>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	9201      	str	r2, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8000bfe:	2204      	movs	r2, #4
 8000c00:	9204      	str	r2, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c02:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8000c04:	9307      	str	r3, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000c06:	4a33      	ldr	r2, [pc, #204]	@ (8000cd4 <MX_ADC1_Init+0x234>)
 8000c08:	9206      	str	r2, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000c0a:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000c0e:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 8000c12:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c14:	4669      	mov	r1, sp
 8000c16:	482c      	ldr	r0, [pc, #176]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c18:	f003 fc6c 	bl	80044f4 <HAL_ADCEx_InjectedConfigChannel>
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	d147      	bne.n	8000cb0 <MX_ADC1_Init+0x210>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c28:	4669      	mov	r1, sp
 8000c2a:	4827      	ldr	r0, [pc, #156]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c2c:	f003 fc62 	bl	80044f4 <HAL_ADCEx_InjectedConfigChannel>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d140      	bne.n	8000cb6 <MX_ADC1_Init+0x216>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 3;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c3c:	4669      	mov	r1, sp
 8000c3e:	4822      	ldr	r0, [pc, #136]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c40:	f003 fc58 	bl	80044f4 <HAL_ADCEx_InjectedConfigChannel>
 8000c44:	bbd0      	cbnz	r0, 8000cbc <MX_ADC1_Init+0x21c>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000c46:	2303      	movs	r3, #3
 8000c48:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 4;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c4e:	4669      	mov	r1, sp
 8000c50:	481d      	ldr	r0, [pc, #116]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c52:	f003 fc4f 	bl	80044f4 <HAL_ADCEx_InjectedConfigChannel>
 8000c56:	bba0      	cbnz	r0, 8000cc2 <MX_ADC1_Init+0x222>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c58:	b00c      	add	sp, #48	@ 0x30
 8000c5a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000c5c:	f002 f8aa 	bl	8002db4 <Error_Handler>
 8000c60:	e744      	b.n	8000aec <MX_ADC1_Init+0x4c>
    Error_Handler();
 8000c62:	f002 f8a7 	bl	8002db4 <Error_Handler>
 8000c66:	e74d      	b.n	8000b04 <MX_ADC1_Init+0x64>
    Error_Handler();
 8000c68:	f002 f8a4 	bl	8002db4 <Error_Handler>
 8000c6c:	e755      	b.n	8000b1a <MX_ADC1_Init+0x7a>
    Error_Handler();
 8000c6e:	f002 f8a1 	bl	8002db4 <Error_Handler>
 8000c72:	e75d      	b.n	8000b30 <MX_ADC1_Init+0x90>
    Error_Handler();
 8000c74:	f002 f89e 	bl	8002db4 <Error_Handler>
 8000c78:	e765      	b.n	8000b46 <MX_ADC1_Init+0xa6>
    Error_Handler();
 8000c7a:	f002 f89b 	bl	8002db4 <Error_Handler>
 8000c7e:	e76d      	b.n	8000b5c <MX_ADC1_Init+0xbc>
    Error_Handler();
 8000c80:	f002 f898 	bl	8002db4 <Error_Handler>
 8000c84:	e775      	b.n	8000b72 <MX_ADC1_Init+0xd2>
    Error_Handler();
 8000c86:	f002 f895 	bl	8002db4 <Error_Handler>
 8000c8a:	e77c      	b.n	8000b86 <MX_ADC1_Init+0xe6>
    Error_Handler();
 8000c8c:	f002 f892 	bl	8002db4 <Error_Handler>
 8000c90:	e783      	b.n	8000b9a <MX_ADC1_Init+0xfa>
    Error_Handler();
 8000c92:	f002 f88f 	bl	8002db4 <Error_Handler>
 8000c96:	e78a      	b.n	8000bae <MX_ADC1_Init+0x10e>
    Error_Handler();
 8000c98:	f002 f88c 	bl	8002db4 <Error_Handler>
 8000c9c:	e790      	b.n	8000bc0 <MX_ADC1_Init+0x120>
    Error_Handler();
 8000c9e:	f002 f889 	bl	8002db4 <Error_Handler>
 8000ca2:	e796      	b.n	8000bd2 <MX_ADC1_Init+0x132>
    Error_Handler();
 8000ca4:	f002 f886 	bl	8002db4 <Error_Handler>
 8000ca8:	e79c      	b.n	8000be4 <MX_ADC1_Init+0x144>
    Error_Handler();
 8000caa:	f002 f883 	bl	8002db4 <Error_Handler>
 8000cae:	e7a2      	b.n	8000bf6 <MX_ADC1_Init+0x156>
    Error_Handler();
 8000cb0:	f002 f880 	bl	8002db4 <Error_Handler>
 8000cb4:	e7b4      	b.n	8000c20 <MX_ADC1_Init+0x180>
    Error_Handler();
 8000cb6:	f002 f87d 	bl	8002db4 <Error_Handler>
 8000cba:	e7bb      	b.n	8000c34 <MX_ADC1_Init+0x194>
    Error_Handler();
 8000cbc:	f002 f87a 	bl	8002db4 <Error_Handler>
 8000cc0:	e7c1      	b.n	8000c46 <MX_ADC1_Init+0x1a6>
    Error_Handler();
 8000cc2:	f002 f877 	bl	8002db4 <Error_Handler>
}
 8000cc6:	e7c7      	b.n	8000c58 <MX_ADC1_Init+0x1b8>
 8000cc8:	2000022c 	.word	0x2000022c
 8000ccc:	40012000 	.word	0x40012000
 8000cd0:	0f000001 	.word	0x0f000001
 8000cd4:	000f0001 	.word	0x000f0001

08000cd8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cda:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	2300      	movs	r3, #0
 8000cde:	9303      	str	r3, [sp, #12]
 8000ce0:	9304      	str	r3, [sp, #16]
 8000ce2:	9305      	str	r3, [sp, #20]
 8000ce4:	9306      	str	r3, [sp, #24]
 8000ce6:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000ce8:	6802      	ldr	r2, [r0, #0]
 8000cea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cee:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d001      	beq.n	8000cfa <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cf6:	b009      	add	sp, #36	@ 0x24
 8000cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cfa:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cfc:	2500      	movs	r5, #0
 8000cfe:	9500      	str	r5, [sp, #0]
 8000d00:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d0a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000d0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d0e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000d12:	9200      	str	r2, [sp, #0]
 8000d14:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	9501      	str	r5, [sp, #4]
 8000d18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d1a:	f042 0204 	orr.w	r2, r2, #4
 8000d1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d22:	f002 0204 	and.w	r2, r2, #4
 8000d26:	9201      	str	r2, [sp, #4]
 8000d28:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	9502      	str	r5, [sp, #8]
 8000d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d2e:	f042 0201 	orr.w	r2, r2, #1
 8000d32:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD_INPUT1_PIN_Pin|AD_INPUT2_PIN_Pin|AD_INPUT3_PIN_Pin|AD_INPUT4_PIN_Pin
 8000d3e:	231f      	movs	r3, #31
 8000d40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d42:	2703      	movs	r7, #3
 8000d44:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	ae03      	add	r6, sp, #12
 8000d48:	4631      	mov	r1, r6
 8000d4a:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <HAL_ADC_MspInit+0xc4>)
 8000d4c:	f003 ff4e 	bl	8004bec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ETB1_SENSE1_Pin|ETB1_SENSE2_Pin|ETB2_SENSE1_Pin|ETB2_SENSE2_Pin
 8000d50:	23ff      	movs	r3, #255	@ 0xff
 8000d52:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d54:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	4631      	mov	r1, r6
 8000d5a:	4811      	ldr	r0, [pc, #68]	@ (8000da0 <HAL_ADC_MspInit+0xc8>)
 8000d5c:	f003 ff46 	bl	8004bec <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000d60:	4810      	ldr	r0, [pc, #64]	@ (8000da4 <HAL_ADC_MspInit+0xcc>)
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <HAL_ADC_MspInit+0xd0>)
 8000d64:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d66:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d68:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6a:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d70:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d76:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d7c:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d7e:	61c5      	str	r5, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d84:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d86:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d88:	f003 fda8 	bl	80048dc <HAL_DMA_Init>
 8000d8c:	b918      	cbnz	r0, 8000d96 <HAL_ADC_MspInit+0xbe>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d8e:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <HAL_ADC_MspInit+0xcc>)
 8000d90:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000d92:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000d94:	e7af      	b.n	8000cf6 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000d96:	f002 f80d 	bl	8002db4 <Error_Handler>
 8000d9a:	e7f8      	b.n	8000d8e <HAL_ADC_MspInit+0xb6>
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	200001cc 	.word	0x200001cc
 8000da8:	40026410 	.word	0x40026410

08000dac <analog_inputs_start_conversion>:
 * 
 * This function triggers the ADC to begin converting the analog signals
 * to digital values.
 */
void analog_inputs_start_conversion()
{
 8000dac:	b508      	push	{r3, lr}
    if (hadc == NULL)
 8000dae:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <analog_inputs_start_conversion+0x14>)
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	b118      	cbz	r0, 8000dbc <analog_inputs_start_conversion+0x10>
    {
        return;
    }
    
    HAL_ADC_Start_DMA(hadc, (uint32_t*)&analog_data, ANALOG_INPUTS_MAX * ANALOG_INPUTS_NUMBER_OF_SAMPLES);
 8000db4:	2268      	movs	r2, #104	@ 0x68
 8000db6:	4903      	ldr	r1, [pc, #12]	@ (8000dc4 <analog_inputs_start_conversion+0x18>)
 8000db8:	f003 f9d4 	bl	8004164 <HAL_ADC_Start_DMA>
}
 8000dbc:	bd08      	pop	{r3, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000344 	.word	0x20000344
 8000dc4:	20000274 	.word	0x20000274

08000dc8 <HAL_ADC_ConvCpltCallback>:
}
 8000dc8:	4770      	bx	lr
	...

08000dcc <analog_inputs_init>:
{
 8000dcc:	b508      	push	{r3, lr}
    if (adc_handle == NULL)
 8000dce:	b158      	cbz	r0, 8000de8 <analog_inputs_init+0x1c>
    hadc = adc_handle;
 8000dd0:	4a07      	ldr	r2, [pc, #28]	@ (8000df0 <analog_inputs_init+0x24>)
 8000dd2:	6010      	str	r0, [r2, #0]
    osTimerId_t timer_id = osTimerNew(
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <analog_inputs_init+0x28>)
 8000ddc:	f000 f8d8 	bl	8000f90 <osTimerNew>
    osTimerStart(timer_id, 1);
 8000de0:	2101      	movs	r1, #1
 8000de2:	f000 f929 	bl	8001038 <osTimerStart>
}
 8000de6:	bd08      	pop	{r3, pc}
        log_error("Analog input init failed! adc handle is null.");
 8000de8:	4803      	ldr	r0, [pc, #12]	@ (8000df8 <analog_inputs_init+0x2c>)
 8000dea:	f001 f9a3 	bl	8002134 <log_error>
        return;
 8000dee:	e7fa      	b.n	8000de6 <analog_inputs_init+0x1a>
 8000df0:	20000344 	.word	0x20000344
 8000df4:	08000dad 	.word	0x08000dad
 8000df8:	0800bb48 	.word	0x0800bb48

08000dfc <analog_inputs_get_data>:
 * @param input_index The index of the analog input to retrieve data from.
 *                    This index corresponds to the specific channel of the ADC.
 * @return The digital value of the specified analog input.
 */
uint16_t analog_inputs_get_data(analog_input_channel_t input_index)
{
 8000dfc:	b510      	push	{r4, lr}
    if (input_index >= ANALOG_INPUTS_MAX)
 8000dfe:	280c      	cmp	r0, #12
 8000e00:	d802      	bhi.n	8000e08 <analog_inputs_get_data+0xc>
    {
        log_error("Invalid index in analog input.");
        return 0;
    }
    uint_fast32_t sum = 0;
    for (uint_fast8_t i = 0; i < ANALOG_INPUTS_NUMBER_OF_SAMPLES; i++)
 8000e02:	2300      	movs	r3, #0
    uint_fast32_t sum = 0;
 8000e04:	4619      	mov	r1, r3
 8000e06:	e00f      	b.n	8000e28 <analog_inputs_get_data+0x2c>
        log_error("Invalid index in analog input.");
 8000e08:	480a      	ldr	r0, [pc, #40]	@ (8000e34 <analog_inputs_get_data+0x38>)
 8000e0a:	f001 f993 	bl	8002134 <log_error>
        return 0;
 8000e0e:	2000      	movs	r0, #0
 8000e10:	e00e      	b.n	8000e30 <analog_inputs_get_data+0x34>
    {
        sum += analog_data[i * ANALOG_INPUTS_MAX + input_index];
 8000e12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000e16:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000e1a:	4402      	add	r2, r0
 8000e1c:	4c06      	ldr	r4, [pc, #24]	@ (8000e38 <analog_inputs_get_data+0x3c>)
 8000e1e:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 8000e22:	fa11 f182 	uxtah	r1, r1, r2
    for (uint_fast8_t i = 0; i < ANALOG_INPUTS_NUMBER_OF_SAMPLES; i++)
 8000e26:	3301      	adds	r3, #1
 8000e28:	2b07      	cmp	r3, #7
 8000e2a:	d9f2      	bls.n	8000e12 <analog_inputs_get_data+0x16>
    }
    
    return sum / ANALOG_INPUTS_NUMBER_OF_SAMPLES;
 8000e2c:	f3c1 00cf 	ubfx	r0, r1, #3, #16
}
 8000e30:	bd10      	pop	{r4, pc}
 8000e32:	bf00      	nop
 8000e34:	0800bb78 	.word	0x0800bb78
 8000e38:	20000274 	.word	0x20000274

08000e3c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8000e3c:	b508      	push	{r3, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8000e3e:	f008 f90a 	bl	8009056 <pvTimerGetTimerID>

  if (callb != NULL) {
 8000e42:	b110      	cbz	r0, 8000e4a <TimerCallback+0xe>
    callb->func (callb->arg);
 8000e44:	6802      	ldr	r2, [r0, #0]
 8000e46:	6840      	ldr	r0, [r0, #4]
 8000e48:	4790      	blx	r2
  }
}
 8000e4a:	bd08      	pop	{r3, pc}

08000e4c <SysTick_Handler>:
void SysTick_Handler (void) {
 8000e4c:	b508      	push	{r3, lr}
  SysTick->CTRL;
 8000e4e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000e52:	691b      	ldr	r3, [r3, #16]
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8000e54:	f007 fbaa 	bl	80085ac <xTaskGetSchedulerState>
 8000e58:	2801      	cmp	r0, #1
 8000e5a:	d100      	bne.n	8000e5e <SysTick_Handler+0x12>
}
 8000e5c:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8000e5e:	f002 f981 	bl	8003164 <xPortSysTickHandler>
}
 8000e62:	e7fb      	b.n	8000e5c <SysTick_Handler+0x10>

08000e64 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000e64:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000e68:	b92b      	cbnz	r3, 8000e76 <osKernelInitialize+0x12>
    if (KernelState == osKernelInactive) {
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <osKernelInitialize+0x20>)
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	b928      	cbnz	r0, 8000e7c <osKernelInitialize+0x18>
      KernelState = osKernelReady;
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000e74:	4770      	bx	lr
    stat = osErrorISR;
 8000e76:	f06f 0005 	mvn.w	r0, #5
 8000e7a:	4770      	bx	lr
      stat = osError;
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000a00 	.word	0x20000a00

08000e88 <osKernelStart>:
 8000e88:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000e8c:	b973      	cbnz	r3, 8000eac <osKernelStart+0x24>
    if (KernelState == osKernelReady) {
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <osKernelStart+0x30>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d10d      	bne.n	8000eb2 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8000e96:	b510      	push	{r4, lr}
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	2400      	movs	r4, #0
 8000e9a:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <osKernelStart+0x34>)
 8000e9c:	77dc      	strb	r4, [r3, #31]
      KernelState = osKernelRunning;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <osKernelStart+0x30>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8000ea4:	f007 f8de 	bl	8008064 <vTaskStartScheduler>
      stat = osOK;
 8000ea8:	4620      	mov	r0, r4
}
 8000eaa:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8000eac:	f06f 0005 	mvn.w	r0, #5
 8000eb0:	4770      	bx	lr
      stat = osError;
 8000eb2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000eb6:	4770      	bx	lr
 8000eb8:	20000a00 	.word	0x20000a00
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec2:	b087      	sub	sp, #28
  hTask = NULL;
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	9405      	str	r4, [sp, #20]
 8000ec8:	f3ef 8405 	mrs	r4, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 8000ecc:	bb04      	cbnz	r4, 8000f10 <osThreadNew+0x50>
 8000ece:	b1f8      	cbz	r0, 8000f10 <osThreadNew+0x50>
    if (attr != NULL) {
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	d034      	beq.n	8000f3e <osThreadNew+0x7e>
      if (attr->name != NULL) {
 8000ed4:	6815      	ldr	r5, [r2, #0]
      if (attr->priority != osPriorityNone) {
 8000ed6:	6993      	ldr	r3, [r2, #24]
 8000ed8:	b12b      	cbz	r3, 8000ee6 <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 8000eda:	461e      	mov	r6, r3
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000edc:	3b01      	subs	r3, #1
 8000ede:	2b37      	cmp	r3, #55	@ 0x37
 8000ee0:	d902      	bls.n	8000ee8 <osThreadNew+0x28>
        return (NULL);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	e015      	b.n	8000f12 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;
 8000ee6:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000ee8:	6853      	ldr	r3, [r2, #4]
 8000eea:	f013 0f01 	tst.w	r3, #1
 8000eee:	d13f      	bne.n	8000f70 <osThreadNew+0xb0>
      if (attr->stack_size > 0U) {
 8000ef0:	6954      	ldr	r4, [r2, #20]
 8000ef2:	b184      	cbz	r4, 8000f16 <osThreadNew+0x56>
        stack = attr->stack_size / sizeof(StackType_t);
 8000ef4:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000ef8:	6893      	ldr	r3, [r2, #8]
 8000efa:	b12b      	cbz	r3, 8000f08 <osThreadNew+0x48>
 8000efc:	68d7      	ldr	r7, [r2, #12]
 8000efe:	2f5b      	cmp	r7, #91	@ 0x5b
 8000f00:	d902      	bls.n	8000f08 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000f02:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000f04:	b107      	cbz	r7, 8000f08 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000f06:	b984      	cbnz	r4, 8000f2a <osThreadNew+0x6a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000f08:	b143      	cbz	r3, 8000f1c <osThreadNew+0x5c>
    mem  = -1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
      if (mem == 0) {
 8000f0e:	b30b      	cbz	r3, 8000f54 <osThreadNew+0x94>
  return ((osThreadId_t)hTask);
 8000f10:	9805      	ldr	r0, [sp, #20]
}
 8000f12:	b007      	add	sp, #28
 8000f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8000f16:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000f1a:	e7ed      	b.n	8000ef8 <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000f1c:	68d3      	ldr	r3, [r2, #12]
 8000f1e:	b9a3      	cbnz	r3, 8000f4a <osThreadNew+0x8a>
 8000f20:	6913      	ldr	r3, [r2, #16]
 8000f22:	b1ab      	cbz	r3, 8000f50 <osThreadNew+0x90>
    mem  = -1;
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	e7f1      	b.n	8000f0e <osThreadNew+0x4e>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	9701      	str	r7, [sp, #4]
 8000f2e:	9600      	str	r6, [sp, #0]
 8000f30:	460b      	mov	r3, r1
 8000f32:	4662      	mov	r2, ip
 8000f34:	4629      	mov	r1, r5
 8000f36:	f007 f827 	bl	8007f88 <xTaskCreateStatic>
 8000f3a:	9005      	str	r0, [sp, #20]
 8000f3c:	e7e8      	b.n	8000f10 <osThreadNew+0x50>
    name = NULL;
 8000f3e:	4615      	mov	r5, r2
      mem = 0;
 8000f40:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8000f42:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 8000f44:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000f48:	e7e1      	b.n	8000f0e <osThreadNew+0x4e>
    mem  = -1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e7de      	b.n	8000f0e <osThreadNew+0x4e>
          mem = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	e7dc      	b.n	8000f0e <osThreadNew+0x4e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000f54:	ab05      	add	r3, sp, #20
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	9600      	str	r6, [sp, #0]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	fa1f f28c 	uxth.w	r2, ip
 8000f60:	4629      	mov	r1, r5
 8000f62:	f007 f84c 	bl	8007ffe <xTaskCreate>
 8000f66:	2801      	cmp	r0, #1
 8000f68:	d0d2      	beq.n	8000f10 <osThreadNew+0x50>
            hTask = NULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9305      	str	r3, [sp, #20]
 8000f6e:	e7cf      	b.n	8000f10 <osThreadNew+0x50>
        return (NULL);
 8000f70:	2000      	movs	r0, #0
 8000f72:	e7ce      	b.n	8000f12 <osThreadNew+0x52>

08000f74 <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
 8000f74:	b508      	push	{r3, lr}
 8000f76:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000f7a:	b933      	cbnz	r3, 8000f8a <osDelay+0x16>
    if (ticks != 0U) {
 8000f7c:	b908      	cbnz	r0, 8000f82 <osDelay+0xe>
    stat = osOK;
 8000f7e:	2000      	movs	r0, #0
}
 8000f80:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8000f82:	f007 f9d1 	bl	8008328 <vTaskDelay>
    stat = osOK;
 8000f86:	2000      	movs	r0, #0
 8000f88:	e7fa      	b.n	8000f80 <osDelay+0xc>
    stat = osErrorISR;
 8000f8a:	f06f 0005 	mvn.w	r0, #5
 8000f8e:	e7f7      	b.n	8000f80 <osDelay+0xc>

08000f90 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8000f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f94:	b083      	sub	sp, #12
 8000f96:	f3ef 8705 	mrs	r7, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 8000f9a:	2f00      	cmp	r7, #0
 8000f9c:	d143      	bne.n	8001026 <osTimerNew+0x96>
 8000f9e:	4606      	mov	r6, r0
 8000fa0:	4689      	mov	r9, r1
 8000fa2:	4615      	mov	r5, r2
 8000fa4:	461c      	mov	r4, r3
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d03f      	beq.n	800102a <osTimerNew+0x9a>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8000faa:	2008      	movs	r0, #8
 8000fac:	f001 fae4 	bl	8002578 <pvPortMalloc>

    if (callb != NULL) {
 8000fb0:	4680      	mov	r8, r0
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d03b      	beq.n	800102e <osTimerNew+0x9e>
      callb->func = func;
 8000fb6:	6006      	str	r6, [r0, #0]
      callb->arg  = argument;
 8000fb8:	6045      	str	r5, [r0, #4]

      if (type == osTimerOnce) {
 8000fba:	f1b9 0f00 	cmp.w	r9, #0
 8000fbe:	d000      	beq.n	8000fc2 <osTimerNew+0x32>
        reload = pdFALSE;
      } else {
        reload = pdTRUE;
 8000fc0:	2701      	movs	r7, #1
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
 8000fc2:	b304      	cbz	r4, 8001006 <osTimerNew+0x76>
        if (attr->name != NULL) {
 8000fc4:	6820      	ldr	r0, [r4, #0]
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8000fc6:	68a3      	ldr	r3, [r4, #8]
 8000fc8:	b113      	cbz	r3, 8000fd0 <osTimerNew+0x40>
 8000fca:	68e2      	ldr	r2, [r4, #12]
 8000fcc:	2a2b      	cmp	r2, #43	@ 0x2b
 8000fce:	d810      	bhi.n	8000ff2 <osTimerNew+0x62>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000fd0:	b153      	cbz	r3, 8000fe8 <osTimerNew+0x58>
      mem  = -1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
        #endif
      }
      else {
        if (mem == 0) {
 8000fd6:	b1db      	cbz	r3, 8001010 <osTimerNew+0x80>
  hTimer = NULL;
 8000fd8:	2400      	movs	r4, #0
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
        vPortFree (callb);
 8000fda:	4640      	mov	r0, r8
 8000fdc:	f001 fb4e 	bl	800267c <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	b003      	add	sp, #12
 8000fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000fe8:	68e3      	ldr	r3, [r4, #12]
 8000fea:	b17b      	cbz	r3, 800100c <osTimerNew+0x7c>
      mem  = -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	e7f1      	b.n	8000fd6 <osTimerNew+0x46>
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <osTimerNew+0xa4>)
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	4643      	mov	r3, r8
 8000ffa:	463a      	mov	r2, r7
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	f007 fe75 	bl	8008cec <xTimerCreateStatic>
 8001002:	4604      	mov	r4, r0
 8001004:	e00c      	b.n	8001020 <osTimerNew+0x90>
      name = NULL;
 8001006:	4620      	mov	r0, r4
        mem = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	e7e4      	b.n	8000fd6 <osTimerNew+0x46>
            mem = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	e7e2      	b.n	8000fd6 <osTimerNew+0x46>
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <osTimerNew+0xa4>)
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	4643      	mov	r3, r8
 8001016:	463a      	mov	r2, r7
 8001018:	2101      	movs	r1, #1
 800101a:	f007 fe4b 	bl	8008cb4 <xTimerCreate>
 800101e:	4604      	mov	r4, r0
      if ((hTimer == NULL) && (callb != NULL)) {
 8001020:	2c00      	cmp	r4, #0
 8001022:	d1dd      	bne.n	8000fe0 <osTimerNew+0x50>
 8001024:	e7d9      	b.n	8000fda <osTimerNew+0x4a>
  hTimer = NULL;
 8001026:	2400      	movs	r4, #0
 8001028:	e7da      	b.n	8000fe0 <osTimerNew+0x50>
 800102a:	2400      	movs	r4, #0
 800102c:	e7d8      	b.n	8000fe0 <osTimerNew+0x50>
 800102e:	4604      	mov	r4, r0
  return ((osTimerId_t)hTimer);
 8001030:	e7d6      	b.n	8000fe0 <osTimerNew+0x50>
 8001032:	bf00      	nop
 8001034:	08000e3d 	.word	0x08000e3d

08001038 <osTimerStart>:
 8001038:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 800103c:	b96b      	cbnz	r3, 800105a <osTimerStart+0x22>
 800103e:	460a      	mov	r2, r1
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
 8001040:	b170      	cbz	r0, 8001060 <osTimerStart+0x28>
osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8001042:	b500      	push	{lr}
 8001044:	b083      	sub	sp, #12
    stat = osErrorParameter;
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2104      	movs	r1, #4
 800104a:	f007 fe79 	bl	8008d40 <xTimerGenericCommand>
 800104e:	2801      	cmp	r0, #1
 8001050:	d109      	bne.n	8001066 <osTimerStart+0x2e>
      stat = osOK;
 8001052:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8001054:	b003      	add	sp, #12
 8001056:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorISR;
 800105a:	f06f 0005 	mvn.w	r0, #5
 800105e:	4770      	bx	lr
    stat = osErrorParameter;
 8001060:	f06f 0003 	mvn.w	r0, #3
}
 8001064:	4770      	bx	lr
      stat = osErrorResource;
 8001066:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800106a:	e7f3      	b.n	8001054 <osTimerStart+0x1c>

0800106c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800106c:	b508      	push	{r3, lr}
 800106e:	f3ef 8305 	mrs	r3, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8001072:	b9cb      	cbnz	r3, 80010a8 <osEventFlagsNew+0x3c>
    mem = -1;

    if (attr != NULL) {
 8001074:	b1a0      	cbz	r0, 80010a0 <osEventFlagsNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8001076:	6883      	ldr	r3, [r0, #8]
 8001078:	b113      	cbz	r3, 8001080 <osEventFlagsNew+0x14>
 800107a:	68c2      	ldr	r2, [r0, #12]
 800107c:	2a1f      	cmp	r2, #31
 800107e:	d80b      	bhi.n	8001098 <osEventFlagsNew+0x2c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001080:	b12b      	cbz	r3, 800108e <osEventFlagsNew+0x22>
    mem = -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8001086:	b98b      	cbnz	r3, 80010ac <osEventFlagsNew+0x40>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8001088:	f001 f8b5 	bl	80021f6 <xEventGroupCreate>
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
}
 800108c:	bd08      	pop	{r3, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800108e:	68c3      	ldr	r3, [r0, #12]
 8001090:	b143      	cbz	r3, 80010a4 <osEventFlagsNew+0x38>
    mem = -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	e7f6      	b.n	8001086 <osEventFlagsNew+0x1a>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8001098:	4618      	mov	r0, r3
 800109a:	f001 f887 	bl	80021ac <xEventGroupCreateStatic>
 800109e:	e7f5      	b.n	800108c <osEventFlagsNew+0x20>
      mem = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e7f0      	b.n	8001086 <osEventFlagsNew+0x1a>
          mem = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	e7ee      	b.n	8001086 <osEventFlagsNew+0x1a>
  hEventGroup = NULL;
 80010a8:	2000      	movs	r0, #0
 80010aa:	e7ef      	b.n	800108c <osEventFlagsNew+0x20>
 80010ac:	2000      	movs	r0, #0
  return ((osEventFlagsId_t)hEventGroup);
 80010ae:	e7ed      	b.n	800108c <osEventFlagsNew+0x20>

080010b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80010b0:	b570      	push	{r4, r5, r6, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d13a      	bne.n	8001132 <osMessageQueueNew+0x82>
 80010bc:	4614      	mov	r4, r2
 80010be:	2800      	cmp	r0, #0
 80010c0:	d03b      	beq.n	800113a <osMessageQueueNew+0x8a>
 80010c2:	2900      	cmp	r1, #0
 80010c4:	d03b      	beq.n	800113e <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 80010c6:	b36a      	cbz	r2, 8001124 <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80010c8:	6893      	ldr	r3, [r2, #8]
 80010ca:	b14b      	cbz	r3, 80010e0 <osMessageQueueNew+0x30>
 80010cc:	68d2      	ldr	r2, [r2, #12]
 80010ce:	2a4f      	cmp	r2, #79	@ 0x4f
 80010d0:	d906      	bls.n	80010e0 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80010d2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80010d4:	b122      	cbz	r2, 80010e0 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80010d6:	fb01 f500 	mul.w	r5, r1, r0
 80010da:	6966      	ldr	r6, [r4, #20]
 80010dc:	42ae      	cmp	r6, r5
 80010de:	d21b      	bcs.n	8001118 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80010e0:	b173      	cbz	r3, 8001100 <osMessageQueueNew+0x50>
    mem = -1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80010e6:	bb63      	cbnz	r3, 8001142 <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f002 fa5c 	bl	80035a6 <xQueueGenericCreate>
 80010ee:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80010f0:	b305      	cbz	r5, 8001134 <osMessageQueueNew+0x84>
      if (attr != NULL) {
 80010f2:	b104      	cbz	r4, 80010f6 <osMessageQueueNew+0x46>
        name = attr->name;
 80010f4:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 80010f6:	4621      	mov	r1, r4
 80010f8:	4628      	mov	r0, r5
 80010fa:	f002 fca9 	bl	8003a50 <vQueueAddToRegistry>
 80010fe:	e019      	b.n	8001134 <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001100:	68e3      	ldr	r3, [r4, #12]
 8001102:	b98b      	cbnz	r3, 8001128 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001104:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001106:	b113      	cbz	r3, 800110e <osMessageQueueNew+0x5e>
    mem = -1;
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	e7eb      	b.n	80010e6 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800110e:	6963      	ldr	r3, [r4, #20]
 8001110:	b16b      	cbz	r3, 800112e <osMessageQueueNew+0x7e>
    mem = -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e7e6      	b.n	80010e6 <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001118:	2500      	movs	r5, #0
 800111a:	9500      	str	r5, [sp, #0]
 800111c:	f002 f9f9 	bl	8003512 <xQueueGenericCreateStatic>
 8001120:	4605      	mov	r5, r0
 8001122:	e7e5      	b.n	80010f0 <osMessageQueueNew+0x40>
      mem = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	e7de      	b.n	80010e6 <osMessageQueueNew+0x36>
    mem = -1;
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	e7db      	b.n	80010e6 <osMessageQueueNew+0x36>
          mem = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	e7d9      	b.n	80010e6 <osMessageQueueNew+0x36>
  hQueue = NULL;
 8001132:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8001134:	4628      	mov	r0, r5
 8001136:	b002      	add	sp, #8
 8001138:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800113a:	2500      	movs	r5, #0
 800113c:	e7fa      	b.n	8001134 <osMessageQueueNew+0x84>
 800113e:	2500      	movs	r5, #0
 8001140:	e7f8      	b.n	8001134 <osMessageQueueNew+0x84>
 8001142:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8001144:	e7f6      	b.n	8001134 <osMessageQueueNew+0x84>

08001146 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8001146:	b510      	push	{r4, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	461c      	mov	r4, r3
 800114c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8001150:	b1c3      	cbz	r3, 8001184 <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001152:	b318      	cbz	r0, 800119c <osMessageQueuePut+0x56>
 8001154:	b329      	cbz	r1, 80011a2 <osMessageQueuePut+0x5c>
 8001156:	bb3c      	cbnz	r4, 80011a8 <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8001158:	2300      	movs	r3, #0
 800115a:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800115c:	aa01      	add	r2, sp, #4
 800115e:	f002 fb0a 	bl	8003776 <xQueueGenericSendFromISR>
 8001162:	2801      	cmp	r0, #1
 8001164:	d123      	bne.n	80011ae <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8001166:	9801      	ldr	r0, [sp, #4]
 8001168:	b150      	cbz	r0, 8001180 <osMessageQueuePut+0x3a>
 800116a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800116e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001172:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001176:	f3bf 8f4f 	dsb	sy
 800117a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800117e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8001180:	b002      	add	sp, #8
 8001182:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001184:	b1b0      	cbz	r0, 80011b4 <osMessageQueuePut+0x6e>
 8001186:	b1c1      	cbz	r1, 80011ba <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001188:	2300      	movs	r3, #0
 800118a:	4622      	mov	r2, r4
 800118c:	f002 fa2f 	bl	80035ee <xQueueGenericSend>
 8001190:	2801      	cmp	r0, #1
 8001192:	d015      	beq.n	80011c0 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 8001194:	b1b4      	cbz	r4, 80011c4 <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 8001196:	f06f 0001 	mvn.w	r0, #1
 800119a:	e7f1      	b.n	8001180 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 800119c:	f06f 0003 	mvn.w	r0, #3
 80011a0:	e7ee      	b.n	8001180 <osMessageQueuePut+0x3a>
 80011a2:	f06f 0003 	mvn.w	r0, #3
 80011a6:	e7eb      	b.n	8001180 <osMessageQueuePut+0x3a>
 80011a8:	f06f 0003 	mvn.w	r0, #3
 80011ac:	e7e8      	b.n	8001180 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 80011ae:	f06f 0002 	mvn.w	r0, #2
 80011b2:	e7e5      	b.n	8001180 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 80011b4:	f06f 0003 	mvn.w	r0, #3
 80011b8:	e7e2      	b.n	8001180 <osMessageQueuePut+0x3a>
 80011ba:	f06f 0003 	mvn.w	r0, #3
 80011be:	e7df      	b.n	8001180 <osMessageQueuePut+0x3a>
  stat = osOK;
 80011c0:	2000      	movs	r0, #0
 80011c2:	e7dd      	b.n	8001180 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 80011c4:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80011c8:	e7da      	b.n	8001180 <osMessageQueuePut+0x3a>

080011ca <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80011ca:	b510      	push	{r4, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	461c      	mov	r4, r3
 80011d0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80011d4:	b1c3      	cbz	r3, 8001208 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80011d6:	b310      	cbz	r0, 800121e <osMessageQueueGet+0x54>
 80011d8:	b321      	cbz	r1, 8001224 <osMessageQueueGet+0x5a>
 80011da:	bb34      	cbnz	r4, 800122a <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80011dc:	2300      	movs	r3, #0
 80011de:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80011e0:	aa01      	add	r2, sp, #4
 80011e2:	f002 fbde 	bl	80039a2 <xQueueReceiveFromISR>
 80011e6:	2801      	cmp	r0, #1
 80011e8:	d122      	bne.n	8001230 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80011ea:	9801      	ldr	r0, [sp, #4]
 80011ec:	b150      	cbz	r0, 8001204 <osMessageQueueGet+0x3a>
 80011ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80011f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80011fa:	f3bf 8f4f 	dsb	sy
 80011fe:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8001202:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8001204:	b002      	add	sp, #8
 8001206:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001208:	b1a8      	cbz	r0, 8001236 <osMessageQueueGet+0x6c>
 800120a:	b1b9      	cbz	r1, 800123c <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800120c:	4622      	mov	r2, r4
 800120e:	f002 fb19 	bl	8003844 <xQueueReceive>
 8001212:	2801      	cmp	r0, #1
 8001214:	d015      	beq.n	8001242 <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8001216:	b1b4      	cbz	r4, 8001246 <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8001218:	f06f 0001 	mvn.w	r0, #1
 800121c:	e7f2      	b.n	8001204 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800121e:	f06f 0003 	mvn.w	r0, #3
 8001222:	e7ef      	b.n	8001204 <osMessageQueueGet+0x3a>
 8001224:	f06f 0003 	mvn.w	r0, #3
 8001228:	e7ec      	b.n	8001204 <osMessageQueueGet+0x3a>
 800122a:	f06f 0003 	mvn.w	r0, #3
 800122e:	e7e9      	b.n	8001204 <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8001230:	f06f 0002 	mvn.w	r0, #2
 8001234:	e7e6      	b.n	8001204 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8001236:	f06f 0003 	mvn.w	r0, #3
 800123a:	e7e3      	b.n	8001204 <osMessageQueueGet+0x3a>
 800123c:	f06f 0003 	mvn.w	r0, #3
 8001240:	e7e0      	b.n	8001204 <osMessageQueueGet+0x3a>
  stat = osOK;
 8001242:	2000      	movs	r0, #0
 8001244:	e7de      	b.n	8001204 <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 8001246:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800124a:	e7db      	b.n	8001204 <osMessageQueueGet+0x3a>

0800124c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <vApplicationGetIdleTaskMemory+0x10>)
 800124e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <vApplicationGetIdleTaskMemory+0x14>)
 8001252:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200009a4 	.word	0x200009a4
 8001260:	200007a4 	.word	0x200007a4

08001264 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001264:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <vApplicationGetTimerTaskMemory+0x10>)
 8001266:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <vApplicationGetTimerTaskMemory+0x14>)
 800126a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800126c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001270:	6013      	str	r3, [r2, #0]
}
 8001272:	4770      	bx	lr
 8001274:	20000748 	.word	0x20000748
 8001278:	20000348 	.word	0x20000348

0800127c <transmit_crc_packet>:
    }
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}

void transmit_crc_packet(uint8_t flag, const uint8_t *buf, size_t size)
{
 800127c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001280:	b083      	sub	sp, #12
 8001282:	460f      	mov	r7, r1
 8001284:	4615      	mov	r5, r2
 8001286:	f88d 0007 	strb.w	r0, [sp, #7]
	/* We first calculate the prefix */
    uint16_t packet_size = 0;
	packet_size += 2; // prefix
	packet_size += 1; // flag
	packet_size += 4; // CRC
	packet_size += size; // payload
 800128a:	b296      	uxth	r6, r2
 800128c:	f106 0807 	add.w	r8, r6, #7
 8001290:	fa1f f888 	uxth.w	r8, r8

	/* Converte the size to big endian */
	uint16_t prefix = 0;
	prefix = swap_endian_uint16(sizeof(flag) + size);
 8001294:	3601      	adds	r6, #1
}

// http://en.wikipedia.org/wiki/Endianness
inline uint16_t swap_endian_uint16(uint16_t x)
{
    return ((x << 8) | (x >> 8));
 8001296:	ba76      	rev16	r6, r6

	/* Now we calculate the CRC, over the flag and payload */
	uint32_t crc = 0;
	crc = crc32_inc(0, (void*)&flag, 1); // flag
 8001298:	2201      	movs	r2, #1
 800129a:	f10d 0107 	add.w	r1, sp, #7
 800129e:	2000      	movs	r0, #0
 80012a0:	f009 fc76 	bl	800ab90 <crc32_inc>
	crc = crc32_inc(crc, buf, size); // payload
 80012a4:	462a      	mov	r2, r5
 80012a6:	4639      	mov	r1, r7
 80012a8:	f009 fc72 	bl	800ab90 <crc32_inc>
}
inline uint32_t swap_endian_uint32(uint32_t x)
{
    return (((x >> 24) & 0x000000ff) | ((x << 8) & 0x00ff0000) |
 80012ac:	0204      	lsls	r4, r0, #8
 80012ae:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 80012b2:	ea44 6410 	orr.w	r4, r4, r0, lsr #24
            ((x >> 8) & 0x0000ff00) | ((x << 24) & 0xff000000));
 80012b6:	0a03      	lsrs	r3, r0, #8
 80012b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    return (((x >> 24) & 0x000000ff) | ((x << 8) & 0x00ff0000) |
 80012bc:	431c      	orrs	r4, r3
            ((x >> 8) & 0x0000ff00) | ((x << 24) & 0xff000000));
 80012be:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
	uint32_t suffix = 0;
	suffix = swap_endian_uint32(crc);

	/* Form the packet in the transmit buffer */
	size_t tx_buffer_index = 0;
	memcpy(tx_buffer, &prefix, sizeof(prefix)); // prefix to buffer
 80012c2:	f8df 9030 	ldr.w	r9, [pc, #48]	@ 80012f4 <transmit_crc_packet+0x78>
 80012c6:	f8a9 6000 	strh.w	r6, [r9]
	tx_buffer_index += sizeof(prefix);
	memcpy(tx_buffer + tx_buffer_index, &flag, sizeof(flag)); // flag to buffer
 80012ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012ce:	f889 3002 	strb.w	r3, [r9, #2]
	tx_buffer_index += sizeof(flag);
	memcpy(tx_buffer + tx_buffer_index, buf, size); // payload to buffer
 80012d2:	462a      	mov	r2, r5
 80012d4:	4639      	mov	r1, r7
 80012d6:	f109 0003 	add.w	r0, r9, #3
 80012da:	f009 fd09 	bl	800acf0 <memcpy>
	tx_buffer_index += size;
 80012de:	3503      	adds	r5, #3
	memcpy(tx_buffer + tx_buffer_index, &suffix, sizeof(suffix)); // suffix to buffer
 80012e0:	f849 4005 	str.w	r4, [r9, r5]
	tx_buffer_index += sizeof(suffix);

	/* Finally transmit over USB */

	CDC_Transmit_FS(tx_buffer, packet_size);
 80012e4:	4641      	mov	r1, r8
 80012e6:	4648      	mov	r0, r9
 80012e8:	f008 fc68 	bl	8009bbc <CDC_Transmit_FS>
}
 80012ec:	b003      	add	sp, #12
 80012ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012f2:	bf00      	nop
 80012f4:	20000e24 	.word	0x20000e24

080012f8 <send_response>:
{
 80012f8:	b538      	push	{r3, r4, r5, lr}
 80012fa:	4614      	mov	r4, r2
    if (mode == TS_CRC)
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d007      	beq.n	8001310 <send_response+0x18>
        if (size > 0)
 8001300:	b94a      	cbnz	r2, 8001316 <send_response+0x1e>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001308:	4807      	ldr	r0, [pc, #28]	@ (8001328 <send_response+0x30>)
 800130a:	f003 fd5a 	bl	8004dc2 <HAL_GPIO_WritePin>
}
 800130e:	bd38      	pop	{r3, r4, r5, pc}
        transmit_crc_packet(flag, data, size);
 8001310:	f7ff ffb4 	bl	800127c <transmit_crc_packet>
 8001314:	e7f5      	b.n	8001302 <send_response+0xa>
			memcpy(tx_buffer, data, size);
 8001316:	4d05      	ldr	r5, [pc, #20]	@ (800132c <send_response+0x34>)
 8001318:	4628      	mov	r0, r5
 800131a:	f009 fce9 	bl	800acf0 <memcpy>
            CDC_Transmit_FS(tx_buffer, size);
 800131e:	b2a1      	uxth	r1, r4
 8001320:	4628      	mov	r0, r5
 8001322:	f008 fc4b 	bl	8009bbc <CDC_Transmit_FS>
 8001326:	e7ec      	b.n	8001302 <send_response+0xa>
 8001328:	40020800 	.word	0x40020800
 800132c:	20000e24 	.word	0x20000e24

08001330 <comms_init>:



// ==================== Initialization ====================
void comms_init(void)
{
 8001330:	b510      	push	{r4, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
	usb_rx_queue = osMessageQueueNew(10, sizeof(usb_packet_ptr_t), NULL);
 8001334:	2200      	movs	r2, #0
 8001336:	2108      	movs	r1, #8
 8001338:	200a      	movs	r0, #10
 800133a:	f7ff feb9 	bl	80010b0 <osMessageQueueNew>
 800133e:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <comms_init+0x3c>)
 8001340:	6018      	str	r0, [r3, #0]

    const osThreadAttr_t comms_task_attrs = {
 8001342:	ac01      	add	r4, sp, #4
 8001344:	2224      	movs	r2, #36	@ 0x24
 8001346:	2100      	movs	r1, #0
 8001348:	4620      	mov	r0, r4
 800134a:	f009 fc9d 	bl	800ac88 <memset>
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <comms_init+0x40>)
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001356:	9306      	str	r3, [sp, #24]
 8001358:	2318      	movs	r3, #24
 800135a:	9307      	str	r3, [sp, #28]
        .name = "comms_task",
        .stack_size = 1024 * 4,
        .priority = osPriorityNormal,
    };
    osThreadNew(comms_task, NULL, &comms_task_attrs);
 800135c:	4622      	mov	r2, r4
 800135e:	2100      	movs	r1, #0
 8001360:	4804      	ldr	r0, [pc, #16]	@ (8001374 <comms_init+0x44>)
 8001362:	f7ff fdad 	bl	8000ec0 <osThreadNew>

}
 8001366:	b00a      	add	sp, #40	@ 0x28
 8001368:	bd10      	pop	{r4, pc}
 800136a:	bf00      	nop
 800136c:	20001244 	.word	0x20001244
 8001370:	0800bb98 	.word	0x0800bb98
 8001374:	080015a9 	.word	0x080015a9

08001378 <process_plain_command>:
    }
}

// ==================== Command Processing ====================
bool process_plain_command(uint8_t *request, uint16_t size)
{
 8001378:	b508      	push	{r3, lr}
    uint8_t first_byte = request[0];
 800137a:	7803      	ldrb	r3, [r0, #0]
    switch (first_byte)
 800137c:	3b43      	subs	r3, #67	@ 0x43
 800137e:	2b10      	cmp	r3, #16
 8001380:	d832      	bhi.n	80013e8 <process_plain_command+0x70>
 8001382:	e8df f003 	tbb	[pc, r3]
 8001386:	3121      	.short	0x3121
 8001388:	31310931 	.word	0x31310931
 800138c:	31313129 	.word	0x31313129
 8001390:	31313131 	.word	0x31313131
 8001394:	3119      	.short	0x3119
 8001396:	11          	.byte	0x11
 8001397:	00          	.byte	0x00
    {
    case TS_COMMAND_F:
    #ifndef TS_USE_OLD_PROTOCOL
        send_response(0, (uint8_t*)TS_PROTOCOL, sizeof(TS_PROTOCOL) - 1, TS_PLAIN);
 8001398:	2300      	movs	r3, #0
 800139a:	2203      	movs	r2, #3
 800139c:	4913      	ldr	r1, [pc, #76]	@ (80013ec <process_plain_command+0x74>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ffaa 	bl	80012f8 <send_response>
        return true;
 80013a4:	2001      	movs	r0, #1
 80013a6:	e020      	b.n	80013ea <process_plain_command+0x72>
    #endif
        break;
    case TS_HELLO_COMMAND:
        send_response(0, (uint8_t*)TS_SIGNATURE, sizeof(TS_SIGNATURE) - 1, TS_PLAIN);
 80013a8:	2300      	movs	r3, #0
 80013aa:	2213      	movs	r2, #19
 80013ac:	4910      	ldr	r1, [pc, #64]	@ (80013f0 <process_plain_command+0x78>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ffa2 	bl	80012f8 <send_response>
        return true;
 80013b4:	2001      	movs	r0, #1
 80013b6:	e018      	b.n	80013ea <process_plain_command+0x72>
        break;
    case TS_QUERY_COMMAND:
        send_response(0, (uint8_t*)TS_SIGNATURE, sizeof(TS_SIGNATURE) - 1, TS_PLAIN);
 80013b8:	2300      	movs	r3, #0
 80013ba:	2213      	movs	r2, #19
 80013bc:	490c      	ldr	r1, [pc, #48]	@ (80013f0 <process_plain_command+0x78>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff9a 	bl	80012f8 <send_response>
        return true;
 80013c4:	2001      	movs	r0, #1
 80013c6:	e010      	b.n	80013ea <process_plain_command+0x72>
        break;
    case TS_TEST_COMMS_COMMAND:
        send_response(0, (uint8_t *)0xFF, 1, TS_PLAIN);
 80013c8:	2300      	movs	r3, #0
 80013ca:	2201      	movs	r2, #1
 80013cc:	21ff      	movs	r1, #255	@ 0xff
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff92 	bl	80012f8 <send_response>
        return true;
 80013d4:	2001      	movs	r0, #1
 80013d6:	e008      	b.n	80013ea <process_plain_command+0x72>
        break;
    case TS_CAN_ID_COMMAND:
        send_response(0, (uint8_t*)TS_CAN_ID, sizeof(TS_CAN_ID) - 1, TS_PLAIN);
 80013d8:	2300      	movs	r3, #0
 80013da:	461a      	mov	r2, r3
 80013dc:	4619      	mov	r1, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff8a 	bl	80012f8 <send_response>
        return true;
 80013e4:	2001      	movs	r0, #1
 80013e6:	e000      	b.n	80013ea <process_plain_command+0x72>
    switch (first_byte)
 80013e8:	2000      	movs	r0, #0
        break;
    }
        // This wasn't a valid command
        return false;
    
}
 80013ea:	bd08      	pop	{r3, pc}
 80013ec:	0800bba4 	.word	0x0800bba4
 80013f0:	0800bba8 	.word	0x0800bba8

080013f4 <handle_page_read_command>:
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

void handle_page_read_command(uint16_t page, uint16_t offset, uint16_t count)
{
	if (page > 1)
 80013f4:	2801      	cmp	r0, #1
 80013f6:	d80d      	bhi.n	8001414 <handle_page_read_command+0x20>
{
 80013f8:	b508      	push	{r3, lr}
	{
		return;
	}
	if ((offset + count) > TS_PAGE_SIZE)
 80013fa:	1888      	adds	r0, r1, r2
 80013fc:	f241 23b8 	movw	r3, #4792	@ 0x12b8
 8001400:	4298      	cmp	r0, r3
 8001402:	dd00      	ble.n	8001406 <handle_page_read_command+0x12>
	{
		return;
	}
    
	send_response(TS_RESPONSE_OK, (uint8_t*)&config + offset, count, TS_CRC);
}
 8001404:	bd08      	pop	{r3, pc}
	send_response(TS_RESPONSE_OK, (uint8_t*)&config + offset, count, TS_CRC);
 8001406:	2301      	movs	r3, #1
 8001408:	4803      	ldr	r0, [pc, #12]	@ (8001418 <handle_page_read_command+0x24>)
 800140a:	4401      	add	r1, r0
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff ff73 	bl	80012f8 <send_response>
 8001412:	e7f7      	b.n	8001404 <handle_page_read_command+0x10>
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20001340 	.word	0x20001340

0800141c <process_command>:
{
 800141c:	b530      	push	{r4, r5, lr}
 800141e:	b083      	sub	sp, #12
 8001420:	4605      	mov	r5, r0
 8001422:	460c      	mov	r4, r1
    if (process_plain_command(request, size))
 8001424:	f7ff ffa8 	bl	8001378 <process_plain_command>
 8001428:	2800      	cmp	r0, #0
 800142a:	f040 80b0 	bne.w	800158e <process_command+0x172>
    if (size > 5)
 800142e:	2c05      	cmp	r4, #5
 8001430:	d821      	bhi.n	8001476 <process_command+0x5a>
    uint8_t command = request[2];
 8001432:	78ab      	ldrb	r3, [r5, #2]
    switch (command)
 8001434:	3b42      	subs	r3, #66	@ 0x42
 8001436:	2b35      	cmp	r3, #53	@ 0x35
 8001438:	f200 80a4 	bhi.w	8001584 <process_command+0x168>
 800143c:	e8df f003 	tbb	[pc, r3]
 8001440:	a2a2209b 	.word	0xa2a2209b
 8001444:	2ea2a227 	.word	0x2ea2a227
 8001448:	a2a2a2a2 	.word	0xa2a2a2a2
 800144c:	35a252a2 	.word	0x35a252a2
 8001450:	a2a23ca2 	.word	0xa2a23ca2
 8001454:	a2a27ba2 	.word	0xa2a27ba2
 8001458:	a2a2a2a2 	.word	0xa2a2a2a2
 800145c:	a2a2a2a2 	.word	0xa2a2a2a2
 8001460:	a2a2a2a2 	.word	0xa2a2a2a2
 8001464:	a2a2a243 	.word	0xa2a2a243
 8001468:	a2a261a2 	.word	0xa2a261a2
 800146c:	a2a2a2a2 	.word	0xa2a2a2a2
 8001470:	a2a2a259 	.word	0xa2a2a259
 8001474:	8ba2      	.short	0x8ba2
        calculated_packet_crc = crc32_inc(0, (void *)(request + TS_PACKET_PREFIX_SIZE), size - TS_PACKET_PREFIX_SIZE - TS_PACKET_CRC_SIZE);
 8001476:	1fa2      	subs	r2, r4, #6
 8001478:	1ca9      	adds	r1, r5, #2
 800147a:	f009 fb89 	bl	800ab90 <crc32_inc>
 800147e:	e7d8      	b.n	8001432 <process_command+0x16>
        send_response(TS_RESPONSE_OK, (uint8_t *)0xFF, 1, TS_CRC);
 8001480:	2301      	movs	r3, #1
 8001482:	461a      	mov	r2, r3
 8001484:	21ff      	movs	r1, #255	@ 0xff
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff ff36 	bl	80012f8 <send_response>
        return;
 800148c:	e07f      	b.n	800158e <process_command+0x172>
        send_response(TS_RESPONSE_OK, (uint8_t *)TS_PROTOCOL, sizeof(TS_PROTOCOL) - 1, TS_CRC);
 800148e:	2301      	movs	r3, #1
 8001490:	2203      	movs	r2, #3
 8001492:	4940      	ldr	r1, [pc, #256]	@ (8001594 <process_command+0x178>)
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff ff2f 	bl	80012f8 <send_response>
        return;
 800149a:	e078      	b.n	800158e <process_command+0x172>
        send_response(TS_RESPONSE_OK, (uint8_t *)TS_CAN_ID, sizeof(TS_CAN_ID), TS_CRC);
 800149c:	2301      	movs	r3, #1
 800149e:	461a      	mov	r2, r3
 80014a0:	2100      	movs	r1, #0
 80014a2:	4608      	mov	r0, r1
 80014a4:	f7ff ff28 	bl	80012f8 <send_response>
        return;
 80014a8:	e071      	b.n	800158e <process_command+0x172>
        send_response(TS_RESPONSE_OK, (uint8_t *)TS_SIGNATURE, sizeof(TS_SIGNATURE) - 1, TS_CRC);
 80014aa:	2301      	movs	r3, #1
 80014ac:	2213      	movs	r2, #19
 80014ae:	493a      	ldr	r1, [pc, #232]	@ (8001598 <process_command+0x17c>)
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff ff21 	bl	80012f8 <send_response>
        return;
 80014b6:	e06a      	b.n	800158e <process_command+0x172>
        send_response(TS_RESPONSE_OK, (uint8_t *)TS_SIGNATURE, sizeof(TS_SIGNATURE), TS_CRC);
 80014b8:	2301      	movs	r3, #1
 80014ba:	2214      	movs	r2, #20
 80014bc:	4936      	ldr	r1, [pc, #216]	@ (8001598 <process_command+0x17c>)
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff ff1a 	bl	80012f8 <send_response>
        return;
 80014c4:	e063      	b.n	800158e <process_command+0x172>
        response[0] = 2; // serial version
 80014c6:	2302      	movs	r3, #2
 80014c8:	f88d 3000 	strb.w	r3, [sp]
        *(uint16_t *)&response[1] = swap_endian_uint16(TS_TABLE_BLOCKING_FACTOR);
 80014cc:	2304      	movs	r3, #4
 80014ce:	f8ad 3001 	strh.w	r3, [sp, #1]
        *(uint16_t *)&response[3] = swap_endian_uint16(TS_BLOCKING_FACTOR);
 80014d2:	f8ad 3003 	strh.w	r3, [sp, #3]
        send_response(TS_RESPONSE_OK, (uint8_t *)response, sizeof(response), TS_CRC);
 80014d6:	2301      	movs	r3, #1
 80014d8:	2205      	movs	r2, #5
 80014da:	4669      	mov	r1, sp
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff ff0b 	bl	80012f8 <send_response>
        return;
 80014e2:	e054      	b.n	800158e <process_command+0x172>
        send_response(TS_RESPONSE_OK, (uint8_t *)&runtime, sizeof(runtime), TS_CRC);
 80014e4:	2301      	movs	r3, #1
 80014e6:	2254      	movs	r2, #84	@ 0x54
 80014e8:	492c      	ldr	r1, [pc, #176]	@ (800159c <process_command+0x180>)
 80014ea:	2000      	movs	r0, #0
 80014ec:	f7ff ff04 	bl	80012f8 <send_response>
        return;
 80014f0:	e04d      	b.n	800158e <process_command+0x172>
        handle_page_read_command(page, offset, size);
 80014f2:	f8b5 2005 	ldrh.w	r2, [r5, #5]
 80014f6:	f8b5 1003 	ldrh.w	r1, [r5, #3]
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7ff ff7a 	bl	80013f4 <handle_page_read_command>
        return;
 8001500:	e045      	b.n	800158e <process_command+0x172>
        uint32_t page_crc = crc32_inc(0, (uint8_t *)&config, sizeof(config));
 8001502:	f241 22b8 	movw	r2, #4792	@ 0x12b8
 8001506:	4926      	ldr	r1, [pc, #152]	@ (80015a0 <process_command+0x184>)
 8001508:	2000      	movs	r0, #0
 800150a:	f009 fb41 	bl	800ab90 <crc32_inc>
 800150e:	9000      	str	r0, [sp, #0]
    return (((x >> 24) & 0x000000ff) | ((x << 8) & 0x00ff0000) |
 8001510:	0203      	lsls	r3, r0, #8
 8001512:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001516:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
            ((x >> 8) & 0x0000ff00) | ((x << 24) & 0xff000000));
 800151a:	0a02      	lsrs	r2, r0, #8
 800151c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
    return (((x >> 24) & 0x000000ff) | ((x << 8) & 0x00ff0000) |
 8001520:	4313      	orrs	r3, r2
            ((x >> 8) & 0x0000ff00) | ((x << 24) & 0xff000000));
 8001522:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
        page_crc = swap_endian_uint32(page_crc);
 8001526:	9300      	str	r3, [sp, #0]
        send_response(TS_RESPONSE_OK, (uint8_t *)&page_crc, sizeof(page_crc), TS_CRC);
 8001528:	2301      	movs	r3, #1
 800152a:	2204      	movs	r2, #4
 800152c:	4669      	mov	r1, sp
 800152e:	2000      	movs	r0, #0
 8001530:	f7ff fee2 	bl	80012f8 <send_response>
        return;
 8001534:	e02b      	b.n	800158e <process_command+0x172>
        uint16_t offset = *(uint16_t *)&request[3];
 8001536:	f8b5 3003 	ldrh.w	r3, [r5, #3]
        memcpy((uint8_t *)&config + offset, &request[7], size);
 800153a:	f8b5 2005 	ldrh.w	r2, [r5, #5]
 800153e:	1de9      	adds	r1, r5, #7
 8001540:	4817      	ldr	r0, [pc, #92]	@ (80015a0 <process_command+0x184>)
 8001542:	4418      	add	r0, r3
 8001544:	f009 fbd4 	bl	800acf0 <memcpy>
        send_response(TS_RESPONSE_OK, NULL, 0, TS_CRC);
 8001548:	2301      	movs	r3, #1
 800154a:	2200      	movs	r2, #0
 800154c:	4611      	mov	r1, r2
 800154e:	4610      	mov	r0, r2
 8001550:	f7ff fed2 	bl	80012f8 <send_response>
        return;
 8001554:	e01b      	b.n	800158e <process_command+0x172>
        uint16_t offset = *(uint16_t *)&request[3];
 8001556:	f8b5 3003 	ldrh.w	r3, [r5, #3]
        memcpy((uint8_t *)&config + offset, &request[7], size);
 800155a:	f8b5 2005 	ldrh.w	r2, [r5, #5]
 800155e:	1de9      	adds	r1, r5, #7
 8001560:	480f      	ldr	r0, [pc, #60]	@ (80015a0 <process_command+0x184>)
 8001562:	4418      	add	r0, r3
 8001564:	f009 fbc4 	bl	800acf0 <memcpy>
        send_response(TS_RESPONSE_OK, NULL, 0, TS_CRC);
 8001568:	2301      	movs	r3, #1
 800156a:	2200      	movs	r2, #0
 800156c:	4611      	mov	r1, r2
 800156e:	4610      	mov	r0, r2
 8001570:	f7ff fec2 	bl	80012f8 <send_response>
        return;
 8001574:	e00b      	b.n	800158e <process_command+0x172>
        send_response(TS_RESPONSE_BURN_OK, NULL, 0, TS_CRC);
 8001576:	2301      	movs	r3, #1
 8001578:	2200      	movs	r2, #0
 800157a:	4611      	mov	r1, r2
 800157c:	2004      	movs	r0, #4
 800157e:	f7ff febb 	bl	80012f8 <send_response>
        return;
 8001582:	e004      	b.n	800158e <process_command+0x172>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001584:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001588:	4806      	ldr	r0, [pc, #24]	@ (80015a4 <process_command+0x188>)
 800158a:	f003 fc20 	bl	8004dce <HAL_GPIO_TogglePin>
}
 800158e:	b003      	add	sp, #12
 8001590:	bd30      	pop	{r4, r5, pc}
 8001592:	bf00      	nop
 8001594:	0800bba4 	.word	0x0800bba4
 8001598:	0800bba8 	.word	0x0800bba8
 800159c:	200012ec 	.word	0x200012ec
 80015a0:	20001340 	.word	0x20001340
 80015a4:	40020800 	.word	0x40020800

080015a8 <comms_task>:
{
 80015a8:	b500      	push	{lr}
 80015aa:	b083      	sub	sp, #12
        if (osMessageQueueGet(usb_rx_queue, &packet, NULL, osWaitForever) == osOK)
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
 80015b0:	2200      	movs	r2, #0
 80015b2:	4669      	mov	r1, sp
 80015b4:	4805      	ldr	r0, [pc, #20]	@ (80015cc <comms_task+0x24>)
 80015b6:	6800      	ldr	r0, [r0, #0]
 80015b8:	f7ff fe07 	bl	80011ca <osMessageQueueGet>
 80015bc:	2800      	cmp	r0, #0
 80015be:	d1f5      	bne.n	80015ac <comms_task+0x4>
            process_command(packet.data, packet.len);
 80015c0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80015c4:	9800      	ldr	r0, [sp, #0]
 80015c6:	f7ff ff29 	bl	800141c <process_command>
 80015ca:	e7ef      	b.n	80015ac <comms_task+0x4>
 80015cc:	20001244 	.word	0x20001244

080015d0 <controller_long_routines_task>:
void controller_save_configuration()
{
}

void controller_long_routines_task(void *arg)
{
 80015d0:	b508      	push	{r3, lr}
  //uint32_t next_routine_time_ticks = 1000;
  for (;;)
  {
    runtime.seconds = get_time_ms() / 1000;
 80015d2:	f007 fd89 	bl	80090e8 <get_time_ms>
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <controller_long_routines_task+0x1c>)
 80015d8:	fba3 3000 	umull	r3, r0, r3, r0
 80015dc:	0980      	lsrs	r0, r0, #6
 80015de:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <controller_long_routines_task+0x20>)
 80015e0:	60d8      	str	r0, [r3, #12]





    osDelay(1000);
 80015e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015e6:	f7ff fcc5 	bl	8000f74 <osDelay>
  for (;;)
 80015ea:	e7f2      	b.n	80015d2 <controller_long_routines_task+0x2>
 80015ec:	10624dd3 	.word	0x10624dd3
 80015f0:	200012ec 	.word	0x200012ec

080015f4 <controller_sensor_task>:
  }
  
}

void controller_sensor_task(void *arg)
{
 80015f4:	b508      	push	{r3, lr}
  for (;;)
  {
    runtime.tps1 = sensor_tps_get(&tps1);
 80015f6:	4809      	ldr	r0, [pc, #36]	@ (800161c <controller_sensor_task+0x28>)
 80015f8:	f002 fac0 	bl	8003b7c <sensor_tps_get>
 80015fc:	4c08      	ldr	r4, [pc, #32]	@ (8001620 <controller_sensor_task+0x2c>)
 80015fe:	ed84 0a0a 	vstr	s0, [r4, #40]	@ 0x28
    runtime.clt_degc = sensor_clt_get();
 8001602:	f002 fc7d 	bl	8003f00 <sensor_clt_get>
 8001606:	ed84 0a0e 	vstr	s0, [r4, #56]	@ 0x38
    runtime.iat_degc = sensor_iat_get();
 800160a:	f002 fbf5 	bl	8003df8 <sensor_iat_get>
 800160e:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
    //runtime.map_kpa = sensor_map_get();
    //runtime.oil_pressure_ok = sensor_ops_get();
    osDelay(1);
 8001612:	2001      	movs	r0, #1
 8001614:	f7ff fcae 	bl	8000f74 <osDelay>
  for (;;)
 8001618:	e7ed      	b.n	80015f6 <controller_sensor_task+0x2>
 800161a:	bf00      	nop
 800161c:	2000005c 	.word	0x2000005c
 8001620:	200012ec 	.word	0x200012ec

08001624 <controller_test_task>:
  }
  
}
void controller_test_task(void *arg)
{
 8001624:	b508      	push	{r3, lr}
  osDelay(100);
 8001626:	2064      	movs	r0, #100	@ 0x64
 8001628:	f7ff fca4 	bl	8000f74 <osDelay>
  trigger_simulator_init(60, 2, trigger_tooth_handle, &trigger1);
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <controller_test_task+0x2c>)
 800162e:	4a09      	ldr	r2, [pc, #36]	@ (8001654 <controller_test_task+0x30>)
 8001630:	2102      	movs	r1, #2
 8001632:	203c      	movs	r0, #60	@ 0x3c
 8001634:	f007 ff5c 	bl	80094f0 <trigger_simulator_init>
  static rpm_t simulated_rpm = 1000;
  for (;;)
  {
    //simulated_rpm = (rpm_t)mapf((float)analog_inputs_get_data(ANALOG_INPUT_ETB2_SENSE2), 0.0f, 4095.0f, 10.0f, 1000.0f);
    simulated_rpm = 500;
 8001638:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8001658 <controller_test_task+0x34>
 800163c:	4b07      	ldr	r3, [pc, #28]	@ (800165c <controller_test_task+0x38>)
 800163e:	ed83 0a00 	vstr	s0, [r3]
    trigger_simulator_update(simulated_rpm);
 8001642:	f007 ff69 	bl	8009518 <trigger_simulator_update>
    osDelay(1);
 8001646:	2001      	movs	r0, #1
 8001648:	f7ff fc94 	bl	8000f74 <osDelay>
  for (;;)
 800164c:	e7f4      	b.n	8001638 <controller_test_task+0x14>
 800164e:	bf00      	nop
 8001650:	2000124c 	.word	0x2000124c
 8001654:	08009339 	.word	0x08009339
 8001658:	43fa0000 	.word	0x43fa0000
 800165c:	20001248 	.word	0x20001248

08001660 <controller_load_test_configuration>:
{
 8001660:	b500      	push	{lr}
  config.cranking_rpm_threshold = 400.0f;
 8001662:	4b95      	ldr	r3, [pc, #596]	@ (80018b8 <controller_load_test_configuration+0x258>)
 8001664:	4a95      	ldr	r2, [pc, #596]	@ (80018bc <controller_load_test_configuration+0x25c>)
 8001666:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  config.cranking_advance = 8.0f;
 800166a:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800166e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  config.cranking_throttle = 10.0f;
 8001672:	4a93      	ldr	r2, [pc, #588]	@ (80018c0 <controller_load_test_configuration+0x260>)
 8001674:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  config.ignition_dwell = 2.0f;
 8001678:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800167c:	f8c3 120c 	str.w	r1, [r3, #524]	@ 0x20c
  config.multi_spark_rpm_threshold = 3500.0f;
 8001680:	4990      	ldr	r1, [pc, #576]	@ (80018c4 <controller_load_test_configuration+0x264>)
 8001682:	f8c3 1210 	str.w	r1, [r3, #528]	@ 0x210
  config.multi_spark_rest_time_ms = 1.0f;
 8001686:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
 800168a:	f8c3 c214 	str.w	ip, [r3, #532]	@ 0x214
  config.multi_spark_max_trailing_angle = 15.0f;
 800168e:	498e      	ldr	r1, [pc, #568]	@ (80018c8 <controller_load_test_configuration+0x268>)
 8001690:	f8c3 1218 	str.w	r1, [r3, #536]	@ 0x218
  config.stoich_afr_gas = 14.7f;
 8001694:	498d      	ldr	r1, [pc, #564]	@ (80018cc <controller_load_test_configuration+0x26c>)
 8001696:	f8c3 121c 	str.w	r1, [r3, #540]	@ 0x21c
  config.stoich_afr_petrol = 14.7f;
 800169a:	f8c3 1220 	str.w	r1, [r3, #544]	@ 0x220
  config.governer_target_rpm = 1500.0f;
 800169e:	498c      	ldr	r1, [pc, #560]	@ (80018d0 <controller_load_test_configuration+0x270>)
 80016a0:	f8c3 1224 	str.w	r1, [r3, #548]	@ 0x224
  config.governer_idle_rpm = 850.0f;
 80016a4:	498b      	ldr	r1, [pc, #556]	@ (80018d4 <controller_load_test_configuration+0x274>)
 80016a6:	f8c3 1228 	str.w	r1, [r3, #552]	@ 0x228
  config.governer_pid_Kp = 10.0f;
 80016aa:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
  config.governer_pid_Ki = 0.5f;
 80016ae:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80016b2:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  config.governer_pid_Kd = 0.1f;
 80016b6:	4a88      	ldr	r2, [pc, #544]	@ (80018d8 <controller_load_test_configuration+0x278>)
 80016b8:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  config.governer_pid_limit_integrator_min = -100.0f;
 80016bc:	4987      	ldr	r1, [pc, #540]	@ (80018dc <controller_load_test_configuration+0x27c>)
 80016be:	f8c3 1238 	str.w	r1, [r3, #568]	@ 0x238
  config.governer_pid_limit_integrator_max = 100.0f;
 80016c2:	4887      	ldr	r0, [pc, #540]	@ (80018e0 <controller_load_test_configuration+0x280>)
 80016c4:	f8c3 023c 	str.w	r0, [r3, #572]	@ 0x23c
  config.governer_pid_derivative_filter_tau = 0.1f;
 80016c8:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
  config.etb1_pid_Kp = 20.0f;
 80016cc:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 80016d0:	edc3 7a91 	vstr	s15, [r3, #580]	@ 0x244
  config.etb1_pid_Ki = 1.0f;
 80016d4:	f8c3 c248 	str.w	ip, [r3, #584]	@ 0x248
  config.etb1_pid_Kd = 0.0f;
 80016d8:	2100      	movs	r1, #0
 80016da:	f8c3 124c 	str.w	r1, [r3, #588]	@ 0x24c
  config.etb1_pid_limit_integrator_min = 0.0f;
 80016de:	f8c3 1250 	str.w	r1, [r3, #592]	@ 0x250
  config.etb1_pid_limit_integrator_max = 255.0f;
 80016e2:	f8df e218 	ldr.w	lr, [pc, #536]	@ 80018fc <controller_load_test_configuration+0x29c>
 80016e6:	f8c3 e254 	str.w	lr, [r3, #596]	@ 0x254
  config.etb1_pid_derivative_filter_tau = 0.1f;
 80016ea:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
  config.etb2_pid_Kp = 20.0f;
 80016ee:	edc3 7a97 	vstr	s15, [r3, #604]	@ 0x25c
  config.etb2_pid_Ki = 1.0f;
 80016f2:	f8c3 c260 	str.w	ip, [r3, #608]	@ 0x260
  config.etb2_pid_Kd = 0.0f;
 80016f6:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  config.etb2_pid_limit_integrator_min = 0.0f;
 80016fa:	f8c3 1268 	str.w	r1, [r3, #616]	@ 0x268
  config.etb2_pid_limit_integrator_max = 255.0f;
 80016fe:	f8c3 e26c 	str.w	lr, [r3, #620]	@ 0x26c
  config.etb2_pid_derivative_filter_tau = 0.1f;
 8001702:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270
  config.protection_clt_shutdown_temprature = 110.0f;
 8001706:	4a77      	ldr	r2, [pc, #476]	@ (80018e4 <controller_load_test_configuration+0x284>)
 8001708:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
  config.protection_clt_load_disconnect_temprature = 100.0f;
 800170c:	f8c3 0278 	str.w	r0, [r3, #632]	@ 0x278
  config.fan1_on_temp = 95.0f;
 8001710:	4a75      	ldr	r2, [pc, #468]	@ (80018e8 <controller_load_test_configuration+0x288>)
 8001712:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c
  config.fan1_off_temp = 90.0f;
 8001716:	4975      	ldr	r1, [pc, #468]	@ (80018ec <controller_load_test_configuration+0x28c>)
 8001718:	f8c3 1280 	str.w	r1, [r3, #640]	@ 0x280
  config.fan2_on_temp = 100.0f;
 800171c:	f8c3 0284 	str.w	r0, [r3, #644]	@ 0x284
  config.fan2_off_temp = 95.0f;
 8001720:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
  config.rpm_limiter = 4000;
 8001724:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001728:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
  config.engine_displacement_cc = 2400;
 800172c:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001730:	f8a3 228e 	strh.w	r2, [r3, #654]	@ 0x28e
  config.tps1_calib_wide_open_throttle_adc_value = 3000;
 8001734:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001738:	f8a3 1290 	strh.w	r1, [r3, #656]	@ 0x290
  config.tps1_calib_closed_throttle_adc_value = 1700;
 800173c:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001740:	f8a3 2292 	strh.w	r2, [r3, #658]	@ 0x292
  config.tps2_calib_wide_open_throttle_adc_value = 3000;
 8001744:	f8a3 1294 	strh.w	r1, [r3, #660]	@ 0x294
  config.tps2_calib_closed_throttle_adc_value = 1700;
 8001748:	f8a3 2296 	strh.w	r2, [r3, #662]	@ 0x296
  config.firing_order = FO_1342;
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2298 	strb.w	r2, [r3, #664]	@ 0x298
  config.fuel_type = FUEL_TYPE_GAS;
 8001752:	f883 2299 	strb.w	r2, [r3, #665]	@ 0x299
  config.trigger1_type = TW_58_TOOTH_2_MISSING; // e.g. TRIGGER_TYPE_60_2
 8001756:	f883 229a 	strb.w	r2, [r3, #666]	@ 0x29a
  config.trigger1_filtering = TRIGGER_FILTERING_LITE;
 800175a:	2101      	movs	r1, #1
 800175c:	f883 129b 	strb.w	r1, [r3, #667]	@ 0x29b
  config.trigger2_type = 0;
 8001760:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  config.trigger2_filtering = 0;
 8001764:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  config.trigger2_enabled = 0;
 8001768:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
  config.number_of_injectors = 4;
 800176c:	2004      	movs	r0, #4
 800176e:	f883 029f 	strb.w	r0, [r3, #671]	@ 0x29f
  config.injection_mode = IM_SIMULTANEOUS;
 8001772:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
  config.ignition_mode = IM_WASTED_SPARK;
 8001776:	2003      	movs	r0, #3
 8001778:	f883 02a1 	strb.w	r0, [r3, #673]	@ 0x2a1
  config.multi_spark_enabled = 1;
 800177c:	f883 12a2 	strb.w	r1, [r3, #674]	@ 0x2a2
  config.multi_spark_number_of_sparks = 5;
 8001780:	f04f 0c05 	mov.w	ip, #5
 8001784:	f883 c2a3 	strb.w	ip, [r3, #675]	@ 0x2a3
  config.tps1_calib_is_inverted = 0;
 8001788:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4
  config.tps2_calib_is_inverted = 0;
 800178c:	f883 22a5 	strb.w	r2, [r3, #677]	@ 0x2a5
  config.sensor_clt_type = SENSOR_CLT_TYPE_TEST;
 8001790:	f883 22a6 	strb.w	r2, [r3, #678]	@ 0x2a6
  config.sensor_iat_type = SENSOR_IAT_TYPE_TEST;
 8001794:	f883 22a7 	strb.w	r2, [r3, #679]	@ 0x2a7
  config.sensor_map_type = SENSOR_MAP_TYPE_TEST;
 8001798:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  config.protection_oil_pressure_time = 3;
 800179c:	f883 02a9 	strb.w	r0, [r3, #681]	@ 0x2a9
  config.protection_oil_pressure_enabled = 0;
 80017a0:	f883 22aa 	strb.w	r2, [r3, #682]	@ 0x2aa
  config.protection_clt_enabled = 0;
 80017a4:	f883 22ab 	strb.w	r2, [r3, #683]	@ 0x2ab
  config.protection_clt_load_disconnect_enabled = 0;
 80017a8:	f883 22ac 	strb.w	r2, [r3, #684]	@ 0x2ac
  config.etb1_enabled = 1;
 80017ac:	f883 12ad 	strb.w	r1, [r3, #685]	@ 0x2ad
  config.etb2_enabled = 0;
 80017b0:	f883 22ae 	strb.w	r2, [r3, #686]	@ 0x2ae
  config.etb1_motor_inverted = 0;
 80017b4:	f883 22af 	strb.w	r2, [r3, #687]	@ 0x2af
  config.etb2_motor_inverted = 0;
 80017b8:	f883 22b0 	strb.w	r2, [r3, #688]	@ 0x2b0
  config.fan1_enabled = 1;
 80017bc:	f883 12b1 	strb.w	r1, [r3, #689]	@ 0x2b1
  config.fan2_enabled = 0;
 80017c0:	f883 22b2 	strb.w	r2, [r3, #690]	@ 0x2b2
  for (size_t i = 0; i < TABLE_PRIMARY_SIZE_X; i++)
 80017c4:	e022      	b.n	800180c <controller_load_test_configuration+0x1ac>
    config.ve_table_1.x_bins[i] = i * FIRMWARE_LIMIT_MAX_RPM / TABLE_PRIMARY_SIZE_X;
 80017c6:	f241 7370 	movw	r3, #6000	@ 0x1770
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017d8:	4b45      	ldr	r3, [pc, #276]	@ (80018f0 <controller_load_test_configuration+0x290>)
 80017da:	f502 7180 	add.w	r1, r2, #256	@ 0x100
 80017de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80017e2:	edc1 7a00 	vstr	s15, [r1]
    config.ve_table_2.x_bins[i] = i * FIRMWARE_LIMIT_MAX_RPM / TABLE_PRIMARY_SIZE_X;
 80017e6:	f502 7108 	add.w	r1, r2, #544	@ 0x220
 80017ea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80017ee:	edc1 7a00 	vstr	s15, [r1]
    config.ign_table_1.x_bins[i] = i * FIRMWARE_LIMIT_MAX_RPM / TABLE_PRIMARY_SIZE_X;
 80017f2:	f502 7150 	add.w	r1, r2, #832	@ 0x340
 80017f6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80017fa:	edc1 7a00 	vstr	s15, [r1]
    config.ign_table_2.x_bins[i] = i * FIRMWARE_LIMIT_MAX_RPM / TABLE_PRIMARY_SIZE_X;
 80017fe:	f502 618c 	add.w	r1, r2, #1120	@ 0x460
 8001802:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001806:	edc3 7a00 	vstr	s15, [r3]
  for (size_t i = 0; i < TABLE_PRIMARY_SIZE_X; i++)
 800180a:	3201      	adds	r2, #1
 800180c:	2a0f      	cmp	r2, #15
 800180e:	d9da      	bls.n	80017c6 <controller_load_test_configuration+0x166>
  for (size_t i = 0; i < TABLE_PRIMARY_SIZE_Y; i++)
 8001810:	2300      	movs	r3, #0
 8001812:	e025      	b.n	8001860 <controller_load_test_configuration+0x200>
    config.ve_table_1.y_bins[i] = i * FIRMWARE_LIMIT_MAX_MAP / TABLE_PRIMARY_SIZE_Y;
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800181c:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80018f4 <controller_load_test_configuration+0x294>
 8001820:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001824:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80018f8 <controller_load_test_configuration+0x298>
 8001828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182c:	4a30      	ldr	r2, [pc, #192]	@ (80018f0 <controller_load_test_configuration+0x290>)
 800182e:	f503 7188 	add.w	r1, r3, #272	@ 0x110
 8001832:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8001836:	edc1 7a00 	vstr	s15, [r1]
    config.ve_table_2.y_bins[i] = i * FIRMWARE_LIMIT_MAX_MAP / TABLE_PRIMARY_SIZE_Y;
 800183a:	f503 710c 	add.w	r1, r3, #560	@ 0x230
 800183e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8001842:	edc1 7a00 	vstr	s15, [r1]
    config.ign_table_1.y_bins[i] = i * FIRMWARE_LIMIT_MAX_MAP / TABLE_PRIMARY_SIZE_Y;
 8001846:	f503 7154 	add.w	r1, r3, #848	@ 0x350
 800184a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800184e:	edc1 7a00 	vstr	s15, [r1]
    config.ign_table_2.y_bins[i] = i * FIRMWARE_LIMIT_MAX_MAP / TABLE_PRIMARY_SIZE_Y;
 8001852:	f503 618e 	add.w	r1, r3, #1136	@ 0x470
 8001856:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800185a:	edc2 7a00 	vstr	s15, [r2]
  for (size_t i = 0; i < TABLE_PRIMARY_SIZE_Y; i++)
 800185e:	3301      	adds	r3, #1
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d9d7      	bls.n	8001814 <controller_load_test_configuration+0x1b4>
  for (size_t i = 0; i < TABLE_PRIMARY_SIZE_X; i++)
 8001864:	f04f 0e00 	mov.w	lr, #0
 8001868:	e01e      	b.n	80018a8 <controller_load_test_configuration+0x248>
      config.ve_table_1.data[i][j] = table_init_data;
 800186a:	4b21      	ldr	r3, [pc, #132]	@ (80018f0 <controller_load_test_configuration+0x290>)
 800186c:	eb00 120e 	add.w	r2, r0, lr, lsl #4
 8001870:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8001874:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8001878:	f8cc 1000 	str.w	r1, [ip]
      config.ve_table_2.data[i][j] = table_init_data;
 800187c:	f502 7c90 	add.w	ip, r2, #288	@ 0x120
 8001880:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8001884:	f8cc 1000 	str.w	r1, [ip]
      config.ign_table_1.data[i][j] = table_init_data;
 8001888:	f502 7c10 	add.w	ip, r2, #576	@ 0x240
 800188c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8001890:	f8cc 1000 	str.w	r1, [ip]
      config.ign_table_2.data[i][j] = table_init_data;
 8001894:	f502 7258 	add.w	r2, r2, #864	@ 0x360
 8001898:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800189c:	6019      	str	r1, [r3, #0]
    for (size_t j = 0; j < TABLE_PRIMARY_SIZE_Y; j++)
 800189e:	3001      	adds	r0, #1
 80018a0:	280f      	cmp	r0, #15
 80018a2:	d9e2      	bls.n	800186a <controller_load_test_configuration+0x20a>
  for (size_t i = 0; i < TABLE_PRIMARY_SIZE_X; i++)
 80018a4:	f10e 0e01 	add.w	lr, lr, #1
 80018a8:	f1be 0f0f 	cmp.w	lr, #15
 80018ac:	d801      	bhi.n	80018b2 <controller_load_test_configuration+0x252>
    for (size_t j = 0; j < TABLE_PRIMARY_SIZE_Y; j++)
 80018ae:	2000      	movs	r0, #0
 80018b0:	e7f6      	b.n	80018a0 <controller_load_test_configuration+0x240>
}
 80018b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80018b6:	bf00      	nop
 80018b8:	20002340 	.word	0x20002340
 80018bc:	43c80000 	.word	0x43c80000
 80018c0:	41200000 	.word	0x41200000
 80018c4:	455ac000 	.word	0x455ac000
 80018c8:	41700000 	.word	0x41700000
 80018cc:	416b3333 	.word	0x416b3333
 80018d0:	44bb8000 	.word	0x44bb8000
 80018d4:	44548000 	.word	0x44548000
 80018d8:	3dcccccd 	.word	0x3dcccccd
 80018dc:	c2c80000 	.word	0xc2c80000
 80018e0:	42c80000 	.word	0x42c80000
 80018e4:	42dc0000 	.word	0x42dc0000
 80018e8:	42be0000 	.word	0x42be0000
 80018ec:	42b40000 	.word	0x42b40000
 80018f0:	20001340 	.word	0x20001340
 80018f4:	42f00000 	.word	0x42f00000
 80018f8:	3d800000 	.word	0x3d800000
 80018fc:	437f0000 	.word	0x437f0000

08001900 <controller_init_with_defaults>:
{
 8001900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001904:	b0a0      	sub	sp, #128	@ 0x80
  memset(&runtime, 0, sizeof(runtime));
 8001906:	2254      	movs	r2, #84	@ 0x54
 8001908:	2100      	movs	r1, #0
 800190a:	4840      	ldr	r0, [pc, #256]	@ (8001a0c <controller_init_with_defaults+0x10c>)
 800190c:	f009 f9bc 	bl	800ac88 <memset>
  controller_timing_start(&htim2);
 8001910:	483f      	ldr	r0, [pc, #252]	@ (8001a10 <controller_init_with_defaults+0x110>)
 8001912:	f007 fbb3 	bl	800907c <controller_timing_start>
  analog_inputs_init(&hadc1);
 8001916:	483f      	ldr	r0, [pc, #252]	@ (8001a14 <controller_init_with_defaults+0x114>)
 8001918:	f7ff fa58 	bl	8000dcc <analog_inputs_init>
  controller_load_test_configuration();
 800191c:	f7ff fea0 	bl	8001660 <controller_load_test_configuration>
  trigger_init(&trigger1, config.trigger1_type, &config.trigger1_filtering, STATUS_TRIGGER1_SYNCED, 1);
 8001920:	4c3d      	ldr	r4, [pc, #244]	@ (8001a18 <controller_init_with_defaults+0x118>)
 8001922:	2301      	movs	r3, #1
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2303      	movs	r3, #3
 8001928:	f204 229b 	addw	r2, r4, #667	@ 0x29b
 800192c:	f894 129a 	ldrb.w	r1, [r4, #666]	@ 0x29a
 8001930:	483a      	ldr	r0, [pc, #232]	@ (8001a1c <controller_init_with_defaults+0x11c>)
 8001932:	f007 fca5 	bl	8009280 <trigger_init>
  dc_motor_init_simple_Hbridge(&etb1_motor, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4, 25000);
 8001936:	4f3a      	ldr	r7, [pc, #232]	@ (8001a20 <controller_init_with_defaults+0x120>)
 8001938:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800193c:	9302      	str	r3, [sp, #8]
 800193e:	230c      	movs	r3, #12
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	2308      	movs	r3, #8
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2304      	movs	r3, #4
 8001948:	2200      	movs	r2, #0
 800194a:	4936      	ldr	r1, [pc, #216]	@ (8001a24 <controller_init_with_defaults+0x124>)
 800194c:	4638      	mov	r0, r7
 800194e:	f000 fa4d 	bl	8001dec <dc_motor_init_simple_Hbridge>
  pid_init(&etb1_pid);
 8001952:	4e35      	ldr	r6, [pc, #212]	@ (8001a28 <controller_init_with_defaults+0x128>)
 8001954:	4630      	mov	r0, r6
 8001956:	f001 faa1 	bl	8002e9c <pid_init>
  electronic_throttle_init(&etb1, &etb1_pid, &tps1, &etb1_motor);
 800195a:	4d34      	ldr	r5, [pc, #208]	@ (8001a2c <controller_init_with_defaults+0x12c>)
 800195c:	463b      	mov	r3, r7
 800195e:	4a34      	ldr	r2, [pc, #208]	@ (8001a30 <controller_init_with_defaults+0x130>)
 8001960:	4631      	mov	r1, r6
 8001962:	4628      	mov	r0, r5
 8001964:	f000 fba0 	bl	80020a8 <electronic_throttle_init>
  electronic_throttle_set(&etb1, 70);
 8001968:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8001a34 <controller_init_with_defaults+0x134>
 800196c:	4628      	mov	r0, r5
 800196e:	f000 fbcd 	bl	800210c <electronic_throttle_set>
  sensor_clt_init(&sensor_clt, config.sensor_clt_type);
 8001972:	f894 12a6 	ldrb.w	r1, [r4, #678]	@ 0x2a6
 8001976:	4830      	ldr	r0, [pc, #192]	@ (8001a38 <controller_init_with_defaults+0x138>)
 8001978:	f002 fa6c 	bl	8003e54 <sensor_clt_init>
  sensor_iat_init(&sensor_iat, config.sensor_iat_type);
 800197c:	f894 12a7 	ldrb.w	r1, [r4, #679]	@ 0x2a7
 8001980:	482e      	ldr	r0, [pc, #184]	@ (8001a3c <controller_init_with_defaults+0x13c>)
 8001982:	f002 f9e9 	bl	8003d58 <sensor_iat_init>
  sensor_map_init(&sensor_map, config.sensor_map_type);
 8001986:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
 800198a:	482d      	ldr	r0, [pc, #180]	@ (8001a40 <controller_init_with_defaults+0x140>)
 800198c:	f002 f96c 	bl	8003c68 <sensor_map_init>
  ignition_init(ignition_output_pins);
 8001990:	482c      	ldr	r0, [pc, #176]	@ (8001a44 <controller_init_with_defaults+0x144>)
 8001992:	f000 ff6b 	bl	800286c <ignition_init>
  comms_init();
 8001996:	f7ff fccb 	bl	8001330 <comms_init>
  const osThreadAttr_t controller_test_attr = {
 800199a:	af17      	add	r7, sp, #92	@ 0x5c
 800199c:	2424      	movs	r4, #36	@ 0x24
 800199e:	4622      	mov	r2, r4
 80019a0:	2100      	movs	r1, #0
 80019a2:	4638      	mov	r0, r7
 80019a4:	f009 f970 	bl	800ac88 <memset>
 80019a8:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <controller_init_with_defaults+0x148>)
 80019aa:	9317      	str	r3, [sp, #92]	@ 0x5c
 80019ac:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 80019b0:	951c      	str	r5, [sp, #112]	@ 0x70
 80019b2:	2330      	movs	r3, #48	@ 0x30
 80019b4:	931d      	str	r3, [sp, #116]	@ 0x74
  const osThreadAttr_t controller_sensor_task_attr = {
 80019b6:	ae0e      	add	r6, sp, #56	@ 0x38
 80019b8:	4622      	mov	r2, r4
 80019ba:	2100      	movs	r1, #0
 80019bc:	4630      	mov	r0, r6
 80019be:	f009 f963 	bl	800ac88 <memset>
 80019c2:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8001a58 <controller_init_with_defaults+0x158>
 80019c6:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 80019ca:	9513      	str	r5, [sp, #76]	@ 0x4c
 80019cc:	2320      	movs	r3, #32
 80019ce:	9314      	str	r3, [sp, #80]	@ 0x50
  const osThreadAttr_t controller_long_routines_attr = {
 80019d0:	ad05      	add	r5, sp, #20
 80019d2:	4622      	mov	r2, r4
 80019d4:	2100      	movs	r1, #0
 80019d6:	4628      	mov	r0, r5
 80019d8:	f009 f956 	bl	800ac88 <memset>
 80019dc:	f8cd 8014 	str.w	r8, [sp, #20]
 80019e0:	2380      	movs	r3, #128	@ 0x80
 80019e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80019e4:	2318      	movs	r3, #24
 80019e6:	930b      	str	r3, [sp, #44]	@ 0x2c
  osThreadNew(controller_test_task, NULL, &controller_test_attr);
 80019e8:	463a      	mov	r2, r7
 80019ea:	2100      	movs	r1, #0
 80019ec:	4817      	ldr	r0, [pc, #92]	@ (8001a4c <controller_init_with_defaults+0x14c>)
 80019ee:	f7ff fa67 	bl	8000ec0 <osThreadNew>
  osThreadNew(controller_sensor_task, NULL, &controller_sensor_task_attr);
 80019f2:	4632      	mov	r2, r6
 80019f4:	2100      	movs	r1, #0
 80019f6:	4816      	ldr	r0, [pc, #88]	@ (8001a50 <controller_init_with_defaults+0x150>)
 80019f8:	f7ff fa62 	bl	8000ec0 <osThreadNew>
  osThreadNew(controller_long_routines_task, NULL, &controller_long_routines_attr);
 80019fc:	462a      	mov	r2, r5
 80019fe:	2100      	movs	r1, #0
 8001a00:	4814      	ldr	r0, [pc, #80]	@ (8001a54 <controller_init_with_defaults+0x154>)
 8001a02:	f7ff fa5d 	bl	8000ec0 <osThreadNew>
}
 8001a06:	b020      	add	sp, #128	@ 0x80
 8001a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a0c:	200012ec 	.word	0x200012ec
 8001a10:	20006d18 	.word	0x20006d18
 8001a14:	2000022c 	.word	0x2000022c
 8001a18:	20002340 	.word	0x20002340
 8001a1c:	2000124c 	.word	0x2000124c
 8001a20:	200012b0 	.word	0x200012b0
 8001a24:	20006cd0 	.word	0x20006cd0
 8001a28:	20000020 	.word	0x20000020
 8001a2c:	200012c8 	.word	0x200012c8
 8001a30:	2000005c 	.word	0x2000005c
 8001a34:	428c0000 	.word	0x428c0000
 8001a38:	20001298 	.word	0x20001298
 8001a3c:	20001280 	.word	0x20001280
 8001a40:	20001278 	.word	0x20001278
 8001a44:	20000000 	.word	0x20000000
 8001a48:	0800bbbc 	.word	0x0800bbbc
 8001a4c:	08001625 	.word	0x08001625
 8001a50:	080015f5 	.word	0x080015f5
 8001a54:	080015d1 	.word	0x080015d1
 8001a58:	0800bbc8 	.word	0x0800bbc8

08001a5c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001a5c:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */
  
  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a5e:	4805      	ldr	r0, [pc, #20]	@ (8001a74 <MX_CRC_Init+0x18>)
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <MX_CRC_Init+0x1c>)
 8001a62:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a64:	f002 feae 	bl	80047c4 <HAL_CRC_Init>
 8001a68:	b900      	cbnz	r0, 8001a6c <MX_CRC_Init+0x10>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001a6a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a6c:	f001 f9a2 	bl	8002db4 <Error_Handler>
}
 8001a70:	e7fb      	b.n	8001a6a <MX_CRC_Init+0xe>
 8001a72:	bf00      	nop
 8001a74:	200025f8 	.word	0x200025f8
 8001a78:	40023000 	.word	0x40023000

08001a7c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001a7c:	6802      	ldr	r2, [r0, #0]
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <HAL_CRC_MspInit+0x28>)
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d000      	beq.n	8001a86 <HAL_CRC_MspInit+0xa>
 8001a84:	4770      	bx	lr
{
 8001a86:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_CRC_MspInit+0x2c>)
 8001a8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a94:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001aa0:	b002      	add	sp, #8
 8001aa2:	4770      	bx	lr
 8001aa4:	40023000 	.word	0x40023000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	00000000 	.word	0x00000000

08001ab0 <dc_motor_set>:
 * @param dir the desired direction of the motor
 * @param duty_cycle a number between 0 and 255 not a percentage
 */
void dc_motor_set(dc_motor_t *motor, dc_motor_direction_t dir, uint8_t duty_cycle)
{
	if (motor == NULL || motor->timer == NULL)
 8001ab0:	2800      	cmp	r0, #0
 8001ab2:	f000 8138 	beq.w	8001d26 <dc_motor_set+0x276>
{
 8001ab6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001aba:	460d      	mov	r5, r1
 8001abc:	4616      	mov	r6, r2
 8001abe:	4604      	mov	r4, r0
	if (motor == NULL || motor->timer == NULL)
 8001ac0:	6807      	ldr	r7, [r0, #0]
 8001ac2:	2f00      	cmp	r7, #0
 8001ac4:	d052      	beq.n	8001b6c <dc_motor_set+0xbc>
	if (duty_cycle < 0 || duty_cycle > 255)
	{
		return;
	}
	// Map duty cycle (0-255) to timer compare value
	uint32_t compare_value = (uint32_t)((duty_cycle / 255.0) * __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	f7fe fd14 	bl	80004f4 <__aeabi_i2d>
 8001acc:	a396      	add	r3, pc, #600	@ (adr r3, 8001d28 <dc_motor_set+0x278>)
 8001ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad2:	f7fe fea3 	bl	800081c <__aeabi_ddiv>
 8001ad6:	4680      	mov	r8, r0
 8001ad8:	4689      	mov	r9, r1
 8001ada:	683f      	ldr	r7, [r7, #0]
 8001adc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001ade:	f7fe fcf9 	bl	80004d4 <__aeabi_ui2d>
 8001ae2:	4642      	mov	r2, r8
 8001ae4:	464b      	mov	r3, r9
 8001ae6:	f7fe fd6f 	bl	80005c8 <__aeabi_dmul>
 8001aea:	f7fe ff7f 	bl	80009ec <__aeabi_d2uiz>
	
	switch (dir)
 8001aee:	b1fd      	cbz	r5, 8001b30 <dc_motor_set+0x80>
 8001af0:	2d01      	cmp	r5, #1
 8001af2:	d079      	beq.n	8001be8 <dc_motor_set+0x138>
		}
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
		break;
	default:
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001af4:	6863      	ldr	r3, [r4, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f040 80cf 	bne.w	8001c9a <dc_motor_set+0x1ea>
 8001afc:	637b      	str	r3, [r7, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001afe:	68a3      	ldr	r3, [r4, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f040 80d7 	bne.w	8001cb4 <dc_motor_set+0x204>
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001b0e:	68e3      	ldr	r3, [r4, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f040 80e2 	bne.w	8001cda <dc_motor_set+0x22a>
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001b1e:	6923      	ldr	r3, [r4, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f040 80ed 	bne.w	8001d00 <dc_motor_set+0x250>
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b2e:	e01b      	b.n	8001b68 <dc_motor_set+0xb8>
		if (motor->timer_channel_output_3 != 0 && motor->timer_channel_output_4 != 0)
 8001b30:	68e3      	ldr	r3, [r4, #12]
 8001b32:	b16b      	cbz	r3, 8001b50 <dc_motor_set+0xa0>
 8001b34:	6922      	ldr	r2, [r4, #16]
 8001b36:	b15a      	cbz	r2, 8001b50 <dc_motor_set+0xa0>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d019      	beq.n	8001b70 <dc_motor_set+0xc0>
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d01a      	beq.n	8001b76 <dc_motor_set+0xc6>
 8001b40:	2300      	movs	r3, #0
 8001b42:	643b      	str	r3, [r7, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001b44:	6923      	ldr	r3, [r4, #16]
 8001b46:	b9cb      	cbnz	r3, 8001b7c <dc_motor_set+0xcc>
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b4e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001b50:	68a3      	ldr	r3, [r4, #8]
 8001b52:	bb33      	cbnz	r3, 8001ba2 <dc_motor_set+0xf2>
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, compare_value);
 8001b5c:	6863      	ldr	r3, [r4, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d132      	bne.n	8001bc8 <dc_motor_set+0x118>
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6358      	str	r0, [r3, #52]	@ 0x34
		/**
		 * @todo throw an error
		 */
		break;
	}
	motor->current_duty_cycle = duty_cycle;
 8001b68:	7566      	strb	r6, [r4, #21]
	motor->current_direction = dir;
 8001b6a:	7525      	strb	r5, [r4, #20]
}
 8001b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001b70:	2300      	movs	r3, #0
 8001b72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b74:	e7e6      	b.n	8001b44 <dc_motor_set+0x94>
 8001b76:	2300      	movs	r3, #0
 8001b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b7a:	e7e3      	b.n	8001b44 <dc_motor_set+0x94>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d006      	beq.n	8001b8e <dc_motor_set+0xde>
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d009      	beq.n	8001b98 <dc_motor_set+0xe8>
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b8c:	e7e0      	b.n	8001b50 <dc_motor_set+0xa0>
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b94:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b96:	e7db      	b.n	8001b50 <dc_motor_set+0xa0>
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ba0:	e7d6      	b.n	8001b50 <dc_motor_set+0xa0>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d006      	beq.n	8001bb4 <dc_motor_set+0x104>
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d009      	beq.n	8001bbe <dc_motor_set+0x10e>
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bb2:	e7d3      	b.n	8001b5c <dc_motor_set+0xac>
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bbc:	e7ce      	b.n	8001b5c <dc_motor_set+0xac>
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bc6:	e7c9      	b.n	8001b5c <dc_motor_set+0xac>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, compare_value);
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d005      	beq.n	8001bd8 <dc_motor_set+0x128>
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d007      	beq.n	8001be0 <dc_motor_set+0x130>
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6418      	str	r0, [r3, #64]	@ 0x40
 8001bd6:	e7c7      	b.n	8001b68 <dc_motor_set+0xb8>
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6398      	str	r0, [r3, #56]	@ 0x38
 8001bde:	e7c3      	b.n	8001b68 <dc_motor_set+0xb8>
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8001be6:	e7bf      	b.n	8001b68 <dc_motor_set+0xb8>
		if (motor->timer_channel_output_3 != 0 && motor->timer_channel_output_4 != 0)
 8001be8:	68e3      	ldr	r3, [r4, #12]
 8001bea:	b16b      	cbz	r3, 8001c08 <dc_motor_set+0x158>
 8001bec:	6923      	ldr	r3, [r4, #16]
 8001bee:	b15b      	cbz	r3, 8001c08 <dc_motor_set+0x158>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d016      	beq.n	8001c22 <dc_motor_set+0x172>
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d017      	beq.n	8001c28 <dc_motor_set+0x178>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	643b      	str	r3, [r7, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001bfc:	68e3      	ldr	r3, [r4, #12]
 8001bfe:	b9b3      	cbnz	r3, 8001c2e <dc_motor_set+0x17e>
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c06:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001c08:	6863      	ldr	r3, [r4, #4]
 8001c0a:	bb1b      	cbnz	r3, 8001c54 <dc_motor_set+0x1a4>
 8001c0c:	6823      	ldr	r3, [r4, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2200      	movs	r2, #0
 8001c12:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
 8001c14:	68a3      	ldr	r3, [r4, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d12f      	bne.n	8001c7a <dc_motor_set+0x1ca>
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6358      	str	r0, [r3, #52]	@ 0x34
 8001c20:	e7a2      	b.n	8001b68 <dc_motor_set+0xb8>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001c22:	2300      	movs	r3, #0
 8001c24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c26:	e7e9      	b.n	8001bfc <dc_motor_set+0x14c>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c2c:	e7e6      	b.n	8001bfc <dc_motor_set+0x14c>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d006      	beq.n	8001c40 <dc_motor_set+0x190>
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d009      	beq.n	8001c4a <dc_motor_set+0x19a>
 8001c36:	6823      	ldr	r3, [r4, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c3e:	e7e3      	b.n	8001c08 <dc_motor_set+0x158>
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c46:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c48:	e7de      	b.n	8001c08 <dc_motor_set+0x158>
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c52:	e7d9      	b.n	8001c08 <dc_motor_set+0x158>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d006      	beq.n	8001c66 <dc_motor_set+0x1b6>
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d009      	beq.n	8001c70 <dc_motor_set+0x1c0>
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2200      	movs	r2, #0
 8001c62:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c64:	e7d6      	b.n	8001c14 <dc_motor_set+0x164>
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c6e:	e7d1      	b.n	8001c14 <dc_motor_set+0x164>
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2200      	movs	r2, #0
 8001c76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c78:	e7cc      	b.n	8001c14 <dc_motor_set+0x164>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d005      	beq.n	8001c8a <dc_motor_set+0x1da>
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d007      	beq.n	8001c92 <dc_motor_set+0x1e2>
 8001c82:	6823      	ldr	r3, [r4, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6418      	str	r0, [r3, #64]	@ 0x40
 8001c88:	e76e      	b.n	8001b68 <dc_motor_set+0xb8>
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6398      	str	r0, [r3, #56]	@ 0x38
 8001c90:	e76a      	b.n	8001b68 <dc_motor_set+0xb8>
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8001c98:	e766      	b.n	8001b68 <dc_motor_set+0xb8>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d004      	beq.n	8001ca8 <dc_motor_set+0x1f8>
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d005      	beq.n	8001cae <dc_motor_set+0x1fe>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ca6:	e72a      	b.n	8001afe <dc_motor_set+0x4e>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cac:	e727      	b.n	8001afe <dc_motor_set+0x4e>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cb2:	e724      	b.n	8001afe <dc_motor_set+0x4e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d006      	beq.n	8001cc6 <dc_motor_set+0x216>
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d009      	beq.n	8001cd0 <dc_motor_set+0x220>
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cc4:	e723      	b.n	8001b0e <dc_motor_set+0x5e>
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cce:	e71e      	b.n	8001b0e <dc_motor_set+0x5e>
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cd8:	e719      	b.n	8001b0e <dc_motor_set+0x5e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d006      	beq.n	8001cec <dc_motor_set+0x23c>
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d009      	beq.n	8001cf6 <dc_motor_set+0x246>
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cea:	e718      	b.n	8001b1e <dc_motor_set+0x6e>
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cf4:	e713      	b.n	8001b1e <dc_motor_set+0x6e>
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cfe:	e70e      	b.n	8001b1e <dc_motor_set+0x6e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d006      	beq.n	8001d12 <dc_motor_set+0x262>
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d009      	beq.n	8001d1c <dc_motor_set+0x26c>
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d10:	e72a      	b.n	8001b68 <dc_motor_set+0xb8>
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2200      	movs	r2, #0
 8001d18:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d1a:	e725      	b.n	8001b68 <dc_motor_set+0xb8>
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2200      	movs	r2, #0
 8001d22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d24:	e720      	b.n	8001b68 <dc_motor_set+0xb8>
 8001d26:	4770      	bx	lr
 8001d28:	00000000 	.word	0x00000000
 8001d2c:	406fe000 	.word	0x406fe000

08001d30 <dc_motor_disable>:
/**
 * @brief disables the motor.
 */
void dc_motor_disable(dc_motor_t *motor)
{
	if (motor == NULL || motor->timer == NULL)
 8001d30:	4603      	mov	r3, r0
 8001d32:	b178      	cbz	r0, 8001d54 <dc_motor_disable+0x24>
 8001d34:	6802      	ldr	r2, [r0, #0]
 8001d36:	b16a      	cbz	r2, 8001d54 <dc_motor_disable+0x24>
		 * @todo throw an error
		 */
	}

	// Set duty cycle to 0 for both channels
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001d38:	6841      	ldr	r1, [r0, #4]
 8001d3a:	b961      	cbnz	r1, 8001d56 <dc_motor_disable+0x26>
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	6351      	str	r1, [r2, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	b9c2      	cbnz	r2, 8001d76 <dc_motor_disable+0x46>
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	2100      	movs	r1, #0
 8001d4a:	6351      	str	r1, [r2, #52]	@ 0x34
	motor->current_duty_cycle = 0;
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	755a      	strb	r2, [r3, #21]
	motor->status = MOTOR_STATE_DISABLED;
 8001d50:	2202      	movs	r2, #2
 8001d52:	759a      	strb	r2, [r3, #22]
}
 8001d54:	4770      	bx	lr
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001d56:	2904      	cmp	r1, #4
 8001d58:	d005      	beq.n	8001d66 <dc_motor_disable+0x36>
 8001d5a:	2908      	cmp	r1, #8
 8001d5c:	d007      	beq.n	8001d6e <dc_motor_disable+0x3e>
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	2100      	movs	r1, #0
 8001d62:	6411      	str	r1, [r2, #64]	@ 0x40
 8001d64:	e7ec      	b.n	8001d40 <dc_motor_disable+0x10>
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	2100      	movs	r1, #0
 8001d6a:	6391      	str	r1, [r2, #56]	@ 0x38
 8001d6c:	e7e8      	b.n	8001d40 <dc_motor_disable+0x10>
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	2100      	movs	r1, #0
 8001d72:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8001d74:	e7e4      	b.n	8001d40 <dc_motor_disable+0x10>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001d76:	2a04      	cmp	r2, #4
 8001d78:	d006      	beq.n	8001d88 <dc_motor_disable+0x58>
 8001d7a:	2a08      	cmp	r2, #8
 8001d7c:	d009      	beq.n	8001d92 <dc_motor_disable+0x62>
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	2100      	movs	r1, #0
 8001d84:	6411      	str	r1, [r2, #64]	@ 0x40
 8001d86:	e7e1      	b.n	8001d4c <dc_motor_disable+0x1c>
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	6391      	str	r1, [r2, #56]	@ 0x38
 8001d90:	e7dc      	b.n	8001d4c <dc_motor_disable+0x1c>
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	2100      	movs	r1, #0
 8001d98:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8001d9a:	e7d7      	b.n	8001d4c <dc_motor_disable+0x1c>

08001d9c <dc_motor_set_timer_freq>:
{
 8001d9c:	b538      	push	{r3, r4, r5, lr}
 8001d9e:	4605      	mov	r5, r0
	if (frequency == 0)
 8001da0:	b199      	cbz	r1, 8001dca <dc_motor_set_timer_freq+0x2e>
 8001da2:	460c      	mov	r4, r1
	if (frequency > DC_MOTOR_MAX_FREQUENCY)
 8001da4:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001da8:	4299      	cmp	r1, r3
 8001daa:	d900      	bls.n	8001dae <dc_motor_set_timer_freq+0x12>
		frequency = DC_MOTOR_MAX_FREQUENCY;
 8001dac:	461c      	mov	r4, r3
	uint32_t timer_clock = HAL_RCC_GetSysClockFreq(); // Get the timer clock frequency
 8001dae:	f004 f95d 	bl	800606c <HAL_RCC_GetSysClockFreq>
	for (prescaler = 0; prescaler <= 0xFFFF; prescaler++)
 8001db2:	2200      	movs	r2, #0
		auto_reload = (timer_clock / ((prescaler + 1) * frequency)) - 1;
 8001db4:	fb02 4304 	mla	r3, r2, r4, r4
 8001db8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dbc:	3b01      	subs	r3, #1
		if (auto_reload <= 0xFFFF)
 8001dbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dc2:	d305      	bcc.n	8001dd0 <dc_motor_set_timer_freq+0x34>
	for (prescaler = 0; prescaler <= 0xFFFF; prescaler++)
 8001dc4:	3201      	adds	r2, #1
 8001dc6:	b292      	uxth	r2, r2
		auto_reload = (timer_clock / ((prescaler + 1) * frequency)) - 1;
 8001dc8:	e7f4      	b.n	8001db4 <dc_motor_set_timer_freq+0x18>
		dc_motor_disable(motor);
 8001dca:	f7ff ffb1 	bl	8001d30 <dc_motor_disable>
		return;
 8001dce:	e00c      	b.n	8001dea <dc_motor_set_timer_freq+0x4e>
	__HAL_TIM_SET_PRESCALER((TIM_HandleTypeDef *)motor->timer, prescaler);
 8001dd0:	6829      	ldr	r1, [r5, #0]
 8001dd2:	6809      	ldr	r1, [r1, #0]
 8001dd4:	628a      	str	r2, [r1, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer, auto_reload);
 8001dd6:	682a      	ldr	r2, [r5, #0]
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001ddc:	682a      	ldr	r2, [r5, #0]
 8001dde:	60d3      	str	r3, [r2, #12]
	dc_motor_set(motor, motor->current_direction, motor->current_duty_cycle);
 8001de0:	7d6a      	ldrb	r2, [r5, #21]
 8001de2:	7d29      	ldrb	r1, [r5, #20]
 8001de4:	4628      	mov	r0, r5
 8001de6:	f7ff fe63 	bl	8001ab0 <dc_motor_set>
}
 8001dea:	bd38      	pop	{r3, r4, r5, pc}

08001dec <dc_motor_init_simple_Hbridge>:
    if (motor == NULL || timer == NULL)
 8001dec:	2800      	cmp	r0, #0
 8001dee:	f000 8091 	beq.w	8001f14 <dc_motor_init_simple_Hbridge+0x128>
{
 8001df2:	b510      	push	{r4, lr}
 8001df4:	4604      	mov	r4, r0
    if (motor == NULL || timer == NULL)
 8001df6:	2900      	cmp	r1, #0
 8001df8:	d03f      	beq.n	8001e7a <dc_motor_init_simple_Hbridge+0x8e>
    motor->timer = timer;
 8001dfa:	6001      	str	r1, [r0, #0]
    motor->timer_channel_output_1 = timer_channel_output_1;
 8001dfc:	6042      	str	r2, [r0, #4]
    motor->timer_channel_output_2 = timer_channel_output_2;
 8001dfe:	6083      	str	r3, [r0, #8]
	motor->timer_channel_output_3 = timer_channel_output_3;
 8001e00:	9b02      	ldr	r3, [sp, #8]
 8001e02:	60c3      	str	r3, [r0, #12]
    motor->timer_channel_output_4 = timer_channel_output_4;
 8001e04:	9b03      	ldr	r3, [sp, #12]
 8001e06:	6103      	str	r3, [r0, #16]
	motor->current_direction = MOTOR_DIRECTION_FORWARD;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	7503      	strb	r3, [r0, #20]
	motor->status = MOTOR_STATE_NORMAL;
 8001e0c:	7583      	strb	r3, [r0, #22]
	HAL_TIM_Base_Start((TIM_HandleTypeDef *)motor->timer);
 8001e0e:	4608      	mov	r0, r1
 8001e10:	f004 fb20 	bl	8006454 <HAL_TIM_Base_Start>
	dc_motor_set_timer_freq(motor, frequency);
 8001e14:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8001e18:	4620      	mov	r0, r4
 8001e1a:	f7ff ffbf 	bl	8001d9c <dc_motor_set_timer_freq>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001e1e:	6863      	ldr	r3, [r4, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d12b      	bne.n	8001e7c <dc_motor_init_simple_Hbridge+0x90>
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001e2c:	68a3      	ldr	r3, [r4, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d137      	bne.n	8001ea2 <dc_motor_init_simple_Hbridge+0xb6>
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001e3a:	68e3      	ldr	r3, [r4, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d143      	bne.n	8001ec8 <dc_motor_init_simple_Hbridge+0xdc>
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2200      	movs	r2, #0
 8001e46:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001e48:	6923      	ldr	r3, [r4, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d14f      	bne.n	8001eee <dc_motor_init_simple_Hbridge+0x102>
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2200      	movs	r2, #0
 8001e54:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1);
 8001e56:	6861      	ldr	r1, [r4, #4]
 8001e58:	6820      	ldr	r0, [r4, #0]
 8001e5a:	f004 ff09 	bl	8006c70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2);
 8001e5e:	68a1      	ldr	r1, [r4, #8]
 8001e60:	6820      	ldr	r0, [r4, #0]
 8001e62:	f004 ff05 	bl	8006c70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3);
 8001e66:	68e1      	ldr	r1, [r4, #12]
 8001e68:	6820      	ldr	r0, [r4, #0]
 8001e6a:	f004 ff01 	bl	8006c70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4);
 8001e6e:	6921      	ldr	r1, [r4, #16]
 8001e70:	6820      	ldr	r0, [r4, #0]
 8001e72:	f004 fefd 	bl	8006c70 <HAL_TIM_PWM_Start>
	motor->current_duty_cycle = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	7563      	strb	r3, [r4, #21]
}
 8001e7a:	bd10      	pop	{r4, pc}
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d006      	beq.n	8001e8e <dc_motor_init_simple_Hbridge+0xa2>
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d009      	beq.n	8001e98 <dc_motor_init_simple_Hbridge+0xac>
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e8c:	e7ce      	b.n	8001e2c <dc_motor_init_simple_Hbridge+0x40>
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e96:	e7c9      	b.n	8001e2c <dc_motor_init_simple_Hbridge+0x40>
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ea0:	e7c4      	b.n	8001e2c <dc_motor_init_simple_Hbridge+0x40>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d006      	beq.n	8001eb4 <dc_motor_init_simple_Hbridge+0xc8>
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d009      	beq.n	8001ebe <dc_motor_init_simple_Hbridge+0xd2>
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001eb2:	e7c2      	b.n	8001e3a <dc_motor_init_simple_Hbridge+0x4e>
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ebc:	e7bd      	b.n	8001e3a <dc_motor_init_simple_Hbridge+0x4e>
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ec6:	e7b8      	b.n	8001e3a <dc_motor_init_simple_Hbridge+0x4e>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d006      	beq.n	8001eda <dc_motor_init_simple_Hbridge+0xee>
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d009      	beq.n	8001ee4 <dc_motor_init_simple_Hbridge+0xf8>
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ed8:	e7b6      	b.n	8001e48 <dc_motor_init_simple_Hbridge+0x5c>
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ee2:	e7b1      	b.n	8001e48 <dc_motor_init_simple_Hbridge+0x5c>
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001eec:	e7ac      	b.n	8001e48 <dc_motor_init_simple_Hbridge+0x5c>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d006      	beq.n	8001f00 <dc_motor_init_simple_Hbridge+0x114>
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d009      	beq.n	8001f0a <dc_motor_init_simple_Hbridge+0x11e>
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2200      	movs	r2, #0
 8001efc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001efe:	e7aa      	b.n	8001e56 <dc_motor_init_simple_Hbridge+0x6a>
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2200      	movs	r2, #0
 8001f06:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f08:	e7a5      	b.n	8001e56 <dc_motor_init_simple_Hbridge+0x6a>
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f12:	e7a0      	b.n	8001e56 <dc_motor_init_simple_Hbridge+0x6a>
 8001f14:	4770      	bx	lr
	...

08001f18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f18:	b500      	push	{lr}
 8001f1a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	9201      	str	r2, [sp, #4]
 8001f20:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <MX_DMA_Init+0x30>)
 8001f22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f24:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8001f28:	6319      	str	r1, [r3, #48]	@ 0x30
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f30:	9301      	str	r3, [sp, #4]
 8001f32:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001f34:	2105      	movs	r1, #5
 8001f36:	2038      	movs	r0, #56	@ 0x38
 8001f38:	f002 fc30 	bl	800479c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f3c:	2038      	movs	r0, #56	@ 0x38
 8001f3e:	f002 fc3d 	bl	80047bc <HAL_NVIC_EnableIRQ>

}
 8001f42:	b003      	add	sp, #12
 8001f44:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f48:	40023800 	.word	0x40023800

08001f4c <electronic_throttle_update>:
    }
    etb->target_position = position;
}

void electronic_throttle_update(void *arg)
{
 8001f4c:	b530      	push	{r4, r5, lr}
 8001f4e:	ed2d 8b02 	vpush	{d8}
 8001f52:	b083      	sub	sp, #12
    
    electronic_throttle_t *etb = (electronic_throttle_t *)arg;
    if (etb == NULL || etb->pid == NULL || etb->sensor == NULL || etb->motor == NULL)
 8001f54:	2800      	cmp	r0, #0
 8001f56:	d04a      	beq.n	8001fee <electronic_throttle_update+0xa2>
 8001f58:	4604      	mov	r4, r0
 8001f5a:	6883      	ldr	r3, [r0, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d046      	beq.n	8001fee <electronic_throttle_update+0xa2>
 8001f60:	68c0      	ldr	r0, [r0, #12]
 8001f62:	2800      	cmp	r0, #0
 8001f64:	d043      	beq.n	8001fee <electronic_throttle_update+0xa2>
 8001f66:	6863      	ldr	r3, [r4, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d040      	beq.n	8001fee <electronic_throttle_update+0xa2>
    {
        log_error("Electronic throttle not initialized");
        return;
    }
    percent_t position = sensor_tps_get(etb->sensor);
 8001f6c:	f001 fe06 	bl	8003b7c <sensor_tps_get>
 8001f70:	eeb0 8a40 	vmov.f32	s16, s0
    etb->current_position = position;
 8001f74:	ed84 0a05 	vstr	s0, [r4, #20]
    pid_set_setpoint(etb->pid, etb->target_position);
 8001f78:	ed94 0a04 	vldr	s0, [r4, #16]
 8001f7c:	68a0      	ldr	r0, [r4, #8]
 8001f7e:	f000 ff96 	bl	8002eae <pid_set_setpoint>
    percent_t motor_effort = pid_compute(etb->pid, get_time_us(), position);
 8001f82:	68a5      	ldr	r5, [r4, #8]
 8001f84:	f007 f8a8 	bl	80090d8 <get_time_us>
 8001f88:	4601      	mov	r1, r0
 8001f8a:	eeb0 0a48 	vmov.f32	s0, s16
 8001f8e:	4628      	mov	r0, r5
 8001f90:	f000 ff90 	bl	8002eb4 <pid_compute>
    dc_motor_direction_t dir = motor_effort > 0 ? MOTOR_DIRECTION_FORWARD : MOTOR_DIRECTION_REVERSE;
 8001f94:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9c:	bfd4      	ite	le
 8001f9e:	2101      	movle	r1, #1
 8001fa0:	2100      	movgt	r1, #0
    /* Limiting the end of travel duty cycle for protection */
    if (etb->is_duty_cycle_limiting_enabled)
 8001fa2:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d051      	beq.n	800204e <electronic_throttle_update+0x102>
    {
        if (ABS(position - 100.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 8001faa:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 800209c <electronic_throttle_update+0x150>
 8001fae:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001fb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fba:	d41f      	bmi.n	8001ffc <electronic_throttle_update+0xb0>
 8001fbc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc8:	bf4c      	ite	mi
 8001fca:	2301      	movmi	r3, #1
 8001fcc:	2300      	movpl	r3, #0
 8001fce:	b30b      	cbz	r3, 8002014 <electronic_throttle_update+0xc8>
        {
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_upper);
 8001fd0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd8:	d41a      	bmi.n	8002010 <electronic_throttle_update+0xc4>
 8001fda:	edd4 7a07 	vldr	s15, [r4, #28]
 8001fde:	eef4 7ac0 	vcmpe.f32	s15, s0
 8001fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe6:	d515      	bpl.n	8002014 <electronic_throttle_update+0xc8>
 8001fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fec:	e012      	b.n	8002014 <electronic_throttle_update+0xc8>
        log_error("Electronic throttle not initialized");
 8001fee:	482c      	ldr	r0, [pc, #176]	@ (80020a0 <electronic_throttle_update+0x154>)
 8001ff0:	f000 f8a0 	bl	8002134 <log_error>
        {
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_lower);
        }
    }
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
}
 8001ff4:	b003      	add	sp, #12
 8001ff6:	ecbd 8b02 	vpop	{d8}
 8001ffa:	bd30      	pop	{r4, r5, pc}
        if (ABS(position - 100.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 8001ffc:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8002000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002008:	bfcc      	ite	gt
 800200a:	2301      	movgt	r3, #1
 800200c:	2300      	movle	r3, #0
 800200e:	e7de      	b.n	8001fce <electronic_throttle_update+0x82>
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_upper);
 8002010:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 80020a4 <electronic_throttle_update+0x158>
        if (ABS(position - 0.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 8002014:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201c:	d426      	bmi.n	800206c <electronic_throttle_update+0x120>
 800201e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002022:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202a:	bf4c      	ite	mi
 800202c:	2301      	movmi	r3, #1
 800202e:	2300      	movpl	r3, #0
 8002030:	b16b      	cbz	r3, 800204e <electronic_throttle_update+0x102>
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_lower);
 8002032:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203a:	d421      	bmi.n	8002080 <electronic_throttle_update+0x134>
 800203c:	edd4 7a06 	vldr	s15, [r4, #24]
 8002040:	eef4 7ac0 	vcmpe.f32	s15, s0
 8002044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002048:	d501      	bpl.n	800204e <electronic_throttle_update+0x102>
 800204a:	eeb0 0a67 	vmov.f32	s0, s15
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 800204e:	6860      	ldr	r0, [r4, #4]
 8002050:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002058:	d416      	bmi.n	8002088 <electronic_throttle_update+0x13c>
 800205a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800205e:	edcd 7a01 	vstr	s15, [sp, #4]
 8002062:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002066:	f7ff fd23 	bl	8001ab0 <dc_motor_set>
 800206a:	e7c3      	b.n	8001ff4 <electronic_throttle_update+0xa8>
        if (ABS(position - 0.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 800206c:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 8002070:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002078:	bfcc      	ite	gt
 800207a:	2301      	movgt	r3, #1
 800207c:	2300      	movle	r3, #0
 800207e:	e7d7      	b.n	8002030 <electronic_throttle_update+0xe4>
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 8002080:	6860      	ldr	r0, [r4, #4]
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_lower);
 8002082:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80020a4 <electronic_throttle_update+0x158>
 8002086:	e7e8      	b.n	800205a <electronic_throttle_update+0x10e>
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 8002088:	eeb1 0a40 	vneg.f32	s0, s0
 800208c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002090:	edcd 7a01 	vstr	s15, [sp, #4]
 8002094:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002098:	e7e5      	b.n	8002066 <electronic_throttle_update+0x11a>
 800209a:	bf00      	nop
 800209c:	42c80000 	.word	0x42c80000
 80020a0:	0800bbd4 	.word	0x0800bbd4
 80020a4:	00000000 	.word	0x00000000

080020a8 <electronic_throttle_init>:
{
 80020a8:	b510      	push	{r4, lr}
    if (etb == NULL || sensor == NULL || motor == NULL)
 80020aa:	b1f0      	cbz	r0, 80020ea <electronic_throttle_init+0x42>
 80020ac:	4604      	mov	r4, r0
 80020ae:	b1e2      	cbz	r2, 80020ea <electronic_throttle_init+0x42>
 80020b0:	b1db      	cbz	r3, 80020ea <electronic_throttle_init+0x42>
    etb->pid = pid;
 80020b2:	6081      	str	r1, [r0, #8]
    etb->sensor = sensor;
 80020b4:	60c2      	str	r2, [r0, #12]
    etb->motor = motor;
 80020b6:	6043      	str	r3, [r0, #4]
    etb->target_position = ELECTRONIC_THROTTLE_FAIL_SAFE_POSITION;
 80020b8:	2300      	movs	r3, #0
 80020ba:	6103      	str	r3, [r0, #16]
    etb->pid->limit_output_max = (float)255;
 80020bc:	4b0d      	ldr	r3, [pc, #52]	@ (80020f4 <electronic_throttle_init+0x4c>)
 80020be:	614b      	str	r3, [r1, #20]
    etb->pid->limit_output_min = (float)-255;
 80020c0:	6883      	ldr	r3, [r0, #8]
 80020c2:	4a0d      	ldr	r2, [pc, #52]	@ (80020f8 <electronic_throttle_init+0x50>)
 80020c4:	611a      	str	r2, [r3, #16]
    etb->pid->limit_integrator_max = (float)250;
 80020c6:	6883      	ldr	r3, [r0, #8]
 80020c8:	4a0c      	ldr	r2, [pc, #48]	@ (80020fc <electronic_throttle_init+0x54>)
 80020ca:	61da      	str	r2, [r3, #28]
    etb->pid->limit_integrator_min = (float)-250;
 80020cc:	6883      	ldr	r3, [r0, #8]
 80020ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002100 <electronic_throttle_init+0x58>)
 80020d0:	619a      	str	r2, [r3, #24]
    osTimerId_t timer_id = osTimerNew(
 80020d2:	2300      	movs	r3, #0
 80020d4:	4602      	mov	r2, r0
 80020d6:	2101      	movs	r1, #1
 80020d8:	480a      	ldr	r0, [pc, #40]	@ (8002104 <electronic_throttle_init+0x5c>)
 80020da:	f7fe ff59 	bl	8000f90 <osTimerNew>
    osTimerStart(timer_id, 1); // every 1 tick = every 1ms = 1000Hz
 80020de:	2101      	movs	r1, #1
 80020e0:	f7fe ffaa 	bl	8001038 <osTimerStart>
    etb->state = ETB_STATE_NORMAL;
 80020e4:	2301      	movs	r3, #1
 80020e6:	7023      	strb	r3, [r4, #0]
}
 80020e8:	bd10      	pop	{r4, pc}
        log_error("Electronic throttle init failed");
 80020ea:	4807      	ldr	r0, [pc, #28]	@ (8002108 <electronic_throttle_init+0x60>)
 80020ec:	f000 f822 	bl	8002134 <log_error>
        return;
 80020f0:	e7fa      	b.n	80020e8 <electronic_throttle_init+0x40>
 80020f2:	bf00      	nop
 80020f4:	437f0000 	.word	0x437f0000
 80020f8:	c37f0000 	.word	0xc37f0000
 80020fc:	437a0000 	.word	0x437a0000
 8002100:	c37a0000 	.word	0xc37a0000
 8002104:	08001f4d 	.word	0x08001f4d
 8002108:	0800bbf8 	.word	0x0800bbf8

0800210c <electronic_throttle_set>:
    if (!IS_IN_RANGE(position, (percent_t)0, (percent_t)100))
 800210c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002114:	db06      	blt.n	8002124 <electronic_throttle_set+0x18>
 8002116:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8002130 <electronic_throttle_set+0x24>
 800211a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002122:	d901      	bls.n	8002128 <electronic_throttle_set+0x1c>
        etb->target_position = ELECTRONIC_THROTTLE_FAIL_SAFE_POSITION;
 8002124:	2300      	movs	r3, #0
 8002126:	6103      	str	r3, [r0, #16]
    etb->target_position = position;
 8002128:	ed80 0a04 	vstr	s0, [r0, #16]
}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	42c80000 	.word	0x42c80000

08002134 <log_error>:
#include "error_handling.h"


void log_error(const char* message)
{
    if (message == NULL) return;
 8002134:	b1c0      	cbz	r0, 8002168 <log_error+0x34>
{
 8002136:	b570      	push	{r4, r5, r6, lr}
 8002138:	b09a      	sub	sp, #104	@ 0x68
 800213a:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 800213c:	ac01      	add	r4, sp, #4
 800213e:	2564      	movs	r5, #100	@ 0x64
 8002140:	462a      	mov	r2, r5
 8002142:	2100      	movs	r1, #0
 8002144:	4620      	mov	r0, r4
 8002146:	f008 fd9f 	bl	800ac88 <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Error: %s\n", message);
 800214a:	4633      	mov	r3, r6
 800214c:	4a07      	ldr	r2, [pc, #28]	@ (800216c <log_error+0x38>)
 800214e:	4629      	mov	r1, r5
 8002150:	4620      	mov	r0, r4
 8002152:	f008 fd63 	bl	800ac1c <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 8002156:	4620      	mov	r0, r4
 8002158:	f7fe f822 	bl	80001a0 <strlen>
 800215c:	b281      	uxth	r1, r0
 800215e:	4620      	mov	r0, r4
 8002160:	f007 fd2c 	bl	8009bbc <CDC_Transmit_FS>
}
 8002164:	b01a      	add	sp, #104	@ 0x68
 8002166:	bd70      	pop	{r4, r5, r6, pc}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	0800bc18 	.word	0x0800bc18

08002170 <log_warning>:

void log_warning(const char* message)
{
    if (message == NULL) return;
 8002170:	b1c0      	cbz	r0, 80021a4 <log_warning+0x34>
{
 8002172:	b570      	push	{r4, r5, r6, lr}
 8002174:	b09a      	sub	sp, #104	@ 0x68
 8002176:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 8002178:	ac01      	add	r4, sp, #4
 800217a:	2564      	movs	r5, #100	@ 0x64
 800217c:	462a      	mov	r2, r5
 800217e:	2100      	movs	r1, #0
 8002180:	4620      	mov	r0, r4
 8002182:	f008 fd81 	bl	800ac88 <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Warning: %s\n", message);
 8002186:	4633      	mov	r3, r6
 8002188:	4a07      	ldr	r2, [pc, #28]	@ (80021a8 <log_warning+0x38>)
 800218a:	4629      	mov	r1, r5
 800218c:	4620      	mov	r0, r4
 800218e:	f008 fd45 	bl	800ac1c <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 8002192:	4620      	mov	r0, r4
 8002194:	f7fe f804 	bl	80001a0 <strlen>
 8002198:	b281      	uxth	r1, r0
 800219a:	4620      	mov	r0, r4
 800219c:	f007 fd0e 	bl	8009bbc <CDC_Transmit_FS>
 80021a0:	b01a      	add	sp, #104	@ 0x68
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	0800bc24 	.word	0x0800bc24

080021ac <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80021ac:	b180      	cbz	r0, 80021d0 <xEventGroupCreateStatic+0x24>
	{
 80021ae:	b510      	push	{r4, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80021b4:	2320      	movs	r3, #32
 80021b6:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80021b8:	9b01      	ldr	r3, [sp, #4]
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	d011      	beq.n	80021e2 <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021c2:	f383 8811 	msr	BASEPRI, r3
 80021c6:	f3bf 8f6f 	isb	sy
 80021ca:	f3bf 8f4f 	dsb	sy
 80021ce:	e7fe      	b.n	80021ce <xEventGroupCreateStatic+0x22>
 80021d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 80021e0:	e7fe      	b.n	80021e0 <xEventGroupCreateStatic+0x34>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80021e8:	f000 fd86 	bl	8002cf8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80021ec:	2301      	movs	r3, #1
 80021ee:	7723      	strb	r3, [r4, #28]
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
	}
 80021f0:	4620      	mov	r0, r4
 80021f2:	b002      	add	sp, #8
 80021f4:	bd10      	pop	{r4, pc}

080021f6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80021f6:	b538      	push	{r3, r4, r5, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80021f8:	2020      	movs	r0, #32
 80021fa:	f000 f9bd 	bl	8002578 <pvPortMalloc>

		if( pxEventBits != NULL )
 80021fe:	4604      	mov	r4, r0
 8002200:	b128      	cbz	r0, 800220e <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 8002202:	2500      	movs	r5, #0
 8002204:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002208:	f000 fd76 	bl	8002cf8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800220c:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
 800220e:	4620      	mov	r0, r4
 8002210:	bd38      	pop	{r3, r4, r5, pc}

08002212 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002212:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002214:	f007 f9d6 	bl	80095c4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  osDelay(100);
 8002218:	2064      	movs	r0, #100	@ 0x64
 800221a:	f7fe feab 	bl	8000f74 <osDelay>
  
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 800221e:	2001      	movs	r0, #1
 8002220:	f7fe fea8 	bl	8000f74 <osDelay>
  for(;;)
 8002224:	e7fb      	b.n	800221e <StartDefaultTask+0xc>

08002226 <trigger_simulator_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_trigger_simulator_task */
void trigger_simulator_task(void *argument)
{
 8002226:	b508      	push	{r3, lr}
  /* USER CODE BEGIN trigger_simulator_task */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002228:	2001      	movs	r0, #1
 800222a:	f7fe fea3 	bl	8000f74 <osDelay>
  for(;;)
 800222e:	e7fb      	b.n	8002228 <trigger_simulator_task+0x2>

08002230 <start_fuel_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_fuel_task */
void start_fuel_task(void *argument)
{
 8002230:	b508      	push	{r3, lr}


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002232:	2001      	movs	r0, #1
 8002234:	f7fe fe9e 	bl	8000f74 <osDelay>
  for(;;)
 8002238:	e7fb      	b.n	8002232 <start_fuel_task+0x2>

0800223a <sensors_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensors_task */
void sensors_task(void *argument)
{
 800223a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN sensors_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800223c:	2001      	movs	r0, #1
 800223e:	f7fe fe99 	bl	8000f74 <osDelay>
  for(;;)
 8002242:	e7fb      	b.n	800223c <sensors_task+0x2>

08002244 <controller_init_task>:
{
 8002244:	b508      	push	{r3, lr}
  controller_init_with_defaults();
 8002246:	f7ff fb5b 	bl	8001900 <controller_init_with_defaults>
  for (size_t i = 0; i < (sizeof(test_table.x_bins) / sizeof(test_table.x_bins[0])); i++)
 800224a:	2200      	movs	r2, #0
 800224c:	e00e      	b.n	800226c <controller_init_task+0x28>
    test_table.x_bins[i] = i * 100;  // Example values
 800224e:	2364      	movs	r3, #100	@ 0x64
 8002250:	fb02 f303 	mul.w	r3, r2, r3
 8002254:	f502 7080 	add.w	r0, r2, #256	@ 0x100
 8002258:	492d      	ldr	r1, [pc, #180]	@ (8002310 <controller_init_task+0xcc>)
 800225a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002266:	edc1 7a00 	vstr	s15, [r1]
  for (size_t i = 0; i < (sizeof(test_table.x_bins) / sizeof(test_table.x_bins[0])); i++)
 800226a:	3201      	adds	r2, #1
 800226c:	2a0f      	cmp	r2, #15
 800226e:	d9ee      	bls.n	800224e <controller_init_task+0xa>
  for (size_t i = 0; i < (sizeof(test_table.y_bins) / sizeof(test_table.y_bins[0])); i++)
 8002270:	2300      	movs	r3, #0
 8002272:	e00e      	b.n	8002292 <controller_init_task+0x4e>
    test_table.y_bins[i] = i * 10;  // Example values
 8002274:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002278:	0052      	lsls	r2, r2, #1
 800227a:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 800227e:	4924      	ldr	r1, [pc, #144]	@ (8002310 <controller_init_task+0xcc>)
 8002280:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8002284:	ee07 2a90 	vmov	s15, r2
 8002288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800228c:	edc1 7a00 	vstr	s15, [r1]
  for (size_t i = 0; i < (sizeof(test_table.y_bins) / sizeof(test_table.y_bins[0])); i++)
 8002290:	3301      	adds	r3, #1
 8002292:	2b0f      	cmp	r3, #15
 8002294:	d9ee      	bls.n	8002274 <controller_init_task+0x30>
  for (size_t i = 0; i < (sizeof(test_table.data) / sizeof(test_table.data[0])); i++)
 8002296:	2000      	movs	r0, #0
 8002298:	e011      	b.n	80022be <controller_init_task+0x7a>
      test_table.data[i][j] = (i + 1) * (j + 1);  // Example values
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	fb00 2102 	mla	r1, r0, r2, r2
 80022a0:	ee07 1a90 	vmov	s15, r1
 80022a4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80022a8:	4919      	ldr	r1, [pc, #100]	@ (8002310 <controller_init_task+0xcc>)
 80022aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80022ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022b2:	edc3 7a00 	vstr	s15, [r3]
    for (size_t j = 0; j < (sizeof(test_table.data[0]) / sizeof(test_table.data[0][0])); j++)
 80022b6:	4613      	mov	r3, r2
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d9ee      	bls.n	800229a <controller_init_task+0x56>
  for (size_t i = 0; i < (sizeof(test_table.data) / sizeof(test_table.data[0])); i++)
 80022bc:	3001      	adds	r0, #1
 80022be:	280f      	cmp	r0, #15
 80022c0:	d80c      	bhi.n	80022dc <controller_init_task+0x98>
    for (size_t j = 0; j < (sizeof(test_table.data[0]) / sizeof(test_table.data[0][0])); j++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	e7f8      	b.n	80022b8 <controller_init_task+0x74>
    table_value = table_2d_get_value(&test_table, rpm, load);
 80022c6:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8002314 <controller_init_task+0xd0>
 80022ca:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <controller_init_task+0xd4>)
 80022cc:	ed93 0a00 	vldr	s0, [r3]
 80022d0:	480f      	ldr	r0, [pc, #60]	@ (8002310 <controller_init_task+0xcc>)
 80022d2:	f005 fc0d 	bl	8007af0 <table_2d_get_value>
 80022d6:	4b11      	ldr	r3, [pc, #68]	@ (800231c <controller_init_task+0xd8>)
 80022d8:	ed83 0a00 	vstr	s0, [r3]
    osDelay(1);
 80022dc:	2001      	movs	r0, #1
 80022de:	f7fe fe49 	bl	8000f74 <osDelay>
    rpm += 10;  // Simulate RPM increase
 80022e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <controller_init_task+0xd4>)
 80022e4:	edd3 7a00 	vldr	s15, [r3]
 80022e8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80022ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022f0:	edc3 7a00 	vstr	s15, [r3]
    load = 11.25f;  // Simulate load increase
 80022f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002320 <controller_init_task+0xdc>)
 80022f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002324 <controller_init_task+0xe0>)
 80022f8:	601a      	str	r2, [r3, #0]
    if (rpm > 5000)
 80022fa:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002328 <controller_init_task+0xe4>
 80022fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002306:	ddde      	ble.n	80022c6 <controller_init_task+0x82>
      rpm = -1000;
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <controller_init_task+0xd4>)
 800230a:	4a08      	ldr	r2, [pc, #32]	@ (800232c <controller_init_task+0xe8>)
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e7da      	b.n	80022c6 <controller_init_task+0x82>
 8002310:	20002624 	.word	0x20002624
 8002314:	41340000 	.word	0x41340000
 8002318:	20002604 	.word	0x20002604
 800231c:	20002620 	.word	0x20002620
 8002320:	20002600 	.word	0x20002600
 8002324:	41340000 	.word	0x41340000
 8002328:	459c4000 	.word	0x459c4000
 800232c:	c47a0000 	.word	0xc47a0000

08002330 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8002330:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002332:	4a14      	ldr	r2, [pc, #80]	@ (8002384 <MX_FREERTOS_Init+0x54>)
 8002334:	2100      	movs	r1, #0
 8002336:	4814      	ldr	r0, [pc, #80]	@ (8002388 <MX_FREERTOS_Init+0x58>)
 8002338:	f7fe fdc2 	bl	8000ec0 <osThreadNew>
 800233c:	4b13      	ldr	r3, [pc, #76]	@ (800238c <MX_FREERTOS_Init+0x5c>)
 800233e:	6018      	str	r0, [r3, #0]
  trig_simHandle = osThreadNew(trigger_simulator_task, NULL, &trig_sim_attributes);
 8002340:	4a13      	ldr	r2, [pc, #76]	@ (8002390 <MX_FREERTOS_Init+0x60>)
 8002342:	2100      	movs	r1, #0
 8002344:	4813      	ldr	r0, [pc, #76]	@ (8002394 <MX_FREERTOS_Init+0x64>)
 8002346:	f7fe fdbb 	bl	8000ec0 <osThreadNew>
 800234a:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <MX_FREERTOS_Init+0x68>)
 800234c:	6018      	str	r0, [r3, #0]
  fuel_taskHandle = osThreadNew(start_fuel_task, NULL, &fuel_task_attributes);
 800234e:	4a13      	ldr	r2, [pc, #76]	@ (800239c <MX_FREERTOS_Init+0x6c>)
 8002350:	2100      	movs	r1, #0
 8002352:	4813      	ldr	r0, [pc, #76]	@ (80023a0 <MX_FREERTOS_Init+0x70>)
 8002354:	f7fe fdb4 	bl	8000ec0 <osThreadNew>
 8002358:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <MX_FREERTOS_Init+0x74>)
 800235a:	6018      	str	r0, [r3, #0]
  init_taskHandle = osThreadNew(controller_init_task, NULL, &init_task_attributes);
 800235c:	4a12      	ldr	r2, [pc, #72]	@ (80023a8 <MX_FREERTOS_Init+0x78>)
 800235e:	2100      	movs	r1, #0
 8002360:	4812      	ldr	r0, [pc, #72]	@ (80023ac <MX_FREERTOS_Init+0x7c>)
 8002362:	f7fe fdad 	bl	8000ec0 <osThreadNew>
 8002366:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <MX_FREERTOS_Init+0x80>)
 8002368:	6018      	str	r0, [r3, #0]
  sensor_taskHandle = osThreadNew(sensors_task, NULL, &sensor_task_attributes);
 800236a:	4a12      	ldr	r2, [pc, #72]	@ (80023b4 <MX_FREERTOS_Init+0x84>)
 800236c:	2100      	movs	r1, #0
 800236e:	4812      	ldr	r0, [pc, #72]	@ (80023b8 <MX_FREERTOS_Init+0x88>)
 8002370:	f7fe fda6 	bl	8000ec0 <osThreadNew>
 8002374:	4b11      	ldr	r3, [pc, #68]	@ (80023bc <MX_FREERTOS_Init+0x8c>)
 8002376:	6018      	str	r0, [r3, #0]
  engine_flagsHandle = osEventFlagsNew(&engine_flags_attributes);
 8002378:	4811      	ldr	r0, [pc, #68]	@ (80023c0 <MX_FREERTOS_Init+0x90>)
 800237a:	f7fe fe77 	bl	800106c <osEventFlagsNew>
 800237e:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <MX_FREERTOS_Init+0x94>)
 8002380:	6018      	str	r0, [r3, #0]
}
 8002382:	bd08      	pop	{r3, pc}
 8002384:	0800c11c 	.word	0x0800c11c
 8002388:	08002213 	.word	0x08002213
 800238c:	2000261c 	.word	0x2000261c
 8002390:	0800c0f8 	.word	0x0800c0f8
 8002394:	08002227 	.word	0x08002227
 8002398:	20002618 	.word	0x20002618
 800239c:	0800c0d4 	.word	0x0800c0d4
 80023a0:	08002231 	.word	0x08002231
 80023a4:	20002614 	.word	0x20002614
 80023a8:	0800c0b0 	.word	0x0800c0b0
 80023ac:	08002245 	.word	0x08002245
 80023b0:	20002610 	.word	0x20002610
 80023b4:	0800c08c 	.word	0x0800c08c
 80023b8:	0800223b 	.word	0x0800223b
 80023bc:	2000260c 	.word	0x2000260c
 80023c0:	0800c07c 	.word	0x0800c07c
 80023c4:	20002608 	.word	0x20002608

080023c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023cc:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ce:	ad05      	add	r5, sp, #20
 80023d0:	2400      	movs	r4, #0
 80023d2:	9405      	str	r4, [sp, #20]
 80023d4:	9406      	str	r4, [sp, #24]
 80023d6:	9407      	str	r4, [sp, #28]
 80023d8:	9408      	str	r4, [sp, #32]
 80023da:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023dc:	9401      	str	r4, [sp, #4]
 80023de:	4b31      	ldr	r3, [pc, #196]	@ (80024a4 <MX_GPIO_Init+0xdc>)
 80023e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023e2:	f042 0204 	orr.w	r2, r2, #4
 80023e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80023e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023ea:	f002 0204 	and.w	r2, r2, #4
 80023ee:	9201      	str	r2, [sp, #4]
 80023f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023f2:	9402      	str	r4, [sp, #8]
 80023f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80023fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023fe:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8002402:	9202      	str	r2, [sp, #8]
 8002404:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	9403      	str	r4, [sp, #12]
 8002408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002412:	f002 0201 	and.w	r2, r2, #1
 8002416:	9203      	str	r2, [sp, #12]
 8002418:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800241a:	9404      	str	r4, [sp, #16]
 800241c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800241e:	f042 0202 	orr.w	r2, r2, #2
 8002422:	631a      	str	r2, [r3, #48]	@ 0x30
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	9304      	str	r3, [sp, #16]
 800242c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|INJECTOR_OUTPUT_4_Pin|INJECTOR_OUTPUT_3_Pin|INJECTOR_OUTPUT_2_Pin
 800242e:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80024ac <MX_GPIO_Init+0xe4>
 8002432:	4622      	mov	r2, r4
 8002434:	f44f 510f 	mov.w	r1, #9152	@ 0x23c0
 8002438:	4640      	mov	r0, r8
 800243a:	f002 fcc2 	bl	8004dc2 <HAL_GPIO_WritePin>
                          |INJECTOR_OUTPUT_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FAN_1_Pin|FAN_2_Pin|IGNITION_OUTPUT_4_Pin|IGNITION_OUTPUT_3_Pin
 800243e:	4e1a      	ldr	r6, [pc, #104]	@ (80024a8 <MX_GPIO_Init+0xe0>)
 8002440:	4622      	mov	r2, r4
 8002442:	f24f 4104 	movw	r1, #62468	@ 0xf404
 8002446:	4630      	mov	r0, r6
 8002448:	f002 fcbb 	bl	8004dc2 <HAL_GPIO_WritePin>
                          |IGNITION_OUTPUT_2_Pin|IGNITION_OUTPUT_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin INJECTOR_OUTPUT_4_Pin INJECTOR_OUTPUT_3_Pin INJECTOR_OUTPUT_2_Pin
                           INJECTOR_OUTPUT_1_Pin */
  GPIO_InitStruct.Pin = LED_Pin|INJECTOR_OUTPUT_4_Pin|INJECTOR_OUTPUT_3_Pin|INJECTOR_OUTPUT_2_Pin
 800244c:	f44f 530f 	mov.w	r3, #9152	@ 0x23c0
 8002450:	9305      	str	r3, [sp, #20]
                          |INJECTOR_OUTPUT_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002452:	2701      	movs	r7, #1
 8002454:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245a:	4629      	mov	r1, r5
 800245c:	4640      	mov	r0, r8
 800245e:	f002 fbc5 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_1_Pin FAN_2_Pin IGNITION_OUTPUT_4_Pin IGNITION_OUTPUT_3_Pin
                           IGNITION_OUTPUT_2_Pin IGNITION_OUTPUT_1_Pin */
  GPIO_InitStruct.Pin = FAN_1_Pin|FAN_2_Pin|IGNITION_OUTPUT_4_Pin|IGNITION_OUTPUT_3_Pin
 8002462:	f24f 4304 	movw	r3, #62468	@ 0xf404
 8002466:	9305      	str	r3, [sp, #20]
                          |IGNITION_OUTPUT_2_Pin|IGNITION_OUTPUT_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002468:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246e:	4629      	mov	r1, r5
 8002470:	4630      	mov	r0, r6
 8002472:	f002 fbbb 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002476:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800247a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800247c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002480:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002484:	4629      	mov	r1, r5
 8002486:	4630      	mov	r0, r6
 8002488:	f002 fbb0 	bl	8004bec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800248c:	4622      	mov	r2, r4
 800248e:	2105      	movs	r1, #5
 8002490:	2017      	movs	r0, #23
 8002492:	f002 f983 	bl	800479c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002496:	2017      	movs	r0, #23
 8002498:	f002 f990 	bl	80047bc <HAL_NVIC_EnableIRQ>

}
 800249c:	b00a      	add	sp, #40	@ 0x28
 800249e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020800 	.word	0x40020800

080024b0 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80024b0:	4a12      	ldr	r2, [pc, #72]	@ (80024fc <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80024b2:	f012 0f07 	tst.w	r2, #7
 80024b6:	d01e      	beq.n	80024f6 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80024b8:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80024ba:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80024be:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 80024c2:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80024c4:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80024c6:	480e      	ldr	r0, [pc, #56]	@ (8002500 <prvHeapInit+0x50>)
 80024c8:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80024ca:	2100      	movs	r1, #0
 80024cc:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80024ce:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80024d0:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80024d2:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80024d6:	480b      	ldr	r0, [pc, #44]	@ (8002504 <prvHeapInit+0x54>)
 80024d8:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80024da:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80024dc:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80024de:	1a99      	subs	r1, r3, r2
 80024e0:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80024e2:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024e4:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <prvHeapInit+0x58>)
 80024e6:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024e8:	4b08      	ldr	r3, [pc, #32]	@ (800250c <prvHeapInit+0x5c>)
 80024ea:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80024ec:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <prvHeapInit+0x60>)
 80024ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80024f2:	601a      	str	r2, [r3, #0]
}
 80024f4:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80024f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80024fa:	e7e4      	b.n	80024c6 <prvHeapInit+0x16>
 80024fc:	20002ac4 	.word	0x20002ac4
 8002500:	20002abc 	.word	0x20002abc
 8002504:	20002ab8 	.word	0x20002ab8
 8002508:	20002ab0 	.word	0x20002ab0
 800250c:	20002ab4 	.word	0x20002ab4
 8002510:	20002aa4 	.word	0x20002aa4

08002514 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002514:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <prvInsertBlockIntoFreeList+0x5c>)
 8002516:	461a      	mov	r2, r3
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4283      	cmp	r3, r0
 800251c:	d3fb      	bcc.n	8002516 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800251e:	6851      	ldr	r1, [r2, #4]
 8002520:	eb02 0c01 	add.w	ip, r2, r1
 8002524:	4584      	cmp	ip, r0
 8002526:	d009      	beq.n	800253c <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002528:	6841      	ldr	r1, [r0, #4]
 800252a:	eb00 0c01 	add.w	ip, r0, r1
 800252e:	4563      	cmp	r3, ip
 8002530:	d009      	beq.n	8002546 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002532:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002534:	4290      	cmp	r0, r2
 8002536:	d019      	beq.n	800256c <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002538:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800253a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800253c:	6840      	ldr	r0, [r0, #4]
 800253e:	4401      	add	r1, r0
 8002540:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8002542:	4610      	mov	r0, r2
 8002544:	e7f0      	b.n	8002528 <prvInsertBlockIntoFreeList+0x14>
{
 8002546:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002548:	4c0a      	ldr	r4, [pc, #40]	@ (8002574 <prvInsertBlockIntoFreeList+0x60>)
 800254a:	6824      	ldr	r4, [r4, #0]
 800254c:	42a3      	cmp	r3, r4
 800254e:	d00b      	beq.n	8002568 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4419      	add	r1, r3
 8002554:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002556:	6813      	ldr	r3, [r2, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800255c:	4290      	cmp	r0, r2
 800255e:	d000      	beq.n	8002562 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002560:	6010      	str	r0, [r2, #0]
	}
}
 8002562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002566:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002568:	6004      	str	r4, [r0, #0]
 800256a:	e7f7      	b.n	800255c <prvInsertBlockIntoFreeList+0x48>
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20002abc 	.word	0x20002abc
 8002574:	20002ab8 	.word	0x20002ab8

08002578 <pvPortMalloc>:
{
 8002578:	b538      	push	{r3, r4, r5, lr}
 800257a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800257c:	f005 fdbe 	bl	80080fc <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002580:	4b38      	ldr	r3, [pc, #224]	@ (8002664 <pvPortMalloc+0xec>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	b1b3      	cbz	r3, 80025b4 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002586:	4b38      	ldr	r3, [pc, #224]	@ (8002668 <pvPortMalloc+0xf0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	421c      	tst	r4, r3
 800258c:	d150      	bne.n	8002630 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 800258e:	2c00      	cmp	r4, #0
 8002590:	d050      	beq.n	8002634 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8002592:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002596:	f014 0f07 	tst.w	r4, #7
 800259a:	d002      	beq.n	80025a2 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800259c:	f022 0207 	bic.w	r2, r2, #7
 80025a0:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80025a2:	2a00      	cmp	r2, #0
 80025a4:	d055      	beq.n	8002652 <pvPortMalloc+0xda>
 80025a6:	4b31      	ldr	r3, [pc, #196]	@ (800266c <pvPortMalloc+0xf4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d353      	bcc.n	8002656 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 80025ae:	4930      	ldr	r1, [pc, #192]	@ (8002670 <pvPortMalloc+0xf8>)
 80025b0:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025b2:	e004      	b.n	80025be <pvPortMalloc+0x46>
			prvHeapInit();
 80025b4:	f7ff ff7c 	bl	80024b0 <prvHeapInit>
 80025b8:	e7e5      	b.n	8002586 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80025ba:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80025bc:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025be:	6863      	ldr	r3, [r4, #4]
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d202      	bcs.n	80025ca <pvPortMalloc+0x52>
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f7      	bne.n	80025ba <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 80025ca:	4b26      	ldr	r3, [pc, #152]	@ (8002664 <pvPortMalloc+0xec>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	42a3      	cmp	r3, r4
 80025d0:	d043      	beq.n	800265a <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80025d2:	680d      	ldr	r5, [r1, #0]
 80025d4:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80025da:	6863      	ldr	r3, [r4, #4]
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	2b10      	cmp	r3, #16
 80025e0:	d910      	bls.n	8002604 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80025e2:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80025e4:	f010 0f07 	tst.w	r0, #7
 80025e8:	d008      	beq.n	80025fc <pvPortMalloc+0x84>
 80025ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ee:	f383 8811 	msr	BASEPRI, r3
 80025f2:	f3bf 8f6f 	isb	sy
 80025f6:	f3bf 8f4f 	dsb	sy
 80025fa:	e7fe      	b.n	80025fa <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80025fc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80025fe:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002600:	f7ff ff88 	bl	8002514 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002604:	6862      	ldr	r2, [r4, #4]
 8002606:	4919      	ldr	r1, [pc, #100]	@ (800266c <pvPortMalloc+0xf4>)
 8002608:	680b      	ldr	r3, [r1, #0]
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800260e:	4919      	ldr	r1, [pc, #100]	@ (8002674 <pvPortMalloc+0xfc>)
 8002610:	6809      	ldr	r1, [r1, #0]
 8002612:	428b      	cmp	r3, r1
 8002614:	d201      	bcs.n	800261a <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002616:	4917      	ldr	r1, [pc, #92]	@ (8002674 <pvPortMalloc+0xfc>)
 8002618:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800261a:	4b13      	ldr	r3, [pc, #76]	@ (8002668 <pvPortMalloc+0xf0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002622:	2300      	movs	r3, #0
 8002624:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8002626:	4a14      	ldr	r2, [pc, #80]	@ (8002678 <pvPortMalloc+0x100>)
 8002628:	6813      	ldr	r3, [r2, #0]
 800262a:	3301      	adds	r3, #1
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e002      	b.n	8002636 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8002630:	2500      	movs	r5, #0
 8002632:	e000      	b.n	8002636 <pvPortMalloc+0xbe>
 8002634:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8002636:	f005 fdfb 	bl	8008230 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800263a:	f015 0f07 	tst.w	r5, #7
 800263e:	d00e      	beq.n	800265e <pvPortMalloc+0xe6>
 8002640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	e7fe      	b.n	8002650 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8002652:	2500      	movs	r5, #0
 8002654:	e7ef      	b.n	8002636 <pvPortMalloc+0xbe>
 8002656:	2500      	movs	r5, #0
 8002658:	e7ed      	b.n	8002636 <pvPortMalloc+0xbe>
 800265a:	2500      	movs	r5, #0
 800265c:	e7eb      	b.n	8002636 <pvPortMalloc+0xbe>
}
 800265e:	4628      	mov	r0, r5
 8002660:	bd38      	pop	{r3, r4, r5, pc}
 8002662:	bf00      	nop
 8002664:	20002ab8 	.word	0x20002ab8
 8002668:	20002aa4 	.word	0x20002aa4
 800266c:	20002ab4 	.word	0x20002ab4
 8002670:	20002abc 	.word	0x20002abc
 8002674:	20002ab0 	.word	0x20002ab0
 8002678:	20002aac 	.word	0x20002aac

0800267c <vPortFree>:
	if( pv != NULL )
 800267c:	2800      	cmp	r0, #0
 800267e:	d034      	beq.n	80026ea <vPortFree+0x6e>
{
 8002680:	b538      	push	{r3, r4, r5, lr}
 8002682:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8002684:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002688:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800268c:	4a17      	ldr	r2, [pc, #92]	@ (80026ec <vPortFree+0x70>)
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	4213      	tst	r3, r2
 8002692:	d108      	bne.n	80026a6 <vPortFree+0x2a>
 8002694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	e7fe      	b.n	80026a4 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80026a6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80026aa:	b141      	cbz	r1, 80026be <vPortFree+0x42>
 80026ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	e7fe      	b.n	80026bc <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80026be:	ea23 0302 	bic.w	r3, r3, r2
 80026c2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80026c6:	f005 fd19 	bl	80080fc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80026ca:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80026ce:	4a08      	ldr	r2, [pc, #32]	@ (80026f0 <vPortFree+0x74>)
 80026d0:	6813      	ldr	r3, [r2, #0]
 80026d2:	440b      	add	r3, r1
 80026d4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80026d6:	4628      	mov	r0, r5
 80026d8:	f7ff ff1c 	bl	8002514 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80026dc:	4a05      	ldr	r2, [pc, #20]	@ (80026f4 <vPortFree+0x78>)
 80026de:	6813      	ldr	r3, [r2, #0]
 80026e0:	3301      	adds	r3, #1
 80026e2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80026e4:	f005 fda4 	bl	8008230 <xTaskResumeAll>
}
 80026e8:	bd38      	pop	{r3, r4, r5, pc}
 80026ea:	4770      	bx	lr
 80026ec:	20002aa4 	.word	0x20002aa4
 80026f0:	20002ab4 	.word	0x20002ab4
 80026f4:	20002aa8 	.word	0x20002aa8

080026f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80026f8:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026fa:	480b      	ldr	r0, [pc, #44]	@ (8002728 <MX_I2C1_Init+0x30>)
 80026fc:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <MX_I2C1_Init+0x34>)
 80026fe:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002700:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <MX_I2C1_Init+0x38>)
 8002702:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002704:	2300      	movs	r3, #0
 8002706:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002708:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800270a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800270e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002710:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002712:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002714:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002716:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002718:	f002 fb70 	bl	8004dfc <HAL_I2C_Init>
 800271c:	b900      	cbnz	r0, 8002720 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800271e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002720:	f000 fb48 	bl	8002db4 <Error_Handler>
}
 8002724:	e7fb      	b.n	800271e <MX_I2C1_Init+0x26>
 8002726:	bf00      	nop
 8002728:	200066c4 	.word	0x200066c4
 800272c:	40005400 	.word	0x40005400
 8002730:	000186a0 	.word	0x000186a0

08002734 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002734:	b530      	push	{r4, r5, lr}
 8002736:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	2300      	movs	r3, #0
 800273a:	9303      	str	r3, [sp, #12]
 800273c:	9304      	str	r3, [sp, #16]
 800273e:	9305      	str	r3, [sp, #20]
 8002740:	9306      	str	r3, [sp, #24]
 8002742:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8002744:	6802      	ldr	r2, [r0, #0]
 8002746:	4b14      	ldr	r3, [pc, #80]	@ (8002798 <HAL_I2C_MspInit+0x64>)
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800274c:	b009      	add	sp, #36	@ 0x24
 800274e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002750:	2500      	movs	r5, #0
 8002752:	9501      	str	r5, [sp, #4]
 8002754:	4c11      	ldr	r4, [pc, #68]	@ (800279c <HAL_I2C_MspInit+0x68>)
 8002756:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002758:	f043 0302 	orr.w	r3, r3, #2
 800275c:	6323      	str	r3, [r4, #48]	@ 0x30
 800275e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002768:	23c0      	movs	r3, #192	@ 0xc0
 800276a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800276c:	2312      	movs	r3, #18
 800276e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002770:	2303      	movs	r3, #3
 8002772:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002774:	2304      	movs	r3, #4
 8002776:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002778:	a903      	add	r1, sp, #12
 800277a:	4809      	ldr	r0, [pc, #36]	@ (80027a0 <HAL_I2C_MspInit+0x6c>)
 800277c:	f002 fa36 	bl	8004bec <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002780:	9502      	str	r5, [sp, #8]
 8002782:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002784:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002788:	6423      	str	r3, [r4, #64]	@ 0x40
 800278a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800278c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002790:	9302      	str	r3, [sp, #8]
 8002792:	9b02      	ldr	r3, [sp, #8]
}
 8002794:	e7da      	b.n	800274c <HAL_I2C_MspInit+0x18>
 8002796:	bf00      	nop
 8002798:	40005400 	.word	0x40005400
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020400 	.word	0x40020400

080027a4 <ignition_coil_begin_charge>:
 *
 * @param coil_index The index of the coil to be charged.
 */
void ignition_coil_begin_charge(void *arg)
{
    if (arg == NULL)
 80027a4:	b330      	cbz	r0, 80027f4 <ignition_coil_begin_charge+0x50>
{
 80027a6:	b570      	push	{r4, r5, r6, lr}
 80027a8:	4604      	mov	r4, r0
    {
        return;
    }
    uint8_t *coil_index = (uint8_t *)arg;

    if (coil_index[1] > FIRMWARE_IGNITION_OUTPUT_COUNT - 1 || coil_index[0] > FIRMWARE_IGNITION_OUTPUT_COUNT - 1)
 80027aa:	7843      	ldrb	r3, [r0, #1]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d802      	bhi.n	80027b6 <ignition_coil_begin_charge+0x12>
 80027b0:	7803      	ldrb	r3, [r0, #0]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d903      	bls.n	80027be <ignition_coil_begin_charge+0x1a>
    {
        log_error("Unkown ignition output");
 80027b6:	4810      	ldr	r0, [pc, #64]	@ (80027f8 <ignition_coil_begin_charge+0x54>)
 80027b8:	f7ff fcbc 	bl	8002134 <log_error>
    }
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_CHARGING;
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_CHARGING;
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_SET);
}
 80027bc:	bd70      	pop	{r4, r5, r6, pc}
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_CHARGING;
 80027be:	4a0f      	ldr	r2, [pc, #60]	@ (80027fc <ignition_coil_begin_charge+0x58>)
 80027c0:	2501      	movs	r5, #1
 80027c2:	54d5      	strb	r5, [r2, r3]
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_CHARGING;
 80027c4:	7843      	ldrb	r3, [r0, #1]
 80027c6:	54d5      	strb	r5, [r2, r3]
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_SET);
 80027c8:	7800      	ldrb	r0, [r0, #0]
 80027ca:	4e0d      	ldr	r6, [pc, #52]	@ (8002800 <ignition_coil_begin_charge+0x5c>)
 80027cc:	6833      	ldr	r3, [r6, #0]
 80027ce:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 80027d2:	462a      	mov	r2, r5
 80027d4:	8889      	ldrh	r1, [r1, #4]
 80027d6:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80027da:	f002 faf2 	bl	8004dc2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_SET);
 80027de:	7860      	ldrb	r0, [r4, #1]
 80027e0:	6833      	ldr	r3, [r6, #0]
 80027e2:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 80027e6:	462a      	mov	r2, r5
 80027e8:	8889      	ldrh	r1, [r1, #4]
 80027ea:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80027ee:	f002 fae8 	bl	8004dc2 <HAL_GPIO_WritePin>
 80027f2:	e7e3      	b.n	80027bc <ignition_coil_begin_charge+0x18>
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	0800bc74 	.word	0x0800bc74
 80027fc:	20006724 	.word	0x20006724
 8002800:	20006728 	.word	0x20006728

08002804 <ignition_coil_fire_spark>:
 *
 * @param coil_index The index of the coil to fire the spark from.
 */
void ignition_coil_fire_spark(void *arg)
{
    if (arg == NULL)
 8002804:	b340      	cbz	r0, 8002858 <ignition_coil_fire_spark+0x54>
{
 8002806:	b570      	push	{r4, r5, r6, lr}
 8002808:	4604      	mov	r4, r0
    {
        return;
    }

    uint8_t *coil_index = (uint8_t *)arg;
    if (coil_index[1] > FIRMWARE_IGNITION_OUTPUT_COUNT - 1 || coil_index[0] > FIRMWARE_IGNITION_OUTPUT_COUNT - 1)
 800280a:	7843      	ldrb	r3, [r0, #1]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d802      	bhi.n	8002816 <ignition_coil_fire_spark+0x12>
 8002810:	7803      	ldrb	r3, [r0, #0]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d903      	bls.n	800281e <ignition_coil_fire_spark+0x1a>
    {
        log_error("Unkown ignition output");
 8002816:	4811      	ldr	r0, [pc, #68]	@ (800285c <ignition_coil_fire_spark+0x58>)
 8002818:	f7ff fc8c 	bl	8002134 <log_error>
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_NOT_CHARGING;
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_NOT_CHARGING;
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_RESET);
    spark_is_in_progress = false;
}
 800281c:	bd70      	pop	{r4, r5, r6, pc}
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_NOT_CHARGING;
 800281e:	4a10      	ldr	r2, [pc, #64]	@ (8002860 <ignition_coil_fire_spark+0x5c>)
 8002820:	2500      	movs	r5, #0
 8002822:	54d5      	strb	r5, [r2, r3]
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_NOT_CHARGING;
 8002824:	7843      	ldrb	r3, [r0, #1]
 8002826:	54d5      	strb	r5, [r2, r3]
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_RESET);
 8002828:	7800      	ldrb	r0, [r0, #0]
 800282a:	4e0e      	ldr	r6, [pc, #56]	@ (8002864 <ignition_coil_fire_spark+0x60>)
 800282c:	6833      	ldr	r3, [r6, #0]
 800282e:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 8002832:	462a      	mov	r2, r5
 8002834:	8889      	ldrh	r1, [r1, #4]
 8002836:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800283a:	f002 fac2 	bl	8004dc2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_RESET);
 800283e:	7860      	ldrb	r0, [r4, #1]
 8002840:	6833      	ldr	r3, [r6, #0]
 8002842:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 8002846:	462a      	mov	r2, r5
 8002848:	8889      	ldrh	r1, [r1, #4]
 800284a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800284e:	f002 fab8 	bl	8004dc2 <HAL_GPIO_WritePin>
    spark_is_in_progress = false;
 8002852:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <ignition_coil_fire_spark+0x64>)
 8002854:	701d      	strb	r5, [r3, #0]
 8002856:	e7e1      	b.n	800281c <ignition_coil_fire_spark+0x18>
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	0800bc74 	.word	0x0800bc74
 8002860:	20006724 	.word	0x20006724
 8002864:	20006728 	.word	0x20006728
 8002868:	2000671b 	.word	0x2000671b

0800286c <ignition_init>:
{
 800286c:	b510      	push	{r4, lr}
    if (outputs == NULL)
 800286e:	b158      	cbz	r0, 8002888 <ignition_init+0x1c>
    ignition_outputs = outputs;
 8002870:	4a4f      	ldr	r2, [pc, #316]	@ (80029b0 <ignition_init+0x144>)
 8002872:	6010      	str	r0, [r2, #0]
    switch (config.firing_order)
 8002874:	4b4f      	ldr	r3, [pc, #316]	@ (80029b4 <ignition_init+0x148>)
 8002876:	f893 3298 	ldrb.w	r3, [r3, #664]	@ 0x298
 800287a:	b14b      	cbz	r3, 8002890 <ignition_init+0x24>
 800287c:	2b01      	cmp	r3, #1
 800287e:	d034      	beq.n	80028ea <ignition_init+0x7e>
        log_error("ignition init failed. unkown firing order.");
 8002880:	484d      	ldr	r0, [pc, #308]	@ (80029b8 <ignition_init+0x14c>)
 8002882:	f7ff fc57 	bl	8002134 <log_error>
}
 8002886:	bd10      	pop	{r4, pc}
        log_error("ignition init failed. No output config");
 8002888:	484c      	ldr	r0, [pc, #304]	@ (80029bc <ignition_init+0x150>)
 800288a:	f7ff fc53 	bl	8002134 <log_error>
        return;
 800288e:	e7fa      	b.n	8002886 <ignition_init+0x1a>
        number_of_cylinders = 4;
 8002890:	4b4b      	ldr	r3, [pc, #300]	@ (80029c0 <ignition_init+0x154>)
 8002892:	2204      	movs	r2, #4
 8002894:	701a      	strb	r2, [r3, #0]
        switch (config.ignition_mode)
 8002896:	4b47      	ldr	r3, [pc, #284]	@ (80029b4 <ignition_init+0x148>)
 8002898:	f893 32a1 	ldrb.w	r3, [r3, #673]	@ 0x2a1
 800289c:	2b02      	cmp	r3, #2
 800289e:	d016      	beq.n	80028ce <ignition_init+0x62>
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d00c      	beq.n	80028be <ignition_init+0x52>
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d11c      	bne.n	80028e2 <ignition_init+0x76>
            ignition_order[0] = 1;
 80028a8:	4b46      	ldr	r3, [pc, #280]	@ (80029c4 <ignition_init+0x158>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
            ignition_order[1] = 1;
 80028ae:	705a      	strb	r2, [r3, #1]
            ignition_order[2] = 1;
 80028b0:	709a      	strb	r2, [r3, #2]
            ignition_order[3] = 1;
 80028b2:	70da      	strb	r2, [r3, #3]
    runtime.firing_interval_deg = (angle_t)720 / (angle_t)number_of_cylinders;
 80028b4:	4b44      	ldr	r3, [pc, #272]	@ (80029c8 <ignition_init+0x15c>)
 80028b6:	4a45      	ldr	r2, [pc, #276]	@ (80029cc <ignition_init+0x160>)
 80028b8:	621a      	str	r2, [r3, #32]
    for (size_t i = 0; i < FIRMWARE_IGNITION_OUTPUT_COUNT; i++)
 80028ba:	2400      	movs	r4, #0
 80028bc:	e056      	b.n	800296c <ignition_init+0x100>
            ignition_order[0] = 1;
 80028be:	4b41      	ldr	r3, [pc, #260]	@ (80029c4 <ignition_init+0x158>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
            ignition_order[1] = 2;
 80028c4:	2102      	movs	r1, #2
 80028c6:	7059      	strb	r1, [r3, #1]
            ignition_order[2] = 2;
 80028c8:	7099      	strb	r1, [r3, #2]
            ignition_order[3] = 1;
 80028ca:	70da      	strb	r2, [r3, #3]
            break;
 80028cc:	e7f2      	b.n	80028b4 <ignition_init+0x48>
            ignition_order[0] = 1;
 80028ce:	4b3d      	ldr	r3, [pc, #244]	@ (80029c4 <ignition_init+0x158>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
            ignition_order[1] = 3;
 80028d4:	2203      	movs	r2, #3
 80028d6:	705a      	strb	r2, [r3, #1]
            ignition_order[2] = 4;
 80028d8:	2204      	movs	r2, #4
 80028da:	709a      	strb	r2, [r3, #2]
            ignition_order[3] = 2;
 80028dc:	2202      	movs	r2, #2
 80028de:	70da      	strb	r2, [r3, #3]
            break;
 80028e0:	e7e8      	b.n	80028b4 <ignition_init+0x48>
            log_error("ignition init failed. unkown mode.");
 80028e2:	483b      	ldr	r0, [pc, #236]	@ (80029d0 <ignition_init+0x164>)
 80028e4:	f7ff fc26 	bl	8002134 <log_error>
            return;
 80028e8:	e7cd      	b.n	8002886 <ignition_init+0x1a>
        number_of_cylinders = 6;
 80028ea:	4b35      	ldr	r3, [pc, #212]	@ (80029c0 <ignition_init+0x154>)
 80028ec:	2206      	movs	r2, #6
 80028ee:	701a      	strb	r2, [r3, #0]
        switch (config.ignition_mode)
 80028f0:	4b30      	ldr	r3, [pc, #192]	@ (80029b4 <ignition_init+0x148>)
 80028f2:	f893 32a1 	ldrb.w	r3, [r3, #673]	@ 0x2a1
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d017      	beq.n	800292a <ignition_init+0xbe>
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d00a      	beq.n	8002914 <ignition_init+0xa8>
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d124      	bne.n	800294c <ignition_init+0xe0>
            ignition_order[0] = 1;
 8002902:	4b30      	ldr	r3, [pc, #192]	@ (80029c4 <ignition_init+0x158>)
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
            ignition_order[1] = 1;
 8002908:	705a      	strb	r2, [r3, #1]
            ignition_order[2] = 1;
 800290a:	709a      	strb	r2, [r3, #2]
            ignition_order[3] = 1;
 800290c:	70da      	strb	r2, [r3, #3]
            ignition_order[4] = 1;
 800290e:	711a      	strb	r2, [r3, #4]
            ignition_order[5] = 1;
 8002910:	715a      	strb	r2, [r3, #5]
            break;
 8002912:	e7b5      	b.n	8002880 <ignition_init+0x14>
            ignition_order[0] = 1;
 8002914:	4b2b      	ldr	r3, [pc, #172]	@ (80029c4 <ignition_init+0x158>)
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
            ignition_order[1] = 2;
 800291a:	2102      	movs	r1, #2
 800291c:	7059      	strb	r1, [r3, #1]
            ignition_order[2] = 3;
 800291e:	2003      	movs	r0, #3
 8002920:	7098      	strb	r0, [r3, #2]
            ignition_order[3] = 3;
 8002922:	70d8      	strb	r0, [r3, #3]
            ignition_order[4] = 2;
 8002924:	7119      	strb	r1, [r3, #4]
            ignition_order[5] = 1;
 8002926:	715a      	strb	r2, [r3, #5]
            break;
 8002928:	e7aa      	b.n	8002880 <ignition_init+0x14>
            config.ignition_mode = IM_WASTED_SPARK;
 800292a:	2203      	movs	r2, #3
 800292c:	4b21      	ldr	r3, [pc, #132]	@ (80029b4 <ignition_init+0x148>)
 800292e:	f883 22a1 	strb.w	r2, [r3, #673]	@ 0x2a1
            ignition_order[0] = 1;
 8002932:	4b24      	ldr	r3, [pc, #144]	@ (80029c4 <ignition_init+0x158>)
 8002934:	2101      	movs	r1, #1
 8002936:	7019      	strb	r1, [r3, #0]
            ignition_order[1] = 2;
 8002938:	2002      	movs	r0, #2
 800293a:	7058      	strb	r0, [r3, #1]
            ignition_order[2] = 3;
 800293c:	709a      	strb	r2, [r3, #2]
            ignition_order[3] = 3;
 800293e:	70da      	strb	r2, [r3, #3]
            ignition_order[4] = 2;
 8002940:	7118      	strb	r0, [r3, #4]
            ignition_order[5] = 1;
 8002942:	7159      	strb	r1, [r3, #5]
            log_warning("Coil on plug igntion not possible with 6 cylinders. Defaulted to wasted spark");
 8002944:	4823      	ldr	r0, [pc, #140]	@ (80029d4 <ignition_init+0x168>)
 8002946:	f7ff fc13 	bl	8002170 <log_warning>
            break;
 800294a:	e799      	b.n	8002880 <ignition_init+0x14>
            log_error("ignition init failed. unkown mode.");
 800294c:	4820      	ldr	r0, [pc, #128]	@ (80029d0 <ignition_init+0x164>)
 800294e:	f7ff fbf1 	bl	8002134 <log_error>
            return;
 8002952:	e798      	b.n	8002886 <ignition_init+0x1a>
        ignition_coil_state[i] = HAL_GPIO_ReadPin(ignition_outputs[i].gpio, ignition_outputs[i].pin);
 8002954:	4b16      	ldr	r3, [pc, #88]	@ (80029b0 <ignition_init+0x144>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800295c:	8891      	ldrh	r1, [r2, #4]
 800295e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8002962:	f002 fa27 	bl	8004db4 <HAL_GPIO_ReadPin>
 8002966:	4b1c      	ldr	r3, [pc, #112]	@ (80029d8 <ignition_init+0x16c>)
 8002968:	5518      	strb	r0, [r3, r4]
    for (size_t i = 0; i < FIRMWARE_IGNITION_OUTPUT_COUNT; i++)
 800296a:	3401      	adds	r4, #1
 800296c:	2c03      	cmp	r4, #3
 800296e:	d9f1      	bls.n	8002954 <ignition_init+0xe8>
    for (size_t i = 0; i < FIRMWARE_IGNITION_OUTPUT_COUNT; i++)
 8002970:	2400      	movs	r4, #0
 8002972:	e00a      	b.n	800298a <ignition_init+0x11e>
        HAL_GPIO_WritePin(ignition_outputs[i].gpio, ignition_outputs[i].pin, GPIO_PIN_RESET);
 8002974:	4b0e      	ldr	r3, [pc, #56]	@ (80029b0 <ignition_init+0x144>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
 800297c:	2200      	movs	r2, #0
 800297e:	8889      	ldrh	r1, [r1, #4]
 8002980:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8002984:	f002 fa1d 	bl	8004dc2 <HAL_GPIO_WritePin>
    for (size_t i = 0; i < FIRMWARE_IGNITION_OUTPUT_COUNT; i++)
 8002988:	3401      	adds	r4, #1
 800298a:	2c03      	cmp	r4, #3
 800298c:	d9f2      	bls.n	8002974 <ignition_init+0x108>
    if (config.multi_spark_enabled && !IS_IN_RANGE(config.multi_spark_number_of_sparks, 0, IGNITION_MULTI_SPARK_MAX_SPARKS))
 800298e:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <ignition_init+0x148>)
 8002990:	f893 32a2 	ldrb.w	r3, [r3, #674]	@ 0x2a2
 8002994:	2b00      	cmp	r3, #0
 8002996:	f43f af76 	beq.w	8002886 <ignition_init+0x1a>
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <ignition_init+0x148>)
 800299c:	f893 32a3 	ldrb.w	r3, [r3, #675]	@ 0x2a3
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	f67f af70 	bls.w	8002886 <ignition_init+0x1a>
        log_warning("Multi spark is enabled but number of sparks are 0.");
 80029a6:	480d      	ldr	r0, [pc, #52]	@ (80029dc <ignition_init+0x170>)
 80029a8:	f7ff fbe2 	bl	8002170 <log_warning>
 80029ac:	e76b      	b.n	8002886 <ignition_init+0x1a>
 80029ae:	bf00      	nop
 80029b0:	20006728 	.word	0x20006728
 80029b4:	20002340 	.word	0x20002340
 80029b8:	0800bd28 	.word	0x0800bd28
 80029bc:	0800bc8c 	.word	0x0800bc8c
 80029c0:	2000671a 	.word	0x2000671a
 80029c4:	2000671c 	.word	0x2000671c
 80029c8:	200012ec 	.word	0x200012ec
 80029cc:	43340000 	.word	0x43340000
 80029d0:	0800bcb4 	.word	0x0800bcb4
 80029d4:	0800bcd8 	.word	0x0800bcd8
 80029d8:	20006724 	.word	0x20006724
 80029dc:	0800bd54 	.word	0x0800bd54

080029e0 <ignition_get_advance>:
percent_t ignition_get_coil_duty_cycle()
{
}

angle_t ignition_get_advance()
{
 80029e0:	b508      	push	{r3, lr}
 80029e2:	ed2d 8b02 	vpush	{d8}
    angle_t final_advance = IGNITION_ADVANCE_FAIL_SAFE;
    if (runtime.spinning_state != SS_RUNNING)
 80029e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a20 <ignition_get_advance+0x40>)
 80029e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d005      	beq.n	80029fc <ignition_get_advance+0x1c>
    {
        return config.cranking_advance;
 80029f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a24 <ignition_get_advance+0x44>)
 80029f2:	ed93 0a81 	vldr	s0, [r3, #516]	@ 0x204
    final_advance += table_2d_get_value(&config.ign_table_1, rpm, map); // expand and allow the use of table2 in the future

    /* Here we can apply all kinds of correction to the table */

    return final_advance;
 80029f6:	ecbd 8b02 	vpop	{d8}
 80029fa:	bd08      	pop	{r3, pc}
    rpm_t rpm = crankshaft_get_rpm();
 80029fc:	f006 fc90 	bl	8009320 <crankshaft_get_rpm>
 8002a00:	eeb0 8a40 	vmov.f32	s16, s0
    pressure_t map = sensor_map_get();
 8002a04:	f001 f956 	bl	8003cb4 <sensor_map_get>
 8002a08:	eef0 0a40 	vmov.f32	s1, s0
    final_advance += table_2d_get_value(&config.ign_table_1, rpm, map); // expand and allow the use of table2 in the future
 8002a0c:	eeb0 0a48 	vmov.f32	s0, s16
 8002a10:	4805      	ldr	r0, [pc, #20]	@ (8002a28 <ignition_get_advance+0x48>)
 8002a12:	f005 f86d 	bl	8007af0 <table_2d_get_value>
 8002a16:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8002a1a:	ee30 0a27 	vadd.f32	s0, s0, s15
    return final_advance;
 8002a1e:	e7ea      	b.n	80029f6 <ignition_get_advance+0x16>
 8002a20:	200012ec 	.word	0x200012ec
 8002a24:	20002340 	.word	0x20002340
 8002a28:	20001c40 	.word	0x20001c40

08002a2c <ignition_trigger_event_handle>:
    if (config.ignition_mode == IM_NO_IGNITION)
 8002a2c:	4ba3      	ldr	r3, [pc, #652]	@ (8002cbc <ignition_trigger_event_handle+0x290>)
 8002a2e:	f893 32a1 	ldrb.w	r3, [r3, #673]	@ 0x2a1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8141 	beq.w	8002cba <ignition_trigger_event_handle+0x28e>
{
 8002a38:	b570      	push	{r4, r5, r6, lr}
 8002a3a:	ed2d 8b04 	vpush	{d8-d9}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	eef0 8a40 	vmov.f32	s17, s0
 8002a44:	eeb0 8a60 	vmov.f32	s16, s1
 8002a48:	4604      	mov	r4, r0
    if (runtime.firing_interval_deg == 0)
 8002a4a:	4b9d      	ldr	r3, [pc, #628]	@ (8002cc0 <ignition_trigger_event_handle+0x294>)
 8002a4c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a58:	d021      	beq.n	8002a9e <ignition_trigger_event_handle+0x72>
    if (!IS_IN_RANGE(config.ignition_dwell, IGNITION_MIN_DWELL_TIME_MS, IGNITION_MAX_DWELL_TIME_MS))
 8002a5a:	4b98      	ldr	r3, [pc, #608]	@ (8002cbc <ignition_trigger_event_handle+0x290>)
 8002a5c:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 8002a60:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6c:	db06      	blt.n	8002a7c <ignition_trigger_event_handle+0x50>
 8002a6e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7a:	d920      	bls.n	8002abe <ignition_trigger_event_handle+0x92>
        config.ignition_dwell = CLAMP(config.ignition_dwell, IGNITION_MIN_DWELL_TIME_MS, IGNITION_MAX_DWELL_TIME_MS);
 8002a7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a88:	d40d      	bmi.n	8002aa6 <ignition_trigger_event_handle+0x7a>
 8002a8a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a96:	dd08      	ble.n	8002aaa <ignition_trigger_event_handle+0x7e>
 8002a98:	eef0 7a47 	vmov.f32	s15, s14
 8002a9c:	e005      	b.n	8002aaa <ignition_trigger_event_handle+0x7e>
        log_error("ignition not initialized.");
 8002a9e:	4889      	ldr	r0, [pc, #548]	@ (8002cc4 <ignition_trigger_event_handle+0x298>)
 8002aa0:	f7ff fb48 	bl	8002134 <log_error>
        return;
 8002aa4:	e007      	b.n	8002ab6 <ignition_trigger_event_handle+0x8a>
        config.ignition_dwell = CLAMP(config.ignition_dwell, IGNITION_MIN_DWELL_TIME_MS, IGNITION_MAX_DWELL_TIME_MS);
 8002aa6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002aaa:	4b84      	ldr	r3, [pc, #528]	@ (8002cbc <ignition_trigger_event_handle+0x290>)
 8002aac:	edc3 7a83 	vstr	s15, [r3, #524]	@ 0x20c
        log_error("ignition dwell out of bounds.");
 8002ab0:	4885      	ldr	r0, [pc, #532]	@ (8002cc8 <ignition_trigger_event_handle+0x29c>)
 8002ab2:	f7ff fb3f 	bl	8002134 <log_error>
}
 8002ab6:	b004      	add	sp, #16
 8002ab8:	ecbd 8b04 	vpop	{d8-d9}
 8002abc:	bd70      	pop	{r4, r5, r6, pc}
    spark_advance = ignition_get_advance();
 8002abe:	f7ff ff8f 	bl	80029e0 <ignition_get_advance>
    runtime.ignition_advance_deg = spark_advance;
 8002ac2:	4b7f      	ldr	r3, [pc, #508]	@ (8002cc0 <ignition_trigger_event_handle+0x294>)
 8002ac4:	ed83 0a09 	vstr	s0, [r3, #36]	@ 0x24
    spark_advance = CLAMP(spark_advance, IGNITION_MIN_ADVANCE, IGNITION_MAX_ADVANCE);
 8002ac8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad0:	d409      	bmi.n	8002ae6 <ignition_trigger_event_handle+0xba>
 8002ad2:	eddf 7a7e 	vldr	s15, [pc, #504]	@ 8002ccc <ignition_trigger_event_handle+0x2a0>
 8002ad6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ade:	dd04      	ble.n	8002aea <ignition_trigger_event_handle+0xbe>
 8002ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae4:	e001      	b.n	8002aea <ignition_trigger_event_handle+0xbe>
 8002ae6:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 8002cd0 <ignition_trigger_event_handle+0x2a4>
    runtime.dwell_actual = config.ignition_dwell;
 8002aea:	4b74      	ldr	r3, [pc, #464]	@ (8002cbc <ignition_trigger_event_handle+0x290>)
 8002aec:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 8002af0:	4b73      	ldr	r3, [pc, #460]	@ (8002cc0 <ignition_trigger_event_handle+0x294>)
 8002af2:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
    uint8_t phase = (uint8_t)(crankshaft_angle / runtime.firing_interval_deg);
 8002af6:	ed93 7a08 	vldr	s14, [r3, #32]
 8002afa:	eec8 6a87 	vdiv.f32	s13, s17, s14
 8002afe:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002b02:	edcd 6a01 	vstr	s13, [sp, #4]
 8002b06:	f89d 3004 	ldrb.w	r3, [sp, #4]
    volatile angle_t next_spark_angle = phase * runtime.firing_interval_deg - spark_advance + runtime.firing_interval_deg;
 8002b0a:	ee06 3a90 	vmov	s13, r3
 8002b0e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002b12:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002b16:	ee76 6ac0 	vsub.f32	s13, s13, s0
 8002b1a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002b1e:	ed8d 7a03 	vstr	s14, [sp, #12]
    volatile angle_t next_dwell_angle = next_spark_angle - (float)config.ignition_dwell * (float)1000 * degrees_per_microsecond(rpm);
 8002b22:	ed9d 7a03 	vldr	s14, [sp, #12]
 8002b26:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8002cd4 <ignition_trigger_event_handle+0x2a8>
 8002b2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 * @brief Function to calculate the degrees the engine turns in one microsecond.
 * @note Returns 0 if rpm is 0.
 */
static inline angle_t degrees_per_microsecond(rpm_t rpm)
{
    if (rpm == 0)
 8002b2e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b36:	f000 80ab 	beq.w	8002c90 <ignition_trigger_event_handle+0x264>
    {
        return 0.0f;
    }
    return (angle_t)(rpm * 360.0f) / (60.0f * 1e6f);
 8002b3a:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8002cd8 <ignition_trigger_event_handle+0x2ac>
 8002b3e:	ee68 6a26 	vmul.f32	s13, s16, s13
 8002b42:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8002cdc <ignition_trigger_event_handle+0x2b0>
 8002b46:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 8002b4a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b52:	edcd 7a02 	vstr	s15, [sp, #8]
    next_firing_cylinders[0] = ignition_order[phase] - 1;
 8002b56:	4862      	ldr	r0, [pc, #392]	@ (8002ce0 <ignition_trigger_event_handle+0x2b4>)
 8002b58:	5cc2      	ldrb	r2, [r0, r3]
 8002b5a:	3a01      	subs	r2, #1
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	4961      	ldr	r1, [pc, #388]	@ (8002ce4 <ignition_trigger_event_handle+0x2b8>)
 8002b60:	700a      	strb	r2, [r1, #0]
    next_firing_cylinders[1] = ignition_order[phase] - 1;
 8002b62:	704a      	strb	r2, [r1, #1]
        next_firing_cylinders[1] = ignition_order[phase + 2] - 1;
 8002b64:	3302      	adds	r3, #2
 8002b66:	5cc3      	ldrb	r3, [r0, r3]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	704b      	strb	r3, [r1, #1]
    bool is_synced = get_bit(runtime.status, STATUS_TRIGGER1_SYNCED);
 8002b6c:	4b54      	ldr	r3, [pc, #336]	@ (8002cc0 <ignition_trigger_event_handle+0x294>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
    if (is_synced && (next_dwell_angle - crankshaft_angle) < 10 && !spark_is_in_progress && (next_dwell_angle - crankshaft_angle) > 0)
 8002b70:	f013 0f08 	tst.w	r3, #8
 8002b74:	d09f      	beq.n	8002ab6 <ignition_trigger_event_handle+0x8a>
 8002b76:	eddd 7a02 	vldr	s15, [sp, #8]
 8002b7a:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8002b7e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8a:	d594      	bpl.n	8002ab6 <ignition_trigger_event_handle+0x8a>
 8002b8c:	4b56      	ldr	r3, [pc, #344]	@ (8002ce8 <ignition_trigger_event_handle+0x2bc>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d190      	bne.n	8002ab6 <ignition_trigger_event_handle+0x8a>
 8002b94:	eddd 7a02 	vldr	s15, [sp, #8]
 8002b98:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8002b9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba4:	dd87      	ble.n	8002ab6 <ignition_trigger_event_handle+0x8a>
        time_us_t dwell_start_time_us = current_time_us + (time_us_t)((next_dwell_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 8002ba6:	eddd 7a02 	vldr	s15, [sp, #8]
 8002baa:	ee77 7ae8 	vsub.f32	s15, s15, s17
    if (rpm == 0)
 8002bae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb6:	d06e      	beq.n	8002c96 <ignition_trigger_event_handle+0x26a>
    return (time_us_t)60.0f * 1e6f / (rpm * 360.0f);
 8002bb8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002cd8 <ignition_trigger_event_handle+0x2ac>
 8002bbc:	ee28 7a07 	vmul.f32	s14, s16, s14
 8002bc0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002cdc <ignition_trigger_event_handle+0x2b0>
 8002bc4:	ee86 9a87 	vdiv.f32	s18, s13, s14
 8002bc8:	eebc 9ac9 	vcvt.u32.f32	s18, s18
 8002bcc:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 8002bd0:	ee67 7a89 	vmul.f32	s15, s15, s18
 8002bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bd8:	ee17 6a90 	vmov	r6, s15
 8002bdc:	4426      	add	r6, r4
        time_us_t spark_start_time_us = current_time_us + (time_us_t)((next_spark_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 8002bde:	eddd 7a03 	vldr	s15, [sp, #12]
 8002be2:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8002be6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8002bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bee:	ee17 5a90 	vmov	r5, s15
 8002bf2:	4425      	add	r5, r4
        scheduler_schedule_event_with_arg(dwell_start_time_us, ignition_coil_begin_charge, (void *)next_firing_cylinders);
 8002bf4:	4c3b      	ldr	r4, [pc, #236]	@ (8002ce4 <ignition_trigger_event_handle+0x2b8>)
 8002bf6:	4622      	mov	r2, r4
 8002bf8:	493c      	ldr	r1, [pc, #240]	@ (8002cec <ignition_trigger_event_handle+0x2c0>)
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	f006 fafc 	bl	80091f8 <scheduler_schedule_event_with_arg>
        scheduler_schedule_event_with_arg(spark_start_time_us, ignition_coil_fire_spark, (void *)next_firing_cylinders);
 8002c00:	4622      	mov	r2, r4
 8002c02:	493b      	ldr	r1, [pc, #236]	@ (8002cf0 <ignition_trigger_event_handle+0x2c4>)
 8002c04:	4628      	mov	r0, r5
 8002c06:	f006 faf7 	bl	80091f8 <scheduler_schedule_event_with_arg>
        if (!config.multi_spark_enabled)
 8002c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cbc <ignition_trigger_event_handle+0x290>)
 8002c0c:	f893 32a2 	ldrb.w	r3, [r3, #674]	@ 0x2a2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d043      	beq.n	8002c9c <ignition_trigger_event_handle+0x270>
        uint8_t number_of_scheduled_sparks = 1;
 8002c14:	2401      	movs	r4, #1
        while (number_of_scheduled_sparks < config.multi_spark_number_of_sparks)
 8002c16:	4b29      	ldr	r3, [pc, #164]	@ (8002cbc <ignition_trigger_event_handle+0x290>)
 8002c18:	f893 32a3 	ldrb.w	r3, [r3, #675]	@ 0x2a3
 8002c1c:	42a3      	cmp	r3, r4
 8002c1e:	d945      	bls.n	8002cac <ignition_trigger_event_handle+0x280>
            if (rpm > config.multi_spark_rpm_threshold)
 8002c20:	4b26      	ldr	r3, [pc, #152]	@ (8002cbc <ignition_trigger_event_handle+0x290>)
 8002c22:	edd3 7a84 	vldr	s15, [r3, #528]	@ 0x210
 8002c26:	eef4 7ac8 	vcmpe.f32	s15, s16
 8002c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2e:	d43d      	bmi.n	8002cac <ignition_trigger_event_handle+0x280>
            time_us_t duration_of_spark_and_dwell = (uint32_t)((float)number_of_scheduled_sparks * (config.multi_spark_rest_time_ms + config.ignition_dwell) * (float)1000);
 8002c30:	ee07 4a90 	vmov	s15, r4
 8002c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c38:	ed93 7a85 	vldr	s14, [r3, #532]	@ 0x214
 8002c3c:	edd3 6a83 	vldr	s13, [r3, #524]	@ 0x20c
 8002c40:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c48:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002cd4 <ignition_trigger_event_handle+0x2a8>
 8002c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            if (duration_of_spark_and_dwell >= config.multi_spark_max_trailing_angle * microseconds_per_degree(rpm))
 8002c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c58:	ed93 7a86 	vldr	s14, [r3, #536]	@ 0x218
 8002c5c:	ee29 7a07 	vmul.f32	s14, s18, s14
 8002c60:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c68:	da20      	bge.n	8002cac <ignition_trigger_event_handle+0x280>
            dwell_start_time_us += duration_of_spark_and_dwell;
 8002c6a:	ee17 3a90 	vmov	r3, s15
 8002c6e:	441e      	add	r6, r3
            spark_start_time_us += duration_of_spark_and_dwell;
 8002c70:	441d      	add	r5, r3
            if (!scheduler_schedule_event_with_arg(spark_start_time_us, ignition_coil_fire_spark, (void *)next_firing_cylinders))
 8002c72:	4a1c      	ldr	r2, [pc, #112]	@ (8002ce4 <ignition_trigger_event_handle+0x2b8>)
 8002c74:	491e      	ldr	r1, [pc, #120]	@ (8002cf0 <ignition_trigger_event_handle+0x2c4>)
 8002c76:	4628      	mov	r0, r5
 8002c78:	f006 fabe 	bl	80091f8 <scheduler_schedule_event_with_arg>
 8002c7c:	b198      	cbz	r0, 8002ca6 <ignition_trigger_event_handle+0x27a>
            if (!scheduler_schedule_event_with_arg(dwell_start_time_us, ignition_coil_begin_charge, (void *)next_firing_cylinders))
 8002c7e:	4a19      	ldr	r2, [pc, #100]	@ (8002ce4 <ignition_trigger_event_handle+0x2b8>)
 8002c80:	491a      	ldr	r1, [pc, #104]	@ (8002cec <ignition_trigger_event_handle+0x2c0>)
 8002c82:	4630      	mov	r0, r6
 8002c84:	f006 fab8 	bl	80091f8 <scheduler_schedule_event_with_arg>
 8002c88:	b180      	cbz	r0, 8002cac <ignition_trigger_event_handle+0x280>
            number_of_scheduled_sparks++;
 8002c8a:	3401      	adds	r4, #1
 8002c8c:	b2e4      	uxtb	r4, r4
 8002c8e:	e7c2      	b.n	8002c16 <ignition_trigger_event_handle+0x1ea>
        return 0.0f;
 8002c90:	ed9f 6a0f 	vldr	s12, [pc, #60]	@ 8002cd0 <ignition_trigger_event_handle+0x2a4>
 8002c94:	e759      	b.n	8002b4a <ignition_trigger_event_handle+0x11e>
        return 0;
 8002c96:	ed9f 9a17 	vldr	s18, [pc, #92]	@ 8002cf4 <ignition_trigger_event_handle+0x2c8>
 8002c9a:	e797      	b.n	8002bcc <ignition_trigger_event_handle+0x1a0>
            runtime.multi_spark_actual_spark_count = number_of_scheduled_sparks;
 8002c9c:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <ignition_trigger_event_handle+0x294>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
            return;
 8002ca4:	e707      	b.n	8002ab6 <ignition_trigger_event_handle+0x8a>
                ignition_coil_fire_spark((void *)next_firing_cylinders);
 8002ca6:	480f      	ldr	r0, [pc, #60]	@ (8002ce4 <ignition_trigger_event_handle+0x2b8>)
 8002ca8:	f7ff fdac 	bl	8002804 <ignition_coil_fire_spark>
        spark_is_in_progress = true;
 8002cac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce8 <ignition_trigger_event_handle+0x2bc>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
        runtime.multi_spark_actual_spark_count = number_of_scheduled_sparks;
 8002cb2:	4b03      	ldr	r3, [pc, #12]	@ (8002cc0 <ignition_trigger_event_handle+0x294>)
 8002cb4:	f883 4052 	strb.w	r4, [r3, #82]	@ 0x52
 8002cb8:	e6fd      	b.n	8002ab6 <ignition_trigger_event_handle+0x8a>
 8002cba:	4770      	bx	lr
 8002cbc:	20002340 	.word	0x20002340
 8002cc0:	200012ec 	.word	0x200012ec
 8002cc4:	0800bd88 	.word	0x0800bd88
 8002cc8:	0800bda4 	.word	0x0800bda4
 8002ccc:	42200000 	.word	0x42200000
 8002cd0:	00000000 	.word	0x00000000
 8002cd4:	447a0000 	.word	0x447a0000
 8002cd8:	43b40000 	.word	0x43b40000
 8002cdc:	4c64e1c0 	.word	0x4c64e1c0
 8002ce0:	2000671c 	.word	0x2000671c
 8002ce4:	20006718 	.word	0x20006718
 8002ce8:	2000671b 	.word	0x2000671b
 8002cec:	080027a5 	.word	0x080027a5
 8002cf0:	08002805 	.word	0x08002805
 8002cf4:	00000000 	.word	0x00000000

08002cf8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cf8:	f100 0308 	add.w	r3, r0, #8
 8002cfc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8002d02:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d04:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d06:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d0c:	4770      	bx	lr

08002d0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d12:	4770      	bx	lr

08002d14 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d14:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d16:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d1c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d1e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d20:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002d22:	6803      	ldr	r3, [r0, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	6003      	str	r3, [r0, #0]
}
 8002d28:	4770      	bx	lr

08002d2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d2a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d2c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d2e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002d32:	d011      	beq.n	8002d58 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d34:	f100 0308 	add.w	r3, r0, #8
 8002d38:	461c      	mov	r4, r3
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	42aa      	cmp	r2, r5
 8002d40:	d9fa      	bls.n	8002d38 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d42:	6863      	ldr	r3, [r4, #4]
 8002d44:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d46:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d48:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d4a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d4c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002d4e:	6803      	ldr	r3, [r0, #0]
 8002d50:	3301      	adds	r3, #1
 8002d52:	6003      	str	r3, [r0, #0]
}
 8002d54:	bc30      	pop	{r4, r5}
 8002d56:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d58:	6904      	ldr	r4, [r0, #16]
 8002d5a:	e7f2      	b.n	8002d42 <vListInsert+0x18>

08002d5c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d5c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d5e:	6841      	ldr	r1, [r0, #4]
 8002d60:	6882      	ldr	r2, [r0, #8]
 8002d62:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d64:	6841      	ldr	r1, [r0, #4]
 8002d66:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	4282      	cmp	r2, r0
 8002d6c:	d006      	beq.n	8002d7c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d6e:	2200      	movs	r2, #0
 8002d70:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	3a01      	subs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d78:	6818      	ldr	r0, [r3, #0]
}
 8002d7a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d7c:	6882      	ldr	r2, [r0, #8]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	e7f5      	b.n	8002d6e <uxListRemove+0x12>
	...

08002d84 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  __NOP();
 8002d84:	bf00      	nop
  if (GPIO_Pin == GPIO_PIN_9)
 8002d86:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002d8a:	d000      	beq.n	8002d8e <HAL_GPIO_EXTI_Callback+0xa>
 8002d8c:	4770      	bx	lr
{
 8002d8e:	b508      	push	{r3, lr}
  {
    trigger_tooth_handle(&trigger1);
 8002d90:	4801      	ldr	r0, [pc, #4]	@ (8002d98 <HAL_GPIO_EXTI_Callback+0x14>)
 8002d92:	f006 fad1 	bl	8009338 <trigger_tooth_handle>
  }

  
}
 8002d96:	bd08      	pop	{r3, pc}
 8002d98:	2000124c 	.word	0x2000124c

08002d9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 8002d9e:	6802      	ldr	r2, [r0, #0]
 8002da0:	4b03      	ldr	r3, [pc, #12]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d000      	beq.n	8002da8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002da6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002da8:	f001 f8f0 	bl	8003f8c <HAL_IncTick>
}
 8002dac:	e7fb      	b.n	8002da6 <HAL_TIM_PeriodElapsedCallback+0xa>
 8002dae:	bf00      	nop
 8002db0:	40014800 	.word	0x40014800

08002db4 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002db4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002db6:	e7fe      	b.n	8002db6 <Error_Handler+0x2>

08002db8 <SystemClock_Config>:
{
 8002db8:	b510      	push	{r4, lr}
 8002dba:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dbc:	ac08      	add	r4, sp, #32
 8002dbe:	2230      	movs	r2, #48	@ 0x30
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f007 ff60 	bl	800ac88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9303      	str	r3, [sp, #12]
 8002dcc:	9304      	str	r3, [sp, #16]
 8002dce:	9305      	str	r3, [sp, #20]
 8002dd0:	9306      	str	r3, [sp, #24]
 8002dd2:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	4a21      	ldr	r2, [pc, #132]	@ (8002e5c <SystemClock_Config+0xa4>)
 8002dd8:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002dda:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002dde:	6411      	str	r1, [r2, #64]	@ 0x40
 8002de0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002de2:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8002de6:	9201      	str	r2, [sp, #4]
 8002de8:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dea:	9302      	str	r3, [sp, #8]
 8002dec:	4a1c      	ldr	r2, [pc, #112]	@ (8002e60 <SystemClock_Config+0xa8>)
 8002dee:	6813      	ldr	r3, [r2, #0]
 8002df0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	6813      	ldr	r3, [r2, #0]
 8002dfc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002e00:	9302      	str	r3, [sp, #8]
 8002e02:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e04:	2301      	movs	r3, #1
 8002e06:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e0c:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e16:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002e18:	2319      	movs	r3, #25
 8002e1a:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e1c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002e20:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002e22:	2304      	movs	r3, #4
 8002e24:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002e26:	2307      	movs	r3, #7
 8002e28:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f002 ff22 	bl	8005c74 <HAL_RCC_OscConfig>
 8002e30:	b978      	cbnz	r0, 8002e52 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e32:	230f      	movs	r3, #15
 8002e34:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e36:	2102      	movs	r1, #2
 8002e38:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e42:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e44:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e46:	a803      	add	r0, sp, #12
 8002e48:	f003 f964 	bl	8006114 <HAL_RCC_ClockConfig>
 8002e4c:	b918      	cbnz	r0, 8002e56 <SystemClock_Config+0x9e>
}
 8002e4e:	b014      	add	sp, #80	@ 0x50
 8002e50:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002e52:	f7ff ffaf 	bl	8002db4 <Error_Handler>
    Error_Handler();
 8002e56:	f7ff ffad 	bl	8002db4 <Error_Handler>
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40007000 	.word	0x40007000

08002e64 <main>:
{
 8002e64:	b508      	push	{r3, lr}
  HAL_Init();
 8002e66:	f001 f877 	bl	8003f58 <HAL_Init>
  SystemClock_Config();
 8002e6a:	f7ff ffa5 	bl	8002db8 <SystemClock_Config>
  MX_GPIO_Init();
 8002e6e:	f7ff faab 	bl	80023c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e72:	f7ff f851 	bl	8001f18 <MX_DMA_Init>
  MX_TIM3_Init();
 8002e76:	f005 fdfd 	bl	8008a74 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002e7a:	f7fd fe11 	bl	8000aa0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002e7e:	f005 fd95 	bl	80089ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8002e82:	f005 fca5 	bl	80087d0 <MX_TIM2_Init>
  MX_CRC_Init();
 8002e86:	f7fe fde9 	bl	8001a5c <MX_CRC_Init>
  MX_I2C1_Init();
 8002e8a:	f7ff fc35 	bl	80026f8 <MX_I2C1_Init>
  osKernelInitialize();
 8002e8e:	f7fd ffe9 	bl	8000e64 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002e92:	f7ff fa4d 	bl	8002330 <MX_FREERTOS_Init>
  osKernelStart();
 8002e96:	f7fd fff7 	bl	8000e88 <osKernelStart>
  while (1)
 8002e9a:	e7fe      	b.n	8002e9a <main+0x36>

08002e9c <pid_init>:
#include "pid.h"

void pid_init(pid_t *pid)
{
    /* Clearing controller variables */
    pid->integrator = 0.0f;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	6203      	str	r3, [r0, #32]
    pid->differentiator = 0.0f;
 8002ea0:	6243      	str	r3, [r0, #36]	@ 0x24
    pid->prev_error = 0.0f;
 8002ea2:	6283      	str	r3, [r0, #40]	@ 0x28
    pid->prev_input = 0.0f;
 8002ea4:	62c3      	str	r3, [r0, #44]	@ 0x2c

    pid->prev_controller_time_us = 0;
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	6302      	str	r2, [r0, #48]	@ 0x30
    pid->output = 0.0f;
 8002eaa:	6383      	str	r3, [r0, #56]	@ 0x38

    /**
     * @todo implement checks for the parameters
     */
    
}
 8002eac:	4770      	bx	lr

08002eae <pid_set_setpoint>:

void pid_set_setpoint(pid_t *pid, float setpoint)
{
    pid->setpoint = setpoint;
 8002eae:	ed80 0a0d 	vstr	s0, [r0, #52]	@ 0x34
}
 8002eb2:	4770      	bx	lr

08002eb4 <pid_compute>:

float pid_compute(pid_t *pid, time_us_t current_time_us, float input)
{
    /* Compute the time between the function calls to determine T */
    time_us_t T_us = current_time_us - pid->prev_controller_time_us;
 8002eb4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002eb6:	1acb      	subs	r3, r1, r3
    float T_sec = (float)T_us / (float)1e6f;
 8002eb8:	ee07 3a90 	vmov	s15, r3
 8002ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec0:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002fa8 <pid_compute+0xf4>
 8002ec4:	eec7 6a87 	vdiv.f32	s13, s15, s14

    /* Finding the error */
    float error = pid->setpoint - input;
 8002ec8:	ed90 6a0d 	vldr	s12, [r0, #52]	@ 0x34
 8002ecc:	ee36 6a40 	vsub.f32	s12, s12, s0

    /* Finding the P-term */
    float proportional = pid->Kp * error;
 8002ed0:	edd0 5a00 	vldr	s11, [r0]
 8002ed4:	ee65 5a86 	vmul.f32	s11, s11, s12

    /* Finding the integral term*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * T_sec *(error + pid->prev_error);
 8002ed8:	ed90 7a08 	vldr	s14, [r0, #32]
 8002edc:	edd0 7a01 	vldr	s15, [r0, #4]
 8002ee0:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8002ee4:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002ee8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002eec:	ed90 5a0a 	vldr	s10, [r0, #40]	@ 0x28
 8002ef0:	ee35 5a06 	vadd.f32	s10, s10, s12
 8002ef4:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002efc:	edc0 7a08 	vstr	s15, [r0, #32]

    /* Anti-windup - works by clamping the integrator */
    if (pid->integrator > pid->limit_integrator_max)
 8002f00:	ed90 7a07 	vldr	s14, [r0, #28]
 8002f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0c:	dd38      	ble.n	8002f80 <pid_compute+0xcc>
    {
        pid->integrator = pid->limit_integrator_max;
 8002f0e:	ed80 7a08 	vstr	s14, [r0, #32]

    /* Finding the derivative term @note has a low pass filter */
    /**
     * @note only derivative on input has been implemented for now
     */
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 8002f12:	edd0 7a02 	vldr	s15, [r0, #8]
 8002f16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f1a:	ed90 7a0b 	vldr	s14, [r0, #44]	@ 0x2c
 8002f1e:	ee30 7a47 	vsub.f32	s14, s0, s14
 8002f22:	ee67 7a87 	vmul.f32	s15, s15, s14
                          +(2.0f * pid->derivative_filter_tau - T_sec) * pid->differentiator)
 8002f26:	ed90 7a03 	vldr	s14, [r0, #12]
 8002f2a:	ee37 7a07 	vadd.f32	s14, s14, s14
 8002f2e:	ee37 5a66 	vsub.f32	s10, s14, s13
 8002f32:	edd0 4a09 	vldr	s9, [r0, #36]	@ 0x24
 8002f36:	ee25 5a24 	vmul.f32	s10, s10, s9
 8002f3a:	ee77 7a85 	vadd.f32	s15, s15, s10
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 8002f3e:	eef1 7a67 	vneg.f32	s15, s15
                          / (2.0f * pid->derivative_filter_tau + T_sec);
 8002f42:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002f46:	eec7 6a87 	vdiv.f32	s13, s15, s14
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 8002f4a:	edc0 6a09 	vstr	s13, [r0, #36]	@ 0x24

    /* Summing the terms to make the output */
    pid->output = proportional + pid->integrator + pid->differentiator;
 8002f4e:	edd0 7a08 	vldr	s15, [r0, #32]
 8002f52:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f5a:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38

    /* Clamp the output the the output bounds */
    if (pid->output > pid->limit_output_max)
 8002f5e:	ed90 7a05 	vldr	s14, [r0, #20]
 8002f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6a:	dd13      	ble.n	8002f94 <pid_compute+0xe0>
    {
        pid->output = pid->limit_output_max;
 8002f6c:	ed80 7a0e 	vstr	s14, [r0, #56]	@ 0x38
    {
        pid->output = pid->limit_output_min;
    }

    /* Save the variables for the next function call */
    pid->prev_error = error;
 8002f70:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
    pid->prev_input = input;
 8002f74:	ed80 0a0b 	vstr	s0, [r0, #44]	@ 0x2c
    pid->prev_controller_time_us = current_time_us;
 8002f78:	6301      	str	r1, [r0, #48]	@ 0x30
    
    return pid->output;
}
 8002f7a:	ed90 0a0e 	vldr	s0, [r0, #56]	@ 0x38
 8002f7e:	4770      	bx	lr
    else if (pid->integrator < pid->limit_integrator_min)
 8002f80:	ed90 7a06 	vldr	s14, [r0, #24]
 8002f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8c:	d5c1      	bpl.n	8002f12 <pid_compute+0x5e>
        pid->integrator = pid->limit_integrator_min;
 8002f8e:	ed80 7a08 	vstr	s14, [r0, #32]
 8002f92:	e7be      	b.n	8002f12 <pid_compute+0x5e>
    else if (pid->output < pid->limit_output_min)
 8002f94:	ed90 7a04 	vldr	s14, [r0, #16]
 8002f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa0:	d5e6      	bpl.n	8002f70 <pid_compute+0xbc>
        pid->output = pid->limit_output_min;
 8002fa2:	ed80 7a0e 	vstr	s14, [r0, #56]	@ 0x38
 8002fa6:	e7e3      	b.n	8002f70 <pid_compute+0xbc>
 8002fa8:	49742400 	.word	0x49742400

08002fac <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002fac:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe8 <prvTaskExitError+0x3c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d008      	beq.n	8002fce <prvTaskExitError+0x22>
 8002fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	e7fe      	b.n	8002fcc <prvTaskExitError+0x20>
 8002fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd2:	f383 8811 	msr	BASEPRI, r3
 8002fd6:	f3bf 8f6f 	isb	sy
 8002fda:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002fde:	9b01      	ldr	r3, [sp, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0fc      	beq.n	8002fde <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002fe4:	b002      	add	sp, #8
 8002fe6:	4770      	bx	lr
 8002fe8:	20000064 	.word	0x20000064

08002fec <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002fec:	4808      	ldr	r0, [pc, #32]	@ (8003010 <prvPortStartFirstTask+0x24>)
 8002fee:	6800      	ldr	r0, [r0, #0]
 8002ff0:	6800      	ldr	r0, [r0, #0]
 8002ff2:	f380 8808 	msr	MSP, r0
 8002ff6:	f04f 0000 	mov.w	r0, #0
 8002ffa:	f380 8814 	msr	CONTROL, r0
 8002ffe:	b662      	cpsie	i
 8003000:	b661      	cpsie	f
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	df00      	svc	0
 800300c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800300e:	0000      	.short	0x0000
 8003010:	e000ed08 	.word	0xe000ed08

08003014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003014:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003024 <vPortEnableVFP+0x10>
 8003018:	6801      	ldr	r1, [r0, #0]
 800301a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800301e:	6001      	str	r1, [r0, #0]
 8003020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003022:	0000      	.short	0x0000
 8003024:	e000ed88 	.word	0xe000ed88

08003028 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003028:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800302c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003030:	f021 0101 	bic.w	r1, r1, #1
 8003034:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <pxPortInitialiseStack+0x28>)
 800303a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800303e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003042:	f06f 0302 	mvn.w	r3, #2
 8003046:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800304a:	3844      	subs	r0, #68	@ 0x44
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	08002fad 	.word	0x08002fad
	...

08003060 <SVC_Handler>:
	__asm volatile (
 8003060:	4b07      	ldr	r3, [pc, #28]	@ (8003080 <pxCurrentTCBConst2>)
 8003062:	6819      	ldr	r1, [r3, #0]
 8003064:	6808      	ldr	r0, [r1, #0]
 8003066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800306a:	f380 8809 	msr	PSP, r0
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f04f 0000 	mov.w	r0, #0
 8003076:	f380 8811 	msr	BASEPRI, r0
 800307a:	4770      	bx	lr
 800307c:	f3af 8000 	nop.w

08003080 <pxCurrentTCBConst2>:
 8003080:	20006ccc 	.word	0x20006ccc

08003084 <vPortEnterCritical>:
 8003084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003094:	4a0b      	ldr	r2, [pc, #44]	@ (80030c4 <vPortEnterCritical+0x40>)
 8003096:	6813      	ldr	r3, [r2, #0]
 8003098:	3301      	adds	r3, #1
 800309a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800309c:	2b01      	cmp	r3, #1
 800309e:	d000      	beq.n	80030a2 <vPortEnterCritical+0x1e>
}
 80030a0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80030a6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80030aa:	f013 0fff 	tst.w	r3, #255	@ 0xff
 80030ae:	d0f7      	beq.n	80030a0 <vPortEnterCritical+0x1c>
 80030b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	e7fe      	b.n	80030c0 <vPortEnterCritical+0x3c>
 80030c2:	bf00      	nop
 80030c4:	20000064 	.word	0x20000064

080030c8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80030c8:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <vPortExitCritical+0x28>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	b943      	cbnz	r3, 80030e0 <vPortExitCritical+0x18>
 80030ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d2:	f383 8811 	msr	BASEPRI, r3
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	e7fe      	b.n	80030de <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80030e0:	3b01      	subs	r3, #1
 80030e2:	4a03      	ldr	r2, [pc, #12]	@ (80030f0 <vPortExitCritical+0x28>)
 80030e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80030e6:	b90b      	cbnz	r3, 80030ec <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030e8:	f383 8811 	msr	BASEPRI, r3
}
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20000064 	.word	0x20000064
	...

08003100 <PendSV_Handler>:
	__asm volatile
 8003100:	f3ef 8009 	mrs	r0, PSP
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	4b15      	ldr	r3, [pc, #84]	@ (8003160 <pxCurrentTCBConst>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	f01e 0f10 	tst.w	lr, #16
 8003110:	bf08      	it	eq
 8003112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311a:	6010      	str	r0, [r2, #0]
 800311c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003120:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003124:	f380 8811 	msr	BASEPRI, r0
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f005 f920 	bl	8008374 <vTaskSwitchContext>
 8003134:	f04f 0000 	mov.w	r0, #0
 8003138:	f380 8811 	msr	BASEPRI, r0
 800313c:	bc09      	pop	{r0, r3}
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	6808      	ldr	r0, [r1, #0]
 8003142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003146:	f01e 0f10 	tst.w	lr, #16
 800314a:	bf08      	it	eq
 800314c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003150:	f380 8809 	msr	PSP, r0
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	f3af 8000 	nop.w

08003160 <pxCurrentTCBConst>:
 8003160:	20006ccc 	.word	0x20006ccc

08003164 <xPortSysTickHandler>:
{
 8003164:	b508      	push	{r3, lr}
	__asm volatile
 8003166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800316a:	f383 8811 	msr	BASEPRI, r3
 800316e:	f3bf 8f6f 	isb	sy
 8003172:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003176:	f004 ffcf 	bl	8008118 <xTaskIncrementTick>
 800317a:	b128      	cbz	r0, 8003188 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800317c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003184:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8003188:	2300      	movs	r3, #0
 800318a:	f383 8811 	msr	BASEPRI, r3
}
 800318e:	bd08      	pop	{r3, pc}

08003190 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003190:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003194:	2300      	movs	r3, #0
 8003196:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003198:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800319a:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <vPortSetupTimerInterrupt+0x20>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4905      	ldr	r1, [pc, #20]	@ (80031b4 <vPortSetupTimerInterrupt+0x24>)
 80031a0:	fba1 1303 	umull	r1, r3, r1, r3
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	3b01      	subs	r3, #1
 80031a8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80031aa:	2307      	movs	r3, #7
 80031ac:	6113      	str	r3, [r2, #16]
}
 80031ae:	4770      	bx	lr
 80031b0:	20000070 	.word	0x20000070
 80031b4:	10624dd3 	.word	0x10624dd3

080031b8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80031b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80031bc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80031c0:	4b3d      	ldr	r3, [pc, #244]	@ (80032b8 <xPortStartScheduler+0x100>)
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d01c      	beq.n	8003200 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80031c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80031ca:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80031ce:	4b3b      	ldr	r3, [pc, #236]	@ (80032bc <xPortStartScheduler+0x104>)
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d01e      	beq.n	8003212 <xPortStartScheduler+0x5a>
{
 80031d4:	b530      	push	{r4, r5, lr}
 80031d6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031d8:	4b39      	ldr	r3, [pc, #228]	@ (80032c0 <xPortStartScheduler+0x108>)
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031e0:	22ff      	movs	r2, #255	@ 0xff
 80031e2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80031f0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80031f4:	4a33      	ldr	r2, [pc, #204]	@ (80032c4 <xPortStartScheduler+0x10c>)
 80031f6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031f8:	4b33      	ldr	r3, [pc, #204]	@ (80032c8 <xPortStartScheduler+0x110>)
 80031fa:	2207      	movs	r2, #7
 80031fc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031fe:	e01b      	b.n	8003238 <xPortStartScheduler+0x80>
	__asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003210:	e7fe      	b.n	8003210 <xPortStartScheduler+0x58>
 8003212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003222:	e7fe      	b.n	8003222 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8003224:	4a28      	ldr	r2, [pc, #160]	@ (80032c8 <xPortStartScheduler+0x110>)
 8003226:	6813      	ldr	r3, [r2, #0]
 8003228:	3b01      	subs	r3, #1
 800322a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800322c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003238:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800323c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003240:	d1f0      	bne.n	8003224 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003242:	4b21      	ldr	r3, [pc, #132]	@ (80032c8 <xPortStartScheduler+0x110>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d008      	beq.n	800325c <xPortStartScheduler+0xa4>
 800324a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	e7fe      	b.n	800325a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	4a1a      	ldr	r2, [pc, #104]	@ (80032c8 <xPortStartScheduler+0x110>)
 8003260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003262:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003266:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003268:	9b01      	ldr	r3, [sp, #4]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	4a14      	ldr	r2, [pc, #80]	@ (80032c0 <xPortStartScheduler+0x108>)
 800326e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003270:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8003274:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8003278:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800327c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003280:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8003284:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003288:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800328c:	f7ff ff80 	bl	8003190 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003290:	2500      	movs	r5, #0
 8003292:	4b0e      	ldr	r3, [pc, #56]	@ (80032cc <xPortStartScheduler+0x114>)
 8003294:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8003296:	f7ff febd 	bl	8003014 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800329a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800329e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80032a2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80032a6:	f7ff fea1 	bl	8002fec <prvPortStartFirstTask>
	vTaskSwitchContext();
 80032aa:	f005 f863 	bl	8008374 <vTaskSwitchContext>
	prvTaskExitError();
 80032ae:	f7ff fe7d 	bl	8002fac <prvTaskExitError>
}
 80032b2:	4628      	mov	r0, r5
 80032b4:	b003      	add	sp, #12
 80032b6:	bd30      	pop	{r4, r5, pc}
 80032b8:	410fc271 	.word	0x410fc271
 80032bc:	410fc270 	.word	0x410fc270
 80032c0:	e000e400 	.word	0xe000e400
 80032c4:	20006730 	.word	0x20006730
 80032c8:	2000672c 	.word	0x2000672c
 80032cc:	20000064 	.word	0x20000064

080032d0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80032d0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80032d4:	2b0f      	cmp	r3, #15
 80032d6:	d90e      	bls.n	80032f6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80032d8:	4a11      	ldr	r2, [pc, #68]	@ (8003320 <vPortValidateInterruptPriority+0x50>)
 80032da:	5c9a      	ldrb	r2, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80032dc:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <vPortValidateInterruptPriority+0x54>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d208      	bcs.n	80032f6 <vPortValidateInterruptPriority+0x26>
 80032e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	e7fe      	b.n	80032f4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80032f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80032fa:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80032fe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003302:	4a09      	ldr	r2, [pc, #36]	@ (8003328 <vPortValidateInterruptPriority+0x58>)
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	4293      	cmp	r3, r2
 8003308:	d908      	bls.n	800331c <vPortValidateInterruptPriority+0x4c>
 800330a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	e7fe      	b.n	800331a <vPortValidateInterruptPriority+0x4a>
	}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	e000e3f0 	.word	0xe000e3f0
 8003324:	20006730 	.word	0x20006730
 8003328:	2000672c 	.word	0x2000672c

0800332c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800332c:	b510      	push	{r4, lr}
 800332e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003330:	f7ff fea8 	bl	8003084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003334:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003336:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003338:	429a      	cmp	r2, r3
 800333a:	d004      	beq.n	8003346 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800333c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800333e:	f7ff fec3 	bl	80030c8 <vPortExitCritical>

	return xReturn;
}
 8003342:	4620      	mov	r0, r4
 8003344:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8003346:	2401      	movs	r4, #1
 8003348:	e7f9      	b.n	800333e <prvIsQueueFull+0x12>

0800334a <prvIsQueueEmpty>:
{
 800334a:	b510      	push	{r4, lr}
 800334c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800334e:	f7ff fe99 	bl	8003084 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003352:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003354:	b923      	cbnz	r3, 8003360 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8003356:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8003358:	f7ff feb6 	bl	80030c8 <vPortExitCritical>
}
 800335c:	4620      	mov	r0, r4
 800335e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8003360:	2400      	movs	r4, #0
 8003362:	e7f9      	b.n	8003358 <prvIsQueueEmpty+0xe>

08003364 <prvCopyDataToQueue>:
{
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	4604      	mov	r4, r0
 8003368:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800336a:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800336c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800336e:	b95a      	cbnz	r2, 8003388 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003370:	6803      	ldr	r3, [r0, #0]
 8003372:	b11b      	cbz	r3, 800337c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8003374:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003376:	3601      	adds	r6, #1
 8003378:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 800337a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800337c:	6880      	ldr	r0, [r0, #8]
 800337e:	f005 f925 	bl	80085cc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003382:	2300      	movs	r3, #0
 8003384:	60a3      	str	r3, [r4, #8]
 8003386:	e7f6      	b.n	8003376 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8003388:	b96d      	cbnz	r5, 80033a6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800338a:	6840      	ldr	r0, [r0, #4]
 800338c:	f007 fcb0 	bl	800acf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003390:	6863      	ldr	r3, [r4, #4]
 8003392:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003394:	4413      	add	r3, r2
 8003396:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003398:	68a2      	ldr	r2, [r4, #8]
 800339a:	4293      	cmp	r3, r2
 800339c:	d319      	bcc.n	80033d2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80033a2:	4628      	mov	r0, r5
 80033a4:	e7e7      	b.n	8003376 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033a6:	68c0      	ldr	r0, [r0, #12]
 80033a8:	f007 fca2 	bl	800acf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033ac:	68e3      	ldr	r3, [r4, #12]
 80033ae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80033b0:	4251      	negs	r1, r2
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033b6:	6822      	ldr	r2, [r4, #0]
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d202      	bcs.n	80033c2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033bc:	68a3      	ldr	r3, [r4, #8]
 80033be:	440b      	add	r3, r1
 80033c0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80033c2:	2d02      	cmp	r5, #2
 80033c4:	d001      	beq.n	80033ca <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80033c6:	2000      	movs	r0, #0
 80033c8:	e7d5      	b.n	8003376 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033ca:	b126      	cbz	r6, 80033d6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80033cc:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80033ce:	2000      	movs	r0, #0
 80033d0:	e7d1      	b.n	8003376 <prvCopyDataToQueue+0x12>
 80033d2:	4628      	mov	r0, r5
 80033d4:	e7cf      	b.n	8003376 <prvCopyDataToQueue+0x12>
 80033d6:	2000      	movs	r0, #0
 80033d8:	e7cd      	b.n	8003376 <prvCopyDataToQueue+0x12>

080033da <prvCopyDataFromQueue>:
{
 80033da:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033dc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80033de:	b16a      	cbz	r2, 80033fc <prvCopyDataFromQueue+0x22>
{
 80033e0:	b510      	push	{r4, lr}
 80033e2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033e4:	68d9      	ldr	r1, [r3, #12]
 80033e6:	4411      	add	r1, r2
 80033e8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033ea:	689c      	ldr	r4, [r3, #8]
 80033ec:	42a1      	cmp	r1, r4
 80033ee:	d301      	bcc.n	80033f4 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033f0:	6819      	ldr	r1, [r3, #0]
 80033f2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033f4:	68d9      	ldr	r1, [r3, #12]
 80033f6:	f007 fc7b 	bl	800acf0 <memcpy>
}
 80033fa:	bd10      	pop	{r4, pc}
 80033fc:	4770      	bx	lr

080033fe <prvUnlockQueue>:
{
 80033fe:	b538      	push	{r3, r4, r5, lr}
 8003400:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8003402:	f7ff fe3f 	bl	8003084 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003406:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800340a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800340c:	e001      	b.n	8003412 <prvUnlockQueue+0x14>
			--cTxLock;
 800340e:	3c01      	subs	r4, #1
 8003410:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003412:	2c00      	cmp	r4, #0
 8003414:	dd0a      	ble.n	800342c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003416:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003418:	b143      	cbz	r3, 800342c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800341a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800341e:	f005 f829 	bl	8008474 <xTaskRemoveFromEventList>
 8003422:	2800      	cmp	r0, #0
 8003424:	d0f3      	beq.n	800340e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8003426:	f005 f8bb 	bl	80085a0 <vTaskMissedYield>
 800342a:	e7f0      	b.n	800340e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800342c:	23ff      	movs	r3, #255	@ 0xff
 800342e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8003432:	f7ff fe49 	bl	80030c8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003436:	f7ff fe25 	bl	8003084 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800343a:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 800343e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003440:	e001      	b.n	8003446 <prvUnlockQueue+0x48>
				--cRxLock;
 8003442:	3c01      	subs	r4, #1
 8003444:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003446:	2c00      	cmp	r4, #0
 8003448:	dd0a      	ble.n	8003460 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800344a:	692b      	ldr	r3, [r5, #16]
 800344c:	b143      	cbz	r3, 8003460 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800344e:	f105 0010 	add.w	r0, r5, #16
 8003452:	f005 f80f 	bl	8008474 <xTaskRemoveFromEventList>
 8003456:	2800      	cmp	r0, #0
 8003458:	d0f3      	beq.n	8003442 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800345a:	f005 f8a1 	bl	80085a0 <vTaskMissedYield>
 800345e:	e7f0      	b.n	8003442 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8003460:	23ff      	movs	r3, #255	@ 0xff
 8003462:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8003466:	f7ff fe2f 	bl	80030c8 <vPortExitCritical>
}
 800346a:	bd38      	pop	{r3, r4, r5, pc}

0800346c <xQueueGenericReset>:
{
 800346c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800346e:	b1e0      	cbz	r0, 80034aa <xQueueGenericReset+0x3e>
 8003470:	460d      	mov	r5, r1
 8003472:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003474:	f7ff fe06 	bl	8003084 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800347c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800347e:	fb01 3002 	mla	r0, r1, r2, r3
 8003482:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003484:	2000      	movs	r0, #0
 8003486:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003488:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800348a:	3a01      	subs	r2, #1
 800348c:	fb02 3301 	mla	r3, r2, r1, r3
 8003490:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003492:	23ff      	movs	r3, #255	@ 0xff
 8003494:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003498:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800349c:	b9fd      	cbnz	r5, 80034de <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800349e:	6923      	ldr	r3, [r4, #16]
 80034a0:	b963      	cbnz	r3, 80034bc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80034a2:	f7ff fe11 	bl	80030c8 <vPortExitCritical>
}
 80034a6:	2001      	movs	r0, #1
 80034a8:	bd38      	pop	{r3, r4, r5, pc}
 80034aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80034ba:	e7fe      	b.n	80034ba <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034bc:	f104 0010 	add.w	r0, r4, #16
 80034c0:	f004 ffd8 	bl	8008474 <xTaskRemoveFromEventList>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d0ec      	beq.n	80034a2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80034c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80034cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	e7e1      	b.n	80034a2 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034de:	f104 0010 	add.w	r0, r4, #16
 80034e2:	f7ff fc09 	bl	8002cf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034e6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80034ea:	f7ff fc05 	bl	8002cf8 <vListInitialise>
 80034ee:	e7d8      	b.n	80034a2 <xQueueGenericReset+0x36>

080034f0 <prvInitialiseNewQueue>:
{
 80034f0:	b538      	push	{r3, r4, r5, lr}
 80034f2:	461d      	mov	r5, r3
 80034f4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80034f6:	460b      	mov	r3, r1
 80034f8:	b949      	cbnz	r1, 800350e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80034fa:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80034fc:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80034fe:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003500:	2101      	movs	r1, #1
 8003502:	4620      	mov	r0, r4
 8003504:	f7ff ffb2 	bl	800346c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003508:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800350c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800350e:	6022      	str	r2, [r4, #0]
 8003510:	e7f4      	b.n	80034fc <prvInitialiseNewQueue+0xc>

08003512 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003512:	b940      	cbnz	r0, 8003526 <xQueueGenericCreateStatic+0x14>
 8003514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	e7fe      	b.n	8003524 <xQueueGenericCreateStatic+0x12>
	{
 8003526:	b510      	push	{r4, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	461c      	mov	r4, r3
 800352c:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800352e:	b153      	cbz	r3, 8003546 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003530:	b192      	cbz	r2, 8003558 <xQueueGenericCreateStatic+0x46>
 8003532:	b989      	cbnz	r1, 8003558 <xQueueGenericCreateStatic+0x46>
 8003534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	e7fe      	b.n	8003544 <xQueueGenericCreateStatic+0x32>
 8003546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8003556:	e7fe      	b.n	8003556 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003558:	b16a      	cbz	r2, 8003576 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800355a:	2350      	movs	r3, #80	@ 0x50
 800355c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800355e:	9b03      	ldr	r3, [sp, #12]
 8003560:	2b50      	cmp	r3, #80	@ 0x50
 8003562:	d013      	beq.n	800358c <xQueueGenericCreateStatic+0x7a>
 8003564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	e7fe      	b.n	8003574 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003576:	2900      	cmp	r1, #0
 8003578:	d0ef      	beq.n	800355a <xQueueGenericCreateStatic+0x48>
 800357a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	e7fe      	b.n	800358a <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800358c:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800358e:	2301      	movs	r3, #1
 8003590:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003594:	9400      	str	r4, [sp, #0]
 8003596:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800359a:	4660      	mov	r0, ip
 800359c:	f7ff ffa8 	bl	80034f0 <prvInitialiseNewQueue>
	}
 80035a0:	4620      	mov	r0, r4
 80035a2:	b004      	add	sp, #16
 80035a4:	bd10      	pop	{r4, pc}

080035a6 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035a6:	b940      	cbnz	r0, 80035ba <xQueueGenericCreate+0x14>
 80035a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	e7fe      	b.n	80035b8 <xQueueGenericCreate+0x12>
	{
 80035ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035bc:	b083      	sub	sp, #12
 80035be:	460d      	mov	r5, r1
 80035c0:	4614      	mov	r4, r2
 80035c2:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035c4:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80035c8:	3050      	adds	r0, #80	@ 0x50
 80035ca:	f7fe ffd5 	bl	8002578 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80035ce:	4607      	mov	r7, r0
 80035d0:	b150      	cbz	r0, 80035e8 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035d8:	9000      	str	r0, [sp, #0]
 80035da:	4623      	mov	r3, r4
 80035dc:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 80035e0:	4629      	mov	r1, r5
 80035e2:	4630      	mov	r0, r6
 80035e4:	f7ff ff84 	bl	80034f0 <prvInitialiseNewQueue>
	}
 80035e8:	4638      	mov	r0, r7
 80035ea:	b003      	add	sp, #12
 80035ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035ee <xQueueGenericSend>:
{
 80035ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f0:	b085      	sub	sp, #20
 80035f2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80035f4:	b188      	cbz	r0, 800361a <xQueueGenericSend+0x2c>
 80035f6:	460f      	mov	r7, r1
 80035f8:	461d      	mov	r5, r3
 80035fa:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035fc:	b1b1      	cbz	r1, 800362c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035fe:	2d02      	cmp	r5, #2
 8003600:	d120      	bne.n	8003644 <xQueueGenericSend+0x56>
 8003602:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d01d      	beq.n	8003644 <xQueueGenericSend+0x56>
 8003608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	e7fe      	b.n	8003618 <xQueueGenericSend+0x2a>
 800361a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800362a:	e7fe      	b.n	800362a <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800362c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0e5      	beq.n	80035fe <xQueueGenericSend+0x10>
 8003632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	e7fe      	b.n	8003642 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003644:	f004 ffb2 	bl	80085ac <xTaskGetSchedulerState>
 8003648:	4606      	mov	r6, r0
 800364a:	b958      	cbnz	r0, 8003664 <xQueueGenericSend+0x76>
 800364c:	9b01      	ldr	r3, [sp, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d048      	beq.n	80036e4 <xQueueGenericSend+0xf6>
 8003652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003656:	f383 8811 	msr	BASEPRI, r3
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	e7fe      	b.n	8003662 <xQueueGenericSend+0x74>
 8003664:	2600      	movs	r6, #0
 8003666:	e03d      	b.n	80036e4 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003668:	462a      	mov	r2, r5
 800366a:	4639      	mov	r1, r7
 800366c:	4620      	mov	r0, r4
 800366e:	f7ff fe79 	bl	8003364 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003672:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003674:	b97b      	cbnz	r3, 8003696 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8003676:	b148      	cbz	r0, 800368c <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8003678:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800367c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003680:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800368c:	f7ff fd1c 	bl	80030c8 <vPortExitCritical>
				return pdPASS;
 8003690:	2001      	movs	r0, #1
}
 8003692:	b005      	add	sp, #20
 8003694:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003696:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800369a:	f004 feeb 	bl	8008474 <xTaskRemoveFromEventList>
 800369e:	2800      	cmp	r0, #0
 80036a0:	d0f4      	beq.n	800368c <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 80036a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80036a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	e7e9      	b.n	800368c <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 80036b8:	f7ff fd06 	bl	80030c8 <vPortExitCritical>
					return errQUEUE_FULL;
 80036bc:	2000      	movs	r0, #0
 80036be:	e7e8      	b.n	8003692 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036c0:	a802      	add	r0, sp, #8
 80036c2:	f004 ff1d 	bl	8008500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036c6:	2601      	movs	r6, #1
 80036c8:	e019      	b.n	80036fe <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 80036ca:	2300      	movs	r3, #0
 80036cc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80036d0:	e021      	b.n	8003716 <xQueueGenericSend+0x128>
 80036d2:	2300      	movs	r3, #0
 80036d4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80036d8:	e023      	b.n	8003722 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 80036da:	4620      	mov	r0, r4
 80036dc:	f7ff fe8f 	bl	80033fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036e0:	f004 fda6 	bl	8008230 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80036e4:	f7ff fcce 	bl	8003084 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036e8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80036ea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d3bb      	bcc.n	8003668 <xQueueGenericSend+0x7a>
 80036f0:	2d02      	cmp	r5, #2
 80036f2:	d0b9      	beq.n	8003668 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80036f4:	9b01      	ldr	r3, [sp, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0de      	beq.n	80036b8 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 80036fa:	2e00      	cmp	r6, #0
 80036fc:	d0e0      	beq.n	80036c0 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 80036fe:	f7ff fce3 	bl	80030c8 <vPortExitCritical>
		vTaskSuspendAll();
 8003702:	f004 fcfb 	bl	80080fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003706:	f7ff fcbd 	bl	8003084 <vPortEnterCritical>
 800370a:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800370e:	b252      	sxtb	r2, r2
 8003710:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003714:	d0d9      	beq.n	80036ca <xQueueGenericSend+0xdc>
 8003716:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800371a:	b252      	sxtb	r2, r2
 800371c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003720:	d0d7      	beq.n	80036d2 <xQueueGenericSend+0xe4>
 8003722:	f7ff fcd1 	bl	80030c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003726:	a901      	add	r1, sp, #4
 8003728:	a802      	add	r0, sp, #8
 800372a:	f004 fef5 	bl	8008518 <xTaskCheckForTimeOut>
 800372e:	b9d8      	cbnz	r0, 8003768 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003730:	4620      	mov	r0, r4
 8003732:	f7ff fdfb 	bl	800332c <prvIsQueueFull>
 8003736:	2800      	cmp	r0, #0
 8003738:	d0cf      	beq.n	80036da <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800373a:	9901      	ldr	r1, [sp, #4]
 800373c:	f104 0010 	add.w	r0, r4, #16
 8003740:	f004 fe64 	bl	800840c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003744:	4620      	mov	r0, r4
 8003746:	f7ff fe5a 	bl	80033fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800374a:	f004 fd71 	bl	8008230 <xTaskResumeAll>
 800374e:	2800      	cmp	r0, #0
 8003750:	d1c8      	bne.n	80036e4 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8003752:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800375a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	e7bd      	b.n	80036e4 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8003768:	4620      	mov	r0, r4
 800376a:	f7ff fe48 	bl	80033fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800376e:	f004 fd5f 	bl	8008230 <xTaskResumeAll>
			return errQUEUE_FULL;
 8003772:	2000      	movs	r0, #0
 8003774:	e78d      	b.n	8003692 <xQueueGenericSend+0xa4>

08003776 <xQueueGenericSendFromISR>:
{
 8003776:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800377a:	b190      	cbz	r0, 80037a2 <xQueueGenericSendFromISR+0x2c>
 800377c:	460f      	mov	r7, r1
 800377e:	4616      	mov	r6, r2
 8003780:	461c      	mov	r4, r3
 8003782:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003784:	b1b1      	cbz	r1, 80037b4 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003786:	2c02      	cmp	r4, #2
 8003788:	d120      	bne.n	80037cc <xQueueGenericSendFromISR+0x56>
 800378a:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d01d      	beq.n	80037cc <xQueueGenericSendFromISR+0x56>
 8003790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	e7fe      	b.n	80037a0 <xQueueGenericSendFromISR+0x2a>
 80037a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80037b2:	e7fe      	b.n	80037b2 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037b4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0e5      	beq.n	8003786 <xQueueGenericSendFromISR+0x10>
 80037ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	e7fe      	b.n	80037ca <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037cc:	f7ff fd80 	bl	80032d0 <vPortValidateInterruptPriority>
	__asm volatile
 80037d0:	f3ef 8811 	mrs	r8, BASEPRI
 80037d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037e4:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 80037e6:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d306      	bcc.n	80037fa <xQueueGenericSendFromISR+0x84>
 80037ec:	2c02      	cmp	r4, #2
 80037ee:	d004      	beq.n	80037fa <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80037f0:	2000      	movs	r0, #0
	__asm volatile
 80037f2:	f388 8811 	msr	BASEPRI, r8
}
 80037f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80037fa:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 80037fe:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003802:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003804:	4622      	mov	r2, r4
 8003806:	4639      	mov	r1, r7
 8003808:	4628      	mov	r0, r5
 800380a:	f7ff fdab 	bl	8003364 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800380e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003812:	d006      	beq.n	8003822 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003814:	f109 0301 	add.w	r3, r9, #1
 8003818:	b25b      	sxtb	r3, r3
 800381a:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800381e:	2001      	movs	r0, #1
 8003820:	e7e7      	b.n	80037f2 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003822:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003824:	b90b      	cbnz	r3, 800382a <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8003826:	2001      	movs	r0, #1
 8003828:	e7e3      	b.n	80037f2 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800382a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800382e:	f004 fe21 	bl	8008474 <xTaskRemoveFromEventList>
 8003832:	b118      	cbz	r0, 800383c <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8003834:	b126      	cbz	r6, 8003840 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003836:	2001      	movs	r0, #1
 8003838:	6030      	str	r0, [r6, #0]
 800383a:	e7da      	b.n	80037f2 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800383c:	2001      	movs	r0, #1
 800383e:	e7d8      	b.n	80037f2 <xQueueGenericSendFromISR+0x7c>
 8003840:	2001      	movs	r0, #1
 8003842:	e7d6      	b.n	80037f2 <xQueueGenericSendFromISR+0x7c>

08003844 <xQueueReceive>:
{
 8003844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003846:	b085      	sub	sp, #20
 8003848:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800384a:	b190      	cbz	r0, 8003872 <xQueueReceive+0x2e>
 800384c:	460f      	mov	r7, r1
 800384e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003850:	b1c1      	cbz	r1, 8003884 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003852:	f004 feab 	bl	80085ac <xTaskGetSchedulerState>
 8003856:	4606      	mov	r6, r0
 8003858:	bb00      	cbnz	r0, 800389c <xQueueReceive+0x58>
 800385a:	9b01      	ldr	r3, [sp, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d05e      	beq.n	800391e <xQueueReceive+0xda>
	__asm volatile
 8003860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003864:	f383 8811 	msr	BASEPRI, r3
 8003868:	f3bf 8f6f 	isb	sy
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	e7fe      	b.n	8003870 <xQueueReceive+0x2c>
 8003872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8003882:	e7fe      	b.n	8003882 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003884:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0e3      	beq.n	8003852 <xQueueReceive+0xe>
 800388a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	e7fe      	b.n	800389a <xQueueReceive+0x56>
 800389c:	2600      	movs	r6, #0
 800389e:	e03e      	b.n	800391e <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038a0:	4639      	mov	r1, r7
 80038a2:	4620      	mov	r0, r4
 80038a4:	f7ff fd99 	bl	80033da <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038a8:	3d01      	subs	r5, #1
 80038aa:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038ac:	6923      	ldr	r3, [r4, #16]
 80038ae:	b923      	cbnz	r3, 80038ba <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80038b0:	f7ff fc0a 	bl	80030c8 <vPortExitCritical>
				return pdPASS;
 80038b4:	2001      	movs	r0, #1
}
 80038b6:	b005      	add	sp, #20
 80038b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038ba:	f104 0010 	add.w	r0, r4, #16
 80038be:	f004 fdd9 	bl	8008474 <xTaskRemoveFromEventList>
 80038c2:	2800      	cmp	r0, #0
 80038c4:	d0f4      	beq.n	80038b0 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80038c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80038ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	e7e9      	b.n	80038b0 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80038dc:	f7ff fbf4 	bl	80030c8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80038e0:	2000      	movs	r0, #0
 80038e2:	e7e8      	b.n	80038b6 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038e4:	a802      	add	r0, sp, #8
 80038e6:	f004 fe0b 	bl	8008500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038ea:	2601      	movs	r6, #1
 80038ec:	e021      	b.n	8003932 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 80038ee:	2300      	movs	r3, #0
 80038f0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80038f4:	e029      	b.n	800394a <xQueueReceive+0x106>
 80038f6:	2300      	movs	r3, #0
 80038f8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80038fc:	e02b      	b.n	8003956 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80038fe:	4620      	mov	r0, r4
 8003900:	f7ff fd7d 	bl	80033fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003904:	f004 fc94 	bl	8008230 <xTaskResumeAll>
 8003908:	e009      	b.n	800391e <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800390a:	4620      	mov	r0, r4
 800390c:	f7ff fd77 	bl	80033fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003910:	f004 fc8e 	bl	8008230 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003914:	4620      	mov	r0, r4
 8003916:	f7ff fd18 	bl	800334a <prvIsQueueEmpty>
 800391a:	2800      	cmp	r0, #0
 800391c:	d13f      	bne.n	800399e <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800391e:	f7ff fbb1 	bl	8003084 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003922:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003924:	2d00      	cmp	r5, #0
 8003926:	d1bb      	bne.n	80038a0 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003928:	9b01      	ldr	r3, [sp, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0d6      	beq.n	80038dc <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800392e:	2e00      	cmp	r6, #0
 8003930:	d0d8      	beq.n	80038e4 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8003932:	f7ff fbc9 	bl	80030c8 <vPortExitCritical>
		vTaskSuspendAll();
 8003936:	f004 fbe1 	bl	80080fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800393a:	f7ff fba3 	bl	8003084 <vPortEnterCritical>
 800393e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003942:	b25b      	sxtb	r3, r3
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d0d1      	beq.n	80038ee <xQueueReceive+0xaa>
 800394a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800394e:	b25b      	sxtb	r3, r3
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d0cf      	beq.n	80038f6 <xQueueReceive+0xb2>
 8003956:	f7ff fbb7 	bl	80030c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800395a:	a901      	add	r1, sp, #4
 800395c:	a802      	add	r0, sp, #8
 800395e:	f004 fddb 	bl	8008518 <xTaskCheckForTimeOut>
 8003962:	2800      	cmp	r0, #0
 8003964:	d1d1      	bne.n	800390a <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003966:	4620      	mov	r0, r4
 8003968:	f7ff fcef 	bl	800334a <prvIsQueueEmpty>
 800396c:	2800      	cmp	r0, #0
 800396e:	d0c6      	beq.n	80038fe <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003970:	9901      	ldr	r1, [sp, #4]
 8003972:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003976:	f004 fd49 	bl	800840c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800397a:	4620      	mov	r0, r4
 800397c:	f7ff fd3f 	bl	80033fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003980:	f004 fc56 	bl	8008230 <xTaskResumeAll>
 8003984:	2800      	cmp	r0, #0
 8003986:	d1ca      	bne.n	800391e <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8003988:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800398c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003990:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	e7bf      	b.n	800391e <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800399e:	2000      	movs	r0, #0
 80039a0:	e789      	b.n	80038b6 <xQueueReceive+0x72>

080039a2 <xQueueReceiveFromISR>:
{
 80039a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80039a6:	b1b0      	cbz	r0, 80039d6 <xQueueReceiveFromISR+0x34>
 80039a8:	460d      	mov	r5, r1
 80039aa:	4690      	mov	r8, r2
 80039ac:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ae:	b1d9      	cbz	r1, 80039e8 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039b0:	f7ff fc8e 	bl	80032d0 <vPortValidateInterruptPriority>
	__asm volatile
 80039b4:	f3ef 8711 	mrs	r7, BASEPRI
 80039b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039c8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039ca:	b9ce      	cbnz	r6, 8003a00 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80039cc:	2000      	movs	r0, #0
	__asm volatile
 80039ce:	f387 8811 	msr	BASEPRI, r7
}
 80039d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80039d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80039e6:	e7fe      	b.n	80039e6 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039e8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0e0      	beq.n	80039b0 <xQueueReceiveFromISR+0xe>
 80039ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	e7fe      	b.n	80039fe <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8003a00:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8003a04:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a08:	4629      	mov	r1, r5
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f7ff fce5 	bl	80033da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a10:	1e73      	subs	r3, r6, #1
 8003a12:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8003a14:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003a18:	d006      	beq.n	8003a28 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003a1a:	f109 0301 	add.w	r3, r9, #1
 8003a1e:	b25b      	sxtb	r3, r3
 8003a20:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8003a24:	2001      	movs	r0, #1
 8003a26:	e7d2      	b.n	80039ce <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a28:	6923      	ldr	r3, [r4, #16]
 8003a2a:	b90b      	cbnz	r3, 8003a30 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	e7ce      	b.n	80039ce <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a30:	f104 0010 	add.w	r0, r4, #16
 8003a34:	f004 fd1e 	bl	8008474 <xTaskRemoveFromEventList>
 8003a38:	b130      	cbz	r0, 8003a48 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8003a3a:	f1b8 0f00 	cmp.w	r8, #0
 8003a3e:	d005      	beq.n	8003a4c <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003a40:	2001      	movs	r0, #1
 8003a42:	f8c8 0000 	str.w	r0, [r8]
 8003a46:	e7c2      	b.n	80039ce <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8003a48:	2001      	movs	r0, #1
 8003a4a:	e7c0      	b.n	80039ce <xQueueReceiveFromISR+0x2c>
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	e7be      	b.n	80039ce <xQueueReceiveFromISR+0x2c>

08003a50 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a50:	2300      	movs	r3, #0
 8003a52:	2b07      	cmp	r3, #7
 8003a54:	d80c      	bhi.n	8003a70 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a56:	4a07      	ldr	r2, [pc, #28]	@ (8003a74 <vQueueAddToRegistry+0x24>)
 8003a58:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003a5c:	b10a      	cbz	r2, 8003a62 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a5e:	3301      	adds	r3, #1
 8003a60:	e7f7      	b.n	8003a52 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a62:	4a04      	ldr	r2, [pc, #16]	@ (8003a74 <vQueueAddToRegistry+0x24>)
 8003a64:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a68:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003a6c:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a6e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20006734 	.word	0x20006734

08003a78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	460d      	mov	r5, r1
 8003a7e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a80:	f7ff fb00 	bl	8003084 <vPortEnterCritical>
 8003a84:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003a88:	b25b      	sxtb	r3, r3
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d00d      	beq.n	8003aac <vQueueWaitForMessageRestricted+0x34>
 8003a90:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003a94:	b25b      	sxtb	r3, r3
 8003a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9a:	d00b      	beq.n	8003ab4 <vQueueWaitForMessageRestricted+0x3c>
 8003a9c:	f7ff fb14 	bl	80030c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003aa0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003aa2:	b15b      	cbz	r3, 8003abc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f7ff fcaa 	bl	80033fe <prvUnlockQueue>
	}
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8003aac:	2300      	movs	r3, #0
 8003aae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003ab2:	e7ed      	b.n	8003a90 <vQueueWaitForMessageRestricted+0x18>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003aba:	e7ef      	b.n	8003a9c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003abc:	4632      	mov	r2, r6
 8003abe:	4629      	mov	r1, r5
 8003ac0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003ac4:	f004 fcba 	bl	800843c <vTaskPlaceOnEventListRestricted>
 8003ac8:	e7ec      	b.n	8003aa4 <vQueueWaitForMessageRestricted+0x2c>
	...

08003acc <resistor_init>:
#include "resistor.h"

void resistor_init(resistor_t* resistor, float pull_resistor, resistor_pull_type_t pull_type, analog_input_channel_t analog_input)
{
 8003acc:	b508      	push	{r3, lr}
    if (resistor == NULL)
 8003ace:	b120      	cbz	r0, 8003ada <resistor_init+0xe>
    {
        log_error("Resistor init failed!");
        return;
    }
    resistor->pull_resistor = pull_resistor;
 8003ad0:	ed80 0a01 	vstr	s0, [r0, #4]
    resistor->pull_type = pull_type;
 8003ad4:	7001      	strb	r1, [r0, #0]
    resistor->analog_input = analog_input;
 8003ad6:	7202      	strb	r2, [r0, #8]
}
 8003ad8:	bd08      	pop	{r3, pc}
        log_error("Resistor init failed!");
 8003ada:	4802      	ldr	r0, [pc, #8]	@ (8003ae4 <resistor_init+0x18>)
 8003adc:	f7fe fb2a 	bl	8002134 <log_error>
        return;
 8003ae0:	e7fa      	b.n	8003ad8 <resistor_init+0xc>
 8003ae2:	bf00      	nop
 8003ae4:	0800bdc4 	.word	0x0800bdc4

08003ae8 <resistor_get_resistance>:

/**
 * @todo div by zero will break this!
 */
float resistor_get_resistance(const resistor_t *resistor)
{
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	4604      	mov	r4, r0
    uint16_t adc_value = analog_inputs_get_data(resistor->analog_input);
 8003aec:	7a00      	ldrb	r0, [r0, #8]
 8003aee:	f7fd f985 	bl	8000dfc <analog_inputs_get_data>
 8003af2:	ee07 0a10 	vmov	s14, r0
    float voltage = ((float)adc_value / (float)ADC_MAX_VALUE) * (float)ADC_REF_VOLTAGE;
 8003af6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003afa:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8003b64 <resistor_get_resistance+0x7c>
 8003afe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b02:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003b68 <resistor_get_resistance+0x80>
 8003b06:	ee67 7a87 	vmul.f32	s15, s15, s14
    // simple check to see if the sensor is open circuit or not
    if (!IS_IN_RANGE(voltage, 0.05f * ADC_REF_VOLTAGE, 0.95f * ADC_REF_VOLTAGE))
 8003b0a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003b6c <resistor_get_resistance+0x84>
 8003b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b16:	db13      	blt.n	8003b40 <resistor_get_resistance+0x58>
 8003b18:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003b70 <resistor_get_resistance+0x88>
 8003b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b24:	d80c      	bhi.n	8003b40 <resistor_get_resistance+0x58>
    {
        log_error("Resistor open circuit.");
        return NAN;
    }
    if (resistor->pull_type == RESISTOR_PULL_UP) {
 8003b26:	7823      	ldrb	r3, [r4, #0]
 8003b28:	b983      	cbnz	r3, 8003b4c <resistor_get_resistance+0x64>
        return (voltage * (float)resistor->pull_resistor) / ((float)ADC_REF_VOLTAGE - voltage);
 8003b2a:	edd4 6a01 	vldr	s13, [r4, #4]
 8003b2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b32:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003b68 <resistor_get_resistance+0x80>
 8003b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b3a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8003b3e:	e004      	b.n	8003b4a <resistor_get_resistance+0x62>
        log_error("Resistor open circuit.");
 8003b40:	480c      	ldr	r0, [pc, #48]	@ (8003b74 <resistor_get_resistance+0x8c>)
 8003b42:	f7fe faf7 	bl	8002134 <log_error>
        return NAN;
 8003b46:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8003b78 <resistor_get_resistance+0x90>
    } else { // PULL_DOWN
        return ((ADC_REF_VOLTAGE - voltage) * (float)resistor->pull_resistor) / voltage;
    }
}
 8003b4a:	bd10      	pop	{r4, pc}
        return ((ADC_REF_VOLTAGE - voltage) * (float)resistor->pull_resistor) / voltage;
 8003b4c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8003b68 <resistor_get_resistance+0x80>
 8003b50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b54:	edd4 6a01 	vldr	s13, [r4, #4]
 8003b58:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003b5c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8003b60:	e7f3      	b.n	8003b4a <resistor_get_resistance+0x62>
 8003b62:	bf00      	nop
 8003b64:	457ff000 	.word	0x457ff000
 8003b68:	40533333 	.word	0x40533333
 8003b6c:	3e28f5c3 	.word	0x3e28f5c3
 8003b70:	4048a3d7 	.word	0x4048a3d7
 8003b74:	0800bddc 	.word	0x0800bddc
 8003b78:	7fc00000 	.word	0x7fc00000

08003b7c <sensor_tps_get>:
static thermistor_t *sensor_iat = NULL;
static thermistor_t *sensor_clt = NULL;
static sensor_ops_t *sensor_ops = NULL;

percent_t sensor_tps_get(sensor_tps_t *sensor)
{
 8003b7c:	b510      	push	{r4, lr}
    if (sensor == NULL)
 8003b7e:	b3b0      	cbz	r0, 8003bee <sensor_tps_get+0x72>
 8003b80:	4604      	mov	r4, r0
    {
        log_error("tps is null");
        return SENSOR_TPS_FAIL_SAFE;
    }
     if (sensor->wide_open_throttle_adc_value == 0 && sensor->closed_throttle_adc_value == 0)
 8003b82:	8803      	ldrh	r3, [r0, #0]
 8003b84:	b90b      	cbnz	r3, 8003b8a <sensor_tps_get+0xe>
 8003b86:	8843      	ldrh	r3, [r0, #2]
 8003b88:	b3bb      	cbz	r3, 8003bfa <sensor_tps_get+0x7e>
    {
        log_error("tps wrong sensor calib");
        return SENSOR_TPS_FAIL_SAFE;
    }
    percent_t result = 0;
    uint16_t raw_data = analog_inputs_get_data(sensor->analog_channel);
 8003b8a:	7920      	ldrb	r0, [r4, #4]
 8003b8c:	f7fd f936 	bl	8000dfc <analog_inputs_get_data>
 8003b90:	ee07 0a90 	vmov	s15, r0
    if (sensor->is_inverted)
 8003b94:	7963      	ldrb	r3, [r4, #5]
 8003b96:	b3b3      	cbz	r3, 8003c06 <sensor_tps_get+0x8a>
    {
        result = mapf((float)raw_data, (float)sensor->wide_open_throttle_adc_value, (float)sensor->closed_throttle_adc_value, (float)0, (float)100);
 8003b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9c:	8822      	ldrh	r2, [r4, #0]
 8003b9e:	ee07 2a10 	vmov	s14, r2
 8003ba2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003ba6:	8863      	ldrh	r3, [r4, #2]
 8003ba8:	ee07 3a10 	vmov	s14, r3
 8003bac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (in_max == in_min)
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d045      	beq.n	8003c40 <sensor_tps_get+0xc4>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003bb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003bb8:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8003c54 <sensor_tps_get+0xd8>
 8003bbc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003bc0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003bc4:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8003bc8:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8003c58 <sensor_tps_get+0xdc>
 8003bcc:	ee30 0a27 	vadd.f32	s0, s0, s15
    }
    else
    {
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
    }
    result = CLAMP(result, (percent_t)0, (percent_t)100);
 8003bd0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd8:	d438      	bmi.n	8003c4c <sensor_tps_get+0xd0>
 8003bda:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8003c54 <sensor_tps_get+0xd8>
 8003bde:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be6:	dd01      	ble.n	8003bec <sensor_tps_get+0x70>
 8003be8:	eeb0 0a67 	vmov.f32	s0, s15
    return result;
}
 8003bec:	bd10      	pop	{r4, pc}
        log_error("tps is null");
 8003bee:	481b      	ldr	r0, [pc, #108]	@ (8003c5c <sensor_tps_get+0xe0>)
 8003bf0:	f7fe faa0 	bl	8002134 <log_error>
        return SENSOR_TPS_FAIL_SAFE;
 8003bf4:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8003c60 <sensor_tps_get+0xe4>
 8003bf8:	e7f8      	b.n	8003bec <sensor_tps_get+0x70>
        log_error("tps wrong sensor calib");
 8003bfa:	481a      	ldr	r0, [pc, #104]	@ (8003c64 <sensor_tps_get+0xe8>)
 8003bfc:	f7fe fa9a 	bl	8002134 <log_error>
        return SENSOR_TPS_FAIL_SAFE;
 8003c00:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8003c60 <sensor_tps_get+0xe4>
 8003c04:	e7f2      	b.n	8003bec <sensor_tps_get+0x70>
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
 8003c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0a:	8862      	ldrh	r2, [r4, #2]
 8003c0c:	ee07 2a10 	vmov	s14, r2
 8003c10:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003c14:	8823      	ldrh	r3, [r4, #0]
 8003c16:	ee07 3a10 	vmov	s14, r3
 8003c1a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (in_max == in_min)
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d011      	beq.n	8003c46 <sensor_tps_get+0xca>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003c22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003c26:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8003c54 <sensor_tps_get+0xd8>
 8003c2a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003c2e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003c32:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8003c36:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8003c58 <sensor_tps_get+0xdc>
 8003c3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003c3e:	e7c7      	b.n	8003bd0 <sensor_tps_get+0x54>
        result = mapf((float)raw_data, (float)sensor->wide_open_throttle_adc_value, (float)sensor->closed_throttle_adc_value, (float)0, (float)100);
 8003c40:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8003c58 <sensor_tps_get+0xdc>
 8003c44:	e7c9      	b.n	8003bda <sensor_tps_get+0x5e>
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
 8003c46:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8003c58 <sensor_tps_get+0xdc>
 8003c4a:	e7c6      	b.n	8003bda <sensor_tps_get+0x5e>
    result = CLAMP(result, (percent_t)0, (percent_t)100);
 8003c4c:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8003c58 <sensor_tps_get+0xdc>
 8003c50:	e7cc      	b.n	8003bec <sensor_tps_get+0x70>
 8003c52:	bf00      	nop
 8003c54:	42c80000 	.word	0x42c80000
 8003c58:	00000000 	.word	0x00000000
 8003c5c:	0800bdf4 	.word	0x0800bdf4
 8003c60:	7fc00000 	.word	0x7fc00000
 8003c64:	0800be00 	.word	0x0800be00

08003c68 <sensor_map_init>:

void sensor_map_init(sensor_map_t *sensor, sensor_map_type_t type)
{
 8003c68:	b510      	push	{r4, lr}
    if (sensor == NULL)
 8003c6a:	b168      	cbz	r0, 8003c88 <sensor_map_init+0x20>
 8003c6c:	4604      	mov	r4, r0
    {
        log_error("map sensor is null");
        return;
    }
    switch (type)
 8003c6e:	b179      	cbz	r1, 8003c90 <sensor_map_init+0x28>
 8003c70:	2901      	cmp	r1, #1
 8003c72:	d115      	bne.n	8003ca0 <sensor_map_init+0x38>
         * a simple linear sensor
         */
        /**
         * @todo actually calculate these values!
         */
        sensor->adc_value_0_bar = 100;
 8003c74:	2364      	movs	r3, #100	@ 0x64
 8003c76:	8003      	strh	r3, [r0, #0]
        sensor->adc_value_1_bar = 3000;
 8003c78:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003c7c:	8043      	strh	r3, [r0, #2]
        sensor->analog_channel = ANALOG_INPUT_SENSOR_MAP_PIN;
 8003c7e:	2304      	movs	r3, #4
 8003c80:	7103      	strb	r3, [r0, #4]
    
    default:
        log_error("map sensor type not configured!");
        break;
    }
    map_sensor = sensor;
 8003c82:	4b09      	ldr	r3, [pc, #36]	@ (8003ca8 <sensor_map_init+0x40>)
 8003c84:	601c      	str	r4, [r3, #0]
}
 8003c86:	bd10      	pop	{r4, pc}
        log_error("map sensor is null");
 8003c88:	4808      	ldr	r0, [pc, #32]	@ (8003cac <sensor_map_init+0x44>)
 8003c8a:	f7fe fa53 	bl	8002134 <log_error>
        return;
 8003c8e:	e7fa      	b.n	8003c86 <sensor_map_init+0x1e>
        sensor->adc_value_0_bar = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	8003      	strh	r3, [r0, #0]
        sensor->adc_value_1_bar = 4095;
 8003c94:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8003c98:	8043      	strh	r3, [r0, #2]
        sensor->analog_channel = ANALOG_INPUT_SENSOR_MAP_PIN;
 8003c9a:	2304      	movs	r3, #4
 8003c9c:	7103      	strb	r3, [r0, #4]
        break;
 8003c9e:	e7f0      	b.n	8003c82 <sensor_map_init+0x1a>
        log_error("map sensor type not configured!");
 8003ca0:	4803      	ldr	r0, [pc, #12]	@ (8003cb0 <sensor_map_init+0x48>)
 8003ca2:	f7fe fa47 	bl	8002134 <log_error>
        break;
 8003ca6:	e7ec      	b.n	8003c82 <sensor_map_init+0x1a>
 8003ca8:	2000677c 	.word	0x2000677c
 8003cac:	0800be18 	.word	0x0800be18
 8003cb0:	0800be2c 	.word	0x0800be2c

08003cb4 <sensor_map_get>:


pressure_t sensor_map_get()
{
 8003cb4:	b508      	push	{r3, lr}
    if (map_sensor->adc_value_0_bar == 0 && map_sensor->adc_value_1_bar == 0)
 8003cb6:	4b22      	ldr	r3, [pc, #136]	@ (8003d40 <sensor_map_get+0x8c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	881a      	ldrh	r2, [r3, #0]
 8003cbc:	b90a      	cbnz	r2, 8003cc2 <sensor_map_get+0xe>
 8003cbe:	885a      	ldrh	r2, [r3, #2]
 8003cc0:	b37a      	cbz	r2, 8003d22 <sensor_map_get+0x6e>
        log_error("map sensor no init!");
        return SENSOR_MAP_FAIL_SAFE;
    }
    
    uint16_t raw_adc_value = 0;
    raw_adc_value = analog_inputs_get_data(map_sensor->analog_channel);
 8003cc2:	7918      	ldrb	r0, [r3, #4]
 8003cc4:	f7fd f89a 	bl	8000dfc <analog_inputs_get_data>
 8003cc8:	ee07 0a90 	vmov	s15, r0

    pressure_t result = SENSOR_MAP_FAIL_SAFE;

    result = mapf((float)raw_adc_value, (float)map_sensor->adc_value_0_bar, (float)map_sensor->adc_value_1_bar, (pressure_t)0, (pressure_t)100);
 8003ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d40 <sensor_map_get+0x8c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	881a      	ldrh	r2, [r3, #0]
 8003cd6:	ee07 2a10 	vmov	s14, r2
 8003cda:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003cde:	885b      	ldrh	r3, [r3, #2]
 8003ce0:	ee07 3a10 	vmov	s14, r3
 8003ce4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (in_max == in_min)
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d020      	beq.n	8003d2e <sensor_map_get+0x7a>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003cec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003cf0:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8003d44 <sensor_map_get+0x90>
 8003cf4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003cf8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003cfc:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8003d00:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8003d48 <sensor_map_get+0x94>
 8003d04:	ee30 0a27 	vadd.f32	s0, s0, s15

    if (!IS_IN_RANGE(result, (pressure_t)0, FIRMWARE_LIMIT_MAX_MAP))
 8003d08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d10:	db10      	blt.n	8003d34 <sensor_map_get+0x80>
 8003d12:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003d4c <sensor_map_get+0x98>
 8003d16:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1e:	d809      	bhi.n	8003d34 <sensor_map_get+0x80>
    {
        log_error("map sensor out of range!");
        return SENSOR_MAP_FAIL_SAFE;
    }
    return result;
}
 8003d20:	bd08      	pop	{r3, pc}
        log_error("map sensor no init!");
 8003d22:	480b      	ldr	r0, [pc, #44]	@ (8003d50 <sensor_map_get+0x9c>)
 8003d24:	f7fe fa06 	bl	8002134 <log_error>
        return SENSOR_MAP_FAIL_SAFE;
 8003d28:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8003d48 <sensor_map_get+0x94>
 8003d2c:	e7f8      	b.n	8003d20 <sensor_map_get+0x6c>
        return 0.0f; // Avoid division by zero
 8003d2e:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8003d48 <sensor_map_get+0x94>
 8003d32:	e7ee      	b.n	8003d12 <sensor_map_get+0x5e>
        log_error("map sensor out of range!");
 8003d34:	4807      	ldr	r0, [pc, #28]	@ (8003d54 <sensor_map_get+0xa0>)
 8003d36:	f7fe f9fd 	bl	8002134 <log_error>
        return SENSOR_MAP_FAIL_SAFE;
 8003d3a:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8003d48 <sensor_map_get+0x94>
 8003d3e:	e7ef      	b.n	8003d20 <sensor_map_get+0x6c>
 8003d40:	2000677c 	.word	0x2000677c
 8003d44:	42c80000 	.word	0x42c80000
 8003d48:	00000000 	.word	0x00000000
 8003d4c:	42f00000 	.word	0x42f00000
 8003d50:	0800be4c 	.word	0x0800be4c
 8003d54:	0800be60 	.word	0x0800be60

08003d58 <sensor_iat_init>:

void sensor_iat_init(thermistor_t *sensor, sensor_iat_type_t type)
{
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	b08a      	sub	sp, #40	@ 0x28
 8003d5c:	4604      	mov	r4, r0
    switch (type)
 8003d5e:	b1e9      	cbz	r1, 8003d9c <sensor_iat_init+0x44>
 8003d60:	2901      	cmp	r1, #1
 8003d62:	d138      	bne.n	8003dd6 <sensor_iat_init+0x7e>
    {
        case SENSOR_IAT_TYPE_BOSCH_816:
            resistor_init(&sensor->resistor, 10000, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_IAT_PIN);
 8003d64:	2205      	movs	r2, #5
 8003d66:	2100      	movs	r1, #0
 8003d68:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8003de0 <sensor_iat_init+0x88>
 8003d6c:	f7ff feae 	bl	8003acc <resistor_init>
            thermistor_conf_t bosch_816_iat_conf = 
 8003d70:	ad04      	add	r5, sp, #16
 8003d72:	4e1c      	ldr	r6, [pc, #112]	@ (8003de4 <sensor_iat_init+0x8c>)
 8003d74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d78:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003d7c:	e885 0003 	stmia.w	r5, {r0, r1}
                .resistance_3 = 322.5f,
                .tempC_1 = -10.0f,
                .tempC_2 = 25.0f,
                .tempC_3 = 80.0f
            };
            thermistor_init(sensor, bosch_816_iat_conf);
 8003d80:	ab0a      	add	r3, sp, #40	@ 0x28
 8003d82:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003d86:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003d8a:	ab04      	add	r3, sp, #16
 8003d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d8e:	4620      	mov	r0, r4
 8003d90:	f004 fc64 	bl	800865c <thermistor_init>
            sensor_iat = sensor;
 8003d94:	4b14      	ldr	r3, [pc, #80]	@ (8003de8 <sensor_iat_init+0x90>)
 8003d96:	601c      	str	r4, [r3, #0]
            break;
    default:
        log_error("iat sensor type not configured!");
        break;
    }
}
 8003d98:	b00a      	add	sp, #40	@ 0x28
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
            resistor_init(&sensor->resistor, 4700, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_IAT_PIN);
 8003d9c:	2205      	movs	r2, #5
 8003d9e:	2100      	movs	r1, #0
 8003da0:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8003dec <sensor_iat_init+0x94>
 8003da4:	f7ff fe92 	bl	8003acc <resistor_init>
            thermistor_conf_t genric_5k =
 8003da8:	f10d 0c10 	add.w	ip, sp, #16
 8003dac:	4d10      	ldr	r5, [pc, #64]	@ (8003df0 <sensor_iat_init+0x98>)
 8003dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003db0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003db4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003db8:	e88c 0003 	stmia.w	ip, {r0, r1}
            thermistor_init(sensor, genric_5k);
 8003dbc:	ab0a      	add	r3, sp, #40	@ 0x28
 8003dbe:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003dc2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003dc6:	ab04      	add	r3, sp, #16
 8003dc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f004 fc46 	bl	800865c <thermistor_init>
            sensor_iat = sensor;
 8003dd0:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <sensor_iat_init+0x90>)
 8003dd2:	601c      	str	r4, [r3, #0]
            break;
 8003dd4:	e7e0      	b.n	8003d98 <sensor_iat_init+0x40>
        log_error("iat sensor type not configured!");
 8003dd6:	4807      	ldr	r0, [pc, #28]	@ (8003df4 <sensor_iat_init+0x9c>)
 8003dd8:	f7fe f9ac 	bl	8002134 <log_error>
}
 8003ddc:	e7dc      	b.n	8003d98 <sensor_iat_init+0x40>
 8003dde:	bf00      	nop
 8003de0:	461c4000 	.word	0x461c4000
 8003de4:	0800bb00 	.word	0x0800bb00
 8003de8:	20006778 	.word	0x20006778
 8003dec:	4592e000 	.word	0x4592e000
 8003df0:	0800bb18 	.word	0x0800bb18
 8003df4:	0800be7c 	.word	0x0800be7c

08003df8 <sensor_iat_get>:

temperature_t sensor_iat_get()
{
 8003df8:	b508      	push	{r3, lr}
    if (sensor_iat == NULL)
 8003dfa:	4b10      	ldr	r3, [pc, #64]	@ (8003e3c <sensor_iat_get+0x44>)
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	b180      	cbz	r0, 8003e22 <sensor_iat_get+0x2a>
    {
        log_error("iat sensor is null");
        return SENSOR_IAT_FAIL_SAFE;
    }
    temperature_t temperature = thermistor_get_temp(sensor_iat);
 8003e00:	f004 fca0 	bl	8008744 <thermistor_get_temp>
    if (!IS_IN_RANGE(temperature, FIRMWARE_LIMIT_MIN_TEMP, FIRMWARE_LIMIT_MAX_TEMP))
 8003e04:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003e40 <sensor_iat_get+0x48>
 8003e08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e10:	db0d      	blt.n	8003e2e <sensor_iat_get+0x36>
 8003e12:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003e44 <sensor_iat_get+0x4c>
 8003e16:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1e:	d806      	bhi.n	8003e2e <sensor_iat_get+0x36>
    {
        log_error("iat sensor out of range!");
        return SENSOR_IAT_FAIL_SAFE;
    }
    return temperature;
}
 8003e20:	bd08      	pop	{r3, pc}
        log_error("iat sensor is null");
 8003e22:	4809      	ldr	r0, [pc, #36]	@ (8003e48 <sensor_iat_get+0x50>)
 8003e24:	f7fe f986 	bl	8002134 <log_error>
        return SENSOR_IAT_FAIL_SAFE;
 8003e28:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003e4c <sensor_iat_get+0x54>
 8003e2c:	e7f8      	b.n	8003e20 <sensor_iat_get+0x28>
        log_error("iat sensor out of range!");
 8003e2e:	4808      	ldr	r0, [pc, #32]	@ (8003e50 <sensor_iat_get+0x58>)
 8003e30:	f7fe f980 	bl	8002134 <log_error>
        return SENSOR_IAT_FAIL_SAFE;
 8003e34:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8003e4c <sensor_iat_get+0x54>
 8003e38:	e7f2      	b.n	8003e20 <sensor_iat_get+0x28>
 8003e3a:	bf00      	nop
 8003e3c:	20006778 	.word	0x20006778
 8003e40:	c2480000 	.word	0xc2480000
 8003e44:	43160000 	.word	0x43160000
 8003e48:	0800be9c 	.word	0x0800be9c
 8003e4c:	42200000 	.word	0x42200000
 8003e50:	0800beb0 	.word	0x0800beb0

08003e54 <sensor_clt_init>:

void sensor_clt_init(thermistor_t *sensor, sensor_clt_type_t type)
{
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	b08a      	sub	sp, #40	@ 0x28
    if (sensor == NULL)
 8003e58:	b1f8      	cbz	r0, 8003e9a <sensor_clt_init+0x46>
 8003e5a:	4604      	mov	r4, r0
    {
        log_error("clt sensor is null");
        return;
    }
    switch (type)
 8003e5c:	b309      	cbz	r1, 8003ea2 <sensor_clt_init+0x4e>
 8003e5e:	2901      	cmp	r1, #1
 8003e60:	d13c      	bne.n	8003edc <sensor_clt_init+0x88>
    {
    /* Actually make this a proper thing */
    case SENSOR_CLT_TYPE_NISSAN:
        resistor_init(&sensor->resistor, 10000, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_CLT_PIN);
 8003e62:	2206      	movs	r2, #6
 8003e64:	2100      	movs	r1, #0
 8003e66:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8003ee4 <sensor_clt_init+0x90>
 8003e6a:	f7ff fe2f 	bl	8003acc <resistor_init>
        thermistor_conf_t nissan_clt_conf =
 8003e6e:	ad04      	add	r5, sp, #16
 8003e70:	4e1d      	ldr	r6, [pc, #116]	@ (8003ee8 <sensor_clt_init+0x94>)
 8003e72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e76:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003e7a:	e885 0003 	stmia.w	r5, {r0, r1}
            .resistance_3 = 230.0f,
            .tempC_1 = -20.0f,
            .tempC_2 = 25.0f,
            .tempC_3 = 90.0f
        };
        thermistor_init(sensor, nissan_clt_conf);
 8003e7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003e80:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003e84:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003e88:	ab04      	add	r3, sp, #16
 8003e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f004 fbe5 	bl	800865c <thermistor_init>
        sensor_clt = sensor;
 8003e92:	4b16      	ldr	r3, [pc, #88]	@ (8003eec <sensor_clt_init+0x98>)
 8003e94:	601c      	str	r4, [r3, #0]
        break;
    default:
        log_error("clt sensor type not configured!");
        break;
    }
}
 8003e96:	b00a      	add	sp, #40	@ 0x28
 8003e98:	bd70      	pop	{r4, r5, r6, pc}
        log_error("clt sensor is null");
 8003e9a:	4815      	ldr	r0, [pc, #84]	@ (8003ef0 <sensor_clt_init+0x9c>)
 8003e9c:	f7fe f94a 	bl	8002134 <log_error>
        return;
 8003ea0:	e7f9      	b.n	8003e96 <sensor_clt_init+0x42>
        resistor_init(&sensor->resistor, 4700, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_CLT_PIN);
 8003ea2:	2206      	movs	r2, #6
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8003ef4 <sensor_clt_init+0xa0>
 8003eaa:	f7ff fe0f 	bl	8003acc <resistor_init>
        thermistor_conf_t genric_5k =
 8003eae:	f10d 0c10 	add.w	ip, sp, #16
 8003eb2:	4d11      	ldr	r5, [pc, #68]	@ (8003ef8 <sensor_clt_init+0xa4>)
 8003eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003eb6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003eba:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003ebe:	e88c 0003 	stmia.w	ip, {r0, r1}
        thermistor_init(sensor, genric_5k);
 8003ec2:	ab0a      	add	r3, sp, #40	@ 0x28
 8003ec4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003ec8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003ecc:	ab04      	add	r3, sp, #16
 8003ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f004 fbc3 	bl	800865c <thermistor_init>
        sensor_clt = sensor;
 8003ed6:	4b05      	ldr	r3, [pc, #20]	@ (8003eec <sensor_clt_init+0x98>)
 8003ed8:	601c      	str	r4, [r3, #0]
        break;
 8003eda:	e7dc      	b.n	8003e96 <sensor_clt_init+0x42>
        log_error("clt sensor type not configured!");
 8003edc:	4807      	ldr	r0, [pc, #28]	@ (8003efc <sensor_clt_init+0xa8>)
 8003ede:	f7fe f929 	bl	8002134 <log_error>
        break;
 8003ee2:	e7d8      	b.n	8003e96 <sensor_clt_init+0x42>
 8003ee4:	461c4000 	.word	0x461c4000
 8003ee8:	0800bb30 	.word	0x0800bb30
 8003eec:	20006774 	.word	0x20006774
 8003ef0:	0800becc 	.word	0x0800becc
 8003ef4:	4592e000 	.word	0x4592e000
 8003ef8:	0800bb18 	.word	0x0800bb18
 8003efc:	0800bee0 	.word	0x0800bee0

08003f00 <sensor_clt_get>:

temperature_t sensor_clt_get()
{
 8003f00:	b508      	push	{r3, lr}
    if (sensor_clt == NULL)
 8003f02:	4b10      	ldr	r3, [pc, #64]	@ (8003f44 <sensor_clt_get+0x44>)
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	b180      	cbz	r0, 8003f2a <sensor_clt_get+0x2a>
    {
        log_error("clt sensor is null");
        return SENSOR_CLT_FAIL_SAFE;
    }
    temperature_t temperature = thermistor_get_temp(sensor_clt);
 8003f08:	f004 fc1c 	bl	8008744 <thermistor_get_temp>
    if (!IS_IN_RANGE(temperature, FIRMWARE_LIMIT_MIN_TEMP, FIRMWARE_LIMIT_MAX_TEMP))
 8003f0c:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003f48 <sensor_clt_get+0x48>
 8003f10:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f18:	db0d      	blt.n	8003f36 <sensor_clt_get+0x36>
 8003f1a:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003f4c <sensor_clt_get+0x4c>
 8003f1e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f26:	d806      	bhi.n	8003f36 <sensor_clt_get+0x36>
    {
        log_error("clt sensor out of range!");
        return SENSOR_CLT_FAIL_SAFE;
    }
    return temperature;
}
 8003f28:	bd08      	pop	{r3, pc}
        log_error("clt sensor is null");
 8003f2a:	4809      	ldr	r0, [pc, #36]	@ (8003f50 <sensor_clt_get+0x50>)
 8003f2c:	f7fe f902 	bl	8002134 <log_error>
        return SENSOR_CLT_FAIL_SAFE;
 8003f30:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8003f34:	e7f8      	b.n	8003f28 <sensor_clt_get+0x28>
        log_error("clt sensor out of range!");
 8003f36:	4807      	ldr	r0, [pc, #28]	@ (8003f54 <sensor_clt_get+0x54>)
 8003f38:	f7fe f8fc 	bl	8002134 <log_error>
        return SENSOR_CLT_FAIL_SAFE;
 8003f3c:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8003f40:	e7f2      	b.n	8003f28 <sensor_clt_get+0x28>
 8003f42:	bf00      	nop
 8003f44:	20006774 	.word	0x20006774
 8003f48:	c2480000 	.word	0xc2480000
 8003f4c:	43160000 	.word	0x43160000
 8003f50:	0800becc 	.word	0x0800becc
 8003f54:	0800bf00 	.word	0x0800bf00

08003f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f58:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f88 <HAL_Init+0x30>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f62:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f6a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f72:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f74:	2003      	movs	r0, #3
 8003f76:	f000 fbff 	bl	8004778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f7a:	200f      	movs	r0, #15
 8003f7c:	f002 ff54 	bl	8006e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f80:	f001 f81a 	bl	8004fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003f84:	2000      	movs	r0, #0
 8003f86:	bd08      	pop	{r3, pc}
 8003f88:	40023c00 	.word	0x40023c00

08003f8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003f8c:	4a03      	ldr	r2, [pc, #12]	@ (8003f9c <HAL_IncTick+0x10>)
 8003f8e:	6811      	ldr	r1, [r2, #0]
 8003f90:	4b03      	ldr	r3, [pc, #12]	@ (8003fa0 <HAL_IncTick+0x14>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	440b      	add	r3, r1
 8003f96:	6013      	str	r3, [r2, #0]
}
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	20006780 	.word	0x20006780
 8003fa0:	20000068 	.word	0x20000068

08003fa4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003fa4:	4b01      	ldr	r3, [pc, #4]	@ (8003fac <HAL_GetTick+0x8>)
 8003fa6:	6818      	ldr	r0, [r3, #0]
}
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20006780 	.word	0x20006780

08003fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fb0:	b538      	push	{r3, r4, r5, lr}
 8003fb2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003fb4:	f7ff fff6 	bl	8003fa4 <HAL_GetTick>
 8003fb8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fba:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003fbe:	d002      	beq.n	8003fc6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fc0:	4b04      	ldr	r3, [pc, #16]	@ (8003fd4 <HAL_Delay+0x24>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fc6:	f7ff ffed 	bl	8003fa4 <HAL_GetTick>
 8003fca:	1b40      	subs	r0, r0, r5
 8003fcc:	42a0      	cmp	r0, r4
 8003fce:	d3fa      	bcc.n	8003fc6 <HAL_Delay+0x16>
  {
  }
}
 8003fd0:	bd38      	pop	{r3, r4, r5, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000068 	.word	0x20000068

08003fd8 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fd8:	4b4a      	ldr	r3, [pc, #296]	@ (8004104 <ADC_Init+0x12c>)
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003fe0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	6841      	ldr	r1, [r0, #4]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fea:	6802      	ldr	r2, [r0, #0]
 8003fec:	6853      	ldr	r3, [r2, #4]
 8003fee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ff2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ff4:	6802      	ldr	r2, [r0, #0]
 8003ff6:	6853      	ldr	r3, [r2, #4]
 8003ff8:	6901      	ldr	r1, [r0, #16]
 8003ffa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ffe:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004000:	6802      	ldr	r2, [r0, #0]
 8004002:	6853      	ldr	r3, [r2, #4]
 8004004:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8004008:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800400a:	6802      	ldr	r2, [r0, #0]
 800400c:	6853      	ldr	r3, [r2, #4]
 800400e:	6881      	ldr	r1, [r0, #8]
 8004010:	430b      	orrs	r3, r1
 8004012:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004014:	6802      	ldr	r2, [r0, #0]
 8004016:	6893      	ldr	r3, [r2, #8]
 8004018:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800401c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800401e:	6802      	ldr	r2, [r0, #0]
 8004020:	6893      	ldr	r3, [r2, #8]
 8004022:	68c1      	ldr	r1, [r0, #12]
 8004024:	430b      	orrs	r3, r1
 8004026:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004028:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800402a:	4b37      	ldr	r3, [pc, #220]	@ (8004108 <ADC_Init+0x130>)
 800402c:	429a      	cmp	r2, r3
 800402e:	d057      	beq.n	80040e0 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004030:	6802      	ldr	r2, [r0, #0]
 8004032:	6893      	ldr	r3, [r2, #8]
 8004034:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8004038:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800403a:	6802      	ldr	r2, [r0, #0]
 800403c:	6893      	ldr	r3, [r2, #8]
 800403e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004040:	430b      	orrs	r3, r1
 8004042:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004044:	6802      	ldr	r2, [r0, #0]
 8004046:	6893      	ldr	r3, [r2, #8]
 8004048:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800404c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800404e:	6802      	ldr	r2, [r0, #0]
 8004050:	6893      	ldr	r3, [r2, #8]
 8004052:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004054:	430b      	orrs	r3, r1
 8004056:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004058:	6802      	ldr	r2, [r0, #0]
 800405a:	6893      	ldr	r3, [r2, #8]
 800405c:	f023 0302 	bic.w	r3, r3, #2
 8004060:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004062:	6802      	ldr	r2, [r0, #0]
 8004064:	6893      	ldr	r3, [r2, #8]
 8004066:	7e01      	ldrb	r1, [r0, #24]
 8004068:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800406c:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800406e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d03f      	beq.n	80040f6 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004076:	6802      	ldr	r2, [r0, #0]
 8004078:	6853      	ldr	r3, [r2, #4]
 800407a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800407e:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004080:	6802      	ldr	r2, [r0, #0]
 8004082:	6853      	ldr	r3, [r2, #4]
 8004084:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004088:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800408a:	6801      	ldr	r1, [r0, #0]
 800408c:	684b      	ldr	r3, [r1, #4]
 800408e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8004090:	3a01      	subs	r2, #1
 8004092:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8004096:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004098:	6802      	ldr	r2, [r0, #0]
 800409a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800409c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80040a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040a2:	6801      	ldr	r1, [r0, #0]
 80040a4:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80040a6:	69c2      	ldr	r2, [r0, #28]
 80040a8:	3a01      	subs	r2, #1
 80040aa:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80040ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040b0:	6802      	ldr	r2, [r0, #0]
 80040b2:	6893      	ldr	r3, [r2, #8]
 80040b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040b8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040ba:	6802      	ldr	r2, [r0, #0]
 80040bc:	6893      	ldr	r3, [r2, #8]
 80040be:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 80040c2:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80040c6:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040c8:	6802      	ldr	r2, [r0, #0]
 80040ca:	6893      	ldr	r3, [r2, #8]
 80040cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040d0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040d2:	6802      	ldr	r2, [r0, #0]
 80040d4:	6893      	ldr	r3, [r2, #8]
 80040d6:	6941      	ldr	r1, [r0, #20]
 80040d8:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80040dc:	6093      	str	r3, [r2, #8]
}
 80040de:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040e0:	6802      	ldr	r2, [r0, #0]
 80040e2:	6893      	ldr	r3, [r2, #8]
 80040e4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80040e8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040ea:	6802      	ldr	r2, [r0, #0]
 80040ec:	6893      	ldr	r3, [r2, #8]
 80040ee:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80040f2:	6093      	str	r3, [r2, #8]
 80040f4:	e7b0      	b.n	8004058 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040f6:	6802      	ldr	r2, [r0, #0]
 80040f8:	6853      	ldr	r3, [r2, #4]
 80040fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040fe:	6053      	str	r3, [r2, #4]
 8004100:	e7ca      	b.n	8004098 <ADC_Init+0xc0>
 8004102:	bf00      	nop
 8004104:	40012300 	.word	0x40012300
 8004108:	0f000001 	.word	0x0f000001

0800410c <HAL_ADC_Init>:
  if (hadc == NULL)
 800410c:	b338      	cbz	r0, 800415e <HAL_ADC_Init+0x52>
{
 800410e:	b510      	push	{r4, lr}
 8004110:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004112:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004114:	b143      	cbz	r3, 8004128 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004116:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004118:	f013 0f10 	tst.w	r3, #16
 800411c:	d00b      	beq.n	8004136 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800411e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8004120:	2300      	movs	r3, #0
 8004122:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004126:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8004128:	f7fc fdd6 	bl	8000cd8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800412c:	2300      	movs	r3, #0
 800412e:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8004130:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8004134:	e7ef      	b.n	8004116 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8004136:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004138:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800413c:	f023 0302 	bic.w	r3, r3, #2
 8004140:	f043 0302 	orr.w	r3, r3, #2
 8004144:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8004146:	4620      	mov	r0, r4
 8004148:	f7ff ff46 	bl	8003fd8 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 800414c:	2000      	movs	r0, #0
 800414e:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004150:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004152:	f023 0303 	bic.w	r3, r3, #3
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	6423      	str	r3, [r4, #64]	@ 0x40
 800415c:	e7e0      	b.n	8004120 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800415e:	2001      	movs	r0, #1
}
 8004160:	4770      	bx	lr
	...

08004164 <HAL_ADC_Start_DMA>:
{
 8004164:	b510      	push	{r4, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 800416a:	2200      	movs	r2, #0
 800416c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800416e:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004172:	2a01      	cmp	r2, #1
 8004174:	f000 8094 	beq.w	80042a0 <HAL_ADC_Start_DMA+0x13c>
 8004178:	4604      	mov	r4, r0
 800417a:	2201      	movs	r2, #1
 800417c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004180:	6802      	ldr	r2, [r0, #0]
 8004182:	6890      	ldr	r0, [r2, #8]
 8004184:	f010 0f01 	tst.w	r0, #1
 8004188:	d113      	bne.n	80041b2 <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 800418a:	6890      	ldr	r0, [r2, #8]
 800418c:	f040 0001 	orr.w	r0, r0, #1
 8004190:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004192:	4a46      	ldr	r2, [pc, #280]	@ (80042ac <HAL_ADC_Start_DMA+0x148>)
 8004194:	6810      	ldr	r0, [r2, #0]
 8004196:	4a46      	ldr	r2, [pc, #280]	@ (80042b0 <HAL_ADC_Start_DMA+0x14c>)
 8004198:	fba2 2000 	umull	r2, r0, r2, r0
 800419c:	0c80      	lsrs	r0, r0, #18
 800419e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80041a2:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 80041a4:	e002      	b.n	80041ac <HAL_ADC_Start_DMA+0x48>
      counter--;
 80041a6:	9801      	ldr	r0, [sp, #4]
 80041a8:	3801      	subs	r0, #1
 80041aa:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 80041ac:	9801      	ldr	r0, [sp, #4]
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d1f9      	bne.n	80041a6 <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80041b2:	6822      	ldr	r2, [r4, #0]
 80041b4:	6890      	ldr	r0, [r2, #8]
 80041b6:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80041ba:	d003      	beq.n	80041c4 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80041bc:	6890      	ldr	r0, [r2, #8]
 80041be:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 80041c2:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	6890      	ldr	r0, [r2, #8]
 80041c8:	f010 0f01 	tst.w	r0, #1
 80041cc:	d05d      	beq.n	800428a <HAL_ADC_Start_DMA+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 80041ce:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80041d0:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 80041d4:	f020 0001 	bic.w	r0, r0, #1
 80041d8:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 80041dc:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80041de:	6852      	ldr	r2, [r2, #4]
 80041e0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80041e4:	d005      	beq.n	80041f2 <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80041e6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80041e8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80041ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041f0:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041f2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80041f4:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 80041f8:	d034      	beq.n	8004264 <HAL_ADC_Start_DMA+0x100>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041fa:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80041fc:	f022 0206 	bic.w	r2, r2, #6
 8004200:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8004202:	2200      	movs	r2, #0
 8004204:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004208:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800420a:	482a      	ldr	r0, [pc, #168]	@ (80042b4 <HAL_ADC_Start_DMA+0x150>)
 800420c:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800420e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004210:	4829      	ldr	r0, [pc, #164]	@ (80042b8 <HAL_ADC_Start_DMA+0x154>)
 8004212:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004214:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004216:	4829      	ldr	r0, [pc, #164]	@ (80042bc <HAL_ADC_Start_DMA+0x158>)
 8004218:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800421a:	6822      	ldr	r2, [r4, #0]
 800421c:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8004220:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004222:	6820      	ldr	r0, [r4, #0]
 8004224:	6842      	ldr	r2, [r0, #4]
 8004226:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800422a:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800422c:	6820      	ldr	r0, [r4, #0]
 800422e:	6882      	ldr	r2, [r0, #8]
 8004230:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004234:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004236:	6820      	ldr	r0, [r4, #0]
 8004238:	460a      	mov	r2, r1
 800423a:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 800423e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004240:	f000 fbb2 	bl	80049a8 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004244:	4b1e      	ldr	r3, [pc, #120]	@ (80042c0 <HAL_ADC_Start_DMA+0x15c>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f013 0f1f 	tst.w	r3, #31
 800424c:	d10d      	bne.n	800426a <HAL_ADC_Start_DMA+0x106>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8004256:	d125      	bne.n	80042a4 <HAL_ADC_Start_DMA+0x140>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800425e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004260:	2000      	movs	r0, #0
 8004262:	e01b      	b.n	800429c <HAL_ADC_Start_DMA+0x138>
      ADC_CLEAR_ERRORCODE(hadc);
 8004264:	2200      	movs	r2, #0
 8004266:	6462      	str	r2, [r4, #68]	@ 0x44
 8004268:	e7cb      	b.n	8004202 <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	4a15      	ldr	r2, [pc, #84]	@ (80042c4 <HAL_ADC_Start_DMA+0x160>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d001      	beq.n	8004276 <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 8004272:	2000      	movs	r0, #0
 8004274:	e012      	b.n	800429c <HAL_ADC_Start_DMA+0x138>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800427c:	d114      	bne.n	80042a8 <HAL_ADC_Start_DMA+0x144>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004284:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004286:	2000      	movs	r0, #0
 8004288:	e008      	b.n	800429c <HAL_ADC_Start_DMA+0x138>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800428a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800428c:	f043 0310 	orr.w	r3, r3, #16
 8004290:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004292:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 800429a:	2000      	movs	r0, #0
}
 800429c:	b002      	add	sp, #8
 800429e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80042a0:	2002      	movs	r0, #2
 80042a2:	e7fb      	b.n	800429c <HAL_ADC_Start_DMA+0x138>
  return HAL_OK;
 80042a4:	2000      	movs	r0, #0
 80042a6:	e7f9      	b.n	800429c <HAL_ADC_Start_DMA+0x138>
 80042a8:	2000      	movs	r0, #0
 80042aa:	e7f7      	b.n	800429c <HAL_ADC_Start_DMA+0x138>
 80042ac:	20000070 	.word	0x20000070
 80042b0:	431bde83 	.word	0x431bde83
 80042b4:	080042ed 	.word	0x080042ed
 80042b8:	080042cb 	.word	0x080042cb
 80042bc:	080042d7 	.word	0x080042d7
 80042c0:	40012300 	.word	0x40012300
 80042c4:	40012000 	.word	0x40012000

080042c8 <HAL_ADC_ConvHalfCpltCallback>:
}
 80042c8:	4770      	bx	lr

080042ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042ca:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042cc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80042ce:	f7ff fffb 	bl	80042c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042d2:	bd08      	pop	{r3, pc}

080042d4 <HAL_ADC_ErrorCallback>:
}
 80042d4:	4770      	bx	lr

080042d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042d6:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80042da:	2340      	movs	r3, #64	@ 0x40
 80042dc:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80042de:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80042e0:	f043 0304 	orr.w	r3, r3, #4
 80042e4:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042e6:	f7ff fff5 	bl	80042d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ea:	bd08      	pop	{r3, pc}

080042ec <ADC_DMAConvCplt>:
{
 80042ec:	b508      	push	{r3, lr}
 80042ee:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80042f2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80042f4:	f012 0f50 	tst.w	r2, #80	@ 0x50
 80042f8:	d125      	bne.n	8004346 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042fa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80042fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004300:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004302:	6803      	ldr	r3, [r0, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800430a:	d119      	bne.n	8004340 <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800430c:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800430e:	b9ba      	cbnz	r2, 8004340 <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004312:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8004316:	d003      	beq.n	8004320 <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004318:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800431a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800431e:	d10f      	bne.n	8004340 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	f022 0220 	bic.w	r2, r2, #32
 8004326:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004328:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800432a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800432e:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004330:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004332:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8004336:	d103      	bne.n	8004340 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004338:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8004340:	f7fc fd42 	bl	8000dc8 <HAL_ADC_ConvCpltCallback>
}
 8004344:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004346:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004348:	f012 0f10 	tst.w	r2, #16
 800434c:	d104      	bne.n	8004358 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800434e:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8004350:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004352:	4618      	mov	r0, r3
 8004354:	4790      	blx	r2
}
 8004356:	e7f5      	b.n	8004344 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8004358:	f7ff ffbc 	bl	80042d4 <HAL_ADC_ErrorCallback>
 800435c:	e7f2      	b.n	8004344 <ADC_DMAConvCplt+0x58>
	...

08004360 <HAL_ADC_ConfigChannel>:
{
 8004360:	b430      	push	{r4, r5}
 8004362:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8004364:	2200      	movs	r2, #0
 8004366:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004368:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800436c:	2a01      	cmp	r2, #1
 800436e:	f000 80b6 	beq.w	80044de <HAL_ADC_ConfigChannel+0x17e>
 8004372:	4603      	mov	r3, r0
 8004374:	2201      	movs	r2, #1
 8004376:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800437a:	680a      	ldr	r2, [r1, #0]
 800437c:	2a09      	cmp	r2, #9
 800437e:	d940      	bls.n	8004402 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004380:	6804      	ldr	r4, [r0, #0]
 8004382:	68e0      	ldr	r0, [r4, #12]
 8004384:	b292      	uxth	r2, r2
 8004386:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800438a:	3a1e      	subs	r2, #30
 800438c:	f04f 0c07 	mov.w	ip, #7
 8004390:	fa0c f202 	lsl.w	r2, ip, r2
 8004394:	ea20 0202 	bic.w	r2, r0, r2
 8004398:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800439a:	681c      	ldr	r4, [r3, #0]
 800439c:	68e0      	ldr	r0, [r4, #12]
 800439e:	880a      	ldrh	r2, [r1, #0]
 80043a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80043a4:	3a1e      	subs	r2, #30
 80043a6:	688d      	ldr	r5, [r1, #8]
 80043a8:	fa05 f202 	lsl.w	r2, r5, r2
 80043ac:	4302      	orrs	r2, r0
 80043ae:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 80043b0:	684a      	ldr	r2, [r1, #4]
 80043b2:	2a06      	cmp	r2, #6
 80043b4:	d83c      	bhi.n	8004430 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043b6:	681c      	ldr	r4, [r3, #0]
 80043b8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80043ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80043be:	3a05      	subs	r2, #5
 80043c0:	f04f 0c1f 	mov.w	ip, #31
 80043c4:	fa0c f202 	lsl.w	r2, ip, r2
 80043c8:	ea20 0202 	bic.w	r2, r0, r2
 80043cc:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043ce:	681c      	ldr	r4, [r3, #0]
 80043d0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80043d2:	684a      	ldr	r2, [r1, #4]
 80043d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80043d8:	3a05      	subs	r2, #5
 80043da:	f8b1 c000 	ldrh.w	ip, [r1]
 80043de:	fa0c f202 	lsl.w	r2, ip, r2
 80043e2:	4302      	orrs	r2, r0
 80043e4:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	4a3e      	ldr	r2, [pc, #248]	@ (80044e4 <HAL_ADC_ConfigChannel+0x184>)
 80043ea:	4290      	cmp	r0, r2
 80043ec:	d050      	beq.n	8004490 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	4a3c      	ldr	r2, [pc, #240]	@ (80044e4 <HAL_ADC_ConfigChannel+0x184>)
 80043f2:	4290      	cmp	r0, r2
 80043f4:	d055      	beq.n	80044a2 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 80043f6:	2000      	movs	r0, #0
 80043f8:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 80043fc:	b002      	add	sp, #8
 80043fe:	bc30      	pop	{r4, r5}
 8004400:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004402:	6804      	ldr	r4, [r0, #0]
 8004404:	6920      	ldr	r0, [r4, #16]
 8004406:	b292      	uxth	r2, r2
 8004408:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800440c:	f04f 0c07 	mov.w	ip, #7
 8004410:	fa0c f202 	lsl.w	r2, ip, r2
 8004414:	ea20 0202 	bic.w	r2, r0, r2
 8004418:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800441a:	681c      	ldr	r4, [r3, #0]
 800441c:	6920      	ldr	r0, [r4, #16]
 800441e:	880a      	ldrh	r2, [r1, #0]
 8004420:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004424:	688d      	ldr	r5, [r1, #8]
 8004426:	fa05 f202 	lsl.w	r2, r5, r2
 800442a:	4302      	orrs	r2, r0
 800442c:	6122      	str	r2, [r4, #16]
 800442e:	e7bf      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8004430:	2a0c      	cmp	r2, #12
 8004432:	d816      	bhi.n	8004462 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004434:	681d      	ldr	r5, [r3, #0]
 8004436:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8004438:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800443c:	3a23      	subs	r2, #35	@ 0x23
 800443e:	241f      	movs	r4, #31
 8004440:	fa04 f202 	lsl.w	r2, r4, r2
 8004444:	ea20 0202 	bic.w	r2, r0, r2
 8004448:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800444a:	681d      	ldr	r5, [r3, #0]
 800444c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800444e:	684a      	ldr	r2, [r1, #4]
 8004450:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004454:	3a23      	subs	r2, #35	@ 0x23
 8004456:	880c      	ldrh	r4, [r1, #0]
 8004458:	fa04 f202 	lsl.w	r2, r4, r2
 800445c:	4302      	orrs	r2, r0
 800445e:	632a      	str	r2, [r5, #48]	@ 0x30
 8004460:	e7c1      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004462:	681d      	ldr	r5, [r3, #0]
 8004464:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8004466:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800446a:	3a41      	subs	r2, #65	@ 0x41
 800446c:	241f      	movs	r4, #31
 800446e:	fa04 f202 	lsl.w	r2, r4, r2
 8004472:	ea20 0202 	bic.w	r2, r0, r2
 8004476:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004478:	681d      	ldr	r5, [r3, #0]
 800447a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800447c:	684a      	ldr	r2, [r1, #4]
 800447e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004482:	3a41      	subs	r2, #65	@ 0x41
 8004484:	880c      	ldrh	r4, [r1, #0]
 8004486:	fa04 f202 	lsl.w	r2, r4, r2
 800448a:	4302      	orrs	r2, r0
 800448c:	62ea      	str	r2, [r5, #44]	@ 0x2c
 800448e:	e7aa      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004490:	680a      	ldr	r2, [r1, #0]
 8004492:	2a12      	cmp	r2, #18
 8004494:	d1ab      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004496:	4814      	ldr	r0, [pc, #80]	@ (80044e8 <HAL_ADC_ConfigChannel+0x188>)
 8004498:	6842      	ldr	r2, [r0, #4]
 800449a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800449e:	6042      	str	r2, [r0, #4]
 80044a0:	e7a5      	b.n	80043ee <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044a2:	680a      	ldr	r2, [r1, #0]
 80044a4:	3a10      	subs	r2, #16
 80044a6:	2a01      	cmp	r2, #1
 80044a8:	d8a5      	bhi.n	80043f6 <HAL_ADC_ConfigChannel+0x96>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044aa:	480f      	ldr	r0, [pc, #60]	@ (80044e8 <HAL_ADC_ConfigChannel+0x188>)
 80044ac:	6842      	ldr	r2, [r0, #4]
 80044ae:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80044b2:	6042      	str	r2, [r0, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044b4:	680a      	ldr	r2, [r1, #0]
 80044b6:	2a10      	cmp	r2, #16
 80044b8:	d19d      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044ba:	4a0c      	ldr	r2, [pc, #48]	@ (80044ec <HAL_ADC_ConfigChannel+0x18c>)
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	490c      	ldr	r1, [pc, #48]	@ (80044f0 <HAL_ADC_ConfigChannel+0x190>)
 80044c0:	fba1 1202 	umull	r1, r2, r1, r2
 80044c4:	0c92      	lsrs	r2, r2, #18
 80044c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80044ca:	0052      	lsls	r2, r2, #1
 80044cc:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 80044ce:	e002      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x176>
        counter--;
 80044d0:	9a01      	ldr	r2, [sp, #4]
 80044d2:	3a01      	subs	r2, #1
 80044d4:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 80044d6:	9a01      	ldr	r2, [sp, #4]
 80044d8:	2a00      	cmp	r2, #0
 80044da:	d1f9      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x170>
 80044dc:	e78b      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 80044de:	2002      	movs	r0, #2
 80044e0:	e78c      	b.n	80043fc <HAL_ADC_ConfigChannel+0x9c>
 80044e2:	bf00      	nop
 80044e4:	40012000 	.word	0x40012000
 80044e8:	40012300 	.word	0x40012300
 80044ec:	20000070 	.word	0x20000070
 80044f0:	431bde83 	.word	0x431bde83

080044f4 <HAL_ADCEx_InjectedConfigChannel>:
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044f4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80044f8:	2a01      	cmp	r2, #1
 80044fa:	f000 80f2 	beq.w	80046e2 <HAL_ADCEx_InjectedConfigChannel+0x1ee>
{
 80044fe:	b430      	push	{r4, r5}
 8004500:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004502:	2201      	movs	r2, #1
 8004504:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004508:	680a      	ldr	r2, [r1, #0]
 800450a:	2a09      	cmp	r2, #9
 800450c:	f240 8089 	bls.w	8004622 <HAL_ADCEx_InjectedConfigChannel+0x12e>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004510:	6805      	ldr	r5, [r0, #0]
 8004512:	68e8      	ldr	r0, [r5, #12]
 8004514:	b292      	uxth	r2, r2
 8004516:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800451a:	3a1e      	subs	r2, #30
 800451c:	2407      	movs	r4, #7
 800451e:	fa04 f202 	lsl.w	r2, r4, r2
 8004522:	ea20 0202 	bic.w	r2, r0, r2
 8004526:	60ea      	str	r2, [r5, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	68e8      	ldr	r0, [r5, #12]
 800452c:	688c      	ldr	r4, [r1, #8]
 800452e:	880a      	ldrh	r2, [r1, #0]
 8004530:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004534:	3a1e      	subs	r2, #30
 8004536:	4094      	lsls	r4, r2
 8004538:	4320      	orrs	r0, r4
 800453a:	60e8      	str	r0, [r5, #12]
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8004540:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004544:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004546:	681c      	ldr	r4, [r3, #0]
 8004548:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800454a:	6908      	ldr	r0, [r1, #16]
 800454c:	3801      	subs	r0, #1
 800454e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8004552:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004554:	681c      	ldr	r4, [r3, #0]
 8004556:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004558:	684a      	ldr	r2, [r1, #4]
 800455a:	690d      	ldr	r5, [r1, #16]
 800455c:	1b52      	subs	r2, r2, r5
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	3203      	adds	r2, #3
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004568:	f04f 0c1f 	mov.w	ip, #31
 800456c:	fa0c f202 	lsl.w	r2, ip, r2
 8004570:	ea20 0202 	bic.w	r2, r0, r2
 8004574:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004576:	681c      	ldr	r4, [r3, #0]
 8004578:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800457a:	684a      	ldr	r2, [r1, #4]
 800457c:	690d      	ldr	r5, [r1, #16]
 800457e:	1b52      	subs	r2, r2, r5
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	3203      	adds	r2, #3
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800458a:	f8b1 c000 	ldrh.w	ip, [r1]
 800458e:	fa0c f202 	lsl.w	r2, ip, r2
 8004592:	4302      	orrs	r2, r0
 8004594:	63a2      	str	r2, [r4, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004596:	6988      	ldr	r0, [r1, #24]
 8004598:	4a53      	ldr	r2, [pc, #332]	@ (80046e8 <HAL_ADCEx_InjectedConfigChannel+0x1f4>)
 800459a:	4290      	cmp	r0, r2
 800459c:	d056      	beq.n	800464c <HAL_ADCEx_InjectedConfigChannel+0x158>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	6882      	ldr	r2, [r0, #8]
 80045a2:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80045a6:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	6882      	ldr	r2, [r0, #8]
 80045ac:	698c      	ldr	r4, [r1, #24]
 80045ae:	4322      	orrs	r2, r4
 80045b0:	6082      	str	r2, [r0, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	6882      	ldr	r2, [r0, #8]
 80045b6:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80045ba:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	6882      	ldr	r2, [r0, #8]
 80045c0:	69cc      	ldr	r4, [r1, #28]
 80045c2:	4322      	orrs	r2, r4
 80045c4:	6082      	str	r2, [r0, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80045c6:	7d4a      	ldrb	r2, [r1, #21]
 80045c8:	2a00      	cmp	r2, #0
 80045ca:	d04a      	beq.n	8004662 <HAL_ADCEx_InjectedConfigChannel+0x16e>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	6842      	ldr	r2, [r0, #4]
 80045d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045d4:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80045d6:	7d0a      	ldrb	r2, [r1, #20]
 80045d8:	2a00      	cmp	r2, #0
 80045da:	d048      	beq.n	800466e <HAL_ADCEx_InjectedConfigChannel+0x17a>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	6842      	ldr	r2, [r0, #4]
 80045e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045e4:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }

  switch (sConfigInjected->InjectedRank)
 80045e6:	684a      	ldr	r2, [r1, #4]
 80045e8:	2a02      	cmp	r2, #2
 80045ea:	d046      	beq.n	800467a <HAL_ADCEx_InjectedConfigChannel+0x186>
 80045ec:	2a03      	cmp	r2, #3
 80045ee:	d04f      	beq.n	8004690 <HAL_ADCEx_InjectedConfigChannel+0x19c>
 80045f0:	2a01      	cmp	r2, #1
 80045f2:	d158      	bne.n	80046a6 <HAL_ADCEx_InjectedConfigChannel+0x1b2>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	6942      	ldr	r2, [r0, #20]
 80045f8:	f36f 020b 	bfc	r2, #0, #12
 80045fc:	6142      	str	r2, [r0, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	6942      	ldr	r2, [r0, #20]
 8004602:	68cc      	ldr	r4, [r1, #12]
 8004604:	4322      	orrs	r2, r4
 8004606:	6142      	str	r2, [r0, #20]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	4a38      	ldr	r2, [pc, #224]	@ (80046ec <HAL_ADCEx_InjectedConfigChannel+0x1f8>)
 800460c:	4290      	cmp	r0, r2
 800460e:	d055      	beq.n	80046bc <HAL_ADCEx_InjectedConfigChannel+0x1c8>
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	4a36      	ldr	r2, [pc, #216]	@ (80046ec <HAL_ADCEx_InjectedConfigChannel+0x1f8>)
 8004614:	4290      	cmp	r0, r2
 8004616:	d05a      	beq.n	80046ce <HAL_ADCEx_InjectedConfigChannel+0x1da>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004618:	2000      	movs	r0, #0
 800461a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
}
 800461e:	bc30      	pop	{r4, r5}
 8004620:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004622:	6805      	ldr	r5, [r0, #0]
 8004624:	6928      	ldr	r0, [r5, #16]
 8004626:	b292      	uxth	r2, r2
 8004628:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800462c:	2407      	movs	r4, #7
 800462e:	fa04 f202 	lsl.w	r2, r4, r2
 8004632:	ea20 0202 	bic.w	r2, r0, r2
 8004636:	612a      	str	r2, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004638:	681d      	ldr	r5, [r3, #0]
 800463a:	6928      	ldr	r0, [r5, #16]
 800463c:	688c      	ldr	r4, [r1, #8]
 800463e:	880a      	ldrh	r2, [r1, #0]
 8004640:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004644:	4094      	lsls	r4, r2
 8004646:	4320      	orrs	r0, r4
 8004648:	6128      	str	r0, [r5, #16]
 800464a:	e777      	b.n	800453c <HAL_ADCEx_InjectedConfigChannel+0x48>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	6882      	ldr	r2, [r0, #8]
 8004650:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004654:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	6882      	ldr	r2, [r0, #8]
 800465a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800465e:	6082      	str	r2, [r0, #8]
 8004660:	e7b1      	b.n	80045c6 <HAL_ADCEx_InjectedConfigChannel+0xd2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	6842      	ldr	r2, [r0, #4]
 8004666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800466a:	6042      	str	r2, [r0, #4]
 800466c:	e7b3      	b.n	80045d6 <HAL_ADCEx_InjectedConfigChannel+0xe2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	6842      	ldr	r2, [r0, #4]
 8004672:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004676:	6042      	str	r2, [r0, #4]
 8004678:	e7b5      	b.n	80045e6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	6982      	ldr	r2, [r0, #24]
 800467e:	f36f 020b 	bfc	r2, #0, #12
 8004682:	6182      	str	r2, [r0, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	6982      	ldr	r2, [r0, #24]
 8004688:	68cc      	ldr	r4, [r1, #12]
 800468a:	4322      	orrs	r2, r4
 800468c:	6182      	str	r2, [r0, #24]
      break;
 800468e:	e7bb      	b.n	8004608 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	69c2      	ldr	r2, [r0, #28]
 8004694:	f36f 020b 	bfc	r2, #0, #12
 8004698:	61c2      	str	r2, [r0, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	69c2      	ldr	r2, [r0, #28]
 800469e:	68cc      	ldr	r4, [r1, #12]
 80046a0:	4322      	orrs	r2, r4
 80046a2:	61c2      	str	r2, [r0, #28]
      break;
 80046a4:	e7b0      	b.n	8004608 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	6a02      	ldr	r2, [r0, #32]
 80046aa:	f36f 020b 	bfc	r2, #0, #12
 80046ae:	6202      	str	r2, [r0, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	6a02      	ldr	r2, [r0, #32]
 80046b4:	68cc      	ldr	r4, [r1, #12]
 80046b6:	4322      	orrs	r2, r4
 80046b8:	6202      	str	r2, [r0, #32]
      break;
 80046ba:	e7a5      	b.n	8004608 <HAL_ADCEx_InjectedConfigChannel+0x114>
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80046bc:	680a      	ldr	r2, [r1, #0]
 80046be:	2a12      	cmp	r2, #18
 80046c0:	d1a6      	bne.n	8004610 <HAL_ADCEx_InjectedConfigChannel+0x11c>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80046c2:	480b      	ldr	r0, [pc, #44]	@ (80046f0 <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 80046c4:	6842      	ldr	r2, [r0, #4]
 80046c6:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80046ca:	6042      	str	r2, [r0, #4]
 80046cc:	e7a0      	b.n	8004610 <HAL_ADCEx_InjectedConfigChannel+0x11c>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80046ce:	680a      	ldr	r2, [r1, #0]
 80046d0:	3a10      	subs	r2, #16
 80046d2:	2a01      	cmp	r2, #1
 80046d4:	d8a0      	bhi.n	8004618 <HAL_ADCEx_InjectedConfigChannel+0x124>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80046d6:	4906      	ldr	r1, [pc, #24]	@ (80046f0 <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 80046d8:	684a      	ldr	r2, [r1, #4]
 80046da:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80046de:	604a      	str	r2, [r1, #4]
 80046e0:	e79a      	b.n	8004618 <HAL_ADCEx_InjectedConfigChannel+0x124>
  __HAL_LOCK(hadc);
 80046e2:	2002      	movs	r0, #2
}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	000f0001 	.word	0x000f0001
 80046ec:	40012000 	.word	0x40012000
 80046f0:	40012300 	.word	0x40012300

080046f4 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80046f4:	2800      	cmp	r0, #0
 80046f6:	db07      	blt.n	8004708 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046f8:	f000 021f 	and.w	r2, r0, #31
 80046fc:	0940      	lsrs	r0, r0, #5
 80046fe:	2301      	movs	r3, #1
 8004700:	4093      	lsls	r3, r2
 8004702:	4a02      	ldr	r2, [pc, #8]	@ (800470c <__NVIC_EnableIRQ+0x18>)
 8004704:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	e000e100 	.word	0xe000e100

08004710 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8004710:	2800      	cmp	r0, #0
 8004712:	db08      	blt.n	8004726 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004714:	0109      	lsls	r1, r1, #4
 8004716:	b2c9      	uxtb	r1, r1
 8004718:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800471c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004720:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8004724:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004726:	f000 000f 	and.w	r0, r0, #15
 800472a:	0109      	lsls	r1, r1, #4
 800472c:	b2c9      	uxtb	r1, r1
 800472e:	4b01      	ldr	r3, [pc, #4]	@ (8004734 <__NVIC_SetPriority+0x24>)
 8004730:	5419      	strb	r1, [r3, r0]
  }
}
 8004732:	4770      	bx	lr
 8004734:	e000ed14 	.word	0xe000ed14

08004738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004738:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800473a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800473e:	f1c0 0c07 	rsb	ip, r0, #7
 8004742:	f1bc 0f04 	cmp.w	ip, #4
 8004746:	bf28      	it	cs
 8004748:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800474c:	1d03      	adds	r3, r0, #4
 800474e:	2b06      	cmp	r3, #6
 8004750:	d90f      	bls.n	8004772 <NVIC_EncodePriority+0x3a>
 8004752:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004754:	f04f 3eff 	mov.w	lr, #4294967295
 8004758:	fa0e f00c 	lsl.w	r0, lr, ip
 800475c:	ea21 0100 	bic.w	r1, r1, r0
 8004760:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004762:	fa0e fe03 	lsl.w	lr, lr, r3
 8004766:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800476a:	ea41 0002 	orr.w	r0, r1, r2
 800476e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004772:	2300      	movs	r3, #0
 8004774:	e7ee      	b.n	8004754 <NVIC_EncodePriority+0x1c>
	...

08004778 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004778:	4a07      	ldr	r2, [pc, #28]	@ (8004798 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800477a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800477c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004780:	041b      	lsls	r3, r3, #16
 8004782:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004784:	0200      	lsls	r0, r0, #8
 8004786:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800478a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800478c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004794:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004796:	4770      	bx	lr
 8004798:	e000ed00 	.word	0xe000ed00

0800479c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800479c:	b510      	push	{r4, lr}
 800479e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047a0:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <HAL_NVIC_SetPriority+0x1c>)
 80047a2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047a4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80047a8:	f7ff ffc6 	bl	8004738 <NVIC_EncodePriority>
 80047ac:	4601      	mov	r1, r0
 80047ae:	4620      	mov	r0, r4
 80047b0:	f7ff ffae 	bl	8004710 <__NVIC_SetPriority>
}
 80047b4:	bd10      	pop	{r4, pc}
 80047b6:	bf00      	nop
 80047b8:	e000ed00 	.word	0xe000ed00

080047bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047bc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047be:	f7ff ff99 	bl	80046f4 <__NVIC_EnableIRQ>
}
 80047c2:	bd08      	pop	{r3, pc}

080047c4 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80047c4:	b158      	cbz	r0, 80047de <HAL_CRC_Init+0x1a>
{
 80047c6:	b510      	push	{r4, lr}
 80047c8:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80047ca:	7943      	ldrb	r3, [r0, #5]
 80047cc:	b11b      	cbz	r3, 80047d6 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80047ce:	2301      	movs	r3, #1
 80047d0:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80047d2:	2000      	movs	r0, #0
}
 80047d4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80047d6:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 80047d8:	f7fd f950 	bl	8001a7c <HAL_CRC_MspInit>
 80047dc:	e7f7      	b.n	80047ce <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 80047de:	2001      	movs	r0, #1
}
 80047e0:	4770      	bx	lr

080047e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e2:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047e4:	6805      	ldr	r5, [r0, #0]
 80047e6:	682c      	ldr	r4, [r5, #0]
 80047e8:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 80047ec:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047ee:	6804      	ldr	r4, [r0, #0]
 80047f0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047f2:	6883      	ldr	r3, [r0, #8]
 80047f4:	2b40      	cmp	r3, #64	@ 0x40
 80047f6:	d005      	beq.n	8004804 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80047f8:	6803      	ldr	r3, [r0, #0]
 80047fa:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80047fc:	6803      	ldr	r3, [r0, #0]
 80047fe:	60da      	str	r2, [r3, #12]
  }
}
 8004800:	bc30      	pop	{r4, r5}
 8004802:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8004804:	6803      	ldr	r3, [r0, #0]
 8004806:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8004808:	6803      	ldr	r3, [r0, #0]
 800480a:	60d9      	str	r1, [r3, #12]
 800480c:	e7f8      	b.n	8004800 <DMA_SetConfig+0x1e>
	...

08004810 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004810:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004812:	6803      	ldr	r3, [r0, #0]
 8004814:	b2d9      	uxtb	r1, r3
 8004816:	3910      	subs	r1, #16
 8004818:	4a0a      	ldr	r2, [pc, #40]	@ (8004844 <DMA_CalcBaseAndBitshift+0x34>)
 800481a:	fba2 4201 	umull	r4, r2, r2, r1
 800481e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004820:	4c09      	ldr	r4, [pc, #36]	@ (8004848 <DMA_CalcBaseAndBitshift+0x38>)
 8004822:	5ca2      	ldrb	r2, [r4, r2]
 8004824:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004826:	295f      	cmp	r1, #95	@ 0x5f
 8004828:	d907      	bls.n	800483a <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800482a:	f36f 0309 	bfc	r3, #0, #10
 800482e:	3304      	adds	r3, #4
 8004830:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8004832:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8004834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004838:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800483a:	f36f 0309 	bfc	r3, #0, #10
 800483e:	6583      	str	r3, [r0, #88]	@ 0x58
 8004840:	e7f7      	b.n	8004832 <DMA_CalcBaseAndBitshift+0x22>
 8004842:	bf00      	nop
 8004844:	aaaaaaab 	.word	0xaaaaaaab
 8004848:	0800c140 	.word	0x0800c140

0800484c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800484c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800484e:	6982      	ldr	r2, [r0, #24]
 8004850:	b992      	cbnz	r2, 8004878 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8004852:	2b01      	cmp	r3, #1
 8004854:	d00a      	beq.n	800486c <DMA_CheckFifoParam+0x20>
 8004856:	2b02      	cmp	r3, #2
 8004858:	d002      	beq.n	8004860 <DMA_CheckFifoParam+0x14>
 800485a:	b10b      	cbz	r3, 8004860 <DMA_CheckFifoParam+0x14>
 800485c:	2000      	movs	r0, #0
 800485e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004860:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004862:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004866:	d128      	bne.n	80048ba <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8004868:	2000      	movs	r0, #0
 800486a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800486c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800486e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004872:	d024      	beq.n	80048be <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8004874:	2000      	movs	r0, #0
 8004876:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004878:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800487c:	d009      	beq.n	8004892 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800487e:	2b02      	cmp	r3, #2
 8004880:	d925      	bls.n	80048ce <DMA_CheckFifoParam+0x82>
 8004882:	2b03      	cmp	r3, #3
 8004884:	d125      	bne.n	80048d2 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004886:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004888:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800488c:	d123      	bne.n	80048d6 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800488e:	2000      	movs	r0, #0
 8004890:	4770      	bx	lr
    switch (tmp)
 8004892:	2b03      	cmp	r3, #3
 8004894:	d803      	bhi.n	800489e <DMA_CheckFifoParam+0x52>
 8004896:	e8df f003 	tbb	[pc, r3]
 800489a:	0414      	.short	0x0414
 800489c:	0a14      	.short	0x0a14
 800489e:	2000      	movs	r0, #0
 80048a0:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048a2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80048a4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80048a8:	d10d      	bne.n	80048c6 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80048aa:	2000      	movs	r0, #0
 80048ac:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048ae:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80048b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048b4:	d009      	beq.n	80048ca <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80048b6:	2000      	movs	r0, #0
 80048b8:	4770      	bx	lr
        status = HAL_ERROR;
 80048ba:	2001      	movs	r0, #1
 80048bc:	4770      	bx	lr
        status = HAL_ERROR;
 80048be:	2001      	movs	r0, #1
 80048c0:	4770      	bx	lr
      status = HAL_ERROR;
 80048c2:	2001      	movs	r0, #1
 80048c4:	4770      	bx	lr
        status = HAL_ERROR;
 80048c6:	2001      	movs	r0, #1
 80048c8:	4770      	bx	lr
        status = HAL_ERROR;
 80048ca:	2001      	movs	r0, #1
 80048cc:	4770      	bx	lr
      status = HAL_ERROR;
 80048ce:	2001      	movs	r0, #1
 80048d0:	4770      	bx	lr
    switch (tmp)
 80048d2:	2000      	movs	r0, #0
 80048d4:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80048d6:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80048d8:	4770      	bx	lr
	...

080048dc <HAL_DMA_Init>:
{
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80048e0:	f7ff fb60 	bl	8003fa4 <HAL_GetTick>
  if(hdma == NULL)
 80048e4:	2c00      	cmp	r4, #0
 80048e6:	d05b      	beq.n	80049a0 <HAL_DMA_Init+0xc4>
 80048e8:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80048ea:	2302      	movs	r3, #2
 80048ec:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80048f0:	2300      	movs	r3, #0
 80048f2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80048f6:	6822      	ldr	r2, [r4, #0]
 80048f8:	6813      	ldr	r3, [r2, #0]
 80048fa:	f023 0301 	bic.w	r3, r3, #1
 80048fe:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	f012 0f01 	tst.w	r2, #1
 8004908:	d00a      	beq.n	8004920 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800490a:	f7ff fb4b 	bl	8003fa4 <HAL_GetTick>
 800490e:	1b43      	subs	r3, r0, r5
 8004910:	2b05      	cmp	r3, #5
 8004912:	d9f5      	bls.n	8004900 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004914:	2320      	movs	r3, #32
 8004916:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004918:	2003      	movs	r0, #3
 800491a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800491e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8004920:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004922:	4920      	ldr	r1, [pc, #128]	@ (80049a4 <HAL_DMA_Init+0xc8>)
 8004924:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004926:	6862      	ldr	r2, [r4, #4]
 8004928:	68a0      	ldr	r0, [r4, #8]
 800492a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800492c:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800492e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004930:	6920      	ldr	r0, [r4, #16]
 8004932:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004934:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004936:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004938:	69a0      	ldr	r0, [r4, #24]
 800493a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800493c:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800493e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004940:	6a20      	ldr	r0, [r4, #32]
 8004942:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004944:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004946:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004948:	2904      	cmp	r1, #4
 800494a:	d01e      	beq.n	800498a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 800494c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800494e:	6826      	ldr	r6, [r4, #0]
 8004950:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004952:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8004956:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004958:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800495a:	2b04      	cmp	r3, #4
 800495c:	d107      	bne.n	800496e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800495e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004960:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004962:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004964:	b11b      	cbz	r3, 800496e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004966:	4620      	mov	r0, r4
 8004968:	f7ff ff70 	bl	800484c <DMA_CheckFifoParam>
 800496c:	b990      	cbnz	r0, 8004994 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800496e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004970:	4620      	mov	r0, r4
 8004972:	f7ff ff4d 	bl	8004810 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004976:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004978:	233f      	movs	r3, #63	@ 0x3f
 800497a:	4093      	lsls	r3, r2
 800497c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800497e:	2000      	movs	r0, #0
 8004980:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004982:	2301      	movs	r3, #1
 8004984:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8004988:	e7c9      	b.n	800491e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800498a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800498c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800498e:	4301      	orrs	r1, r0
 8004990:	430a      	orrs	r2, r1
 8004992:	e7db      	b.n	800494c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004994:	2340      	movs	r3, #64	@ 0x40
 8004996:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004998:	2001      	movs	r0, #1
 800499a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 800499e:	e7be      	b.n	800491e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80049a0:	2001      	movs	r0, #1
 80049a2:	e7bc      	b.n	800491e <HAL_DMA_Init+0x42>
 80049a4:	f010803f 	.word	0xf010803f

080049a8 <HAL_DMA_Start_IT>:
{
 80049a8:	b538      	push	{r3, r4, r5, lr}
 80049aa:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ac:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 80049ae:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 80049b2:	2801      	cmp	r0, #1
 80049b4:	d02a      	beq.n	8004a0c <HAL_DMA_Start_IT+0x64>
 80049b6:	2001      	movs	r0, #1
 80049b8:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80049bc:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 80049c0:	2801      	cmp	r0, #1
 80049c2:	d004      	beq.n	80049ce <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 80049c4:	2300      	movs	r3, #0
 80049c6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 80049ca:	2002      	movs	r0, #2
}
 80049cc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ce:	2002      	movs	r0, #2
 80049d0:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049d4:	2000      	movs	r0, #0
 80049d6:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049d8:	4620      	mov	r0, r4
 80049da:	f7ff ff02 	bl	80047e2 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049de:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80049e0:	233f      	movs	r3, #63	@ 0x3f
 80049e2:	4093      	lsls	r3, r2
 80049e4:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80049e6:	6822      	ldr	r2, [r4, #0]
 80049e8:	6813      	ldr	r3, [r2, #0]
 80049ea:	f043 0316 	orr.w	r3, r3, #22
 80049ee:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80049f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049f2:	b123      	cbz	r3, 80049fe <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 80049f4:	6822      	ldr	r2, [r4, #0]
 80049f6:	6813      	ldr	r3, [r2, #0]
 80049f8:	f043 0308 	orr.w	r3, r3, #8
 80049fc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80049fe:	6822      	ldr	r2, [r4, #0]
 8004a00:	6813      	ldr	r3, [r2, #0]
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a08:	2000      	movs	r0, #0
 8004a0a:	e7df      	b.n	80049cc <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8004a0c:	2002      	movs	r0, #2
 8004a0e:	e7dd      	b.n	80049cc <HAL_DMA_Start_IT+0x24>

08004a10 <HAL_DMA_IRQHandler>:
{
 8004a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a12:	b083      	sub	sp, #12
 8004a14:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a1a:	4b72      	ldr	r3, [pc, #456]	@ (8004be4 <HAL_DMA_IRQHandler+0x1d4>)
 8004a1c:	681d      	ldr	r5, [r3, #0]
 8004a1e:	4b72      	ldr	r3, [pc, #456]	@ (8004be8 <HAL_DMA_IRQHandler+0x1d8>)
 8004a20:	fba3 3505 	umull	r3, r5, r3, r5
 8004a24:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a26:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8004a28:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a2a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	4093      	lsls	r3, r2
 8004a30:	4233      	tst	r3, r6
 8004a32:	d010      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a34:	6803      	ldr	r3, [r0, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	f012 0f04 	tst.w	r2, #4
 8004a3c:	d00b      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	f022 0204 	bic.w	r2, r2, #4
 8004a44:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a46:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8004a48:	2308      	movs	r3, #8
 8004a4a:	4093      	lsls	r3, r2
 8004a4c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a4e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a56:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004a58:	2301      	movs	r3, #1
 8004a5a:	4093      	lsls	r3, r2
 8004a5c:	4233      	tst	r3, r6
 8004a5e:	d009      	beq.n	8004a74 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a60:	6822      	ldr	r2, [r4, #0]
 8004a62:	6952      	ldr	r2, [r2, #20]
 8004a64:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8004a68:	d004      	beq.n	8004a74 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a6a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a6c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004a6e:	f043 0302 	orr.w	r3, r3, #2
 8004a72:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a74:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004a76:	2304      	movs	r3, #4
 8004a78:	4093      	lsls	r3, r2
 8004a7a:	4233      	tst	r3, r6
 8004a7c:	d009      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a7e:	6822      	ldr	r2, [r4, #0]
 8004a80:	6812      	ldr	r2, [r2, #0]
 8004a82:	f012 0f02 	tst.w	r2, #2
 8004a86:	d004      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a88:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a8a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a92:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004a94:	2310      	movs	r3, #16
 8004a96:	4093      	lsls	r3, r2
 8004a98:	4233      	tst	r3, r6
 8004a9a:	d024      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a9c:	6822      	ldr	r2, [r4, #0]
 8004a9e:	6812      	ldr	r2, [r2, #0]
 8004aa0:	f012 0f08 	tst.w	r2, #8
 8004aa4:	d01f      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004aa6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8004ab0:	d00d      	beq.n	8004ace <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8004ab8:	d104      	bne.n	8004ac4 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8004aba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004abc:	b19b      	cbz	r3, 8004ae6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8004abe:	4620      	mov	r0, r4
 8004ac0:	4798      	blx	r3
 8004ac2:	e010      	b.n	8004ae6 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ac4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004ac6:	b173      	cbz	r3, 8004ae6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8004ac8:	4620      	mov	r0, r4
 8004aca:	4798      	blx	r3
 8004acc:	e00b      	b.n	8004ae6 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8004ad4:	d103      	bne.n	8004ade <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	f022 0208 	bic.w	r2, r2, #8
 8004adc:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8004ade:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ae0:	b10b      	cbz	r3, 8004ae6 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ae6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004ae8:	2320      	movs	r3, #32
 8004aea:	4093      	lsls	r3, r2
 8004aec:	4233      	tst	r3, r6
 8004aee:	d054      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004af0:	6822      	ldr	r2, [r4, #0]
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	f012 0f10 	tst.w	r2, #16
 8004af8:	d04f      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004afa:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004afc:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8004b00:	2b05      	cmp	r3, #5
 8004b02:	d00e      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8004b0c:	d033      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8004b14:	d12a      	bne.n	8004b6c <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 8004b16:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d03e      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	4798      	blx	r3
 8004b20:	e03b      	b.n	8004b9a <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b22:	6822      	ldr	r2, [r4, #0]
 8004b24:	6813      	ldr	r3, [r2, #0]
 8004b26:	f023 0316 	bic.w	r3, r3, #22
 8004b2a:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b2c:	6822      	ldr	r2, [r4, #0]
 8004b2e:	6953      	ldr	r3, [r2, #20]
 8004b30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b34:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b38:	b1a3      	cbz	r3, 8004b64 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b3a:	6822      	ldr	r2, [r4, #0]
 8004b3c:	6813      	ldr	r3, [r2, #0]
 8004b3e:	f023 0308 	bic.w	r3, r3, #8
 8004b42:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b44:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004b46:	233f      	movs	r3, #63	@ 0x3f
 8004b48:	4093      	lsls	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8004b52:	2300      	movs	r3, #0
 8004b54:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8004b58:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d03f      	beq.n	8004bde <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8004b5e:	4620      	mov	r0, r4
 8004b60:	4798      	blx	r3
        return;
 8004b62:	e03c      	b.n	8004bde <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b64:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e7      	bne.n	8004b3a <HAL_DMA_IRQHandler+0x12a>
 8004b6a:	e7eb      	b.n	8004b44 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 8004b6c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004b6e:	b1a3      	cbz	r3, 8004b9a <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8004b70:	4620      	mov	r0, r4
 8004b72:	4798      	blx	r3
 8004b74:	e011      	b.n	8004b9a <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8004b7c:	d109      	bne.n	8004b92 <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	f022 0210 	bic.w	r2, r2, #16
 8004b84:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8004b92:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004b94:	b10b      	cbz	r3, 8004b9a <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 8004b96:	4620      	mov	r0, r4
 8004b98:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b9a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004b9c:	b1fb      	cbz	r3, 8004bde <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b9e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004ba0:	f013 0f01 	tst.w	r3, #1
 8004ba4:	d017      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ba6:	2305      	movs	r3, #5
 8004ba8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8004bac:	6822      	ldr	r2, [r4, #0]
 8004bae:	6813      	ldr	r3, [r2, #0]
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8004bb6:	9b01      	ldr	r3, [sp, #4]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	9301      	str	r3, [sp, #4]
 8004bbc:	42ab      	cmp	r3, r5
 8004bbe:	d804      	bhi.n	8004bca <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f013 0f01 	tst.w	r3, #1
 8004bc8:	d1f5      	bne.n	8004bb6 <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8004bd6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004bd8:	b10b      	cbz	r3, 8004bde <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 8004bda:	4620      	mov	r0, r4
 8004bdc:	4798      	blx	r3
}
 8004bde:	b003      	add	sp, #12
 8004be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000070 	.word	0x20000070
 8004be8:	1b4e81b5 	.word	0x1b4e81b5

08004bec <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b0f      	cmp	r3, #15
 8004bf0:	f200 80d7 	bhi.w	8004da2 <HAL_GPIO_Init+0x1b6>
{
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	e065      	b.n	8004cc6 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bfa:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bfc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004c00:	2403      	movs	r4, #3
 8004c02:	fa04 f40e 	lsl.w	r4, r4, lr
 8004c06:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c0a:	68cc      	ldr	r4, [r1, #12]
 8004c0c:	fa04 f40e 	lsl.w	r4, r4, lr
 8004c10:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004c12:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c14:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c16:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c1a:	684a      	ldr	r2, [r1, #4]
 8004c1c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8004c20:	409a      	lsls	r2, r3
 8004c22:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8004c24:	6042      	str	r2, [r0, #4]
 8004c26:	e05c      	b.n	8004ce2 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c28:	08dc      	lsrs	r4, r3, #3
 8004c2a:	3408      	adds	r4, #8
 8004c2c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c30:	f003 0507 	and.w	r5, r3, #7
 8004c34:	00ad      	lsls	r5, r5, #2
 8004c36:	f04f 0e0f 	mov.w	lr, #15
 8004c3a:	fa0e fe05 	lsl.w	lr, lr, r5
 8004c3e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c42:	690a      	ldr	r2, [r1, #16]
 8004c44:	40aa      	lsls	r2, r5
 8004c46:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004c4a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8004c4e:	e05c      	b.n	8004d0a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c50:	2204      	movs	r2, #4
 8004c52:	e000      	b.n	8004c56 <HAL_GPIO_Init+0x6a>
 8004c54:	2200      	movs	r2, #0
 8004c56:	fa02 f20e 	lsl.w	r2, r2, lr
 8004c5a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c5c:	3402      	adds	r4, #2
 8004c5e:	4d51      	ldr	r5, [pc, #324]	@ (8004da4 <HAL_GPIO_Init+0x1b8>)
 8004c60:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c64:	4a50      	ldr	r2, [pc, #320]	@ (8004da8 <HAL_GPIO_Init+0x1bc>)
 8004c66:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004c68:	ea6f 020c 	mvn.w	r2, ip
 8004c6c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c70:	684e      	ldr	r6, [r1, #4]
 8004c72:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8004c76:	d001      	beq.n	8004c7c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8004c78:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8004c7c:	4c4a      	ldr	r4, [pc, #296]	@ (8004da8 <HAL_GPIO_Init+0x1bc>)
 8004c7e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8004c80:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8004c82:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c86:	684e      	ldr	r6, [r1, #4]
 8004c88:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8004c8c:	d001      	beq.n	8004c92 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8004c8e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8004c92:	4c45      	ldr	r4, [pc, #276]	@ (8004da8 <HAL_GPIO_Init+0x1bc>)
 8004c94:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8004c96:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8004c98:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c9c:	684e      	ldr	r6, [r1, #4]
 8004c9e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8004ca2:	d001      	beq.n	8004ca8 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8004ca4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8004ca8:	4c3f      	ldr	r4, [pc, #252]	@ (8004da8 <HAL_GPIO_Init+0x1bc>)
 8004caa:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cac:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8004cae:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cb0:	684d      	ldr	r5, [r1, #4]
 8004cb2:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8004cb6:	d001      	beq.n	8004cbc <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8004cb8:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8004cbc:	4c3a      	ldr	r4, [pc, #232]	@ (8004da8 <HAL_GPIO_Init+0x1bc>)
 8004cbe:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	2b0f      	cmp	r3, #15
 8004cc4:	d86b      	bhi.n	8004d9e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cca:	680c      	ldr	r4, [r1, #0]
 8004ccc:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8004cd0:	ea32 0404 	bics.w	r4, r2, r4
 8004cd4:	d1f4      	bne.n	8004cc0 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cd6:	684c      	ldr	r4, [r1, #4]
 8004cd8:	f004 0403 	and.w	r4, r4, #3
 8004cdc:	3c01      	subs	r4, #1
 8004cde:	2c01      	cmp	r4, #1
 8004ce0:	d98b      	bls.n	8004bfa <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ce2:	684a      	ldr	r2, [r1, #4]
 8004ce4:	f002 0203 	and.w	r2, r2, #3
 8004ce8:	2a03      	cmp	r2, #3
 8004cea:	d009      	beq.n	8004d00 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8004cec:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cee:	005d      	lsls	r5, r3, #1
 8004cf0:	2203      	movs	r2, #3
 8004cf2:	40aa      	lsls	r2, r5
 8004cf4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cf8:	688a      	ldr	r2, [r1, #8]
 8004cfa:	40aa      	lsls	r2, r5
 8004cfc:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8004cfe:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d00:	684a      	ldr	r2, [r1, #4]
 8004d02:	f002 0203 	and.w	r2, r2, #3
 8004d06:	2a02      	cmp	r2, #2
 8004d08:	d08e      	beq.n	8004c28 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8004d0a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d0c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004d10:	2203      	movs	r2, #3
 8004d12:	fa02 f20e 	lsl.w	r2, r2, lr
 8004d16:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d1a:	684a      	ldr	r2, [r1, #4]
 8004d1c:	f002 0203 	and.w	r2, r2, #3
 8004d20:	fa02 f20e 	lsl.w	r2, r2, lr
 8004d24:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8004d26:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d28:	684a      	ldr	r2, [r1, #4]
 8004d2a:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8004d2e:	d0c7      	beq.n	8004cc0 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d30:	2200      	movs	r2, #0
 8004d32:	9201      	str	r2, [sp, #4]
 8004d34:	4a1d      	ldr	r2, [pc, #116]	@ (8004dac <HAL_GPIO_Init+0x1c0>)
 8004d36:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8004d38:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8004d3c:	6454      	str	r4, [r2, #68]	@ 0x44
 8004d3e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004d40:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004d44:	9201      	str	r2, [sp, #4]
 8004d46:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004d48:	089c      	lsrs	r4, r3, #2
 8004d4a:	1ca5      	adds	r5, r4, #2
 8004d4c:	4a15      	ldr	r2, [pc, #84]	@ (8004da4 <HAL_GPIO_Init+0x1b8>)
 8004d4e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d52:	f003 0e03 	and.w	lr, r3, #3
 8004d56:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004d5a:	220f      	movs	r2, #15
 8004d5c:	fa02 f20e 	lsl.w	r2, r2, lr
 8004d60:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d64:	4a12      	ldr	r2, [pc, #72]	@ (8004db0 <HAL_GPIO_Init+0x1c4>)
 8004d66:	4290      	cmp	r0, r2
 8004d68:	f43f af74 	beq.w	8004c54 <HAL_GPIO_Init+0x68>
 8004d6c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004d70:	4290      	cmp	r0, r2
 8004d72:	d00e      	beq.n	8004d92 <HAL_GPIO_Init+0x1a6>
 8004d74:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004d78:	4290      	cmp	r0, r2
 8004d7a:	d00c      	beq.n	8004d96 <HAL_GPIO_Init+0x1aa>
 8004d7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004d80:	4290      	cmp	r0, r2
 8004d82:	d00a      	beq.n	8004d9a <HAL_GPIO_Init+0x1ae>
 8004d84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004d88:	4290      	cmp	r0, r2
 8004d8a:	f43f af61 	beq.w	8004c50 <HAL_GPIO_Init+0x64>
 8004d8e:	2207      	movs	r2, #7
 8004d90:	e761      	b.n	8004c56 <HAL_GPIO_Init+0x6a>
 8004d92:	2201      	movs	r2, #1
 8004d94:	e75f      	b.n	8004c56 <HAL_GPIO_Init+0x6a>
 8004d96:	2202      	movs	r2, #2
 8004d98:	e75d      	b.n	8004c56 <HAL_GPIO_Init+0x6a>
 8004d9a:	2203      	movs	r2, #3
 8004d9c:	e75b      	b.n	8004c56 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8004d9e:	b002      	add	sp, #8
 8004da0:	bd70      	pop	{r4, r5, r6, pc}
 8004da2:	4770      	bx	lr
 8004da4:	40013800 	.word	0x40013800
 8004da8:	40013c00 	.word	0x40013c00
 8004dac:	40023800 	.word	0x40023800
 8004db0:	40020000 	.word	0x40020000

08004db4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004db4:	6903      	ldr	r3, [r0, #16]
 8004db6:	4219      	tst	r1, r3
 8004db8:	d001      	beq.n	8004dbe <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004dba:	2001      	movs	r0, #1
 8004dbc:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dbe:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dc2:	b10a      	cbz	r2, 8004dc8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dc4:	6181      	str	r1, [r0, #24]
 8004dc6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dc8:	0409      	lsls	r1, r1, #16
 8004dca:	6181      	str	r1, [r0, #24]
  }
}
 8004dcc:	4770      	bx	lr

08004dce <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004dce:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004dd0:	ea01 0203 	and.w	r2, r1, r3
 8004dd4:	ea21 0103 	bic.w	r1, r1, r3
 8004dd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ddc:	6181      	str	r1, [r0, #24]
}
 8004dde:	4770      	bx	lr

08004de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004de0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004de2:	4b05      	ldr	r3, [pc, #20]	@ (8004df8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	4203      	tst	r3, r0
 8004de8:	d100      	bne.n	8004dec <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004dea:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dec:	4b02      	ldr	r3, [pc, #8]	@ (8004df8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004dee:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004df0:	f7fd ffc8 	bl	8002d84 <HAL_GPIO_EXTI_Callback>
}
 8004df4:	e7f9      	b.n	8004dea <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004df6:	bf00      	nop
 8004df8:	40013c00 	.word	0x40013c00

08004dfc <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	f000 80cc 	beq.w	8004f9a <HAL_I2C_Init+0x19e>
{
 8004e02:	b570      	push	{r4, r5, r6, lr}
 8004e04:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e06:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d077      	beq.n	8004efe <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e0e:	2324      	movs	r3, #36	@ 0x24
 8004e10:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e14:	6822      	ldr	r2, [r4, #0]
 8004e16:	6813      	ldr	r3, [r2, #0]
 8004e18:	f023 0301 	bic.w	r3, r3, #1
 8004e1c:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e1e:	6822      	ldr	r2, [r4, #0]
 8004e20:	6813      	ldr	r3, [r2, #0]
 8004e22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e26:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e28:	6822      	ldr	r2, [r4, #0]
 8004e2a:	6813      	ldr	r3, [r2, #0]
 8004e2c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004e30:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e32:	f001 fa25 	bl	8006280 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e36:	6862      	ldr	r2, [r4, #4]
 8004e38:	4b5a      	ldr	r3, [pc, #360]	@ (8004fa4 <HAL_I2C_Init+0x1a8>)
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d864      	bhi.n	8004f08 <HAL_I2C_Init+0x10c>
 8004e3e:	4b5a      	ldr	r3, [pc, #360]	@ (8004fa8 <HAL_I2C_Init+0x1ac>)
 8004e40:	4298      	cmp	r0, r3
 8004e42:	bf8c      	ite	hi
 8004e44:	2300      	movhi	r3, #0
 8004e46:	2301      	movls	r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f040 80a8 	bne.w	8004f9e <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e4e:	4957      	ldr	r1, [pc, #348]	@ (8004fac <HAL_I2C_Init+0x1b0>)
 8004e50:	fba1 3100 	umull	r3, r1, r1, r0
 8004e54:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e56:	6825      	ldr	r5, [r4, #0]
 8004e58:	686a      	ldr	r2, [r5, #4]
 8004e5a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004e5e:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8004e62:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e64:	6821      	ldr	r1, [r4, #0]
 8004e66:	6a0a      	ldr	r2, [r1, #32]
 8004e68:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004e6c:	6866      	ldr	r6, [r4, #4]
 8004e6e:	4d4d      	ldr	r5, [pc, #308]	@ (8004fa4 <HAL_I2C_Init+0x1a8>)
 8004e70:	42ae      	cmp	r6, r5
 8004e72:	d84f      	bhi.n	8004f14 <HAL_I2C_Init+0x118>
 8004e74:	3301      	adds	r3, #1
 8004e76:	4313      	orrs	r3, r2
 8004e78:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e7a:	6821      	ldr	r1, [r4, #0]
 8004e7c:	69ca      	ldr	r2, [r1, #28]
 8004e7e:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8004e82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004e86:	6865      	ldr	r5, [r4, #4]
 8004e88:	4b46      	ldr	r3, [pc, #280]	@ (8004fa4 <HAL_I2C_Init+0x1a8>)
 8004e8a:	429d      	cmp	r5, r3
 8004e8c:	d84c      	bhi.n	8004f28 <HAL_I2C_Init+0x12c>
 8004e8e:	1e43      	subs	r3, r0, #1
 8004e90:	006d      	lsls	r5, r5, #1
 8004e92:	fbb3 f3f5 	udiv	r3, r3, r5
 8004e96:	3301      	adds	r3, #1
 8004e98:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8004e9c:	4203      	tst	r3, r0
 8004e9e:	d078      	beq.n	8004f92 <HAL_I2C_Init+0x196>
 8004ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ea8:	6821      	ldr	r1, [r4, #0]
 8004eaa:	680b      	ldr	r3, [r1, #0]
 8004eac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004eb0:	69e2      	ldr	r2, [r4, #28]
 8004eb2:	6a20      	ldr	r0, [r4, #32]
 8004eb4:	4302      	orrs	r2, r0
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004eba:	6821      	ldr	r1, [r4, #0]
 8004ebc:	688b      	ldr	r3, [r1, #8]
 8004ebe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004ec2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ec6:	6922      	ldr	r2, [r4, #16]
 8004ec8:	68e0      	ldr	r0, [r4, #12]
 8004eca:	4302      	orrs	r2, r0
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ed0:	6821      	ldr	r1, [r4, #0]
 8004ed2:	68cb      	ldr	r3, [r1, #12]
 8004ed4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ed8:	6962      	ldr	r2, [r4, #20]
 8004eda:	69a0      	ldr	r0, [r4, #24]
 8004edc:	4302      	orrs	r2, r0
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ee2:	6822      	ldr	r2, [r4, #0]
 8004ee4:	6813      	ldr	r3, [r2, #0]
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eec:	2000      	movs	r0, #0
 8004eee:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ef0:	2320      	movs	r3, #32
 8004ef2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ef6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef8:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 8004efc:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004efe:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8004f02:	f7fd fc17 	bl	8002734 <HAL_I2C_MspInit>
 8004f06:	e782      	b.n	8004e0e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f08:	4b29      	ldr	r3, [pc, #164]	@ (8004fb0 <HAL_I2C_Init+0x1b4>)
 8004f0a:	4298      	cmp	r0, r3
 8004f0c:	bf8c      	ite	hi
 8004f0e:	2300      	movhi	r3, #0
 8004f10:	2301      	movls	r3, #1
 8004f12:	e799      	b.n	8004e48 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f14:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8004f18:	fb05 f303 	mul.w	r3, r5, r3
 8004f1c:	4d25      	ldr	r5, [pc, #148]	@ (8004fb4 <HAL_I2C_Init+0x1b8>)
 8004f1e:	fba5 5303 	umull	r5, r3, r5, r3
 8004f22:	099b      	lsrs	r3, r3, #6
 8004f24:	3301      	adds	r3, #1
 8004f26:	e7a6      	b.n	8004e76 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f28:	68a6      	ldr	r6, [r4, #8]
 8004f2a:	b9be      	cbnz	r6, 8004f5c <HAL_I2C_Init+0x160>
 8004f2c:	1e43      	subs	r3, r0, #1
 8004f2e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8004f32:	fbb3 f3fc 	udiv	r3, r3, ip
 8004f36:	3301      	adds	r3, #1
 8004f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f3c:	fab3 f383 	clz	r3, r3
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	bb43      	cbnz	r3, 8004f96 <HAL_I2C_Init+0x19a>
 8004f44:	b9c6      	cbnz	r6, 8004f78 <HAL_I2C_Init+0x17c>
 8004f46:	1e43      	subs	r3, r0, #1
 8004f48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f4c:	fbb3 f3f5 	udiv	r3, r3, r5
 8004f50:	3301      	adds	r3, #1
 8004f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f5a:	e7a3      	b.n	8004ea4 <HAL_I2C_Init+0xa8>
 8004f5c:	1e43      	subs	r3, r0, #1
 8004f5e:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8004f62:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8004f66:	fbb3 f3fc 	udiv	r3, r3, ip
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f70:	fab3 f383 	clz	r3, r3
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	e7e4      	b.n	8004f42 <HAL_I2C_Init+0x146>
 8004f78:	1e43      	subs	r3, r0, #1
 8004f7a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004f7e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004f82:	fbb3 f3f5 	udiv	r3, r3, r5
 8004f86:	3301      	adds	r3, #1
 8004f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f90:	e788      	b.n	8004ea4 <HAL_I2C_Init+0xa8>
 8004f92:	2304      	movs	r3, #4
 8004f94:	e786      	b.n	8004ea4 <HAL_I2C_Init+0xa8>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e784      	b.n	8004ea4 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8004f9a:	2001      	movs	r0, #1
}
 8004f9c:	4770      	bx	lr
    return HAL_ERROR;
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	e7ac      	b.n	8004efc <HAL_I2C_Init+0x100>
 8004fa2:	bf00      	nop
 8004fa4:	000186a0 	.word	0x000186a0
 8004fa8:	001e847f 	.word	0x001e847f
 8004fac:	431bde83 	.word	0x431bde83
 8004fb0:	003d08ff 	.word	0x003d08ff
 8004fb4:	10624dd3 	.word	0x10624dd3

08004fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fb8:	b500      	push	{lr}
 8004fba:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	9200      	str	r2, [sp, #0]
 8004fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff8 <HAL_MspInit+0x40>)
 8004fc2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004fc4:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8004fc8:	6459      	str	r1, [r3, #68]	@ 0x44
 8004fca:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004fcc:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8004fd0:	9100      	str	r1, [sp, #0]
 8004fd2:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fd4:	9201      	str	r2, [sp, #4]
 8004fd6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004fd8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8004fdc:	6419      	str	r1, [r3, #64]	@ 0x40
 8004fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fe8:	210f      	movs	r1, #15
 8004fea:	f06f 0001 	mvn.w	r0, #1
 8004fee:	f7ff fbd5 	bl	800479c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ff2:	b003      	add	sp, #12
 8004ff4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ff8:	40023800 	.word	0x40023800

08004ffc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005000:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005002:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8005006:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800500a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800500e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005012:	429a      	cmp	r2, r3
 8005014:	d854      	bhi.n	80050c0 <PCD_WriteEmptyTxFifo+0xc4>
 8005016:	4607      	mov	r7, r0
 8005018:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800501a:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 800501c:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8005020:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005024:	69d2      	ldr	r2, [r2, #28]
 8005026:	429a      	cmp	r2, r3
 8005028:	d300      	bcc.n	800502c <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 800502a:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 800502c:	f102 0903 	add.w	r9, r2, #3
 8005030:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005034:	e015      	b.n	8005062 <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8005036:	f106 0903 	add.w	r9, r6, #3
 800503a:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 800503e:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005040:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8005044:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005048:	6a29      	ldr	r1, [r5, #32]
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	b2b3      	uxth	r3, r6
 800504e:	b2e2      	uxtb	r2, r4
 8005050:	4640      	mov	r0, r8
 8005052:	f002 fa9a 	bl	800758a <USB_WritePacket>

    ep->xfer_buff  += len;
 8005056:	6a2b      	ldr	r3, [r5, #32]
 8005058:	4433      	add	r3, r6
 800505a:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 800505c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800505e:	4433      	add	r3, r6
 8005060:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005062:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8005066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800506e:	454b      	cmp	r3, r9
 8005070:	d312      	bcc.n	8005098 <PCD_WriteEmptyTxFifo+0x9c>
 8005072:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8005076:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800507a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800507c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800507e:	429a      	cmp	r2, r3
 8005080:	d20a      	bcs.n	8005098 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005082:	b14b      	cbz	r3, 8005098 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8005084:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8005086:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800508a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800508e:	69d6      	ldr	r6, [r2, #28]
 8005090:	429e      	cmp	r6, r3
 8005092:	d3d0      	bcc.n	8005036 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8005094:	461e      	mov	r6, r3
 8005096:	e7ce      	b.n	8005036 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005098:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800509c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80050a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d80f      	bhi.n	80050c8 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050a8:	f004 040f 	and.w	r4, r4, #15
 80050ac:	2201      	movs	r2, #1
 80050ae:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050b0:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 80050b4:	ea23 0302 	bic.w	r3, r3, r2
 80050b8:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 80050bc:	2000      	movs	r0, #0
 80050be:	e000      	b.n	80050c2 <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 80050c0:	2001      	movs	r0, #1
}
 80050c2:	b003      	add	sp, #12
 80050c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 80050c8:	2000      	movs	r0, #0
 80050ca:	e7fa      	b.n	80050c2 <PCD_WriteEmptyTxFifo+0xc6>

080050cc <HAL_PCD_Init>:
{
 80050cc:	b530      	push	{r4, r5, lr}
 80050ce:	b083      	sub	sp, #12
  if (hpcd == NULL)
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d07a      	beq.n	80051ca <HAL_PCD_Init+0xfe>
 80050d4:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 80050d6:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050d8:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 80050dc:	b1c3      	cbz	r3, 8005110 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80050de:	2303      	movs	r3, #3
 80050e0:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 80050e4:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 80050e8:	d017      	beq.n	800511a <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 80050ea:	6820      	ldr	r0, [r4, #0]
 80050ec:	f001 fffe 	bl	80070ec <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050f0:	7c23      	ldrb	r3, [r4, #16]
 80050f2:	f88d 3000 	strb.w	r3, [sp]
 80050f6:	1d23      	adds	r3, r4, #4
 80050f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050fa:	6820      	ldr	r0, [r4, #0]
 80050fc:	f001 ff35 	bl	8006f6a <USB_CoreInit>
 8005100:	b170      	cbz	r0, 8005120 <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005102:	2302      	movs	r3, #2
 8005104:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8005108:	2501      	movs	r5, #1
}
 800510a:	4628      	mov	r0, r5
 800510c:	b003      	add	sp, #12
 800510e:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8005110:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8005114:	f004 fd68 	bl	8009be8 <HAL_PCD_MspInit>
 8005118:	e7e1      	b.n	80050de <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	71a3      	strb	r3, [r4, #6]
 800511e:	e7e4      	b.n	80050ea <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005120:	2100      	movs	r1, #0
 8005122:	6820      	ldr	r0, [r4, #0]
 8005124:	f002 fc47 	bl	80079b6 <USB_SetCurrentMode>
 8005128:	4602      	mov	r2, r0
 800512a:	b9b8      	cbnz	r0, 800515c <HAL_PCD_Init+0x90>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800512c:	4603      	mov	r3, r0
 800512e:	7920      	ldrb	r0, [r4, #4]
 8005130:	4298      	cmp	r0, r3
 8005132:	d918      	bls.n	8005166 <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 8005134:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8005138:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800513c:	2001      	movs	r0, #1
 800513e:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8005140:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005142:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005144:	2000      	movs	r0, #0
 8005146:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005148:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800514a:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 800514c:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8005150:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005154:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005156:	3301      	adds	r3, #1
 8005158:	b2db      	uxtb	r3, r3
 800515a:	e7e8      	b.n	800512e <HAL_PCD_Init+0x62>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800515c:	2302      	movs	r3, #2
 800515e:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8005162:	2501      	movs	r5, #1
 8005164:	e7d1      	b.n	800510a <HAL_PCD_Init+0x3e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005166:	4290      	cmp	r0, r2
 8005168:	d917      	bls.n	800519a <HAL_PCD_Init+0xce>
    hpcd->OUT_ep[i].is_in = 0U;
 800516a:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 800516e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005172:	2100      	movs	r1, #0
 8005174:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8005178:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800517c:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005180:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005184:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005188:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 800518c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005190:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005194:	3201      	adds	r2, #1
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	e7e5      	b.n	8005166 <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800519a:	7c23      	ldrb	r3, [r4, #16]
 800519c:	f88d 3000 	strb.w	r3, [sp]
 80051a0:	1d23      	adds	r3, r4, #4
 80051a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051a4:	6820      	ldr	r0, [r4, #0]
 80051a6:	f001 fff7 	bl	8007198 <USB_DevInit>
 80051aa:	4605      	mov	r5, r0
 80051ac:	b120      	cbz	r0, 80051b8 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051ae:	2302      	movs	r3, #2
 80051b0:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80051b4:	2501      	movs	r5, #1
 80051b6:	e7a8      	b.n	800510a <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80051bc:	2301      	movs	r3, #1
 80051be:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 80051c2:	6820      	ldr	r0, [r4, #0]
 80051c4:	f002 fbb6 	bl	8007934 <USB_DevDisconnect>
  return HAL_OK;
 80051c8:	e79f      	b.n	800510a <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 80051ca:	2501      	movs	r5, #1
 80051cc:	e79d      	b.n	800510a <HAL_PCD_Init+0x3e>

080051ce <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051ce:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 80051d0:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 80051d4:	2a01      	cmp	r2, #1
 80051d6:	d01a      	beq.n	800520e <HAL_PCD_Start+0x40>
{
 80051d8:	b510      	push	{r4, lr}
 80051da:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80051dc:	2201      	movs	r2, #1
 80051de:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80051e8:	d002      	beq.n	80051f0 <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 80051ea:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80051ec:	2a01      	cmp	r2, #1
 80051ee:	d009      	beq.n	8005204 <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 80051f0:	6820      	ldr	r0, [r4, #0]
 80051f2:	f001 ff75 	bl	80070e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80051f6:	6820      	ldr	r0, [r4, #0]
 80051f8:	f002 fb8e 	bl	8007918 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051fc:	2000      	movs	r0, #0
 80051fe:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8005202:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005204:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005206:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800520a:	639a      	str	r2, [r3, #56]	@ 0x38
 800520c:	e7f0      	b.n	80051f0 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 800520e:	2002      	movs	r0, #2
}
 8005210:	4770      	bx	lr
	...

08005214 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005214:	b570      	push	{r4, r5, r6, lr}
 8005216:	4604      	mov	r4, r0
 8005218:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800521a:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800521c:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800521e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8005222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005226:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005228:	79a1      	ldrb	r1, [r4, #6]
 800522a:	2901      	cmp	r1, #1
 800522c:	d011      	beq.n	8005252 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800522e:	4938      	ldr	r1, [pc, #224]	@ (8005310 <PCD_EP_OutXfrComplete_int+0xfc>)
 8005230:	428e      	cmp	r6, r1
 8005232:	d056      	beq.n	80052e2 <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005234:	b93d      	cbnz	r5, 8005246 <PCD_EP_OutXfrComplete_int+0x32>
 8005236:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800523a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800523e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8005242:	2b00      	cmp	r3, #0
 8005244:	d05e      	beq.n	8005304 <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005246:	b2e9      	uxtb	r1, r5
 8005248:	4620      	mov	r0, r4
 800524a:	f004 fd19 	bl	8009c80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 800524e:	2000      	movs	r0, #0
 8005250:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005252:	f012 0f08 	tst.w	r2, #8
 8005256:	d009      	beq.n	800526c <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005258:	492e      	ldr	r1, [pc, #184]	@ (8005314 <PCD_EP_OutXfrComplete_int+0x100>)
 800525a:	428e      	cmp	r6, r1
 800525c:	d9f7      	bls.n	800524e <PCD_EP_OutXfrComplete_int+0x3a>
 800525e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8005262:	d0f4      	beq.n	800524e <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005264:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005268:	609a      	str	r2, [r3, #8]
 800526a:	e7f0      	b.n	800524e <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800526c:	f012 0f20 	tst.w	r2, #32
 8005270:	d002      	beq.n	8005278 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005272:	2220      	movs	r2, #32
 8005274:	609a      	str	r2, [r3, #8]
 8005276:	e7ea      	b.n	800524e <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005278:	f012 0f28 	tst.w	r2, #40	@ 0x28
 800527c:	d1e7      	bne.n	800524e <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800527e:	4925      	ldr	r1, [pc, #148]	@ (8005314 <PCD_EP_OutXfrComplete_int+0x100>)
 8005280:	428e      	cmp	r6, r1
 8005282:	d906      	bls.n	8005292 <PCD_EP_OutXfrComplete_int+0x7e>
 8005284:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8005288:	d003      	beq.n	8005292 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800528a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800528e:	609a      	str	r2, [r3, #8]
 8005290:	e7dd      	b.n	800524e <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005292:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8005296:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800529a:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a4:	1acb      	subs	r3, r1, r3
 80052a6:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 80052aa:	b97d      	cbnz	r5, 80052cc <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 80052ac:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80052b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80052b4:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 80052b8:	b16a      	cbz	r2, 80052d6 <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 80052ba:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80052be:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80052c2:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 80052c6:	4419      	add	r1, r3
 80052c8:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052cc:	b2e9      	uxtb	r1, r5
 80052ce:	4620      	mov	r0, r4
 80052d0:	f004 fcd6 	bl	8009c80 <HAL_PCD_DataOutStageCallback>
 80052d4:	e7bb      	b.n	800524e <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052d6:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80052da:	2101      	movs	r1, #1
 80052dc:	f002 fbaa 	bl	8007a34 <USB_EP0_OutStart>
 80052e0:	e7f4      	b.n	80052cc <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80052e2:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80052e6:	d003      	beq.n	80052f0 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80052ec:	609a      	str	r2, [r3, #8]
 80052ee:	e7ae      	b.n	800524e <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052f0:	f012 0f20 	tst.w	r2, #32
 80052f4:	d001      	beq.n	80052fa <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052f6:	2220      	movs	r2, #32
 80052f8:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052fa:	b2e9      	uxtb	r1, r5
 80052fc:	4620      	mov	r0, r4
 80052fe:	f004 fcbf 	bl	8009c80 <HAL_PCD_DataOutStageCallback>
 8005302:	e7a4      	b.n	800524e <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005304:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005308:	2100      	movs	r1, #0
 800530a:	f002 fb93 	bl	8007a34 <USB_EP0_OutStart>
 800530e:	e79a      	b.n	8005246 <PCD_EP_OutXfrComplete_int+0x32>
 8005310:	4f54310a 	.word	0x4f54310a
 8005314:	4f54300a 	.word	0x4f54300a

08005318 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800531c:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800531e:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005320:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005324:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005328:	4a0e      	ldr	r2, [pc, #56]	@ (8005364 <PCD_EP_OutSetupPacket_int+0x4c>)
 800532a:	4295      	cmp	r5, r2
 800532c:	d907      	bls.n	800533e <PCD_EP_OutSetupPacket_int+0x26>
 800532e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005332:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8005336:	d002      	beq.n	800533e <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005338:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800533c:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800533e:	4620      	mov	r0, r4
 8005340:	f004 fc96 	bl	8009c70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005344:	4b07      	ldr	r3, [pc, #28]	@ (8005364 <PCD_EP_OutSetupPacket_int+0x4c>)
 8005346:	429d      	cmp	r5, r3
 8005348:	d902      	bls.n	8005350 <PCD_EP_OutSetupPacket_int+0x38>
 800534a:	79a3      	ldrb	r3, [r4, #6]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d001      	beq.n	8005354 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8005350:	2000      	movs	r0, #0
 8005352:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005354:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005358:	2101      	movs	r1, #1
 800535a:	6820      	ldr	r0, [r4, #0]
 800535c:	f002 fb6a 	bl	8007a34 <USB_EP0_OutStart>
 8005360:	e7f6      	b.n	8005350 <PCD_EP_OutSetupPacket_int+0x38>
 8005362:	bf00      	nop
 8005364:	4f54300a 	.word	0x4f54300a

08005368 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8005368:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 800536c:	2b01      	cmp	r3, #1
 800536e:	d00c      	beq.n	800538a <HAL_PCD_SetAddress+0x22>
{
 8005370:	b510      	push	{r4, lr}
 8005372:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005374:	2301      	movs	r3, #1
 8005376:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800537a:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800537c:	6800      	ldr	r0, [r0, #0]
 800537e:	f002 fabb 	bl	80078f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005382:	2000      	movs	r0, #0
 8005384:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8005388:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800538a:	2002      	movs	r0, #2
}
 800538c:	4770      	bx	lr

0800538e <HAL_PCD_EP_Open>:
{
 800538e:	b538      	push	{r3, r4, r5, lr}
 8005390:	4605      	mov	r5, r0
 8005392:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005394:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005398:	d12b      	bne.n	80053f2 <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800539a:	f001 0e0f 	and.w	lr, r1, #15
 800539e:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 80053a2:	00a4      	lsls	r4, r4, #2
 80053a4:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 80053a8:	4404      	add	r4, r0
 80053aa:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 80053ac:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80053b0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80053b4:	2000      	movs	r0, #0
 80053b6:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80053ba:	f00c 0c0f 	and.w	ip, ip, #15
 80053be:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80053c2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80053c6:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80053c8:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 80053ca:	784a      	ldrb	r2, [r1, #1]
 80053cc:	b10a      	cbz	r2, 80053d2 <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 80053ce:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d01c      	beq.n	8005410 <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 80053d6:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d01b      	beq.n	8005416 <HAL_PCD_EP_Open+0x88>
 80053de:	2301      	movs	r3, #1
 80053e0:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053e4:	6828      	ldr	r0, [r5, #0]
 80053e6:	f001 ffb4 	bl	8007352 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053ea:	2000      	movs	r0, #0
 80053ec:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 80053f0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053f2:	f001 000f 	and.w	r0, r1, #15
 80053f6:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 80053fa:	0089      	lsls	r1, r1, #2
 80053fc:	3110      	adds	r1, #16
 80053fe:	4429      	add	r1, r5
 8005400:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8005402:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8005406:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800540a:	2401      	movs	r4, #1
 800540c:	7544      	strb	r4, [r0, #21]
 800540e:	e7d4      	b.n	80053ba <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	714b      	strb	r3, [r1, #5]
 8005414:	e7df      	b.n	80053d6 <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 8005416:	2002      	movs	r0, #2
 8005418:	e7ea      	b.n	80053f0 <HAL_PCD_EP_Open+0x62>

0800541a <HAL_PCD_EP_Close>:
{
 800541a:	b510      	push	{r4, lr}
 800541c:	4604      	mov	r4, r0
 800541e:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005420:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005424:	d120      	bne.n	8005468 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005426:	f001 000f 	and.w	r0, r1, #15
 800542a:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005434:	4423      	add	r3, r4
 8005436:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8005438:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800543c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005440:	2300      	movs	r3, #0
 8005442:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8005446:	f002 020f 	and.w	r2, r2, #15
 800544a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800544c:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8005450:	2b01      	cmp	r3, #1
 8005452:	d018      	beq.n	8005486 <HAL_PCD_EP_Close+0x6c>
 8005454:	2301      	movs	r3, #1
 8005456:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800545a:	6820      	ldr	r0, [r4, #0]
 800545c:	f001 ffc6 	bl	80073ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005460:	2000      	movs	r0, #0
 8005462:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8005466:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005468:	f001 000f 	and.w	r0, r1, #15
 800546c:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	3310      	adds	r3, #16
 8005474:	4423      	add	r3, r4
 8005476:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8005478:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800547c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005480:	2301      	movs	r3, #1
 8005482:	7543      	strb	r3, [r0, #21]
 8005484:	e7df      	b.n	8005446 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8005486:	2002      	movs	r0, #2
 8005488:	e7ed      	b.n	8005466 <HAL_PCD_EP_Close+0x4c>

0800548a <HAL_PCD_EP_Receive>:
{
 800548a:	b510      	push	{r4, lr}
 800548c:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800548e:	f001 0c0f 	and.w	ip, r1, #15
 8005492:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8005496:	0089      	lsls	r1, r1, #2
 8005498:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800549c:	4401      	add	r1, r0
 800549e:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80054a0:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80054a4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80054a8:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 80054ac:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 80054b6:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80054ba:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 80054be:	7982      	ldrb	r2, [r0, #6]
 80054c0:	2a01      	cmp	r2, #1
 80054c2:	d004      	beq.n	80054ce <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054c4:	6800      	ldr	r0, [r0, #0]
 80054c6:	f002 f877 	bl	80075b8 <USB_EPStartXfer>
}
 80054ca:	2000      	movs	r0, #0
 80054cc:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80054ce:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 80054d2:	e7f7      	b.n	80054c4 <HAL_PCD_EP_Receive+0x3a>

080054d4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80054d4:	f001 010f 	and.w	r1, r1, #15
 80054d8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80054dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80054e0:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 80054e4:	4770      	bx	lr

080054e6 <HAL_PCD_EP_Transmit>:
{
 80054e6:	b510      	push	{r4, lr}
 80054e8:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054ea:	f001 0c0f 	and.w	ip, r1, #15
 80054ee:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80054f2:	0089      	lsls	r1, r1, #2
 80054f4:	3110      	adds	r1, #16
 80054f6:	4401      	add	r1, r0
 80054f8:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80054fa:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80054fe:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8005502:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8005506:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 8005510:	2301      	movs	r3, #1
 8005512:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005516:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 800551a:	7982      	ldrb	r2, [r0, #6]
 800551c:	429a      	cmp	r2, r3
 800551e:	d004      	beq.n	800552a <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005520:	6800      	ldr	r0, [r0, #0]
 8005522:	f002 f849 	bl	80075b8 <USB_EPStartXfer>
}
 8005526:	2000      	movs	r0, #0
 8005528:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800552a:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 800552e:	e7f7      	b.n	8005520 <HAL_PCD_EP_Transmit+0x3a>

08005530 <HAL_PCD_EP_SetStall>:
{
 8005530:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005532:	f001 050f 	and.w	r5, r1, #15
 8005536:	7902      	ldrb	r2, [r0, #4]
 8005538:	42aa      	cmp	r2, r5
 800553a:	d338      	bcc.n	80055ae <HAL_PCD_EP_SetStall+0x7e>
 800553c:	4604      	mov	r4, r0
 800553e:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8005540:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005544:	d11f      	bne.n	8005586 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8005546:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800554a:	0089      	lsls	r1, r1, #2
 800554c:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8005550:	4401      	add	r1, r0
 8005552:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8005554:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005558:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 8005562:	2301      	movs	r3, #1
 8005564:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005566:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8005568:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800556c:	2b01      	cmp	r3, #1
 800556e:	d020      	beq.n	80055b2 <HAL_PCD_EP_SetStall+0x82>
 8005570:	2301      	movs	r3, #1
 8005572:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005576:	6820      	ldr	r0, [r4, #0]
 8005578:	f002 f963 	bl	8007842 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800557c:	b185      	cbz	r5, 80055a0 <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 800557e:	2000      	movs	r0, #0
 8005580:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8005584:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005586:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800558a:	0089      	lsls	r1, r1, #2
 800558c:	3110      	adds	r1, #16
 800558e:	4401      	add	r1, r0
 8005590:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8005592:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8005596:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800559a:	2201      	movs	r2, #1
 800559c:	755a      	strb	r2, [r3, #21]
 800559e:	e7e0      	b.n	8005562 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80055a0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80055a4:	79a1      	ldrb	r1, [r4, #6]
 80055a6:	6820      	ldr	r0, [r4, #0]
 80055a8:	f002 fa44 	bl	8007a34 <USB_EP0_OutStart>
 80055ac:	e7e7      	b.n	800557e <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 80055ae:	2001      	movs	r0, #1
 80055b0:	e7e8      	b.n	8005584 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80055b2:	2002      	movs	r0, #2
 80055b4:	e7e6      	b.n	8005584 <HAL_PCD_EP_SetStall+0x54>

080055b6 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80055b6:	f001 030f 	and.w	r3, r1, #15
 80055ba:	7902      	ldrb	r2, [r0, #4]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d330      	bcc.n	8005622 <HAL_PCD_EP_ClrStall+0x6c>
{
 80055c0:	b510      	push	{r4, lr}
 80055c2:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80055c4:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80055c8:	d11e      	bne.n	8005608 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055ca:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80055ce:	0089      	lsls	r1, r1, #2
 80055d0:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80055d4:	4401      	add	r1, r0
 80055d6:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80055d8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80055dc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80055e0:	2000      	movs	r0, #0
 80055e2:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 80055e6:	2200      	movs	r2, #0
 80055e8:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055ea:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80055ec:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d018      	beq.n	8005626 <HAL_PCD_EP_ClrStall+0x70>
 80055f4:	2301      	movs	r3, #1
 80055f6:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80055fa:	6820      	ldr	r0, [r4, #0]
 80055fc:	f002 f94e 	bl	800789c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005600:	2000      	movs	r0, #0
 8005602:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8005606:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005608:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800560c:	0089      	lsls	r1, r1, #2
 800560e:	3110      	adds	r1, #16
 8005610:	4401      	add	r1, r0
 8005612:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8005614:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8005618:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800561c:	2001      	movs	r0, #1
 800561e:	7550      	strb	r0, [r2, #21]
 8005620:	e7e1      	b.n	80055e6 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8005622:	2001      	movs	r0, #1
}
 8005624:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8005626:	2002      	movs	r0, #2
 8005628:	e7ed      	b.n	8005606 <HAL_PCD_EP_ClrStall+0x50>

0800562a <HAL_PCD_EP_Abort>:
{
 800562a:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 800562c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005630:	d10c      	bne.n	800564c <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005632:	f001 010f 	and.w	r1, r1, #15
 8005636:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800563a:	0089      	lsls	r1, r1, #2
 800563c:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8005640:	4401      	add	r1, r0
 8005642:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005644:	6800      	ldr	r0, [r0, #0]
 8005646:	f001 ff41 	bl	80074cc <USB_EPStopXfer>
}
 800564a:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800564c:	f001 010f 	and.w	r1, r1, #15
 8005650:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005654:	0089      	lsls	r1, r1, #2
 8005656:	3110      	adds	r1, #16
 8005658:	4401      	add	r1, r0
 800565a:	3104      	adds	r1, #4
 800565c:	e7f2      	b.n	8005644 <HAL_PCD_EP_Abort+0x1a>

0800565e <HAL_PCD_IRQHandler>:
{
 800565e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005662:	b083      	sub	sp, #12
 8005664:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005666:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005668:	4628      	mov	r0, r5
 800566a:	f002 f9a0 	bl	80079ae <USB_GetMode>
 800566e:	b110      	cbz	r0, 8005676 <HAL_PCD_IRQHandler+0x18>
}
 8005670:	b003      	add	sp, #12
 8005672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005676:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005678:	6820      	ldr	r0, [r4, #0]
 800567a:	f002 f969 	bl	8007950 <USB_ReadInterrupts>
 800567e:	2800      	cmp	r0, #0
 8005680:	d0f6      	beq.n	8005670 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005682:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800568c:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005690:	6820      	ldr	r0, [r4, #0]
 8005692:	f002 f95d 	bl	8007950 <USB_ReadInterrupts>
 8005696:	f010 0f02 	tst.w	r0, #2
 800569a:	d004      	beq.n	80056a6 <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800569c:	6822      	ldr	r2, [r4, #0]
 800569e:	6953      	ldr	r3, [r2, #20]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80056a6:	6820      	ldr	r0, [r4, #0]
 80056a8:	f002 f952 	bl	8007950 <USB_ReadInterrupts>
 80056ac:	f010 0f10 	tst.w	r0, #16
 80056b0:	d015      	beq.n	80056de <HAL_PCD_IRQHandler+0x80>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	6993      	ldr	r3, [r2, #24]
 80056b6:	f023 0310 	bic.w	r3, r3, #16
 80056ba:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 80056bc:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80056c0:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80056c4:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 80056c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056cc:	d04c      	beq.n	8005768 <HAL_PCD_IRQHandler+0x10a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80056ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80056d2:	d06f      	beq.n	80057b4 <HAL_PCD_IRQHandler+0x156>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056d4:	6822      	ldr	r2, [r4, #0]
 80056d6:	6993      	ldr	r3, [r2, #24]
 80056d8:	f043 0310 	orr.w	r3, r3, #16
 80056dc:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80056de:	6820      	ldr	r0, [r4, #0]
 80056e0:	f002 f936 	bl	8007950 <USB_ReadInterrupts>
 80056e4:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 80056e8:	d176      	bne.n	80057d8 <HAL_PCD_IRQHandler+0x17a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80056ea:	6820      	ldr	r0, [r4, #0]
 80056ec:	f002 f930 	bl	8007950 <USB_ReadInterrupts>
 80056f0:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 80056f4:	f040 80e0 	bne.w	80058b8 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80056f8:	6820      	ldr	r0, [r4, #0]
 80056fa:	f002 f929 	bl	8007950 <USB_ReadInterrupts>
 80056fe:	2800      	cmp	r0, #0
 8005700:	f2c0 8161 	blt.w	80059c6 <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005704:	6820      	ldr	r0, [r4, #0]
 8005706:	f002 f923 	bl	8007950 <USB_ReadInterrupts>
 800570a:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 800570e:	d009      	beq.n	8005724 <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f013 0f01 	tst.w	r3, #1
 8005716:	f040 816e 	bne.w	80059f6 <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	6953      	ldr	r3, [r2, #20]
 800571e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005722:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005724:	6820      	ldr	r0, [r4, #0]
 8005726:	f002 f913 	bl	8007950 <USB_ReadInterrupts>
 800572a:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 800572e:	f040 8166 	bne.w	80059fe <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005732:	6820      	ldr	r0, [r4, #0]
 8005734:	f002 f90c 	bl	8007950 <USB_ReadInterrupts>
 8005738:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 800573c:	f040 81b3 	bne.w	8005aa6 <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005740:	6820      	ldr	r0, [r4, #0]
 8005742:	f002 f905 	bl	8007950 <USB_ReadInterrupts>
 8005746:	f010 0f08 	tst.w	r0, #8
 800574a:	f040 81c4 	bne.w	8005ad6 <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800574e:	6820      	ldr	r0, [r4, #0]
 8005750:	f002 f8fe 	bl	8007950 <USB_ReadInterrupts>
 8005754:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8005758:	f000 81d7 	beq.w	8005b0a <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800575c:	69ab      	ldr	r3, [r5, #24]
 800575e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005762:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005764:	2601      	movs	r6, #1
 8005766:	e1c0      	b.n	8005aea <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005768:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800576c:	ea18 0f03 	tst.w	r8, r3
 8005770:	d0b0      	beq.n	80056d4 <HAL_PCD_IRQHandler+0x76>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005772:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800577a:	9301      	str	r3, [sp, #4]
 800577c:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 8005780:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8005784:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8005788:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 800578c:	4628      	mov	r0, r5
 800578e:	f002 f835 	bl	80077fc <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005792:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8005796:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 800579a:	4453      	add	r3, sl
 800579c:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057a0:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 80057a4:	9a01      	ldr	r2, [sp, #4]
 80057a6:	444a      	add	r2, r9
 80057a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80057ac:	4453      	add	r3, sl
 80057ae:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 80057b2:	e78f      	b.n	80056d4 <HAL_PCD_IRQHandler+0x76>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80057b4:	2208      	movs	r2, #8
 80057b6:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 80057ba:	4628      	mov	r0, r5
 80057bc:	f002 f81e 	bl	80077fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057c0:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80057c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057c8:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80057cc:	f3c8 180a 	ubfx	r8, r8, #4, #11
 80057d0:	4442      	add	r2, r8
 80057d2:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 80057d6:	e77d      	b.n	80056d4 <HAL_PCD_IRQHandler+0x76>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80057d8:	6820      	ldr	r0, [r4, #0]
 80057da:	f002 f8bd 	bl	8007958 <USB_ReadDevAllOutEpInterrupt>
 80057de:	4680      	mov	r8, r0
      epnum = 0U;
 80057e0:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80057e2:	e035      	b.n	8005850 <HAL_PCD_IRQHandler+0x1f2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80057e4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80057e8:	2201      	movs	r2, #1
 80057ea:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80057ee:	4649      	mov	r1, r9
 80057f0:	4620      	mov	r0, r4
 80057f2:	f7ff fd0f 	bl	8005214 <PCD_EP_OutXfrComplete_int>
 80057f6:	e03c      	b.n	8005872 <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80057f8:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80057fc:	2208      	movs	r2, #8
 80057fe:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005802:	4649      	mov	r1, r9
 8005804:	4620      	mov	r0, r4
 8005806:	f7ff fd87 	bl	8005318 <PCD_EP_OutSetupPacket_int>
 800580a:	e035      	b.n	8005878 <HAL_PCD_IRQHandler+0x21a>
            if (ep->is_iso_incomplete == 1U)
 800580c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005810:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005814:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8005818:	2b01      	cmp	r3, #1
 800581a:	d041      	beq.n	80058a0 <HAL_PCD_IRQHandler+0x242>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800581c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005820:	2202      	movs	r2, #2
 8005822:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005826:	f01a 0f20 	tst.w	sl, #32
 800582a:	d004      	beq.n	8005836 <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800582c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005830:	2220      	movs	r2, #32
 8005832:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005836:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 800583a:	d005      	beq.n	8005848 <HAL_PCD_IRQHandler+0x1ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800583c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005840:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005844:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8005848:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 800584c:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8005850:	f1b8 0f00 	cmp.w	r8, #0
 8005854:	f43f af49 	beq.w	80056ea <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 8005858:	f018 0f01 	tst.w	r8, #1
 800585c:	d0f4      	beq.n	8005848 <HAL_PCD_IRQHandler+0x1ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800585e:	fa5f fb89 	uxtb.w	fp, r9
 8005862:	4659      	mov	r1, fp
 8005864:	6820      	ldr	r0, [r4, #0]
 8005866:	f002 f887 	bl	8007978 <USB_ReadDevOutEPInterrupt>
 800586a:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800586c:	f010 0f01 	tst.w	r0, #1
 8005870:	d1b8      	bne.n	80057e4 <HAL_PCD_IRQHandler+0x186>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005872:	f01a 0f08 	tst.w	sl, #8
 8005876:	d1bf      	bne.n	80057f8 <HAL_PCD_IRQHandler+0x19a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005878:	f01a 0f10 	tst.w	sl, #16
 800587c:	d004      	beq.n	8005888 <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800587e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005882:	2210      	movs	r2, #16
 8005884:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005888:	f01a 0f02 	tst.w	sl, #2
 800588c:	d0cb      	beq.n	8005826 <HAL_PCD_IRQHandler+0x1c8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800588e:	696b      	ldr	r3, [r5, #20]
 8005890:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005894:	d0ba      	beq.n	800580c <HAL_PCD_IRQHandler+0x1ae>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800589c:	607b      	str	r3, [r7, #4]
 800589e:	e7b5      	b.n	800580c <HAL_PCD_IRQHandler+0x1ae>
              ep->is_iso_incomplete = 0U;
 80058a0:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80058a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80058ae:	4659      	mov	r1, fp
 80058b0:	4620      	mov	r0, r4
 80058b2:	f004 fa33 	bl	8009d1c <HAL_PCD_ISOOUTIncompleteCallback>
 80058b6:	e7b1      	b.n	800581c <HAL_PCD_IRQHandler+0x1be>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80058b8:	6820      	ldr	r0, [r4, #0]
 80058ba:	f002 f855 	bl	8007968 <USB_ReadDevAllInEpInterrupt>
 80058be:	4680      	mov	r8, r0
      epnum = 0U;
 80058c0:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80058c2:	e025      	b.n	8005910 <HAL_PCD_IRQHandler+0x2b2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80058c4:	4659      	mov	r1, fp
 80058c6:	4620      	mov	r0, r4
 80058c8:	f004 f9e6 	bl	8009c98 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80058cc:	f01a 0f08 	tst.w	sl, #8
 80058d0:	d004      	beq.n	80058dc <HAL_PCD_IRQHandler+0x27e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80058d2:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80058d6:	2208      	movs	r2, #8
 80058d8:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80058dc:	f01a 0f10 	tst.w	sl, #16
 80058e0:	d004      	beq.n	80058ec <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80058e2:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80058e6:	2210      	movs	r2, #16
 80058e8:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80058ec:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80058f0:	d004      	beq.n	80058fc <HAL_PCD_IRQHandler+0x29e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80058f2:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80058f6:	2240      	movs	r2, #64	@ 0x40
 80058f8:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80058fc:	f01a 0f02 	tst.w	sl, #2
 8005900:	d140      	bne.n	8005984 <HAL_PCD_IRQHandler+0x326>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005902:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8005906:	d159      	bne.n	80059bc <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 8005908:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 800590c:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8005910:	f1b8 0f00 	cmp.w	r8, #0
 8005914:	f43f aef0 	beq.w	80056f8 <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005918:	f018 0f01 	tst.w	r8, #1
 800591c:	d0f4      	beq.n	8005908 <HAL_PCD_IRQHandler+0x2aa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800591e:	fa5f fb89 	uxtb.w	fp, r9
 8005922:	4659      	mov	r1, fp
 8005924:	6820      	ldr	r0, [r4, #0]
 8005926:	f002 f830 	bl	800798a <USB_ReadDevInEPInterrupt>
 800592a:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800592c:	f010 0f01 	tst.w	r0, #1
 8005930:	d0cc      	beq.n	80058cc <HAL_PCD_IRQHandler+0x26e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005932:	f009 020f 	and.w	r2, r9, #15
 8005936:	2101      	movs	r1, #1
 8005938:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800593c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593e:	ea23 0302 	bic.w	r3, r3, r2
 8005942:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005944:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005948:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 800594c:	79a3      	ldrb	r3, [r4, #6]
 800594e:	428b      	cmp	r3, r1
 8005950:	d1b8      	bne.n	80058c4 <HAL_PCD_IRQHandler+0x266>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005952:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005956:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800595a:	6a1a      	ldr	r2, [r3, #32]
 800595c:	69d9      	ldr	r1, [r3, #28]
 800595e:	440a      	add	r2, r1
 8005960:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005962:	f1b9 0f00 	cmp.w	r9, #0
 8005966:	d1ad      	bne.n	80058c4 <HAL_PCD_IRQHandler+0x266>
 8005968:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800596c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1a6      	bne.n	80058c4 <HAL_PCD_IRQHandler+0x266>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005976:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800597a:	2101      	movs	r1, #1
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	f002 f859 	bl	8007a34 <USB_EP0_OutStart>
 8005982:	e79f      	b.n	80058c4 <HAL_PCD_IRQHandler+0x266>
            (void)USB_FlushTxFifo(USBx, epnum);
 8005984:	4649      	mov	r1, r9
 8005986:	4628      	mov	r0, r5
 8005988:	f001 fbb6 	bl	80070f8 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 800598c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005990:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005994:	7ddb      	ldrb	r3, [r3, #23]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d005      	beq.n	80059a6 <HAL_PCD_IRQHandler+0x348>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800599a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800599e:	2202      	movs	r2, #2
 80059a0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 80059a4:	e7ad      	b.n	8005902 <HAL_PCD_IRQHandler+0x2a4>
              ep->is_iso_incomplete = 0U;
 80059a6:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80059aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80059ae:	2200      	movs	r2, #0
 80059b0:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80059b2:	4659      	mov	r1, fp
 80059b4:	4620      	mov	r0, r4
 80059b6:	f004 f9b7 	bl	8009d28 <HAL_PCD_ISOINIncompleteCallback>
 80059ba:	e7ee      	b.n	800599a <HAL_PCD_IRQHandler+0x33c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80059bc:	4649      	mov	r1, r9
 80059be:	4620      	mov	r0, r4
 80059c0:	f7ff fb1c 	bl	8004ffc <PCD_WriteEmptyTxFifo>
 80059c4:	e7a0      	b.n	8005908 <HAL_PCD_IRQHandler+0x2aa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 80059ce:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d008      	beq.n	80059e8 <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 80059d6:	4620      	mov	r0, r4
 80059d8:	f004 f99a 	bl	8009d10 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80059dc:	6822      	ldr	r2, [r4, #0]
 80059de:	6953      	ldr	r3, [r2, #20]
 80059e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059e4:	6153      	str	r3, [r2, #20]
 80059e6:	e68d      	b.n	8005704 <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 80059e8:	2100      	movs	r1, #0
 80059ea:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80059ee:	4620      	mov	r0, r4
 80059f0:	f000 f93f 	bl	8005c72 <HAL_PCDEx_LPM_Callback>
 80059f4:	e7f2      	b.n	80059dc <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 80059f6:	4620      	mov	r0, r4
 80059f8:	f004 f972 	bl	8009ce0 <HAL_PCD_SuspendCallback>
 80059fc:	e68d      	b.n	800571a <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f023 0301 	bic.w	r3, r3, #1
 8005a04:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005a06:	2110      	movs	r1, #16
 8005a08:	6820      	ldr	r0, [r4, #0]
 8005a0a:	f001 fb75 	bl	80070f8 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a0e:	e01a      	b.n	8005a46 <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005a10:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8005a14:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8005a18:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a1c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8005a20:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8005a24:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005a28:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a2c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8005a30:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8005a34:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a38:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8005a3c:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8005a40:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a44:	3601      	adds	r6, #1
 8005a46:	7923      	ldrb	r3, [r4, #4]
 8005a48:	42b3      	cmp	r3, r6
 8005a4a:	d8e1      	bhi.n	8005a10 <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005a52:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005a54:	7be3      	ldrb	r3, [r4, #15]
 8005a56:	b1db      	cbz	r3, 8005a90 <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a5c:	f043 030b 	orr.w	r3, r3, #11
 8005a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a66:	f043 030b 	orr.w	r3, r3, #11
 8005a6a:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005a6c:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 8005a70:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005a74:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a78:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005a7c:	79a1      	ldrb	r1, [r4, #6]
 8005a7e:	6820      	ldr	r0, [r4, #0]
 8005a80:	f001 ffd8 	bl	8007a34 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005a84:	6822      	ldr	r2, [r4, #0]
 8005a86:	6953      	ldr	r3, [r2, #20]
 8005a88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a8c:	6153      	str	r3, [r2, #20]
 8005a8e:	e650      	b.n	8005732 <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005a96:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005a9a:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f043 030b 	orr.w	r3, r3, #11
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	e7e2      	b.n	8005a6c <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 8005aa6:	6820      	ldr	r0, [r4, #0]
 8005aa8:	f001 ffb6 	bl	8007a18 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	f001 fc3f 	bl	8007330 <USB_GetDevSpeed>
 8005ab2:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ab4:	6826      	ldr	r6, [r4, #0]
 8005ab6:	f000 fbdd 	bl	8006274 <HAL_RCC_GetHCLKFreq>
 8005aba:	4601      	mov	r1, r0
 8005abc:	79e2      	ldrb	r2, [r4, #7]
 8005abe:	4630      	mov	r0, r6
 8005ac0:	f001 fa9c 	bl	8006ffc <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f004 f8f8 	bl	8009cba <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005aca:	6822      	ldr	r2, [r4, #0]
 8005acc:	6953      	ldr	r3, [r2, #20]
 8005ace:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ad2:	6153      	str	r3, [r2, #20]
 8005ad4:	e634      	b.n	8005740 <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f004 f8e9 	bl	8009cae <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005adc:	6822      	ldr	r2, [r4, #0]
 8005ade:	6953      	ldr	r3, [r2, #20]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	6153      	str	r3, [r2, #20]
 8005ae6:	e632      	b.n	800574e <HAL_PCD_IRQHandler+0xf0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ae8:	3601      	adds	r6, #1
 8005aea:	7923      	ldrb	r3, [r4, #4]
 8005aec:	42b3      	cmp	r3, r6
 8005aee:	d90c      	bls.n	8005b0a <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005af0:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8005af4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005af8:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d1f3      	bne.n	8005ae8 <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005b00:	b2f1      	uxtb	r1, r6
 8005b02:	4620      	mov	r0, r4
 8005b04:	f7ff fd91 	bl	800562a <HAL_PCD_EP_Abort>
 8005b08:	e7ee      	b.n	8005ae8 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b0a:	6820      	ldr	r0, [r4, #0]
 8005b0c:	f001 ff20 	bl	8007950 <USB_ReadInterrupts>
 8005b10:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8005b14:	d125      	bne.n	8005b62 <HAL_PCD_IRQHandler+0x504>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005b16:	6820      	ldr	r0, [r4, #0]
 8005b18:	f001 ff1a 	bl	8007950 <USB_ReadInterrupts>
 8005b1c:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8005b20:	d059      	beq.n	8005bd6 <HAL_PCD_IRQHandler+0x578>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b22:	2301      	movs	r3, #1
 8005b24:	e026      	b.n	8005b74 <HAL_PCD_IRQHandler+0x516>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b26:	3601      	adds	r6, #1
 8005b28:	7923      	ldrb	r3, [r4, #4]
 8005b2a:	42b3      	cmp	r3, r6
 8005b2c:	d91b      	bls.n	8005b66 <HAL_PCD_IRQHandler+0x508>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005b2e:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8005b32:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b36:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8005b3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b3e:	7e1b      	ldrb	r3, [r3, #24]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d1f0      	bne.n	8005b26 <HAL_PCD_IRQHandler+0x4c8>
 8005b44:	2a00      	cmp	r2, #0
 8005b46:	daee      	bge.n	8005b26 <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005b48:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8005b4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b50:	2201      	movs	r2, #1
 8005b52:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005b54:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8005b58:	b2c9      	uxtb	r1, r1
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f7ff fd65 	bl	800562a <HAL_PCD_EP_Abort>
 8005b60:	e7e1      	b.n	8005b26 <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b62:	2601      	movs	r6, #1
 8005b64:	e7e0      	b.n	8005b28 <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005b66:	6822      	ldr	r2, [r4, #0]
 8005b68:	6953      	ldr	r3, [r2, #20]
 8005b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b6e:	6153      	str	r3, [r2, #20]
 8005b70:	e7d1      	b.n	8005b16 <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b72:	3301      	adds	r3, #1
 8005b74:	7922      	ldrb	r2, [r4, #4]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d928      	bls.n	8005bcc <HAL_PCD_IRQHandler+0x56e>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005b7a:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8005b7e:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b82:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8005b86:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005b8a:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 8005b8e:	2a01      	cmp	r2, #1
 8005b90:	d1ef      	bne.n	8005b72 <HAL_PCD_IRQHandler+0x514>
 8005b92:	2900      	cmp	r1, #0
 8005b94:	daed      	bge.n	8005b72 <HAL_PCD_IRQHandler+0x514>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005b96:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 8005b9a:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8005b9e:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005ba2:	4291      	cmp	r1, r2
 8005ba4:	d1e5      	bne.n	8005b72 <HAL_PCD_IRQHandler+0x514>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005ba6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8005baa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005bae:	2101      	movs	r1, #1
 8005bb0:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005bb4:	69aa      	ldr	r2, [r5, #24]
 8005bb6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005bba:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005bbc:	696a      	ldr	r2, [r5, #20]
 8005bbe:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8005bc2:	d1d6      	bne.n	8005b72 <HAL_PCD_IRQHandler+0x514>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005bca:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005bcc:	6822      	ldr	r2, [r4, #0]
 8005bce:	6953      	ldr	r3, [r2, #20]
 8005bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bd4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005bd6:	6820      	ldr	r0, [r4, #0]
 8005bd8:	f001 feba 	bl	8007950 <USB_ReadInterrupts>
 8005bdc:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8005be0:	d110      	bne.n	8005c04 <HAL_PCD_IRQHandler+0x5a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005be2:	6820      	ldr	r0, [r4, #0]
 8005be4:	f001 feb4 	bl	8007950 <USB_ReadInterrupts>
 8005be8:	f010 0f04 	tst.w	r0, #4
 8005bec:	f43f ad40 	beq.w	8005670 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005bf4:	f015 0f04 	tst.w	r5, #4
 8005bf8:	d10d      	bne.n	8005c16 <HAL_PCD_IRQHandler+0x5b8>
      hpcd->Instance->GOTGINT |= RegVal;
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	6853      	ldr	r3, [r2, #4]
 8005bfe:	432b      	orrs	r3, r5
 8005c00:	6053      	str	r3, [r2, #4]
 8005c02:	e535      	b.n	8005670 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8005c04:	4620      	mov	r0, r4
 8005c06:	f004 f895 	bl	8009d34 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005c0a:	6822      	ldr	r2, [r4, #0]
 8005c0c:	6953      	ldr	r3, [r2, #20]
 8005c0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c12:	6153      	str	r3, [r2, #20]
 8005c14:	e7e5      	b.n	8005be2 <HAL_PCD_IRQHandler+0x584>
        HAL_PCD_DisconnectCallback(hpcd);
 8005c16:	4620      	mov	r0, r4
 8005c18:	f004 f892 	bl	8009d40 <HAL_PCD_DisconnectCallback>
 8005c1c:	e7ed      	b.n	8005bfa <HAL_PCD_IRQHandler+0x59c>

08005c1e <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005c1e:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005c20:	6804      	ldr	r4, [r0, #0]
 8005c22:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8005c24:	b931      	cbnz	r1, 8005c34 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005c26:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8005c2a:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005c36:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005c38:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	e008      	b.n	8005c52 <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005c40:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8005c44:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005c48:	6849      	ldr	r1, [r1, #4]
 8005c4a:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8005c4e:	3301      	adds	r3, #1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005c56:	428b      	cmp	r3, r1
 8005c58:	d3f2      	bcc.n	8005c40 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005c5a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8005c5e:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 8005c62:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8005c66:	6060      	str	r0, [r4, #4]
 8005c68:	e7e0      	b.n	8005c2c <HAL_PCDEx_SetTxFiFo+0xe>

08005c6a <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8005c6a:	6803      	ldr	r3, [r0, #0]
 8005c6c:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8005c6e:	2000      	movs	r0, #0
 8005c70:	4770      	bx	lr

08005c72 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005c72:	4770      	bx	lr

08005c74 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c74:	2800      	cmp	r0, #0
 8005c76:	f000 81e0 	beq.w	800603a <HAL_RCC_OscConfig+0x3c6>
{
 8005c7a:	b570      	push	{r4, r5, r6, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c80:	6803      	ldr	r3, [r0, #0]
 8005c82:	f013 0f01 	tst.w	r3, #1
 8005c86:	d03b      	beq.n	8005d00 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c88:	4b9f      	ldr	r3, [pc, #636]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f003 030c 	and.w	r3, r3, #12
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d02c      	beq.n	8005cee <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c94:	4b9c      	ldr	r3, [pc, #624]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d021      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ca0:	6863      	ldr	r3, [r4, #4]
 8005ca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ca6:	d04f      	beq.n	8005d48 <HAL_RCC_OscConfig+0xd4>
 8005ca8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cac:	d052      	beq.n	8005d54 <HAL_RCC_OscConfig+0xe0>
 8005cae:	4b96      	ldr	r3, [pc, #600]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005cbe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cc0:	6863      	ldr	r3, [r4, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d050      	beq.n	8005d68 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc6:	f7fe f96d 	bl	8003fa4 <HAL_GetTick>
 8005cca:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ccc:	4b8e      	ldr	r3, [pc, #568]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005cd4:	d114      	bne.n	8005d00 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cd6:	f7fe f965 	bl	8003fa4 <HAL_GetTick>
 8005cda:	1b40      	subs	r0, r0, r5
 8005cdc:	2864      	cmp	r0, #100	@ 0x64
 8005cde:	d9f5      	bls.n	8005ccc <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8005ce0:	2003      	movs	r0, #3
 8005ce2:	e1b1      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ce4:	4b88      	ldr	r3, [pc, #544]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8005cec:	d0d8      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cee:	4b86      	ldr	r3, [pc, #536]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005cf6:	d003      	beq.n	8005d00 <HAL_RCC_OscConfig+0x8c>
 8005cf8:	6863      	ldr	r3, [r4, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 819f 	beq.w	800603e <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	f013 0f02 	tst.w	r3, #2
 8005d06:	d054      	beq.n	8005db2 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d08:	4b7f      	ldr	r3, [pc, #508]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f013 0f0c 	tst.w	r3, #12
 8005d10:	d03e      	beq.n	8005d90 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d12:	4b7d      	ldr	r3, [pc, #500]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d033      	beq.n	8005d86 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d1e:	68e3      	ldr	r3, [r4, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d068      	beq.n	8005df6 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d24:	4b79      	ldr	r3, [pc, #484]	@ (8005f0c <HAL_RCC_OscConfig+0x298>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2a:	f7fe f93b 	bl	8003fa4 <HAL_GetTick>
 8005d2e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d30:	4b75      	ldr	r3, [pc, #468]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f013 0f02 	tst.w	r3, #2
 8005d38:	d154      	bne.n	8005de4 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d3a:	f7fe f933 	bl	8003fa4 <HAL_GetTick>
 8005d3e:	1b40      	subs	r0, r0, r5
 8005d40:	2802      	cmp	r0, #2
 8005d42:	d9f5      	bls.n	8005d30 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8005d44:	2003      	movs	r0, #3
 8005d46:	e17f      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d48:	4a6f      	ldr	r2, [pc, #444]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005d4a:	6813      	ldr	r3, [r2, #0]
 8005d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	e7b5      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4c>
 8005d54:	4b6c      	ldr	r3, [pc, #432]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	e7ab      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8005d68:	f7fe f91c 	bl	8003fa4 <HAL_GetTick>
 8005d6c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d6e:	4b66      	ldr	r3, [pc, #408]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005d76:	d0c3      	beq.n	8005d00 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d78:	f7fe f914 	bl	8003fa4 <HAL_GetTick>
 8005d7c:	1b40      	subs	r0, r0, r5
 8005d7e:	2864      	cmp	r0, #100	@ 0x64
 8005d80:	d9f5      	bls.n	8005d6e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8005d82:	2003      	movs	r0, #3
 8005d84:	e160      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d86:	4b60      	ldr	r3, [pc, #384]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8005d8e:	d1c6      	bne.n	8005d1e <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d90:	4b5d      	ldr	r3, [pc, #372]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f013 0f02 	tst.w	r3, #2
 8005d98:	d003      	beq.n	8005da2 <HAL_RCC_OscConfig+0x12e>
 8005d9a:	68e3      	ldr	r3, [r4, #12]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	f040 8150 	bne.w	8006042 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da2:	4a59      	ldr	r2, [pc, #356]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005da4:	6813      	ldr	r3, [r2, #0]
 8005da6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005daa:	6921      	ldr	r1, [r4, #16]
 8005dac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005db0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	f013 0f08 	tst.w	r3, #8
 8005db8:	d042      	beq.n	8005e40 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005dba:	6963      	ldr	r3, [r4, #20]
 8005dbc:	b36b      	cbz	r3, 8005e1a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dbe:	4b53      	ldr	r3, [pc, #332]	@ (8005f0c <HAL_RCC_OscConfig+0x298>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc6:	f7fe f8ed 	bl	8003fa4 <HAL_GetTick>
 8005dca:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dd0:	f013 0f02 	tst.w	r3, #2
 8005dd4:	d134      	bne.n	8005e40 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dd6:	f7fe f8e5 	bl	8003fa4 <HAL_GetTick>
 8005dda:	1b40      	subs	r0, r0, r5
 8005ddc:	2802      	cmp	r0, #2
 8005dde:	d9f5      	bls.n	8005dcc <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8005de0:	2003      	movs	r0, #3
 8005de2:	e131      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de4:	4a48      	ldr	r2, [pc, #288]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005de6:	6813      	ldr	r3, [r2, #0]
 8005de8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005dec:	6921      	ldr	r1, [r4, #16]
 8005dee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	e7dd      	b.n	8005db2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8005df6:	4b45      	ldr	r3, [pc, #276]	@ (8005f0c <HAL_RCC_OscConfig+0x298>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005dfc:	f7fe f8d2 	bl	8003fa4 <HAL_GetTick>
 8005e00:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e02:	4b41      	ldr	r3, [pc, #260]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f013 0f02 	tst.w	r3, #2
 8005e0a:	d0d2      	beq.n	8005db2 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e0c:	f7fe f8ca 	bl	8003fa4 <HAL_GetTick>
 8005e10:	1b40      	subs	r0, r0, r5
 8005e12:	2802      	cmp	r0, #2
 8005e14:	d9f5      	bls.n	8005e02 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8005e16:	2003      	movs	r0, #3
 8005e18:	e116      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8005f0c <HAL_RCC_OscConfig+0x298>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e22:	f7fe f8bf 	bl	8003fa4 <HAL_GetTick>
 8005e26:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e28:	4b37      	ldr	r3, [pc, #220]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e2c:	f013 0f02 	tst.w	r3, #2
 8005e30:	d006      	beq.n	8005e40 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e32:	f7fe f8b7 	bl	8003fa4 <HAL_GetTick>
 8005e36:	1b40      	subs	r0, r0, r5
 8005e38:	2802      	cmp	r0, #2
 8005e3a:	d9f5      	bls.n	8005e28 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8005e3c:	2003      	movs	r0, #3
 8005e3e:	e103      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	f013 0f04 	tst.w	r3, #4
 8005e46:	d077      	beq.n	8005f38 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e48:	4b2f      	ldr	r3, [pc, #188]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8005e50:	d133      	bne.n	8005eba <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e52:	2300      	movs	r3, #0
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	4b2c      	ldr	r3, [pc, #176]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e5a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005e5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005e6a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e6c:	4b28      	ldr	r3, [pc, #160]	@ (8005f10 <HAL_RCC_OscConfig+0x29c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005e74:	d023      	beq.n	8005ebe <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e76:	68a3      	ldr	r3, [r4, #8]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d034      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x272>
 8005e7c:	2b05      	cmp	r3, #5
 8005e7e:	d038      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x27e>
 8005e80:	4b21      	ldr	r3, [pc, #132]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005e82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e84:	f022 0201 	bic.w	r2, r2, #1
 8005e88:	671a      	str	r2, [r3, #112]	@ 0x70
 8005e8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e8c:	f022 0204 	bic.w	r2, r2, #4
 8005e90:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e92:	68a3      	ldr	r3, [r4, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d03d      	beq.n	8005f14 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e98:	f7fe f884 	bl	8003fa4 <HAL_GetTick>
 8005e9c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea2:	f013 0f02 	tst.w	r3, #2
 8005ea6:	d146      	bne.n	8005f36 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea8:	f7fe f87c 	bl	8003fa4 <HAL_GetTick>
 8005eac:	1b80      	subs	r0, r0, r6
 8005eae:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005eb2:	4298      	cmp	r0, r3
 8005eb4:	d9f3      	bls.n	8005e9e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8005eb6:	2003      	movs	r0, #3
 8005eb8:	e0c6      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8005eba:	2500      	movs	r5, #0
 8005ebc:	e7d6      	b.n	8005e6c <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ebe:	4a14      	ldr	r2, [pc, #80]	@ (8005f10 <HAL_RCC_OscConfig+0x29c>)
 8005ec0:	6813      	ldr	r3, [r2, #0]
 8005ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ec6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005ec8:	f7fe f86c 	bl	8003fa4 <HAL_GetTick>
 8005ecc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ece:	4b10      	ldr	r3, [pc, #64]	@ (8005f10 <HAL_RCC_OscConfig+0x29c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005ed6:	d1ce      	bne.n	8005e76 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed8:	f7fe f864 	bl	8003fa4 <HAL_GetTick>
 8005edc:	1b80      	subs	r0, r0, r6
 8005ede:	2802      	cmp	r0, #2
 8005ee0:	d9f5      	bls.n	8005ece <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8005ee2:	2003      	movs	r0, #3
 8005ee4:	e0b0      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ee6:	4a08      	ldr	r2, [pc, #32]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005ee8:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8005eea:	f043 0301 	orr.w	r3, r3, #1
 8005eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ef0:	e7cf      	b.n	8005e92 <HAL_RCC_OscConfig+0x21e>
 8005ef2:	4b05      	ldr	r3, [pc, #20]	@ (8005f08 <HAL_RCC_OscConfig+0x294>)
 8005ef4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ef6:	f042 0204 	orr.w	r2, r2, #4
 8005efa:	671a      	str	r2, [r3, #112]	@ 0x70
 8005efc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005efe:	f042 0201 	orr.w	r2, r2, #1
 8005f02:	671a      	str	r2, [r3, #112]	@ 0x70
 8005f04:	e7c5      	b.n	8005e92 <HAL_RCC_OscConfig+0x21e>
 8005f06:	bf00      	nop
 8005f08:	40023800 	.word	0x40023800
 8005f0c:	42470000 	.word	0x42470000
 8005f10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f14:	f7fe f846 	bl	8003fa4 <HAL_GetTick>
 8005f18:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f1a:	4b52      	ldr	r3, [pc, #328]	@ (8006064 <HAL_RCC_OscConfig+0x3f0>)
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f1e:	f013 0f02 	tst.w	r3, #2
 8005f22:	d008      	beq.n	8005f36 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f24:	f7fe f83e 	bl	8003fa4 <HAL_GetTick>
 8005f28:	1b80      	subs	r0, r0, r6
 8005f2a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005f2e:	4298      	cmp	r0, r3
 8005f30:	d9f3      	bls.n	8005f1a <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8005f32:	2003      	movs	r0, #3
 8005f34:	e088      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f36:	b9ed      	cbnz	r5, 8005f74 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f38:	69a3      	ldr	r3, [r4, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 8083 	beq.w	8006046 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f40:	4a48      	ldr	r2, [pc, #288]	@ (8006064 <HAL_RCC_OscConfig+0x3f0>)
 8005f42:	6892      	ldr	r2, [r2, #8]
 8005f44:	f002 020c 	and.w	r2, r2, #12
 8005f48:	2a08      	cmp	r2, #8
 8005f4a:	d051      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d017      	beq.n	8005f80 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f50:	4b45      	ldr	r3, [pc, #276]	@ (8006068 <HAL_RCC_OscConfig+0x3f4>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f56:	f7fe f825 	bl	8003fa4 <HAL_GetTick>
 8005f5a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f5c:	4b41      	ldr	r3, [pc, #260]	@ (8006064 <HAL_RCC_OscConfig+0x3f0>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005f64:	d042      	beq.n	8005fec <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f66:	f7fe f81d 	bl	8003fa4 <HAL_GetTick>
 8005f6a:	1b00      	subs	r0, r0, r4
 8005f6c:	2802      	cmp	r0, #2
 8005f6e:	d9f5      	bls.n	8005f5c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005f70:	2003      	movs	r0, #3
 8005f72:	e069      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f74:	4a3b      	ldr	r2, [pc, #236]	@ (8006064 <HAL_RCC_OscConfig+0x3f0>)
 8005f76:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005f78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f7e:	e7db      	b.n	8005f38 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8005f80:	4b39      	ldr	r3, [pc, #228]	@ (8006068 <HAL_RCC_OscConfig+0x3f4>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005f86:	f7fe f80d 	bl	8003fa4 <HAL_GetTick>
 8005f8a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f8c:	4b35      	ldr	r3, [pc, #212]	@ (8006064 <HAL_RCC_OscConfig+0x3f0>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005f94:	d006      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f96:	f7fe f805 	bl	8003fa4 <HAL_GetTick>
 8005f9a:	1b40      	subs	r0, r0, r5
 8005f9c:	2802      	cmp	r0, #2
 8005f9e:	d9f5      	bls.n	8005f8c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8005fa0:	2003      	movs	r0, #3
 8005fa2:	e051      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fa4:	69e3      	ldr	r3, [r4, #28]
 8005fa6:	6a22      	ldr	r2, [r4, #32]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005fac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005fb0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005fb2:	0852      	lsrs	r2, r2, #1
 8005fb4:	3a01      	subs	r2, #1
 8005fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005fbc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005fc0:	4a28      	ldr	r2, [pc, #160]	@ (8006064 <HAL_RCC_OscConfig+0x3f0>)
 8005fc2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8005fc4:	4b28      	ldr	r3, [pc, #160]	@ (8006068 <HAL_RCC_OscConfig+0x3f4>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005fca:	f7fd ffeb 	bl	8003fa4 <HAL_GetTick>
 8005fce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fd0:	4b24      	ldr	r3, [pc, #144]	@ (8006064 <HAL_RCC_OscConfig+0x3f0>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005fd8:	d106      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fda:	f7fd ffe3 	bl	8003fa4 <HAL_GetTick>
 8005fde:	1b00      	subs	r0, r0, r4
 8005fe0:	2802      	cmp	r0, #2
 8005fe2:	d9f5      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8005fe4:	2003      	movs	r0, #3
 8005fe6:	e02f      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005fe8:	2000      	movs	r0, #0
 8005fea:	e02d      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
 8005fec:	2000      	movs	r0, #0
 8005fee:	e02b      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d02b      	beq.n	800604c <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8005ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8006064 <HAL_RCC_OscConfig+0x3f0>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff8:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8005ffc:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ffe:	4291      	cmp	r1, r2
 8006000:	d126      	bne.n	8006050 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006002:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006006:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006008:	428a      	cmp	r2, r1
 800600a:	d123      	bne.n	8006054 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800600c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800600e:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8006012:	401a      	ands	r2, r3
 8006014:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8006018:	d11e      	bne.n	8006058 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800601a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800601e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006020:	0852      	lsrs	r2, r2, #1
 8006022:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006024:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8006028:	d118      	bne.n	800605c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800602a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800602e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006030:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8006034:	d114      	bne.n	8006060 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8006036:	2000      	movs	r0, #0
 8006038:	e006      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800603a:	2001      	movs	r0, #1
}
 800603c:	4770      	bx	lr
        return HAL_ERROR;
 800603e:	2001      	movs	r0, #1
 8006040:	e002      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8006042:	2001      	movs	r0, #1
 8006044:	e000      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8006046:	2000      	movs	r0, #0
}
 8006048:	b002      	add	sp, #8
 800604a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800604c:	2001      	movs	r0, #1
 800604e:	e7fb      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8006050:	2001      	movs	r0, #1
 8006052:	e7f9      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
 8006054:	2001      	movs	r0, #1
 8006056:	e7f7      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
 8006058:	2001      	movs	r0, #1
 800605a:	e7f5      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
 800605c:	2001      	movs	r0, #1
 800605e:	e7f3      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
 8006060:	2001      	movs	r0, #1
 8006062:	e7f1      	b.n	8006048 <HAL_RCC_OscConfig+0x3d4>
 8006064:	40023800 	.word	0x40023800
 8006068:	42470000 	.word	0x42470000

0800606c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800606c:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800606e:	4b26      	ldr	r3, [pc, #152]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 030c 	and.w	r3, r3, #12
 8006076:	2b04      	cmp	r3, #4
 8006078:	d041      	beq.n	80060fe <HAL_RCC_GetSysClockFreq+0x92>
 800607a:	2b08      	cmp	r3, #8
 800607c:	d141      	bne.n	8006102 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800607e:	4b22      	ldr	r3, [pc, #136]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800608c:	d012      	beq.n	80060b4 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800608e:	4b1e      	ldr	r3, [pc, #120]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006090:	6859      	ldr	r1, [r3, #4]
 8006092:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006096:	481d      	ldr	r0, [pc, #116]	@ (800610c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006098:	2300      	movs	r3, #0
 800609a:	fba1 0100 	umull	r0, r1, r1, r0
 800609e:	f7fa fcc5 	bl	8000a2c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80060a2:	4b19      	ldr	r3, [pc, #100]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x9c>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80060aa:	3301      	adds	r3, #1
 80060ac:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80060ae:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80060b2:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060b4:	4b14      	ldr	r3, [pc, #80]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x9c>)
 80060b6:	6858      	ldr	r0, [r3, #4]
 80060b8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80060bc:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80060c0:	ebbc 0c00 	subs.w	ip, ip, r0
 80060c4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80060c8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80060cc:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80060d0:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80060d4:	ebb1 010c 	subs.w	r1, r1, ip
 80060d8:	eb63 030e 	sbc.w	r3, r3, lr
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060e2:	00c9      	lsls	r1, r1, #3
 80060e4:	eb11 0c00 	adds.w	ip, r1, r0
 80060e8:	f143 0300 	adc.w	r3, r3, #0
 80060ec:	0299      	lsls	r1, r3, #10
 80060ee:	2300      	movs	r3, #0
 80060f0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80060f4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80060f8:	f7fa fc98 	bl	8000a2c <__aeabi_uldivmod>
 80060fc:	e7d1      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80060fe:	4803      	ldr	r0, [pc, #12]	@ (800610c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006100:	e7d7      	b.n	80060b2 <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006102:	4803      	ldr	r0, [pc, #12]	@ (8006110 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8006104:	e7d5      	b.n	80060b2 <HAL_RCC_GetSysClockFreq+0x46>
 8006106:	bf00      	nop
 8006108:	40023800 	.word	0x40023800
 800610c:	017d7840 	.word	0x017d7840
 8006110:	00f42400 	.word	0x00f42400

08006114 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006114:	2800      	cmp	r0, #0
 8006116:	f000 809b 	beq.w	8006250 <HAL_RCC_ClockConfig+0x13c>
{
 800611a:	b570      	push	{r4, r5, r6, lr}
 800611c:	460d      	mov	r5, r1
 800611e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006120:	4b4f      	ldr	r3, [pc, #316]	@ (8006260 <HAL_RCC_ClockConfig+0x14c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	428b      	cmp	r3, r1
 800612a:	d208      	bcs.n	800613e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612c:	b2cb      	uxtb	r3, r1
 800612e:	4a4c      	ldr	r2, [pc, #304]	@ (8006260 <HAL_RCC_ClockConfig+0x14c>)
 8006130:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006132:	6813      	ldr	r3, [r2, #0]
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	428b      	cmp	r3, r1
 800613a:	f040 808b 	bne.w	8006254 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	f013 0f02 	tst.w	r3, #2
 8006144:	d017      	beq.n	8006176 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006146:	f013 0f04 	tst.w	r3, #4
 800614a:	d004      	beq.n	8006156 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800614c:	4a45      	ldr	r2, [pc, #276]	@ (8006264 <HAL_RCC_ClockConfig+0x150>)
 800614e:	6893      	ldr	r3, [r2, #8]
 8006150:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006154:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	f013 0f08 	tst.w	r3, #8
 800615c:	d004      	beq.n	8006168 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800615e:	4a41      	ldr	r2, [pc, #260]	@ (8006264 <HAL_RCC_ClockConfig+0x150>)
 8006160:	6893      	ldr	r3, [r2, #8]
 8006162:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006166:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006168:	4a3e      	ldr	r2, [pc, #248]	@ (8006264 <HAL_RCC_ClockConfig+0x150>)
 800616a:	6893      	ldr	r3, [r2, #8]
 800616c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006170:	68a1      	ldr	r1, [r4, #8]
 8006172:	430b      	orrs	r3, r1
 8006174:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	f013 0f01 	tst.w	r3, #1
 800617c:	d032      	beq.n	80061e4 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800617e:	6863      	ldr	r3, [r4, #4]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d021      	beq.n	80061c8 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006184:	1e9a      	subs	r2, r3, #2
 8006186:	2a01      	cmp	r2, #1
 8006188:	d925      	bls.n	80061d6 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800618a:	4a36      	ldr	r2, [pc, #216]	@ (8006264 <HAL_RCC_ClockConfig+0x150>)
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	f012 0f02 	tst.w	r2, #2
 8006192:	d061      	beq.n	8006258 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006194:	4933      	ldr	r1, [pc, #204]	@ (8006264 <HAL_RCC_ClockConfig+0x150>)
 8006196:	688a      	ldr	r2, [r1, #8]
 8006198:	f022 0203 	bic.w	r2, r2, #3
 800619c:	4313      	orrs	r3, r2
 800619e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80061a0:	f7fd ff00 	bl	8003fa4 <HAL_GetTick>
 80061a4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006264 <HAL_RCC_ClockConfig+0x150>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 030c 	and.w	r3, r3, #12
 80061ae:	6862      	ldr	r2, [r4, #4]
 80061b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80061b4:	d016      	beq.n	80061e4 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061b6:	f7fd fef5 	bl	8003fa4 <HAL_GetTick>
 80061ba:	1b80      	subs	r0, r0, r6
 80061bc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80061c0:	4298      	cmp	r0, r3
 80061c2:	d9f0      	bls.n	80061a6 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80061c4:	2003      	movs	r0, #3
 80061c6:	e042      	b.n	800624e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061c8:	4a26      	ldr	r2, [pc, #152]	@ (8006264 <HAL_RCC_ClockConfig+0x150>)
 80061ca:	6812      	ldr	r2, [r2, #0]
 80061cc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80061d0:	d1e0      	bne.n	8006194 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80061d2:	2001      	movs	r0, #1
 80061d4:	e03b      	b.n	800624e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061d6:	4a23      	ldr	r2, [pc, #140]	@ (8006264 <HAL_RCC_ClockConfig+0x150>)
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80061de:	d1d9      	bne.n	8006194 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80061e0:	2001      	movs	r0, #1
 80061e2:	e034      	b.n	800624e <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006260 <HAL_RCC_ClockConfig+0x14c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	42ab      	cmp	r3, r5
 80061ee:	d907      	bls.n	8006200 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f0:	b2ea      	uxtb	r2, r5
 80061f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006260 <HAL_RCC_ClockConfig+0x14c>)
 80061f4:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	42ab      	cmp	r3, r5
 80061fe:	d12d      	bne.n	800625c <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	f013 0f04 	tst.w	r3, #4
 8006206:	d006      	beq.n	8006216 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006208:	4a16      	ldr	r2, [pc, #88]	@ (8006264 <HAL_RCC_ClockConfig+0x150>)
 800620a:	6893      	ldr	r3, [r2, #8]
 800620c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8006210:	68e1      	ldr	r1, [r4, #12]
 8006212:	430b      	orrs	r3, r1
 8006214:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	f013 0f08 	tst.w	r3, #8
 800621c:	d007      	beq.n	800622e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800621e:	4a11      	ldr	r2, [pc, #68]	@ (8006264 <HAL_RCC_ClockConfig+0x150>)
 8006220:	6893      	ldr	r3, [r2, #8]
 8006222:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006226:	6921      	ldr	r1, [r4, #16]
 8006228:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800622c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800622e:	f7ff ff1d 	bl	800606c <HAL_RCC_GetSysClockFreq>
 8006232:	4b0c      	ldr	r3, [pc, #48]	@ (8006264 <HAL_RCC_ClockConfig+0x150>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800623a:	4a0b      	ldr	r2, [pc, #44]	@ (8006268 <HAL_RCC_ClockConfig+0x154>)
 800623c:	5cd3      	ldrb	r3, [r2, r3]
 800623e:	40d8      	lsrs	r0, r3
 8006240:	4b0a      	ldr	r3, [pc, #40]	@ (800626c <HAL_RCC_ClockConfig+0x158>)
 8006242:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006244:	4b0a      	ldr	r3, [pc, #40]	@ (8006270 <HAL_RCC_ClockConfig+0x15c>)
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	f000 fdee 	bl	8006e28 <HAL_InitTick>
  return HAL_OK;
 800624c:	2000      	movs	r0, #0
}
 800624e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006250:	2001      	movs	r0, #1
}
 8006252:	4770      	bx	lr
      return HAL_ERROR;
 8006254:	2001      	movs	r0, #1
 8006256:	e7fa      	b.n	800624e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8006258:	2001      	movs	r0, #1
 800625a:	e7f8      	b.n	800624e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800625c:	2001      	movs	r0, #1
 800625e:	e7f6      	b.n	800624e <HAL_RCC_ClockConfig+0x13a>
 8006260:	40023c00 	.word	0x40023c00
 8006264:	40023800 	.word	0x40023800
 8006268:	0800c150 	.word	0x0800c150
 800626c:	20000070 	.word	0x20000070
 8006270:	2000006c 	.word	0x2000006c

08006274 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8006274:	4b01      	ldr	r3, [pc, #4]	@ (800627c <HAL_RCC_GetHCLKFreq+0x8>)
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20000070 	.word	0x20000070

08006280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006280:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006282:	f7ff fff7 	bl	8006274 <HAL_RCC_GetHCLKFreq>
 8006286:	4b04      	ldr	r3, [pc, #16]	@ (8006298 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800628e:	4a03      	ldr	r2, [pc, #12]	@ (800629c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006290:	5cd3      	ldrb	r3, [r2, r3]
}
 8006292:	40d8      	lsrs	r0, r3
 8006294:	bd08      	pop	{r3, pc}
 8006296:	bf00      	nop
 8006298:	40023800 	.word	0x40023800
 800629c:	0800c148 	.word	0x0800c148

080062a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062a0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062a2:	f7ff ffe7 	bl	8006274 <HAL_RCC_GetHCLKFreq>
 80062a6:	4b04      	ldr	r3, [pc, #16]	@ (80062b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80062ae:	4a03      	ldr	r2, [pc, #12]	@ (80062bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80062b0:	5cd3      	ldrb	r3, [r2, r3]
}
 80062b2:	40d8      	lsrs	r0, r3
 80062b4:	bd08      	pop	{r3, pc}
 80062b6:	bf00      	nop
 80062b8:	40023800 	.word	0x40023800
 80062bc:	0800c148 	.word	0x0800c148

080062c0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062c0:	230f      	movs	r3, #15
 80062c2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062c4:	4b0b      	ldr	r3, [pc, #44]	@ (80062f4 <HAL_RCC_GetClockConfig+0x34>)
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	f002 0203 	and.w	r2, r2, #3
 80062cc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80062d4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80062dc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	08db      	lsrs	r3, r3, #3
 80062e2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80062e6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062e8:	4b03      	ldr	r3, [pc, #12]	@ (80062f8 <HAL_RCC_GetClockConfig+0x38>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	600b      	str	r3, [r1, #0]
}
 80062f2:	4770      	bx	lr
 80062f4:	40023800 	.word	0x40023800
 80062f8:	40023c00 	.word	0x40023c00

080062fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fe:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006300:	6a03      	ldr	r3, [r0, #32]
 8006302:	f023 0301 	bic.w	r3, r3, #1
 8006306:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006308:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800630a:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800630c:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006310:	680c      	ldr	r4, [r1, #0]
 8006312:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006314:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006318:	688b      	ldr	r3, [r1, #8]
 800631a:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800631c:	4a0b      	ldr	r2, [pc, #44]	@ (800634c <TIM_OC1_SetConfig+0x50>)
 800631e:	4290      	cmp	r0, r2
 8006320:	d006      	beq.n	8006330 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006322:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006324:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006326:	684a      	ldr	r2, [r1, #4]
 8006328:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632a:	6203      	str	r3, [r0, #32]
}
 800632c:	bc30      	pop	{r4, r5}
 800632e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8006330:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006334:	68ca      	ldr	r2, [r1, #12]
 8006336:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8006338:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800633c:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8006340:	694a      	ldr	r2, [r1, #20]
 8006342:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8006344:	698d      	ldr	r5, [r1, #24]
 8006346:	4315      	orrs	r5, r2
 8006348:	e7eb      	b.n	8006322 <TIM_OC1_SetConfig+0x26>
 800634a:	bf00      	nop
 800634c:	40010000 	.word	0x40010000

08006350 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006350:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006352:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006354:	6a02      	ldr	r2, [r0, #32]
 8006356:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800635a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800635c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800635e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006360:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006364:	680d      	ldr	r5, [r1, #0]
 8006366:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006368:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800636c:	688a      	ldr	r2, [r1, #8]
 800636e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006372:	4a0d      	ldr	r2, [pc, #52]	@ (80063a8 <TIM_OC3_SetConfig+0x58>)
 8006374:	4290      	cmp	r0, r2
 8006376:	d006      	beq.n	8006386 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006378:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800637a:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800637c:	684a      	ldr	r2, [r1, #4]
 800637e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006380:	6203      	str	r3, [r0, #32]
}
 8006382:	bc30      	pop	{r4, r5}
 8006384:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8006386:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800638a:	68ca      	ldr	r2, [r1, #12]
 800638c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006390:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006394:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006398:	694a      	ldr	r2, [r1, #20]
 800639a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800639e:	698a      	ldr	r2, [r1, #24]
 80063a0:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 80063a4:	e7e8      	b.n	8006378 <TIM_OC3_SetConfig+0x28>
 80063a6:	bf00      	nop
 80063a8:	40010000 	.word	0x40010000

080063ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063ac:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ae:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063b0:	6a02      	ldr	r2, [r0, #32]
 80063b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063b6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ba:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063bc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c0:	680d      	ldr	r5, [r1, #0]
 80063c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063ca:	688d      	ldr	r5, [r1, #8]
 80063cc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d0:	4d07      	ldr	r5, [pc, #28]	@ (80063f0 <TIM_OC4_SetConfig+0x44>)
 80063d2:	42a8      	cmp	r0, r5
 80063d4:	d006      	beq.n	80063e4 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063d8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063da:	684a      	ldr	r2, [r1, #4]
 80063dc:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063de:	6203      	str	r3, [r0, #32]
}
 80063e0:	bc30      	pop	{r4, r5}
 80063e2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063e4:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063e8:	694d      	ldr	r5, [r1, #20]
 80063ea:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80063ee:	e7f2      	b.n	80063d6 <TIM_OC4_SetConfig+0x2a>
 80063f0:	40010000 	.word	0x40010000

080063f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063f6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063f8:	6a04      	ldr	r4, [r0, #32]
 80063fa:	f024 0401 	bic.w	r4, r4, #1
 80063fe:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006400:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006402:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006406:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800640a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800640e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006410:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006412:	6203      	str	r3, [r0, #32]
}
 8006414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006418:	4770      	bx	lr

0800641a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800641a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800641c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800641e:	6a04      	ldr	r4, [r0, #32]
 8006420:	f024 0410 	bic.w	r4, r4, #16
 8006424:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006426:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006428:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800642c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006430:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006434:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006438:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800643a:	6203      	str	r3, [r0, #32]
}
 800643c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006440:	4770      	bx	lr

08006442 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006442:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006448:	430b      	orrs	r3, r1
 800644a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800644e:	6083      	str	r3, [r0, #8]
}
 8006450:	4770      	bx	lr
	...

08006454 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006454:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006458:	2b01      	cmp	r3, #1
 800645a:	d12a      	bne.n	80064b2 <HAL_TIM_Base_Start+0x5e>
  htim->State = HAL_TIM_STATE_BUSY;
 800645c:	2302      	movs	r3, #2
 800645e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006462:	6803      	ldr	r3, [r0, #0]
 8006464:	4a15      	ldr	r2, [pc, #84]	@ (80064bc <HAL_TIM_Base_Start+0x68>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d018      	beq.n	800649c <HAL_TIM_Base_Start+0x48>
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800646e:	d015      	beq.n	800649c <HAL_TIM_Base_Start+0x48>
 8006470:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006474:	4293      	cmp	r3, r2
 8006476:	d011      	beq.n	800649c <HAL_TIM_Base_Start+0x48>
 8006478:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800647c:	4293      	cmp	r3, r2
 800647e:	d00d      	beq.n	800649c <HAL_TIM_Base_Start+0x48>
 8006480:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006484:	4293      	cmp	r3, r2
 8006486:	d009      	beq.n	800649c <HAL_TIM_Base_Start+0x48>
 8006488:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800648c:	4293      	cmp	r3, r2
 800648e:	d005      	beq.n	800649c <HAL_TIM_Base_Start+0x48>
    __HAL_TIM_ENABLE(htim);
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006498:	2000      	movs	r0, #0
 800649a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a2:	2a06      	cmp	r2, #6
 80064a4:	d007      	beq.n	80064b6 <HAL_TIM_Base_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	f042 0201 	orr.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80064ae:	2000      	movs	r0, #0
 80064b0:	4770      	bx	lr
    return HAL_ERROR;
 80064b2:	2001      	movs	r0, #1
 80064b4:	4770      	bx	lr
  return HAL_OK;
 80064b6:	2000      	movs	r0, #0
}
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40010000 	.word	0x40010000

080064c0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80064c0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d12f      	bne.n	8006528 <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 80064c8:	2302      	movs	r3, #2
 80064ca:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064ce:	6802      	ldr	r2, [r0, #0]
 80064d0:	68d3      	ldr	r3, [r2, #12]
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d8:	6803      	ldr	r3, [r0, #0]
 80064da:	4a15      	ldr	r2, [pc, #84]	@ (8006530 <HAL_TIM_Base_Start_IT+0x70>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d018      	beq.n	8006512 <HAL_TIM_Base_Start_IT+0x52>
 80064e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064e4:	d015      	beq.n	8006512 <HAL_TIM_Base_Start_IT+0x52>
 80064e6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d011      	beq.n	8006512 <HAL_TIM_Base_Start_IT+0x52>
 80064ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00d      	beq.n	8006512 <HAL_TIM_Base_Start_IT+0x52>
 80064f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d009      	beq.n	8006512 <HAL_TIM_Base_Start_IT+0x52>
 80064fe:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8006502:	4293      	cmp	r3, r2
 8006504:	d005      	beq.n	8006512 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	f042 0201 	orr.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800650e:	2000      	movs	r0, #0
 8006510:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006518:	2a06      	cmp	r2, #6
 800651a:	d007      	beq.n	800652c <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006524:	2000      	movs	r0, #0
 8006526:	4770      	bx	lr
    return HAL_ERROR;
 8006528:	2001      	movs	r0, #1
 800652a:	4770      	bx	lr
  return HAL_OK;
 800652c:	2000      	movs	r0, #0
}
 800652e:	4770      	bx	lr
 8006530:	40010000 	.word	0x40010000

08006534 <HAL_TIM_OC_MspInit>:
}
 8006534:	4770      	bx	lr

08006536 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006536:	4770      	bx	lr

08006538 <HAL_TIM_IC_CaptureCallback>:
}
 8006538:	4770      	bx	lr

0800653a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800653a:	4770      	bx	lr

0800653c <HAL_TIM_TriggerCallback>:
}
 800653c:	4770      	bx	lr

0800653e <HAL_TIM_IRQHandler>:
{
 800653e:	b570      	push	{r4, r5, r6, lr}
 8006540:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8006542:	6803      	ldr	r3, [r0, #0]
 8006544:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006546:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006548:	f015 0f02 	tst.w	r5, #2
 800654c:	d010      	beq.n	8006570 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800654e:	f016 0f02 	tst.w	r6, #2
 8006552:	d00d      	beq.n	8006570 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006554:	f06f 0202 	mvn.w	r2, #2
 8006558:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800655a:	2301      	movs	r3, #1
 800655c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800655e:	6803      	ldr	r3, [r0, #0]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	f013 0f03 	tst.w	r3, #3
 8006566:	d05e      	beq.n	8006626 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8006568:	f7ff ffe6 	bl	8006538 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656c:	2300      	movs	r3, #0
 800656e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006570:	f015 0f04 	tst.w	r5, #4
 8006574:	d012      	beq.n	800659c <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006576:	f016 0f04 	tst.w	r6, #4
 800657a:	d00f      	beq.n	800659c <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	f06f 0204 	mvn.w	r2, #4
 8006582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006584:	2302      	movs	r3, #2
 8006586:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006590:	d04f      	beq.n	8006632 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8006592:	4620      	mov	r0, r4
 8006594:	f7ff ffd0 	bl	8006538 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006598:	2300      	movs	r3, #0
 800659a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800659c:	f015 0f08 	tst.w	r5, #8
 80065a0:	d012      	beq.n	80065c8 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80065a2:	f016 0f08 	tst.w	r6, #8
 80065a6:	d00f      	beq.n	80065c8 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	f06f 0208 	mvn.w	r2, #8
 80065ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065b0:	2304      	movs	r3, #4
 80065b2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	f013 0f03 	tst.w	r3, #3
 80065bc:	d040      	beq.n	8006640 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80065be:	4620      	mov	r0, r4
 80065c0:	f7ff ffba 	bl	8006538 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c4:	2300      	movs	r3, #0
 80065c6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065c8:	f015 0f10 	tst.w	r5, #16
 80065cc:	d012      	beq.n	80065f4 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065ce:	f016 0f10 	tst.w	r6, #16
 80065d2:	d00f      	beq.n	80065f4 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	f06f 0210 	mvn.w	r2, #16
 80065da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065dc:	2308      	movs	r3, #8
 80065de:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80065e8:	d031      	beq.n	800664e <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80065ea:	4620      	mov	r0, r4
 80065ec:	f7ff ffa4 	bl	8006538 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f0:	2300      	movs	r3, #0
 80065f2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065f4:	f015 0f01 	tst.w	r5, #1
 80065f8:	d002      	beq.n	8006600 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065fa:	f016 0f01 	tst.w	r6, #1
 80065fe:	d12d      	bne.n	800665c <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006600:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8006604:	d002      	beq.n	800660c <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006606:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800660a:	d12f      	bne.n	800666c <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800660c:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8006610:	d002      	beq.n	8006618 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006612:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8006616:	d131      	bne.n	800667c <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006618:	f015 0f20 	tst.w	r5, #32
 800661c:	d002      	beq.n	8006624 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800661e:	f016 0f20 	tst.w	r6, #32
 8006622:	d133      	bne.n	800668c <HAL_TIM_IRQHandler+0x14e>
}
 8006624:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006626:	f7ff ff86 	bl	8006536 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800662a:	4620      	mov	r0, r4
 800662c:	f7ff ff85 	bl	800653a <HAL_TIM_PWM_PulseFinishedCallback>
 8006630:	e79c      	b.n	800656c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006632:	4620      	mov	r0, r4
 8006634:	f7ff ff7f 	bl	8006536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006638:	4620      	mov	r0, r4
 800663a:	f7ff ff7e 	bl	800653a <HAL_TIM_PWM_PulseFinishedCallback>
 800663e:	e7ab      	b.n	8006598 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006640:	4620      	mov	r0, r4
 8006642:	f7ff ff78 	bl	8006536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006646:	4620      	mov	r0, r4
 8006648:	f7ff ff77 	bl	800653a <HAL_TIM_PWM_PulseFinishedCallback>
 800664c:	e7ba      	b.n	80065c4 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800664e:	4620      	mov	r0, r4
 8006650:	f7ff ff71 	bl	8006536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006654:	4620      	mov	r0, r4
 8006656:	f7ff ff70 	bl	800653a <HAL_TIM_PWM_PulseFinishedCallback>
 800665a:	e7c9      	b.n	80065f0 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	f06f 0201 	mvn.w	r2, #1
 8006662:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006664:	4620      	mov	r0, r4
 8006666:	f7fc fb99 	bl	8002d9c <HAL_TIM_PeriodElapsedCallback>
 800666a:	e7c9      	b.n	8006600 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006672:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006674:	4620      	mov	r0, r4
 8006676:	f000 fbd5 	bl	8006e24 <HAL_TIMEx_BreakCallback>
 800667a:	e7c7      	b.n	800660c <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006682:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006684:	4620      	mov	r0, r4
 8006686:	f7ff ff59 	bl	800653c <HAL_TIM_TriggerCallback>
 800668a:	e7c5      	b.n	8006618 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	f06f 0220 	mvn.w	r2, #32
 8006692:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006694:	4620      	mov	r0, r4
 8006696:	f000 fbc4 	bl	8006e22 <HAL_TIMEx_CommutCallback>
}
 800669a:	e7c3      	b.n	8006624 <HAL_TIM_IRQHandler+0xe6>

0800669c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800669c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800669e:	4a29      	ldr	r2, [pc, #164]	@ (8006744 <TIM_Base_SetConfig+0xa8>)
 80066a0:	4290      	cmp	r0, r2
 80066a2:	d00e      	beq.n	80066c2 <TIM_Base_SetConfig+0x26>
 80066a4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80066a8:	d00b      	beq.n	80066c2 <TIM_Base_SetConfig+0x26>
 80066aa:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80066ae:	4290      	cmp	r0, r2
 80066b0:	d007      	beq.n	80066c2 <TIM_Base_SetConfig+0x26>
 80066b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80066b6:	4290      	cmp	r0, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_Base_SetConfig+0x26>
 80066ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80066be:	4290      	cmp	r0, r2
 80066c0:	d103      	bne.n	80066ca <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80066c6:	684a      	ldr	r2, [r1, #4]
 80066c8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006744 <TIM_Base_SetConfig+0xa8>)
 80066cc:	4290      	cmp	r0, r2
 80066ce:	d01a      	beq.n	8006706 <TIM_Base_SetConfig+0x6a>
 80066d0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80066d4:	d017      	beq.n	8006706 <TIM_Base_SetConfig+0x6a>
 80066d6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80066da:	4290      	cmp	r0, r2
 80066dc:	d013      	beq.n	8006706 <TIM_Base_SetConfig+0x6a>
 80066de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80066e2:	4290      	cmp	r0, r2
 80066e4:	d00f      	beq.n	8006706 <TIM_Base_SetConfig+0x6a>
 80066e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80066ea:	4290      	cmp	r0, r2
 80066ec:	d00b      	beq.n	8006706 <TIM_Base_SetConfig+0x6a>
 80066ee:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80066f2:	4290      	cmp	r0, r2
 80066f4:	d007      	beq.n	8006706 <TIM_Base_SetConfig+0x6a>
 80066f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80066fa:	4290      	cmp	r0, r2
 80066fc:	d003      	beq.n	8006706 <TIM_Base_SetConfig+0x6a>
 80066fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006702:	4290      	cmp	r0, r2
 8006704:	d103      	bne.n	800670e <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800670a:	68ca      	ldr	r2, [r1, #12]
 800670c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800670e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006712:	694a      	ldr	r2, [r1, #20]
 8006714:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006716:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006718:	688b      	ldr	r3, [r1, #8]
 800671a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800671c:	680b      	ldr	r3, [r1, #0]
 800671e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006720:	4b08      	ldr	r3, [pc, #32]	@ (8006744 <TIM_Base_SetConfig+0xa8>)
 8006722:	4298      	cmp	r0, r3
 8006724:	d00a      	beq.n	800673c <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8006726:	2301      	movs	r3, #1
 8006728:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800672a:	6903      	ldr	r3, [r0, #16]
 800672c:	f013 0f01 	tst.w	r3, #1
 8006730:	d003      	beq.n	800673a <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006732:	6903      	ldr	r3, [r0, #16]
 8006734:	f023 0301 	bic.w	r3, r3, #1
 8006738:	6103      	str	r3, [r0, #16]
}
 800673a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800673c:	690b      	ldr	r3, [r1, #16]
 800673e:	6303      	str	r3, [r0, #48]	@ 0x30
 8006740:	e7f1      	b.n	8006726 <TIM_Base_SetConfig+0x8a>
 8006742:	bf00      	nop
 8006744:	40010000 	.word	0x40010000

08006748 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006748:	b340      	cbz	r0, 800679c <HAL_TIM_Base_Init+0x54>
{
 800674a:	b510      	push	{r4, lr}
 800674c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800674e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006752:	b1f3      	cbz	r3, 8006792 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	2302      	movs	r3, #2
 8006756:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800675a:	4621      	mov	r1, r4
 800675c:	f851 0b04 	ldr.w	r0, [r1], #4
 8006760:	f7ff ff9c 	bl	800669c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006764:	2301      	movs	r3, #1
 8006766:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800676a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800676e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006772:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006776:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800677a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800677e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006782:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006786:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800678a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800678e:	2000      	movs	r0, #0
}
 8006790:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006792:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006796:	f002 f8a1 	bl	80088dc <HAL_TIM_Base_MspInit>
 800679a:	e7db      	b.n	8006754 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800679c:	2001      	movs	r0, #1
}
 800679e:	4770      	bx	lr

080067a0 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80067a0:	b340      	cbz	r0, 80067f4 <HAL_TIM_OC_Init+0x54>
{
 80067a2:	b510      	push	{r4, lr}
 80067a4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80067a6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80067aa:	b1f3      	cbz	r3, 80067ea <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80067ac:	2302      	movs	r3, #2
 80067ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80067b2:	4621      	mov	r1, r4
 80067b4:	f851 0b04 	ldr.w	r0, [r1], #4
 80067b8:	f7ff ff70 	bl	800669c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067bc:	2301      	movs	r3, #1
 80067be:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80067c6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80067ca:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80067ce:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067da:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80067de:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80067e2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80067e6:	2000      	movs	r0, #0
}
 80067e8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80067ea:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 80067ee:	f7ff fea1 	bl	8006534 <HAL_TIM_OC_MspInit>
 80067f2:	e7db      	b.n	80067ac <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 80067f4:	2001      	movs	r0, #1
}
 80067f6:	4770      	bx	lr

080067f8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80067f8:	b340      	cbz	r0, 800684c <HAL_TIM_PWM_Init+0x54>
{
 80067fa:	b510      	push	{r4, lr}
 80067fc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80067fe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006802:	b1f3      	cbz	r3, 8006842 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006804:	2302      	movs	r3, #2
 8006806:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800680a:	4621      	mov	r1, r4
 800680c:	f851 0b04 	ldr.w	r0, [r1], #4
 8006810:	f7ff ff44 	bl	800669c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006814:	2301      	movs	r3, #1
 8006816:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800681a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800681e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006822:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006826:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800682e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006832:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006836:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800683a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800683e:	2000      	movs	r0, #0
}
 8006840:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006842:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006846:	f002 f815 	bl	8008874 <HAL_TIM_PWM_MspInit>
 800684a:	e7db      	b.n	8006804 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800684c:	2001      	movs	r0, #1
}
 800684e:	4770      	bx	lr

08006850 <TIM_OC2_SetConfig>:
{
 8006850:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8006852:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006854:	6a02      	ldr	r2, [r0, #32]
 8006856:	f022 0210 	bic.w	r2, r2, #16
 800685a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800685c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800685e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006860:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006864:	680d      	ldr	r5, [r1, #0]
 8006866:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800686a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800686e:	688d      	ldr	r5, [r1, #8]
 8006870:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006874:	4d0c      	ldr	r5, [pc, #48]	@ (80068a8 <TIM_OC2_SetConfig+0x58>)
 8006876:	42a8      	cmp	r0, r5
 8006878:	d006      	beq.n	8006888 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 800687a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800687c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800687e:	684a      	ldr	r2, [r1, #4]
 8006880:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8006882:	6203      	str	r3, [r0, #32]
}
 8006884:	bc30      	pop	{r4, r5}
 8006886:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8006888:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800688c:	68cd      	ldr	r5, [r1, #12]
 800688e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006892:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006896:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800689a:	694d      	ldr	r5, [r1, #20]
 800689c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068a0:	698d      	ldr	r5, [r1, #24]
 80068a2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80068a6:	e7e8      	b.n	800687a <TIM_OC2_SetConfig+0x2a>
 80068a8:	40010000 	.word	0x40010000

080068ac <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80068ac:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d028      	beq.n	8006906 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 80068b4:	b510      	push	{r4, lr}
 80068b6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80068b8:	2301      	movs	r3, #1
 80068ba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80068be:	2a0c      	cmp	r2, #12
 80068c0:	d81c      	bhi.n	80068fc <HAL_TIM_OC_ConfigChannel+0x50>
 80068c2:	e8df f002 	tbb	[pc, r2]
 80068c6:	1b07      	.short	0x1b07
 80068c8:	1b0c1b1b 	.word	0x1b0c1b1b
 80068cc:	1b111b1b 	.word	0x1b111b1b
 80068d0:	1b1b      	.short	0x1b1b
 80068d2:	16          	.byte	0x16
 80068d3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068d4:	6800      	ldr	r0, [r0, #0]
 80068d6:	f7ff fd11 	bl	80062fc <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80068da:	2000      	movs	r0, #0
      break;
 80068dc:	e00f      	b.n	80068fe <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068de:	6800      	ldr	r0, [r0, #0]
 80068e0:	f7ff ffb6 	bl	8006850 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80068e4:	2000      	movs	r0, #0
      break;
 80068e6:	e00a      	b.n	80068fe <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068e8:	6800      	ldr	r0, [r0, #0]
 80068ea:	f7ff fd31 	bl	8006350 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80068ee:	2000      	movs	r0, #0
      break;
 80068f0:	e005      	b.n	80068fe <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068f2:	6800      	ldr	r0, [r0, #0]
 80068f4:	f7ff fd5a 	bl	80063ac <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80068f8:	2000      	movs	r0, #0
      break;
 80068fa:	e000      	b.n	80068fe <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 80068fc:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80068fe:	2300      	movs	r3, #0
 8006900:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006904:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8006906:	2002      	movs	r0, #2
}
 8006908:	4770      	bx	lr

0800690a <HAL_TIM_PWM_ConfigChannel>:
{
 800690a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800690c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006910:	2b01      	cmp	r3, #1
 8006912:	d066      	beq.n	80069e2 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8006914:	4604      	mov	r4, r0
 8006916:	460d      	mov	r5, r1
 8006918:	2301      	movs	r3, #1
 800691a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800691e:	2a0c      	cmp	r2, #12
 8006920:	d85a      	bhi.n	80069d8 <HAL_TIM_PWM_ConfigChannel+0xce>
 8006922:	e8df f002 	tbb	[pc, r2]
 8006926:	5907      	.short	0x5907
 8006928:	591b5959 	.word	0x591b5959
 800692c:	59305959 	.word	0x59305959
 8006930:	5959      	.short	0x5959
 8006932:	44          	.byte	0x44
 8006933:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006934:	6800      	ldr	r0, [r0, #0]
 8006936:	f7ff fce1 	bl	80062fc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800693a:	6822      	ldr	r2, [r4, #0]
 800693c:	6993      	ldr	r3, [r2, #24]
 800693e:	f043 0308 	orr.w	r3, r3, #8
 8006942:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006944:	6822      	ldr	r2, [r4, #0]
 8006946:	6993      	ldr	r3, [r2, #24]
 8006948:	f023 0304 	bic.w	r3, r3, #4
 800694c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800694e:	6822      	ldr	r2, [r4, #0]
 8006950:	6993      	ldr	r3, [r2, #24]
 8006952:	6929      	ldr	r1, [r5, #16]
 8006954:	430b      	orrs	r3, r1
 8006956:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006958:	2000      	movs	r0, #0
      break;
 800695a:	e03e      	b.n	80069da <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800695c:	6800      	ldr	r0, [r0, #0]
 800695e:	f7ff ff77 	bl	8006850 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006962:	6822      	ldr	r2, [r4, #0]
 8006964:	6993      	ldr	r3, [r2, #24]
 8006966:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800696a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800696c:	6822      	ldr	r2, [r4, #0]
 800696e:	6993      	ldr	r3, [r2, #24]
 8006970:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006974:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006976:	6822      	ldr	r2, [r4, #0]
 8006978:	6993      	ldr	r3, [r2, #24]
 800697a:	6929      	ldr	r1, [r5, #16]
 800697c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006980:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006982:	2000      	movs	r0, #0
      break;
 8006984:	e029      	b.n	80069da <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006986:	6800      	ldr	r0, [r0, #0]
 8006988:	f7ff fce2 	bl	8006350 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800698c:	6822      	ldr	r2, [r4, #0]
 800698e:	69d3      	ldr	r3, [r2, #28]
 8006990:	f043 0308 	orr.w	r3, r3, #8
 8006994:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006996:	6822      	ldr	r2, [r4, #0]
 8006998:	69d3      	ldr	r3, [r2, #28]
 800699a:	f023 0304 	bic.w	r3, r3, #4
 800699e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069a0:	6822      	ldr	r2, [r4, #0]
 80069a2:	69d3      	ldr	r3, [r2, #28]
 80069a4:	6929      	ldr	r1, [r5, #16]
 80069a6:	430b      	orrs	r3, r1
 80069a8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80069aa:	2000      	movs	r0, #0
      break;
 80069ac:	e015      	b.n	80069da <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069ae:	6800      	ldr	r0, [r0, #0]
 80069b0:	f7ff fcfc 	bl	80063ac <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069b4:	6822      	ldr	r2, [r4, #0]
 80069b6:	69d3      	ldr	r3, [r2, #28]
 80069b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80069bc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069be:	6822      	ldr	r2, [r4, #0]
 80069c0:	69d3      	ldr	r3, [r2, #28]
 80069c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069c6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069c8:	6822      	ldr	r2, [r4, #0]
 80069ca:	69d3      	ldr	r3, [r2, #28]
 80069cc:	6929      	ldr	r1, [r5, #16]
 80069ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80069d2:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80069d4:	2000      	movs	r0, #0
      break;
 80069d6:	e000      	b.n	80069da <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80069d8:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80069da:	2300      	movs	r3, #0
 80069dc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80069e0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80069e2:	2002      	movs	r0, #2
 80069e4:	e7fc      	b.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0xd6>

080069e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069e6:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069e8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069ea:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069ee:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80069f2:	430a      	orrs	r2, r1
 80069f4:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069f8:	6082      	str	r2, [r0, #8]
}
 80069fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006a00:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d078      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0xfa>
{
 8006a08:	b510      	push	{r4, lr}
 8006a0a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006a12:	2302      	movs	r3, #2
 8006a14:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006a18:	6802      	ldr	r2, [r0, #0]
 8006a1a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a20:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8006a24:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006a26:	680b      	ldr	r3, [r1, #0]
 8006a28:	2b60      	cmp	r3, #96	@ 0x60
 8006a2a:	d04c      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0xc6>
 8006a2c:	d823      	bhi.n	8006a76 <HAL_TIM_ConfigClockSource+0x76>
 8006a2e:	2b40      	cmp	r3, #64	@ 0x40
 8006a30:	d054      	beq.n	8006adc <HAL_TIM_ConfigClockSource+0xdc>
 8006a32:	d811      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x58>
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d003      	beq.n	8006a40 <HAL_TIM_ConfigClockSource+0x40>
 8006a38:	d80a      	bhi.n	8006a50 <HAL_TIM_ConfigClockSource+0x50>
 8006a3a:	b10b      	cbz	r3, 8006a40 <HAL_TIM_ConfigClockSource+0x40>
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d105      	bne.n	8006a4c <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a40:	4619      	mov	r1, r3
 8006a42:	6820      	ldr	r0, [r4, #0]
 8006a44:	f7ff fcfd 	bl	8006442 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006a48:	2000      	movs	r0, #0
      break;
 8006a4a:	e028      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8006a4c:	2001      	movs	r0, #1
 8006a4e:	e026      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8006a50:	2b30      	cmp	r3, #48	@ 0x30
 8006a52:	d0f5      	beq.n	8006a40 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8006a54:	2001      	movs	r0, #1
 8006a56:	e022      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8006a58:	2b50      	cmp	r3, #80	@ 0x50
 8006a5a:	d10a      	bne.n	8006a72 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a5c:	68ca      	ldr	r2, [r1, #12]
 8006a5e:	6849      	ldr	r1, [r1, #4]
 8006a60:	6800      	ldr	r0, [r0, #0]
 8006a62:	f7ff fcc7 	bl	80063f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a66:	2150      	movs	r1, #80	@ 0x50
 8006a68:	6820      	ldr	r0, [r4, #0]
 8006a6a:	f7ff fcea 	bl	8006442 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006a6e:	2000      	movs	r0, #0
      break;
 8006a70:	e015      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8006a72:	2001      	movs	r0, #1
 8006a74:	e013      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8006a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a7a:	d03a      	beq.n	8006af2 <HAL_TIM_ConfigClockSource+0xf2>
 8006a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a80:	d014      	beq.n	8006aac <HAL_TIM_ConfigClockSource+0xac>
 8006a82:	2b70      	cmp	r3, #112	@ 0x70
 8006a84:	d137      	bne.n	8006af6 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8006a86:	68cb      	ldr	r3, [r1, #12]
 8006a88:	684a      	ldr	r2, [r1, #4]
 8006a8a:	6889      	ldr	r1, [r1, #8]
 8006a8c:	6800      	ldr	r0, [r0, #0]
 8006a8e:	f7ff ffaa 	bl	80069e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a96:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006a9a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006a9c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006aaa:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8006aac:	68cb      	ldr	r3, [r1, #12]
 8006aae:	684a      	ldr	r2, [r1, #4]
 8006ab0:	6889      	ldr	r1, [r1, #8]
 8006ab2:	6800      	ldr	r0, [r0, #0]
 8006ab4:	f7ff ff97 	bl	80069e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ab8:	6822      	ldr	r2, [r4, #0]
 8006aba:	6893      	ldr	r3, [r2, #8]
 8006abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ac0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac2:	2000      	movs	r0, #0
      break;
 8006ac4:	e7eb      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ac6:	68ca      	ldr	r2, [r1, #12]
 8006ac8:	6849      	ldr	r1, [r1, #4]
 8006aca:	6800      	ldr	r0, [r0, #0]
 8006acc:	f7ff fca5 	bl	800641a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ad0:	2160      	movs	r1, #96	@ 0x60
 8006ad2:	6820      	ldr	r0, [r4, #0]
 8006ad4:	f7ff fcb5 	bl	8006442 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006ad8:	2000      	movs	r0, #0
      break;
 8006ada:	e7e0      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006adc:	68ca      	ldr	r2, [r1, #12]
 8006ade:	6849      	ldr	r1, [r1, #4]
 8006ae0:	6800      	ldr	r0, [r0, #0]
 8006ae2:	f7ff fc87 	bl	80063f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ae6:	2140      	movs	r1, #64	@ 0x40
 8006ae8:	6820      	ldr	r0, [r4, #0]
 8006aea:	f7ff fcaa 	bl	8006442 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006aee:	2000      	movs	r0, #0
      break;
 8006af0:	e7d5      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8006af2:	2000      	movs	r0, #0
 8006af4:	e7d3      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8006af6:	2001      	movs	r0, #1
 8006af8:	e7d1      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8006afa:	2002      	movs	r0, #2
}
 8006afc:	4770      	bx	lr

08006afe <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006afe:	f001 011f 	and.w	r1, r1, #31
 8006b02:	f04f 0c01 	mov.w	ip, #1
 8006b06:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b0a:	6a03      	ldr	r3, [r0, #32]
 8006b0c:	ea23 030c 	bic.w	r3, r3, ip
 8006b10:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b12:	6a03      	ldr	r3, [r0, #32]
 8006b14:	408a      	lsls	r2, r1
 8006b16:	4313      	orrs	r3, r2
 8006b18:	6203      	str	r3, [r0, #32]
}
 8006b1a:	4770      	bx	lr

08006b1c <HAL_TIM_OC_Start_IT>:
{
 8006b1c:	b510      	push	{r4, lr}
 8006b1e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b20:	4608      	mov	r0, r1
 8006b22:	2900      	cmp	r1, #0
 8006b24:	d137      	bne.n	8006b96 <HAL_TIM_OC_Start_IT+0x7a>
 8006b26:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	bf18      	it	ne
 8006b2e:	2301      	movne	r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f040 8095 	bne.w	8006c60 <HAL_TIM_OC_Start_IT+0x144>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b36:	2800      	cmp	r0, #0
 8006b38:	d143      	bne.n	8006bc2 <HAL_TIM_OC_Start_IT+0xa6>
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b40:	6822      	ldr	r2, [r4, #0]
 8006b42:	68d3      	ldr	r3, [r2, #12]
 8006b44:	f043 0302 	orr.w	r3, r3, #2
 8006b48:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	4601      	mov	r1, r0
 8006b4e:	6820      	ldr	r0, [r4, #0]
 8006b50:	f7ff ffd5 	bl	8006afe <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	4a45      	ldr	r2, [pc, #276]	@ (8006c6c <HAL_TIM_OC_Start_IT+0x150>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d071      	beq.n	8006c40 <HAL_TIM_OC_Start_IT+0x124>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	4a43      	ldr	r2, [pc, #268]	@ (8006c6c <HAL_TIM_OC_Start_IT+0x150>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d072      	beq.n	8006c4a <HAL_TIM_OC_Start_IT+0x12e>
 8006b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b68:	d06f      	beq.n	8006c4a <HAL_TIM_OC_Start_IT+0x12e>
 8006b6a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d06b      	beq.n	8006c4a <HAL_TIM_OC_Start_IT+0x12e>
 8006b72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d067      	beq.n	8006c4a <HAL_TIM_OC_Start_IT+0x12e>
 8006b7a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d063      	beq.n	8006c4a <HAL_TIM_OC_Start_IT+0x12e>
 8006b82:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d05f      	beq.n	8006c4a <HAL_TIM_OC_Start_IT+0x12e>
      __HAL_TIM_ENABLE(htim);
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	f042 0201 	orr.w	r2, r2, #1
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	2000      	movs	r0, #0
 8006b94:	e065      	b.n	8006c62 <HAL_TIM_OC_Start_IT+0x146>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b96:	2904      	cmp	r1, #4
 8006b98:	d007      	beq.n	8006baa <HAL_TIM_OC_Start_IT+0x8e>
 8006b9a:	2908      	cmp	r1, #8
 8006b9c:	d00b      	beq.n	8006bb6 <HAL_TIM_OC_Start_IT+0x9a>
 8006b9e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	bf18      	it	ne
 8006ba6:	2301      	movne	r3, #1
 8006ba8:	e7c2      	b.n	8006b30 <HAL_TIM_OC_Start_IT+0x14>
 8006baa:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	bf18      	it	ne
 8006bb2:	2301      	movne	r3, #1
 8006bb4:	e7bc      	b.n	8006b30 <HAL_TIM_OC_Start_IT+0x14>
 8006bb6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	bf18      	it	ne
 8006bbe:	2301      	movne	r3, #1
 8006bc0:	e7b6      	b.n	8006b30 <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bc2:	2804      	cmp	r0, #4
 8006bc4:	d024      	beq.n	8006c10 <HAL_TIM_OC_Start_IT+0xf4>
 8006bc6:	2808      	cmp	r0, #8
 8006bc8:	d02b      	beq.n	8006c22 <HAL_TIM_OC_Start_IT+0x106>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  switch (Channel)
 8006bd0:	280c      	cmp	r0, #12
 8006bd2:	d847      	bhi.n	8006c64 <HAL_TIM_OC_Start_IT+0x148>
 8006bd4:	a301      	add	r3, pc, #4	@ (adr r3, 8006bdc <HAL_TIM_OC_Start_IT+0xc0>)
 8006bd6:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8006bda:	bf00      	nop
 8006bdc:	08006b41 	.word	0x08006b41
 8006be0:	08006c65 	.word	0x08006c65
 8006be4:	08006c65 	.word	0x08006c65
 8006be8:	08006c65 	.word	0x08006c65
 8006bec:	08006c17 	.word	0x08006c17
 8006bf0:	08006c65 	.word	0x08006c65
 8006bf4:	08006c65 	.word	0x08006c65
 8006bf8:	08006c65 	.word	0x08006c65
 8006bfc:	08006c29 	.word	0x08006c29
 8006c00:	08006c65 	.word	0x08006c65
 8006c04:	08006c65 	.word	0x08006c65
 8006c08:	08006c65 	.word	0x08006c65
 8006c0c:	08006c35 	.word	0x08006c35
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c10:	2302      	movs	r3, #2
 8006c12:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c16:	6822      	ldr	r2, [r4, #0]
 8006c18:	68d3      	ldr	r3, [r2, #12]
 8006c1a:	f043 0304 	orr.w	r3, r3, #4
 8006c1e:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8006c20:	e793      	b.n	8006b4a <HAL_TIM_OC_Start_IT+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c22:	2302      	movs	r3, #2
 8006c24:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006c28:	6822      	ldr	r2, [r4, #0]
 8006c2a:	68d3      	ldr	r3, [r2, #12]
 8006c2c:	f043 0308 	orr.w	r3, r3, #8
 8006c30:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8006c32:	e78a      	b.n	8006b4a <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006c34:	6822      	ldr	r2, [r4, #0]
 8006c36:	68d3      	ldr	r3, [r2, #12]
 8006c38:	f043 0310 	orr.w	r3, r3, #16
 8006c3c:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8006c3e:	e784      	b.n	8006b4a <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_MOE_ENABLE(htim);
 8006c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c46:	645a      	str	r2, [r3, #68]	@ 0x44
 8006c48:	e788      	b.n	8006b5c <HAL_TIM_OC_Start_IT+0x40>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c50:	2a06      	cmp	r2, #6
 8006c52:	d009      	beq.n	8006c68 <HAL_TIM_OC_Start_IT+0x14c>
        __HAL_TIM_ENABLE(htim);
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	e000      	b.n	8006c62 <HAL_TIM_OC_Start_IT+0x146>
    return HAL_ERROR;
 8006c60:	2001      	movs	r0, #1
}
 8006c62:	bd10      	pop	{r4, pc}
  switch (Channel)
 8006c64:	2001      	movs	r0, #1
 8006c66:	e7fc      	b.n	8006c62 <HAL_TIM_OC_Start_IT+0x146>
 8006c68:	2000      	movs	r0, #0
 8006c6a:	e7fa      	b.n	8006c62 <HAL_TIM_OC_Start_IT+0x146>
 8006c6c:	40010000 	.word	0x40010000

08006c70 <HAL_TIM_PWM_Start>:
{
 8006c70:	b510      	push	{r4, lr}
 8006c72:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c74:	4608      	mov	r0, r1
 8006c76:	bb89      	cbnz	r1, 8006cdc <HAL_TIM_PWM_Start+0x6c>
 8006c78:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	bf18      	it	ne
 8006c80:	2301      	movne	r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d160      	bne.n	8006d48 <HAL_TIM_PWM_Start+0xd8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d13e      	bne.n	8006d08 <HAL_TIM_PWM_Start+0x98>
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c90:	2201      	movs	r2, #1
 8006c92:	4601      	mov	r1, r0
 8006c94:	6820      	ldr	r0, [r4, #0]
 8006c96:	f7ff ff32 	bl	8006afe <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	4a2c      	ldr	r2, [pc, #176]	@ (8006d50 <HAL_TIM_PWM_Start+0xe0>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d042      	beq.n	8006d28 <HAL_TIM_PWM_Start+0xb8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8006d50 <HAL_TIM_PWM_Start+0xe0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d043      	beq.n	8006d32 <HAL_TIM_PWM_Start+0xc2>
 8006caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cae:	d040      	beq.n	8006d32 <HAL_TIM_PWM_Start+0xc2>
 8006cb0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d03c      	beq.n	8006d32 <HAL_TIM_PWM_Start+0xc2>
 8006cb8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d038      	beq.n	8006d32 <HAL_TIM_PWM_Start+0xc2>
 8006cc0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d034      	beq.n	8006d32 <HAL_TIM_PWM_Start+0xc2>
 8006cc8:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d030      	beq.n	8006d32 <HAL_TIM_PWM_Start+0xc2>
    __HAL_TIM_ENABLE(htim);
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006cd8:	2000      	movs	r0, #0
 8006cda:	e034      	b.n	8006d46 <HAL_TIM_PWM_Start+0xd6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cdc:	2904      	cmp	r1, #4
 8006cde:	d007      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x80>
 8006ce0:	2908      	cmp	r1, #8
 8006ce2:	d00b      	beq.n	8006cfc <HAL_TIM_PWM_Start+0x8c>
 8006ce4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	bf18      	it	ne
 8006cec:	2301      	movne	r3, #1
 8006cee:	e7c8      	b.n	8006c82 <HAL_TIM_PWM_Start+0x12>
 8006cf0:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	bf18      	it	ne
 8006cf8:	2301      	movne	r3, #1
 8006cfa:	e7c2      	b.n	8006c82 <HAL_TIM_PWM_Start+0x12>
 8006cfc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8006d00:	3b01      	subs	r3, #1
 8006d02:	bf18      	it	ne
 8006d04:	2301      	movne	r3, #1
 8006d06:	e7bc      	b.n	8006c82 <HAL_TIM_PWM_Start+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d08:	2804      	cmp	r0, #4
 8006d0a:	d005      	beq.n	8006d18 <HAL_TIM_PWM_Start+0xa8>
 8006d0c:	2808      	cmp	r0, #8
 8006d0e:	d007      	beq.n	8006d20 <HAL_TIM_PWM_Start+0xb0>
 8006d10:	2302      	movs	r3, #2
 8006d12:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006d16:	e7bb      	b.n	8006c90 <HAL_TIM_PWM_Start+0x20>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006d1e:	e7b7      	b.n	8006c90 <HAL_TIM_PWM_Start+0x20>
 8006d20:	2302      	movs	r3, #2
 8006d22:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006d26:	e7b3      	b.n	8006c90 <HAL_TIM_PWM_Start+0x20>
    __HAL_TIM_MOE_ENABLE(htim);
 8006d28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d2e:	645a      	str	r2, [r3, #68]	@ 0x44
 8006d30:	e7b7      	b.n	8006ca2 <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d38:	2a06      	cmp	r2, #6
 8006d3a:	d007      	beq.n	8006d4c <HAL_TIM_PWM_Start+0xdc>
      __HAL_TIM_ENABLE(htim);
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	f042 0201 	orr.w	r2, r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006d44:	2000      	movs	r0, #0
}
 8006d46:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006d48:	2001      	movs	r0, #1
 8006d4a:	e7fc      	b.n	8006d46 <HAL_TIM_PWM_Start+0xd6>
  return HAL_OK;
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	e7fa      	b.n	8006d46 <HAL_TIM_PWM_Start+0xd6>
 8006d50:	40010000 	.word	0x40010000

08006d54 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d54:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8006d58:	2a01      	cmp	r2, #1
 8006d5a:	d035      	beq.n	8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8006d5c:	b410      	push	{r4}
 8006d5e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8006d60:	2201      	movs	r2, #1
 8006d62:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d66:	2202      	movs	r2, #2
 8006d68:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d6c:	6802      	ldr	r2, [r0, #0]
 8006d6e:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d70:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d72:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d76:	6808      	ldr	r0, [r1, #0]
 8006d78:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d7c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	4812      	ldr	r0, [pc, #72]	@ (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8006d82:	4282      	cmp	r2, r0
 8006d84:	d012      	beq.n	8006dac <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006d86:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006d8a:	d00f      	beq.n	8006dac <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006d8c:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8006d90:	4282      	cmp	r2, r0
 8006d92:	d00b      	beq.n	8006dac <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006d94:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8006d98:	4282      	cmp	r2, r0
 8006d9a:	d007      	beq.n	8006dac <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006d9c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8006da0:	4282      	cmp	r2, r0
 8006da2:	d003      	beq.n	8006dac <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006da4:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8006da8:	4282      	cmp	r2, r0
 8006daa:	d104      	bne.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dac:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006db0:	6849      	ldr	r1, [r1, #4]
 8006db2:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006db4:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8006dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dc6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006dc8:	2002      	movs	r0, #2
}
 8006dca:	4770      	bx	lr
 8006dcc:	40010000 	.word	0x40010000

08006dd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006dd0:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dd2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d021      	beq.n	8006e1e <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006de0:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006de2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006de6:	6888      	ldr	r0, [r1, #8]
 8006de8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006dea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006dee:	6848      	ldr	r0, [r1, #4]
 8006df0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006df2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006df6:	6808      	ldr	r0, [r1, #0]
 8006df8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006dfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dfe:	6908      	ldr	r0, [r1, #16]
 8006e00:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e06:	6948      	ldr	r0, [r1, #20]
 8006e08:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e0e:	69c9      	ldr	r1, [r1, #28]
 8006e10:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e12:	6811      	ldr	r1, [r2, #0]
 8006e14:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e16:	2000      	movs	r0, #0
 8006e18:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8006e1c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006e1e:	2002      	movs	r0, #2
}
 8006e20:	4770      	bx	lr

08006e22 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e22:	4770      	bx	lr

08006e24 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e24:	4770      	bx	lr
	...

08006e28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e28:	b530      	push	{r4, r5, lr}
 8006e2a:	b089      	sub	sp, #36	@ 0x24
 8006e2c:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8006e2e:	2400      	movs	r4, #0
 8006e30:	9401      	str	r4, [sp, #4]
 8006e32:	4b1d      	ldr	r3, [pc, #116]	@ (8006ea8 <HAL_InitTick+0x80>)
 8006e34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e36:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006e3a:	645a      	str	r2, [r3, #68]	@ 0x44
 8006e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006e46:	a902      	add	r1, sp, #8
 8006e48:	a803      	add	r0, sp, #12
 8006e4a:	f7ff fa39 	bl	80062c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006e4e:	f7ff fa27 	bl	80062a0 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006e52:	4a16      	ldr	r2, [pc, #88]	@ (8006eac <HAL_InitTick+0x84>)
 8006e54:	fba2 2300 	umull	r2, r3, r2, r0
 8006e58:	0c9b      	lsrs	r3, r3, #18
 8006e5a:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8006e5c:	4814      	ldr	r0, [pc, #80]	@ (8006eb0 <HAL_InitTick+0x88>)
 8006e5e:	4a15      	ldr	r2, [pc, #84]	@ (8006eb4 <HAL_InitTick+0x8c>)
 8006e60:	6002      	str	r2, [r0, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8006e62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006e66:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8006e68:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 8006e6a:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e6c:	6084      	str	r4, [r0, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e6e:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8006e70:	f7ff fc6a 	bl	8006748 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8006e74:	4604      	mov	r4, r0
 8006e76:	b110      	cbz	r0, 8006e7e <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8006e78:	4620      	mov	r0, r4
 8006e7a:	b009      	add	sp, #36	@ 0x24
 8006e7c:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim11);
 8006e7e:	480c      	ldr	r0, [pc, #48]	@ (8006eb0 <HAL_InitTick+0x88>)
 8006e80:	f7ff fb1e 	bl	80064c0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8006e84:	4604      	mov	r4, r0
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d1f6      	bne.n	8006e78 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006e8a:	201a      	movs	r0, #26
 8006e8c:	f7fd fc96 	bl	80047bc <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e90:	2d0f      	cmp	r5, #15
 8006e92:	d901      	bls.n	8006e98 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8006e94:	2401      	movs	r4, #1
 8006e96:	e7ef      	b.n	8006e78 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	201a      	movs	r0, #26
 8006e9e:	f7fd fc7d 	bl	800479c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006ea2:	4b05      	ldr	r3, [pc, #20]	@ (8006eb8 <HAL_InitTick+0x90>)
 8006ea4:	601d      	str	r5, [r3, #0]
 8006ea6:	e7e7      	b.n	8006e78 <HAL_InitTick+0x50>
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	431bde83 	.word	0x431bde83
 8006eb0:	20006784 	.word	0x20006784
 8006eb4:	40014800 	.word	0x40014800
 8006eb8:	2000006c 	.word	0x2000006c

08006ebc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006ebc:	e7fe      	b.n	8006ebc <NMI_Handler>

08006ebe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ebe:	e7fe      	b.n	8006ebe <HardFault_Handler>

08006ec0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ec0:	e7fe      	b.n	8006ec0 <MemManage_Handler>

08006ec2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ec2:	e7fe      	b.n	8006ec2 <BusFault_Handler>

08006ec4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ec4:	e7fe      	b.n	8006ec4 <UsageFault_Handler>

08006ec6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ec6:	4770      	bx	lr

08006ec8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006ec8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8006eca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006ece:	f7fd ff87 	bl	8004de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006ed2:	bd08      	pop	{r3, pc}

08006ed4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006ed4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006ed6:	4803      	ldr	r0, [pc, #12]	@ (8006ee4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8006ed8:	f7ff fb31 	bl	800653e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8006edc:	4802      	ldr	r0, [pc, #8]	@ (8006ee8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8006ede:	f7ff fb2e 	bl	800653e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006ee2:	bd08      	pop	{r3, pc}
 8006ee4:	20006d60 	.word	0x20006d60
 8006ee8:	20006784 	.word	0x20006784

08006eec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006eec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  scheduler_timer_callback();
 8006eee:	f002 f937 	bl	8009160 <scheduler_timer_callback>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006ef2:	4802      	ldr	r0, [pc, #8]	@ (8006efc <TIM2_IRQHandler+0x10>)
 8006ef4:	f7ff fb23 	bl	800653e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006ef8:	bd08      	pop	{r3, pc}
 8006efa:	bf00      	nop
 8006efc:	20006d18 	.word	0x20006d18

08006f00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006f00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006f02:	4802      	ldr	r0, [pc, #8]	@ (8006f0c <DMA2_Stream0_IRQHandler+0xc>)
 8006f04:	f7fd fd84 	bl	8004a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006f08:	bd08      	pop	{r3, pc}
 8006f0a:	bf00      	nop
 8006f0c:	200001cc 	.word	0x200001cc

08006f10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006f10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006f12:	4802      	ldr	r0, [pc, #8]	@ (8006f1c <OTG_FS_IRQHandler+0xc>)
 8006f14:	f7fe fba3 	bl	800565e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006f18:	bd08      	pop	{r3, pc}
 8006f1a:	bf00      	nop
 8006f1c:	200083bc 	.word	0x200083bc

08006f20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f20:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f26:	9b01      	ldr	r3, [sp, #4]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8006f2c:	9b01      	ldr	r3, [sp, #4]
 8006f2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f32:	d815      	bhi.n	8006f60 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f34:	6903      	ldr	r3, [r0, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	daf5      	bge.n	8006f26 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f3e:	6903      	ldr	r3, [r0, #16]
 8006f40:	f043 0301 	orr.w	r3, r3, #1
 8006f44:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8006f46:	9b01      	ldr	r3, [sp, #4]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8006f4c:	9b01      	ldr	r3, [sp, #4]
 8006f4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f52:	d808      	bhi.n	8006f66 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f54:	6903      	ldr	r3, [r0, #16]
 8006f56:	f013 0f01 	tst.w	r3, #1
 8006f5a:	d1f4      	bne.n	8006f46 <USB_CoreReset+0x26>

  return HAL_OK;
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	e000      	b.n	8006f62 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8006f60:	2003      	movs	r0, #3
}
 8006f62:	b002      	add	sp, #8
 8006f64:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006f66:	2003      	movs	r0, #3
 8006f68:	e7fb      	b.n	8006f62 <USB_CoreReset+0x42>

08006f6a <USB_CoreInit>:
{
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	4604      	mov	r4, r0
 8006f70:	a803      	add	r0, sp, #12
 8006f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f76:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d121      	bne.n	8006fc2 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f7e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f84:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f86:	68e3      	ldr	r3, [r4, #12]
 8006f88:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f90:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f92:	68e3      	ldr	r3, [r4, #12]
 8006f94:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006f98:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8006f9a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d00a      	beq.n	8006fb8 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f7ff ffbc 	bl	8006f20 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8006fa8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d01c      	beq.n	8006fea <USB_CoreInit+0x80>
}
 8006fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fb4:	b004      	add	sp, #16
 8006fb6:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fb8:	68e3      	ldr	r3, [r4, #12]
 8006fba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fbe:	60e3      	str	r3, [r4, #12]
 8006fc0:	e7ef      	b.n	8006fa2 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fc2:	68e3      	ldr	r3, [r4, #12]
 8006fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fc8:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f7ff ffa8 	bl	8006f20 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8006fd0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8006fd4:	b923      	cbnz	r3, 8006fe0 <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fd6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fdc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006fde:	e7e3      	b.n	8006fa8 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fe0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fe6:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006fe8:	e7de      	b.n	8006fa8 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006fea:	68a3      	ldr	r3, [r4, #8]
 8006fec:	f043 0306 	orr.w	r3, r3, #6
 8006ff0:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ff2:	68a3      	ldr	r3, [r4, #8]
 8006ff4:	f043 0320 	orr.w	r3, r3, #32
 8006ff8:	60a3      	str	r3, [r4, #8]
 8006ffa:	e7d9      	b.n	8006fb0 <USB_CoreInit+0x46>

08006ffc <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8006ffc:	2a02      	cmp	r2, #2
 8006ffe:	d00a      	beq.n	8007016 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007000:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007002:	68c3      	ldr	r3, [r0, #12]
 8007004:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8007008:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800700a:	68c3      	ldr	r3, [r0, #12]
 800700c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8007010:	60c3      	str	r3, [r0, #12]
}
 8007012:	2000      	movs	r0, #0
 8007014:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007016:	4b23      	ldr	r3, [pc, #140]	@ (80070a4 <USB_SetTurnaroundTime+0xa8>)
 8007018:	440b      	add	r3, r1
 800701a:	4a23      	ldr	r2, [pc, #140]	@ (80070a8 <USB_SetTurnaroundTime+0xac>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d92f      	bls.n	8007080 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007020:	4b22      	ldr	r3, [pc, #136]	@ (80070ac <USB_SetTurnaroundTime+0xb0>)
 8007022:	440b      	add	r3, r1
 8007024:	4a22      	ldr	r2, [pc, #136]	@ (80070b0 <USB_SetTurnaroundTime+0xb4>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d92c      	bls.n	8007084 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800702a:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 800702e:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 8007032:	4a20      	ldr	r2, [pc, #128]	@ (80070b4 <USB_SetTurnaroundTime+0xb8>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d927      	bls.n	8007088 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007038:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 800703c:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8007040:	4a1d      	ldr	r2, [pc, #116]	@ (80070b8 <USB_SetTurnaroundTime+0xbc>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d322      	bcc.n	800708c <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007046:	4b1d      	ldr	r3, [pc, #116]	@ (80070bc <USB_SetTurnaroundTime+0xc0>)
 8007048:	440b      	add	r3, r1
 800704a:	4a1d      	ldr	r2, [pc, #116]	@ (80070c0 <USB_SetTurnaroundTime+0xc4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d91f      	bls.n	8007090 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007050:	4b1c      	ldr	r3, [pc, #112]	@ (80070c4 <USB_SetTurnaroundTime+0xc8>)
 8007052:	440b      	add	r3, r1
 8007054:	4a1c      	ldr	r2, [pc, #112]	@ (80070c8 <USB_SetTurnaroundTime+0xcc>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d31c      	bcc.n	8007094 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800705a:	4b1c      	ldr	r3, [pc, #112]	@ (80070cc <USB_SetTurnaroundTime+0xd0>)
 800705c:	440b      	add	r3, r1
 800705e:	4a1c      	ldr	r2, [pc, #112]	@ (80070d0 <USB_SetTurnaroundTime+0xd4>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d319      	bcc.n	8007098 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007064:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8007068:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 800706c:	4a19      	ldr	r2, [pc, #100]	@ (80070d4 <USB_SetTurnaroundTime+0xd8>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d314      	bcc.n	800709c <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007072:	4b19      	ldr	r3, [pc, #100]	@ (80070d8 <USB_SetTurnaroundTime+0xdc>)
 8007074:	440b      	add	r3, r1
 8007076:	4a19      	ldr	r2, [pc, #100]	@ (80070dc <USB_SetTurnaroundTime+0xe0>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d211      	bcs.n	80070a0 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 800707c:	2207      	movs	r2, #7
 800707e:	e7c0      	b.n	8007002 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8007080:	220f      	movs	r2, #15
 8007082:	e7be      	b.n	8007002 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8007084:	220e      	movs	r2, #14
 8007086:	e7bc      	b.n	8007002 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8007088:	220d      	movs	r2, #13
 800708a:	e7ba      	b.n	8007002 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800708c:	220c      	movs	r2, #12
 800708e:	e7b8      	b.n	8007002 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8007090:	220b      	movs	r2, #11
 8007092:	e7b6      	b.n	8007002 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8007094:	220a      	movs	r2, #10
 8007096:	e7b4      	b.n	8007002 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8007098:	2209      	movs	r2, #9
 800709a:	e7b2      	b.n	8007002 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800709c:	2208      	movs	r2, #8
 800709e:	e7b0      	b.n	8007002 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 80070a0:	2206      	movs	r2, #6
 80070a2:	e7ae      	b.n	8007002 <USB_SetTurnaroundTime+0x6>
 80070a4:	ff275340 	.word	0xff275340
 80070a8:	000c34ff 	.word	0x000c34ff
 80070ac:	ff1b1e40 	.word	0xff1b1e40
 80070b0:	000f423f 	.word	0x000f423f
 80070b4:	00124f7f 	.word	0x00124f7f
 80070b8:	0013d620 	.word	0x0013d620
 80070bc:	fee5b660 	.word	0xfee5b660
 80070c0:	0016e35f 	.word	0x0016e35f
 80070c4:	feced300 	.word	0xfeced300
 80070c8:	001b7740 	.word	0x001b7740
 80070cc:	feb35bc0 	.word	0xfeb35bc0
 80070d0:	002191c0 	.word	0x002191c0
 80070d4:	00387520 	.word	0x00387520
 80070d8:	fe5954e0 	.word	0xfe5954e0
 80070dc:	00419ce0 	.word	0x00419ce0

080070e0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070e0:	6883      	ldr	r3, [r0, #8]
 80070e2:	f043 0301 	orr.w	r3, r3, #1
 80070e6:	6083      	str	r3, [r0, #8]
}
 80070e8:	2000      	movs	r0, #0
 80070ea:	4770      	bx	lr

080070ec <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070ec:	6883      	ldr	r3, [r0, #8]
 80070ee:	f023 0301 	bic.w	r3, r3, #1
 80070f2:	6083      	str	r3, [r0, #8]
}
 80070f4:	2000      	movs	r0, #0
 80070f6:	4770      	bx	lr

080070f8 <USB_FlushTxFifo>:
{
 80070f8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	9301      	str	r3, [sp, #4]
    count++;
 80070fe:	9b01      	ldr	r3, [sp, #4]
 8007100:	3301      	adds	r3, #1
 8007102:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8007104:	9b01      	ldr	r3, [sp, #4]
 8007106:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800710a:	d815      	bhi.n	8007138 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800710c:	6903      	ldr	r3, [r0, #16]
 800710e:	2b00      	cmp	r3, #0
 8007110:	daf5      	bge.n	80070fe <USB_FlushTxFifo+0x6>
  count = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007116:	0189      	lsls	r1, r1, #6
 8007118:	f041 0120 	orr.w	r1, r1, #32
 800711c:	6101      	str	r1, [r0, #16]
    count++;
 800711e:	9b01      	ldr	r3, [sp, #4]
 8007120:	3301      	adds	r3, #1
 8007122:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8007124:	9b01      	ldr	r3, [sp, #4]
 8007126:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800712a:	d808      	bhi.n	800713e <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800712c:	6903      	ldr	r3, [r0, #16]
 800712e:	f013 0f20 	tst.w	r3, #32
 8007132:	d1f4      	bne.n	800711e <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8007134:	2000      	movs	r0, #0
 8007136:	e000      	b.n	800713a <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8007138:	2003      	movs	r0, #3
}
 800713a:	b002      	add	sp, #8
 800713c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800713e:	2003      	movs	r0, #3
 8007140:	e7fb      	b.n	800713a <USB_FlushTxFifo+0x42>

08007142 <USB_FlushRxFifo>:
{
 8007142:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	9301      	str	r3, [sp, #4]
    count++;
 8007148:	9b01      	ldr	r3, [sp, #4]
 800714a:	3301      	adds	r3, #1
 800714c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800714e:	9b01      	ldr	r3, [sp, #4]
 8007150:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007154:	d813      	bhi.n	800717e <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007156:	6903      	ldr	r3, [r0, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	daf5      	bge.n	8007148 <USB_FlushRxFifo+0x6>
  count = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007160:	2310      	movs	r3, #16
 8007162:	6103      	str	r3, [r0, #16]
    count++;
 8007164:	9b01      	ldr	r3, [sp, #4]
 8007166:	3301      	adds	r3, #1
 8007168:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800716a:	9b01      	ldr	r3, [sp, #4]
 800716c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007170:	d808      	bhi.n	8007184 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007172:	6903      	ldr	r3, [r0, #16]
 8007174:	f013 0f10 	tst.w	r3, #16
 8007178:	d1f4      	bne.n	8007164 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 800717a:	2000      	movs	r0, #0
 800717c:	e000      	b.n	8007180 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 800717e:	2003      	movs	r0, #3
}
 8007180:	b002      	add	sp, #8
 8007182:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007184:	2003      	movs	r0, #3
 8007186:	e7fb      	b.n	8007180 <USB_FlushRxFifo+0x3e>

08007188 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8007188:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800718c:	4319      	orrs	r1, r3
 800718e:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8007192:	2000      	movs	r0, #0
 8007194:	4770      	bx	lr
	...

08007198 <USB_DevInit>:
{
 8007198:	b084      	sub	sp, #16
 800719a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719c:	4604      	mov	r4, r0
 800719e:	a807      	add	r0, sp, #28
 80071a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80071a4:	2300      	movs	r3, #0
 80071a6:	e006      	b.n	80071b6 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 80071a8:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80071ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80071b0:	2100      	movs	r1, #0
 80071b2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80071b4:	3301      	adds	r3, #1
 80071b6:	2b0e      	cmp	r3, #14
 80071b8:	d9f6      	bls.n	80071a8 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 80071ba:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 80071be:	bb06      	cbnz	r6, 8007202 <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071c0:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 80071c4:	f043 0302 	orr.w	r3, r3, #2
 80071c8:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071cc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80071ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80071d2:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80071d6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80071da:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071dc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80071de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071e2:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071ea:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d115      	bne.n	800721e <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 80071f2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80071f6:	b96b      	cbnz	r3, 8007214 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80071f8:	2100      	movs	r1, #0
 80071fa:	4620      	mov	r0, r4
 80071fc:	f7ff ffc4 	bl	8007188 <USB_SetDevSpeed>
 8007200:	e011      	b.n	8007226 <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007202:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007204:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007208:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800720a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800720c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007210:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007212:	e7e7      	b.n	80071e4 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007214:	2101      	movs	r1, #1
 8007216:	4620      	mov	r0, r4
 8007218:	f7ff ffb6 	bl	8007188 <USB_SetDevSpeed>
 800721c:	e003      	b.n	8007226 <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800721e:	2103      	movs	r1, #3
 8007220:	4620      	mov	r0, r4
 8007222:	f7ff ffb1 	bl	8007188 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007226:	2110      	movs	r1, #16
 8007228:	4620      	mov	r0, r4
 800722a:	f7ff ff65 	bl	80070f8 <USB_FlushTxFifo>
 800722e:	4605      	mov	r5, r0
 8007230:	b100      	cbz	r0, 8007234 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 8007232:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007234:	4620      	mov	r0, r4
 8007236:	f7ff ff84 	bl	8007142 <USB_FlushRxFifo>
 800723a:	b100      	cbz	r0, 800723e <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 800723c:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800723e:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8007242:	2300      	movs	r3, #0
 8007244:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007248:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800724c:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007250:	e00d      	b.n	800726e <USB_DevInit+0xd6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007252:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007256:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 800725a:	e002      	b.n	8007262 <USB_DevInit+0xca>
      USBx_INEP(i)->DIEPCTL = 0U;
 800725c:	2000      	movs	r0, #0
 800725e:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007262:	2200      	movs	r2, #0
 8007264:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007266:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 800726a:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800726c:	3301      	adds	r3, #1
 800726e:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8007272:	4299      	cmp	r1, r3
 8007274:	d90e      	bls.n	8007294 <USB_DevInit+0xfc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007276:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800727a:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 800727e:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 8007282:	2800      	cmp	r0, #0
 8007284:	daea      	bge.n	800725c <USB_DevInit+0xc4>
      if (i == 0U)
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e3      	bne.n	8007252 <USB_DevInit+0xba>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800728a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800728e:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8007292:	e7e6      	b.n	8007262 <USB_DevInit+0xca>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007294:	2300      	movs	r3, #0
 8007296:	e00a      	b.n	80072ae <USB_DevInit+0x116>
      if (i == 0U)
 8007298:	b1bb      	cbz	r3, 80072ca <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800729a:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 800729e:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072a2:	2200      	movs	r2, #0
 80072a4:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80072a6:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 80072aa:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072ac:	3301      	adds	r3, #1
 80072ae:	4299      	cmp	r1, r3
 80072b0:	d910      	bls.n	80072d4 <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072b2:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80072b6:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 80072ba:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 80072be:	2f00      	cmp	r7, #0
 80072c0:	dbea      	blt.n	8007298 <USB_DevInit+0x100>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80072c2:	2700      	movs	r7, #0
 80072c4:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 80072c8:	e7eb      	b.n	80072a2 <USB_DevInit+0x10a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072ca:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 80072ce:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 80072d2:	e7e6      	b.n	80072a2 <USB_DevInit+0x10a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072d4:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80072d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072dc:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80072e4:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 80072e8:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80072ea:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80072ee:	b91b      	cbnz	r3, 80072f8 <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072f0:	69a3      	ldr	r3, [r4, #24]
 80072f2:	f043 0310 	orr.w	r3, r3, #16
 80072f6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80072f8:	69a2      	ldr	r2, [r4, #24]
 80072fa:	4b0c      	ldr	r3, [pc, #48]	@ (800732c <USB_DevInit+0x194>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8007300:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8007304:	b11b      	cbz	r3, 800730e <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007306:	69a3      	ldr	r3, [r4, #24]
 8007308:	f043 0308 	orr.w	r3, r3, #8
 800730c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800730e:	2e01      	cmp	r6, #1
 8007310:	d004      	beq.n	800731c <USB_DevInit+0x184>
}
 8007312:	4628      	mov	r0, r5
 8007314:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007318:	b004      	add	sp, #16
 800731a:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800731c:	69a3      	ldr	r3, [r4, #24]
 800731e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007322:	f043 0304 	orr.w	r3, r3, #4
 8007326:	61a3      	str	r3, [r4, #24]
 8007328:	e7f3      	b.n	8007312 <USB_DevInit+0x17a>
 800732a:	bf00      	nop
 800732c:	803c3800 	.word	0x803c3800

08007330 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007330:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8007334:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007338:	2b02      	cmp	r3, #2
 800733a:	d004      	beq.n	8007346 <USB_GetDevSpeed+0x16>
 800733c:	2b06      	cmp	r3, #6
 800733e:	d004      	beq.n	800734a <USB_GetDevSpeed+0x1a>
 8007340:	b92b      	cbnz	r3, 800734e <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007342:	2000      	movs	r0, #0
 8007344:	4770      	bx	lr
 8007346:	2002      	movs	r0, #2
 8007348:	4770      	bx	lr
 800734a:	2002      	movs	r0, #2
 800734c:	4770      	bx	lr
 800734e:	200f      	movs	r0, #15
}
 8007350:	4770      	bx	lr

08007352 <USB_ActivateEndpoint>:
{
 8007352:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8007354:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8007358:	784b      	ldrb	r3, [r1, #1]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d023      	beq.n	80073a6 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800735e:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 8007362:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 8007366:	f00c 040f 	and.w	r4, ip, #15
 800736a:	2201      	movs	r2, #1
 800736c:	40a2      	lsls	r2, r4
 800736e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007372:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007376:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800737a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800737e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8007382:	d10e      	bne.n	80073a2 <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007384:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007388:	688a      	ldr	r2, [r1, #8]
 800738a:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800738e:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007390:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8007394:	4313      	orrs	r3, r2
 8007396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800739a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800739e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 80073a2:	2000      	movs	r0, #0
 80073a4:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80073a6:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80073aa:	f00c 0e0f 	and.w	lr, ip, #15
 80073ae:	fa03 f30e 	lsl.w	r3, r3, lr
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	4313      	orrs	r3, r2
 80073b6:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80073ba:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80073be:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80073c2:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80073c6:	d1ec      	bne.n	80073a2 <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073c8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80073cc:	688a      	ldr	r2, [r1, #8]
 80073ce:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073d2:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073d4:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073d8:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073dc:	4313      	orrs	r3, r2
 80073de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073e6:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80073ea:	e7da      	b.n	80073a2 <USB_ActivateEndpoint+0x50>

080073ec <USB_DeactivateEndpoint>:
{
 80073ec:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 80073ee:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80073f0:	784a      	ldrb	r2, [r1, #1]
 80073f2:	2a01      	cmp	r2, #1
 80073f4:	d026      	beq.n	8007444 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073f6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80073fa:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80073fe:	2a00      	cmp	r2, #0
 8007400:	db52      	blt.n	80074a8 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007402:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8007406:	780a      	ldrb	r2, [r1, #0]
 8007408:	f002 020f 	and.w	r2, r2, #15
 800740c:	f04f 0c01 	mov.w	ip, #1
 8007410:	fa0c f202 	lsl.w	r2, ip, r2
 8007414:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8007418:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800741c:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8007420:	7809      	ldrb	r1, [r1, #0]
 8007422:	f001 010f 	and.w	r1, r1, #15
 8007426:	fa0c fc01 	lsl.w	ip, ip, r1
 800742a:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 800742e:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007432:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8007436:	4a23      	ldr	r2, [pc, #140]	@ (80074c4 <USB_DeactivateEndpoint+0xd8>)
 8007438:	400a      	ands	r2, r1
 800743a:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 800743e:	2000      	movs	r0, #0
 8007440:	bc30      	pop	{r4, r5}
 8007442:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007444:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8007448:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800744c:	2a00      	cmp	r2, #0
 800744e:	db1e      	blt.n	800748e <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007450:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8007454:	780a      	ldrb	r2, [r1, #0]
 8007456:	f002 020f 	and.w	r2, r2, #15
 800745a:	2401      	movs	r4, #1
 800745c:	fa04 f202 	lsl.w	r2, r4, r2
 8007460:	b292      	uxth	r2, r2
 8007462:	ea25 0202 	bic.w	r2, r5, r2
 8007466:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800746a:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800746e:	7809      	ldrb	r1, [r1, #0]
 8007470:	f001 010f 	and.w	r1, r1, #15
 8007474:	408c      	lsls	r4, r1
 8007476:	b2a4      	uxth	r4, r4
 8007478:	ea22 0204 	bic.w	r2, r2, r4
 800747c:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007480:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8007484:	4a10      	ldr	r2, [pc, #64]	@ (80074c8 <USB_DeactivateEndpoint+0xdc>)
 8007486:	400a      	ands	r2, r1
 8007488:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 800748c:	e7d7      	b.n	800743e <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800748e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8007492:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8007496:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800749a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800749e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80074a2:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 80074a6:	e7d3      	b.n	8007450 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80074a8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80074ac:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80074b0:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80074b4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80074b8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80074bc:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 80074c0:	e79f      	b.n	8007402 <USB_DeactivateEndpoint+0x16>
 80074c2:	bf00      	nop
 80074c4:	eff37800 	.word	0xeff37800
 80074c8:	ec337800 	.word	0xec337800

080074cc <USB_EPStopXfer>:
{
 80074cc:	b410      	push	{r4}
 80074ce:	b083      	sub	sp, #12
 80074d0:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 80074d6:	7848      	ldrb	r0, [r1, #1]
 80074d8:	2801      	cmp	r0, #1
 80074da:	d00b      	beq.n	80074f4 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074dc:	780b      	ldrb	r3, [r1, #0]
 80074de:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80074e2:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80074e6:	2800      	cmp	r0, #0
 80074e8:	db2d      	blt.n	8007546 <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 80074ea:	2000      	movs	r0, #0
}
 80074ec:	b003      	add	sp, #12
 80074ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074f2:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074f4:	780b      	ldrb	r3, [r1, #0]
 80074f6:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80074fa:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80074fe:	2c00      	cmp	r4, #0
 8007500:	db01      	blt.n	8007506 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 8007502:	2000      	movs	r0, #0
 8007504:	e7f2      	b.n	80074ec <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007506:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800750a:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 800750e:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007512:	780b      	ldrb	r3, [r1, #0]
 8007514:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007518:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800751c:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8007520:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8007524:	9b01      	ldr	r3, [sp, #4]
 8007526:	3301      	adds	r3, #1
 8007528:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800752a:	9c01      	ldr	r4, [sp, #4]
 800752c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8007530:	429c      	cmp	r4, r3
 8007532:	d8db      	bhi.n	80074ec <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007534:	780b      	ldrb	r3, [r1, #0]
 8007536:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800753a:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800753e:	2b00      	cmp	r3, #0
 8007540:	dbf0      	blt.n	8007524 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 8007542:	2000      	movs	r0, #0
 8007544:	e7d2      	b.n	80074ec <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007546:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 800754a:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 800754e:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007552:	780b      	ldrb	r3, [r1, #0]
 8007554:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007558:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 800755c:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8007560:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 8007564:	9b01      	ldr	r3, [sp, #4]
 8007566:	3301      	adds	r3, #1
 8007568:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800756a:	9801      	ldr	r0, [sp, #4]
 800756c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8007570:	4298      	cmp	r0, r3
 8007572:	d808      	bhi.n	8007586 <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007574:	780b      	ldrb	r3, [r1, #0]
 8007576:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800757a:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800757e:	2b00      	cmp	r3, #0
 8007580:	dbf0      	blt.n	8007564 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 8007582:	2000      	movs	r0, #0
 8007584:	e7b2      	b.n	80074ec <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8007586:	2001      	movs	r0, #1
 8007588:	e7b0      	b.n	80074ec <USB_EPStopXfer+0x20>

0800758a <USB_WritePacket>:
{
 800758a:	b510      	push	{r4, lr}
 800758c:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8007590:	b984      	cbnz	r4, 80075b4 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8007592:	3303      	adds	r3, #3
 8007594:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8007598:	f04f 0c00 	mov.w	ip, #0
 800759c:	e008      	b.n	80075b0 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800759e:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 80075a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075a6:	f851 4b04 	ldr.w	r4, [r1], #4
 80075aa:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 80075ac:	f10c 0c01 	add.w	ip, ip, #1
 80075b0:	45f4      	cmp	ip, lr
 80075b2:	d3f4      	bcc.n	800759e <USB_WritePacket+0x14>
}
 80075b4:	2000      	movs	r0, #0
 80075b6:	bd10      	pop	{r4, pc}

080075b8 <USB_EPStartXfer>:
{
 80075b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ba:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 80075bc:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80075be:	784b      	ldrb	r3, [r1, #1]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d02d      	beq.n	8007620 <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075c4:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 80075c8:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 80075cc:	691d      	ldr	r5, [r3, #16]
 80075ce:	f36f 0512 	bfc	r5, #0, #19
 80075d2:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80075d4:	691d      	ldr	r5, [r3, #16]
 80075d6:	f36f 45dc 	bfc	r5, #19, #10
 80075da:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 80075dc:	2c00      	cmp	r4, #0
 80075de:	f040 80ce 	bne.w	800777e <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 80075e2:	690c      	ldr	r4, [r1, #16]
 80075e4:	b10c      	cbz	r4, 80075ea <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 80075e6:	688c      	ldr	r4, [r1, #8]
 80075e8:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 80075ea:	688c      	ldr	r4, [r1, #8]
 80075ec:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80075ee:	691d      	ldr	r5, [r3, #16]
 80075f0:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80075f4:	432c      	orrs	r4, r5
 80075f6:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075f8:	691c      	ldr	r4, [r3, #16]
 80075fa:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 80075fe:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8007600:	2a01      	cmp	r2, #1
 8007602:	f000 80df 	beq.w	80077c4 <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 8007606:	790b      	ldrb	r3, [r1, #4]
 8007608:	2b01      	cmp	r3, #1
 800760a:	f000 80e1 	beq.w	80077d0 <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800760e:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8007612:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007616:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 800761a:	2000      	movs	r0, #0
 800761c:	b003      	add	sp, #12
 800761e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8007620:	690b      	ldr	r3, [r1, #16]
 8007622:	bb73      	cbnz	r3, 8007682 <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007624:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8007628:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 800762c:	f36f 45dc 	bfc	r5, #19, #10
 8007630:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007634:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8007638:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 800763c:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007640:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8007644:	f36f 0512 	bfc	r5, #0, #19
 8007648:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 800764c:	2a01      	cmp	r2, #1
 800764e:	d054      	beq.n	80076fa <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007650:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8007654:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007658:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800765c:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8007660:	790b      	ldrb	r3, [r1, #4]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d072      	beq.n	800774c <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 8007666:	690b      	ldr	r3, [r1, #16]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d0d6      	beq.n	800761a <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800766c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8007670:	7809      	ldrb	r1, [r1, #0]
 8007672:	f001 010f 	and.w	r1, r1, #15
 8007676:	2201      	movs	r2, #1
 8007678:	408a      	lsls	r2, r1
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8007680:	e7cb      	b.n	800761a <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007682:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8007686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800768a:	691d      	ldr	r5, [r3, #16]
 800768c:	f36f 0512 	bfc	r5, #0, #19
 8007690:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007692:	691d      	ldr	r5, [r3, #16]
 8007694:	f36f 45dc 	bfc	r5, #19, #10
 8007698:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 800769a:	b984      	cbnz	r4, 80076be <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 800769c:	690e      	ldr	r6, [r1, #16]
 800769e:	688d      	ldr	r5, [r1, #8]
 80076a0:	42ae      	cmp	r6, r5
 80076a2:	d900      	bls.n	80076a6 <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 80076a4:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076a6:	691d      	ldr	r5, [r3, #16]
 80076a8:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 80076ac:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076ae:	691d      	ldr	r5, [r3, #16]
 80076b0:	690e      	ldr	r6, [r1, #16]
 80076b2:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 80076b6:	ea45 050c 	orr.w	r5, r5, ip
 80076ba:	611d      	str	r5, [r3, #16]
 80076bc:	e7c6      	b.n	800764c <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80076be:	690d      	ldr	r5, [r1, #16]
 80076c0:	688e      	ldr	r6, [r1, #8]
 80076c2:	4435      	add	r5, r6
 80076c4:	3d01      	subs	r5, #1
 80076c6:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80076ca:	691e      	ldr	r6, [r3, #16]
 80076cc:	fa1f fc85 	uxth.w	ip, r5
 80076d0:	4f49      	ldr	r7, [pc, #292]	@ (80077f8 <USB_EPStartXfer+0x240>)
 80076d2:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 80076d6:	4335      	orrs	r5, r6
 80076d8:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 80076da:	790d      	ldrb	r5, [r1, #4]
 80076dc:	2d01      	cmp	r5, #1
 80076de:	d1e6      	bne.n	80076ae <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80076e0:	691d      	ldr	r5, [r3, #16]
 80076e2:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 80076e6:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80076e8:	691d      	ldr	r5, [r3, #16]
 80076ea:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 80076ee:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 80076f2:	ea45 050c 	orr.w	r5, r5, ip
 80076f6:	611d      	str	r5, [r3, #16]
 80076f8:	e7d9      	b.n	80076ae <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 80076fa:	69cb      	ldr	r3, [r1, #28]
 80076fc:	b11b      	cbz	r3, 8007706 <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80076fe:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8007702:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8007706:	790b      	ldrb	r3, [r1, #4]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d008      	beq.n	800771e <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800770c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8007710:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007714:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007718:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 800771c:	e77d      	b.n	800761a <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800771e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8007722:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007726:	d108      	bne.n	800773a <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007728:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800772c:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8007730:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007734:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8007738:	e7e8      	b.n	800770c <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800773a:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800773e:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8007742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007746:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 800774a:	e7df      	b.n	800770c <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800774c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8007750:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007754:	d10c      	bne.n	8007770 <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007756:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800775a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800775e:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007762:	9200      	str	r2, [sp, #0]
 8007764:	8a0b      	ldrh	r3, [r1, #16]
 8007766:	780a      	ldrb	r2, [r1, #0]
 8007768:	68c9      	ldr	r1, [r1, #12]
 800776a:	f7ff ff0e 	bl	800758a <USB_WritePacket>
 800776e:	e754      	b.n	800761a <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007770:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007778:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 800777c:	e7f1      	b.n	8007762 <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 800777e:	690c      	ldr	r4, [r1, #16]
 8007780:	b954      	cbnz	r4, 8007798 <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007782:	691c      	ldr	r4, [r3, #16]
 8007784:	688d      	ldr	r5, [r1, #8]
 8007786:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800778a:	432c      	orrs	r4, r5
 800778c:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800778e:	691c      	ldr	r4, [r3, #16]
 8007790:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8007794:	611c      	str	r4, [r3, #16]
 8007796:	e733      	b.n	8007600 <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007798:	688d      	ldr	r5, [r1, #8]
 800779a:	442c      	add	r4, r5
 800779c:	3c01      	subs	r4, #1
 800779e:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 80077a2:	b2a4      	uxth	r4, r4
 80077a4:	fb04 f505 	mul.w	r5, r4, r5
 80077a8:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80077aa:	691d      	ldr	r5, [r3, #16]
 80077ac:	4e12      	ldr	r6, [pc, #72]	@ (80077f8 <USB_EPStartXfer+0x240>)
 80077ae:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 80077b2:	432c      	orrs	r4, r5
 80077b4:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80077b6:	691c      	ldr	r4, [r3, #16]
 80077b8:	6a0d      	ldr	r5, [r1, #32]
 80077ba:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80077be:	432c      	orrs	r4, r5
 80077c0:	611c      	str	r4, [r3, #16]
 80077c2:	e71d      	b.n	8007600 <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 80077c4:	68ca      	ldr	r2, [r1, #12]
 80077c6:	2a00      	cmp	r2, #0
 80077c8:	f43f af1d 	beq.w	8007606 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80077cc:	615a      	str	r2, [r3, #20]
 80077ce:	e71a      	b.n	8007606 <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077d0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80077d4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80077d8:	d106      	bne.n	80077e8 <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80077da:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 80077de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80077e2:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 80077e6:	e712      	b.n	800760e <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80077e8:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 80077ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077f0:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 80077f4:	e70b      	b.n	800760e <USB_EPStartXfer+0x56>
 80077f6:	bf00      	nop
 80077f8:	1ff80000 	.word	0x1ff80000

080077fc <USB_ReadPacket>:
{
 80077fc:	b510      	push	{r4, lr}
 80077fe:	4684      	mov	ip, r0
 8007800:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8007802:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8007806:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 800780a:	2300      	movs	r3, #0
 800780c:	e005      	b.n	800781a <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800780e:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 8007812:	6809      	ldr	r1, [r1, #0]
 8007814:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8007818:	3301      	adds	r3, #1
 800781a:	4573      	cmp	r3, lr
 800781c:	d3f7      	bcc.n	800780e <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 800781e:	b17a      	cbz	r2, 8007840 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007820:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8007824:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8007828:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800782a:	b2cb      	uxtb	r3, r1
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	fa24 f303 	lsr.w	r3, r4, r3
 8007832:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8007836:	3101      	adds	r1, #1
      remaining_bytes--;
 8007838:	3a01      	subs	r2, #1
 800783a:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 800783c:	2a00      	cmp	r2, #0
 800783e:	d1f4      	bne.n	800782a <USB_ReadPacket+0x2e>
}
 8007840:	bd10      	pop	{r4, pc}

08007842 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8007842:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8007844:	784a      	ldrb	r2, [r1, #1]
 8007846:	2a01      	cmp	r2, #1
 8007848:	d014      	beq.n	8007874 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800784a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800784e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8007852:	2a00      	cmp	r2, #0
 8007854:	db06      	blt.n	8007864 <USB_EPSetStall+0x22>
 8007856:	b12b      	cbz	r3, 8007864 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007858:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800785c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007860:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007864:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007868:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800786c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8007870:	2000      	movs	r0, #0
 8007872:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007874:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007878:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 800787c:	2a00      	cmp	r2, #0
 800787e:	db06      	blt.n	800788e <USB_EPSetStall+0x4c>
 8007880:	b12b      	cbz	r3, 800788e <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007882:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007886:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800788a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800788e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007892:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007896:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 800789a:	e7e9      	b.n	8007870 <USB_EPSetStall+0x2e>

0800789c <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800789c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800789e:	784a      	ldrb	r2, [r1, #1]
 80078a0:	2a01      	cmp	r2, #1
 80078a2:	d00e      	beq.n	80078c2 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078a4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80078a8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80078ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80078b0:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078b4:	790b      	ldrb	r3, [r1, #4]
 80078b6:	3b02      	subs	r3, #2
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d915      	bls.n	80078ea <USB_EPClearStall+0x4e>
}
 80078be:	2000      	movs	r0, #0
 80078c0:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80078c2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80078c6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80078ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80078ce:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078d2:	790b      	ldrb	r3, [r1, #4]
 80078d4:	3b02      	subs	r3, #2
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d8f0      	bhi.n	80078be <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078dc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80078e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078e4:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80078e8:	e7e9      	b.n	80078be <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078ea:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80078ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078f2:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 80078f6:	e7e2      	b.n	80078be <USB_EPClearStall+0x22>

080078f8 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80078f8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 80078fc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007900:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007904:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8007908:	0109      	lsls	r1, r1, #4
 800790a:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 800790e:	430b      	orrs	r3, r1
 8007910:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8007914:	2000      	movs	r0, #0
 8007916:	4770      	bx	lr

08007918 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007918:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 800791c:	f023 0303 	bic.w	r3, r3, #3
 8007920:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007924:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8007928:	f023 0302 	bic.w	r3, r3, #2
 800792c:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8007930:	2000      	movs	r0, #0
 8007932:	4770      	bx	lr

08007934 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007934:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8007938:	f023 0303 	bic.w	r3, r3, #3
 800793c:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007940:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8007944:	f043 0302 	orr.w	r3, r3, #2
 8007948:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800794c:	2000      	movs	r0, #0
 800794e:	4770      	bx	lr

08007950 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8007950:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8007952:	6980      	ldr	r0, [r0, #24]
}
 8007954:	4010      	ands	r0, r2
 8007956:	4770      	bx	lr

08007958 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007958:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800795c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007960:	69c0      	ldr	r0, [r0, #28]
 8007962:	4018      	ands	r0, r3
}
 8007964:	0c00      	lsrs	r0, r0, #16
 8007966:	4770      	bx	lr

08007968 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007968:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800796c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007970:	69c0      	ldr	r0, [r0, #28]
 8007972:	4018      	ands	r0, r3
}
 8007974:	b280      	uxth	r0, r0
 8007976:	4770      	bx	lr

08007978 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007978:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800797c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007980:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8007984:	6940      	ldr	r0, [r0, #20]
}
 8007986:	4010      	ands	r0, r2
 8007988:	4770      	bx	lr

0800798a <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800798a:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800798e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007992:	f001 0c0f 	and.w	ip, r1, #15
 8007996:	fa23 f30c 	lsr.w	r3, r3, ip
 800799a:	01db      	lsls	r3, r3, #7
 800799c:	b2db      	uxtb	r3, r3
 800799e:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80079a0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80079a4:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 80079a8:	6880      	ldr	r0, [r0, #8]
}
 80079aa:	4018      	ands	r0, r3
 80079ac:	4770      	bx	lr

080079ae <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80079ae:	6940      	ldr	r0, [r0, #20]
}
 80079b0:	f000 0001 	and.w	r0, r0, #1
 80079b4:	4770      	bx	lr

080079b6 <USB_SetCurrentMode>:
{
 80079b6:	b538      	push	{r3, r4, r5, lr}
 80079b8:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079ba:	68c3      	ldr	r3, [r0, #12]
 80079bc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80079c0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80079c2:	2901      	cmp	r1, #1
 80079c4:	d013      	beq.n	80079ee <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 80079c6:	bb19      	cbnz	r1, 8007a10 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079c8:	68c3      	ldr	r3, [r0, #12]
 80079ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079ce:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80079d0:	2400      	movs	r4, #0
      HAL_Delay(10U);
 80079d2:	200a      	movs	r0, #10
 80079d4:	f7fc faec 	bl	8003fb0 <HAL_Delay>
      ms += 10U;
 80079d8:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079da:	4628      	mov	r0, r5
 80079dc:	f7ff ffe7 	bl	80079ae <USB_GetMode>
 80079e0:	b108      	cbz	r0, 80079e6 <USB_SetCurrentMode+0x30>
 80079e2:	2cc7      	cmp	r4, #199	@ 0xc7
 80079e4:	d9f5      	bls.n	80079d2 <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80079e6:	2cc8      	cmp	r4, #200	@ 0xc8
 80079e8:	d014      	beq.n	8007a14 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 80079ea:	2000      	movs	r0, #0
}
 80079ec:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079ee:	68c3      	ldr	r3, [r0, #12]
 80079f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079f4:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80079f6:	2400      	movs	r4, #0
      HAL_Delay(10U);
 80079f8:	200a      	movs	r0, #10
 80079fa:	f7fc fad9 	bl	8003fb0 <HAL_Delay>
      ms += 10U;
 80079fe:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007a00:	4628      	mov	r0, r5
 8007a02:	f7ff ffd4 	bl	80079ae <USB_GetMode>
 8007a06:	2801      	cmp	r0, #1
 8007a08:	d0ed      	beq.n	80079e6 <USB_SetCurrentMode+0x30>
 8007a0a:	2cc7      	cmp	r4, #199	@ 0xc7
 8007a0c:	d9f4      	bls.n	80079f8 <USB_SetCurrentMode+0x42>
 8007a0e:	e7ea      	b.n	80079e6 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8007a10:	2001      	movs	r0, #1
 8007a12:	e7eb      	b.n	80079ec <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8007a14:	2001      	movs	r0, #1
 8007a16:	e7e9      	b.n	80079ec <USB_SetCurrentMode+0x36>

08007a18 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a18:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007a1c:	f36f 030a 	bfc	r3, #0, #11
 8007a20:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a24:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8007a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a2c:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8007a30:	2000      	movs	r0, #0
 8007a32:	4770      	bx	lr

08007a34 <USB_EP0_OutStart>:
{
 8007a34:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007a36:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a38:	4b15      	ldr	r3, [pc, #84]	@ (8007a90 <USB_EP0_OutStart+0x5c>)
 8007a3a:	429c      	cmp	r4, r3
 8007a3c:	d903      	bls.n	8007a46 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a3e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	db16      	blt.n	8007a74 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a46:	2400      	movs	r4, #0
 8007a48:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a4c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8007a50:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8007a54:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a58:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8007a5c:	f044 0418 	orr.w	r4, r4, #24
 8007a60:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a64:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8007a68:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8007a6c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8007a70:	2901      	cmp	r1, #1
 8007a72:	d003      	beq.n	8007a7c <USB_EP0_OutStart+0x48>
}
 8007a74:	2000      	movs	r0, #0
 8007a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a7a:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a7c:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a80:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007a84:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007a88:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8007a8c:	e7f2      	b.n	8007a74 <USB_EP0_OutStart+0x40>
 8007a8e:	bf00      	nop
 8007a90:	4f54300a 	.word	0x4f54300a

08007a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007a94:	b510      	push	{r4, lr}
 8007a96:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007a98:	4a0c      	ldr	r2, [pc, #48]	@ (8007acc <_sbrk+0x38>)
 8007a9a:	490d      	ldr	r1, [pc, #52]	@ (8007ad0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a9c:	480d      	ldr	r0, [pc, #52]	@ (8007ad4 <_sbrk+0x40>)
 8007a9e:	6800      	ldr	r0, [r0, #0]
 8007aa0:	b140      	cbz	r0, 8007ab4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007aa2:	480c      	ldr	r0, [pc, #48]	@ (8007ad4 <_sbrk+0x40>)
 8007aa4:	6800      	ldr	r0, [r0, #0]
 8007aa6:	4403      	add	r3, r0
 8007aa8:	1a52      	subs	r2, r2, r1
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d806      	bhi.n	8007abc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8007aae:	4a09      	ldr	r2, [pc, #36]	@ (8007ad4 <_sbrk+0x40>)
 8007ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8007ab2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8007ab4:	4807      	ldr	r0, [pc, #28]	@ (8007ad4 <_sbrk+0x40>)
 8007ab6:	4c08      	ldr	r4, [pc, #32]	@ (8007ad8 <_sbrk+0x44>)
 8007ab8:	6004      	str	r4, [r0, #0]
 8007aba:	e7f2      	b.n	8007aa2 <_sbrk+0xe>
    errno = ENOMEM;
 8007abc:	f003 f8ec 	bl	800ac98 <__errno>
 8007ac0:	230c      	movs	r3, #12
 8007ac2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8007ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac8:	e7f3      	b.n	8007ab2 <_sbrk+0x1e>
 8007aca:	bf00      	nop
 8007acc:	20010000 	.word	0x20010000
 8007ad0:	00000400 	.word	0x00000400
 8007ad4:	200067cc 	.word	0x200067cc
 8007ad8:	20008bf0 	.word	0x20008bf0

08007adc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007adc:	4a03      	ldr	r2, [pc, #12]	@ (8007aec <SystemInit+0x10>)
 8007ade:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007ae2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ae6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007aea:	4770      	bx	lr
 8007aec:	e000ed00 	.word	0xe000ed00

08007af0 <table_2d_get_value>:
#include "tables.h"
#include "error_handling.h"
#include "utils.h"

float table_2d_get_value(table_2d_t *table, float x, float y)
{
 8007af0:	b500      	push	{lr}
    uint8_t num_x_bins = sizeof(table->x_bins) / sizeof(table->x_bins[0]);
    uint8_t num_y_bins = sizeof(table->y_bins) / sizeof(table->y_bins[0]);
    x = CLAMP(x, table->x_bins[0], table->x_bins[num_x_bins - 1]);
 8007af2:	f500 6380 	add.w	r3, r0, #1024	@ 0x400
 8007af6:	edd3 6a00 	vldr	s13, [r3]
 8007afa:	eef4 6ac0 	vcmpe.f32	s13, s0
 8007afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b02:	dc0a      	bgt.n	8007b1a <table_2d_get_value+0x2a>
 8007b04:	f200 433c 	addw	r3, r0, #1084	@ 0x43c
 8007b08:	edd3 6a00 	vldr	s13, [r3]
 8007b0c:	eef4 6ac0 	vcmpe.f32	s13, s0
 8007b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b14:	d401      	bmi.n	8007b1a <table_2d_get_value+0x2a>
 8007b16:	eef0 6a40 	vmov.f32	s13, s0
    y = CLAMP(y, table->y_bins[0], table->y_bins[num_y_bins - 1]);
 8007b1a:	f500 6388 	add.w	r3, r0, #1088	@ 0x440
 8007b1e:	ed93 7a00 	vldr	s14, [r3]
 8007b22:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b2a:	dc0a      	bgt.n	8007b42 <table_2d_get_value+0x52>
 8007b2c:	f200 437c 	addw	r3, r0, #1148	@ 0x47c
 8007b30:	ed93 7a00 	vldr	s14, [r3]
 8007b34:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b3c:	d401      	bmi.n	8007b42 <table_2d_get_value+0x52>
 8007b3e:	eeb0 7a60 	vmov.f32	s14, s1

    // Find x_bin (lower index)
    uint8_t x_bin = 0;
 8007b42:	2300      	movs	r3, #0
    while (x_bin < num_x_bins - 1 && x >= table->x_bins[x_bin + 1])
 8007b44:	e001      	b.n	8007b4a <table_2d_get_value+0x5a>
    {
        x_bin++;
 8007b46:	3301      	adds	r3, #1
 8007b48:	b2db      	uxtb	r3, r3
    while (x_bin < num_x_bins - 1 && x >= table->x_bins[x_bin + 1])
 8007b4a:	2b0e      	cmp	r3, #14
 8007b4c:	d80a      	bhi.n	8007b64 <table_2d_get_value+0x74>
 8007b4e:	f203 1201 	addw	r2, r3, #257	@ 0x101
 8007b52:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007b56:	edd2 7a00 	vldr	s15, [r2]
 8007b5a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b62:	d9f0      	bls.n	8007b46 <table_2d_get_value+0x56>
    }
    uint8_t x_bin_next = (x_bin < num_x_bins - 1) ? x_bin + 1 : x_bin;
 8007b64:	2b0e      	cmp	r3, #14
 8007b66:	d814      	bhi.n	8007b92 <table_2d_get_value+0xa2>
 8007b68:	f103 0c01 	add.w	ip, r3, #1
 8007b6c:	fa5f fc8c 	uxtb.w	ip, ip

    // Find y_bin (lower index)
    uint8_t y_bin = 0;
 8007b70:	2200      	movs	r2, #0
    while (y_bin < num_y_bins - 1 && y >= table->y_bins[y_bin + 1])
 8007b72:	2a0e      	cmp	r2, #14
 8007b74:	d80f      	bhi.n	8007b96 <table_2d_get_value+0xa6>
 8007b76:	f202 1111 	addw	r1, r2, #273	@ 0x111
 8007b7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b7e:	edd1 7a00 	vldr	s15, [r1]
 8007b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b8a:	d804      	bhi.n	8007b96 <table_2d_get_value+0xa6>
    {
        y_bin++;
 8007b8c:	3201      	adds	r2, #1
 8007b8e:	b2d2      	uxtb	r2, r2
 8007b90:	e7ef      	b.n	8007b72 <table_2d_get_value+0x82>
    uint8_t x_bin_next = (x_bin < num_x_bins - 1) ? x_bin + 1 : x_bin;
 8007b92:	469c      	mov	ip, r3
 8007b94:	e7ec      	b.n	8007b70 <table_2d_get_value+0x80>
    }
    uint8_t y_bin_next = (y_bin < num_y_bins - 1) ? y_bin + 1 : y_bin;
 8007b96:	2a0e      	cmp	r2, #14
 8007b98:	d802      	bhi.n	8007ba0 <table_2d_get_value+0xb0>
 8007b9a:	1c51      	adds	r1, r2, #1
 8007b9c:	b2c9      	uxtb	r1, r1
 8007b9e:	e000      	b.n	8007ba2 <table_2d_get_value+0xb2>
 8007ba0:	4611      	mov	r1, r2

    // Get bin edges
    float x0 = table->x_bins[x_bin];
 8007ba2:	f503 7e80 	add.w	lr, r3, #256	@ 0x100
 8007ba6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007baa:	ed9e 4a00 	vldr	s8, [lr]
    float x1 = table->x_bins[x_bin_next];
 8007bae:	f50c 7e80 	add.w	lr, ip, #256	@ 0x100
 8007bb2:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007bb6:	ed9e 5a00 	vldr	s10, [lr]
    float y0 = table->y_bins[y_bin];
 8007bba:	f502 7e88 	add.w	lr, r2, #272	@ 0x110
 8007bbe:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007bc2:	edde 4a00 	vldr	s9, [lr]
    float y1 = table->y_bins[y_bin_next];
 8007bc6:	f501 7e88 	add.w	lr, r1, #272	@ 0x110
 8007bca:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007bce:	ed9e 6a00 	vldr	s12, [lr]

    // Get table values at corners
    float q11 = table->data[x_bin][y_bin];
 8007bd2:	eb02 1e03 	add.w	lr, r2, r3, lsl #4
 8007bd6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007bda:	edde 7a00 	vldr	s15, [lr]
    float q21 = table->data[x_bin_next][y_bin];
 8007bde:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8007be2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007be6:	edd2 5a00 	vldr	s11, [r2]
    float q12 = table->data[x_bin][y_bin_next];
 8007bea:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8007bee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007bf2:	ed93 3a00 	vldr	s6, [r3]
    float q22 = table->data[x_bin_next][y_bin_next];
 8007bf6:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8007bfa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8007bfe:	edd0 3a00 	vldr	s7, [r0]

    // Handle edge cases (avoid division by zero)
    float x_frac = (x1 != x0) ? (x - x0) / (x1 - x0) : 0.0f;
 8007c02:	eeb4 4a45 	vcmp.f32	s8, s10
 8007c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c0a:	d006      	beq.n	8007c1a <table_2d_get_value+0x12a>
 8007c0c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8007c10:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007c14:	ee86 0a85 	vdiv.f32	s0, s13, s10
 8007c18:	e001      	b.n	8007c1e <table_2d_get_value+0x12e>
 8007c1a:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8007c78 <table_2d_get_value+0x188>
    float y_frac = (y1 != y0) ? (y - y0) / (y1 - y0) : 0.0f;
 8007c1e:	eef4 4a46 	vcmp.f32	s9, s12
 8007c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c26:	d006      	beq.n	8007c36 <table_2d_get_value+0x146>
 8007c28:	ee37 7a64 	vsub.f32	s14, s14, s9
 8007c2c:	ee76 6a64 	vsub.f32	s13, s12, s9
 8007c30:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8007c34:	e001      	b.n	8007c3a <table_2d_get_value+0x14a>
 8007c36:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8007c78 <table_2d_get_value+0x188>

    // Bilinear interpolation
    float interp =
        q11 * (1 - x_frac) * (1 - y_frac) +
 8007c3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c3e:	ee77 6a40 	vsub.f32	s13, s14, s0
 8007c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c46:	ee37 7a46 	vsub.f32	s14, s14, s12
 8007c4a:	ee67 7a87 	vmul.f32	s15, s15, s14
        q21 * x_frac * (1 - y_frac) +
 8007c4e:	ee60 5a25 	vmul.f32	s11, s0, s11
 8007c52:	ee27 7a25 	vmul.f32	s14, s14, s11
        q11 * (1 - x_frac) * (1 - y_frac) +
 8007c56:	ee77 7a87 	vadd.f32	s15, s15, s14
        q12 * (1 - x_frac) * y_frac +
 8007c5a:	ee66 6a83 	vmul.f32	s13, s13, s6
 8007c5e:	ee66 6a86 	vmul.f32	s13, s13, s12
        q21 * x_frac * (1 - y_frac) +
 8007c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
        q22 * x_frac * y_frac;
 8007c66:	ee20 0a23 	vmul.f32	s0, s0, s7
 8007c6a:	ee20 0a06 	vmul.f32	s0, s0, s12

    return interp;
}
 8007c6e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007c72:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c76:	bf00      	nop
 8007c78:	00000000 	.word	0x00000000

08007c7c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c7c:	4b08      	ldr	r3, [pc, #32]	@ (8007ca0 <prvResetNextTaskUnblockTime+0x24>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	b923      	cbnz	r3, 8007c8e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c84:	4b07      	ldr	r3, [pc, #28]	@ (8007ca4 <prvResetNextTaskUnblockTime+0x28>)
 8007c86:	f04f 32ff 	mov.w	r2, #4294967295
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c8e:	4b04      	ldr	r3, [pc, #16]	@ (8007ca0 <prvResetNextTaskUnblockTime+0x24>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	4b02      	ldr	r3, [pc, #8]	@ (8007ca4 <prvResetNextTaskUnblockTime+0x28>)
 8007c9a:	601a      	str	r2, [r3, #0]
	}
}
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	20006840 	.word	0x20006840
 8007ca4:	200067d8 	.word	0x200067d8

08007ca8 <prvInitialiseNewTask>:
{
 8007ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cac:	4680      	mov	r8, r0
 8007cae:	460d      	mov	r5, r1
 8007cb0:	4617      	mov	r7, r2
 8007cb2:	4699      	mov	r9, r3
 8007cb4:	9e08      	ldr	r6, [sp, #32]
 8007cb6:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8007cba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007cbc:	0092      	lsls	r2, r2, #2
 8007cbe:	21a5      	movs	r1, #165	@ 0xa5
 8007cc0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007cc2:	f002 ffe1 	bl	800ac88 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007cc8:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8007ccc:	3a01      	subs	r2, #1
 8007cce:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cd2:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8007cd6:	b3a5      	cbz	r5, 8007d42 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cd8:	f04f 0c00 	mov.w	ip, #0
 8007cdc:	f1bc 0f0f 	cmp.w	ip, #15
 8007ce0:	d809      	bhi.n	8007cf6 <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ce2:	f815 300c 	ldrb.w	r3, [r5, ip]
 8007ce6:	eb04 020c 	add.w	r2, r4, ip
 8007cea:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8007cee:	b113      	cbz	r3, 8007cf6 <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cf0:	f10c 0c01 	add.w	ip, ip, #1
 8007cf4:	e7f2      	b.n	8007cdc <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cfc:	2e37      	cmp	r6, #55	@ 0x37
 8007cfe:	d900      	bls.n	8007d02 <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d00:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8007d02:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007d04:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d06:	2500      	movs	r5, #0
 8007d08:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d0a:	1d20      	adds	r0, r4, #4
 8007d0c:	f7fa ffff 	bl	8002d0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d10:	f104 0018 	add.w	r0, r4, #24
 8007d14:	f7fa fffb 	bl	8002d0e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d18:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d1a:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8007d1e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d20:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8007d22:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d24:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d28:	464a      	mov	r2, r9
 8007d2a:	4641      	mov	r1, r8
 8007d2c:	4638      	mov	r0, r7
 8007d2e:	f7fb f97b 	bl	8003028 <pxPortInitialiseStack>
 8007d32:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007d34:	f1ba 0f00 	cmp.w	sl, #0
 8007d38:	d001      	beq.n	8007d3e <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d3a:	f8ca 4000 	str.w	r4, [sl]
}
 8007d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d42:	2300      	movs	r3, #0
 8007d44:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8007d48:	e7d8      	b.n	8007cfc <prvInitialiseNewTask+0x54>
	...

08007d4c <prvInitialiseTaskLists>:
{
 8007d4c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d4e:	2400      	movs	r4, #0
 8007d50:	e007      	b.n	8007d62 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d52:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8007d56:	0093      	lsls	r3, r2, #2
 8007d58:	480e      	ldr	r0, [pc, #56]	@ (8007d94 <prvInitialiseTaskLists+0x48>)
 8007d5a:	4418      	add	r0, r3
 8007d5c:	f7fa ffcc 	bl	8002cf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d60:	3401      	adds	r4, #1
 8007d62:	2c37      	cmp	r4, #55	@ 0x37
 8007d64:	d9f5      	bls.n	8007d52 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8007d66:	4d0c      	ldr	r5, [pc, #48]	@ (8007d98 <prvInitialiseTaskLists+0x4c>)
 8007d68:	4628      	mov	r0, r5
 8007d6a:	f7fa ffc5 	bl	8002cf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d6e:	4c0b      	ldr	r4, [pc, #44]	@ (8007d9c <prvInitialiseTaskLists+0x50>)
 8007d70:	4620      	mov	r0, r4
 8007d72:	f7fa ffc1 	bl	8002cf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d76:	480a      	ldr	r0, [pc, #40]	@ (8007da0 <prvInitialiseTaskLists+0x54>)
 8007d78:	f7fa ffbe 	bl	8002cf8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007d7c:	4809      	ldr	r0, [pc, #36]	@ (8007da4 <prvInitialiseTaskLists+0x58>)
 8007d7e:	f7fa ffbb 	bl	8002cf8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8007d82:	4809      	ldr	r0, [pc, #36]	@ (8007da8 <prvInitialiseTaskLists+0x5c>)
 8007d84:	f7fa ffb8 	bl	8002cf8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d88:	4b08      	ldr	r3, [pc, #32]	@ (8007dac <prvInitialiseTaskLists+0x60>)
 8007d8a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d8c:	4b08      	ldr	r3, [pc, #32]	@ (8007db0 <prvInitialiseTaskLists+0x64>)
 8007d8e:	601c      	str	r4, [r3, #0]
}
 8007d90:	bd38      	pop	{r3, r4, r5, pc}
 8007d92:	bf00      	nop
 8007d94:	2000686c 	.word	0x2000686c
 8007d98:	20006858 	.word	0x20006858
 8007d9c:	20006844 	.word	0x20006844
 8007da0:	20006828 	.word	0x20006828
 8007da4:	20006814 	.word	0x20006814
 8007da8:	200067fc 	.word	0x200067fc
 8007dac:	20006840 	.word	0x20006840
 8007db0:	2000683c 	.word	0x2000683c

08007db4 <prvAddNewTaskToReadyList>:
{
 8007db4:	b510      	push	{r4, lr}
 8007db6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007db8:	f7fb f964 	bl	8003084 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8007dbc:	4a22      	ldr	r2, [pc, #136]	@ (8007e48 <prvAddNewTaskToReadyList+0x94>)
 8007dbe:	6813      	ldr	r3, [r2, #0]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dc4:	4b21      	ldr	r3, [pc, #132]	@ (8007e4c <prvAddNewTaskToReadyList+0x98>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	b15b      	cbz	r3, 8007de2 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8007dca:	4b21      	ldr	r3, [pc, #132]	@ (8007e50 <prvAddNewTaskToReadyList+0x9c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	b96b      	cbnz	r3, 8007dec <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8007e4c <prvAddNewTaskToReadyList+0x98>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d807      	bhi.n	8007dec <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8007ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8007e4c <prvAddNewTaskToReadyList+0x98>)
 8007dde:	601c      	str	r4, [r3, #0]
 8007de0:	e004      	b.n	8007dec <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8007de2:	4b1a      	ldr	r3, [pc, #104]	@ (8007e4c <prvAddNewTaskToReadyList+0x98>)
 8007de4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007de6:	6813      	ldr	r3, [r2, #0]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d029      	beq.n	8007e40 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8007dec:	4a19      	ldr	r2, [pc, #100]	@ (8007e54 <prvAddNewTaskToReadyList+0xa0>)
 8007dee:	6813      	ldr	r3, [r2, #0]
 8007df0:	3301      	adds	r3, #1
 8007df2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007df4:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007df6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007df8:	4b17      	ldr	r3, [pc, #92]	@ (8007e58 <prvAddNewTaskToReadyList+0xa4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4298      	cmp	r0, r3
 8007dfe:	d901      	bls.n	8007e04 <prvAddNewTaskToReadyList+0x50>
 8007e00:	4b15      	ldr	r3, [pc, #84]	@ (8007e58 <prvAddNewTaskToReadyList+0xa4>)
 8007e02:	6018      	str	r0, [r3, #0]
 8007e04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007e08:	1d21      	adds	r1, r4, #4
 8007e0a:	4b14      	ldr	r3, [pc, #80]	@ (8007e5c <prvAddNewTaskToReadyList+0xa8>)
 8007e0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007e10:	f7fa ff80 	bl	8002d14 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007e14:	f7fb f958 	bl	80030c8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007e18:	4b0d      	ldr	r3, [pc, #52]	@ (8007e50 <prvAddNewTaskToReadyList+0x9c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	b17b      	cbz	r3, 8007e3e <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e4c <prvAddNewTaskToReadyList+0x98>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e24:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d209      	bcs.n	8007e3e <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8007e2a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e32:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	f3bf 8f6f 	isb	sy
}
 8007e3e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8007e40:	f7ff ff84 	bl	8007d4c <prvInitialiseTaskLists>
 8007e44:	e7d2      	b.n	8007dec <prvAddNewTaskToReadyList+0x38>
 8007e46:	bf00      	nop
 8007e48:	200067f8 	.word	0x200067f8
 8007e4c:	20006ccc 	.word	0x20006ccc
 8007e50:	200067ec 	.word	0x200067ec
 8007e54:	200067dc 	.word	0x200067dc
 8007e58:	200067f0 	.word	0x200067f0
 8007e5c:	2000686c 	.word	0x2000686c

08007e60 <prvDeleteTCB>:
	{
 8007e60:	b510      	push	{r4, lr}
 8007e62:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e64:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 8007e68:	b163      	cbz	r3, 8007e84 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d011      	beq.n	8007e92 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d00e      	beq.n	8007e90 <prvDeleteTCB+0x30>
 8007e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	e7fe      	b.n	8007e82 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8007e84:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8007e86:	f7fa fbf9 	bl	800267c <vPortFree>
				vPortFree( pxTCB );
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f7fa fbf6 	bl	800267c <vPortFree>
	}
 8007e90:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8007e92:	f7fa fbf3 	bl	800267c <vPortFree>
 8007e96:	e7fb      	b.n	8007e90 <prvDeleteTCB+0x30>

08007e98 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e98:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed8 <prvCheckTasksWaitingTermination+0x40>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	b1d3      	cbz	r3, 8007ed4 <prvCheckTasksWaitingTermination+0x3c>
{
 8007e9e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8007ea0:	f7fb f8f0 	bl	8003084 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8007edc <prvCheckTasksWaitingTermination+0x44>)
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eaa:	1d20      	adds	r0, r4, #4
 8007eac:	f7fa ff56 	bl	8002d5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8007ee0 <prvCheckTasksWaitingTermination+0x48>)
 8007eb2:	6813      	ldr	r3, [r2, #0]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007eb8:	4a07      	ldr	r2, [pc, #28]	@ (8007ed8 <prvCheckTasksWaitingTermination+0x40>)
 8007eba:	6813      	ldr	r3, [r2, #0]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8007ec0:	f7fb f902 	bl	80030c8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f7ff ffcb 	bl	8007e60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eca:	4b03      	ldr	r3, [pc, #12]	@ (8007ed8 <prvCheckTasksWaitingTermination+0x40>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e6      	bne.n	8007ea0 <prvCheckTasksWaitingTermination+0x8>
}
 8007ed2:	bd10      	pop	{r4, pc}
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	20006810 	.word	0x20006810
 8007edc:	20006814 	.word	0x20006814
 8007ee0:	200067f8 	.word	0x200067f8

08007ee4 <prvIdleTask>:
{
 8007ee4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8007ee6:	f7ff ffd7 	bl	8007e98 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007eea:	4b07      	ldr	r3, [pc, #28]	@ (8007f08 <prvIdleTask+0x24>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d9f9      	bls.n	8007ee6 <prvIdleTask+0x2>
				taskYIELD();
 8007ef2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007efa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	e7ee      	b.n	8007ee6 <prvIdleTask+0x2>
 8007f08:	2000686c 	.word	0x2000686c

08007f0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f0c:	b570      	push	{r4, r5, r6, lr}
 8007f0e:	4604      	mov	r4, r0
 8007f10:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f12:	4b17      	ldr	r3, [pc, #92]	@ (8007f70 <prvAddCurrentTaskToDelayedList+0x64>)
 8007f14:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f16:	4b17      	ldr	r3, [pc, #92]	@ (8007f74 <prvAddCurrentTaskToDelayedList+0x68>)
 8007f18:	6818      	ldr	r0, [r3, #0]
 8007f1a:	3004      	adds	r0, #4
 8007f1c:	f7fa ff1e 	bl	8002d5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f20:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007f24:	d00d      	beq.n	8007f42 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f26:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f28:	4b12      	ldr	r3, [pc, #72]	@ (8007f74 <prvAddCurrentTaskToDelayedList+0x68>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8007f2e:	42a6      	cmp	r6, r4
 8007f30:	d910      	bls.n	8007f54 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f32:	4b11      	ldr	r3, [pc, #68]	@ (8007f78 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	4b0f      	ldr	r3, [pc, #60]	@ (8007f74 <prvAddCurrentTaskToDelayedList+0x68>)
 8007f38:	6819      	ldr	r1, [r3, #0]
 8007f3a:	3104      	adds	r1, #4
 8007f3c:	f7fa fef5 	bl	8002d2a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f40:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f42:	2d00      	cmp	r5, #0
 8007f44:	d0ef      	beq.n	8007f26 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f46:	4b0b      	ldr	r3, [pc, #44]	@ (8007f74 <prvAddCurrentTaskToDelayedList+0x68>)
 8007f48:	6819      	ldr	r1, [r3, #0]
 8007f4a:	3104      	adds	r1, #4
 8007f4c:	480b      	ldr	r0, [pc, #44]	@ (8007f7c <prvAddCurrentTaskToDelayedList+0x70>)
 8007f4e:	f7fa fee1 	bl	8002d14 <vListInsertEnd>
 8007f52:	e7f5      	b.n	8007f40 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f54:	4b0a      	ldr	r3, [pc, #40]	@ (8007f80 <prvAddCurrentTaskToDelayedList+0x74>)
 8007f56:	6818      	ldr	r0, [r3, #0]
 8007f58:	4b06      	ldr	r3, [pc, #24]	@ (8007f74 <prvAddCurrentTaskToDelayedList+0x68>)
 8007f5a:	6819      	ldr	r1, [r3, #0]
 8007f5c:	3104      	adds	r1, #4
 8007f5e:	f7fa fee4 	bl	8002d2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f62:	4b08      	ldr	r3, [pc, #32]	@ (8007f84 <prvAddCurrentTaskToDelayedList+0x78>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	42a3      	cmp	r3, r4
 8007f68:	d9ea      	bls.n	8007f40 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8007f6a:	4b06      	ldr	r3, [pc, #24]	@ (8007f84 <prvAddCurrentTaskToDelayedList+0x78>)
 8007f6c:	601c      	str	r4, [r3, #0]
}
 8007f6e:	e7e7      	b.n	8007f40 <prvAddCurrentTaskToDelayedList+0x34>
 8007f70:	200067f4 	.word	0x200067f4
 8007f74:	20006ccc 	.word	0x20006ccc
 8007f78:	2000683c 	.word	0x2000683c
 8007f7c:	200067fc 	.word	0x200067fc
 8007f80:	20006840 	.word	0x20006840
 8007f84:	200067d8 	.word	0x200067d8

08007f88 <xTaskCreateStatic>:
	{
 8007f88:	b530      	push	{r4, r5, lr}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007f8e:	b17c      	cbz	r4, 8007fb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f90:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007f92:	b1b5      	cbz	r5, 8007fc2 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f94:	255c      	movs	r5, #92	@ 0x5c
 8007f96:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f98:	9d04      	ldr	r5, [sp, #16]
 8007f9a:	2d5c      	cmp	r5, #92	@ 0x5c
 8007f9c:	d01a      	beq.n	8007fd4 <xTaskCreateStatic+0x4c>
 8007f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	e7fe      	b.n	8007fae <xTaskCreateStatic+0x26>
 8007fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8007fc0:	e7fe      	b.n	8007fc0 <xTaskCreateStatic+0x38>
 8007fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8007fd2:	e7fe      	b.n	8007fd2 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007fd4:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007fd6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007fd8:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fda:	2402      	movs	r4, #2
 8007fdc:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fe0:	2400      	movs	r4, #0
 8007fe2:	9403      	str	r4, [sp, #12]
 8007fe4:	9502      	str	r5, [sp, #8]
 8007fe6:	ac05      	add	r4, sp, #20
 8007fe8:	9401      	str	r4, [sp, #4]
 8007fea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007fec:	9400      	str	r4, [sp, #0]
 8007fee:	f7ff fe5b 	bl	8007ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ff2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007ff4:	f7ff fede 	bl	8007db4 <prvAddNewTaskToReadyList>
	}
 8007ff8:	9805      	ldr	r0, [sp, #20]
 8007ffa:	b007      	add	sp, #28
 8007ffc:	bd30      	pop	{r4, r5, pc}

08007ffe <xTaskCreate>:
	{
 8007ffe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008002:	b085      	sub	sp, #20
 8008004:	4607      	mov	r7, r0
 8008006:	4688      	mov	r8, r1
 8008008:	4614      	mov	r4, r2
 800800a:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800800c:	0090      	lsls	r0, r2, #2
 800800e:	f7fa fab3 	bl	8002578 <pvPortMalloc>
			if( pxStack != NULL )
 8008012:	b308      	cbz	r0, 8008058 <xTaskCreate+0x5a>
 8008014:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008016:	205c      	movs	r0, #92	@ 0x5c
 8008018:	f7fa faae 	bl	8002578 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800801c:	4605      	mov	r5, r0
 800801e:	b1a8      	cbz	r0, 800804c <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8008020:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008024:	2300      	movs	r3, #0
 8008026:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800802a:	9303      	str	r3, [sp, #12]
 800802c:	9002      	str	r0, [sp, #8]
 800802e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	4633      	mov	r3, r6
 8008038:	4622      	mov	r2, r4
 800803a:	4641      	mov	r1, r8
 800803c:	4638      	mov	r0, r7
 800803e:	f7ff fe33 	bl	8007ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008042:	4628      	mov	r0, r5
 8008044:	f7ff feb6 	bl	8007db4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008048:	2001      	movs	r0, #1
 800804a:	e007      	b.n	800805c <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800804c:	4648      	mov	r0, r9
 800804e:	f7fa fb15 	bl	800267c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008052:	f04f 30ff 	mov.w	r0, #4294967295
 8008056:	e001      	b.n	800805c <xTaskCreate+0x5e>
 8008058:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800805c:	b005      	add	sp, #20
 800805e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08008064 <vTaskStartScheduler>:
{
 8008064:	b510      	push	{r4, lr}
 8008066:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008068:	2400      	movs	r4, #0
 800806a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800806c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800806e:	aa07      	add	r2, sp, #28
 8008070:	a906      	add	r1, sp, #24
 8008072:	a805      	add	r0, sp, #20
 8008074:	f7f9 f8ea 	bl	800124c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008078:	9b05      	ldr	r3, [sp, #20]
 800807a:	9302      	str	r3, [sp, #8]
 800807c:	9b06      	ldr	r3, [sp, #24]
 800807e:	9301      	str	r3, [sp, #4]
 8008080:	9400      	str	r4, [sp, #0]
 8008082:	4623      	mov	r3, r4
 8008084:	9a07      	ldr	r2, [sp, #28]
 8008086:	4917      	ldr	r1, [pc, #92]	@ (80080e4 <vTaskStartScheduler+0x80>)
 8008088:	4817      	ldr	r0, [pc, #92]	@ (80080e8 <vTaskStartScheduler+0x84>)
 800808a:	f7ff ff7d 	bl	8007f88 <xTaskCreateStatic>
 800808e:	4b17      	ldr	r3, [pc, #92]	@ (80080ec <vTaskStartScheduler+0x88>)
 8008090:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8008092:	b1c0      	cbz	r0, 80080c6 <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 8008094:	f000 fddc 	bl	8008c50 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008098:	2801      	cmp	r0, #1
 800809a:	d115      	bne.n	80080c8 <vTaskStartScheduler+0x64>
 800809c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80080ac:	4b10      	ldr	r3, [pc, #64]	@ (80080f0 <vTaskStartScheduler+0x8c>)
 80080ae:	f04f 32ff 	mov.w	r2, #4294967295
 80080b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080b4:	4b0f      	ldr	r3, [pc, #60]	@ (80080f4 <vTaskStartScheduler+0x90>)
 80080b6:	2201      	movs	r2, #1
 80080b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080ba:	4b0f      	ldr	r3, [pc, #60]	@ (80080f8 <vTaskStartScheduler+0x94>)
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80080c0:	f7fb f87a 	bl	80031b8 <xPortStartScheduler>
		}
 80080c4:	e003      	b.n	80080ce <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 80080c6:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80080cc:	d001      	beq.n	80080d2 <vTaskStartScheduler+0x6e>
}
 80080ce:	b008      	add	sp, #32
 80080d0:	bd10      	pop	{r4, pc}
 80080d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080e2:	e7fe      	b.n	80080e2 <vTaskStartScheduler+0x7e>
 80080e4:	0800bf1c 	.word	0x0800bf1c
 80080e8:	08007ee5 	.word	0x08007ee5
 80080ec:	200067d4 	.word	0x200067d4
 80080f0:	200067d8 	.word	0x200067d8
 80080f4:	200067ec 	.word	0x200067ec
 80080f8:	200067f4 	.word	0x200067f4

080080fc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80080fc:	4a02      	ldr	r2, [pc, #8]	@ (8008108 <vTaskSuspendAll+0xc>)
 80080fe:	6813      	ldr	r3, [r2, #0]
 8008100:	3301      	adds	r3, #1
 8008102:	6013      	str	r3, [r2, #0]
}
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	200067d0 	.word	0x200067d0

0800810c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800810c:	4b01      	ldr	r3, [pc, #4]	@ (8008114 <xTaskGetTickCount+0x8>)
 800810e:	6818      	ldr	r0, [r3, #0]
}
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	200067f4 	.word	0x200067f4

08008118 <xTaskIncrementTick>:
{
 8008118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800811a:	4b3a      	ldr	r3, [pc, #232]	@ (8008204 <xTaskIncrementTick+0xec>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d169      	bne.n	80081f6 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008122:	4b39      	ldr	r3, [pc, #228]	@ (8008208 <xTaskIncrementTick+0xf0>)
 8008124:	681d      	ldr	r5, [r3, #0]
 8008126:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008128:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800812a:	b9c5      	cbnz	r5, 800815e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800812c:	4b37      	ldr	r3, [pc, #220]	@ (800820c <xTaskIncrementTick+0xf4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	b143      	cbz	r3, 8008146 <xTaskIncrementTick+0x2e>
 8008134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	e7fe      	b.n	8008144 <xTaskIncrementTick+0x2c>
 8008146:	4a31      	ldr	r2, [pc, #196]	@ (800820c <xTaskIncrementTick+0xf4>)
 8008148:	6811      	ldr	r1, [r2, #0]
 800814a:	4b31      	ldr	r3, [pc, #196]	@ (8008210 <xTaskIncrementTick+0xf8>)
 800814c:	6818      	ldr	r0, [r3, #0]
 800814e:	6010      	str	r0, [r2, #0]
 8008150:	6019      	str	r1, [r3, #0]
 8008152:	4a30      	ldr	r2, [pc, #192]	@ (8008214 <xTaskIncrementTick+0xfc>)
 8008154:	6813      	ldr	r3, [r2, #0]
 8008156:	3301      	adds	r3, #1
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	f7ff fd8f 	bl	8007c7c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800815e:	4b2e      	ldr	r3, [pc, #184]	@ (8008218 <xTaskIncrementTick+0x100>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	42ab      	cmp	r3, r5
 8008164:	d93d      	bls.n	80081e2 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8008166:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008168:	4b2c      	ldr	r3, [pc, #176]	@ (800821c <xTaskIncrementTick+0x104>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800816e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008172:	009a      	lsls	r2, r3, #2
 8008174:	4b2a      	ldr	r3, [pc, #168]	@ (8008220 <xTaskIncrementTick+0x108>)
 8008176:	589b      	ldr	r3, [r3, r2]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d900      	bls.n	800817e <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800817c:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800817e:	4b29      	ldr	r3, [pc, #164]	@ (8008224 <xTaskIncrementTick+0x10c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d03c      	beq.n	8008200 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8008186:	2701      	movs	r7, #1
	return xSwitchRequired;
 8008188:	e03a      	b.n	8008200 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800818a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800818c:	4b1f      	ldr	r3, [pc, #124]	@ (800820c <xTaskIncrementTick+0xf4>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	b343      	cbz	r3, 80081e6 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008194:	4b1d      	ldr	r3, [pc, #116]	@ (800820c <xTaskIncrementTick+0xf4>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800819c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800819e:	429d      	cmp	r5, r3
 80081a0:	d326      	bcc.n	80081f0 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081a2:	1d26      	adds	r6, r4, #4
 80081a4:	4630      	mov	r0, r6
 80081a6:	f7fa fdd9 	bl	8002d5c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80081ac:	b11b      	cbz	r3, 80081b6 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081ae:	f104 0018 	add.w	r0, r4, #24
 80081b2:	f7fa fdd3 	bl	8002d5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081b6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80081b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008228 <xTaskIncrementTick+0x110>)
 80081ba:	6812      	ldr	r2, [r2, #0]
 80081bc:	4293      	cmp	r3, r2
 80081be:	d901      	bls.n	80081c4 <xTaskIncrementTick+0xac>
 80081c0:	4a19      	ldr	r2, [pc, #100]	@ (8008228 <xTaskIncrementTick+0x110>)
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80081c8:	009a      	lsls	r2, r3, #2
 80081ca:	4631      	mov	r1, r6
 80081cc:	4814      	ldr	r0, [pc, #80]	@ (8008220 <xTaskIncrementTick+0x108>)
 80081ce:	4410      	add	r0, r2
 80081d0:	f7fa fda0 	bl	8002d14 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081d4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80081d6:	4b11      	ldr	r3, [pc, #68]	@ (800821c <xTaskIncrementTick+0x104>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081dc:	429a      	cmp	r2, r3
 80081de:	d2d4      	bcs.n	800818a <xTaskIncrementTick+0x72>
 80081e0:	e7d4      	b.n	800818c <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 80081e2:	2700      	movs	r7, #0
 80081e4:	e7d2      	b.n	800818c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008218 <xTaskIncrementTick+0x100>)
 80081e8:	f04f 32ff 	mov.w	r2, #4294967295
 80081ec:	601a      	str	r2, [r3, #0]
					break;
 80081ee:	e7bb      	b.n	8008168 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80081f0:	4a09      	ldr	r2, [pc, #36]	@ (8008218 <xTaskIncrementTick+0x100>)
 80081f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081f4:	e7b8      	b.n	8008168 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 80081f6:	4a0d      	ldr	r2, [pc, #52]	@ (800822c <xTaskIncrementTick+0x114>)
 80081f8:	6813      	ldr	r3, [r2, #0]
 80081fa:	3301      	adds	r3, #1
 80081fc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80081fe:	2700      	movs	r7, #0
}
 8008200:	4638      	mov	r0, r7
 8008202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008204:	200067d0 	.word	0x200067d0
 8008208:	200067f4 	.word	0x200067f4
 800820c:	20006840 	.word	0x20006840
 8008210:	2000683c 	.word	0x2000683c
 8008214:	200067e0 	.word	0x200067e0
 8008218:	200067d8 	.word	0x200067d8
 800821c:	20006ccc 	.word	0x20006ccc
 8008220:	2000686c 	.word	0x2000686c
 8008224:	200067e4 	.word	0x200067e4
 8008228:	200067f0 	.word	0x200067f0
 800822c:	200067e8 	.word	0x200067e8

08008230 <xTaskResumeAll>:
{
 8008230:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8008232:	4b35      	ldr	r3, [pc, #212]	@ (8008308 <xTaskResumeAll+0xd8>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	b943      	cbnz	r3, 800824a <xTaskResumeAll+0x1a>
 8008238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	e7fe      	b.n	8008248 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800824a:	f7fa ff1b 	bl	8003084 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800824e:	4b2e      	ldr	r3, [pc, #184]	@ (8008308 <xTaskResumeAll+0xd8>)
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	3a01      	subs	r2, #1
 8008254:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d14f      	bne.n	80082fc <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800825c:	4b2b      	ldr	r3, [pc, #172]	@ (800830c <xTaskResumeAll+0xdc>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	b90b      	cbnz	r3, 8008266 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008262:	2400      	movs	r4, #0
 8008264:	e04b      	b.n	80082fe <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8008266:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008268:	4b29      	ldr	r3, [pc, #164]	@ (8008310 <xTaskResumeAll+0xe0>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	b31b      	cbz	r3, 80082b6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800826e:	4b28      	ldr	r3, [pc, #160]	@ (8008310 <xTaskResumeAll+0xe0>)
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008274:	f104 0018 	add.w	r0, r4, #24
 8008278:	f7fa fd70 	bl	8002d5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800827c:	1d25      	adds	r5, r4, #4
 800827e:	4628      	mov	r0, r5
 8008280:	f7fa fd6c 	bl	8002d5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008284:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008286:	4b23      	ldr	r3, [pc, #140]	@ (8008314 <xTaskResumeAll+0xe4>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4298      	cmp	r0, r3
 800828c:	d901      	bls.n	8008292 <xTaskResumeAll+0x62>
 800828e:	4b21      	ldr	r3, [pc, #132]	@ (8008314 <xTaskResumeAll+0xe4>)
 8008290:	6018      	str	r0, [r3, #0]
 8008292:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008296:	4629      	mov	r1, r5
 8008298:	4b1f      	ldr	r3, [pc, #124]	@ (8008318 <xTaskResumeAll+0xe8>)
 800829a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800829e:	f7fa fd39 	bl	8002d14 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80082a4:	4b1d      	ldr	r3, [pc, #116]	@ (800831c <xTaskResumeAll+0xec>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d3dc      	bcc.n	8008268 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 80082ae:	4b1c      	ldr	r3, [pc, #112]	@ (8008320 <xTaskResumeAll+0xf0>)
 80082b0:	2201      	movs	r2, #1
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	e7d8      	b.n	8008268 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 80082b6:	b10c      	cbz	r4, 80082bc <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 80082b8:	f7ff fce0 	bl	8007c7c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80082bc:	4b19      	ldr	r3, [pc, #100]	@ (8008324 <xTaskResumeAll+0xf4>)
 80082be:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80082c0:	b984      	cbnz	r4, 80082e4 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 80082c2:	4b17      	ldr	r3, [pc, #92]	@ (8008320 <xTaskResumeAll+0xf0>)
 80082c4:	681c      	ldr	r4, [r3, #0]
 80082c6:	b1d4      	cbz	r4, 80082fe <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 80082c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80082cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80082dc:	2401      	movs	r4, #1
 80082de:	e00e      	b.n	80082fe <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 80082e0:	3c01      	subs	r4, #1
 80082e2:	d007      	beq.n	80082f4 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 80082e4:	f7ff ff18 	bl	8008118 <xTaskIncrementTick>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d0f9      	beq.n	80082e0 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 80082ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008320 <xTaskResumeAll+0xf0>)
 80082ee:	2201      	movs	r2, #1
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	e7f5      	b.n	80082e0 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 80082f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008324 <xTaskResumeAll+0xf4>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e7e2      	b.n	80082c2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 80082fc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80082fe:	f7fa fee3 	bl	80030c8 <vPortExitCritical>
}
 8008302:	4620      	mov	r0, r4
 8008304:	bd38      	pop	{r3, r4, r5, pc}
 8008306:	bf00      	nop
 8008308:	200067d0 	.word	0x200067d0
 800830c:	200067f8 	.word	0x200067f8
 8008310:	20006828 	.word	0x20006828
 8008314:	200067f0 	.word	0x200067f0
 8008318:	2000686c 	.word	0x2000686c
 800831c:	20006ccc 	.word	0x20006ccc
 8008320:	200067e4 	.word	0x200067e4
 8008324:	200067e8 	.word	0x200067e8

08008328 <vTaskDelay>:
	{
 8008328:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800832a:	b1a8      	cbz	r0, 8008358 <vTaskDelay+0x30>
 800832c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800832e:	4b10      	ldr	r3, [pc, #64]	@ (8008370 <vTaskDelay+0x48>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	b143      	cbz	r3, 8008346 <vTaskDelay+0x1e>
 8008334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	e7fe      	b.n	8008344 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8008346:	f7ff fed9 	bl	80080fc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800834a:	2100      	movs	r1, #0
 800834c:	4620      	mov	r0, r4
 800834e:	f7ff fddd 	bl	8007f0c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008352:	f7ff ff6d 	bl	8008230 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008356:	b948      	cbnz	r0, 800836c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8008358:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800835c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008360:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	f3bf 8f6f 	isb	sy
	}
 800836c:	bd10      	pop	{r4, pc}
 800836e:	bf00      	nop
 8008370:	200067d0 	.word	0x200067d0

08008374 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008374:	4b20      	ldr	r3, [pc, #128]	@ (80083f8 <vTaskSwitchContext+0x84>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	b11b      	cbz	r3, 8008382 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800837a:	4b20      	ldr	r3, [pc, #128]	@ (80083fc <vTaskSwitchContext+0x88>)
 800837c:	2201      	movs	r2, #1
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8008382:	4b1e      	ldr	r3, [pc, #120]	@ (80083fc <vTaskSwitchContext+0x88>)
 8008384:	2200      	movs	r2, #0
 8008386:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008388:	4b1d      	ldr	r3, [pc, #116]	@ (8008400 <vTaskSwitchContext+0x8c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008390:	008a      	lsls	r2, r1, #2
 8008392:	491c      	ldr	r1, [pc, #112]	@ (8008404 <vTaskSwitchContext+0x90>)
 8008394:	588a      	ldr	r2, [r1, r2]
 8008396:	b95a      	cbnz	r2, 80083b0 <vTaskSwitchContext+0x3c>
 8008398:	b10b      	cbz	r3, 800839e <vTaskSwitchContext+0x2a>
 800839a:	3b01      	subs	r3, #1
 800839c:	e7f6      	b.n	800838c <vTaskSwitchContext+0x18>
 800839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	e7fe      	b.n	80083ae <vTaskSwitchContext+0x3a>
 80083b0:	4608      	mov	r0, r1
 80083b2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80083b6:	008a      	lsls	r2, r1, #2
 80083b8:	4402      	add	r2, r0
 80083ba:	6851      	ldr	r1, [r2, #4]
 80083bc:	6849      	ldr	r1, [r1, #4]
 80083be:	6051      	str	r1, [r2, #4]
 80083c0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80083c4:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80083c8:	3208      	adds	r2, #8
 80083ca:	4402      	add	r2, r0
 80083cc:	4291      	cmp	r1, r2
 80083ce:	d00b      	beq.n	80083e8 <vTaskSwitchContext+0x74>
 80083d0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80083d4:	0091      	lsls	r1, r2, #2
 80083d6:	4a0b      	ldr	r2, [pc, #44]	@ (8008404 <vTaskSwitchContext+0x90>)
 80083d8:	440a      	add	r2, r1
 80083da:	6852      	ldr	r2, [r2, #4]
 80083dc:	68d1      	ldr	r1, [r2, #12]
 80083de:	4a0a      	ldr	r2, [pc, #40]	@ (8008408 <vTaskSwitchContext+0x94>)
 80083e0:	6011      	str	r1, [r2, #0]
 80083e2:	4a07      	ldr	r2, [pc, #28]	@ (8008400 <vTaskSwitchContext+0x8c>)
 80083e4:	6013      	str	r3, [r2, #0]
}
 80083e6:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e8:	6848      	ldr	r0, [r1, #4]
 80083ea:	4662      	mov	r2, ip
 80083ec:	0091      	lsls	r1, r2, #2
 80083ee:	4a05      	ldr	r2, [pc, #20]	@ (8008404 <vTaskSwitchContext+0x90>)
 80083f0:	440a      	add	r2, r1
 80083f2:	6050      	str	r0, [r2, #4]
 80083f4:	e7ec      	b.n	80083d0 <vTaskSwitchContext+0x5c>
 80083f6:	bf00      	nop
 80083f8:	200067d0 	.word	0x200067d0
 80083fc:	200067e4 	.word	0x200067e4
 8008400:	200067f0 	.word	0x200067f0
 8008404:	2000686c 	.word	0x2000686c
 8008408:	20006ccc 	.word	0x20006ccc

0800840c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800840c:	b158      	cbz	r0, 8008426 <vTaskPlaceOnEventList+0x1a>
{
 800840e:	b510      	push	{r4, lr}
 8008410:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008412:	4a09      	ldr	r2, [pc, #36]	@ (8008438 <vTaskPlaceOnEventList+0x2c>)
 8008414:	6811      	ldr	r1, [r2, #0]
 8008416:	3118      	adds	r1, #24
 8008418:	f7fa fc87 	bl	8002d2a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800841c:	2101      	movs	r1, #1
 800841e:	4620      	mov	r0, r4
 8008420:	f7ff fd74 	bl	8007f0c <prvAddCurrentTaskToDelayedList>
}
 8008424:	bd10      	pop	{r4, pc}
 8008426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8008436:	e7fe      	b.n	8008436 <vTaskPlaceOnEventList+0x2a>
 8008438:	20006ccc 	.word	0x20006ccc

0800843c <vTaskPlaceOnEventListRestricted>:
	{
 800843c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800843e:	b170      	cbz	r0, 800845e <vTaskPlaceOnEventListRestricted+0x22>
 8008440:	460d      	mov	r5, r1
 8008442:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008444:	4a0a      	ldr	r2, [pc, #40]	@ (8008470 <vTaskPlaceOnEventListRestricted+0x34>)
 8008446:	6811      	ldr	r1, [r2, #0]
 8008448:	3118      	adds	r1, #24
 800844a:	f7fa fc63 	bl	8002d14 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800844e:	b10c      	cbz	r4, 8008454 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8008450:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008454:	4621      	mov	r1, r4
 8008456:	4628      	mov	r0, r5
 8008458:	f7ff fd58 	bl	8007f0c <prvAddCurrentTaskToDelayedList>
	}
 800845c:	bd38      	pop	{r3, r4, r5, pc}
 800845e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800846e:	e7fe      	b.n	800846e <vTaskPlaceOnEventListRestricted+0x32>
 8008470:	20006ccc 	.word	0x20006ccc

08008474 <xTaskRemoveFromEventList>:
{
 8008474:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008476:	68c3      	ldr	r3, [r0, #12]
 8008478:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800847a:	b324      	cbz	r4, 80084c6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800847c:	f104 0518 	add.w	r5, r4, #24
 8008480:	4628      	mov	r0, r5
 8008482:	f7fa fc6b 	bl	8002d5c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008486:	4b18      	ldr	r3, [pc, #96]	@ (80084e8 <xTaskRemoveFromEventList+0x74>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	bb2b      	cbnz	r3, 80084d8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800848c:	1d25      	adds	r5, r4, #4
 800848e:	4628      	mov	r0, r5
 8008490:	f7fa fc64 	bl	8002d5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008494:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008496:	4b15      	ldr	r3, [pc, #84]	@ (80084ec <xTaskRemoveFromEventList+0x78>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4298      	cmp	r0, r3
 800849c:	d901      	bls.n	80084a2 <xTaskRemoveFromEventList+0x2e>
 800849e:	4b13      	ldr	r3, [pc, #76]	@ (80084ec <xTaskRemoveFromEventList+0x78>)
 80084a0:	6018      	str	r0, [r3, #0]
 80084a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80084a6:	4629      	mov	r1, r5
 80084a8:	4b11      	ldr	r3, [pc, #68]	@ (80084f0 <xTaskRemoveFromEventList+0x7c>)
 80084aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80084ae:	f7fa fc31 	bl	8002d14 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80084b4:	4b0f      	ldr	r3, [pc, #60]	@ (80084f4 <xTaskRemoveFromEventList+0x80>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d911      	bls.n	80084e2 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80084be:	2001      	movs	r0, #1
 80084c0:	4b0d      	ldr	r3, [pc, #52]	@ (80084f8 <xTaskRemoveFromEventList+0x84>)
 80084c2:	6018      	str	r0, [r3, #0]
}
 80084c4:	bd38      	pop	{r3, r4, r5, pc}
 80084c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80084d6:	e7fe      	b.n	80084d6 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084d8:	4629      	mov	r1, r5
 80084da:	4808      	ldr	r0, [pc, #32]	@ (80084fc <xTaskRemoveFromEventList+0x88>)
 80084dc:	f7fa fc1a 	bl	8002d14 <vListInsertEnd>
 80084e0:	e7e7      	b.n	80084b2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 80084e2:	2000      	movs	r0, #0
	return xReturn;
 80084e4:	e7ee      	b.n	80084c4 <xTaskRemoveFromEventList+0x50>
 80084e6:	bf00      	nop
 80084e8:	200067d0 	.word	0x200067d0
 80084ec:	200067f0 	.word	0x200067f0
 80084f0:	2000686c 	.word	0x2000686c
 80084f4:	20006ccc 	.word	0x20006ccc
 80084f8:	200067e4 	.word	0x200067e4
 80084fc:	20006828 	.word	0x20006828

08008500 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008500:	4b03      	ldr	r3, [pc, #12]	@ (8008510 <vTaskInternalSetTimeOutState+0x10>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008506:	4b03      	ldr	r3, [pc, #12]	@ (8008514 <vTaskInternalSetTimeOutState+0x14>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6043      	str	r3, [r0, #4]
}
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	200067e0 	.word	0x200067e0
 8008514:	200067f4 	.word	0x200067f4

08008518 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8008518:	b1e0      	cbz	r0, 8008554 <xTaskCheckForTimeOut+0x3c>
{
 800851a:	b570      	push	{r4, r5, r6, lr}
 800851c:	460c      	mov	r4, r1
 800851e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8008520:	b309      	cbz	r1, 8008566 <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 8008522:	f7fa fdaf 	bl	8003084 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008526:	4b1c      	ldr	r3, [pc, #112]	@ (8008598 <xTaskCheckForTimeOut+0x80>)
 8008528:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800852a:	686b      	ldr	r3, [r5, #4]
 800852c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800852e:	6822      	ldr	r2, [r4, #0]
 8008530:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008534:	d028      	beq.n	8008588 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008536:	f8df c064 	ldr.w	ip, [pc, #100]	@ 800859c <xTaskCheckForTimeOut+0x84>
 800853a:	f8dc c000 	ldr.w	ip, [ip]
 800853e:	682e      	ldr	r6, [r5, #0]
 8008540:	4566      	cmp	r6, ip
 8008542:	d001      	beq.n	8008548 <xTaskCheckForTimeOut+0x30>
 8008544:	428b      	cmp	r3, r1
 8008546:	d924      	bls.n	8008592 <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008548:	4282      	cmp	r2, r0
 800854a:	d815      	bhi.n	8008578 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008550:	2401      	movs	r4, #1
 8008552:	e01a      	b.n	800858a <xTaskCheckForTimeOut+0x72>
 8008554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8008564:	e7fe      	b.n	8008564 <xTaskCheckForTimeOut+0x4c>
 8008566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8008576:	e7fe      	b.n	8008576 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 8008578:	1a5b      	subs	r3, r3, r1
 800857a:	4413      	add	r3, r2
 800857c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800857e:	4628      	mov	r0, r5
 8008580:	f7ff ffbe 	bl	8008500 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008584:	2400      	movs	r4, #0
 8008586:	e000      	b.n	800858a <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 8008588:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800858a:	f7fa fd9d 	bl	80030c8 <vPortExitCritical>
}
 800858e:	4620      	mov	r0, r4
 8008590:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8008592:	2401      	movs	r4, #1
 8008594:	e7f9      	b.n	800858a <xTaskCheckForTimeOut+0x72>
 8008596:	bf00      	nop
 8008598:	200067f4 	.word	0x200067f4
 800859c:	200067e0 	.word	0x200067e0

080085a0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80085a0:	4b01      	ldr	r3, [pc, #4]	@ (80085a8 <vTaskMissedYield+0x8>)
 80085a2:	2201      	movs	r2, #1
 80085a4:	601a      	str	r2, [r3, #0]
}
 80085a6:	4770      	bx	lr
 80085a8:	200067e4 	.word	0x200067e4

080085ac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80085ac:	4b05      	ldr	r3, [pc, #20]	@ (80085c4 <xTaskGetSchedulerState+0x18>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	b133      	cbz	r3, 80085c0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085b2:	4b05      	ldr	r3, [pc, #20]	@ (80085c8 <xTaskGetSchedulerState+0x1c>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	b10b      	cbz	r3, 80085bc <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80085b8:	2000      	movs	r0, #0
	}
 80085ba:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80085bc:	2002      	movs	r0, #2
 80085be:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085c0:	2001      	movs	r0, #1
 80085c2:	4770      	bx	lr
 80085c4:	200067ec 	.word	0x200067ec
 80085c8:	200067d0 	.word	0x200067d0

080085cc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d03b      	beq.n	8008648 <xTaskPriorityDisinherit+0x7c>
	{
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80085d4:	4b1e      	ldr	r3, [pc, #120]	@ (8008650 <xTaskPriorityDisinherit+0x84>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4283      	cmp	r3, r0
 80085da:	d008      	beq.n	80085ee <xTaskPriorityDisinherit+0x22>
 80085dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	e7fe      	b.n	80085ec <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80085ee:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80085f0:	b943      	cbnz	r3, 8008604 <xTaskPriorityDisinherit+0x38>
 80085f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	e7fe      	b.n	8008602 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8008604:	3b01      	subs	r3, #1
 8008606:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008608:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800860a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800860c:	4291      	cmp	r1, r2
 800860e:	d01d      	beq.n	800864c <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008610:	b10b      	cbz	r3, 8008616 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8008612:	2000      	movs	r0, #0
	}
 8008614:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008616:	1d05      	adds	r5, r0, #4
 8008618:	4628      	mov	r0, r5
 800861a:	f7fa fb9f 	bl	8002d5c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800861e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8008620:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008622:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8008626:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008628:	4b0a      	ldr	r3, [pc, #40]	@ (8008654 <xTaskPriorityDisinherit+0x88>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4298      	cmp	r0, r3
 800862e:	d901      	bls.n	8008634 <xTaskPriorityDisinherit+0x68>
 8008630:	4b08      	ldr	r3, [pc, #32]	@ (8008654 <xTaskPriorityDisinherit+0x88>)
 8008632:	6018      	str	r0, [r3, #0]
 8008634:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008638:	4629      	mov	r1, r5
 800863a:	4b07      	ldr	r3, [pc, #28]	@ (8008658 <xTaskPriorityDisinherit+0x8c>)
 800863c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008640:	f7fa fb68 	bl	8002d14 <vListInsertEnd>
					xReturn = pdTRUE;
 8008644:	2001      	movs	r0, #1
 8008646:	e7e5      	b.n	8008614 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8008648:	2000      	movs	r0, #0
	}
 800864a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800864c:	2000      	movs	r0, #0
 800864e:	e7e1      	b.n	8008614 <xTaskPriorityDisinherit+0x48>
 8008650:	20006ccc 	.word	0x20006ccc
 8008654:	200067f0 	.word	0x200067f0
 8008658:	2000686c 	.word	0x2000686c

0800865c <thermistor_init>:
#include "thermistor.h"
#include "utils.h"


void thermistor_init(thermistor_t *thermistor, thermistor_conf_t cfg)
{
 800865c:	b084      	sub	sp, #16
 800865e:	b510      	push	{r4, lr}
 8008660:	ed2d 8b02 	vpush	{d8}
 8008664:	f10d 0c14 	add.w	ip, sp, #20
 8008668:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
    if (thermistor == NULL)
 800866c:	2800      	cmp	r0, #0
 800866e:	d060      	beq.n	8008732 <thermistor_init+0xd6>
 8008670:	4604      	mov	r4, r0
        log_error("Thermistor init failed!");
        return;
    }

    // https://en.wikipedia.org/wiki/Steinhart%E2%80%93Hart_equation
	float l1 = logf(cfg.resistance_1);
 8008672:	ed9d 0a08 	vldr	s0, [sp, #32]
 8008676:	f002 ff8b 	bl	800b590 <logf>
 800867a:	eef0 8a40 	vmov.f32	s17, s0
	float l2 = logf(cfg.resistance_2);
 800867e:	ed9d 0a09 	vldr	s0, [sp, #36]	@ 0x24
 8008682:	f002 ff85 	bl	800b590 <logf>
 8008686:	eeb0 8a40 	vmov.f32	s16, s0
	float l3 = logf(cfg.resistance_3);
 800868a:	ed9d 0a0a 	vldr	s0, [sp, #40]	@ 0x28
 800868e:	f002 ff7f 	bl	800b590 <logf>

	float y1 = 1 / CELSIUS_TO_KELVIN(cfg.tempC_1);
 8008692:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 800873c <thermistor_init+0xe0>
 8008696:	eddd 7a05 	vldr	s15, [sp, #20]
 800869a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800869e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80086a2:	eec5 6aa7 	vdiv.f32	s13, s11, s15
	float y2 = 1 / CELSIUS_TO_KELVIN(cfg.tempC_2);
 80086a6:	eddd 7a06 	vldr	s15, [sp, #24]
 80086aa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80086ae:	ee85 7aa7 	vdiv.f32	s14, s11, s15
	float y3 = 1 / CELSIUS_TO_KELVIN(cfg.tempC_3);
 80086b2:	eddd 7a07 	vldr	s15, [sp, #28]
 80086b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80086ba:	ee85 6aa7 	vdiv.f32	s12, s11, s15

	float u2 = (y2 - y1) / (l2 - l1);
 80086be:	ee37 7a66 	vsub.f32	s14, s14, s13
 80086c2:	ee78 5a68 	vsub.f32	s11, s16, s17
 80086c6:	eec7 7a25 	vdiv.f32	s15, s14, s11
	float u3 = (y3 - y1) / (l3 - l1);
 80086ca:	ee36 6a66 	vsub.f32	s12, s12, s13
 80086ce:	ee70 5a68 	vsub.f32	s11, s0, s17
 80086d2:	ee86 7a25 	vdiv.f32	s14, s12, s11

	thermistor->m_c = ((u3 - u2) / (l3 - l2)) / (l1 + l2 + l3);
 80086d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80086da:	ee30 6a48 	vsub.f32	s12, s0, s16
 80086de:	eec7 5a06 	vdiv.f32	s11, s14, s12
 80086e2:	ee38 7a88 	vadd.f32	s14, s17, s16
 80086e6:	ee37 7a00 	vadd.f32	s14, s14, s0
 80086ea:	ee85 6a87 	vdiv.f32	s12, s11, s14
 80086ee:	ed84 6a05 	vstr	s12, [r4, #20]
	thermistor->m_b = u2 - thermistor->m_c * (l1 * l1 + l1 * l2 + l2 * l2);
 80086f2:	ee68 5aa8 	vmul.f32	s11, s17, s17
 80086f6:	ee28 7a88 	vmul.f32	s14, s17, s16
 80086fa:	ee35 7a87 	vadd.f32	s14, s11, s14
 80086fe:	ee28 8a08 	vmul.f32	s16, s16, s16
 8008702:	ee37 7a08 	vadd.f32	s14, s14, s16
 8008706:	ee26 7a07 	vmul.f32	s14, s12, s14
 800870a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800870e:	edc4 7a04 	vstr	s15, [r4, #16]
	thermistor->m_a = y1 - (thermistor->m_b + l1 * l1 * thermistor->m_c) * l1;
 8008712:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008716:	ee77 7a86 	vadd.f32	s15, s15, s12
 800871a:	ee27 0aa8 	vmul.f32	s0, s15, s17
 800871e:	ee76 6ac0 	vsub.f32	s13, s13, s0
 8008722:	edc4 6a03 	vstr	s13, [r4, #12]
	if (tempAt90percentPoint > cfg.tempC_3)
    {
        log_error("Thermistor configuration has failed 90% test");
	}
    */
}
 8008726:	ecbd 8b02 	vpop	{d8}
 800872a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800872e:	b004      	add	sp, #16
 8008730:	4770      	bx	lr
        log_error("Thermistor init failed!");
 8008732:	4803      	ldr	r0, [pc, #12]	@ (8008740 <thermistor_init+0xe4>)
 8008734:	f7f9 fcfe 	bl	8002134 <log_error>
        return;
 8008738:	e7f5      	b.n	8008726 <thermistor_init+0xca>
 800873a:	bf00      	nop
 800873c:	43889333 	.word	0x43889333
 8008740:	0800bf24 	.word	0x0800bf24

08008744 <thermistor_get_temp>:

temperature_t thermistor_get_temp(thermistor_t *thermistor)
{
 8008744:	b510      	push	{r4, lr}
 8008746:	4604      	mov	r4, r0
    // This resistance should have already been validated - only
	// thing we can check is that it's non-negative
    float ohms = resistor_get_resistance(&thermistor->resistor);
 8008748:	f7fb f9ce 	bl	8003ae8 <resistor_get_resistance>
    {
        log_error("Thermistor invalid resistance!");
        return NAN;
    }

	float lnR = logf(ohms);
 800874c:	f002 ff20 	bl	800b590 <logf>

	float lnR3 = lnR * lnR * lnR;
 8008750:	ee60 6a00 	vmul.f32	s13, s0, s0
 8008754:	ee66 6a80 	vmul.f32	s13, s13, s0

	float recip = thermistor->m_a + thermistor->m_b * lnR + thermistor->m_c * lnR3;
 8008758:	edd4 7a03 	vldr	s15, [r4, #12]
 800875c:	ed94 7a04 	vldr	s14, [r4, #16]
 8008760:	ee27 7a00 	vmul.f32	s14, s14, s0
 8008764:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008768:	ed94 7a05 	vldr	s14, [r4, #20]
 800876c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008770:	ee77 7a87 	vadd.f32	s15, s15, s14

	float kelvin = 1 / recip;
 8008774:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008778:	ee87 0a27 	vdiv.f32	s0, s14, s15

	float celsius = KELVIN_TO_CELSIUS(kelvin);
 800877c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80087bc <thermistor_get_temp+0x78>
 8008780:	ee30 0a67 	vsub.f32	s0, s0, s15

	// bounds check result - please don't try to run this SGC when it is colder than -50C :)
	if (celsius < -50) {
 8008784:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80087c0 <thermistor_get_temp+0x7c>
 8008788:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800878c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008790:	d407      	bmi.n	80087a2 <thermistor_get_temp+0x5e>
		log_error("Thermistor temp bound check failed!");
        return NAN;
	}

	if (celsius > 250) {
 8008792:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80087c4 <thermistor_get_temp+0x80>
 8008796:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800879a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800879e:	dc06      	bgt.n	80087ae <thermistor_get_temp+0x6a>
		log_error("Thermistor temp bound check failed!");
        return NAN;
	}

	return celsius;
 80087a0:	bd10      	pop	{r4, pc}
		log_error("Thermistor temp bound check failed!");
 80087a2:	4809      	ldr	r0, [pc, #36]	@ (80087c8 <thermistor_get_temp+0x84>)
 80087a4:	f7f9 fcc6 	bl	8002134 <log_error>
        return NAN;
 80087a8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80087cc <thermistor_get_temp+0x88>
 80087ac:	e7f8      	b.n	80087a0 <thermistor_get_temp+0x5c>
		log_error("Thermistor temp bound check failed!");
 80087ae:	4806      	ldr	r0, [pc, #24]	@ (80087c8 <thermistor_get_temp+0x84>)
 80087b0:	f7f9 fcc0 	bl	8002134 <log_error>
        return NAN;
 80087b4:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 80087cc <thermistor_get_temp+0x88>
 80087b8:	e7f2      	b.n	80087a0 <thermistor_get_temp+0x5c>
 80087ba:	bf00      	nop
 80087bc:	43889333 	.word	0x43889333
 80087c0:	c2480000 	.word	0xc2480000
 80087c4:	437a0000 	.word	0x437a0000
 80087c8:	0800bf3c 	.word	0x0800bf3c
 80087cc:	7fc00000 	.word	0x7fc00000

080087d0 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80087d0:	b500      	push	{lr}
 80087d2:	b08f      	sub	sp, #60	@ 0x3c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80087d4:	2300      	movs	r3, #0
 80087d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80087d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087da:	930c      	str	r3, [sp, #48]	@ 0x30
 80087dc:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80087de:	9308      	str	r3, [sp, #32]
 80087e0:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	9302      	str	r3, [sp, #8]
 80087e6:	9303      	str	r3, [sp, #12]
 80087e8:	9304      	str	r3, [sp, #16]
 80087ea:	9305      	str	r3, [sp, #20]
 80087ec:	9306      	str	r3, [sp, #24]
 80087ee:	9307      	str	r3, [sp, #28]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80087f0:	481f      	ldr	r0, [pc, #124]	@ (8008870 <MX_TIM2_Init+0xa0>)
 80087f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80087f6:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 84-1;
 80087f8:	2253      	movs	r2, #83	@ 0x53
 80087fa:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087fc:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 80087fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008802:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008804:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008806:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008808:	f7fd ff9e 	bl	8006748 <HAL_TIM_Base_Init>
 800880c:	bb00      	cbnz	r0, 8008850 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800880e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008812:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008814:	a90a      	add	r1, sp, #40	@ 0x28
 8008816:	4816      	ldr	r0, [pc, #88]	@ (8008870 <MX_TIM2_Init+0xa0>)
 8008818:	f7fe f8f2 	bl	8006a00 <HAL_TIM_ConfigClockSource>
 800881c:	b9d8      	cbnz	r0, 8008856 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800881e:	4814      	ldr	r0, [pc, #80]	@ (8008870 <MX_TIM2_Init+0xa0>)
 8008820:	f7fd ffbe 	bl	80067a0 <HAL_TIM_OC_Init>
 8008824:	b9d0      	cbnz	r0, 800885c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008826:	2300      	movs	r3, #0
 8008828:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800882a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800882c:	a908      	add	r1, sp, #32
 800882e:	4810      	ldr	r0, [pc, #64]	@ (8008870 <MX_TIM2_Init+0xa0>)
 8008830:	f7fe fa90 	bl	8006d54 <HAL_TIMEx_MasterConfigSynchronization>
 8008834:	b9a8      	cbnz	r0, 8008862 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8008836:	2200      	movs	r2, #0
 8008838:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 800883a:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800883c:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800883e:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008840:	a901      	add	r1, sp, #4
 8008842:	480b      	ldr	r0, [pc, #44]	@ (8008870 <MX_TIM2_Init+0xa0>)
 8008844:	f7fe f832 	bl	80068ac <HAL_TIM_OC_ConfigChannel>
 8008848:	b970      	cbnz	r0, 8008868 <MX_TIM2_Init+0x98>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800884a:	b00f      	add	sp, #60	@ 0x3c
 800884c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8008850:	f7fa fab0 	bl	8002db4 <Error_Handler>
 8008854:	e7db      	b.n	800880e <MX_TIM2_Init+0x3e>
    Error_Handler();
 8008856:	f7fa faad 	bl	8002db4 <Error_Handler>
 800885a:	e7e0      	b.n	800881e <MX_TIM2_Init+0x4e>
    Error_Handler();
 800885c:	f7fa faaa 	bl	8002db4 <Error_Handler>
 8008860:	e7e1      	b.n	8008826 <MX_TIM2_Init+0x56>
    Error_Handler();
 8008862:	f7fa faa7 	bl	8002db4 <Error_Handler>
 8008866:	e7e6      	b.n	8008836 <MX_TIM2_Init+0x66>
    Error_Handler();
 8008868:	f7fa faa4 	bl	8002db4 <Error_Handler>
}
 800886c:	e7ed      	b.n	800884a <MX_TIM2_Init+0x7a>
 800886e:	bf00      	nop
 8008870:	20006d18 	.word	0x20006d18

08008874 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008874:	b500      	push	{lr}
 8008876:	b083      	sub	sp, #12

  if(tim_pwmHandle->Instance==TIM1)
 8008878:	6803      	ldr	r3, [r0, #0]
 800887a:	4a15      	ldr	r2, [pc, #84]	@ (80088d0 <HAL_TIM_PWM_MspInit+0x5c>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d005      	beq.n	800888c <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM3)
 8008880:	4a14      	ldr	r2, [pc, #80]	@ (80088d4 <HAL_TIM_PWM_MspInit+0x60>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d016      	beq.n	80088b4 <HAL_TIM_PWM_MspInit+0x40>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008886:	b003      	add	sp, #12
 8008888:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800888c:	2200      	movs	r2, #0
 800888e:	9200      	str	r2, [sp, #0]
 8008890:	4b11      	ldr	r3, [pc, #68]	@ (80088d8 <HAL_TIM_PWM_MspInit+0x64>)
 8008892:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008894:	f041 0101 	orr.w	r1, r1, #1
 8008898:	6459      	str	r1, [r3, #68]	@ 0x44
 800889a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800889c:	f003 0301 	and.w	r3, r3, #1
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 80088a4:	210f      	movs	r1, #15
 80088a6:	201a      	movs	r0, #26
 80088a8:	f7fb ff78 	bl	800479c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80088ac:	201a      	movs	r0, #26
 80088ae:	f7fb ff85 	bl	80047bc <HAL_NVIC_EnableIRQ>
 80088b2:	e7e8      	b.n	8008886 <HAL_TIM_PWM_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80088b4:	2300      	movs	r3, #0
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	4b07      	ldr	r3, [pc, #28]	@ (80088d8 <HAL_TIM_PWM_MspInit+0x64>)
 80088ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088bc:	f042 0202 	orr.w	r2, r2, #2
 80088c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80088c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c4:	f003 0302 	and.w	r3, r3, #2
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	9b01      	ldr	r3, [sp, #4]
}
 80088cc:	e7db      	b.n	8008886 <HAL_TIM_PWM_MspInit+0x12>
 80088ce:	bf00      	nop
 80088d0:	40010000 	.word	0x40010000
 80088d4:	40000400 	.word	0x40000400
 80088d8:	40023800 	.word	0x40023800

080088dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80088dc:	6803      	ldr	r3, [r0, #0]
 80088de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088e2:	d000      	beq.n	80088e6 <HAL_TIM_Base_MspInit+0xa>
 80088e4:	4770      	bx	lr
{
 80088e6:	b500      	push	{lr}
 80088e8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80088ea:	2200      	movs	r2, #0
 80088ec:	9201      	str	r2, [sp, #4]
 80088ee:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 80088f2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80088f4:	f041 0101 	orr.w	r1, r1, #1
 80088f8:	6419      	str	r1, [r3, #64]	@ 0x40
 80088fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	9301      	str	r3, [sp, #4]
 8008902:	9b01      	ldr	r3, [sp, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8008904:	2105      	movs	r1, #5
 8008906:	201c      	movs	r0, #28
 8008908:	f7fb ff48 	bl	800479c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800890c:	201c      	movs	r0, #28
 800890e:	f7fb ff55 	bl	80047bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8008912:	b003      	add	sp, #12
 8008914:	f85d fb04 	ldr.w	pc, [sp], #4

08008918 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008918:	b500      	push	{lr}
 800891a:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800891c:	2300      	movs	r3, #0
 800891e:	9303      	str	r3, [sp, #12]
 8008920:	9304      	str	r3, [sp, #16]
 8008922:	9305      	str	r3, [sp, #20]
 8008924:	9306      	str	r3, [sp, #24]
 8008926:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 8008928:	6803      	ldr	r3, [r0, #0]
 800892a:	4a1b      	ldr	r2, [pc, #108]	@ (8008998 <HAL_TIM_MspPostInit+0x80>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d005      	beq.n	800893c <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 8008930:	4a1a      	ldr	r2, [pc, #104]	@ (800899c <HAL_TIM_MspPostInit+0x84>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d01a      	beq.n	800896c <HAL_TIM_MspPostInit+0x54>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008936:	b009      	add	sp, #36	@ 0x24
 8008938:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800893c:	2300      	movs	r3, #0
 800893e:	9301      	str	r3, [sp, #4]
 8008940:	4b17      	ldr	r3, [pc, #92]	@ (80089a0 <HAL_TIM_MspPostInit+0x88>)
 8008942:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008944:	f042 0201 	orr.w	r2, r2, #1
 8008948:	631a      	str	r2, [r3, #48]	@ 0x30
 800894a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	9301      	str	r3, [sp, #4]
 8008952:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ETB1_MOTOR1_Pin|ETB1_MOTOR2_Pin;
 8008954:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008958:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800895a:	2302      	movs	r3, #2
 800895c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800895e:	2301      	movs	r3, #1
 8008960:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008962:	a903      	add	r1, sp, #12
 8008964:	480f      	ldr	r0, [pc, #60]	@ (80089a4 <HAL_TIM_MspPostInit+0x8c>)
 8008966:	f7fc f941 	bl	8004bec <HAL_GPIO_Init>
 800896a:	e7e4      	b.n	8008936 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800896c:	2300      	movs	r3, #0
 800896e:	9302      	str	r3, [sp, #8]
 8008970:	4b0b      	ldr	r3, [pc, #44]	@ (80089a0 <HAL_TIM_MspPostInit+0x88>)
 8008972:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008974:	f042 0202 	orr.w	r2, r2, #2
 8008978:	631a      	str	r2, [r3, #48]	@ 0x30
 800897a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800897c:	f003 0302 	and.w	r3, r3, #2
 8008980:	9302      	str	r3, [sp, #8]
 8008982:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM_OUT3_Pin|PWM_OUT4_Pin|PWM_OUT1_Pin|PWM_OUT2_Pin;
 8008984:	2333      	movs	r3, #51	@ 0x33
 8008986:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008988:	2302      	movs	r3, #2
 800898a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800898c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800898e:	a903      	add	r1, sp, #12
 8008990:	4805      	ldr	r0, [pc, #20]	@ (80089a8 <HAL_TIM_MspPostInit+0x90>)
 8008992:	f7fc f92b 	bl	8004bec <HAL_GPIO_Init>
}
 8008996:	e7ce      	b.n	8008936 <HAL_TIM_MspPostInit+0x1e>
 8008998:	40010000 	.word	0x40010000
 800899c:	40000400 	.word	0x40000400
 80089a0:	40023800 	.word	0x40023800
 80089a4:	40020000 	.word	0x40020000
 80089a8:	40020400 	.word	0x40020400

080089ac <MX_TIM1_Init>:
{
 80089ac:	b510      	push	{r4, lr}
 80089ae:	b092      	sub	sp, #72	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80089b0:	2400      	movs	r4, #0
 80089b2:	9410      	str	r4, [sp, #64]	@ 0x40
 80089b4:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 80089b6:	9409      	str	r4, [sp, #36]	@ 0x24
 80089b8:	940a      	str	r4, [sp, #40]	@ 0x28
 80089ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80089bc:	940c      	str	r4, [sp, #48]	@ 0x30
 80089be:	940d      	str	r4, [sp, #52]	@ 0x34
 80089c0:	940e      	str	r4, [sp, #56]	@ 0x38
 80089c2:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80089c4:	2220      	movs	r2, #32
 80089c6:	4621      	mov	r1, r4
 80089c8:	a801      	add	r0, sp, #4
 80089ca:	f002 f95d 	bl	800ac88 <memset>
  htim1.Instance = TIM1;
 80089ce:	4827      	ldr	r0, [pc, #156]	@ (8008a6c <MX_TIM1_Init+0xc0>)
 80089d0:	4b27      	ldr	r3, [pc, #156]	@ (8008a70 <MX_TIM1_Init+0xc4>)
 80089d2:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80089d4:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089d6:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 65535;
 80089d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80089dc:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089de:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80089e0:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80089e2:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80089e4:	f7fd ff08 	bl	80067f8 <HAL_TIM_PWM_Init>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d130      	bne.n	8008a4e <MX_TIM1_Init+0xa2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80089ec:	2300      	movs	r3, #0
 80089ee:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80089f0:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80089f2:	a910      	add	r1, sp, #64	@ 0x40
 80089f4:	481d      	ldr	r0, [pc, #116]	@ (8008a6c <MX_TIM1_Init+0xc0>)
 80089f6:	f7fe f9ad 	bl	8006d54 <HAL_TIMEx_MasterConfigSynchronization>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d12a      	bne.n	8008a54 <MX_TIM1_Init+0xa8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80089fe:	2360      	movs	r3, #96	@ 0x60
 8008a00:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8008a02:	2200      	movs	r2, #0
 8008a04:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008a06:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008a08:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008a0a:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008a0c:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008a0e:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008a10:	a909      	add	r1, sp, #36	@ 0x24
 8008a12:	4816      	ldr	r0, [pc, #88]	@ (8008a6c <MX_TIM1_Init+0xc0>)
 8008a14:	f7fd ff79 	bl	800690a <HAL_TIM_PWM_ConfigChannel>
 8008a18:	b9f8      	cbnz	r0, 8008a5a <MX_TIM1_Init+0xae>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008a1a:	2204      	movs	r2, #4
 8008a1c:	a909      	add	r1, sp, #36	@ 0x24
 8008a1e:	4813      	ldr	r0, [pc, #76]	@ (8008a6c <MX_TIM1_Init+0xc0>)
 8008a20:	f7fd ff73 	bl	800690a <HAL_TIM_PWM_ConfigChannel>
 8008a24:	b9e0      	cbnz	r0, 8008a60 <MX_TIM1_Init+0xb4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008a26:	2300      	movs	r3, #0
 8008a28:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008a2a:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008a2c:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008a2e:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008a30:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008a32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008a36:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008a38:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008a3a:	a901      	add	r1, sp, #4
 8008a3c:	480b      	ldr	r0, [pc, #44]	@ (8008a6c <MX_TIM1_Init+0xc0>)
 8008a3e:	f7fe f9c7 	bl	8006dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8008a42:	b980      	cbnz	r0, 8008a66 <MX_TIM1_Init+0xba>
  HAL_TIM_MspPostInit(&htim1);
 8008a44:	4809      	ldr	r0, [pc, #36]	@ (8008a6c <MX_TIM1_Init+0xc0>)
 8008a46:	f7ff ff67 	bl	8008918 <HAL_TIM_MspPostInit>
}
 8008a4a:	b012      	add	sp, #72	@ 0x48
 8008a4c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8008a4e:	f7fa f9b1 	bl	8002db4 <Error_Handler>
 8008a52:	e7cb      	b.n	80089ec <MX_TIM1_Init+0x40>
    Error_Handler();
 8008a54:	f7fa f9ae 	bl	8002db4 <Error_Handler>
 8008a58:	e7d1      	b.n	80089fe <MX_TIM1_Init+0x52>
    Error_Handler();
 8008a5a:	f7fa f9ab 	bl	8002db4 <Error_Handler>
 8008a5e:	e7dc      	b.n	8008a1a <MX_TIM1_Init+0x6e>
    Error_Handler();
 8008a60:	f7fa f9a8 	bl	8002db4 <Error_Handler>
 8008a64:	e7df      	b.n	8008a26 <MX_TIM1_Init+0x7a>
    Error_Handler();
 8008a66:	f7fa f9a5 	bl	8002db4 <Error_Handler>
 8008a6a:	e7eb      	b.n	8008a44 <MX_TIM1_Init+0x98>
 8008a6c:	20006d60 	.word	0x20006d60
 8008a70:	40010000 	.word	0x40010000

08008a74 <MX_TIM3_Init>:
{
 8008a74:	b500      	push	{lr}
 8008a76:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a78:	2300      	movs	r3, #0
 8008a7a:	9308      	str	r3, [sp, #32]
 8008a7c:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	9302      	str	r3, [sp, #8]
 8008a82:	9303      	str	r3, [sp, #12]
 8008a84:	9304      	str	r3, [sp, #16]
 8008a86:	9305      	str	r3, [sp, #20]
 8008a88:	9306      	str	r3, [sp, #24]
 8008a8a:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8008a8c:	4825      	ldr	r0, [pc, #148]	@ (8008b24 <MX_TIM3_Init+0xb0>)
 8008a8e:	4a26      	ldr	r2, [pc, #152]	@ (8008b28 <MX_TIM3_Init+0xb4>)
 8008a90:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8008a92:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a94:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8008a96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a9a:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a9c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a9e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008aa0:	f7fd feaa 	bl	80067f8 <HAL_TIM_PWM_Init>
 8008aa4:	bb58      	cbnz	r0, 8008afe <MX_TIM3_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008aaa:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008aac:	a908      	add	r1, sp, #32
 8008aae:	481d      	ldr	r0, [pc, #116]	@ (8008b24 <MX_TIM3_Init+0xb0>)
 8008ab0:	f7fe f950 	bl	8006d54 <HAL_TIMEx_MasterConfigSynchronization>
 8008ab4:	bb30      	cbnz	r0, 8008b04 <MX_TIM3_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008ab6:	2360      	movs	r3, #96	@ 0x60
 8008ab8:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8008aba:	2200      	movs	r2, #0
 8008abc:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008abe:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008ac0:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008ac2:	a901      	add	r1, sp, #4
 8008ac4:	4817      	ldr	r0, [pc, #92]	@ (8008b24 <MX_TIM3_Init+0xb0>)
 8008ac6:	f7fd ff20 	bl	800690a <HAL_TIM_PWM_ConfigChannel>
 8008aca:	b9f0      	cbnz	r0, 8008b0a <MX_TIM3_Init+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008acc:	2204      	movs	r2, #4
 8008ace:	eb0d 0102 	add.w	r1, sp, r2
 8008ad2:	4814      	ldr	r0, [pc, #80]	@ (8008b24 <MX_TIM3_Init+0xb0>)
 8008ad4:	f7fd ff19 	bl	800690a <HAL_TIM_PWM_ConfigChannel>
 8008ad8:	b9d0      	cbnz	r0, 8008b10 <MX_TIM3_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008ada:	2208      	movs	r2, #8
 8008adc:	a901      	add	r1, sp, #4
 8008ade:	4811      	ldr	r0, [pc, #68]	@ (8008b24 <MX_TIM3_Init+0xb0>)
 8008ae0:	f7fd ff13 	bl	800690a <HAL_TIM_PWM_ConfigChannel>
 8008ae4:	b9b8      	cbnz	r0, 8008b16 <MX_TIM3_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008ae6:	220c      	movs	r2, #12
 8008ae8:	a901      	add	r1, sp, #4
 8008aea:	480e      	ldr	r0, [pc, #56]	@ (8008b24 <MX_TIM3_Init+0xb0>)
 8008aec:	f7fd ff0d 	bl	800690a <HAL_TIM_PWM_ConfigChannel>
 8008af0:	b9a0      	cbnz	r0, 8008b1c <MX_TIM3_Init+0xa8>
  HAL_TIM_MspPostInit(&htim3);
 8008af2:	480c      	ldr	r0, [pc, #48]	@ (8008b24 <MX_TIM3_Init+0xb0>)
 8008af4:	f7ff ff10 	bl	8008918 <HAL_TIM_MspPostInit>
}
 8008af8:	b00b      	add	sp, #44	@ 0x2c
 8008afa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8008afe:	f7fa f959 	bl	8002db4 <Error_Handler>
 8008b02:	e7d0      	b.n	8008aa6 <MX_TIM3_Init+0x32>
    Error_Handler();
 8008b04:	f7fa f956 	bl	8002db4 <Error_Handler>
 8008b08:	e7d5      	b.n	8008ab6 <MX_TIM3_Init+0x42>
    Error_Handler();
 8008b0a:	f7fa f953 	bl	8002db4 <Error_Handler>
 8008b0e:	e7dd      	b.n	8008acc <MX_TIM3_Init+0x58>
    Error_Handler();
 8008b10:	f7fa f950 	bl	8002db4 <Error_Handler>
 8008b14:	e7e1      	b.n	8008ada <MX_TIM3_Init+0x66>
    Error_Handler();
 8008b16:	f7fa f94d 	bl	8002db4 <Error_Handler>
 8008b1a:	e7e4      	b.n	8008ae6 <MX_TIM3_Init+0x72>
    Error_Handler();
 8008b1c:	f7fa f94a 	bl	8002db4 <Error_Handler>
 8008b20:	e7e7      	b.n	8008af2 <MX_TIM3_Init+0x7e>
 8008b22:	bf00      	nop
 8008b24:	20006cd0 	.word	0x20006cd0
 8008b28:	40000400 	.word	0x40000400

08008b2c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b2c:	4b06      	ldr	r3, [pc, #24]	@ (8008b48 <prvGetNextExpireTime+0x1c>)
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	6813      	ldr	r3, [r2, #0]
 8008b32:	b92b      	cbnz	r3, 8008b40 <prvGetNextExpireTime+0x14>
 8008b34:	2301      	movs	r3, #1
 8008b36:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b38:	b923      	cbnz	r3, 8008b44 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b3a:	68d3      	ldr	r3, [r2, #12]
 8008b3c:	6818      	ldr	r0, [r3, #0]
 8008b3e:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b40:	2300      	movs	r3, #0
 8008b42:	e7f8      	b.n	8008b36 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b44:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8008b46:	4770      	bx	lr
 8008b48:	20006ea8 	.word	0x20006ea8

08008b4c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008b4c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b4e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b50:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008b52:	4291      	cmp	r1, r2
 8008b54:	d80c      	bhi.n	8008b70 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b56:	1ad2      	subs	r2, r2, r3
 8008b58:	6983      	ldr	r3, [r0, #24]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d301      	bcc.n	8008b62 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b5e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8008b60:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b62:	1d01      	adds	r1, r0, #4
 8008b64:	4b09      	ldr	r3, [pc, #36]	@ (8008b8c <prvInsertTimerInActiveList+0x40>)
 8008b66:	6818      	ldr	r0, [r3, #0]
 8008b68:	f7fa f8df 	bl	8002d2a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	e7f7      	b.n	8008b60 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d201      	bcs.n	8008b78 <prvInsertTimerInActiveList+0x2c>
 8008b74:	4299      	cmp	r1, r3
 8008b76:	d206      	bcs.n	8008b86 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b78:	1d01      	adds	r1, r0, #4
 8008b7a:	4b05      	ldr	r3, [pc, #20]	@ (8008b90 <prvInsertTimerInActiveList+0x44>)
 8008b7c:	6818      	ldr	r0, [r3, #0]
 8008b7e:	f7fa f8d4 	bl	8002d2a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008b82:	2000      	movs	r0, #0
 8008b84:	e7ec      	b.n	8008b60 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8008b86:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008b88:	e7ea      	b.n	8008b60 <prvInsertTimerInActiveList+0x14>
 8008b8a:	bf00      	nop
 8008b8c:	20006ea4 	.word	0x20006ea4
 8008b90:	20006ea8 	.word	0x20006ea8

08008b94 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b94:	b530      	push	{r4, r5, lr}
 8008b96:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b98:	f7fa fa74 	bl	8003084 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b9c:	4b11      	ldr	r3, [pc, #68]	@ (8008be4 <prvCheckForValidListAndQueue+0x50>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	b11b      	cbz	r3, 8008baa <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ba2:	f7fa fa91 	bl	80030c8 <vPortExitCritical>
}
 8008ba6:	b003      	add	sp, #12
 8008ba8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8008baa:	4d0f      	ldr	r5, [pc, #60]	@ (8008be8 <prvCheckForValidListAndQueue+0x54>)
 8008bac:	4628      	mov	r0, r5
 8008bae:	f7fa f8a3 	bl	8002cf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008bb2:	4c0e      	ldr	r4, [pc, #56]	@ (8008bec <prvCheckForValidListAndQueue+0x58>)
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f7fa f89f 	bl	8002cf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008bba:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf0 <prvCheckForValidListAndQueue+0x5c>)
 8008bbc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf4 <prvCheckForValidListAndQueue+0x60>)
 8008bc0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf8 <prvCheckForValidListAndQueue+0x64>)
 8008bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8008bfc <prvCheckForValidListAndQueue+0x68>)
 8008bca:	2110      	movs	r1, #16
 8008bcc:	200a      	movs	r0, #10
 8008bce:	f7fa fca0 	bl	8003512 <xQueueGenericCreateStatic>
 8008bd2:	4b04      	ldr	r3, [pc, #16]	@ (8008be4 <prvCheckForValidListAndQueue+0x50>)
 8008bd4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d0e3      	beq.n	8008ba2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008bda:	4909      	ldr	r1, [pc, #36]	@ (8008c00 <prvCheckForValidListAndQueue+0x6c>)
 8008bdc:	f7fa ff38 	bl	8003a50 <vQueueAddToRegistry>
 8008be0:	e7df      	b.n	8008ba2 <prvCheckForValidListAndQueue+0xe>
 8008be2:	bf00      	nop
 8008be4:	20006ea0 	.word	0x20006ea0
 8008be8:	20006ec0 	.word	0x20006ec0
 8008bec:	20006eac 	.word	0x20006eac
 8008bf0:	20006ea8 	.word	0x20006ea8
 8008bf4:	20006ea4 	.word	0x20006ea4
 8008bf8:	20006da8 	.word	0x20006da8
 8008bfc:	20006df8 	.word	0x20006df8
 8008c00:	0800bf60 	.word	0x0800bf60

08008c04 <prvInitialiseNewTimer>:
{
 8008c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c08:	9f07      	ldr	r7, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008c0a:	b941      	cbnz	r1, 8008c1e <prvInitialiseNewTimer+0x1a>
 8008c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	e7fe      	b.n	8008c1c <prvInitialiseNewTimer+0x18>
 8008c1e:	4606      	mov	r6, r0
 8008c20:	4614      	mov	r4, r2
 8008c22:	461d      	mov	r5, r3
 8008c24:	4688      	mov	r8, r1
	if( pxNewTimer != NULL )
 8008c26:	b18f      	cbz	r7, 8008c4c <prvInitialiseNewTimer+0x48>
		prvCheckForValidListAndQueue();
 8008c28:	f7ff ffb4 	bl	8008b94 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8008c2c:	603e      	str	r6, [r7, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008c2e:	f8c7 8018 	str.w	r8, [r7, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008c32:	61fd      	str	r5, [r7, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008c34:	9b06      	ldr	r3, [sp, #24]
 8008c36:	623b      	str	r3, [r7, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008c38:	1d38      	adds	r0, r7, #4
 8008c3a:	f7fa f868 	bl	8002d0e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008c3e:	b12c      	cbz	r4, 8008c4c <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008c40:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008c44:	f043 0304 	orr.w	r3, r3, #4
 8008c48:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
}
 8008c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c50 <xTimerCreateTimerTask>:
{
 8008c50:	b510      	push	{r4, lr}
 8008c52:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8008c54:	f7ff ff9e 	bl	8008b94 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008c58:	4b12      	ldr	r3, [pc, #72]	@ (8008ca4 <xTimerCreateTimerTask+0x54>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	b1cb      	cbz	r3, 8008c92 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c5e:	2400      	movs	r4, #0
 8008c60:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c62:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c64:	aa07      	add	r2, sp, #28
 8008c66:	a906      	add	r1, sp, #24
 8008c68:	a805      	add	r0, sp, #20
 8008c6a:	f7f8 fafb 	bl	8001264 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c6e:	9b05      	ldr	r3, [sp, #20]
 8008c70:	9302      	str	r3, [sp, #8]
 8008c72:	9b06      	ldr	r3, [sp, #24]
 8008c74:	9301      	str	r3, [sp, #4]
 8008c76:	2302      	movs	r3, #2
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	4623      	mov	r3, r4
 8008c7c:	9a07      	ldr	r2, [sp, #28]
 8008c7e:	490a      	ldr	r1, [pc, #40]	@ (8008ca8 <xTimerCreateTimerTask+0x58>)
 8008c80:	480a      	ldr	r0, [pc, #40]	@ (8008cac <xTimerCreateTimerTask+0x5c>)
 8008c82:	f7ff f981 	bl	8007f88 <xTaskCreateStatic>
 8008c86:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb0 <xTimerCreateTimerTask+0x60>)
 8008c88:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008c8a:	b110      	cbz	r0, 8008c92 <xTimerCreateTimerTask+0x42>
}
 8008c8c:	2001      	movs	r0, #1
 8008c8e:	b008      	add	sp, #32
 8008c90:	bd10      	pop	{r4, pc}
 8008c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8008ca2:	e7fe      	b.n	8008ca2 <xTimerCreateTimerTask+0x52>
 8008ca4:	20006ea0 	.word	0x20006ea0
 8008ca8:	0800bf68 	.word	0x0800bf68
 8008cac:	08009041 	.word	0x08009041
 8008cb0:	20006e9c 	.word	0x20006e9c

08008cb4 <xTimerCreate>:
	{
 8008cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb8:	b082      	sub	sp, #8
 8008cba:	4604      	mov	r4, r0
 8008cbc:	4688      	mov	r8, r1
 8008cbe:	4617      	mov	r7, r2
 8008cc0:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008cc2:	202c      	movs	r0, #44	@ 0x2c
 8008cc4:	f7f9 fc58 	bl	8002578 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8008cc8:	4606      	mov	r6, r0
 8008cca:	b158      	cbz	r0, 8008ce4 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008cd2:	9001      	str	r0, [sp, #4]
 8008cd4:	9b08      	ldr	r3, [sp, #32]
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	462b      	mov	r3, r5
 8008cda:	463a      	mov	r2, r7
 8008cdc:	4641      	mov	r1, r8
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f7ff ff90 	bl	8008c04 <prvInitialiseNewTimer>
	}
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	b002      	add	sp, #8
 8008ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008cec <xTimerCreateStatic>:
	{
 8008cec:	b510      	push	{r4, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	4684      	mov	ip, r0
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008cf2:	202c      	movs	r0, #44	@ 0x2c
 8008cf4:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008cf6:	9803      	ldr	r0, [sp, #12]
 8008cf8:	282c      	cmp	r0, #44	@ 0x2c
 8008cfa:	d008      	beq.n	8008d0e <xTimerCreateStatic+0x22>
 8008cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	e7fe      	b.n	8008d0c <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008d0e:	9803      	ldr	r0, [sp, #12]
		configASSERT( pxTimerBuffer );
 8008d10:	9807      	ldr	r0, [sp, #28]
 8008d12:	b160      	cbz	r0, 8008d2e <xTimerCreateStatic+0x42>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008d14:	2002      	movs	r0, #2
 8008d16:	9c07      	ldr	r4, [sp, #28]
 8008d18:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008d1c:	9401      	str	r4, [sp, #4]
 8008d1e:	9806      	ldr	r0, [sp, #24]
 8008d20:	9000      	str	r0, [sp, #0]
 8008d22:	4660      	mov	r0, ip
 8008d24:	f7ff ff6e 	bl	8008c04 <prvInitialiseNewTimer>
	}
 8008d28:	9807      	ldr	r0, [sp, #28]
 8008d2a:	b004      	add	sp, #16
 8008d2c:	bd10      	pop	{r4, pc}
 8008d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
 8008d3e:	e7fe      	b.n	8008d3e <xTimerCreateStatic+0x52>

08008d40 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8008d40:	b1b8      	cbz	r0, 8008d72 <xTimerGenericCommand+0x32>
 8008d42:	469c      	mov	ip, r3
 8008d44:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8008d46:	4818      	ldr	r0, [pc, #96]	@ (8008da8 <xTimerGenericCommand+0x68>)
 8008d48:	6800      	ldr	r0, [r0, #0]
 8008d4a:	b358      	cbz	r0, 8008da4 <xTimerGenericCommand+0x64>
{
 8008d4c:	b500      	push	{lr}
 8008d4e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8008d50:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d52:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008d54:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d56:	2905      	cmp	r1, #5
 8008d58:	dc1c      	bgt.n	8008d94 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d5a:	f7ff fc27 	bl	80085ac <xTaskGetSchedulerState>
 8008d5e:	2802      	cmp	r0, #2
 8008d60:	d010      	beq.n	8008d84 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d62:	2300      	movs	r3, #0
 8008d64:	461a      	mov	r2, r3
 8008d66:	4669      	mov	r1, sp
 8008d68:	480f      	ldr	r0, [pc, #60]	@ (8008da8 <xTimerGenericCommand+0x68>)
 8008d6a:	6800      	ldr	r0, [r0, #0]
 8008d6c:	f7fa fc3f 	bl	80035ee <xQueueGenericSend>
 8008d70:	e015      	b.n	8008d9e <xTimerGenericCommand+0x5e>
 8008d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8008d82:	e7fe      	b.n	8008d82 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d84:	2300      	movs	r3, #0
 8008d86:	9a06      	ldr	r2, [sp, #24]
 8008d88:	4669      	mov	r1, sp
 8008d8a:	4807      	ldr	r0, [pc, #28]	@ (8008da8 <xTimerGenericCommand+0x68>)
 8008d8c:	6800      	ldr	r0, [r0, #0]
 8008d8e:	f7fa fc2e 	bl	80035ee <xQueueGenericSend>
 8008d92:	e004      	b.n	8008d9e <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d94:	2300      	movs	r3, #0
 8008d96:	4662      	mov	r2, ip
 8008d98:	4669      	mov	r1, sp
 8008d9a:	f7fa fcec 	bl	8003776 <xQueueGenericSendFromISR>
}
 8008d9e:	b005      	add	sp, #20
 8008da0:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8008da4:	2000      	movs	r0, #0
}
 8008da6:	4770      	bx	lr
 8008da8:	20006ea0 	.word	0x20006ea0

08008dac <prvSwitchTimerLists>:
{
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008db0:	4b1b      	ldr	r3, [pc, #108]	@ (8008e20 <prvSwitchTimerLists+0x74>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	b362      	cbz	r2, 8008e12 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dbc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dbe:	1d25      	adds	r5, r4, #4
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	f7f9 ffcb 	bl	8002d5c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dc6:	6a23      	ldr	r3, [r4, #32]
 8008dc8:	4620      	mov	r0, r4
 8008dca:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008dcc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008dd0:	f013 0f04 	tst.w	r3, #4
 8008dd4:	d0ec      	beq.n	8008db0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008dd6:	69a3      	ldr	r3, [r4, #24]
 8008dd8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8008dda:	429e      	cmp	r6, r3
 8008ddc:	d207      	bcs.n	8008dee <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008dde:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008de0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008de2:	4629      	mov	r1, r5
 8008de4:	4b0e      	ldr	r3, [pc, #56]	@ (8008e20 <prvSwitchTimerLists+0x74>)
 8008de6:	6818      	ldr	r0, [r3, #0]
 8008de8:	f7f9 ff9f 	bl	8002d2a <vListInsert>
 8008dec:	e7e0      	b.n	8008db0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dee:	2100      	movs	r1, #0
 8008df0:	9100      	str	r1, [sp, #0]
 8008df2:	460b      	mov	r3, r1
 8008df4:	4632      	mov	r2, r6
 8008df6:	4620      	mov	r0, r4
 8008df8:	f7ff ffa2 	bl	8008d40 <xTimerGenericCommand>
				configASSERT( xResult );
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d1d7      	bne.n	8008db0 <prvSwitchTimerLists+0x4>
 8008e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	e7fe      	b.n	8008e10 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8008e12:	4a04      	ldr	r2, [pc, #16]	@ (8008e24 <prvSwitchTimerLists+0x78>)
 8008e14:	6810      	ldr	r0, [r2, #0]
 8008e16:	4902      	ldr	r1, [pc, #8]	@ (8008e20 <prvSwitchTimerLists+0x74>)
 8008e18:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8008e1a:	6013      	str	r3, [r2, #0]
}
 8008e1c:	b002      	add	sp, #8
 8008e1e:	bd70      	pop	{r4, r5, r6, pc}
 8008e20:	20006ea8 	.word	0x20006ea8
 8008e24:	20006ea4 	.word	0x20006ea4

08008e28 <prvSampleTimeNow>:
{
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8008e2c:	f7ff f96e 	bl	800810c <xTaskGetTickCount>
 8008e30:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8008e32:	4b07      	ldr	r3, [pc, #28]	@ (8008e50 <prvSampleTimeNow+0x28>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4283      	cmp	r3, r0
 8008e38:	d805      	bhi.n	8008e46 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8008e3e:	4b04      	ldr	r3, [pc, #16]	@ (8008e50 <prvSampleTimeNow+0x28>)
 8008e40:	601c      	str	r4, [r3, #0]
}
 8008e42:	4620      	mov	r0, r4
 8008e44:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8008e46:	f7ff ffb1 	bl	8008dac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	602b      	str	r3, [r5, #0]
 8008e4e:	e7f6      	b.n	8008e3e <prvSampleTimeNow+0x16>
 8008e50:	20006e98 	.word	0x20006e98

08008e54 <prvProcessExpiredTimer>:
{
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	4606      	mov	r6, r0
 8008e5a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e5c:	4917      	ldr	r1, [pc, #92]	@ (8008ebc <prvProcessExpiredTimer+0x68>)
 8008e5e:	6809      	ldr	r1, [r1, #0]
 8008e60:	68c9      	ldr	r1, [r1, #12]
 8008e62:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e64:	1d20      	adds	r0, r4, #4
 8008e66:	f7f9 ff79 	bl	8002d5c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e6a:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8008e6e:	f01c 0f04 	tst.w	ip, #4
 8008e72:	d108      	bne.n	8008e86 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e74:	f02c 0c01 	bic.w	ip, ip, #1
 8008e78:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e7c:	6a23      	ldr	r3, [r4, #32]
 8008e7e:	4620      	mov	r0, r4
 8008e80:	4798      	blx	r3
}
 8008e82:	b002      	add	sp, #8
 8008e84:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008e86:	69a1      	ldr	r1, [r4, #24]
 8008e88:	4633      	mov	r3, r6
 8008e8a:	462a      	mov	r2, r5
 8008e8c:	4431      	add	r1, r6
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f7ff fe5c 	bl	8008b4c <prvInsertTimerInActiveList>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d0f1      	beq.n	8008e7c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e98:	2100      	movs	r1, #0
 8008e9a:	9100      	str	r1, [sp, #0]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4632      	mov	r2, r6
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f7ff ff4d 	bl	8008d40 <xTimerGenericCommand>
			configASSERT( xResult );
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d1e8      	bne.n	8008e7c <prvProcessExpiredTimer+0x28>
 8008eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	e7fe      	b.n	8008eba <prvProcessExpiredTimer+0x66>
 8008ebc:	20006ea8 	.word	0x20006ea8

08008ec0 <prvProcessTimerOrBlockTask>:
{
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8008ec8:	f7ff f918 	bl	80080fc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ecc:	a801      	add	r0, sp, #4
 8008ece:	f7ff ffab 	bl	8008e28 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8008ed2:	9b01      	ldr	r3, [sp, #4]
 8008ed4:	bb33      	cbnz	r3, 8008f24 <prvProcessTimerOrBlockTask+0x64>
 8008ed6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ed8:	b9e4      	cbnz	r4, 8008f14 <prvProcessTimerOrBlockTask+0x54>
 8008eda:	42b0      	cmp	r0, r6
 8008edc:	d213      	bcs.n	8008f06 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ede:	4622      	mov	r2, r4
 8008ee0:	1b71      	subs	r1, r6, r5
 8008ee2:	4b12      	ldr	r3, [pc, #72]	@ (8008f2c <prvProcessTimerOrBlockTask+0x6c>)
 8008ee4:	6818      	ldr	r0, [r3, #0]
 8008ee6:	f7fa fdc7 	bl	8003a78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008eea:	f7ff f9a1 	bl	8008230 <xTaskResumeAll>
 8008eee:	b9d8      	cbnz	r0, 8008f28 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8008ef0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008ef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ef8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	e010      	b.n	8008f28 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8008f06:	f7ff f993 	bl	8008230 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f7ff ffa1 	bl	8008e54 <prvProcessExpiredTimer>
 8008f12:	e009      	b.n	8008f28 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f14:	4a06      	ldr	r2, [pc, #24]	@ (8008f30 <prvProcessTimerOrBlockTask+0x70>)
 8008f16:	6812      	ldr	r2, [r2, #0]
 8008f18:	6812      	ldr	r2, [r2, #0]
 8008f1a:	b90a      	cbnz	r2, 8008f20 <prvProcessTimerOrBlockTask+0x60>
 8008f1c:	2401      	movs	r4, #1
 8008f1e:	e7de      	b.n	8008ede <prvProcessTimerOrBlockTask+0x1e>
 8008f20:	461c      	mov	r4, r3
 8008f22:	e7dc      	b.n	8008ede <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8008f24:	f7ff f984 	bl	8008230 <xTaskResumeAll>
}
 8008f28:	b002      	add	sp, #8
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
 8008f2c:	20006ea0 	.word	0x20006ea0
 8008f30:	20006ea4 	.word	0x20006ea4

08008f34 <prvProcessReceivedCommands>:
{
 8008f34:	b510      	push	{r4, lr}
 8008f36:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f38:	e002      	b.n	8008f40 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f3a:	9b04      	ldr	r3, [sp, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	da0f      	bge.n	8008f60 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f40:	2200      	movs	r2, #0
 8008f42:	a904      	add	r1, sp, #16
 8008f44:	4b3d      	ldr	r3, [pc, #244]	@ (800903c <prvProcessReceivedCommands+0x108>)
 8008f46:	6818      	ldr	r0, [r3, #0]
 8008f48:	f7fa fc7c 	bl	8003844 <xQueueReceive>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d072      	beq.n	8009036 <prvProcessReceivedCommands+0x102>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f50:	9b04      	ldr	r3, [sp, #16]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	daf1      	bge.n	8008f3a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f56:	9907      	ldr	r1, [sp, #28]
 8008f58:	9806      	ldr	r0, [sp, #24]
 8008f5a:	9b05      	ldr	r3, [sp, #20]
 8008f5c:	4798      	blx	r3
 8008f5e:	e7ec      	b.n	8008f3a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f60:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f62:	6963      	ldr	r3, [r4, #20]
 8008f64:	b113      	cbz	r3, 8008f6c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f66:	1d20      	adds	r0, r4, #4
 8008f68:	f7f9 fef8 	bl	8002d5c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f6c:	a803      	add	r0, sp, #12
 8008f6e:	f7ff ff5b 	bl	8008e28 <prvSampleTimeNow>
 8008f72:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8008f74:	9b04      	ldr	r3, [sp, #16]
 8008f76:	2b09      	cmp	r3, #9
 8008f78:	d8e2      	bhi.n	8008f40 <prvProcessReceivedCommands+0xc>
 8008f7a:	e8df f003 	tbb	[pc, r3]
 8008f7e:	0505      	.short	0x0505
 8008f80:	4e362f05 	.word	0x4e362f05
 8008f84:	362f0505 	.word	0x362f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f88:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008f8c:	f043 0301 	orr.w	r3, r3, #1
 8008f90:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f94:	9b05      	ldr	r3, [sp, #20]
 8008f96:	69a1      	ldr	r1, [r4, #24]
 8008f98:	4419      	add	r1, r3
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f7ff fdd6 	bl	8008b4c <prvInsertTimerInActiveList>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d0cd      	beq.n	8008f40 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fa4:	6a23      	ldr	r3, [r4, #32]
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008faa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008fae:	f013 0f04 	tst.w	r3, #4
 8008fb2:	d0c5      	beq.n	8008f40 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008fb4:	69a2      	ldr	r2, [r4, #24]
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	9100      	str	r1, [sp, #0]
 8008fba:	460b      	mov	r3, r1
 8008fbc:	9805      	ldr	r0, [sp, #20]
 8008fbe:	4402      	add	r2, r0
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f7ff febd 	bl	8008d40 <xTimerGenericCommand>
							configASSERT( xResult );
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d1ba      	bne.n	8008f40 <prvProcessReceivedCommands+0xc>
 8008fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	e7fe      	b.n	8008fda <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fdc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008fe0:	f023 0301 	bic.w	r3, r3, #1
 8008fe4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8008fe8:	e7aa      	b.n	8008f40 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fea:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ff6:	9905      	ldr	r1, [sp, #20]
 8008ff8:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ffa:	b129      	cbz	r1, 8009008 <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	4401      	add	r1, r0
 8009000:	4620      	mov	r0, r4
 8009002:	f7ff fda3 	bl	8008b4c <prvInsertTimerInActiveList>
					break;
 8009006:	e79b      	b.n	8008f40 <prvProcessReceivedCommands+0xc>
 8009008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009018:	e7fe      	b.n	8009018 <prvProcessReceivedCommands+0xe4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800901a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800901e:	f013 0f02 	tst.w	r3, #2
 8009022:	d004      	beq.n	800902e <prvProcessReceivedCommands+0xfa>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009024:	f023 0301 	bic.w	r3, r3, #1
 8009028:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800902c:	e788      	b.n	8008f40 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800902e:	4620      	mov	r0, r4
 8009030:	f7f9 fb24 	bl	800267c <vPortFree>
 8009034:	e784      	b.n	8008f40 <prvProcessReceivedCommands+0xc>
}
 8009036:	b008      	add	sp, #32
 8009038:	bd10      	pop	{r4, pc}
 800903a:	bf00      	nop
 800903c:	20006ea0 	.word	0x20006ea0

08009040 <prvTimerTask>:
{
 8009040:	b500      	push	{lr}
 8009042:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009044:	a801      	add	r0, sp, #4
 8009046:	f7ff fd71 	bl	8008b2c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800904a:	9901      	ldr	r1, [sp, #4]
 800904c:	f7ff ff38 	bl	8008ec0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8009050:	f7ff ff70 	bl	8008f34 <prvProcessReceivedCommands>
	for( ;; )
 8009054:	e7f6      	b.n	8009044 <prvTimerTask+0x4>

08009056 <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8009056:	b140      	cbz	r0, 800906a <pvTimerGetTimerID+0x14>
{
 8009058:	b510      	push	{r4, lr}
 800905a:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
 800905c:	f7fa f812 	bl	8003084 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009060:	69e4      	ldr	r4, [r4, #28]
	}
	taskEXIT_CRITICAL();
 8009062:	f7fa f831 	bl	80030c8 <vPortExitCritical>

	return pvReturn;
}
 8009066:	4620      	mov	r0, r4
 8009068:	bd10      	pop	{r4, pc}
 800906a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800907a:	e7fe      	b.n	800907a <pvTimerGetTimerID+0x24>

0800907c <controller_timing_start>:

void update_next_event(void);

void controller_timing_start(TIM_HandleTypeDef *htim)
{
    if (htim == NULL)
 800907c:	b320      	cbz	r0, 80090c8 <controller_timing_start+0x4c>
{
 800907e:	b510      	push	{r4, lr}
        /**
         * @todo throw an error
         */
        return;
    }
    timer = htim;
 8009080:	4c12      	ldr	r4, [pc, #72]	@ (80090cc <controller_timing_start+0x50>)
 8009082:	6020      	str	r0, [r4, #0]
    
    /**
     * This assumes that sys clock is the same as timer clock
     */
    timer->Instance->PSC = (HAL_RCC_GetSysClockFreq() / 1000000UL) - 1;
 8009084:	f7fc fff2 	bl	800606c <HAL_RCC_GetSysClockFreq>
 8009088:	4b11      	ldr	r3, [pc, #68]	@ (80090d0 <controller_timing_start+0x54>)
 800908a:	fba3 2300 	umull	r2, r3, r3, r0
 800908e:	0c9b      	lsrs	r3, r3, #18
 8009090:	6820      	ldr	r0, [r4, #0]
 8009092:	6802      	ldr	r2, [r0, #0]
 8009094:	3b01      	subs	r3, #1
 8009096:	6293      	str	r3, [r2, #40]	@ 0x28
    //timer->Instance->ARR = 100000;
    timer->Instance->EGR |= TIM_EGR_UG;  // Force an update event → immediately reloads PSC
 8009098:	6802      	ldr	r2, [r0, #0]
 800909a:	6953      	ldr	r3, [r2, #20]
 800909c:	f043 0301 	orr.w	r3, r3, #1
 80090a0:	6153      	str	r3, [r2, #20]

    HAL_TIM_Base_Start_IT(timer);
 80090a2:	f7fd fa0d 	bl	80064c0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_OC_Start_IT(timer, TIM_CHANNEL_1);    
 80090a6:	2100      	movs	r1, #0
 80090a8:	6820      	ldr	r0, [r4, #0]
 80090aa:	f7fd fd37 	bl	8006b1c <HAL_TIM_OC_Start_IT>

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 80090ae:	2300      	movs	r3, #0
 80090b0:	e007      	b.n	80090c2 <controller_timing_start+0x46>
    {
        event_queue[i].state = EVENT_STATE_INACTIVE;
 80090b2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80090b6:	4a07      	ldr	r2, [pc, #28]	@ (80090d4 <controller_timing_start+0x58>)
 80090b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80090bc:	2100      	movs	r1, #0
 80090be:	7411      	strb	r1, [r2, #16]
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 80090c0:	3301      	adds	r3, #1
 80090c2:	2b63      	cmp	r3, #99	@ 0x63
 80090c4:	d9f5      	bls.n	80090b2 <controller_timing_start+0x36>
    }
    
}
 80090c6:	bd10      	pop	{r4, pc}
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	200076a4 	.word	0x200076a4
 80090d0:	431bde83 	.word	0x431bde83
 80090d4:	20006ed4 	.word	0x20006ed4

080090d8 <get_time_us>:

time_us_t get_time_us(void)
{
    return timer->Instance->CNT;
 80090d8:	4b02      	ldr	r3, [pc, #8]	@ (80090e4 <get_time_us+0xc>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	200076a4 	.word	0x200076a4

080090e8 <get_time_ms>:

time_ms_t get_time_ms(void)
{
    return timer->Instance->CNT / 1000U;
 80090e8:	4b04      	ldr	r3, [pc, #16]	@ (80090fc <get_time_ms+0x14>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80090f0:	4b03      	ldr	r3, [pc, #12]	@ (8009100 <get_time_ms+0x18>)
 80090f2:	fba3 3000 	umull	r3, r0, r3, r0
}
 80090f6:	0980      	lsrs	r0, r0, #6
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	200076a4 	.word	0x200076a4
 8009100:	10624dd3 	.word	0x10624dd3

08009104 <update_next_event>:

void update_next_event(void)
{
 8009104:	b410      	push	{r4}
    time_us_t nearest_time = 0xFFFFFFFF;
    bool found = false;

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8009106:	2300      	movs	r3, #0
    bool found = false;
 8009108:	4618      	mov	r0, r3
    time_us_t nearest_time = 0xFFFFFFFF;
 800910a:	f04f 34ff 	mov.w	r4, #4294967295
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 800910e:	e006      	b.n	800911e <update_next_event+0x1a>
        
        /* This will handle wraparound safely aparantly, but i don't know how it works yet :( */
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
        {
            found = true;
            nearest_time = event_queue[i].timestamp_us;
 8009110:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009114:	008a      	lsls	r2, r1, #2
 8009116:	4910      	ldr	r1, [pc, #64]	@ (8009158 <update_next_event+0x54>)
 8009118:	588c      	ldr	r4, [r1, r2]
            found = true;
 800911a:	2001      	movs	r0, #1
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 800911c:	3301      	adds	r3, #1
 800911e:	2b63      	cmp	r3, #99	@ 0x63
 8009120:	d812      	bhi.n	8009148 <update_next_event+0x44>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 8009122:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009126:	0091      	lsls	r1, r2, #2
 8009128:	4a0b      	ldr	r2, [pc, #44]	@ (8009158 <update_next_event+0x54>)
 800912a:	440a      	add	r2, r1
 800912c:	7c12      	ldrb	r2, [r2, #16]
 800912e:	2a01      	cmp	r2, #1
 8009130:	d1f4      	bne.n	800911c <update_next_event+0x18>
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
 8009132:	2800      	cmp	r0, #0
 8009134:	d0ec      	beq.n	8009110 <update_next_event+0xc>
 8009136:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800913a:	008a      	lsls	r2, r1, #2
 800913c:	4906      	ldr	r1, [pc, #24]	@ (8009158 <update_next_event+0x54>)
 800913e:	588a      	ldr	r2, [r1, r2]
 8009140:	1b12      	subs	r2, r2, r4
 8009142:	2a00      	cmp	r2, #0
 8009144:	daea      	bge.n	800911c <update_next_event+0x18>
 8009146:	e7e3      	b.n	8009110 <update_next_event+0xc>
        }        
    }

    if (found) {
 8009148:	b118      	cbz	r0, 8009152 <update_next_event+0x4e>
        // Schedule next interrupt
        timer->Instance->CCR1 = nearest_time;
 800914a:	4b04      	ldr	r3, [pc, #16]	@ (800915c <update_next_event+0x58>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	635c      	str	r4, [r3, #52]	@ 0x34
    } else {
        // No pending events — disable future interrupts or set a dummy compare
        /* Should i set a compare in the near future ?*/
        //timer->Instance->CCR1 = 0xFFFFFFFF;
    }
}
 8009152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	20006ed4 	.word	0x20006ed4
 800915c:	200076a4 	.word	0x200076a4

08009160 <scheduler_timer_callback>:

void scheduler_timer_callback()
{
 8009160:	b538      	push	{r3, r4, r5, lr}
    // Exit early if this wasn't a CCR1 match
    if (!(timer->Instance->SR & TIM_SR_CC1IF))
 8009162:	4b23      	ldr	r3, [pc, #140]	@ (80091f0 <scheduler_timer_callback+0x90>)
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	6813      	ldr	r3, [r2, #0]
 8009168:	6919      	ldr	r1, [r3, #16]
 800916a:	f011 0f02 	tst.w	r1, #2
 800916e:	d03e      	beq.n	80091ee <scheduler_timer_callback+0x8e>
    {
        return;
    }

    timer->Instance->SR &= ~TIM_SR_CC1IF;  // Clear the compare match flag
 8009170:	6919      	ldr	r1, [r3, #16]
 8009172:	f021 0102 	bic.w	r1, r1, #2
 8009176:	6119      	str	r1, [r3, #16]
    time_us_t time_now_us = timer->Instance->CNT; // I have avoided the function call overhead here. might be minimal anyways...
 8009178:	6813      	ldr	r3, [r2, #0]
 800917a:	6a5d      	ldr	r5, [r3, #36]	@ 0x24

    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 800917c:	2400      	movs	r4, #0
 800917e:	e00e      	b.n	800919e <scheduler_timer_callback+0x3e>
        {
            event_queue[i].callback_arg(event_queue[i].arg);
        }
        else
        {
            event_queue[i].callback_noarg();
 8009180:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8009184:	009a      	lsls	r2, r3, #2
 8009186:	4b1b      	ldr	r3, [pc, #108]	@ (80091f4 <scheduler_timer_callback+0x94>)
 8009188:	4413      	add	r3, r2
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	4798      	blx	r3
        }

        event_queue[i].state = EVENT_STATE_INACTIVE;
 800918e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8009192:	009a      	lsls	r2, r3, #2
 8009194:	4b17      	ldr	r3, [pc, #92]	@ (80091f4 <scheduler_timer_callback+0x94>)
 8009196:	4413      	add	r3, r2
 8009198:	2200      	movs	r2, #0
 800919a:	741a      	strb	r2, [r3, #16]
    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 800919c:	3401      	adds	r4, #1
 800919e:	2c63      	cmp	r4, #99	@ 0x63
 80091a0:	dc23      	bgt.n	80091ea <scheduler_timer_callback+0x8a>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 80091a2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80091a6:	009a      	lsls	r2, r3, #2
 80091a8:	4b12      	ldr	r3, [pc, #72]	@ (80091f4 <scheduler_timer_callback+0x94>)
 80091aa:	4413      	add	r3, r2
 80091ac:	7c1b      	ldrb	r3, [r3, #16]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d1f4      	bne.n	800919c <scheduler_timer_callback+0x3c>
        if ((int32_t)(time_now_us - event_queue[i].timestamp_us) < 0)
 80091b2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80091b6:	0093      	lsls	r3, r2, #2
 80091b8:	4a0e      	ldr	r2, [pc, #56]	@ (80091f4 <scheduler_timer_callback+0x94>)
 80091ba:	58d3      	ldr	r3, [r2, r3]
 80091bc:	1aeb      	subs	r3, r5, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	dbec      	blt.n	800919c <scheduler_timer_callback+0x3c>
        event_queue[i].state = EVENT_STATE_ACTIVE;
 80091c2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80091c6:	009a      	lsls	r2, r3, #2
 80091c8:	4b0a      	ldr	r3, [pc, #40]	@ (80091f4 <scheduler_timer_callback+0x94>)
 80091ca:	4413      	add	r3, r2
 80091cc:	2202      	movs	r2, #2
 80091ce:	741a      	strb	r2, [r3, #16]
        if (event_queue[i].uses_arg)
 80091d0:	7c5b      	ldrb	r3, [r3, #17]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d0d4      	beq.n	8009180 <scheduler_timer_callback+0x20>
            event_queue[i].callback_arg(event_queue[i].arg);
 80091d6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80091da:	fa03 f202 	lsl.w	r2, r3, r2
 80091de:	4b05      	ldr	r3, [pc, #20]	@ (80091f4 <scheduler_timer_callback+0x94>)
 80091e0:	4413      	add	r3, r2
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	68d8      	ldr	r0, [r3, #12]
 80091e6:	4790      	blx	r2
 80091e8:	e7d1      	b.n	800918e <scheduler_timer_callback+0x2e>
    }

    update_next_event();  // Schedule the next event
 80091ea:	f7ff ff8b 	bl	8009104 <update_next_event>
}
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	200076a4 	.word	0x200076a4
 80091f4:	20006ed4 	.word	0x20006ed4

080091f8 <scheduler_schedule_event_with_arg>:


bool scheduler_schedule_event_with_arg(time_us_t timestamp_us, void (*callback)(void *), void *arg)
{
    if (callback == NULL) return false;
 80091f8:	b311      	cbz	r1, 8009240 <scheduler_schedule_event_with_arg+0x48>
{
 80091fa:	b538      	push	{r3, r4, r5, lr}
 80091fc:	460d      	mov	r5, r1

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 80091fe:	2300      	movs	r3, #0
 8009200:	2b63      	cmp	r3, #99	@ 0x63
 8009202:	d81b      	bhi.n	800923c <scheduler_schedule_event_with_arg+0x44>
        if (event_queue[i].state == EVENT_STATE_INACTIVE) {
 8009204:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8009208:	490e      	ldr	r1, [pc, #56]	@ (8009244 <scheduler_schedule_event_with_arg+0x4c>)
 800920a:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 800920e:	7c09      	ldrb	r1, [r1, #16]
 8009210:	b109      	cbz	r1, 8009216 <scheduler_schedule_event_with_arg+0x1e>
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8009212:	3301      	adds	r3, #1
 8009214:	e7f4      	b.n	8009200 <scheduler_schedule_event_with_arg+0x8>
            event_queue[i].timestamp_us = timestamp_us;
 8009216:	490b      	ldr	r1, [pc, #44]	@ (8009244 <scheduler_schedule_event_with_arg+0x4c>)
 8009218:	4664      	mov	r4, ip
 800921a:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 800921e:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
            event_queue[i].callback_arg = callback;
 8009222:	f8cc 5004 	str.w	r5, [ip, #4]
            event_queue[i].arg = arg;
 8009226:	f8cc 200c 	str.w	r2, [ip, #12]
            event_queue[i].uses_arg = true;
 800922a:	2401      	movs	r4, #1
 800922c:	f88c 4011 	strb.w	r4, [ip, #17]
            event_queue[i].state = EVENT_STATE_PENDING;
 8009230:	f88c 4010 	strb.w	r4, [ip, #16]

            update_next_event();
 8009234:	f7ff ff66 	bl	8009104 <update_next_event>
            return true;
 8009238:	4620      	mov	r0, r4
        }
    }

    return false;
}
 800923a:	bd38      	pop	{r3, r4, r5, pc}
    return false;
 800923c:	2000      	movs	r0, #0
 800923e:	e7fc      	b.n	800923a <scheduler_schedule_event_with_arg+0x42>
    if (callback == NULL) return false;
 8009240:	2000      	movs	r0, #0
}
 8009242:	4770      	bx	lr
 8009244:	20006ed4 	.word	0x20006ed4

08009248 <set_filtering>:



void set_filtering(trigger_t *trigger)
{
  switch (*(trigger->filtering))
 8009248:	6843      	ldr	r3, [r0, #4]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2b03      	cmp	r3, #3
 800924e:	d813      	bhi.n	8009278 <set_filtering+0x30>
 8009250:	e8df f003 	tbb	[pc, r3]
 8009254:	0c090502 	.word	0x0c090502
  {
  case TRIGGER_FILTERING_NONE:
    trigger->_trigger_filter_time_us = 0;
 8009258:	2300      	movs	r3, #0
 800925a:	6083      	str	r3, [r0, #8]
    break;
 800925c:	4770      	bx	lr
  case TRIGGER_FILTERING_LITE:
    trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 4U;
 800925e:	6983      	ldr	r3, [r0, #24]
 8009260:	089b      	lsrs	r3, r3, #2
 8009262:	6083      	str	r3, [r0, #8]
    break;
 8009264:	4770      	bx	lr
  case TRIGGER_FILTERING_MEDIUM:
    trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 1U;
 8009266:	6983      	ldr	r3, [r0, #24]
 8009268:	6083      	str	r3, [r0, #8]
    break;
 800926a:	4770      	bx	lr
  case TRIGGER_FILTERING_AGGRESSIVE:
    trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us * 3 / 4;
 800926c:	6983      	ldr	r3, [r0, #24]
 800926e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009272:	089b      	lsrs	r3, r3, #2
 8009274:	6083      	str	r3, [r0, #8]
    break;
 8009276:	4770      	bx	lr
  default:
    // Handle invalid filtering level
    trigger->_trigger_filter_time_us = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	6083      	str	r3, [r0, #8]
    break;
  }
}
 800927c:	4770      	bx	lr
	...

08009280 <trigger_init>:

void trigger_init(trigger_t *trigger, trigger_wheel_type_t wheel_type, uint8_t *filtering, status_t sync_status_bit, uint8_t trigger_number)
{
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	f89d 5010 	ldrb.w	r5, [sp, #16]
  bool temp_status = true;
  if (trigger == NULL)
 8009286:	b158      	cbz	r0, 80092a0 <trigger_init+0x20>
 8009288:	4604      	mov	r4, r0
  {
    log_error("Trigger initialization failed. Trigger is NULL.");
    return;
  }
  trigger->filtering = filtering;
 800928a:	6042      	str	r2, [r0, #4]
  trigger->status_synced_index = sync_status_bit;
 800928c:	7043      	strb	r3, [r0, #1]

  switch (wheel_type)
 800928e:	b159      	cbz	r1, 80092a8 <trigger_init+0x28>
 8009290:	2901      	cmp	r1, #1
 8009292:	d019      	beq.n	80092c8 <trigger_init+0x48>
    trigger->_missing_teeth = 1;
    trigger->_full_teeth = 29;
    break;

  default:
    trigger->initialized = temp_status;
 8009294:	2301      	movs	r3, #1
 8009296:	7003      	strb	r3, [r0, #0]
    log_error("Trigger initialization failed. Wheel type not recognized.");
 8009298:	481d      	ldr	r0, [pc, #116]	@ (8009310 <trigger_init+0x90>)
 800929a:	f7f8 ff4b 	bl	8002134 <log_error>
    break;
 800929e:	e009      	b.n	80092b4 <trigger_init+0x34>
    log_error("Trigger initialization failed. Trigger is NULL.");
 80092a0:	481c      	ldr	r0, [pc, #112]	@ (8009314 <trigger_init+0x94>)
 80092a2:	f7f8 ff47 	bl	8002134 <log_error>
    return;
 80092a6:	e02f      	b.n	8009308 <trigger_init+0x88>
    trigger->_missing_teeth = 2;
 80092a8:	2302      	movs	r3, #2
 80092aa:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
    trigger->_full_teeth = 60;
 80092ae:	233c      	movs	r3, #60	@ 0x3c
 80092b0:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
  }

  switch (trigger_number)
 80092b4:	2d01      	cmp	r5, #1
 80092b6:	d00e      	beq.n	80092d6 <trigger_init+0x56>
 80092b8:	2d02      	cmp	r5, #2
 80092ba:	d026      	beq.n	800930a <trigger_init+0x8a>
    break;
  case 2:
    trigger->status_synced_index = STATUS_TRIGGER2_SYNCED;
    break;
  default:
    log_error("Trigger initialization failed. unknown trigger number.");
 80092bc:	4816      	ldr	r0, [pc, #88]	@ (8009318 <trigger_init+0x98>)
 80092be:	f7f8 ff39 	bl	8002134 <log_error>
    trigger->initialized = false;
 80092c2:	2300      	movs	r3, #0
 80092c4:	7023      	strb	r3, [r4, #0]
    return;
 80092c6:	e01f      	b.n	8009308 <trigger_init+0x88>
    trigger->_missing_teeth = 1;
 80092c8:	2301      	movs	r3, #1
 80092ca:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
    trigger->_full_teeth = 29;
 80092ce:	231d      	movs	r3, #29
 80092d0:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
    break;
 80092d4:	e7ee      	b.n	80092b4 <trigger_init+0x34>
    trigger->status_synced_index = STATUS_TRIGGER1_SYNCED;
 80092d6:	2303      	movs	r3, #3
 80092d8:	7063      	strb	r3, [r4, #1]
  }

  change_bit(&runtime.status, trigger->status_synced_index, false);
 80092da:	7863      	ldrb	r3, [r4, #1]
    if (bit > 31)
 80092dc:	2b1f      	cmp	r3, #31
 80092de:	d807      	bhi.n	80092f0 <trigger_init+0x70>
        *var &= ~(1u << bit);
 80092e0:	480e      	ldr	r0, [pc, #56]	@ (800931c <trigger_init+0x9c>)
 80092e2:	6802      	ldr	r2, [r0, #0]
 80092e4:	2101      	movs	r1, #1
 80092e6:	fa01 f303 	lsl.w	r3, r1, r3
 80092ea:	ea22 0203 	bic.w	r2, r2, r3
 80092ee:	6002      	str	r2, [r0, #0]
  set_filtering(trigger);
 80092f0:	4620      	mov	r0, r4
 80092f2:	f7ff ffa9 	bl	8009248 <set_filtering>
  trigger->_trigger_actual_teeth = trigger->_full_teeth - trigger->_missing_teeth;
 80092f6:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 80092fa:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 80092fe:	1a9b      	subs	r3, r3, r2
 8009300:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
  trigger->initialized = true;
 8009304:	2301      	movs	r3, #1
 8009306:	7023      	strb	r3, [r4, #0]
}
 8009308:	bd38      	pop	{r3, r4, r5, pc}
    trigger->status_synced_index = STATUS_TRIGGER2_SYNCED;
 800930a:	2304      	movs	r3, #4
 800930c:	7063      	strb	r3, [r4, #1]
    break;
 800930e:	e7e4      	b.n	80092da <trigger_init+0x5a>
 8009310:	0800bfa0 	.word	0x0800bfa0
 8009314:	0800bf70 	.word	0x0800bf70
 8009318:	0800bfdc 	.word	0x0800bfdc
 800931c:	200012ec 	.word	0x200012ec

08009320 <crankshaft_get_rpm>:
}

rpm_t crankshaft_get_rpm()
{
  return runtime.rpm;
}
 8009320:	4b01      	ldr	r3, [pc, #4]	@ (8009328 <crankshaft_get_rpm+0x8>)
 8009322:	ed93 0a06 	vldr	s0, [r3, #24]
 8009326:	4770      	bx	lr
 8009328:	200012ec 	.word	0x200012ec

0800932c <crankshaft_get_angle>:
 * @note angle is updated on every trigger event!
 */
angle_t crankshaft_get_angle()
{
  return runtime.crankshaft_angle;
}
 800932c:	4b01      	ldr	r3, [pc, #4]	@ (8009334 <crankshaft_get_angle+0x8>)
 800932e:	ed93 0a04 	vldr	s0, [r3, #16]
 8009332:	4770      	bx	lr
 8009334:	200012ec 	.word	0x200012ec

08009338 <trigger_tooth_handle>:
{
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	ed2d 8b02 	vpush	{d8}
  if (!trigger->initialized)
 800933e:	7805      	ldrb	r5, [r0, #0]
 8009340:	2d00      	cmp	r5, #0
 8009342:	d06d      	beq.n	8009420 <trigger_tooth_handle+0xe8>
 8009344:	4604      	mov	r4, r0
  trigger->_tooth_time_us[0] = get_time_us();
 8009346:	f7ff fec7 	bl	80090d8 <get_time_us>
 800934a:	60e0      	str	r0, [r4, #12]
  trigger->_current_tooth_gap_us = trigger->_tooth_time_us[0] - trigger->_tooth_time_us[1];
 800934c:	6922      	ldr	r2, [r4, #16]
 800934e:	1a80      	subs	r0, r0, r2
 8009350:	61a0      	str	r0, [r4, #24]
  if (trigger->_current_tooth_gap_us < trigger->_trigger_filter_time_us) // Pulses should never be less than _trigger_filter_time_us, so if they are it means a false trigger. (A 36-1 wheel at 8000rpm will have triggers approx. every 200uS)
 8009352:	68a3      	ldr	r3, [r4, #8]
 8009354:	4298      	cmp	r0, r3
 8009356:	f0c0 80b4 	bcc.w	80094c2 <trigger_tooth_handle+0x18a>
  trigger->_counted_tooth++; // Increment the tooth counter
 800935a:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 800935c:	3301      	adds	r3, #1
 800935e:	b29b      	uxth	r3, r3
 8009360:	84a3      	strh	r3, [r4, #36]	@ 0x24
  previous_tooth_gap = trigger->_tooth_time_us[1] - trigger->_tooth_time_us[2];
 8009362:	6961      	ldr	r1, [r4, #20]
 8009364:	1a52      	subs	r2, r2, r1
  if (previous_tooth_gap < trigger->_current_tooth_gap_us)
 8009366:	4290      	cmp	r0, r2
 8009368:	d95e      	bls.n	8009428 <trigger_tooth_handle+0xf0>
    trigger->_shorter_tooth_gap = previous_tooth_gap;
 800936a:	61e2      	str	r2, [r4, #28]
  if (trigger->_missing_teeth == 1)
 800936c:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8009370:	2a01      	cmp	r2, #1
 8009372:	d05b      	beq.n	800942c <trigger_tooth_handle+0xf4>
    trigger->_target_tooth_gap_us = trigger->_shorter_tooth_gap * trigger->_missing_teeth;
 8009374:	69e1      	ldr	r1, [r4, #28]
 8009376:	fb02 f101 	mul.w	r1, r2, r1
 800937a:	6221      	str	r1, [r4, #32]
  if ((trigger->_current_tooth_gap_us > trigger->_target_tooth_gap_us) || (trigger->_counted_tooth > trigger->_trigger_actual_teeth))
 800937c:	6a22      	ldr	r2, [r4, #32]
 800937e:	4290      	cmp	r0, r2
 8009380:	d803      	bhi.n	800938a <trigger_tooth_handle+0x52>
 8009382:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
 8009386:	4293      	cmp	r3, r2
 8009388:	d971      	bls.n	800946e <trigger_tooth_handle+0x136>
    if (trigger->_counted_tooth < trigger->_trigger_actual_teeth)
 800938a:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
 800938e:	4293      	cmp	r3, r2
 8009390:	d258      	bcs.n	8009444 <trigger_tooth_handle+0x10c>
      change_bit(&runtime.status, trigger->status_synced_index, TS_NOT_SYNCED);
 8009392:	7863      	ldrb	r3, [r4, #1]
    if (bit > 31)
 8009394:	2b1f      	cmp	r3, #31
 8009396:	d807      	bhi.n	80093a8 <trigger_tooth_handle+0x70>
        *var &= ~(1u << bit);
 8009398:	4850      	ldr	r0, [pc, #320]	@ (80094dc <trigger_tooth_handle+0x1a4>)
 800939a:	6802      	ldr	r2, [r0, #0]
 800939c:	2101      	movs	r1, #1
 800939e:	fa01 f303 	lsl.w	r3, r1, r3
 80093a2:	ea22 0203 	bic.w	r2, r2, r3
 80093a6:	6002      	str	r2, [r0, #0]
      runtime.sync_loss_counter++;
 80093a8:	4a4c      	ldr	r2, [pc, #304]	@ (80094dc <trigger_tooth_handle+0x1a4>)
 80093aa:	6853      	ldr	r3, [r2, #4]
 80093ac:	3301      	adds	r3, #1
 80093ae:	6053      	str	r3, [r2, #4]
      if (trigger->status_synced_index == STATUS_TRIGGER1_SYNCED)
 80093b0:	7863      	ldrb	r3, [r4, #1]
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	d040      	beq.n	8009438 <trigger_tooth_handle+0x100>
      trigger->_counted_tooth = 0;
 80093b6:	2300      	movs	r3, #0
 80093b8:	84a3      	strh	r3, [r4, #36]	@ 0x24
  runtime.crankshaft_angle = 360.0f / (angle_t)trigger->_full_teeth * (angle_t)trigger->_counted_tooth;
 80093ba:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
 80093be:	ee07 1a90 	vmov	s15, r1
 80093c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80093c6:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80094e0 <trigger_tooth_handle+0x1a8>
 80093ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093ce:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 80093d0:	ee07 3a10 	vmov	s14, r3
 80093d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80093d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093dc:	4a3f      	ldr	r2, [pc, #252]	@ (80094dc <trigger_tooth_handle+0x1a4>)
 80093de:	edc2 7a04 	vstr	s15, [r2, #16]
  runtime.rpm = (rpm_t)(CONVERSION_FACTOR_SECONDS_TO_MICROSECONDS * CONVERSION_FACTOR_MINUTES_TO_SECONDS / trigger->_shorter_tooth_gap / trigger->_full_teeth);
 80093e2:	69e0      	ldr	r0, [r4, #28]
 80093e4:	4b3f      	ldr	r3, [pc, #252]	@ (80094e4 <trigger_tooth_handle+0x1ac>)
 80093e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80093ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80093ee:	ee07 3a90 	vmov	s15, r3
 80093f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f6:	edc2 7a06 	vstr	s15, [r2, #24]
  if (get_bit(runtime.status, STATUS_TRIGGER1_SYNCED) == TS_FULLY_SYNCED && runtime.rpm >= config.cranking_rpm_threshold)
 80093fa:	6813      	ldr	r3, [r2, #0]
        return (flags >> bit) & 1u;
 80093fc:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8009400:	f013 0f08 	tst.w	r3, #8
 8009404:	d035      	beq.n	8009472 <trigger_tooth_handle+0x13a>
 8009406:	4b38      	ldr	r3, [pc, #224]	@ (80094e8 <trigger_tooth_handle+0x1b0>)
 8009408:	ed93 7a80 	vldr	s14, [r3, #512]	@ 0x200
 800940c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009414:	db2d      	blt.n	8009472 <trigger_tooth_handle+0x13a>
    runtime.spinning_state = SS_RUNNING;
 8009416:	4b31      	ldr	r3, [pc, #196]	@ (80094dc <trigger_tooth_handle+0x1a4>)
 8009418:	2203      	movs	r2, #3
 800941a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800941e:	e03b      	b.n	8009498 <trigger_tooth_handle+0x160>
    log_error("Trigger is not initialized.");
 8009420:	4832      	ldr	r0, [pc, #200]	@ (80094ec <trigger_tooth_handle+0x1b4>)
 8009422:	f7f8 fe87 	bl	8002134 <log_error>
    return;
 8009426:	e04c      	b.n	80094c2 <trigger_tooth_handle+0x18a>
    trigger->_shorter_tooth_gap = trigger->_current_tooth_gap_us;
 8009428:	61e0      	str	r0, [r4, #28]
 800942a:	e79f      	b.n	800936c <trigger_tooth_handle+0x34>
    trigger->_target_tooth_gap_us = (3 * trigger->_shorter_tooth_gap) >> 1;
 800942c:	69e2      	ldr	r2, [r4, #28]
 800942e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009432:	0852      	lsrs	r2, r2, #1
 8009434:	6222      	str	r2, [r4, #32]
 8009436:	e7a1      	b.n	800937c <trigger_tooth_handle+0x44>
        runtime.total_revolutions = 0;
 8009438:	4613      	mov	r3, r2
 800943a:	2200      	movs	r2, #0
 800943c:	609a      	str	r2, [r3, #8]
        runtime.rpm = 0;
 800943e:	2200      	movs	r2, #0
 8009440:	619a      	str	r2, [r3, #24]
 8009442:	e7b8      	b.n	80093b6 <trigger_tooth_handle+0x7e>
      change_bit(&runtime.status, trigger->status_synced_index, TS_FULLY_SYNCED);
 8009444:	7863      	ldrb	r3, [r4, #1]
    if (bit > 31)
 8009446:	2b1f      	cmp	r3, #31
 8009448:	d806      	bhi.n	8009458 <trigger_tooth_handle+0x120>
        *var |= (1u << bit);
 800944a:	4824      	ldr	r0, [pc, #144]	@ (80094dc <trigger_tooth_handle+0x1a4>)
 800944c:	6802      	ldr	r2, [r0, #0]
 800944e:	2101      	movs	r1, #1
 8009450:	fa01 f303 	lsl.w	r3, r1, r3
 8009454:	431a      	orrs	r2, r3
 8009456:	6002      	str	r2, [r0, #0]
      if (trigger->status_synced_index == STATUS_TRIGGER1_SYNCED)
 8009458:	7863      	ldrb	r3, [r4, #1]
 800945a:	2b03      	cmp	r3, #3
 800945c:	d002      	beq.n	8009464 <trigger_tooth_handle+0x12c>
      trigger->_counted_tooth = 0;
 800945e:	2300      	movs	r3, #0
 8009460:	84a3      	strh	r3, [r4, #36]	@ 0x24
 8009462:	e7aa      	b.n	80093ba <trigger_tooth_handle+0x82>
        runtime.total_revolutions++;
 8009464:	4a1d      	ldr	r2, [pc, #116]	@ (80094dc <trigger_tooth_handle+0x1a4>)
 8009466:	6893      	ldr	r3, [r2, #8]
 8009468:	3301      	adds	r3, #1
 800946a:	6093      	str	r3, [r2, #8]
 800946c:	e7f7      	b.n	800945e <trigger_tooth_handle+0x126>
  bool is_missing_teeth = false;
 800946e:	2500      	movs	r5, #0
 8009470:	e7a3      	b.n	80093ba <trigger_tooth_handle+0x82>
  else if (get_bit(runtime.status, STATUS_TRIGGER1_SYNCED) == TS_FULLY_SYNCED && runtime.rpm < config.cranking_rpm_threshold)
 8009472:	b162      	cbz	r2, 800948e <trigger_tooth_handle+0x156>
 8009474:	4b1c      	ldr	r3, [pc, #112]	@ (80094e8 <trigger_tooth_handle+0x1b0>)
 8009476:	ed93 7a80 	vldr	s14, [r3, #512]	@ 0x200
 800947a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800947e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009482:	d504      	bpl.n	800948e <trigger_tooth_handle+0x156>
    runtime.spinning_state = SS_CRANKING;
 8009484:	4b15      	ldr	r3, [pc, #84]	@ (80094dc <trigger_tooth_handle+0x1a4>)
 8009486:	2202      	movs	r2, #2
 8009488:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800948c:	e004      	b.n	8009498 <trigger_tooth_handle+0x160>
  else if (get_bit(runtime.status, STATUS_TRIGGER1_SYNCED) == TS_NOT_SYNCED)
 800948e:	b9da      	cbnz	r2, 80094c8 <trigger_tooth_handle+0x190>
    runtime.spinning_state = SS_SPINNING_UP;
 8009490:	4b12      	ldr	r3, [pc, #72]	@ (80094dc <trigger_tooth_handle+0x1a4>)
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (is_missing_teeth == false)
 8009498:	b1dd      	cbz	r5, 80094d2 <trigger_tooth_handle+0x19a>
  trigger->_tooth_time_us[2] = trigger->_tooth_time_us[1];
 800949a:	6923      	ldr	r3, [r4, #16]
 800949c:	6163      	str	r3, [r4, #20]
  trigger->_tooth_time_us[1] = trigger->_tooth_time_us[0];
 800949e:	68e3      	ldr	r3, [r4, #12]
 80094a0:	6123      	str	r3, [r4, #16]
  ignition_trigger_event_handle(crankshaft_get_angle(), crankshaft_get_rpm(), get_time_us());
 80094a2:	f7ff ff43 	bl	800932c <crankshaft_get_angle>
 80094a6:	eeb0 8a40 	vmov.f32	s16, s0
 80094aa:	f7ff ff39 	bl	8009320 <crankshaft_get_rpm>
 80094ae:	eef0 8a40 	vmov.f32	s17, s0
 80094b2:	f7ff fe11 	bl	80090d8 <get_time_us>
 80094b6:	eef0 0a68 	vmov.f32	s1, s17
 80094ba:	eeb0 0a48 	vmov.f32	s0, s16
 80094be:	f7f9 fab5 	bl	8002a2c <ignition_trigger_event_handle>
}
 80094c2:	ecbd 8b02 	vpop	{d8}
 80094c6:	bd38      	pop	{r3, r4, r5, pc}
    runtime.spinning_state = SS_STOPPED;
 80094c8:	4b04      	ldr	r3, [pc, #16]	@ (80094dc <trigger_tooth_handle+0x1a4>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80094d0:	e7e2      	b.n	8009498 <trigger_tooth_handle+0x160>
    set_filtering(trigger);
 80094d2:	4620      	mov	r0, r4
 80094d4:	f7ff feb8 	bl	8009248 <set_filtering>
 80094d8:	e7df      	b.n	800949a <trigger_tooth_handle+0x162>
 80094da:	bf00      	nop
 80094dc:	200012ec 	.word	0x200012ec
 80094e0:	43b40000 	.word	0x43b40000
 80094e4:	03938700 	.word	0x03938700
 80094e8:	20002340 	.word	0x20002340
 80094ec:	0800c014 	.word	0x0800c014

080094f0 <trigger_simulator_init>:

static void (*trigger_callback)(trigger_t *arg);  //passing an argument
static trigger_t *trigger_callback_arg;           // data to pass to callback_arg

void trigger_simulator_init(uint8_t full_teeth, uint8_t missing_teeth, void (*cb)(trigger_t *arg), trigger_t *arg)
{
 80094f0:	b410      	push	{r4}
    wheel_full_teeth = full_teeth;
 80094f2:	4c05      	ldr	r4, [pc, #20]	@ (8009508 <trigger_simulator_init+0x18>)
 80094f4:	7020      	strb	r0, [r4, #0]
    wheel_missing_teeth = missing_teeth;
 80094f6:	4805      	ldr	r0, [pc, #20]	@ (800950c <trigger_simulator_init+0x1c>)
 80094f8:	7001      	strb	r1, [r0, #0]
    trigger_callback = cb;
 80094fa:	4905      	ldr	r1, [pc, #20]	@ (8009510 <trigger_simulator_init+0x20>)
 80094fc:	600a      	str	r2, [r1, #0]
    trigger_callback_arg = arg;
 80094fe:	4a05      	ldr	r2, [pc, #20]	@ (8009514 <trigger_simulator_init+0x24>)
 8009500:	6013      	str	r3, [r2, #0]
}
 8009502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	200076b9 	.word	0x200076b9
 800950c:	200076b8 	.word	0x200076b8
 8009510:	200076b4 	.word	0x200076b4
 8009514:	200076b0 	.word	0x200076b0

08009518 <trigger_simulator_update>:

void trigger_simulator_update(rpm_t rpm)
{
    if (trigger_callback == NULL)
 8009518:	4b22      	ldr	r3, [pc, #136]	@ (80095a4 <trigger_simulator_update+0x8c>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d040      	beq.n	80095a2 <trigger_simulator_update+0x8a>
    {
        return;
    }
    if (wheel_full_teeth == 0) {
 8009520:	4b21      	ldr	r3, [pc, #132]	@ (80095a8 <trigger_simulator_update+0x90>)
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d03c      	beq.n	80095a2 <trigger_simulator_update+0x8a>
{
 8009528:	b510      	push	{r4, lr}
    if (rpm == 0)
 800952a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800952e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009532:	d030      	beq.n	8009596 <trigger_simulator_update+0x7e>
    return (time_us_t)60.0f * 1e6f / (rpm * 360.0f);
 8009534:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 80095ac <trigger_simulator_update+0x94>
 8009538:	ee20 0a27 	vmul.f32	s0, s0, s15
 800953c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80095b0 <trigger_simulator_update+0x98>
 8009540:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009548:	ee17 4a90 	vmov	r4, s15
        return; // Prevent division by zero
    }
    time_us_t tooth_interval = microseconds_per_degree(rpm) * 360 / wheel_full_teeth;
 800954c:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8009550:	fb02 f404 	mul.w	r4, r2, r4
 8009554:	fbb4 f4f3 	udiv	r4, r4, r3

    time_us_t current_time = get_time_us();
 8009558:	f7ff fdbe 	bl	80090d8 <get_time_us>
    static time_us_t prev_time = 0;


    if ((int32_t)(current_time - prev_time) < tooth_interval)
 800955c:	4b15      	ldr	r3, [pc, #84]	@ (80095b4 <trigger_simulator_update+0x9c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	1ac3      	subs	r3, r0, r3
 8009562:	42a3      	cmp	r3, r4
 8009564:	d316      	bcc.n	8009594 <trigger_simulator_update+0x7c>
    {
        return;
    }
    prev_time = current_time;
 8009566:	4b13      	ldr	r3, [pc, #76]	@ (80095b4 <trigger_simulator_update+0x9c>)
 8009568:	6018      	str	r0, [r3, #0]
    
    static uint8_t current_tooth_index = 0;

    if (current_tooth_index < wheel_missing_teeth)
 800956a:	4b13      	ldr	r3, [pc, #76]	@ (80095b8 <trigger_simulator_update+0xa0>)
 800956c:	781a      	ldrb	r2, [r3, #0]
 800956e:	4b13      	ldr	r3, [pc, #76]	@ (80095bc <trigger_simulator_update+0xa4>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	429a      	cmp	r2, r3
 8009574:	d304      	bcc.n	8009580 <trigger_simulator_update+0x68>
    {
        // welll do nothing!
    }
    else
    {
        trigger_callback(trigger_callback_arg);
 8009576:	4b0b      	ldr	r3, [pc, #44]	@ (80095a4 <trigger_simulator_update+0x8c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a11      	ldr	r2, [pc, #68]	@ (80095c0 <trigger_simulator_update+0xa8>)
 800957c:	6810      	ldr	r0, [r2, #0]
 800957e:	4798      	blx	r3
    }
    

    if (current_tooth_index < (wheel_full_teeth - 1))
 8009580:	4b0d      	ldr	r3, [pc, #52]	@ (80095b8 <trigger_simulator_update+0xa0>)
 8009582:	781a      	ldrb	r2, [r3, #0]
 8009584:	4b08      	ldr	r3, [pc, #32]	@ (80095a8 <trigger_simulator_update+0x90>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	3b01      	subs	r3, #1
 800958a:	429a      	cmp	r2, r3
 800958c:	da05      	bge.n	800959a <trigger_simulator_update+0x82>
    {
        current_tooth_index++;
 800958e:	3201      	adds	r2, #1
 8009590:	4b09      	ldr	r3, [pc, #36]	@ (80095b8 <trigger_simulator_update+0xa0>)
 8009592:	701a      	strb	r2, [r3, #0]
    {
        current_tooth_index = 0;
    }


}
 8009594:	bd10      	pop	{r4, pc}
        return 0;
 8009596:	2400      	movs	r4, #0
 8009598:	e7d8      	b.n	800954c <trigger_simulator_update+0x34>
        current_tooth_index = 0;
 800959a:	4b07      	ldr	r3, [pc, #28]	@ (80095b8 <trigger_simulator_update+0xa0>)
 800959c:	2200      	movs	r2, #0
 800959e:	701a      	strb	r2, [r3, #0]
 80095a0:	e7f8      	b.n	8009594 <trigger_simulator_update+0x7c>
 80095a2:	4770      	bx	lr
 80095a4:	200076b4 	.word	0x200076b4
 80095a8:	200076b9 	.word	0x200076b9
 80095ac:	43b40000 	.word	0x43b40000
 80095b0:	4c64e1c0 	.word	0x4c64e1c0
 80095b4:	200076ac 	.word	0x200076ac
 80095b8:	200076a8 	.word	0x200076a8
 80095bc:	200076b8 	.word	0x200076b8
 80095c0:	200076b0 	.word	0x200076b0

080095c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80095c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80095c6:	2200      	movs	r2, #0
 80095c8:	490f      	ldr	r1, [pc, #60]	@ (8009608 <MX_USB_DEVICE_Init+0x44>)
 80095ca:	4810      	ldr	r0, [pc, #64]	@ (800960c <MX_USB_DEVICE_Init+0x48>)
 80095cc:	f000 fc60 	bl	8009e90 <USBD_Init>
 80095d0:	b970      	cbnz	r0, 80095f0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80095d2:	490f      	ldr	r1, [pc, #60]	@ (8009610 <MX_USB_DEVICE_Init+0x4c>)
 80095d4:	480d      	ldr	r0, [pc, #52]	@ (800960c <MX_USB_DEVICE_Init+0x48>)
 80095d6:	f000 fc72 	bl	8009ebe <USBD_RegisterClass>
 80095da:	b960      	cbnz	r0, 80095f6 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80095dc:	490d      	ldr	r1, [pc, #52]	@ (8009614 <MX_USB_DEVICE_Init+0x50>)
 80095de:	480b      	ldr	r0, [pc, #44]	@ (800960c <MX_USB_DEVICE_Init+0x48>)
 80095e0:	f000 fa39 	bl	8009a56 <USBD_CDC_RegisterInterface>
 80095e4:	b950      	cbnz	r0, 80095fc <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80095e6:	4809      	ldr	r0, [pc, #36]	@ (800960c <MX_USB_DEVICE_Init+0x48>)
 80095e8:	f000 fc89 	bl	8009efe <USBD_Start>
 80095ec:	b948      	cbnz	r0, 8009602 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80095ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80095f0:	f7f9 fbe0 	bl	8002db4 <Error_Handler>
 80095f4:	e7ed      	b.n	80095d2 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 80095f6:	f7f9 fbdd 	bl	8002db4 <Error_Handler>
 80095fa:	e7ef      	b.n	80095dc <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80095fc:	f7f9 fbda 	bl	8002db4 <Error_Handler>
 8009600:	e7f1      	b.n	80095e6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8009602:	f7f9 fbd7 	bl	8002db4 <Error_Handler>
}
 8009606:	e7f2      	b.n	80095ee <MX_USB_DEVICE_Init+0x2a>
 8009608:	20000144 	.word	0x20000144
 800960c:	200076bc 	.word	0x200076bc
 8009610:	200000b8 	.word	0x200000b8
 8009614:	200000fc 	.word	0x200000fc

08009618 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009618:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800961a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800961e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8009622:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 8009626:	b18c      	cbz	r4, 800964c <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009628:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800962c:	6843      	ldr	r3, [r0, #4]
 800962e:	b17b      	cbz	r3, 8009650 <USBD_CDC_EP0_RxReady+0x38>
 8009630:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8009634:	28ff      	cmp	r0, #255	@ 0xff
 8009636:	d00d      	beq.n	8009654 <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800963e:	4621      	mov	r1, r4
 8009640:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8009642:	23ff      	movs	r3, #255	@ 0xff
 8009644:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009648:	2000      	movs	r0, #0
}
 800964a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800964c:	2003      	movs	r0, #3
 800964e:	e7fc      	b.n	800964a <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 8009650:	2000      	movs	r0, #0
 8009652:	e7fa      	b.n	800964a <USBD_CDC_EP0_RxReady+0x32>
 8009654:	2000      	movs	r0, #0
 8009656:	e7f8      	b.n	800964a <USBD_CDC_EP0_RxReady+0x32>

08009658 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009658:	230a      	movs	r3, #10
 800965a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800965c:	4800      	ldr	r0, [pc, #0]	@ (8009660 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800965e:	4770      	bx	lr
 8009660:	200000f0 	.word	0x200000f0

08009664 <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009668:	4f0f      	ldr	r7, [pc, #60]	@ (80096a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800966a:	2182      	movs	r1, #130	@ 0x82
 800966c:	4638      	mov	r0, r7
 800966e:	f000 fdf9 	bl	800a264 <USBD_GetEpDesc>
 8009672:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009674:	2101      	movs	r1, #1
 8009676:	4638      	mov	r0, r7
 8009678:	f000 fdf4 	bl	800a264 <USBD_GetEpDesc>
 800967c:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800967e:	2181      	movs	r1, #129	@ 0x81
 8009680:	4638      	mov	r0, r7
 8009682:	f000 fdef 	bl	800a264 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8009686:	b10d      	cbz	r5, 800968c <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009688:	2210      	movs	r2, #16
 800968a:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800968c:	b11c      	cbz	r4, 8009696 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800968e:	2240      	movs	r2, #64	@ 0x40
 8009690:	7122      	strb	r2, [r4, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8009696:	b118      	cbz	r0, 80096a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009698:	2240      	movs	r2, #64	@ 0x40
 800969a:	7102      	strb	r2, [r0, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80096a0:	2343      	movs	r3, #67	@ 0x43
 80096a2:	8033      	strh	r3, [r6, #0]
}
 80096a4:	4800      	ldr	r0, [pc, #0]	@ (80096a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80096a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a8:	20000074 	.word	0x20000074

080096ac <USBD_CDC_GetFSCfgDesc>:
{
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80096b0:	4f0f      	ldr	r7, [pc, #60]	@ (80096f0 <USBD_CDC_GetFSCfgDesc+0x44>)
 80096b2:	2182      	movs	r1, #130	@ 0x82
 80096b4:	4638      	mov	r0, r7
 80096b6:	f000 fdd5 	bl	800a264 <USBD_GetEpDesc>
 80096ba:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80096bc:	2101      	movs	r1, #1
 80096be:	4638      	mov	r0, r7
 80096c0:	f000 fdd0 	bl	800a264 <USBD_GetEpDesc>
 80096c4:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80096c6:	2181      	movs	r1, #129	@ 0x81
 80096c8:	4638      	mov	r0, r7
 80096ca:	f000 fdcb 	bl	800a264 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80096ce:	b10d      	cbz	r5, 80096d4 <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80096d0:	2210      	movs	r2, #16
 80096d2:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80096d4:	b11c      	cbz	r4, 80096de <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096d6:	2240      	movs	r2, #64	@ 0x40
 80096d8:	7122      	strb	r2, [r4, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80096de:	b118      	cbz	r0, 80096e8 <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096e0:	2240      	movs	r2, #64	@ 0x40
 80096e2:	7102      	strb	r2, [r0, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80096e8:	2343      	movs	r3, #67	@ 0x43
 80096ea:	8033      	strh	r3, [r6, #0]
}
 80096ec:	4800      	ldr	r0, [pc, #0]	@ (80096f0 <USBD_CDC_GetFSCfgDesc+0x44>)
 80096ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096f0:	20000074 	.word	0x20000074

080096f4 <USBD_CDC_GetHSCfgDesc>:
{
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80096f8:	4f0f      	ldr	r7, [pc, #60]	@ (8009738 <USBD_CDC_GetHSCfgDesc+0x44>)
 80096fa:	2182      	movs	r1, #130	@ 0x82
 80096fc:	4638      	mov	r0, r7
 80096fe:	f000 fdb1 	bl	800a264 <USBD_GetEpDesc>
 8009702:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009704:	2101      	movs	r1, #1
 8009706:	4638      	mov	r0, r7
 8009708:	f000 fdac 	bl	800a264 <USBD_GetEpDesc>
 800970c:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800970e:	2181      	movs	r1, #129	@ 0x81
 8009710:	4638      	mov	r0, r7
 8009712:	f000 fda7 	bl	800a264 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8009716:	b10d      	cbz	r5, 800971c <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009718:	2210      	movs	r2, #16
 800971a:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800971c:	b11c      	cbz	r4, 8009726 <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800971e:	2200      	movs	r2, #0
 8009720:	7122      	strb	r2, [r4, #4]
 8009722:	2202      	movs	r2, #2
 8009724:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8009726:	b118      	cbz	r0, 8009730 <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009728:	2200      	movs	r2, #0
 800972a:	7102      	strb	r2, [r0, #4]
 800972c:	2202      	movs	r2, #2
 800972e:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009730:	2343      	movs	r3, #67	@ 0x43
 8009732:	8033      	strh	r3, [r6, #0]
}
 8009734:	4800      	ldr	r0, [pc, #0]	@ (8009738 <USBD_CDC_GetHSCfgDesc+0x44>)
 8009736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009738:	20000074 	.word	0x20000074

0800973c <USBD_CDC_DataOut>:
{
 800973c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800973e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009742:	33b0      	adds	r3, #176	@ 0xb0
 8009744:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009748:	b195      	cbz	r5, 8009770 <USBD_CDC_DataOut+0x34>
 800974a:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800974c:	f000 fb48 	bl	8009de0 <USBD_LL_GetRxDataSize>
 8009750:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009754:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009758:	33b0      	adds	r3, #176	@ 0xb0
 800975a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800975e:	6863      	ldr	r3, [r4, #4]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8009766:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 800976a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800976c:	2000      	movs	r0, #0
}
 800976e:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8009770:	2003      	movs	r0, #3
 8009772:	e7fc      	b.n	800976e <USBD_CDC_DataOut+0x32>

08009774 <USBD_CDC_DataIn>:
{
 8009774:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009776:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800977a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800977e:	33b0      	adds	r3, #176	@ 0xb0
 8009780:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8009784:	b384      	cbz	r4, 80097e8 <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009786:	f001 030f 	and.w	r3, r1, #15
 800978a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800978e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009792:	6992      	ldr	r2, [r2, #24]
 8009794:	b14a      	cbz	r2, 80097aa <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009796:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 800979a:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 800979e:	69ed      	ldr	r5, [r5, #28]
 80097a0:	fbb2 fcf5 	udiv	ip, r2, r5
 80097a4:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80097a8:	b192      	cbz	r2, 80097d0 <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 80097aa:	2300      	movs	r3, #0
 80097ac:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80097b0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80097b4:	33b0      	adds	r3, #176	@ 0xb0
 80097b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80097ba:	6843      	ldr	r3, [r0, #4]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	b1ab      	cbz	r3, 80097ec <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80097c0:	460a      	mov	r2, r1
 80097c2:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 80097c6:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 80097ca:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80097cc:	2000      	movs	r0, #0
}
 80097ce:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80097d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80097d4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80097d8:	2400      	movs	r4, #0
 80097da:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80097dc:	4623      	mov	r3, r4
 80097de:	4622      	mov	r2, r4
 80097e0:	f000 fb46 	bl	8009e70 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80097e4:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80097e6:	e7f2      	b.n	80097ce <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 80097e8:	2003      	movs	r0, #3
 80097ea:	e7f0      	b.n	80097ce <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 80097ec:	2000      	movs	r0, #0
 80097ee:	e7ee      	b.n	80097ce <USBD_CDC_DataIn+0x5a>

080097f0 <USBD_CDC_Setup>:
{
 80097f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097f2:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097f4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80097f8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80097fc:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 8009800:	2200      	movs	r2, #0
 8009802:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 8009806:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 800980a:	2f00      	cmp	r7, #0
 800980c:	d078      	beq.n	8009900 <USBD_CDC_Setup+0x110>
 800980e:	4604      	mov	r4, r0
 8009810:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009812:	7809      	ldrb	r1, [r1, #0]
 8009814:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 8009818:	d034      	beq.n	8009884 <USBD_CDC_Setup+0x94>
 800981a:	2e20      	cmp	r6, #32
 800981c:	d169      	bne.n	80098f2 <USBD_CDC_Setup+0x102>
      if (req->wLength != 0U)
 800981e:	88ea      	ldrh	r2, [r5, #6]
 8009820:	b32a      	cbz	r2, 800986e <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 8009822:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8009826:	d10e      	bne.n	8009846 <USBD_CDC_Setup+0x56>
          hcdc->CmdOpCode = req->bRequest;
 8009828:	786b      	ldrb	r3, [r5, #1]
 800982a:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800982e:	88ea      	ldrh	r2, [r5, #6]
 8009830:	2a3f      	cmp	r2, #63	@ 0x3f
 8009832:	d81a      	bhi.n	800986a <USBD_CDC_Setup+0x7a>
 8009834:	b2d2      	uxtb	r2, r2
 8009836:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800983a:	4639      	mov	r1, r7
 800983c:	4620      	mov	r0, r4
 800983e:	f001 f97a 	bl	800ab36 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8009842:	2600      	movs	r6, #0
 8009844:	e059      	b.n	80098fa <USBD_CDC_Setup+0x10a>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009846:	33b0      	adds	r3, #176	@ 0xb0
 8009848:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	4639      	mov	r1, r7
 8009852:	7868      	ldrb	r0, [r5, #1]
 8009854:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009856:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009858:	2a07      	cmp	r2, #7
 800985a:	bf28      	it	cs
 800985c:	2207      	movcs	r2, #7
 800985e:	4639      	mov	r1, r7
 8009860:	4620      	mov	r0, r4
 8009862:	f001 f953 	bl	800ab0c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009866:	2600      	movs	r6, #0
 8009868:	e047      	b.n	80098fa <USBD_CDC_Setup+0x10a>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800986a:	2240      	movs	r2, #64	@ 0x40
 800986c:	e7e3      	b.n	8009836 <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800986e:	33b0      	adds	r3, #176	@ 0xb0
 8009870:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	2200      	movs	r2, #0
 800987a:	4629      	mov	r1, r5
 800987c:	7868      	ldrb	r0, [r5, #1]
 800987e:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8009880:	2600      	movs	r6, #0
 8009882:	e03a      	b.n	80098fa <USBD_CDC_Setup+0x10a>
      switch (req->bRequest)
 8009884:	786f      	ldrb	r7, [r5, #1]
 8009886:	2f0b      	cmp	r7, #11
 8009888:	d82e      	bhi.n	80098e8 <USBD_CDC_Setup+0xf8>
 800988a:	e8df f007 	tbb	[pc, r7]
 800988e:	3606      	.short	0x3606
 8009890:	2d2d2d2d 	.word	0x2d2d2d2d
 8009894:	2d2d2d2d 	.word	0x2d2d2d2d
 8009898:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800989a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d004      	beq.n	80098ac <USBD_CDC_Setup+0xbc>
            USBD_CtlError(pdev, req);
 80098a2:	4629      	mov	r1, r5
 80098a4:	f000 fd1b 	bl	800a2de <USBD_CtlError>
            ret = USBD_FAIL;
 80098a8:	2603      	movs	r6, #3
 80098aa:	e026      	b.n	80098fa <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80098ac:	2202      	movs	r2, #2
 80098ae:	a901      	add	r1, sp, #4
 80098b0:	f001 f92c 	bl	800ab0c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80098b4:	463e      	mov	r6, r7
 80098b6:	e020      	b.n	80098fa <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098b8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80098bc:	2b03      	cmp	r3, #3
 80098be:	d004      	beq.n	80098ca <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 80098c0:	4629      	mov	r1, r5
 80098c2:	f000 fd0c 	bl	800a2de <USBD_CtlError>
            ret = USBD_FAIL;
 80098c6:	2603      	movs	r6, #3
 80098c8:	e017      	b.n	80098fa <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80098ca:	2201      	movs	r2, #1
 80098cc:	f10d 0107 	add.w	r1, sp, #7
 80098d0:	f001 f91c 	bl	800ab0c <USBD_CtlSendData>
 80098d4:	e011      	b.n	80098fa <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80098d6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80098da:	2b03      	cmp	r3, #3
 80098dc:	d00d      	beq.n	80098fa <USBD_CDC_Setup+0x10a>
            USBD_CtlError(pdev, req);
 80098de:	4629      	mov	r1, r5
 80098e0:	f000 fcfd 	bl	800a2de <USBD_CtlError>
            ret = USBD_FAIL;
 80098e4:	2603      	movs	r6, #3
 80098e6:	e008      	b.n	80098fa <USBD_CDC_Setup+0x10a>
          USBD_CtlError(pdev, req);
 80098e8:	4629      	mov	r1, r5
 80098ea:	f000 fcf8 	bl	800a2de <USBD_CtlError>
          ret = USBD_FAIL;
 80098ee:	2603      	movs	r6, #3
          break;
 80098f0:	e003      	b.n	80098fa <USBD_CDC_Setup+0x10a>
      USBD_CtlError(pdev, req);
 80098f2:	4629      	mov	r1, r5
 80098f4:	f000 fcf3 	bl	800a2de <USBD_CtlError>
      ret = USBD_FAIL;
 80098f8:	2603      	movs	r6, #3
}
 80098fa:	4630      	mov	r0, r6
 80098fc:	b003      	add	sp, #12
 80098fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8009900:	2603      	movs	r6, #3
 8009902:	e7fa      	b.n	80098fa <USBD_CDC_Setup+0x10a>

08009904 <USBD_CDC_DeInit>:
{
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009908:	2181      	movs	r1, #129	@ 0x81
 800990a:	f000 fa91 	bl	8009e30 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800990e:	2500      	movs	r5, #0
 8009910:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009912:	2101      	movs	r1, #1
 8009914:	4620      	mov	r0, r4
 8009916:	f000 fa8b 	bl	8009e30 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800991a:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800991e:	2182      	movs	r1, #130	@ 0x82
 8009920:	4620      	mov	r0, r4
 8009922:	f000 fa85 	bl	8009e30 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009926:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800992a:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800992e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009932:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8009936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800993a:	b19a      	cbz	r2, 8009964 <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800993c:	33b0      	adds	r3, #176	@ 0xb0
 800993e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009948:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800994c:	33b0      	adds	r3, #176	@ 0xb0
 800994e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8009952:	f000 fa4f 	bl	8009df4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009956:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800995a:	33b0      	adds	r3, #176	@ 0xb0
 800995c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8009960:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8009964:	2000      	movs	r0, #0
 8009966:	bd38      	pop	{r3, r4, r5, pc}

08009968 <USBD_CDC_Init>:
{
 8009968:	b570      	push	{r4, r5, r6, lr}
 800996a:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800996c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009970:	f000 fa3c 	bl	8009dec <USBD_static_malloc>
  if (hcdc == NULL)
 8009974:	2800      	cmp	r0, #0
 8009976:	d049      	beq.n	8009a0c <USBD_CDC_Init+0xa4>
 8009978:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800997a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800997e:	2100      	movs	r1, #0
 8009980:	f001 f982 	bl	800ac88 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009984:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009988:	33b0      	adds	r3, #176	@ 0xb0
 800998a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800998e:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009992:	7c23      	ldrb	r3, [r4, #16]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d141      	bne.n	8009a1c <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009998:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800999c:	2202      	movs	r2, #2
 800999e:	2181      	movs	r1, #129	@ 0x81
 80099a0:	4620      	mov	r0, r4
 80099a2:	f000 fa3a 	bl	8009e1a <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80099a6:	2601      	movs	r6, #1
 80099a8:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80099aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099ae:	2202      	movs	r2, #2
 80099b0:	4631      	mov	r1, r6
 80099b2:	4620      	mov	r0, r4
 80099b4:	f000 fa31 	bl	8009e1a <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80099b8:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80099bc:	2310      	movs	r3, #16
 80099be:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80099c2:	2308      	movs	r3, #8
 80099c4:	2203      	movs	r2, #3
 80099c6:	2182      	movs	r1, #130	@ 0x82
 80099c8:	4620      	mov	r0, r4
 80099ca:	f000 fa26 	bl	8009e1a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80099ce:	2301      	movs	r3, #1
 80099d0:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
  hcdc->RxBuffer = NULL;
 80099d4:	2600      	movs	r6, #0
 80099d6:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80099da:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80099de:	33b0      	adds	r3, #176	@ 0xb0
 80099e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4798      	blx	r3
  hcdc->TxState = 0U;
 80099ea:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 80099ee:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 80099f2:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 80099f6:	b362      	cbz	r2, 8009a52 <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099f8:	7c25      	ldrb	r5, [r4, #16]
 80099fa:	bb1d      	cbnz	r5, 8009a44 <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80099fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a00:	2101      	movs	r1, #1
 8009a02:	4620      	mov	r0, r4
 8009a04:	f000 fa3c 	bl	8009e80 <USBD_LL_PrepareReceive>
}
 8009a08:	4628      	mov	r0, r5
 8009a0a:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a0c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009a10:	33b0      	adds	r3, #176	@ 0xb0
 8009a12:	2200      	movs	r2, #0
 8009a14:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009a18:	2502      	movs	r5, #2
 8009a1a:	e7f5      	b.n	8009a08 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009a1c:	2340      	movs	r3, #64	@ 0x40
 8009a1e:	2202      	movs	r2, #2
 8009a20:	2181      	movs	r1, #129	@ 0x81
 8009a22:	4620      	mov	r0, r4
 8009a24:	f000 f9f9 	bl	8009e1a <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009a28:	2601      	movs	r6, #1
 8009a2a:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009a2c:	2340      	movs	r3, #64	@ 0x40
 8009a2e:	2202      	movs	r2, #2
 8009a30:	4631      	mov	r1, r6
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 f9f1 	bl	8009e1a <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009a38:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009a3c:	2310      	movs	r3, #16
 8009a3e:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 8009a42:	e7be      	b.n	80099c2 <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a44:	2340      	movs	r3, #64	@ 0x40
 8009a46:	2101      	movs	r1, #1
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 fa19 	bl	8009e80 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8009a4e:	2500      	movs	r5, #0
 8009a50:	e7da      	b.n	8009a08 <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 8009a52:	2502      	movs	r5, #2
 8009a54:	e7d8      	b.n	8009a08 <USBD_CDC_Init+0xa0>

08009a56 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8009a56:	b139      	cbz	r1, 8009a68 <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8009a58:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009a5c:	33b0      	adds	r3, #176	@ 0xb0
 8009a5e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009a62:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 8009a64:	2000      	movs	r0, #0
 8009a66:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009a68:	2003      	movs	r0, #3
}
 8009a6a:	4770      	bx	lr

08009a6c <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a6c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009a70:	33b0      	adds	r3, #176	@ 0xb0
 8009a72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009a76:	b12b      	cbz	r3, 8009a84 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8009a78:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009a7c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009a80:	2000      	movs	r0, #0
 8009a82:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009a84:	2003      	movs	r0, #3
}
 8009a86:	4770      	bx	lr

08009a88 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a88:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009a8c:	33b0      	adds	r3, #176	@ 0xb0
 8009a8e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8009a92:	b11b      	cbz	r3, 8009a9c <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8009a94:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009a98:	2000      	movs	r0, #0
 8009a9a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009a9c:	2003      	movs	r0, #3
}
 8009a9e:	4770      	bx	lr

08009aa0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009aa0:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aa2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009aa6:	33b0      	adds	r3, #176	@ 0xb0
 8009aa8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009aac:	b18a      	cbz	r2, 8009ad2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8009aae:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 8009ab2:	b10b      	cbz	r3, 8009ab8 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009ab4:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8009ab6:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009abe:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 8009ac2:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009ac4:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8009ac8:	2181      	movs	r1, #129	@ 0x81
 8009aca:	f000 f9d1 	bl	8009e70 <USBD_LL_Transmit>
    ret = USBD_OK;
 8009ace:	2000      	movs	r0, #0
 8009ad0:	e7f1      	b.n	8009ab6 <USBD_CDC_TransmitPacket+0x16>
    return (uint8_t)USBD_FAIL;
 8009ad2:	2003      	movs	r0, #3
 8009ad4:	e7ef      	b.n	8009ab6 <USBD_CDC_TransmitPacket+0x16>

08009ad6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ad6:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ad8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009adc:	33b0      	adds	r3, #176	@ 0xb0
 8009ade:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ae2:	b192      	cbz	r2, 8009b0a <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ae4:	7c04      	ldrb	r4, [r0, #16]
 8009ae6:	b944      	cbnz	r4, 8009afa <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ae8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009aec:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8009af0:	2101      	movs	r1, #1
 8009af2:	f000 f9c5 	bl	8009e80 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8009af6:	4620      	mov	r0, r4
 8009af8:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009afa:	2340      	movs	r3, #64	@ 0x40
 8009afc:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8009b00:	2101      	movs	r1, #1
 8009b02:	f000 f9bd 	bl	8009e80 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8009b06:	2400      	movs	r4, #0
 8009b08:	e7f5      	b.n	8009af6 <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 8009b0a:	2403      	movs	r4, #3
 8009b0c:	e7f3      	b.n	8009af6 <USBD_CDC_ReceivePacket+0x20>

08009b0e <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8009b0e:	2000      	movs	r0, #0
 8009b10:	4770      	bx	lr

08009b12 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8009b12:	2000      	movs	r0, #0
 8009b14:	4770      	bx	lr

08009b16 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8009b16:	2000      	movs	r0, #0
 8009b18:	4770      	bx	lr
	...

08009b1c <CDC_Receive_FS>:
{
 8009b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	4605      	mov	r5, r0
 8009b22:	460e      	mov	r6, r1
    if ((rx_offset + *Len) > sizeof(rx_buffer)) {
 8009b24:	680a      	ldr	r2, [r1, #0]
 8009b26:	4b17      	ldr	r3, [pc, #92]	@ (8009b84 <CDC_Receive_FS+0x68>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f240 411e 	movw	r1, #1054	@ 0x41e
 8009b30:	428b      	cmp	r3, r1
 8009b32:	d902      	bls.n	8009b3a <CDC_Receive_FS+0x1e>
        rx_offset = 0;  // recover safely
 8009b34:	4b13      	ldr	r3, [pc, #76]	@ (8009b84 <CDC_Receive_FS+0x68>)
 8009b36:	2100      	movs	r1, #0
 8009b38:	6019      	str	r1, [r3, #0]
    memcpy(&rx_buffer[rx_offset], Buf, *Len);
 8009b3a:	4f12      	ldr	r7, [pc, #72]	@ (8009b84 <CDC_Receive_FS+0x68>)
 8009b3c:	683c      	ldr	r4, [r7, #0]
 8009b3e:	4629      	mov	r1, r5
 8009b40:	4811      	ldr	r0, [pc, #68]	@ (8009b88 <CDC_Receive_FS+0x6c>)
 8009b42:	4420      	add	r0, r4
 8009b44:	f001 f8d4 	bl	800acf0 <memcpy>
    rx_offset += *Len;
 8009b48:	6833      	ldr	r3, [r6, #0]
 8009b4a:	441c      	add	r4, r3
 8009b4c:	603c      	str	r4, [r7, #0]
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE) {
 8009b4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009b50:	d90a      	bls.n	8009b68 <CDC_Receive_FS+0x4c>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 8009b52:	4c0e      	ldr	r4, [pc, #56]	@ (8009b8c <CDC_Receive_FS+0x70>)
 8009b54:	4629      	mov	r1, r5
 8009b56:	4620      	mov	r0, r4
 8009b58:	f7ff ff96 	bl	8009a88 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	f7ff ffba 	bl	8009ad6 <USBD_CDC_ReceivePacket>
}
 8009b62:	2000      	movs	r0, #0
 8009b64:	b003      	add	sp, #12
 8009b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        usb_packet_ptr_t packet = {
 8009b68:	4b07      	ldr	r3, [pc, #28]	@ (8009b88 <CDC_Receive_FS+0x6c>)
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	9401      	str	r4, [sp, #4]
        osMessageQueuePut(usb_rx_queue, &packet, 0, 0);
 8009b6e:	2300      	movs	r3, #0
 8009b70:	461a      	mov	r2, r3
 8009b72:	4669      	mov	r1, sp
 8009b74:	4806      	ldr	r0, [pc, #24]	@ (8009b90 <CDC_Receive_FS+0x74>)
 8009b76:	6800      	ldr	r0, [r0, #0]
 8009b78:	f7f7 fae5 	bl	8001146 <osMessageQueuePut>
        rx_offset = 0;  // ready for next message
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	603a      	str	r2, [r7, #0]
 8009b80:	e7e7      	b.n	8009b52 <CDC_Receive_FS+0x36>
 8009b82:	bf00      	nop
 8009b84:	20007998 	.word	0x20007998
 8009b88:	20000a04 	.word	0x20000a04
 8009b8c:	200076bc 	.word	0x200076bc
 8009b90:	20001244 	.word	0x20001244

08009b94 <CDC_Init_FS>:
{
 8009b94:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b96:	4c06      	ldr	r4, [pc, #24]	@ (8009bb0 <CDC_Init_FS+0x1c>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	4906      	ldr	r1, [pc, #24]	@ (8009bb4 <CDC_Init_FS+0x20>)
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f7ff ff65 	bl	8009a6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ba2:	4905      	ldr	r1, [pc, #20]	@ (8009bb8 <CDC_Init_FS+0x24>)
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f7ff ff6f 	bl	8009a88 <USBD_CDC_SetRxBuffer>
}
 8009baa:	2000      	movs	r0, #0
 8009bac:	bd10      	pop	{r4, pc}
 8009bae:	bf00      	nop
 8009bb0:	200076bc 	.word	0x200076bc
 8009bb4:	2000799c 	.word	0x2000799c
 8009bb8:	20007d9c 	.word	0x20007d9c

08009bbc <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009bbc:	4b09      	ldr	r3, [pc, #36]	@ (8009be4 <CDC_Transmit_FS+0x28>)
 8009bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 8009bc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009bc6:	b10b      	cbz	r3, 8009bcc <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8009bc8:	2001      	movs	r0, #1
}
 8009bca:	4770      	bx	lr
{
 8009bcc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009bce:	4c05      	ldr	r4, [pc, #20]	@ (8009be4 <CDC_Transmit_FS+0x28>)
 8009bd0:	460a      	mov	r2, r1
 8009bd2:	4601      	mov	r1, r0
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f7ff ff49 	bl	8009a6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f7ff ff60 	bl	8009aa0 <USBD_CDC_TransmitPacket>
}
 8009be0:	bd10      	pop	{r4, pc}
 8009be2:	bf00      	nop
 8009be4:	200076bc 	.word	0x200076bc

08009be8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009be8:	b530      	push	{r4, r5, lr}
 8009bea:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bec:	2300      	movs	r3, #0
 8009bee:	9303      	str	r3, [sp, #12]
 8009bf0:	9304      	str	r3, [sp, #16]
 8009bf2:	9305      	str	r3, [sp, #20]
 8009bf4:	9306      	str	r3, [sp, #24]
 8009bf6:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009bf8:	6803      	ldr	r3, [r0, #0]
 8009bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009bfe:	d001      	beq.n	8009c04 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c00:	b009      	add	sp, #36	@ 0x24
 8009c02:	bd30      	pop	{r4, r5, pc}
 8009c04:	aa03      	add	r2, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c06:	2500      	movs	r5, #0
 8009c08:	9501      	str	r5, [sp, #4]
 8009c0a:	4c17      	ldr	r4, [pc, #92]	@ (8009c68 <HAL_PCD_MspInit+0x80>)
 8009c0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009c0e:	f043 0301 	orr.w	r3, r3, #1
 8009c12:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009c16:	f003 0301 	and.w	r3, r3, #1
 8009c1a:	9301      	str	r3, [sp, #4]
 8009c1c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009c1e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009c22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c24:	2302      	movs	r3, #2
 8009c26:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c2c:	230a      	movs	r3, #10
 8009c2e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c30:	4611      	mov	r1, r2
 8009c32:	480e      	ldr	r0, [pc, #56]	@ (8009c6c <HAL_PCD_MspInit+0x84>)
 8009c34:	f7fa ffda 	bl	8004bec <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c40:	9502      	str	r5, [sp, #8]
 8009c42:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009c48:	6463      	str	r3, [r4, #68]	@ 0x44
 8009c4a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009c4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c50:	9302      	str	r3, [sp, #8]
 8009c52:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009c54:	462a      	mov	r2, r5
 8009c56:	2105      	movs	r1, #5
 8009c58:	2043      	movs	r0, #67	@ 0x43
 8009c5a:	f7fa fd9f 	bl	800479c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c5e:	2043      	movs	r0, #67	@ 0x43
 8009c60:	f7fa fdac 	bl	80047bc <HAL_NVIC_EnableIRQ>
}
 8009c64:	e7cc      	b.n	8009c00 <HAL_PCD_MspInit+0x18>
 8009c66:	bf00      	nop
 8009c68:	40023800 	.word	0x40023800
 8009c6c:	40020000 	.word	0x40020000

08009c70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c70:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c72:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8009c76:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009c7a:	f000 f956 	bl	8009f2a <USBD_LL_SetupStage>
}
 8009c7e:	bd08      	pop	{r3, pc}

08009c80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c80:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c82:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8009c86:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009c8a:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8009c8e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009c92:	f000 fa17 	bl	800a0c4 <USBD_LL_DataOutStage>
}
 8009c96:	bd08      	pop	{r3, pc}

08009c98 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c98:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c9a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8009c9e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009ca2:	6a1a      	ldr	r2, [r3, #32]
 8009ca4:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009ca8:	f000 fa6c 	bl	800a184 <USBD_LL_DataInStage>
}
 8009cac:	bd08      	pop	{r3, pc}

08009cae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cae:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009cb0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009cb4:	f000 f9b4 	bl	800a020 <USBD_LL_SOF>
}
 8009cb8:	bd08      	pop	{r3, pc}

08009cba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cba:	b510      	push	{r4, lr}
 8009cbc:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009cbe:	79c3      	ldrb	r3, [r0, #7]
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d109      	bne.n	8009cd8 <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8009cca:	f000 f98c 	bl	8009fe6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009cce:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8009cd2:	f000 f956 	bl	8009f82 <USBD_LL_Reset>
}
 8009cd6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8009cd8:	f7f9 f86c 	bl	8002db4 <Error_Handler>
 8009cdc:	e7f2      	b.n	8009cc4 <HAL_PCD_ResetCallback+0xa>
	...

08009ce0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce0:	b510      	push	{r4, lr}
 8009ce2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ce4:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009ce8:	f000 f980 	bl	8009fec <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009cec:	6822      	ldr	r2, [r4, #0]
 8009cee:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8009cf2:	f043 0301 	orr.w	r3, r3, #1
 8009cf6:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009cfa:	7ae3      	ldrb	r3, [r4, #11]
 8009cfc:	b123      	cbz	r3, 8009d08 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cfe:	4a03      	ldr	r2, [pc, #12]	@ (8009d0c <HAL_PCD_SuspendCallback+0x2c>)
 8009d00:	6913      	ldr	r3, [r2, #16]
 8009d02:	f043 0306 	orr.w	r3, r3, #6
 8009d06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d08:	bd10      	pop	{r4, pc}
 8009d0a:	bf00      	nop
 8009d0c:	e000ed00 	.word	0xe000ed00

08009d10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d12:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009d16:	f000 f977 	bl	800a008 <USBD_LL_Resume>
}
 8009d1a:	bd08      	pop	{r3, pc}

08009d1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d1c:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d1e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009d22:	f000 f9a3 	bl	800a06c <USBD_LL_IsoOUTIncomplete>
}
 8009d26:	bd08      	pop	{r3, pc}

08009d28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d28:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d2a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009d2e:	f000 f987 	bl	800a040 <USBD_LL_IsoINIncomplete>
}
 8009d32:	bd08      	pop	{r3, pc}

08009d34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d34:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d36:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009d3a:	f000 f9ad 	bl	800a098 <USBD_LL_DevConnected>
}
 8009d3e:	bd08      	pop	{r3, pc}

08009d40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d40:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d42:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009d46:	f000 f9a9 	bl	800a09c <USBD_LL_DevDisconnected>
}
 8009d4a:	bd08      	pop	{r3, pc}

08009d4c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d4c:	7802      	ldrb	r2, [r0, #0]
 8009d4e:	b10a      	cbz	r2, 8009d54 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8009d50:	2000      	movs	r0, #0
 8009d52:	4770      	bx	lr
{
 8009d54:	b510      	push	{r4, lr}
 8009d56:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8009d58:	4815      	ldr	r0, [pc, #84]	@ (8009db0 <USBD_LL_Init+0x64>)
 8009d5a:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d5e:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d62:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8009d66:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009d68:	2304      	movs	r3, #4
 8009d6a:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d6c:	2202      	movs	r2, #2
 8009d6e:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d70:	2300      	movs	r3, #0
 8009d72:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d74:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d76:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009d78:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009d7a:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009d7c:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009d7e:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009d80:	f7fb f9a4 	bl	80050cc <HAL_PCD_Init>
 8009d84:	b980      	cbnz	r0, 8009da8 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009d86:	4c0a      	ldr	r4, [pc, #40]	@ (8009db0 <USBD_LL_Init+0x64>)
 8009d88:	2180      	movs	r1, #128	@ 0x80
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f7fb ff6d 	bl	8005c6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009d90:	2240      	movs	r2, #64	@ 0x40
 8009d92:	2100      	movs	r1, #0
 8009d94:	4620      	mov	r0, r4
 8009d96:	f7fb ff42 	bl	8005c1e <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009d9a:	2280      	movs	r2, #128	@ 0x80
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f7fb ff3d 	bl	8005c1e <HAL_PCDEx_SetTxFiFo>
}
 8009da4:	2000      	movs	r0, #0
 8009da6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8009da8:	f7f9 f804 	bl	8002db4 <Error_Handler>
 8009dac:	e7eb      	b.n	8009d86 <USBD_LL_Init+0x3a>
 8009dae:	bf00      	nop
 8009db0:	200083bc 	.word	0x200083bc

08009db4 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009db4:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8009db8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8009dbc:	d108      	bne.n	8009dd0 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009dbe:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8009dc2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8009dc6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009dca:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8009dce:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009dd0:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8009dd4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8009dd8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009ddc:	7d98      	ldrb	r0, [r3, #22]
 8009dde:	4770      	bx	lr

08009de0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009de0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009de2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009de6:	f7fb fb75 	bl	80054d4 <HAL_PCD_EP_GetRxCount>
}
 8009dea:	bd08      	pop	{r3, pc}

08009dec <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8009dec:	4800      	ldr	r0, [pc, #0]	@ (8009df0 <USBD_static_malloc+0x4>)
 8009dee:	4770      	bx	lr
 8009df0:	2000819c 	.word	0x2000819c

08009df4 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8009df4:	4770      	bx	lr

08009df6 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8009df6:	2803      	cmp	r0, #3
 8009df8:	d805      	bhi.n	8009e06 <USBD_Get_USB_Status+0x10>
 8009dfa:	e8df f000 	tbb	[pc, r0]
 8009dfe:	0405      	.short	0x0405
 8009e00:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e02:	2001      	movs	r0, #1
    break;
 8009e04:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8009e06:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8009e08:	4770      	bx	lr

08009e0a <USBD_LL_Start>:
{
 8009e0a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8009e0c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009e10:	f7fb f9dd 	bl	80051ce <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e14:	f7ff ffef 	bl	8009df6 <USBD_Get_USB_Status>
}
 8009e18:	bd08      	pop	{r3, pc}

08009e1a <USBD_LL_OpenEP>:
{
 8009e1a:	b508      	push	{r3, lr}
 8009e1c:	4694      	mov	ip, r2
 8009e1e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e20:	4663      	mov	r3, ip
 8009e22:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009e26:	f7fb fab2 	bl	800538e <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e2a:	f7ff ffe4 	bl	8009df6 <USBD_Get_USB_Status>
}
 8009e2e:	bd08      	pop	{r3, pc}

08009e30 <USBD_LL_CloseEP>:
{
 8009e30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e32:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009e36:	f7fb faf0 	bl	800541a <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e3a:	f7ff ffdc 	bl	8009df6 <USBD_Get_USB_Status>
}
 8009e3e:	bd08      	pop	{r3, pc}

08009e40 <USBD_LL_StallEP>:
{
 8009e40:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e42:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009e46:	f7fb fb73 	bl	8005530 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e4a:	f7ff ffd4 	bl	8009df6 <USBD_Get_USB_Status>
}
 8009e4e:	bd08      	pop	{r3, pc}

08009e50 <USBD_LL_ClearStallEP>:
{
 8009e50:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e52:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009e56:	f7fb fbae 	bl	80055b6 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e5a:	f7ff ffcc 	bl	8009df6 <USBD_Get_USB_Status>
}
 8009e5e:	bd08      	pop	{r3, pc}

08009e60 <USBD_LL_SetUSBAddress>:
{
 8009e60:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e62:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009e66:	f7fb fa7f 	bl	8005368 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e6a:	f7ff ffc4 	bl	8009df6 <USBD_Get_USB_Status>
}
 8009e6e:	bd08      	pop	{r3, pc}

08009e70 <USBD_LL_Transmit>:
{
 8009e70:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e72:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009e76:	f7fb fb36 	bl	80054e6 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e7a:	f7ff ffbc 	bl	8009df6 <USBD_Get_USB_Status>
}
 8009e7e:	bd08      	pop	{r3, pc}

08009e80 <USBD_LL_PrepareReceive>:
{
 8009e80:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e82:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009e86:	f7fb fb00 	bl	800548a <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e8a:	f7ff ffb4 	bl	8009df6 <USBD_Get_USB_Status>
}
 8009e8e:	bd08      	pop	{r3, pc}

08009e90 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009e90:	b198      	cbz	r0, 8009eba <USBD_Init+0x2a>
{
 8009e92:	b508      	push	{r3, lr}
 8009e94:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009e96:	2000      	movs	r0, #0
 8009e98:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009e9c:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009ea0:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ea4:	b109      	cbz	r1, 8009eaa <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8009ea6:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009eaa:	2101      	movs	r1, #1
 8009eac:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009eb0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7ff ff4a 	bl	8009d4c <USBD_LL_Init>

  return ret;
}
 8009eb8:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8009eba:	2003      	movs	r0, #3
}
 8009ebc:	4770      	bx	lr

08009ebe <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ebe:	b510      	push	{r4, lr}
 8009ec0:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8009ec8:	b1b9      	cbz	r1, 8009efa <USBD_RegisterClass+0x3c>
 8009eca:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009ecc:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009ed0:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8009ed4:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8009ed6:	b143      	cbz	r3, 8009eea <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009ed8:	32ae      	adds	r2, #174	@ 0xae
 8009eda:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8009ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee0:	f10d 0006 	add.w	r0, sp, #6
 8009ee4:	4798      	blx	r3
 8009ee6:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009eea:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8009eee:	3301      	adds	r3, #1
 8009ef0:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8009ef4:	2000      	movs	r0, #0
}
 8009ef6:	b002      	add	sp, #8
 8009ef8:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8009efa:	2003      	movs	r0, #3
 8009efc:	e7fb      	b.n	8009ef6 <USBD_RegisterClass+0x38>

08009efe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009efe:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009f00:	f7ff ff83 	bl	8009e0a <USBD_LL_Start>
}
 8009f04:	bd08      	pop	{r3, pc}

08009f06 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f06:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009f08:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009f0c:	b113      	cbz	r3, 8009f14 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8009f12:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8009f14:	2000      	movs	r0, #0
 8009f16:	e7fc      	b.n	8009f12 <USBD_SetClassConfig+0xc>

08009f18 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f18:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009f1a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	4798      	blx	r3
 8009f22:	b900      	cbnz	r0, 8009f26 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8009f24:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 8009f26:	2003      	movs	r0, #3
 8009f28:	e7fc      	b.n	8009f24 <USBD_ClrClassConfig+0xc>

08009f2a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f2a:	b538      	push	{r3, r4, r5, lr}
 8009f2c:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f2e:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8009f32:	4628      	mov	r0, r5
 8009f34:	f000 f9bf 	bl	800a2b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f3e:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8009f42:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f46:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8009f4a:	f001 031f 	and.w	r3, r1, #31
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d007      	beq.n	8009f62 <USBD_LL_SetupStage+0x38>
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d00a      	beq.n	8009f6c <USBD_LL_SetupStage+0x42>
 8009f56:	b973      	cbnz	r3, 8009f76 <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f58:	4629      	mov	r1, r5
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 fb80 	bl	800a660 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8009f60:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f62:	4629      	mov	r1, r5
 8009f64:	4620      	mov	r0, r4
 8009f66:	f000 fbb6 	bl	800a6d6 <USBD_StdItfReq>
      break;
 8009f6a:	e7f9      	b.n	8009f60 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f000 fbf3 	bl	800a75a <USBD_StdEPReq>
      break;
 8009f74:	e7f4      	b.n	8009f60 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f76:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f7ff ff60 	bl	8009e40 <USBD_LL_StallEP>
      break;
 8009f80:	e7ee      	b.n	8009f60 <USBD_LL_SetupStage+0x36>

08009f82 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f84:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f86:	2301      	movs	r3, #1
 8009f88:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009f92:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f94:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009f98:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009f9c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009fa0:	b1db      	cbz	r3, 8009fda <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	b1db      	cbz	r3, 8009fde <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	4798      	blx	r3
 8009faa:	4607      	mov	r7, r0
 8009fac:	b9c8      	cbnz	r0, 8009fe2 <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fae:	2340      	movs	r3, #64	@ 0x40
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	f7ff ff30 	bl	8009e1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009fba:	2601      	movs	r6, #1
 8009fbc:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fc0:	2540      	movs	r5, #64	@ 0x40
 8009fc2:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fc6:	462b      	mov	r3, r5
 8009fc8:	2200      	movs	r2, #0
 8009fca:	2180      	movs	r1, #128	@ 0x80
 8009fcc:	4620      	mov	r0, r4
 8009fce:	f7ff ff24 	bl	8009e1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009fd2:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fd4:	6225      	str	r5, [r4, #32]

  return ret;
}
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8009fda:	2700      	movs	r7, #0
 8009fdc:	e7e7      	b.n	8009fae <USBD_LL_Reset+0x2c>
 8009fde:	2700      	movs	r7, #0
 8009fe0:	e7e5      	b.n	8009fae <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8009fe2:	2703      	movs	r7, #3
 8009fe4:	e7e3      	b.n	8009fae <USBD_LL_Reset+0x2c>

08009fe6 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8009fe6:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8009fe8:	2000      	movs	r0, #0
 8009fea:	4770      	bx	lr

08009fec <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009fec:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	d004      	beq.n	8009ffe <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009ff4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009ffe:	2304      	movs	r3, #4
 800a000:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800a004:	2000      	movs	r0, #0
 800a006:	4770      	bx	lr

0800a008 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a008:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a00c:	2b04      	cmp	r3, #4
 800a00e:	d001      	beq.n	800a014 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800a010:	2000      	movs	r0, #0
 800a012:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800a014:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 800a01e:	e7f7      	b.n	800a010 <USBD_LL_Resume+0x8>

0800a020 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a020:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a022:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a026:	2b03      	cmp	r3, #3
 800a028:	d001      	beq.n	800a02e <USBD_LL_SOF+0xe>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800a02a:	2000      	movs	r0, #0
 800a02c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 800a02e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0f9      	beq.n	800a02a <USBD_LL_SOF+0xa>
      if (pdev->pClass[0]->SOF != NULL)
 800a036:	69db      	ldr	r3, [r3, #28]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d0f6      	beq.n	800a02a <USBD_LL_SOF+0xa>
        (void)pdev->pClass[0]->SOF(pdev);
 800a03c:	4798      	blx	r3
 800a03e:	e7f4      	b.n	800a02a <USBD_LL_SOF+0xa>

0800a040 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a040:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800a042:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a046:	33ae      	adds	r3, #174	@ 0xae
 800a048:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a04c:	b153      	cbz	r3, 800a064 <USBD_LL_IsoINIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a04e:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a052:	2a03      	cmp	r2, #3
 800a054:	d001      	beq.n	800a05a <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800a056:	2000      	movs	r0, #0
}
 800a058:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a05a:	6a1b      	ldr	r3, [r3, #32]
 800a05c:	b123      	cbz	r3, 800a068 <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a05e:	4798      	blx	r3
  return USBD_OK;
 800a060:	2000      	movs	r0, #0
 800a062:	e7f9      	b.n	800a058 <USBD_LL_IsoINIncomplete+0x18>
    return USBD_FAIL;
 800a064:	2003      	movs	r0, #3
 800a066:	e7f7      	b.n	800a058 <USBD_LL_IsoINIncomplete+0x18>
  return USBD_OK;
 800a068:	2000      	movs	r0, #0
 800a06a:	e7f5      	b.n	800a058 <USBD_LL_IsoINIncomplete+0x18>

0800a06c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a06c:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800a06e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a072:	33ae      	adds	r3, #174	@ 0xae
 800a074:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a078:	b153      	cbz	r3, 800a090 <USBD_LL_IsoOUTIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a07a:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a07e:	2a03      	cmp	r2, #3
 800a080:	d001      	beq.n	800a086 <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800a082:	2000      	movs	r0, #0
}
 800a084:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a088:	b123      	cbz	r3, 800a094 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a08a:	4798      	blx	r3
  return USBD_OK;
 800a08c:	2000      	movs	r0, #0
 800a08e:	e7f9      	b.n	800a084 <USBD_LL_IsoOUTIncomplete+0x18>
    return USBD_FAIL;
 800a090:	2003      	movs	r0, #3
 800a092:	e7f7      	b.n	800a084 <USBD_LL_IsoOUTIncomplete+0x18>
  return USBD_OK;
 800a094:	2000      	movs	r0, #0
 800a096:	e7f5      	b.n	800a084 <USBD_LL_IsoOUTIncomplete+0x18>

0800a098 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800a098:	2000      	movs	r0, #0
 800a09a:	4770      	bx	lr

0800a09c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a09c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a0a4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a0a8:	b123      	cbz	r3, 800a0b4 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	7901      	ldrb	r1, [r0, #4]
 800a0ae:	4798      	blx	r3
 800a0b0:	b910      	cbnz	r0, 800a0b8 <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800a0b2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	e7fc      	b.n	800a0b2 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 800a0b8:	2003      	movs	r0, #3
 800a0ba:	e7fa      	b.n	800a0b2 <USBD_LL_DevDisconnected+0x16>

0800a0bc <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a0bc:	2000      	movs	r0, #0
 800a0be:	4770      	bx	lr

0800a0c0 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	4770      	bx	lr

0800a0c4 <USBD_LL_DataOutStage>:
{
 800a0c4:	b538      	push	{r3, r4, r5, lr}
 800a0c6:	4604      	mov	r4, r0
  if (epnum == 0U)
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	2900      	cmp	r1, #0
 800a0cc:	d141      	bne.n	800a152 <USBD_LL_DataOutStage+0x8e>
 800a0ce:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a0d0:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800a0d4:	2a03      	cmp	r2, #3
 800a0d6:	d001      	beq.n	800a0dc <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 800a0d8:	4608      	mov	r0, r1
}
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800a0dc:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 800a0e0:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 800a0e4:	4291      	cmp	r1, r2
 800a0e6:	d809      	bhi.n	800a0fc <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 800a0e8:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 800a0ec:	f003 031f 	and.w	r3, r3, #31
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d00e      	beq.n	800a112 <USBD_LL_DataOutStage+0x4e>
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d01a      	beq.n	800a12e <USBD_LL_DataOutStage+0x6a>
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	e00f      	b.n	800a11c <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 800a0fc:	1a89      	subs	r1, r1, r2
 800a0fe:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a102:	428a      	cmp	r2, r1
 800a104:	bf28      	it	cs
 800a106:	460a      	movcs	r2, r1
 800a108:	4619      	mov	r1, r3
 800a10a:	f000 fd23 	bl	800ab54 <USBD_CtlContinueRx>
  return USBD_OK;
 800a10e:	4628      	mov	r0, r5
 800a110:	e7e3      	b.n	800a0da <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a112:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 800a116:	f7ff ffd1 	bl	800a0bc <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a11a:	b918      	cbnz	r0, 800a124 <USBD_LL_DataOutStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a11c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800a120:	2b03      	cmp	r3, #3
 800a122:	d009      	beq.n	800a138 <USBD_LL_DataOutStage+0x74>
        (void)USBD_CtlSendStatus(pdev);
 800a124:	4620      	mov	r0, r4
 800a126:	f000 fd1d 	bl	800ab64 <USBD_CtlSendStatus>
  return USBD_OK;
 800a12a:	4628      	mov	r0, r5
 800a12c:	e7d5      	b.n	800a0da <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a12e:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 800a132:	f7ff ffc5 	bl	800a0c0 <USBD_CoreFindEP>
            break;
 800a136:	e7f0      	b.n	800a11a <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a138:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800a13c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a140:	691a      	ldr	r2, [r3, #16]
 800a142:	2a00      	cmp	r2, #0
 800a144:	d0ee      	beq.n	800a124 <USBD_LL_DataOutStage+0x60>
              pdev->classId = idx;
 800a146:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	4620      	mov	r0, r4
 800a14e:	4798      	blx	r3
 800a150:	e7e8      	b.n	800a124 <USBD_LL_DataOutStage+0x60>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a152:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800a156:	f7ff ffb3 	bl	800a0c0 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a15a:	b988      	cbnz	r0, 800a180 <USBD_LL_DataOutStage+0xbc>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a15c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800a160:	2b03      	cmp	r3, #3
 800a162:	d1ba      	bne.n	800a0da <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 800a164:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800a168:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a16c:	699a      	ldr	r2, [r3, #24]
 800a16e:	2a00      	cmp	r2, #0
 800a170:	d0b3      	beq.n	800a0da <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 800a172:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	4629      	mov	r1, r5
 800a17a:	4620      	mov	r0, r4
 800a17c:	4798      	blx	r3
      if (ret != USBD_OK)
 800a17e:	e7ac      	b.n	800a0da <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 800a180:	2000      	movs	r0, #0
 800a182:	e7aa      	b.n	800a0da <USBD_LL_DataOutStage+0x16>

0800a184 <USBD_LL_DataInStage>:
{
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4604      	mov	r4, r0
  if (epnum == 0U)
 800a188:	460d      	mov	r5, r1
 800a18a:	2900      	cmp	r1, #0
 800a18c:	d14a      	bne.n	800a224 <USBD_LL_DataInStage+0xa0>
 800a18e:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a190:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800a194:	2a02      	cmp	r2, #2
 800a196:	d007      	beq.n	800a1a8 <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 800a198:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 800a19c:	b118      	cbz	r0, 800a1a6 <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 800a1a4:	4628      	mov	r0, r5
}
 800a1a6:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800a1a8:	69c2      	ldr	r2, [r0, #28]
 800a1aa:	6a01      	ldr	r1, [r0, #32]
 800a1ac:	428a      	cmp	r2, r1
 800a1ae:	d80d      	bhi.n	800a1cc <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 800a1b0:	428a      	cmp	r2, r1
 800a1b2:	d017      	beq.n	800a1e4 <USBD_LL_DataInStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1b4:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800a1b8:	2b03      	cmp	r3, #3
 800a1ba:	d027      	beq.n	800a20c <USBD_LL_DataInStage+0x88>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1bc:	2180      	movs	r1, #128	@ 0x80
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f7ff fe3e 	bl	8009e40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f000 fcd8 	bl	800ab7a <USBD_CtlReceiveStatus>
 800a1ca:	e7e5      	b.n	800a198 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800a1cc:	1a52      	subs	r2, r2, r1
 800a1ce:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	f000 fca8 	bl	800ab26 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	461a      	mov	r2, r3
 800a1da:	4619      	mov	r1, r3
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f7ff fe4f 	bl	8009e80 <USBD_LL_PrepareReceive>
 800a1e2:	e7d9      	b.n	800a198 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800a1e4:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800a1e6:	4299      	cmp	r1, r3
 800a1e8:	d8e4      	bhi.n	800a1b4 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 800a1ea:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d2e0      	bcs.n	800a1b4 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	f000 fc96 	bl	800ab26 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a200:	460b      	mov	r3, r1
 800a202:	460a      	mov	r2, r1
 800a204:	4620      	mov	r0, r4
 800a206:	f7ff fe3b 	bl	8009e80 <USBD_LL_PrepareReceive>
 800a20a:	e7c5      	b.n	800a198 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a20c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800a210:	68da      	ldr	r2, [r3, #12]
 800a212:	2a00      	cmp	r2, #0
 800a214:	d0d2      	beq.n	800a1bc <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 800a216:	2200      	movs	r2, #0
 800a218:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	4620      	mov	r0, r4
 800a220:	4798      	blx	r3
 800a222:	e7cb      	b.n	800a1bc <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a224:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800a228:	f7ff ff4a 	bl	800a0c0 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a22c:	b988      	cbnz	r0, 800a252 <USBD_LL_DataInStage+0xce>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a22e:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800a232:	2b03      	cmp	r3, #3
 800a234:	d1b7      	bne.n	800a1a6 <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 800a236:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800a23a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a23e:	695a      	ldr	r2, [r3, #20]
 800a240:	2a00      	cmp	r2, #0
 800a242:	d0b0      	beq.n	800a1a6 <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 800a244:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a248:	695b      	ldr	r3, [r3, #20]
 800a24a:	4629      	mov	r1, r5
 800a24c:	4620      	mov	r0, r4
 800a24e:	4798      	blx	r3
          if (ret != USBD_OK)
 800a250:	e7a9      	b.n	800a1a6 <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 800a252:	2000      	movs	r0, #0
 800a254:	e7a7      	b.n	800a1a6 <USBD_LL_DataInStage+0x22>

0800a256 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800a256:	880b      	ldrh	r3, [r1, #0]
 800a258:	7802      	ldrb	r2, [r0, #0]
 800a25a:	4413      	add	r3, r2
 800a25c:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a25e:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 800a260:	4418      	add	r0, r3
 800a262:	4770      	bx	lr

0800a264 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 800a264:	8842      	ldrh	r2, [r0, #2]
 800a266:	7803      	ldrb	r3, [r0, #0]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d918      	bls.n	800a29e <USBD_GetEpDesc+0x3a>
{
 800a26c:	b530      	push	{r4, r5, lr}
 800a26e:	b083      	sub	sp, #12
 800a270:	4604      	mov	r4, r0
 800a272:	460d      	mov	r5, r1
    ptr = desc->bLength;
 800a274:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 800a278:	8863      	ldrh	r3, [r4, #2]
 800a27a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d20a      	bcs.n	800a298 <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a282:	f10d 0106 	add.w	r1, sp, #6
 800a286:	f7ff ffe6 	bl	800a256 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a28a:	7843      	ldrb	r3, [r0, #1]
 800a28c:	2b05      	cmp	r3, #5
 800a28e:	d1f3      	bne.n	800a278 <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800a290:	7883      	ldrb	r3, [r0, #2]
 800a292:	42ab      	cmp	r3, r5
 800a294:	d1f0      	bne.n	800a278 <USBD_GetEpDesc+0x14>
 800a296:	e000      	b.n	800a29a <USBD_GetEpDesc+0x36>
 800a298:	2000      	movs	r0, #0
}
 800a29a:	b003      	add	sp, #12
 800a29c:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a29e:	2000      	movs	r0, #0
}
 800a2a0:	4770      	bx	lr

0800a2a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a2a2:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800a2a4:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800a2a6:	e002      	b.n	800a2ae <USBD_GetLen+0xc>
  {
    len++;
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	b2c0      	uxtb	r0, r0
    pbuff++;
 800a2ac:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800a2ae:	781a      	ldrb	r2, [r3, #0]
 800a2b0:	2a00      	cmp	r2, #0
 800a2b2:	d1f9      	bne.n	800a2a8 <USBD_GetLen+0x6>
  }

  return len;
}
 800a2b4:	4770      	bx	lr

0800a2b6 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800a2b6:	780b      	ldrb	r3, [r1, #0]
 800a2b8:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800a2ba:	784b      	ldrb	r3, [r1, #1]
 800a2bc:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800a2be:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800a2c0:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a2c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800a2c6:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800a2c8:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800a2ca:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a2cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800a2d0:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800a2d2:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800a2d4:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a2d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800a2da:	80c3      	strh	r3, [r0, #6]
}
 800a2dc:	4770      	bx	lr

0800a2de <USBD_CtlError>:
{
 800a2de:	b510      	push	{r4, lr}
 800a2e0:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2e2:	2180      	movs	r1, #128	@ 0x80
 800a2e4:	f7ff fdac 	bl	8009e40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	f7ff fda8 	bl	8009e40 <USBD_LL_StallEP>
}
 800a2f0:	bd10      	pop	{r4, pc}

0800a2f2 <USBD_GetDescriptor>:
{
 800a2f2:	b530      	push	{r4, r5, lr}
 800a2f4:	b083      	sub	sp, #12
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800a300:	884a      	ldrh	r2, [r1, #2]
 800a302:	0a13      	lsrs	r3, r2, #8
 800a304:	3b01      	subs	r3, #1
 800a306:	2b06      	cmp	r3, #6
 800a308:	f200 80aa 	bhi.w	800a460 <USBD_GetDescriptor+0x16e>
 800a30c:	e8df f003 	tbb	[pc, r3]
 800a310:	a8321e04 	.word	0xa8321e04
 800a314:	8ca8      	.short	0x8ca8
 800a316:	99          	.byte	0x99
 800a317:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a318:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f10d 0106 	add.w	r1, sp, #6
 800a322:	7c00      	ldrb	r0, [r0, #16]
 800a324:	4798      	blx	r3
  if (req->wLength != 0U)
 800a326:	88ea      	ldrh	r2, [r5, #6]
 800a328:	2a00      	cmp	r2, #0
 800a32a:	f000 80a3 	beq.w	800a474 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 800a32e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a332:	2b00      	cmp	r3, #0
 800a334:	f000 8099 	beq.w	800a46a <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 800a338:	429a      	cmp	r2, r3
 800a33a:	bf28      	it	cs
 800a33c:	461a      	movcs	r2, r3
 800a33e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a342:	4601      	mov	r1, r0
 800a344:	4620      	mov	r0, r4
 800a346:	f000 fbe1 	bl	800ab0c <USBD_CtlSendData>
 800a34a:	e08c      	b.n	800a466 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a34c:	7c03      	ldrb	r3, [r0, #16]
 800a34e:	b943      	cbnz	r3, 800a362 <USBD_GetDescriptor+0x70>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a350:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a356:	f10d 0006 	add.w	r0, sp, #6
 800a35a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a35c:	2302      	movs	r3, #2
 800a35e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a360:	e7e1      	b.n	800a326 <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a362:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a368:	f10d 0006 	add.w	r0, sp, #6
 800a36c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a36e:	2302      	movs	r3, #2
 800a370:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a372:	e7d8      	b.n	800a326 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800a374:	b2d2      	uxtb	r2, r2
 800a376:	2a05      	cmp	r2, #5
 800a378:	d852      	bhi.n	800a420 <USBD_GetDescriptor+0x12e>
 800a37a:	e8df f002 	tbb	[pc, r2]
 800a37e:	1003      	.short	0x1003
 800a380:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a384:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	b123      	cbz	r3, 800a396 <USBD_GetDescriptor+0xa4>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a38c:	f10d 0106 	add.w	r1, sp, #6
 800a390:	7c00      	ldrb	r0, [r0, #16]
 800a392:	4798      	blx	r3
  if (err != 0U)
 800a394:	e7c7      	b.n	800a326 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a396:	4629      	mov	r1, r5
 800a398:	f7ff ffa1 	bl	800a2de <USBD_CtlError>
  if (err != 0U)
 800a39c:	e063      	b.n	800a466 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a39e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	b123      	cbz	r3, 800a3b0 <USBD_GetDescriptor+0xbe>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a3a6:	f10d 0106 	add.w	r1, sp, #6
 800a3aa:	7c00      	ldrb	r0, [r0, #16]
 800a3ac:	4798      	blx	r3
  if (err != 0U)
 800a3ae:	e7ba      	b.n	800a326 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	f7ff ff94 	bl	800a2de <USBD_CtlError>
  if (err != 0U)
 800a3b6:	e056      	b.n	800a466 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a3b8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	b123      	cbz	r3, 800a3ca <USBD_GetDescriptor+0xd8>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a3c0:	f10d 0106 	add.w	r1, sp, #6
 800a3c4:	7c00      	ldrb	r0, [r0, #16]
 800a3c6:	4798      	blx	r3
  if (err != 0U)
 800a3c8:	e7ad      	b.n	800a326 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	f7ff ff87 	bl	800a2de <USBD_CtlError>
  if (err != 0U)
 800a3d0:	e049      	b.n	800a466 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a3d2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	b123      	cbz	r3, 800a3e4 <USBD_GetDescriptor+0xf2>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a3da:	f10d 0106 	add.w	r1, sp, #6
 800a3de:	7c00      	ldrb	r0, [r0, #16]
 800a3e0:	4798      	blx	r3
  if (err != 0U)
 800a3e2:	e7a0      	b.n	800a326 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a3e4:	4629      	mov	r1, r5
 800a3e6:	f7ff ff7a 	bl	800a2de <USBD_CtlError>
  if (err != 0U)
 800a3ea:	e03c      	b.n	800a466 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a3ec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	b123      	cbz	r3, 800a3fe <USBD_GetDescriptor+0x10c>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a3f4:	f10d 0106 	add.w	r1, sp, #6
 800a3f8:	7c00      	ldrb	r0, [r0, #16]
 800a3fa:	4798      	blx	r3
  if (err != 0U)
 800a3fc:	e793      	b.n	800a326 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a3fe:	4629      	mov	r1, r5
 800a400:	f7ff ff6d 	bl	800a2de <USBD_CtlError>
  if (err != 0U)
 800a404:	e02f      	b.n	800a466 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a406:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	b123      	cbz	r3, 800a418 <USBD_GetDescriptor+0x126>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a40e:	f10d 0106 	add.w	r1, sp, #6
 800a412:	7c00      	ldrb	r0, [r0, #16]
 800a414:	4798      	blx	r3
  if (err != 0U)
 800a416:	e786      	b.n	800a326 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a418:	4629      	mov	r1, r5
 800a41a:	f7ff ff60 	bl	800a2de <USBD_CtlError>
  if (err != 0U)
 800a41e:	e022      	b.n	800a466 <USBD_GetDescriptor+0x174>
          USBD_CtlError(pdev, req);
 800a420:	4629      	mov	r1, r5
 800a422:	f7ff ff5c 	bl	800a2de <USBD_CtlError>
  if (err != 0U)
 800a426:	e01e      	b.n	800a466 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a428:	7c03      	ldrb	r3, [r0, #16]
 800a42a:	b933      	cbnz	r3, 800a43a <USBD_GetDescriptor+0x148>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a42c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a432:	f10d 0006 	add.w	r0, sp, #6
 800a436:	4798      	blx	r3
  if (err != 0U)
 800a438:	e775      	b.n	800a326 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800a43a:	4629      	mov	r1, r5
 800a43c:	f7ff ff4f 	bl	800a2de <USBD_CtlError>
  if (err != 0U)
 800a440:	e011      	b.n	800a466 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a442:	7c03      	ldrb	r3, [r0, #16]
 800a444:	b943      	cbnz	r3, 800a458 <USBD_GetDescriptor+0x166>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a446:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a44a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a44c:	f10d 0006 	add.w	r0, sp, #6
 800a450:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a452:	2307      	movs	r3, #7
 800a454:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a456:	e766      	b.n	800a326 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800a458:	4629      	mov	r1, r5
 800a45a:	f7ff ff40 	bl	800a2de <USBD_CtlError>
  if (err != 0U)
 800a45e:	e002      	b.n	800a466 <USBD_GetDescriptor+0x174>
      USBD_CtlError(pdev, req);
 800a460:	4629      	mov	r1, r5
 800a462:	f7ff ff3c 	bl	800a2de <USBD_CtlError>
}
 800a466:	b003      	add	sp, #12
 800a468:	bd30      	pop	{r4, r5, pc}
      USBD_CtlError(pdev, req);
 800a46a:	4629      	mov	r1, r5
 800a46c:	4620      	mov	r0, r4
 800a46e:	f7ff ff36 	bl	800a2de <USBD_CtlError>
 800a472:	e7f8      	b.n	800a466 <USBD_GetDescriptor+0x174>
    (void)USBD_CtlSendStatus(pdev);
 800a474:	4620      	mov	r0, r4
 800a476:	f000 fb75 	bl	800ab64 <USBD_CtlSendStatus>
 800a47a:	e7f4      	b.n	800a466 <USBD_GetDescriptor+0x174>

0800a47c <USBD_SetAddress>:
{
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a480:	888b      	ldrh	r3, [r1, #4]
 800a482:	b9f3      	cbnz	r3, 800a4c2 <USBD_SetAddress+0x46>
 800a484:	88cb      	ldrh	r3, [r1, #6]
 800a486:	b9e3      	cbnz	r3, 800a4c2 <USBD_SetAddress+0x46>
 800a488:	884b      	ldrh	r3, [r1, #2]
 800a48a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a48c:	d819      	bhi.n	800a4c2 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a48e:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a492:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a496:	2b03      	cmp	r3, #3
 800a498:	d00c      	beq.n	800a4b4 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 800a49a:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a49e:	4629      	mov	r1, r5
 800a4a0:	f7ff fcde 	bl	8009e60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f000 fb5d 	bl	800ab64 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800a4aa:	b135      	cbz	r5, 800a4ba <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a4b2:	e009      	b.n	800a4c8 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 800a4b4:	f7ff ff13 	bl	800a2de <USBD_CtlError>
 800a4b8:	e006      	b.n	800a4c8 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a4c0:	e002      	b.n	800a4c8 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f7ff ff0b 	bl	800a2de <USBD_CtlError>
}
 800a4c8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a4cc <USBD_SetConfig>:
{
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800a4d2:	788d      	ldrb	r5, [r1, #2]
 800a4d4:	4b2f      	ldr	r3, [pc, #188]	@ (800a594 <USBD_SetConfig+0xc8>)
 800a4d6:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4d8:	2d01      	cmp	r5, #1
 800a4da:	d810      	bhi.n	800a4fe <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800a4dc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a4e0:	b2da      	uxtb	r2, r3
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d00f      	beq.n	800a506 <USBD_SetConfig+0x3a>
 800a4e6:	2a03      	cmp	r2, #3
 800a4e8:	d026      	beq.n	800a538 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 800a4ea:	f7ff fef8 	bl	800a2de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4ee:	4b29      	ldr	r3, [pc, #164]	@ (800a594 <USBD_SetConfig+0xc8>)
 800a4f0:	7819      	ldrb	r1, [r3, #0]
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f7ff fd10 	bl	8009f18 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a4f8:	2503      	movs	r5, #3
}
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800a4fe:	f7ff feee 	bl	800a2de <USBD_CtlError>
    return USBD_FAIL;
 800a502:	2503      	movs	r5, #3
 800a504:	e7f9      	b.n	800a4fa <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800a506:	b1a5      	cbz	r5, 800a532 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 800a508:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a50a:	4629      	mov	r1, r5
 800a50c:	f7ff fcfb 	bl	8009f06 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a510:	4605      	mov	r5, r0
 800a512:	b138      	cbz	r0, 800a524 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 800a514:	4631      	mov	r1, r6
 800a516:	4620      	mov	r0, r4
 800a518:	f7ff fee1 	bl	800a2de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a51c:	2302      	movs	r3, #2
 800a51e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a522:	e7ea      	b.n	800a4fa <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a524:	4620      	mov	r0, r4
 800a526:	f000 fb1d 	bl	800ab64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a52a:	2303      	movs	r3, #3
 800a52c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a530:	e7e3      	b.n	800a4fa <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a532:	f000 fb17 	bl	800ab64 <USBD_CtlSendStatus>
 800a536:	e7e0      	b.n	800a4fa <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800a538:	b1cd      	cbz	r5, 800a56e <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 800a53a:	6841      	ldr	r1, [r0, #4]
 800a53c:	428d      	cmp	r5, r1
 800a53e:	d025      	beq.n	800a58c <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a540:	b2c9      	uxtb	r1, r1
 800a542:	f7ff fce9 	bl	8009f18 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a546:	4b13      	ldr	r3, [pc, #76]	@ (800a594 <USBD_SetConfig+0xc8>)
 800a548:	7819      	ldrb	r1, [r3, #0]
 800a54a:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a54c:	4620      	mov	r0, r4
 800a54e:	f7ff fcda 	bl	8009f06 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a552:	4605      	mov	r5, r0
 800a554:	b1b0      	cbz	r0, 800a584 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 800a556:	4631      	mov	r1, r6
 800a558:	4620      	mov	r0, r4
 800a55a:	f7ff fec0 	bl	800a2de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a55e:	7921      	ldrb	r1, [r4, #4]
 800a560:	4620      	mov	r0, r4
 800a562:	f7ff fcd9 	bl	8009f18 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a566:	2302      	movs	r3, #2
 800a568:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a56c:	e7c5      	b.n	800a4fa <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a56e:	2302      	movs	r3, #2
 800a570:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a574:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a576:	4629      	mov	r1, r5
 800a578:	f7ff fcce 	bl	8009f18 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a57c:	4620      	mov	r0, r4
 800a57e:	f000 faf1 	bl	800ab64 <USBD_CtlSendStatus>
 800a582:	e7ba      	b.n	800a4fa <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a584:	4620      	mov	r0, r4
 800a586:	f000 faed 	bl	800ab64 <USBD_CtlSendStatus>
 800a58a:	e7b6      	b.n	800a4fa <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a58c:	f000 faea 	bl	800ab64 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a590:	2500      	movs	r5, #0
 800a592:	e7b2      	b.n	800a4fa <USBD_SetConfig+0x2e>
 800a594:	200088a0 	.word	0x200088a0

0800a598 <USBD_GetConfig>:
{
 800a598:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800a59a:	88cb      	ldrh	r3, [r1, #6]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d10b      	bne.n	800a5b8 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800a5a0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d909      	bls.n	800a5be <USBD_GetConfig+0x26>
 800a5aa:	2a03      	cmp	r2, #3
 800a5ac:	d111      	bne.n	800a5d2 <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	1d01      	adds	r1, r0, #4
 800a5b2:	f000 faab 	bl	800ab0c <USBD_CtlSendData>
        break;
 800a5b6:	e001      	b.n	800a5bc <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800a5b8:	f7ff fe91 	bl	800a2de <USBD_CtlError>
}
 800a5bc:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800a5be:	b252      	sxtb	r2, r2
 800a5c0:	b13a      	cbz	r2, 800a5d2 <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 800a5c2:	4601      	mov	r1, r0
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f000 fa9e 	bl	800ab0c <USBD_CtlSendData>
        break;
 800a5d0:	e7f4      	b.n	800a5bc <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 800a5d2:	f7ff fe84 	bl	800a2de <USBD_CtlError>
}
 800a5d6:	e7f1      	b.n	800a5bc <USBD_GetConfig+0x24>

0800a5d8 <USBD_GetStatus>:
{
 800a5d8:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a5da:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d812      	bhi.n	800a60a <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800a5e4:	88cb      	ldrh	r3, [r1, #6]
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d10c      	bne.n	800a604 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800a5ee:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800a5f2:	b10b      	cbz	r3, 800a5f8 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	f100 010c 	add.w	r1, r0, #12
 800a5fe:	f000 fa85 	bl	800ab0c <USBD_CtlSendData>
}
 800a602:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800a604:	f7ff fe6b 	bl	800a2de <USBD_CtlError>
        break;
 800a608:	e7fb      	b.n	800a602 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800a60a:	f7ff fe68 	bl	800a2de <USBD_CtlError>
}
 800a60e:	e7f8      	b.n	800a602 <USBD_GetStatus+0x2a>

0800a610 <USBD_SetFeature>:
{
 800a610:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a612:	884b      	ldrh	r3, [r1, #2]
 800a614:	2b01      	cmp	r3, #1
 800a616:	d004      	beq.n	800a622 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d007      	beq.n	800a62c <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 800a61c:	f7ff fe5f 	bl	800a2de <USBD_CtlError>
}
 800a620:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800a622:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a626:	f000 fa9d 	bl	800ab64 <USBD_CtlSendStatus>
 800a62a:	e7f9      	b.n	800a620 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a62c:	888b      	ldrh	r3, [r1, #4]
 800a62e:	0a1b      	lsrs	r3, r3, #8
 800a630:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a634:	f000 fa96 	bl	800ab64 <USBD_CtlSendStatus>
 800a638:	e7f2      	b.n	800a620 <USBD_SetFeature+0x10>

0800a63a <USBD_ClrFeature>:
{
 800a63a:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a63c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a640:	3b01      	subs	r3, #1
 800a642:	2b02      	cmp	r3, #2
 800a644:	d809      	bhi.n	800a65a <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a646:	884b      	ldrh	r3, [r1, #2]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d000      	beq.n	800a64e <USBD_ClrFeature+0x14>
}
 800a64c:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800a64e:	2300      	movs	r3, #0
 800a650:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a654:	f000 fa86 	bl	800ab64 <USBD_CtlSendStatus>
 800a658:	e7f8      	b.n	800a64c <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800a65a:	f7ff fe40 	bl	800a2de <USBD_CtlError>
}
 800a65e:	e7f5      	b.n	800a64c <USBD_ClrFeature+0x12>

0800a660 <USBD_StdDevReq>:
{
 800a660:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a662:	780c      	ldrb	r4, [r1, #0]
 800a664:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800a668:	2c20      	cmp	r4, #32
 800a66a:	d006      	beq.n	800a67a <USBD_StdDevReq+0x1a>
 800a66c:	2c40      	cmp	r4, #64	@ 0x40
 800a66e:	d004      	beq.n	800a67a <USBD_StdDevReq+0x1a>
 800a670:	b16c      	cbz	r4, 800a68e <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 800a672:	f7ff fe34 	bl	800a2de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a676:	2400      	movs	r4, #0
      break;
 800a678:	e007      	b.n	800a68a <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a67a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a67e:	33ae      	adds	r3, #174	@ 0xae
 800a680:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	4798      	blx	r3
 800a688:	4604      	mov	r4, r0
}
 800a68a:	4620      	mov	r0, r4
 800a68c:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800a68e:	784d      	ldrb	r5, [r1, #1]
 800a690:	2d09      	cmp	r5, #9
 800a692:	d81d      	bhi.n	800a6d0 <USBD_StdDevReq+0x70>
 800a694:	e8df f005 	tbb	[pc, r5]
 800a698:	161c1912 	.word	0x161c1912
 800a69c:	1c05081c 	.word	0x1c05081c
 800a6a0:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800a6a2:	f7ff fe26 	bl	800a2f2 <USBD_GetDescriptor>
          break;
 800a6a6:	e7f0      	b.n	800a68a <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 800a6a8:	f7ff fee8 	bl	800a47c <USBD_SetAddress>
          break;
 800a6ac:	e7ed      	b.n	800a68a <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 800a6ae:	f7ff ff0d 	bl	800a4cc <USBD_SetConfig>
 800a6b2:	4604      	mov	r4, r0
          break;
 800a6b4:	e7e9      	b.n	800a68a <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 800a6b6:	f7ff ff6f 	bl	800a598 <USBD_GetConfig>
          break;
 800a6ba:	e7e6      	b.n	800a68a <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 800a6bc:	f7ff ff8c 	bl	800a5d8 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a6c0:	462c      	mov	r4, r5
          break;
 800a6c2:	e7e2      	b.n	800a68a <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 800a6c4:	f7ff ffa4 	bl	800a610 <USBD_SetFeature>
          break;
 800a6c8:	e7df      	b.n	800a68a <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 800a6ca:	f7ff ffb6 	bl	800a63a <USBD_ClrFeature>
          break;
 800a6ce:	e7dc      	b.n	800a68a <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 800a6d0:	f7ff fe05 	bl	800a2de <USBD_CtlError>
          break;
 800a6d4:	e7d9      	b.n	800a68a <USBD_StdDevReq+0x2a>

0800a6d6 <USBD_StdItfReq>:
{
 800a6d6:	b570      	push	{r4, r5, r6, lr}
 800a6d8:	4605      	mov	r5, r0
 800a6da:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6dc:	780b      	ldrb	r3, [r1, #0]
 800a6de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a6e2:	2b20      	cmp	r3, #32
 800a6e4:	d007      	beq.n	800a6f6 <USBD_StdItfReq+0x20>
 800a6e6:	2b40      	cmp	r3, #64	@ 0x40
 800a6e8:	d005      	beq.n	800a6f6 <USBD_StdItfReq+0x20>
 800a6ea:	b123      	cbz	r3, 800a6f6 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800a6ec:	f7ff fdf7 	bl	800a2de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a6f0:	2600      	movs	r6, #0
}
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800a6f6:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d826      	bhi.n	800a74e <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a700:	7921      	ldrb	r1, [r4, #4]
 800a702:	2901      	cmp	r1, #1
 800a704:	d905      	bls.n	800a712 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 800a706:	4621      	mov	r1, r4
 800a708:	4628      	mov	r0, r5
 800a70a:	f7ff fde8 	bl	800a2de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a70e:	2600      	movs	r6, #0
 800a710:	e7ef      	b.n	800a6f2 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a712:	4628      	mov	r0, r5
 800a714:	f7ff fcd2 	bl	800a0bc <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a718:	b968      	cbnz	r0, 800a736 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 800a71a:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 800a71e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a722:	6891      	ldr	r1, [r2, #8]
 800a724:	b189      	cbz	r1, 800a74a <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 800a726:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a72a:	6893      	ldr	r3, [r2, #8]
 800a72c:	4621      	mov	r1, r4
 800a72e:	4628      	mov	r0, r5
 800a730:	4798      	blx	r3
 800a732:	4606      	mov	r6, r0
 800a734:	e000      	b.n	800a738 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 800a736:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a738:	88e3      	ldrh	r3, [r4, #6]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1d9      	bne.n	800a6f2 <USBD_StdItfReq+0x1c>
 800a73e:	2e00      	cmp	r6, #0
 800a740:	d1d7      	bne.n	800a6f2 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800a742:	4628      	mov	r0, r5
 800a744:	f000 fa0e 	bl	800ab64 <USBD_CtlSendStatus>
 800a748:	e7d3      	b.n	800a6f2 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 800a74a:	2603      	movs	r6, #3
 800a74c:	e7f4      	b.n	800a738 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 800a74e:	4621      	mov	r1, r4
 800a750:	4628      	mov	r0, r5
 800a752:	f7ff fdc4 	bl	800a2de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a756:	2600      	movs	r6, #0
          break;
 800a758:	e7cb      	b.n	800a6f2 <USBD_StdItfReq+0x1c>

0800a75a <USBD_StdEPReq>:
{
 800a75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a75e:	4606      	mov	r6, r0
 800a760:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800a762:	888b      	ldrh	r3, [r1, #4]
 800a764:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a766:	780c      	ldrb	r4, [r1, #0]
 800a768:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800a76c:	2c20      	cmp	r4, #32
 800a76e:	d008      	beq.n	800a782 <USBD_StdEPReq+0x28>
 800a770:	2c40      	cmp	r4, #64	@ 0x40
 800a772:	d006      	beq.n	800a782 <USBD_StdEPReq+0x28>
 800a774:	b1dc      	cbz	r4, 800a7ae <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 800a776:	f7ff fdb2 	bl	800a2de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a77a:	2400      	movs	r4, #0
}
 800a77c:	4620      	mov	r0, r4
 800a77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a782:	4639      	mov	r1, r7
 800a784:	4630      	mov	r0, r6
 800a786:	f7ff fc9b 	bl	800a0c0 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a78a:	4604      	mov	r4, r0
 800a78c:	2800      	cmp	r0, #0
 800a78e:	f040 80fc 	bne.w	800a98a <USBD_StdEPReq+0x230>
        pdev->classId = idx;
 800a792:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 800a796:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800a79a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d0eb      	beq.n	800a77c <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	4798      	blx	r3
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	e7e6      	b.n	800a77c <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800a7ae:	f891 8001 	ldrb.w	r8, [r1, #1]
 800a7b2:	f1b8 0f01 	cmp.w	r8, #1
 800a7b6:	d031      	beq.n	800a81c <USBD_StdEPReq+0xc2>
 800a7b8:	f1b8 0f03 	cmp.w	r8, #3
 800a7bc:	d005      	beq.n	800a7ca <USBD_StdEPReq+0x70>
 800a7be:	f1b8 0f00 	cmp.w	r8, #0
 800a7c2:	d067      	beq.n	800a894 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 800a7c4:	f7ff fd8b 	bl	800a2de <USBD_CtlError>
          break;
 800a7c8:	e7d8      	b.n	800a77c <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800a7ca:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d004      	beq.n	800a7de <USBD_StdEPReq+0x84>
 800a7d4:	2a03      	cmp	r2, #3
 800a7d6:	d012      	beq.n	800a7fe <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 800a7d8:	f7ff fd81 	bl	800a2de <USBD_CtlError>
              break;
 800a7dc:	e7ce      	b.n	800a77c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7de:	b10f      	cbz	r7, 800a7e4 <USBD_StdEPReq+0x8a>
 800a7e0:	2f80      	cmp	r7, #128	@ 0x80
 800a7e2:	d104      	bne.n	800a7ee <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f7ff fd79 	bl	800a2de <USBD_CtlError>
 800a7ec:	e7c6      	b.n	800a77c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7ee:	4639      	mov	r1, r7
 800a7f0:	f7ff fb26 	bl	8009e40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7f4:	2180      	movs	r1, #128	@ 0x80
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	f7ff fb22 	bl	8009e40 <USBD_LL_StallEP>
 800a7fc:	e7be      	b.n	800a77c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7fe:	884b      	ldrh	r3, [r1, #2]
 800a800:	b923      	cbnz	r3, 800a80c <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a802:	b11f      	cbz	r7, 800a80c <USBD_StdEPReq+0xb2>
 800a804:	2f80      	cmp	r7, #128	@ 0x80
 800a806:	d001      	beq.n	800a80c <USBD_StdEPReq+0xb2>
 800a808:	88cb      	ldrh	r3, [r1, #6]
 800a80a:	b11b      	cbz	r3, 800a814 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 800a80c:	4630      	mov	r0, r6
 800a80e:	f000 f9a9 	bl	800ab64 <USBD_CtlSendStatus>
              break;
 800a812:	e7b3      	b.n	800a77c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a814:	4639      	mov	r1, r7
 800a816:	f7ff fb13 	bl	8009e40 <USBD_LL_StallEP>
 800a81a:	e7f7      	b.n	800a80c <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 800a81c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a820:	b2da      	uxtb	r2, r3
 800a822:	2b02      	cmp	r3, #2
 800a824:	d004      	beq.n	800a830 <USBD_StdEPReq+0xd6>
 800a826:	2a03      	cmp	r2, #3
 800a828:	d012      	beq.n	800a850 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 800a82a:	f7ff fd58 	bl	800a2de <USBD_CtlError>
              break;
 800a82e:	e7a5      	b.n	800a77c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a830:	b10f      	cbz	r7, 800a836 <USBD_StdEPReq+0xdc>
 800a832:	2f80      	cmp	r7, #128	@ 0x80
 800a834:	d104      	bne.n	800a840 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 800a836:	4629      	mov	r1, r5
 800a838:	4630      	mov	r0, r6
 800a83a:	f7ff fd50 	bl	800a2de <USBD_CtlError>
 800a83e:	e79d      	b.n	800a77c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a840:	4639      	mov	r1, r7
 800a842:	f7ff fafd 	bl	8009e40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a846:	2180      	movs	r1, #128	@ 0x80
 800a848:	4630      	mov	r0, r6
 800a84a:	f7ff faf9 	bl	8009e40 <USBD_LL_StallEP>
 800a84e:	e795      	b.n	800a77c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a850:	884b      	ldrh	r3, [r1, #2]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d192      	bne.n	800a77c <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 800a856:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800a85a:	d117      	bne.n	800a88c <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 800a85c:	4630      	mov	r0, r6
 800a85e:	f000 f981 	bl	800ab64 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a862:	4639      	mov	r1, r7
 800a864:	4630      	mov	r0, r6
 800a866:	f7ff fc2b 	bl	800a0c0 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d186      	bne.n	800a77c <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 800a86e:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800a872:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 800a876:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a87a:	6892      	ldr	r2, [r2, #8]
 800a87c:	2a00      	cmp	r2, #0
 800a87e:	f000 8086 	beq.w	800a98e <USBD_StdEPReq+0x234>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a882:	4629      	mov	r1, r5
 800a884:	4630      	mov	r0, r6
 800a886:	4790      	blx	r2
 800a888:	4604      	mov	r4, r0
 800a88a:	e777      	b.n	800a77c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a88c:	4639      	mov	r1, r7
 800a88e:	f7ff fadf 	bl	8009e50 <USBD_LL_ClearStallEP>
 800a892:	e7e3      	b.n	800a85c <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 800a894:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a898:	b2d1      	uxtb	r1, r2
 800a89a:	2a02      	cmp	r2, #2
 800a89c:	d006      	beq.n	800a8ac <USBD_StdEPReq+0x152>
 800a89e:	2903      	cmp	r1, #3
 800a8a0:	d029      	beq.n	800a8f6 <USBD_StdEPReq+0x19c>
              USBD_CtlError(pdev, req);
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	f7ff fd1b 	bl	800a2de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a8a8:	4644      	mov	r4, r8
              break;
 800a8aa:	e767      	b.n	800a77c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8ac:	b10f      	cbz	r7, 800a8b2 <USBD_StdEPReq+0x158>
 800a8ae:	2f80      	cmp	r7, #128	@ 0x80
 800a8b0:	d113      	bne.n	800a8da <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a8b6:	d115      	bne.n	800a8e4 <USBD_StdEPReq+0x18a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8b8:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8bc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800a8c0:	00b9      	lsls	r1, r7, #2
 800a8c2:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 800a8c6:	4431      	add	r1, r6
 800a8c8:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8ce:	2202      	movs	r2, #2
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	f000 f91b 	bl	800ab0c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a8d6:	4644      	mov	r4, r8
              break;
 800a8d8:	e750      	b.n	800a77c <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800a8da:	4629      	mov	r1, r5
 800a8dc:	f7ff fcff 	bl	800a2de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a8e0:	4644      	mov	r4, r8
                break;
 800a8e2:	e74b      	b.n	800a77c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8e4:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 800a8e8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800a8ec:	00b9      	lsls	r1, r7, #2
 800a8ee:	3110      	adds	r1, #16
 800a8f0:	4431      	add	r1, r6
 800a8f2:	3104      	adds	r1, #4
 800a8f4:	e7e9      	b.n	800a8ca <USBD_StdEPReq+0x170>
              if ((ep_addr & 0x80U) == 0x80U)
 800a8f6:	b25b      	sxtb	r3, r3
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	db1f      	blt.n	800a93c <USBD_StdEPReq+0x1e2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a8fc:	f007 020f 	and.w	r2, r7, #15
 800a900:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a904:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a908:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 800a90c:	b322      	cbz	r2, 800a958 <USBD_StdEPReq+0x1fe>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a90e:	2b00      	cmp	r3, #0
 800a910:	db27      	blt.n	800a962 <USBD_StdEPReq+0x208>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a912:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a916:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a91a:	009c      	lsls	r4, r3, #2
 800a91c:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 800a920:	4434      	add	r4, r6
 800a922:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a924:	b10f      	cbz	r7, 800a92a <USBD_StdEPReq+0x1d0>
 800a926:	2f80      	cmp	r7, #128	@ 0x80
 800a928:	d124      	bne.n	800a974 <USBD_StdEPReq+0x21a>
                pep->status = 0x0000U;
 800a92a:	2300      	movs	r3, #0
 800a92c:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a92e:	2202      	movs	r2, #2
 800a930:	4621      	mov	r1, r4
 800a932:	4630      	mov	r0, r6
 800a934:	f000 f8ea 	bl	800ab0c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a938:	4644      	mov	r4, r8
              break;
 800a93a:	e71f      	b.n	800a77c <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a93c:	f007 020f 	and.w	r2, r7, #15
 800a940:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a944:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a948:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800a94a:	2a00      	cmp	r2, #0
 800a94c:	d1df      	bne.n	800a90e <USBD_StdEPReq+0x1b4>
                  USBD_CtlError(pdev, req);
 800a94e:	4629      	mov	r1, r5
 800a950:	f7ff fcc5 	bl	800a2de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a954:	4644      	mov	r4, r8
                  break;
 800a956:	e711      	b.n	800a77c <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 800a958:	4629      	mov	r1, r5
 800a95a:	f7ff fcc0 	bl	800a2de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a95e:	4644      	mov	r4, r8
                  break;
 800a960:	e70c      	b.n	800a77c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a962:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 800a966:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a96a:	009c      	lsls	r4, r3, #2
 800a96c:	3410      	adds	r4, #16
 800a96e:	4434      	add	r4, r6
 800a970:	3404      	adds	r4, #4
 800a972:	e7d7      	b.n	800a924 <USBD_StdEPReq+0x1ca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a974:	4639      	mov	r1, r7
 800a976:	4630      	mov	r0, r6
 800a978:	f7ff fa1c 	bl	8009db4 <USBD_LL_IsStallEP>
 800a97c:	b110      	cbz	r0, 800a984 <USBD_StdEPReq+0x22a>
                pep->status = 0x0001U;
 800a97e:	2301      	movs	r3, #1
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	e7d4      	b.n	800a92e <USBD_StdEPReq+0x1d4>
                pep->status = 0x0000U;
 800a984:	2300      	movs	r3, #0
 800a986:	6023      	str	r3, [r4, #0]
 800a988:	e7d1      	b.n	800a92e <USBD_StdEPReq+0x1d4>
  USBD_StatusTypeDef ret = USBD_OK;
 800a98a:	2400      	movs	r4, #0
 800a98c:	e6f6      	b.n	800a77c <USBD_StdEPReq+0x22>
 800a98e:	4604      	mov	r4, r0
 800a990:	e6f4      	b.n	800a77c <USBD_StdEPReq+0x22>

0800a992 <USBD_GetString>:
  if (desc == NULL)
 800a992:	b300      	cbz	r0, 800a9d6 <USBD_GetString+0x44>
{
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	460d      	mov	r5, r1
 800a998:	4616      	mov	r6, r2
 800a99a:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a99c:	f7ff fc81 	bl	800a2a2 <USBD_GetLen>
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	0043      	lsls	r3, r0, #1
 800a9a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9a8:	d806      	bhi.n	800a9b8 <USBD_GetString+0x26>
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800a9ae:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	706b      	strb	r3, [r5, #1]
  idx++;
 800a9b4:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800a9b6:	e00a      	b.n	800a9ce <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a9b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a9bc:	e7f6      	b.n	800a9ac <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 800a9be:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800a9c0:	3401      	adds	r4, #1
    idx++;
 800a9c2:	1c5a      	adds	r2, r3, #1
 800a9c4:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	54a9      	strb	r1, [r5, r2]
    idx++;
 800a9ca:	3302      	adds	r3, #2
 800a9cc:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800a9ce:	7822      	ldrb	r2, [r4, #0]
 800a9d0:	2a00      	cmp	r2, #0
 800a9d2:	d1f4      	bne.n	800a9be <USBD_GetString+0x2c>
}
 800a9d4:	bd70      	pop	{r4, r5, r6, pc}
 800a9d6:	4770      	bx	lr

0800a9d8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a9d8:	2312      	movs	r3, #18
 800a9da:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800a9dc:	4800      	ldr	r0, [pc, #0]	@ (800a9e0 <USBD_FS_DeviceDescriptor+0x8>)
 800a9de:	4770      	bx	lr
 800a9e0:	20000130 	.word	0x20000130

0800a9e4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a9e4:	2304      	movs	r3, #4
 800a9e6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800a9e8:	4800      	ldr	r0, [pc, #0]	@ (800a9ec <USBD_FS_LangIDStrDescriptor+0x8>)
 800a9ea:	4770      	bx	lr
 800a9ec:	2000012c 	.word	0x2000012c

0800a9f0 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d21e      	bcs.n	800aa34 <IntToUnicode+0x44>
{
 800a9f6:	b500      	push	{lr}
 800a9f8:	e010      	b.n	800aa1c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a9fa:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 800a9fe:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800aa02:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800aa04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800aa08:	f10c 0c01 	add.w	ip, ip, #1
 800aa0c:	f04f 0e00 	mov.w	lr, #0
 800aa10:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 800aa14:	3301      	adds	r3, #1
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d209      	bcs.n	800aa30 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800aa1c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800aa20:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 800aa24:	d2e9      	bcs.n	800a9fa <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa26:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 800aa2a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800aa2e:	e7e8      	b.n	800aa02 <IntToUnicode+0x12>
  }
}
 800aa30:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa34:	4770      	bx	lr
	...

0800aa38 <Get_SerialNum>:
{
 800aa38:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa3a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa68 <Get_SerialNum+0x30>)
 800aa3c:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa40:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa44:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 800aa48:	18c0      	adds	r0, r0, r3
 800aa4a:	d100      	bne.n	800aa4e <Get_SerialNum+0x16>
}
 800aa4c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa4e:	4d07      	ldr	r5, [pc, #28]	@ (800aa6c <Get_SerialNum+0x34>)
 800aa50:	2208      	movs	r2, #8
 800aa52:	4629      	mov	r1, r5
 800aa54:	f7ff ffcc 	bl	800a9f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa58:	2204      	movs	r2, #4
 800aa5a:	f105 0110 	add.w	r1, r5, #16
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f7ff ffc6 	bl	800a9f0 <IntToUnicode>
}
 800aa64:	e7f2      	b.n	800aa4c <Get_SerialNum+0x14>
 800aa66:	bf00      	nop
 800aa68:	1fff7000 	.word	0x1fff7000
 800aa6c:	20000112 	.word	0x20000112

0800aa70 <USBD_FS_SerialStrDescriptor>:
{
 800aa70:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800aa72:	231a      	movs	r3, #26
 800aa74:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800aa76:	f7ff ffdf 	bl	800aa38 <Get_SerialNum>
}
 800aa7a:	4801      	ldr	r0, [pc, #4]	@ (800aa80 <USBD_FS_SerialStrDescriptor+0x10>)
 800aa7c:	bd08      	pop	{r3, pc}
 800aa7e:	bf00      	nop
 800aa80:	20000110 	.word	0x20000110

0800aa84 <USBD_FS_ProductStrDescriptor>:
{
 800aa84:	b508      	push	{r3, lr}
 800aa86:	460a      	mov	r2, r1
  if(speed == 0)
 800aa88:	b928      	cbnz	r0, 800aa96 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa8a:	4905      	ldr	r1, [pc, #20]	@ (800aaa0 <USBD_FS_ProductStrDescriptor+0x1c>)
 800aa8c:	4805      	ldr	r0, [pc, #20]	@ (800aaa4 <USBD_FS_ProductStrDescriptor+0x20>)
 800aa8e:	f7ff ff80 	bl	800a992 <USBD_GetString>
}
 800aa92:	4803      	ldr	r0, [pc, #12]	@ (800aaa0 <USBD_FS_ProductStrDescriptor+0x1c>)
 800aa94:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa96:	4902      	ldr	r1, [pc, #8]	@ (800aaa0 <USBD_FS_ProductStrDescriptor+0x1c>)
 800aa98:	4802      	ldr	r0, [pc, #8]	@ (800aaa4 <USBD_FS_ProductStrDescriptor+0x20>)
 800aa9a:	f7ff ff7a 	bl	800a992 <USBD_GetString>
 800aa9e:	e7f8      	b.n	800aa92 <USBD_FS_ProductStrDescriptor+0xe>
 800aaa0:	200088a4 	.word	0x200088a4
 800aaa4:	0800c030 	.word	0x0800c030

0800aaa8 <USBD_FS_ManufacturerStrDescriptor>:
{
 800aaa8:	b510      	push	{r4, lr}
 800aaaa:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aaac:	4c03      	ldr	r4, [pc, #12]	@ (800aabc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800aaae:	4621      	mov	r1, r4
 800aab0:	4803      	ldr	r0, [pc, #12]	@ (800aac0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800aab2:	f7ff ff6e 	bl	800a992 <USBD_GetString>
}
 800aab6:	4620      	mov	r0, r4
 800aab8:	bd10      	pop	{r4, pc}
 800aaba:	bf00      	nop
 800aabc:	200088a4 	.word	0x200088a4
 800aac0:	0800c04c 	.word	0x0800c04c

0800aac4 <USBD_FS_ConfigStrDescriptor>:
{
 800aac4:	b508      	push	{r3, lr}
 800aac6:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800aac8:	b928      	cbnz	r0, 800aad6 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aaca:	4905      	ldr	r1, [pc, #20]	@ (800aae0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800aacc:	4805      	ldr	r0, [pc, #20]	@ (800aae4 <USBD_FS_ConfigStrDescriptor+0x20>)
 800aace:	f7ff ff60 	bl	800a992 <USBD_GetString>
}
 800aad2:	4803      	ldr	r0, [pc, #12]	@ (800aae0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800aad4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aad6:	4902      	ldr	r1, [pc, #8]	@ (800aae0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800aad8:	4802      	ldr	r0, [pc, #8]	@ (800aae4 <USBD_FS_ConfigStrDescriptor+0x20>)
 800aada:	f7ff ff5a 	bl	800a992 <USBD_GetString>
 800aade:	e7f8      	b.n	800aad2 <USBD_FS_ConfigStrDescriptor+0xe>
 800aae0:	200088a4 	.word	0x200088a4
 800aae4:	0800c060 	.word	0x0800c060

0800aae8 <USBD_FS_InterfaceStrDescriptor>:
{
 800aae8:	b508      	push	{r3, lr}
 800aaea:	460a      	mov	r2, r1
  if(speed == 0)
 800aaec:	b928      	cbnz	r0, 800aafa <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaee:	4905      	ldr	r1, [pc, #20]	@ (800ab04 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800aaf0:	4805      	ldr	r0, [pc, #20]	@ (800ab08 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800aaf2:	f7ff ff4e 	bl	800a992 <USBD_GetString>
}
 800aaf6:	4803      	ldr	r0, [pc, #12]	@ (800ab04 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800aaf8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aafa:	4902      	ldr	r1, [pc, #8]	@ (800ab04 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800aafc:	4802      	ldr	r0, [pc, #8]	@ (800ab08 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800aafe:	f7ff ff48 	bl	800a992 <USBD_GetString>
 800ab02:	e7f8      	b.n	800aaf6 <USBD_FS_InterfaceStrDescriptor+0xe>
 800ab04:	200088a4 	.word	0x200088a4
 800ab08:	0800c06c 	.word	0x0800c06c

0800ab0c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ab0c:	b508      	push	{r3, lr}
 800ab0e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab10:	2202      	movs	r2, #2
 800ab12:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ab16:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ab18:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab1a:	460a      	mov	r2, r1
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	f7ff f9a7 	bl	8009e70 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ab22:	2000      	movs	r0, #0
 800ab24:	bd08      	pop	{r3, pc}

0800ab26 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ab26:	b508      	push	{r3, lr}
 800ab28:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab2a:	460a      	mov	r2, r1
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	f7ff f99f 	bl	8009e70 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ab32:	2000      	movs	r0, #0
 800ab34:	bd08      	pop	{r3, pc}

0800ab36 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ab36:	b508      	push	{r3, lr}
 800ab38:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ab3a:	2203      	movs	r2, #3
 800ab3c:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ab40:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ab44:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab48:	460a      	mov	r2, r1
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	f7ff f998 	bl	8009e80 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ab50:	2000      	movs	r0, #0
 800ab52:	bd08      	pop	{r3, pc}

0800ab54 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ab54:	b508      	push	{r3, lr}
 800ab56:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab58:	460a      	mov	r2, r1
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	f7ff f990 	bl	8009e80 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ab60:	2000      	movs	r0, #0
 800ab62:	bd08      	pop	{r3, pc}

0800ab64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ab64:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ab66:	2204      	movs	r2, #4
 800ab68:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	461a      	mov	r2, r3
 800ab70:	4619      	mov	r1, r3
 800ab72:	f7ff f97d 	bl	8009e70 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ab76:	2000      	movs	r0, #0
 800ab78:	bd08      	pop	{r3, pc}

0800ab7a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ab7a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ab7c:	2205      	movs	r2, #5
 800ab7e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab82:	2300      	movs	r3, #0
 800ab84:	461a      	mov	r2, r3
 800ab86:	4619      	mov	r1, r3
 800ab88:	f7ff f97a 	bl	8009e80 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	bd08      	pop	{r3, pc}

0800ab90 <crc32_inc>:
    unsigned long crc32;
    unsigned char *byte_buf;
    size_t i;

    /** accumulate crc32 for buffer **/
    crc32 = in_crc32 ^ 0xFFFFFFFF;
 800ab90:	43c0      	mvns	r0, r0
    byte_buf = (unsigned char *)buf;
    for (i = 0; i < size; i++)
 800ab92:	f04f 0c00 	mov.w	ip, #0
 800ab96:	4594      	cmp	ip, r2
 800ab98:	d211      	bcs.n	800abbe <crc32_inc+0x2e>
{
 800ab9a:	b410      	push	{r4}
    {
        crc32 = (crc32 >> 8) ^ crcTable[(crc32 ^ byte_buf[i]) & 0xFF];
 800ab9c:	f811 300c 	ldrb.w	r3, [r1, ip]
 800aba0:	4043      	eors	r3, r0
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	4c07      	ldr	r4, [pc, #28]	@ (800abc4 <crc32_inc+0x34>)
 800aba6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800abaa:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
    for (i = 0; i < size; i++)
 800abae:	f10c 0c01 	add.w	ip, ip, #1
 800abb2:	4594      	cmp	ip, r2
 800abb4:	d3f2      	bcc.n	800ab9c <crc32_inc+0xc>
    }
    return (crc32 ^ 0xFFFFFFFF);
}
 800abb6:	43c0      	mvns	r0, r0
 800abb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	43c0      	mvns	r0, r0
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	0800c160 	.word	0x0800c160

0800abc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800abc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ac00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800abcc:	f7fc ff86 	bl	8007adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800abd0:	480c      	ldr	r0, [pc, #48]	@ (800ac04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800abd2:	490d      	ldr	r1, [pc, #52]	@ (800ac08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800abd4:	4a0d      	ldr	r2, [pc, #52]	@ (800ac0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800abd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800abd8:	e002      	b.n	800abe0 <LoopCopyDataInit>

0800abda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800abda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800abdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800abde:	3304      	adds	r3, #4

0800abe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800abe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800abe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800abe4:	d3f9      	bcc.n	800abda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800abe6:	4a0a      	ldr	r2, [pc, #40]	@ (800ac10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800abe8:	4c0a      	ldr	r4, [pc, #40]	@ (800ac14 <LoopFillZerobss+0x22>)
  movs r3, #0
 800abea:	2300      	movs	r3, #0
  b LoopFillZerobss
 800abec:	e001      	b.n	800abf2 <LoopFillZerobss>

0800abee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800abee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800abf0:	3204      	adds	r2, #4

0800abf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800abf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800abf4:	d3fb      	bcc.n	800abee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800abf6:	f000 f855 	bl	800aca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800abfa:	f7f8 f933 	bl	8002e64 <main>
  bx  lr    
 800abfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ac00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800ac04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ac08:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 800ac0c:	0800c5a4 	.word	0x0800c5a4
  ldr r2, =_sbss
 800ac10:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 800ac14:	20008bec 	.word	0x20008bec

0800ac18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ac18:	e7fe      	b.n	800ac18 <ADC_IRQHandler>
	...

0800ac1c <sniprintf>:
 800ac1c:	b40c      	push	{r2, r3}
 800ac1e:	b530      	push	{r4, r5, lr}
 800ac20:	4b18      	ldr	r3, [pc, #96]	@ (800ac84 <sniprintf+0x68>)
 800ac22:	1e0c      	subs	r4, r1, #0
 800ac24:	681d      	ldr	r5, [r3, #0]
 800ac26:	b09d      	sub	sp, #116	@ 0x74
 800ac28:	da08      	bge.n	800ac3c <sniprintf+0x20>
 800ac2a:	238b      	movs	r3, #139	@ 0x8b
 800ac2c:	602b      	str	r3, [r5, #0]
 800ac2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac32:	b01d      	add	sp, #116	@ 0x74
 800ac34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac38:	b002      	add	sp, #8
 800ac3a:	4770      	bx	lr
 800ac3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ac40:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ac44:	f04f 0300 	mov.w	r3, #0
 800ac48:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ac4a:	bf14      	ite	ne
 800ac4c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ac50:	4623      	moveq	r3, r4
 800ac52:	9304      	str	r3, [sp, #16]
 800ac54:	9307      	str	r3, [sp, #28]
 800ac56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ac5a:	9002      	str	r0, [sp, #8]
 800ac5c:	9006      	str	r0, [sp, #24]
 800ac5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ac62:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ac64:	ab21      	add	r3, sp, #132	@ 0x84
 800ac66:	a902      	add	r1, sp, #8
 800ac68:	4628      	mov	r0, r5
 800ac6a:	9301      	str	r3, [sp, #4]
 800ac6c:	f000 f9a6 	bl	800afbc <_svfiprintf_r>
 800ac70:	1c43      	adds	r3, r0, #1
 800ac72:	bfbc      	itt	lt
 800ac74:	238b      	movlt	r3, #139	@ 0x8b
 800ac76:	602b      	strlt	r3, [r5, #0]
 800ac78:	2c00      	cmp	r4, #0
 800ac7a:	d0da      	beq.n	800ac32 <sniprintf+0x16>
 800ac7c:	9b02      	ldr	r3, [sp, #8]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	701a      	strb	r2, [r3, #0]
 800ac82:	e7d6      	b.n	800ac32 <sniprintf+0x16>
 800ac84:	20000160 	.word	0x20000160

0800ac88 <memset>:
 800ac88:	4402      	add	r2, r0
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d100      	bne.n	800ac92 <memset+0xa>
 800ac90:	4770      	bx	lr
 800ac92:	f803 1b01 	strb.w	r1, [r3], #1
 800ac96:	e7f9      	b.n	800ac8c <memset+0x4>

0800ac98 <__errno>:
 800ac98:	4b01      	ldr	r3, [pc, #4]	@ (800aca0 <__errno+0x8>)
 800ac9a:	6818      	ldr	r0, [r3, #0]
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	20000160 	.word	0x20000160

0800aca4 <__libc_init_array>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	4b0d      	ldr	r3, [pc, #52]	@ (800acdc <__libc_init_array+0x38>)
 800aca8:	4d0d      	ldr	r5, [pc, #52]	@ (800ace0 <__libc_init_array+0x3c>)
 800acaa:	1b5b      	subs	r3, r3, r5
 800acac:	109c      	asrs	r4, r3, #2
 800acae:	2600      	movs	r6, #0
 800acb0:	42a6      	cmp	r6, r4
 800acb2:	d109      	bne.n	800acc8 <__libc_init_array+0x24>
 800acb4:	f000 ff18 	bl	800bae8 <_init>
 800acb8:	4d0a      	ldr	r5, [pc, #40]	@ (800ace4 <__libc_init_array+0x40>)
 800acba:	4b0b      	ldr	r3, [pc, #44]	@ (800ace8 <__libc_init_array+0x44>)
 800acbc:	1b5b      	subs	r3, r3, r5
 800acbe:	109c      	asrs	r4, r3, #2
 800acc0:	2600      	movs	r6, #0
 800acc2:	42a6      	cmp	r6, r4
 800acc4:	d105      	bne.n	800acd2 <__libc_init_array+0x2e>
 800acc6:	bd70      	pop	{r4, r5, r6, pc}
 800acc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800accc:	4798      	blx	r3
 800acce:	3601      	adds	r6, #1
 800acd0:	e7ee      	b.n	800acb0 <__libc_init_array+0xc>
 800acd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800acd6:	4798      	blx	r3
 800acd8:	3601      	adds	r6, #1
 800acda:	e7f2      	b.n	800acc2 <__libc_init_array+0x1e>
 800acdc:	0800c59c 	.word	0x0800c59c
 800ace0:	0800c59c 	.word	0x0800c59c
 800ace4:	0800c59c 	.word	0x0800c59c
 800ace8:	0800c5a0 	.word	0x0800c5a0

0800acec <__retarget_lock_acquire_recursive>:
 800acec:	4770      	bx	lr

0800acee <__retarget_lock_release_recursive>:
 800acee:	4770      	bx	lr

0800acf0 <memcpy>:
 800acf0:	440a      	add	r2, r1
 800acf2:	4291      	cmp	r1, r2
 800acf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800acf8:	d100      	bne.n	800acfc <memcpy+0xc>
 800acfa:	4770      	bx	lr
 800acfc:	b510      	push	{r4, lr}
 800acfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad06:	4291      	cmp	r1, r2
 800ad08:	d1f9      	bne.n	800acfe <memcpy+0xe>
 800ad0a:	bd10      	pop	{r4, pc}

0800ad0c <_free_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4605      	mov	r5, r0
 800ad10:	2900      	cmp	r1, #0
 800ad12:	d041      	beq.n	800ad98 <_free_r+0x8c>
 800ad14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad18:	1f0c      	subs	r4, r1, #4
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	bfb8      	it	lt
 800ad1e:	18e4      	addlt	r4, r4, r3
 800ad20:	f000 f8e0 	bl	800aee4 <__malloc_lock>
 800ad24:	4a1d      	ldr	r2, [pc, #116]	@ (800ad9c <_free_r+0x90>)
 800ad26:	6813      	ldr	r3, [r2, #0]
 800ad28:	b933      	cbnz	r3, 800ad38 <_free_r+0x2c>
 800ad2a:	6063      	str	r3, [r4, #4]
 800ad2c:	6014      	str	r4, [r2, #0]
 800ad2e:	4628      	mov	r0, r5
 800ad30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad34:	f000 b8dc 	b.w	800aef0 <__malloc_unlock>
 800ad38:	42a3      	cmp	r3, r4
 800ad3a:	d908      	bls.n	800ad4e <_free_r+0x42>
 800ad3c:	6820      	ldr	r0, [r4, #0]
 800ad3e:	1821      	adds	r1, r4, r0
 800ad40:	428b      	cmp	r3, r1
 800ad42:	bf01      	itttt	eq
 800ad44:	6819      	ldreq	r1, [r3, #0]
 800ad46:	685b      	ldreq	r3, [r3, #4]
 800ad48:	1809      	addeq	r1, r1, r0
 800ad4a:	6021      	streq	r1, [r4, #0]
 800ad4c:	e7ed      	b.n	800ad2a <_free_r+0x1e>
 800ad4e:	461a      	mov	r2, r3
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	b10b      	cbz	r3, 800ad58 <_free_r+0x4c>
 800ad54:	42a3      	cmp	r3, r4
 800ad56:	d9fa      	bls.n	800ad4e <_free_r+0x42>
 800ad58:	6811      	ldr	r1, [r2, #0]
 800ad5a:	1850      	adds	r0, r2, r1
 800ad5c:	42a0      	cmp	r0, r4
 800ad5e:	d10b      	bne.n	800ad78 <_free_r+0x6c>
 800ad60:	6820      	ldr	r0, [r4, #0]
 800ad62:	4401      	add	r1, r0
 800ad64:	1850      	adds	r0, r2, r1
 800ad66:	4283      	cmp	r3, r0
 800ad68:	6011      	str	r1, [r2, #0]
 800ad6a:	d1e0      	bne.n	800ad2e <_free_r+0x22>
 800ad6c:	6818      	ldr	r0, [r3, #0]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	6053      	str	r3, [r2, #4]
 800ad72:	4408      	add	r0, r1
 800ad74:	6010      	str	r0, [r2, #0]
 800ad76:	e7da      	b.n	800ad2e <_free_r+0x22>
 800ad78:	d902      	bls.n	800ad80 <_free_r+0x74>
 800ad7a:	230c      	movs	r3, #12
 800ad7c:	602b      	str	r3, [r5, #0]
 800ad7e:	e7d6      	b.n	800ad2e <_free_r+0x22>
 800ad80:	6820      	ldr	r0, [r4, #0]
 800ad82:	1821      	adds	r1, r4, r0
 800ad84:	428b      	cmp	r3, r1
 800ad86:	bf04      	itt	eq
 800ad88:	6819      	ldreq	r1, [r3, #0]
 800ad8a:	685b      	ldreq	r3, [r3, #4]
 800ad8c:	6063      	str	r3, [r4, #4]
 800ad8e:	bf04      	itt	eq
 800ad90:	1809      	addeq	r1, r1, r0
 800ad92:	6021      	streq	r1, [r4, #0]
 800ad94:	6054      	str	r4, [r2, #4]
 800ad96:	e7ca      	b.n	800ad2e <_free_r+0x22>
 800ad98:	bd38      	pop	{r3, r4, r5, pc}
 800ad9a:	bf00      	nop
 800ad9c:	20008be8 	.word	0x20008be8

0800ada0 <sbrk_aligned>:
 800ada0:	b570      	push	{r4, r5, r6, lr}
 800ada2:	4e0f      	ldr	r6, [pc, #60]	@ (800ade0 <sbrk_aligned+0x40>)
 800ada4:	460c      	mov	r4, r1
 800ada6:	6831      	ldr	r1, [r6, #0]
 800ada8:	4605      	mov	r5, r0
 800adaa:	b911      	cbnz	r1, 800adb2 <sbrk_aligned+0x12>
 800adac:	f000 fbaa 	bl	800b504 <_sbrk_r>
 800adb0:	6030      	str	r0, [r6, #0]
 800adb2:	4621      	mov	r1, r4
 800adb4:	4628      	mov	r0, r5
 800adb6:	f000 fba5 	bl	800b504 <_sbrk_r>
 800adba:	1c43      	adds	r3, r0, #1
 800adbc:	d103      	bne.n	800adc6 <sbrk_aligned+0x26>
 800adbe:	f04f 34ff 	mov.w	r4, #4294967295
 800adc2:	4620      	mov	r0, r4
 800adc4:	bd70      	pop	{r4, r5, r6, pc}
 800adc6:	1cc4      	adds	r4, r0, #3
 800adc8:	f024 0403 	bic.w	r4, r4, #3
 800adcc:	42a0      	cmp	r0, r4
 800adce:	d0f8      	beq.n	800adc2 <sbrk_aligned+0x22>
 800add0:	1a21      	subs	r1, r4, r0
 800add2:	4628      	mov	r0, r5
 800add4:	f000 fb96 	bl	800b504 <_sbrk_r>
 800add8:	3001      	adds	r0, #1
 800adda:	d1f2      	bne.n	800adc2 <sbrk_aligned+0x22>
 800addc:	e7ef      	b.n	800adbe <sbrk_aligned+0x1e>
 800adde:	bf00      	nop
 800ade0:	20008be4 	.word	0x20008be4

0800ade4 <_malloc_r>:
 800ade4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade8:	1ccd      	adds	r5, r1, #3
 800adea:	f025 0503 	bic.w	r5, r5, #3
 800adee:	3508      	adds	r5, #8
 800adf0:	2d0c      	cmp	r5, #12
 800adf2:	bf38      	it	cc
 800adf4:	250c      	movcc	r5, #12
 800adf6:	2d00      	cmp	r5, #0
 800adf8:	4606      	mov	r6, r0
 800adfa:	db01      	blt.n	800ae00 <_malloc_r+0x1c>
 800adfc:	42a9      	cmp	r1, r5
 800adfe:	d904      	bls.n	800ae0a <_malloc_r+0x26>
 800ae00:	230c      	movs	r3, #12
 800ae02:	6033      	str	r3, [r6, #0]
 800ae04:	2000      	movs	r0, #0
 800ae06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aee0 <_malloc_r+0xfc>
 800ae0e:	f000 f869 	bl	800aee4 <__malloc_lock>
 800ae12:	f8d8 3000 	ldr.w	r3, [r8]
 800ae16:	461c      	mov	r4, r3
 800ae18:	bb44      	cbnz	r4, 800ae6c <_malloc_r+0x88>
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	f7ff ffbf 	bl	800ada0 <sbrk_aligned>
 800ae22:	1c43      	adds	r3, r0, #1
 800ae24:	4604      	mov	r4, r0
 800ae26:	d158      	bne.n	800aeda <_malloc_r+0xf6>
 800ae28:	f8d8 4000 	ldr.w	r4, [r8]
 800ae2c:	4627      	mov	r7, r4
 800ae2e:	2f00      	cmp	r7, #0
 800ae30:	d143      	bne.n	800aeba <_malloc_r+0xd6>
 800ae32:	2c00      	cmp	r4, #0
 800ae34:	d04b      	beq.n	800aece <_malloc_r+0xea>
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	4639      	mov	r1, r7
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	eb04 0903 	add.w	r9, r4, r3
 800ae40:	f000 fb60 	bl	800b504 <_sbrk_r>
 800ae44:	4581      	cmp	r9, r0
 800ae46:	d142      	bne.n	800aece <_malloc_r+0xea>
 800ae48:	6821      	ldr	r1, [r4, #0]
 800ae4a:	1a6d      	subs	r5, r5, r1
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	4630      	mov	r0, r6
 800ae50:	f7ff ffa6 	bl	800ada0 <sbrk_aligned>
 800ae54:	3001      	adds	r0, #1
 800ae56:	d03a      	beq.n	800aece <_malloc_r+0xea>
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	442b      	add	r3, r5
 800ae5c:	6023      	str	r3, [r4, #0]
 800ae5e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae62:	685a      	ldr	r2, [r3, #4]
 800ae64:	bb62      	cbnz	r2, 800aec0 <_malloc_r+0xdc>
 800ae66:	f8c8 7000 	str.w	r7, [r8]
 800ae6a:	e00f      	b.n	800ae8c <_malloc_r+0xa8>
 800ae6c:	6822      	ldr	r2, [r4, #0]
 800ae6e:	1b52      	subs	r2, r2, r5
 800ae70:	d420      	bmi.n	800aeb4 <_malloc_r+0xd0>
 800ae72:	2a0b      	cmp	r2, #11
 800ae74:	d917      	bls.n	800aea6 <_malloc_r+0xc2>
 800ae76:	1961      	adds	r1, r4, r5
 800ae78:	42a3      	cmp	r3, r4
 800ae7a:	6025      	str	r5, [r4, #0]
 800ae7c:	bf18      	it	ne
 800ae7e:	6059      	strne	r1, [r3, #4]
 800ae80:	6863      	ldr	r3, [r4, #4]
 800ae82:	bf08      	it	eq
 800ae84:	f8c8 1000 	streq.w	r1, [r8]
 800ae88:	5162      	str	r2, [r4, r5]
 800ae8a:	604b      	str	r3, [r1, #4]
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	f000 f82f 	bl	800aef0 <__malloc_unlock>
 800ae92:	f104 000b 	add.w	r0, r4, #11
 800ae96:	1d23      	adds	r3, r4, #4
 800ae98:	f020 0007 	bic.w	r0, r0, #7
 800ae9c:	1ac2      	subs	r2, r0, r3
 800ae9e:	bf1c      	itt	ne
 800aea0:	1a1b      	subne	r3, r3, r0
 800aea2:	50a3      	strne	r3, [r4, r2]
 800aea4:	e7af      	b.n	800ae06 <_malloc_r+0x22>
 800aea6:	6862      	ldr	r2, [r4, #4]
 800aea8:	42a3      	cmp	r3, r4
 800aeaa:	bf0c      	ite	eq
 800aeac:	f8c8 2000 	streq.w	r2, [r8]
 800aeb0:	605a      	strne	r2, [r3, #4]
 800aeb2:	e7eb      	b.n	800ae8c <_malloc_r+0xa8>
 800aeb4:	4623      	mov	r3, r4
 800aeb6:	6864      	ldr	r4, [r4, #4]
 800aeb8:	e7ae      	b.n	800ae18 <_malloc_r+0x34>
 800aeba:	463c      	mov	r4, r7
 800aebc:	687f      	ldr	r7, [r7, #4]
 800aebe:	e7b6      	b.n	800ae2e <_malloc_r+0x4a>
 800aec0:	461a      	mov	r2, r3
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	42a3      	cmp	r3, r4
 800aec6:	d1fb      	bne.n	800aec0 <_malloc_r+0xdc>
 800aec8:	2300      	movs	r3, #0
 800aeca:	6053      	str	r3, [r2, #4]
 800aecc:	e7de      	b.n	800ae8c <_malloc_r+0xa8>
 800aece:	230c      	movs	r3, #12
 800aed0:	6033      	str	r3, [r6, #0]
 800aed2:	4630      	mov	r0, r6
 800aed4:	f000 f80c 	bl	800aef0 <__malloc_unlock>
 800aed8:	e794      	b.n	800ae04 <_malloc_r+0x20>
 800aeda:	6005      	str	r5, [r0, #0]
 800aedc:	e7d6      	b.n	800ae8c <_malloc_r+0xa8>
 800aede:	bf00      	nop
 800aee0:	20008be8 	.word	0x20008be8

0800aee4 <__malloc_lock>:
 800aee4:	4801      	ldr	r0, [pc, #4]	@ (800aeec <__malloc_lock+0x8>)
 800aee6:	f7ff bf01 	b.w	800acec <__retarget_lock_acquire_recursive>
 800aeea:	bf00      	nop
 800aeec:	20008be0 	.word	0x20008be0

0800aef0 <__malloc_unlock>:
 800aef0:	4801      	ldr	r0, [pc, #4]	@ (800aef8 <__malloc_unlock+0x8>)
 800aef2:	f7ff befc 	b.w	800acee <__retarget_lock_release_recursive>
 800aef6:	bf00      	nop
 800aef8:	20008be0 	.word	0x20008be0

0800aefc <__ssputs_r>:
 800aefc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af00:	688e      	ldr	r6, [r1, #8]
 800af02:	461f      	mov	r7, r3
 800af04:	42be      	cmp	r6, r7
 800af06:	4682      	mov	sl, r0
 800af08:	460c      	mov	r4, r1
 800af0a:	4690      	mov	r8, r2
 800af0c:	4633      	mov	r3, r6
 800af0e:	d853      	bhi.n	800afb8 <__ssputs_r+0xbc>
 800af10:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800af14:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 800af18:	d02b      	beq.n	800af72 <__ssputs_r+0x76>
 800af1a:	6965      	ldr	r5, [r4, #20]
 800af1c:	6823      	ldr	r3, [r4, #0]
 800af1e:	6909      	ldr	r1, [r1, #16]
 800af20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af24:	eba3 0901 	sub.w	r9, r3, r1
 800af28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af2c:	1c7b      	adds	r3, r7, #1
 800af2e:	106d      	asrs	r5, r5, #1
 800af30:	444b      	add	r3, r9
 800af32:	42ab      	cmp	r3, r5
 800af34:	462a      	mov	r2, r5
 800af36:	bf84      	itt	hi
 800af38:	461d      	movhi	r5, r3
 800af3a:	462a      	movhi	r2, r5
 800af3c:	0543      	lsls	r3, r0, #21
 800af3e:	d527      	bpl.n	800af90 <__ssputs_r+0x94>
 800af40:	4611      	mov	r1, r2
 800af42:	4650      	mov	r0, sl
 800af44:	f7ff ff4e 	bl	800ade4 <_malloc_r>
 800af48:	4606      	mov	r6, r0
 800af4a:	b358      	cbz	r0, 800afa4 <__ssputs_r+0xa8>
 800af4c:	6921      	ldr	r1, [r4, #16]
 800af4e:	464a      	mov	r2, r9
 800af50:	f7ff fece 	bl	800acf0 <memcpy>
 800af54:	89a3      	ldrh	r3, [r4, #12]
 800af56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800af5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af5e:	81a3      	strh	r3, [r4, #12]
 800af60:	6126      	str	r6, [r4, #16]
 800af62:	6165      	str	r5, [r4, #20]
 800af64:	444e      	add	r6, r9
 800af66:	eba5 0509 	sub.w	r5, r5, r9
 800af6a:	6026      	str	r6, [r4, #0]
 800af6c:	60a5      	str	r5, [r4, #8]
 800af6e:	463e      	mov	r6, r7
 800af70:	463b      	mov	r3, r7
 800af72:	461f      	mov	r7, r3
 800af74:	6820      	ldr	r0, [r4, #0]
 800af76:	463a      	mov	r2, r7
 800af78:	4641      	mov	r1, r8
 800af7a:	f000 faa9 	bl	800b4d0 <memmove>
 800af7e:	68a3      	ldr	r3, [r4, #8]
 800af80:	1b9b      	subs	r3, r3, r6
 800af82:	60a3      	str	r3, [r4, #8]
 800af84:	6823      	ldr	r3, [r4, #0]
 800af86:	443b      	add	r3, r7
 800af88:	6023      	str	r3, [r4, #0]
 800af8a:	2000      	movs	r0, #0
 800af8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af90:	4650      	mov	r0, sl
 800af92:	f000 fac7 	bl	800b524 <_realloc_r>
 800af96:	4606      	mov	r6, r0
 800af98:	2800      	cmp	r0, #0
 800af9a:	d1e1      	bne.n	800af60 <__ssputs_r+0x64>
 800af9c:	6921      	ldr	r1, [r4, #16]
 800af9e:	4650      	mov	r0, sl
 800afa0:	f7ff feb4 	bl	800ad0c <_free_r>
 800afa4:	230c      	movs	r3, #12
 800afa6:	f8ca 3000 	str.w	r3, [sl]
 800afaa:	89a3      	ldrh	r3, [r4, #12]
 800afac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afb0:	81a3      	strh	r3, [r4, #12]
 800afb2:	f04f 30ff 	mov.w	r0, #4294967295
 800afb6:	e7e9      	b.n	800af8c <__ssputs_r+0x90>
 800afb8:	463e      	mov	r6, r7
 800afba:	e7db      	b.n	800af74 <__ssputs_r+0x78>

0800afbc <_svfiprintf_r>:
 800afbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc0:	4698      	mov	r8, r3
 800afc2:	898b      	ldrh	r3, [r1, #12]
 800afc4:	061b      	lsls	r3, r3, #24
 800afc6:	b09d      	sub	sp, #116	@ 0x74
 800afc8:	4607      	mov	r7, r0
 800afca:	460d      	mov	r5, r1
 800afcc:	4614      	mov	r4, r2
 800afce:	d510      	bpl.n	800aff2 <_svfiprintf_r+0x36>
 800afd0:	690b      	ldr	r3, [r1, #16]
 800afd2:	b973      	cbnz	r3, 800aff2 <_svfiprintf_r+0x36>
 800afd4:	2140      	movs	r1, #64	@ 0x40
 800afd6:	f7ff ff05 	bl	800ade4 <_malloc_r>
 800afda:	6028      	str	r0, [r5, #0]
 800afdc:	6128      	str	r0, [r5, #16]
 800afde:	b930      	cbnz	r0, 800afee <_svfiprintf_r+0x32>
 800afe0:	230c      	movs	r3, #12
 800afe2:	603b      	str	r3, [r7, #0]
 800afe4:	f04f 30ff 	mov.w	r0, #4294967295
 800afe8:	b01d      	add	sp, #116	@ 0x74
 800afea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afee:	2340      	movs	r3, #64	@ 0x40
 800aff0:	616b      	str	r3, [r5, #20]
 800aff2:	2300      	movs	r3, #0
 800aff4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aff6:	2320      	movs	r3, #32
 800aff8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800affc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b000:	2330      	movs	r3, #48	@ 0x30
 800b002:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b1a0 <_svfiprintf_r+0x1e4>
 800b006:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b00a:	f04f 0901 	mov.w	r9, #1
 800b00e:	4623      	mov	r3, r4
 800b010:	469a      	mov	sl, r3
 800b012:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b016:	b10a      	cbz	r2, 800b01c <_svfiprintf_r+0x60>
 800b018:	2a25      	cmp	r2, #37	@ 0x25
 800b01a:	d1f9      	bne.n	800b010 <_svfiprintf_r+0x54>
 800b01c:	ebba 0b04 	subs.w	fp, sl, r4
 800b020:	d00b      	beq.n	800b03a <_svfiprintf_r+0x7e>
 800b022:	465b      	mov	r3, fp
 800b024:	4622      	mov	r2, r4
 800b026:	4629      	mov	r1, r5
 800b028:	4638      	mov	r0, r7
 800b02a:	f7ff ff67 	bl	800aefc <__ssputs_r>
 800b02e:	3001      	adds	r0, #1
 800b030:	f000 80a7 	beq.w	800b182 <_svfiprintf_r+0x1c6>
 800b034:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b036:	445a      	add	r2, fp
 800b038:	9209      	str	r2, [sp, #36]	@ 0x24
 800b03a:	f89a 3000 	ldrb.w	r3, [sl]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f000 809f 	beq.w	800b182 <_svfiprintf_r+0x1c6>
 800b044:	2300      	movs	r3, #0
 800b046:	f04f 32ff 	mov.w	r2, #4294967295
 800b04a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b04e:	f10a 0a01 	add.w	sl, sl, #1
 800b052:	9304      	str	r3, [sp, #16]
 800b054:	9307      	str	r3, [sp, #28]
 800b056:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b05a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b05c:	4654      	mov	r4, sl
 800b05e:	2205      	movs	r2, #5
 800b060:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b064:	484e      	ldr	r0, [pc, #312]	@ (800b1a0 <_svfiprintf_r+0x1e4>)
 800b066:	f7f5 f8a3 	bl	80001b0 <memchr>
 800b06a:	9a04      	ldr	r2, [sp, #16]
 800b06c:	b9d8      	cbnz	r0, 800b0a6 <_svfiprintf_r+0xea>
 800b06e:	06d0      	lsls	r0, r2, #27
 800b070:	bf44      	itt	mi
 800b072:	2320      	movmi	r3, #32
 800b074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b078:	0711      	lsls	r1, r2, #28
 800b07a:	bf44      	itt	mi
 800b07c:	232b      	movmi	r3, #43	@ 0x2b
 800b07e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b082:	f89a 3000 	ldrb.w	r3, [sl]
 800b086:	2b2a      	cmp	r3, #42	@ 0x2a
 800b088:	d015      	beq.n	800b0b6 <_svfiprintf_r+0xfa>
 800b08a:	9a07      	ldr	r2, [sp, #28]
 800b08c:	4654      	mov	r4, sl
 800b08e:	2000      	movs	r0, #0
 800b090:	f04f 0c0a 	mov.w	ip, #10
 800b094:	4621      	mov	r1, r4
 800b096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b09a:	3b30      	subs	r3, #48	@ 0x30
 800b09c:	2b09      	cmp	r3, #9
 800b09e:	d94b      	bls.n	800b138 <_svfiprintf_r+0x17c>
 800b0a0:	b1b0      	cbz	r0, 800b0d0 <_svfiprintf_r+0x114>
 800b0a2:	9207      	str	r2, [sp, #28]
 800b0a4:	e014      	b.n	800b0d0 <_svfiprintf_r+0x114>
 800b0a6:	eba0 0308 	sub.w	r3, r0, r8
 800b0aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	9304      	str	r3, [sp, #16]
 800b0b2:	46a2      	mov	sl, r4
 800b0b4:	e7d2      	b.n	800b05c <_svfiprintf_r+0xa0>
 800b0b6:	9b03      	ldr	r3, [sp, #12]
 800b0b8:	1d19      	adds	r1, r3, #4
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	9103      	str	r1, [sp, #12]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	bfbb      	ittet	lt
 800b0c2:	425b      	neglt	r3, r3
 800b0c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b0c8:	9307      	strge	r3, [sp, #28]
 800b0ca:	9307      	strlt	r3, [sp, #28]
 800b0cc:	bfb8      	it	lt
 800b0ce:	9204      	strlt	r2, [sp, #16]
 800b0d0:	7823      	ldrb	r3, [r4, #0]
 800b0d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0d4:	d10a      	bne.n	800b0ec <_svfiprintf_r+0x130>
 800b0d6:	7863      	ldrb	r3, [r4, #1]
 800b0d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0da:	d132      	bne.n	800b142 <_svfiprintf_r+0x186>
 800b0dc:	9b03      	ldr	r3, [sp, #12]
 800b0de:	1d1a      	adds	r2, r3, #4
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	9203      	str	r2, [sp, #12]
 800b0e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0e8:	3402      	adds	r4, #2
 800b0ea:	9305      	str	r3, [sp, #20]
 800b0ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b1b0 <_svfiprintf_r+0x1f4>
 800b0f0:	7821      	ldrb	r1, [r4, #0]
 800b0f2:	2203      	movs	r2, #3
 800b0f4:	4650      	mov	r0, sl
 800b0f6:	f7f5 f85b 	bl	80001b0 <memchr>
 800b0fa:	b138      	cbz	r0, 800b10c <_svfiprintf_r+0x150>
 800b0fc:	9b04      	ldr	r3, [sp, #16]
 800b0fe:	eba0 000a 	sub.w	r0, r0, sl
 800b102:	2240      	movs	r2, #64	@ 0x40
 800b104:	4082      	lsls	r2, r0
 800b106:	4313      	orrs	r3, r2
 800b108:	3401      	adds	r4, #1
 800b10a:	9304      	str	r3, [sp, #16]
 800b10c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b110:	4824      	ldr	r0, [pc, #144]	@ (800b1a4 <_svfiprintf_r+0x1e8>)
 800b112:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b116:	2206      	movs	r2, #6
 800b118:	f7f5 f84a 	bl	80001b0 <memchr>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d036      	beq.n	800b18e <_svfiprintf_r+0x1d2>
 800b120:	4b21      	ldr	r3, [pc, #132]	@ (800b1a8 <_svfiprintf_r+0x1ec>)
 800b122:	bb1b      	cbnz	r3, 800b16c <_svfiprintf_r+0x1b0>
 800b124:	9b03      	ldr	r3, [sp, #12]
 800b126:	3307      	adds	r3, #7
 800b128:	f023 0307 	bic.w	r3, r3, #7
 800b12c:	3308      	adds	r3, #8
 800b12e:	9303      	str	r3, [sp, #12]
 800b130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b132:	4433      	add	r3, r6
 800b134:	9309      	str	r3, [sp, #36]	@ 0x24
 800b136:	e76a      	b.n	800b00e <_svfiprintf_r+0x52>
 800b138:	fb0c 3202 	mla	r2, ip, r2, r3
 800b13c:	460c      	mov	r4, r1
 800b13e:	2001      	movs	r0, #1
 800b140:	e7a8      	b.n	800b094 <_svfiprintf_r+0xd8>
 800b142:	2300      	movs	r3, #0
 800b144:	3401      	adds	r4, #1
 800b146:	9305      	str	r3, [sp, #20]
 800b148:	4619      	mov	r1, r3
 800b14a:	f04f 0c0a 	mov.w	ip, #10
 800b14e:	4620      	mov	r0, r4
 800b150:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b154:	3a30      	subs	r2, #48	@ 0x30
 800b156:	2a09      	cmp	r2, #9
 800b158:	d903      	bls.n	800b162 <_svfiprintf_r+0x1a6>
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d0c6      	beq.n	800b0ec <_svfiprintf_r+0x130>
 800b15e:	9105      	str	r1, [sp, #20]
 800b160:	e7c4      	b.n	800b0ec <_svfiprintf_r+0x130>
 800b162:	fb0c 2101 	mla	r1, ip, r1, r2
 800b166:	4604      	mov	r4, r0
 800b168:	2301      	movs	r3, #1
 800b16a:	e7f0      	b.n	800b14e <_svfiprintf_r+0x192>
 800b16c:	ab03      	add	r3, sp, #12
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	462a      	mov	r2, r5
 800b172:	4b0e      	ldr	r3, [pc, #56]	@ (800b1ac <_svfiprintf_r+0x1f0>)
 800b174:	a904      	add	r1, sp, #16
 800b176:	4638      	mov	r0, r7
 800b178:	f3af 8000 	nop.w
 800b17c:	1c42      	adds	r2, r0, #1
 800b17e:	4606      	mov	r6, r0
 800b180:	d1d6      	bne.n	800b130 <_svfiprintf_r+0x174>
 800b182:	89ab      	ldrh	r3, [r5, #12]
 800b184:	065b      	lsls	r3, r3, #25
 800b186:	f53f af2d 	bmi.w	800afe4 <_svfiprintf_r+0x28>
 800b18a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b18c:	e72c      	b.n	800afe8 <_svfiprintf_r+0x2c>
 800b18e:	ab03      	add	r3, sp, #12
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	462a      	mov	r2, r5
 800b194:	4b05      	ldr	r3, [pc, #20]	@ (800b1ac <_svfiprintf_r+0x1f0>)
 800b196:	a904      	add	r1, sp, #16
 800b198:	4638      	mov	r0, r7
 800b19a:	f000 f879 	bl	800b290 <_printf_i>
 800b19e:	e7ed      	b.n	800b17c <_svfiprintf_r+0x1c0>
 800b1a0:	0800c560 	.word	0x0800c560
 800b1a4:	0800c56a 	.word	0x0800c56a
 800b1a8:	00000000 	.word	0x00000000
 800b1ac:	0800aefd 	.word	0x0800aefd
 800b1b0:	0800c566 	.word	0x0800c566

0800b1b4 <_printf_common>:
 800b1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1b8:	4616      	mov	r6, r2
 800b1ba:	4698      	mov	r8, r3
 800b1bc:	688a      	ldr	r2, [r1, #8]
 800b1be:	690b      	ldr	r3, [r1, #16]
 800b1c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	bfb8      	it	lt
 800b1c8:	4613      	movlt	r3, r2
 800b1ca:	6033      	str	r3, [r6, #0]
 800b1cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b1d0:	4607      	mov	r7, r0
 800b1d2:	460c      	mov	r4, r1
 800b1d4:	b10a      	cbz	r2, 800b1da <_printf_common+0x26>
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	6033      	str	r3, [r6, #0]
 800b1da:	6823      	ldr	r3, [r4, #0]
 800b1dc:	0699      	lsls	r1, r3, #26
 800b1de:	bf42      	ittt	mi
 800b1e0:	6833      	ldrmi	r3, [r6, #0]
 800b1e2:	3302      	addmi	r3, #2
 800b1e4:	6033      	strmi	r3, [r6, #0]
 800b1e6:	6825      	ldr	r5, [r4, #0]
 800b1e8:	f015 0506 	ands.w	r5, r5, #6
 800b1ec:	d106      	bne.n	800b1fc <_printf_common+0x48>
 800b1ee:	f104 0a19 	add.w	sl, r4, #25
 800b1f2:	68e3      	ldr	r3, [r4, #12]
 800b1f4:	6832      	ldr	r2, [r6, #0]
 800b1f6:	1a9b      	subs	r3, r3, r2
 800b1f8:	42ab      	cmp	r3, r5
 800b1fa:	dc26      	bgt.n	800b24a <_printf_common+0x96>
 800b1fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b200:	6822      	ldr	r2, [r4, #0]
 800b202:	3b00      	subs	r3, #0
 800b204:	bf18      	it	ne
 800b206:	2301      	movne	r3, #1
 800b208:	0692      	lsls	r2, r2, #26
 800b20a:	d42b      	bmi.n	800b264 <_printf_common+0xb0>
 800b20c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b210:	4641      	mov	r1, r8
 800b212:	4638      	mov	r0, r7
 800b214:	47c8      	blx	r9
 800b216:	3001      	adds	r0, #1
 800b218:	d01e      	beq.n	800b258 <_printf_common+0xa4>
 800b21a:	6823      	ldr	r3, [r4, #0]
 800b21c:	6922      	ldr	r2, [r4, #16]
 800b21e:	f003 0306 	and.w	r3, r3, #6
 800b222:	2b04      	cmp	r3, #4
 800b224:	bf02      	ittt	eq
 800b226:	68e5      	ldreq	r5, [r4, #12]
 800b228:	6833      	ldreq	r3, [r6, #0]
 800b22a:	1aed      	subeq	r5, r5, r3
 800b22c:	68a3      	ldr	r3, [r4, #8]
 800b22e:	bf0c      	ite	eq
 800b230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b234:	2500      	movne	r5, #0
 800b236:	4293      	cmp	r3, r2
 800b238:	bfc4      	itt	gt
 800b23a:	1a9b      	subgt	r3, r3, r2
 800b23c:	18ed      	addgt	r5, r5, r3
 800b23e:	2600      	movs	r6, #0
 800b240:	341a      	adds	r4, #26
 800b242:	42b5      	cmp	r5, r6
 800b244:	d11a      	bne.n	800b27c <_printf_common+0xc8>
 800b246:	2000      	movs	r0, #0
 800b248:	e008      	b.n	800b25c <_printf_common+0xa8>
 800b24a:	2301      	movs	r3, #1
 800b24c:	4652      	mov	r2, sl
 800b24e:	4641      	mov	r1, r8
 800b250:	4638      	mov	r0, r7
 800b252:	47c8      	blx	r9
 800b254:	3001      	adds	r0, #1
 800b256:	d103      	bne.n	800b260 <_printf_common+0xac>
 800b258:	f04f 30ff 	mov.w	r0, #4294967295
 800b25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b260:	3501      	adds	r5, #1
 800b262:	e7c6      	b.n	800b1f2 <_printf_common+0x3e>
 800b264:	18e1      	adds	r1, r4, r3
 800b266:	1c5a      	adds	r2, r3, #1
 800b268:	2030      	movs	r0, #48	@ 0x30
 800b26a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b26e:	4422      	add	r2, r4
 800b270:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b274:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b278:	3302      	adds	r3, #2
 800b27a:	e7c7      	b.n	800b20c <_printf_common+0x58>
 800b27c:	2301      	movs	r3, #1
 800b27e:	4622      	mov	r2, r4
 800b280:	4641      	mov	r1, r8
 800b282:	4638      	mov	r0, r7
 800b284:	47c8      	blx	r9
 800b286:	3001      	adds	r0, #1
 800b288:	d0e6      	beq.n	800b258 <_printf_common+0xa4>
 800b28a:	3601      	adds	r6, #1
 800b28c:	e7d9      	b.n	800b242 <_printf_common+0x8e>
	...

0800b290 <_printf_i>:
 800b290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b294:	7e0f      	ldrb	r7, [r1, #24]
 800b296:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b298:	2f78      	cmp	r7, #120	@ 0x78
 800b29a:	4691      	mov	r9, r2
 800b29c:	4680      	mov	r8, r0
 800b29e:	460c      	mov	r4, r1
 800b2a0:	469a      	mov	sl, r3
 800b2a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b2a6:	d807      	bhi.n	800b2b8 <_printf_i+0x28>
 800b2a8:	2f62      	cmp	r7, #98	@ 0x62
 800b2aa:	d80a      	bhi.n	800b2c2 <_printf_i+0x32>
 800b2ac:	2f00      	cmp	r7, #0
 800b2ae:	f000 80d2 	beq.w	800b456 <_printf_i+0x1c6>
 800b2b2:	2f58      	cmp	r7, #88	@ 0x58
 800b2b4:	f000 80b7 	beq.w	800b426 <_printf_i+0x196>
 800b2b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b2c0:	e03a      	b.n	800b338 <_printf_i+0xa8>
 800b2c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b2c6:	2b15      	cmp	r3, #21
 800b2c8:	d8f6      	bhi.n	800b2b8 <_printf_i+0x28>
 800b2ca:	a101      	add	r1, pc, #4	@ (adr r1, 800b2d0 <_printf_i+0x40>)
 800b2cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2d0:	0800b329 	.word	0x0800b329
 800b2d4:	0800b33d 	.word	0x0800b33d
 800b2d8:	0800b2b9 	.word	0x0800b2b9
 800b2dc:	0800b2b9 	.word	0x0800b2b9
 800b2e0:	0800b2b9 	.word	0x0800b2b9
 800b2e4:	0800b2b9 	.word	0x0800b2b9
 800b2e8:	0800b33d 	.word	0x0800b33d
 800b2ec:	0800b2b9 	.word	0x0800b2b9
 800b2f0:	0800b2b9 	.word	0x0800b2b9
 800b2f4:	0800b2b9 	.word	0x0800b2b9
 800b2f8:	0800b2b9 	.word	0x0800b2b9
 800b2fc:	0800b43d 	.word	0x0800b43d
 800b300:	0800b367 	.word	0x0800b367
 800b304:	0800b3f3 	.word	0x0800b3f3
 800b308:	0800b2b9 	.word	0x0800b2b9
 800b30c:	0800b2b9 	.word	0x0800b2b9
 800b310:	0800b45f 	.word	0x0800b45f
 800b314:	0800b2b9 	.word	0x0800b2b9
 800b318:	0800b367 	.word	0x0800b367
 800b31c:	0800b2b9 	.word	0x0800b2b9
 800b320:	0800b2b9 	.word	0x0800b2b9
 800b324:	0800b3fb 	.word	0x0800b3fb
 800b328:	6833      	ldr	r3, [r6, #0]
 800b32a:	1d1a      	adds	r2, r3, #4
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	6032      	str	r2, [r6, #0]
 800b330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b334:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b338:	2301      	movs	r3, #1
 800b33a:	e09d      	b.n	800b478 <_printf_i+0x1e8>
 800b33c:	6833      	ldr	r3, [r6, #0]
 800b33e:	6820      	ldr	r0, [r4, #0]
 800b340:	1d19      	adds	r1, r3, #4
 800b342:	6031      	str	r1, [r6, #0]
 800b344:	0606      	lsls	r6, r0, #24
 800b346:	d501      	bpl.n	800b34c <_printf_i+0xbc>
 800b348:	681d      	ldr	r5, [r3, #0]
 800b34a:	e003      	b.n	800b354 <_printf_i+0xc4>
 800b34c:	0645      	lsls	r5, r0, #25
 800b34e:	d5fb      	bpl.n	800b348 <_printf_i+0xb8>
 800b350:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b354:	2d00      	cmp	r5, #0
 800b356:	da03      	bge.n	800b360 <_printf_i+0xd0>
 800b358:	232d      	movs	r3, #45	@ 0x2d
 800b35a:	426d      	negs	r5, r5
 800b35c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b360:	4859      	ldr	r0, [pc, #356]	@ (800b4c8 <_printf_i+0x238>)
 800b362:	230a      	movs	r3, #10
 800b364:	e010      	b.n	800b388 <_printf_i+0xf8>
 800b366:	6821      	ldr	r1, [r4, #0]
 800b368:	6833      	ldr	r3, [r6, #0]
 800b36a:	0608      	lsls	r0, r1, #24
 800b36c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b370:	d402      	bmi.n	800b378 <_printf_i+0xe8>
 800b372:	0649      	lsls	r1, r1, #25
 800b374:	bf48      	it	mi
 800b376:	b2ad      	uxthmi	r5, r5
 800b378:	2f6f      	cmp	r7, #111	@ 0x6f
 800b37a:	4853      	ldr	r0, [pc, #332]	@ (800b4c8 <_printf_i+0x238>)
 800b37c:	6033      	str	r3, [r6, #0]
 800b37e:	d159      	bne.n	800b434 <_printf_i+0x1a4>
 800b380:	2308      	movs	r3, #8
 800b382:	2100      	movs	r1, #0
 800b384:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b388:	6866      	ldr	r6, [r4, #4]
 800b38a:	60a6      	str	r6, [r4, #8]
 800b38c:	2e00      	cmp	r6, #0
 800b38e:	db05      	blt.n	800b39c <_printf_i+0x10c>
 800b390:	6821      	ldr	r1, [r4, #0]
 800b392:	432e      	orrs	r6, r5
 800b394:	f021 0104 	bic.w	r1, r1, #4
 800b398:	6021      	str	r1, [r4, #0]
 800b39a:	d04d      	beq.n	800b438 <_printf_i+0x1a8>
 800b39c:	4616      	mov	r6, r2
 800b39e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b3a2:	fb03 5711 	mls	r7, r3, r1, r5
 800b3a6:	5dc7      	ldrb	r7, [r0, r7]
 800b3a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b3ac:	462f      	mov	r7, r5
 800b3ae:	42bb      	cmp	r3, r7
 800b3b0:	460d      	mov	r5, r1
 800b3b2:	d9f4      	bls.n	800b39e <_printf_i+0x10e>
 800b3b4:	2b08      	cmp	r3, #8
 800b3b6:	d10b      	bne.n	800b3d0 <_printf_i+0x140>
 800b3b8:	6823      	ldr	r3, [r4, #0]
 800b3ba:	07df      	lsls	r7, r3, #31
 800b3bc:	d508      	bpl.n	800b3d0 <_printf_i+0x140>
 800b3be:	6923      	ldr	r3, [r4, #16]
 800b3c0:	6861      	ldr	r1, [r4, #4]
 800b3c2:	4299      	cmp	r1, r3
 800b3c4:	bfde      	ittt	le
 800b3c6:	2330      	movle	r3, #48	@ 0x30
 800b3c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b3cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b3d0:	1b92      	subs	r2, r2, r6
 800b3d2:	6122      	str	r2, [r4, #16]
 800b3d4:	f8cd a000 	str.w	sl, [sp]
 800b3d8:	464b      	mov	r3, r9
 800b3da:	aa03      	add	r2, sp, #12
 800b3dc:	4621      	mov	r1, r4
 800b3de:	4640      	mov	r0, r8
 800b3e0:	f7ff fee8 	bl	800b1b4 <_printf_common>
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	d14c      	bne.n	800b482 <_printf_i+0x1f2>
 800b3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ec:	b004      	add	sp, #16
 800b3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	f043 0320 	orr.w	r3, r3, #32
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	4834      	ldr	r0, [pc, #208]	@ (800b4cc <_printf_i+0x23c>)
 800b3fc:	2778      	movs	r7, #120	@ 0x78
 800b3fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	6831      	ldr	r1, [r6, #0]
 800b406:	061f      	lsls	r7, r3, #24
 800b408:	f851 5b04 	ldr.w	r5, [r1], #4
 800b40c:	d402      	bmi.n	800b414 <_printf_i+0x184>
 800b40e:	065f      	lsls	r7, r3, #25
 800b410:	bf48      	it	mi
 800b412:	b2ad      	uxthmi	r5, r5
 800b414:	6031      	str	r1, [r6, #0]
 800b416:	07d9      	lsls	r1, r3, #31
 800b418:	bf44      	itt	mi
 800b41a:	f043 0320 	orrmi.w	r3, r3, #32
 800b41e:	6023      	strmi	r3, [r4, #0]
 800b420:	b11d      	cbz	r5, 800b42a <_printf_i+0x19a>
 800b422:	2310      	movs	r3, #16
 800b424:	e7ad      	b.n	800b382 <_printf_i+0xf2>
 800b426:	4828      	ldr	r0, [pc, #160]	@ (800b4c8 <_printf_i+0x238>)
 800b428:	e7e9      	b.n	800b3fe <_printf_i+0x16e>
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	f023 0320 	bic.w	r3, r3, #32
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	e7f6      	b.n	800b422 <_printf_i+0x192>
 800b434:	230a      	movs	r3, #10
 800b436:	e7a4      	b.n	800b382 <_printf_i+0xf2>
 800b438:	4616      	mov	r6, r2
 800b43a:	e7bb      	b.n	800b3b4 <_printf_i+0x124>
 800b43c:	6833      	ldr	r3, [r6, #0]
 800b43e:	6825      	ldr	r5, [r4, #0]
 800b440:	6961      	ldr	r1, [r4, #20]
 800b442:	1d18      	adds	r0, r3, #4
 800b444:	6030      	str	r0, [r6, #0]
 800b446:	062e      	lsls	r6, r5, #24
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	d501      	bpl.n	800b450 <_printf_i+0x1c0>
 800b44c:	6019      	str	r1, [r3, #0]
 800b44e:	e002      	b.n	800b456 <_printf_i+0x1c6>
 800b450:	0668      	lsls	r0, r5, #25
 800b452:	d5fb      	bpl.n	800b44c <_printf_i+0x1bc>
 800b454:	8019      	strh	r1, [r3, #0]
 800b456:	2300      	movs	r3, #0
 800b458:	6123      	str	r3, [r4, #16]
 800b45a:	4616      	mov	r6, r2
 800b45c:	e7ba      	b.n	800b3d4 <_printf_i+0x144>
 800b45e:	6833      	ldr	r3, [r6, #0]
 800b460:	1d1a      	adds	r2, r3, #4
 800b462:	6032      	str	r2, [r6, #0]
 800b464:	681e      	ldr	r6, [r3, #0]
 800b466:	6862      	ldr	r2, [r4, #4]
 800b468:	2100      	movs	r1, #0
 800b46a:	4630      	mov	r0, r6
 800b46c:	f7f4 fea0 	bl	80001b0 <memchr>
 800b470:	b108      	cbz	r0, 800b476 <_printf_i+0x1e6>
 800b472:	1b80      	subs	r0, r0, r6
 800b474:	6060      	str	r0, [r4, #4]
 800b476:	6863      	ldr	r3, [r4, #4]
 800b478:	6123      	str	r3, [r4, #16]
 800b47a:	2300      	movs	r3, #0
 800b47c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b480:	e7a8      	b.n	800b3d4 <_printf_i+0x144>
 800b482:	6923      	ldr	r3, [r4, #16]
 800b484:	4632      	mov	r2, r6
 800b486:	4649      	mov	r1, r9
 800b488:	4640      	mov	r0, r8
 800b48a:	47d0      	blx	sl
 800b48c:	3001      	adds	r0, #1
 800b48e:	d0ab      	beq.n	800b3e8 <_printf_i+0x158>
 800b490:	6823      	ldr	r3, [r4, #0]
 800b492:	079b      	lsls	r3, r3, #30
 800b494:	d413      	bmi.n	800b4be <_printf_i+0x22e>
 800b496:	68e0      	ldr	r0, [r4, #12]
 800b498:	9b03      	ldr	r3, [sp, #12]
 800b49a:	4298      	cmp	r0, r3
 800b49c:	bfb8      	it	lt
 800b49e:	4618      	movlt	r0, r3
 800b4a0:	e7a4      	b.n	800b3ec <_printf_i+0x15c>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	4632      	mov	r2, r6
 800b4a6:	4649      	mov	r1, r9
 800b4a8:	4640      	mov	r0, r8
 800b4aa:	47d0      	blx	sl
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d09b      	beq.n	800b3e8 <_printf_i+0x158>
 800b4b0:	3501      	adds	r5, #1
 800b4b2:	68e3      	ldr	r3, [r4, #12]
 800b4b4:	9903      	ldr	r1, [sp, #12]
 800b4b6:	1a5b      	subs	r3, r3, r1
 800b4b8:	42ab      	cmp	r3, r5
 800b4ba:	dcf2      	bgt.n	800b4a2 <_printf_i+0x212>
 800b4bc:	e7eb      	b.n	800b496 <_printf_i+0x206>
 800b4be:	2500      	movs	r5, #0
 800b4c0:	f104 0619 	add.w	r6, r4, #25
 800b4c4:	e7f5      	b.n	800b4b2 <_printf_i+0x222>
 800b4c6:	bf00      	nop
 800b4c8:	0800c571 	.word	0x0800c571
 800b4cc:	0800c582 	.word	0x0800c582

0800b4d0 <memmove>:
 800b4d0:	4288      	cmp	r0, r1
 800b4d2:	b510      	push	{r4, lr}
 800b4d4:	eb01 0402 	add.w	r4, r1, r2
 800b4d8:	d902      	bls.n	800b4e0 <memmove+0x10>
 800b4da:	4284      	cmp	r4, r0
 800b4dc:	4623      	mov	r3, r4
 800b4de:	d807      	bhi.n	800b4f0 <memmove+0x20>
 800b4e0:	1e43      	subs	r3, r0, #1
 800b4e2:	42a1      	cmp	r1, r4
 800b4e4:	d007      	beq.n	800b4f6 <memmove+0x26>
 800b4e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4ee:	e7f8      	b.n	800b4e2 <memmove+0x12>
 800b4f0:	4402      	add	r2, r0
 800b4f2:	4282      	cmp	r2, r0
 800b4f4:	d100      	bne.n	800b4f8 <memmove+0x28>
 800b4f6:	bd10      	pop	{r4, pc}
 800b4f8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b4fc:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800b500:	e7f7      	b.n	800b4f2 <memmove+0x22>
	...

0800b504 <_sbrk_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4d06      	ldr	r5, [pc, #24]	@ (800b520 <_sbrk_r+0x1c>)
 800b508:	2300      	movs	r3, #0
 800b50a:	4604      	mov	r4, r0
 800b50c:	4608      	mov	r0, r1
 800b50e:	602b      	str	r3, [r5, #0]
 800b510:	f7fc fac0 	bl	8007a94 <_sbrk>
 800b514:	1c43      	adds	r3, r0, #1
 800b516:	d102      	bne.n	800b51e <_sbrk_r+0x1a>
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	b103      	cbz	r3, 800b51e <_sbrk_r+0x1a>
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
 800b520:	20008bdc 	.word	0x20008bdc

0800b524 <_realloc_r>:
 800b524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b528:	4607      	mov	r7, r0
 800b52a:	4614      	mov	r4, r2
 800b52c:	460d      	mov	r5, r1
 800b52e:	b921      	cbnz	r1, 800b53a <_realloc_r+0x16>
 800b530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b534:	4611      	mov	r1, r2
 800b536:	f7ff bc55 	b.w	800ade4 <_malloc_r>
 800b53a:	b92a      	cbnz	r2, 800b548 <_realloc_r+0x24>
 800b53c:	f7ff fbe6 	bl	800ad0c <_free_r>
 800b540:	4625      	mov	r5, r4
 800b542:	4628      	mov	r0, r5
 800b544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b548:	f000 f81a 	bl	800b580 <_malloc_usable_size_r>
 800b54c:	4284      	cmp	r4, r0
 800b54e:	4606      	mov	r6, r0
 800b550:	d802      	bhi.n	800b558 <_realloc_r+0x34>
 800b552:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b556:	d8f4      	bhi.n	800b542 <_realloc_r+0x1e>
 800b558:	4621      	mov	r1, r4
 800b55a:	4638      	mov	r0, r7
 800b55c:	f7ff fc42 	bl	800ade4 <_malloc_r>
 800b560:	4680      	mov	r8, r0
 800b562:	b908      	cbnz	r0, 800b568 <_realloc_r+0x44>
 800b564:	4645      	mov	r5, r8
 800b566:	e7ec      	b.n	800b542 <_realloc_r+0x1e>
 800b568:	42b4      	cmp	r4, r6
 800b56a:	4622      	mov	r2, r4
 800b56c:	4629      	mov	r1, r5
 800b56e:	bf28      	it	cs
 800b570:	4632      	movcs	r2, r6
 800b572:	f7ff fbbd 	bl	800acf0 <memcpy>
 800b576:	4629      	mov	r1, r5
 800b578:	4638      	mov	r0, r7
 800b57a:	f7ff fbc7 	bl	800ad0c <_free_r>
 800b57e:	e7f1      	b.n	800b564 <_realloc_r+0x40>

0800b580 <_malloc_usable_size_r>:
 800b580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b584:	1f18      	subs	r0, r3, #4
 800b586:	2b00      	cmp	r3, #0
 800b588:	bfbc      	itt	lt
 800b58a:	580b      	ldrlt	r3, [r1, r0]
 800b58c:	18c0      	addlt	r0, r0, r3
 800b58e:	4770      	bx	lr

0800b590 <logf>:
 800b590:	b508      	push	{r3, lr}
 800b592:	ed2d 8b02 	vpush	{d8}
 800b596:	eeb0 8a40 	vmov.f32	s16, s0
 800b59a:	f000 f82f 	bl	800b5fc <__ieee754_logf>
 800b59e:	eeb4 8a48 	vcmp.f32	s16, s16
 800b5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a6:	d60f      	bvs.n	800b5c8 <logf+0x38>
 800b5a8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b0:	dc0a      	bgt.n	800b5c8 <logf+0x38>
 800b5b2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ba:	d108      	bne.n	800b5ce <logf+0x3e>
 800b5bc:	f7ff fb6c 	bl	800ac98 <__errno>
 800b5c0:	2322      	movs	r3, #34	@ 0x22
 800b5c2:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800b5e8 <logf+0x58>
 800b5c6:	6003      	str	r3, [r0, #0]
 800b5c8:	ecbd 8b02 	vpop	{d8}
 800b5cc:	bd08      	pop	{r3, pc}
 800b5ce:	f7ff fb63 	bl	800ac98 <__errno>
 800b5d2:	ecbd 8b02 	vpop	{d8}
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2221      	movs	r2, #33	@ 0x21
 800b5da:	601a      	str	r2, [r3, #0]
 800b5dc:	4803      	ldr	r0, [pc, #12]	@ (800b5ec <logf+0x5c>)
 800b5de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b5e2:	f000 b805 	b.w	800b5f0 <nanf>
 800b5e6:	bf00      	nop
 800b5e8:	ff800000 	.word	0xff800000
 800b5ec:	0800bc30 	.word	0x0800bc30

0800b5f0 <nanf>:
 800b5f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b5f8 <nanf+0x8>
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	7fc00000 	.word	0x7fc00000

0800b5fc <__ieee754_logf>:
 800b5fc:	ee10 2a10 	vmov	r2, s0
 800b600:	f032 4300 	bics.w	r3, r2, #2147483648	@ 0x80000000
 800b604:	d02f      	beq.n	800b666 <__ieee754_logf+0x6a>
 800b606:	2a00      	cmp	r2, #0
 800b608:	4613      	mov	r3, r2
 800b60a:	db33      	blt.n	800b674 <__ieee754_logf+0x78>
 800b60c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b610:	da40      	bge.n	800b694 <__ieee754_logf+0x98>
 800b612:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800b616:	db34      	blt.n	800b682 <__ieee754_logf+0x86>
 800b618:	f04f 0c00 	mov.w	ip, #0
 800b61c:	4864      	ldr	r0, [pc, #400]	@ (800b7b0 <__ieee754_logf+0x1b4>)
 800b61e:	f3c3 0116 	ubfx	r1, r3, #0, #23
 800b622:	4408      	add	r0, r1
 800b624:	f400 0200 	and.w	r2, r0, #8388608	@ 0x800000
 800b628:	f082 527e 	eor.w	r2, r2, #1065353216	@ 0x3f800000
 800b62c:	430a      	orrs	r2, r1
 800b62e:	15db      	asrs	r3, r3, #23
 800b630:	ee00 2a10 	vmov	s0, r2
 800b634:	3b7f      	subs	r3, #127	@ 0x7f
 800b636:	4a5f      	ldr	r2, [pc, #380]	@ (800b7b4 <__ieee754_logf+0x1b8>)
 800b638:	4463      	add	r3, ip
 800b63a:	f101 0c0f 	add.w	ip, r1, #15
 800b63e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b642:	ea0c 0202 	and.w	r2, ip, r2
 800b646:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b64a:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800b64e:	bb22      	cbnz	r2, 800b69a <__ieee754_logf+0x9e>
 800b650:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b658:	d162      	bne.n	800b720 <__ieee754_logf+0x124>
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	f040 8090 	bne.w	800b780 <__ieee754_logf+0x184>
 800b660:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 800b7b8 <__ieee754_logf+0x1bc>
 800b664:	4770      	bx	lr
 800b666:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800b7bc <__ieee754_logf+0x1c0>
 800b66a:	eddf 7a53 	vldr	s15, [pc, #332]	@ 800b7b8 <__ieee754_logf+0x1bc>
 800b66e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b672:	4770      	bx	lr
 800b674:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b678:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800b7b8 <__ieee754_logf+0x1bc>
 800b67c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800b680:	4770      	bx	lr
 800b682:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 800b7c0 <__ieee754_logf+0x1c4>
 800b686:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b68a:	f06f 0c18 	mvn.w	ip, #24
 800b68e:	ee17 3a90 	vmov	r3, s15
 800b692:	e7c3      	b.n	800b61c <__ieee754_logf+0x20>
 800b694:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b698:	4770      	bx	lr
 800b69a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800b69e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b6a2:	ee07 3a10 	vmov	s14, r3
 800b6a6:	ee80 4a27 	vdiv.f32	s8, s0, s15
 800b6aa:	4846      	ldr	r0, [pc, #280]	@ (800b7c4 <__ieee754_logf+0x1c8>)
 800b6ac:	f5c1 1257 	rsb	r2, r1, #3522560	@ 0x35c000
 800b6b0:	4408      	add	r0, r1
 800b6b2:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800b6b6:	4302      	orrs	r2, r0
 800b6b8:	2a00      	cmp	r2, #0
 800b6ba:	ed9f 3a43 	vldr	s6, [pc, #268]	@ 800b7c8 <__ieee754_logf+0x1cc>
 800b6be:	eddf 4a43 	vldr	s9, [pc, #268]	@ 800b7cc <__ieee754_logf+0x1d0>
 800b6c2:	eddf 5a43 	vldr	s11, [pc, #268]	@ 800b7d0 <__ieee754_logf+0x1d4>
 800b6c6:	eddf 3a43 	vldr	s7, [pc, #268]	@ 800b7d4 <__ieee754_logf+0x1d8>
 800b6ca:	ed9f 5a43 	vldr	s10, [pc, #268]	@ 800b7d8 <__ieee754_logf+0x1dc>
 800b6ce:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800b7dc <__ieee754_logf+0x1e0>
 800b6d2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800b7e0 <__ieee754_logf+0x1e4>
 800b6d6:	ee24 6a04 	vmul.f32	s12, s8, s8
 800b6da:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 800b6de:	ee26 7a06 	vmul.f32	s14, s12, s12
 800b6e2:	eee7 4a03 	vfma.f32	s9, s14, s6
 800b6e6:	eea7 5a23 	vfma.f32	s10, s14, s7
 800b6ea:	eee4 5a87 	vfma.f32	s11, s9, s14
 800b6ee:	eee5 6a07 	vfma.f32	s13, s10, s14
 800b6f2:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b6f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b6fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b6fe:	dd2a      	ble.n	800b756 <__ieee754_logf+0x15a>
 800b700:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b704:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b708:	ee27 7a00 	vmul.f32	s14, s14, s0
 800b70c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b710:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b714:	bb3b      	cbnz	r3, 800b766 <__ieee754_logf+0x16a>
 800b716:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b71a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b71e:	4770      	bx	lr
 800b720:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800b7e4 <__ieee754_logf+0x1e8>
 800b724:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b728:	eee0 7a47 	vfms.f32	s15, s0, s14
 800b72c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b730:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b734:	2b00      	cmp	r3, #0
 800b736:	d0f0      	beq.n	800b71a <__ieee754_logf+0x11e>
 800b738:	ee07 3a90 	vmov	s15, r3
 800b73c:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 800b7e8 <__ieee754_logf+0x1ec>
 800b740:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b7ec <__ieee754_logf+0x1f0>
 800b744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b748:	eea7 7ac6 	vfms.f32	s14, s15, s12
 800b74c:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b750:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 800b754:	4770      	bx	lr
 800b756:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b75a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b75e:	b9e3      	cbnz	r3, 800b79a <__ieee754_logf+0x19e>
 800b760:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b764:	4770      	bx	lr
 800b766:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 800b7e8 <__ieee754_logf+0x1ec>
 800b76a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800b7ec <__ieee754_logf+0x1f0>
 800b76e:	eee2 7a86 	vfma.f32	s15, s5, s12
 800b772:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b776:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b77a:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 800b77e:	4770      	bx	lr
 800b780:	ee07 3a90 	vmov	s15, r3
 800b784:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800b7e8 <__ieee754_logf+0x1ec>
 800b788:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800b7ec <__ieee754_logf+0x1f0>
 800b78c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b790:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b794:	eea7 0a87 	vfma.f32	s0, s15, s14
 800b798:	4770      	bx	lr
 800b79a:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800b7e8 <__ieee754_logf+0x1ec>
 800b79e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800b7ec <__ieee754_logf+0x1f0>
 800b7a2:	eee2 7ae6 	vfms.f32	s15, s5, s13
 800b7a6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b7aa:	ee92 0a87 	vfnms.f32	s0, s5, s14
 800b7ae:	4770      	bx	lr
 800b7b0:	004afb20 	.word	0x004afb20
 800b7b4:	007ffff0 	.word	0x007ffff0
 800b7b8:	00000000 	.word	0x00000000
 800b7bc:	cc000000 	.word	0xcc000000
 800b7c0:	4c000000 	.word	0x4c000000
 800b7c4:	ffcf5c30 	.word	0xffcf5c30
 800b7c8:	3e178897 	.word	0x3e178897
 800b7cc:	3e3a3325 	.word	0x3e3a3325
 800b7d0:	3e924925 	.word	0x3e924925
 800b7d4:	3e1cd04f 	.word	0x3e1cd04f
 800b7d8:	3e638e29 	.word	0x3e638e29
 800b7dc:	3f2aaaab 	.word	0x3f2aaaab
 800b7e0:	3ecccccd 	.word	0x3ecccccd
 800b7e4:	3eaaaaab 	.word	0x3eaaaaab
 800b7e8:	3717f7d1 	.word	0x3717f7d1
 800b7ec:	3f317180 	.word	0x3f317180

0800b7f0 <__udivmoddi4>:
 800b7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7f4:	9d08      	ldr	r5, [sp, #32]
 800b7f6:	460f      	mov	r7, r1
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	468c      	mov	ip, r1
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d148      	bne.n	800b892 <__udivmoddi4+0xa2>
 800b800:	428a      	cmp	r2, r1
 800b802:	4616      	mov	r6, r2
 800b804:	d961      	bls.n	800b8ca <__udivmoddi4+0xda>
 800b806:	fab2 f382 	clz	r3, r2
 800b80a:	b14b      	cbz	r3, 800b820 <__udivmoddi4+0x30>
 800b80c:	f1c3 0220 	rsb	r2, r3, #32
 800b810:	fa01 fc03 	lsl.w	ip, r1, r3
 800b814:	fa20 f202 	lsr.w	r2, r0, r2
 800b818:	409e      	lsls	r6, r3
 800b81a:	ea42 0c0c 	orr.w	ip, r2, ip
 800b81e:	409c      	lsls	r4, r3
 800b820:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800b824:	b2b7      	uxth	r7, r6
 800b826:	fbbc f1fe 	udiv	r1, ip, lr
 800b82a:	0c22      	lsrs	r2, r4, #16
 800b82c:	fb0e cc11 	mls	ip, lr, r1, ip
 800b830:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800b834:	fb01 f007 	mul.w	r0, r1, r7
 800b838:	4290      	cmp	r0, r2
 800b83a:	d909      	bls.n	800b850 <__udivmoddi4+0x60>
 800b83c:	18b2      	adds	r2, r6, r2
 800b83e:	f101 3cff 	add.w	ip, r1, #4294967295
 800b842:	f080 80ee 	bcs.w	800ba22 <__udivmoddi4+0x232>
 800b846:	4290      	cmp	r0, r2
 800b848:	f240 80eb 	bls.w	800ba22 <__udivmoddi4+0x232>
 800b84c:	3902      	subs	r1, #2
 800b84e:	4432      	add	r2, r6
 800b850:	1a12      	subs	r2, r2, r0
 800b852:	b2a4      	uxth	r4, r4
 800b854:	fbb2 f0fe 	udiv	r0, r2, lr
 800b858:	fb0e 2210 	mls	r2, lr, r0, r2
 800b85c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b860:	fb00 f707 	mul.w	r7, r0, r7
 800b864:	42a7      	cmp	r7, r4
 800b866:	d909      	bls.n	800b87c <__udivmoddi4+0x8c>
 800b868:	1934      	adds	r4, r6, r4
 800b86a:	f100 32ff 	add.w	r2, r0, #4294967295
 800b86e:	f080 80da 	bcs.w	800ba26 <__udivmoddi4+0x236>
 800b872:	42a7      	cmp	r7, r4
 800b874:	f240 80d7 	bls.w	800ba26 <__udivmoddi4+0x236>
 800b878:	4434      	add	r4, r6
 800b87a:	3802      	subs	r0, #2
 800b87c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800b880:	1be4      	subs	r4, r4, r7
 800b882:	2100      	movs	r1, #0
 800b884:	b11d      	cbz	r5, 800b88e <__udivmoddi4+0x9e>
 800b886:	40dc      	lsrs	r4, r3
 800b888:	2300      	movs	r3, #0
 800b88a:	e9c5 4300 	strd	r4, r3, [r5]
 800b88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b892:	428b      	cmp	r3, r1
 800b894:	d906      	bls.n	800b8a4 <__udivmoddi4+0xb4>
 800b896:	b10d      	cbz	r5, 800b89c <__udivmoddi4+0xac>
 800b898:	e9c5 0100 	strd	r0, r1, [r5]
 800b89c:	2100      	movs	r1, #0
 800b89e:	4608      	mov	r0, r1
 800b8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a4:	fab3 f183 	clz	r1, r3
 800b8a8:	2900      	cmp	r1, #0
 800b8aa:	d148      	bne.n	800b93e <__udivmoddi4+0x14e>
 800b8ac:	42bb      	cmp	r3, r7
 800b8ae:	d302      	bcc.n	800b8b6 <__udivmoddi4+0xc6>
 800b8b0:	4282      	cmp	r2, r0
 800b8b2:	f200 8107 	bhi.w	800bac4 <__udivmoddi4+0x2d4>
 800b8b6:	1a84      	subs	r4, r0, r2
 800b8b8:	eb67 0203 	sbc.w	r2, r7, r3
 800b8bc:	2001      	movs	r0, #1
 800b8be:	4694      	mov	ip, r2
 800b8c0:	2d00      	cmp	r5, #0
 800b8c2:	d0e4      	beq.n	800b88e <__udivmoddi4+0x9e>
 800b8c4:	e9c5 4c00 	strd	r4, ip, [r5]
 800b8c8:	e7e1      	b.n	800b88e <__udivmoddi4+0x9e>
 800b8ca:	2a00      	cmp	r2, #0
 800b8cc:	f000 8092 	beq.w	800b9f4 <__udivmoddi4+0x204>
 800b8d0:	fab2 f382 	clz	r3, r2
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f040 80a8 	bne.w	800ba2a <__udivmoddi4+0x23a>
 800b8da:	1a8a      	subs	r2, r1, r2
 800b8dc:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800b8e0:	fa1f fc86 	uxth.w	ip, r6
 800b8e4:	2101      	movs	r1, #1
 800b8e6:	0c20      	lsrs	r0, r4, #16
 800b8e8:	fbb2 f7fe 	udiv	r7, r2, lr
 800b8ec:	fb0e 2217 	mls	r2, lr, r7, r2
 800b8f0:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800b8f4:	fb0c f007 	mul.w	r0, ip, r7
 800b8f8:	4290      	cmp	r0, r2
 800b8fa:	d907      	bls.n	800b90c <__udivmoddi4+0x11c>
 800b8fc:	18b2      	adds	r2, r6, r2
 800b8fe:	f107 38ff 	add.w	r8, r7, #4294967295
 800b902:	d202      	bcs.n	800b90a <__udivmoddi4+0x11a>
 800b904:	4290      	cmp	r0, r2
 800b906:	f200 80e2 	bhi.w	800bace <__udivmoddi4+0x2de>
 800b90a:	4647      	mov	r7, r8
 800b90c:	1a12      	subs	r2, r2, r0
 800b90e:	b2a4      	uxth	r4, r4
 800b910:	fbb2 f0fe 	udiv	r0, r2, lr
 800b914:	fb0e 2210 	mls	r2, lr, r0, r2
 800b918:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b91c:	fb0c fc00 	mul.w	ip, ip, r0
 800b920:	45a4      	cmp	ip, r4
 800b922:	d907      	bls.n	800b934 <__udivmoddi4+0x144>
 800b924:	1934      	adds	r4, r6, r4
 800b926:	f100 32ff 	add.w	r2, r0, #4294967295
 800b92a:	d202      	bcs.n	800b932 <__udivmoddi4+0x142>
 800b92c:	45a4      	cmp	ip, r4
 800b92e:	f200 80cb 	bhi.w	800bac8 <__udivmoddi4+0x2d8>
 800b932:	4610      	mov	r0, r2
 800b934:	eba4 040c 	sub.w	r4, r4, ip
 800b938:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800b93c:	e7a2      	b.n	800b884 <__udivmoddi4+0x94>
 800b93e:	f1c1 0620 	rsb	r6, r1, #32
 800b942:	408b      	lsls	r3, r1
 800b944:	fa22 fc06 	lsr.w	ip, r2, r6
 800b948:	ea4c 0c03 	orr.w	ip, ip, r3
 800b94c:	fa07 f401 	lsl.w	r4, r7, r1
 800b950:	fa20 f306 	lsr.w	r3, r0, r6
 800b954:	40f7      	lsrs	r7, r6
 800b956:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800b95a:	4323      	orrs	r3, r4
 800b95c:	fa00 f801 	lsl.w	r8, r0, r1
 800b960:	fa1f fe8c 	uxth.w	lr, ip
 800b964:	fbb7 f0f9 	udiv	r0, r7, r9
 800b968:	0c1c      	lsrs	r4, r3, #16
 800b96a:	fb09 7710 	mls	r7, r9, r0, r7
 800b96e:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800b972:	fb00 f70e 	mul.w	r7, r0, lr
 800b976:	42a7      	cmp	r7, r4
 800b978:	fa02 f201 	lsl.w	r2, r2, r1
 800b97c:	d90a      	bls.n	800b994 <__udivmoddi4+0x1a4>
 800b97e:	eb1c 0404 	adds.w	r4, ip, r4
 800b982:	f100 3aff 	add.w	sl, r0, #4294967295
 800b986:	f080 809b 	bcs.w	800bac0 <__udivmoddi4+0x2d0>
 800b98a:	42a7      	cmp	r7, r4
 800b98c:	f240 8098 	bls.w	800bac0 <__udivmoddi4+0x2d0>
 800b990:	3802      	subs	r0, #2
 800b992:	4464      	add	r4, ip
 800b994:	1be4      	subs	r4, r4, r7
 800b996:	b29f      	uxth	r7, r3
 800b998:	fbb4 f3f9 	udiv	r3, r4, r9
 800b99c:	fb09 4413 	mls	r4, r9, r3, r4
 800b9a0:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 800b9a4:	fb03 fe0e 	mul.w	lr, r3, lr
 800b9a8:	45a6      	cmp	lr, r4
 800b9aa:	d909      	bls.n	800b9c0 <__udivmoddi4+0x1d0>
 800b9ac:	eb1c 0404 	adds.w	r4, ip, r4
 800b9b0:	f103 37ff 	add.w	r7, r3, #4294967295
 800b9b4:	f080 8082 	bcs.w	800babc <__udivmoddi4+0x2cc>
 800b9b8:	45a6      	cmp	lr, r4
 800b9ba:	d97f      	bls.n	800babc <__udivmoddi4+0x2cc>
 800b9bc:	3b02      	subs	r3, #2
 800b9be:	4464      	add	r4, ip
 800b9c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800b9c4:	eba4 040e 	sub.w	r4, r4, lr
 800b9c8:	fba0 e702 	umull	lr, r7, r0, r2
 800b9cc:	42bc      	cmp	r4, r7
 800b9ce:	4673      	mov	r3, lr
 800b9d0:	46b9      	mov	r9, r7
 800b9d2:	d363      	bcc.n	800ba9c <__udivmoddi4+0x2ac>
 800b9d4:	d060      	beq.n	800ba98 <__udivmoddi4+0x2a8>
 800b9d6:	b15d      	cbz	r5, 800b9f0 <__udivmoddi4+0x200>
 800b9d8:	ebb8 0203 	subs.w	r2, r8, r3
 800b9dc:	eb64 0409 	sbc.w	r4, r4, r9
 800b9e0:	fa04 f606 	lsl.w	r6, r4, r6
 800b9e4:	fa22 f301 	lsr.w	r3, r2, r1
 800b9e8:	431e      	orrs	r6, r3
 800b9ea:	40cc      	lsrs	r4, r1
 800b9ec:	e9c5 6400 	strd	r6, r4, [r5]
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	e74c      	b.n	800b88e <__udivmoddi4+0x9e>
 800b9f4:	0862      	lsrs	r2, r4, #1
 800b9f6:	0848      	lsrs	r0, r1, #1
 800b9f8:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 800b9fc:	0c0b      	lsrs	r3, r1, #16
 800b9fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba02:	b28a      	uxth	r2, r1
 800ba04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ba08:	fbb3 f1f6 	udiv	r1, r3, r6
 800ba0c:	07e4      	lsls	r4, r4, #31
 800ba0e:	46b4      	mov	ip, r6
 800ba10:	4637      	mov	r7, r6
 800ba12:	46b6      	mov	lr, r6
 800ba14:	231f      	movs	r3, #31
 800ba16:	fbb0 f0f6 	udiv	r0, r0, r6
 800ba1a:	1bd2      	subs	r2, r2, r7
 800ba1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba20:	e761      	b.n	800b8e6 <__udivmoddi4+0xf6>
 800ba22:	4661      	mov	r1, ip
 800ba24:	e714      	b.n	800b850 <__udivmoddi4+0x60>
 800ba26:	4610      	mov	r0, r2
 800ba28:	e728      	b.n	800b87c <__udivmoddi4+0x8c>
 800ba2a:	f1c3 0120 	rsb	r1, r3, #32
 800ba2e:	fa20 f201 	lsr.w	r2, r0, r1
 800ba32:	409e      	lsls	r6, r3
 800ba34:	fa27 f101 	lsr.w	r1, r7, r1
 800ba38:	409f      	lsls	r7, r3
 800ba3a:	433a      	orrs	r2, r7
 800ba3c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800ba40:	fa1f fc86 	uxth.w	ip, r6
 800ba44:	fbb1 f7fe 	udiv	r7, r1, lr
 800ba48:	fb0e 1017 	mls	r0, lr, r7, r1
 800ba4c:	0c11      	lsrs	r1, r2, #16
 800ba4e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba52:	fb07 f80c 	mul.w	r8, r7, ip
 800ba56:	4588      	cmp	r8, r1
 800ba58:	fa04 f403 	lsl.w	r4, r4, r3
 800ba5c:	d93a      	bls.n	800bad4 <__udivmoddi4+0x2e4>
 800ba5e:	1871      	adds	r1, r6, r1
 800ba60:	f107 30ff 	add.w	r0, r7, #4294967295
 800ba64:	d201      	bcs.n	800ba6a <__udivmoddi4+0x27a>
 800ba66:	4588      	cmp	r8, r1
 800ba68:	d81f      	bhi.n	800baaa <__udivmoddi4+0x2ba>
 800ba6a:	eba1 0108 	sub.w	r1, r1, r8
 800ba6e:	fbb1 f8fe 	udiv	r8, r1, lr
 800ba72:	fb08 f70c 	mul.w	r7, r8, ip
 800ba76:	fb0e 1118 	mls	r1, lr, r8, r1
 800ba7a:	b292      	uxth	r2, r2
 800ba7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ba80:	42ba      	cmp	r2, r7
 800ba82:	d22f      	bcs.n	800bae4 <__udivmoddi4+0x2f4>
 800ba84:	18b2      	adds	r2, r6, r2
 800ba86:	f108 31ff 	add.w	r1, r8, #4294967295
 800ba8a:	d2c6      	bcs.n	800ba1a <__udivmoddi4+0x22a>
 800ba8c:	42ba      	cmp	r2, r7
 800ba8e:	d2c4      	bcs.n	800ba1a <__udivmoddi4+0x22a>
 800ba90:	f1a8 0102 	sub.w	r1, r8, #2
 800ba94:	4432      	add	r2, r6
 800ba96:	e7c0      	b.n	800ba1a <__udivmoddi4+0x22a>
 800ba98:	45f0      	cmp	r8, lr
 800ba9a:	d29c      	bcs.n	800b9d6 <__udivmoddi4+0x1e6>
 800ba9c:	ebbe 0302 	subs.w	r3, lr, r2
 800baa0:	eb67 070c 	sbc.w	r7, r7, ip
 800baa4:	3801      	subs	r0, #1
 800baa6:	46b9      	mov	r9, r7
 800baa8:	e795      	b.n	800b9d6 <__udivmoddi4+0x1e6>
 800baaa:	eba6 0808 	sub.w	r8, r6, r8
 800baae:	4441      	add	r1, r8
 800bab0:	1eb8      	subs	r0, r7, #2
 800bab2:	fbb1 f8fe 	udiv	r8, r1, lr
 800bab6:	fb08 f70c 	mul.w	r7, r8, ip
 800baba:	e7dc      	b.n	800ba76 <__udivmoddi4+0x286>
 800babc:	463b      	mov	r3, r7
 800babe:	e77f      	b.n	800b9c0 <__udivmoddi4+0x1d0>
 800bac0:	4650      	mov	r0, sl
 800bac2:	e767      	b.n	800b994 <__udivmoddi4+0x1a4>
 800bac4:	4608      	mov	r0, r1
 800bac6:	e6fb      	b.n	800b8c0 <__udivmoddi4+0xd0>
 800bac8:	4434      	add	r4, r6
 800baca:	3802      	subs	r0, #2
 800bacc:	e732      	b.n	800b934 <__udivmoddi4+0x144>
 800bace:	3f02      	subs	r7, #2
 800bad0:	4432      	add	r2, r6
 800bad2:	e71b      	b.n	800b90c <__udivmoddi4+0x11c>
 800bad4:	eba1 0108 	sub.w	r1, r1, r8
 800bad8:	4638      	mov	r0, r7
 800bada:	fbb1 f8fe 	udiv	r8, r1, lr
 800bade:	fb08 f70c 	mul.w	r7, r8, ip
 800bae2:	e7c8      	b.n	800ba76 <__udivmoddi4+0x286>
 800bae4:	4641      	mov	r1, r8
 800bae6:	e798      	b.n	800ba1a <__udivmoddi4+0x22a>

0800bae8 <_init>:
 800bae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baea:	bf00      	nop
 800baec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baee:	bc08      	pop	{r3}
 800baf0:	469e      	mov	lr, r3
 800baf2:	4770      	bx	lr

0800baf4 <_fini>:
 800baf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf6:	bf00      	nop
 800baf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bafa:	bc08      	pop	{r3}
 800bafc:	469e      	mov	lr, r3
 800bafe:	4770      	bx	lr
