
build/debug/SGC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08008350  08008350  00009350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008530  08008530  0000a14c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008530  08008530  00009530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008538  08008538  0000a14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008538  08008538  00009538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800853c  0800853c  0000953c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  08008540  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006170  2000014c  0800868c  0000a14c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200062bc  0800868c  0000a2bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bd55  00000000  00000000  0000a1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006477  00000000  00000000  00035f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001455c  00000000  00000000  0003c381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c48  00000000  00000000  000508e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000016a8  00000000  00000000  00052528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eeb5  00000000  00000000  00053bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009d9a  00000000  00000000  00072a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cc0  00000000  00000000  0007c820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000194  00000000  00000000  000814e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b80c 	b.w	8000280 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f007 fee6 	bl	8008040 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__aeabi_idiv0>:
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop

08000284 <__do_global_dtors_aux>:
 8000284:	b510      	push	{r4, lr}
 8000286:	4c05      	ldr	r4, [pc, #20]	@ (800029c <__do_global_dtors_aux+0x18>)
 8000288:	7823      	ldrb	r3, [r4, #0]
 800028a:	b933      	cbnz	r3, 800029a <__do_global_dtors_aux+0x16>
 800028c:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x1c>)
 800028e:	b113      	cbz	r3, 8000296 <__do_global_dtors_aux+0x12>
 8000290:	4804      	ldr	r0, [pc, #16]	@ (80002a4 <__do_global_dtors_aux+0x20>)
 8000292:	f3af 8000 	nop.w
 8000296:	2301      	movs	r3, #1
 8000298:	7023      	strb	r3, [r4, #0]
 800029a:	bd10      	pop	{r4, pc}
 800029c:	2000014c 	.word	0x2000014c
 80002a0:	00000000 	.word	0x00000000
 80002a4:	08008338 	.word	0x08008338

080002a8 <frame_dummy>:
 80002a8:	b508      	push	{r3, lr}
 80002aa:	4b03      	ldr	r3, [pc, #12]	@ (80002b8 <frame_dummy+0x10>)
 80002ac:	b11b      	cbz	r3, 80002b6 <frame_dummy+0xe>
 80002ae:	4903      	ldr	r1, [pc, #12]	@ (80002bc <frame_dummy+0x14>)
 80002b0:	4803      	ldr	r0, [pc, #12]	@ (80002c0 <frame_dummy+0x18>)
 80002b2:	f3af 8000 	nop.w
 80002b6:	bd08      	pop	{r3, pc}
 80002b8:	00000000 	.word	0x00000000
 80002bc:	20000150 	.word	0x20000150
 80002c0:	08008338 	.word	0x08008338

080002c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002c4:	b500      	push	{lr}
 80002c6:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002c8:	2300      	movs	r3, #0
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	9302      	str	r3, [sp, #8]
 80002d0:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80002d2:	4864      	ldr	r0, [pc, #400]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80002d4:	4a64      	ldr	r2, [pc, #400]	@ (8000468 <MX_ADC1_Init+0x1a4>)
 80002d6:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002d8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80002dc:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002de:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80002e0:	2201      	movs	r2, #1
 80002e2:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002e4:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002ea:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ec:	495f      	ldr	r1, [pc, #380]	@ (800046c <MX_ADC1_Init+0x1a8>)
 80002ee:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f0:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 13;
 80002f2:	210d      	movs	r1, #13
 80002f4:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002f6:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002fa:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002fc:	f001 fc5e 	bl	8001bbc <HAL_ADC_Init>
 8000300:	2800      	cmp	r0, #0
 8000302:	f040 8084 	bne.w	800040e <MX_ADC1_Init+0x14a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000306:	230a      	movs	r3, #10
 8000308:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800030a:	2301      	movs	r3, #1
 800030c:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800030e:	2300      	movs	r3, #0
 8000310:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000312:	4669      	mov	r1, sp
 8000314:	4853      	ldr	r0, [pc, #332]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 8000316:	f001 fc7d 	bl	8001c14 <HAL_ADC_ConfigChannel>
 800031a:	2800      	cmp	r0, #0
 800031c:	d17a      	bne.n	8000414 <MX_ADC1_Init+0x150>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800031e:	230b      	movs	r3, #11
 8000320:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8000322:	2302      	movs	r3, #2
 8000324:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000326:	4669      	mov	r1, sp
 8000328:	484e      	ldr	r0, [pc, #312]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 800032a:	f001 fc73 	bl	8001c14 <HAL_ADC_ConfigChannel>
 800032e:	2800      	cmp	r0, #0
 8000330:	d173      	bne.n	800041a <MX_ADC1_Init+0x156>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000332:	230c      	movs	r3, #12
 8000334:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000336:	2303      	movs	r3, #3
 8000338:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800033a:	4669      	mov	r1, sp
 800033c:	4849      	ldr	r0, [pc, #292]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 800033e:	f001 fc69 	bl	8001c14 <HAL_ADC_ConfigChannel>
 8000342:	2800      	cmp	r0, #0
 8000344:	d16c      	bne.n	8000420 <MX_ADC1_Init+0x15c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000346:	230d      	movs	r3, #13
 8000348:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 800034a:	2304      	movs	r3, #4
 800034c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034e:	4669      	mov	r1, sp
 8000350:	4844      	ldr	r0, [pc, #272]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 8000352:	f001 fc5f 	bl	8001c14 <HAL_ADC_ConfigChannel>
 8000356:	2800      	cmp	r0, #0
 8000358:	d165      	bne.n	8000426 <MX_ADC1_Init+0x162>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800035a:	2300      	movs	r3, #0
 800035c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 5;
 800035e:	2305      	movs	r3, #5
 8000360:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000362:	4669      	mov	r1, sp
 8000364:	483f      	ldr	r0, [pc, #252]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 8000366:	f001 fc55 	bl	8001c14 <HAL_ADC_ConfigChannel>
 800036a:	2800      	cmp	r0, #0
 800036c:	d15e      	bne.n	800042c <MX_ADC1_Init+0x168>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800036e:	2301      	movs	r3, #1
 8000370:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 6;
 8000372:	2306      	movs	r3, #6
 8000374:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000376:	4669      	mov	r1, sp
 8000378:	483a      	ldr	r0, [pc, #232]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 800037a:	f001 fc4b 	bl	8001c14 <HAL_ADC_ConfigChannel>
 800037e:	2800      	cmp	r0, #0
 8000380:	d157      	bne.n	8000432 <MX_ADC1_Init+0x16e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000382:	2302      	movs	r3, #2
 8000384:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 7;
 8000386:	2307      	movs	r3, #7
 8000388:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	4669      	mov	r1, sp
 800038c:	4835      	ldr	r0, [pc, #212]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 800038e:	f001 fc41 	bl	8001c14 <HAL_ADC_ConfigChannel>
 8000392:	2800      	cmp	r0, #0
 8000394:	d150      	bne.n	8000438 <MX_ADC1_Init+0x174>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000396:	2303      	movs	r3, #3
 8000398:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 8;
 800039a:	2308      	movs	r3, #8
 800039c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039e:	4669      	mov	r1, sp
 80003a0:	4830      	ldr	r0, [pc, #192]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80003a2:	f001 fc37 	bl	8001c14 <HAL_ADC_ConfigChannel>
 80003a6:	2800      	cmp	r0, #0
 80003a8:	d149      	bne.n	800043e <MX_ADC1_Init+0x17a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80003aa:	2304      	movs	r3, #4
 80003ac:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 9;
 80003ae:	2309      	movs	r3, #9
 80003b0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b2:	4669      	mov	r1, sp
 80003b4:	482b      	ldr	r0, [pc, #172]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80003b6:	f001 fc2d 	bl	8001c14 <HAL_ADC_ConfigChannel>
 80003ba:	2800      	cmp	r0, #0
 80003bc:	d142      	bne.n	8000444 <MX_ADC1_Init+0x180>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003be:	2305      	movs	r3, #5
 80003c0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 10;
 80003c2:	230a      	movs	r3, #10
 80003c4:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c6:	4669      	mov	r1, sp
 80003c8:	4826      	ldr	r0, [pc, #152]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80003ca:	f001 fc23 	bl	8001c14 <HAL_ADC_ConfigChannel>
 80003ce:	2800      	cmp	r0, #0
 80003d0:	d13b      	bne.n	800044a <MX_ADC1_Init+0x186>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80003d2:	2306      	movs	r3, #6
 80003d4:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 11;
 80003d6:	230b      	movs	r3, #11
 80003d8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003da:	4669      	mov	r1, sp
 80003dc:	4821      	ldr	r0, [pc, #132]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80003de:	f001 fc19 	bl	8001c14 <HAL_ADC_ConfigChannel>
 80003e2:	bba8      	cbnz	r0, 8000450 <MX_ADC1_Init+0x18c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003e4:	2307      	movs	r3, #7
 80003e6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 12;
 80003e8:	230c      	movs	r3, #12
 80003ea:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ec:	4669      	mov	r1, sp
 80003ee:	481d      	ldr	r0, [pc, #116]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80003f0:	f001 fc10 	bl	8001c14 <HAL_ADC_ConfigChannel>
 80003f4:	bb78      	cbnz	r0, 8000456 <MX_ADC1_Init+0x192>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80003f6:	230e      	movs	r3, #14
 80003f8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 13;
 80003fa:	230d      	movs	r3, #13
 80003fc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fe:	4669      	mov	r1, sp
 8000400:	4818      	ldr	r0, [pc, #96]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 8000402:	f001 fc07 	bl	8001c14 <HAL_ADC_ConfigChannel>
 8000406:	bb48      	cbnz	r0, 800045c <MX_ADC1_Init+0x198>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000408:	b005      	add	sp, #20
 800040a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800040e:	f000 fd73 	bl	8000ef8 <Error_Handler>
 8000412:	e778      	b.n	8000306 <MX_ADC1_Init+0x42>
    Error_Handler();
 8000414:	f000 fd70 	bl	8000ef8 <Error_Handler>
 8000418:	e781      	b.n	800031e <MX_ADC1_Init+0x5a>
    Error_Handler();
 800041a:	f000 fd6d 	bl	8000ef8 <Error_Handler>
 800041e:	e788      	b.n	8000332 <MX_ADC1_Init+0x6e>
    Error_Handler();
 8000420:	f000 fd6a 	bl	8000ef8 <Error_Handler>
 8000424:	e78f      	b.n	8000346 <MX_ADC1_Init+0x82>
    Error_Handler();
 8000426:	f000 fd67 	bl	8000ef8 <Error_Handler>
 800042a:	e796      	b.n	800035a <MX_ADC1_Init+0x96>
    Error_Handler();
 800042c:	f000 fd64 	bl	8000ef8 <Error_Handler>
 8000430:	e79d      	b.n	800036e <MX_ADC1_Init+0xaa>
    Error_Handler();
 8000432:	f000 fd61 	bl	8000ef8 <Error_Handler>
 8000436:	e7a4      	b.n	8000382 <MX_ADC1_Init+0xbe>
    Error_Handler();
 8000438:	f000 fd5e 	bl	8000ef8 <Error_Handler>
 800043c:	e7ab      	b.n	8000396 <MX_ADC1_Init+0xd2>
    Error_Handler();
 800043e:	f000 fd5b 	bl	8000ef8 <Error_Handler>
 8000442:	e7b2      	b.n	80003aa <MX_ADC1_Init+0xe6>
    Error_Handler();
 8000444:	f000 fd58 	bl	8000ef8 <Error_Handler>
 8000448:	e7b9      	b.n	80003be <MX_ADC1_Init+0xfa>
    Error_Handler();
 800044a:	f000 fd55 	bl	8000ef8 <Error_Handler>
 800044e:	e7c0      	b.n	80003d2 <MX_ADC1_Init+0x10e>
    Error_Handler();
 8000450:	f000 fd52 	bl	8000ef8 <Error_Handler>
 8000454:	e7c6      	b.n	80003e4 <MX_ADC1_Init+0x120>
    Error_Handler();
 8000456:	f000 fd4f 	bl	8000ef8 <Error_Handler>
 800045a:	e7cc      	b.n	80003f6 <MX_ADC1_Init+0x132>
    Error_Handler();
 800045c:	f000 fd4c 	bl	8000ef8 <Error_Handler>
}
 8000460:	e7d2      	b.n	8000408 <MX_ADC1_Init+0x144>
 8000462:	bf00      	nop
 8000464:	200001c8 	.word	0x200001c8
 8000468:	40012000 	.word	0x40012000
 800046c:	0f000001 	.word	0x0f000001

08000470 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	2300      	movs	r3, #0
 8000476:	9303      	str	r3, [sp, #12]
 8000478:	9304      	str	r3, [sp, #16]
 800047a:	9305      	str	r3, [sp, #20]
 800047c:	9306      	str	r3, [sp, #24]
 800047e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000480:	6802      	ldr	r2, [r0, #0]
 8000482:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000486:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 800048a:	429a      	cmp	r2, r3
 800048c:	d001      	beq.n	8000492 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800048e:	b009      	add	sp, #36	@ 0x24
 8000490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000492:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000494:	2500      	movs	r5, #0
 8000496:	9500      	str	r5, [sp, #0]
 8000498:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 800049c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800049e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80004a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80004a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004a6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80004aa:	9200      	str	r2, [sp, #0]
 80004ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	9501      	str	r5, [sp, #4]
 80004b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004b2:	f042 0204 	orr.w	r2, r2, #4
 80004b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80004b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004ba:	f002 0204 	and.w	r2, r2, #4
 80004be:	9201      	str	r2, [sp, #4]
 80004c0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	9502      	str	r5, [sp, #8]
 80004c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004c6:	f042 0201 	orr.w	r2, r2, #1
 80004ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80004cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	9302      	str	r3, [sp, #8]
 80004d4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD_INPUT1_PIN_Pin|AD_INPUT2_PIN_Pin|AD_INPUT3_PIN_Pin|AD_INPUT4_PIN_Pin
 80004d6:	231f      	movs	r3, #31
 80004d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004da:	2703      	movs	r7, #3
 80004dc:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004de:	ae03      	add	r6, sp, #12
 80004e0:	4631      	mov	r1, r6
 80004e2:	4814      	ldr	r0, [pc, #80]	@ (8000534 <HAL_ADC_MspInit+0xc4>)
 80004e4:	f001 fe82 	bl	80021ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ETB1_SENSE1_Pin|ETB1_SENSE2_Pin|ETB2_SENSE1_Pin|ETB2_SENSE2_Pin
 80004e8:	23ff      	movs	r3, #255	@ 0xff
 80004ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ec:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	4631      	mov	r1, r6
 80004f2:	4811      	ldr	r0, [pc, #68]	@ (8000538 <HAL_ADC_MspInit+0xc8>)
 80004f4:	f001 fe7a 	bl	80021ec <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80004f8:	4810      	ldr	r0, [pc, #64]	@ (800053c <HAL_ADC_MspInit+0xcc>)
 80004fa:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <HAL_ADC_MspInit+0xd0>)
 80004fc:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80004fe:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000500:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000502:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000504:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000508:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800050a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800050e:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000510:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000514:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000516:	61c5      	str	r5, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000518:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800051c:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800051e:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000520:	f001 fd10 	bl	8001f44 <HAL_DMA_Init>
 8000524:	b918      	cbnz	r0, 800052e <HAL_ADC_MspInit+0xbe>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000526:	4b05      	ldr	r3, [pc, #20]	@ (800053c <HAL_ADC_MspInit+0xcc>)
 8000528:	63a3      	str	r3, [r4, #56]	@ 0x38
 800052a:	639c      	str	r4, [r3, #56]	@ 0x38
}
 800052c:	e7af      	b.n	800048e <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 800052e:	f000 fce3 	bl	8000ef8 <Error_Handler>
 8000532:	e7f8      	b.n	8000526 <HAL_ADC_MspInit+0xb6>
 8000534:	40020800 	.word	0x40020800
 8000538:	40020000 	.word	0x40020000
 800053c:	20000168 	.word	0x20000168
 8000540:	40026410 	.word	0x40026410

08000544 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8000544:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8000546:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800054a:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800054c:	f005 f8e2 	bl	8005714 <xTaskGetSchedulerState>
 8000550:	2801      	cmp	r0, #1
 8000552:	d100      	bne.n	8000556 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8000554:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8000556:	f000 fe1d 	bl	8001194 <xPortSysTickHandler>
}
 800055a:	e7fb      	b.n	8000554 <SysTick_Handler+0x10>

0800055c <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800055c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8000560:	b92b      	cbnz	r3, 800056e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8000562:	4b06      	ldr	r3, [pc, #24]	@ (800057c <osKernelInitialize+0x20>)
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	b928      	cbnz	r0, 8000574 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8000568:	2201      	movs	r2, #1
 800056a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800056c:	4770      	bx	lr
    stat = osErrorISR;
 800056e:	f06f 0005 	mvn.w	r0, #5
 8000572:	4770      	bx	lr
    } else {
      stat = osError;
 8000574:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	200008c8 	.word	0x200008c8

08000580 <osKernelStart>:
 8000580:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8000584:	b973      	cbnz	r3, 80005a4 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <osKernelStart+0x30>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d10d      	bne.n	80005aa <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800058e:	b510      	push	{r4, lr}
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000590:	2400      	movs	r4, #0
 8000592:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <osKernelStart+0x34>)
 8000594:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <osKernelStart+0x30>)
 8000598:	2202      	movs	r2, #2
 800059a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800059c:	f004 fe16 	bl	80051cc <vTaskStartScheduler>
      stat = osOK;
 80005a0:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80005a2:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80005a4:	f06f 0005 	mvn.w	r0, #5
 80005a8:	4770      	bx	lr
      stat = osError;
 80005aa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80005ae:	4770      	bx	lr
 80005b0:	200008c8 	.word	0x200008c8
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80005bc:	2400      	movs	r4, #0
 80005be:	9405      	str	r4, [sp, #20]
 80005c0:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80005c4:	bb04      	cbnz	r4, 8000608 <osThreadNew+0x50>
 80005c6:	b1f8      	cbz	r0, 8000608 <osThreadNew+0x50>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80005c8:	2a00      	cmp	r2, #0
 80005ca:	d034      	beq.n	8000636 <osThreadNew+0x7e>
      if (attr->name != NULL) {
 80005cc:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80005ce:	6993      	ldr	r3, [r2, #24]
 80005d0:	b12b      	cbz	r3, 80005de <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 80005d2:	461e      	mov	r6, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80005d4:	3b01      	subs	r3, #1
 80005d6:	2b37      	cmp	r3, #55	@ 0x37
 80005d8:	d902      	bls.n	80005e0 <osThreadNew+0x28>
        return (NULL);
 80005da:	2000      	movs	r0, #0
 80005dc:	e015      	b.n	800060a <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;
 80005de:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80005e0:	6853      	ldr	r3, [r2, #4]
 80005e2:	f013 0f01 	tst.w	r3, #1
 80005e6:	d13f      	bne.n	8000668 <osThreadNew+0xb0>
      }

      if (attr->stack_size > 0U) {
 80005e8:	6954      	ldr	r4, [r2, #20]
 80005ea:	b184      	cbz	r4, 800060e <osThreadNew+0x56>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80005ec:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80005f0:	6893      	ldr	r3, [r2, #8]
 80005f2:	b12b      	cbz	r3, 8000600 <osThreadNew+0x48>
 80005f4:	68d7      	ldr	r7, [r2, #12]
 80005f6:	2f5b      	cmp	r7, #91	@ 0x5b
 80005f8:	d902      	bls.n	8000600 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80005fa:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80005fc:	b107      	cbz	r7, 8000600 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80005fe:	b984      	cbnz	r4, 8000622 <osThreadNew+0x6a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000600:	b143      	cbz	r3, 8000614 <osThreadNew+0x5c>
    mem  = -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8000606:	b30b      	cbz	r3, 800064c <osThreadNew+0x94>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8000608:	9805      	ldr	r0, [sp, #20]
}
 800060a:	b007      	add	sp, #28
 800060c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800060e:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000612:	e7ed      	b.n	80005f0 <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000614:	68d3      	ldr	r3, [r2, #12]
 8000616:	b9a3      	cbnz	r3, 8000642 <osThreadNew+0x8a>
 8000618:	6913      	ldr	r3, [r2, #16]
 800061a:	b1ab      	cbz	r3, 8000648 <osThreadNew+0x90>
    mem  = -1;
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	e7f1      	b.n	8000606 <osThreadNew+0x4e>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000622:	9302      	str	r3, [sp, #8]
 8000624:	9701      	str	r7, [sp, #4]
 8000626:	9600      	str	r6, [sp, #0]
 8000628:	460b      	mov	r3, r1
 800062a:	4662      	mov	r2, ip
 800062c:	4629      	mov	r1, r5
 800062e:	f004 fd5f 	bl	80050f0 <xTaskCreateStatic>
 8000632:	9005      	str	r0, [sp, #20]
 8000634:	e7e8      	b.n	8000608 <osThreadNew+0x50>
    name = NULL;
 8000636:	4615      	mov	r5, r2
      mem = 0;
 8000638:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800063a:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 800063c:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000640:	e7e1      	b.n	8000606 <osThreadNew+0x4e>
    mem  = -1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	e7de      	b.n	8000606 <osThreadNew+0x4e>
          mem = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	e7dc      	b.n	8000606 <osThreadNew+0x4e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800064c:	ab05      	add	r3, sp, #20
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	9600      	str	r6, [sp, #0]
 8000652:	460b      	mov	r3, r1
 8000654:	fa1f f28c 	uxth.w	r2, ip
 8000658:	4629      	mov	r1, r5
 800065a:	f004 fd84 	bl	8005166 <xTaskCreate>
 800065e:	2801      	cmp	r0, #1
 8000660:	d0d2      	beq.n	8000608 <osThreadNew+0x50>
            hTask = NULL;
 8000662:	2300      	movs	r3, #0
 8000664:	9305      	str	r3, [sp, #20]
 8000666:	e7cf      	b.n	8000608 <osThreadNew+0x50>
        return (NULL);
 8000668:	2000      	movs	r0, #0
 800066a:	e7ce      	b.n	800060a <osThreadNew+0x52>

0800066c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800066c:	b508      	push	{r3, lr}
 800066e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8000672:	b933      	cbnz	r3, 8000682 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8000674:	b908      	cbnz	r0, 800067a <osDelay+0xe>
    stat = osOK;
 8000676:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8000678:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800067a:	f004 ff09 	bl	8005490 <vTaskDelay>
    stat = osOK;
 800067e:	2000      	movs	r0, #0
 8000680:	e7fa      	b.n	8000678 <osDelay+0xc>
    stat = osErrorISR;
 8000682:	f06f 0005 	mvn.w	r0, #5
 8000686:	e7f7      	b.n	8000678 <osDelay+0xc>

08000688 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000688:	4b03      	ldr	r3, [pc, #12]	@ (8000698 <vApplicationGetIdleTaskMemory+0x10>)
 800068a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800068c:	4b03      	ldr	r3, [pc, #12]	@ (800069c <vApplicationGetIdleTaskMemory+0x14>)
 800068e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000690:	2380      	movs	r3, #128	@ 0x80
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	2000086c 	.word	0x2000086c
 800069c:	2000066c 	.word	0x2000066c

080006a0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80006a0:	4b03      	ldr	r3, [pc, #12]	@ (80006b0 <vApplicationGetTimerTaskMemory+0x10>)
 80006a2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80006a4:	4b03      	ldr	r3, [pc, #12]	@ (80006b4 <vApplicationGetTimerTaskMemory+0x14>)
 80006a6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80006a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ac:	6013      	str	r3, [r2, #0]
}
 80006ae:	4770      	bx	lr
 80006b0:	20000610 	.word	0x20000610
 80006b4:	20000210 	.word	0x20000210

080006b8 <controller_init>:
configuration_s configuration = {0};
engine_s engine = {0};


void controller_init()
{
 80006b8:	b510      	push	{r4, lr}
 80006ba:	b088      	sub	sp, #32
    engine.total_revolutions = 0;
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <controller_init+0x4c>)
 80006be:	2100      	movs	r1, #0
 80006c0:	6019      	str	r1, [r3, #0]
    engine.crankshaft_angle = 0;
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
    engine.camshaft_angle = 0;
 80006c6:	609a      	str	r2, [r3, #8]
    engine.rpm = 0;
 80006c8:	60da      	str	r2, [r3, #12]
    engine.cylinder_count = 4;
 80006ca:	2204      	movs	r2, #4
 80006cc:	741a      	strb	r2, [r3, #16]
    engine.spinning_state = SS_STOPPED;
 80006ce:	7459      	strb	r1, [r3, #17]
    engine.firing_interval = 180.0f;
 80006d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000708 <controller_init+0x50>)
 80006d2:	615a      	str	r2, [r3, #20]
    // engine.trigger = .....;

    configuration.ignition_dwell = (float_time_ms_t)1;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <controller_init+0x54>)
 80006d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80006da:	605a      	str	r2, [r3, #4]
    configuration.ignition_mode = IM_WASTED_SPARK;
 80006dc:	2203      	movs	r2, #3
 80006de:	70da      	strb	r2, [r3, #3]

    ignition_output_conf_s ignition_output_conf =
 80006e0:	46ec      	mov	ip, sp
 80006e2:	4c0b      	ldr	r4, [pc, #44]	@ (8000710 <controller_init+0x58>)
 80006e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        .output[0] = {.gpio = IGNITION_OUTPUT1_GPIO_Port, .pin = IGNITION_OUTPUT1_Pin},
        .output[1] = {.gpio = IGNITION_OUTPUT2_GPIO_Port, .pin = IGNITION_OUTPUT2_Pin},
        .output[2] = {.gpio = IGNITION_OUTPUT3_GPIO_Port, .pin = IGNITION_OUTPUT3_Pin},
        .output[3] = {.gpio = IGNITION_OUTPUT4_GPIO_Port, .pin = IGNITION_OUTPUT4_Pin}
    };
    controller_time_start(&htim5);
 80006f2:	4808      	ldr	r0, [pc, #32]	@ (8000714 <controller_init+0x5c>)
 80006f4:	f000 f812 	bl	800071c <controller_time_start>
    ignition_init(&htim2, &ignition_output_conf);
 80006f8:	4669      	mov	r1, sp
 80006fa:	4807      	ldr	r0, [pc, #28]	@ (8000718 <controller_init+0x60>)
 80006fc:	f000 fa30 	bl	8000b60 <ignition_init>


    //HAL_FLASH_Unlock();
    //EE_Init();
}
 8000700:	b008      	add	sp, #32
 8000702:	bd10      	pop	{r4, pc}
 8000704:	200008cc 	.word	0x200008cc
 8000708:	43340000 	.word	0x43340000
 800070c:	20000910 	.word	0x20000910
 8000710:	08008350 	.word	0x08008350
 8000714:	20004b44 	.word	0x20004b44
 8000718:	20004bd4 	.word	0x20004bd4

0800071c <controller_time_start>:

TIM_HandleTypeDef *timer = NULL;

void controller_time_start(TIM_HandleTypeDef *htim)
{
    if (htim == NULL)
 800071c:	b178      	cbz	r0, 800073e <controller_time_start+0x22>
{
 800071e:	b510      	push	{r4, lr}
        /**
         * @todo throw an error
         */
        return;
    }
    timer = htim;
 8000720:	4c07      	ldr	r4, [pc, #28]	@ (8000740 <controller_time_start+0x24>)
 8000722:	6020      	str	r0, [r4, #0]
    /**
     * This assumes that sys clock is the same as timer clock
     */
    timer->Instance->PSC = (HAL_RCC_GetSysClockFreq() / 1000000UL) - 1;
 8000724:	f002 fea6 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <controller_time_start+0x28>)
 800072a:	fba3 2300 	umull	r2, r3, r3, r0
 800072e:	0c9b      	lsrs	r3, r3, #18
 8000730:	6820      	ldr	r0, [r4, #0]
 8000732:	6802      	ldr	r2, [r0, #0]
 8000734:	3b01      	subs	r3, #1
 8000736:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_TIM_Base_Start(timer);
 8000738:	f003 f880 	bl	800383c <HAL_TIM_Base_Start>
}
 800073c:	bd10      	pop	{r4, pc}
 800073e:	4770      	bx	lr
 8000740:	20000954 	.word	0x20000954
 8000744:	431bde83 	.word	0x431bde83

08000748 <get_time_us>:

time_us_t get_time_us(void)
{
    return timer->Instance->CNT;
 8000748:	4b02      	ldr	r3, [pc, #8]	@ (8000754 <get_time_us+0xc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000954 	.word	0x20000954

08000758 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000758:	b500      	push	{lr}
 800075a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800075c:	2200      	movs	r2, #0
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_DMA_Init+0x30>)
 8000762:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000764:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8000768:	6319      	str	r1, [r3, #48]	@ 0x30
 800076a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000774:	2105      	movs	r1, #5
 8000776:	2038      	movs	r0, #56	@ 0x38
 8000778:	f001 fb6a 	bl	8001e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800077c:	2038      	movs	r0, #56	@ 0x38
 800077e:	f001 fb77 	bl	8001e70 <HAL_NVIC_EnableIRQ>

}
 8000782:	b003      	add	sp, #12
 8000784:	f85d fb04 	ldr.w	pc, [sp], #4
 8000788:	40023800 	.word	0x40023800

0800078c <log_error>:
#include "error_handling.h"


void log_error(const char* message)
{
    if (message == NULL) return;
 800078c:	b1c0      	cbz	r0, 80007c0 <log_error+0x34>
{
 800078e:	b570      	push	{r4, r5, r6, lr}
 8000790:	b09a      	sub	sp, #104	@ 0x68
 8000792:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 8000794:	ac01      	add	r4, sp, #4
 8000796:	2564      	movs	r5, #100	@ 0x64
 8000798:	462a      	mov	r2, r5
 800079a:	2100      	movs	r1, #0
 800079c:	4620      	mov	r0, r4
 800079e:	f006 ff81 	bl	80076a4 <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Error: %s\n", message);
 80007a2:	4633      	mov	r3, r6
 80007a4:	4a07      	ldr	r2, [pc, #28]	@ (80007c4 <log_error+0x38>)
 80007a6:	4629      	mov	r1, r5
 80007a8:	4620      	mov	r0, r4
 80007aa:	f006 ff45 	bl	8007638 <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 80007ae:	4620      	mov	r0, r4
 80007b0:	f7ff fcf6 	bl	80001a0 <strlen>
 80007b4:	b281      	uxth	r1, r0
 80007b6:	4620      	mov	r0, r4
 80007b8:	f005 ff2a 	bl	8006610 <CDC_Transmit_FS>
}
 80007bc:	b01a      	add	sp, #104	@ 0x68
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	08008370 	.word	0x08008370

080007c8 <log_warning>:

void log_warning(const char* message)
{
    if (message == NULL) return;
 80007c8:	b1c0      	cbz	r0, 80007fc <log_warning+0x34>
{
 80007ca:	b570      	push	{r4, r5, r6, lr}
 80007cc:	b09a      	sub	sp, #104	@ 0x68
 80007ce:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 80007d0:	ac01      	add	r4, sp, #4
 80007d2:	2564      	movs	r5, #100	@ 0x64
 80007d4:	462a      	mov	r2, r5
 80007d6:	2100      	movs	r1, #0
 80007d8:	4620      	mov	r0, r4
 80007da:	f006 ff63 	bl	80076a4 <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Warning: %s\n", message);
 80007de:	4633      	mov	r3, r6
 80007e0:	4a07      	ldr	r2, [pc, #28]	@ (8000800 <log_warning+0x38>)
 80007e2:	4629      	mov	r1, r5
 80007e4:	4620      	mov	r0, r4
 80007e6:	f006 ff27 	bl	8007638 <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 80007ea:	4620      	mov	r0, r4
 80007ec:	f7ff fcd8 	bl	80001a0 <strlen>
 80007f0:	b281      	uxth	r1, r0
 80007f2:	4620      	mov	r0, r4
 80007f4:	f005 ff0c 	bl	8006610 <CDC_Transmit_FS>
 80007f8:	b01a      	add	sp, #104	@ 0x68
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	0800837c 	.word	0x0800837c

08000804 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000804:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000806:	f005 fc35 	bl	8006074 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  controller_init();
 800080a:	f7ff ff55 	bl	80006b8 <controller_init>
  static angle_t simulated_crankshaft_angle = 0;
  osDelay(100);
 800080e:	2064      	movs	r0, #100	@ 0x64
 8000810:	f7ff ff2c 	bl	800066c <osDelay>
 8000814:	e010      	b.n	8000838 <StartDefaultTask+0x34>
    {
      simulated_crankshaft_angle += (angle_t)6;
    }
    else
    {
      simulated_crankshaft_angle = 0;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <StartDefaultTask+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
    }
    osDelay(1);
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff ff25 	bl	800066c <osDelay>
    ignition_trigger_event_handle(simulated_crankshaft_angle, 1, get_time_us());
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <StartDefaultTask+0x58>)
 8000824:	ed93 8a00 	vldr	s16, [r3]
 8000828:	f7ff ff8e 	bl	8000748 <get_time_us>
 800082c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000830:	eeb0 0a48 	vmov.f32	s0, s16
 8000834:	f000 fa1e 	bl	8000c74 <ignition_trigger_event_handle>
    if (simulated_crankshaft_angle < (360 - 6))
 8000838:	4b08      	ldr	r3, [pc, #32]	@ (800085c <StartDefaultTask+0x58>)
 800083a:	edd3 7a00 	vldr	s15, [r3]
 800083e:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000860 <StartDefaultTask+0x5c>
 8000842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800084a:	d5e4      	bpl.n	8000816 <StartDefaultTask+0x12>
      simulated_crankshaft_angle += (angle_t)6;
 800084c:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8000850:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000854:	edc3 7a00 	vstr	s15, [r3]
 8000858:	e7e0      	b.n	800081c <StartDefaultTask+0x18>
 800085a:	bf00      	nop
 800085c:	20000958 	.word	0x20000958
 8000860:	43b10000 	.word	0x43b10000

08000864 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000864:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000866:	4a04      	ldr	r2, [pc, #16]	@ (8000878 <MX_FREERTOS_Init+0x14>)
 8000868:	2100      	movs	r1, #0
 800086a:	4804      	ldr	r0, [pc, #16]	@ (800087c <MX_FREERTOS_Init+0x18>)
 800086c:	f7ff fea4 	bl	80005b8 <osThreadNew>
 8000870:	4b03      	ldr	r3, [pc, #12]	@ (8000880 <MX_FREERTOS_Init+0x1c>)
 8000872:	6018      	str	r0, [r3, #0]
}
 8000874:	bd08      	pop	{r3, pc}
 8000876:	bf00      	nop
 8000878:	080084b8 	.word	0x080084b8
 800087c:	08000805 	.word	0x08000805
 8000880:	2000095c 	.word	0x2000095c

08000884 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	ad05      	add	r5, sp, #20
 800088a:	2400      	movs	r4, #0
 800088c:	9405      	str	r4, [sp, #20]
 800088e:	9406      	str	r4, [sp, #24]
 8000890:	9407      	str	r4, [sp, #28]
 8000892:	9408      	str	r4, [sp, #32]
 8000894:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	9401      	str	r4, [sp, #4]
 8000898:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <MX_GPIO_Init+0x8c>)
 800089a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800089c:	f042 0204 	orr.w	r2, r2, #4
 80008a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80008a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008a4:	f002 0204 	and.w	r2, r2, #4
 80008a8:	9201      	str	r2, [sp, #4]
 80008aa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ac:	9402      	str	r4, [sp, #8]
 80008ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80008b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80008b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008b8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80008bc:	9202      	str	r2, [sp, #8]
 80008be:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	9403      	str	r4, [sp, #12]
 80008c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008c4:	f042 0201 	orr.w	r2, r2, #1
 80008c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80008ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008cc:	f002 0201 	and.w	r2, r2, #1
 80008d0:	9203      	str	r2, [sp, #12]
 80008d2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	9404      	str	r4, [sp, #16]
 80008d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008d8:	f042 0202 	orr.w	r2, r2, #2
 80008dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80008de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e0:	f003 0302 	and.w	r3, r3, #2
 80008e4:	9304      	str	r3, [sp, #16]
 80008e6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IGNITION_OUTPUT4_Pin|IGNITION_OUTPUT3_Pin|IGNITION_OUTPUT2_Pin|IGNITION_OUTPUT1_Pin, GPIO_PIN_RESET);
 80008e8:	4e0a      	ldr	r6, [pc, #40]	@ (8000914 <MX_GPIO_Init+0x90>)
 80008ea:	4622      	mov	r2, r4
 80008ec:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80008f0:	4630      	mov	r0, r6
 80008f2:	f001 fd5f 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IGNITION_OUTPUT4_Pin IGNITION_OUTPUT3_Pin IGNITION_OUTPUT2_Pin IGNITION_OUTPUT1_Pin */
  GPIO_InitStruct.Pin = IGNITION_OUTPUT4_Pin|IGNITION_OUTPUT3_Pin|IGNITION_OUTPUT2_Pin|IGNITION_OUTPUT1_Pin;
 80008f6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80008fa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	4629      	mov	r1, r5
 8000906:	4630      	mov	r0, r6
 8000908:	f001 fc70 	bl	80021ec <HAL_GPIO_Init>

}
 800090c:	b00a      	add	sp, #40	@ 0x28
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40020400 	.word	0x40020400

08000918 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000918:	4a12      	ldr	r2, [pc, #72]	@ (8000964 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800091a:	f012 0f07 	tst.w	r2, #7
 800091e:	d01e      	beq.n	800095e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000920:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000922:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000926:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 800092a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800092c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800092e:	480e      	ldr	r0, [pc, #56]	@ (8000968 <prvHeapInit+0x50>)
 8000930:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000932:	2100      	movs	r1, #0
 8000934:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000936:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8000938:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800093a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800093e:	480b      	ldr	r0, [pc, #44]	@ (800096c <prvHeapInit+0x54>)
 8000940:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8000942:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000944:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000946:	1a99      	subs	r1, r3, r2
 8000948:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800094a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800094c:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <prvHeapInit+0x58>)
 800094e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000950:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <prvHeapInit+0x5c>)
 8000952:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <prvHeapInit+0x60>)
 8000956:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800095a:	601a      	str	r2, [r3, #0]
}
 800095c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800095e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000962:	e7e4      	b.n	800092e <prvHeapInit+0x16>
 8000964:	20000980 	.word	0x20000980
 8000968:	20000978 	.word	0x20000978
 800096c:	20000974 	.word	0x20000974
 8000970:	2000096c 	.word	0x2000096c
 8000974:	20000970 	.word	0x20000970
 8000978:	20000960 	.word	0x20000960

0800097c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800097c:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <prvInsertBlockIntoFreeList+0x5c>)
 800097e:	461a      	mov	r2, r3
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4283      	cmp	r3, r0
 8000984:	d3fb      	bcc.n	800097e <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000986:	6851      	ldr	r1, [r2, #4]
 8000988:	eb02 0c01 	add.w	ip, r2, r1
 800098c:	4584      	cmp	ip, r0
 800098e:	d009      	beq.n	80009a4 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000990:	6841      	ldr	r1, [r0, #4]
 8000992:	eb00 0c01 	add.w	ip, r0, r1
 8000996:	4563      	cmp	r3, ip
 8000998:	d009      	beq.n	80009ae <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800099a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800099c:	4290      	cmp	r0, r2
 800099e:	d019      	beq.n	80009d4 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80009a0:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 80009a2:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80009a4:	6840      	ldr	r0, [r0, #4]
 80009a6:	4401      	add	r1, r0
 80009a8:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80009aa:	4610      	mov	r0, r2
 80009ac:	e7f0      	b.n	8000990 <prvInsertBlockIntoFreeList+0x14>
{
 80009ae:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80009b0:	4c0a      	ldr	r4, [pc, #40]	@ (80009dc <prvInsertBlockIntoFreeList+0x60>)
 80009b2:	6824      	ldr	r4, [r4, #0]
 80009b4:	42a3      	cmp	r3, r4
 80009b6:	d00b      	beq.n	80009d0 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	4419      	add	r1, r3
 80009bc:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80009be:	6813      	ldr	r3, [r2, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80009c4:	4290      	cmp	r0, r2
 80009c6:	d000      	beq.n	80009ca <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80009c8:	6010      	str	r0, [r2, #0]
	}
}
 80009ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009ce:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80009d0:	6004      	str	r4, [r0, #0]
 80009d2:	e7f7      	b.n	80009c4 <prvInsertBlockIntoFreeList+0x48>
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000978 	.word	0x20000978
 80009dc:	20000974 	.word	0x20000974

080009e0 <pvPortMalloc>:
{
 80009e0:	b538      	push	{r3, r4, r5, lr}
 80009e2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80009e4:	f004 fc3e 	bl	8005264 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80009e8:	4b38      	ldr	r3, [pc, #224]	@ (8000acc <pvPortMalloc+0xec>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	b1b3      	cbz	r3, 8000a1c <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009ee:	4b38      	ldr	r3, [pc, #224]	@ (8000ad0 <pvPortMalloc+0xf0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	421c      	tst	r4, r3
 80009f4:	d150      	bne.n	8000a98 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	d050      	beq.n	8000a9c <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 80009fa:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80009fe:	f014 0f07 	tst.w	r4, #7
 8000a02:	d002      	beq.n	8000a0a <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000a04:	f022 0207 	bic.w	r2, r2, #7
 8000a08:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	d055      	beq.n	8000aba <pvPortMalloc+0xda>
 8000a0e:	4b31      	ldr	r3, [pc, #196]	@ (8000ad4 <pvPortMalloc+0xf4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d353      	bcc.n	8000abe <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8000a16:	4930      	ldr	r1, [pc, #192]	@ (8000ad8 <pvPortMalloc+0xf8>)
 8000a18:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a1a:	e004      	b.n	8000a26 <pvPortMalloc+0x46>
			prvHeapInit();
 8000a1c:	f7ff ff7c 	bl	8000918 <prvHeapInit>
 8000a20:	e7e5      	b.n	80009ee <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8000a22:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a24:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a26:	6863      	ldr	r3, [r4, #4]
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d202      	bcs.n	8000a32 <pvPortMalloc+0x52>
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1f7      	bne.n	8000a22 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8000a32:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <pvPortMalloc+0xec>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d043      	beq.n	8000ac2 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a3a:	680d      	ldr	r5, [r1, #0]
 8000a3c:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a3e:	6823      	ldr	r3, [r4, #0]
 8000a40:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a42:	6863      	ldr	r3, [r4, #4]
 8000a44:	1a9b      	subs	r3, r3, r2
 8000a46:	2b10      	cmp	r3, #16
 8000a48:	d910      	bls.n	8000a6c <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a4a:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a4c:	f010 0f07 	tst.w	r0, #7
 8000a50:	d008      	beq.n	8000a64 <pvPortMalloc+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a56:	f383 8811 	msr	BASEPRI, r3
 8000a5a:	f3bf 8f6f 	isb	sy
 8000a5e:	f3bf 8f4f 	dsb	sy
 8000a62:	e7fe      	b.n	8000a62 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000a64:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000a66:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000a68:	f7ff ff88 	bl	800097c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000a6c:	6862      	ldr	r2, [r4, #4]
 8000a6e:	4919      	ldr	r1, [pc, #100]	@ (8000ad4 <pvPortMalloc+0xf4>)
 8000a70:	680b      	ldr	r3, [r1, #0]
 8000a72:	1a9b      	subs	r3, r3, r2
 8000a74:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000a76:	4919      	ldr	r1, [pc, #100]	@ (8000adc <pvPortMalloc+0xfc>)
 8000a78:	6809      	ldr	r1, [r1, #0]
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d201      	bcs.n	8000a82 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000a7e:	4917      	ldr	r1, [pc, #92]	@ (8000adc <pvPortMalloc+0xfc>)
 8000a80:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000a82:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <pvPortMalloc+0xf0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8000a8e:	4a14      	ldr	r2, [pc, #80]	@ (8000ae0 <pvPortMalloc+0x100>)
 8000a90:	6813      	ldr	r3, [r2, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	6013      	str	r3, [r2, #0]
 8000a96:	e002      	b.n	8000a9e <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8000a98:	2500      	movs	r5, #0
 8000a9a:	e000      	b.n	8000a9e <pvPortMalloc+0xbe>
 8000a9c:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8000a9e:	f004 fc7b 	bl	8005398 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000aa2:	f015 0f07 	tst.w	r5, #7
 8000aa6:	d00e      	beq.n	8000ac6 <pvPortMalloc+0xe6>
 8000aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000aac:	f383 8811 	msr	BASEPRI, r3
 8000ab0:	f3bf 8f6f 	isb	sy
 8000ab4:	f3bf 8f4f 	dsb	sy
 8000ab8:	e7fe      	b.n	8000ab8 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8000aba:	2500      	movs	r5, #0
 8000abc:	e7ef      	b.n	8000a9e <pvPortMalloc+0xbe>
 8000abe:	2500      	movs	r5, #0
 8000ac0:	e7ed      	b.n	8000a9e <pvPortMalloc+0xbe>
 8000ac2:	2500      	movs	r5, #0
 8000ac4:	e7eb      	b.n	8000a9e <pvPortMalloc+0xbe>
}
 8000ac6:	4628      	mov	r0, r5
 8000ac8:	bd38      	pop	{r3, r4, r5, pc}
 8000aca:	bf00      	nop
 8000acc:	20000974 	.word	0x20000974
 8000ad0:	20000960 	.word	0x20000960
 8000ad4:	20000970 	.word	0x20000970
 8000ad8:	20000978 	.word	0x20000978
 8000adc:	2000096c 	.word	0x2000096c
 8000ae0:	20000968 	.word	0x20000968

08000ae4 <vPortFree>:
	if( pv != NULL )
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d034      	beq.n	8000b52 <vPortFree+0x6e>
{
 8000ae8:	b538      	push	{r3, r4, r5, lr}
 8000aea:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8000aec:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000af0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8000af4:	4a17      	ldr	r2, [pc, #92]	@ (8000b54 <vPortFree+0x70>)
 8000af6:	6812      	ldr	r2, [r2, #0]
 8000af8:	4213      	tst	r3, r2
 8000afa:	d108      	bne.n	8000b0e <vPortFree+0x2a>
 8000afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b00:	f383 8811 	msr	BASEPRI, r3
 8000b04:	f3bf 8f6f 	isb	sy
 8000b08:	f3bf 8f4f 	dsb	sy
 8000b0c:	e7fe      	b.n	8000b0c <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000b0e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8000b12:	b141      	cbz	r1, 8000b26 <vPortFree+0x42>
 8000b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b18:	f383 8811 	msr	BASEPRI, r3
 8000b1c:	f3bf 8f6f 	isb	sy
 8000b20:	f3bf 8f4f 	dsb	sy
 8000b24:	e7fe      	b.n	8000b24 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000b26:	ea23 0302 	bic.w	r3, r3, r2
 8000b2a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8000b2e:	f004 fb99 	bl	8005264 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000b32:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8000b36:	4a08      	ldr	r2, [pc, #32]	@ (8000b58 <vPortFree+0x74>)
 8000b38:	6813      	ldr	r3, [r2, #0]
 8000b3a:	440b      	add	r3, r1
 8000b3c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000b3e:	4628      	mov	r0, r5
 8000b40:	f7ff ff1c 	bl	800097c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000b44:	4a05      	ldr	r2, [pc, #20]	@ (8000b5c <vPortFree+0x78>)
 8000b46:	6813      	ldr	r3, [r2, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8000b4c:	f004 fc24 	bl	8005398 <xTaskResumeAll>
}
 8000b50:	bd38      	pop	{r3, r4, r5, pc}
 8000b52:	4770      	bx	lr
 8000b54:	20000960 	.word	0x20000960
 8000b58:	20000970 	.word	0x20000970
 8000b5c:	20000964 	.word	0x20000964

08000b60 <ignition_init>:
        ignition_coil_fire_spark(current_firing_cylinder- 1);
    }
}

void ignition_init(TIM_HandleTypeDef *htim,  ignition_output_conf_s *output_conf)
{
 8000b60:	b510      	push	{r4, lr}
 8000b62:	b088      	sub	sp, #32
    if (htim == NULL || output_conf == NULL)
 8000b64:	b1c0      	cbz	r0, 8000b98 <ignition_init+0x38>
 8000b66:	b1b9      	cbz	r1, 8000b98 <ignition_init+0x38>
    {
        log_error("ignition init failed. No timer or ouput config");
        return;
    }

    timer = htim;
 8000b68:	4a38      	ldr	r2, [pc, #224]	@ (8000c4c <ignition_init+0xec>)
 8000b6a:	6010      	str	r0, [r2, #0]

    switch (configuration.firing_order)
 8000b6c:	4b38      	ldr	r3, [pc, #224]	@ (8000c50 <ignition_init+0xf0>)
 8000b6e:	789b      	ldrb	r3, [r3, #2]
 8000b70:	b9bb      	cbnz	r3, 8000ba2 <ignition_init+0x42>
    {
        case FO_1342:
            engine.cylinder_count = 4;
 8000b72:	4a38      	ldr	r2, [pc, #224]	@ (8000c54 <ignition_init+0xf4>)
 8000b74:	2004      	movs	r0, #4
 8000b76:	7410      	strb	r0, [r2, #16]
            ignition_order[0] = 1;
 8000b78:	4b37      	ldr	r3, [pc, #220]	@ (8000c58 <ignition_init+0xf8>)
 8000b7a:	f04f 0c01 	mov.w	ip, #1
 8000b7e:	f883 c000 	strb.w	ip, [r3]
            ignition_order[1] = 3;
 8000b82:	f04f 0c03 	mov.w	ip, #3
 8000b86:	f883 c001 	strb.w	ip, [r3, #1]
            ignition_order[2] = 4;
 8000b8a:	7098      	strb	r0, [r3, #2]
            ignition_order[3] = 2;
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	70d8      	strb	r0, [r3, #3]
            return;
        break;
    }
    
    
    engine.firing_interval = (angle_t)720 / engine.cylinder_count;
 8000b90:	4b32      	ldr	r3, [pc, #200]	@ (8000c5c <ignition_init+0xfc>)
 8000b92:	6153      	str	r3, [r2, #20]


    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	e014      	b.n	8000bc2 <ignition_init+0x62>
        log_error("ignition init failed. No timer or ouput config");
 8000b98:	4831      	ldr	r0, [pc, #196]	@ (8000c60 <ignition_init+0x100>)
 8000b9a:	f7ff fdf7 	bl	800078c <log_error>
    HAL_TIM_PWM_Start_IT(timer, TIM_CHANNEL_1);
    HAL_TIM_PWM_Start_IT(timer, TIM_CHANNEL_2);
    
    

}
 8000b9e:	b008      	add	sp, #32
 8000ba0:	bd10      	pop	{r4, pc}
            log_error("ignition init failed. unkown firing order.");
 8000ba2:	4830      	ldr	r0, [pc, #192]	@ (8000c64 <ignition_init+0x104>)
 8000ba4:	f7ff fdf2 	bl	800078c <log_error>
            return;
 8000ba8:	e7f9      	b.n	8000b9e <ignition_init+0x3e>
        ignition_outputs[i].gpio = output_conf->output[i].gpio;
 8000baa:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8000bae:	4a2e      	ldr	r2, [pc, #184]	@ (8000c68 <ignition_init+0x108>)
 8000bb0:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
        ignition_outputs[i].pin = output_conf->output[i].pin;
 8000bb4:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 8000bb8:	6840      	ldr	r0, [r0, #4]
 8000bba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000bbe:	6050      	str	r0, [r2, #4]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d9f1      	bls.n	8000baa <ignition_init+0x4a>
    if (configuration.ignition_is_multi_spark && !IS_IN_RANGE(configuration.ignition_multi_spark_number_of_sparks, 0, IGNITION_MULTI_SPARK_MAX_SPARKS))
 8000bc6:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <ignition_init+0xf0>)
 8000bc8:	7a1b      	ldrb	r3, [r3, #8]
 8000bca:	b11b      	cbz	r3, 8000bd4 <ignition_init+0x74>
 8000bcc:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <ignition_init+0xf0>)
 8000bce:	7a5b      	ldrb	r3, [r3, #9]
 8000bd0:	2b08      	cmp	r3, #8
 8000bd2:	d836      	bhi.n	8000c42 <ignition_init+0xe2>
    uint32_t timer_clock = HAL_RCC_GetSysClockFreq(); // Assuming the timer clock is the same is system clock
 8000bd4:	f002 fc4e 	bl	8003474 <HAL_RCC_GetSysClockFreq>
    uint32_t prescaler = (timer_clock / 1000000UL) - 1;
 8000bd8:	4b24      	ldr	r3, [pc, #144]	@ (8000c6c <ignition_init+0x10c>)
 8000bda:	fba3 2300 	umull	r2, r3, r3, r0
 8000bde:	0c9b      	lsrs	r3, r3, #18
 8000be0:	3b01      	subs	r3, #1
    if (prescaler > 0xFFFF)
 8000be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000be6:	d2da      	bcs.n	8000b9e <ignition_init+0x3e>
    timer->Instance->PSC = prescaler; // Set the prescaler
 8000be8:	4a18      	ldr	r2, [pc, #96]	@ (8000c4c <ignition_init+0xec>)
 8000bea:	6810      	ldr	r0, [r2, #0]
 8000bec:	6802      	ldr	r2, [r0, #0]
 8000bee:	6293      	str	r3, [r2, #40]	@ 0x28
    timer->Instance->ARR = 0xFFFFFFFF; // Set auto-reload register to max for 32-bit timer
 8000bf0:	6803      	ldr	r3, [r0, #0]
 8000bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
    timer->Instance->CNT = 0; // Reset the counter
 8000bf8:	6803      	ldr	r3, [r0, #0]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfe:	a901      	add	r1, sp, #4
 8000c00:	9201      	str	r2, [sp, #4]
 8000c02:	604a      	str	r2, [r1, #4]
 8000c04:	608a      	str	r2, [r1, #8]
 8000c06:	60ca      	str	r2, [r1, #12]
 8000c08:	610a      	str	r2, [r1, #16]
 8000c0a:	614a      	str	r2, [r1, #20]
 8000c0c:	618a      	str	r2, [r1, #24]
    if (HAL_TIM_OC_ConfigChannel(timer, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c0e:	f003 f841 	bl	8003c94 <HAL_TIM_OC_ConfigChannel>
 8000c12:	2800      	cmp	r0, #0
 8000c14:	d1c3      	bne.n	8000b9e <ignition_init+0x3e>
    if (HAL_TIM_OC_ConfigChannel(timer, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c16:	2204      	movs	r2, #4
 8000c18:	eb0d 0102 	add.w	r1, sp, r2
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <ignition_init+0xec>)
 8000c1e:	6818      	ldr	r0, [r3, #0]
 8000c20:	f003 f838 	bl	8003c94 <HAL_TIM_OC_ConfigChannel>
 8000c24:	2800      	cmp	r0, #0
 8000c26:	d1ba      	bne.n	8000b9e <ignition_init+0x3e>
    HAL_TIM_Base_Start(timer);
 8000c28:	4c08      	ldr	r4, [pc, #32]	@ (8000c4c <ignition_init+0xec>)
 8000c2a:	6820      	ldr	r0, [r4, #0]
 8000c2c:	f002 fe06 	bl	800383c <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start_IT(timer, TIM_CHANNEL_1);
 8000c30:	2100      	movs	r1, #0
 8000c32:	6820      	ldr	r0, [r4, #0]
 8000c34:	f003 f966 	bl	8003f04 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(timer, TIM_CHANNEL_2);
 8000c38:	2104      	movs	r1, #4
 8000c3a:	6820      	ldr	r0, [r4, #0]
 8000c3c:	f003 f962 	bl	8003f04 <HAL_TIM_PWM_Start_IT>
 8000c40:	e7ad      	b.n	8000b9e <ignition_init+0x3e>
        log_warning("Multi spark is enabled but number of sparks are 0.");
 8000c42:	480b      	ldr	r0, [pc, #44]	@ (8000c70 <ignition_init+0x110>)
 8000c44:	f7ff fdc0 	bl	80007c8 <log_warning>
 8000c48:	e7c4      	b.n	8000bd4 <ignition_init+0x74>
 8000c4a:	bf00      	nop
 8000c4c:	20004584 	.word	0x20004584
 8000c50:	20000910 	.word	0x20000910
 8000c54:	200008cc 	.word	0x200008cc
 8000c58:	20004588 	.word	0x20004588
 8000c5c:	43340000 	.word	0x43340000
 8000c60:	08008398 	.word	0x08008398
 8000c64:	080083c8 	.word	0x080083c8
 8000c68:	2000458c 	.word	0x2000458c
 8000c6c:	431bde83 	.word	0x431bde83
 8000c70:	080083f4 	.word	0x080083f4

08000c74 <ignition_trigger_event_handle>:
 * @param rpm The current revolutions per minute of the engine.
 * @param current_time_us The current time in microseconds.
 */
void ignition_trigger_event_handle(angle_t crankshaft_angle, rpm_t rpm, time_us_t current_time_us)
{
    if (configuration.ignition_mode == IM_NO_IGNITION)
 8000c74:	4b46      	ldr	r3, [pc, #280]	@ (8000d90 <ignition_trigger_event_handle+0x11c>)
 8000c76:	78db      	ldrb	r3, [r3, #3]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f000 8087 	beq.w	8000d8c <ignition_trigger_event_handle+0x118>
{
 8000c7e:	b510      	push	{r4, lr}
 8000c80:	ed2d 8b04 	vpush	{d8-d9}
 8000c84:	b082      	sub	sp, #8
 8000c86:	eef0 9a40 	vmov.f32	s19, s0
 8000c8a:	eeb0 9a60 	vmov.f32	s18, s1
    }
    
    /**
     * @todo add the necessary checks and bounds
     */
    if (timer == NULL)
 8000c8e:	4b41      	ldr	r3, [pc, #260]	@ (8000d94 <ignition_trigger_event_handle+0x120>)
 8000c90:	681c      	ldr	r4, [r3, #0]
 8000c92:	2c00      	cmp	r4, #0
 8000c94:	d070      	beq.n	8000d78 <ignition_trigger_event_handle+0x104>
    {
        log_error("ignition no init.");
        return;
    }
    
    if (!IS_IN_RANGE(configuration.ignition_dwell, IGNITION_MIN_DWELL_TIME_MS, IGNITION_MAX_DWELL_TIME_MS))
 8000c96:	4b3e      	ldr	r3, [pc, #248]	@ (8000d90 <ignition_trigger_event_handle+0x11c>)
 8000c98:	ed93 8a01 	vldr	s16, [r3, #4]
 8000c9c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8000ca0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8000ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca8:	db62      	blt.n	8000d70 <ignition_trigger_event_handle+0xfc>
 8000caa:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8000cae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8000cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb6:	d85b      	bhi.n	8000d70 <ignition_trigger_event_handle+0xfc>
    
    /**
     * Here we detect which cylinder has to fire next
     */
    // Determine the current phase
    uint8_t phase = (uint8_t)(ceilf(crankshaft_angle / engine.firing_interval));
 8000cb8:	4b37      	ldr	r3, [pc, #220]	@ (8000d98 <ignition_trigger_event_handle+0x124>)
 8000cba:	edd3 8a05 	vldr	s17, [r3, #20]
 8000cbe:	ee89 0aa8 	vdiv.f32	s0, s19, s17
 8000cc2:	f007 f973 	bl	8007fac <ceilf>
 8000cc6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8000cca:	edcd 7a01 	vstr	s15, [sp, #4]
 8000cce:	f89d 3004 	ldrb.w	r3, [sp, #4]
    /**
     * for a simple 4 cylinder engine this returns:
     * 1 when 0 < crankshaft angle < 180
     * 3 when 180 < crankshaft angle < 360
     */
    current_firing_cylinder = ignition_order[phase-1];
 8000cd2:	1e5a      	subs	r2, r3, #1
 8000cd4:	4931      	ldr	r1, [pc, #196]	@ (8000d9c <ignition_trigger_event_handle+0x128>)
 8000cd6:	5c89      	ldrb	r1, [r1, r2]
 8000cd8:	4a31      	ldr	r2, [pc, #196]	@ (8000da0 <ignition_trigger_event_handle+0x12c>)
 8000cda:	7011      	strb	r1, [r2, #0]

    /**
     * Now we need to start the timer and calculate when the coil has to start charging and when it has to fire the spark
     */
    angle_t spark_angle = (angle_t)phase * engine.firing_interval - spark_advance;
 8000cdc:	ee07 3a90 	vmov	s15, r3
 8000ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ce4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8000ce8:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8000cec:	ee78 8ae7 	vsub.f32	s17, s17, s15
 * @brief Function to calculate the degrees the engine turns in one microsecond.
 * @note Returns 0 if rpm is 0.
 */
static inline angle_t degrees_per_microsecond(rpm_t rpm)
{
    if (rpm == 0)
 8000cf0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8000cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf8:	d042      	beq.n	8000d80 <ignition_trigger_event_handle+0x10c>
    {
        return 0.0f;
    }
    return (angle_t)(rpm * 360.0f) / (60.0f * 1e6f);
 8000cfa:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8000da4 <ignition_trigger_event_handle+0x130>
 8000cfe:	ee69 7a27 	vmul.f32	s15, s18, s15
 8000d02:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8000da8 <ignition_trigger_event_handle+0x134>
 8000d06:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    angle_t dwell_angle = degrees_per_microsecond(rpm) * configuration.ignition_dwell * (float)1000;
 8000d0a:	ee28 8a07 	vmul.f32	s16, s16, s14
 8000d0e:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8000dac <ignition_trigger_event_handle+0x138>
 8000d12:	ee28 8a27 	vmul.f32	s16, s16, s15
    if ((spark_angle - dwell_angle - crankshaft_angle) < 0)
 8000d16:	ee38 8ac8 	vsub.f32	s16, s17, s16
 8000d1a:	ee38 8a69 	vsub.f32	s16, s16, s19
 8000d1e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d26:	d423      	bmi.n	8000d70 <ignition_trigger_event_handle+0xfc>
    if (rpm == 0)
 8000d28:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8000d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d30:	d029      	beq.n	8000d86 <ignition_trigger_event_handle+0x112>
    return (time_us_t) 60.0f * 1e6f / (rpm * 360.0f);
 8000d32:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8000da4 <ignition_trigger_event_handle+0x130>
 8000d36:	ee69 0a27 	vmul.f32	s1, s18, s15
 8000d3a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000da8 <ignition_trigger_event_handle+0x134>
 8000d3e:	eec7 7a20 	vdiv.f32	s15, s14, s1
 8000d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        return;
    }
    time_us_t start_charge_time = 0;
    time_us_t fire_spark_time = 0;
    time_us_t microseconds_per_deg = microseconds_per_degree(rpm);
    start_charge_time = (time_us_t)((spark_angle - dwell_angle - crankshaft_angle) * (float)microseconds_per_deg);
 8000d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d4a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000d4e:	eebc 8ac8 	vcvt.u32.f32	s16, s16
    fire_spark_time = (time_us_t)((spark_angle - crankshaft_angle) * (float)microseconds_per_deg);
 8000d52:	ee38 0ae9 	vsub.f32	s0, s17, s19
 8000d56:	ee67 7a80 	vmul.f32	s15, s15, s0
 8000d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    __HAL_TIM_SET_COUNTER(timer, 0);
 8000d5e:	6823      	ldr	r3, [r4, #0]
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COMPARE(timer, TIM_CHANNEL_1, start_charge_time);
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	ed83 8a0d 	vstr	s16, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(timer, TIM_CHANNEL_2, fire_spark_time);
 8000d6a:	6823      	ldr	r3, [r4, #0]
 8000d6c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

}
 8000d70:	b002      	add	sp, #8
 8000d72:	ecbd 8b04 	vpop	{d8-d9}
 8000d76:	bd10      	pop	{r4, pc}
        log_error("ignition no init.");
 8000d78:	480d      	ldr	r0, [pc, #52]	@ (8000db0 <ignition_trigger_event_handle+0x13c>)
 8000d7a:	f7ff fd07 	bl	800078c <log_error>
        return;
 8000d7e:	e7f7      	b.n	8000d70 <ignition_trigger_event_handle+0xfc>
        return 0.0f;
 8000d80:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000db4 <ignition_trigger_event_handle+0x140>
 8000d84:	e7c1      	b.n	8000d0a <ignition_trigger_event_handle+0x96>
        return 0;
 8000d86:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8000db8 <ignition_trigger_event_handle+0x144>
 8000d8a:	e7dc      	b.n	8000d46 <ignition_trigger_event_handle+0xd2>
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000910 	.word	0x20000910
 8000d94:	20004584 	.word	0x20004584
 8000d98:	200008cc 	.word	0x200008cc
 8000d9c:	20004588 	.word	0x20004588
 8000da0:	20004580 	.word	0x20004580
 8000da4:	43b40000 	.word	0x43b40000
 8000da8:	4c64e1c0 	.word	0x4c64e1c0
 8000dac:	447a0000 	.word	0x447a0000
 8000db0:	08008428 	.word	0x08008428
	...

08000dbc <ignition_coil_begin_charge>:
 * @brief Charges the ignition coil at the specified index.
 * 
 * @param coil_index The index of the coil to be charged.
 */
void ignition_coil_begin_charge(uint8_t coil_index)
{
 8000dbc:	b508      	push	{r3, lr}
    if (coil_index > IGNITION_MAX_OUTPUTS - 1)
 8000dbe:	2803      	cmp	r0, #3
 8000dc0:	d809      	bhi.n	8000dd6 <ignition_coil_begin_charge+0x1a>
    {
        log_error("Unkown ignition output");
        return;
    }
    HAL_GPIO_WritePin(ignition_outputs[coil_index].gpio, ignition_outputs[coil_index].pin, GPIO_PIN_SET);
 8000dc2:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <ignition_coil_begin_charge+0x24>)
 8000dc4:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 8000dc8:	2201      	movs	r2, #1
 8000dca:	8889      	ldrh	r1, [r1, #4]
 8000dcc:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8000dd0:	f001 faf0 	bl	80023b4 <HAL_GPIO_WritePin>
}
 8000dd4:	bd08      	pop	{r3, pc}
        log_error("Unkown ignition output");
 8000dd6:	4803      	ldr	r0, [pc, #12]	@ (8000de4 <ignition_coil_begin_charge+0x28>)
 8000dd8:	f7ff fcd8 	bl	800078c <log_error>
        return;
 8000ddc:	e7fa      	b.n	8000dd4 <ignition_coil_begin_charge+0x18>
 8000dde:	bf00      	nop
 8000de0:	2000458c 	.word	0x2000458c
 8000de4:	0800843c 	.word	0x0800843c

08000de8 <ignition_coil_fire_spark>:
 * @brief Fires a spark from the ignition coil at the specified index.
 * 
 * @param coil_index The index of the coil to fire the spark from.
 */
void ignition_coil_fire_spark(uint8_t coil_index)
{
 8000de8:	b508      	push	{r3, lr}
    if (coil_index > IGNITION_MAX_OUTPUTS - 1)
 8000dea:	2803      	cmp	r0, #3
 8000dec:	d809      	bhi.n	8000e02 <ignition_coil_fire_spark+0x1a>
    {
        log_error("Unkown ignition output");
        return;
    }
    HAL_GPIO_WritePin(ignition_outputs[coil_index].gpio, ignition_outputs[coil_index].pin, GPIO_PIN_RESET);
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <ignition_coil_fire_spark+0x24>)
 8000df0:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 8000df4:	2200      	movs	r2, #0
 8000df6:	8889      	ldrh	r1, [r1, #4]
 8000df8:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8000dfc:	f001 fada 	bl	80023b4 <HAL_GPIO_WritePin>
}
 8000e00:	bd08      	pop	{r3, pc}
        log_error("Unkown ignition output");
 8000e02:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <ignition_coil_fire_spark+0x28>)
 8000e04:	f7ff fcc2 	bl	800078c <log_error>
        return;
 8000e08:	e7fa      	b.n	8000e00 <ignition_coil_fire_spark+0x18>
 8000e0a:	bf00      	nop
 8000e0c:	2000458c 	.word	0x2000458c
 8000e10:	0800843c 	.word	0x0800843c

08000e14 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8000e14:	b508      	push	{r3, lr}
    if (htim->Instance != timer->Instance)
 8000e16:	6802      	ldr	r2, [r0, #0]
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <HAL_TIM_OC_DelayElapsedCallback+0x38>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d000      	beq.n	8000e24 <HAL_TIM_OC_DelayElapsedCallback+0x10>
}
 8000e22:	bd08      	pop	{r3, pc}
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000e24:	7f03      	ldrb	r3, [r0, #28]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d008      	beq.n	8000e3c <HAL_TIM_OC_DelayElapsedCallback+0x28>
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d1f9      	bne.n	8000e22 <HAL_TIM_OC_DelayElapsedCallback+0xe>
        ignition_coil_fire_spark(current_firing_cylinder- 1);
 8000e2e:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000e30:	7818      	ldrb	r0, [r3, #0]
 8000e32:	3801      	subs	r0, #1
 8000e34:	b2c0      	uxtb	r0, r0
 8000e36:	f7ff ffd7 	bl	8000de8 <ignition_coil_fire_spark>
 8000e3a:	e7f2      	b.n	8000e22 <HAL_TIM_OC_DelayElapsedCallback+0xe>
        ignition_coil_begin_charge(current_firing_cylinder - 1);
 8000e3c:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000e3e:	7818      	ldrb	r0, [r3, #0]
 8000e40:	3801      	subs	r0, #1
 8000e42:	b2c0      	uxtb	r0, r0
 8000e44:	f7ff ffba 	bl	8000dbc <ignition_coil_begin_charge>
 8000e48:	e7eb      	b.n	8000e22 <HAL_TIM_OC_DelayElapsedCallback+0xe>
 8000e4a:	bf00      	nop
 8000e4c:	20004584 	.word	0x20004584
 8000e50:	20004580 	.word	0x20004580

08000e54 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e54:	f100 0308 	add.w	r3, r0, #8
 8000e58:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e60:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e62:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000e68:	4770      	bx	lr

08000e6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000e6e:	4770      	bx	lr

08000e70 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000e70:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000e72:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000e78:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000e7a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000e7c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000e7e:	6803      	ldr	r3, [r0, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	6003      	str	r3, [r0, #0]
}
 8000e84:	4770      	bx	lr

08000e86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000e86:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000e88:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000e8a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000e8e:	d011      	beq.n	8000eb4 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000e90:	f100 0308 	add.w	r3, r0, #8
 8000e94:	461c      	mov	r4, r3
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	42aa      	cmp	r2, r5
 8000e9c:	d9fa      	bls.n	8000e94 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000e9e:	6863      	ldr	r3, [r4, #4]
 8000ea0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000ea2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000ea4:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000ea6:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000ea8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000eaa:	6803      	ldr	r3, [r0, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	6003      	str	r3, [r0, #0]
}
 8000eb0:	bc30      	pop	{r4, r5}
 8000eb2:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8000eb4:	6904      	ldr	r4, [r0, #16]
 8000eb6:	e7f2      	b.n	8000e9e <vListInsert+0x18>

08000eb8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000eb8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000eba:	6841      	ldr	r1, [r0, #4]
 8000ebc:	6882      	ldr	r2, [r0, #8]
 8000ebe:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ec0:	6841      	ldr	r1, [r0, #4]
 8000ec2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	4282      	cmp	r2, r0
 8000ec8:	d006      	beq.n	8000ed8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000eca:	2200      	movs	r2, #0
 8000ecc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	3a01      	subs	r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000ed4:	6818      	ldr	r0, [r3, #0]
}
 8000ed6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000ed8:	6882      	ldr	r2, [r0, #8]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	e7f5      	b.n	8000eca <uxListRemove+0x12>
	...

08000ee0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 8000ee2:	6802      	ldr	r2, [r0, #0]
 8000ee4:	4b03      	ldr	r3, [pc, #12]	@ (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d000      	beq.n	8000eec <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eea:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000eec:	f000 fda6 	bl	8001a3c <HAL_IncTick>
}
 8000ef0:	e7fb      	b.n	8000eea <HAL_TIM_PeriodElapsedCallback+0xa>
 8000ef2:	bf00      	nop
 8000ef4:	40014800 	.word	0x40014800

08000ef8 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000efa:	e7fe      	b.n	8000efa <Error_Handler+0x2>

08000efc <SystemClock_Config>:
{
 8000efc:	b510      	push	{r4, lr}
 8000efe:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f00:	ac08      	add	r4, sp, #32
 8000f02:	2230      	movs	r2, #48	@ 0x30
 8000f04:	2100      	movs	r1, #0
 8000f06:	4620      	mov	r0, r4
 8000f08:	f006 fbcc 	bl	80076a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9303      	str	r3, [sp, #12]
 8000f10:	9304      	str	r3, [sp, #16]
 8000f12:	9305      	str	r3, [sp, #20]
 8000f14:	9306      	str	r3, [sp, #24]
 8000f16:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	4a21      	ldr	r2, [pc, #132]	@ (8000fa0 <SystemClock_Config+0xa4>)
 8000f1c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000f1e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000f22:	6411      	str	r1, [r2, #64]	@ 0x40
 8000f24:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000f26:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000f2a:	9201      	str	r2, [sp, #4]
 8000f2c:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa4 <SystemClock_Config+0xa8>)
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	6813      	ldr	r3, [r2, #0]
 8000f40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f44:	9302      	str	r3, [sp, #8]
 8000f46:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f50:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f52:	2302      	movs	r3, #2
 8000f54:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f5a:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f5c:	2319      	movs	r3, #25
 8000f5e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f60:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f64:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f66:	2304      	movs	r3, #4
 8000f68:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f002 f884 	bl	800307c <HAL_RCC_OscConfig>
 8000f74:	b978      	cbnz	r0, 8000f96 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f76:	230f      	movs	r3, #15
 8000f78:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f82:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f86:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f88:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f8a:	a803      	add	r0, sp, #12
 8000f8c:	f002 fac6 	bl	800351c <HAL_RCC_ClockConfig>
 8000f90:	b918      	cbnz	r0, 8000f9a <SystemClock_Config+0x9e>
}
 8000f92:	b014      	add	sp, #80	@ 0x50
 8000f94:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f96:	f7ff ffaf 	bl	8000ef8 <Error_Handler>
    Error_Handler();
 8000f9a:	f7ff ffad 	bl	8000ef8 <Error_Handler>
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40007000 	.word	0x40007000

08000fa8 <main>:
{
 8000fa8:	b508      	push	{r3, lr}
  HAL_Init();
 8000faa:	f000 fd2d 	bl	8001a08 <HAL_Init>
  SystemClock_Config();
 8000fae:	f7ff ffa5 	bl	8000efc <SystemClock_Config>
  MX_GPIO_Init();
 8000fb2:	f7ff fc67 	bl	8000884 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb6:	f7ff fbcf 	bl	8000758 <MX_DMA_Init>
  MX_TIM5_Init();
 8000fba:	f004 fc5f 	bl	800587c <MX_TIM5_Init>
  MX_TIM3_Init();
 8000fbe:	f004 fdd3 	bl	8005b68 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000fc2:	f7ff f97f 	bl	80002c4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000fc6:	f004 fd3f 	bl	8005a48 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fca:	f004 fbfb 	bl	80057c4 <MX_TIM2_Init>
  osKernelInitialize();
 8000fce:	f7ff fac5 	bl	800055c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000fd2:	f7ff fc47 	bl	8000864 <MX_FREERTOS_Init>
  osKernelStart();
 8000fd6:	f7ff fad3 	bl	8000580 <osKernelStart>
  while (1)
 8000fda:	e7fe      	b.n	8000fda <main+0x32>

08000fdc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000fdc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <prvTaskExitError+0x3c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fea:	d008      	beq.n	8000ffe <prvTaskExitError+0x22>
 8000fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ff0:	f383 8811 	msr	BASEPRI, r3
 8000ff4:	f3bf 8f6f 	isb	sy
 8000ff8:	f3bf 8f4f 	dsb	sy
 8000ffc:	e7fe      	b.n	8000ffc <prvTaskExitError+0x20>
 8000ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001002:	f383 8811 	msr	BASEPRI, r3
 8001006:	f3bf 8f6f 	isb	sy
 800100a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800100e:	9b01      	ldr	r3, [sp, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0fc      	beq.n	800100e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001014:	b002      	add	sp, #8
 8001016:	4770      	bx	lr
 8001018:	20000000 	.word	0x20000000

0800101c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800101c:	4808      	ldr	r0, [pc, #32]	@ (8001040 <prvPortStartFirstTask+0x24>)
 800101e:	6800      	ldr	r0, [r0, #0]
 8001020:	6800      	ldr	r0, [r0, #0]
 8001022:	f380 8808 	msr	MSP, r0
 8001026:	f04f 0000 	mov.w	r0, #0
 800102a:	f380 8814 	msr	CONTROL, r0
 800102e:	b662      	cpsie	i
 8001030:	b661      	cpsie	f
 8001032:	f3bf 8f4f 	dsb	sy
 8001036:	f3bf 8f6f 	isb	sy
 800103a:	df00      	svc	0
 800103c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800103e:	0000      	.short	0x0000
 8001040:	e000ed08 	.word	0xe000ed08

08001044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001044:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8001054 <vPortEnableVFP+0x10>
 8001048:	6801      	ldr	r1, [r0, #0]
 800104a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800104e:	6001      	str	r1, [r0, #0]
 8001050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001052:	0000      	.short	0x0000
 8001054:	e000ed88 	.word	0xe000ed88

08001058 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001058:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800105c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001060:	f021 0101 	bic.w	r1, r1, #1
 8001064:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001068:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <pxPortInitialiseStack+0x28>)
 800106a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800106e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001072:	f06f 0302 	mvn.w	r3, #2
 8001076:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800107a:	3844      	subs	r0, #68	@ 0x44
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	08000fdd 	.word	0x08000fdd
	...

08001090 <SVC_Handler>:
	__asm volatile (
 8001090:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <pxCurrentTCBConst2>)
 8001092:	6819      	ldr	r1, [r3, #0]
 8001094:	6808      	ldr	r0, [r1, #0]
 8001096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800109a:	f380 8809 	msr	PSP, r0
 800109e:	f3bf 8f6f 	isb	sy
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	f380 8811 	msr	BASEPRI, r0
 80010aa:	4770      	bx	lr
 80010ac:	f3af 8000 	nop.w

080010b0 <pxCurrentTCBConst2>:
 80010b0:	20004b40 	.word	0x20004b40

080010b4 <vPortEnterCritical>:
 80010b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010b8:	f383 8811 	msr	BASEPRI, r3
 80010bc:	f3bf 8f6f 	isb	sy
 80010c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80010c4:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <vPortEnterCritical+0x40>)
 80010c6:	6813      	ldr	r3, [r2, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d000      	beq.n	80010d2 <vPortEnterCritical+0x1e>
}
 80010d0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80010d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80010d6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80010da:	f013 0fff 	tst.w	r3, #255	@ 0xff
 80010de:	d0f7      	beq.n	80010d0 <vPortEnterCritical+0x1c>
 80010e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010e4:	f383 8811 	msr	BASEPRI, r3
 80010e8:	f3bf 8f6f 	isb	sy
 80010ec:	f3bf 8f4f 	dsb	sy
 80010f0:	e7fe      	b.n	80010f0 <vPortEnterCritical+0x3c>
 80010f2:	bf00      	nop
 80010f4:	20000000 	.word	0x20000000

080010f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <vPortExitCritical+0x28>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	b943      	cbnz	r3, 8001110 <vPortExitCritical+0x18>
 80010fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001102:	f383 8811 	msr	BASEPRI, r3
 8001106:	f3bf 8f6f 	isb	sy
 800110a:	f3bf 8f4f 	dsb	sy
 800110e:	e7fe      	b.n	800110e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001110:	3b01      	subs	r3, #1
 8001112:	4a03      	ldr	r2, [pc, #12]	@ (8001120 <vPortExitCritical+0x28>)
 8001114:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001116:	b90b      	cbnz	r3, 800111c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001118:	f383 8811 	msr	BASEPRI, r3
}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000000 	.word	0x20000000
	...

08001130 <PendSV_Handler>:
	__asm volatile
 8001130:	f3ef 8009 	mrs	r0, PSP
 8001134:	f3bf 8f6f 	isb	sy
 8001138:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <pxCurrentTCBConst>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	f01e 0f10 	tst.w	lr, #16
 8001140:	bf08      	it	eq
 8001142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800114a:	6010      	str	r0, [r2, #0]
 800114c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001154:	f380 8811 	msr	BASEPRI, r0
 8001158:	f3bf 8f4f 	dsb	sy
 800115c:	f3bf 8f6f 	isb	sy
 8001160:	f004 f9bc 	bl	80054dc <vTaskSwitchContext>
 8001164:	f04f 0000 	mov.w	r0, #0
 8001168:	f380 8811 	msr	BASEPRI, r0
 800116c:	bc09      	pop	{r0, r3}
 800116e:	6819      	ldr	r1, [r3, #0]
 8001170:	6808      	ldr	r0, [r1, #0]
 8001172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001176:	f01e 0f10 	tst.w	lr, #16
 800117a:	bf08      	it	eq
 800117c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001180:	f380 8809 	msr	PSP, r0
 8001184:	f3bf 8f6f 	isb	sy
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	f3af 8000 	nop.w

08001190 <pxCurrentTCBConst>:
 8001190:	20004b40 	.word	0x20004b40

08001194 <xPortSysTickHandler>:
{
 8001194:	b508      	push	{r3, lr}
	__asm volatile
 8001196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800119a:	f383 8811 	msr	BASEPRI, r3
 800119e:	f3bf 8f6f 	isb	sy
 80011a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80011a6:	f004 f86b 	bl	8005280 <xTaskIncrementTick>
 80011aa:	b128      	cbz	r0, 80011b8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80011ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80011b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80011b8:	2300      	movs	r3, #0
 80011ba:	f383 8811 	msr	BASEPRI, r3
}
 80011be:	bd08      	pop	{r3, pc}

080011c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80011c0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80011c4:	2300      	movs	r3, #0
 80011c6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80011c8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80011ca:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <vPortSetupTimerInterrupt+0x20>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4905      	ldr	r1, [pc, #20]	@ (80011e4 <vPortSetupTimerInterrupt+0x24>)
 80011d0:	fba1 1303 	umull	r1, r3, r1, r3
 80011d4:	099b      	lsrs	r3, r3, #6
 80011d6:	3b01      	subs	r3, #1
 80011d8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80011da:	2307      	movs	r3, #7
 80011dc:	6113      	str	r3, [r2, #16]
}
 80011de:	4770      	bx	lr
 80011e0:	2000000c 	.word	0x2000000c
 80011e4:	10624dd3 	.word	0x10624dd3

080011e8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80011e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80011ec:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80011f0:	4b3d      	ldr	r3, [pc, #244]	@ (80012e8 <xPortStartScheduler+0x100>)
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d01c      	beq.n	8001230 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80011f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80011fa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80011fe:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <xPortStartScheduler+0x104>)
 8001200:	429a      	cmp	r2, r3
 8001202:	d01e      	beq.n	8001242 <xPortStartScheduler+0x5a>
{
 8001204:	b530      	push	{r4, r5, lr}
 8001206:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001208:	4b39      	ldr	r3, [pc, #228]	@ (80012f0 <xPortStartScheduler+0x108>)
 800120a:	781a      	ldrb	r2, [r3, #0]
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001210:	22ff      	movs	r2, #255	@ 0xff
 8001212:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800121c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001220:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001224:	4a33      	ldr	r2, [pc, #204]	@ (80012f4 <xPortStartScheduler+0x10c>)
 8001226:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001228:	4b33      	ldr	r3, [pc, #204]	@ (80012f8 <xPortStartScheduler+0x110>)
 800122a:	2207      	movs	r2, #7
 800122c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800122e:	e01b      	b.n	8001268 <xPortStartScheduler+0x80>
	__asm volatile
 8001230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001234:	f383 8811 	msr	BASEPRI, r3
 8001238:	f3bf 8f6f 	isb	sy
 800123c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001240:	e7fe      	b.n	8001240 <xPortStartScheduler+0x58>
 8001242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001246:	f383 8811 	msr	BASEPRI, r3
 800124a:	f3bf 8f6f 	isb	sy
 800124e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001252:	e7fe      	b.n	8001252 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8001254:	4a28      	ldr	r2, [pc, #160]	@ (80012f8 <xPortStartScheduler+0x110>)
 8001256:	6813      	ldr	r3, [r2, #0]
 8001258:	3b01      	subs	r3, #1
 800125a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800125c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001268:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800126c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001270:	d1f0      	bne.n	8001254 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001272:	4b21      	ldr	r3, [pc, #132]	@ (80012f8 <xPortStartScheduler+0x110>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d008      	beq.n	800128c <xPortStartScheduler+0xa4>
 800127a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800127e:	f383 8811 	msr	BASEPRI, r3
 8001282:	f3bf 8f6f 	isb	sy
 8001286:	f3bf 8f4f 	dsb	sy
 800128a:	e7fe      	b.n	800128a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	4a1a      	ldr	r2, [pc, #104]	@ (80012f8 <xPortStartScheduler+0x110>)
 8001290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001292:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001296:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001298:	9b01      	ldr	r3, [sp, #4]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <xPortStartScheduler+0x108>)
 800129e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80012a0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 80012a4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80012a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012ac:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80012b0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80012b4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80012b8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80012bc:	f7ff ff80 	bl	80011c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80012c0:	2500      	movs	r5, #0
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <xPortStartScheduler+0x114>)
 80012c4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80012c6:	f7ff febd 	bl	8001044 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80012ca:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80012ce:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80012d2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80012d6:	f7ff fea1 	bl	800101c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80012da:	f004 f8ff 	bl	80054dc <vTaskSwitchContext>
	prvTaskExitError();
 80012de:	f7ff fe7d 	bl	8000fdc <prvTaskExitError>
}
 80012e2:	4628      	mov	r0, r5
 80012e4:	b003      	add	sp, #12
 80012e6:	bd30      	pop	{r4, r5, pc}
 80012e8:	410fc271 	.word	0x410fc271
 80012ec:	410fc270 	.word	0x410fc270
 80012f0:	e000e400 	.word	0xe000e400
 80012f4:	200045b0 	.word	0x200045b0
 80012f8:	200045ac 	.word	0x200045ac
 80012fc:	20000000 	.word	0x20000000

08001300 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001300:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d90e      	bls.n	8001326 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001308:	4a11      	ldr	r2, [pc, #68]	@ (8001350 <vPortValidateInterruptPriority+0x50>)
 800130a:	5c9a      	ldrb	r2, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <vPortValidateInterruptPriority+0x54>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d208      	bcs.n	8001326 <vPortValidateInterruptPriority+0x26>
 8001314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001318:	f383 8811 	msr	BASEPRI, r3
 800131c:	f3bf 8f6f 	isb	sy
 8001320:	f3bf 8f4f 	dsb	sy
 8001324:	e7fe      	b.n	8001324 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001326:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800132a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800132e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001332:	4a09      	ldr	r2, [pc, #36]	@ (8001358 <vPortValidateInterruptPriority+0x58>)
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	4293      	cmp	r3, r2
 8001338:	d908      	bls.n	800134c <vPortValidateInterruptPriority+0x4c>
 800133a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800133e:	f383 8811 	msr	BASEPRI, r3
 8001342:	f3bf 8f6f 	isb	sy
 8001346:	f3bf 8f4f 	dsb	sy
 800134a:	e7fe      	b.n	800134a <vPortValidateInterruptPriority+0x4a>
	}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e3f0 	.word	0xe000e3f0
 8001354:	200045b0 	.word	0x200045b0
 8001358:	200045ac 	.word	0x200045ac

0800135c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800135c:	b510      	push	{r4, lr}
 800135e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001360:	f7ff fea8 	bl	80010b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001364:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001366:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001368:	429a      	cmp	r2, r3
 800136a:	d004      	beq.n	8001376 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800136c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800136e:	f7ff fec3 	bl	80010f8 <vPortExitCritical>

	return xReturn;
}
 8001372:	4620      	mov	r0, r4
 8001374:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8001376:	2401      	movs	r4, #1
 8001378:	e7f9      	b.n	800136e <prvIsQueueFull+0x12>

0800137a <prvIsQueueEmpty>:
{
 800137a:	b510      	push	{r4, lr}
 800137c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800137e:	f7ff fe99 	bl	80010b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001382:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001384:	b923      	cbnz	r3, 8001390 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8001386:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8001388:	f7ff feb6 	bl	80010f8 <vPortExitCritical>
}
 800138c:	4620      	mov	r0, r4
 800138e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8001390:	2400      	movs	r4, #0
 8001392:	e7f9      	b.n	8001388 <prvIsQueueEmpty+0xe>

08001394 <prvCopyDataToQueue>:
{
 8001394:	b570      	push	{r4, r5, r6, lr}
 8001396:	4604      	mov	r4, r0
 8001398:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800139a:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800139c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800139e:	b95a      	cbnz	r2, 80013b8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80013a0:	6803      	ldr	r3, [r0, #0]
 80013a2:	b11b      	cbz	r3, 80013ac <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80013a4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80013a6:	3601      	adds	r6, #1
 80013a8:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80013ac:	6880      	ldr	r0, [r0, #8]
 80013ae:	f004 f9c1 	bl	8005734 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60a3      	str	r3, [r4, #8]
 80013b6:	e7f6      	b.n	80013a6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80013b8:	b96d      	cbnz	r5, 80013d6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80013ba:	6840      	ldr	r0, [r0, #4]
 80013bc:	f006 f9a6 	bl	800770c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80013c0:	6863      	ldr	r3, [r4, #4]
 80013c2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80013c4:	4413      	add	r3, r2
 80013c6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80013c8:	68a2      	ldr	r2, [r4, #8]
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d319      	bcc.n	8001402 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80013d2:	4628      	mov	r0, r5
 80013d4:	e7e7      	b.n	80013a6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80013d6:	68c0      	ldr	r0, [r0, #12]
 80013d8:	f006 f998 	bl	800770c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80013dc:	68e3      	ldr	r3, [r4, #12]
 80013de:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80013e0:	4251      	negs	r1, r2
 80013e2:	1a9b      	subs	r3, r3, r2
 80013e4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80013e6:	6822      	ldr	r2, [r4, #0]
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d202      	bcs.n	80013f2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80013ec:	68a3      	ldr	r3, [r4, #8]
 80013ee:	440b      	add	r3, r1
 80013f0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80013f2:	2d02      	cmp	r5, #2
 80013f4:	d001      	beq.n	80013fa <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80013f6:	2000      	movs	r0, #0
 80013f8:	e7d5      	b.n	80013a6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80013fa:	b126      	cbz	r6, 8001406 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80013fc:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80013fe:	2000      	movs	r0, #0
 8001400:	e7d1      	b.n	80013a6 <prvCopyDataToQueue+0x12>
 8001402:	4628      	mov	r0, r5
 8001404:	e7cf      	b.n	80013a6 <prvCopyDataToQueue+0x12>
 8001406:	2000      	movs	r0, #0
 8001408:	e7cd      	b.n	80013a6 <prvCopyDataToQueue+0x12>

0800140a <prvCopyDataFromQueue>:
{
 800140a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800140c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800140e:	b16a      	cbz	r2, 800142c <prvCopyDataFromQueue+0x22>
{
 8001410:	b510      	push	{r4, lr}
 8001412:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001414:	68d9      	ldr	r1, [r3, #12]
 8001416:	4411      	add	r1, r2
 8001418:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800141a:	689c      	ldr	r4, [r3, #8]
 800141c:	42a1      	cmp	r1, r4
 800141e:	d301      	bcc.n	8001424 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001420:	6819      	ldr	r1, [r3, #0]
 8001422:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001424:	68d9      	ldr	r1, [r3, #12]
 8001426:	f006 f971 	bl	800770c <memcpy>
}
 800142a:	bd10      	pop	{r4, pc}
 800142c:	4770      	bx	lr

0800142e <prvUnlockQueue>:
{
 800142e:	b538      	push	{r3, r4, r5, lr}
 8001430:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8001432:	f7ff fe3f 	bl	80010b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001436:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800143a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800143c:	e001      	b.n	8001442 <prvUnlockQueue+0x14>
			--cTxLock;
 800143e:	3c01      	subs	r4, #1
 8001440:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001442:	2c00      	cmp	r4, #0
 8001444:	dd0a      	ble.n	800145c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001446:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001448:	b143      	cbz	r3, 800145c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800144a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800144e:	f004 f8c5 	bl	80055dc <xTaskRemoveFromEventList>
 8001452:	2800      	cmp	r0, #0
 8001454:	d0f3      	beq.n	800143e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8001456:	f004 f957 	bl	8005708 <vTaskMissedYield>
 800145a:	e7f0      	b.n	800143e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800145c:	23ff      	movs	r3, #255	@ 0xff
 800145e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8001462:	f7ff fe49 	bl	80010f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001466:	f7ff fe25 	bl	80010b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800146a:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 800146e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001470:	e001      	b.n	8001476 <prvUnlockQueue+0x48>
				--cRxLock;
 8001472:	3c01      	subs	r4, #1
 8001474:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001476:	2c00      	cmp	r4, #0
 8001478:	dd0a      	ble.n	8001490 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800147a:	692b      	ldr	r3, [r5, #16]
 800147c:	b143      	cbz	r3, 8001490 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800147e:	f105 0010 	add.w	r0, r5, #16
 8001482:	f004 f8ab 	bl	80055dc <xTaskRemoveFromEventList>
 8001486:	2800      	cmp	r0, #0
 8001488:	d0f3      	beq.n	8001472 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800148a:	f004 f93d 	bl	8005708 <vTaskMissedYield>
 800148e:	e7f0      	b.n	8001472 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8001490:	23ff      	movs	r3, #255	@ 0xff
 8001492:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8001496:	f7ff fe2f 	bl	80010f8 <vPortExitCritical>
}
 800149a:	bd38      	pop	{r3, r4, r5, pc}

0800149c <xQueueGenericReset>:
{
 800149c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800149e:	b1e0      	cbz	r0, 80014da <xQueueGenericReset+0x3e>
 80014a0:	460d      	mov	r5, r1
 80014a2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80014a4:	f7ff fe06 	bl	80010b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80014ac:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80014ae:	fb01 3002 	mla	r0, r1, r2, r3
 80014b2:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80014b4:	2000      	movs	r0, #0
 80014b6:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80014b8:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80014ba:	3a01      	subs	r2, #1
 80014bc:	fb02 3301 	mla	r3, r2, r1, r3
 80014c0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80014c2:	23ff      	movs	r3, #255	@ 0xff
 80014c4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80014c8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80014cc:	b9fd      	cbnz	r5, 800150e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80014ce:	6923      	ldr	r3, [r4, #16]
 80014d0:	b963      	cbnz	r3, 80014ec <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80014d2:	f7ff fe11 	bl	80010f8 <vPortExitCritical>
}
 80014d6:	2001      	movs	r0, #1
 80014d8:	bd38      	pop	{r3, r4, r5, pc}
 80014da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014de:	f383 8811 	msr	BASEPRI, r3
 80014e2:	f3bf 8f6f 	isb	sy
 80014e6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80014ea:	e7fe      	b.n	80014ea <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014ec:	f104 0010 	add.w	r0, r4, #16
 80014f0:	f004 f874 	bl	80055dc <xTaskRemoveFromEventList>
 80014f4:	2800      	cmp	r0, #0
 80014f6:	d0ec      	beq.n	80014d2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80014f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80014fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001500:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001504:	f3bf 8f4f 	dsb	sy
 8001508:	f3bf 8f6f 	isb	sy
 800150c:	e7e1      	b.n	80014d2 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800150e:	f104 0010 	add.w	r0, r4, #16
 8001512:	f7ff fc9f 	bl	8000e54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001516:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800151a:	f7ff fc9b 	bl	8000e54 <vListInitialise>
 800151e:	e7d8      	b.n	80014d2 <xQueueGenericReset+0x36>

08001520 <prvInitialiseNewQueue>:
{
 8001520:	b538      	push	{r3, r4, r5, lr}
 8001522:	461d      	mov	r5, r3
 8001524:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001526:	460b      	mov	r3, r1
 8001528:	b949      	cbnz	r1, 800153e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800152a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800152c:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800152e:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001530:	2101      	movs	r1, #1
 8001532:	4620      	mov	r0, r4
 8001534:	f7ff ffb2 	bl	800149c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8001538:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800153c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800153e:	6022      	str	r2, [r4, #0]
 8001540:	e7f4      	b.n	800152c <prvInitialiseNewQueue+0xc>

08001542 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001542:	b940      	cbnz	r0, 8001556 <xQueueGenericCreateStatic+0x14>
 8001544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001548:	f383 8811 	msr	BASEPRI, r3
 800154c:	f3bf 8f6f 	isb	sy
 8001550:	f3bf 8f4f 	dsb	sy
 8001554:	e7fe      	b.n	8001554 <xQueueGenericCreateStatic+0x12>
	{
 8001556:	b510      	push	{r4, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	461c      	mov	r4, r3
 800155c:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800155e:	b153      	cbz	r3, 8001576 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001560:	b192      	cbz	r2, 8001588 <xQueueGenericCreateStatic+0x46>
 8001562:	b989      	cbnz	r1, 8001588 <xQueueGenericCreateStatic+0x46>
 8001564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001568:	f383 8811 	msr	BASEPRI, r3
 800156c:	f3bf 8f6f 	isb	sy
 8001570:	f3bf 8f4f 	dsb	sy
 8001574:	e7fe      	b.n	8001574 <xQueueGenericCreateStatic+0x32>
 8001576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800157a:	f383 8811 	msr	BASEPRI, r3
 800157e:	f3bf 8f6f 	isb	sy
 8001582:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8001586:	e7fe      	b.n	8001586 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001588:	b16a      	cbz	r2, 80015a6 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800158a:	2350      	movs	r3, #80	@ 0x50
 800158c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800158e:	9b03      	ldr	r3, [sp, #12]
 8001590:	2b50      	cmp	r3, #80	@ 0x50
 8001592:	d013      	beq.n	80015bc <xQueueGenericCreateStatic+0x7a>
 8001594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001598:	f383 8811 	msr	BASEPRI, r3
 800159c:	f3bf 8f6f 	isb	sy
 80015a0:	f3bf 8f4f 	dsb	sy
 80015a4:	e7fe      	b.n	80015a4 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80015a6:	2900      	cmp	r1, #0
 80015a8:	d0ef      	beq.n	800158a <xQueueGenericCreateStatic+0x48>
 80015aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015ae:	f383 8811 	msr	BASEPRI, r3
 80015b2:	f3bf 8f6f 	isb	sy
 80015b6:	f3bf 8f4f 	dsb	sy
 80015ba:	e7fe      	b.n	80015ba <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80015bc:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80015be:	2301      	movs	r3, #1
 80015c0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80015c4:	9400      	str	r4, [sp, #0]
 80015c6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80015ca:	4660      	mov	r0, ip
 80015cc:	f7ff ffa8 	bl	8001520 <prvInitialiseNewQueue>
	}
 80015d0:	4620      	mov	r0, r4
 80015d2:	b004      	add	sp, #16
 80015d4:	bd10      	pop	{r4, pc}

080015d6 <xQueueGenericSend>:
{
 80015d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d8:	b085      	sub	sp, #20
 80015da:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80015dc:	b188      	cbz	r0, 8001602 <xQueueGenericSend+0x2c>
 80015de:	460f      	mov	r7, r1
 80015e0:	461d      	mov	r5, r3
 80015e2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015e4:	b1b1      	cbz	r1, 8001614 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80015e6:	2d02      	cmp	r5, #2
 80015e8:	d120      	bne.n	800162c <xQueueGenericSend+0x56>
 80015ea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d01d      	beq.n	800162c <xQueueGenericSend+0x56>
 80015f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015f4:	f383 8811 	msr	BASEPRI, r3
 80015f8:	f3bf 8f6f 	isb	sy
 80015fc:	f3bf 8f4f 	dsb	sy
 8001600:	e7fe      	b.n	8001600 <xQueueGenericSend+0x2a>
 8001602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001606:	f383 8811 	msr	BASEPRI, r3
 800160a:	f3bf 8f6f 	isb	sy
 800160e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001612:	e7fe      	b.n	8001612 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001614:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0e5      	beq.n	80015e6 <xQueueGenericSend+0x10>
 800161a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800161e:	f383 8811 	msr	BASEPRI, r3
 8001622:	f3bf 8f6f 	isb	sy
 8001626:	f3bf 8f4f 	dsb	sy
 800162a:	e7fe      	b.n	800162a <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800162c:	f004 f872 	bl	8005714 <xTaskGetSchedulerState>
 8001630:	4606      	mov	r6, r0
 8001632:	b958      	cbnz	r0, 800164c <xQueueGenericSend+0x76>
 8001634:	9b01      	ldr	r3, [sp, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d048      	beq.n	80016cc <xQueueGenericSend+0xf6>
 800163a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800163e:	f383 8811 	msr	BASEPRI, r3
 8001642:	f3bf 8f6f 	isb	sy
 8001646:	f3bf 8f4f 	dsb	sy
 800164a:	e7fe      	b.n	800164a <xQueueGenericSend+0x74>
 800164c:	2600      	movs	r6, #0
 800164e:	e03d      	b.n	80016cc <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001650:	462a      	mov	r2, r5
 8001652:	4639      	mov	r1, r7
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff fe9d 	bl	8001394 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800165a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800165c:	b97b      	cbnz	r3, 800167e <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800165e:	b148      	cbz	r0, 8001674 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8001660:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001668:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800166c:	f3bf 8f4f 	dsb	sy
 8001670:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001674:	f7ff fd40 	bl	80010f8 <vPortExitCritical>
				return pdPASS;
 8001678:	2001      	movs	r0, #1
}
 800167a:	b005      	add	sp, #20
 800167c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800167e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001682:	f003 ffab 	bl	80055dc <xTaskRemoveFromEventList>
 8001686:	2800      	cmp	r0, #0
 8001688:	d0f4      	beq.n	8001674 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800168a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800168e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001692:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001696:	f3bf 8f4f 	dsb	sy
 800169a:	f3bf 8f6f 	isb	sy
 800169e:	e7e9      	b.n	8001674 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 80016a0:	f7ff fd2a 	bl	80010f8 <vPortExitCritical>
					return errQUEUE_FULL;
 80016a4:	2000      	movs	r0, #0
 80016a6:	e7e8      	b.n	800167a <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80016a8:	a802      	add	r0, sp, #8
 80016aa:	f003 ffdd 	bl	8005668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80016ae:	2601      	movs	r6, #1
 80016b0:	e019      	b.n	80016e6 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 80016b2:	2300      	movs	r3, #0
 80016b4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80016b8:	e021      	b.n	80016fe <xQueueGenericSend+0x128>
 80016ba:	2300      	movs	r3, #0
 80016bc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80016c0:	e023      	b.n	800170a <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7ff feb3 	bl	800142e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80016c8:	f003 fe66 	bl	8005398 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80016cc:	f7ff fcf2 	bl	80010b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80016d0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80016d2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3bb      	bcc.n	8001650 <xQueueGenericSend+0x7a>
 80016d8:	2d02      	cmp	r5, #2
 80016da:	d0b9      	beq.n	8001650 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80016dc:	9b01      	ldr	r3, [sp, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0de      	beq.n	80016a0 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 80016e2:	2e00      	cmp	r6, #0
 80016e4:	d0e0      	beq.n	80016a8 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 80016e6:	f7ff fd07 	bl	80010f8 <vPortExitCritical>
		vTaskSuspendAll();
 80016ea:	f003 fdbb 	bl	8005264 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80016ee:	f7ff fce1 	bl	80010b4 <vPortEnterCritical>
 80016f2:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80016f6:	b252      	sxtb	r2, r2
 80016f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80016fc:	d0d9      	beq.n	80016b2 <xQueueGenericSend+0xdc>
 80016fe:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8001702:	b252      	sxtb	r2, r2
 8001704:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001708:	d0d7      	beq.n	80016ba <xQueueGenericSend+0xe4>
 800170a:	f7ff fcf5 	bl	80010f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800170e:	a901      	add	r1, sp, #4
 8001710:	a802      	add	r0, sp, #8
 8001712:	f003 ffb5 	bl	8005680 <xTaskCheckForTimeOut>
 8001716:	b9d8      	cbnz	r0, 8001750 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff fe1f 	bl	800135c <prvIsQueueFull>
 800171e:	2800      	cmp	r0, #0
 8001720:	d0cf      	beq.n	80016c2 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001722:	9901      	ldr	r1, [sp, #4]
 8001724:	f104 0010 	add.w	r0, r4, #16
 8001728:	f003 ff24 	bl	8005574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff fe7e 	bl	800142e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001732:	f003 fe31 	bl	8005398 <xTaskResumeAll>
 8001736:	2800      	cmp	r0, #0
 8001738:	d1c8      	bne.n	80016cc <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800173a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800173e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001742:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001746:	f3bf 8f4f 	dsb	sy
 800174a:	f3bf 8f6f 	isb	sy
 800174e:	e7bd      	b.n	80016cc <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8001750:	4620      	mov	r0, r4
 8001752:	f7ff fe6c 	bl	800142e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001756:	f003 fe1f 	bl	8005398 <xTaskResumeAll>
			return errQUEUE_FULL;
 800175a:	2000      	movs	r0, #0
 800175c:	e78d      	b.n	800167a <xQueueGenericSend+0xa4>

0800175e <xQueueGenericSendFromISR>:
{
 800175e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8001762:	b190      	cbz	r0, 800178a <xQueueGenericSendFromISR+0x2c>
 8001764:	460f      	mov	r7, r1
 8001766:	4616      	mov	r6, r2
 8001768:	461c      	mov	r4, r3
 800176a:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800176c:	b1b1      	cbz	r1, 800179c <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800176e:	2c02      	cmp	r4, #2
 8001770:	d120      	bne.n	80017b4 <xQueueGenericSendFromISR+0x56>
 8001772:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8001774:	2b01      	cmp	r3, #1
 8001776:	d01d      	beq.n	80017b4 <xQueueGenericSendFromISR+0x56>
 8001778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800177c:	f383 8811 	msr	BASEPRI, r3
 8001780:	f3bf 8f6f 	isb	sy
 8001784:	f3bf 8f4f 	dsb	sy
 8001788:	e7fe      	b.n	8001788 <xQueueGenericSendFromISR+0x2a>
 800178a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800178e:	f383 8811 	msr	BASEPRI, r3
 8001792:	f3bf 8f6f 	isb	sy
 8001796:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800179a:	e7fe      	b.n	800179a <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800179c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0e5      	beq.n	800176e <xQueueGenericSendFromISR+0x10>
 80017a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017a6:	f383 8811 	msr	BASEPRI, r3
 80017aa:	f3bf 8f6f 	isb	sy
 80017ae:	f3bf 8f4f 	dsb	sy
 80017b2:	e7fe      	b.n	80017b2 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80017b4:	f7ff fda4 	bl	8001300 <vPortValidateInterruptPriority>
	__asm volatile
 80017b8:	f3ef 8811 	mrs	r8, BASEPRI
 80017bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017c0:	f383 8811 	msr	BASEPRI, r3
 80017c4:	f3bf 8f6f 	isb	sy
 80017c8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80017cc:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 80017ce:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d306      	bcc.n	80017e2 <xQueueGenericSendFromISR+0x84>
 80017d4:	2c02      	cmp	r4, #2
 80017d6:	d004      	beq.n	80017e2 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80017d8:	2000      	movs	r0, #0
	__asm volatile
 80017da:	f388 8811 	msr	BASEPRI, r8
}
 80017de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80017e2:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 80017e6:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80017ea:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80017ec:	4622      	mov	r2, r4
 80017ee:	4639      	mov	r1, r7
 80017f0:	4628      	mov	r0, r5
 80017f2:	f7ff fdcf 	bl	8001394 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80017f6:	f1b9 3fff 	cmp.w	r9, #4294967295
 80017fa:	d006      	beq.n	800180a <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80017fc:	f109 0301 	add.w	r3, r9, #1
 8001800:	b25b      	sxtb	r3, r3
 8001802:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8001806:	2001      	movs	r0, #1
 8001808:	e7e7      	b.n	80017da <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800180a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800180c:	b90b      	cbnz	r3, 8001812 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800180e:	2001      	movs	r0, #1
 8001810:	e7e3      	b.n	80017da <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001812:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8001816:	f003 fee1 	bl	80055dc <xTaskRemoveFromEventList>
 800181a:	b118      	cbz	r0, 8001824 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800181c:	b126      	cbz	r6, 8001828 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800181e:	2001      	movs	r0, #1
 8001820:	6030      	str	r0, [r6, #0]
 8001822:	e7da      	b.n	80017da <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8001824:	2001      	movs	r0, #1
 8001826:	e7d8      	b.n	80017da <xQueueGenericSendFromISR+0x7c>
 8001828:	2001      	movs	r0, #1
 800182a:	e7d6      	b.n	80017da <xQueueGenericSendFromISR+0x7c>

0800182c <xQueueReceive>:
{
 800182c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182e:	b085      	sub	sp, #20
 8001830:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001832:	b190      	cbz	r0, 800185a <xQueueReceive+0x2e>
 8001834:	460f      	mov	r7, r1
 8001836:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001838:	b1c1      	cbz	r1, 800186c <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800183a:	f003 ff6b 	bl	8005714 <xTaskGetSchedulerState>
 800183e:	4606      	mov	r6, r0
 8001840:	bb00      	cbnz	r0, 8001884 <xQueueReceive+0x58>
 8001842:	9b01      	ldr	r3, [sp, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d05e      	beq.n	8001906 <xQueueReceive+0xda>
	__asm volatile
 8001848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800184c:	f383 8811 	msr	BASEPRI, r3
 8001850:	f3bf 8f6f 	isb	sy
 8001854:	f3bf 8f4f 	dsb	sy
 8001858:	e7fe      	b.n	8001858 <xQueueReceive+0x2c>
 800185a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800185e:	f383 8811 	msr	BASEPRI, r3
 8001862:	f3bf 8f6f 	isb	sy
 8001866:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800186a:	e7fe      	b.n	800186a <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800186c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0e3      	beq.n	800183a <xQueueReceive+0xe>
 8001872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001876:	f383 8811 	msr	BASEPRI, r3
 800187a:	f3bf 8f6f 	isb	sy
 800187e:	f3bf 8f4f 	dsb	sy
 8001882:	e7fe      	b.n	8001882 <xQueueReceive+0x56>
 8001884:	2600      	movs	r6, #0
 8001886:	e03e      	b.n	8001906 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001888:	4639      	mov	r1, r7
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff fdbd 	bl	800140a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001890:	3d01      	subs	r5, #1
 8001892:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001894:	6923      	ldr	r3, [r4, #16]
 8001896:	b923      	cbnz	r3, 80018a2 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8001898:	f7ff fc2e 	bl	80010f8 <vPortExitCritical>
				return pdPASS;
 800189c:	2001      	movs	r0, #1
}
 800189e:	b005      	add	sp, #20
 80018a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018a2:	f104 0010 	add.w	r0, r4, #16
 80018a6:	f003 fe99 	bl	80055dc <xTaskRemoveFromEventList>
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d0f4      	beq.n	8001898 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80018ae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80018b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80018ba:	f3bf 8f4f 	dsb	sy
 80018be:	f3bf 8f6f 	isb	sy
 80018c2:	e7e9      	b.n	8001898 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80018c4:	f7ff fc18 	bl	80010f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80018c8:	2000      	movs	r0, #0
 80018ca:	e7e8      	b.n	800189e <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80018cc:	a802      	add	r0, sp, #8
 80018ce:	f003 fecb 	bl	8005668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80018d2:	2601      	movs	r6, #1
 80018d4:	e021      	b.n	800191a <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 80018d6:	2300      	movs	r3, #0
 80018d8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80018dc:	e029      	b.n	8001932 <xQueueReceive+0x106>
 80018de:	2300      	movs	r3, #0
 80018e0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80018e4:	e02b      	b.n	800193e <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff fda1 	bl	800142e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80018ec:	f003 fd54 	bl	8005398 <xTaskResumeAll>
 80018f0:	e009      	b.n	8001906 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80018f2:	4620      	mov	r0, r4
 80018f4:	f7ff fd9b 	bl	800142e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80018f8:	f003 fd4e 	bl	8005398 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80018fc:	4620      	mov	r0, r4
 80018fe:	f7ff fd3c 	bl	800137a <prvIsQueueEmpty>
 8001902:	2800      	cmp	r0, #0
 8001904:	d13f      	bne.n	8001986 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8001906:	f7ff fbd5 	bl	80010b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800190a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800190c:	2d00      	cmp	r5, #0
 800190e:	d1bb      	bne.n	8001888 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001910:	9b01      	ldr	r3, [sp, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0d6      	beq.n	80018c4 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8001916:	2e00      	cmp	r6, #0
 8001918:	d0d8      	beq.n	80018cc <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800191a:	f7ff fbed 	bl	80010f8 <vPortExitCritical>
		vTaskSuspendAll();
 800191e:	f003 fca1 	bl	8005264 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001922:	f7ff fbc7 	bl	80010b4 <vPortEnterCritical>
 8001926:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800192a:	b25b      	sxtb	r3, r3
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d0d1      	beq.n	80018d6 <xQueueReceive+0xaa>
 8001932:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8001936:	b25b      	sxtb	r3, r3
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193c:	d0cf      	beq.n	80018de <xQueueReceive+0xb2>
 800193e:	f7ff fbdb 	bl	80010f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001942:	a901      	add	r1, sp, #4
 8001944:	a802      	add	r0, sp, #8
 8001946:	f003 fe9b 	bl	8005680 <xTaskCheckForTimeOut>
 800194a:	2800      	cmp	r0, #0
 800194c:	d1d1      	bne.n	80018f2 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff fd13 	bl	800137a <prvIsQueueEmpty>
 8001954:	2800      	cmp	r0, #0
 8001956:	d0c6      	beq.n	80018e6 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001958:	9901      	ldr	r1, [sp, #4]
 800195a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800195e:	f003 fe09 	bl	8005574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001962:	4620      	mov	r0, r4
 8001964:	f7ff fd63 	bl	800142e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001968:	f003 fd16 	bl	8005398 <xTaskResumeAll>
 800196c:	2800      	cmp	r0, #0
 800196e:	d1ca      	bne.n	8001906 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8001970:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001978:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800197c:	f3bf 8f4f 	dsb	sy
 8001980:	f3bf 8f6f 	isb	sy
 8001984:	e7bf      	b.n	8001906 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8001986:	2000      	movs	r0, #0
 8001988:	e789      	b.n	800189e <xQueueReceive+0x72>
	...

0800198c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800198c:	2300      	movs	r3, #0
 800198e:	2b07      	cmp	r3, #7
 8001990:	d80c      	bhi.n	80019ac <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001992:	4a07      	ldr	r2, [pc, #28]	@ (80019b0 <vQueueAddToRegistry+0x24>)
 8001994:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001998:	b10a      	cbz	r2, 800199e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800199a:	3301      	adds	r3, #1
 800199c:	e7f7      	b.n	800198e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800199e:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <vQueueAddToRegistry+0x24>)
 80019a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80019a4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80019a8:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80019aa:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	200045b4 	.word	0x200045b4

080019b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80019b4:	b570      	push	{r4, r5, r6, lr}
 80019b6:	4604      	mov	r4, r0
 80019b8:	460d      	mov	r5, r1
 80019ba:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80019bc:	f7ff fb7a 	bl	80010b4 <vPortEnterCritical>
 80019c0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80019c4:	b25b      	sxtb	r3, r3
 80019c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ca:	d00d      	beq.n	80019e8 <vQueueWaitForMessageRestricted+0x34>
 80019cc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80019d0:	b25b      	sxtb	r3, r3
 80019d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d6:	d00b      	beq.n	80019f0 <vQueueWaitForMessageRestricted+0x3c>
 80019d8:	f7ff fb8e 	bl	80010f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80019dc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80019de:	b15b      	cbz	r3, 80019f8 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff fd24 	bl	800142e <prvUnlockQueue>
	}
 80019e6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80019e8:	2300      	movs	r3, #0
 80019ea:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80019ee:	e7ed      	b.n	80019cc <vQueueWaitForMessageRestricted+0x18>
 80019f0:	2300      	movs	r3, #0
 80019f2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80019f6:	e7ef      	b.n	80019d8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80019f8:	4632      	mov	r2, r6
 80019fa:	4629      	mov	r1, r5
 80019fc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001a00:	f003 fdd0 	bl	80055a4 <vTaskPlaceOnEventListRestricted>
 8001a04:	e7ec      	b.n	80019e0 <vQueueWaitForMessageRestricted+0x2c>
	...

08001a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a08:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <HAL_Init+0x30>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a12:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a1a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a22:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f000 fa01 	bl	8001e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a2a:	200f      	movs	r0, #15
 8001a2c:	f002 fb7e 	bl	800412c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a30:	f000 fcc6 	bl	80023c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001a34:	2000      	movs	r0, #0
 8001a36:	bd08      	pop	{r3, pc}
 8001a38:	40023c00 	.word	0x40023c00

08001a3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a3c:	4a03      	ldr	r2, [pc, #12]	@ (8001a4c <HAL_IncTick+0x10>)
 8001a3e:	6811      	ldr	r1, [r2, #0]
 8001a40:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <HAL_IncTick+0x14>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	440b      	add	r3, r1
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	200045f4 	.word	0x200045f4
 8001a50:	20000004 	.word	0x20000004

08001a54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a54:	4b01      	ldr	r3, [pc, #4]	@ (8001a5c <HAL_GetTick+0x8>)
 8001a56:	6818      	ldr	r0, [r3, #0]
}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	200045f4 	.word	0x200045f4

08001a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a60:	b538      	push	{r3, r4, r5, lr}
 8001a62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff fff6 	bl	8001a54 <HAL_GetTick>
 8001a68:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001a6e:	d002      	beq.n	8001a76 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a70:	4b04      	ldr	r3, [pc, #16]	@ (8001a84 <HAL_Delay+0x24>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a76:	f7ff ffed 	bl	8001a54 <HAL_GetTick>
 8001a7a:	1b40      	subs	r0, r0, r5
 8001a7c:	42a0      	cmp	r0, r4
 8001a7e:	d3fa      	bcc.n	8001a76 <HAL_Delay+0x16>
  {
  }
}
 8001a80:	bd38      	pop	{r3, r4, r5, pc}
 8001a82:	bf00      	nop
 8001a84:	20000004 	.word	0x20000004

08001a88 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a88:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb4 <ADC_Init+0x12c>)
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8001a90:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	6841      	ldr	r1, [r0, #4]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a9a:	6802      	ldr	r2, [r0, #0]
 8001a9c:	6853      	ldr	r3, [r2, #4]
 8001a9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001aa2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aa4:	6802      	ldr	r2, [r0, #0]
 8001aa6:	6853      	ldr	r3, [r2, #4]
 8001aa8:	6901      	ldr	r1, [r0, #16]
 8001aaa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001aae:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ab0:	6802      	ldr	r2, [r0, #0]
 8001ab2:	6853      	ldr	r3, [r2, #4]
 8001ab4:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001ab8:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001aba:	6802      	ldr	r2, [r0, #0]
 8001abc:	6853      	ldr	r3, [r2, #4]
 8001abe:	6881      	ldr	r1, [r0, #8]
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ac4:	6802      	ldr	r2, [r0, #0]
 8001ac6:	6893      	ldr	r3, [r2, #8]
 8001ac8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001acc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ace:	6802      	ldr	r2, [r0, #0]
 8001ad0:	6893      	ldr	r3, [r2, #8]
 8001ad2:	68c1      	ldr	r1, [r0, #12]
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ad8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001ada:	4b37      	ldr	r3, [pc, #220]	@ (8001bb8 <ADC_Init+0x130>)
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d057      	beq.n	8001b90 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ae0:	6802      	ldr	r2, [r0, #0]
 8001ae2:	6893      	ldr	r3, [r2, #8]
 8001ae4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001ae8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001aea:	6802      	ldr	r2, [r0, #0]
 8001aec:	6893      	ldr	r3, [r2, #8]
 8001aee:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8001af0:	430b      	orrs	r3, r1
 8001af2:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001af4:	6802      	ldr	r2, [r0, #0]
 8001af6:	6893      	ldr	r3, [r2, #8]
 8001af8:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001afc:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001afe:	6802      	ldr	r2, [r0, #0]
 8001b00:	6893      	ldr	r3, [r2, #8]
 8001b02:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b08:	6802      	ldr	r2, [r0, #0]
 8001b0a:	6893      	ldr	r3, [r2, #8]
 8001b0c:	f023 0302 	bic.w	r3, r3, #2
 8001b10:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b12:	6802      	ldr	r2, [r0, #0]
 8001b14:	6893      	ldr	r3, [r2, #8]
 8001b16:	7e01      	ldrb	r1, [r0, #24]
 8001b18:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001b1c:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b1e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d03f      	beq.n	8001ba6 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b26:	6802      	ldr	r2, [r0, #0]
 8001b28:	6853      	ldr	r3, [r2, #4]
 8001b2a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b2e:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b30:	6802      	ldr	r2, [r0, #0]
 8001b32:	6853      	ldr	r3, [r2, #4]
 8001b34:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001b38:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b3a:	6801      	ldr	r1, [r0, #0]
 8001b3c:	684b      	ldr	r3, [r1, #4]
 8001b3e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8001b40:	3a01      	subs	r2, #1
 8001b42:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001b46:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b48:	6802      	ldr	r2, [r0, #0]
 8001b4a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001b4c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001b50:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b52:	6801      	ldr	r1, [r0, #0]
 8001b54:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8001b56:	69c2      	ldr	r2, [r0, #28]
 8001b58:	3a01      	subs	r2, #1
 8001b5a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001b5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b60:	6802      	ldr	r2, [r0, #0]
 8001b62:	6893      	ldr	r3, [r2, #8]
 8001b64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001b68:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b6a:	6802      	ldr	r2, [r0, #0]
 8001b6c:	6893      	ldr	r3, [r2, #8]
 8001b6e:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8001b72:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001b76:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b78:	6802      	ldr	r2, [r0, #0]
 8001b7a:	6893      	ldr	r3, [r2, #8]
 8001b7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b80:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b82:	6802      	ldr	r2, [r0, #0]
 8001b84:	6893      	ldr	r3, [r2, #8]
 8001b86:	6941      	ldr	r1, [r0, #20]
 8001b88:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001b8c:	6093      	str	r3, [r2, #8]
}
 8001b8e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b90:	6802      	ldr	r2, [r0, #0]
 8001b92:	6893      	ldr	r3, [r2, #8]
 8001b94:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001b98:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b9a:	6802      	ldr	r2, [r0, #0]
 8001b9c:	6893      	ldr	r3, [r2, #8]
 8001b9e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001ba2:	6093      	str	r3, [r2, #8]
 8001ba4:	e7b0      	b.n	8001b08 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ba6:	6802      	ldr	r2, [r0, #0]
 8001ba8:	6853      	ldr	r3, [r2, #4]
 8001baa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001bae:	6053      	str	r3, [r2, #4]
 8001bb0:	e7ca      	b.n	8001b48 <ADC_Init+0xc0>
 8001bb2:	bf00      	nop
 8001bb4:	40012300 	.word	0x40012300
 8001bb8:	0f000001 	.word	0x0f000001

08001bbc <HAL_ADC_Init>:
  if (hadc == NULL)
 8001bbc:	b338      	cbz	r0, 8001c0e <HAL_ADC_Init+0x52>
{
 8001bbe:	b510      	push	{r4, lr}
 8001bc0:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bc2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001bc4:	b143      	cbz	r3, 8001bd8 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bc6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bc8:	f013 0f10 	tst.w	r3, #16
 8001bcc:	d00b      	beq.n	8001be6 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001bce:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001bd6:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001bd8:	f7fe fc4a 	bl	8000470 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001bdc:	2300      	movs	r3, #0
 8001bde:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001be0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8001be4:	e7ef      	b.n	8001bc6 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001be6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001be8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bec:	f023 0302 	bic.w	r3, r3, #2
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7ff ff46 	bl	8001a88 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001c00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c02:	f023 0303 	bic.w	r3, r3, #3
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6423      	str	r3, [r4, #64]	@ 0x40
 8001c0c:	e7e0      	b.n	8001bd0 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001c0e:	2001      	movs	r0, #1
}
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_ADC_ConfigChannel>:
{
 8001c14:	b430      	push	{r4, r5}
 8001c16:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001c18:	2200      	movs	r2, #0
 8001c1a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001c1c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001c20:	2a01      	cmp	r2, #1
 8001c22:	f000 80b6 	beq.w	8001d92 <HAL_ADC_ConfigChannel+0x17e>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c2e:	680a      	ldr	r2, [r1, #0]
 8001c30:	2a09      	cmp	r2, #9
 8001c32:	d940      	bls.n	8001cb6 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c34:	6804      	ldr	r4, [r0, #0]
 8001c36:	68e0      	ldr	r0, [r4, #12]
 8001c38:	b292      	uxth	r2, r2
 8001c3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001c3e:	3a1e      	subs	r2, #30
 8001c40:	f04f 0c07 	mov.w	ip, #7
 8001c44:	fa0c f202 	lsl.w	r2, ip, r2
 8001c48:	ea20 0202 	bic.w	r2, r0, r2
 8001c4c:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c4e:	681c      	ldr	r4, [r3, #0]
 8001c50:	68e0      	ldr	r0, [r4, #12]
 8001c52:	880a      	ldrh	r2, [r1, #0]
 8001c54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001c58:	3a1e      	subs	r2, #30
 8001c5a:	688d      	ldr	r5, [r1, #8]
 8001c5c:	fa05 f202 	lsl.w	r2, r5, r2
 8001c60:	4302      	orrs	r2, r0
 8001c62:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8001c64:	684a      	ldr	r2, [r1, #4]
 8001c66:	2a06      	cmp	r2, #6
 8001c68:	d83c      	bhi.n	8001ce4 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c6a:	681c      	ldr	r4, [r3, #0]
 8001c6c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001c6e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c72:	3a05      	subs	r2, #5
 8001c74:	f04f 0c1f 	mov.w	ip, #31
 8001c78:	fa0c f202 	lsl.w	r2, ip, r2
 8001c7c:	ea20 0202 	bic.w	r2, r0, r2
 8001c80:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c82:	681c      	ldr	r4, [r3, #0]
 8001c84:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001c86:	684a      	ldr	r2, [r1, #4]
 8001c88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c8c:	3a05      	subs	r2, #5
 8001c8e:	f8b1 c000 	ldrh.w	ip, [r1]
 8001c92:	fa0c f202 	lsl.w	r2, ip, r2
 8001c96:	4302      	orrs	r2, r0
 8001c98:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	4a3e      	ldr	r2, [pc, #248]	@ (8001d98 <HAL_ADC_ConfigChannel+0x184>)
 8001c9e:	4290      	cmp	r0, r2
 8001ca0:	d050      	beq.n	8001d44 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	4a3c      	ldr	r2, [pc, #240]	@ (8001d98 <HAL_ADC_ConfigChannel+0x184>)
 8001ca6:	4290      	cmp	r0, r2
 8001ca8:	d055      	beq.n	8001d56 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bc30      	pop	{r4, r5}
 8001cb4:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cb6:	6804      	ldr	r4, [r0, #0]
 8001cb8:	6920      	ldr	r0, [r4, #16]
 8001cba:	b292      	uxth	r2, r2
 8001cbc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001cc0:	f04f 0c07 	mov.w	ip, #7
 8001cc4:	fa0c f202 	lsl.w	r2, ip, r2
 8001cc8:	ea20 0202 	bic.w	r2, r0, r2
 8001ccc:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cce:	681c      	ldr	r4, [r3, #0]
 8001cd0:	6920      	ldr	r0, [r4, #16]
 8001cd2:	880a      	ldrh	r2, [r1, #0]
 8001cd4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001cd8:	688d      	ldr	r5, [r1, #8]
 8001cda:	fa05 f202 	lsl.w	r2, r5, r2
 8001cde:	4302      	orrs	r2, r0
 8001ce0:	6122      	str	r2, [r4, #16]
 8001ce2:	e7bf      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8001ce4:	2a0c      	cmp	r2, #12
 8001ce6:	d816      	bhi.n	8001d16 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ce8:	681d      	ldr	r5, [r3, #0]
 8001cea:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001cec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001cf0:	3a23      	subs	r2, #35	@ 0x23
 8001cf2:	241f      	movs	r4, #31
 8001cf4:	fa04 f202 	lsl.w	r2, r4, r2
 8001cf8:	ea20 0202 	bic.w	r2, r0, r2
 8001cfc:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cfe:	681d      	ldr	r5, [r3, #0]
 8001d00:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001d02:	684a      	ldr	r2, [r1, #4]
 8001d04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d08:	3a23      	subs	r2, #35	@ 0x23
 8001d0a:	880c      	ldrh	r4, [r1, #0]
 8001d0c:	fa04 f202 	lsl.w	r2, r4, r2
 8001d10:	4302      	orrs	r2, r0
 8001d12:	632a      	str	r2, [r5, #48]	@ 0x30
 8001d14:	e7c1      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d16:	681d      	ldr	r5, [r3, #0]
 8001d18:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001d1a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d1e:	3a41      	subs	r2, #65	@ 0x41
 8001d20:	241f      	movs	r4, #31
 8001d22:	fa04 f202 	lsl.w	r2, r4, r2
 8001d26:	ea20 0202 	bic.w	r2, r0, r2
 8001d2a:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d2c:	681d      	ldr	r5, [r3, #0]
 8001d2e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001d30:	684a      	ldr	r2, [r1, #4]
 8001d32:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d36:	3a41      	subs	r2, #65	@ 0x41
 8001d38:	880c      	ldrh	r4, [r1, #0]
 8001d3a:	fa04 f202 	lsl.w	r2, r4, r2
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8001d42:	e7aa      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d44:	680a      	ldr	r2, [r1, #0]
 8001d46:	2a12      	cmp	r2, #18
 8001d48:	d1ab      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d4a:	4814      	ldr	r0, [pc, #80]	@ (8001d9c <HAL_ADC_ConfigChannel+0x188>)
 8001d4c:	6842      	ldr	r2, [r0, #4]
 8001d4e:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001d52:	6042      	str	r2, [r0, #4]
 8001d54:	e7a5      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d56:	680a      	ldr	r2, [r1, #0]
 8001d58:	3a10      	subs	r2, #16
 8001d5a:	2a01      	cmp	r2, #1
 8001d5c:	d8a5      	bhi.n	8001caa <HAL_ADC_ConfigChannel+0x96>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d5e:	480f      	ldr	r0, [pc, #60]	@ (8001d9c <HAL_ADC_ConfigChannel+0x188>)
 8001d60:	6842      	ldr	r2, [r0, #4]
 8001d62:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001d66:	6042      	str	r2, [r0, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d68:	680a      	ldr	r2, [r1, #0]
 8001d6a:	2a10      	cmp	r2, #16
 8001d6c:	d19d      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001da0 <HAL_ADC_ConfigChannel+0x18c>)
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	490c      	ldr	r1, [pc, #48]	@ (8001da4 <HAL_ADC_ConfigChannel+0x190>)
 8001d74:	fba1 1202 	umull	r1, r2, r1, r2
 8001d78:	0c92      	lsrs	r2, r2, #18
 8001d7a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d7e:	0052      	lsls	r2, r2, #1
 8001d80:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001d82:	e002      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x176>
        counter--;
 8001d84:	9a01      	ldr	r2, [sp, #4]
 8001d86:	3a01      	subs	r2, #1
 8001d88:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001d8a:	9a01      	ldr	r2, [sp, #4]
 8001d8c:	2a00      	cmp	r2, #0
 8001d8e:	d1f9      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x170>
 8001d90:	e78b      	b.n	8001caa <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 8001d92:	2002      	movs	r0, #2
 8001d94:	e78c      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x9c>
 8001d96:	bf00      	nop
 8001d98:	40012000 	.word	0x40012000
 8001d9c:	40012300 	.word	0x40012300
 8001da0:	2000000c 	.word	0x2000000c
 8001da4:	431bde83 	.word	0x431bde83

08001da8 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001da8:	2800      	cmp	r0, #0
 8001daa:	db07      	blt.n	8001dbc <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dac:	f000 021f 	and.w	r2, r0, #31
 8001db0:	0940      	lsrs	r0, r0, #5
 8001db2:	2301      	movs	r3, #1
 8001db4:	4093      	lsls	r3, r2
 8001db6:	4a02      	ldr	r2, [pc, #8]	@ (8001dc0 <__NVIC_EnableIRQ+0x18>)
 8001db8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	db08      	blt.n	8001dda <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc8:	0109      	lsls	r1, r1, #4
 8001dca:	b2c9      	uxtb	r1, r1
 8001dcc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001dd0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001dd4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001dd8:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dda:	f000 000f 	and.w	r0, r0, #15
 8001dde:	0109      	lsls	r1, r1, #4
 8001de0:	b2c9      	uxtb	r1, r1
 8001de2:	4b01      	ldr	r3, [pc, #4]	@ (8001de8 <__NVIC_SetPriority+0x24>)
 8001de4:	5419      	strb	r1, [r3, r0]
  }
}
 8001de6:	4770      	bx	lr
 8001de8:	e000ed14 	.word	0xe000ed14

08001dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dee:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df2:	f1c0 0c07 	rsb	ip, r0, #7
 8001df6:	f1bc 0f04 	cmp.w	ip, #4
 8001dfa:	bf28      	it	cs
 8001dfc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e00:	1d03      	adds	r3, r0, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d90f      	bls.n	8001e26 <NVIC_EncodePriority+0x3a>
 8001e06:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 3eff 	mov.w	lr, #4294967295
 8001e0c:	fa0e f00c 	lsl.w	r0, lr, ip
 8001e10:	ea21 0100 	bic.w	r1, r1, r0
 8001e14:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e16:	fa0e fe03 	lsl.w	lr, lr, r3
 8001e1a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001e1e:	ea41 0002 	orr.w	r0, r1, r2
 8001e22:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e26:	2300      	movs	r3, #0
 8001e28:	e7ee      	b.n	8001e08 <NVIC_EncodePriority+0x1c>
	...

08001e2c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4a07      	ldr	r2, [pc, #28]	@ (8001e4c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e2e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e30:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e38:	0200      	lsls	r0, r0, #8
 8001e3a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001e40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001e48:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e50:	b510      	push	{r4, lr}
 8001e52:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <HAL_NVIC_SetPriority+0x1c>)
 8001e56:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e58:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001e5c:	f7ff ffc6 	bl	8001dec <NVIC_EncodePriority>
 8001e60:	4601      	mov	r1, r0
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff ffae 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001e68:	bd10      	pop	{r4, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e72:	f7ff ff99 	bl	8001da8 <__NVIC_EnableIRQ>
}
 8001e76:	bd08      	pop	{r3, pc}

08001e78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e78:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e7a:	6803      	ldr	r3, [r0, #0]
 8001e7c:	b2d9      	uxtb	r1, r3
 8001e7e:	3910      	subs	r1, #16
 8001e80:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <DMA_CalcBaseAndBitshift+0x34>)
 8001e82:	fba2 4201 	umull	r4, r2, r2, r1
 8001e86:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e88:	4c09      	ldr	r4, [pc, #36]	@ (8001eb0 <DMA_CalcBaseAndBitshift+0x38>)
 8001e8a:	5ca2      	ldrb	r2, [r4, r2]
 8001e8c:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e8e:	295f      	cmp	r1, #95	@ 0x5f
 8001e90:	d907      	bls.n	8001ea2 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e92:	f36f 0309 	bfc	r3, #0, #10
 8001e96:	3304      	adds	r3, #4
 8001e98:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001e9a:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8001e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ea0:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ea2:	f36f 0309 	bfc	r3, #0, #10
 8001ea6:	6583      	str	r3, [r0, #88]	@ 0x58
 8001ea8:	e7f7      	b.n	8001e9a <DMA_CalcBaseAndBitshift+0x22>
 8001eaa:	bf00      	nop
 8001eac:	aaaaaaab 	.word	0xaaaaaaab
 8001eb0:	080084dc 	.word	0x080084dc

08001eb4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001eb4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eb6:	6982      	ldr	r2, [r0, #24]
 8001eb8:	b992      	cbnz	r2, 8001ee0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d00a      	beq.n	8001ed4 <DMA_CheckFifoParam+0x20>
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d002      	beq.n	8001ec8 <DMA_CheckFifoParam+0x14>
 8001ec2:	b10b      	cbz	r3, 8001ec8 <DMA_CheckFifoParam+0x14>
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ec8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001eca:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001ece:	d128      	bne.n	8001f22 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ed4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001ed6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001eda:	d024      	beq.n	8001f26 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001edc:	2000      	movs	r0, #0
 8001ede:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ee0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001ee4:	d009      	beq.n	8001efa <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d925      	bls.n	8001f36 <DMA_CheckFifoParam+0x82>
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d125      	bne.n	8001f3a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eee:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001ef0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001ef4:	d123      	bne.n	8001f3e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	4770      	bx	lr
    switch (tmp)
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d803      	bhi.n	8001f06 <DMA_CheckFifoParam+0x52>
 8001efe:	e8df f003 	tbb	[pc, r3]
 8001f02:	0414      	.short	0x0414
 8001f04:	0a14      	.short	0x0a14
 8001f06:	2000      	movs	r0, #0
 8001f08:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f0a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001f0c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001f10:	d10d      	bne.n	8001f2e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001f12:	2000      	movs	r0, #0
 8001f14:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f16:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001f18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f1c:	d009      	beq.n	8001f32 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001f1e:	2000      	movs	r0, #0
 8001f20:	4770      	bx	lr
        status = HAL_ERROR;
 8001f22:	2001      	movs	r0, #1
 8001f24:	4770      	bx	lr
        status = HAL_ERROR;
 8001f26:	2001      	movs	r0, #1
 8001f28:	4770      	bx	lr
      status = HAL_ERROR;
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	4770      	bx	lr
        status = HAL_ERROR;
 8001f2e:	2001      	movs	r0, #1
 8001f30:	4770      	bx	lr
        status = HAL_ERROR;
 8001f32:	2001      	movs	r0, #1
 8001f34:	4770      	bx	lr
      status = HAL_ERROR;
 8001f36:	2001      	movs	r0, #1
 8001f38:	4770      	bx	lr
    switch (tmp)
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001f3e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_DMA_Init>:
{
 8001f44:	b570      	push	{r4, r5, r6, lr}
 8001f46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff fd84 	bl	8001a54 <HAL_GetTick>
  if(hdma == NULL)
 8001f4c:	2c00      	cmp	r4, #0
 8001f4e:	d05b      	beq.n	8002008 <HAL_DMA_Init+0xc4>
 8001f50:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f52:	2302      	movs	r3, #2
 8001f54:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001f5e:	6822      	ldr	r2, [r4, #0]
 8001f60:	6813      	ldr	r3, [r2, #0]
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	f012 0f01 	tst.w	r2, #1
 8001f70:	d00a      	beq.n	8001f88 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f72:	f7ff fd6f 	bl	8001a54 <HAL_GetTick>
 8001f76:	1b43      	subs	r3, r0, r5
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	d9f5      	bls.n	8001f68 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f80:	2003      	movs	r0, #3
 8001f82:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001f86:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001f88:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f8a:	4920      	ldr	r1, [pc, #128]	@ (800200c <HAL_DMA_Init+0xc8>)
 8001f8c:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8e:	6862      	ldr	r2, [r4, #4]
 8001f90:	68a0      	ldr	r0, [r4, #8]
 8001f92:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f94:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f96:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f98:	6920      	ldr	r0, [r4, #16]
 8001f9a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9c:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa0:	69a0      	ldr	r0, [r4, #24]
 8001fa2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa4:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa8:	6a20      	ldr	r0, [r4, #32]
 8001faa:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fac:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001fb0:	2904      	cmp	r1, #4
 8001fb2:	d01e      	beq.n	8001ff2 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001fb4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001fb6:	6826      	ldr	r6, [r4, #0]
 8001fb8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fba:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001fbe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001fc0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d107      	bne.n	8001fd6 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001fc6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001fc8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001fcc:	b11b      	cbz	r3, 8001fd6 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f7ff ff70 	bl	8001eb4 <DMA_CheckFifoParam>
 8001fd4:	b990      	cbnz	r0, 8001ffc <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001fd6:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff ff4d 	bl	8001e78 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fde:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001fe0:	233f      	movs	r3, #63	@ 0x3f
 8001fe2:	4093      	lsls	r3, r2
 8001fe4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001fea:	2301      	movs	r3, #1
 8001fec:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001ff0:	e7c9      	b.n	8001f86 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ff2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001ff4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001ff6:	4301      	orrs	r1, r0
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	e7db      	b.n	8001fb4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ffc:	2340      	movs	r3, #64	@ 0x40
 8001ffe:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002000:	2001      	movs	r0, #1
 8002002:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8002006:	e7be      	b.n	8001f86 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002008:	2001      	movs	r0, #1
 800200a:	e7bc      	b.n	8001f86 <HAL_DMA_Init+0x42>
 800200c:	f010803f 	.word	0xf010803f

08002010 <HAL_DMA_IRQHandler>:
{
 8002010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002012:	b083      	sub	sp, #12
 8002014:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800201a:	4b72      	ldr	r3, [pc, #456]	@ (80021e4 <HAL_DMA_IRQHandler+0x1d4>)
 800201c:	681d      	ldr	r5, [r3, #0]
 800201e:	4b72      	ldr	r3, [pc, #456]	@ (80021e8 <HAL_DMA_IRQHandler+0x1d8>)
 8002020:	fba3 3505 	umull	r3, r5, r3, r5
 8002024:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002026:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8002028:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800202a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800202c:	2308      	movs	r3, #8
 800202e:	4093      	lsls	r3, r2
 8002030:	4233      	tst	r3, r6
 8002032:	d010      	beq.n	8002056 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002034:	6803      	ldr	r3, [r0, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	f012 0f04 	tst.w	r2, #4
 800203c:	d00b      	beq.n	8002056 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	f022 0204 	bic.w	r2, r2, #4
 8002044:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002046:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002048:	2308      	movs	r3, #8
 800204a:	4093      	lsls	r3, r2
 800204c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800204e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002056:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002058:	2301      	movs	r3, #1
 800205a:	4093      	lsls	r3, r2
 800205c:	4233      	tst	r3, r6
 800205e:	d009      	beq.n	8002074 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002060:	6822      	ldr	r2, [r4, #0]
 8002062:	6952      	ldr	r2, [r2, #20]
 8002064:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002068:	d004      	beq.n	8002074 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800206a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800206c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800206e:	f043 0302 	orr.w	r3, r3, #2
 8002072:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002074:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002076:	2304      	movs	r3, #4
 8002078:	4093      	lsls	r3, r2
 800207a:	4233      	tst	r3, r6
 800207c:	d009      	beq.n	8002092 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800207e:	6822      	ldr	r2, [r4, #0]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	f012 0f02 	tst.w	r2, #2
 8002086:	d004      	beq.n	8002092 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002088:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800208a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002092:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002094:	2310      	movs	r3, #16
 8002096:	4093      	lsls	r3, r2
 8002098:	4233      	tst	r3, r6
 800209a:	d024      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800209c:	6822      	ldr	r2, [r4, #0]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	f012 0f08 	tst.w	r2, #8
 80020a4:	d01f      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020a6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80020b0:	d00d      	beq.n	80020ce <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80020b8:	d104      	bne.n	80020c4 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80020ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020bc:	b19b      	cbz	r3, 80020e6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80020be:	4620      	mov	r0, r4
 80020c0:	4798      	blx	r3
 80020c2:	e010      	b.n	80020e6 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020c4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80020c6:	b173      	cbz	r3, 80020e6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80020c8:	4620      	mov	r0, r4
 80020ca:	4798      	blx	r3
 80020cc:	e00b      	b.n	80020e6 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80020d4:	d103      	bne.n	80020de <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f022 0208 	bic.w	r2, r2, #8
 80020dc:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80020de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020e0:	b10b      	cbz	r3, 80020e6 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80020e2:	4620      	mov	r0, r4
 80020e4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020e6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80020e8:	2320      	movs	r3, #32
 80020ea:	4093      	lsls	r3, r2
 80020ec:	4233      	tst	r3, r6
 80020ee:	d054      	beq.n	800219a <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020f0:	6822      	ldr	r2, [r4, #0]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	f012 0f10 	tst.w	r2, #16
 80020f8:	d04f      	beq.n	800219a <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020fa:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020fc:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8002100:	2b05      	cmp	r3, #5
 8002102:	d00e      	beq.n	8002122 <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800210c:	d033      	beq.n	8002176 <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002114:	d12a      	bne.n	800216c <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 8002116:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002118:	2b00      	cmp	r3, #0
 800211a:	d03e      	beq.n	800219a <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 800211c:	4620      	mov	r0, r4
 800211e:	4798      	blx	r3
 8002120:	e03b      	b.n	800219a <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002122:	6822      	ldr	r2, [r4, #0]
 8002124:	6813      	ldr	r3, [r2, #0]
 8002126:	f023 0316 	bic.w	r3, r3, #22
 800212a:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800212c:	6822      	ldr	r2, [r4, #0]
 800212e:	6953      	ldr	r3, [r2, #20]
 8002130:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002134:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002136:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002138:	b1a3      	cbz	r3, 8002164 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800213a:	6822      	ldr	r2, [r4, #0]
 800213c:	6813      	ldr	r3, [r2, #0]
 800213e:	f023 0308 	bic.w	r3, r3, #8
 8002142:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002144:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002146:	233f      	movs	r3, #63	@ 0x3f
 8002148:	4093      	lsls	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800214c:	2301      	movs	r3, #1
 800214e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002152:	2300      	movs	r3, #0
 8002154:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8002158:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800215a:	2b00      	cmp	r3, #0
 800215c:	d03f      	beq.n	80021de <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 800215e:	4620      	mov	r0, r4
 8002160:	4798      	blx	r3
        return;
 8002162:	e03c      	b.n	80021de <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002164:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1e7      	bne.n	800213a <HAL_DMA_IRQHandler+0x12a>
 800216a:	e7eb      	b.n	8002144 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 800216c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800216e:	b1a3      	cbz	r3, 800219a <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8002170:	4620      	mov	r0, r4
 8002172:	4798      	blx	r3
 8002174:	e011      	b.n	800219a <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800217c:	d109      	bne.n	8002192 <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	f022 0210 	bic.w	r2, r2, #16
 8002184:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002186:	2301      	movs	r3, #1
 8002188:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800218c:	2300      	movs	r3, #0
 800218e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8002192:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002194:	b10b      	cbz	r3, 800219a <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 8002196:	4620      	mov	r0, r4
 8002198:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800219a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800219c:	b1fb      	cbz	r3, 80021de <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800219e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80021a0:	f013 0f01 	tst.w	r3, #1
 80021a4:	d017      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 80021a6:	2305      	movs	r3, #5
 80021a8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80021ac:	6822      	ldr	r2, [r4, #0]
 80021ae:	6813      	ldr	r3, [r2, #0]
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80021b6:	9b01      	ldr	r3, [sp, #4]
 80021b8:	3301      	adds	r3, #1
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	42ab      	cmp	r3, r5
 80021be:	d804      	bhi.n	80021ca <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f013 0f01 	tst.w	r3, #1
 80021c8:	d1f5      	bne.n	80021b6 <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80021d0:	2300      	movs	r3, #0
 80021d2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80021d6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80021d8:	b10b      	cbz	r3, 80021de <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 80021da:	4620      	mov	r0, r4
 80021dc:	4798      	blx	r3
}
 80021de:	b003      	add	sp, #12
 80021e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000000c 	.word	0x2000000c
 80021e8:	1b4e81b5 	.word	0x1b4e81b5

080021ec <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ec:	2300      	movs	r3, #0
 80021ee:	2b0f      	cmp	r3, #15
 80021f0:	f200 80d7 	bhi.w	80023a2 <HAL_GPIO_Init+0x1b6>
{
 80021f4:	b570      	push	{r4, r5, r6, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	e065      	b.n	80022c6 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021fa:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021fc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002200:	2403      	movs	r4, #3
 8002202:	fa04 f40e 	lsl.w	r4, r4, lr
 8002206:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800220a:	68cc      	ldr	r4, [r1, #12]
 800220c:	fa04 f40e 	lsl.w	r4, r4, lr
 8002210:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002212:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002214:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002216:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800221a:	684a      	ldr	r2, [r1, #4]
 800221c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002220:	409a      	lsls	r2, r3
 8002222:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002224:	6042      	str	r2, [r0, #4]
 8002226:	e05c      	b.n	80022e2 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002228:	08dc      	lsrs	r4, r3, #3
 800222a:	3408      	adds	r4, #8
 800222c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002230:	f003 0507 	and.w	r5, r3, #7
 8002234:	00ad      	lsls	r5, r5, #2
 8002236:	f04f 0e0f 	mov.w	lr, #15
 800223a:	fa0e fe05 	lsl.w	lr, lr, r5
 800223e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002242:	690a      	ldr	r2, [r1, #16]
 8002244:	40aa      	lsls	r2, r5
 8002246:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800224a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800224e:	e05c      	b.n	800230a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002250:	2204      	movs	r2, #4
 8002252:	e000      	b.n	8002256 <HAL_GPIO_Init+0x6a>
 8002254:	2200      	movs	r2, #0
 8002256:	fa02 f20e 	lsl.w	r2, r2, lr
 800225a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800225c:	3402      	adds	r4, #2
 800225e:	4d51      	ldr	r5, [pc, #324]	@ (80023a4 <HAL_GPIO_Init+0x1b8>)
 8002260:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002264:	4a50      	ldr	r2, [pc, #320]	@ (80023a8 <HAL_GPIO_Init+0x1bc>)
 8002266:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002268:	ea6f 020c 	mvn.w	r2, ip
 800226c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002270:	684e      	ldr	r6, [r1, #4]
 8002272:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8002276:	d001      	beq.n	800227c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8002278:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 800227c:	4c4a      	ldr	r4, [pc, #296]	@ (80023a8 <HAL_GPIO_Init+0x1bc>)
 800227e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8002280:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002282:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002286:	684e      	ldr	r6, [r1, #4]
 8002288:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 800228c:	d001      	beq.n	8002292 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800228e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8002292:	4c45      	ldr	r4, [pc, #276]	@ (80023a8 <HAL_GPIO_Init+0x1bc>)
 8002294:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8002296:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002298:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229c:	684e      	ldr	r6, [r1, #4]
 800229e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80022a2:	d001      	beq.n	80022a8 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80022a4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80022a8:	4c3f      	ldr	r4, [pc, #252]	@ (80023a8 <HAL_GPIO_Init+0x1bc>)
 80022aa:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ac:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80022ae:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022b0:	684d      	ldr	r5, [r1, #4]
 80022b2:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80022b6:	d001      	beq.n	80022bc <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80022b8:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80022bc:	4c3a      	ldr	r4, [pc, #232]	@ (80023a8 <HAL_GPIO_Init+0x1bc>)
 80022be:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c0:	3301      	adds	r3, #1
 80022c2:	2b0f      	cmp	r3, #15
 80022c4:	d86b      	bhi.n	800239e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80022c6:	2201      	movs	r2, #1
 80022c8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ca:	680c      	ldr	r4, [r1, #0]
 80022cc:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80022d0:	ea32 0404 	bics.w	r4, r2, r4
 80022d4:	d1f4      	bne.n	80022c0 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	684c      	ldr	r4, [r1, #4]
 80022d8:	f004 0403 	and.w	r4, r4, #3
 80022dc:	3c01      	subs	r4, #1
 80022de:	2c01      	cmp	r4, #1
 80022e0:	d98b      	bls.n	80021fa <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e2:	684a      	ldr	r2, [r1, #4]
 80022e4:	f002 0203 	and.w	r2, r2, #3
 80022e8:	2a03      	cmp	r2, #3
 80022ea:	d009      	beq.n	8002300 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80022ec:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ee:	005d      	lsls	r5, r3, #1
 80022f0:	2203      	movs	r2, #3
 80022f2:	40aa      	lsls	r2, r5
 80022f4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f8:	688a      	ldr	r2, [r1, #8]
 80022fa:	40aa      	lsls	r2, r5
 80022fc:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80022fe:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002300:	684a      	ldr	r2, [r1, #4]
 8002302:	f002 0203 	and.w	r2, r2, #3
 8002306:	2a02      	cmp	r2, #2
 8002308:	d08e      	beq.n	8002228 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 800230a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800230c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002310:	2203      	movs	r2, #3
 8002312:	fa02 f20e 	lsl.w	r2, r2, lr
 8002316:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800231a:	684a      	ldr	r2, [r1, #4]
 800231c:	f002 0203 	and.w	r2, r2, #3
 8002320:	fa02 f20e 	lsl.w	r2, r2, lr
 8002324:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002326:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002328:	684a      	ldr	r2, [r1, #4]
 800232a:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 800232e:	d0c7      	beq.n	80022c0 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002330:	2200      	movs	r2, #0
 8002332:	9201      	str	r2, [sp, #4]
 8002334:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <HAL_GPIO_Init+0x1c0>)
 8002336:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8002338:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800233c:	6454      	str	r4, [r2, #68]	@ 0x44
 800233e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002340:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002344:	9201      	str	r2, [sp, #4]
 8002346:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002348:	089c      	lsrs	r4, r3, #2
 800234a:	1ca5      	adds	r5, r4, #2
 800234c:	4a15      	ldr	r2, [pc, #84]	@ (80023a4 <HAL_GPIO_Init+0x1b8>)
 800234e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002352:	f003 0e03 	and.w	lr, r3, #3
 8002356:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f20e 	lsl.w	r2, r2, lr
 8002360:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002364:	4a12      	ldr	r2, [pc, #72]	@ (80023b0 <HAL_GPIO_Init+0x1c4>)
 8002366:	4290      	cmp	r0, r2
 8002368:	f43f af74 	beq.w	8002254 <HAL_GPIO_Init+0x68>
 800236c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002370:	4290      	cmp	r0, r2
 8002372:	d00e      	beq.n	8002392 <HAL_GPIO_Init+0x1a6>
 8002374:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002378:	4290      	cmp	r0, r2
 800237a:	d00c      	beq.n	8002396 <HAL_GPIO_Init+0x1aa>
 800237c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002380:	4290      	cmp	r0, r2
 8002382:	d00a      	beq.n	800239a <HAL_GPIO_Init+0x1ae>
 8002384:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002388:	4290      	cmp	r0, r2
 800238a:	f43f af61 	beq.w	8002250 <HAL_GPIO_Init+0x64>
 800238e:	2207      	movs	r2, #7
 8002390:	e761      	b.n	8002256 <HAL_GPIO_Init+0x6a>
 8002392:	2201      	movs	r2, #1
 8002394:	e75f      	b.n	8002256 <HAL_GPIO_Init+0x6a>
 8002396:	2202      	movs	r2, #2
 8002398:	e75d      	b.n	8002256 <HAL_GPIO_Init+0x6a>
 800239a:	2203      	movs	r2, #3
 800239c:	e75b      	b.n	8002256 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800239e:	b002      	add	sp, #8
 80023a0:	bd70      	pop	{r4, r5, r6, pc}
 80023a2:	4770      	bx	lr
 80023a4:	40013800 	.word	0x40013800
 80023a8:	40013c00 	.word	0x40013c00
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40020000 	.word	0x40020000

080023b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b4:	b10a      	cbz	r2, 80023ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b6:	6181      	str	r1, [r0, #24]
 80023b8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ba:	0409      	lsls	r1, r1, #16
 80023bc:	6181      	str	r1, [r0, #24]
  }
}
 80023be:	4770      	bx	lr

080023c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c0:	b500      	push	{lr}
 80023c2:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c4:	2200      	movs	r2, #0
 80023c6:	9200      	str	r2, [sp, #0]
 80023c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002400 <HAL_MspInit+0x40>)
 80023ca:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80023cc:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80023d0:	6459      	str	r1, [r3, #68]	@ 0x44
 80023d2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80023d4:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80023d8:	9100      	str	r1, [sp, #0]
 80023da:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023dc:	9201      	str	r2, [sp, #4]
 80023de:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80023e0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80023e4:	6419      	str	r1, [r3, #64]	@ 0x40
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023f0:	210f      	movs	r1, #15
 80023f2:	f06f 0001 	mvn.w	r0, #1
 80023f6:	f7ff fd2b 	bl	8001e50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fa:	b003      	add	sp, #12
 80023fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002400:	40023800 	.word	0x40023800

08002404 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002408:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800240a:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800240e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8002412:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002416:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	429a      	cmp	r2, r3
 800241c:	d854      	bhi.n	80024c8 <PCD_WriteEmptyTxFifo+0xc4>
 800241e:	4607      	mov	r7, r0
 8002420:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8002422:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8002424:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8002428:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800242c:	69d2      	ldr	r2, [r2, #28]
 800242e:	429a      	cmp	r2, r3
 8002430:	d300      	bcc.n	8002434 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8002432:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8002434:	f102 0903 	add.w	r9, r2, #3
 8002438:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800243c:	e015      	b.n	800246a <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 800243e:	f106 0903 	add.w	r9, r6, #3
 8002442:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 8002446:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002448:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 800244c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8002450:	6a29      	ldr	r1, [r5, #32]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	b2b3      	uxth	r3, r6
 8002456:	b2e2      	uxtb	r2, r4
 8002458:	4640      	mov	r0, r8
 800245a:	f002 fa10 	bl	800487e <USB_WritePacket>

    ep->xfer_buff  += len;
 800245e:	6a2b      	ldr	r3, [r5, #32]
 8002460:	4433      	add	r3, r6
 8002462:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8002464:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002466:	4433      	add	r3, r6
 8002468:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800246a:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 800246e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002476:	454b      	cmp	r3, r9
 8002478:	d312      	bcc.n	80024a0 <PCD_WriteEmptyTxFifo+0x9c>
 800247a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800247e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8002482:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002486:	429a      	cmp	r2, r3
 8002488:	d20a      	bcs.n	80024a0 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800248a:	b14b      	cbz	r3, 80024a0 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 800248c:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 800248e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8002492:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8002496:	69d6      	ldr	r6, [r2, #28]
 8002498:	429e      	cmp	r6, r3
 800249a:	d3d0      	bcc.n	800243e <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 800249c:	461e      	mov	r6, r3
 800249e:	e7ce      	b.n	800243e <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024a0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80024a4:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80024a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d80f      	bhi.n	80024d0 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024b0:	f004 040f 	and.w	r4, r4, #15
 80024b4:	2201      	movs	r2, #1
 80024b6:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024b8:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 80024bc:	ea23 0302 	bic.w	r3, r3, r2
 80024c0:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 80024c4:	2000      	movs	r0, #0
 80024c6:	e000      	b.n	80024ca <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 80024c8:	2001      	movs	r0, #1
}
 80024ca:	b003      	add	sp, #12
 80024cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 80024d0:	2000      	movs	r0, #0
 80024d2:	e7fa      	b.n	80024ca <PCD_WriteEmptyTxFifo+0xc6>

080024d4 <HAL_PCD_Init>:
{
 80024d4:	b530      	push	{r4, r5, lr}
 80024d6:	b083      	sub	sp, #12
  if (hpcd == NULL)
 80024d8:	2800      	cmp	r0, #0
 80024da:	d07a      	beq.n	80025d2 <HAL_PCD_Init+0xfe>
 80024dc:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 80024de:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024e0:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 80024e4:	b1c3      	cbz	r3, 8002518 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80024e6:	2303      	movs	r3, #3
 80024e8:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 80024ec:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 80024f0:	d017      	beq.n	8002522 <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 80024f2:	6820      	ldr	r0, [r4, #0]
 80024f4:	f001 ff74 	bl	80043e0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024f8:	7c23      	ldrb	r3, [r4, #16]
 80024fa:	f88d 3000 	strb.w	r3, [sp]
 80024fe:	1d23      	adds	r3, r4, #4
 8002500:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002502:	6820      	ldr	r0, [r4, #0]
 8002504:	f001 feab 	bl	800425e <USB_CoreInit>
 8002508:	b170      	cbz	r0, 8002528 <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800250a:	2302      	movs	r3, #2
 800250c:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8002510:	2501      	movs	r5, #1
}
 8002512:	4628      	mov	r0, r5
 8002514:	b003      	add	sp, #12
 8002516:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002518:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 800251c:	f004 f88e 	bl	800663c <HAL_PCD_MspInit>
 8002520:	e7e1      	b.n	80024e6 <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	71a3      	strb	r3, [r4, #6]
 8002526:	e7e4      	b.n	80024f2 <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002528:	2100      	movs	r1, #0
 800252a:	6820      	ldr	r0, [r4, #0]
 800252c:	f002 fbbd 	bl	8004caa <USB_SetCurrentMode>
 8002530:	4602      	mov	r2, r0
 8002532:	b9b8      	cbnz	r0, 8002564 <HAL_PCD_Init+0x90>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002534:	4603      	mov	r3, r0
 8002536:	7920      	ldrb	r0, [r4, #4]
 8002538:	4298      	cmp	r0, r3
 800253a:	d918      	bls.n	800256e <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 800253c:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8002540:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002544:	2001      	movs	r0, #1
 8002546:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8002548:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800254a:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800254c:	2000      	movs	r0, #0
 800254e:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002550:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002552:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002554:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8002558:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800255c:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800255e:	3301      	adds	r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	e7e8      	b.n	8002536 <HAL_PCD_Init+0x62>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002564:	2302      	movs	r3, #2
 8002566:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800256a:	2501      	movs	r5, #1
 800256c:	e7d1      	b.n	8002512 <HAL_PCD_Init+0x3e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256e:	4290      	cmp	r0, r2
 8002570:	d917      	bls.n	80025a2 <HAL_PCD_Init+0xce>
    hpcd->OUT_ep[i].is_in = 0U;
 8002572:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8002576:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800257a:	2100      	movs	r1, #0
 800257c:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8002580:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002584:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002588:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800258c:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002590:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8002594:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002598:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259c:	3201      	adds	r2, #1
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	e7e5      	b.n	800256e <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025a2:	7c23      	ldrb	r3, [r4, #16]
 80025a4:	f88d 3000 	strb.w	r3, [sp]
 80025a8:	1d23      	adds	r3, r4, #4
 80025aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ac:	6820      	ldr	r0, [r4, #0]
 80025ae:	f001 ff6d 	bl	800448c <USB_DevInit>
 80025b2:	4605      	mov	r5, r0
 80025b4:	b120      	cbz	r0, 80025c0 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025b6:	2302      	movs	r3, #2
 80025b8:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80025bc:	2501      	movs	r5, #1
 80025be:	e7a8      	b.n	8002512 <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 80025ca:	6820      	ldr	r0, [r4, #0]
 80025cc:	f002 fb2c 	bl	8004c28 <USB_DevDisconnect>
  return HAL_OK;
 80025d0:	e79f      	b.n	8002512 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 80025d2:	2501      	movs	r5, #1
 80025d4:	e79d      	b.n	8002512 <HAL_PCD_Init+0x3e>

080025d6 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 80025d8:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 80025dc:	2a01      	cmp	r2, #1
 80025de:	d01a      	beq.n	8002616 <HAL_PCD_Start+0x40>
{
 80025e0:	b510      	push	{r4, lr}
 80025e2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80025e4:	2201      	movs	r2, #1
 80025e6:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80025f0:	d002      	beq.n	80025f8 <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 80025f2:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80025f4:	2a01      	cmp	r2, #1
 80025f6:	d009      	beq.n	800260c <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 80025f8:	6820      	ldr	r0, [r4, #0]
 80025fa:	f001 feeb 	bl	80043d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025fe:	6820      	ldr	r0, [r4, #0]
 8002600:	f002 fb04 	bl	8004c0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002604:	2000      	movs	r0, #0
 8002606:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800260a:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800260c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800260e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002612:	639a      	str	r2, [r3, #56]	@ 0x38
 8002614:	e7f0      	b.n	80025f8 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 8002616:	2002      	movs	r0, #2
}
 8002618:	4770      	bx	lr
	...

0800261c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	4604      	mov	r4, r0
 8002620:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002622:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002624:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002626:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800262a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800262e:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002630:	79a1      	ldrb	r1, [r4, #6]
 8002632:	2901      	cmp	r1, #1
 8002634:	d011      	beq.n	800265a <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002636:	4938      	ldr	r1, [pc, #224]	@ (8002718 <PCD_EP_OutXfrComplete_int+0xfc>)
 8002638:	428e      	cmp	r6, r1
 800263a:	d056      	beq.n	80026ea <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800263c:	b93d      	cbnz	r5, 800264e <PCD_EP_OutXfrComplete_int+0x32>
 800263e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8002642:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002646:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800264a:	2b00      	cmp	r3, #0
 800264c:	d05e      	beq.n	800270c <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800264e:	b2e9      	uxtb	r1, r5
 8002650:	4620      	mov	r0, r4
 8002652:	f004 f83f 	bl	80066d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8002656:	2000      	movs	r0, #0
 8002658:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800265a:	f012 0f08 	tst.w	r2, #8
 800265e:	d009      	beq.n	8002674 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002660:	492e      	ldr	r1, [pc, #184]	@ (800271c <PCD_EP_OutXfrComplete_int+0x100>)
 8002662:	428e      	cmp	r6, r1
 8002664:	d9f7      	bls.n	8002656 <PCD_EP_OutXfrComplete_int+0x3a>
 8002666:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800266a:	d0f4      	beq.n	8002656 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800266c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	e7f0      	b.n	8002656 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002674:	f012 0f20 	tst.w	r2, #32
 8002678:	d002      	beq.n	8002680 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800267a:	2220      	movs	r2, #32
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	e7ea      	b.n	8002656 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002680:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8002684:	d1e7      	bne.n	8002656 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002686:	4925      	ldr	r1, [pc, #148]	@ (800271c <PCD_EP_OutXfrComplete_int+0x100>)
 8002688:	428e      	cmp	r6, r1
 800268a:	d906      	bls.n	800269a <PCD_EP_OutXfrComplete_int+0x7e>
 800268c:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8002690:	d003      	beq.n	800269a <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002692:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	e7dd      	b.n	8002656 <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800269a:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800269e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80026a2:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ac:	1acb      	subs	r3, r1, r3
 80026ae:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 80026b2:	b97d      	cbnz	r5, 80026d4 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 80026b4:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80026b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80026bc:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 80026c0:	b16a      	cbz	r2, 80026de <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 80026c2:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80026c6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80026ca:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 80026ce:	4419      	add	r1, r3
 80026d0:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026d4:	b2e9      	uxtb	r1, r5
 80026d6:	4620      	mov	r0, r4
 80026d8:	f003 fffc 	bl	80066d4 <HAL_PCD_DataOutStageCallback>
 80026dc:	e7bb      	b.n	8002656 <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026de:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80026e2:	2101      	movs	r1, #1
 80026e4:	f002 fb20 	bl	8004d28 <USB_EP0_OutStart>
 80026e8:	e7f4      	b.n	80026d4 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026ea:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80026ee:	d003      	beq.n	80026f8 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026f0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	e7ae      	b.n	8002656 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026f8:	f012 0f20 	tst.w	r2, #32
 80026fc:	d001      	beq.n	8002702 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026fe:	2220      	movs	r2, #32
 8002700:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002702:	b2e9      	uxtb	r1, r5
 8002704:	4620      	mov	r0, r4
 8002706:	f003 ffe5 	bl	80066d4 <HAL_PCD_DataOutStageCallback>
 800270a:	e7a4      	b.n	8002656 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800270c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002710:	2100      	movs	r1, #0
 8002712:	f002 fb09 	bl	8004d28 <USB_EP0_OutStart>
 8002716:	e79a      	b.n	800264e <PCD_EP_OutXfrComplete_int+0x32>
 8002718:	4f54310a 	.word	0x4f54310a
 800271c:	4f54300a 	.word	0x4f54300a

08002720 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002724:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002726:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002728:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800272c:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002730:	4a0e      	ldr	r2, [pc, #56]	@ (800276c <PCD_EP_OutSetupPacket_int+0x4c>)
 8002732:	4295      	cmp	r5, r2
 8002734:	d907      	bls.n	8002746 <PCD_EP_OutSetupPacket_int+0x26>
 8002736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800273a:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 800273e:	d002      	beq.n	8002746 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002740:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002744:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002746:	4620      	mov	r0, r4
 8002748:	f003 ffbc 	bl	80066c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800274c:	4b07      	ldr	r3, [pc, #28]	@ (800276c <PCD_EP_OutSetupPacket_int+0x4c>)
 800274e:	429d      	cmp	r5, r3
 8002750:	d902      	bls.n	8002758 <PCD_EP_OutSetupPacket_int+0x38>
 8002752:	79a3      	ldrb	r3, [r4, #6]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d001      	beq.n	800275c <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8002758:	2000      	movs	r0, #0
 800275a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800275c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002760:	2101      	movs	r1, #1
 8002762:	6820      	ldr	r0, [r4, #0]
 8002764:	f002 fae0 	bl	8004d28 <USB_EP0_OutStart>
 8002768:	e7f6      	b.n	8002758 <PCD_EP_OutSetupPacket_int+0x38>
 800276a:	bf00      	nop
 800276c:	4f54300a 	.word	0x4f54300a

08002770 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002770:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8002774:	2b01      	cmp	r3, #1
 8002776:	d00c      	beq.n	8002792 <HAL_PCD_SetAddress+0x22>
{
 8002778:	b510      	push	{r4, lr}
 800277a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800277c:	2301      	movs	r3, #1
 800277e:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002782:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002784:	6800      	ldr	r0, [r0, #0]
 8002786:	f002 fa31 	bl	8004bec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800278a:	2000      	movs	r0, #0
 800278c:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8002790:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002792:	2002      	movs	r0, #2
}
 8002794:	4770      	bx	lr

08002796 <HAL_PCD_EP_Open>:
{
 8002796:	b538      	push	{r3, r4, r5, lr}
 8002798:	4605      	mov	r5, r0
 800279a:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800279c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80027a0:	d12b      	bne.n	80027fa <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a2:	f001 0e0f 	and.w	lr, r1, #15
 80027a6:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 80027aa:	00a4      	lsls	r4, r4, #2
 80027ac:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 80027b0:	4404      	add	r4, r0
 80027b2:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 80027b4:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80027b8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80027bc:	2000      	movs	r0, #0
 80027be:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80027c2:	f00c 0c0f 	and.w	ip, ip, #15
 80027c6:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80027ca:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80027ce:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80027d0:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 80027d2:	784a      	ldrb	r2, [r1, #1]
 80027d4:	b10a      	cbz	r2, 80027da <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 80027d6:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d01c      	beq.n	8002818 <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 80027de:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d01b      	beq.n	800281e <HAL_PCD_EP_Open+0x88>
 80027e6:	2301      	movs	r3, #1
 80027e8:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027ec:	6828      	ldr	r0, [r5, #0]
 80027ee:	f001 ff2a 	bl	8004646 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027f2:	2000      	movs	r0, #0
 80027f4:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 80027f8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fa:	f001 000f 	and.w	r0, r1, #15
 80027fe:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8002802:	0089      	lsls	r1, r1, #2
 8002804:	3110      	adds	r1, #16
 8002806:	4429      	add	r1, r5
 8002808:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800280a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800280e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8002812:	2401      	movs	r4, #1
 8002814:	7544      	strb	r4, [r0, #21]
 8002816:	e7d4      	b.n	80027c2 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	714b      	strb	r3, [r1, #5]
 800281c:	e7df      	b.n	80027de <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 800281e:	2002      	movs	r0, #2
 8002820:	e7ea      	b.n	80027f8 <HAL_PCD_EP_Open+0x62>

08002822 <HAL_PCD_EP_Close>:
{
 8002822:	b510      	push	{r4, lr}
 8002824:	4604      	mov	r4, r0
 8002826:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002828:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800282c:	d120      	bne.n	8002870 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800282e:	f001 000f 	and.w	r0, r1, #15
 8002832:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800283c:	4423      	add	r3, r4
 800283e:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8002840:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8002844:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002848:	2300      	movs	r3, #0
 800284a:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 800284e:	f002 020f 	and.w	r2, r2, #15
 8002852:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002854:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002858:	2b01      	cmp	r3, #1
 800285a:	d018      	beq.n	800288e <HAL_PCD_EP_Close+0x6c>
 800285c:	2301      	movs	r3, #1
 800285e:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002862:	6820      	ldr	r0, [r4, #0]
 8002864:	f001 ff3c 	bl	80046e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002868:	2000      	movs	r0, #0
 800286a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800286e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002870:	f001 000f 	and.w	r0, r1, #15
 8002874:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	3310      	adds	r3, #16
 800287c:	4423      	add	r3, r4
 800287e:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8002880:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8002884:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002888:	2301      	movs	r3, #1
 800288a:	7543      	strb	r3, [r0, #21]
 800288c:	e7df      	b.n	800284e <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 800288e:	2002      	movs	r0, #2
 8002890:	e7ed      	b.n	800286e <HAL_PCD_EP_Close+0x4c>

08002892 <HAL_PCD_EP_Receive>:
{
 8002892:	b510      	push	{r4, lr}
 8002894:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002896:	f001 0c0f 	and.w	ip, r1, #15
 800289a:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 800289e:	0089      	lsls	r1, r1, #2
 80028a0:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80028a4:	4401      	add	r1, r0
 80028a6:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80028a8:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80028ac:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80028b0:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 80028b4:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 80028be:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80028c2:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 80028c6:	7982      	ldrb	r2, [r0, #6]
 80028c8:	2a01      	cmp	r2, #1
 80028ca:	d004      	beq.n	80028d6 <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028cc:	6800      	ldr	r0, [r0, #0]
 80028ce:	f001 ffed 	bl	80048ac <USB_EPStartXfer>
}
 80028d2:	2000      	movs	r0, #0
 80028d4:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80028d6:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 80028da:	e7f7      	b.n	80028cc <HAL_PCD_EP_Receive+0x3a>

080028dc <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028dc:	f001 010f 	and.w	r1, r1, #15
 80028e0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80028e4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80028e8:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 80028ec:	4770      	bx	lr

080028ee <HAL_PCD_EP_Transmit>:
{
 80028ee:	b510      	push	{r4, lr}
 80028f0:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f2:	f001 0c0f 	and.w	ip, r1, #15
 80028f6:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80028fa:	0089      	lsls	r1, r1, #2
 80028fc:	3110      	adds	r1, #16
 80028fe:	4401      	add	r1, r0
 8002900:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8002902:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8002906:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800290a:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 800290e:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 8002918:	2301      	movs	r3, #1
 800291a:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 800291e:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 8002922:	7982      	ldrb	r2, [r0, #6]
 8002924:	429a      	cmp	r2, r3
 8002926:	d004      	beq.n	8002932 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002928:	6800      	ldr	r0, [r0, #0]
 800292a:	f001 ffbf 	bl	80048ac <USB_EPStartXfer>
}
 800292e:	2000      	movs	r0, #0
 8002930:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002932:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 8002936:	e7f7      	b.n	8002928 <HAL_PCD_EP_Transmit+0x3a>

08002938 <HAL_PCD_EP_SetStall>:
{
 8002938:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800293a:	f001 050f 	and.w	r5, r1, #15
 800293e:	7902      	ldrb	r2, [r0, #4]
 8002940:	42aa      	cmp	r2, r5
 8002942:	d338      	bcc.n	80029b6 <HAL_PCD_EP_SetStall+0x7e>
 8002944:	4604      	mov	r4, r0
 8002946:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8002948:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800294c:	d11f      	bne.n	800298e <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 800294e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002952:	0089      	lsls	r1, r1, #2
 8002954:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8002958:	4401      	add	r1, r0
 800295a:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800295c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002960:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 800296a:	2301      	movs	r3, #1
 800296c:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800296e:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002970:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002974:	2b01      	cmp	r3, #1
 8002976:	d020      	beq.n	80029ba <HAL_PCD_EP_SetStall+0x82>
 8002978:	2301      	movs	r3, #1
 800297a:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800297e:	6820      	ldr	r0, [r4, #0]
 8002980:	f002 f8d9 	bl	8004b36 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002984:	b185      	cbz	r5, 80029a8 <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 8002986:	2000      	movs	r0, #0
 8002988:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800298c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800298e:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8002992:	0089      	lsls	r1, r1, #2
 8002994:	3110      	adds	r1, #16
 8002996:	4401      	add	r1, r0
 8002998:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800299a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800299e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80029a2:	2201      	movs	r2, #1
 80029a4:	755a      	strb	r2, [r3, #21]
 80029a6:	e7e0      	b.n	800296a <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80029a8:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80029ac:	79a1      	ldrb	r1, [r4, #6]
 80029ae:	6820      	ldr	r0, [r4, #0]
 80029b0:	f002 f9ba 	bl	8004d28 <USB_EP0_OutStart>
 80029b4:	e7e7      	b.n	8002986 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 80029b6:	2001      	movs	r0, #1
 80029b8:	e7e8      	b.n	800298c <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80029ba:	2002      	movs	r0, #2
 80029bc:	e7e6      	b.n	800298c <HAL_PCD_EP_SetStall+0x54>

080029be <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029be:	f001 030f 	and.w	r3, r1, #15
 80029c2:	7902      	ldrb	r2, [r0, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d330      	bcc.n	8002a2a <HAL_PCD_EP_ClrStall+0x6c>
{
 80029c8:	b510      	push	{r4, lr}
 80029ca:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80029cc:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80029d0:	d11e      	bne.n	8002a10 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029d2:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80029d6:	0089      	lsls	r1, r1, #2
 80029d8:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80029dc:	4401      	add	r1, r0
 80029de:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80029e0:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80029e4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80029e8:	2000      	movs	r0, #0
 80029ea:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 80029ee:	2200      	movs	r2, #0
 80029f0:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029f2:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80029f4:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d018      	beq.n	8002a2e <HAL_PCD_EP_ClrStall+0x70>
 80029fc:	2301      	movs	r3, #1
 80029fe:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a02:	6820      	ldr	r0, [r4, #0]
 8002a04:	f002 f8c4 	bl	8004b90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8002a0e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a10:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8002a14:	0089      	lsls	r1, r1, #2
 8002a16:	3110      	adds	r1, #16
 8002a18:	4401      	add	r1, r0
 8002a1a:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002a1c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002a20:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002a24:	2001      	movs	r0, #1
 8002a26:	7550      	strb	r0, [r2, #21]
 8002a28:	e7e1      	b.n	80029ee <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8002a2a:	2001      	movs	r0, #1
}
 8002a2c:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8002a2e:	2002      	movs	r0, #2
 8002a30:	e7ed      	b.n	8002a0e <HAL_PCD_EP_ClrStall+0x50>

08002a32 <HAL_PCD_EP_Abort>:
{
 8002a32:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8002a34:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002a38:	d10c      	bne.n	8002a54 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a3a:	f001 010f 	and.w	r1, r1, #15
 8002a3e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002a42:	0089      	lsls	r1, r1, #2
 8002a44:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8002a48:	4401      	add	r1, r0
 8002a4a:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a4c:	6800      	ldr	r0, [r0, #0]
 8002a4e:	f001 feb7 	bl	80047c0 <USB_EPStopXfer>
}
 8002a52:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a54:	f001 010f 	and.w	r1, r1, #15
 8002a58:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002a5c:	0089      	lsls	r1, r1, #2
 8002a5e:	3110      	adds	r1, #16
 8002a60:	4401      	add	r1, r0
 8002a62:	3104      	adds	r1, #4
 8002a64:	e7f2      	b.n	8002a4c <HAL_PCD_EP_Abort+0x1a>

08002a66 <HAL_PCD_IRQHandler>:
{
 8002a66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a6e:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a70:	4628      	mov	r0, r5
 8002a72:	f002 f916 	bl	8004ca2 <USB_GetMode>
 8002a76:	b110      	cbz	r0, 8002a7e <HAL_PCD_IRQHandler+0x18>
}
 8002a78:	b003      	add	sp, #12
 8002a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a7e:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a80:	6820      	ldr	r0, [r4, #0]
 8002a82:	f002 f8df 	bl	8004c44 <USB_ReadInterrupts>
 8002a86:	2800      	cmp	r0, #0
 8002a88:	d0f6      	beq.n	8002a78 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a8a:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8002a94:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a98:	6820      	ldr	r0, [r4, #0]
 8002a9a:	f002 f8d3 	bl	8004c44 <USB_ReadInterrupts>
 8002a9e:	f010 0f02 	tst.w	r0, #2
 8002aa2:	d004      	beq.n	8002aae <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002aa4:	6822      	ldr	r2, [r4, #0]
 8002aa6:	6953      	ldr	r3, [r2, #20]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002aae:	6820      	ldr	r0, [r4, #0]
 8002ab0:	f002 f8c8 	bl	8004c44 <USB_ReadInterrupts>
 8002ab4:	f010 0f10 	tst.w	r0, #16
 8002ab8:	d015      	beq.n	8002ae6 <HAL_PCD_IRQHandler+0x80>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002aba:	6822      	ldr	r2, [r4, #0]
 8002abc:	6993      	ldr	r3, [r2, #24]
 8002abe:	f023 0310 	bic.w	r3, r3, #16
 8002ac2:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8002ac4:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ac8:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002acc:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 8002ad0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ad4:	d04c      	beq.n	8002b70 <HAL_PCD_IRQHandler+0x10a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ad6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ada:	d06f      	beq.n	8002bbc <HAL_PCD_IRQHandler+0x156>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002adc:	6822      	ldr	r2, [r4, #0]
 8002ade:	6993      	ldr	r3, [r2, #24]
 8002ae0:	f043 0310 	orr.w	r3, r3, #16
 8002ae4:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ae6:	6820      	ldr	r0, [r4, #0]
 8002ae8:	f002 f8ac 	bl	8004c44 <USB_ReadInterrupts>
 8002aec:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8002af0:	d176      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x17a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002af2:	6820      	ldr	r0, [r4, #0]
 8002af4:	f002 f8a6 	bl	8004c44 <USB_ReadInterrupts>
 8002af8:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8002afc:	f040 80e0 	bne.w	8002cc0 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b00:	6820      	ldr	r0, [r4, #0]
 8002b02:	f002 f89f 	bl	8004c44 <USB_ReadInterrupts>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	f2c0 8161 	blt.w	8002dce <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b0c:	6820      	ldr	r0, [r4, #0]
 8002b0e:	f002 f899 	bl	8004c44 <USB_ReadInterrupts>
 8002b12:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8002b16:	d009      	beq.n	8002b2c <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f013 0f01 	tst.w	r3, #1
 8002b1e:	f040 816e 	bne.w	8002dfe <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b22:	6822      	ldr	r2, [r4, #0]
 8002b24:	6953      	ldr	r3, [r2, #20]
 8002b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b2a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b2c:	6820      	ldr	r0, [r4, #0]
 8002b2e:	f002 f889 	bl	8004c44 <USB_ReadInterrupts>
 8002b32:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8002b36:	f040 8166 	bne.w	8002e06 <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b3a:	6820      	ldr	r0, [r4, #0]
 8002b3c:	f002 f882 	bl	8004c44 <USB_ReadInterrupts>
 8002b40:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8002b44:	f040 81b3 	bne.w	8002eae <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b48:	6820      	ldr	r0, [r4, #0]
 8002b4a:	f002 f87b 	bl	8004c44 <USB_ReadInterrupts>
 8002b4e:	f010 0f08 	tst.w	r0, #8
 8002b52:	f040 81c4 	bne.w	8002ede <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b56:	6820      	ldr	r0, [r4, #0]
 8002b58:	f002 f874 	bl	8004c44 <USB_ReadInterrupts>
 8002b5c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8002b60:	f000 81d7 	beq.w	8002f12 <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b64:	69ab      	ldr	r3, [r5, #24]
 8002b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b6a:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b6c:	2601      	movs	r6, #1
 8002b6e:	e1c0      	b.n	8002ef2 <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b70:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002b74:	ea18 0f03 	tst.w	r8, r3
 8002b78:	d0b0      	beq.n	8002adc <HAL_PCD_IRQHandler+0x76>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b7a:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 8002b88:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8002b8c:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8002b90:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8002b94:	4628      	mov	r0, r5
 8002b96:	f001 ffab 	bl	8004af0 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b9a:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8002b9e:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8002ba2:	4453      	add	r3, sl
 8002ba4:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ba8:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 8002bac:	9a01      	ldr	r2, [sp, #4]
 8002bae:	444a      	add	r2, r9
 8002bb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002bb4:	4453      	add	r3, sl
 8002bb6:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8002bba:	e78f      	b.n	8002adc <HAL_PCD_IRQHandler+0x76>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	f001 ff94 	bl	8004af0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bc8:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002bcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002bd0:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8002bd4:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8002bd8:	4442      	add	r2, r8
 8002bda:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 8002bde:	e77d      	b.n	8002adc <HAL_PCD_IRQHandler+0x76>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002be0:	6820      	ldr	r0, [r4, #0]
 8002be2:	f002 f833 	bl	8004c4c <USB_ReadDevAllOutEpInterrupt>
 8002be6:	4680      	mov	r8, r0
      epnum = 0U;
 8002be8:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002bea:	e035      	b.n	8002c58 <HAL_PCD_IRQHandler+0x1f2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002bec:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bf6:	4649      	mov	r1, r9
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f7ff fd0f 	bl	800261c <PCD_EP_OutXfrComplete_int>
 8002bfe:	e03c      	b.n	8002c7a <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c00:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002c04:	2208      	movs	r2, #8
 8002c06:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f7ff fd87 	bl	8002720 <PCD_EP_OutSetupPacket_int>
 8002c12:	e035      	b.n	8002c80 <HAL_PCD_IRQHandler+0x21a>
            if (ep->is_iso_incomplete == 1U)
 8002c14:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002c18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002c1c:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d041      	beq.n	8002ca8 <HAL_PCD_IRQHandler+0x242>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c24:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c2e:	f01a 0f20 	tst.w	sl, #32
 8002c32:	d004      	beq.n	8002c3e <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c34:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c3e:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8002c42:	d005      	beq.n	8002c50 <HAL_PCD_IRQHandler+0x1ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c44:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002c48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c4c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8002c50:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002c54:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8002c58:	f1b8 0f00 	cmp.w	r8, #0
 8002c5c:	f43f af49 	beq.w	8002af2 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 8002c60:	f018 0f01 	tst.w	r8, #1
 8002c64:	d0f4      	beq.n	8002c50 <HAL_PCD_IRQHandler+0x1ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c66:	fa5f fb89 	uxtb.w	fp, r9
 8002c6a:	4659      	mov	r1, fp
 8002c6c:	6820      	ldr	r0, [r4, #0]
 8002c6e:	f001 fffd 	bl	8004c6c <USB_ReadDevOutEPInterrupt>
 8002c72:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c74:	f010 0f01 	tst.w	r0, #1
 8002c78:	d1b8      	bne.n	8002bec <HAL_PCD_IRQHandler+0x186>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c7a:	f01a 0f08 	tst.w	sl, #8
 8002c7e:	d1bf      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x19a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c80:	f01a 0f10 	tst.w	sl, #16
 8002c84:	d004      	beq.n	8002c90 <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c86:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002c8a:	2210      	movs	r2, #16
 8002c8c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c90:	f01a 0f02 	tst.w	sl, #2
 8002c94:	d0cb      	beq.n	8002c2e <HAL_PCD_IRQHandler+0x1c8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c96:	696b      	ldr	r3, [r5, #20]
 8002c98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002c9c:	d0ba      	beq.n	8002c14 <HAL_PCD_IRQHandler+0x1ae>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	e7b5      	b.n	8002c14 <HAL_PCD_IRQHandler+0x1ae>
              ep->is_iso_incomplete = 0U;
 8002ca8:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002cac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cb6:	4659      	mov	r1, fp
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f003 fd59 	bl	8006770 <HAL_PCD_ISOOUTIncompleteCallback>
 8002cbe:	e7b1      	b.n	8002c24 <HAL_PCD_IRQHandler+0x1be>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cc0:	6820      	ldr	r0, [r4, #0]
 8002cc2:	f001 ffcb 	bl	8004c5c <USB_ReadDevAllInEpInterrupt>
 8002cc6:	4680      	mov	r8, r0
      epnum = 0U;
 8002cc8:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002cca:	e025      	b.n	8002d18 <HAL_PCD_IRQHandler+0x2b2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ccc:	4659      	mov	r1, fp
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f003 fd0c 	bl	80066ec <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cd4:	f01a 0f08 	tst.w	sl, #8
 8002cd8:	d004      	beq.n	8002ce4 <HAL_PCD_IRQHandler+0x27e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cda:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002cde:	2208      	movs	r2, #8
 8002ce0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ce4:	f01a 0f10 	tst.w	sl, #16
 8002ce8:	d004      	beq.n	8002cf4 <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cea:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002cee:	2210      	movs	r2, #16
 8002cf0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cf4:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8002cf8:	d004      	beq.n	8002d04 <HAL_PCD_IRQHandler+0x29e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cfa:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002cfe:	2240      	movs	r2, #64	@ 0x40
 8002d00:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d04:	f01a 0f02 	tst.w	sl, #2
 8002d08:	d140      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x326>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d0a:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8002d0e:	d159      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 8002d10:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002d14:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8002d18:	f1b8 0f00 	cmp.w	r8, #0
 8002d1c:	f43f aef0 	beq.w	8002b00 <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d20:	f018 0f01 	tst.w	r8, #1
 8002d24:	d0f4      	beq.n	8002d10 <HAL_PCD_IRQHandler+0x2aa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d26:	fa5f fb89 	uxtb.w	fp, r9
 8002d2a:	4659      	mov	r1, fp
 8002d2c:	6820      	ldr	r0, [r4, #0]
 8002d2e:	f001 ffa6 	bl	8004c7e <USB_ReadDevInEPInterrupt>
 8002d32:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d34:	f010 0f01 	tst.w	r0, #1
 8002d38:	d0cc      	beq.n	8002cd4 <HAL_PCD_IRQHandler+0x26e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d3a:	f009 020f 	and.w	r2, r9, #15
 8002d3e:	2101      	movs	r1, #1
 8002d40:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d46:	ea23 0302 	bic.w	r3, r3, r2
 8002d4a:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d4c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002d50:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8002d54:	79a3      	ldrb	r3, [r4, #6]
 8002d56:	428b      	cmp	r3, r1
 8002d58:	d1b8      	bne.n	8002ccc <HAL_PCD_IRQHandler+0x266>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d5a:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002d5e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002d62:	6a1a      	ldr	r2, [r3, #32]
 8002d64:	69d9      	ldr	r1, [r3, #28]
 8002d66:	440a      	add	r2, r1
 8002d68:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d6a:	f1b9 0f00 	cmp.w	r9, #0
 8002d6e:	d1ad      	bne.n	8002ccc <HAL_PCD_IRQHandler+0x266>
 8002d70:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002d74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1a6      	bne.n	8002ccc <HAL_PCD_IRQHandler+0x266>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d7e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002d82:	2101      	movs	r1, #1
 8002d84:	6820      	ldr	r0, [r4, #0]
 8002d86:	f001 ffcf 	bl	8004d28 <USB_EP0_OutStart>
 8002d8a:	e79f      	b.n	8002ccc <HAL_PCD_IRQHandler+0x266>
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d8c:	4649      	mov	r1, r9
 8002d8e:	4628      	mov	r0, r5
 8002d90:	f001 fb2c 	bl	80043ec <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8002d94:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002d98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002d9c:	7ddb      	ldrb	r3, [r3, #23]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d005      	beq.n	8002dae <HAL_PCD_IRQHandler+0x348>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002da2:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002da6:	2202      	movs	r2, #2
 8002da8:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8002dac:	e7ad      	b.n	8002d0a <HAL_PCD_IRQHandler+0x2a4>
              ep->is_iso_incomplete = 0U;
 8002dae:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002db2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002db6:	2200      	movs	r2, #0
 8002db8:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dba:	4659      	mov	r1, fp
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f003 fcdd 	bl	800677c <HAL_PCD_ISOINIncompleteCallback>
 8002dc2:	e7ee      	b.n	8002da2 <HAL_PCD_IRQHandler+0x33c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002dc4:	4649      	mov	r1, r9
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f7ff fb1c 	bl	8002404 <PCD_WriteEmptyTxFifo>
 8002dcc:	e7a0      	b.n	8002d10 <HAL_PCD_IRQHandler+0x2aa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f023 0301 	bic.w	r3, r3, #1
 8002dd4:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8002dd6:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d008      	beq.n	8002df0 <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 8002dde:	4620      	mov	r0, r4
 8002de0:	f003 fcc0 	bl	8006764 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002de4:	6822      	ldr	r2, [r4, #0]
 8002de6:	6953      	ldr	r3, [r2, #20]
 8002de8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dec:	6153      	str	r3, [r2, #20]
 8002dee:	e68d      	b.n	8002b0c <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 8002df0:	2100      	movs	r1, #0
 8002df2:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002df6:	4620      	mov	r0, r4
 8002df8:	f000 f93f 	bl	800307a <HAL_PCDEx_LPM_Callback>
 8002dfc:	e7f2      	b.n	8002de4 <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f003 fc98 	bl	8006734 <HAL_PCD_SuspendCallback>
 8002e04:	e68d      	b.n	8002b22 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e0e:	2110      	movs	r1, #16
 8002e10:	6820      	ldr	r0, [r4, #0]
 8002e12:	f001 faeb 	bl	80043ec <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e16:	e01a      	b.n	8002e4e <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e18:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8002e1c:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8002e20:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e24:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002e28:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002e2c:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e30:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e34:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8002e38:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002e3c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e40:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8002e44:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8002e48:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4c:	3601      	adds	r6, #1
 8002e4e:	7923      	ldrb	r3, [r4, #4]
 8002e50:	42b3      	cmp	r3, r6
 8002e52:	d8e1      	bhi.n	8002e18 <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e5a:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e5c:	7be3      	ldrb	r3, [r4, #15]
 8002e5e:	b1db      	cbz	r3, 8002e98 <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e64:	f043 030b 	orr.w	r3, r3, #11
 8002e68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e6e:	f043 030b 	orr.w	r3, r3, #11
 8002e72:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e74:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 8002e78:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e7c:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e80:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002e84:	79a1      	ldrb	r1, [r4, #6]
 8002e86:	6820      	ldr	r0, [r4, #0]
 8002e88:	f001 ff4e 	bl	8004d28 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e8c:	6822      	ldr	r2, [r4, #0]
 8002e8e:	6953      	ldr	r3, [r2, #20]
 8002e90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e94:	6153      	str	r3, [r2, #20]
 8002e96:	e650      	b.n	8002b3a <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e9e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002ea2:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f043 030b 	orr.w	r3, r3, #11
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	e7e2      	b.n	8002e74 <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 8002eae:	6820      	ldr	r0, [r4, #0]
 8002eb0:	f001 ff2c 	bl	8004d0c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002eb4:	6820      	ldr	r0, [r4, #0]
 8002eb6:	f001 fbb5 	bl	8004624 <USB_GetDevSpeed>
 8002eba:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ebc:	6826      	ldr	r6, [r4, #0]
 8002ebe:	f000 fbdd 	bl	800367c <HAL_RCC_GetHCLKFreq>
 8002ec2:	4601      	mov	r1, r0
 8002ec4:	79e2      	ldrb	r2, [r4, #7]
 8002ec6:	4630      	mov	r0, r6
 8002ec8:	f001 fa12 	bl	80042f0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f003 fc1e 	bl	800670e <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ed2:	6822      	ldr	r2, [r4, #0]
 8002ed4:	6953      	ldr	r3, [r2, #20]
 8002ed6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eda:	6153      	str	r3, [r2, #20]
 8002edc:	e634      	b.n	8002b48 <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f003 fc0f 	bl	8006702 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ee4:	6822      	ldr	r2, [r4, #0]
 8002ee6:	6953      	ldr	r3, [r2, #20]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	6153      	str	r3, [r2, #20]
 8002eee:	e632      	b.n	8002b56 <HAL_PCD_IRQHandler+0xf0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef0:	3601      	adds	r6, #1
 8002ef2:	7923      	ldrb	r3, [r4, #4]
 8002ef4:	42b3      	cmp	r3, r6
 8002ef6:	d90c      	bls.n	8002f12 <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ef8:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8002efc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002f00:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d1f3      	bne.n	8002ef0 <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f08:	b2f1      	uxtb	r1, r6
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f7ff fd91 	bl	8002a32 <HAL_PCD_EP_Abort>
 8002f10:	e7ee      	b.n	8002ef0 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f12:	6820      	ldr	r0, [r4, #0]
 8002f14:	f001 fe96 	bl	8004c44 <USB_ReadInterrupts>
 8002f18:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8002f1c:	d125      	bne.n	8002f6a <HAL_PCD_IRQHandler+0x504>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f1e:	6820      	ldr	r0, [r4, #0]
 8002f20:	f001 fe90 	bl	8004c44 <USB_ReadInterrupts>
 8002f24:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8002f28:	d059      	beq.n	8002fde <HAL_PCD_IRQHandler+0x578>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e026      	b.n	8002f7c <HAL_PCD_IRQHandler+0x516>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f2e:	3601      	adds	r6, #1
 8002f30:	7923      	ldrb	r3, [r4, #4]
 8002f32:	42b3      	cmp	r3, r6
 8002f34:	d91b      	bls.n	8002f6e <HAL_PCD_IRQHandler+0x508>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f36:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8002f3a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f3e:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8002f42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002f46:	7e1b      	ldrb	r3, [r3, #24]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x4c8>
 8002f4c:	2a00      	cmp	r2, #0
 8002f4e:	daee      	bge.n	8002f2e <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f50:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8002f54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002f58:	2201      	movs	r2, #1
 8002f5a:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f5c:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8002f60:	b2c9      	uxtb	r1, r1
 8002f62:	4620      	mov	r0, r4
 8002f64:	f7ff fd65 	bl	8002a32 <HAL_PCD_EP_Abort>
 8002f68:	e7e1      	b.n	8002f2e <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f6a:	2601      	movs	r6, #1
 8002f6c:	e7e0      	b.n	8002f30 <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f6e:	6822      	ldr	r2, [r4, #0]
 8002f70:	6953      	ldr	r3, [r2, #20]
 8002f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f76:	6153      	str	r3, [r2, #20]
 8002f78:	e7d1      	b.n	8002f1e <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	7922      	ldrb	r2, [r4, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d928      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x56e>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f82:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002f86:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f8a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002f8e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002f92:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 8002f96:	2a01      	cmp	r2, #1
 8002f98:	d1ef      	bne.n	8002f7a <HAL_PCD_IRQHandler+0x514>
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	daed      	bge.n	8002f7a <HAL_PCD_IRQHandler+0x514>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f9e:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 8002fa2:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8002fa6:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002faa:	4291      	cmp	r1, r2
 8002fac:	d1e5      	bne.n	8002f7a <HAL_PCD_IRQHandler+0x514>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002fae:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002fb2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002fbc:	69aa      	ldr	r2, [r5, #24]
 8002fbe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002fc2:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fc4:	696a      	ldr	r2, [r5, #20]
 8002fc6:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002fca:	d1d6      	bne.n	8002f7a <HAL_PCD_IRQHandler+0x514>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fd2:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fd4:	6822      	ldr	r2, [r4, #0]
 8002fd6:	6953      	ldr	r3, [r2, #20]
 8002fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fdc:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fde:	6820      	ldr	r0, [r4, #0]
 8002fe0:	f001 fe30 	bl	8004c44 <USB_ReadInterrupts>
 8002fe4:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8002fe8:	d110      	bne.n	800300c <HAL_PCD_IRQHandler+0x5a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fea:	6820      	ldr	r0, [r4, #0]
 8002fec:	f001 fe2a 	bl	8004c44 <USB_ReadInterrupts>
 8002ff0:	f010 0f04 	tst.w	r0, #4
 8002ff4:	f43f ad40 	beq.w	8002a78 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ffc:	f015 0f04 	tst.w	r5, #4
 8003000:	d10d      	bne.n	800301e <HAL_PCD_IRQHandler+0x5b8>
      hpcd->Instance->GOTGINT |= RegVal;
 8003002:	6822      	ldr	r2, [r4, #0]
 8003004:	6853      	ldr	r3, [r2, #4]
 8003006:	432b      	orrs	r3, r5
 8003008:	6053      	str	r3, [r2, #4]
 800300a:	e535      	b.n	8002a78 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 800300c:	4620      	mov	r0, r4
 800300e:	f003 fbbb 	bl	8006788 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003012:	6822      	ldr	r2, [r4, #0]
 8003014:	6953      	ldr	r3, [r2, #20]
 8003016:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800301a:	6153      	str	r3, [r2, #20]
 800301c:	e7e5      	b.n	8002fea <HAL_PCD_IRQHandler+0x584>
        HAL_PCD_DisconnectCallback(hpcd);
 800301e:	4620      	mov	r0, r4
 8003020:	f003 fbb8 	bl	8006794 <HAL_PCD_DisconnectCallback>
 8003024:	e7ed      	b.n	8003002 <HAL_PCD_IRQHandler+0x59c>

08003026 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003026:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003028:	6804      	ldr	r4, [r0, #0]
 800302a:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 800302c:	b931      	cbnz	r1, 800303c <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800302e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003032:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003034:	2000      	movs	r0, #0
 8003036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800303e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003040:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003044:	2300      	movs	r3, #0
 8003046:	e008      	b.n	800305a <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003048:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800304c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003050:	6849      	ldr	r1, [r1, #4]
 8003052:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003056:	3301      	adds	r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800305e:	428b      	cmp	r3, r1
 8003060:	d3f2      	bcc.n	8003048 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003062:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003066:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 800306a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800306e:	6060      	str	r0, [r4, #4]
 8003070:	e7e0      	b.n	8003034 <HAL_PCDEx_SetTxFiFo+0xe>

08003072 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003072:	6803      	ldr	r3, [r0, #0]
 8003074:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8003076:	2000      	movs	r0, #0
 8003078:	4770      	bx	lr

0800307a <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800307a:	4770      	bx	lr

0800307c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800307c:	2800      	cmp	r0, #0
 800307e:	f000 81e0 	beq.w	8003442 <HAL_RCC_OscConfig+0x3c6>
{
 8003082:	b570      	push	{r4, r5, r6, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003088:	6803      	ldr	r3, [r0, #0]
 800308a:	f013 0f01 	tst.w	r3, #1
 800308e:	d03b      	beq.n	8003108 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003090:	4b9f      	ldr	r3, [pc, #636]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b04      	cmp	r3, #4
 800309a:	d02c      	beq.n	80030f6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309c:	4b9c      	ldr	r3, [pc, #624]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d021      	beq.n	80030ec <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a8:	6863      	ldr	r3, [r4, #4]
 80030aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ae:	d04f      	beq.n	8003150 <HAL_RCC_OscConfig+0xd4>
 80030b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030b4:	d052      	beq.n	800315c <HAL_RCC_OscConfig+0xe0>
 80030b6:	4b96      	ldr	r3, [pc, #600]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c8:	6863      	ldr	r3, [r4, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d050      	beq.n	8003170 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ce:	f7fe fcc1 	bl	8001a54 <HAL_GetTick>
 80030d2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d4:	4b8e      	ldr	r3, [pc, #568]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80030dc:	d114      	bne.n	8003108 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030de:	f7fe fcb9 	bl	8001a54 <HAL_GetTick>
 80030e2:	1b40      	subs	r0, r0, r5
 80030e4:	2864      	cmp	r0, #100	@ 0x64
 80030e6:	d9f5      	bls.n	80030d4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80030e8:	2003      	movs	r0, #3
 80030ea:	e1b1      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ec:	4b88      	ldr	r3, [pc, #544]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80030f4:	d0d8      	beq.n	80030a8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f6:	4b86      	ldr	r3, [pc, #536]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80030fe:	d003      	beq.n	8003108 <HAL_RCC_OscConfig+0x8c>
 8003100:	6863      	ldr	r3, [r4, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 819f 	beq.w	8003446 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	f013 0f02 	tst.w	r3, #2
 800310e:	d054      	beq.n	80031ba <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003110:	4b7f      	ldr	r3, [pc, #508]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f013 0f0c 	tst.w	r3, #12
 8003118:	d03e      	beq.n	8003198 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311a:	4b7d      	ldr	r3, [pc, #500]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003122:	2b08      	cmp	r3, #8
 8003124:	d033      	beq.n	800318e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003126:	68e3      	ldr	r3, [r4, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d068      	beq.n	80031fe <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800312c:	4b79      	ldr	r3, [pc, #484]	@ (8003314 <HAL_RCC_OscConfig+0x298>)
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003132:	f7fe fc8f 	bl	8001a54 <HAL_GetTick>
 8003136:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003138:	4b75      	ldr	r3, [pc, #468]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f013 0f02 	tst.w	r3, #2
 8003140:	d154      	bne.n	80031ec <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003142:	f7fe fc87 	bl	8001a54 <HAL_GetTick>
 8003146:	1b40      	subs	r0, r0, r5
 8003148:	2802      	cmp	r0, #2
 800314a:	d9f5      	bls.n	8003138 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800314c:	2003      	movs	r0, #3
 800314e:	e17f      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003150:	4a6f      	ldr	r2, [pc, #444]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 8003152:	6813      	ldr	r3, [r2, #0]
 8003154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e7b5      	b.n	80030c8 <HAL_RCC_OscConfig+0x4c>
 800315c:	4b6c      	ldr	r3, [pc, #432]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e7ab      	b.n	80030c8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8003170:	f7fe fc70 	bl	8001a54 <HAL_GetTick>
 8003174:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003176:	4b66      	ldr	r3, [pc, #408]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800317e:	d0c3      	beq.n	8003108 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003180:	f7fe fc68 	bl	8001a54 <HAL_GetTick>
 8003184:	1b40      	subs	r0, r0, r5
 8003186:	2864      	cmp	r0, #100	@ 0x64
 8003188:	d9f5      	bls.n	8003176 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800318a:	2003      	movs	r0, #3
 800318c:	e160      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318e:	4b60      	ldr	r3, [pc, #384]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003196:	d1c6      	bne.n	8003126 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003198:	4b5d      	ldr	r3, [pc, #372]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f013 0f02 	tst.w	r3, #2
 80031a0:	d003      	beq.n	80031aa <HAL_RCC_OscConfig+0x12e>
 80031a2:	68e3      	ldr	r3, [r4, #12]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	f040 8150 	bne.w	800344a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031aa:	4a59      	ldr	r2, [pc, #356]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 80031ac:	6813      	ldr	r3, [r2, #0]
 80031ae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80031b2:	6921      	ldr	r1, [r4, #16]
 80031b4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031b8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	f013 0f08 	tst.w	r3, #8
 80031c0:	d042      	beq.n	8003248 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031c2:	6963      	ldr	r3, [r4, #20]
 80031c4:	b36b      	cbz	r3, 8003222 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c6:	4b53      	ldr	r3, [pc, #332]	@ (8003314 <HAL_RCC_OscConfig+0x298>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7fe fc41 	bl	8001a54 <HAL_GetTick>
 80031d2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 80031d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d8:	f013 0f02 	tst.w	r3, #2
 80031dc:	d134      	bne.n	8003248 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031de:	f7fe fc39 	bl	8001a54 <HAL_GetTick>
 80031e2:	1b40      	subs	r0, r0, r5
 80031e4:	2802      	cmp	r0, #2
 80031e6:	d9f5      	bls.n	80031d4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80031e8:	2003      	movs	r0, #3
 80031ea:	e131      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4a48      	ldr	r2, [pc, #288]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 80031ee:	6813      	ldr	r3, [r2, #0]
 80031f0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80031f4:	6921      	ldr	r1, [r4, #16]
 80031f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e7dd      	b.n	80031ba <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80031fe:	4b45      	ldr	r3, [pc, #276]	@ (8003314 <HAL_RCC_OscConfig+0x298>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003204:	f7fe fc26 	bl	8001a54 <HAL_GetTick>
 8003208:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320a:	4b41      	ldr	r3, [pc, #260]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f013 0f02 	tst.w	r3, #2
 8003212:	d0d2      	beq.n	80031ba <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003214:	f7fe fc1e 	bl	8001a54 <HAL_GetTick>
 8003218:	1b40      	subs	r0, r0, r5
 800321a:	2802      	cmp	r0, #2
 800321c:	d9f5      	bls.n	800320a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800321e:	2003      	movs	r0, #3
 8003220:	e116      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003222:	4b3c      	ldr	r3, [pc, #240]	@ (8003314 <HAL_RCC_OscConfig+0x298>)
 8003224:	2200      	movs	r2, #0
 8003226:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322a:	f7fe fc13 	bl	8001a54 <HAL_GetTick>
 800322e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003230:	4b37      	ldr	r3, [pc, #220]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 8003232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003234:	f013 0f02 	tst.w	r3, #2
 8003238:	d006      	beq.n	8003248 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323a:	f7fe fc0b 	bl	8001a54 <HAL_GetTick>
 800323e:	1b40      	subs	r0, r0, r5
 8003240:	2802      	cmp	r0, #2
 8003242:	d9f5      	bls.n	8003230 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8003244:	2003      	movs	r0, #3
 8003246:	e103      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	f013 0f04 	tst.w	r3, #4
 800324e:	d077      	beq.n	8003340 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003250:	4b2f      	ldr	r3, [pc, #188]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003258:	d133      	bne.n	80032c2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	4b2c      	ldr	r3, [pc, #176]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 8003260:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003262:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003272:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	4b28      	ldr	r3, [pc, #160]	@ (8003318 <HAL_RCC_OscConfig+0x29c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800327c:	d023      	beq.n	80032c6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800327e:	68a3      	ldr	r3, [r4, #8]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d034      	beq.n	80032ee <HAL_RCC_OscConfig+0x272>
 8003284:	2b05      	cmp	r3, #5
 8003286:	d038      	beq.n	80032fa <HAL_RCC_OscConfig+0x27e>
 8003288:	4b21      	ldr	r3, [pc, #132]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 800328a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	671a      	str	r2, [r3, #112]	@ 0x70
 8003292:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003294:	f022 0204 	bic.w	r2, r2, #4
 8003298:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800329a:	68a3      	ldr	r3, [r4, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d03d      	beq.n	800331c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fe fbd8 	bl	8001a54 <HAL_GetTick>
 80032a4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032aa:	f013 0f02 	tst.w	r3, #2
 80032ae:	d146      	bne.n	800333e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b0:	f7fe fbd0 	bl	8001a54 <HAL_GetTick>
 80032b4:	1b80      	subs	r0, r0, r6
 80032b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80032ba:	4298      	cmp	r0, r3
 80032bc:	d9f3      	bls.n	80032a6 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80032be:	2003      	movs	r0, #3
 80032c0:	e0c6      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80032c2:	2500      	movs	r5, #0
 80032c4:	e7d6      	b.n	8003274 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c6:	4a14      	ldr	r2, [pc, #80]	@ (8003318 <HAL_RCC_OscConfig+0x29c>)
 80032c8:	6813      	ldr	r3, [r2, #0]
 80032ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ce:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80032d0:	f7fe fbc0 	bl	8001a54 <HAL_GetTick>
 80032d4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d6:	4b10      	ldr	r3, [pc, #64]	@ (8003318 <HAL_RCC_OscConfig+0x29c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80032de:	d1ce      	bne.n	800327e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e0:	f7fe fbb8 	bl	8001a54 <HAL_GetTick>
 80032e4:	1b80      	subs	r0, r0, r6
 80032e6:	2802      	cmp	r0, #2
 80032e8:	d9f5      	bls.n	80032d6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80032ea:	2003      	movs	r0, #3
 80032ec:	e0b0      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ee:	4a08      	ldr	r2, [pc, #32]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 80032f0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f8:	e7cf      	b.n	800329a <HAL_RCC_OscConfig+0x21e>
 80032fa:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <HAL_RCC_OscConfig+0x294>)
 80032fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032fe:	f042 0204 	orr.w	r2, r2, #4
 8003302:	671a      	str	r2, [r3, #112]	@ 0x70
 8003304:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	671a      	str	r2, [r3, #112]	@ 0x70
 800330c:	e7c5      	b.n	800329a <HAL_RCC_OscConfig+0x21e>
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800
 8003314:	42470000 	.word	0x42470000
 8003318:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331c:	f7fe fb9a 	bl	8001a54 <HAL_GetTick>
 8003320:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003322:	4b52      	ldr	r3, [pc, #328]	@ (800346c <HAL_RCC_OscConfig+0x3f0>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003326:	f013 0f02 	tst.w	r3, #2
 800332a:	d008      	beq.n	800333e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7fe fb92 	bl	8001a54 <HAL_GetTick>
 8003330:	1b80      	subs	r0, r0, r6
 8003332:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003336:	4298      	cmp	r0, r3
 8003338:	d9f3      	bls.n	8003322 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800333a:	2003      	movs	r0, #3
 800333c:	e088      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800333e:	b9ed      	cbnz	r5, 800337c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003340:	69a3      	ldr	r3, [r4, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8083 	beq.w	800344e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003348:	4a48      	ldr	r2, [pc, #288]	@ (800346c <HAL_RCC_OscConfig+0x3f0>)
 800334a:	6892      	ldr	r2, [r2, #8]
 800334c:	f002 020c 	and.w	r2, r2, #12
 8003350:	2a08      	cmp	r2, #8
 8003352:	d051      	beq.n	80033f8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003354:	2b02      	cmp	r3, #2
 8003356:	d017      	beq.n	8003388 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003358:	4b45      	ldr	r3, [pc, #276]	@ (8003470 <HAL_RCC_OscConfig+0x3f4>)
 800335a:	2200      	movs	r2, #0
 800335c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fe fb79 	bl	8001a54 <HAL_GetTick>
 8003362:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003364:	4b41      	ldr	r3, [pc, #260]	@ (800346c <HAL_RCC_OscConfig+0x3f0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800336c:	d042      	beq.n	80033f4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe fb71 	bl	8001a54 <HAL_GetTick>
 8003372:	1b00      	subs	r0, r0, r4
 8003374:	2802      	cmp	r0, #2
 8003376:	d9f5      	bls.n	8003364 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003378:	2003      	movs	r0, #3
 800337a:	e069      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800337c:	4a3b      	ldr	r2, [pc, #236]	@ (800346c <HAL_RCC_OscConfig+0x3f0>)
 800337e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003380:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003384:	6413      	str	r3, [r2, #64]	@ 0x40
 8003386:	e7db      	b.n	8003340 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8003388:	4b39      	ldr	r3, [pc, #228]	@ (8003470 <HAL_RCC_OscConfig+0x3f4>)
 800338a:	2200      	movs	r2, #0
 800338c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800338e:	f7fe fb61 	bl	8001a54 <HAL_GetTick>
 8003392:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003394:	4b35      	ldr	r3, [pc, #212]	@ (800346c <HAL_RCC_OscConfig+0x3f0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800339c:	d006      	beq.n	80033ac <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339e:	f7fe fb59 	bl	8001a54 <HAL_GetTick>
 80033a2:	1b40      	subs	r0, r0, r5
 80033a4:	2802      	cmp	r0, #2
 80033a6:	d9f5      	bls.n	8003394 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80033a8:	2003      	movs	r0, #3
 80033aa:	e051      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ac:	69e3      	ldr	r3, [r4, #28]
 80033ae:	6a22      	ldr	r2, [r4, #32]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80033b4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80033b8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80033ba:	0852      	lsrs	r2, r2, #1
 80033bc:	3a01      	subs	r2, #1
 80033be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80033c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80033c8:	4a28      	ldr	r2, [pc, #160]	@ (800346c <HAL_RCC_OscConfig+0x3f0>)
 80033ca:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80033cc:	4b28      	ldr	r3, [pc, #160]	@ (8003470 <HAL_RCC_OscConfig+0x3f4>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80033d2:	f7fe fb3f 	bl	8001a54 <HAL_GetTick>
 80033d6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d8:	4b24      	ldr	r3, [pc, #144]	@ (800346c <HAL_RCC_OscConfig+0x3f0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80033e0:	d106      	bne.n	80033f0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e2:	f7fe fb37 	bl	8001a54 <HAL_GetTick>
 80033e6:	1b00      	subs	r0, r0, r4
 80033e8:	2802      	cmp	r0, #2
 80033ea:	d9f5      	bls.n	80033d8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80033ec:	2003      	movs	r0, #3
 80033ee:	e02f      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80033f0:	2000      	movs	r0, #0
 80033f2:	e02d      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
 80033f4:	2000      	movs	r0, #0
 80033f6:	e02b      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d02b      	beq.n	8003454 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80033fc:	4b1b      	ldr	r3, [pc, #108]	@ (800346c <HAL_RCC_OscConfig+0x3f0>)
 80033fe:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003400:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8003404:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003406:	4291      	cmp	r1, r2
 8003408:	d126      	bne.n	8003458 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800340a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800340e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003410:	428a      	cmp	r2, r1
 8003412:	d123      	bne.n	800345c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003414:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003416:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800341a:	401a      	ands	r2, r3
 800341c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003420:	d11e      	bne.n	8003460 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003422:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8003426:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003428:	0852      	lsrs	r2, r2, #1
 800342a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800342c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003430:	d118      	bne.n	8003464 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003432:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8003436:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003438:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800343c:	d114      	bne.n	8003468 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800343e:	2000      	movs	r0, #0
 8003440:	e006      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8003442:	2001      	movs	r0, #1
}
 8003444:	4770      	bx	lr
        return HAL_ERROR;
 8003446:	2001      	movs	r0, #1
 8003448:	e002      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800344a:	2001      	movs	r0, #1
 800344c:	e000      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800344e:	2000      	movs	r0, #0
}
 8003450:	b002      	add	sp, #8
 8003452:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003454:	2001      	movs	r0, #1
 8003456:	e7fb      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8003458:	2001      	movs	r0, #1
 800345a:	e7f9      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
 800345c:	2001      	movs	r0, #1
 800345e:	e7f7      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
 8003460:	2001      	movs	r0, #1
 8003462:	e7f5      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
 8003464:	2001      	movs	r0, #1
 8003466:	e7f3      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
 8003468:	2001      	movs	r0, #1
 800346a:	e7f1      	b.n	8003450 <HAL_RCC_OscConfig+0x3d4>
 800346c:	40023800 	.word	0x40023800
 8003470:	42470000 	.word	0x42470000

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003476:	4b26      	ldr	r3, [pc, #152]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b04      	cmp	r3, #4
 8003480:	d041      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0x92>
 8003482:	2b08      	cmp	r3, #8
 8003484:	d141      	bne.n	800350a <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003486:	4b22      	ldr	r3, [pc, #136]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003494:	d012      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003496:	4b1e      	ldr	r3, [pc, #120]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003498:	6859      	ldr	r1, [r3, #4]
 800349a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800349e:	481d      	ldr	r0, [pc, #116]	@ (8003514 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034a0:	2300      	movs	r3, #0
 80034a2:	fba1 0100 	umull	r0, r1, r1, r0
 80034a6:	f7fc fed3 	bl	8000250 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034aa:	4b19      	ldr	r3, [pc, #100]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80034b2:	3301      	adds	r3, #1
 80034b4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80034b6:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80034ba:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034bc:	4b14      	ldr	r3, [pc, #80]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034be:	6858      	ldr	r0, [r3, #4]
 80034c0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80034c4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80034c8:	ebbc 0c00 	subs.w	ip, ip, r0
 80034cc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80034d0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80034d4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80034d8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80034dc:	ebb1 010c 	subs.w	r1, r1, ip
 80034e0:	eb63 030e 	sbc.w	r3, r3, lr
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ea:	00c9      	lsls	r1, r1, #3
 80034ec:	eb11 0c00 	adds.w	ip, r1, r0
 80034f0:	f143 0300 	adc.w	r3, r3, #0
 80034f4:	0299      	lsls	r1, r3, #10
 80034f6:	2300      	movs	r3, #0
 80034f8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80034fc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003500:	f7fc fea6 	bl	8000250 <__aeabi_uldivmod>
 8003504:	e7d1      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8003506:	4803      	ldr	r0, [pc, #12]	@ (8003514 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003508:	e7d7      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800350a:	4803      	ldr	r0, [pc, #12]	@ (8003518 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 800350c:	e7d5      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x46>
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800
 8003514:	017d7840 	.word	0x017d7840
 8003518:	00f42400 	.word	0x00f42400

0800351c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800351c:	2800      	cmp	r0, #0
 800351e:	f000 809b 	beq.w	8003658 <HAL_RCC_ClockConfig+0x13c>
{
 8003522:	b570      	push	{r4, r5, r6, lr}
 8003524:	460d      	mov	r5, r1
 8003526:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003528:	4b4f      	ldr	r3, [pc, #316]	@ (8003668 <HAL_RCC_ClockConfig+0x14c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	428b      	cmp	r3, r1
 8003532:	d208      	bcs.n	8003546 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003534:	b2cb      	uxtb	r3, r1
 8003536:	4a4c      	ldr	r2, [pc, #304]	@ (8003668 <HAL_RCC_ClockConfig+0x14c>)
 8003538:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	6813      	ldr	r3, [r2, #0]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	428b      	cmp	r3, r1
 8003542:	f040 808b 	bne.w	800365c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	f013 0f02 	tst.w	r3, #2
 800354c:	d017      	beq.n	800357e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354e:	f013 0f04 	tst.w	r3, #4
 8003552:	d004      	beq.n	800355e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003554:	4a45      	ldr	r2, [pc, #276]	@ (800366c <HAL_RCC_ClockConfig+0x150>)
 8003556:	6893      	ldr	r3, [r2, #8]
 8003558:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800355c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	f013 0f08 	tst.w	r3, #8
 8003564:	d004      	beq.n	8003570 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003566:	4a41      	ldr	r2, [pc, #260]	@ (800366c <HAL_RCC_ClockConfig+0x150>)
 8003568:	6893      	ldr	r3, [r2, #8]
 800356a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800356e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003570:	4a3e      	ldr	r2, [pc, #248]	@ (800366c <HAL_RCC_ClockConfig+0x150>)
 8003572:	6893      	ldr	r3, [r2, #8]
 8003574:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003578:	68a1      	ldr	r1, [r4, #8]
 800357a:	430b      	orrs	r3, r1
 800357c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	f013 0f01 	tst.w	r3, #1
 8003584:	d032      	beq.n	80035ec <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003586:	6863      	ldr	r3, [r4, #4]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d021      	beq.n	80035d0 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358c:	1e9a      	subs	r2, r3, #2
 800358e:	2a01      	cmp	r2, #1
 8003590:	d925      	bls.n	80035de <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003592:	4a36      	ldr	r2, [pc, #216]	@ (800366c <HAL_RCC_ClockConfig+0x150>)
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	f012 0f02 	tst.w	r2, #2
 800359a:	d061      	beq.n	8003660 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359c:	4933      	ldr	r1, [pc, #204]	@ (800366c <HAL_RCC_ClockConfig+0x150>)
 800359e:	688a      	ldr	r2, [r1, #8]
 80035a0:	f022 0203 	bic.w	r2, r2, #3
 80035a4:	4313      	orrs	r3, r2
 80035a6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80035a8:	f7fe fa54 	bl	8001a54 <HAL_GetTick>
 80035ac:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	4b2f      	ldr	r3, [pc, #188]	@ (800366c <HAL_RCC_ClockConfig+0x150>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	6862      	ldr	r2, [r4, #4]
 80035b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80035bc:	d016      	beq.n	80035ec <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035be:	f7fe fa49 	bl	8001a54 <HAL_GetTick>
 80035c2:	1b80      	subs	r0, r0, r6
 80035c4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80035c8:	4298      	cmp	r0, r3
 80035ca:	d9f0      	bls.n	80035ae <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80035cc:	2003      	movs	r0, #3
 80035ce:	e042      	b.n	8003656 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d0:	4a26      	ldr	r2, [pc, #152]	@ (800366c <HAL_RCC_ClockConfig+0x150>)
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80035d8:	d1e0      	bne.n	800359c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80035da:	2001      	movs	r0, #1
 80035dc:	e03b      	b.n	8003656 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035de:	4a23      	ldr	r2, [pc, #140]	@ (800366c <HAL_RCC_ClockConfig+0x150>)
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80035e6:	d1d9      	bne.n	800359c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80035e8:	2001      	movs	r0, #1
 80035ea:	e034      	b.n	8003656 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003668 <HAL_RCC_ClockConfig+0x14c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	42ab      	cmp	r3, r5
 80035f6:	d907      	bls.n	8003608 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f8:	b2ea      	uxtb	r2, r5
 80035fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003668 <HAL_RCC_ClockConfig+0x14c>)
 80035fc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	42ab      	cmp	r3, r5
 8003606:	d12d      	bne.n	8003664 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	f013 0f04 	tst.w	r3, #4
 800360e:	d006      	beq.n	800361e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003610:	4a16      	ldr	r2, [pc, #88]	@ (800366c <HAL_RCC_ClockConfig+0x150>)
 8003612:	6893      	ldr	r3, [r2, #8]
 8003614:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8003618:	68e1      	ldr	r1, [r4, #12]
 800361a:	430b      	orrs	r3, r1
 800361c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	f013 0f08 	tst.w	r3, #8
 8003624:	d007      	beq.n	8003636 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003626:	4a11      	ldr	r2, [pc, #68]	@ (800366c <HAL_RCC_ClockConfig+0x150>)
 8003628:	6893      	ldr	r3, [r2, #8]
 800362a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800362e:	6921      	ldr	r1, [r4, #16]
 8003630:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003634:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003636:	f7ff ff1d 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 800363a:	4b0c      	ldr	r3, [pc, #48]	@ (800366c <HAL_RCC_ClockConfig+0x150>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003642:	4a0b      	ldr	r2, [pc, #44]	@ (8003670 <HAL_RCC_ClockConfig+0x154>)
 8003644:	5cd3      	ldrb	r3, [r2, r3]
 8003646:	40d8      	lsrs	r0, r3
 8003648:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <HAL_RCC_ClockConfig+0x158>)
 800364a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800364c:	4b0a      	ldr	r3, [pc, #40]	@ (8003678 <HAL_RCC_ClockConfig+0x15c>)
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	f000 fd6c 	bl	800412c <HAL_InitTick>
  return HAL_OK;
 8003654:	2000      	movs	r0, #0
}
 8003656:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003658:	2001      	movs	r0, #1
}
 800365a:	4770      	bx	lr
      return HAL_ERROR;
 800365c:	2001      	movs	r0, #1
 800365e:	e7fa      	b.n	8003656 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8003660:	2001      	movs	r0, #1
 8003662:	e7f8      	b.n	8003656 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003664:	2001      	movs	r0, #1
 8003666:	e7f6      	b.n	8003656 <HAL_RCC_ClockConfig+0x13a>
 8003668:	40023c00 	.word	0x40023c00
 800366c:	40023800 	.word	0x40023800
 8003670:	080084ec 	.word	0x080084ec
 8003674:	2000000c 	.word	0x2000000c
 8003678:	20000008 	.word	0x20000008

0800367c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800367c:	4b01      	ldr	r3, [pc, #4]	@ (8003684 <HAL_RCC_GetHCLKFreq+0x8>)
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	2000000c 	.word	0x2000000c

08003688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003688:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800368a:	f7ff fff7 	bl	800367c <HAL_RCC_GetHCLKFreq>
 800368e:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003696:	4a03      	ldr	r2, [pc, #12]	@ (80036a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003698:	5cd3      	ldrb	r3, [r2, r3]
}
 800369a:	40d8      	lsrs	r0, r3
 800369c:	bd08      	pop	{r3, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	080084e4 	.word	0x080084e4

080036a8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036a8:	230f      	movs	r3, #15
 80036aa:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036ac:	4b0b      	ldr	r3, [pc, #44]	@ (80036dc <HAL_RCC_GetClockConfig+0x34>)
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	f002 0203 	and.w	r2, r2, #3
 80036b4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80036bc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80036c4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	08db      	lsrs	r3, r3, #3
 80036ca:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80036ce:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036d0:	4b03      	ldr	r3, [pc, #12]	@ (80036e0 <HAL_RCC_GetClockConfig+0x38>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	600b      	str	r3, [r1, #0]
}
 80036da:	4770      	bx	lr
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40023c00 	.word	0x40023c00

080036e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e6:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e8:	6a03      	ldr	r3, [r0, #32]
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036f2:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036f4:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036f8:	680c      	ldr	r4, [r1, #0]
 80036fa:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036fc:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003700:	688b      	ldr	r3, [r1, #8]
 8003702:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003704:	4a0b      	ldr	r2, [pc, #44]	@ (8003734 <TIM_OC1_SetConfig+0x50>)
 8003706:	4290      	cmp	r0, r2
 8003708:	d006      	beq.n	8003718 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800370a:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800370c:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800370e:	684a      	ldr	r2, [r1, #4]
 8003710:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003712:	6203      	str	r3, [r0, #32]
}
 8003714:	bc30      	pop	{r4, r5}
 8003716:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003718:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800371c:	68ca      	ldr	r2, [r1, #12]
 800371e:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8003720:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003724:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003728:	694a      	ldr	r2, [r1, #20]
 800372a:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800372c:	698d      	ldr	r5, [r1, #24]
 800372e:	4315      	orrs	r5, r2
 8003730:	e7eb      	b.n	800370a <TIM_OC1_SetConfig+0x26>
 8003732:	bf00      	nop
 8003734:	40010000 	.word	0x40010000

08003738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003738:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800373a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800373c:	6a02      	ldr	r2, [r0, #32]
 800373e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003742:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003744:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003746:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003748:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800374c:	680d      	ldr	r5, [r1, #0]
 800374e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003754:	688a      	ldr	r2, [r1, #8]
 8003756:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800375a:	4a0d      	ldr	r2, [pc, #52]	@ (8003790 <TIM_OC3_SetConfig+0x58>)
 800375c:	4290      	cmp	r0, r2
 800375e:	d006      	beq.n	800376e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003760:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003762:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003764:	684a      	ldr	r2, [r1, #4]
 8003766:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003768:	6203      	str	r3, [r0, #32]
}
 800376a:	bc30      	pop	{r4, r5}
 800376c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800376e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003772:	68ca      	ldr	r2, [r1, #12]
 8003774:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003778:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800377c:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003780:	694a      	ldr	r2, [r1, #20]
 8003782:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003786:	698a      	ldr	r2, [r1, #24]
 8003788:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 800378c:	e7e8      	b.n	8003760 <TIM_OC3_SetConfig+0x28>
 800378e:	bf00      	nop
 8003790:	40010000 	.word	0x40010000

08003794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003794:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003796:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003798:	6a02      	ldr	r2, [r0, #32]
 800379a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800379e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037a2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037a4:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037a8:	680d      	ldr	r5, [r1, #0]
 80037aa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037b2:	688d      	ldr	r5, [r1, #8]
 80037b4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b8:	4d07      	ldr	r5, [pc, #28]	@ (80037d8 <TIM_OC4_SetConfig+0x44>)
 80037ba:	42a8      	cmp	r0, r5
 80037bc:	d006      	beq.n	80037cc <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037be:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037c2:	684a      	ldr	r2, [r1, #4]
 80037c4:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c6:	6203      	str	r3, [r0, #32]
}
 80037c8:	bc30      	pop	{r4, r5}
 80037ca:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037cc:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037d0:	694d      	ldr	r5, [r1, #20]
 80037d2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80037d6:	e7f2      	b.n	80037be <TIM_OC4_SetConfig+0x2a>
 80037d8:	40010000 	.word	0x40010000

080037dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037dc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037de:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037e0:	6a04      	ldr	r4, [r0, #32]
 80037e2:	f024 0401 	bic.w	r4, r4, #1
 80037e6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037ea:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037ee:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037f2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80037f6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037f8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80037fa:	6203      	str	r3, [r0, #32]
}
 80037fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003800:	4770      	bx	lr

08003802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003802:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003804:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003806:	6a04      	ldr	r4, [r0, #32]
 8003808:	f024 0410 	bic.w	r4, r4, #16
 800380c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800380e:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003810:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003814:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003818:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800381c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003820:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003822:	6203      	str	r3, [r0, #32]
}
 8003824:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003828:	4770      	bx	lr

0800382a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800382a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800382c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003830:	430b      	orrs	r3, r1
 8003832:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003836:	6083      	str	r3, [r0, #8]
}
 8003838:	4770      	bx	lr
	...

0800383c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800383c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003840:	2b01      	cmp	r3, #1
 8003842:	d12a      	bne.n	800389a <HAL_TIM_Base_Start+0x5e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	2302      	movs	r3, #2
 8003846:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800384a:	6803      	ldr	r3, [r0, #0]
 800384c:	4a15      	ldr	r2, [pc, #84]	@ (80038a4 <HAL_TIM_Base_Start+0x68>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <HAL_TIM_Base_Start+0x48>
 8003852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003856:	d015      	beq.n	8003884 <HAL_TIM_Base_Start+0x48>
 8003858:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800385c:	4293      	cmp	r3, r2
 800385e:	d011      	beq.n	8003884 <HAL_TIM_Base_Start+0x48>
 8003860:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003864:	4293      	cmp	r3, r2
 8003866:	d00d      	beq.n	8003884 <HAL_TIM_Base_Start+0x48>
 8003868:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_TIM_Base_Start+0x48>
 8003870:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8003874:	4293      	cmp	r3, r2
 8003876:	d005      	beq.n	8003884 <HAL_TIM_Base_Start+0x48>
    __HAL_TIM_ENABLE(htim);
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003880:	2000      	movs	r0, #0
 8003882:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388a:	2a06      	cmp	r2, #6
 800388c:	d007      	beq.n	800389e <HAL_TIM_Base_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003896:	2000      	movs	r0, #0
 8003898:	4770      	bx	lr
    return HAL_ERROR;
 800389a:	2001      	movs	r0, #1
 800389c:	4770      	bx	lr
  return HAL_OK;
 800389e:	2000      	movs	r0, #0
}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40010000 	.word	0x40010000

080038a8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80038a8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d12f      	bne.n	8003910 <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	2302      	movs	r3, #2
 80038b2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038b6:	6802      	ldr	r2, [r0, #0]
 80038b8:	68d3      	ldr	r3, [r2, #12]
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c0:	6803      	ldr	r3, [r0, #0]
 80038c2:	4a15      	ldr	r2, [pc, #84]	@ (8003918 <HAL_TIM_Base_Start_IT+0x70>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d018      	beq.n	80038fa <HAL_TIM_Base_Start_IT+0x52>
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038cc:	d015      	beq.n	80038fa <HAL_TIM_Base_Start_IT+0x52>
 80038ce:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d011      	beq.n	80038fa <HAL_TIM_Base_Start_IT+0x52>
 80038d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00d      	beq.n	80038fa <HAL_TIM_Base_Start_IT+0x52>
 80038de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d009      	beq.n	80038fa <HAL_TIM_Base_Start_IT+0x52>
 80038e6:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d005      	beq.n	80038fa <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80038f6:	2000      	movs	r0, #0
 80038f8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003900:	2a06      	cmp	r2, #6
 8003902:	d007      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800390c:	2000      	movs	r0, #0
 800390e:	4770      	bx	lr
    return HAL_ERROR;
 8003910:	2001      	movs	r0, #1
 8003912:	4770      	bx	lr
  return HAL_OK;
 8003914:	2000      	movs	r0, #0
}
 8003916:	4770      	bx	lr
 8003918:	40010000 	.word	0x40010000

0800391c <HAL_TIM_OC_MspInit>:
}
 800391c:	4770      	bx	lr

0800391e <HAL_TIM_IC_CaptureCallback>:
}
 800391e:	4770      	bx	lr

08003920 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003920:	4770      	bx	lr

08003922 <HAL_TIM_TriggerCallback>:
}
 8003922:	4770      	bx	lr

08003924 <HAL_TIM_IRQHandler>:
{
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8003928:	6803      	ldr	r3, [r0, #0]
 800392a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800392c:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800392e:	f015 0f02 	tst.w	r5, #2
 8003932:	d010      	beq.n	8003956 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003934:	f016 0f02 	tst.w	r6, #2
 8003938:	d00d      	beq.n	8003956 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800393a:	f06f 0202 	mvn.w	r2, #2
 800393e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003940:	2301      	movs	r3, #1
 8003942:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003944:	6803      	ldr	r3, [r0, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f013 0f03 	tst.w	r3, #3
 800394c:	d05e      	beq.n	8003a0c <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 800394e:	f7ff ffe6 	bl	800391e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003952:	2300      	movs	r3, #0
 8003954:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003956:	f015 0f04 	tst.w	r5, #4
 800395a:	d012      	beq.n	8003982 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800395c:	f016 0f04 	tst.w	r6, #4
 8003960:	d00f      	beq.n	8003982 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	f06f 0204 	mvn.w	r2, #4
 8003968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800396a:	2302      	movs	r3, #2
 800396c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003976:	d04f      	beq.n	8003a18 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8003978:	4620      	mov	r0, r4
 800397a:	f7ff ffd0 	bl	800391e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397e:	2300      	movs	r3, #0
 8003980:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003982:	f015 0f08 	tst.w	r5, #8
 8003986:	d012      	beq.n	80039ae <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003988:	f016 0f08 	tst.w	r6, #8
 800398c:	d00f      	beq.n	80039ae <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	f06f 0208 	mvn.w	r2, #8
 8003994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003996:	2304      	movs	r3, #4
 8003998:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f013 0f03 	tst.w	r3, #3
 80039a2:	d040      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80039a4:	4620      	mov	r0, r4
 80039a6:	f7ff ffba 	bl	800391e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039aa:	2300      	movs	r3, #0
 80039ac:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039ae:	f015 0f10 	tst.w	r5, #16
 80039b2:	d012      	beq.n	80039da <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039b4:	f016 0f10 	tst.w	r6, #16
 80039b8:	d00f      	beq.n	80039da <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	f06f 0210 	mvn.w	r2, #16
 80039c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039c2:	2308      	movs	r3, #8
 80039c4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80039ce:	d031      	beq.n	8003a34 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80039d0:	4620      	mov	r0, r4
 80039d2:	f7ff ffa4 	bl	800391e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d6:	2300      	movs	r3, #0
 80039d8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039da:	f015 0f01 	tst.w	r5, #1
 80039de:	d002      	beq.n	80039e6 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039e0:	f016 0f01 	tst.w	r6, #1
 80039e4:	d12d      	bne.n	8003a42 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039e6:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80039ea:	d002      	beq.n	80039f2 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039ec:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80039f0:	d12f      	bne.n	8003a52 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039f2:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80039f6:	d002      	beq.n	80039fe <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039f8:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80039fc:	d131      	bne.n	8003a62 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039fe:	f015 0f20 	tst.w	r5, #32
 8003a02:	d002      	beq.n	8003a0a <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a04:	f016 0f20 	tst.w	r6, #32
 8003a08:	d133      	bne.n	8003a72 <HAL_TIM_IRQHandler+0x14e>
}
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0c:	f7fd fa02 	bl	8000e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a10:	4620      	mov	r0, r4
 8003a12:	f7ff ff85 	bl	8003920 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a16:	e79c      	b.n	8003952 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f7fd f9fb 	bl	8000e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f7ff ff7e 	bl	8003920 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a24:	e7ab      	b.n	800397e <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	4620      	mov	r0, r4
 8003a28:	f7fd f9f4 	bl	8000e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f7ff ff77 	bl	8003920 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a32:	e7ba      	b.n	80039aa <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a34:	4620      	mov	r0, r4
 8003a36:	f7fd f9ed 	bl	8000e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f7ff ff70 	bl	8003920 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a40:	e7c9      	b.n	80039d6 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	f06f 0201 	mvn.w	r2, #1
 8003a48:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f7fd fa48 	bl	8000ee0 <HAL_TIM_PeriodElapsedCallback>
 8003a50:	e7c9      	b.n	80039e6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a58:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f000 fb64 	bl	8004128 <HAL_TIMEx_BreakCallback>
 8003a60:	e7c7      	b.n	80039f2 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a68:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f7ff ff59 	bl	8003922 <HAL_TIM_TriggerCallback>
 8003a70:	e7c5      	b.n	80039fe <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	f06f 0220 	mvn.w	r2, #32
 8003a78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f000 fb53 	bl	8004126 <HAL_TIMEx_CommutCallback>
}
 8003a80:	e7c3      	b.n	8003a0a <HAL_TIM_IRQHandler+0xe6>
	...

08003a84 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003a84:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a86:	4a29      	ldr	r2, [pc, #164]	@ (8003b2c <TIM_Base_SetConfig+0xa8>)
 8003a88:	4290      	cmp	r0, r2
 8003a8a:	d00e      	beq.n	8003aaa <TIM_Base_SetConfig+0x26>
 8003a8c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003a90:	d00b      	beq.n	8003aaa <TIM_Base_SetConfig+0x26>
 8003a92:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003a96:	4290      	cmp	r0, r2
 8003a98:	d007      	beq.n	8003aaa <TIM_Base_SetConfig+0x26>
 8003a9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a9e:	4290      	cmp	r0, r2
 8003aa0:	d003      	beq.n	8003aaa <TIM_Base_SetConfig+0x26>
 8003aa2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003aa6:	4290      	cmp	r0, r2
 8003aa8:	d103      	bne.n	8003ab2 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003aae:	684a      	ldr	r2, [r1, #4]
 8003ab0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b2c <TIM_Base_SetConfig+0xa8>)
 8003ab4:	4290      	cmp	r0, r2
 8003ab6:	d01a      	beq.n	8003aee <TIM_Base_SetConfig+0x6a>
 8003ab8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003abc:	d017      	beq.n	8003aee <TIM_Base_SetConfig+0x6a>
 8003abe:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003ac2:	4290      	cmp	r0, r2
 8003ac4:	d013      	beq.n	8003aee <TIM_Base_SetConfig+0x6a>
 8003ac6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003aca:	4290      	cmp	r0, r2
 8003acc:	d00f      	beq.n	8003aee <TIM_Base_SetConfig+0x6a>
 8003ace:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ad2:	4290      	cmp	r0, r2
 8003ad4:	d00b      	beq.n	8003aee <TIM_Base_SetConfig+0x6a>
 8003ad6:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8003ada:	4290      	cmp	r0, r2
 8003adc:	d007      	beq.n	8003aee <TIM_Base_SetConfig+0x6a>
 8003ade:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ae2:	4290      	cmp	r0, r2
 8003ae4:	d003      	beq.n	8003aee <TIM_Base_SetConfig+0x6a>
 8003ae6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003aea:	4290      	cmp	r0, r2
 8003aec:	d103      	bne.n	8003af6 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003af2:	68ca      	ldr	r2, [r1, #12]
 8003af4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003afa:	694a      	ldr	r2, [r1, #20]
 8003afc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003afe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b00:	688b      	ldr	r3, [r1, #8]
 8003b02:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b04:	680b      	ldr	r3, [r1, #0]
 8003b06:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b08:	4b08      	ldr	r3, [pc, #32]	@ (8003b2c <TIM_Base_SetConfig+0xa8>)
 8003b0a:	4298      	cmp	r0, r3
 8003b0c:	d00a      	beq.n	8003b24 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b12:	6903      	ldr	r3, [r0, #16]
 8003b14:	f013 0f01 	tst.w	r3, #1
 8003b18:	d003      	beq.n	8003b22 <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b1a:	6903      	ldr	r3, [r0, #16]
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	6103      	str	r3, [r0, #16]
}
 8003b22:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003b24:	690b      	ldr	r3, [r1, #16]
 8003b26:	6303      	str	r3, [r0, #48]	@ 0x30
 8003b28:	e7f1      	b.n	8003b0e <TIM_Base_SetConfig+0x8a>
 8003b2a:	bf00      	nop
 8003b2c:	40010000 	.word	0x40010000

08003b30 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003b30:	b340      	cbz	r0, 8003b84 <HAL_TIM_Base_Init+0x54>
{
 8003b32:	b510      	push	{r4, lr}
 8003b34:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b36:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003b3a:	b1f3      	cbz	r3, 8003b7a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b42:	4621      	mov	r1, r4
 8003b44:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b48:	f7ff ff9c 	bl	8003a84 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b52:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003b56:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003b5a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003b5e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b62:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b6a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003b6e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003b72:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003b76:	2000      	movs	r0, #0
}
 8003b78:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003b7a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003b7e:	f001 feb3 	bl	80058e8 <HAL_TIM_Base_MspInit>
 8003b82:	e7db      	b.n	8003b3c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003b84:	2001      	movs	r0, #1
}
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8003b88:	b340      	cbz	r0, 8003bdc <HAL_TIM_OC_Init+0x54>
{
 8003b8a:	b510      	push	{r4, lr}
 8003b8c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003b92:	b1f3      	cbz	r3, 8003bd2 <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b94:	2302      	movs	r3, #2
 8003b96:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003ba0:	f7ff ff70 	bl	8003a84 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003baa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003bae:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003bb2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003bb6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bc2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003bc6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003bca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003bce:	2000      	movs	r0, #0
}
 8003bd0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003bd2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8003bd6:	f7ff fea1 	bl	800391c <HAL_TIM_OC_MspInit>
 8003bda:	e7db      	b.n	8003b94 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8003bdc:	2001      	movs	r0, #1
}
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003be0:	b340      	cbz	r0, 8003c34 <HAL_TIM_PWM_Init+0x54>
{
 8003be2:	b510      	push	{r4, lr}
 8003be4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003be6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003bea:	b1f3      	cbz	r3, 8003c2a <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	2302      	movs	r3, #2
 8003bee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	f851 0b04 	ldr.w	r0, [r1], #4
 8003bf8:	f7ff ff44 	bl	8003a84 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c02:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003c06:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003c0a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003c0e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c12:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c1a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003c1e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003c22:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003c26:	2000      	movs	r0, #0
}
 8003c28:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003c2a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003c2e:	f001 fea7 	bl	8005980 <HAL_TIM_PWM_MspInit>
 8003c32:	e7db      	b.n	8003bec <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003c34:	2001      	movs	r0, #1
}
 8003c36:	4770      	bx	lr

08003c38 <TIM_OC2_SetConfig>:
{
 8003c38:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8003c3a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c3c:	6a02      	ldr	r2, [r0, #32]
 8003c3e:	f022 0210 	bic.w	r2, r2, #16
 8003c42:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003c44:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003c46:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c48:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c4c:	680d      	ldr	r5, [r1, #0]
 8003c4e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003c52:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c56:	688d      	ldr	r5, [r1, #8]
 8003c58:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c5c:	4d0c      	ldr	r5, [pc, #48]	@ (8003c90 <TIM_OC2_SetConfig+0x58>)
 8003c5e:	42a8      	cmp	r0, r5
 8003c60:	d006      	beq.n	8003c70 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8003c62:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003c64:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003c66:	684a      	ldr	r2, [r1, #4]
 8003c68:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003c6a:	6203      	str	r3, [r0, #32]
}
 8003c6c:	bc30      	pop	{r4, r5}
 8003c6e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c74:	68cd      	ldr	r5, [r1, #12]
 8003c76:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c7e:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c82:	694d      	ldr	r5, [r1, #20]
 8003c84:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c88:	698d      	ldr	r5, [r1, #24]
 8003c8a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003c8e:	e7e8      	b.n	8003c62 <TIM_OC2_SetConfig+0x2a>
 8003c90:	40010000 	.word	0x40010000

08003c94 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8003c94:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d028      	beq.n	8003cee <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8003c9c:	b510      	push	{r4, lr}
 8003c9e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003ca6:	2a0c      	cmp	r2, #12
 8003ca8:	d81c      	bhi.n	8003ce4 <HAL_TIM_OC_ConfigChannel+0x50>
 8003caa:	e8df f002 	tbb	[pc, r2]
 8003cae:	1b07      	.short	0x1b07
 8003cb0:	1b0c1b1b 	.word	0x1b0c1b1b
 8003cb4:	1b111b1b 	.word	0x1b111b1b
 8003cb8:	1b1b      	.short	0x1b1b
 8003cba:	16          	.byte	0x16
 8003cbb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cbc:	6800      	ldr	r0, [r0, #0]
 8003cbe:	f7ff fd11 	bl	80036e4 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003cc2:	2000      	movs	r0, #0
      break;
 8003cc4:	e00f      	b.n	8003ce6 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cc6:	6800      	ldr	r0, [r0, #0]
 8003cc8:	f7ff ffb6 	bl	8003c38 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003ccc:	2000      	movs	r0, #0
      break;
 8003cce:	e00a      	b.n	8003ce6 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cd0:	6800      	ldr	r0, [r0, #0]
 8003cd2:	f7ff fd31 	bl	8003738 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003cd6:	2000      	movs	r0, #0
      break;
 8003cd8:	e005      	b.n	8003ce6 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cda:	6800      	ldr	r0, [r0, #0]
 8003cdc:	f7ff fd5a 	bl	8003794 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003ce0:	2000      	movs	r0, #0
      break;
 8003ce2:	e000      	b.n	8003ce6 <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 8003ce4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003cec:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8003cee:	2002      	movs	r0, #2
}
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_TIM_PWM_ConfigChannel>:
{
 8003cf2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003cf4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d066      	beq.n	8003dca <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	460d      	mov	r5, r1
 8003d00:	2301      	movs	r3, #1
 8003d02:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003d06:	2a0c      	cmp	r2, #12
 8003d08:	d85a      	bhi.n	8003dc0 <HAL_TIM_PWM_ConfigChannel+0xce>
 8003d0a:	e8df f002 	tbb	[pc, r2]
 8003d0e:	5907      	.short	0x5907
 8003d10:	591b5959 	.word	0x591b5959
 8003d14:	59305959 	.word	0x59305959
 8003d18:	5959      	.short	0x5959
 8003d1a:	44          	.byte	0x44
 8003d1b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d1c:	6800      	ldr	r0, [r0, #0]
 8003d1e:	f7ff fce1 	bl	80036e4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d22:	6822      	ldr	r2, [r4, #0]
 8003d24:	6993      	ldr	r3, [r2, #24]
 8003d26:	f043 0308 	orr.w	r3, r3, #8
 8003d2a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d2c:	6822      	ldr	r2, [r4, #0]
 8003d2e:	6993      	ldr	r3, [r2, #24]
 8003d30:	f023 0304 	bic.w	r3, r3, #4
 8003d34:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d36:	6822      	ldr	r2, [r4, #0]
 8003d38:	6993      	ldr	r3, [r2, #24]
 8003d3a:	6929      	ldr	r1, [r5, #16]
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003d40:	2000      	movs	r0, #0
      break;
 8003d42:	e03e      	b.n	8003dc2 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d44:	6800      	ldr	r0, [r0, #0]
 8003d46:	f7ff ff77 	bl	8003c38 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d4a:	6822      	ldr	r2, [r4, #0]
 8003d4c:	6993      	ldr	r3, [r2, #24]
 8003d4e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d52:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d54:	6822      	ldr	r2, [r4, #0]
 8003d56:	6993      	ldr	r3, [r2, #24]
 8003d58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d5c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d5e:	6822      	ldr	r2, [r4, #0]
 8003d60:	6993      	ldr	r3, [r2, #24]
 8003d62:	6929      	ldr	r1, [r5, #16]
 8003d64:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d68:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6a:	2000      	movs	r0, #0
      break;
 8003d6c:	e029      	b.n	8003dc2 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d6e:	6800      	ldr	r0, [r0, #0]
 8003d70:	f7ff fce2 	bl	8003738 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d74:	6822      	ldr	r2, [r4, #0]
 8003d76:	69d3      	ldr	r3, [r2, #28]
 8003d78:	f043 0308 	orr.w	r3, r3, #8
 8003d7c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d7e:	6822      	ldr	r2, [r4, #0]
 8003d80:	69d3      	ldr	r3, [r2, #28]
 8003d82:	f023 0304 	bic.w	r3, r3, #4
 8003d86:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d88:	6822      	ldr	r2, [r4, #0]
 8003d8a:	69d3      	ldr	r3, [r2, #28]
 8003d8c:	6929      	ldr	r1, [r5, #16]
 8003d8e:	430b      	orrs	r3, r1
 8003d90:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003d92:	2000      	movs	r0, #0
      break;
 8003d94:	e015      	b.n	8003dc2 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d96:	6800      	ldr	r0, [r0, #0]
 8003d98:	f7ff fcfc 	bl	8003794 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d9c:	6822      	ldr	r2, [r4, #0]
 8003d9e:	69d3      	ldr	r3, [r2, #28]
 8003da0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003da4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003da6:	6822      	ldr	r2, [r4, #0]
 8003da8:	69d3      	ldr	r3, [r2, #28]
 8003daa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dae:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003db0:	6822      	ldr	r2, [r4, #0]
 8003db2:	69d3      	ldr	r3, [r2, #28]
 8003db4:	6929      	ldr	r1, [r5, #16]
 8003db6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003dba:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003dbc:	2000      	movs	r0, #0
      break;
 8003dbe:	e000      	b.n	8003dc2 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003dc0:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003dc8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003dca:	2002      	movs	r0, #2
 8003dcc:	e7fc      	b.n	8003dc8 <HAL_TIM_PWM_ConfigChannel+0xd6>

08003dce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dce:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dd0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dd2:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dd6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de0:	6082      	str	r2, [r0, #8]
}
 8003de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003de8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d078      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0xfa>
{
 8003df0:	b510      	push	{r4, lr}
 8003df2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003df4:	2301      	movs	r3, #1
 8003df6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003e00:	6802      	ldr	r2, [r0, #0]
 8003e02:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e08:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003e0c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003e0e:	680b      	ldr	r3, [r1, #0]
 8003e10:	2b60      	cmp	r3, #96	@ 0x60
 8003e12:	d04c      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0xc6>
 8003e14:	d823      	bhi.n	8003e5e <HAL_TIM_ConfigClockSource+0x76>
 8003e16:	2b40      	cmp	r3, #64	@ 0x40
 8003e18:	d054      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0xdc>
 8003e1a:	d811      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x58>
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d003      	beq.n	8003e28 <HAL_TIM_ConfigClockSource+0x40>
 8003e20:	d80a      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x50>
 8003e22:	b10b      	cbz	r3, 8003e28 <HAL_TIM_ConfigClockSource+0x40>
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d105      	bne.n	8003e34 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6820      	ldr	r0, [r4, #0]
 8003e2c:	f7ff fcfd 	bl	800382a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003e30:	2000      	movs	r0, #0
      break;
 8003e32:	e028      	b.n	8003e86 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003e34:	2001      	movs	r0, #1
 8003e36:	e026      	b.n	8003e86 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003e38:	2b30      	cmp	r3, #48	@ 0x30
 8003e3a:	d0f5      	beq.n	8003e28 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	e022      	b.n	8003e86 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003e40:	2b50      	cmp	r3, #80	@ 0x50
 8003e42:	d10a      	bne.n	8003e5a <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e44:	68ca      	ldr	r2, [r1, #12]
 8003e46:	6849      	ldr	r1, [r1, #4]
 8003e48:	6800      	ldr	r0, [r0, #0]
 8003e4a:	f7ff fcc7 	bl	80037dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4e:	2150      	movs	r1, #80	@ 0x50
 8003e50:	6820      	ldr	r0, [r4, #0]
 8003e52:	f7ff fcea 	bl	800382a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003e56:	2000      	movs	r0, #0
      break;
 8003e58:	e015      	b.n	8003e86 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	e013      	b.n	8003e86 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e62:	d03a      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0xf2>
 8003e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e68:	d014      	beq.n	8003e94 <HAL_TIM_ConfigClockSource+0xac>
 8003e6a:	2b70      	cmp	r3, #112	@ 0x70
 8003e6c:	d137      	bne.n	8003ede <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8003e6e:	68cb      	ldr	r3, [r1, #12]
 8003e70:	684a      	ldr	r2, [r1, #4]
 8003e72:	6889      	ldr	r1, [r1, #8]
 8003e74:	6800      	ldr	r0, [r0, #0]
 8003e76:	f7ff ffaa 	bl	8003dce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e7a:	6822      	ldr	r2, [r4, #0]
 8003e7c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e7e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003e82:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e84:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003e92:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8003e94:	68cb      	ldr	r3, [r1, #12]
 8003e96:	684a      	ldr	r2, [r1, #4]
 8003e98:	6889      	ldr	r1, [r1, #8]
 8003e9a:	6800      	ldr	r0, [r0, #0]
 8003e9c:	f7ff ff97 	bl	8003dce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ea0:	6822      	ldr	r2, [r4, #0]
 8003ea2:	6893      	ldr	r3, [r2, #8]
 8003ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ea8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2000      	movs	r0, #0
      break;
 8003eac:	e7eb      	b.n	8003e86 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eae:	68ca      	ldr	r2, [r1, #12]
 8003eb0:	6849      	ldr	r1, [r1, #4]
 8003eb2:	6800      	ldr	r0, [r0, #0]
 8003eb4:	f7ff fca5 	bl	8003802 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003eb8:	2160      	movs	r1, #96	@ 0x60
 8003eba:	6820      	ldr	r0, [r4, #0]
 8003ebc:	f7ff fcb5 	bl	800382a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003ec0:	2000      	movs	r0, #0
      break;
 8003ec2:	e7e0      	b.n	8003e86 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec4:	68ca      	ldr	r2, [r1, #12]
 8003ec6:	6849      	ldr	r1, [r1, #4]
 8003ec8:	6800      	ldr	r0, [r0, #0]
 8003eca:	f7ff fc87 	bl	80037dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ece:	2140      	movs	r1, #64	@ 0x40
 8003ed0:	6820      	ldr	r0, [r4, #0]
 8003ed2:	f7ff fcaa 	bl	800382a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003ed6:	2000      	movs	r0, #0
      break;
 8003ed8:	e7d5      	b.n	8003e86 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003eda:	2000      	movs	r0, #0
 8003edc:	e7d3      	b.n	8003e86 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003ede:	2001      	movs	r0, #1
 8003ee0:	e7d1      	b.n	8003e86 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8003ee2:	2002      	movs	r0, #2
}
 8003ee4:	4770      	bx	lr

08003ee6 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ee6:	f001 011f 	and.w	r1, r1, #31
 8003eea:	f04f 0c01 	mov.w	ip, #1
 8003eee:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ef2:	6a03      	ldr	r3, [r0, #32]
 8003ef4:	ea23 030c 	bic.w	r3, r3, ip
 8003ef8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003efa:	6a03      	ldr	r3, [r0, #32]
 8003efc:	408a      	lsls	r2, r1
 8003efe:	4313      	orrs	r3, r2
 8003f00:	6203      	str	r3, [r0, #32]
}
 8003f02:	4770      	bx	lr

08003f04 <HAL_TIM_PWM_Start_IT>:
{
 8003f04:	b510      	push	{r4, lr}
 8003f06:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f08:	4608      	mov	r0, r1
 8003f0a:	2900      	cmp	r1, #0
 8003f0c:	d137      	bne.n	8003f7e <HAL_TIM_PWM_Start_IT+0x7a>
 8003f0e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003f12:	3b01      	subs	r3, #1
 8003f14:	bf18      	it	ne
 8003f16:	2301      	movne	r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f040 8095 	bne.w	8004048 <HAL_TIM_PWM_Start_IT+0x144>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d143      	bne.n	8003faa <HAL_TIM_PWM_Start_IT+0xa6>
 8003f22:	2302      	movs	r3, #2
 8003f24:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f28:	6822      	ldr	r2, [r4, #0]
 8003f2a:	68d3      	ldr	r3, [r2, #12]
 8003f2c:	f043 0302 	orr.w	r3, r3, #2
 8003f30:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f32:	2201      	movs	r2, #1
 8003f34:	4601      	mov	r1, r0
 8003f36:	6820      	ldr	r0, [r4, #0]
 8003f38:	f7ff ffd5 	bl	8003ee6 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	4a45      	ldr	r2, [pc, #276]	@ (8004054 <HAL_TIM_PWM_Start_IT+0x150>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d071      	beq.n	8004028 <HAL_TIM_PWM_Start_IT+0x124>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	4a43      	ldr	r2, [pc, #268]	@ (8004054 <HAL_TIM_PWM_Start_IT+0x150>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d072      	beq.n	8004032 <HAL_TIM_PWM_Start_IT+0x12e>
 8003f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f50:	d06f      	beq.n	8004032 <HAL_TIM_PWM_Start_IT+0x12e>
 8003f52:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d06b      	beq.n	8004032 <HAL_TIM_PWM_Start_IT+0x12e>
 8003f5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d067      	beq.n	8004032 <HAL_TIM_PWM_Start_IT+0x12e>
 8003f62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d063      	beq.n	8004032 <HAL_TIM_PWM_Start_IT+0x12e>
 8003f6a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d05f      	beq.n	8004032 <HAL_TIM_PWM_Start_IT+0x12e>
      __HAL_TIM_ENABLE(htim);
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	f042 0201 	orr.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	e065      	b.n	800404a <HAL_TIM_PWM_Start_IT+0x146>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f7e:	2904      	cmp	r1, #4
 8003f80:	d007      	beq.n	8003f92 <HAL_TIM_PWM_Start_IT+0x8e>
 8003f82:	2908      	cmp	r1, #8
 8003f84:	d00b      	beq.n	8003f9e <HAL_TIM_PWM_Start_IT+0x9a>
 8003f86:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	bf18      	it	ne
 8003f8e:	2301      	movne	r3, #1
 8003f90:	e7c2      	b.n	8003f18 <HAL_TIM_PWM_Start_IT+0x14>
 8003f92:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8003f96:	3b01      	subs	r3, #1
 8003f98:	bf18      	it	ne
 8003f9a:	2301      	movne	r3, #1
 8003f9c:	e7bc      	b.n	8003f18 <HAL_TIM_PWM_Start_IT+0x14>
 8003f9e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	bf18      	it	ne
 8003fa6:	2301      	movne	r3, #1
 8003fa8:	e7b6      	b.n	8003f18 <HAL_TIM_PWM_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003faa:	2804      	cmp	r0, #4
 8003fac:	d024      	beq.n	8003ff8 <HAL_TIM_PWM_Start_IT+0xf4>
 8003fae:	2808      	cmp	r0, #8
 8003fb0:	d02b      	beq.n	800400a <HAL_TIM_PWM_Start_IT+0x106>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  switch (Channel)
 8003fb8:	280c      	cmp	r0, #12
 8003fba:	d847      	bhi.n	800404c <HAL_TIM_PWM_Start_IT+0x148>
 8003fbc:	a301      	add	r3, pc, #4	@ (adr r3, 8003fc4 <HAL_TIM_PWM_Start_IT+0xc0>)
 8003fbe:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003f29 	.word	0x08003f29
 8003fc8:	0800404d 	.word	0x0800404d
 8003fcc:	0800404d 	.word	0x0800404d
 8003fd0:	0800404d 	.word	0x0800404d
 8003fd4:	08003fff 	.word	0x08003fff
 8003fd8:	0800404d 	.word	0x0800404d
 8003fdc:	0800404d 	.word	0x0800404d
 8003fe0:	0800404d 	.word	0x0800404d
 8003fe4:	08004011 	.word	0x08004011
 8003fe8:	0800404d 	.word	0x0800404d
 8003fec:	0800404d 	.word	0x0800404d
 8003ff0:	0800404d 	.word	0x0800404d
 8003ff4:	0800401d 	.word	0x0800401d
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	68d3      	ldr	r3, [r2, #12]
 8004002:	f043 0304 	orr.w	r3, r3, #4
 8004006:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004008:	e793      	b.n	8003f32 <HAL_TIM_PWM_Start_IT+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800400a:	2302      	movs	r3, #2
 800400c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004010:	6822      	ldr	r2, [r4, #0]
 8004012:	68d3      	ldr	r3, [r2, #12]
 8004014:	f043 0308 	orr.w	r3, r3, #8
 8004018:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800401a:	e78a      	b.n	8003f32 <HAL_TIM_PWM_Start_IT+0x2e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800401c:	6822      	ldr	r2, [r4, #0]
 800401e:	68d3      	ldr	r3, [r2, #12]
 8004020:	f043 0310 	orr.w	r3, r3, #16
 8004024:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004026:	e784      	b.n	8003f32 <HAL_TIM_PWM_Start_IT+0x2e>
      __HAL_TIM_MOE_ENABLE(htim);
 8004028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800402a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800402e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004030:	e788      	b.n	8003f44 <HAL_TIM_PWM_Start_IT+0x40>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004038:	2a06      	cmp	r2, #6
 800403a:	d009      	beq.n	8004050 <HAL_TIM_PWM_Start_IT+0x14c>
        __HAL_TIM_ENABLE(htim);
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	2000      	movs	r0, #0
 8004046:	e000      	b.n	800404a <HAL_TIM_PWM_Start_IT+0x146>
    return HAL_ERROR;
 8004048:	2001      	movs	r0, #1
}
 800404a:	bd10      	pop	{r4, pc}
  switch (Channel)
 800404c:	2001      	movs	r0, #1
 800404e:	e7fc      	b.n	800404a <HAL_TIM_PWM_Start_IT+0x146>
 8004050:	2000      	movs	r0, #0
 8004052:	e7fa      	b.n	800404a <HAL_TIM_PWM_Start_IT+0x146>
 8004054:	40010000 	.word	0x40010000

08004058 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004058:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800405c:	2a01      	cmp	r2, #1
 800405e:	d035      	beq.n	80040cc <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8004060:	b410      	push	{r4}
 8004062:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004064:	2201      	movs	r2, #1
 8004066:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406a:	2202      	movs	r2, #2
 800406c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004070:	6802      	ldr	r2, [r0, #0]
 8004072:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004074:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004076:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800407a:	6808      	ldr	r0, [r1, #0]
 800407c:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004080:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4812      	ldr	r0, [pc, #72]	@ (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8004086:	4282      	cmp	r2, r0
 8004088:	d012      	beq.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800408a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800408e:	d00f      	beq.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004090:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8004094:	4282      	cmp	r2, r0
 8004096:	d00b      	beq.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004098:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800409c:	4282      	cmp	r2, r0
 800409e:	d007      	beq.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80040a0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80040a4:	4282      	cmp	r2, r0
 80040a6:	d003      	beq.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80040a8:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 80040ac:	4282      	cmp	r2, r0
 80040ae:	d104      	bne.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040b0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040b4:	6849      	ldr	r1, [r1, #4]
 80040b6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040b8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040c0:	2000      	movs	r0, #0
 80040c2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80040c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040ca:	4770      	bx	lr
  __HAL_LOCK(htim);
 80040cc:	2002      	movs	r0, #2
}
 80040ce:	4770      	bx	lr
 80040d0:	40010000 	.word	0x40010000

080040d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040d4:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040d6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d021      	beq.n	8004122 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 80040de:	2301      	movs	r3, #1
 80040e0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040e4:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ea:	6888      	ldr	r0, [r1, #8]
 80040ec:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040f2:	6848      	ldr	r0, [r1, #4]
 80040f4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040fa:	6808      	ldr	r0, [r1, #0]
 80040fc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004102:	6908      	ldr	r0, [r1, #16]
 8004104:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004106:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800410a:	6948      	ldr	r0, [r1, #20]
 800410c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800410e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004112:	69c9      	ldr	r1, [r1, #28]
 8004114:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004116:	6811      	ldr	r1, [r2, #0]
 8004118:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800411a:	2000      	movs	r0, #0
 800411c:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8004120:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004122:	2002      	movs	r0, #2
}
 8004124:	4770      	bx	lr

08004126 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004126:	4770      	bx	lr

08004128 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004128:	4770      	bx	lr
	...

0800412c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800412c:	b530      	push	{r4, r5, lr}
 800412e:	b089      	sub	sp, #36	@ 0x24
 8004130:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8004132:	2400      	movs	r4, #0
 8004134:	9401      	str	r4, [sp, #4]
 8004136:	4b1d      	ldr	r3, [pc, #116]	@ (80041ac <HAL_InitTick+0x80>)
 8004138:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800413a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800413e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004142:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800414a:	a902      	add	r1, sp, #8
 800414c:	a803      	add	r0, sp, #12
 800414e:	f7ff faab 	bl	80036a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004152:	f7ff fa99 	bl	8003688 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004156:	4a16      	ldr	r2, [pc, #88]	@ (80041b0 <HAL_InitTick+0x84>)
 8004158:	fba2 2300 	umull	r2, r3, r2, r0
 800415c:	0c9b      	lsrs	r3, r3, #18
 800415e:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8004160:	4814      	ldr	r0, [pc, #80]	@ (80041b4 <HAL_InitTick+0x88>)
 8004162:	4a15      	ldr	r2, [pc, #84]	@ (80041b8 <HAL_InitTick+0x8c>)
 8004164:	6002      	str	r2, [r0, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8004166:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800416a:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800416c:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 800416e:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004170:	6084      	str	r4, [r0, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004172:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8004174:	f7ff fcdc 	bl	8003b30 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8004178:	4604      	mov	r4, r0
 800417a:	b110      	cbz	r0, 8004182 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 800417c:	4620      	mov	r0, r4
 800417e:	b009      	add	sp, #36	@ 0x24
 8004180:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim11);
 8004182:	480c      	ldr	r0, [pc, #48]	@ (80041b4 <HAL_InitTick+0x88>)
 8004184:	f7ff fb90 	bl	80038a8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8004188:	4604      	mov	r4, r0
 800418a:	2800      	cmp	r0, #0
 800418c:	d1f6      	bne.n	800417c <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800418e:	201a      	movs	r0, #26
 8004190:	f7fd fe6e 	bl	8001e70 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004194:	2d0f      	cmp	r5, #15
 8004196:	d901      	bls.n	800419c <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8004198:	2401      	movs	r4, #1
 800419a:	e7ef      	b.n	800417c <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 800419c:	2200      	movs	r2, #0
 800419e:	4629      	mov	r1, r5
 80041a0:	201a      	movs	r0, #26
 80041a2:	f7fd fe55 	bl	8001e50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80041a6:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <HAL_InitTick+0x90>)
 80041a8:	601d      	str	r5, [r3, #0]
 80041aa:	e7e7      	b.n	800417c <HAL_InitTick+0x50>
 80041ac:	40023800 	.word	0x40023800
 80041b0:	431bde83 	.word	0x431bde83
 80041b4:	200045f8 	.word	0x200045f8
 80041b8:	40014800 	.word	0x40014800
 80041bc:	20000008 	.word	0x20000008

080041c0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041c0:	e7fe      	b.n	80041c0 <NMI_Handler>

080041c2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041c2:	e7fe      	b.n	80041c2 <HardFault_Handler>

080041c4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041c4:	e7fe      	b.n	80041c4 <MemManage_Handler>

080041c6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041c6:	e7fe      	b.n	80041c6 <BusFault_Handler>

080041c8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041c8:	e7fe      	b.n	80041c8 <UsageFault_Handler>

080041ca <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041ca:	4770      	bx	lr

080041cc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80041cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041ce:	4803      	ldr	r0, [pc, #12]	@ (80041dc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80041d0:	f7ff fba8 	bl	8003924 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80041d4:	4802      	ldr	r0, [pc, #8]	@ (80041e0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80041d6:	f7ff fba5 	bl	8003924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80041da:	bd08      	pop	{r3, pc}
 80041dc:	20004c1c 	.word	0x20004c1c
 80041e0:	200045f8 	.word	0x200045f8

080041e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041e6:	4802      	ldr	r0, [pc, #8]	@ (80041f0 <TIM2_IRQHandler+0xc>)
 80041e8:	f7ff fb9c 	bl	8003924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041ec:	bd08      	pop	{r3, pc}
 80041ee:	bf00      	nop
 80041f0:	20004bd4 	.word	0x20004bd4

080041f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80041f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80041f6:	4802      	ldr	r0, [pc, #8]	@ (8004200 <DMA2_Stream0_IRQHandler+0xc>)
 80041f8:	f7fd ff0a 	bl	8002010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80041fc:	bd08      	pop	{r3, pc}
 80041fe:	bf00      	nop
 8004200:	20000168 	.word	0x20000168

08004204 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004204:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004206:	4802      	ldr	r0, [pc, #8]	@ (8004210 <OTG_FS_IRQHandler+0xc>)
 8004208:	f7fe fc2d 	bl	8002a66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800420c:	bd08      	pop	{r3, pc}
 800420e:	bf00      	nop
 8004210:	20005a8c 	.word	0x20005a8c

08004214 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004214:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800421a:	9b01      	ldr	r3, [sp, #4]
 800421c:	3301      	adds	r3, #1
 800421e:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8004220:	9b01      	ldr	r3, [sp, #4]
 8004222:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004226:	d815      	bhi.n	8004254 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004228:	6903      	ldr	r3, [r0, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	daf5      	bge.n	800421a <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004232:	6903      	ldr	r3, [r0, #16]
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 800423a:	9b01      	ldr	r3, [sp, #4]
 800423c:	3301      	adds	r3, #1
 800423e:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8004240:	9b01      	ldr	r3, [sp, #4]
 8004242:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004246:	d808      	bhi.n	800425a <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004248:	6903      	ldr	r3, [r0, #16]
 800424a:	f013 0f01 	tst.w	r3, #1
 800424e:	d1f4      	bne.n	800423a <USB_CoreReset+0x26>

  return HAL_OK;
 8004250:	2000      	movs	r0, #0
 8004252:	e000      	b.n	8004256 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8004254:	2003      	movs	r0, #3
}
 8004256:	b002      	add	sp, #8
 8004258:	4770      	bx	lr
      return HAL_TIMEOUT;
 800425a:	2003      	movs	r0, #3
 800425c:	e7fb      	b.n	8004256 <USB_CoreReset+0x42>

0800425e <USB_CoreInit>:
{
 800425e:	b084      	sub	sp, #16
 8004260:	b510      	push	{r4, lr}
 8004262:	4604      	mov	r4, r0
 8004264:	a803      	add	r0, sp, #12
 8004266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800426a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d121      	bne.n	80042b6 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004272:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004278:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800427a:	68e3      	ldr	r3, [r4, #12]
 800427c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004280:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004284:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004286:	68e3      	ldr	r3, [r4, #12]
 8004288:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800428c:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 800428e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d00a      	beq.n	80042ac <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 8004296:	4620      	mov	r0, r4
 8004298:	f7ff ffbc 	bl	8004214 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800429c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d01c      	beq.n	80042de <USB_CoreInit+0x80>
}
 80042a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042a8:	b004      	add	sp, #16
 80042aa:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042ac:	68e3      	ldr	r3, [r4, #12]
 80042ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042b2:	60e3      	str	r3, [r4, #12]
 80042b4:	e7ef      	b.n	8004296 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042b6:	68e3      	ldr	r3, [r4, #12]
 80042b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042bc:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80042be:	4620      	mov	r0, r4
 80042c0:	f7ff ffa8 	bl	8004214 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80042c4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80042c8:	b923      	cbnz	r3, 80042d4 <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80042cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80042d2:	e7e3      	b.n	800429c <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80042d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042da:	63a3      	str	r3, [r4, #56]	@ 0x38
 80042dc:	e7de      	b.n	800429c <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042de:	68a3      	ldr	r3, [r4, #8]
 80042e0:	f043 0306 	orr.w	r3, r3, #6
 80042e4:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042e6:	68a3      	ldr	r3, [r4, #8]
 80042e8:	f043 0320 	orr.w	r3, r3, #32
 80042ec:	60a3      	str	r3, [r4, #8]
 80042ee:	e7d9      	b.n	80042a4 <USB_CoreInit+0x46>

080042f0 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80042f0:	2a02      	cmp	r2, #2
 80042f2:	d00a      	beq.n	800430a <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 80042f4:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80042f6:	68c3      	ldr	r3, [r0, #12]
 80042f8:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80042fc:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80042fe:	68c3      	ldr	r3, [r0, #12]
 8004300:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8004304:	60c3      	str	r3, [r0, #12]
}
 8004306:	2000      	movs	r0, #0
 8004308:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800430a:	4b23      	ldr	r3, [pc, #140]	@ (8004398 <USB_SetTurnaroundTime+0xa8>)
 800430c:	440b      	add	r3, r1
 800430e:	4a23      	ldr	r2, [pc, #140]	@ (800439c <USB_SetTurnaroundTime+0xac>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d92f      	bls.n	8004374 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004314:	4b22      	ldr	r3, [pc, #136]	@ (80043a0 <USB_SetTurnaroundTime+0xb0>)
 8004316:	440b      	add	r3, r1
 8004318:	4a22      	ldr	r2, [pc, #136]	@ (80043a4 <USB_SetTurnaroundTime+0xb4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d92c      	bls.n	8004378 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800431e:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 8004322:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 8004326:	4a20      	ldr	r2, [pc, #128]	@ (80043a8 <USB_SetTurnaroundTime+0xb8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d927      	bls.n	800437c <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800432c:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 8004330:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8004334:	4a1d      	ldr	r2, [pc, #116]	@ (80043ac <USB_SetTurnaroundTime+0xbc>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d322      	bcc.n	8004380 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800433a:	4b1d      	ldr	r3, [pc, #116]	@ (80043b0 <USB_SetTurnaroundTime+0xc0>)
 800433c:	440b      	add	r3, r1
 800433e:	4a1d      	ldr	r2, [pc, #116]	@ (80043b4 <USB_SetTurnaroundTime+0xc4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d91f      	bls.n	8004384 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004344:	4b1c      	ldr	r3, [pc, #112]	@ (80043b8 <USB_SetTurnaroundTime+0xc8>)
 8004346:	440b      	add	r3, r1
 8004348:	4a1c      	ldr	r2, [pc, #112]	@ (80043bc <USB_SetTurnaroundTime+0xcc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d31c      	bcc.n	8004388 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800434e:	4b1c      	ldr	r3, [pc, #112]	@ (80043c0 <USB_SetTurnaroundTime+0xd0>)
 8004350:	440b      	add	r3, r1
 8004352:	4a1c      	ldr	r2, [pc, #112]	@ (80043c4 <USB_SetTurnaroundTime+0xd4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d319      	bcc.n	800438c <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004358:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 800435c:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 8004360:	4a19      	ldr	r2, [pc, #100]	@ (80043c8 <USB_SetTurnaroundTime+0xd8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d314      	bcc.n	8004390 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004366:	4b19      	ldr	r3, [pc, #100]	@ (80043cc <USB_SetTurnaroundTime+0xdc>)
 8004368:	440b      	add	r3, r1
 800436a:	4a19      	ldr	r2, [pc, #100]	@ (80043d0 <USB_SetTurnaroundTime+0xe0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d211      	bcs.n	8004394 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 8004370:	2207      	movs	r2, #7
 8004372:	e7c0      	b.n	80042f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8004374:	220f      	movs	r2, #15
 8004376:	e7be      	b.n	80042f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8004378:	220e      	movs	r2, #14
 800437a:	e7bc      	b.n	80042f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 800437c:	220d      	movs	r2, #13
 800437e:	e7ba      	b.n	80042f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8004380:	220c      	movs	r2, #12
 8004382:	e7b8      	b.n	80042f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8004384:	220b      	movs	r2, #11
 8004386:	e7b6      	b.n	80042f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8004388:	220a      	movs	r2, #10
 800438a:	e7b4      	b.n	80042f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 800438c:	2209      	movs	r2, #9
 800438e:	e7b2      	b.n	80042f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8004390:	2208      	movs	r2, #8
 8004392:	e7b0      	b.n	80042f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8004394:	2206      	movs	r2, #6
 8004396:	e7ae      	b.n	80042f6 <USB_SetTurnaroundTime+0x6>
 8004398:	ff275340 	.word	0xff275340
 800439c:	000c34ff 	.word	0x000c34ff
 80043a0:	ff1b1e40 	.word	0xff1b1e40
 80043a4:	000f423f 	.word	0x000f423f
 80043a8:	00124f7f 	.word	0x00124f7f
 80043ac:	0013d620 	.word	0x0013d620
 80043b0:	fee5b660 	.word	0xfee5b660
 80043b4:	0016e35f 	.word	0x0016e35f
 80043b8:	feced300 	.word	0xfeced300
 80043bc:	001b7740 	.word	0x001b7740
 80043c0:	feb35bc0 	.word	0xfeb35bc0
 80043c4:	002191c0 	.word	0x002191c0
 80043c8:	00387520 	.word	0x00387520
 80043cc:	fe5954e0 	.word	0xfe5954e0
 80043d0:	00419ce0 	.word	0x00419ce0

080043d4 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043d4:	6883      	ldr	r3, [r0, #8]
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6083      	str	r3, [r0, #8]
}
 80043dc:	2000      	movs	r0, #0
 80043de:	4770      	bx	lr

080043e0 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043e0:	6883      	ldr	r3, [r0, #8]
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	6083      	str	r3, [r0, #8]
}
 80043e8:	2000      	movs	r0, #0
 80043ea:	4770      	bx	lr

080043ec <USB_FlushTxFifo>:
{
 80043ec:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	9301      	str	r3, [sp, #4]
    count++;
 80043f2:	9b01      	ldr	r3, [sp, #4]
 80043f4:	3301      	adds	r3, #1
 80043f6:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80043f8:	9b01      	ldr	r3, [sp, #4]
 80043fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043fe:	d815      	bhi.n	800442c <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004400:	6903      	ldr	r3, [r0, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	daf5      	bge.n	80043f2 <USB_FlushTxFifo+0x6>
  count = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800440a:	0189      	lsls	r1, r1, #6
 800440c:	f041 0120 	orr.w	r1, r1, #32
 8004410:	6101      	str	r1, [r0, #16]
    count++;
 8004412:	9b01      	ldr	r3, [sp, #4]
 8004414:	3301      	adds	r3, #1
 8004416:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004418:	9b01      	ldr	r3, [sp, #4]
 800441a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800441e:	d808      	bhi.n	8004432 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004420:	6903      	ldr	r3, [r0, #16]
 8004422:	f013 0f20 	tst.w	r3, #32
 8004426:	d1f4      	bne.n	8004412 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8004428:	2000      	movs	r0, #0
 800442a:	e000      	b.n	800442e <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 800442c:	2003      	movs	r0, #3
}
 800442e:	b002      	add	sp, #8
 8004430:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004432:	2003      	movs	r0, #3
 8004434:	e7fb      	b.n	800442e <USB_FlushTxFifo+0x42>

08004436 <USB_FlushRxFifo>:
{
 8004436:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	9301      	str	r3, [sp, #4]
    count++;
 800443c:	9b01      	ldr	r3, [sp, #4]
 800443e:	3301      	adds	r3, #1
 8004440:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004442:	9b01      	ldr	r3, [sp, #4]
 8004444:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004448:	d813      	bhi.n	8004472 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800444a:	6903      	ldr	r3, [r0, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	daf5      	bge.n	800443c <USB_FlushRxFifo+0x6>
  count = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004454:	2310      	movs	r3, #16
 8004456:	6103      	str	r3, [r0, #16]
    count++;
 8004458:	9b01      	ldr	r3, [sp, #4]
 800445a:	3301      	adds	r3, #1
 800445c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800445e:	9b01      	ldr	r3, [sp, #4]
 8004460:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004464:	d808      	bhi.n	8004478 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004466:	6903      	ldr	r3, [r0, #16]
 8004468:	f013 0f10 	tst.w	r3, #16
 800446c:	d1f4      	bne.n	8004458 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 800446e:	2000      	movs	r0, #0
 8004470:	e000      	b.n	8004474 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8004472:	2003      	movs	r0, #3
}
 8004474:	b002      	add	sp, #8
 8004476:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004478:	2003      	movs	r0, #3
 800447a:	e7fb      	b.n	8004474 <USB_FlushRxFifo+0x3e>

0800447c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800447c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004480:	4319      	orrs	r1, r3
 8004482:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8004486:	2000      	movs	r0, #0
 8004488:	4770      	bx	lr
	...

0800448c <USB_DevInit>:
{
 800448c:	b084      	sub	sp, #16
 800448e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004490:	4604      	mov	r4, r0
 8004492:	a807      	add	r0, sp, #28
 8004494:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8004498:	2300      	movs	r3, #0
 800449a:	e006      	b.n	80044aa <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 800449c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80044a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80044a4:	2100      	movs	r1, #0
 80044a6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80044a8:	3301      	adds	r3, #1
 80044aa:	2b0e      	cmp	r3, #14
 80044ac:	d9f6      	bls.n	800449c <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 80044ae:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 80044b2:	bb06      	cbnz	r6, 80044f6 <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044b4:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 80044b8:	f043 0302 	orr.w	r3, r3, #2
 80044bc:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80044c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80044c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80044c6:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80044c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80044ca:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80044ce:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80044d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80044d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044d6:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044de:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d115      	bne.n	8004512 <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 80044e6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80044ea:	b96b      	cbnz	r3, 8004508 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044ec:	2100      	movs	r1, #0
 80044ee:	4620      	mov	r0, r4
 80044f0:	f7ff ffc4 	bl	800447c <USB_SetDevSpeed>
 80044f4:	e011      	b.n	800451a <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80044f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80044f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80044fc:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80044fe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004500:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004504:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004506:	e7e7      	b.n	80044d8 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004508:	2101      	movs	r1, #1
 800450a:	4620      	mov	r0, r4
 800450c:	f7ff ffb6 	bl	800447c <USB_SetDevSpeed>
 8004510:	e003      	b.n	800451a <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004512:	2103      	movs	r1, #3
 8004514:	4620      	mov	r0, r4
 8004516:	f7ff ffb1 	bl	800447c <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800451a:	2110      	movs	r1, #16
 800451c:	4620      	mov	r0, r4
 800451e:	f7ff ff65 	bl	80043ec <USB_FlushTxFifo>
 8004522:	4605      	mov	r5, r0
 8004524:	b100      	cbz	r0, 8004528 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 8004526:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004528:	4620      	mov	r0, r4
 800452a:	f7ff ff84 	bl	8004436 <USB_FlushRxFifo>
 800452e:	b100      	cbz	r0, 8004532 <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 8004530:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8004532:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8004536:	2300      	movs	r3, #0
 8004538:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800453c:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004540:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004544:	e00d      	b.n	8004562 <USB_DevInit+0xd6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800454a:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 800454e:	e002      	b.n	8004556 <USB_DevInit+0xca>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004550:	2000      	movs	r0, #0
 8004552:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004556:	2200      	movs	r2, #0
 8004558:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800455a:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 800455e:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004560:	3301      	adds	r3, #1
 8004562:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8004566:	4299      	cmp	r1, r3
 8004568:	d90e      	bls.n	8004588 <USB_DevInit+0xfc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800456a:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800456e:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 8004572:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 8004576:	2800      	cmp	r0, #0
 8004578:	daea      	bge.n	8004550 <USB_DevInit+0xc4>
      if (i == 0U)
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e3      	bne.n	8004546 <USB_DevInit+0xba>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800457e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8004582:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8004586:	e7e6      	b.n	8004556 <USB_DevInit+0xca>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004588:	2300      	movs	r3, #0
 800458a:	e00a      	b.n	80045a2 <USB_DevInit+0x116>
      if (i == 0U)
 800458c:	b1bb      	cbz	r3, 80045be <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800458e:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 8004592:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004596:	2200      	movs	r2, #0
 8004598:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800459a:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 800459e:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045a0:	3301      	adds	r3, #1
 80045a2:	4299      	cmp	r1, r3
 80045a4:	d910      	bls.n	80045c8 <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045a6:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80045aa:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 80045ae:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 80045b2:	2f00      	cmp	r7, #0
 80045b4:	dbea      	blt.n	800458c <USB_DevInit+0x100>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045b6:	2700      	movs	r7, #0
 80045b8:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 80045bc:	e7eb      	b.n	8004596 <USB_DevInit+0x10a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045be:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 80045c2:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 80045c6:	e7e6      	b.n	8004596 <USB_DevInit+0x10a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045c8:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80045cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045d0:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045d8:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 80045dc:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80045de:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80045e2:	b91b      	cbnz	r3, 80045ec <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045e4:	69a3      	ldr	r3, [r4, #24]
 80045e6:	f043 0310 	orr.w	r3, r3, #16
 80045ea:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045ec:	69a2      	ldr	r2, [r4, #24]
 80045ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004620 <USB_DevInit+0x194>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80045f4:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 80045f8:	b11b      	cbz	r3, 8004602 <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045fa:	69a3      	ldr	r3, [r4, #24]
 80045fc:	f043 0308 	orr.w	r3, r3, #8
 8004600:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004602:	2e01      	cmp	r6, #1
 8004604:	d004      	beq.n	8004610 <USB_DevInit+0x184>
}
 8004606:	4628      	mov	r0, r5
 8004608:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800460c:	b004      	add	sp, #16
 800460e:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004610:	69a3      	ldr	r3, [r4, #24]
 8004612:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004616:	f043 0304 	orr.w	r3, r3, #4
 800461a:	61a3      	str	r3, [r4, #24]
 800461c:	e7f3      	b.n	8004606 <USB_DevInit+0x17a>
 800461e:	bf00      	nop
 8004620:	803c3800 	.word	0x803c3800

08004624 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004624:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004628:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800462c:	2b02      	cmp	r3, #2
 800462e:	d004      	beq.n	800463a <USB_GetDevSpeed+0x16>
 8004630:	2b06      	cmp	r3, #6
 8004632:	d004      	beq.n	800463e <USB_GetDevSpeed+0x1a>
 8004634:	b92b      	cbnz	r3, 8004642 <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004636:	2000      	movs	r0, #0
 8004638:	4770      	bx	lr
 800463a:	2002      	movs	r0, #2
 800463c:	4770      	bx	lr
 800463e:	2002      	movs	r0, #2
 8004640:	4770      	bx	lr
 8004642:	200f      	movs	r0, #15
}
 8004644:	4770      	bx	lr

08004646 <USB_ActivateEndpoint>:
{
 8004646:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8004648:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800464c:	784b      	ldrb	r3, [r1, #1]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d023      	beq.n	800469a <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004652:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 8004656:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 800465a:	f00c 040f 	and.w	r4, ip, #15
 800465e:	2201      	movs	r2, #1
 8004660:	40a2      	lsls	r2, r4
 8004662:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004666:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800466a:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800466e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004672:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004676:	d10e      	bne.n	8004696 <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004678:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800467c:	688a      	ldr	r2, [r1, #8]
 800467e:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004682:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004684:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8004688:	4313      	orrs	r3, r2
 800468a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800468e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004692:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004696:	2000      	movs	r0, #0
 8004698:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800469a:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800469e:	f00c 0e0f 	and.w	lr, ip, #15
 80046a2:	fa03 f30e 	lsl.w	r3, r3, lr
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80046ae:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80046b2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80046b6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80046ba:	d1ec      	bne.n	8004696 <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046bc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80046c0:	688a      	ldr	r2, [r1, #8]
 80046c2:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046c6:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046c8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046cc:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046da:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80046de:	e7da      	b.n	8004696 <USB_ActivateEndpoint+0x50>

080046e0 <USB_DeactivateEndpoint>:
{
 80046e0:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 80046e2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80046e4:	784a      	ldrb	r2, [r1, #1]
 80046e6:	2a01      	cmp	r2, #1
 80046e8:	d026      	beq.n	8004738 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046ea:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80046ee:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80046f2:	2a00      	cmp	r2, #0
 80046f4:	db52      	blt.n	800479c <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80046f6:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 80046fa:	780a      	ldrb	r2, [r1, #0]
 80046fc:	f002 020f 	and.w	r2, r2, #15
 8004700:	f04f 0c01 	mov.w	ip, #1
 8004704:	fa0c f202 	lsl.w	r2, ip, r2
 8004708:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 800470c:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004710:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8004714:	7809      	ldrb	r1, [r1, #0]
 8004716:	f001 010f 	and.w	r1, r1, #15
 800471a:	fa0c fc01 	lsl.w	ip, ip, r1
 800471e:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 8004722:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004726:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800472a:	4a23      	ldr	r2, [pc, #140]	@ (80047b8 <USB_DeactivateEndpoint+0xd8>)
 800472c:	400a      	ands	r2, r1
 800472e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8004732:	2000      	movs	r0, #0
 8004734:	bc30      	pop	{r4, r5}
 8004736:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004738:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800473c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004740:	2a00      	cmp	r2, #0
 8004742:	db1e      	blt.n	8004782 <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004744:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8004748:	780a      	ldrb	r2, [r1, #0]
 800474a:	f002 020f 	and.w	r2, r2, #15
 800474e:	2401      	movs	r4, #1
 8004750:	fa04 f202 	lsl.w	r2, r4, r2
 8004754:	b292      	uxth	r2, r2
 8004756:	ea25 0202 	bic.w	r2, r5, r2
 800475a:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800475e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8004762:	7809      	ldrb	r1, [r1, #0]
 8004764:	f001 010f 	and.w	r1, r1, #15
 8004768:	408c      	lsls	r4, r1
 800476a:	b2a4      	uxth	r4, r4
 800476c:	ea22 0204 	bic.w	r2, r2, r4
 8004770:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004774:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8004778:	4a10      	ldr	r2, [pc, #64]	@ (80047bc <USB_DeactivateEndpoint+0xdc>)
 800477a:	400a      	ands	r2, r1
 800477c:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8004780:	e7d7      	b.n	8004732 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004782:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004786:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800478a:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800478e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004792:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004796:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 800479a:	e7d3      	b.n	8004744 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800479c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80047a0:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80047a4:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80047a8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80047ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80047b0:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 80047b4:	e79f      	b.n	80046f6 <USB_DeactivateEndpoint+0x16>
 80047b6:	bf00      	nop
 80047b8:	eff37800 	.word	0xeff37800
 80047bc:	ec337800 	.word	0xec337800

080047c0 <USB_EPStopXfer>:
{
 80047c0:	b410      	push	{r4}
 80047c2:	b083      	sub	sp, #12
 80047c4:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 80047ca:	7848      	ldrb	r0, [r1, #1]
 80047cc:	2801      	cmp	r0, #1
 80047ce:	d00b      	beq.n	80047e8 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047d0:	780b      	ldrb	r3, [r1, #0]
 80047d2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80047d6:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80047da:	2800      	cmp	r0, #0
 80047dc:	db2d      	blt.n	800483a <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 80047de:	2000      	movs	r0, #0
}
 80047e0:	b003      	add	sp, #12
 80047e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047e6:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047e8:	780b      	ldrb	r3, [r1, #0]
 80047ea:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80047ee:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80047f2:	2c00      	cmp	r4, #0
 80047f4:	db01      	blt.n	80047fa <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 80047f6:	2000      	movs	r0, #0
 80047f8:	e7f2      	b.n	80047e0 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80047fa:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80047fe:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8004802:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004806:	780b      	ldrb	r3, [r1, #0]
 8004808:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800480c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8004810:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8004814:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8004818:	9b01      	ldr	r3, [sp, #4]
 800481a:	3301      	adds	r3, #1
 800481c:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800481e:	9c01      	ldr	r4, [sp, #4]
 8004820:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004824:	429c      	cmp	r4, r3
 8004826:	d8db      	bhi.n	80047e0 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004828:	780b      	ldrb	r3, [r1, #0]
 800482a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800482e:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8004832:	2b00      	cmp	r3, #0
 8004834:	dbf0      	blt.n	8004818 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 8004836:	2000      	movs	r0, #0
 8004838:	e7d2      	b.n	80047e0 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800483a:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 800483e:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 8004842:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004846:	780b      	ldrb	r3, [r1, #0]
 8004848:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800484c:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8004850:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8004854:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 8004858:	9b01      	ldr	r3, [sp, #4]
 800485a:	3301      	adds	r3, #1
 800485c:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800485e:	9801      	ldr	r0, [sp, #4]
 8004860:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004864:	4298      	cmp	r0, r3
 8004866:	d808      	bhi.n	800487a <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004868:	780b      	ldrb	r3, [r1, #0]
 800486a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800486e:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8004872:	2b00      	cmp	r3, #0
 8004874:	dbf0      	blt.n	8004858 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 8004876:	2000      	movs	r0, #0
 8004878:	e7b2      	b.n	80047e0 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 800487a:	2001      	movs	r0, #1
 800487c:	e7b0      	b.n	80047e0 <USB_EPStopXfer+0x20>

0800487e <USB_WritePacket>:
{
 800487e:	b510      	push	{r4, lr}
 8004880:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8004884:	b984      	cbnz	r4, 80048a8 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004886:	3303      	adds	r3, #3
 8004888:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 800488c:	f04f 0c00 	mov.w	ip, #0
 8004890:	e008      	b.n	80048a4 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004892:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8004896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800489a:	f851 4b04 	ldr.w	r4, [r1], #4
 800489e:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 80048a0:	f10c 0c01 	add.w	ip, ip, #1
 80048a4:	45f4      	cmp	ip, lr
 80048a6:	d3f4      	bcc.n	8004892 <USB_WritePacket+0x14>
}
 80048a8:	2000      	movs	r0, #0
 80048aa:	bd10      	pop	{r4, pc}

080048ac <USB_EPStartXfer>:
{
 80048ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ae:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 80048b0:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80048b2:	784b      	ldrb	r3, [r1, #1]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d02d      	beq.n	8004914 <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048b8:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 80048bc:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 80048c0:	691d      	ldr	r5, [r3, #16]
 80048c2:	f36f 0512 	bfc	r5, #0, #19
 80048c6:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048c8:	691d      	ldr	r5, [r3, #16]
 80048ca:	f36f 45dc 	bfc	r5, #19, #10
 80048ce:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 80048d0:	2c00      	cmp	r4, #0
 80048d2:	f040 80ce 	bne.w	8004a72 <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 80048d6:	690c      	ldr	r4, [r1, #16]
 80048d8:	b10c      	cbz	r4, 80048de <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 80048da:	688c      	ldr	r4, [r1, #8]
 80048dc:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 80048de:	688c      	ldr	r4, [r1, #8]
 80048e0:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80048e2:	691d      	ldr	r5, [r3, #16]
 80048e4:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80048e8:	432c      	orrs	r4, r5
 80048ea:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048ec:	691c      	ldr	r4, [r3, #16]
 80048ee:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 80048f2:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80048f4:	2a01      	cmp	r2, #1
 80048f6:	f000 80df 	beq.w	8004ab8 <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 80048fa:	790b      	ldrb	r3, [r1, #4]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	f000 80e1 	beq.w	8004ac4 <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004902:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8004906:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800490a:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 800490e:	2000      	movs	r0, #0
 8004910:	b003      	add	sp, #12
 8004912:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8004914:	690b      	ldr	r3, [r1, #16]
 8004916:	bb73      	cbnz	r3, 8004976 <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004918:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800491c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8004920:	f36f 45dc 	bfc	r5, #19, #10
 8004924:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004928:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 800492c:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8004930:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004934:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8004938:	f36f 0512 	bfc	r5, #0, #19
 800493c:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8004940:	2a01      	cmp	r2, #1
 8004942:	d054      	beq.n	80049ee <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004944:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004948:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800494c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004950:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004954:	790b      	ldrb	r3, [r1, #4]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d072      	beq.n	8004a40 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 800495a:	690b      	ldr	r3, [r1, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0d6      	beq.n	800490e <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004960:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8004964:	7809      	ldrb	r1, [r1, #0]
 8004966:	f001 010f 	and.w	r1, r1, #15
 800496a:	2201      	movs	r2, #1
 800496c:	408a      	lsls	r2, r1
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8004974:	e7cb      	b.n	800490e <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004976:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800497a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800497e:	691d      	ldr	r5, [r3, #16]
 8004980:	f36f 0512 	bfc	r5, #0, #19
 8004984:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004986:	691d      	ldr	r5, [r3, #16]
 8004988:	f36f 45dc 	bfc	r5, #19, #10
 800498c:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 800498e:	b984      	cbnz	r4, 80049b2 <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 8004990:	690e      	ldr	r6, [r1, #16]
 8004992:	688d      	ldr	r5, [r1, #8]
 8004994:	42ae      	cmp	r6, r5
 8004996:	d900      	bls.n	800499a <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 8004998:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800499a:	691d      	ldr	r5, [r3, #16]
 800499c:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 80049a0:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049a2:	691d      	ldr	r5, [r3, #16]
 80049a4:	690e      	ldr	r6, [r1, #16]
 80049a6:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 80049aa:	ea45 050c 	orr.w	r5, r5, ip
 80049ae:	611d      	str	r5, [r3, #16]
 80049b0:	e7c6      	b.n	8004940 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80049b2:	690d      	ldr	r5, [r1, #16]
 80049b4:	688e      	ldr	r6, [r1, #8]
 80049b6:	4435      	add	r5, r6
 80049b8:	3d01      	subs	r5, #1
 80049ba:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80049be:	691e      	ldr	r6, [r3, #16]
 80049c0:	fa1f fc85 	uxth.w	ip, r5
 80049c4:	4f49      	ldr	r7, [pc, #292]	@ (8004aec <USB_EPStartXfer+0x240>)
 80049c6:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 80049ca:	4335      	orrs	r5, r6
 80049cc:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 80049ce:	790d      	ldrb	r5, [r1, #4]
 80049d0:	2d01      	cmp	r5, #1
 80049d2:	d1e6      	bne.n	80049a2 <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049d4:	691d      	ldr	r5, [r3, #16]
 80049d6:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 80049da:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80049dc:	691d      	ldr	r5, [r3, #16]
 80049de:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 80049e2:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 80049e6:	ea45 050c 	orr.w	r5, r5, ip
 80049ea:	611d      	str	r5, [r3, #16]
 80049ec:	e7d9      	b.n	80049a2 <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 80049ee:	69cb      	ldr	r3, [r1, #28]
 80049f0:	b11b      	cbz	r3, 80049fa <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80049f2:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 80049f6:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 80049fa:	790b      	ldrb	r3, [r1, #4]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d008      	beq.n	8004a12 <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a00:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004a04:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004a08:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004a0c:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8004a10:	e77d      	b.n	800490e <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a12:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004a16:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004a1a:	d108      	bne.n	8004a2e <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a1c:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8004a20:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8004a24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a28:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8004a2c:	e7e8      	b.n	8004a00 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a2e:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8004a32:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a3a:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8004a3e:	e7df      	b.n	8004a00 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a40:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004a44:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004a48:	d10c      	bne.n	8004a64 <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a4a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004a4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a52:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a56:	9200      	str	r2, [sp, #0]
 8004a58:	8a0b      	ldrh	r3, [r1, #16]
 8004a5a:	780a      	ldrb	r2, [r1, #0]
 8004a5c:	68c9      	ldr	r1, [r1, #12]
 8004a5e:	f7ff ff0e 	bl	800487e <USB_WritePacket>
 8004a62:	e754      	b.n	800490e <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a64:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a6c:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8004a70:	e7f1      	b.n	8004a56 <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 8004a72:	690c      	ldr	r4, [r1, #16]
 8004a74:	b954      	cbnz	r4, 8004a8c <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a76:	691c      	ldr	r4, [r3, #16]
 8004a78:	688d      	ldr	r5, [r1, #8]
 8004a7a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004a7e:	432c      	orrs	r4, r5
 8004a80:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a82:	691c      	ldr	r4, [r3, #16]
 8004a84:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004a88:	611c      	str	r4, [r3, #16]
 8004a8a:	e733      	b.n	80048f4 <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a8c:	688d      	ldr	r5, [r1, #8]
 8004a8e:	442c      	add	r4, r5
 8004a90:	3c01      	subs	r4, #1
 8004a92:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004a96:	b2a4      	uxth	r4, r4
 8004a98:	fb04 f505 	mul.w	r5, r4, r5
 8004a9c:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004a9e:	691d      	ldr	r5, [r3, #16]
 8004aa0:	4e12      	ldr	r6, [pc, #72]	@ (8004aec <USB_EPStartXfer+0x240>)
 8004aa2:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8004aa6:	432c      	orrs	r4, r5
 8004aa8:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004aaa:	691c      	ldr	r4, [r3, #16]
 8004aac:	6a0d      	ldr	r5, [r1, #32]
 8004aae:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004ab2:	432c      	orrs	r4, r5
 8004ab4:	611c      	str	r4, [r3, #16]
 8004ab6:	e71d      	b.n	80048f4 <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ab8:	68ca      	ldr	r2, [r1, #12]
 8004aba:	2a00      	cmp	r2, #0
 8004abc:	f43f af1d 	beq.w	80048fa <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ac0:	615a      	str	r2, [r3, #20]
 8004ac2:	e71a      	b.n	80048fa <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ac4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004ac8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004acc:	d106      	bne.n	8004adc <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ace:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8004ad2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ad6:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8004ada:	e712      	b.n	8004902 <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004adc:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8004ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae4:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8004ae8:	e70b      	b.n	8004902 <USB_EPStartXfer+0x56>
 8004aea:	bf00      	nop
 8004aec:	1ff80000 	.word	0x1ff80000

08004af0 <USB_ReadPacket>:
{
 8004af0:	b510      	push	{r4, lr}
 8004af2:	4684      	mov	ip, r0
 8004af4:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8004af6:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8004afa:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8004afe:	2300      	movs	r3, #0
 8004b00:	e005      	b.n	8004b0e <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b02:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 8004b06:	6809      	ldr	r1, [r1, #0]
 8004b08:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	4573      	cmp	r3, lr
 8004b10:	d3f7      	bcc.n	8004b02 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8004b12:	b17a      	cbz	r2, 8004b34 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b14:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8004b18:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8004b1c:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b1e:	b2cb      	uxtb	r3, r1
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	fa24 f303 	lsr.w	r3, r4, r3
 8004b26:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8004b2a:	3101      	adds	r1, #1
      remaining_bytes--;
 8004b2c:	3a01      	subs	r2, #1
 8004b2e:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8004b30:	2a00      	cmp	r2, #0
 8004b32:	d1f4      	bne.n	8004b1e <USB_ReadPacket+0x2e>
}
 8004b34:	bd10      	pop	{r4, pc}

08004b36 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8004b36:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004b38:	784a      	ldrb	r2, [r1, #1]
 8004b3a:	2a01      	cmp	r2, #1
 8004b3c:	d014      	beq.n	8004b68 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b3e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004b42:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8004b46:	2a00      	cmp	r2, #0
 8004b48:	db06      	blt.n	8004b58 <USB_EPSetStall+0x22>
 8004b4a:	b12b      	cbz	r3, 8004b58 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b4c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004b50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b54:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b58:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004b5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b60:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004b64:	2000      	movs	r0, #0
 8004b66:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b68:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004b6c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8004b70:	2a00      	cmp	r2, #0
 8004b72:	db06      	blt.n	8004b82 <USB_EPSetStall+0x4c>
 8004b74:	b12b      	cbz	r3, 8004b82 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b76:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004b7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b7e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004b82:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004b86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b8a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8004b8e:	e7e9      	b.n	8004b64 <USB_EPSetStall+0x2e>

08004b90 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8004b90:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004b92:	784a      	ldrb	r2, [r1, #1]
 8004b94:	2a01      	cmp	r2, #1
 8004b96:	d00e      	beq.n	8004bb6 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b98:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004b9c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004ba0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ba4:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ba8:	790b      	ldrb	r3, [r1, #4]
 8004baa:	3b02      	subs	r3, #2
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d915      	bls.n	8004bde <USB_EPClearStall+0x4e>
}
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bb6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004bba:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004bbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004bc2:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004bc6:	790b      	ldrb	r3, [r1, #4]
 8004bc8:	3b02      	subs	r3, #2
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d8f0      	bhi.n	8004bb2 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bd0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bd8:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8004bdc:	e7e9      	b.n	8004bb2 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bde:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004be6:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8004bea:	e7e2      	b.n	8004bb2 <USB_EPClearStall+0x22>

08004bec <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004bec:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004bf0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004bf4:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004bf8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004bfc:	0109      	lsls	r1, r1, #4
 8004bfe:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8004c02:	430b      	orrs	r3, r1
 8004c04:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8004c08:	2000      	movs	r0, #0
 8004c0a:	4770      	bx	lr

08004c0c <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c0c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8004c10:	f023 0303 	bic.w	r3, r3, #3
 8004c14:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c18:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8004c1c:	f023 0302 	bic.w	r3, r3, #2
 8004c20:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8004c24:	2000      	movs	r0, #0
 8004c26:	4770      	bx	lr

08004c28 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c28:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8004c2c:	f023 0303 	bic.w	r3, r3, #3
 8004c30:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c34:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8004c38:	f043 0302 	orr.w	r3, r3, #2
 8004c3c:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8004c40:	2000      	movs	r0, #0
 8004c42:	4770      	bx	lr

08004c44 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004c44:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004c46:	6980      	ldr	r0, [r0, #24]
}
 8004c48:	4010      	ands	r0, r2
 8004c4a:	4770      	bx	lr

08004c4c <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004c4c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004c50:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c54:	69c0      	ldr	r0, [r0, #28]
 8004c56:	4018      	ands	r0, r3
}
 8004c58:	0c00      	lsrs	r0, r0, #16
 8004c5a:	4770      	bx	lr

08004c5c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004c5c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004c60:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c64:	69c0      	ldr	r0, [r0, #28]
 8004c66:	4018      	ands	r0, r3
}
 8004c68:	b280      	uxth	r0, r0
 8004c6a:	4770      	bx	lr

08004c6c <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c6c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004c70:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c74:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8004c78:	6940      	ldr	r0, [r0, #20]
}
 8004c7a:	4010      	ands	r0, r2
 8004c7c:	4770      	bx	lr

08004c7e <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8004c7e:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c82:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c86:	f001 0c0f 	and.w	ip, r1, #15
 8004c8a:	fa23 f30c 	lsr.w	r3, r3, ip
 8004c8e:	01db      	lsls	r3, r3, #7
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c94:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8004c98:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8004c9c:	6880      	ldr	r0, [r0, #8]
}
 8004c9e:	4018      	ands	r0, r3
 8004ca0:	4770      	bx	lr

08004ca2 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004ca2:	6940      	ldr	r0, [r0, #20]
}
 8004ca4:	f000 0001 	and.w	r0, r0, #1
 8004ca8:	4770      	bx	lr

08004caa <USB_SetCurrentMode>:
{
 8004caa:	b538      	push	{r3, r4, r5, lr}
 8004cac:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cae:	68c3      	ldr	r3, [r0, #12]
 8004cb0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004cb4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004cb6:	2901      	cmp	r1, #1
 8004cb8:	d013      	beq.n	8004ce2 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8004cba:	bb19      	cbnz	r1, 8004d04 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cbc:	68c3      	ldr	r3, [r0, #12]
 8004cbe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cc2:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004cc4:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8004cc6:	200a      	movs	r0, #10
 8004cc8:	f7fc feca 	bl	8001a60 <HAL_Delay>
      ms += 10U;
 8004ccc:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f7ff ffe7 	bl	8004ca2 <USB_GetMode>
 8004cd4:	b108      	cbz	r0, 8004cda <USB_SetCurrentMode+0x30>
 8004cd6:	2cc7      	cmp	r4, #199	@ 0xc7
 8004cd8:	d9f5      	bls.n	8004cc6 <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004cda:	2cc8      	cmp	r4, #200	@ 0xc8
 8004cdc:	d014      	beq.n	8004d08 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8004cde:	2000      	movs	r0, #0
}
 8004ce0:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ce2:	68c3      	ldr	r3, [r0, #12]
 8004ce4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ce8:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004cea:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8004cec:	200a      	movs	r0, #10
 8004cee:	f7fc feb7 	bl	8001a60 <HAL_Delay>
      ms += 10U;
 8004cf2:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f7ff ffd4 	bl	8004ca2 <USB_GetMode>
 8004cfa:	2801      	cmp	r0, #1
 8004cfc:	d0ed      	beq.n	8004cda <USB_SetCurrentMode+0x30>
 8004cfe:	2cc7      	cmp	r4, #199	@ 0xc7
 8004d00:	d9f4      	bls.n	8004cec <USB_SetCurrentMode+0x42>
 8004d02:	e7ea      	b.n	8004cda <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8004d04:	2001      	movs	r0, #1
 8004d06:	e7eb      	b.n	8004ce0 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8004d08:	2001      	movs	r0, #1
 8004d0a:	e7e9      	b.n	8004ce0 <USB_SetCurrentMode+0x36>

08004d0c <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d0c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004d10:	f36f 030a 	bfc	r3, #0, #11
 8004d14:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d18:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8004d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d20:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8004d24:	2000      	movs	r0, #0
 8004d26:	4770      	bx	lr

08004d28 <USB_EP0_OutStart>:
{
 8004d28:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d2a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d2c:	4b15      	ldr	r3, [pc, #84]	@ (8004d84 <USB_EP0_OutStart+0x5c>)
 8004d2e:	429c      	cmp	r4, r3
 8004d30:	d903      	bls.n	8004d3a <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d32:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	db16      	blt.n	8004d68 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d3a:	2400      	movs	r4, #0
 8004d3c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d40:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8004d44:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004d48:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d4c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8004d50:	f044 0418 	orr.w	r4, r4, #24
 8004d54:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d58:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8004d5c:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8004d60:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8004d64:	2901      	cmp	r1, #1
 8004d66:	d003      	beq.n	8004d70 <USB_EP0_OutStart+0x48>
}
 8004d68:	2000      	movs	r0, #0
 8004d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d6e:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d70:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d74:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004d78:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004d7c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8004d80:	e7f2      	b.n	8004d68 <USB_EP0_OutStart+0x40>
 8004d82:	bf00      	nop
 8004d84:	4f54300a 	.word	0x4f54300a

08004d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc0 <_sbrk+0x38>)
 8004d8e:	490d      	ldr	r1, [pc, #52]	@ (8004dc4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d90:	480d      	ldr	r0, [pc, #52]	@ (8004dc8 <_sbrk+0x40>)
 8004d92:	6800      	ldr	r0, [r0, #0]
 8004d94:	b140      	cbz	r0, 8004da8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d96:	480c      	ldr	r0, [pc, #48]	@ (8004dc8 <_sbrk+0x40>)
 8004d98:	6800      	ldr	r0, [r0, #0]
 8004d9a:	4403      	add	r3, r0
 8004d9c:	1a52      	subs	r2, r2, r1
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d806      	bhi.n	8004db0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004da2:	4a09      	ldr	r2, [pc, #36]	@ (8004dc8 <_sbrk+0x40>)
 8004da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004da6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004da8:	4807      	ldr	r0, [pc, #28]	@ (8004dc8 <_sbrk+0x40>)
 8004daa:	4c08      	ldr	r4, [pc, #32]	@ (8004dcc <_sbrk+0x44>)
 8004dac:	6004      	str	r4, [r0, #0]
 8004dae:	e7f2      	b.n	8004d96 <_sbrk+0xe>
    errno = ENOMEM;
 8004db0:	f002 fc80 	bl	80076b4 <__errno>
 8004db4:	230c      	movs	r3, #12
 8004db6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	e7f3      	b.n	8004da6 <_sbrk+0x1e>
 8004dbe:	bf00      	nop
 8004dc0:	20010000 	.word	0x20010000
 8004dc4:	00000400 	.word	0x00000400
 8004dc8:	20004640 	.word	0x20004640
 8004dcc:	200062c0 	.word	0x200062c0

08004dd0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dd0:	4a03      	ldr	r2, [pc, #12]	@ (8004de0 <SystemInit+0x10>)
 8004dd2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004dd6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004dda:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004dde:	4770      	bx	lr
 8004de0:	e000ed00 	.word	0xe000ed00

08004de4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004de4:	4b08      	ldr	r3, [pc, #32]	@ (8004e08 <prvResetNextTaskUnblockTime+0x24>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	b923      	cbnz	r3, 8004df6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004dec:	4b07      	ldr	r3, [pc, #28]	@ (8004e0c <prvResetNextTaskUnblockTime+0x28>)
 8004dee:	f04f 32ff 	mov.w	r2, #4294967295
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004df6:	4b04      	ldr	r3, [pc, #16]	@ (8004e08 <prvResetNextTaskUnblockTime+0x24>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	4b02      	ldr	r3, [pc, #8]	@ (8004e0c <prvResetNextTaskUnblockTime+0x28>)
 8004e02:	601a      	str	r2, [r3, #0]
	}
}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	200046b4 	.word	0x200046b4
 8004e0c:	2000464c 	.word	0x2000464c

08004e10 <prvInitialiseNewTask>:
{
 8004e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e14:	4680      	mov	r8, r0
 8004e16:	460d      	mov	r5, r1
 8004e18:	4617      	mov	r7, r2
 8004e1a:	4699      	mov	r9, r3
 8004e1c:	9e08      	ldr	r6, [sp, #32]
 8004e1e:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8004e22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e24:	0092      	lsls	r2, r2, #2
 8004e26:	21a5      	movs	r1, #165	@ 0xa5
 8004e28:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004e2a:	f002 fc3b 	bl	80076a4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004e30:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8004e34:	3a01      	subs	r2, #1
 8004e36:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e3a:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8004e3e:	b3a5      	cbz	r5, 8004eaa <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e40:	f04f 0c00 	mov.w	ip, #0
 8004e44:	f1bc 0f0f 	cmp.w	ip, #15
 8004e48:	d809      	bhi.n	8004e5e <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e4a:	f815 300c 	ldrb.w	r3, [r5, ip]
 8004e4e:	eb04 020c 	add.w	r2, r4, ip
 8004e52:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8004e56:	b113      	cbz	r3, 8004e5e <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e58:	f10c 0c01 	add.w	ip, ip, #1
 8004e5c:	e7f2      	b.n	8004e44 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e64:	2e37      	cmp	r6, #55	@ 0x37
 8004e66:	d900      	bls.n	8004e6a <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e68:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8004e6a:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004e6c:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e6e:	2500      	movs	r5, #0
 8004e70:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e72:	1d20      	adds	r0, r4, #4
 8004e74:	f7fb fff9 	bl	8000e6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e78:	f104 0018 	add.w	r0, r4, #24
 8004e7c:	f7fb fff5 	bl	8000e6a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e80:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e82:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8004e86:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e88:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8004e8a:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e8c:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e90:	464a      	mov	r2, r9
 8004e92:	4641      	mov	r1, r8
 8004e94:	4638      	mov	r0, r7
 8004e96:	f7fc f8df 	bl	8001058 <pxPortInitialiseStack>
 8004e9a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004e9c:	f1ba 0f00 	cmp.w	sl, #0
 8004ea0:	d001      	beq.n	8004ea6 <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ea2:	f8ca 4000 	str.w	r4, [sl]
}
 8004ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8004eb0:	e7d8      	b.n	8004e64 <prvInitialiseNewTask+0x54>
	...

08004eb4 <prvInitialiseTaskLists>:
{
 8004eb4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eb6:	2400      	movs	r4, #0
 8004eb8:	e007      	b.n	8004eca <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004eba:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004ebe:	0093      	lsls	r3, r2, #2
 8004ec0:	480e      	ldr	r0, [pc, #56]	@ (8004efc <prvInitialiseTaskLists+0x48>)
 8004ec2:	4418      	add	r0, r3
 8004ec4:	f7fb ffc6 	bl	8000e54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ec8:	3401      	adds	r4, #1
 8004eca:	2c37      	cmp	r4, #55	@ 0x37
 8004ecc:	d9f5      	bls.n	8004eba <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8004ece:	4d0c      	ldr	r5, [pc, #48]	@ (8004f00 <prvInitialiseTaskLists+0x4c>)
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f7fb ffbf 	bl	8000e54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ed6:	4c0b      	ldr	r4, [pc, #44]	@ (8004f04 <prvInitialiseTaskLists+0x50>)
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f7fb ffbb 	bl	8000e54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ede:	480a      	ldr	r0, [pc, #40]	@ (8004f08 <prvInitialiseTaskLists+0x54>)
 8004ee0:	f7fb ffb8 	bl	8000e54 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004ee4:	4809      	ldr	r0, [pc, #36]	@ (8004f0c <prvInitialiseTaskLists+0x58>)
 8004ee6:	f7fb ffb5 	bl	8000e54 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004eea:	4809      	ldr	r0, [pc, #36]	@ (8004f10 <prvInitialiseTaskLists+0x5c>)
 8004eec:	f7fb ffb2 	bl	8000e54 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ef0:	4b08      	ldr	r3, [pc, #32]	@ (8004f14 <prvInitialiseTaskLists+0x60>)
 8004ef2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ef4:	4b08      	ldr	r3, [pc, #32]	@ (8004f18 <prvInitialiseTaskLists+0x64>)
 8004ef6:	601c      	str	r4, [r3, #0]
}
 8004ef8:	bd38      	pop	{r3, r4, r5, pc}
 8004efa:	bf00      	nop
 8004efc:	200046e0 	.word	0x200046e0
 8004f00:	200046cc 	.word	0x200046cc
 8004f04:	200046b8 	.word	0x200046b8
 8004f08:	2000469c 	.word	0x2000469c
 8004f0c:	20004688 	.word	0x20004688
 8004f10:	20004670 	.word	0x20004670
 8004f14:	200046b4 	.word	0x200046b4
 8004f18:	200046b0 	.word	0x200046b0

08004f1c <prvAddNewTaskToReadyList>:
{
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004f20:	f7fc f8c8 	bl	80010b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004f24:	4a22      	ldr	r2, [pc, #136]	@ (8004fb0 <prvAddNewTaskToReadyList+0x94>)
 8004f26:	6813      	ldr	r3, [r2, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f2c:	4b21      	ldr	r3, [pc, #132]	@ (8004fb4 <prvAddNewTaskToReadyList+0x98>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	b15b      	cbz	r3, 8004f4a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8004f32:	4b21      	ldr	r3, [pc, #132]	@ (8004fb8 <prvAddNewTaskToReadyList+0x9c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	b96b      	cbnz	r3, 8004f54 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f38:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb4 <prvAddNewTaskToReadyList+0x98>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f3e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d807      	bhi.n	8004f54 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8004f44:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb4 <prvAddNewTaskToReadyList+0x98>)
 8004f46:	601c      	str	r4, [r3, #0]
 8004f48:	e004      	b.n	8004f54 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8004f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fb4 <prvAddNewTaskToReadyList+0x98>)
 8004f4c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f4e:	6813      	ldr	r3, [r2, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d029      	beq.n	8004fa8 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8004f54:	4a19      	ldr	r2, [pc, #100]	@ (8004fbc <prvAddNewTaskToReadyList+0xa0>)
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f5c:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004f5e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004f60:	4b17      	ldr	r3, [pc, #92]	@ (8004fc0 <prvAddNewTaskToReadyList+0xa4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4298      	cmp	r0, r3
 8004f66:	d901      	bls.n	8004f6c <prvAddNewTaskToReadyList+0x50>
 8004f68:	4b15      	ldr	r3, [pc, #84]	@ (8004fc0 <prvAddNewTaskToReadyList+0xa4>)
 8004f6a:	6018      	str	r0, [r3, #0]
 8004f6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004f70:	1d21      	adds	r1, r4, #4
 8004f72:	4b14      	ldr	r3, [pc, #80]	@ (8004fc4 <prvAddNewTaskToReadyList+0xa8>)
 8004f74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004f78:	f7fb ff7a 	bl	8000e70 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004f7c:	f7fc f8bc 	bl	80010f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004f80:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb8 <prvAddNewTaskToReadyList+0x9c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	b17b      	cbz	r3, 8004fa6 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f86:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb4 <prvAddNewTaskToReadyList+0x98>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f8c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d209      	bcs.n	8004fa6 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8004f92:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	f3bf 8f6f 	isb	sy
}
 8004fa6:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8004fa8:	f7ff ff84 	bl	8004eb4 <prvInitialiseTaskLists>
 8004fac:	e7d2      	b.n	8004f54 <prvAddNewTaskToReadyList+0x38>
 8004fae:	bf00      	nop
 8004fb0:	2000466c 	.word	0x2000466c
 8004fb4:	20004b40 	.word	0x20004b40
 8004fb8:	20004660 	.word	0x20004660
 8004fbc:	20004650 	.word	0x20004650
 8004fc0:	20004664 	.word	0x20004664
 8004fc4:	200046e0 	.word	0x200046e0

08004fc8 <prvDeleteTCB>:
	{
 8004fc8:	b510      	push	{r4, lr}
 8004fca:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fcc:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 8004fd0:	b163      	cbz	r3, 8004fec <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d011      	beq.n	8004ffa <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d00e      	beq.n	8004ff8 <prvDeleteTCB+0x30>
 8004fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	e7fe      	b.n	8004fea <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8004fec:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8004fee:	f7fb fd79 	bl	8000ae4 <vPortFree>
				vPortFree( pxTCB );
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f7fb fd76 	bl	8000ae4 <vPortFree>
	}
 8004ff8:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8004ffa:	f7fb fd73 	bl	8000ae4 <vPortFree>
 8004ffe:	e7fb      	b.n	8004ff8 <prvDeleteTCB+0x30>

08005000 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005000:	4b0f      	ldr	r3, [pc, #60]	@ (8005040 <prvCheckTasksWaitingTermination+0x40>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	b1d3      	cbz	r3, 800503c <prvCheckTasksWaitingTermination+0x3c>
{
 8005006:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8005008:	f7fc f854 	bl	80010b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800500c:	4b0d      	ldr	r3, [pc, #52]	@ (8005044 <prvCheckTasksWaitingTermination+0x44>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005012:	1d20      	adds	r0, r4, #4
 8005014:	f7fb ff50 	bl	8000eb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005018:	4a0b      	ldr	r2, [pc, #44]	@ (8005048 <prvCheckTasksWaitingTermination+0x48>)
 800501a:	6813      	ldr	r3, [r2, #0]
 800501c:	3b01      	subs	r3, #1
 800501e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005020:	4a07      	ldr	r2, [pc, #28]	@ (8005040 <prvCheckTasksWaitingTermination+0x40>)
 8005022:	6813      	ldr	r3, [r2, #0]
 8005024:	3b01      	subs	r3, #1
 8005026:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8005028:	f7fc f866 	bl	80010f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800502c:	4620      	mov	r0, r4
 800502e:	f7ff ffcb 	bl	8004fc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005032:	4b03      	ldr	r3, [pc, #12]	@ (8005040 <prvCheckTasksWaitingTermination+0x40>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e6      	bne.n	8005008 <prvCheckTasksWaitingTermination+0x8>
}
 800503a:	bd10      	pop	{r4, pc}
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20004684 	.word	0x20004684
 8005044:	20004688 	.word	0x20004688
 8005048:	2000466c 	.word	0x2000466c

0800504c <prvIdleTask>:
{
 800504c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800504e:	f7ff ffd7 	bl	8005000 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005052:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <prvIdleTask+0x24>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d9f9      	bls.n	800504e <prvIdleTask+0x2>
				taskYIELD();
 800505a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800505e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005062:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	e7ee      	b.n	800504e <prvIdleTask+0x2>
 8005070:	200046e0 	.word	0x200046e0

08005074 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	4604      	mov	r4, r0
 8005078:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800507a:	4b17      	ldr	r3, [pc, #92]	@ (80050d8 <prvAddCurrentTaskToDelayedList+0x64>)
 800507c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800507e:	4b17      	ldr	r3, [pc, #92]	@ (80050dc <prvAddCurrentTaskToDelayedList+0x68>)
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	3004      	adds	r0, #4
 8005084:	f7fb ff18 	bl	8000eb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005088:	f1b4 3fff 	cmp.w	r4, #4294967295
 800508c:	d00d      	beq.n	80050aa <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800508e:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005090:	4b12      	ldr	r3, [pc, #72]	@ (80050dc <prvAddCurrentTaskToDelayedList+0x68>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005096:	42a6      	cmp	r6, r4
 8005098:	d910      	bls.n	80050bc <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800509a:	4b11      	ldr	r3, [pc, #68]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x6c>)
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	4b0f      	ldr	r3, [pc, #60]	@ (80050dc <prvAddCurrentTaskToDelayedList+0x68>)
 80050a0:	6819      	ldr	r1, [r3, #0]
 80050a2:	3104      	adds	r1, #4
 80050a4:	f7fb feef 	bl	8000e86 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050a8:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050aa:	2d00      	cmp	r5, #0
 80050ac:	d0ef      	beq.n	800508e <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ae:	4b0b      	ldr	r3, [pc, #44]	@ (80050dc <prvAddCurrentTaskToDelayedList+0x68>)
 80050b0:	6819      	ldr	r1, [r3, #0]
 80050b2:	3104      	adds	r1, #4
 80050b4:	480b      	ldr	r0, [pc, #44]	@ (80050e4 <prvAddCurrentTaskToDelayedList+0x70>)
 80050b6:	f7fb fedb 	bl	8000e70 <vListInsertEnd>
 80050ba:	e7f5      	b.n	80050a8 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050bc:	4b0a      	ldr	r3, [pc, #40]	@ (80050e8 <prvAddCurrentTaskToDelayedList+0x74>)
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	4b06      	ldr	r3, [pc, #24]	@ (80050dc <prvAddCurrentTaskToDelayedList+0x68>)
 80050c2:	6819      	ldr	r1, [r3, #0]
 80050c4:	3104      	adds	r1, #4
 80050c6:	f7fb fede 	bl	8000e86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050ca:	4b08      	ldr	r3, [pc, #32]	@ (80050ec <prvAddCurrentTaskToDelayedList+0x78>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	42a3      	cmp	r3, r4
 80050d0:	d9ea      	bls.n	80050a8 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 80050d2:	4b06      	ldr	r3, [pc, #24]	@ (80050ec <prvAddCurrentTaskToDelayedList+0x78>)
 80050d4:	601c      	str	r4, [r3, #0]
}
 80050d6:	e7e7      	b.n	80050a8 <prvAddCurrentTaskToDelayedList+0x34>
 80050d8:	20004668 	.word	0x20004668
 80050dc:	20004b40 	.word	0x20004b40
 80050e0:	200046b0 	.word	0x200046b0
 80050e4:	20004670 	.word	0x20004670
 80050e8:	200046b4 	.word	0x200046b4
 80050ec:	2000464c 	.word	0x2000464c

080050f0 <xTaskCreateStatic>:
	{
 80050f0:	b530      	push	{r4, r5, lr}
 80050f2:	b087      	sub	sp, #28
 80050f4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80050f6:	b17c      	cbz	r4, 8005118 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050f8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80050fa:	b1b5      	cbz	r5, 800512a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80050fc:	255c      	movs	r5, #92	@ 0x5c
 80050fe:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005100:	9d04      	ldr	r5, [sp, #16]
 8005102:	2d5c      	cmp	r5, #92	@ 0x5c
 8005104:	d01a      	beq.n	800513c <xTaskCreateStatic+0x4c>
 8005106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	e7fe      	b.n	8005116 <xTaskCreateStatic+0x26>
 8005118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005128:	e7fe      	b.n	8005128 <xTaskCreateStatic+0x38>
 800512a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800513a:	e7fe      	b.n	800513a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800513c:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800513e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005140:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005142:	2402      	movs	r4, #2
 8005144:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005148:	2400      	movs	r4, #0
 800514a:	9403      	str	r4, [sp, #12]
 800514c:	9502      	str	r5, [sp, #8]
 800514e:	ac05      	add	r4, sp, #20
 8005150:	9401      	str	r4, [sp, #4]
 8005152:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005154:	9400      	str	r4, [sp, #0]
 8005156:	f7ff fe5b 	bl	8004e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800515a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800515c:	f7ff fede 	bl	8004f1c <prvAddNewTaskToReadyList>
	}
 8005160:	9805      	ldr	r0, [sp, #20]
 8005162:	b007      	add	sp, #28
 8005164:	bd30      	pop	{r4, r5, pc}

08005166 <xTaskCreate>:
	{
 8005166:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800516a:	b085      	sub	sp, #20
 800516c:	4607      	mov	r7, r0
 800516e:	4688      	mov	r8, r1
 8005170:	4614      	mov	r4, r2
 8005172:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005174:	0090      	lsls	r0, r2, #2
 8005176:	f7fb fc33 	bl	80009e0 <pvPortMalloc>
			if( pxStack != NULL )
 800517a:	b308      	cbz	r0, 80051c0 <xTaskCreate+0x5a>
 800517c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800517e:	205c      	movs	r0, #92	@ 0x5c
 8005180:	f7fb fc2e 	bl	80009e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005184:	4605      	mov	r5, r0
 8005186:	b1a8      	cbz	r0, 80051b4 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8005188:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800518c:	2300      	movs	r3, #0
 800518e:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005192:	9303      	str	r3, [sp, #12]
 8005194:	9002      	str	r0, [sp, #8]
 8005196:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	4633      	mov	r3, r6
 80051a0:	4622      	mov	r2, r4
 80051a2:	4641      	mov	r1, r8
 80051a4:	4638      	mov	r0, r7
 80051a6:	f7ff fe33 	bl	8004e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051aa:	4628      	mov	r0, r5
 80051ac:	f7ff feb6 	bl	8004f1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051b0:	2001      	movs	r0, #1
 80051b2:	e007      	b.n	80051c4 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80051b4:	4648      	mov	r0, r9
 80051b6:	f7fb fc95 	bl	8000ae4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051ba:	f04f 30ff 	mov.w	r0, #4294967295
 80051be:	e001      	b.n	80051c4 <xTaskCreate+0x5e>
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80051c4:	b005      	add	sp, #20
 80051c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080051cc <vTaskStartScheduler>:
{
 80051cc:	b510      	push	{r4, lr}
 80051ce:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051d0:	2400      	movs	r4, #0
 80051d2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051d4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051d6:	aa07      	add	r2, sp, #28
 80051d8:	a906      	add	r1, sp, #24
 80051da:	a805      	add	r0, sp, #20
 80051dc:	f7fb fa54 	bl	8000688 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051e0:	9b05      	ldr	r3, [sp, #20]
 80051e2:	9302      	str	r3, [sp, #8]
 80051e4:	9b06      	ldr	r3, [sp, #24]
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	9400      	str	r4, [sp, #0]
 80051ea:	4623      	mov	r3, r4
 80051ec:	9a07      	ldr	r2, [sp, #28]
 80051ee:	4917      	ldr	r1, [pc, #92]	@ (800524c <vTaskStartScheduler+0x80>)
 80051f0:	4817      	ldr	r0, [pc, #92]	@ (8005250 <vTaskStartScheduler+0x84>)
 80051f2:	f7ff ff7d 	bl	80050f0 <xTaskCreateStatic>
 80051f6:	4b17      	ldr	r3, [pc, #92]	@ (8005254 <vTaskStartScheduler+0x88>)
 80051f8:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 80051fa:	b1c0      	cbz	r0, 800522e <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 80051fc:	f000 fd7c 	bl	8005cf8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8005200:	2801      	cmp	r0, #1
 8005202:	d115      	bne.n	8005230 <vTaskStartScheduler+0x64>
 8005204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8005214:	4b10      	ldr	r3, [pc, #64]	@ (8005258 <vTaskStartScheduler+0x8c>)
 8005216:	f04f 32ff 	mov.w	r2, #4294967295
 800521a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800521c:	4b0f      	ldr	r3, [pc, #60]	@ (800525c <vTaskStartScheduler+0x90>)
 800521e:	2201      	movs	r2, #1
 8005220:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005222:	4b0f      	ldr	r3, [pc, #60]	@ (8005260 <vTaskStartScheduler+0x94>)
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005228:	f7fb ffde 	bl	80011e8 <xPortStartScheduler>
		}
 800522c:	e003      	b.n	8005236 <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 800522e:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005230:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005234:	d001      	beq.n	800523a <vTaskStartScheduler+0x6e>
}
 8005236:	b008      	add	sp, #32
 8005238:	bd10      	pop	{r4, pc}
 800523a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800524a:	e7fe      	b.n	800524a <vTaskStartScheduler+0x7e>
 800524c:	08008454 	.word	0x08008454
 8005250:	0800504d 	.word	0x0800504d
 8005254:	20004648 	.word	0x20004648
 8005258:	2000464c 	.word	0x2000464c
 800525c:	20004660 	.word	0x20004660
 8005260:	20004668 	.word	0x20004668

08005264 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005264:	4a02      	ldr	r2, [pc, #8]	@ (8005270 <vTaskSuspendAll+0xc>)
 8005266:	6813      	ldr	r3, [r2, #0]
 8005268:	3301      	adds	r3, #1
 800526a:	6013      	str	r3, [r2, #0]
}
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20004644 	.word	0x20004644

08005274 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8005274:	4b01      	ldr	r3, [pc, #4]	@ (800527c <xTaskGetTickCount+0x8>)
 8005276:	6818      	ldr	r0, [r3, #0]
}
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20004668 	.word	0x20004668

08005280 <xTaskIncrementTick>:
{
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005282:	4b3a      	ldr	r3, [pc, #232]	@ (800536c <xTaskIncrementTick+0xec>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d169      	bne.n	800535e <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800528a:	4b39      	ldr	r3, [pc, #228]	@ (8005370 <xTaskIncrementTick+0xf0>)
 800528c:	681d      	ldr	r5, [r3, #0]
 800528e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8005290:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005292:	b9c5      	cbnz	r5, 80052c6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8005294:	4b37      	ldr	r3, [pc, #220]	@ (8005374 <xTaskIncrementTick+0xf4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	b143      	cbz	r3, 80052ae <xTaskIncrementTick+0x2e>
 800529c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	e7fe      	b.n	80052ac <xTaskIncrementTick+0x2c>
 80052ae:	4a31      	ldr	r2, [pc, #196]	@ (8005374 <xTaskIncrementTick+0xf4>)
 80052b0:	6811      	ldr	r1, [r2, #0]
 80052b2:	4b31      	ldr	r3, [pc, #196]	@ (8005378 <xTaskIncrementTick+0xf8>)
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	6010      	str	r0, [r2, #0]
 80052b8:	6019      	str	r1, [r3, #0]
 80052ba:	4a30      	ldr	r2, [pc, #192]	@ (800537c <xTaskIncrementTick+0xfc>)
 80052bc:	6813      	ldr	r3, [r2, #0]
 80052be:	3301      	adds	r3, #1
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	f7ff fd8f 	bl	8004de4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052c6:	4b2e      	ldr	r3, [pc, #184]	@ (8005380 <xTaskIncrementTick+0x100>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	42ab      	cmp	r3, r5
 80052cc:	d93d      	bls.n	800534a <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80052ce:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005384 <xTaskIncrementTick+0x104>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80052da:	009a      	lsls	r2, r3, #2
 80052dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005388 <xTaskIncrementTick+0x108>)
 80052de:	589b      	ldr	r3, [r3, r2]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d900      	bls.n	80052e6 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80052e4:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 80052e6:	4b29      	ldr	r3, [pc, #164]	@ (800538c <xTaskIncrementTick+0x10c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d03c      	beq.n	8005368 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 80052ee:	2701      	movs	r7, #1
	return xSwitchRequired;
 80052f0:	e03a      	b.n	8005368 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 80052f2:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005374 <xTaskIncrementTick+0xf4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	b343      	cbz	r3, 800534e <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005374 <xTaskIncrementTick+0xf4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005304:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8005306:	429d      	cmp	r5, r3
 8005308:	d326      	bcc.n	8005358 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800530a:	1d26      	adds	r6, r4, #4
 800530c:	4630      	mov	r0, r6
 800530e:	f7fb fdd3 	bl	8000eb8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005312:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005314:	b11b      	cbz	r3, 800531e <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005316:	f104 0018 	add.w	r0, r4, #24
 800531a:	f7fb fdcd 	bl	8000eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800531e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005320:	4a1b      	ldr	r2, [pc, #108]	@ (8005390 <xTaskIncrementTick+0x110>)
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	4293      	cmp	r3, r2
 8005326:	d901      	bls.n	800532c <xTaskIncrementTick+0xac>
 8005328:	4a19      	ldr	r2, [pc, #100]	@ (8005390 <xTaskIncrementTick+0x110>)
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005330:	009a      	lsls	r2, r3, #2
 8005332:	4631      	mov	r1, r6
 8005334:	4814      	ldr	r0, [pc, #80]	@ (8005388 <xTaskIncrementTick+0x108>)
 8005336:	4410      	add	r0, r2
 8005338:	f7fb fd9a 	bl	8000e70 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800533c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800533e:	4b11      	ldr	r3, [pc, #68]	@ (8005384 <xTaskIncrementTick+0x104>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	429a      	cmp	r2, r3
 8005346:	d2d4      	bcs.n	80052f2 <xTaskIncrementTick+0x72>
 8005348:	e7d4      	b.n	80052f4 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800534a:	2700      	movs	r7, #0
 800534c:	e7d2      	b.n	80052f4 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800534e:	4b0c      	ldr	r3, [pc, #48]	@ (8005380 <xTaskIncrementTick+0x100>)
 8005350:	f04f 32ff 	mov.w	r2, #4294967295
 8005354:	601a      	str	r2, [r3, #0]
					break;
 8005356:	e7bb      	b.n	80052d0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8005358:	4a09      	ldr	r2, [pc, #36]	@ (8005380 <xTaskIncrementTick+0x100>)
 800535a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800535c:	e7b8      	b.n	80052d0 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800535e:	4a0d      	ldr	r2, [pc, #52]	@ (8005394 <xTaskIncrementTick+0x114>)
 8005360:	6813      	ldr	r3, [r2, #0]
 8005362:	3301      	adds	r3, #1
 8005364:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005366:	2700      	movs	r7, #0
}
 8005368:	4638      	mov	r0, r7
 800536a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800536c:	20004644 	.word	0x20004644
 8005370:	20004668 	.word	0x20004668
 8005374:	200046b4 	.word	0x200046b4
 8005378:	200046b0 	.word	0x200046b0
 800537c:	20004654 	.word	0x20004654
 8005380:	2000464c 	.word	0x2000464c
 8005384:	20004b40 	.word	0x20004b40
 8005388:	200046e0 	.word	0x200046e0
 800538c:	20004658 	.word	0x20004658
 8005390:	20004664 	.word	0x20004664
 8005394:	2000465c 	.word	0x2000465c

08005398 <xTaskResumeAll>:
{
 8005398:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800539a:	4b35      	ldr	r3, [pc, #212]	@ (8005470 <xTaskResumeAll+0xd8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	b943      	cbnz	r3, 80053b2 <xTaskResumeAll+0x1a>
 80053a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	e7fe      	b.n	80053b0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80053b2:	f7fb fe7f 	bl	80010b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80053b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005470 <xTaskResumeAll+0xd8>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	3a01      	subs	r2, #1
 80053bc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d14f      	bne.n	8005464 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005474 <xTaskResumeAll+0xdc>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	b90b      	cbnz	r3, 80053ce <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80053ca:	2400      	movs	r4, #0
 80053cc:	e04b      	b.n	8005466 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80053ce:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053d0:	4b29      	ldr	r3, [pc, #164]	@ (8005478 <xTaskResumeAll+0xe0>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	b31b      	cbz	r3, 800541e <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d6:	4b28      	ldr	r3, [pc, #160]	@ (8005478 <xTaskResumeAll+0xe0>)
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053dc:	f104 0018 	add.w	r0, r4, #24
 80053e0:	f7fb fd6a 	bl	8000eb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053e4:	1d25      	adds	r5, r4, #4
 80053e6:	4628      	mov	r0, r5
 80053e8:	f7fb fd66 	bl	8000eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053ec:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80053ee:	4b23      	ldr	r3, [pc, #140]	@ (800547c <xTaskResumeAll+0xe4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4298      	cmp	r0, r3
 80053f4:	d901      	bls.n	80053fa <xTaskResumeAll+0x62>
 80053f6:	4b21      	ldr	r3, [pc, #132]	@ (800547c <xTaskResumeAll+0xe4>)
 80053f8:	6018      	str	r0, [r3, #0]
 80053fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80053fe:	4629      	mov	r1, r5
 8005400:	4b1f      	ldr	r3, [pc, #124]	@ (8005480 <xTaskResumeAll+0xe8>)
 8005402:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005406:	f7fb fd33 	bl	8000e70 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800540a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800540c:	4b1d      	ldr	r3, [pc, #116]	@ (8005484 <xTaskResumeAll+0xec>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005412:	429a      	cmp	r2, r3
 8005414:	d3dc      	bcc.n	80053d0 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8005416:	4b1c      	ldr	r3, [pc, #112]	@ (8005488 <xTaskResumeAll+0xf0>)
 8005418:	2201      	movs	r2, #1
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e7d8      	b.n	80053d0 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800541e:	b10c      	cbz	r4, 8005424 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8005420:	f7ff fce0 	bl	8004de4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005424:	4b19      	ldr	r3, [pc, #100]	@ (800548c <xTaskResumeAll+0xf4>)
 8005426:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005428:	b984      	cbnz	r4, 800544c <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800542a:	4b17      	ldr	r3, [pc, #92]	@ (8005488 <xTaskResumeAll+0xf0>)
 800542c:	681c      	ldr	r4, [r3, #0]
 800542e:	b1d4      	cbz	r4, 8005466 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8005430:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005438:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005444:	2401      	movs	r4, #1
 8005446:	e00e      	b.n	8005466 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005448:	3c01      	subs	r4, #1
 800544a:	d007      	beq.n	800545c <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800544c:	f7ff ff18 	bl	8005280 <xTaskIncrementTick>
 8005450:	2800      	cmp	r0, #0
 8005452:	d0f9      	beq.n	8005448 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8005454:	4b0c      	ldr	r3, [pc, #48]	@ (8005488 <xTaskResumeAll+0xf0>)
 8005456:	2201      	movs	r2, #1
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	e7f5      	b.n	8005448 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800545c:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <xTaskResumeAll+0xf4>)
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	e7e2      	b.n	800542a <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8005464:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005466:	f7fb fe47 	bl	80010f8 <vPortExitCritical>
}
 800546a:	4620      	mov	r0, r4
 800546c:	bd38      	pop	{r3, r4, r5, pc}
 800546e:	bf00      	nop
 8005470:	20004644 	.word	0x20004644
 8005474:	2000466c 	.word	0x2000466c
 8005478:	2000469c 	.word	0x2000469c
 800547c:	20004664 	.word	0x20004664
 8005480:	200046e0 	.word	0x200046e0
 8005484:	20004b40 	.word	0x20004b40
 8005488:	20004658 	.word	0x20004658
 800548c:	2000465c 	.word	0x2000465c

08005490 <vTaskDelay>:
	{
 8005490:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005492:	b1a8      	cbz	r0, 80054c0 <vTaskDelay+0x30>
 8005494:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8005496:	4b10      	ldr	r3, [pc, #64]	@ (80054d8 <vTaskDelay+0x48>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	b143      	cbz	r3, 80054ae <vTaskDelay+0x1e>
 800549c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	e7fe      	b.n	80054ac <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80054ae:	f7ff fed9 	bl	8005264 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054b2:	2100      	movs	r1, #0
 80054b4:	4620      	mov	r0, r4
 80054b6:	f7ff fddd 	bl	8005074 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80054ba:	f7ff ff6d 	bl	8005398 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80054be:	b948      	cbnz	r0, 80054d4 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80054c0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80054c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	f3bf 8f6f 	isb	sy
	}
 80054d4:	bd10      	pop	{r4, pc}
 80054d6:	bf00      	nop
 80054d8:	20004644 	.word	0x20004644

080054dc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054dc:	4b20      	ldr	r3, [pc, #128]	@ (8005560 <vTaskSwitchContext+0x84>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	b11b      	cbz	r3, 80054ea <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80054e2:	4b20      	ldr	r3, [pc, #128]	@ (8005564 <vTaskSwitchContext+0x88>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80054ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005564 <vTaskSwitchContext+0x88>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005568 <vTaskSwitchContext+0x8c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80054f8:	008a      	lsls	r2, r1, #2
 80054fa:	491c      	ldr	r1, [pc, #112]	@ (800556c <vTaskSwitchContext+0x90>)
 80054fc:	588a      	ldr	r2, [r1, r2]
 80054fe:	b95a      	cbnz	r2, 8005518 <vTaskSwitchContext+0x3c>
 8005500:	b10b      	cbz	r3, 8005506 <vTaskSwitchContext+0x2a>
 8005502:	3b01      	subs	r3, #1
 8005504:	e7f6      	b.n	80054f4 <vTaskSwitchContext+0x18>
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	e7fe      	b.n	8005516 <vTaskSwitchContext+0x3a>
 8005518:	4608      	mov	r0, r1
 800551a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800551e:	008a      	lsls	r2, r1, #2
 8005520:	4402      	add	r2, r0
 8005522:	6851      	ldr	r1, [r2, #4]
 8005524:	6849      	ldr	r1, [r1, #4]
 8005526:	6051      	str	r1, [r2, #4]
 8005528:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800552c:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8005530:	3208      	adds	r2, #8
 8005532:	4402      	add	r2, r0
 8005534:	4291      	cmp	r1, r2
 8005536:	d00b      	beq.n	8005550 <vTaskSwitchContext+0x74>
 8005538:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800553c:	0091      	lsls	r1, r2, #2
 800553e:	4a0b      	ldr	r2, [pc, #44]	@ (800556c <vTaskSwitchContext+0x90>)
 8005540:	440a      	add	r2, r1
 8005542:	6852      	ldr	r2, [r2, #4]
 8005544:	68d1      	ldr	r1, [r2, #12]
 8005546:	4a0a      	ldr	r2, [pc, #40]	@ (8005570 <vTaskSwitchContext+0x94>)
 8005548:	6011      	str	r1, [r2, #0]
 800554a:	4a07      	ldr	r2, [pc, #28]	@ (8005568 <vTaskSwitchContext+0x8c>)
 800554c:	6013      	str	r3, [r2, #0]
}
 800554e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005550:	6848      	ldr	r0, [r1, #4]
 8005552:	4662      	mov	r2, ip
 8005554:	0091      	lsls	r1, r2, #2
 8005556:	4a05      	ldr	r2, [pc, #20]	@ (800556c <vTaskSwitchContext+0x90>)
 8005558:	440a      	add	r2, r1
 800555a:	6050      	str	r0, [r2, #4]
 800555c:	e7ec      	b.n	8005538 <vTaskSwitchContext+0x5c>
 800555e:	bf00      	nop
 8005560:	20004644 	.word	0x20004644
 8005564:	20004658 	.word	0x20004658
 8005568:	20004664 	.word	0x20004664
 800556c:	200046e0 	.word	0x200046e0
 8005570:	20004b40 	.word	0x20004b40

08005574 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005574:	b158      	cbz	r0, 800558e <vTaskPlaceOnEventList+0x1a>
{
 8005576:	b510      	push	{r4, lr}
 8005578:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800557a:	4a09      	ldr	r2, [pc, #36]	@ (80055a0 <vTaskPlaceOnEventList+0x2c>)
 800557c:	6811      	ldr	r1, [r2, #0]
 800557e:	3118      	adds	r1, #24
 8005580:	f7fb fc81 	bl	8000e86 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005584:	2101      	movs	r1, #1
 8005586:	4620      	mov	r0, r4
 8005588:	f7ff fd74 	bl	8005074 <prvAddCurrentTaskToDelayedList>
}
 800558c:	bd10      	pop	{r4, pc}
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800559e:	e7fe      	b.n	800559e <vTaskPlaceOnEventList+0x2a>
 80055a0:	20004b40 	.word	0x20004b40

080055a4 <vTaskPlaceOnEventListRestricted>:
	{
 80055a4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80055a6:	b170      	cbz	r0, 80055c6 <vTaskPlaceOnEventListRestricted+0x22>
 80055a8:	460d      	mov	r5, r1
 80055aa:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055ac:	4a0a      	ldr	r2, [pc, #40]	@ (80055d8 <vTaskPlaceOnEventListRestricted+0x34>)
 80055ae:	6811      	ldr	r1, [r2, #0]
 80055b0:	3118      	adds	r1, #24
 80055b2:	f7fb fc5d 	bl	8000e70 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80055b6:	b10c      	cbz	r4, 80055bc <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80055b8:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055bc:	4621      	mov	r1, r4
 80055be:	4628      	mov	r0, r5
 80055c0:	f7ff fd58 	bl	8005074 <prvAddCurrentTaskToDelayedList>
	}
 80055c4:	bd38      	pop	{r3, r4, r5, pc}
 80055c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80055d6:	e7fe      	b.n	80055d6 <vTaskPlaceOnEventListRestricted+0x32>
 80055d8:	20004b40 	.word	0x20004b40

080055dc <xTaskRemoveFromEventList>:
{
 80055dc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055de:	68c3      	ldr	r3, [r0, #12]
 80055e0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80055e2:	b324      	cbz	r4, 800562e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055e4:	f104 0518 	add.w	r5, r4, #24
 80055e8:	4628      	mov	r0, r5
 80055ea:	f7fb fc65 	bl	8000eb8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ee:	4b18      	ldr	r3, [pc, #96]	@ (8005650 <xTaskRemoveFromEventList+0x74>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	bb2b      	cbnz	r3, 8005640 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055f4:	1d25      	adds	r5, r4, #4
 80055f6:	4628      	mov	r0, r5
 80055f8:	f7fb fc5e 	bl	8000eb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055fc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80055fe:	4b15      	ldr	r3, [pc, #84]	@ (8005654 <xTaskRemoveFromEventList+0x78>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4298      	cmp	r0, r3
 8005604:	d901      	bls.n	800560a <xTaskRemoveFromEventList+0x2e>
 8005606:	4b13      	ldr	r3, [pc, #76]	@ (8005654 <xTaskRemoveFromEventList+0x78>)
 8005608:	6018      	str	r0, [r3, #0]
 800560a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800560e:	4629      	mov	r1, r5
 8005610:	4b11      	ldr	r3, [pc, #68]	@ (8005658 <xTaskRemoveFromEventList+0x7c>)
 8005612:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005616:	f7fb fc2b 	bl	8000e70 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800561a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800561c:	4b0f      	ldr	r3, [pc, #60]	@ (800565c <xTaskRemoveFromEventList+0x80>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005622:	429a      	cmp	r2, r3
 8005624:	d911      	bls.n	800564a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8005626:	2001      	movs	r0, #1
 8005628:	4b0d      	ldr	r3, [pc, #52]	@ (8005660 <xTaskRemoveFromEventList+0x84>)
 800562a:	6018      	str	r0, [r3, #0]
}
 800562c:	bd38      	pop	{r3, r4, r5, pc}
 800562e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800563e:	e7fe      	b.n	800563e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005640:	4629      	mov	r1, r5
 8005642:	4808      	ldr	r0, [pc, #32]	@ (8005664 <xTaskRemoveFromEventList+0x88>)
 8005644:	f7fb fc14 	bl	8000e70 <vListInsertEnd>
 8005648:	e7e7      	b.n	800561a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800564a:	2000      	movs	r0, #0
	return xReturn;
 800564c:	e7ee      	b.n	800562c <xTaskRemoveFromEventList+0x50>
 800564e:	bf00      	nop
 8005650:	20004644 	.word	0x20004644
 8005654:	20004664 	.word	0x20004664
 8005658:	200046e0 	.word	0x200046e0
 800565c:	20004b40 	.word	0x20004b40
 8005660:	20004658 	.word	0x20004658
 8005664:	2000469c 	.word	0x2000469c

08005668 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005668:	4b03      	ldr	r3, [pc, #12]	@ (8005678 <vTaskInternalSetTimeOutState+0x10>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800566e:	4b03      	ldr	r3, [pc, #12]	@ (800567c <vTaskInternalSetTimeOutState+0x14>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6043      	str	r3, [r0, #4]
}
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	20004654 	.word	0x20004654
 800567c:	20004668 	.word	0x20004668

08005680 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8005680:	b1e0      	cbz	r0, 80056bc <xTaskCheckForTimeOut+0x3c>
{
 8005682:	b570      	push	{r4, r5, r6, lr}
 8005684:	460c      	mov	r4, r1
 8005686:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8005688:	b309      	cbz	r1, 80056ce <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 800568a:	f7fb fd13 	bl	80010b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800568e:	4b1c      	ldr	r3, [pc, #112]	@ (8005700 <xTaskCheckForTimeOut+0x80>)
 8005690:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005692:	686b      	ldr	r3, [r5, #4]
 8005694:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8005696:	6822      	ldr	r2, [r4, #0]
 8005698:	f1b2 3fff 	cmp.w	r2, #4294967295
 800569c:	d028      	beq.n	80056f0 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800569e:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8005704 <xTaskCheckForTimeOut+0x84>
 80056a2:	f8dc c000 	ldr.w	ip, [ip]
 80056a6:	682e      	ldr	r6, [r5, #0]
 80056a8:	4566      	cmp	r6, ip
 80056aa:	d001      	beq.n	80056b0 <xTaskCheckForTimeOut+0x30>
 80056ac:	428b      	cmp	r3, r1
 80056ae:	d924      	bls.n	80056fa <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056b0:	4282      	cmp	r2, r0
 80056b2:	d815      	bhi.n	80056e0 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80056b8:	2401      	movs	r4, #1
 80056ba:	e01a      	b.n	80056f2 <xTaskCheckForTimeOut+0x72>
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80056cc:	e7fe      	b.n	80056cc <xTaskCheckForTimeOut+0x4c>
 80056ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80056de:	e7fe      	b.n	80056de <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 80056e0:	1a5b      	subs	r3, r3, r1
 80056e2:	4413      	add	r3, r2
 80056e4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056e6:	4628      	mov	r0, r5
 80056e8:	f7ff ffbe 	bl	8005668 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056ec:	2400      	movs	r4, #0
 80056ee:	e000      	b.n	80056f2 <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 80056f0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80056f2:	f7fb fd01 	bl	80010f8 <vPortExitCritical>
}
 80056f6:	4620      	mov	r0, r4
 80056f8:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 80056fa:	2401      	movs	r4, #1
 80056fc:	e7f9      	b.n	80056f2 <xTaskCheckForTimeOut+0x72>
 80056fe:	bf00      	nop
 8005700:	20004668 	.word	0x20004668
 8005704:	20004654 	.word	0x20004654

08005708 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005708:	4b01      	ldr	r3, [pc, #4]	@ (8005710 <vTaskMissedYield+0x8>)
 800570a:	2201      	movs	r2, #1
 800570c:	601a      	str	r2, [r3, #0]
}
 800570e:	4770      	bx	lr
 8005710:	20004658 	.word	0x20004658

08005714 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005714:	4b05      	ldr	r3, [pc, #20]	@ (800572c <xTaskGetSchedulerState+0x18>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	b133      	cbz	r3, 8005728 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800571a:	4b05      	ldr	r3, [pc, #20]	@ (8005730 <xTaskGetSchedulerState+0x1c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	b10b      	cbz	r3, 8005724 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8005720:	2000      	movs	r0, #0
	}
 8005722:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8005724:	2002      	movs	r0, #2
 8005726:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005728:	2001      	movs	r0, #1
 800572a:	4770      	bx	lr
 800572c:	20004660 	.word	0x20004660
 8005730:	20004644 	.word	0x20004644

08005734 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005734:	2800      	cmp	r0, #0
 8005736:	d03b      	beq.n	80057b0 <xTaskPriorityDisinherit+0x7c>
	{
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800573c:	4b1e      	ldr	r3, [pc, #120]	@ (80057b8 <xTaskPriorityDisinherit+0x84>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4283      	cmp	r3, r0
 8005742:	d008      	beq.n	8005756 <xTaskPriorityDisinherit+0x22>
 8005744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	e7fe      	b.n	8005754 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8005756:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8005758:	b943      	cbnz	r3, 800576c <xTaskPriorityDisinherit+0x38>
 800575a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	e7fe      	b.n	800576a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800576c:	3b01      	subs	r3, #1
 800576e:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005770:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005772:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8005774:	4291      	cmp	r1, r2
 8005776:	d01d      	beq.n	80057b4 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005778:	b10b      	cbz	r3, 800577e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800577a:	2000      	movs	r0, #0
	}
 800577c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800577e:	1d05      	adds	r5, r0, #4
 8005780:	4628      	mov	r0, r5
 8005782:	f7fb fb99 	bl	8000eb8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005786:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8005788:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800578a:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 800578e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005790:	4b0a      	ldr	r3, [pc, #40]	@ (80057bc <xTaskPriorityDisinherit+0x88>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4298      	cmp	r0, r3
 8005796:	d901      	bls.n	800579c <xTaskPriorityDisinherit+0x68>
 8005798:	4b08      	ldr	r3, [pc, #32]	@ (80057bc <xTaskPriorityDisinherit+0x88>)
 800579a:	6018      	str	r0, [r3, #0]
 800579c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80057a0:	4629      	mov	r1, r5
 80057a2:	4b07      	ldr	r3, [pc, #28]	@ (80057c0 <xTaskPriorityDisinherit+0x8c>)
 80057a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80057a8:	f7fb fb62 	bl	8000e70 <vListInsertEnd>
					xReturn = pdTRUE;
 80057ac:	2001      	movs	r0, #1
 80057ae:	e7e5      	b.n	800577c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80057b0:	2000      	movs	r0, #0
	}
 80057b2:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80057b4:	2000      	movs	r0, #0
 80057b6:	e7e1      	b.n	800577c <xTaskPriorityDisinherit+0x48>
 80057b8:	20004b40 	.word	0x20004b40
 80057bc:	20004664 	.word	0x20004664
 80057c0:	200046e0 	.word	0x200046e0

080057c4 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80057c4:	b500      	push	{lr}
 80057c6:	b08f      	sub	sp, #60	@ 0x3c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057c8:	2300      	movs	r3, #0
 80057ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80057cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80057d0:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057d2:	9308      	str	r3, [sp, #32]
 80057d4:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80057d6:	9301      	str	r3, [sp, #4]
 80057d8:	9302      	str	r3, [sp, #8]
 80057da:	9303      	str	r3, [sp, #12]
 80057dc:	9304      	str	r3, [sp, #16]
 80057de:	9305      	str	r3, [sp, #20]
 80057e0:	9306      	str	r3, [sp, #24]
 80057e2:	9307      	str	r3, [sp, #28]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80057e4:	4824      	ldr	r0, [pc, #144]	@ (8005878 <MX_TIM2_Init+0xb4>)
 80057e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80057ea:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 80057ec:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057ee:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 80057f0:	f04f 32ff 	mov.w	r2, #4294967295
 80057f4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057f6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057f8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80057fa:	f7fe f999 	bl	8003b30 <HAL_TIM_Base_Init>
 80057fe:	bb40      	cbnz	r0, 8005852 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005804:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005806:	a90a      	add	r1, sp, #40	@ 0x28
 8005808:	481b      	ldr	r0, [pc, #108]	@ (8005878 <MX_TIM2_Init+0xb4>)
 800580a:	f7fe faed 	bl	8003de8 <HAL_TIM_ConfigClockSource>
 800580e:	bb18      	cbnz	r0, 8005858 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8005810:	4819      	ldr	r0, [pc, #100]	@ (8005878 <MX_TIM2_Init+0xb4>)
 8005812:	f7fe f9b9 	bl	8003b88 <HAL_TIM_OC_Init>
 8005816:	bb10      	cbnz	r0, 800585e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005818:	2300      	movs	r3, #0
 800581a:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800581c:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800581e:	a908      	add	r1, sp, #32
 8005820:	4815      	ldr	r0, [pc, #84]	@ (8005878 <MX_TIM2_Init+0xb4>)
 8005822:	f7fe fc19 	bl	8004058 <HAL_TIMEx_MasterConfigSynchronization>
 8005826:	b9e8      	cbnz	r0, 8005864 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8005828:	2310      	movs	r3, #16
 800582a:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800582c:	2200      	movs	r2, #0
 800582e:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005830:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005832:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005834:	a901      	add	r1, sp, #4
 8005836:	4810      	ldr	r0, [pc, #64]	@ (8005878 <MX_TIM2_Init+0xb4>)
 8005838:	f7fe fa2c 	bl	8003c94 <HAL_TIM_OC_ConfigChannel>
 800583c:	b9a8      	cbnz	r0, 800586a <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800583e:	2204      	movs	r2, #4
 8005840:	eb0d 0102 	add.w	r1, sp, r2
 8005844:	480c      	ldr	r0, [pc, #48]	@ (8005878 <MX_TIM2_Init+0xb4>)
 8005846:	f7fe fa25 	bl	8003c94 <HAL_TIM_OC_ConfigChannel>
 800584a:	b988      	cbnz	r0, 8005870 <MX_TIM2_Init+0xac>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800584c:	b00f      	add	sp, #60	@ 0x3c
 800584e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005852:	f7fb fb51 	bl	8000ef8 <Error_Handler>
 8005856:	e7d3      	b.n	8005800 <MX_TIM2_Init+0x3c>
    Error_Handler();
 8005858:	f7fb fb4e 	bl	8000ef8 <Error_Handler>
 800585c:	e7d8      	b.n	8005810 <MX_TIM2_Init+0x4c>
    Error_Handler();
 800585e:	f7fb fb4b 	bl	8000ef8 <Error_Handler>
 8005862:	e7d9      	b.n	8005818 <MX_TIM2_Init+0x54>
    Error_Handler();
 8005864:	f7fb fb48 	bl	8000ef8 <Error_Handler>
 8005868:	e7de      	b.n	8005828 <MX_TIM2_Init+0x64>
    Error_Handler();
 800586a:	f7fb fb45 	bl	8000ef8 <Error_Handler>
 800586e:	e7e6      	b.n	800583e <MX_TIM2_Init+0x7a>
    Error_Handler();
 8005870:	f7fb fb42 	bl	8000ef8 <Error_Handler>
}
 8005874:	e7ea      	b.n	800584c <MX_TIM2_Init+0x88>
 8005876:	bf00      	nop
 8005878:	20004bd4 	.word	0x20004bd4

0800587c <MX_TIM5_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800587c:	b500      	push	{lr}
 800587e:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005880:	2300      	movs	r3, #0
 8005882:	9302      	str	r3, [sp, #8]
 8005884:	9303      	str	r3, [sp, #12]
 8005886:	9304      	str	r3, [sp, #16]
 8005888:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800588e:	4814      	ldr	r0, [pc, #80]	@ (80058e0 <MX_TIM5_Init+0x64>)
 8005890:	4a14      	ldr	r2, [pc, #80]	@ (80058e4 <MX_TIM5_Init+0x68>)
 8005892:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 0;
 8005894:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005896:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 4294967295;
 8005898:	f04f 32ff 	mov.w	r2, #4294967295
 800589c:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800589e:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058a0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80058a2:	f7fe f945 	bl	8003b30 <HAL_TIM_Base_Init>
 80058a6:	b990      	cbnz	r0, 80058ce <MX_TIM5_Init+0x52>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058ac:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80058ae:	a902      	add	r1, sp, #8
 80058b0:	480b      	ldr	r0, [pc, #44]	@ (80058e0 <MX_TIM5_Init+0x64>)
 80058b2:	f7fe fa99 	bl	8003de8 <HAL_TIM_ConfigClockSource>
 80058b6:	b968      	cbnz	r0, 80058d4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058b8:	2300      	movs	r3, #0
 80058ba:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058bc:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80058be:	4669      	mov	r1, sp
 80058c0:	4807      	ldr	r0, [pc, #28]	@ (80058e0 <MX_TIM5_Init+0x64>)
 80058c2:	f7fe fbc9 	bl	8004058 <HAL_TIMEx_MasterConfigSynchronization>
 80058c6:	b940      	cbnz	r0, 80058da <MX_TIM5_Init+0x5e>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80058c8:	b007      	add	sp, #28
 80058ca:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80058ce:	f7fb fb13 	bl	8000ef8 <Error_Handler>
 80058d2:	e7e9      	b.n	80058a8 <MX_TIM5_Init+0x2c>
    Error_Handler();
 80058d4:	f7fb fb10 	bl	8000ef8 <Error_Handler>
 80058d8:	e7ee      	b.n	80058b8 <MX_TIM5_Init+0x3c>
    Error_Handler();
 80058da:	f7fb fb0d 	bl	8000ef8 <Error_Handler>
}
 80058de:	e7f3      	b.n	80058c8 <MX_TIM5_Init+0x4c>
 80058e0:	20004b44 	.word	0x20004b44
 80058e4:	40000c00 	.word	0x40000c00

080058e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80058e8:	b500      	push	{lr}
 80058ea:	b085      	sub	sp, #20

  if(tim_baseHandle->Instance==TIM1)
 80058ec:	6803      	ldr	r3, [r0, #0]
 80058ee:	4a21      	ldr	r2, [pc, #132]	@ (8005974 <HAL_TIM_Base_MspInit+0x8c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d008      	beq.n	8005906 <HAL_TIM_Base_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 80058f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058f8:	d019      	beq.n	800592e <HAL_TIM_Base_MspInit+0x46>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 80058fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005978 <HAL_TIM_Base_MspInit+0x90>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d02b      	beq.n	8005958 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005900:	b005      	add	sp, #20
 8005902:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005906:	2200      	movs	r2, #0
 8005908:	9201      	str	r2, [sp, #4]
 800590a:	4b1c      	ldr	r3, [pc, #112]	@ (800597c <HAL_TIM_Base_MspInit+0x94>)
 800590c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800590e:	f041 0101 	orr.w	r1, r1, #1
 8005912:	6459      	str	r1, [r3, #68]	@ 0x44
 8005914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	9301      	str	r3, [sp, #4]
 800591c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 800591e:	210f      	movs	r1, #15
 8005920:	201a      	movs	r0, #26
 8005922:	f7fc fa95 	bl	8001e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005926:	201a      	movs	r0, #26
 8005928:	f7fc faa2 	bl	8001e70 <HAL_NVIC_EnableIRQ>
 800592c:	e7e8      	b.n	8005900 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800592e:	2200      	movs	r2, #0
 8005930:	9202      	str	r2, [sp, #8]
 8005932:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8005936:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005938:	f041 0101 	orr.w	r1, r1, #1
 800593c:	6419      	str	r1, [r3, #64]	@ 0x40
 800593e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	9302      	str	r3, [sp, #8]
 8005946:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8005948:	2105      	movs	r1, #5
 800594a:	201c      	movs	r0, #28
 800594c:	f7fc fa80 	bl	8001e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005950:	201c      	movs	r0, #28
 8005952:	f7fc fa8d 	bl	8001e70 <HAL_NVIC_EnableIRQ>
 8005956:	e7d3      	b.n	8005900 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005958:	2300      	movs	r3, #0
 800595a:	9303      	str	r3, [sp, #12]
 800595c:	4b07      	ldr	r3, [pc, #28]	@ (800597c <HAL_TIM_Base_MspInit+0x94>)
 800595e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005960:	f042 0208 	orr.w	r2, r2, #8
 8005964:	641a      	str	r2, [r3, #64]	@ 0x40
 8005966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	9303      	str	r3, [sp, #12]
 800596e:	9b03      	ldr	r3, [sp, #12]
}
 8005970:	e7c6      	b.n	8005900 <HAL_TIM_Base_MspInit+0x18>
 8005972:	bf00      	nop
 8005974:	40010000 	.word	0x40010000
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40023800 	.word	0x40023800

08005980 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM3)
 8005980:	6802      	ldr	r2, [r0, #0]
 8005982:	4b09      	ldr	r3, [pc, #36]	@ (80059a8 <HAL_TIM_PWM_MspInit+0x28>)
 8005984:	429a      	cmp	r2, r3
 8005986:	d000      	beq.n	800598a <HAL_TIM_PWM_MspInit+0xa>
 8005988:	4770      	bx	lr
{
 800598a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800598c:	2300      	movs	r3, #0
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	4b06      	ldr	r3, [pc, #24]	@ (80059ac <HAL_TIM_PWM_MspInit+0x2c>)
 8005992:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005994:	f042 0202 	orr.w	r2, r2, #2
 8005998:	641a      	str	r2, [r3, #64]	@ 0x40
 800599a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	9301      	str	r3, [sp, #4]
 80059a2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80059a4:	b002      	add	sp, #8
 80059a6:	4770      	bx	lr
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40023800 	.word	0x40023800

080059b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80059b0:	b500      	push	{lr}
 80059b2:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059b4:	2300      	movs	r3, #0
 80059b6:	9303      	str	r3, [sp, #12]
 80059b8:	9304      	str	r3, [sp, #16]
 80059ba:	9305      	str	r3, [sp, #20]
 80059bc:	9306      	str	r3, [sp, #24]
 80059be:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 80059c0:	6803      	ldr	r3, [r0, #0]
 80059c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a34 <HAL_TIM_MspPostInit+0x84>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d005      	beq.n	80059d4 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 80059c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a38 <HAL_TIM_MspPostInit+0x88>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d01a      	beq.n	8005a04 <HAL_TIM_MspPostInit+0x54>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80059ce:	b009      	add	sp, #36	@ 0x24
 80059d0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059d4:	2300      	movs	r3, #0
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	4b18      	ldr	r3, [pc, #96]	@ (8005a3c <HAL_TIM_MspPostInit+0x8c>)
 80059da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80059e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	9301      	str	r3, [sp, #4]
 80059ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_OUT1_PIN_Pin|PWM_OUT2_PIN_Pin|PWM_OUT3_PIN_Pin;
 80059ec:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80059f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f2:	2302      	movs	r3, #2
 80059f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80059f6:	2301      	movs	r3, #1
 80059f8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059fa:	a903      	add	r1, sp, #12
 80059fc:	4810      	ldr	r0, [pc, #64]	@ (8005a40 <HAL_TIM_MspPostInit+0x90>)
 80059fe:	f7fc fbf5 	bl	80021ec <HAL_GPIO_Init>
 8005a02:	e7e4      	b.n	80059ce <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a04:	2300      	movs	r3, #0
 8005a06:	9302      	str	r3, [sp, #8]
 8005a08:	4b0c      	ldr	r3, [pc, #48]	@ (8005a3c <HAL_TIM_MspPostInit+0x8c>)
 8005a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a0c:	f042 0204 	orr.w	r2, r2, #4
 8005a10:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	9302      	str	r3, [sp, #8]
 8005a1a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ETB1_MOTOR1_Pin|ETB1_MOTOR2_Pin|ETB2_MOTOR1_Pin|ETB2_MOTOR2_Pin;
 8005a1c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8005a20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a22:	2302      	movs	r3, #2
 8005a24:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005a26:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a28:	a903      	add	r1, sp, #12
 8005a2a:	4806      	ldr	r0, [pc, #24]	@ (8005a44 <HAL_TIM_MspPostInit+0x94>)
 8005a2c:	f7fc fbde 	bl	80021ec <HAL_GPIO_Init>
}
 8005a30:	e7cd      	b.n	80059ce <HAL_TIM_MspPostInit+0x1e>
 8005a32:	bf00      	nop
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	40020000 	.word	0x40020000
 8005a44:	40020800 	.word	0x40020800

08005a48 <MX_TIM1_Init>:
{
 8005a48:	b510      	push	{r4, lr}
 8005a4a:	b096      	sub	sp, #88	@ 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a4c:	2400      	movs	r4, #0
 8005a4e:	9412      	str	r4, [sp, #72]	@ 0x48
 8005a50:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005a52:	9414      	str	r4, [sp, #80]	@ 0x50
 8005a54:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a56:	9410      	str	r4, [sp, #64]	@ 0x40
 8005a58:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a5a:	9409      	str	r4, [sp, #36]	@ 0x24
 8005a5c:	940a      	str	r4, [sp, #40]	@ 0x28
 8005a5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005a60:	940c      	str	r4, [sp, #48]	@ 0x30
 8005a62:	940d      	str	r4, [sp, #52]	@ 0x34
 8005a64:	940e      	str	r4, [sp, #56]	@ 0x38
 8005a66:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005a68:	2220      	movs	r2, #32
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	a801      	add	r0, sp, #4
 8005a6e:	f001 fe19 	bl	80076a4 <memset>
  htim1.Instance = TIM1;
 8005a72:	483b      	ldr	r0, [pc, #236]	@ (8005b60 <MX_TIM1_Init+0x118>)
 8005a74:	4b3b      	ldr	r3, [pc, #236]	@ (8005b64 <MX_TIM1_Init+0x11c>)
 8005a76:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8005a78:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a7a:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 65535;
 8005a7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a80:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a82:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8005a84:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a86:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005a88:	f7fe f852 	bl	8003b30 <HAL_TIM_Base_Init>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d14c      	bne.n	8005b2a <MX_TIM1_Init+0xe2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a94:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005a96:	a912      	add	r1, sp, #72	@ 0x48
 8005a98:	4831      	ldr	r0, [pc, #196]	@ (8005b60 <MX_TIM1_Init+0x118>)
 8005a9a:	f7fe f9a5 	bl	8003de8 <HAL_TIM_ConfigClockSource>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d146      	bne.n	8005b30 <MX_TIM1_Init+0xe8>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005aa2:	482f      	ldr	r0, [pc, #188]	@ (8005b60 <MX_TIM1_Init+0x118>)
 8005aa4:	f7fe f89c 	bl	8003be0 <HAL_TIM_PWM_Init>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d144      	bne.n	8005b36 <MX_TIM1_Init+0xee>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8005aac:	482c      	ldr	r0, [pc, #176]	@ (8005b60 <MX_TIM1_Init+0x118>)
 8005aae:	f7fe f86b 	bl	8003b88 <HAL_TIM_OC_Init>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d142      	bne.n	8005b3c <MX_TIM1_Init+0xf4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005aba:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005abc:	a910      	add	r1, sp, #64	@ 0x40
 8005abe:	4828      	ldr	r0, [pc, #160]	@ (8005b60 <MX_TIM1_Init+0x118>)
 8005ac0:	f7fe faca 	bl	8004058 <HAL_TIMEx_MasterConfigSynchronization>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d13c      	bne.n	8005b42 <MX_TIM1_Init+0xfa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ac8:	2360      	movs	r3, #96	@ 0x60
 8005aca:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8005acc:	2200      	movs	r2, #0
 8005ace:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ad0:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005ad2:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ad4:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005ad6:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005ad8:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ada:	a909      	add	r1, sp, #36	@ 0x24
 8005adc:	4820      	ldr	r0, [pc, #128]	@ (8005b60 <MX_TIM1_Init+0x118>)
 8005ade:	f7fe f908 	bl	8003cf2 <HAL_TIM_PWM_ConfigChannel>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d130      	bne.n	8005b48 <MX_TIM1_Init+0x100>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ae6:	2204      	movs	r2, #4
 8005ae8:	a909      	add	r1, sp, #36	@ 0x24
 8005aea:	481d      	ldr	r0, [pc, #116]	@ (8005b60 <MX_TIM1_Init+0x118>)
 8005aec:	f7fe f901 	bl	8003cf2 <HAL_TIM_PWM_ConfigChannel>
 8005af0:	bb68      	cbnz	r0, 8005b4e <MX_TIM1_Init+0x106>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005af2:	2300      	movs	r3, #0
 8005af4:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005af6:	2208      	movs	r2, #8
 8005af8:	a909      	add	r1, sp, #36	@ 0x24
 8005afa:	4819      	ldr	r0, [pc, #100]	@ (8005b60 <MX_TIM1_Init+0x118>)
 8005afc:	f7fe f8ca 	bl	8003c94 <HAL_TIM_OC_ConfigChannel>
 8005b00:	bb40      	cbnz	r0, 8005b54 <MX_TIM1_Init+0x10c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b06:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b08:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b0a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b0c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005b12:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b14:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005b16:	a901      	add	r1, sp, #4
 8005b18:	4811      	ldr	r0, [pc, #68]	@ (8005b60 <MX_TIM1_Init+0x118>)
 8005b1a:	f7fe fadb 	bl	80040d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005b1e:	b9e0      	cbnz	r0, 8005b5a <MX_TIM1_Init+0x112>
  HAL_TIM_MspPostInit(&htim1);
 8005b20:	480f      	ldr	r0, [pc, #60]	@ (8005b60 <MX_TIM1_Init+0x118>)
 8005b22:	f7ff ff45 	bl	80059b0 <HAL_TIM_MspPostInit>
}
 8005b26:	b016      	add	sp, #88	@ 0x58
 8005b28:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005b2a:	f7fb f9e5 	bl	8000ef8 <Error_Handler>
 8005b2e:	e7af      	b.n	8005a90 <MX_TIM1_Init+0x48>
    Error_Handler();
 8005b30:	f7fb f9e2 	bl	8000ef8 <Error_Handler>
 8005b34:	e7b5      	b.n	8005aa2 <MX_TIM1_Init+0x5a>
    Error_Handler();
 8005b36:	f7fb f9df 	bl	8000ef8 <Error_Handler>
 8005b3a:	e7b7      	b.n	8005aac <MX_TIM1_Init+0x64>
    Error_Handler();
 8005b3c:	f7fb f9dc 	bl	8000ef8 <Error_Handler>
 8005b40:	e7b9      	b.n	8005ab6 <MX_TIM1_Init+0x6e>
    Error_Handler();
 8005b42:	f7fb f9d9 	bl	8000ef8 <Error_Handler>
 8005b46:	e7bf      	b.n	8005ac8 <MX_TIM1_Init+0x80>
    Error_Handler();
 8005b48:	f7fb f9d6 	bl	8000ef8 <Error_Handler>
 8005b4c:	e7cb      	b.n	8005ae6 <MX_TIM1_Init+0x9e>
    Error_Handler();
 8005b4e:	f7fb f9d3 	bl	8000ef8 <Error_Handler>
 8005b52:	e7ce      	b.n	8005af2 <MX_TIM1_Init+0xaa>
    Error_Handler();
 8005b54:	f7fb f9d0 	bl	8000ef8 <Error_Handler>
 8005b58:	e7d3      	b.n	8005b02 <MX_TIM1_Init+0xba>
    Error_Handler();
 8005b5a:	f7fb f9cd 	bl	8000ef8 <Error_Handler>
 8005b5e:	e7df      	b.n	8005b20 <MX_TIM1_Init+0xd8>
 8005b60:	20004c1c 	.word	0x20004c1c
 8005b64:	40010000 	.word	0x40010000

08005b68 <MX_TIM3_Init>:
{
 8005b68:	b500      	push	{lr}
 8005b6a:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	9308      	str	r3, [sp, #32]
 8005b70:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	9302      	str	r3, [sp, #8]
 8005b76:	9303      	str	r3, [sp, #12]
 8005b78:	9304      	str	r3, [sp, #16]
 8005b7a:	9305      	str	r3, [sp, #20]
 8005b7c:	9306      	str	r3, [sp, #24]
 8005b7e:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8005b80:	4825      	ldr	r0, [pc, #148]	@ (8005c18 <MX_TIM3_Init+0xb0>)
 8005b82:	4a26      	ldr	r2, [pc, #152]	@ (8005c1c <MX_TIM3_Init+0xb4>)
 8005b84:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8005b86:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b88:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8005b8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b8e:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b90:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b92:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005b94:	f7fe f824 	bl	8003be0 <HAL_TIM_PWM_Init>
 8005b98:	bb58      	cbnz	r0, 8005bf2 <MX_TIM3_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b9e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ba0:	a908      	add	r1, sp, #32
 8005ba2:	481d      	ldr	r0, [pc, #116]	@ (8005c18 <MX_TIM3_Init+0xb0>)
 8005ba4:	f7fe fa58 	bl	8004058 <HAL_TIMEx_MasterConfigSynchronization>
 8005ba8:	bb30      	cbnz	r0, 8005bf8 <MX_TIM3_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005baa:	2360      	movs	r3, #96	@ 0x60
 8005bac:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8005bae:	2200      	movs	r2, #0
 8005bb0:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005bb2:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005bb4:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005bb6:	a901      	add	r1, sp, #4
 8005bb8:	4817      	ldr	r0, [pc, #92]	@ (8005c18 <MX_TIM3_Init+0xb0>)
 8005bba:	f7fe f89a 	bl	8003cf2 <HAL_TIM_PWM_ConfigChannel>
 8005bbe:	b9f0      	cbnz	r0, 8005bfe <MX_TIM3_Init+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	eb0d 0102 	add.w	r1, sp, r2
 8005bc6:	4814      	ldr	r0, [pc, #80]	@ (8005c18 <MX_TIM3_Init+0xb0>)
 8005bc8:	f7fe f893 	bl	8003cf2 <HAL_TIM_PWM_ConfigChannel>
 8005bcc:	b9d0      	cbnz	r0, 8005c04 <MX_TIM3_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005bce:	2208      	movs	r2, #8
 8005bd0:	a901      	add	r1, sp, #4
 8005bd2:	4811      	ldr	r0, [pc, #68]	@ (8005c18 <MX_TIM3_Init+0xb0>)
 8005bd4:	f7fe f88d 	bl	8003cf2 <HAL_TIM_PWM_ConfigChannel>
 8005bd8:	b9b8      	cbnz	r0, 8005c0a <MX_TIM3_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005bda:	220c      	movs	r2, #12
 8005bdc:	a901      	add	r1, sp, #4
 8005bde:	480e      	ldr	r0, [pc, #56]	@ (8005c18 <MX_TIM3_Init+0xb0>)
 8005be0:	f7fe f887 	bl	8003cf2 <HAL_TIM_PWM_ConfigChannel>
 8005be4:	b9a0      	cbnz	r0, 8005c10 <MX_TIM3_Init+0xa8>
  HAL_TIM_MspPostInit(&htim3);
 8005be6:	480c      	ldr	r0, [pc, #48]	@ (8005c18 <MX_TIM3_Init+0xb0>)
 8005be8:	f7ff fee2 	bl	80059b0 <HAL_TIM_MspPostInit>
}
 8005bec:	b00b      	add	sp, #44	@ 0x2c
 8005bee:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005bf2:	f7fb f981 	bl	8000ef8 <Error_Handler>
 8005bf6:	e7d0      	b.n	8005b9a <MX_TIM3_Init+0x32>
    Error_Handler();
 8005bf8:	f7fb f97e 	bl	8000ef8 <Error_Handler>
 8005bfc:	e7d5      	b.n	8005baa <MX_TIM3_Init+0x42>
    Error_Handler();
 8005bfe:	f7fb f97b 	bl	8000ef8 <Error_Handler>
 8005c02:	e7dd      	b.n	8005bc0 <MX_TIM3_Init+0x58>
    Error_Handler();
 8005c04:	f7fb f978 	bl	8000ef8 <Error_Handler>
 8005c08:	e7e1      	b.n	8005bce <MX_TIM3_Init+0x66>
    Error_Handler();
 8005c0a:	f7fb f975 	bl	8000ef8 <Error_Handler>
 8005c0e:	e7e4      	b.n	8005bda <MX_TIM3_Init+0x72>
    Error_Handler();
 8005c10:	f7fb f972 	bl	8000ef8 <Error_Handler>
 8005c14:	e7e7      	b.n	8005be6 <MX_TIM3_Init+0x7e>
 8005c16:	bf00      	nop
 8005c18:	20004b8c 	.word	0x20004b8c
 8005c1c:	40000400 	.word	0x40000400

08005c20 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c20:	4b06      	ldr	r3, [pc, #24]	@ (8005c3c <prvGetNextExpireTime+0x1c>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	6813      	ldr	r3, [r2, #0]
 8005c26:	b92b      	cbnz	r3, 8005c34 <prvGetNextExpireTime+0x14>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c2c:	b923      	cbnz	r3, 8005c38 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c2e:	68d3      	ldr	r3, [r2, #12]
 8005c30:	6818      	ldr	r0, [r3, #0]
 8005c32:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c34:	2300      	movs	r3, #0
 8005c36:	e7f8      	b.n	8005c2a <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c38:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8005c3a:	4770      	bx	lr
 8005c3c:	20004d64 	.word	0x20004d64

08005c40 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c40:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c42:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c44:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c46:	4291      	cmp	r1, r2
 8005c48:	d80c      	bhi.n	8005c64 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c4a:	1ad2      	subs	r2, r2, r3
 8005c4c:	6983      	ldr	r3, [r0, #24]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d301      	bcc.n	8005c56 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c52:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8005c54:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c56:	1d01      	adds	r1, r0, #4
 8005c58:	4b09      	ldr	r3, [pc, #36]	@ (8005c80 <prvInsertTimerInActiveList+0x40>)
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	f7fb f913 	bl	8000e86 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005c60:	2000      	movs	r0, #0
 8005c62:	e7f7      	b.n	8005c54 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d201      	bcs.n	8005c6c <prvInsertTimerInActiveList+0x2c>
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	d206      	bcs.n	8005c7a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c6c:	1d01      	adds	r1, r0, #4
 8005c6e:	4b05      	ldr	r3, [pc, #20]	@ (8005c84 <prvInsertTimerInActiveList+0x44>)
 8005c70:	6818      	ldr	r0, [r3, #0]
 8005c72:	f7fb f908 	bl	8000e86 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005c76:	2000      	movs	r0, #0
 8005c78:	e7ec      	b.n	8005c54 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8005c7a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8005c7c:	e7ea      	b.n	8005c54 <prvInsertTimerInActiveList+0x14>
 8005c7e:	bf00      	nop
 8005c80:	20004d60 	.word	0x20004d60
 8005c84:	20004d64 	.word	0x20004d64

08005c88 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c88:	b530      	push	{r4, r5, lr}
 8005c8a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c8c:	f7fb fa12 	bl	80010b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c90:	4b11      	ldr	r3, [pc, #68]	@ (8005cd8 <prvCheckForValidListAndQueue+0x50>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	b11b      	cbz	r3, 8005c9e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c96:	f7fb fa2f 	bl	80010f8 <vPortExitCritical>
}
 8005c9a:	b003      	add	sp, #12
 8005c9c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8005c9e:	4d0f      	ldr	r5, [pc, #60]	@ (8005cdc <prvCheckForValidListAndQueue+0x54>)
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f7fb f8d7 	bl	8000e54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ca6:	4c0e      	ldr	r4, [pc, #56]	@ (8005ce0 <prvCheckForValidListAndQueue+0x58>)
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f7fb f8d3 	bl	8000e54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005cae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce4 <prvCheckForValidListAndQueue+0x5c>)
 8005cb0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce8 <prvCheckForValidListAndQueue+0x60>)
 8005cb4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	4b0c      	ldr	r3, [pc, #48]	@ (8005cec <prvCheckForValidListAndQueue+0x64>)
 8005cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8005cf0 <prvCheckForValidListAndQueue+0x68>)
 8005cbe:	2110      	movs	r1, #16
 8005cc0:	200a      	movs	r0, #10
 8005cc2:	f7fb fc3e 	bl	8001542 <xQueueGenericCreateStatic>
 8005cc6:	4b04      	ldr	r3, [pc, #16]	@ (8005cd8 <prvCheckForValidListAndQueue+0x50>)
 8005cc8:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d0e3      	beq.n	8005c96 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005cce:	4909      	ldr	r1, [pc, #36]	@ (8005cf4 <prvCheckForValidListAndQueue+0x6c>)
 8005cd0:	f7fb fe5c 	bl	800198c <vQueueAddToRegistry>
 8005cd4:	e7df      	b.n	8005c96 <prvCheckForValidListAndQueue+0xe>
 8005cd6:	bf00      	nop
 8005cd8:	20004d5c 	.word	0x20004d5c
 8005cdc:	20004d7c 	.word	0x20004d7c
 8005ce0:	20004d68 	.word	0x20004d68
 8005ce4:	20004d64 	.word	0x20004d64
 8005ce8:	20004d60 	.word	0x20004d60
 8005cec:	20004c64 	.word	0x20004c64
 8005cf0:	20004cb4 	.word	0x20004cb4
 8005cf4:	0800845c 	.word	0x0800845c

08005cf8 <xTimerCreateTimerTask>:
{
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8005cfc:	f7ff ffc4 	bl	8005c88 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005d00:	4b12      	ldr	r3, [pc, #72]	@ (8005d4c <xTimerCreateTimerTask+0x54>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	b1cb      	cbz	r3, 8005d3a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d06:	2400      	movs	r4, #0
 8005d08:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d0a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d0c:	aa07      	add	r2, sp, #28
 8005d0e:	a906      	add	r1, sp, #24
 8005d10:	a805      	add	r0, sp, #20
 8005d12:	f7fa fcc5 	bl	80006a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d16:	9b05      	ldr	r3, [sp, #20]
 8005d18:	9302      	str	r3, [sp, #8]
 8005d1a:	9b06      	ldr	r3, [sp, #24]
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	2302      	movs	r3, #2
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	4623      	mov	r3, r4
 8005d24:	9a07      	ldr	r2, [sp, #28]
 8005d26:	490a      	ldr	r1, [pc, #40]	@ (8005d50 <xTimerCreateTimerTask+0x58>)
 8005d28:	480a      	ldr	r0, [pc, #40]	@ (8005d54 <xTimerCreateTimerTask+0x5c>)
 8005d2a:	f7ff f9e1 	bl	80050f0 <xTaskCreateStatic>
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d58 <xTimerCreateTimerTask+0x60>)
 8005d30:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8005d32:	b110      	cbz	r0, 8005d3a <xTimerCreateTimerTask+0x42>
}
 8005d34:	2001      	movs	r0, #1
 8005d36:	b008      	add	sp, #32
 8005d38:	bd10      	pop	{r4, pc}
 8005d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8005d4a:	e7fe      	b.n	8005d4a <xTimerCreateTimerTask+0x52>
 8005d4c:	20004d5c 	.word	0x20004d5c
 8005d50:	08008464 	.word	0x08008464
 8005d54:	0800605d 	.word	0x0800605d
 8005d58:	20004d58 	.word	0x20004d58

08005d5c <xTimerGenericCommand>:
	configASSERT( xTimer );
 8005d5c:	b1b8      	cbz	r0, 8005d8e <xTimerGenericCommand+0x32>
 8005d5e:	469c      	mov	ip, r3
 8005d60:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8005d62:	4818      	ldr	r0, [pc, #96]	@ (8005dc4 <xTimerGenericCommand+0x68>)
 8005d64:	6800      	ldr	r0, [r0, #0]
 8005d66:	b358      	cbz	r0, 8005dc0 <xTimerGenericCommand+0x64>
{
 8005d68:	b500      	push	{lr}
 8005d6a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8005d6c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d6e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d70:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d72:	2905      	cmp	r1, #5
 8005d74:	dc1c      	bgt.n	8005db0 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d76:	f7ff fccd 	bl	8005714 <xTaskGetSchedulerState>
 8005d7a:	2802      	cmp	r0, #2
 8005d7c:	d010      	beq.n	8005da0 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d7e:	2300      	movs	r3, #0
 8005d80:	461a      	mov	r2, r3
 8005d82:	4669      	mov	r1, sp
 8005d84:	480f      	ldr	r0, [pc, #60]	@ (8005dc4 <xTimerGenericCommand+0x68>)
 8005d86:	6800      	ldr	r0, [r0, #0]
 8005d88:	f7fb fc25 	bl	80015d6 <xQueueGenericSend>
 8005d8c:	e015      	b.n	8005dba <xTimerGenericCommand+0x5e>
 8005d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8005d9e:	e7fe      	b.n	8005d9e <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005da0:	2300      	movs	r3, #0
 8005da2:	9a06      	ldr	r2, [sp, #24]
 8005da4:	4669      	mov	r1, sp
 8005da6:	4807      	ldr	r0, [pc, #28]	@ (8005dc4 <xTimerGenericCommand+0x68>)
 8005da8:	6800      	ldr	r0, [r0, #0]
 8005daa:	f7fb fc14 	bl	80015d6 <xQueueGenericSend>
 8005dae:	e004      	b.n	8005dba <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005db0:	2300      	movs	r3, #0
 8005db2:	4662      	mov	r2, ip
 8005db4:	4669      	mov	r1, sp
 8005db6:	f7fb fcd2 	bl	800175e <xQueueGenericSendFromISR>
}
 8005dba:	b005      	add	sp, #20
 8005dbc:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8005dc0:	2000      	movs	r0, #0
}
 8005dc2:	4770      	bx	lr
 8005dc4:	20004d5c 	.word	0x20004d5c

08005dc8 <prvSwitchTimerLists>:
{
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8005e3c <prvSwitchTimerLists+0x74>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	b362      	cbz	r2, 8005e2e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dd8:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dda:	1d25      	adds	r5, r4, #4
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f7fb f86b 	bl	8000eb8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005de2:	6a23      	ldr	r3, [r4, #32]
 8005de4:	4620      	mov	r0, r4
 8005de6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005de8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005dec:	f013 0f04 	tst.w	r3, #4
 8005df0:	d0ec      	beq.n	8005dcc <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005df2:	69a3      	ldr	r3, [r4, #24]
 8005df4:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8005df6:	429e      	cmp	r6, r3
 8005df8:	d207      	bcs.n	8005e0a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005dfa:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dfc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dfe:	4629      	mov	r1, r5
 8005e00:	4b0e      	ldr	r3, [pc, #56]	@ (8005e3c <prvSwitchTimerLists+0x74>)
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	f7fb f83f 	bl	8000e86 <vListInsert>
 8005e08:	e7e0      	b.n	8005dcc <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	9100      	str	r1, [sp, #0]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4632      	mov	r2, r6
 8005e12:	4620      	mov	r0, r4
 8005e14:	f7ff ffa2 	bl	8005d5c <xTimerGenericCommand>
				configASSERT( xResult );
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d1d7      	bne.n	8005dcc <prvSwitchTimerLists+0x4>
 8005e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	e7fe      	b.n	8005e2c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8005e2e:	4a04      	ldr	r2, [pc, #16]	@ (8005e40 <prvSwitchTimerLists+0x78>)
 8005e30:	6810      	ldr	r0, [r2, #0]
 8005e32:	4902      	ldr	r1, [pc, #8]	@ (8005e3c <prvSwitchTimerLists+0x74>)
 8005e34:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8005e36:	6013      	str	r3, [r2, #0]
}
 8005e38:	b002      	add	sp, #8
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}
 8005e3c:	20004d64 	.word	0x20004d64
 8005e40:	20004d60 	.word	0x20004d60

08005e44 <prvSampleTimeNow>:
{
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8005e48:	f7ff fa14 	bl	8005274 <xTaskGetTickCount>
 8005e4c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8005e4e:	4b07      	ldr	r3, [pc, #28]	@ (8005e6c <prvSampleTimeNow+0x28>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4283      	cmp	r3, r0
 8005e54:	d805      	bhi.n	8005e62 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8005e56:	2300      	movs	r3, #0
 8005e58:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8005e5a:	4b04      	ldr	r3, [pc, #16]	@ (8005e6c <prvSampleTimeNow+0x28>)
 8005e5c:	601c      	str	r4, [r3, #0]
}
 8005e5e:	4620      	mov	r0, r4
 8005e60:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8005e62:	f7ff ffb1 	bl	8005dc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e66:	2301      	movs	r3, #1
 8005e68:	602b      	str	r3, [r5, #0]
 8005e6a:	e7f6      	b.n	8005e5a <prvSampleTimeNow+0x16>
 8005e6c:	20004d54 	.word	0x20004d54

08005e70 <prvProcessExpiredTimer>:
{
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	4606      	mov	r6, r0
 8005e76:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e78:	4917      	ldr	r1, [pc, #92]	@ (8005ed8 <prvProcessExpiredTimer+0x68>)
 8005e7a:	6809      	ldr	r1, [r1, #0]
 8005e7c:	68c9      	ldr	r1, [r1, #12]
 8005e7e:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e80:	1d20      	adds	r0, r4, #4
 8005e82:	f7fb f819 	bl	8000eb8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e86:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8005e8a:	f01c 0f04 	tst.w	ip, #4
 8005e8e:	d108      	bne.n	8005ea2 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e90:	f02c 0c01 	bic.w	ip, ip, #1
 8005e94:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e98:	6a23      	ldr	r3, [r4, #32]
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	4798      	blx	r3
}
 8005e9e:	b002      	add	sp, #8
 8005ea0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ea2:	69a1      	ldr	r1, [r4, #24]
 8005ea4:	4633      	mov	r3, r6
 8005ea6:	462a      	mov	r2, r5
 8005ea8:	4431      	add	r1, r6
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f7ff fec8 	bl	8005c40 <prvInsertTimerInActiveList>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d0f1      	beq.n	8005e98 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	9100      	str	r1, [sp, #0]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4632      	mov	r2, r6
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f7ff ff4d 	bl	8005d5c <xTimerGenericCommand>
			configASSERT( xResult );
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d1e8      	bne.n	8005e98 <prvProcessExpiredTimer+0x28>
 8005ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	e7fe      	b.n	8005ed6 <prvProcessExpiredTimer+0x66>
 8005ed8:	20004d64 	.word	0x20004d64

08005edc <prvProcessTimerOrBlockTask>:
{
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8005ee4:	f7ff f9be 	bl	8005264 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ee8:	a801      	add	r0, sp, #4
 8005eea:	f7ff ffab 	bl	8005e44 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8005eee:	9b01      	ldr	r3, [sp, #4]
 8005ef0:	bb33      	cbnz	r3, 8005f40 <prvProcessTimerOrBlockTask+0x64>
 8005ef2:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ef4:	b9e4      	cbnz	r4, 8005f30 <prvProcessTimerOrBlockTask+0x54>
 8005ef6:	42b0      	cmp	r0, r6
 8005ef8:	d213      	bcs.n	8005f22 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005efa:	4622      	mov	r2, r4
 8005efc:	1b71      	subs	r1, r6, r5
 8005efe:	4b12      	ldr	r3, [pc, #72]	@ (8005f48 <prvProcessTimerOrBlockTask+0x6c>)
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	f7fb fd57 	bl	80019b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f06:	f7ff fa47 	bl	8005398 <xTaskResumeAll>
 8005f0a:	b9d8      	cbnz	r0, 8005f44 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8005f0c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f14:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	e010      	b.n	8005f44 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8005f22:	f7ff fa39 	bl	8005398 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f26:	4629      	mov	r1, r5
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f7ff ffa1 	bl	8005e70 <prvProcessExpiredTimer>
 8005f2e:	e009      	b.n	8005f44 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f30:	4a06      	ldr	r2, [pc, #24]	@ (8005f4c <prvProcessTimerOrBlockTask+0x70>)
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	6812      	ldr	r2, [r2, #0]
 8005f36:	b90a      	cbnz	r2, 8005f3c <prvProcessTimerOrBlockTask+0x60>
 8005f38:	2401      	movs	r4, #1
 8005f3a:	e7de      	b.n	8005efa <prvProcessTimerOrBlockTask+0x1e>
 8005f3c:	461c      	mov	r4, r3
 8005f3e:	e7dc      	b.n	8005efa <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8005f40:	f7ff fa2a 	bl	8005398 <xTaskResumeAll>
}
 8005f44:	b002      	add	sp, #8
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	20004d5c 	.word	0x20004d5c
 8005f4c:	20004d60 	.word	0x20004d60

08005f50 <prvProcessReceivedCommands>:
{
 8005f50:	b510      	push	{r4, lr}
 8005f52:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f54:	e002      	b.n	8005f5c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f56:	9b04      	ldr	r3, [sp, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	da0f      	bge.n	8005f7c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	a904      	add	r1, sp, #16
 8005f60:	4b3d      	ldr	r3, [pc, #244]	@ (8006058 <prvProcessReceivedCommands+0x108>)
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	f7fb fc62 	bl	800182c <xQueueReceive>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d072      	beq.n	8006052 <prvProcessReceivedCommands+0x102>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f6c:	9b04      	ldr	r3, [sp, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	daf1      	bge.n	8005f56 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f72:	9907      	ldr	r1, [sp, #28]
 8005f74:	9806      	ldr	r0, [sp, #24]
 8005f76:	9b05      	ldr	r3, [sp, #20]
 8005f78:	4798      	blx	r3
 8005f7a:	e7ec      	b.n	8005f56 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f7c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f7e:	6963      	ldr	r3, [r4, #20]
 8005f80:	b113      	cbz	r3, 8005f88 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f82:	1d20      	adds	r0, r4, #4
 8005f84:	f7fa ff98 	bl	8000eb8 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f88:	a803      	add	r0, sp, #12
 8005f8a:	f7ff ff5b 	bl	8005e44 <prvSampleTimeNow>
 8005f8e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8005f90:	9b04      	ldr	r3, [sp, #16]
 8005f92:	2b09      	cmp	r3, #9
 8005f94:	d8e2      	bhi.n	8005f5c <prvProcessReceivedCommands+0xc>
 8005f96:	e8df f003 	tbb	[pc, r3]
 8005f9a:	0505      	.short	0x0505
 8005f9c:	4e362f05 	.word	0x4e362f05
 8005fa0:	362f0505 	.word	0x362f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fa4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005fa8:	f043 0301 	orr.w	r3, r3, #1
 8005fac:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005fb0:	9b05      	ldr	r3, [sp, #20]
 8005fb2:	69a1      	ldr	r1, [r4, #24]
 8005fb4:	4419      	add	r1, r3
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f7ff fe42 	bl	8005c40 <prvInsertTimerInActiveList>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d0cd      	beq.n	8005f5c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fc0:	6a23      	ldr	r3, [r4, #32]
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fc6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005fca:	f013 0f04 	tst.w	r3, #4
 8005fce:	d0c5      	beq.n	8005f5c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fd0:	69a2      	ldr	r2, [r4, #24]
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	9100      	str	r1, [sp, #0]
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	9805      	ldr	r0, [sp, #20]
 8005fda:	4402      	add	r2, r0
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f7ff febd 	bl	8005d5c <xTimerGenericCommand>
							configASSERT( xResult );
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d1ba      	bne.n	8005f5c <prvProcessReceivedCommands+0xc>
 8005fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	e7fe      	b.n	8005ff6 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ff8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005ffc:	f023 0301 	bic.w	r3, r3, #1
 8006000:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8006004:	e7aa      	b.n	8005f5c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006006:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800600a:	f043 0301 	orr.w	r3, r3, #1
 800600e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006012:	9905      	ldr	r1, [sp, #20]
 8006014:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006016:	b129      	cbz	r1, 8006024 <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006018:	4603      	mov	r3, r0
 800601a:	4401      	add	r1, r0
 800601c:	4620      	mov	r0, r4
 800601e:	f7ff fe0f 	bl	8005c40 <prvInsertTimerInActiveList>
					break;
 8006022:	e79b      	b.n	8005f5c <prvProcessReceivedCommands+0xc>
 8006024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006034:	e7fe      	b.n	8006034 <prvProcessReceivedCommands+0xe4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006036:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800603a:	f013 0f02 	tst.w	r3, #2
 800603e:	d004      	beq.n	800604a <prvProcessReceivedCommands+0xfa>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006040:	f023 0301 	bic.w	r3, r3, #1
 8006044:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8006048:	e788      	b.n	8005f5c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800604a:	4620      	mov	r0, r4
 800604c:	f7fa fd4a 	bl	8000ae4 <vPortFree>
 8006050:	e784      	b.n	8005f5c <prvProcessReceivedCommands+0xc>
}
 8006052:	b008      	add	sp, #32
 8006054:	bd10      	pop	{r4, pc}
 8006056:	bf00      	nop
 8006058:	20004d5c 	.word	0x20004d5c

0800605c <prvTimerTask>:
{
 800605c:	b500      	push	{lr}
 800605e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006060:	a801      	add	r0, sp, #4
 8006062:	f7ff fddd 	bl	8005c20 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006066:	9901      	ldr	r1, [sp, #4]
 8006068:	f7ff ff38 	bl	8005edc <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800606c:	f7ff ff70 	bl	8005f50 <prvProcessReceivedCommands>
	for( ;; )
 8006070:	e7f6      	b.n	8006060 <prvTimerTask+0x4>
	...

08006074 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006074:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006076:	2200      	movs	r2, #0
 8006078:	490f      	ldr	r1, [pc, #60]	@ (80060b8 <MX_USB_DEVICE_Init+0x44>)
 800607a:	4810      	ldr	r0, [pc, #64]	@ (80060bc <MX_USB_DEVICE_Init+0x48>)
 800607c:	f000 fc32 	bl	80068e4 <USBD_Init>
 8006080:	b970      	cbnz	r0, 80060a0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006082:	490f      	ldr	r1, [pc, #60]	@ (80060c0 <MX_USB_DEVICE_Init+0x4c>)
 8006084:	480d      	ldr	r0, [pc, #52]	@ (80060bc <MX_USB_DEVICE_Init+0x48>)
 8006086:	f000 fc44 	bl	8006912 <USBD_RegisterClass>
 800608a:	b960      	cbnz	r0, 80060a6 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800608c:	490d      	ldr	r1, [pc, #52]	@ (80060c4 <MX_USB_DEVICE_Init+0x50>)
 800608e:	480b      	ldr	r0, [pc, #44]	@ (80060bc <MX_USB_DEVICE_Init+0x48>)
 8006090:	f000 fa39 	bl	8006506 <USBD_CDC_RegisterInterface>
 8006094:	b950      	cbnz	r0, 80060ac <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006096:	4809      	ldr	r0, [pc, #36]	@ (80060bc <MX_USB_DEVICE_Init+0x48>)
 8006098:	f000 fc5b 	bl	8006952 <USBD_Start>
 800609c:	b948      	cbnz	r0, 80060b2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800609e:	bd08      	pop	{r3, pc}
    Error_Handler();
 80060a0:	f7fa ff2a 	bl	8000ef8 <Error_Handler>
 80060a4:	e7ed      	b.n	8006082 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 80060a6:	f7fa ff27 	bl	8000ef8 <Error_Handler>
 80060aa:	e7ef      	b.n	800608c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80060ac:	f7fa ff24 	bl	8000ef8 <Error_Handler>
 80060b0:	e7f1      	b.n	8006096 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80060b2:	f7fa ff21 	bl	8000ef8 <Error_Handler>
}
 80060b6:	e7f2      	b.n	800609e <MX_USB_DEVICE_Init+0x2a>
 80060b8:	200000e0 	.word	0x200000e0
 80060bc:	20004d90 	.word	0x20004d90
 80060c0:	20000054 	.word	0x20000054
 80060c4:	20000098 	.word	0x20000098

080060c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80060c8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060ca:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80060ce:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80060d2:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 80060d6:	b18c      	cbz	r4, 80060fc <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80060d8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80060dc:	6843      	ldr	r3, [r0, #4]
 80060de:	b17b      	cbz	r3, 8006100 <USBD_CDC_EP0_RxReady+0x38>
 80060e0:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 80060e4:	28ff      	cmp	r0, #255	@ 0xff
 80060e6:	d00d      	beq.n	8006104 <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 80060ee:	4621      	mov	r1, r4
 80060f0:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80060f2:	23ff      	movs	r3, #255	@ 0xff
 80060f4:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80060f8:	2000      	movs	r0, #0
}
 80060fa:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80060fc:	2003      	movs	r0, #3
 80060fe:	e7fc      	b.n	80060fa <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 8006100:	2000      	movs	r0, #0
 8006102:	e7fa      	b.n	80060fa <USBD_CDC_EP0_RxReady+0x32>
 8006104:	2000      	movs	r0, #0
 8006106:	e7f8      	b.n	80060fa <USBD_CDC_EP0_RxReady+0x32>

08006108 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006108:	230a      	movs	r3, #10
 800610a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800610c:	4800      	ldr	r0, [pc, #0]	@ (8006110 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800610e:	4770      	bx	lr
 8006110:	2000008c 	.word	0x2000008c

08006114 <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006118:	4f0f      	ldr	r7, [pc, #60]	@ (8006158 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800611a:	2182      	movs	r1, #130	@ 0x82
 800611c:	4638      	mov	r0, r7
 800611e:	f000 fdcb 	bl	8006cb8 <USBD_GetEpDesc>
 8006122:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006124:	2101      	movs	r1, #1
 8006126:	4638      	mov	r0, r7
 8006128:	f000 fdc6 	bl	8006cb8 <USBD_GetEpDesc>
 800612c:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800612e:	2181      	movs	r1, #129	@ 0x81
 8006130:	4638      	mov	r0, r7
 8006132:	f000 fdc1 	bl	8006cb8 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8006136:	b10d      	cbz	r5, 800613c <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006138:	2210      	movs	r2, #16
 800613a:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800613c:	b11c      	cbz	r4, 8006146 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800613e:	2240      	movs	r2, #64	@ 0x40
 8006140:	7122      	strb	r2, [r4, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8006146:	b118      	cbz	r0, 8006150 <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006148:	2240      	movs	r2, #64	@ 0x40
 800614a:	7102      	strb	r2, [r0, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006150:	2343      	movs	r3, #67	@ 0x43
 8006152:	8033      	strh	r3, [r6, #0]
}
 8006154:	4800      	ldr	r0, [pc, #0]	@ (8006158 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8006156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006158:	20000010 	.word	0x20000010

0800615c <USBD_CDC_GetFSCfgDesc>:
{
 800615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615e:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006160:	4f0f      	ldr	r7, [pc, #60]	@ (80061a0 <USBD_CDC_GetFSCfgDesc+0x44>)
 8006162:	2182      	movs	r1, #130	@ 0x82
 8006164:	4638      	mov	r0, r7
 8006166:	f000 fda7 	bl	8006cb8 <USBD_GetEpDesc>
 800616a:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800616c:	2101      	movs	r1, #1
 800616e:	4638      	mov	r0, r7
 8006170:	f000 fda2 	bl	8006cb8 <USBD_GetEpDesc>
 8006174:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006176:	2181      	movs	r1, #129	@ 0x81
 8006178:	4638      	mov	r0, r7
 800617a:	f000 fd9d 	bl	8006cb8 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800617e:	b10d      	cbz	r5, 8006184 <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006180:	2210      	movs	r2, #16
 8006182:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8006184:	b11c      	cbz	r4, 800618e <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006186:	2240      	movs	r2, #64	@ 0x40
 8006188:	7122      	strb	r2, [r4, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800618e:	b118      	cbz	r0, 8006198 <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006190:	2240      	movs	r2, #64	@ 0x40
 8006192:	7102      	strb	r2, [r0, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006198:	2343      	movs	r3, #67	@ 0x43
 800619a:	8033      	strh	r3, [r6, #0]
}
 800619c:	4800      	ldr	r0, [pc, #0]	@ (80061a0 <USBD_CDC_GetFSCfgDesc+0x44>)
 800619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a0:	20000010 	.word	0x20000010

080061a4 <USBD_CDC_GetHSCfgDesc>:
{
 80061a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a6:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80061a8:	4f0f      	ldr	r7, [pc, #60]	@ (80061e8 <USBD_CDC_GetHSCfgDesc+0x44>)
 80061aa:	2182      	movs	r1, #130	@ 0x82
 80061ac:	4638      	mov	r0, r7
 80061ae:	f000 fd83 	bl	8006cb8 <USBD_GetEpDesc>
 80061b2:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80061b4:	2101      	movs	r1, #1
 80061b6:	4638      	mov	r0, r7
 80061b8:	f000 fd7e 	bl	8006cb8 <USBD_GetEpDesc>
 80061bc:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80061be:	2181      	movs	r1, #129	@ 0x81
 80061c0:	4638      	mov	r0, r7
 80061c2:	f000 fd79 	bl	8006cb8 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80061c6:	b10d      	cbz	r5, 80061cc <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80061c8:	2210      	movs	r2, #16
 80061ca:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80061cc:	b11c      	cbz	r4, 80061d6 <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80061ce:	2200      	movs	r2, #0
 80061d0:	7122      	strb	r2, [r4, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80061d6:	b118      	cbz	r0, 80061e0 <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80061d8:	2200      	movs	r2, #0
 80061da:	7102      	strb	r2, [r0, #4]
 80061dc:	2202      	movs	r2, #2
 80061de:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80061e0:	2343      	movs	r3, #67	@ 0x43
 80061e2:	8033      	strh	r3, [r6, #0]
}
 80061e4:	4800      	ldr	r0, [pc, #0]	@ (80061e8 <USBD_CDC_GetHSCfgDesc+0x44>)
 80061e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061e8:	20000010 	.word	0x20000010

080061ec <USBD_CDC_DataOut>:
{
 80061ec:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061ee:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80061f2:	33b0      	adds	r3, #176	@ 0xb0
 80061f4:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061f8:	b195      	cbz	r5, 8006220 <USBD_CDC_DataOut+0x34>
 80061fa:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80061fc:	f000 fb1a 	bl	8006834 <USBD_LL_GetRxDataSize>
 8006200:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006204:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8006208:	33b0      	adds	r3, #176	@ 0xb0
 800620a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800620e:	6863      	ldr	r3, [r4, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8006216:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 800621a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800621c:	2000      	movs	r0, #0
}
 800621e:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8006220:	2003      	movs	r0, #3
 8006222:	e7fc      	b.n	800621e <USBD_CDC_DataOut+0x32>

08006224 <USBD_CDC_DataIn>:
{
 8006224:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006226:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800622a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800622e:	33b0      	adds	r3, #176	@ 0xb0
 8006230:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8006234:	b384      	cbz	r4, 8006298 <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006236:	f001 030f 	and.w	r3, r1, #15
 800623a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800623e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006242:	6992      	ldr	r2, [r2, #24]
 8006244:	b14a      	cbz	r2, 800625a <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006246:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 800624a:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 800624e:	69ed      	ldr	r5, [r5, #28]
 8006250:	fbb2 fcf5 	udiv	ip, r2, r5
 8006254:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006258:	b192      	cbz	r2, 8006280 <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006260:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006264:	33b0      	adds	r3, #176	@ 0xb0
 8006266:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800626a:	6843      	ldr	r3, [r0, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	b1ab      	cbz	r3, 800629c <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006270:	460a      	mov	r2, r1
 8006272:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 8006276:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 800627a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800627c:	2000      	movs	r0, #0
}
 800627e:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006280:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006284:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006288:	2400      	movs	r4, #0
 800628a:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800628c:	4623      	mov	r3, r4
 800628e:	4622      	mov	r2, r4
 8006290:	f000 fb18 	bl	80068c4 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8006294:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006296:	e7f2      	b.n	800627e <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 8006298:	2003      	movs	r0, #3
 800629a:	e7f0      	b.n	800627e <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 800629c:	2000      	movs	r0, #0
 800629e:	e7ee      	b.n	800627e <USBD_CDC_DataIn+0x5a>

080062a0 <USBD_CDC_Setup>:
{
 80062a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062a2:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062a4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80062a8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80062ac:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 80062b0:	2200      	movs	r2, #0
 80062b2:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 80062b6:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 80062ba:	2f00      	cmp	r7, #0
 80062bc:	d078      	beq.n	80063b0 <USBD_CDC_Setup+0x110>
 80062be:	4604      	mov	r4, r0
 80062c0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062c2:	7809      	ldrb	r1, [r1, #0]
 80062c4:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 80062c8:	d034      	beq.n	8006334 <USBD_CDC_Setup+0x94>
 80062ca:	2e20      	cmp	r6, #32
 80062cc:	d169      	bne.n	80063a2 <USBD_CDC_Setup+0x102>
      if (req->wLength != 0U)
 80062ce:	88ea      	ldrh	r2, [r5, #6]
 80062d0:	b32a      	cbz	r2, 800631e <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 80062d2:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80062d6:	d10e      	bne.n	80062f6 <USBD_CDC_Setup+0x56>
          hcdc->CmdOpCode = req->bRequest;
 80062d8:	786b      	ldrb	r3, [r5, #1]
 80062da:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80062de:	88ea      	ldrh	r2, [r5, #6]
 80062e0:	2a3f      	cmp	r2, #63	@ 0x3f
 80062e2:	d81a      	bhi.n	800631a <USBD_CDC_Setup+0x7a>
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80062ea:	4639      	mov	r1, r7
 80062ec:	4620      	mov	r0, r4
 80062ee:	f001 f94c 	bl	800758a <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 80062f2:	2600      	movs	r6, #0
 80062f4:	e059      	b.n	80063aa <USBD_CDC_Setup+0x10a>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062f6:	33b0      	adds	r3, #176	@ 0xb0
 80062f8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	4639      	mov	r1, r7
 8006302:	7868      	ldrb	r0, [r5, #1]
 8006304:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006306:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006308:	2a07      	cmp	r2, #7
 800630a:	bf28      	it	cs
 800630c:	2207      	movcs	r2, #7
 800630e:	4639      	mov	r1, r7
 8006310:	4620      	mov	r0, r4
 8006312:	f001 f925 	bl	8007560 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006316:	2600      	movs	r6, #0
 8006318:	e047      	b.n	80063aa <USBD_CDC_Setup+0x10a>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800631a:	2240      	movs	r2, #64	@ 0x40
 800631c:	e7e3      	b.n	80062e6 <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800631e:	33b0      	adds	r3, #176	@ 0xb0
 8006320:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	2200      	movs	r2, #0
 800632a:	4629      	mov	r1, r5
 800632c:	7868      	ldrb	r0, [r5, #1]
 800632e:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8006330:	2600      	movs	r6, #0
 8006332:	e03a      	b.n	80063aa <USBD_CDC_Setup+0x10a>
      switch (req->bRequest)
 8006334:	786f      	ldrb	r7, [r5, #1]
 8006336:	2f0b      	cmp	r7, #11
 8006338:	d82e      	bhi.n	8006398 <USBD_CDC_Setup+0xf8>
 800633a:	e8df f007 	tbb	[pc, r7]
 800633e:	3606      	.short	0x3606
 8006340:	2d2d2d2d 	.word	0x2d2d2d2d
 8006344:	2d2d2d2d 	.word	0x2d2d2d2d
 8006348:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800634a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800634e:	2b03      	cmp	r3, #3
 8006350:	d004      	beq.n	800635c <USBD_CDC_Setup+0xbc>
            USBD_CtlError(pdev, req);
 8006352:	4629      	mov	r1, r5
 8006354:	f000 fced 	bl	8006d32 <USBD_CtlError>
            ret = USBD_FAIL;
 8006358:	2603      	movs	r6, #3
 800635a:	e026      	b.n	80063aa <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800635c:	2202      	movs	r2, #2
 800635e:	a901      	add	r1, sp, #4
 8006360:	f001 f8fe 	bl	8007560 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006364:	463e      	mov	r6, r7
 8006366:	e020      	b.n	80063aa <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006368:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800636c:	2b03      	cmp	r3, #3
 800636e:	d004      	beq.n	800637a <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 8006370:	4629      	mov	r1, r5
 8006372:	f000 fcde 	bl	8006d32 <USBD_CtlError>
            ret = USBD_FAIL;
 8006376:	2603      	movs	r6, #3
 8006378:	e017      	b.n	80063aa <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800637a:	2201      	movs	r2, #1
 800637c:	f10d 0107 	add.w	r1, sp, #7
 8006380:	f001 f8ee 	bl	8007560 <USBD_CtlSendData>
 8006384:	e011      	b.n	80063aa <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006386:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800638a:	2b03      	cmp	r3, #3
 800638c:	d00d      	beq.n	80063aa <USBD_CDC_Setup+0x10a>
            USBD_CtlError(pdev, req);
 800638e:	4629      	mov	r1, r5
 8006390:	f000 fccf 	bl	8006d32 <USBD_CtlError>
            ret = USBD_FAIL;
 8006394:	2603      	movs	r6, #3
 8006396:	e008      	b.n	80063aa <USBD_CDC_Setup+0x10a>
          USBD_CtlError(pdev, req);
 8006398:	4629      	mov	r1, r5
 800639a:	f000 fcca 	bl	8006d32 <USBD_CtlError>
          ret = USBD_FAIL;
 800639e:	2603      	movs	r6, #3
          break;
 80063a0:	e003      	b.n	80063aa <USBD_CDC_Setup+0x10a>
      USBD_CtlError(pdev, req);
 80063a2:	4629      	mov	r1, r5
 80063a4:	f000 fcc5 	bl	8006d32 <USBD_CtlError>
      ret = USBD_FAIL;
 80063a8:	2603      	movs	r6, #3
}
 80063aa:	4630      	mov	r0, r6
 80063ac:	b003      	add	sp, #12
 80063ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 80063b0:	2603      	movs	r6, #3
 80063b2:	e7fa      	b.n	80063aa <USBD_CDC_Setup+0x10a>

080063b4 <USBD_CDC_DeInit>:
{
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80063b8:	2181      	movs	r1, #129	@ 0x81
 80063ba:	f000 fa63 	bl	8006884 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80063be:	2500      	movs	r5, #0
 80063c0:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80063c2:	2101      	movs	r1, #1
 80063c4:	4620      	mov	r0, r4
 80063c6:	f000 fa5d 	bl	8006884 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80063ca:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80063ce:	2182      	movs	r1, #130	@ 0x82
 80063d0:	4620      	mov	r0, r4
 80063d2:	f000 fa57 	bl	8006884 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80063d6:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80063da:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80063de:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80063e2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80063e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063ea:	b19a      	cbz	r2, 8006414 <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80063ec:	33b0      	adds	r3, #176	@ 0xb0
 80063ee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80063f8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80063fc:	33b0      	adds	r3, #176	@ 0xb0
 80063fe:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8006402:	f000 fa21 	bl	8006848 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006406:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800640a:	33b0      	adds	r3, #176	@ 0xb0
 800640c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8006410:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8006414:	2000      	movs	r0, #0
 8006416:	bd38      	pop	{r3, r4, r5, pc}

08006418 <USBD_CDC_Init>:
{
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800641c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006420:	f000 fa0e 	bl	8006840 <USBD_static_malloc>
  if (hcdc == NULL)
 8006424:	2800      	cmp	r0, #0
 8006426:	d049      	beq.n	80064bc <USBD_CDC_Init+0xa4>
 8006428:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800642a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800642e:	2100      	movs	r1, #0
 8006430:	f001 f938 	bl	80076a4 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006434:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8006438:	33b0      	adds	r3, #176	@ 0xb0
 800643a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800643e:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006442:	7c23      	ldrb	r3, [r4, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d141      	bne.n	80064cc <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800644c:	2202      	movs	r2, #2
 800644e:	2181      	movs	r1, #129	@ 0x81
 8006450:	4620      	mov	r0, r4
 8006452:	f000 fa0c 	bl	800686e <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006456:	2601      	movs	r6, #1
 8006458:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800645a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800645e:	2202      	movs	r2, #2
 8006460:	4631      	mov	r1, r6
 8006462:	4620      	mov	r0, r4
 8006464:	f000 fa03 	bl	800686e <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006468:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800646c:	2310      	movs	r3, #16
 800646e:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006472:	2308      	movs	r3, #8
 8006474:	2203      	movs	r2, #3
 8006476:	2182      	movs	r1, #130	@ 0x82
 8006478:	4620      	mov	r0, r4
 800647a:	f000 f9f8 	bl	800686e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800647e:	2301      	movs	r3, #1
 8006480:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
  hcdc->RxBuffer = NULL;
 8006484:	2600      	movs	r6, #0
 8006486:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800648a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800648e:	33b0      	adds	r3, #176	@ 0xb0
 8006490:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4798      	blx	r3
  hcdc->TxState = 0U;
 800649a:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 800649e:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 80064a2:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 80064a6:	b362      	cbz	r2, 8006502 <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064a8:	7c25      	ldrb	r5, [r4, #16]
 80064aa:	bb1d      	cbnz	r5, 80064f4 <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064b0:	2101      	movs	r1, #1
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 fa0e 	bl	80068d4 <USBD_LL_PrepareReceive>
}
 80064b8:	4628      	mov	r0, r5
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064bc:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80064c0:	33b0      	adds	r3, #176	@ 0xb0
 80064c2:	2200      	movs	r2, #0
 80064c4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 80064c8:	2502      	movs	r5, #2
 80064ca:	e7f5      	b.n	80064b8 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80064cc:	2340      	movs	r3, #64	@ 0x40
 80064ce:	2202      	movs	r2, #2
 80064d0:	2181      	movs	r1, #129	@ 0x81
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 f9cb 	bl	800686e <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80064d8:	2601      	movs	r6, #1
 80064da:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80064dc:	2340      	movs	r3, #64	@ 0x40
 80064de:	2202      	movs	r2, #2
 80064e0:	4631      	mov	r1, r6
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 f9c3 	bl	800686e <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80064e8:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80064ec:	2310      	movs	r3, #16
 80064ee:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 80064f2:	e7be      	b.n	8006472 <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064f4:	2340      	movs	r3, #64	@ 0x40
 80064f6:	2101      	movs	r1, #1
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 f9eb 	bl	80068d4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80064fe:	2500      	movs	r5, #0
 8006500:	e7da      	b.n	80064b8 <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 8006502:	2502      	movs	r5, #2
 8006504:	e7d8      	b.n	80064b8 <USBD_CDC_Init+0xa0>

08006506 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8006506:	b139      	cbz	r1, 8006518 <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8006508:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800650c:	33b0      	adds	r3, #176	@ 0xb0
 800650e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006512:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 8006514:	2000      	movs	r0, #0
 8006516:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006518:	2003      	movs	r0, #3
}
 800651a:	4770      	bx	lr

0800651c <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800651c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006520:	33b0      	adds	r3, #176	@ 0xb0
 8006522:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006526:	b12b      	cbz	r3, 8006534 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8006528:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800652c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006530:	2000      	movs	r0, #0
 8006532:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006534:	2003      	movs	r0, #3
}
 8006536:	4770      	bx	lr

08006538 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006538:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800653c:	33b0      	adds	r3, #176	@ 0xb0
 800653e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8006542:	b11b      	cbz	r3, 800654c <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8006544:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006548:	2000      	movs	r0, #0
 800654a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800654c:	2003      	movs	r0, #3
}
 800654e:	4770      	bx	lr

08006550 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006550:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006552:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006556:	33b0      	adds	r3, #176	@ 0xb0
 8006558:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800655c:	b18a      	cbz	r2, 8006582 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800655e:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 8006562:	b10b      	cbz	r3, 8006568 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006564:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8006566:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8006568:	2301      	movs	r3, #1
 800656a:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800656e:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 8006572:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006574:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8006578:	2181      	movs	r1, #129	@ 0x81
 800657a:	f000 f9a3 	bl	80068c4 <USBD_LL_Transmit>
    ret = USBD_OK;
 800657e:	2000      	movs	r0, #0
 8006580:	e7f1      	b.n	8006566 <USBD_CDC_TransmitPacket+0x16>
    return (uint8_t)USBD_FAIL;
 8006582:	2003      	movs	r0, #3
 8006584:	e7ef      	b.n	8006566 <USBD_CDC_TransmitPacket+0x16>

08006586 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006586:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006588:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800658c:	33b0      	adds	r3, #176	@ 0xb0
 800658e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006592:	b192      	cbz	r2, 80065ba <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006594:	7c04      	ldrb	r4, [r0, #16]
 8006596:	b944      	cbnz	r4, 80065aa <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006598:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800659c:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 80065a0:	2101      	movs	r1, #1
 80065a2:	f000 f997 	bl	80068d4 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 80065a6:	4620      	mov	r0, r4
 80065a8:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065aa:	2340      	movs	r3, #64	@ 0x40
 80065ac:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 80065b0:	2101      	movs	r1, #1
 80065b2:	f000 f98f 	bl	80068d4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80065b6:	2400      	movs	r4, #0
 80065b8:	e7f5      	b.n	80065a6 <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 80065ba:	2403      	movs	r4, #3
 80065bc:	e7f3      	b.n	80065a6 <USBD_CDC_ReceivePacket+0x20>

080065be <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80065be:	2000      	movs	r0, #0
 80065c0:	4770      	bx	lr

080065c2 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80065c2:	2000      	movs	r0, #0
 80065c4:	4770      	bx	lr

080065c6 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80065c6:	2000      	movs	r0, #0
 80065c8:	4770      	bx	lr
	...

080065cc <CDC_Receive_FS>:
{
 80065cc:	b510      	push	{r4, lr}
 80065ce:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80065d0:	4c04      	ldr	r4, [pc, #16]	@ (80065e4 <CDC_Receive_FS+0x18>)
 80065d2:	4620      	mov	r0, r4
 80065d4:	f7ff ffb0 	bl	8006538 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80065d8:	4620      	mov	r0, r4
 80065da:	f7ff ffd4 	bl	8006586 <USBD_CDC_ReceivePacket>
}
 80065de:	2000      	movs	r0, #0
 80065e0:	bd10      	pop	{r4, pc}
 80065e2:	bf00      	nop
 80065e4:	20004d90 	.word	0x20004d90

080065e8 <CDC_Init_FS>:
{
 80065e8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80065ea:	4c06      	ldr	r4, [pc, #24]	@ (8006604 <CDC_Init_FS+0x1c>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	4906      	ldr	r1, [pc, #24]	@ (8006608 <CDC_Init_FS+0x20>)
 80065f0:	4620      	mov	r0, r4
 80065f2:	f7ff ff93 	bl	800651c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80065f6:	4905      	ldr	r1, [pc, #20]	@ (800660c <CDC_Init_FS+0x24>)
 80065f8:	4620      	mov	r0, r4
 80065fa:	f7ff ff9d 	bl	8006538 <USBD_CDC_SetRxBuffer>
}
 80065fe:	2000      	movs	r0, #0
 8006600:	bd10      	pop	{r4, pc}
 8006602:	bf00      	nop
 8006604:	20004d90 	.word	0x20004d90
 8006608:	2000506c 	.word	0x2000506c
 800660c:	2000546c 	.word	0x2000546c

08006610 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006610:	4b09      	ldr	r3, [pc, #36]	@ (8006638 <CDC_Transmit_FS+0x28>)
 8006612:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 8006616:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800661a:	b10b      	cbz	r3, 8006620 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 800661c:	2001      	movs	r0, #1
}
 800661e:	4770      	bx	lr
{
 8006620:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006622:	4c05      	ldr	r4, [pc, #20]	@ (8006638 <CDC_Transmit_FS+0x28>)
 8006624:	460a      	mov	r2, r1
 8006626:	4601      	mov	r1, r0
 8006628:	4620      	mov	r0, r4
 800662a:	f7ff ff77 	bl	800651c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800662e:	4620      	mov	r0, r4
 8006630:	f7ff ff8e 	bl	8006550 <USBD_CDC_TransmitPacket>
}
 8006634:	bd10      	pop	{r4, pc}
 8006636:	bf00      	nop
 8006638:	20004d90 	.word	0x20004d90

0800663c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800663c:	b530      	push	{r4, r5, lr}
 800663e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006640:	2300      	movs	r3, #0
 8006642:	9303      	str	r3, [sp, #12]
 8006644:	9304      	str	r3, [sp, #16]
 8006646:	9305      	str	r3, [sp, #20]
 8006648:	9306      	str	r3, [sp, #24]
 800664a:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800664c:	6803      	ldr	r3, [r0, #0]
 800664e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006652:	d001      	beq.n	8006658 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006654:	b009      	add	sp, #36	@ 0x24
 8006656:	bd30      	pop	{r4, r5, pc}
 8006658:	aa03      	add	r2, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800665a:	2500      	movs	r5, #0
 800665c:	9501      	str	r5, [sp, #4]
 800665e:	4c17      	ldr	r4, [pc, #92]	@ (80066bc <HAL_PCD_MspInit+0x80>)
 8006660:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006662:	f043 0301 	orr.w	r3, r3, #1
 8006666:	6323      	str	r3, [r4, #48]	@ 0x30
 8006668:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	9301      	str	r3, [sp, #4]
 8006670:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006672:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006676:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006678:	2302      	movs	r3, #2
 800667a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800667c:	2303      	movs	r3, #3
 800667e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006680:	230a      	movs	r3, #10
 8006682:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006684:	4611      	mov	r1, r2
 8006686:	480e      	ldr	r0, [pc, #56]	@ (80066c0 <HAL_PCD_MspInit+0x84>)
 8006688:	f7fb fdb0 	bl	80021ec <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800668c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800668e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006692:	6363      	str	r3, [r4, #52]	@ 0x34
 8006694:	9502      	str	r5, [sp, #8]
 8006696:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800669c:	6463      	str	r3, [r4, #68]	@ 0x44
 800669e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80066a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066a4:	9302      	str	r3, [sp, #8]
 80066a6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80066a8:	462a      	mov	r2, r5
 80066aa:	2105      	movs	r1, #5
 80066ac:	2043      	movs	r0, #67	@ 0x43
 80066ae:	f7fb fbcf 	bl	8001e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80066b2:	2043      	movs	r0, #67	@ 0x43
 80066b4:	f7fb fbdc 	bl	8001e70 <HAL_NVIC_EnableIRQ>
}
 80066b8:	e7cc      	b.n	8006654 <HAL_PCD_MspInit+0x18>
 80066ba:	bf00      	nop
 80066bc:	40023800 	.word	0x40023800
 80066c0:	40020000 	.word	0x40020000

080066c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066c4:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80066c6:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 80066ca:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80066ce:	f000 f956 	bl	800697e <USBD_LL_SetupStage>
}
 80066d2:	bd08      	pop	{r3, pc}

080066d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066d4:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80066d6:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80066da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80066de:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 80066e2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80066e6:	f000 fa17 	bl	8006b18 <USBD_LL_DataOutStage>
}
 80066ea:	bd08      	pop	{r3, pc}

080066ec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066ec:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80066ee:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80066f2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80066f6:	6a1a      	ldr	r2, [r3, #32]
 80066f8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80066fc:	f000 fa6c 	bl	8006bd8 <USBD_LL_DataInStage>
}
 8006700:	bd08      	pop	{r3, pc}

08006702 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006702:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006704:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006708:	f000 f9b4 	bl	8006a74 <USBD_LL_SOF>
}
 800670c:	bd08      	pop	{r3, pc}

0800670e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800670e:	b510      	push	{r4, lr}
 8006710:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006712:	79c3      	ldrb	r3, [r0, #7]
 8006714:	2b02      	cmp	r3, #2
 8006716:	d109      	bne.n	800672c <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006718:	2101      	movs	r1, #1
 800671a:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800671e:	f000 f98c 	bl	8006a3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006722:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8006726:	f000 f956 	bl	80069d6 <USBD_LL_Reset>
}
 800672a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800672c:	f7fa fbe4 	bl	8000ef8 <Error_Handler>
 8006730:	e7f2      	b.n	8006718 <HAL_PCD_ResetCallback+0xa>
	...

08006734 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006734:	b510      	push	{r4, lr}
 8006736:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006738:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800673c:	f000 f980 	bl	8006a40 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006740:	6822      	ldr	r2, [r4, #0]
 8006742:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8006746:	f043 0301 	orr.w	r3, r3, #1
 800674a:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800674e:	7ae3      	ldrb	r3, [r4, #11]
 8006750:	b123      	cbz	r3, 800675c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006752:	4a03      	ldr	r2, [pc, #12]	@ (8006760 <HAL_PCD_SuspendCallback+0x2c>)
 8006754:	6913      	ldr	r3, [r2, #16]
 8006756:	f043 0306 	orr.w	r3, r3, #6
 800675a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800675c:	bd10      	pop	{r4, pc}
 800675e:	bf00      	nop
 8006760:	e000ed00 	.word	0xe000ed00

08006764 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006764:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006766:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800676a:	f000 f977 	bl	8006a5c <USBD_LL_Resume>
}
 800676e:	bd08      	pop	{r3, pc}

08006770 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006770:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006772:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006776:	f000 f9a3 	bl	8006ac0 <USBD_LL_IsoOUTIncomplete>
}
 800677a:	bd08      	pop	{r3, pc}

0800677c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800677c:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800677e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006782:	f000 f987 	bl	8006a94 <USBD_LL_IsoINIncomplete>
}
 8006786:	bd08      	pop	{r3, pc}

08006788 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006788:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800678a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800678e:	f000 f9ad 	bl	8006aec <USBD_LL_DevConnected>
}
 8006792:	bd08      	pop	{r3, pc}

08006794 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006794:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006796:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800679a:	f000 f9a9 	bl	8006af0 <USBD_LL_DevDisconnected>
}
 800679e:	bd08      	pop	{r3, pc}

080067a0 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80067a0:	7802      	ldrb	r2, [r0, #0]
 80067a2:	b10a      	cbz	r2, 80067a8 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 80067a4:	2000      	movs	r0, #0
 80067a6:	4770      	bx	lr
{
 80067a8:	b510      	push	{r4, lr}
 80067aa:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 80067ac:	4815      	ldr	r0, [pc, #84]	@ (8006804 <USBD_LL_Init+0x64>)
 80067ae:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80067b2:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80067b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80067ba:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80067bc:	2304      	movs	r3, #4
 80067be:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80067c0:	2202      	movs	r2, #2
 80067c2:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80067c4:	2300      	movs	r3, #0
 80067c6:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80067c8:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80067ca:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80067cc:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80067ce:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80067d0:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80067d2:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80067d4:	f7fb fe7e 	bl	80024d4 <HAL_PCD_Init>
 80067d8:	b980      	cbnz	r0, 80067fc <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80067da:	4c0a      	ldr	r4, [pc, #40]	@ (8006804 <USBD_LL_Init+0x64>)
 80067dc:	2180      	movs	r1, #128	@ 0x80
 80067de:	4620      	mov	r0, r4
 80067e0:	f7fc fc47 	bl	8003072 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80067e4:	2240      	movs	r2, #64	@ 0x40
 80067e6:	2100      	movs	r1, #0
 80067e8:	4620      	mov	r0, r4
 80067ea:	f7fc fc1c 	bl	8003026 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80067ee:	2280      	movs	r2, #128	@ 0x80
 80067f0:	2101      	movs	r1, #1
 80067f2:	4620      	mov	r0, r4
 80067f4:	f7fc fc17 	bl	8003026 <HAL_PCDEx_SetTxFiFo>
}
 80067f8:	2000      	movs	r0, #0
 80067fa:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80067fc:	f7fa fb7c 	bl	8000ef8 <Error_Handler>
 8006800:	e7eb      	b.n	80067da <USBD_LL_Init+0x3a>
 8006802:	bf00      	nop
 8006804:	20005a8c 	.word	0x20005a8c

08006808 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006808:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 800680c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8006810:	d108      	bne.n	8006824 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006812:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006816:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800681a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800681e:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8006822:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006824:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006828:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800682c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006830:	7d98      	ldrb	r0, [r3, #22]
 8006832:	4770      	bx	lr

08006834 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006834:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006836:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800683a:	f7fc f84f 	bl	80028dc <HAL_PCD_EP_GetRxCount>
}
 800683e:	bd08      	pop	{r3, pc}

08006840 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8006840:	4800      	ldr	r0, [pc, #0]	@ (8006844 <USBD_static_malloc+0x4>)
 8006842:	4770      	bx	lr
 8006844:	2000586c 	.word	0x2000586c

08006848 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8006848:	4770      	bx	lr

0800684a <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800684a:	2803      	cmp	r0, #3
 800684c:	d805      	bhi.n	800685a <USBD_Get_USB_Status+0x10>
 800684e:	e8df f000 	tbb	[pc, r0]
 8006852:	0405      	.short	0x0405
 8006854:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006856:	2001      	movs	r0, #1
    break;
 8006858:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800685a:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800685c:	4770      	bx	lr

0800685e <USBD_LL_Start>:
{
 800685e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006860:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006864:	f7fb feb7 	bl	80025d6 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006868:	f7ff ffef 	bl	800684a <USBD_Get_USB_Status>
}
 800686c:	bd08      	pop	{r3, pc}

0800686e <USBD_LL_OpenEP>:
{
 800686e:	b508      	push	{r3, lr}
 8006870:	4694      	mov	ip, r2
 8006872:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006874:	4663      	mov	r3, ip
 8006876:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800687a:	f7fb ff8c 	bl	8002796 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800687e:	f7ff ffe4 	bl	800684a <USBD_Get_USB_Status>
}
 8006882:	bd08      	pop	{r3, pc}

08006884 <USBD_LL_CloseEP>:
{
 8006884:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006886:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800688a:	f7fb ffca 	bl	8002822 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800688e:	f7ff ffdc 	bl	800684a <USBD_Get_USB_Status>
}
 8006892:	bd08      	pop	{r3, pc}

08006894 <USBD_LL_StallEP>:
{
 8006894:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006896:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800689a:	f7fc f84d 	bl	8002938 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800689e:	f7ff ffd4 	bl	800684a <USBD_Get_USB_Status>
}
 80068a2:	bd08      	pop	{r3, pc}

080068a4 <USBD_LL_ClearStallEP>:
{
 80068a4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80068a6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80068aa:	f7fc f888 	bl	80029be <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068ae:	f7ff ffcc 	bl	800684a <USBD_Get_USB_Status>
}
 80068b2:	bd08      	pop	{r3, pc}

080068b4 <USBD_LL_SetUSBAddress>:
{
 80068b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80068b6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80068ba:	f7fb ff59 	bl	8002770 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068be:	f7ff ffc4 	bl	800684a <USBD_Get_USB_Status>
}
 80068c2:	bd08      	pop	{r3, pc}

080068c4 <USBD_LL_Transmit>:
{
 80068c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80068c6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80068ca:	f7fc f810 	bl	80028ee <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068ce:	f7ff ffbc 	bl	800684a <USBD_Get_USB_Status>
}
 80068d2:	bd08      	pop	{r3, pc}

080068d4 <USBD_LL_PrepareReceive>:
{
 80068d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80068d6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80068da:	f7fb ffda 	bl	8002892 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068de:	f7ff ffb4 	bl	800684a <USBD_Get_USB_Status>
}
 80068e2:	bd08      	pop	{r3, pc}

080068e4 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068e4:	b198      	cbz	r0, 800690e <USBD_Init+0x2a>
{
 80068e6:	b508      	push	{r3, lr}
 80068e8:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80068ea:	2000      	movs	r0, #0
 80068ec:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80068f0:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80068f4:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068f8:	b109      	cbz	r1, 80068fe <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 80068fa:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068fe:	2101      	movs	r1, #1
 8006900:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006904:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff ff4a 	bl	80067a0 <USBD_LL_Init>

  return ret;
}
 800690c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800690e:	2003      	movs	r0, #3
}
 8006910:	4770      	bx	lr

08006912 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006912:	b510      	push	{r4, lr}
 8006914:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800691c:	b1b9      	cbz	r1, 800694e <USBD_RegisterClass+0x3c>
 800691e:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006920:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006924:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8006928:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800692a:	b143      	cbz	r3, 800693e <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800692c:	32ae      	adds	r2, #174	@ 0xae
 800692e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8006932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006934:	f10d 0006 	add.w	r0, sp, #6
 8006938:	4798      	blx	r3
 800693a:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800693e:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8006942:	3301      	adds	r3, #1
 8006944:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8006948:	2000      	movs	r0, #0
}
 800694a:	b002      	add	sp, #8
 800694c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800694e:	2003      	movs	r0, #3
 8006950:	e7fb      	b.n	800694a <USBD_RegisterClass+0x38>

08006952 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006952:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006954:	f7ff ff83 	bl	800685e <USBD_LL_Start>
}
 8006958:	bd08      	pop	{r3, pc}

0800695a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800695a:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800695c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006960:	b113      	cbz	r3, 8006968 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8006966:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8006968:	2000      	movs	r0, #0
 800696a:	e7fc      	b.n	8006966 <USBD_SetClassConfig+0xc>

0800696c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800696c:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800696e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	4798      	blx	r3
 8006976:	b900      	cbnz	r0, 800697a <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8006978:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 800697a:	2003      	movs	r0, #3
 800697c:	e7fc      	b.n	8006978 <USBD_ClrClassConfig+0xc>

0800697e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800697e:	b538      	push	{r3, r4, r5, lr}
 8006980:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006982:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8006986:	4628      	mov	r0, r5
 8006988:	f000 f9bf 	bl	8006d0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800698c:	2301      	movs	r3, #1
 800698e:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006992:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8006996:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800699a:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 800699e:	f001 031f 	and.w	r3, r1, #31
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d007      	beq.n	80069b6 <USBD_LL_SetupStage+0x38>
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d00a      	beq.n	80069c0 <USBD_LL_SetupStage+0x42>
 80069aa:	b973      	cbnz	r3, 80069ca <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80069ac:	4629      	mov	r1, r5
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 fb80 	bl	80070b4 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 80069b4:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80069b6:	4629      	mov	r1, r5
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 fbb6 	bl	800712a <USBD_StdItfReq>
      break;
 80069be:	e7f9      	b.n	80069b4 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80069c0:	4629      	mov	r1, r5
 80069c2:	4620      	mov	r0, r4
 80069c4:	f000 fbf3 	bl	80071ae <USBD_StdEPReq>
      break;
 80069c8:	e7f4      	b.n	80069b4 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069ca:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80069ce:	4620      	mov	r0, r4
 80069d0:	f7ff ff60 	bl	8006894 <USBD_LL_StallEP>
      break;
 80069d4:	e7ee      	b.n	80069b4 <USBD_LL_SetupStage+0x36>

080069d6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80069d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d8:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069da:	2301      	movs	r3, #1
 80069dc:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 80069e6:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 80069e8:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80069ec:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80069f0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80069f4:	b1db      	cbz	r3, 8006a2e <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	b1db      	cbz	r3, 8006a32 <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80069fa:	2100      	movs	r1, #0
 80069fc:	4798      	blx	r3
 80069fe:	4607      	mov	r7, r0
 8006a00:	b9c8      	cbnz	r0, 8006a36 <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a02:	2340      	movs	r3, #64	@ 0x40
 8006a04:	2200      	movs	r2, #0
 8006a06:	4611      	mov	r1, r2
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f7ff ff30 	bl	800686e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a0e:	2601      	movs	r6, #1
 8006a10:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a14:	2540      	movs	r5, #64	@ 0x40
 8006a16:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a1a:	462b      	mov	r3, r5
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2180      	movs	r1, #128	@ 0x80
 8006a20:	4620      	mov	r0, r4
 8006a22:	f7ff ff24 	bl	800686e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a26:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a28:	6225      	str	r5, [r4, #32]

  return ret;
}
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8006a2e:	2700      	movs	r7, #0
 8006a30:	e7e7      	b.n	8006a02 <USBD_LL_Reset+0x2c>
 8006a32:	2700      	movs	r7, #0
 8006a34:	e7e5      	b.n	8006a02 <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8006a36:	2703      	movs	r7, #3
 8006a38:	e7e3      	b.n	8006a02 <USBD_LL_Reset+0x2c>

08006a3a <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006a3a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	4770      	bx	lr

08006a40 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006a40:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d004      	beq.n	8006a52 <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006a48:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a52:	2304      	movs	r3, #4
 8006a54:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8006a58:	2000      	movs	r0, #0
 8006a5a:	4770      	bx	lr

08006a5c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a5c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d001      	beq.n	8006a68 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8006a64:	2000      	movs	r0, #0
 8006a66:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8006a68:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8006a72:	e7f7      	b.n	8006a64 <USBD_LL_Resume+0x8>

08006a74 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a74:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a76:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d001      	beq.n	8006a82 <USBD_LL_SOF+0xe>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8006a7e:	2000      	movs	r0, #0
 8006a80:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 8006a82:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0f9      	beq.n	8006a7e <USBD_LL_SOF+0xa>
      if (pdev->pClass[0]->SOF != NULL)
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0f6      	beq.n	8006a7e <USBD_LL_SOF+0xa>
        (void)pdev->pClass[0]->SOF(pdev);
 8006a90:	4798      	blx	r3
 8006a92:	e7f4      	b.n	8006a7e <USBD_LL_SOF+0xa>

08006a94 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006a94:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8006a96:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006a9a:	33ae      	adds	r3, #174	@ 0xae
 8006a9c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006aa0:	b153      	cbz	r3, 8006ab8 <USBD_LL_IsoINIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aa2:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8006aa6:	2a03      	cmp	r2, #3
 8006aa8:	d001      	beq.n	8006aae <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8006aaa:	2000      	movs	r0, #0
}
 8006aac:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	b123      	cbz	r3, 8006abc <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006ab2:	4798      	blx	r3
  return USBD_OK;
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	e7f9      	b.n	8006aac <USBD_LL_IsoINIncomplete+0x18>
    return USBD_FAIL;
 8006ab8:	2003      	movs	r0, #3
 8006aba:	e7f7      	b.n	8006aac <USBD_LL_IsoINIncomplete+0x18>
  return USBD_OK;
 8006abc:	2000      	movs	r0, #0
 8006abe:	e7f5      	b.n	8006aac <USBD_LL_IsoINIncomplete+0x18>

08006ac0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006ac0:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8006ac2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006ac6:	33ae      	adds	r3, #174	@ 0xae
 8006ac8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006acc:	b153      	cbz	r3, 8006ae4 <USBD_LL_IsoOUTIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ace:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8006ad2:	2a03      	cmp	r2, #3
 8006ad4:	d001      	beq.n	8006ada <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8006ad6:	2000      	movs	r0, #0
}
 8006ad8:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006adc:	b123      	cbz	r3, 8006ae8 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006ade:	4798      	blx	r3
  return USBD_OK;
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	e7f9      	b.n	8006ad8 <USBD_LL_IsoOUTIncomplete+0x18>
    return USBD_FAIL;
 8006ae4:	2003      	movs	r0, #3
 8006ae6:	e7f7      	b.n	8006ad8 <USBD_LL_IsoOUTIncomplete+0x18>
  return USBD_OK;
 8006ae8:	2000      	movs	r0, #0
 8006aea:	e7f5      	b.n	8006ad8 <USBD_LL_IsoOUTIncomplete+0x18>

08006aec <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8006aec:	2000      	movs	r0, #0
 8006aee:	4770      	bx	lr

08006af0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006af0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006af2:	2301      	movs	r3, #1
 8006af4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006af8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006afc:	b123      	cbz	r3, 8006b08 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	7901      	ldrb	r1, [r0, #4]
 8006b02:	4798      	blx	r3
 8006b04:	b910      	cbnz	r0, 8006b0c <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8006b06:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8006b08:	2000      	movs	r0, #0
 8006b0a:	e7fc      	b.n	8006b06 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 8006b0c:	2003      	movs	r0, #3
 8006b0e:	e7fa      	b.n	8006b06 <USBD_LL_DevDisconnected+0x16>

08006b10 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8006b10:	2000      	movs	r0, #0
 8006b12:	4770      	bx	lr

08006b14 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8006b14:	2000      	movs	r0, #0
 8006b16:	4770      	bx	lr

08006b18 <USBD_LL_DataOutStage>:
{
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	4604      	mov	r4, r0
  if (epnum == 0U)
 8006b1c:	460d      	mov	r5, r1
 8006b1e:	2900      	cmp	r1, #0
 8006b20:	d141      	bne.n	8006ba6 <USBD_LL_DataOutStage+0x8e>
 8006b22:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b24:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8006b28:	2a03      	cmp	r2, #3
 8006b2a:	d001      	beq.n	8006b30 <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 8006b2c:	4608      	mov	r0, r1
}
 8006b2e:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8006b30:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 8006b34:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 8006b38:	4291      	cmp	r1, r2
 8006b3a:	d809      	bhi.n	8006b50 <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 8006b3c:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 8006b40:	f003 031f 	and.w	r3, r3, #31
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d00e      	beq.n	8006b66 <USBD_LL_DataOutStage+0x4e>
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d01a      	beq.n	8006b82 <USBD_LL_DataOutStage+0x6a>
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	e00f      	b.n	8006b70 <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 8006b50:	1a89      	subs	r1, r1, r2
 8006b52:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b56:	428a      	cmp	r2, r1
 8006b58:	bf28      	it	cs
 8006b5a:	460a      	movcs	r2, r1
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	f000 fd23 	bl	80075a8 <USBD_CtlContinueRx>
  return USBD_OK;
 8006b62:	4628      	mov	r0, r5
 8006b64:	e7e3      	b.n	8006b2e <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006b66:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8006b6a:	f7ff ffd1 	bl	8006b10 <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b6e:	b918      	cbnz	r0, 8006b78 <USBD_LL_DataOutStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b70:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d009      	beq.n	8006b8c <USBD_LL_DataOutStage+0x74>
        (void)USBD_CtlSendStatus(pdev);
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f000 fd1d 	bl	80075b8 <USBD_CtlSendStatus>
  return USBD_OK;
 8006b7e:	4628      	mov	r0, r5
 8006b80:	e7d5      	b.n	8006b2e <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b82:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8006b86:	f7ff ffc5 	bl	8006b14 <USBD_CoreFindEP>
            break;
 8006b8a:	e7f0      	b.n	8006b6e <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b8c:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8006b90:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006b94:	691a      	ldr	r2, [r3, #16]
 8006b96:	2a00      	cmp	r2, #0
 8006b98:	d0ee      	beq.n	8006b78 <USBD_LL_DataOutStage+0x60>
              pdev->classId = idx;
 8006b9a:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	4798      	blx	r3
 8006ba4:	e7e8      	b.n	8006b78 <USBD_LL_DataOutStage+0x60>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006ba6:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006baa:	f7ff ffb3 	bl	8006b14 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bae:	b988      	cbnz	r0, 8006bd4 <USBD_LL_DataOutStage+0xbc>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb0:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d1ba      	bne.n	8006b2e <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 8006bb8:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8006bbc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	2a00      	cmp	r2, #0
 8006bc4:	d0b3      	beq.n	8006b2e <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 8006bc6:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	4629      	mov	r1, r5
 8006bce:	4620      	mov	r0, r4
 8006bd0:	4798      	blx	r3
      if (ret != USBD_OK)
 8006bd2:	e7ac      	b.n	8006b2e <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	e7aa      	b.n	8006b2e <USBD_LL_DataOutStage+0x16>

08006bd8 <USBD_LL_DataInStage>:
{
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4604      	mov	r4, r0
  if (epnum == 0U)
 8006bdc:	460d      	mov	r5, r1
 8006bde:	2900      	cmp	r1, #0
 8006be0:	d14a      	bne.n	8006c78 <USBD_LL_DataInStage+0xa0>
 8006be2:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006be4:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8006be8:	2a02      	cmp	r2, #2
 8006bea:	d007      	beq.n	8006bfc <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 8006bec:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 8006bf0:	b118      	cbz	r0, 8006bfa <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8006bf8:	4628      	mov	r0, r5
}
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8006bfc:	69c2      	ldr	r2, [r0, #28]
 8006bfe:	6a01      	ldr	r1, [r0, #32]
 8006c00:	428a      	cmp	r2, r1
 8006c02:	d80d      	bhi.n	8006c20 <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 8006c04:	428a      	cmp	r2, r1
 8006c06:	d017      	beq.n	8006c38 <USBD_LL_DataInStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c08:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d027      	beq.n	8006c60 <USBD_LL_DataInStage+0x88>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c10:	2180      	movs	r1, #128	@ 0x80
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7ff fe3e 	bl	8006894 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 fcd8 	bl	80075ce <USBD_CtlReceiveStatus>
 8006c1e:	e7e5      	b.n	8006bec <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8006c20:	1a52      	subs	r2, r2, r1
 8006c22:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c24:	4619      	mov	r1, r3
 8006c26:	f000 fca8 	bl	800757a <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4620      	mov	r0, r4
 8006c32:	f7ff fe4f 	bl	80068d4 <USBD_LL_PrepareReceive>
 8006c36:	e7d9      	b.n	8006bec <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8006c38:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c3a:	4299      	cmp	r1, r3
 8006c3c:	d8e4      	bhi.n	8006c08 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 8006c3e:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d2e0      	bcs.n	8006c08 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c46:	2200      	movs	r2, #0
 8006c48:	4611      	mov	r1, r2
 8006c4a:	f000 fc96 	bl	800757a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c4e:	2100      	movs	r1, #0
 8006c50:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c54:	460b      	mov	r3, r1
 8006c56:	460a      	mov	r2, r1
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f7ff fe3b 	bl	80068d4 <USBD_LL_PrepareReceive>
 8006c5e:	e7c5      	b.n	8006bec <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006c60:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	2a00      	cmp	r2, #0
 8006c68:	d0d2      	beq.n	8006c10 <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	4620      	mov	r0, r4
 8006c74:	4798      	blx	r3
 8006c76:	e7cb      	b.n	8006c10 <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006c78:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006c7c:	f7ff ff4a 	bl	8006b14 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c80:	b988      	cbnz	r0, 8006ca6 <USBD_LL_DataInStage+0xce>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c82:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d1b7      	bne.n	8006bfa <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 8006c8a:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8006c8e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006c92:	695a      	ldr	r2, [r3, #20]
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	d0b0      	beq.n	8006bfa <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 8006c98:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	4798      	blx	r3
          if (ret != USBD_OK)
 8006ca4:	e7a9      	b.n	8006bfa <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	e7a7      	b.n	8006bfa <USBD_LL_DataInStage+0x22>

08006caa <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8006caa:	880b      	ldrh	r3, [r1, #0]
 8006cac:	7802      	ldrb	r2, [r0, #0]
 8006cae:	4413      	add	r3, r2
 8006cb0:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006cb2:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 8006cb4:	4418      	add	r0, r3
 8006cb6:	4770      	bx	lr

08006cb8 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 8006cb8:	8842      	ldrh	r2, [r0, #2]
 8006cba:	7803      	ldrb	r3, [r0, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d918      	bls.n	8006cf2 <USBD_GetEpDesc+0x3a>
{
 8006cc0:	b530      	push	{r4, r5, lr}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	460d      	mov	r5, r1
    ptr = desc->bLength;
 8006cc8:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 8006ccc:	8863      	ldrh	r3, [r4, #2]
 8006cce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d20a      	bcs.n	8006cec <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006cd6:	f10d 0106 	add.w	r1, sp, #6
 8006cda:	f7ff ffe6 	bl	8006caa <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006cde:	7843      	ldrb	r3, [r0, #1]
 8006ce0:	2b05      	cmp	r3, #5
 8006ce2:	d1f3      	bne.n	8006ccc <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8006ce4:	7883      	ldrb	r3, [r0, #2]
 8006ce6:	42ab      	cmp	r3, r5
 8006ce8:	d1f0      	bne.n	8006ccc <USBD_GetEpDesc+0x14>
 8006cea:	e000      	b.n	8006cee <USBD_GetEpDesc+0x36>
 8006cec:	2000      	movs	r0, #0
}
 8006cee:	b003      	add	sp, #12
 8006cf0:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006cf2:	2000      	movs	r0, #0
}
 8006cf4:	4770      	bx	lr

08006cf6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cf6:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8006cf8:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8006cfa:	e002      	b.n	8006d02 <USBD_GetLen+0xc>
  {
    len++;
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	b2c0      	uxtb	r0, r0
    pbuff++;
 8006d00:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8006d02:	781a      	ldrb	r2, [r3, #0]
 8006d04:	2a00      	cmp	r2, #0
 8006d06:	d1f9      	bne.n	8006cfc <USBD_GetLen+0x6>
  }

  return len;
}
 8006d08:	4770      	bx	lr

08006d0a <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8006d0a:	780b      	ldrb	r3, [r1, #0]
 8006d0c:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d0e:	784b      	ldrb	r3, [r1, #1]
 8006d10:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8006d12:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8006d14:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006d16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8006d1a:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8006d1c:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8006d1e:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006d20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8006d24:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8006d26:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8006d28:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006d2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8006d2e:	80c3      	strh	r3, [r0, #6]
}
 8006d30:	4770      	bx	lr

08006d32 <USBD_CtlError>:
{
 8006d32:	b510      	push	{r4, lr}
 8006d34:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d36:	2180      	movs	r1, #128	@ 0x80
 8006d38:	f7ff fdac 	bl	8006894 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f7ff fda8 	bl	8006894 <USBD_LL_StallEP>
}
 8006d44:	bd10      	pop	{r4, pc}

08006d46 <USBD_GetDescriptor>:
{
 8006d46:	b530      	push	{r4, r5, lr}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8006d54:	884a      	ldrh	r2, [r1, #2]
 8006d56:	0a13      	lsrs	r3, r2, #8
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	2b06      	cmp	r3, #6
 8006d5c:	f200 80aa 	bhi.w	8006eb4 <USBD_GetDescriptor+0x16e>
 8006d60:	e8df f003 	tbb	[pc, r3]
 8006d64:	a8321e04 	.word	0xa8321e04
 8006d68:	8ca8      	.short	0x8ca8
 8006d6a:	99          	.byte	0x99
 8006d6b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d6c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f10d 0106 	add.w	r1, sp, #6
 8006d76:	7c00      	ldrb	r0, [r0, #16]
 8006d78:	4798      	blx	r3
  if (req->wLength != 0U)
 8006d7a:	88ea      	ldrh	r2, [r5, #6]
 8006d7c:	2a00      	cmp	r2, #0
 8006d7e:	f000 80a3 	beq.w	8006ec8 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 8006d82:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 8099 	beq.w	8006ebe <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	bf28      	it	cs
 8006d90:	461a      	movcs	r2, r3
 8006d92:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d96:	4601      	mov	r1, r0
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f000 fbe1 	bl	8007560 <USBD_CtlSendData>
 8006d9e:	e08c      	b.n	8006eba <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006da0:	7c03      	ldrb	r3, [r0, #16]
 8006da2:	b943      	cbnz	r3, 8006db6 <USBD_GetDescriptor+0x70>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006da4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006daa:	f10d 0006 	add.w	r0, sp, #6
 8006dae:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006db0:	2302      	movs	r3, #2
 8006db2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006db4:	e7e1      	b.n	8006d7a <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006db6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbc:	f10d 0006 	add.w	r0, sp, #6
 8006dc0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006dc6:	e7d8      	b.n	8006d7a <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8006dc8:	b2d2      	uxtb	r2, r2
 8006dca:	2a05      	cmp	r2, #5
 8006dcc:	d852      	bhi.n	8006e74 <USBD_GetDescriptor+0x12e>
 8006dce:	e8df f002 	tbb	[pc, r2]
 8006dd2:	1003      	.short	0x1003
 8006dd4:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006dd8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	b123      	cbz	r3, 8006dea <USBD_GetDescriptor+0xa4>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006de0:	f10d 0106 	add.w	r1, sp, #6
 8006de4:	7c00      	ldrb	r0, [r0, #16]
 8006de6:	4798      	blx	r3
  if (err != 0U)
 8006de8:	e7c7      	b.n	8006d7a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006dea:	4629      	mov	r1, r5
 8006dec:	f7ff ffa1 	bl	8006d32 <USBD_CtlError>
  if (err != 0U)
 8006df0:	e063      	b.n	8006eba <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006df2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	b123      	cbz	r3, 8006e04 <USBD_GetDescriptor+0xbe>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006dfa:	f10d 0106 	add.w	r1, sp, #6
 8006dfe:	7c00      	ldrb	r0, [r0, #16]
 8006e00:	4798      	blx	r3
  if (err != 0U)
 8006e02:	e7ba      	b.n	8006d7a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006e04:	4629      	mov	r1, r5
 8006e06:	f7ff ff94 	bl	8006d32 <USBD_CtlError>
  if (err != 0U)
 8006e0a:	e056      	b.n	8006eba <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e0c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	b123      	cbz	r3, 8006e1e <USBD_GetDescriptor+0xd8>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e14:	f10d 0106 	add.w	r1, sp, #6
 8006e18:	7c00      	ldrb	r0, [r0, #16]
 8006e1a:	4798      	blx	r3
  if (err != 0U)
 8006e1c:	e7ad      	b.n	8006d7a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7ff ff87 	bl	8006d32 <USBD_CtlError>
  if (err != 0U)
 8006e24:	e049      	b.n	8006eba <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e26:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	b123      	cbz	r3, 8006e38 <USBD_GetDescriptor+0xf2>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e2e:	f10d 0106 	add.w	r1, sp, #6
 8006e32:	7c00      	ldrb	r0, [r0, #16]
 8006e34:	4798      	blx	r3
  if (err != 0U)
 8006e36:	e7a0      	b.n	8006d7a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006e38:	4629      	mov	r1, r5
 8006e3a:	f7ff ff7a 	bl	8006d32 <USBD_CtlError>
  if (err != 0U)
 8006e3e:	e03c      	b.n	8006eba <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e40:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	b123      	cbz	r3, 8006e52 <USBD_GetDescriptor+0x10c>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e48:	f10d 0106 	add.w	r1, sp, #6
 8006e4c:	7c00      	ldrb	r0, [r0, #16]
 8006e4e:	4798      	blx	r3
  if (err != 0U)
 8006e50:	e793      	b.n	8006d7a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006e52:	4629      	mov	r1, r5
 8006e54:	f7ff ff6d 	bl	8006d32 <USBD_CtlError>
  if (err != 0U)
 8006e58:	e02f      	b.n	8006eba <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e5a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	b123      	cbz	r3, 8006e6c <USBD_GetDescriptor+0x126>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e62:	f10d 0106 	add.w	r1, sp, #6
 8006e66:	7c00      	ldrb	r0, [r0, #16]
 8006e68:	4798      	blx	r3
  if (err != 0U)
 8006e6a:	e786      	b.n	8006d7a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	f7ff ff60 	bl	8006d32 <USBD_CtlError>
  if (err != 0U)
 8006e72:	e022      	b.n	8006eba <USBD_GetDescriptor+0x174>
          USBD_CtlError(pdev, req);
 8006e74:	4629      	mov	r1, r5
 8006e76:	f7ff ff5c 	bl	8006d32 <USBD_CtlError>
  if (err != 0U)
 8006e7a:	e01e      	b.n	8006eba <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e7c:	7c03      	ldrb	r3, [r0, #16]
 8006e7e:	b933      	cbnz	r3, 8006e8e <USBD_GetDescriptor+0x148>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e80:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e86:	f10d 0006 	add.w	r0, sp, #6
 8006e8a:	4798      	blx	r3
  if (err != 0U)
 8006e8c:	e775      	b.n	8006d7a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8006e8e:	4629      	mov	r1, r5
 8006e90:	f7ff ff4f 	bl	8006d32 <USBD_CtlError>
  if (err != 0U)
 8006e94:	e011      	b.n	8006eba <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e96:	7c03      	ldrb	r3, [r0, #16]
 8006e98:	b943      	cbnz	r3, 8006eac <USBD_GetDescriptor+0x166>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006e9a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea0:	f10d 0006 	add.w	r0, sp, #6
 8006ea4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ea6:	2307      	movs	r3, #7
 8006ea8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006eaa:	e766      	b.n	8006d7a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8006eac:	4629      	mov	r1, r5
 8006eae:	f7ff ff40 	bl	8006d32 <USBD_CtlError>
  if (err != 0U)
 8006eb2:	e002      	b.n	8006eba <USBD_GetDescriptor+0x174>
      USBD_CtlError(pdev, req);
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	f7ff ff3c 	bl	8006d32 <USBD_CtlError>
}
 8006eba:	b003      	add	sp, #12
 8006ebc:	bd30      	pop	{r4, r5, pc}
      USBD_CtlError(pdev, req);
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f7ff ff36 	bl	8006d32 <USBD_CtlError>
 8006ec6:	e7f8      	b.n	8006eba <USBD_GetDescriptor+0x174>
    (void)USBD_CtlSendStatus(pdev);
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f000 fb75 	bl	80075b8 <USBD_CtlSendStatus>
 8006ece:	e7f4      	b.n	8006eba <USBD_GetDescriptor+0x174>

08006ed0 <USBD_SetAddress>:
{
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ed4:	888b      	ldrh	r3, [r1, #4]
 8006ed6:	b9f3      	cbnz	r3, 8006f16 <USBD_SetAddress+0x46>
 8006ed8:	88cb      	ldrh	r3, [r1, #6]
 8006eda:	b9e3      	cbnz	r3, 8006f16 <USBD_SetAddress+0x46>
 8006edc:	884b      	ldrh	r3, [r1, #2]
 8006ede:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ee0:	d819      	bhi.n	8006f16 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ee2:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d00c      	beq.n	8006f08 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8006eee:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	f7ff fcde 	bl	80068b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 fb5d 	bl	80075b8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006efe:	b135      	cbz	r5, 8006f0e <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f00:	2302      	movs	r3, #2
 8006f02:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006f06:	e009      	b.n	8006f1c <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8006f08:	f7ff ff13 	bl	8006d32 <USBD_CtlError>
 8006f0c:	e006      	b.n	8006f1c <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006f14:	e002      	b.n	8006f1c <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8006f16:	4620      	mov	r0, r4
 8006f18:	f7ff ff0b 	bl	8006d32 <USBD_CtlError>
}
 8006f1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08006f20 <USBD_SetConfig>:
{
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	4604      	mov	r4, r0
 8006f24:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8006f26:	788d      	ldrb	r5, [r1, #2]
 8006f28:	4b2f      	ldr	r3, [pc, #188]	@ (8006fe8 <USBD_SetConfig+0xc8>)
 8006f2a:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f2c:	2d01      	cmp	r5, #1
 8006f2e:	d810      	bhi.n	8006f52 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8006f30:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d00f      	beq.n	8006f5a <USBD_SetConfig+0x3a>
 8006f3a:	2a03      	cmp	r2, #3
 8006f3c:	d026      	beq.n	8006f8c <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 8006f3e:	f7ff fef8 	bl	8006d32 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f42:	4b29      	ldr	r3, [pc, #164]	@ (8006fe8 <USBD_SetConfig+0xc8>)
 8006f44:	7819      	ldrb	r1, [r3, #0]
 8006f46:	4620      	mov	r0, r4
 8006f48:	f7ff fd10 	bl	800696c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f4c:	2503      	movs	r5, #3
}
 8006f4e:	4628      	mov	r0, r5
 8006f50:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8006f52:	f7ff feee 	bl	8006d32 <USBD_CtlError>
    return USBD_FAIL;
 8006f56:	2503      	movs	r5, #3
 8006f58:	e7f9      	b.n	8006f4e <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8006f5a:	b1a5      	cbz	r5, 8006f86 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 8006f5c:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f5e:	4629      	mov	r1, r5
 8006f60:	f7ff fcfb 	bl	800695a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006f64:	4605      	mov	r5, r0
 8006f66:	b138      	cbz	r0, 8006f78 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 8006f68:	4631      	mov	r1, r6
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f7ff fee1 	bl	8006d32 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f70:	2302      	movs	r3, #2
 8006f72:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006f76:	e7ea      	b.n	8006f4e <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fb1d 	bl	80075b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006f84:	e7e3      	b.n	8006f4e <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8006f86:	f000 fb17 	bl	80075b8 <USBD_CtlSendStatus>
 8006f8a:	e7e0      	b.n	8006f4e <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8006f8c:	b1cd      	cbz	r5, 8006fc2 <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 8006f8e:	6841      	ldr	r1, [r0, #4]
 8006f90:	428d      	cmp	r5, r1
 8006f92:	d025      	beq.n	8006fe0 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f94:	b2c9      	uxtb	r1, r1
 8006f96:	f7ff fce9 	bl	800696c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f9a:	4b13      	ldr	r3, [pc, #76]	@ (8006fe8 <USBD_SetConfig+0xc8>)
 8006f9c:	7819      	ldrb	r1, [r3, #0]
 8006f9e:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f7ff fcda 	bl	800695a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	b1b0      	cbz	r0, 8006fd8 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 8006faa:	4631      	mov	r1, r6
 8006fac:	4620      	mov	r0, r4
 8006fae:	f7ff fec0 	bl	8006d32 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fb2:	7921      	ldrb	r1, [r4, #4]
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f7ff fcd9 	bl	800696c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fba:	2302      	movs	r3, #2
 8006fbc:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006fc0:	e7c5      	b.n	8006f4e <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006fc8:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fca:	4629      	mov	r1, r5
 8006fcc:	f7ff fcce 	bl	800696c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 faf1 	bl	80075b8 <USBD_CtlSendStatus>
 8006fd6:	e7ba      	b.n	8006f4e <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 faed 	bl	80075b8 <USBD_CtlSendStatus>
 8006fde:	e7b6      	b.n	8006f4e <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8006fe0:	f000 faea 	bl	80075b8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8006fe4:	2500      	movs	r5, #0
 8006fe6:	e7b2      	b.n	8006f4e <USBD_SetConfig+0x2e>
 8006fe8:	20005f70 	.word	0x20005f70

08006fec <USBD_GetConfig>:
{
 8006fec:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8006fee:	88cb      	ldrh	r3, [r1, #6]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d10b      	bne.n	800700c <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8006ff4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d909      	bls.n	8007012 <USBD_GetConfig+0x26>
 8006ffe:	2a03      	cmp	r2, #3
 8007000:	d111      	bne.n	8007026 <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007002:	2201      	movs	r2, #1
 8007004:	1d01      	adds	r1, r0, #4
 8007006:	f000 faab 	bl	8007560 <USBD_CtlSendData>
        break;
 800700a:	e001      	b.n	8007010 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800700c:	f7ff fe91 	bl	8006d32 <USBD_CtlError>
}
 8007010:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8007012:	b252      	sxtb	r2, r2
 8007014:	b13a      	cbz	r2, 8007026 <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 8007016:	4601      	mov	r1, r0
 8007018:	2300      	movs	r3, #0
 800701a:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800701e:	2201      	movs	r2, #1
 8007020:	f000 fa9e 	bl	8007560 <USBD_CtlSendData>
        break;
 8007024:	e7f4      	b.n	8007010 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 8007026:	f7ff fe84 	bl	8006d32 <USBD_CtlError>
}
 800702a:	e7f1      	b.n	8007010 <USBD_GetConfig+0x24>

0800702c <USBD_GetStatus>:
{
 800702c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800702e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007032:	3b01      	subs	r3, #1
 8007034:	2b02      	cmp	r3, #2
 8007036:	d812      	bhi.n	800705e <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8007038:	88cb      	ldrh	r3, [r1, #6]
 800703a:	2b02      	cmp	r3, #2
 800703c:	d10c      	bne.n	8007058 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800703e:	2301      	movs	r3, #1
 8007040:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8007042:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8007046:	b10b      	cbz	r3, 800704c <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007048:	2303      	movs	r3, #3
 800704a:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800704c:	2202      	movs	r2, #2
 800704e:	f100 010c 	add.w	r1, r0, #12
 8007052:	f000 fa85 	bl	8007560 <USBD_CtlSendData>
}
 8007056:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8007058:	f7ff fe6b 	bl	8006d32 <USBD_CtlError>
        break;
 800705c:	e7fb      	b.n	8007056 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800705e:	f7ff fe68 	bl	8006d32 <USBD_CtlError>
}
 8007062:	e7f8      	b.n	8007056 <USBD_GetStatus+0x2a>

08007064 <USBD_SetFeature>:
{
 8007064:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007066:	884b      	ldrh	r3, [r1, #2]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d004      	beq.n	8007076 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800706c:	2b02      	cmp	r3, #2
 800706e:	d007      	beq.n	8007080 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 8007070:	f7ff fe5f 	bl	8006d32 <USBD_CtlError>
}
 8007074:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8007076:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800707a:	f000 fa9d 	bl	80075b8 <USBD_CtlSendStatus>
 800707e:	e7f9      	b.n	8007074 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007080:	888b      	ldrh	r3, [r1, #4]
 8007082:	0a1b      	lsrs	r3, r3, #8
 8007084:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007088:	f000 fa96 	bl	80075b8 <USBD_CtlSendStatus>
 800708c:	e7f2      	b.n	8007074 <USBD_SetFeature+0x10>

0800708e <USBD_ClrFeature>:
{
 800708e:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8007090:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007094:	3b01      	subs	r3, #1
 8007096:	2b02      	cmp	r3, #2
 8007098:	d809      	bhi.n	80070ae <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800709a:	884b      	ldrh	r3, [r1, #2]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d000      	beq.n	80070a2 <USBD_ClrFeature+0x14>
}
 80070a0:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80070a8:	f000 fa86 	bl	80075b8 <USBD_CtlSendStatus>
 80070ac:	e7f8      	b.n	80070a0 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80070ae:	f7ff fe40 	bl	8006d32 <USBD_CtlError>
}
 80070b2:	e7f5      	b.n	80070a0 <USBD_ClrFeature+0x12>

080070b4 <USBD_StdDevReq>:
{
 80070b4:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070b6:	780c      	ldrb	r4, [r1, #0]
 80070b8:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 80070bc:	2c20      	cmp	r4, #32
 80070be:	d006      	beq.n	80070ce <USBD_StdDevReq+0x1a>
 80070c0:	2c40      	cmp	r4, #64	@ 0x40
 80070c2:	d004      	beq.n	80070ce <USBD_StdDevReq+0x1a>
 80070c4:	b16c      	cbz	r4, 80070e2 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 80070c6:	f7ff fe34 	bl	8006d32 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80070ca:	2400      	movs	r4, #0
      break;
 80070cc:	e007      	b.n	80070de <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80070ce:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80070d2:	33ae      	adds	r3, #174	@ 0xae
 80070d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	4798      	blx	r3
 80070dc:	4604      	mov	r4, r0
}
 80070de:	4620      	mov	r0, r4
 80070e0:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 80070e2:	784d      	ldrb	r5, [r1, #1]
 80070e4:	2d09      	cmp	r5, #9
 80070e6:	d81d      	bhi.n	8007124 <USBD_StdDevReq+0x70>
 80070e8:	e8df f005 	tbb	[pc, r5]
 80070ec:	161c1912 	.word	0x161c1912
 80070f0:	1c05081c 	.word	0x1c05081c
 80070f4:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 80070f6:	f7ff fe26 	bl	8006d46 <USBD_GetDescriptor>
          break;
 80070fa:	e7f0      	b.n	80070de <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 80070fc:	f7ff fee8 	bl	8006ed0 <USBD_SetAddress>
          break;
 8007100:	e7ed      	b.n	80070de <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 8007102:	f7ff ff0d 	bl	8006f20 <USBD_SetConfig>
 8007106:	4604      	mov	r4, r0
          break;
 8007108:	e7e9      	b.n	80070de <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 800710a:	f7ff ff6f 	bl	8006fec <USBD_GetConfig>
          break;
 800710e:	e7e6      	b.n	80070de <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 8007110:	f7ff ff8c 	bl	800702c <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8007114:	462c      	mov	r4, r5
          break;
 8007116:	e7e2      	b.n	80070de <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 8007118:	f7ff ffa4 	bl	8007064 <USBD_SetFeature>
          break;
 800711c:	e7df      	b.n	80070de <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 800711e:	f7ff ffb6 	bl	800708e <USBD_ClrFeature>
          break;
 8007122:	e7dc      	b.n	80070de <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8007124:	f7ff fe05 	bl	8006d32 <USBD_CtlError>
          break;
 8007128:	e7d9      	b.n	80070de <USBD_StdDevReq+0x2a>

0800712a <USBD_StdItfReq>:
{
 800712a:	b570      	push	{r4, r5, r6, lr}
 800712c:	4605      	mov	r5, r0
 800712e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007130:	780b      	ldrb	r3, [r1, #0]
 8007132:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007136:	2b20      	cmp	r3, #32
 8007138:	d007      	beq.n	800714a <USBD_StdItfReq+0x20>
 800713a:	2b40      	cmp	r3, #64	@ 0x40
 800713c:	d005      	beq.n	800714a <USBD_StdItfReq+0x20>
 800713e:	b123      	cbz	r3, 800714a <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8007140:	f7ff fdf7 	bl	8006d32 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007144:	2600      	movs	r6, #0
}
 8007146:	4630      	mov	r0, r6
 8007148:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800714a:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 800714e:	3b01      	subs	r3, #1
 8007150:	2b02      	cmp	r3, #2
 8007152:	d826      	bhi.n	80071a2 <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007154:	7921      	ldrb	r1, [r4, #4]
 8007156:	2901      	cmp	r1, #1
 8007158:	d905      	bls.n	8007166 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 800715a:	4621      	mov	r1, r4
 800715c:	4628      	mov	r0, r5
 800715e:	f7ff fde8 	bl	8006d32 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007162:	2600      	movs	r6, #0
 8007164:	e7ef      	b.n	8007146 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007166:	4628      	mov	r0, r5
 8007168:	f7ff fcd2 	bl	8006b10 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800716c:	b968      	cbnz	r0, 800718a <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 800716e:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8007172:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8007176:	6891      	ldr	r1, [r2, #8]
 8007178:	b189      	cbz	r1, 800719e <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 800717a:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800717e:	6893      	ldr	r3, [r2, #8]
 8007180:	4621      	mov	r1, r4
 8007182:	4628      	mov	r0, r5
 8007184:	4798      	blx	r3
 8007186:	4606      	mov	r6, r0
 8007188:	e000      	b.n	800718c <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 800718a:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800718c:	88e3      	ldrh	r3, [r4, #6]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1d9      	bne.n	8007146 <USBD_StdItfReq+0x1c>
 8007192:	2e00      	cmp	r6, #0
 8007194:	d1d7      	bne.n	8007146 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8007196:	4628      	mov	r0, r5
 8007198:	f000 fa0e 	bl	80075b8 <USBD_CtlSendStatus>
 800719c:	e7d3      	b.n	8007146 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 800719e:	2603      	movs	r6, #3
 80071a0:	e7f4      	b.n	800718c <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 80071a2:	4621      	mov	r1, r4
 80071a4:	4628      	mov	r0, r5
 80071a6:	f7ff fdc4 	bl	8006d32 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80071aa:	2600      	movs	r6, #0
          break;
 80071ac:	e7cb      	b.n	8007146 <USBD_StdItfReq+0x1c>

080071ae <USBD_StdEPReq>:
{
 80071ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b2:	4606      	mov	r6, r0
 80071b4:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 80071b6:	888b      	ldrh	r3, [r1, #4]
 80071b8:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ba:	780c      	ldrb	r4, [r1, #0]
 80071bc:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 80071c0:	2c20      	cmp	r4, #32
 80071c2:	d008      	beq.n	80071d6 <USBD_StdEPReq+0x28>
 80071c4:	2c40      	cmp	r4, #64	@ 0x40
 80071c6:	d006      	beq.n	80071d6 <USBD_StdEPReq+0x28>
 80071c8:	b1dc      	cbz	r4, 8007202 <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 80071ca:	f7ff fdb2 	bl	8006d32 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80071ce:	2400      	movs	r4, #0
}
 80071d0:	4620      	mov	r0, r4
 80071d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80071d6:	4639      	mov	r1, r7
 80071d8:	4630      	mov	r0, r6
 80071da:	f7ff fc9b 	bl	8006b14 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071de:	4604      	mov	r4, r0
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f040 80fc 	bne.w	80073de <USBD_StdEPReq+0x230>
        pdev->classId = idx;
 80071e6:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 80071ea:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80071ee:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0eb      	beq.n	80071d0 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071f8:	4629      	mov	r1, r5
 80071fa:	4630      	mov	r0, r6
 80071fc:	4798      	blx	r3
 80071fe:	4604      	mov	r4, r0
 8007200:	e7e6      	b.n	80071d0 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 8007202:	f891 8001 	ldrb.w	r8, [r1, #1]
 8007206:	f1b8 0f01 	cmp.w	r8, #1
 800720a:	d031      	beq.n	8007270 <USBD_StdEPReq+0xc2>
 800720c:	f1b8 0f03 	cmp.w	r8, #3
 8007210:	d005      	beq.n	800721e <USBD_StdEPReq+0x70>
 8007212:	f1b8 0f00 	cmp.w	r8, #0
 8007216:	d067      	beq.n	80072e8 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 8007218:	f7ff fd8b 	bl	8006d32 <USBD_CtlError>
          break;
 800721c:	e7d8      	b.n	80071d0 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800721e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007222:	b2da      	uxtb	r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d004      	beq.n	8007232 <USBD_StdEPReq+0x84>
 8007228:	2a03      	cmp	r2, #3
 800722a:	d012      	beq.n	8007252 <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 800722c:	f7ff fd81 	bl	8006d32 <USBD_CtlError>
              break;
 8007230:	e7ce      	b.n	80071d0 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007232:	b10f      	cbz	r7, 8007238 <USBD_StdEPReq+0x8a>
 8007234:	2f80      	cmp	r7, #128	@ 0x80
 8007236:	d104      	bne.n	8007242 <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 8007238:	4629      	mov	r1, r5
 800723a:	4630      	mov	r0, r6
 800723c:	f7ff fd79 	bl	8006d32 <USBD_CtlError>
 8007240:	e7c6      	b.n	80071d0 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007242:	4639      	mov	r1, r7
 8007244:	f7ff fb26 	bl	8006894 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007248:	2180      	movs	r1, #128	@ 0x80
 800724a:	4630      	mov	r0, r6
 800724c:	f7ff fb22 	bl	8006894 <USBD_LL_StallEP>
 8007250:	e7be      	b.n	80071d0 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007252:	884b      	ldrh	r3, [r1, #2]
 8007254:	b923      	cbnz	r3, 8007260 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007256:	b11f      	cbz	r7, 8007260 <USBD_StdEPReq+0xb2>
 8007258:	2f80      	cmp	r7, #128	@ 0x80
 800725a:	d001      	beq.n	8007260 <USBD_StdEPReq+0xb2>
 800725c:	88cb      	ldrh	r3, [r1, #6]
 800725e:	b11b      	cbz	r3, 8007268 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 8007260:	4630      	mov	r0, r6
 8007262:	f000 f9a9 	bl	80075b8 <USBD_CtlSendStatus>
              break;
 8007266:	e7b3      	b.n	80071d0 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007268:	4639      	mov	r1, r7
 800726a:	f7ff fb13 	bl	8006894 <USBD_LL_StallEP>
 800726e:	e7f7      	b.n	8007260 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 8007270:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007274:	b2da      	uxtb	r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d004      	beq.n	8007284 <USBD_StdEPReq+0xd6>
 800727a:	2a03      	cmp	r2, #3
 800727c:	d012      	beq.n	80072a4 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 800727e:	f7ff fd58 	bl	8006d32 <USBD_CtlError>
              break;
 8007282:	e7a5      	b.n	80071d0 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007284:	b10f      	cbz	r7, 800728a <USBD_StdEPReq+0xdc>
 8007286:	2f80      	cmp	r7, #128	@ 0x80
 8007288:	d104      	bne.n	8007294 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 800728a:	4629      	mov	r1, r5
 800728c:	4630      	mov	r0, r6
 800728e:	f7ff fd50 	bl	8006d32 <USBD_CtlError>
 8007292:	e79d      	b.n	80071d0 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007294:	4639      	mov	r1, r7
 8007296:	f7ff fafd 	bl	8006894 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800729a:	2180      	movs	r1, #128	@ 0x80
 800729c:	4630      	mov	r0, r6
 800729e:	f7ff faf9 	bl	8006894 <USBD_LL_StallEP>
 80072a2:	e795      	b.n	80071d0 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072a4:	884b      	ldrh	r3, [r1, #2]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d192      	bne.n	80071d0 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 80072aa:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 80072ae:	d117      	bne.n	80072e0 <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 80072b0:	4630      	mov	r0, r6
 80072b2:	f000 f981 	bl	80075b8 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072b6:	4639      	mov	r1, r7
 80072b8:	4630      	mov	r0, r6
 80072ba:	f7ff fc2b 	bl	8006b14 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072be:	2800      	cmp	r0, #0
 80072c0:	d186      	bne.n	80071d0 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 80072c2:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 80072c6:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 80072ca:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80072ce:	6892      	ldr	r2, [r2, #8]
 80072d0:	2a00      	cmp	r2, #0
 80072d2:	f000 8086 	beq.w	80073e2 <USBD_StdEPReq+0x234>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80072d6:	4629      	mov	r1, r5
 80072d8:	4630      	mov	r0, r6
 80072da:	4790      	blx	r2
 80072dc:	4604      	mov	r4, r0
 80072de:	e777      	b.n	80071d0 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072e0:	4639      	mov	r1, r7
 80072e2:	f7ff fadf 	bl	80068a4 <USBD_LL_ClearStallEP>
 80072e6:	e7e3      	b.n	80072b0 <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 80072e8:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80072ec:	b2d1      	uxtb	r1, r2
 80072ee:	2a02      	cmp	r2, #2
 80072f0:	d006      	beq.n	8007300 <USBD_StdEPReq+0x152>
 80072f2:	2903      	cmp	r1, #3
 80072f4:	d029      	beq.n	800734a <USBD_StdEPReq+0x19c>
              USBD_CtlError(pdev, req);
 80072f6:	4629      	mov	r1, r5
 80072f8:	f7ff fd1b 	bl	8006d32 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80072fc:	4644      	mov	r4, r8
              break;
 80072fe:	e767      	b.n	80071d0 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007300:	b10f      	cbz	r7, 8007306 <USBD_StdEPReq+0x158>
 8007302:	2f80      	cmp	r7, #128	@ 0x80
 8007304:	d113      	bne.n	800732e <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007306:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800730a:	d115      	bne.n	8007338 <USBD_StdEPReq+0x18a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800730c:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007310:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8007314:	00b9      	lsls	r1, r7, #2
 8007316:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 800731a:	4431      	add	r1, r6
 800731c:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800731e:	2300      	movs	r3, #0
 8007320:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007322:	2202      	movs	r2, #2
 8007324:	4630      	mov	r0, r6
 8007326:	f000 f91b 	bl	8007560 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800732a:	4644      	mov	r4, r8
              break;
 800732c:	e750      	b.n	80071d0 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800732e:	4629      	mov	r1, r5
 8007330:	f7ff fcff 	bl	8006d32 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007334:	4644      	mov	r4, r8
                break;
 8007336:	e74b      	b.n	80071d0 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007338:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 800733c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8007340:	00b9      	lsls	r1, r7, #2
 8007342:	3110      	adds	r1, #16
 8007344:	4431      	add	r1, r6
 8007346:	3104      	adds	r1, #4
 8007348:	e7e9      	b.n	800731e <USBD_StdEPReq+0x170>
              if ((ep_addr & 0x80U) == 0x80U)
 800734a:	b25b      	sxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	db1f      	blt.n	8007390 <USBD_StdEPReq+0x1e2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007350:	f007 020f 	and.w	r2, r7, #15
 8007354:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007358:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800735c:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 8007360:	b322      	cbz	r2, 80073ac <USBD_StdEPReq+0x1fe>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007362:	2b00      	cmp	r3, #0
 8007364:	db27      	blt.n	80073b6 <USBD_StdEPReq+0x208>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007366:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800736a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800736e:	009c      	lsls	r4, r3, #2
 8007370:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8007374:	4434      	add	r4, r6
 8007376:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007378:	b10f      	cbz	r7, 800737e <USBD_StdEPReq+0x1d0>
 800737a:	2f80      	cmp	r7, #128	@ 0x80
 800737c:	d124      	bne.n	80073c8 <USBD_StdEPReq+0x21a>
                pep->status = 0x0000U;
 800737e:	2300      	movs	r3, #0
 8007380:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007382:	2202      	movs	r2, #2
 8007384:	4621      	mov	r1, r4
 8007386:	4630      	mov	r0, r6
 8007388:	f000 f8ea 	bl	8007560 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800738c:	4644      	mov	r4, r8
              break;
 800738e:	e71f      	b.n	80071d0 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007390:	f007 020f 	and.w	r2, r7, #15
 8007394:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007398:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800739c:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800739e:	2a00      	cmp	r2, #0
 80073a0:	d1df      	bne.n	8007362 <USBD_StdEPReq+0x1b4>
                  USBD_CtlError(pdev, req);
 80073a2:	4629      	mov	r1, r5
 80073a4:	f7ff fcc5 	bl	8006d32 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80073a8:	4644      	mov	r4, r8
                  break;
 80073aa:	e711      	b.n	80071d0 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 80073ac:	4629      	mov	r1, r5
 80073ae:	f7ff fcc0 	bl	8006d32 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80073b2:	4644      	mov	r4, r8
                  break;
 80073b4:	e70c      	b.n	80071d0 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073b6:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 80073ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80073be:	009c      	lsls	r4, r3, #2
 80073c0:	3410      	adds	r4, #16
 80073c2:	4434      	add	r4, r6
 80073c4:	3404      	adds	r4, #4
 80073c6:	e7d7      	b.n	8007378 <USBD_StdEPReq+0x1ca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073c8:	4639      	mov	r1, r7
 80073ca:	4630      	mov	r0, r6
 80073cc:	f7ff fa1c 	bl	8006808 <USBD_LL_IsStallEP>
 80073d0:	b110      	cbz	r0, 80073d8 <USBD_StdEPReq+0x22a>
                pep->status = 0x0001U;
 80073d2:	2301      	movs	r3, #1
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	e7d4      	b.n	8007382 <USBD_StdEPReq+0x1d4>
                pep->status = 0x0000U;
 80073d8:	2300      	movs	r3, #0
 80073da:	6023      	str	r3, [r4, #0]
 80073dc:	e7d1      	b.n	8007382 <USBD_StdEPReq+0x1d4>
  USBD_StatusTypeDef ret = USBD_OK;
 80073de:	2400      	movs	r4, #0
 80073e0:	e6f6      	b.n	80071d0 <USBD_StdEPReq+0x22>
 80073e2:	4604      	mov	r4, r0
 80073e4:	e6f4      	b.n	80071d0 <USBD_StdEPReq+0x22>

080073e6 <USBD_GetString>:
  if (desc == NULL)
 80073e6:	b300      	cbz	r0, 800742a <USBD_GetString+0x44>
{
 80073e8:	b570      	push	{r4, r5, r6, lr}
 80073ea:	460d      	mov	r5, r1
 80073ec:	4616      	mov	r6, r2
 80073ee:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80073f0:	f7ff fc81 	bl	8006cf6 <USBD_GetLen>
 80073f4:	3001      	adds	r0, #1
 80073f6:	0043      	lsls	r3, r0, #1
 80073f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073fc:	d806      	bhi.n	800740c <USBD_GetString+0x26>
 80073fe:	b29b      	uxth	r3, r3
 8007400:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8007402:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007404:	2303      	movs	r3, #3
 8007406:	706b      	strb	r3, [r5, #1]
  idx++;
 8007408:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800740a:	e00a      	b.n	8007422 <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800740c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007410:	e7f6      	b.n	8007400 <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 8007412:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8007414:	3401      	adds	r4, #1
    idx++;
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800741a:	2100      	movs	r1, #0
 800741c:	54a9      	strb	r1, [r5, r2]
    idx++;
 800741e:	3302      	adds	r3, #2
 8007420:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8007422:	7822      	ldrb	r2, [r4, #0]
 8007424:	2a00      	cmp	r2, #0
 8007426:	d1f4      	bne.n	8007412 <USBD_GetString+0x2c>
}
 8007428:	bd70      	pop	{r4, r5, r6, pc}
 800742a:	4770      	bx	lr

0800742c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800742c:	2312      	movs	r3, #18
 800742e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8007430:	4800      	ldr	r0, [pc, #0]	@ (8007434 <USBD_FS_DeviceDescriptor+0x8>)
 8007432:	4770      	bx	lr
 8007434:	200000cc 	.word	0x200000cc

08007438 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007438:	2304      	movs	r3, #4
 800743a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800743c:	4800      	ldr	r0, [pc, #0]	@ (8007440 <USBD_FS_LangIDStrDescriptor+0x8>)
 800743e:	4770      	bx	lr
 8007440:	200000c8 	.word	0x200000c8

08007444 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8007444:	2300      	movs	r3, #0
 8007446:	4293      	cmp	r3, r2
 8007448:	d21e      	bcs.n	8007488 <IntToUnicode+0x44>
{
 800744a:	b500      	push	{lr}
 800744c:	e010      	b.n	8007470 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800744e:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 8007452:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8007456:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8007458:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800745c:	f10c 0c01 	add.w	ip, ip, #1
 8007460:	f04f 0e00 	mov.w	lr, #0
 8007464:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8007468:	3301      	adds	r3, #1
 800746a:	b2db      	uxtb	r3, r3
 800746c:	4293      	cmp	r3, r2
 800746e:	d209      	bcs.n	8007484 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8007470:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8007474:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8007478:	d2e9      	bcs.n	800744e <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800747a:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 800747e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8007482:	e7e8      	b.n	8007456 <IntToUnicode+0x12>
  }
}
 8007484:	f85d fb04 	ldr.w	pc, [sp], #4
 8007488:	4770      	bx	lr
	...

0800748c <Get_SerialNum>:
{
 800748c:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800748e:	4b0b      	ldr	r3, [pc, #44]	@ (80074bc <Get_SerialNum+0x30>)
 8007490:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007494:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007498:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 800749c:	18c0      	adds	r0, r0, r3
 800749e:	d100      	bne.n	80074a2 <Get_SerialNum+0x16>
}
 80074a0:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074a2:	4d07      	ldr	r5, [pc, #28]	@ (80074c0 <Get_SerialNum+0x34>)
 80074a4:	2208      	movs	r2, #8
 80074a6:	4629      	mov	r1, r5
 80074a8:	f7ff ffcc 	bl	8007444 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80074ac:	2204      	movs	r2, #4
 80074ae:	f105 0110 	add.w	r1, r5, #16
 80074b2:	4620      	mov	r0, r4
 80074b4:	f7ff ffc6 	bl	8007444 <IntToUnicode>
}
 80074b8:	e7f2      	b.n	80074a0 <Get_SerialNum+0x14>
 80074ba:	bf00      	nop
 80074bc:	1fff7000 	.word	0x1fff7000
 80074c0:	200000ae 	.word	0x200000ae

080074c4 <USBD_FS_SerialStrDescriptor>:
{
 80074c4:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80074c6:	231a      	movs	r3, #26
 80074c8:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 80074ca:	f7ff ffdf 	bl	800748c <Get_SerialNum>
}
 80074ce:	4801      	ldr	r0, [pc, #4]	@ (80074d4 <USBD_FS_SerialStrDescriptor+0x10>)
 80074d0:	bd08      	pop	{r3, pc}
 80074d2:	bf00      	nop
 80074d4:	200000ac 	.word	0x200000ac

080074d8 <USBD_FS_ProductStrDescriptor>:
{
 80074d8:	b508      	push	{r3, lr}
 80074da:	460a      	mov	r2, r1
  if(speed == 0)
 80074dc:	b928      	cbnz	r0, 80074ea <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80074de:	4905      	ldr	r1, [pc, #20]	@ (80074f4 <USBD_FS_ProductStrDescriptor+0x1c>)
 80074e0:	4805      	ldr	r0, [pc, #20]	@ (80074f8 <USBD_FS_ProductStrDescriptor+0x20>)
 80074e2:	f7ff ff80 	bl	80073e6 <USBD_GetString>
}
 80074e6:	4803      	ldr	r0, [pc, #12]	@ (80074f4 <USBD_FS_ProductStrDescriptor+0x1c>)
 80074e8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80074ea:	4902      	ldr	r1, [pc, #8]	@ (80074f4 <USBD_FS_ProductStrDescriptor+0x1c>)
 80074ec:	4802      	ldr	r0, [pc, #8]	@ (80074f8 <USBD_FS_ProductStrDescriptor+0x20>)
 80074ee:	f7ff ff7a 	bl	80073e6 <USBD_GetString>
 80074f2:	e7f8      	b.n	80074e6 <USBD_FS_ProductStrDescriptor+0xe>
 80074f4:	20005f74 	.word	0x20005f74
 80074f8:	0800846c 	.word	0x0800846c

080074fc <USBD_FS_ManufacturerStrDescriptor>:
{
 80074fc:	b510      	push	{r4, lr}
 80074fe:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007500:	4c03      	ldr	r4, [pc, #12]	@ (8007510 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8007502:	4621      	mov	r1, r4
 8007504:	4803      	ldr	r0, [pc, #12]	@ (8007514 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007506:	f7ff ff6e 	bl	80073e6 <USBD_GetString>
}
 800750a:	4620      	mov	r0, r4
 800750c:	bd10      	pop	{r4, pc}
 800750e:	bf00      	nop
 8007510:	20005f74 	.word	0x20005f74
 8007514:	08008488 	.word	0x08008488

08007518 <USBD_FS_ConfigStrDescriptor>:
{
 8007518:	b508      	push	{r3, lr}
 800751a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800751c:	b928      	cbnz	r0, 800752a <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800751e:	4905      	ldr	r1, [pc, #20]	@ (8007534 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8007520:	4805      	ldr	r0, [pc, #20]	@ (8007538 <USBD_FS_ConfigStrDescriptor+0x20>)
 8007522:	f7ff ff60 	bl	80073e6 <USBD_GetString>
}
 8007526:	4803      	ldr	r0, [pc, #12]	@ (8007534 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8007528:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800752a:	4902      	ldr	r1, [pc, #8]	@ (8007534 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800752c:	4802      	ldr	r0, [pc, #8]	@ (8007538 <USBD_FS_ConfigStrDescriptor+0x20>)
 800752e:	f7ff ff5a 	bl	80073e6 <USBD_GetString>
 8007532:	e7f8      	b.n	8007526 <USBD_FS_ConfigStrDescriptor+0xe>
 8007534:	20005f74 	.word	0x20005f74
 8007538:	0800849c 	.word	0x0800849c

0800753c <USBD_FS_InterfaceStrDescriptor>:
{
 800753c:	b508      	push	{r3, lr}
 800753e:	460a      	mov	r2, r1
  if(speed == 0)
 8007540:	b928      	cbnz	r0, 800754e <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007542:	4905      	ldr	r1, [pc, #20]	@ (8007558 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8007544:	4805      	ldr	r0, [pc, #20]	@ (800755c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8007546:	f7ff ff4e 	bl	80073e6 <USBD_GetString>
}
 800754a:	4803      	ldr	r0, [pc, #12]	@ (8007558 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800754c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800754e:	4902      	ldr	r1, [pc, #8]	@ (8007558 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8007550:	4802      	ldr	r0, [pc, #8]	@ (800755c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8007552:	f7ff ff48 	bl	80073e6 <USBD_GetString>
 8007556:	e7f8      	b.n	800754a <USBD_FS_InterfaceStrDescriptor+0xe>
 8007558:	20005f74 	.word	0x20005f74
 800755c:	080084a8 	.word	0x080084a8

08007560 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007560:	b508      	push	{r3, lr}
 8007562:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007564:	2202      	movs	r2, #2
 8007566:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800756a:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800756c:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800756e:	460a      	mov	r2, r1
 8007570:	2100      	movs	r1, #0
 8007572:	f7ff f9a7 	bl	80068c4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007576:	2000      	movs	r0, #0
 8007578:	bd08      	pop	{r3, pc}

0800757a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800757a:	b508      	push	{r3, lr}
 800757c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800757e:	460a      	mov	r2, r1
 8007580:	2100      	movs	r1, #0
 8007582:	f7ff f99f 	bl	80068c4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007586:	2000      	movs	r0, #0
 8007588:	bd08      	pop	{r3, pc}

0800758a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800758a:	b508      	push	{r3, lr}
 800758c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800758e:	2203      	movs	r2, #3
 8007590:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007594:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007598:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800759c:	460a      	mov	r2, r1
 800759e:	2100      	movs	r1, #0
 80075a0:	f7ff f998 	bl	80068d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80075a4:	2000      	movs	r0, #0
 80075a6:	bd08      	pop	{r3, pc}

080075a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80075a8:	b508      	push	{r3, lr}
 80075aa:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075ac:	460a      	mov	r2, r1
 80075ae:	2100      	movs	r1, #0
 80075b0:	f7ff f990 	bl	80068d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80075b4:	2000      	movs	r0, #0
 80075b6:	bd08      	pop	{r3, pc}

080075b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075b8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075ba:	2204      	movs	r2, #4
 80075bc:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075c0:	2300      	movs	r3, #0
 80075c2:	461a      	mov	r2, r3
 80075c4:	4619      	mov	r1, r3
 80075c6:	f7ff f97d 	bl	80068c4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80075ca:	2000      	movs	r0, #0
 80075cc:	bd08      	pop	{r3, pc}

080075ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075ce:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075d0:	2205      	movs	r2, #5
 80075d2:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075d6:	2300      	movs	r3, #0
 80075d8:	461a      	mov	r2, r3
 80075da:	4619      	mov	r1, r3
 80075dc:	f7ff f97a 	bl	80068d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80075e0:	2000      	movs	r0, #0
 80075e2:	bd08      	pop	{r3, pc}

080075e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80075e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800761c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80075e8:	f7fd fbf2 	bl	8004dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80075ec:	480c      	ldr	r0, [pc, #48]	@ (8007620 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80075ee:	490d      	ldr	r1, [pc, #52]	@ (8007624 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80075f0:	4a0d      	ldr	r2, [pc, #52]	@ (8007628 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80075f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80075f4:	e002      	b.n	80075fc <LoopCopyDataInit>

080075f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80075f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80075f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80075fa:	3304      	adds	r3, #4

080075fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80075fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80075fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007600:	d3f9      	bcc.n	80075f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007602:	4a0a      	ldr	r2, [pc, #40]	@ (800762c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007604:	4c0a      	ldr	r4, [pc, #40]	@ (8007630 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007608:	e001      	b.n	800760e <LoopFillZerobss>

0800760a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800760a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800760c:	3204      	adds	r2, #4

0800760e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800760e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007610:	d3fb      	bcc.n	800760a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007612:	f000 f855 	bl	80076c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007616:	f7f9 fcc7 	bl	8000fa8 <main>
  bx  lr    
 800761a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800761c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8007620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007624:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8007628:	08008540 	.word	0x08008540
  ldr r2, =_sbss
 800762c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8007630:	200062bc 	.word	0x200062bc

08007634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007634:	e7fe      	b.n	8007634 <ADC_IRQHandler>
	...

08007638 <sniprintf>:
 8007638:	b40c      	push	{r2, r3}
 800763a:	b530      	push	{r4, r5, lr}
 800763c:	4b18      	ldr	r3, [pc, #96]	@ (80076a0 <sniprintf+0x68>)
 800763e:	1e0c      	subs	r4, r1, #0
 8007640:	681d      	ldr	r5, [r3, #0]
 8007642:	b09d      	sub	sp, #116	@ 0x74
 8007644:	da08      	bge.n	8007658 <sniprintf+0x20>
 8007646:	238b      	movs	r3, #139	@ 0x8b
 8007648:	602b      	str	r3, [r5, #0]
 800764a:	f04f 30ff 	mov.w	r0, #4294967295
 800764e:	b01d      	add	sp, #116	@ 0x74
 8007650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007654:	b002      	add	sp, #8
 8007656:	4770      	bx	lr
 8007658:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800765c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007660:	f04f 0300 	mov.w	r3, #0
 8007664:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007666:	bf14      	ite	ne
 8007668:	f104 33ff 	addne.w	r3, r4, #4294967295
 800766c:	4623      	moveq	r3, r4
 800766e:	9304      	str	r3, [sp, #16]
 8007670:	9307      	str	r3, [sp, #28]
 8007672:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007676:	9002      	str	r0, [sp, #8]
 8007678:	9006      	str	r0, [sp, #24]
 800767a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800767e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007680:	ab21      	add	r3, sp, #132	@ 0x84
 8007682:	a902      	add	r1, sp, #8
 8007684:	4628      	mov	r0, r5
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	f000 f9a6 	bl	80079d8 <_svfiprintf_r>
 800768c:	1c43      	adds	r3, r0, #1
 800768e:	bfbc      	itt	lt
 8007690:	238b      	movlt	r3, #139	@ 0x8b
 8007692:	602b      	strlt	r3, [r5, #0]
 8007694:	2c00      	cmp	r4, #0
 8007696:	d0da      	beq.n	800764e <sniprintf+0x16>
 8007698:	9b02      	ldr	r3, [sp, #8]
 800769a:	2200      	movs	r2, #0
 800769c:	701a      	strb	r2, [r3, #0]
 800769e:	e7d6      	b.n	800764e <sniprintf+0x16>
 80076a0:	200000fc 	.word	0x200000fc

080076a4 <memset>:
 80076a4:	4402      	add	r2, r0
 80076a6:	4603      	mov	r3, r0
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d100      	bne.n	80076ae <memset+0xa>
 80076ac:	4770      	bx	lr
 80076ae:	f803 1b01 	strb.w	r1, [r3], #1
 80076b2:	e7f9      	b.n	80076a8 <memset+0x4>

080076b4 <__errno>:
 80076b4:	4b01      	ldr	r3, [pc, #4]	@ (80076bc <__errno+0x8>)
 80076b6:	6818      	ldr	r0, [r3, #0]
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	200000fc 	.word	0x200000fc

080076c0 <__libc_init_array>:
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	4b0d      	ldr	r3, [pc, #52]	@ (80076f8 <__libc_init_array+0x38>)
 80076c4:	4d0d      	ldr	r5, [pc, #52]	@ (80076fc <__libc_init_array+0x3c>)
 80076c6:	1b5b      	subs	r3, r3, r5
 80076c8:	109c      	asrs	r4, r3, #2
 80076ca:	2600      	movs	r6, #0
 80076cc:	42a6      	cmp	r6, r4
 80076ce:	d109      	bne.n	80076e4 <__libc_init_array+0x24>
 80076d0:	f000 fe32 	bl	8008338 <_init>
 80076d4:	4d0a      	ldr	r5, [pc, #40]	@ (8007700 <__libc_init_array+0x40>)
 80076d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007704 <__libc_init_array+0x44>)
 80076d8:	1b5b      	subs	r3, r3, r5
 80076da:	109c      	asrs	r4, r3, #2
 80076dc:	2600      	movs	r6, #0
 80076de:	42a6      	cmp	r6, r4
 80076e0:	d105      	bne.n	80076ee <__libc_init_array+0x2e>
 80076e2:	bd70      	pop	{r4, r5, r6, pc}
 80076e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e8:	4798      	blx	r3
 80076ea:	3601      	adds	r6, #1
 80076ec:	e7ee      	b.n	80076cc <__libc_init_array+0xc>
 80076ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f2:	4798      	blx	r3
 80076f4:	3601      	adds	r6, #1
 80076f6:	e7f2      	b.n	80076de <__libc_init_array+0x1e>
 80076f8:	08008538 	.word	0x08008538
 80076fc:	08008538 	.word	0x08008538
 8007700:	08008538 	.word	0x08008538
 8007704:	0800853c 	.word	0x0800853c

08007708 <__retarget_lock_acquire_recursive>:
 8007708:	4770      	bx	lr

0800770a <__retarget_lock_release_recursive>:
 800770a:	4770      	bx	lr

0800770c <memcpy>:
 800770c:	440a      	add	r2, r1
 800770e:	4291      	cmp	r1, r2
 8007710:	f100 33ff 	add.w	r3, r0, #4294967295
 8007714:	d100      	bne.n	8007718 <memcpy+0xc>
 8007716:	4770      	bx	lr
 8007718:	b510      	push	{r4, lr}
 800771a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800771e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007722:	4291      	cmp	r1, r2
 8007724:	d1f9      	bne.n	800771a <memcpy+0xe>
 8007726:	bd10      	pop	{r4, pc}

08007728 <_free_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	4605      	mov	r5, r0
 800772c:	2900      	cmp	r1, #0
 800772e:	d041      	beq.n	80077b4 <_free_r+0x8c>
 8007730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007734:	1f0c      	subs	r4, r1, #4
 8007736:	2b00      	cmp	r3, #0
 8007738:	bfb8      	it	lt
 800773a:	18e4      	addlt	r4, r4, r3
 800773c:	f000 f8e0 	bl	8007900 <__malloc_lock>
 8007740:	4a1d      	ldr	r2, [pc, #116]	@ (80077b8 <_free_r+0x90>)
 8007742:	6813      	ldr	r3, [r2, #0]
 8007744:	b933      	cbnz	r3, 8007754 <_free_r+0x2c>
 8007746:	6063      	str	r3, [r4, #4]
 8007748:	6014      	str	r4, [r2, #0]
 800774a:	4628      	mov	r0, r5
 800774c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007750:	f000 b8dc 	b.w	800790c <__malloc_unlock>
 8007754:	42a3      	cmp	r3, r4
 8007756:	d908      	bls.n	800776a <_free_r+0x42>
 8007758:	6820      	ldr	r0, [r4, #0]
 800775a:	1821      	adds	r1, r4, r0
 800775c:	428b      	cmp	r3, r1
 800775e:	bf01      	itttt	eq
 8007760:	6819      	ldreq	r1, [r3, #0]
 8007762:	685b      	ldreq	r3, [r3, #4]
 8007764:	1809      	addeq	r1, r1, r0
 8007766:	6021      	streq	r1, [r4, #0]
 8007768:	e7ed      	b.n	8007746 <_free_r+0x1e>
 800776a:	461a      	mov	r2, r3
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	b10b      	cbz	r3, 8007774 <_free_r+0x4c>
 8007770:	42a3      	cmp	r3, r4
 8007772:	d9fa      	bls.n	800776a <_free_r+0x42>
 8007774:	6811      	ldr	r1, [r2, #0]
 8007776:	1850      	adds	r0, r2, r1
 8007778:	42a0      	cmp	r0, r4
 800777a:	d10b      	bne.n	8007794 <_free_r+0x6c>
 800777c:	6820      	ldr	r0, [r4, #0]
 800777e:	4401      	add	r1, r0
 8007780:	1850      	adds	r0, r2, r1
 8007782:	4283      	cmp	r3, r0
 8007784:	6011      	str	r1, [r2, #0]
 8007786:	d1e0      	bne.n	800774a <_free_r+0x22>
 8007788:	6818      	ldr	r0, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	6053      	str	r3, [r2, #4]
 800778e:	4408      	add	r0, r1
 8007790:	6010      	str	r0, [r2, #0]
 8007792:	e7da      	b.n	800774a <_free_r+0x22>
 8007794:	d902      	bls.n	800779c <_free_r+0x74>
 8007796:	230c      	movs	r3, #12
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	e7d6      	b.n	800774a <_free_r+0x22>
 800779c:	6820      	ldr	r0, [r4, #0]
 800779e:	1821      	adds	r1, r4, r0
 80077a0:	428b      	cmp	r3, r1
 80077a2:	bf04      	itt	eq
 80077a4:	6819      	ldreq	r1, [r3, #0]
 80077a6:	685b      	ldreq	r3, [r3, #4]
 80077a8:	6063      	str	r3, [r4, #4]
 80077aa:	bf04      	itt	eq
 80077ac:	1809      	addeq	r1, r1, r0
 80077ae:	6021      	streq	r1, [r4, #0]
 80077b0:	6054      	str	r4, [r2, #4]
 80077b2:	e7ca      	b.n	800774a <_free_r+0x22>
 80077b4:	bd38      	pop	{r3, r4, r5, pc}
 80077b6:	bf00      	nop
 80077b8:	200062b8 	.word	0x200062b8

080077bc <sbrk_aligned>:
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	4e0f      	ldr	r6, [pc, #60]	@ (80077fc <sbrk_aligned+0x40>)
 80077c0:	460c      	mov	r4, r1
 80077c2:	6831      	ldr	r1, [r6, #0]
 80077c4:	4605      	mov	r5, r0
 80077c6:	b911      	cbnz	r1, 80077ce <sbrk_aligned+0x12>
 80077c8:	f000 fbaa 	bl	8007f20 <_sbrk_r>
 80077cc:	6030      	str	r0, [r6, #0]
 80077ce:	4621      	mov	r1, r4
 80077d0:	4628      	mov	r0, r5
 80077d2:	f000 fba5 	bl	8007f20 <_sbrk_r>
 80077d6:	1c43      	adds	r3, r0, #1
 80077d8:	d103      	bne.n	80077e2 <sbrk_aligned+0x26>
 80077da:	f04f 34ff 	mov.w	r4, #4294967295
 80077de:	4620      	mov	r0, r4
 80077e0:	bd70      	pop	{r4, r5, r6, pc}
 80077e2:	1cc4      	adds	r4, r0, #3
 80077e4:	f024 0403 	bic.w	r4, r4, #3
 80077e8:	42a0      	cmp	r0, r4
 80077ea:	d0f8      	beq.n	80077de <sbrk_aligned+0x22>
 80077ec:	1a21      	subs	r1, r4, r0
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 fb96 	bl	8007f20 <_sbrk_r>
 80077f4:	3001      	adds	r0, #1
 80077f6:	d1f2      	bne.n	80077de <sbrk_aligned+0x22>
 80077f8:	e7ef      	b.n	80077da <sbrk_aligned+0x1e>
 80077fa:	bf00      	nop
 80077fc:	200062b4 	.word	0x200062b4

08007800 <_malloc_r>:
 8007800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007804:	1ccd      	adds	r5, r1, #3
 8007806:	f025 0503 	bic.w	r5, r5, #3
 800780a:	3508      	adds	r5, #8
 800780c:	2d0c      	cmp	r5, #12
 800780e:	bf38      	it	cc
 8007810:	250c      	movcc	r5, #12
 8007812:	2d00      	cmp	r5, #0
 8007814:	4606      	mov	r6, r0
 8007816:	db01      	blt.n	800781c <_malloc_r+0x1c>
 8007818:	42a9      	cmp	r1, r5
 800781a:	d904      	bls.n	8007826 <_malloc_r+0x26>
 800781c:	230c      	movs	r3, #12
 800781e:	6033      	str	r3, [r6, #0]
 8007820:	2000      	movs	r0, #0
 8007822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078fc <_malloc_r+0xfc>
 800782a:	f000 f869 	bl	8007900 <__malloc_lock>
 800782e:	f8d8 3000 	ldr.w	r3, [r8]
 8007832:	461c      	mov	r4, r3
 8007834:	bb44      	cbnz	r4, 8007888 <_malloc_r+0x88>
 8007836:	4629      	mov	r1, r5
 8007838:	4630      	mov	r0, r6
 800783a:	f7ff ffbf 	bl	80077bc <sbrk_aligned>
 800783e:	1c43      	adds	r3, r0, #1
 8007840:	4604      	mov	r4, r0
 8007842:	d158      	bne.n	80078f6 <_malloc_r+0xf6>
 8007844:	f8d8 4000 	ldr.w	r4, [r8]
 8007848:	4627      	mov	r7, r4
 800784a:	2f00      	cmp	r7, #0
 800784c:	d143      	bne.n	80078d6 <_malloc_r+0xd6>
 800784e:	2c00      	cmp	r4, #0
 8007850:	d04b      	beq.n	80078ea <_malloc_r+0xea>
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	4639      	mov	r1, r7
 8007856:	4630      	mov	r0, r6
 8007858:	eb04 0903 	add.w	r9, r4, r3
 800785c:	f000 fb60 	bl	8007f20 <_sbrk_r>
 8007860:	4581      	cmp	r9, r0
 8007862:	d142      	bne.n	80078ea <_malloc_r+0xea>
 8007864:	6821      	ldr	r1, [r4, #0]
 8007866:	1a6d      	subs	r5, r5, r1
 8007868:	4629      	mov	r1, r5
 800786a:	4630      	mov	r0, r6
 800786c:	f7ff ffa6 	bl	80077bc <sbrk_aligned>
 8007870:	3001      	adds	r0, #1
 8007872:	d03a      	beq.n	80078ea <_malloc_r+0xea>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	442b      	add	r3, r5
 8007878:	6023      	str	r3, [r4, #0]
 800787a:	f8d8 3000 	ldr.w	r3, [r8]
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	bb62      	cbnz	r2, 80078dc <_malloc_r+0xdc>
 8007882:	f8c8 7000 	str.w	r7, [r8]
 8007886:	e00f      	b.n	80078a8 <_malloc_r+0xa8>
 8007888:	6822      	ldr	r2, [r4, #0]
 800788a:	1b52      	subs	r2, r2, r5
 800788c:	d420      	bmi.n	80078d0 <_malloc_r+0xd0>
 800788e:	2a0b      	cmp	r2, #11
 8007890:	d917      	bls.n	80078c2 <_malloc_r+0xc2>
 8007892:	1961      	adds	r1, r4, r5
 8007894:	42a3      	cmp	r3, r4
 8007896:	6025      	str	r5, [r4, #0]
 8007898:	bf18      	it	ne
 800789a:	6059      	strne	r1, [r3, #4]
 800789c:	6863      	ldr	r3, [r4, #4]
 800789e:	bf08      	it	eq
 80078a0:	f8c8 1000 	streq.w	r1, [r8]
 80078a4:	5162      	str	r2, [r4, r5]
 80078a6:	604b      	str	r3, [r1, #4]
 80078a8:	4630      	mov	r0, r6
 80078aa:	f000 f82f 	bl	800790c <__malloc_unlock>
 80078ae:	f104 000b 	add.w	r0, r4, #11
 80078b2:	1d23      	adds	r3, r4, #4
 80078b4:	f020 0007 	bic.w	r0, r0, #7
 80078b8:	1ac2      	subs	r2, r0, r3
 80078ba:	bf1c      	itt	ne
 80078bc:	1a1b      	subne	r3, r3, r0
 80078be:	50a3      	strne	r3, [r4, r2]
 80078c0:	e7af      	b.n	8007822 <_malloc_r+0x22>
 80078c2:	6862      	ldr	r2, [r4, #4]
 80078c4:	42a3      	cmp	r3, r4
 80078c6:	bf0c      	ite	eq
 80078c8:	f8c8 2000 	streq.w	r2, [r8]
 80078cc:	605a      	strne	r2, [r3, #4]
 80078ce:	e7eb      	b.n	80078a8 <_malloc_r+0xa8>
 80078d0:	4623      	mov	r3, r4
 80078d2:	6864      	ldr	r4, [r4, #4]
 80078d4:	e7ae      	b.n	8007834 <_malloc_r+0x34>
 80078d6:	463c      	mov	r4, r7
 80078d8:	687f      	ldr	r7, [r7, #4]
 80078da:	e7b6      	b.n	800784a <_malloc_r+0x4a>
 80078dc:	461a      	mov	r2, r3
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	42a3      	cmp	r3, r4
 80078e2:	d1fb      	bne.n	80078dc <_malloc_r+0xdc>
 80078e4:	2300      	movs	r3, #0
 80078e6:	6053      	str	r3, [r2, #4]
 80078e8:	e7de      	b.n	80078a8 <_malloc_r+0xa8>
 80078ea:	230c      	movs	r3, #12
 80078ec:	6033      	str	r3, [r6, #0]
 80078ee:	4630      	mov	r0, r6
 80078f0:	f000 f80c 	bl	800790c <__malloc_unlock>
 80078f4:	e794      	b.n	8007820 <_malloc_r+0x20>
 80078f6:	6005      	str	r5, [r0, #0]
 80078f8:	e7d6      	b.n	80078a8 <_malloc_r+0xa8>
 80078fa:	bf00      	nop
 80078fc:	200062b8 	.word	0x200062b8

08007900 <__malloc_lock>:
 8007900:	4801      	ldr	r0, [pc, #4]	@ (8007908 <__malloc_lock+0x8>)
 8007902:	f7ff bf01 	b.w	8007708 <__retarget_lock_acquire_recursive>
 8007906:	bf00      	nop
 8007908:	200062b0 	.word	0x200062b0

0800790c <__malloc_unlock>:
 800790c:	4801      	ldr	r0, [pc, #4]	@ (8007914 <__malloc_unlock+0x8>)
 800790e:	f7ff befc 	b.w	800770a <__retarget_lock_release_recursive>
 8007912:	bf00      	nop
 8007914:	200062b0 	.word	0x200062b0

08007918 <__ssputs_r>:
 8007918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800791c:	688e      	ldr	r6, [r1, #8]
 800791e:	461f      	mov	r7, r3
 8007920:	42be      	cmp	r6, r7
 8007922:	4682      	mov	sl, r0
 8007924:	460c      	mov	r4, r1
 8007926:	4690      	mov	r8, r2
 8007928:	4633      	mov	r3, r6
 800792a:	d853      	bhi.n	80079d4 <__ssputs_r+0xbc>
 800792c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8007930:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 8007934:	d02b      	beq.n	800798e <__ssputs_r+0x76>
 8007936:	6965      	ldr	r5, [r4, #20]
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	6909      	ldr	r1, [r1, #16]
 800793c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007940:	eba3 0901 	sub.w	r9, r3, r1
 8007944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007948:	1c7b      	adds	r3, r7, #1
 800794a:	106d      	asrs	r5, r5, #1
 800794c:	444b      	add	r3, r9
 800794e:	42ab      	cmp	r3, r5
 8007950:	462a      	mov	r2, r5
 8007952:	bf84      	itt	hi
 8007954:	461d      	movhi	r5, r3
 8007956:	462a      	movhi	r2, r5
 8007958:	0543      	lsls	r3, r0, #21
 800795a:	d527      	bpl.n	80079ac <__ssputs_r+0x94>
 800795c:	4611      	mov	r1, r2
 800795e:	4650      	mov	r0, sl
 8007960:	f7ff ff4e 	bl	8007800 <_malloc_r>
 8007964:	4606      	mov	r6, r0
 8007966:	b358      	cbz	r0, 80079c0 <__ssputs_r+0xa8>
 8007968:	6921      	ldr	r1, [r4, #16]
 800796a:	464a      	mov	r2, r9
 800796c:	f7ff fece 	bl	800770c <memcpy>
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800797a:	81a3      	strh	r3, [r4, #12]
 800797c:	6126      	str	r6, [r4, #16]
 800797e:	6165      	str	r5, [r4, #20]
 8007980:	444e      	add	r6, r9
 8007982:	eba5 0509 	sub.w	r5, r5, r9
 8007986:	6026      	str	r6, [r4, #0]
 8007988:	60a5      	str	r5, [r4, #8]
 800798a:	463e      	mov	r6, r7
 800798c:	463b      	mov	r3, r7
 800798e:	461f      	mov	r7, r3
 8007990:	6820      	ldr	r0, [r4, #0]
 8007992:	463a      	mov	r2, r7
 8007994:	4641      	mov	r1, r8
 8007996:	f000 faa9 	bl	8007eec <memmove>
 800799a:	68a3      	ldr	r3, [r4, #8]
 800799c:	1b9b      	subs	r3, r3, r6
 800799e:	60a3      	str	r3, [r4, #8]
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	443b      	add	r3, r7
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	2000      	movs	r0, #0
 80079a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ac:	4650      	mov	r0, sl
 80079ae:	f000 fac7 	bl	8007f40 <_realloc_r>
 80079b2:	4606      	mov	r6, r0
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d1e1      	bne.n	800797c <__ssputs_r+0x64>
 80079b8:	6921      	ldr	r1, [r4, #16]
 80079ba:	4650      	mov	r0, sl
 80079bc:	f7ff feb4 	bl	8007728 <_free_r>
 80079c0:	230c      	movs	r3, #12
 80079c2:	f8ca 3000 	str.w	r3, [sl]
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	f04f 30ff 	mov.w	r0, #4294967295
 80079d2:	e7e9      	b.n	80079a8 <__ssputs_r+0x90>
 80079d4:	463e      	mov	r6, r7
 80079d6:	e7db      	b.n	8007990 <__ssputs_r+0x78>

080079d8 <_svfiprintf_r>:
 80079d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	4698      	mov	r8, r3
 80079de:	898b      	ldrh	r3, [r1, #12]
 80079e0:	061b      	lsls	r3, r3, #24
 80079e2:	b09d      	sub	sp, #116	@ 0x74
 80079e4:	4607      	mov	r7, r0
 80079e6:	460d      	mov	r5, r1
 80079e8:	4614      	mov	r4, r2
 80079ea:	d510      	bpl.n	8007a0e <_svfiprintf_r+0x36>
 80079ec:	690b      	ldr	r3, [r1, #16]
 80079ee:	b973      	cbnz	r3, 8007a0e <_svfiprintf_r+0x36>
 80079f0:	2140      	movs	r1, #64	@ 0x40
 80079f2:	f7ff ff05 	bl	8007800 <_malloc_r>
 80079f6:	6028      	str	r0, [r5, #0]
 80079f8:	6128      	str	r0, [r5, #16]
 80079fa:	b930      	cbnz	r0, 8007a0a <_svfiprintf_r+0x32>
 80079fc:	230c      	movs	r3, #12
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	f04f 30ff 	mov.w	r0, #4294967295
 8007a04:	b01d      	add	sp, #116	@ 0x74
 8007a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0a:	2340      	movs	r3, #64	@ 0x40
 8007a0c:	616b      	str	r3, [r5, #20]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a12:	2320      	movs	r3, #32
 8007a14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a1c:	2330      	movs	r3, #48	@ 0x30
 8007a1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007bbc <_svfiprintf_r+0x1e4>
 8007a22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a26:	f04f 0901 	mov.w	r9, #1
 8007a2a:	4623      	mov	r3, r4
 8007a2c:	469a      	mov	sl, r3
 8007a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a32:	b10a      	cbz	r2, 8007a38 <_svfiprintf_r+0x60>
 8007a34:	2a25      	cmp	r2, #37	@ 0x25
 8007a36:	d1f9      	bne.n	8007a2c <_svfiprintf_r+0x54>
 8007a38:	ebba 0b04 	subs.w	fp, sl, r4
 8007a3c:	d00b      	beq.n	8007a56 <_svfiprintf_r+0x7e>
 8007a3e:	465b      	mov	r3, fp
 8007a40:	4622      	mov	r2, r4
 8007a42:	4629      	mov	r1, r5
 8007a44:	4638      	mov	r0, r7
 8007a46:	f7ff ff67 	bl	8007918 <__ssputs_r>
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	f000 80a7 	beq.w	8007b9e <_svfiprintf_r+0x1c6>
 8007a50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a52:	445a      	add	r2, fp
 8007a54:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a56:	f89a 3000 	ldrb.w	r3, [sl]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 809f 	beq.w	8007b9e <_svfiprintf_r+0x1c6>
 8007a60:	2300      	movs	r3, #0
 8007a62:	f04f 32ff 	mov.w	r2, #4294967295
 8007a66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a6a:	f10a 0a01 	add.w	sl, sl, #1
 8007a6e:	9304      	str	r3, [sp, #16]
 8007a70:	9307      	str	r3, [sp, #28]
 8007a72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a76:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a78:	4654      	mov	r4, sl
 8007a7a:	2205      	movs	r2, #5
 8007a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a80:	484e      	ldr	r0, [pc, #312]	@ (8007bbc <_svfiprintf_r+0x1e4>)
 8007a82:	f7f8 fb95 	bl	80001b0 <memchr>
 8007a86:	9a04      	ldr	r2, [sp, #16]
 8007a88:	b9d8      	cbnz	r0, 8007ac2 <_svfiprintf_r+0xea>
 8007a8a:	06d0      	lsls	r0, r2, #27
 8007a8c:	bf44      	itt	mi
 8007a8e:	2320      	movmi	r3, #32
 8007a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a94:	0711      	lsls	r1, r2, #28
 8007a96:	bf44      	itt	mi
 8007a98:	232b      	movmi	r3, #43	@ 0x2b
 8007a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007aa4:	d015      	beq.n	8007ad2 <_svfiprintf_r+0xfa>
 8007aa6:	9a07      	ldr	r2, [sp, #28]
 8007aa8:	4654      	mov	r4, sl
 8007aaa:	2000      	movs	r0, #0
 8007aac:	f04f 0c0a 	mov.w	ip, #10
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ab6:	3b30      	subs	r3, #48	@ 0x30
 8007ab8:	2b09      	cmp	r3, #9
 8007aba:	d94b      	bls.n	8007b54 <_svfiprintf_r+0x17c>
 8007abc:	b1b0      	cbz	r0, 8007aec <_svfiprintf_r+0x114>
 8007abe:	9207      	str	r2, [sp, #28]
 8007ac0:	e014      	b.n	8007aec <_svfiprintf_r+0x114>
 8007ac2:	eba0 0308 	sub.w	r3, r0, r8
 8007ac6:	fa09 f303 	lsl.w	r3, r9, r3
 8007aca:	4313      	orrs	r3, r2
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	46a2      	mov	sl, r4
 8007ad0:	e7d2      	b.n	8007a78 <_svfiprintf_r+0xa0>
 8007ad2:	9b03      	ldr	r3, [sp, #12]
 8007ad4:	1d19      	adds	r1, r3, #4
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	9103      	str	r1, [sp, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bfbb      	ittet	lt
 8007ade:	425b      	neglt	r3, r3
 8007ae0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ae4:	9307      	strge	r3, [sp, #28]
 8007ae6:	9307      	strlt	r3, [sp, #28]
 8007ae8:	bfb8      	it	lt
 8007aea:	9204      	strlt	r2, [sp, #16]
 8007aec:	7823      	ldrb	r3, [r4, #0]
 8007aee:	2b2e      	cmp	r3, #46	@ 0x2e
 8007af0:	d10a      	bne.n	8007b08 <_svfiprintf_r+0x130>
 8007af2:	7863      	ldrb	r3, [r4, #1]
 8007af4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007af6:	d132      	bne.n	8007b5e <_svfiprintf_r+0x186>
 8007af8:	9b03      	ldr	r3, [sp, #12]
 8007afa:	1d1a      	adds	r2, r3, #4
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	9203      	str	r2, [sp, #12]
 8007b00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b04:	3402      	adds	r4, #2
 8007b06:	9305      	str	r3, [sp, #20]
 8007b08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007bcc <_svfiprintf_r+0x1f4>
 8007b0c:	7821      	ldrb	r1, [r4, #0]
 8007b0e:	2203      	movs	r2, #3
 8007b10:	4650      	mov	r0, sl
 8007b12:	f7f8 fb4d 	bl	80001b0 <memchr>
 8007b16:	b138      	cbz	r0, 8007b28 <_svfiprintf_r+0x150>
 8007b18:	9b04      	ldr	r3, [sp, #16]
 8007b1a:	eba0 000a 	sub.w	r0, r0, sl
 8007b1e:	2240      	movs	r2, #64	@ 0x40
 8007b20:	4082      	lsls	r2, r0
 8007b22:	4313      	orrs	r3, r2
 8007b24:	3401      	adds	r4, #1
 8007b26:	9304      	str	r3, [sp, #16]
 8007b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b2c:	4824      	ldr	r0, [pc, #144]	@ (8007bc0 <_svfiprintf_r+0x1e8>)
 8007b2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b32:	2206      	movs	r2, #6
 8007b34:	f7f8 fb3c 	bl	80001b0 <memchr>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d036      	beq.n	8007baa <_svfiprintf_r+0x1d2>
 8007b3c:	4b21      	ldr	r3, [pc, #132]	@ (8007bc4 <_svfiprintf_r+0x1ec>)
 8007b3e:	bb1b      	cbnz	r3, 8007b88 <_svfiprintf_r+0x1b0>
 8007b40:	9b03      	ldr	r3, [sp, #12]
 8007b42:	3307      	adds	r3, #7
 8007b44:	f023 0307 	bic.w	r3, r3, #7
 8007b48:	3308      	adds	r3, #8
 8007b4a:	9303      	str	r3, [sp, #12]
 8007b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4e:	4433      	add	r3, r6
 8007b50:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b52:	e76a      	b.n	8007a2a <_svfiprintf_r+0x52>
 8007b54:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b58:	460c      	mov	r4, r1
 8007b5a:	2001      	movs	r0, #1
 8007b5c:	e7a8      	b.n	8007ab0 <_svfiprintf_r+0xd8>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	3401      	adds	r4, #1
 8007b62:	9305      	str	r3, [sp, #20]
 8007b64:	4619      	mov	r1, r3
 8007b66:	f04f 0c0a 	mov.w	ip, #10
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b70:	3a30      	subs	r2, #48	@ 0x30
 8007b72:	2a09      	cmp	r2, #9
 8007b74:	d903      	bls.n	8007b7e <_svfiprintf_r+0x1a6>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0c6      	beq.n	8007b08 <_svfiprintf_r+0x130>
 8007b7a:	9105      	str	r1, [sp, #20]
 8007b7c:	e7c4      	b.n	8007b08 <_svfiprintf_r+0x130>
 8007b7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b82:	4604      	mov	r4, r0
 8007b84:	2301      	movs	r3, #1
 8007b86:	e7f0      	b.n	8007b6a <_svfiprintf_r+0x192>
 8007b88:	ab03      	add	r3, sp, #12
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	462a      	mov	r2, r5
 8007b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007bc8 <_svfiprintf_r+0x1f0>)
 8007b90:	a904      	add	r1, sp, #16
 8007b92:	4638      	mov	r0, r7
 8007b94:	f3af 8000 	nop.w
 8007b98:	1c42      	adds	r2, r0, #1
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	d1d6      	bne.n	8007b4c <_svfiprintf_r+0x174>
 8007b9e:	89ab      	ldrh	r3, [r5, #12]
 8007ba0:	065b      	lsls	r3, r3, #25
 8007ba2:	f53f af2d 	bmi.w	8007a00 <_svfiprintf_r+0x28>
 8007ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ba8:	e72c      	b.n	8007a04 <_svfiprintf_r+0x2c>
 8007baa:	ab03      	add	r3, sp, #12
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	462a      	mov	r2, r5
 8007bb0:	4b05      	ldr	r3, [pc, #20]	@ (8007bc8 <_svfiprintf_r+0x1f0>)
 8007bb2:	a904      	add	r1, sp, #16
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	f000 f879 	bl	8007cac <_printf_i>
 8007bba:	e7ed      	b.n	8007b98 <_svfiprintf_r+0x1c0>
 8007bbc:	080084fc 	.word	0x080084fc
 8007bc0:	08008506 	.word	0x08008506
 8007bc4:	00000000 	.word	0x00000000
 8007bc8:	08007919 	.word	0x08007919
 8007bcc:	08008502 	.word	0x08008502

08007bd0 <_printf_common>:
 8007bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd4:	4616      	mov	r6, r2
 8007bd6:	4698      	mov	r8, r3
 8007bd8:	688a      	ldr	r2, [r1, #8]
 8007bda:	690b      	ldr	r3, [r1, #16]
 8007bdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007be0:	4293      	cmp	r3, r2
 8007be2:	bfb8      	it	lt
 8007be4:	4613      	movlt	r3, r2
 8007be6:	6033      	str	r3, [r6, #0]
 8007be8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bec:	4607      	mov	r7, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	b10a      	cbz	r2, 8007bf6 <_printf_common+0x26>
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	6033      	str	r3, [r6, #0]
 8007bf6:	6823      	ldr	r3, [r4, #0]
 8007bf8:	0699      	lsls	r1, r3, #26
 8007bfa:	bf42      	ittt	mi
 8007bfc:	6833      	ldrmi	r3, [r6, #0]
 8007bfe:	3302      	addmi	r3, #2
 8007c00:	6033      	strmi	r3, [r6, #0]
 8007c02:	6825      	ldr	r5, [r4, #0]
 8007c04:	f015 0506 	ands.w	r5, r5, #6
 8007c08:	d106      	bne.n	8007c18 <_printf_common+0x48>
 8007c0a:	f104 0a19 	add.w	sl, r4, #25
 8007c0e:	68e3      	ldr	r3, [r4, #12]
 8007c10:	6832      	ldr	r2, [r6, #0]
 8007c12:	1a9b      	subs	r3, r3, r2
 8007c14:	42ab      	cmp	r3, r5
 8007c16:	dc26      	bgt.n	8007c66 <_printf_common+0x96>
 8007c18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c1c:	6822      	ldr	r2, [r4, #0]
 8007c1e:	3b00      	subs	r3, #0
 8007c20:	bf18      	it	ne
 8007c22:	2301      	movne	r3, #1
 8007c24:	0692      	lsls	r2, r2, #26
 8007c26:	d42b      	bmi.n	8007c80 <_printf_common+0xb0>
 8007c28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c2c:	4641      	mov	r1, r8
 8007c2e:	4638      	mov	r0, r7
 8007c30:	47c8      	blx	r9
 8007c32:	3001      	adds	r0, #1
 8007c34:	d01e      	beq.n	8007c74 <_printf_common+0xa4>
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	6922      	ldr	r2, [r4, #16]
 8007c3a:	f003 0306 	and.w	r3, r3, #6
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	bf02      	ittt	eq
 8007c42:	68e5      	ldreq	r5, [r4, #12]
 8007c44:	6833      	ldreq	r3, [r6, #0]
 8007c46:	1aed      	subeq	r5, r5, r3
 8007c48:	68a3      	ldr	r3, [r4, #8]
 8007c4a:	bf0c      	ite	eq
 8007c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c50:	2500      	movne	r5, #0
 8007c52:	4293      	cmp	r3, r2
 8007c54:	bfc4      	itt	gt
 8007c56:	1a9b      	subgt	r3, r3, r2
 8007c58:	18ed      	addgt	r5, r5, r3
 8007c5a:	2600      	movs	r6, #0
 8007c5c:	341a      	adds	r4, #26
 8007c5e:	42b5      	cmp	r5, r6
 8007c60:	d11a      	bne.n	8007c98 <_printf_common+0xc8>
 8007c62:	2000      	movs	r0, #0
 8007c64:	e008      	b.n	8007c78 <_printf_common+0xa8>
 8007c66:	2301      	movs	r3, #1
 8007c68:	4652      	mov	r2, sl
 8007c6a:	4641      	mov	r1, r8
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	47c8      	blx	r9
 8007c70:	3001      	adds	r0, #1
 8007c72:	d103      	bne.n	8007c7c <_printf_common+0xac>
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7c:	3501      	adds	r5, #1
 8007c7e:	e7c6      	b.n	8007c0e <_printf_common+0x3e>
 8007c80:	18e1      	adds	r1, r4, r3
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	2030      	movs	r0, #48	@ 0x30
 8007c86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c8a:	4422      	add	r2, r4
 8007c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c94:	3302      	adds	r3, #2
 8007c96:	e7c7      	b.n	8007c28 <_printf_common+0x58>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	4641      	mov	r1, r8
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	47c8      	blx	r9
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d0e6      	beq.n	8007c74 <_printf_common+0xa4>
 8007ca6:	3601      	adds	r6, #1
 8007ca8:	e7d9      	b.n	8007c5e <_printf_common+0x8e>
	...

08007cac <_printf_i>:
 8007cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb0:	7e0f      	ldrb	r7, [r1, #24]
 8007cb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007cb4:	2f78      	cmp	r7, #120	@ 0x78
 8007cb6:	4691      	mov	r9, r2
 8007cb8:	4680      	mov	r8, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	469a      	mov	sl, r3
 8007cbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007cc2:	d807      	bhi.n	8007cd4 <_printf_i+0x28>
 8007cc4:	2f62      	cmp	r7, #98	@ 0x62
 8007cc6:	d80a      	bhi.n	8007cde <_printf_i+0x32>
 8007cc8:	2f00      	cmp	r7, #0
 8007cca:	f000 80d2 	beq.w	8007e72 <_printf_i+0x1c6>
 8007cce:	2f58      	cmp	r7, #88	@ 0x58
 8007cd0:	f000 80b7 	beq.w	8007e42 <_printf_i+0x196>
 8007cd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cdc:	e03a      	b.n	8007d54 <_printf_i+0xa8>
 8007cde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ce2:	2b15      	cmp	r3, #21
 8007ce4:	d8f6      	bhi.n	8007cd4 <_printf_i+0x28>
 8007ce6:	a101      	add	r1, pc, #4	@ (adr r1, 8007cec <_printf_i+0x40>)
 8007ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cec:	08007d45 	.word	0x08007d45
 8007cf0:	08007d59 	.word	0x08007d59
 8007cf4:	08007cd5 	.word	0x08007cd5
 8007cf8:	08007cd5 	.word	0x08007cd5
 8007cfc:	08007cd5 	.word	0x08007cd5
 8007d00:	08007cd5 	.word	0x08007cd5
 8007d04:	08007d59 	.word	0x08007d59
 8007d08:	08007cd5 	.word	0x08007cd5
 8007d0c:	08007cd5 	.word	0x08007cd5
 8007d10:	08007cd5 	.word	0x08007cd5
 8007d14:	08007cd5 	.word	0x08007cd5
 8007d18:	08007e59 	.word	0x08007e59
 8007d1c:	08007d83 	.word	0x08007d83
 8007d20:	08007e0f 	.word	0x08007e0f
 8007d24:	08007cd5 	.word	0x08007cd5
 8007d28:	08007cd5 	.word	0x08007cd5
 8007d2c:	08007e7b 	.word	0x08007e7b
 8007d30:	08007cd5 	.word	0x08007cd5
 8007d34:	08007d83 	.word	0x08007d83
 8007d38:	08007cd5 	.word	0x08007cd5
 8007d3c:	08007cd5 	.word	0x08007cd5
 8007d40:	08007e17 	.word	0x08007e17
 8007d44:	6833      	ldr	r3, [r6, #0]
 8007d46:	1d1a      	adds	r2, r3, #4
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6032      	str	r2, [r6, #0]
 8007d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d54:	2301      	movs	r3, #1
 8007d56:	e09d      	b.n	8007e94 <_printf_i+0x1e8>
 8007d58:	6833      	ldr	r3, [r6, #0]
 8007d5a:	6820      	ldr	r0, [r4, #0]
 8007d5c:	1d19      	adds	r1, r3, #4
 8007d5e:	6031      	str	r1, [r6, #0]
 8007d60:	0606      	lsls	r6, r0, #24
 8007d62:	d501      	bpl.n	8007d68 <_printf_i+0xbc>
 8007d64:	681d      	ldr	r5, [r3, #0]
 8007d66:	e003      	b.n	8007d70 <_printf_i+0xc4>
 8007d68:	0645      	lsls	r5, r0, #25
 8007d6a:	d5fb      	bpl.n	8007d64 <_printf_i+0xb8>
 8007d6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d70:	2d00      	cmp	r5, #0
 8007d72:	da03      	bge.n	8007d7c <_printf_i+0xd0>
 8007d74:	232d      	movs	r3, #45	@ 0x2d
 8007d76:	426d      	negs	r5, r5
 8007d78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d7c:	4859      	ldr	r0, [pc, #356]	@ (8007ee4 <_printf_i+0x238>)
 8007d7e:	230a      	movs	r3, #10
 8007d80:	e010      	b.n	8007da4 <_printf_i+0xf8>
 8007d82:	6821      	ldr	r1, [r4, #0]
 8007d84:	6833      	ldr	r3, [r6, #0]
 8007d86:	0608      	lsls	r0, r1, #24
 8007d88:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d8c:	d402      	bmi.n	8007d94 <_printf_i+0xe8>
 8007d8e:	0649      	lsls	r1, r1, #25
 8007d90:	bf48      	it	mi
 8007d92:	b2ad      	uxthmi	r5, r5
 8007d94:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d96:	4853      	ldr	r0, [pc, #332]	@ (8007ee4 <_printf_i+0x238>)
 8007d98:	6033      	str	r3, [r6, #0]
 8007d9a:	d159      	bne.n	8007e50 <_printf_i+0x1a4>
 8007d9c:	2308      	movs	r3, #8
 8007d9e:	2100      	movs	r1, #0
 8007da0:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007da4:	6866      	ldr	r6, [r4, #4]
 8007da6:	60a6      	str	r6, [r4, #8]
 8007da8:	2e00      	cmp	r6, #0
 8007daa:	db05      	blt.n	8007db8 <_printf_i+0x10c>
 8007dac:	6821      	ldr	r1, [r4, #0]
 8007dae:	432e      	orrs	r6, r5
 8007db0:	f021 0104 	bic.w	r1, r1, #4
 8007db4:	6021      	str	r1, [r4, #0]
 8007db6:	d04d      	beq.n	8007e54 <_printf_i+0x1a8>
 8007db8:	4616      	mov	r6, r2
 8007dba:	fbb5 f1f3 	udiv	r1, r5, r3
 8007dbe:	fb03 5711 	mls	r7, r3, r1, r5
 8007dc2:	5dc7      	ldrb	r7, [r0, r7]
 8007dc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007dc8:	462f      	mov	r7, r5
 8007dca:	42bb      	cmp	r3, r7
 8007dcc:	460d      	mov	r5, r1
 8007dce:	d9f4      	bls.n	8007dba <_printf_i+0x10e>
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d10b      	bne.n	8007dec <_printf_i+0x140>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	07df      	lsls	r7, r3, #31
 8007dd8:	d508      	bpl.n	8007dec <_printf_i+0x140>
 8007dda:	6923      	ldr	r3, [r4, #16]
 8007ddc:	6861      	ldr	r1, [r4, #4]
 8007dde:	4299      	cmp	r1, r3
 8007de0:	bfde      	ittt	le
 8007de2:	2330      	movle	r3, #48	@ 0x30
 8007de4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007de8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007dec:	1b92      	subs	r2, r2, r6
 8007dee:	6122      	str	r2, [r4, #16]
 8007df0:	f8cd a000 	str.w	sl, [sp]
 8007df4:	464b      	mov	r3, r9
 8007df6:	aa03      	add	r2, sp, #12
 8007df8:	4621      	mov	r1, r4
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	f7ff fee8 	bl	8007bd0 <_printf_common>
 8007e00:	3001      	adds	r0, #1
 8007e02:	d14c      	bne.n	8007e9e <_printf_i+0x1f2>
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295
 8007e08:	b004      	add	sp, #16
 8007e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	f043 0320 	orr.w	r3, r3, #32
 8007e14:	6023      	str	r3, [r4, #0]
 8007e16:	4834      	ldr	r0, [pc, #208]	@ (8007ee8 <_printf_i+0x23c>)
 8007e18:	2778      	movs	r7, #120	@ 0x78
 8007e1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	6831      	ldr	r1, [r6, #0]
 8007e22:	061f      	lsls	r7, r3, #24
 8007e24:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e28:	d402      	bmi.n	8007e30 <_printf_i+0x184>
 8007e2a:	065f      	lsls	r7, r3, #25
 8007e2c:	bf48      	it	mi
 8007e2e:	b2ad      	uxthmi	r5, r5
 8007e30:	6031      	str	r1, [r6, #0]
 8007e32:	07d9      	lsls	r1, r3, #31
 8007e34:	bf44      	itt	mi
 8007e36:	f043 0320 	orrmi.w	r3, r3, #32
 8007e3a:	6023      	strmi	r3, [r4, #0]
 8007e3c:	b11d      	cbz	r5, 8007e46 <_printf_i+0x19a>
 8007e3e:	2310      	movs	r3, #16
 8007e40:	e7ad      	b.n	8007d9e <_printf_i+0xf2>
 8007e42:	4828      	ldr	r0, [pc, #160]	@ (8007ee4 <_printf_i+0x238>)
 8007e44:	e7e9      	b.n	8007e1a <_printf_i+0x16e>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	f023 0320 	bic.w	r3, r3, #32
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	e7f6      	b.n	8007e3e <_printf_i+0x192>
 8007e50:	230a      	movs	r3, #10
 8007e52:	e7a4      	b.n	8007d9e <_printf_i+0xf2>
 8007e54:	4616      	mov	r6, r2
 8007e56:	e7bb      	b.n	8007dd0 <_printf_i+0x124>
 8007e58:	6833      	ldr	r3, [r6, #0]
 8007e5a:	6825      	ldr	r5, [r4, #0]
 8007e5c:	6961      	ldr	r1, [r4, #20]
 8007e5e:	1d18      	adds	r0, r3, #4
 8007e60:	6030      	str	r0, [r6, #0]
 8007e62:	062e      	lsls	r6, r5, #24
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	d501      	bpl.n	8007e6c <_printf_i+0x1c0>
 8007e68:	6019      	str	r1, [r3, #0]
 8007e6a:	e002      	b.n	8007e72 <_printf_i+0x1c6>
 8007e6c:	0668      	lsls	r0, r5, #25
 8007e6e:	d5fb      	bpl.n	8007e68 <_printf_i+0x1bc>
 8007e70:	8019      	strh	r1, [r3, #0]
 8007e72:	2300      	movs	r3, #0
 8007e74:	6123      	str	r3, [r4, #16]
 8007e76:	4616      	mov	r6, r2
 8007e78:	e7ba      	b.n	8007df0 <_printf_i+0x144>
 8007e7a:	6833      	ldr	r3, [r6, #0]
 8007e7c:	1d1a      	adds	r2, r3, #4
 8007e7e:	6032      	str	r2, [r6, #0]
 8007e80:	681e      	ldr	r6, [r3, #0]
 8007e82:	6862      	ldr	r2, [r4, #4]
 8007e84:	2100      	movs	r1, #0
 8007e86:	4630      	mov	r0, r6
 8007e88:	f7f8 f992 	bl	80001b0 <memchr>
 8007e8c:	b108      	cbz	r0, 8007e92 <_printf_i+0x1e6>
 8007e8e:	1b80      	subs	r0, r0, r6
 8007e90:	6060      	str	r0, [r4, #4]
 8007e92:	6863      	ldr	r3, [r4, #4]
 8007e94:	6123      	str	r3, [r4, #16]
 8007e96:	2300      	movs	r3, #0
 8007e98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e9c:	e7a8      	b.n	8007df0 <_printf_i+0x144>
 8007e9e:	6923      	ldr	r3, [r4, #16]
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	4640      	mov	r0, r8
 8007ea6:	47d0      	blx	sl
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	d0ab      	beq.n	8007e04 <_printf_i+0x158>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	079b      	lsls	r3, r3, #30
 8007eb0:	d413      	bmi.n	8007eda <_printf_i+0x22e>
 8007eb2:	68e0      	ldr	r0, [r4, #12]
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	4298      	cmp	r0, r3
 8007eb8:	bfb8      	it	lt
 8007eba:	4618      	movlt	r0, r3
 8007ebc:	e7a4      	b.n	8007e08 <_printf_i+0x15c>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	4632      	mov	r2, r6
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	4640      	mov	r0, r8
 8007ec6:	47d0      	blx	sl
 8007ec8:	3001      	adds	r0, #1
 8007eca:	d09b      	beq.n	8007e04 <_printf_i+0x158>
 8007ecc:	3501      	adds	r5, #1
 8007ece:	68e3      	ldr	r3, [r4, #12]
 8007ed0:	9903      	ldr	r1, [sp, #12]
 8007ed2:	1a5b      	subs	r3, r3, r1
 8007ed4:	42ab      	cmp	r3, r5
 8007ed6:	dcf2      	bgt.n	8007ebe <_printf_i+0x212>
 8007ed8:	e7eb      	b.n	8007eb2 <_printf_i+0x206>
 8007eda:	2500      	movs	r5, #0
 8007edc:	f104 0619 	add.w	r6, r4, #25
 8007ee0:	e7f5      	b.n	8007ece <_printf_i+0x222>
 8007ee2:	bf00      	nop
 8007ee4:	0800850d 	.word	0x0800850d
 8007ee8:	0800851e 	.word	0x0800851e

08007eec <memmove>:
 8007eec:	4288      	cmp	r0, r1
 8007eee:	b510      	push	{r4, lr}
 8007ef0:	eb01 0402 	add.w	r4, r1, r2
 8007ef4:	d902      	bls.n	8007efc <memmove+0x10>
 8007ef6:	4284      	cmp	r4, r0
 8007ef8:	4623      	mov	r3, r4
 8007efa:	d807      	bhi.n	8007f0c <memmove+0x20>
 8007efc:	1e43      	subs	r3, r0, #1
 8007efe:	42a1      	cmp	r1, r4
 8007f00:	d007      	beq.n	8007f12 <memmove+0x26>
 8007f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f0a:	e7f8      	b.n	8007efe <memmove+0x12>
 8007f0c:	4402      	add	r2, r0
 8007f0e:	4282      	cmp	r2, r0
 8007f10:	d100      	bne.n	8007f14 <memmove+0x28>
 8007f12:	bd10      	pop	{r4, pc}
 8007f14:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8007f18:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8007f1c:	e7f7      	b.n	8007f0e <memmove+0x22>
	...

08007f20 <_sbrk_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d06      	ldr	r5, [pc, #24]	@ (8007f3c <_sbrk_r+0x1c>)
 8007f24:	2300      	movs	r3, #0
 8007f26:	4604      	mov	r4, r0
 8007f28:	4608      	mov	r0, r1
 8007f2a:	602b      	str	r3, [r5, #0]
 8007f2c:	f7fc ff2c 	bl	8004d88 <_sbrk>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_sbrk_r+0x1a>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_sbrk_r+0x1a>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	200062ac 	.word	0x200062ac

08007f40 <_realloc_r>:
 8007f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f44:	4607      	mov	r7, r0
 8007f46:	4614      	mov	r4, r2
 8007f48:	460d      	mov	r5, r1
 8007f4a:	b921      	cbnz	r1, 8007f56 <_realloc_r+0x16>
 8007f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f50:	4611      	mov	r1, r2
 8007f52:	f7ff bc55 	b.w	8007800 <_malloc_r>
 8007f56:	b92a      	cbnz	r2, 8007f64 <_realloc_r+0x24>
 8007f58:	f7ff fbe6 	bl	8007728 <_free_r>
 8007f5c:	4625      	mov	r5, r4
 8007f5e:	4628      	mov	r0, r5
 8007f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f64:	f000 f81a 	bl	8007f9c <_malloc_usable_size_r>
 8007f68:	4284      	cmp	r4, r0
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	d802      	bhi.n	8007f74 <_realloc_r+0x34>
 8007f6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f72:	d8f4      	bhi.n	8007f5e <_realloc_r+0x1e>
 8007f74:	4621      	mov	r1, r4
 8007f76:	4638      	mov	r0, r7
 8007f78:	f7ff fc42 	bl	8007800 <_malloc_r>
 8007f7c:	4680      	mov	r8, r0
 8007f7e:	b908      	cbnz	r0, 8007f84 <_realloc_r+0x44>
 8007f80:	4645      	mov	r5, r8
 8007f82:	e7ec      	b.n	8007f5e <_realloc_r+0x1e>
 8007f84:	42b4      	cmp	r4, r6
 8007f86:	4622      	mov	r2, r4
 8007f88:	4629      	mov	r1, r5
 8007f8a:	bf28      	it	cs
 8007f8c:	4632      	movcs	r2, r6
 8007f8e:	f7ff fbbd 	bl	800770c <memcpy>
 8007f92:	4629      	mov	r1, r5
 8007f94:	4638      	mov	r0, r7
 8007f96:	f7ff fbc7 	bl	8007728 <_free_r>
 8007f9a:	e7f1      	b.n	8007f80 <_realloc_r+0x40>

08007f9c <_malloc_usable_size_r>:
 8007f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fa0:	1f18      	subs	r0, r3, #4
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	bfbc      	itt	lt
 8007fa6:	580b      	ldrlt	r3, [r1, r0]
 8007fa8:	18c0      	addlt	r0, r0, r3
 8007faa:	4770      	bx	lr

08007fac <ceilf>:
 8007fac:	ee10 2a10 	vmov	r2, s0
 8007fb0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8007fb4:	3b7f      	subs	r3, #127	@ 0x7f
 8007fb6:	2b16      	cmp	r3, #22
 8007fb8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8007fbc:	dc1b      	bgt.n	8007ff6 <ceilf+0x4a>
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	db1e      	blt.n	8008002 <ceilf+0x56>
 8007fc4:	491a      	ldr	r1, [pc, #104]	@ (8008030 <ceilf+0x84>)
 8007fc6:	4119      	asrs	r1, r3
 8007fc8:	420a      	tst	r2, r1
 8007fca:	d023      	beq.n	8008014 <ceilf+0x68>
 8007fcc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008034 <ceilf+0x88>
 8007fd0:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007fd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fdc:	dd1a      	ble.n	8008014 <ceilf+0x68>
 8007fde:	2a00      	cmp	r2, #0
 8007fe0:	dd04      	ble.n	8007fec <ceilf+0x40>
 8007fe2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007fe6:	fa42 f303 	asr.w	r3, r2, r3
 8007fea:	4418      	add	r0, r3
 8007fec:	ea20 0301 	bic.w	r3, r0, r1
 8007ff0:	ee00 3a10 	vmov	s0, r3
 8007ff4:	4770      	bx	lr
 8007ff6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8007ffa:	d30b      	bcc.n	8008014 <ceilf+0x68>
 8007ffc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008000:	4770      	bx	lr
 8008002:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8008034 <ceilf+0x88>
 8008006:	ee70 7a27 	vadd.f32	s15, s0, s15
 800800a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800800e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008012:	dc00      	bgt.n	8008016 <ceilf+0x6a>
 8008014:	4770      	bx	lr
 8008016:	2a00      	cmp	r2, #0
 8008018:	db06      	blt.n	8008028 <ceilf+0x7c>
 800801a:	b111      	cbz	r1, 8008022 <ceilf+0x76>
 800801c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008020:	e7f8      	b.n	8008014 <ceilf+0x68>
 8008022:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8008038 <ceilf+0x8c>
 8008026:	4770      	bx	lr
 8008028:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 800803c <ceilf+0x90>
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	007fffff 	.word	0x007fffff
 8008034:	7149f2ca 	.word	0x7149f2ca
 8008038:	00000000 	.word	0x00000000
 800803c:	80000000 	.word	0x80000000

08008040 <__udivmoddi4>:
 8008040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008044:	9d08      	ldr	r5, [sp, #32]
 8008046:	460f      	mov	r7, r1
 8008048:	4604      	mov	r4, r0
 800804a:	468c      	mov	ip, r1
 800804c:	2b00      	cmp	r3, #0
 800804e:	d148      	bne.n	80080e2 <__udivmoddi4+0xa2>
 8008050:	428a      	cmp	r2, r1
 8008052:	4616      	mov	r6, r2
 8008054:	d961      	bls.n	800811a <__udivmoddi4+0xda>
 8008056:	fab2 f382 	clz	r3, r2
 800805a:	b14b      	cbz	r3, 8008070 <__udivmoddi4+0x30>
 800805c:	f1c3 0220 	rsb	r2, r3, #32
 8008060:	fa01 fc03 	lsl.w	ip, r1, r3
 8008064:	fa20 f202 	lsr.w	r2, r0, r2
 8008068:	409e      	lsls	r6, r3
 800806a:	ea42 0c0c 	orr.w	ip, r2, ip
 800806e:	409c      	lsls	r4, r3
 8008070:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8008074:	b2b7      	uxth	r7, r6
 8008076:	fbbc f1fe 	udiv	r1, ip, lr
 800807a:	0c22      	lsrs	r2, r4, #16
 800807c:	fb0e cc11 	mls	ip, lr, r1, ip
 8008080:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8008084:	fb01 f007 	mul.w	r0, r1, r7
 8008088:	4290      	cmp	r0, r2
 800808a:	d909      	bls.n	80080a0 <__udivmoddi4+0x60>
 800808c:	18b2      	adds	r2, r6, r2
 800808e:	f101 3cff 	add.w	ip, r1, #4294967295
 8008092:	f080 80ee 	bcs.w	8008272 <__udivmoddi4+0x232>
 8008096:	4290      	cmp	r0, r2
 8008098:	f240 80eb 	bls.w	8008272 <__udivmoddi4+0x232>
 800809c:	3902      	subs	r1, #2
 800809e:	4432      	add	r2, r6
 80080a0:	1a12      	subs	r2, r2, r0
 80080a2:	b2a4      	uxth	r4, r4
 80080a4:	fbb2 f0fe 	udiv	r0, r2, lr
 80080a8:	fb0e 2210 	mls	r2, lr, r0, r2
 80080ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80080b0:	fb00 f707 	mul.w	r7, r0, r7
 80080b4:	42a7      	cmp	r7, r4
 80080b6:	d909      	bls.n	80080cc <__udivmoddi4+0x8c>
 80080b8:	1934      	adds	r4, r6, r4
 80080ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80080be:	f080 80da 	bcs.w	8008276 <__udivmoddi4+0x236>
 80080c2:	42a7      	cmp	r7, r4
 80080c4:	f240 80d7 	bls.w	8008276 <__udivmoddi4+0x236>
 80080c8:	4434      	add	r4, r6
 80080ca:	3802      	subs	r0, #2
 80080cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80080d0:	1be4      	subs	r4, r4, r7
 80080d2:	2100      	movs	r1, #0
 80080d4:	b11d      	cbz	r5, 80080de <__udivmoddi4+0x9e>
 80080d6:	40dc      	lsrs	r4, r3
 80080d8:	2300      	movs	r3, #0
 80080da:	e9c5 4300 	strd	r4, r3, [r5]
 80080de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e2:	428b      	cmp	r3, r1
 80080e4:	d906      	bls.n	80080f4 <__udivmoddi4+0xb4>
 80080e6:	b10d      	cbz	r5, 80080ec <__udivmoddi4+0xac>
 80080e8:	e9c5 0100 	strd	r0, r1, [r5]
 80080ec:	2100      	movs	r1, #0
 80080ee:	4608      	mov	r0, r1
 80080f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f4:	fab3 f183 	clz	r1, r3
 80080f8:	2900      	cmp	r1, #0
 80080fa:	d148      	bne.n	800818e <__udivmoddi4+0x14e>
 80080fc:	42bb      	cmp	r3, r7
 80080fe:	d302      	bcc.n	8008106 <__udivmoddi4+0xc6>
 8008100:	4282      	cmp	r2, r0
 8008102:	f200 8107 	bhi.w	8008314 <__udivmoddi4+0x2d4>
 8008106:	1a84      	subs	r4, r0, r2
 8008108:	eb67 0203 	sbc.w	r2, r7, r3
 800810c:	2001      	movs	r0, #1
 800810e:	4694      	mov	ip, r2
 8008110:	2d00      	cmp	r5, #0
 8008112:	d0e4      	beq.n	80080de <__udivmoddi4+0x9e>
 8008114:	e9c5 4c00 	strd	r4, ip, [r5]
 8008118:	e7e1      	b.n	80080de <__udivmoddi4+0x9e>
 800811a:	2a00      	cmp	r2, #0
 800811c:	f000 8092 	beq.w	8008244 <__udivmoddi4+0x204>
 8008120:	fab2 f382 	clz	r3, r2
 8008124:	2b00      	cmp	r3, #0
 8008126:	f040 80a8 	bne.w	800827a <__udivmoddi4+0x23a>
 800812a:	1a8a      	subs	r2, r1, r2
 800812c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8008130:	fa1f fc86 	uxth.w	ip, r6
 8008134:	2101      	movs	r1, #1
 8008136:	0c20      	lsrs	r0, r4, #16
 8008138:	fbb2 f7fe 	udiv	r7, r2, lr
 800813c:	fb0e 2217 	mls	r2, lr, r7, r2
 8008140:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8008144:	fb0c f007 	mul.w	r0, ip, r7
 8008148:	4290      	cmp	r0, r2
 800814a:	d907      	bls.n	800815c <__udivmoddi4+0x11c>
 800814c:	18b2      	adds	r2, r6, r2
 800814e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008152:	d202      	bcs.n	800815a <__udivmoddi4+0x11a>
 8008154:	4290      	cmp	r0, r2
 8008156:	f200 80e2 	bhi.w	800831e <__udivmoddi4+0x2de>
 800815a:	4647      	mov	r7, r8
 800815c:	1a12      	subs	r2, r2, r0
 800815e:	b2a4      	uxth	r4, r4
 8008160:	fbb2 f0fe 	udiv	r0, r2, lr
 8008164:	fb0e 2210 	mls	r2, lr, r0, r2
 8008168:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800816c:	fb0c fc00 	mul.w	ip, ip, r0
 8008170:	45a4      	cmp	ip, r4
 8008172:	d907      	bls.n	8008184 <__udivmoddi4+0x144>
 8008174:	1934      	adds	r4, r6, r4
 8008176:	f100 32ff 	add.w	r2, r0, #4294967295
 800817a:	d202      	bcs.n	8008182 <__udivmoddi4+0x142>
 800817c:	45a4      	cmp	ip, r4
 800817e:	f200 80cb 	bhi.w	8008318 <__udivmoddi4+0x2d8>
 8008182:	4610      	mov	r0, r2
 8008184:	eba4 040c 	sub.w	r4, r4, ip
 8008188:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800818c:	e7a2      	b.n	80080d4 <__udivmoddi4+0x94>
 800818e:	f1c1 0620 	rsb	r6, r1, #32
 8008192:	408b      	lsls	r3, r1
 8008194:	fa22 fc06 	lsr.w	ip, r2, r6
 8008198:	ea4c 0c03 	orr.w	ip, ip, r3
 800819c:	fa07 f401 	lsl.w	r4, r7, r1
 80081a0:	fa20 f306 	lsr.w	r3, r0, r6
 80081a4:	40f7      	lsrs	r7, r6
 80081a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80081aa:	4323      	orrs	r3, r4
 80081ac:	fa00 f801 	lsl.w	r8, r0, r1
 80081b0:	fa1f fe8c 	uxth.w	lr, ip
 80081b4:	fbb7 f0f9 	udiv	r0, r7, r9
 80081b8:	0c1c      	lsrs	r4, r3, #16
 80081ba:	fb09 7710 	mls	r7, r9, r0, r7
 80081be:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80081c2:	fb00 f70e 	mul.w	r7, r0, lr
 80081c6:	42a7      	cmp	r7, r4
 80081c8:	fa02 f201 	lsl.w	r2, r2, r1
 80081cc:	d90a      	bls.n	80081e4 <__udivmoddi4+0x1a4>
 80081ce:	eb1c 0404 	adds.w	r4, ip, r4
 80081d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80081d6:	f080 809b 	bcs.w	8008310 <__udivmoddi4+0x2d0>
 80081da:	42a7      	cmp	r7, r4
 80081dc:	f240 8098 	bls.w	8008310 <__udivmoddi4+0x2d0>
 80081e0:	3802      	subs	r0, #2
 80081e2:	4464      	add	r4, ip
 80081e4:	1be4      	subs	r4, r4, r7
 80081e6:	b29f      	uxth	r7, r3
 80081e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80081ec:	fb09 4413 	mls	r4, r9, r3, r4
 80081f0:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 80081f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80081f8:	45a6      	cmp	lr, r4
 80081fa:	d909      	bls.n	8008210 <__udivmoddi4+0x1d0>
 80081fc:	eb1c 0404 	adds.w	r4, ip, r4
 8008200:	f103 37ff 	add.w	r7, r3, #4294967295
 8008204:	f080 8082 	bcs.w	800830c <__udivmoddi4+0x2cc>
 8008208:	45a6      	cmp	lr, r4
 800820a:	d97f      	bls.n	800830c <__udivmoddi4+0x2cc>
 800820c:	3b02      	subs	r3, #2
 800820e:	4464      	add	r4, ip
 8008210:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008214:	eba4 040e 	sub.w	r4, r4, lr
 8008218:	fba0 e702 	umull	lr, r7, r0, r2
 800821c:	42bc      	cmp	r4, r7
 800821e:	4673      	mov	r3, lr
 8008220:	46b9      	mov	r9, r7
 8008222:	d363      	bcc.n	80082ec <__udivmoddi4+0x2ac>
 8008224:	d060      	beq.n	80082e8 <__udivmoddi4+0x2a8>
 8008226:	b15d      	cbz	r5, 8008240 <__udivmoddi4+0x200>
 8008228:	ebb8 0203 	subs.w	r2, r8, r3
 800822c:	eb64 0409 	sbc.w	r4, r4, r9
 8008230:	fa04 f606 	lsl.w	r6, r4, r6
 8008234:	fa22 f301 	lsr.w	r3, r2, r1
 8008238:	431e      	orrs	r6, r3
 800823a:	40cc      	lsrs	r4, r1
 800823c:	e9c5 6400 	strd	r6, r4, [r5]
 8008240:	2100      	movs	r1, #0
 8008242:	e74c      	b.n	80080de <__udivmoddi4+0x9e>
 8008244:	0862      	lsrs	r2, r4, #1
 8008246:	0848      	lsrs	r0, r1, #1
 8008248:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 800824c:	0c0b      	lsrs	r3, r1, #16
 800824e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008252:	b28a      	uxth	r2, r1
 8008254:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008258:	fbb3 f1f6 	udiv	r1, r3, r6
 800825c:	07e4      	lsls	r4, r4, #31
 800825e:	46b4      	mov	ip, r6
 8008260:	4637      	mov	r7, r6
 8008262:	46b6      	mov	lr, r6
 8008264:	231f      	movs	r3, #31
 8008266:	fbb0 f0f6 	udiv	r0, r0, r6
 800826a:	1bd2      	subs	r2, r2, r7
 800826c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008270:	e761      	b.n	8008136 <__udivmoddi4+0xf6>
 8008272:	4661      	mov	r1, ip
 8008274:	e714      	b.n	80080a0 <__udivmoddi4+0x60>
 8008276:	4610      	mov	r0, r2
 8008278:	e728      	b.n	80080cc <__udivmoddi4+0x8c>
 800827a:	f1c3 0120 	rsb	r1, r3, #32
 800827e:	fa20 f201 	lsr.w	r2, r0, r1
 8008282:	409e      	lsls	r6, r3
 8008284:	fa27 f101 	lsr.w	r1, r7, r1
 8008288:	409f      	lsls	r7, r3
 800828a:	433a      	orrs	r2, r7
 800828c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8008290:	fa1f fc86 	uxth.w	ip, r6
 8008294:	fbb1 f7fe 	udiv	r7, r1, lr
 8008298:	fb0e 1017 	mls	r0, lr, r7, r1
 800829c:	0c11      	lsrs	r1, r2, #16
 800829e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082a2:	fb07 f80c 	mul.w	r8, r7, ip
 80082a6:	4588      	cmp	r8, r1
 80082a8:	fa04 f403 	lsl.w	r4, r4, r3
 80082ac:	d93a      	bls.n	8008324 <__udivmoddi4+0x2e4>
 80082ae:	1871      	adds	r1, r6, r1
 80082b0:	f107 30ff 	add.w	r0, r7, #4294967295
 80082b4:	d201      	bcs.n	80082ba <__udivmoddi4+0x27a>
 80082b6:	4588      	cmp	r8, r1
 80082b8:	d81f      	bhi.n	80082fa <__udivmoddi4+0x2ba>
 80082ba:	eba1 0108 	sub.w	r1, r1, r8
 80082be:	fbb1 f8fe 	udiv	r8, r1, lr
 80082c2:	fb08 f70c 	mul.w	r7, r8, ip
 80082c6:	fb0e 1118 	mls	r1, lr, r8, r1
 80082ca:	b292      	uxth	r2, r2
 80082cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80082d0:	42ba      	cmp	r2, r7
 80082d2:	d22f      	bcs.n	8008334 <__udivmoddi4+0x2f4>
 80082d4:	18b2      	adds	r2, r6, r2
 80082d6:	f108 31ff 	add.w	r1, r8, #4294967295
 80082da:	d2c6      	bcs.n	800826a <__udivmoddi4+0x22a>
 80082dc:	42ba      	cmp	r2, r7
 80082de:	d2c4      	bcs.n	800826a <__udivmoddi4+0x22a>
 80082e0:	f1a8 0102 	sub.w	r1, r8, #2
 80082e4:	4432      	add	r2, r6
 80082e6:	e7c0      	b.n	800826a <__udivmoddi4+0x22a>
 80082e8:	45f0      	cmp	r8, lr
 80082ea:	d29c      	bcs.n	8008226 <__udivmoddi4+0x1e6>
 80082ec:	ebbe 0302 	subs.w	r3, lr, r2
 80082f0:	eb67 070c 	sbc.w	r7, r7, ip
 80082f4:	3801      	subs	r0, #1
 80082f6:	46b9      	mov	r9, r7
 80082f8:	e795      	b.n	8008226 <__udivmoddi4+0x1e6>
 80082fa:	eba6 0808 	sub.w	r8, r6, r8
 80082fe:	4441      	add	r1, r8
 8008300:	1eb8      	subs	r0, r7, #2
 8008302:	fbb1 f8fe 	udiv	r8, r1, lr
 8008306:	fb08 f70c 	mul.w	r7, r8, ip
 800830a:	e7dc      	b.n	80082c6 <__udivmoddi4+0x286>
 800830c:	463b      	mov	r3, r7
 800830e:	e77f      	b.n	8008210 <__udivmoddi4+0x1d0>
 8008310:	4650      	mov	r0, sl
 8008312:	e767      	b.n	80081e4 <__udivmoddi4+0x1a4>
 8008314:	4608      	mov	r0, r1
 8008316:	e6fb      	b.n	8008110 <__udivmoddi4+0xd0>
 8008318:	4434      	add	r4, r6
 800831a:	3802      	subs	r0, #2
 800831c:	e732      	b.n	8008184 <__udivmoddi4+0x144>
 800831e:	3f02      	subs	r7, #2
 8008320:	4432      	add	r2, r6
 8008322:	e71b      	b.n	800815c <__udivmoddi4+0x11c>
 8008324:	eba1 0108 	sub.w	r1, r1, r8
 8008328:	4638      	mov	r0, r7
 800832a:	fbb1 f8fe 	udiv	r8, r1, lr
 800832e:	fb08 f70c 	mul.w	r7, r8, ip
 8008332:	e7c8      	b.n	80082c6 <__udivmoddi4+0x286>
 8008334:	4641      	mov	r1, r8
 8008336:	e798      	b.n	800826a <__udivmoddi4+0x22a>

08008338 <_init>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	bf00      	nop
 800833c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833e:	bc08      	pop	{r3}
 8008340:	469e      	mov	lr, r3
 8008342:	4770      	bx	lr

08008344 <_fini>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	bf00      	nop
 8008348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834a:	bc08      	pop	{r3}
 800834c:	469e      	mov	lr, r3
 800834e:	4770      	bx	lr
