
build/debug/SGC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca44  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e1c  0800cbe4  0800cbe4  0000dbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da00  0800da00  0000f1b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800da00  0800da00  0000ea00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da08  0800da08  0000f1b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da08  0800da08  0000ea08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da0c  0800da0c  0000ea0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b0  20000000  0800da10  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000081e4  200001b0  0800dbc0  0000f1b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20008394  0800dbc0  0000f394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003bbb1  00000000  00000000  0000f219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000952c  00000000  00000000  0004adca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001b1ff  00000000  00000000  000542f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000025d0  00000000  00000000  0006f4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001e61  00000000  00000000  00071ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c431  00000000  00000000  00073929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cf5c  00000000  00000000  0009fd5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006718  00000000  00000000  000accb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000001a1  00000000  00000000  000b33d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__aeabi_d2uiz>:
 80009ec:	004a      	lsls	r2, r1, #1
 80009ee:	d211      	bcs.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009f4:	d211      	bcs.n	8000a1a <__aeabi_d2uiz+0x2e>
 80009f6:	d50d      	bpl.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a00:	d40e      	bmi.n	8000a20 <__aeabi_d2uiz+0x34>
 8000a02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a1e:	d102      	bne.n	8000a26 <__aeabi_d2uiz+0x3a>
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	4770      	bx	lr
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	4770      	bx	lr

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b80c 	b.w	8000a5c <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f00b ff42 	bl	800c8d4 <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_idiv0>:
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__do_global_dtors_aux>:
 8000a60:	b510      	push	{r4, lr}
 8000a62:	4c05      	ldr	r4, [pc, #20]	@ (8000a78 <__do_global_dtors_aux+0x18>)
 8000a64:	7823      	ldrb	r3, [r4, #0]
 8000a66:	b933      	cbnz	r3, 8000a76 <__do_global_dtors_aux+0x16>
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <__do_global_dtors_aux+0x1c>)
 8000a6a:	b113      	cbz	r3, 8000a72 <__do_global_dtors_aux+0x12>
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <__do_global_dtors_aux+0x20>)
 8000a6e:	f3af 8000 	nop.w
 8000a72:	2301      	movs	r3, #1
 8000a74:	7023      	strb	r3, [r4, #0]
 8000a76:	bd10      	pop	{r4, pc}
 8000a78:	200001b0 	.word	0x200001b0
 8000a7c:	00000000 	.word	0x00000000
 8000a80:	0800cbcc 	.word	0x0800cbcc

08000a84 <frame_dummy>:
 8000a84:	b508      	push	{r3, lr}
 8000a86:	4b03      	ldr	r3, [pc, #12]	@ (8000a94 <frame_dummy+0x10>)
 8000a88:	b11b      	cbz	r3, 8000a92 <frame_dummy+0xe>
 8000a8a:	4903      	ldr	r1, [pc, #12]	@ (8000a98 <frame_dummy+0x14>)
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <frame_dummy+0x18>)
 8000a8e:	f3af 8000 	nop.w
 8000a92:	bd08      	pop	{r3, pc}
 8000a94:	00000000 	.word	0x00000000
 8000a98:	200001b4 	.word	0x200001b4
 8000a9c:	0800cbcc 	.word	0x0800cbcc

08000aa0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000aa0:	b510      	push	{r4, lr}
 8000aa2:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa4:	2400      	movs	r4, #0
 8000aa6:	9408      	str	r4, [sp, #32]
 8000aa8:	9409      	str	r4, [sp, #36]	@ 0x24
 8000aaa:	940a      	str	r4, [sp, #40]	@ 0x28
 8000aac:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000aae:	2220      	movs	r2, #32
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	4668      	mov	r0, sp
 8000ab4:	f00a fb1a 	bl	800b0ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ab8:	4883      	ldr	r0, [pc, #524]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000aba:	4b84      	ldr	r3, [pc, #528]	@ (8000ccc <MX_ADC1_Init+0x22c>)
 8000abc:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000abe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac2:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac4:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aca:	7604      	strb	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000acc:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad0:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad2:	4a7f      	ldr	r2, [pc, #508]	@ (8000cd0 <MX_ADC1_Init+0x230>)
 8000ad4:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad6:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 13;
 8000ad8:	220d      	movs	r2, #13
 8000ada:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000adc:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae0:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae2:	f003 fb3b 	bl	800415c <HAL_ADC_Init>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	f040 80b8 	bne.w	8000c5c <MX_ADC1_Init+0x1bc>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 8000af0:	2201      	movs	r2, #1
 8000af2:	9209      	str	r2, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000af4:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af6:	a908      	add	r1, sp, #32
 8000af8:	4873      	ldr	r0, [pc, #460]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000afa:	f003 fc59 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	f040 80af 	bne.w	8000c62 <MX_ADC1_Init+0x1c2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	a908      	add	r1, sp, #32
 8000b0e:	486e      	ldr	r0, [pc, #440]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b10:	f003 fc4e 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8000b14:	2800      	cmp	r0, #0
 8000b16:	f040 80a7 	bne.w	8000c68 <MX_ADC1_Init+0x1c8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 3;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b22:	a908      	add	r1, sp, #32
 8000b24:	4868      	ldr	r0, [pc, #416]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b26:	f003 fc43 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	f040 809f 	bne.w	8000c6e <MX_ADC1_Init+0x1ce>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b30:	2303      	movs	r3, #3
 8000b32:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 4;
 8000b34:	2304      	movs	r3, #4
 8000b36:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b38:	a908      	add	r1, sp, #32
 8000b3a:	4863      	ldr	r0, [pc, #396]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b3c:	f003 fc38 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	f040 8097 	bne.w	8000c74 <MX_ADC1_Init+0x1d4>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b46:	2304      	movs	r3, #4
 8000b48:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 5;
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4e:	a908      	add	r1, sp, #32
 8000b50:	485d      	ldr	r0, [pc, #372]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b52:	f003 fc2d 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8000b56:	2800      	cmp	r0, #0
 8000b58:	f040 808f 	bne.w	8000c7a <MX_ADC1_Init+0x1da>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b5c:	2305      	movs	r3, #5
 8000b5e:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 6;
 8000b60:	2306      	movs	r3, #6
 8000b62:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b64:	a908      	add	r1, sp, #32
 8000b66:	4858      	ldr	r0, [pc, #352]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b68:	f003 fc22 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	f040 8087 	bne.w	8000c80 <MX_ADC1_Init+0x1e0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b72:	2306      	movs	r3, #6
 8000b74:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 7;
 8000b76:	2307      	movs	r3, #7
 8000b78:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7a:	a908      	add	r1, sp, #32
 8000b7c:	4852      	ldr	r0, [pc, #328]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b7e:	f003 fc17 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	d17f      	bne.n	8000c86 <MX_ADC1_Init+0x1e6>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b86:	2307      	movs	r3, #7
 8000b88:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 8;
 8000b8a:	2308      	movs	r3, #8
 8000b8c:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8e:	a908      	add	r1, sp, #32
 8000b90:	484d      	ldr	r0, [pc, #308]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b92:	f003 fc0d 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d178      	bne.n	8000c8c <MX_ADC1_Init+0x1ec>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b9a:	230e      	movs	r3, #14
 8000b9c:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 9;
 8000b9e:	2309      	movs	r3, #9
 8000ba0:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba2:	a908      	add	r1, sp, #32
 8000ba4:	4848      	ldr	r0, [pc, #288]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000ba6:	f003 fc03 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	d171      	bne.n	8000c92 <MX_ADC1_Init+0x1f2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bae:	230a      	movs	r3, #10
 8000bb0:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 10;
 8000bb2:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb4:	a908      	add	r1, sp, #32
 8000bb6:	4844      	ldr	r0, [pc, #272]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bb8:	f003 fbfa 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	d16b      	bne.n	8000c98 <MX_ADC1_Init+0x1f8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 11;
 8000bc4:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc6:	a908      	add	r1, sp, #32
 8000bc8:	483f      	ldr	r0, [pc, #252]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bca:	f003 fbf1 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	d165      	bne.n	8000c9e <MX_ADC1_Init+0x1fe>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 12;
 8000bd6:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd8:	a908      	add	r1, sp, #32
 8000bda:	483b      	ldr	r0, [pc, #236]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bdc:	f003 fbe8 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8000be0:	2800      	cmp	r0, #0
 8000be2:	d15f      	bne.n	8000ca4 <MX_ADC1_Init+0x204>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000be4:	230d      	movs	r3, #13
 8000be6:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 13;
 8000be8:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bea:	a908      	add	r1, sp, #32
 8000bec:	4836      	ldr	r0, [pc, #216]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bee:	f003 fbdf 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d159      	bne.n	8000caa <MX_ADC1_Init+0x20a>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	9201      	str	r2, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8000bfe:	2204      	movs	r2, #4
 8000c00:	9204      	str	r2, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c02:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8000c04:	9307      	str	r3, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000c06:	4a33      	ldr	r2, [pc, #204]	@ (8000cd4 <MX_ADC1_Init+0x234>)
 8000c08:	9206      	str	r2, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000c0a:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000c0e:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 8000c12:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c14:	4669      	mov	r1, sp
 8000c16:	482c      	ldr	r0, [pc, #176]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c18:	f003 fc94 	bl	8004544 <HAL_ADCEx_InjectedConfigChannel>
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	d147      	bne.n	8000cb0 <MX_ADC1_Init+0x210>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c28:	4669      	mov	r1, sp
 8000c2a:	4827      	ldr	r0, [pc, #156]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c2c:	f003 fc8a 	bl	8004544 <HAL_ADCEx_InjectedConfigChannel>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d140      	bne.n	8000cb6 <MX_ADC1_Init+0x216>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 3;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c3c:	4669      	mov	r1, sp
 8000c3e:	4822      	ldr	r0, [pc, #136]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c40:	f003 fc80 	bl	8004544 <HAL_ADCEx_InjectedConfigChannel>
 8000c44:	bbd0      	cbnz	r0, 8000cbc <MX_ADC1_Init+0x21c>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000c46:	2303      	movs	r3, #3
 8000c48:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 4;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c4e:	4669      	mov	r1, sp
 8000c50:	481d      	ldr	r0, [pc, #116]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c52:	f003 fc77 	bl	8004544 <HAL_ADCEx_InjectedConfigChannel>
 8000c56:	bba0      	cbnz	r0, 8000cc2 <MX_ADC1_Init+0x222>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c58:	b00c      	add	sp, #48	@ 0x30
 8000c5a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000c5c:	f002 f8dc 	bl	8002e18 <Error_Handler>
 8000c60:	e744      	b.n	8000aec <MX_ADC1_Init+0x4c>
    Error_Handler();
 8000c62:	f002 f8d9 	bl	8002e18 <Error_Handler>
 8000c66:	e74d      	b.n	8000b04 <MX_ADC1_Init+0x64>
    Error_Handler();
 8000c68:	f002 f8d6 	bl	8002e18 <Error_Handler>
 8000c6c:	e755      	b.n	8000b1a <MX_ADC1_Init+0x7a>
    Error_Handler();
 8000c6e:	f002 f8d3 	bl	8002e18 <Error_Handler>
 8000c72:	e75d      	b.n	8000b30 <MX_ADC1_Init+0x90>
    Error_Handler();
 8000c74:	f002 f8d0 	bl	8002e18 <Error_Handler>
 8000c78:	e765      	b.n	8000b46 <MX_ADC1_Init+0xa6>
    Error_Handler();
 8000c7a:	f002 f8cd 	bl	8002e18 <Error_Handler>
 8000c7e:	e76d      	b.n	8000b5c <MX_ADC1_Init+0xbc>
    Error_Handler();
 8000c80:	f002 f8ca 	bl	8002e18 <Error_Handler>
 8000c84:	e775      	b.n	8000b72 <MX_ADC1_Init+0xd2>
    Error_Handler();
 8000c86:	f002 f8c7 	bl	8002e18 <Error_Handler>
 8000c8a:	e77c      	b.n	8000b86 <MX_ADC1_Init+0xe6>
    Error_Handler();
 8000c8c:	f002 f8c4 	bl	8002e18 <Error_Handler>
 8000c90:	e783      	b.n	8000b9a <MX_ADC1_Init+0xfa>
    Error_Handler();
 8000c92:	f002 f8c1 	bl	8002e18 <Error_Handler>
 8000c96:	e78a      	b.n	8000bae <MX_ADC1_Init+0x10e>
    Error_Handler();
 8000c98:	f002 f8be 	bl	8002e18 <Error_Handler>
 8000c9c:	e790      	b.n	8000bc0 <MX_ADC1_Init+0x120>
    Error_Handler();
 8000c9e:	f002 f8bb 	bl	8002e18 <Error_Handler>
 8000ca2:	e796      	b.n	8000bd2 <MX_ADC1_Init+0x132>
    Error_Handler();
 8000ca4:	f002 f8b8 	bl	8002e18 <Error_Handler>
 8000ca8:	e79c      	b.n	8000be4 <MX_ADC1_Init+0x144>
    Error_Handler();
 8000caa:	f002 f8b5 	bl	8002e18 <Error_Handler>
 8000cae:	e7a2      	b.n	8000bf6 <MX_ADC1_Init+0x156>
    Error_Handler();
 8000cb0:	f002 f8b2 	bl	8002e18 <Error_Handler>
 8000cb4:	e7b4      	b.n	8000c20 <MX_ADC1_Init+0x180>
    Error_Handler();
 8000cb6:	f002 f8af 	bl	8002e18 <Error_Handler>
 8000cba:	e7bb      	b.n	8000c34 <MX_ADC1_Init+0x194>
    Error_Handler();
 8000cbc:	f002 f8ac 	bl	8002e18 <Error_Handler>
 8000cc0:	e7c1      	b.n	8000c46 <MX_ADC1_Init+0x1a6>
    Error_Handler();
 8000cc2:	f002 f8a9 	bl	8002e18 <Error_Handler>
}
 8000cc6:	e7c7      	b.n	8000c58 <MX_ADC1_Init+0x1b8>
 8000cc8:	2000022c 	.word	0x2000022c
 8000ccc:	40012000 	.word	0x40012000
 8000cd0:	0f000001 	.word	0x0f000001
 8000cd4:	000f0001 	.word	0x000f0001

08000cd8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cda:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	2300      	movs	r3, #0
 8000cde:	9303      	str	r3, [sp, #12]
 8000ce0:	9304      	str	r3, [sp, #16]
 8000ce2:	9305      	str	r3, [sp, #20]
 8000ce4:	9306      	str	r3, [sp, #24]
 8000ce6:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000ce8:	6802      	ldr	r2, [r0, #0]
 8000cea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cee:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d001      	beq.n	8000cfa <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cf6:	b009      	add	sp, #36	@ 0x24
 8000cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cfa:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cfc:	2500      	movs	r5, #0
 8000cfe:	9500      	str	r5, [sp, #0]
 8000d00:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d0a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000d0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d0e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000d12:	9200      	str	r2, [sp, #0]
 8000d14:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	9501      	str	r5, [sp, #4]
 8000d18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d1a:	f042 0204 	orr.w	r2, r2, #4
 8000d1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d22:	f002 0204 	and.w	r2, r2, #4
 8000d26:	9201      	str	r2, [sp, #4]
 8000d28:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	9502      	str	r5, [sp, #8]
 8000d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d2e:	f042 0201 	orr.w	r2, r2, #1
 8000d32:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SENSOR_EGT_PIN_Pin|ETB1_SENSE1_Pin|ETB1_SENSE2_Pin|ETB2_SENSE1_Pin
 8000d3e:	231f      	movs	r3, #31
 8000d40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d42:	2703      	movs	r7, #3
 8000d44:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	ae03      	add	r6, sp, #12
 8000d48:	4631      	mov	r1, r6
 8000d4a:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <HAL_ADC_MspInit+0xc4>)
 8000d4c:	f004 f958 	bl	8005000 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ETB2_SENSE2_Pin|SENSOR_MAP_PIN_Pin|SENSOR_IAT_PIN_Pin|SENSOR_CLT_PIN_Pin
 8000d50:	23ff      	movs	r3, #255	@ 0xff
 8000d52:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d54:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	4631      	mov	r1, r6
 8000d5a:	4811      	ldr	r0, [pc, #68]	@ (8000da0 <HAL_ADC_MspInit+0xc8>)
 8000d5c:	f004 f950 	bl	8005000 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000d60:	4810      	ldr	r0, [pc, #64]	@ (8000da4 <HAL_ADC_MspInit+0xcc>)
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <HAL_ADC_MspInit+0xd0>)
 8000d64:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d66:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d68:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6a:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d70:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d76:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d7c:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d7e:	61c5      	str	r5, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d84:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d86:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d88:	f003 fdd0 	bl	800492c <HAL_DMA_Init>
 8000d8c:	b918      	cbnz	r0, 8000d96 <HAL_ADC_MspInit+0xbe>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d8e:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <HAL_ADC_MspInit+0xcc>)
 8000d90:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000d92:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000d94:	e7af      	b.n	8000cf6 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000d96:	f002 f83f 	bl	8002e18 <Error_Handler>
 8000d9a:	e7f8      	b.n	8000d8e <HAL_ADC_MspInit+0xb6>
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	200001cc 	.word	0x200001cc
 8000da8:	40026410 	.word	0x40026410

08000dac <analog_inputs_start_conversion>:
 * 
 * This function triggers the ADC to begin converting the analog signals
 * to digital values.
 */
void analog_inputs_start_conversion()
{
 8000dac:	b508      	push	{r3, lr}
    if (hadc == NULL)
 8000dae:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <analog_inputs_start_conversion+0x14>)
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	b118      	cbz	r0, 8000dbc <analog_inputs_start_conversion+0x10>
    {
        return;
    }
    
    HAL_ADC_Start_DMA(hadc, (uint32_t*)&analog_data, ANALOG_INPUTS_MAX * ANALOG_INPUTS_NUMBER_OF_SAMPLES);
 8000db4:	2268      	movs	r2, #104	@ 0x68
 8000db6:	4903      	ldr	r1, [pc, #12]	@ (8000dc4 <analog_inputs_start_conversion+0x18>)
 8000db8:	f003 f9fc 	bl	80041b4 <HAL_ADC_Start_DMA>
}
 8000dbc:	bd08      	pop	{r3, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000344 	.word	0x20000344
 8000dc4:	20000274 	.word	0x20000274

08000dc8 <HAL_ADC_ConvCpltCallback>:
}
 8000dc8:	4770      	bx	lr
	...

08000dcc <analog_inputs_init>:
{
 8000dcc:	b508      	push	{r3, lr}
    if (adc_handle == NULL)
 8000dce:	b158      	cbz	r0, 8000de8 <analog_inputs_init+0x1c>
    hadc = adc_handle;
 8000dd0:	4a07      	ldr	r2, [pc, #28]	@ (8000df0 <analog_inputs_init+0x24>)
 8000dd2:	6010      	str	r0, [r2, #0]
    osTimerId_t timer_id = osTimerNew(
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <analog_inputs_init+0x28>)
 8000ddc:	f000 f8d8 	bl	8000f90 <osTimerNew>
    osTimerStart(timer_id, 1);
 8000de0:	2101      	movs	r1, #1
 8000de2:	f000 f929 	bl	8001038 <osTimerStart>
}
 8000de6:	bd08      	pop	{r3, pc}
        log_error("Analog input init failed! adc handle is null.");
 8000de8:	4803      	ldr	r0, [pc, #12]	@ (8000df8 <analog_inputs_init+0x2c>)
 8000dea:	f001 fa4b 	bl	8002284 <log_error>
        return;
 8000dee:	e7fa      	b.n	8000de6 <analog_inputs_init+0x1a>
 8000df0:	20000344 	.word	0x20000344
 8000df4:	08000dad 	.word	0x08000dad
 8000df8:	0800cc2c 	.word	0x0800cc2c

08000dfc <analog_inputs_get_data>:
 * @param input_index The index of the analog input to retrieve data from.
 *                    This index corresponds to the specific channel of the ADC.
 * @return The digital value of the specified analog input.
 */
uint16_t analog_inputs_get_data(analog_input_channel_t input_index)
{
 8000dfc:	b510      	push	{r4, lr}
    if (input_index >= ANALOG_INPUTS_MAX)
 8000dfe:	280c      	cmp	r0, #12
 8000e00:	d802      	bhi.n	8000e08 <analog_inputs_get_data+0xc>
    {
        log_error("Invalid index in analog input.");
        return 0;
    }
    uint_fast32_t sum = 0;
    for (uint_fast8_t i = 0; i < ANALOG_INPUTS_NUMBER_OF_SAMPLES; i++)
 8000e02:	2300      	movs	r3, #0
    uint_fast32_t sum = 0;
 8000e04:	4619      	mov	r1, r3
 8000e06:	e00f      	b.n	8000e28 <analog_inputs_get_data+0x2c>
        log_error("Invalid index in analog input.");
 8000e08:	480a      	ldr	r0, [pc, #40]	@ (8000e34 <analog_inputs_get_data+0x38>)
 8000e0a:	f001 fa3b 	bl	8002284 <log_error>
        return 0;
 8000e0e:	2000      	movs	r0, #0
 8000e10:	e00e      	b.n	8000e30 <analog_inputs_get_data+0x34>
    {
        sum += analog_data[i * ANALOG_INPUTS_MAX + input_index];
 8000e12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000e16:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000e1a:	4402      	add	r2, r0
 8000e1c:	4c06      	ldr	r4, [pc, #24]	@ (8000e38 <analog_inputs_get_data+0x3c>)
 8000e1e:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 8000e22:	fa11 f182 	uxtah	r1, r1, r2
    for (uint_fast8_t i = 0; i < ANALOG_INPUTS_NUMBER_OF_SAMPLES; i++)
 8000e26:	3301      	adds	r3, #1
 8000e28:	2b07      	cmp	r3, #7
 8000e2a:	d9f2      	bls.n	8000e12 <analog_inputs_get_data+0x16>
    }
    
    return sum / ANALOG_INPUTS_NUMBER_OF_SAMPLES;
 8000e2c:	f3c1 00cf 	ubfx	r0, r1, #3, #16
}
 8000e30:	bd10      	pop	{r4, pc}
 8000e32:	bf00      	nop
 8000e34:	0800cc5c 	.word	0x0800cc5c
 8000e38:	20000274 	.word	0x20000274

08000e3c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8000e3c:	b508      	push	{r3, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8000e3e:	f008 fb6a 	bl	8009516 <pvTimerGetTimerID>

  if (callb != NULL) {
 8000e42:	b110      	cbz	r0, 8000e4a <TimerCallback+0xe>
    callb->func (callb->arg);
 8000e44:	6802      	ldr	r2, [r0, #0]
 8000e46:	6840      	ldr	r0, [r0, #4]
 8000e48:	4790      	blx	r2
  }
}
 8000e4a:	bd08      	pop	{r3, pc}

08000e4c <SysTick_Handler>:
void SysTick_Handler (void) {
 8000e4c:	b508      	push	{r3, lr}
  SysTick->CTRL;
 8000e4e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000e52:	691b      	ldr	r3, [r3, #16]
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8000e54:	f007 fde6 	bl	8008a24 <xTaskGetSchedulerState>
 8000e58:	2801      	cmp	r0, #1
 8000e5a:	d100      	bne.n	8000e5e <SysTick_Handler+0x12>
}
 8000e5c:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8000e5e:	f002 f9a9 	bl	80031b4 <xPortSysTickHandler>
}
 8000e62:	e7fb      	b.n	8000e5c <SysTick_Handler+0x10>

08000e64 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000e64:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000e68:	b92b      	cbnz	r3, 8000e76 <osKernelInitialize+0x12>
    if (KernelState == osKernelInactive) {
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <osKernelInitialize+0x20>)
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	b928      	cbnz	r0, 8000e7c <osKernelInitialize+0x18>
      KernelState = osKernelReady;
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000e74:	4770      	bx	lr
    stat = osErrorISR;
 8000e76:	f06f 0005 	mvn.w	r0, #5
 8000e7a:	4770      	bx	lr
      stat = osError;
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000a00 	.word	0x20000a00

08000e88 <osKernelStart>:
 8000e88:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000e8c:	b973      	cbnz	r3, 8000eac <osKernelStart+0x24>
    if (KernelState == osKernelReady) {
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <osKernelStart+0x30>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d10d      	bne.n	8000eb2 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8000e96:	b510      	push	{r4, lr}
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	2400      	movs	r4, #0
 8000e9a:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <osKernelStart+0x34>)
 8000e9c:	77dc      	strb	r4, [r3, #31]
      KernelState = osKernelRunning;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <osKernelStart+0x30>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8000ea4:	f007 fb1a 	bl	80084dc <vTaskStartScheduler>
      stat = osOK;
 8000ea8:	4620      	mov	r0, r4
}
 8000eaa:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8000eac:	f06f 0005 	mvn.w	r0, #5
 8000eb0:	4770      	bx	lr
      stat = osError;
 8000eb2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000eb6:	4770      	bx	lr
 8000eb8:	20000a00 	.word	0x20000a00
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec2:	b087      	sub	sp, #28
  hTask = NULL;
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	9405      	str	r4, [sp, #20]
 8000ec8:	f3ef 8405 	mrs	r4, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 8000ecc:	bb04      	cbnz	r4, 8000f10 <osThreadNew+0x50>
 8000ece:	b1f8      	cbz	r0, 8000f10 <osThreadNew+0x50>
    if (attr != NULL) {
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	d034      	beq.n	8000f3e <osThreadNew+0x7e>
      if (attr->name != NULL) {
 8000ed4:	6815      	ldr	r5, [r2, #0]
      if (attr->priority != osPriorityNone) {
 8000ed6:	6993      	ldr	r3, [r2, #24]
 8000ed8:	b12b      	cbz	r3, 8000ee6 <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 8000eda:	461e      	mov	r6, r3
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000edc:	3b01      	subs	r3, #1
 8000ede:	2b37      	cmp	r3, #55	@ 0x37
 8000ee0:	d902      	bls.n	8000ee8 <osThreadNew+0x28>
        return (NULL);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	e015      	b.n	8000f12 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;
 8000ee6:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000ee8:	6853      	ldr	r3, [r2, #4]
 8000eea:	f013 0f01 	tst.w	r3, #1
 8000eee:	d13f      	bne.n	8000f70 <osThreadNew+0xb0>
      if (attr->stack_size > 0U) {
 8000ef0:	6954      	ldr	r4, [r2, #20]
 8000ef2:	b184      	cbz	r4, 8000f16 <osThreadNew+0x56>
        stack = attr->stack_size / sizeof(StackType_t);
 8000ef4:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000ef8:	6893      	ldr	r3, [r2, #8]
 8000efa:	b12b      	cbz	r3, 8000f08 <osThreadNew+0x48>
 8000efc:	68d7      	ldr	r7, [r2, #12]
 8000efe:	2f5b      	cmp	r7, #91	@ 0x5b
 8000f00:	d902      	bls.n	8000f08 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000f02:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000f04:	b107      	cbz	r7, 8000f08 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000f06:	b984      	cbnz	r4, 8000f2a <osThreadNew+0x6a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000f08:	b143      	cbz	r3, 8000f1c <osThreadNew+0x5c>
    mem  = -1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
      if (mem == 0) {
 8000f0e:	b30b      	cbz	r3, 8000f54 <osThreadNew+0x94>
  return ((osThreadId_t)hTask);
 8000f10:	9805      	ldr	r0, [sp, #20]
}
 8000f12:	b007      	add	sp, #28
 8000f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8000f16:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000f1a:	e7ed      	b.n	8000ef8 <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000f1c:	68d3      	ldr	r3, [r2, #12]
 8000f1e:	b9a3      	cbnz	r3, 8000f4a <osThreadNew+0x8a>
 8000f20:	6913      	ldr	r3, [r2, #16]
 8000f22:	b1ab      	cbz	r3, 8000f50 <osThreadNew+0x90>
    mem  = -1;
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	e7f1      	b.n	8000f0e <osThreadNew+0x4e>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	9701      	str	r7, [sp, #4]
 8000f2e:	9600      	str	r6, [sp, #0]
 8000f30:	460b      	mov	r3, r1
 8000f32:	4662      	mov	r2, ip
 8000f34:	4629      	mov	r1, r5
 8000f36:	f007 fa63 	bl	8008400 <xTaskCreateStatic>
 8000f3a:	9005      	str	r0, [sp, #20]
 8000f3c:	e7e8      	b.n	8000f10 <osThreadNew+0x50>
    name = NULL;
 8000f3e:	4615      	mov	r5, r2
      mem = 0;
 8000f40:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8000f42:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 8000f44:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000f48:	e7e1      	b.n	8000f0e <osThreadNew+0x4e>
    mem  = -1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e7de      	b.n	8000f0e <osThreadNew+0x4e>
          mem = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	e7dc      	b.n	8000f0e <osThreadNew+0x4e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000f54:	ab05      	add	r3, sp, #20
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	9600      	str	r6, [sp, #0]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	fa1f f28c 	uxth.w	r2, ip
 8000f60:	4629      	mov	r1, r5
 8000f62:	f007 fa88 	bl	8008476 <xTaskCreate>
 8000f66:	2801      	cmp	r0, #1
 8000f68:	d0d2      	beq.n	8000f10 <osThreadNew+0x50>
            hTask = NULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9305      	str	r3, [sp, #20]
 8000f6e:	e7cf      	b.n	8000f10 <osThreadNew+0x50>
        return (NULL);
 8000f70:	2000      	movs	r0, #0
 8000f72:	e7ce      	b.n	8000f12 <osThreadNew+0x52>

08000f74 <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
 8000f74:	b508      	push	{r3, lr}
 8000f76:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000f7a:	b933      	cbnz	r3, 8000f8a <osDelay+0x16>
    if (ticks != 0U) {
 8000f7c:	b908      	cbnz	r0, 8000f82 <osDelay+0xe>
    stat = osOK;
 8000f7e:	2000      	movs	r0, #0
}
 8000f80:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8000f82:	f007 fc0d 	bl	80087a0 <vTaskDelay>
    stat = osOK;
 8000f86:	2000      	movs	r0, #0
 8000f88:	e7fa      	b.n	8000f80 <osDelay+0xc>
    stat = osErrorISR;
 8000f8a:	f06f 0005 	mvn.w	r0, #5
 8000f8e:	e7f7      	b.n	8000f80 <osDelay+0xc>

08000f90 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8000f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f94:	b083      	sub	sp, #12
 8000f96:	f3ef 8705 	mrs	r7, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 8000f9a:	2f00      	cmp	r7, #0
 8000f9c:	d143      	bne.n	8001026 <osTimerNew+0x96>
 8000f9e:	4606      	mov	r6, r0
 8000fa0:	4689      	mov	r9, r1
 8000fa2:	4615      	mov	r5, r2
 8000fa4:	461c      	mov	r4, r3
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d03f      	beq.n	800102a <osTimerNew+0x9a>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8000faa:	2008      	movs	r0, #8
 8000fac:	f001 fb16 	bl	80025dc <pvPortMalloc>

    if (callb != NULL) {
 8000fb0:	4680      	mov	r8, r0
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d03b      	beq.n	800102e <osTimerNew+0x9e>
      callb->func = func;
 8000fb6:	6006      	str	r6, [r0, #0]
      callb->arg  = argument;
 8000fb8:	6045      	str	r5, [r0, #4]

      if (type == osTimerOnce) {
 8000fba:	f1b9 0f00 	cmp.w	r9, #0
 8000fbe:	d000      	beq.n	8000fc2 <osTimerNew+0x32>
        reload = pdFALSE;
      } else {
        reload = pdTRUE;
 8000fc0:	2701      	movs	r7, #1
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
 8000fc2:	b304      	cbz	r4, 8001006 <osTimerNew+0x76>
        if (attr->name != NULL) {
 8000fc4:	6820      	ldr	r0, [r4, #0]
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8000fc6:	68a3      	ldr	r3, [r4, #8]
 8000fc8:	b113      	cbz	r3, 8000fd0 <osTimerNew+0x40>
 8000fca:	68e2      	ldr	r2, [r4, #12]
 8000fcc:	2a2b      	cmp	r2, #43	@ 0x2b
 8000fce:	d810      	bhi.n	8000ff2 <osTimerNew+0x62>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000fd0:	b153      	cbz	r3, 8000fe8 <osTimerNew+0x58>
      mem  = -1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
        #endif
      }
      else {
        if (mem == 0) {
 8000fd6:	b1db      	cbz	r3, 8001010 <osTimerNew+0x80>
  hTimer = NULL;
 8000fd8:	2400      	movs	r4, #0
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
        vPortFree (callb);
 8000fda:	4640      	mov	r0, r8
 8000fdc:	f001 fb80 	bl	80026e0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	b003      	add	sp, #12
 8000fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000fe8:	68e3      	ldr	r3, [r4, #12]
 8000fea:	b17b      	cbz	r3, 800100c <osTimerNew+0x7c>
      mem  = -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	e7f1      	b.n	8000fd6 <osTimerNew+0x46>
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <osTimerNew+0xa4>)
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	4643      	mov	r3, r8
 8000ffa:	463a      	mov	r2, r7
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	f008 f8d5 	bl	80091ac <xTimerCreateStatic>
 8001002:	4604      	mov	r4, r0
 8001004:	e00c      	b.n	8001020 <osTimerNew+0x90>
      name = NULL;
 8001006:	4620      	mov	r0, r4
        mem = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	e7e4      	b.n	8000fd6 <osTimerNew+0x46>
            mem = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	e7e2      	b.n	8000fd6 <osTimerNew+0x46>
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <osTimerNew+0xa4>)
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	4643      	mov	r3, r8
 8001016:	463a      	mov	r2, r7
 8001018:	2101      	movs	r1, #1
 800101a:	f008 f8ab 	bl	8009174 <xTimerCreate>
 800101e:	4604      	mov	r4, r0
      if ((hTimer == NULL) && (callb != NULL)) {
 8001020:	2c00      	cmp	r4, #0
 8001022:	d1dd      	bne.n	8000fe0 <osTimerNew+0x50>
 8001024:	e7d9      	b.n	8000fda <osTimerNew+0x4a>
  hTimer = NULL;
 8001026:	2400      	movs	r4, #0
 8001028:	e7da      	b.n	8000fe0 <osTimerNew+0x50>
 800102a:	2400      	movs	r4, #0
 800102c:	e7d8      	b.n	8000fe0 <osTimerNew+0x50>
 800102e:	4604      	mov	r4, r0
  return ((osTimerId_t)hTimer);
 8001030:	e7d6      	b.n	8000fe0 <osTimerNew+0x50>
 8001032:	bf00      	nop
 8001034:	08000e3d 	.word	0x08000e3d

08001038 <osTimerStart>:
 8001038:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 800103c:	b96b      	cbnz	r3, 800105a <osTimerStart+0x22>
 800103e:	460a      	mov	r2, r1
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
 8001040:	b170      	cbz	r0, 8001060 <osTimerStart+0x28>
osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8001042:	b500      	push	{lr}
 8001044:	b083      	sub	sp, #12
    stat = osErrorParameter;
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2104      	movs	r1, #4
 800104a:	f008 f8d9 	bl	8009200 <xTimerGenericCommand>
 800104e:	2801      	cmp	r0, #1
 8001050:	d109      	bne.n	8001066 <osTimerStart+0x2e>
      stat = osOK;
 8001052:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8001054:	b003      	add	sp, #12
 8001056:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorISR;
 800105a:	f06f 0005 	mvn.w	r0, #5
 800105e:	4770      	bx	lr
    stat = osErrorParameter;
 8001060:	f06f 0003 	mvn.w	r0, #3
}
 8001064:	4770      	bx	lr
      stat = osErrorResource;
 8001066:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800106a:	e7f3      	b.n	8001054 <osTimerStart+0x1c>

0800106c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800106c:	b508      	push	{r3, lr}
 800106e:	f3ef 8305 	mrs	r3, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8001072:	b9cb      	cbnz	r3, 80010a8 <osEventFlagsNew+0x3c>
    mem = -1;

    if (attr != NULL) {
 8001074:	b1a0      	cbz	r0, 80010a0 <osEventFlagsNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8001076:	6883      	ldr	r3, [r0, #8]
 8001078:	b113      	cbz	r3, 8001080 <osEventFlagsNew+0x14>
 800107a:	68c2      	ldr	r2, [r0, #12]
 800107c:	2a1f      	cmp	r2, #31
 800107e:	d80b      	bhi.n	8001098 <osEventFlagsNew+0x2c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001080:	b12b      	cbz	r3, 800108e <osEventFlagsNew+0x22>
    mem = -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8001086:	b98b      	cbnz	r3, 80010ac <osEventFlagsNew+0x40>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8001088:	f001 f95d 	bl	8002346 <xEventGroupCreate>
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
}
 800108c:	bd08      	pop	{r3, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800108e:	68c3      	ldr	r3, [r0, #12]
 8001090:	b143      	cbz	r3, 80010a4 <osEventFlagsNew+0x38>
    mem = -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	e7f6      	b.n	8001086 <osEventFlagsNew+0x1a>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8001098:	4618      	mov	r0, r3
 800109a:	f001 f92f 	bl	80022fc <xEventGroupCreateStatic>
 800109e:	e7f5      	b.n	800108c <osEventFlagsNew+0x20>
      mem = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e7f0      	b.n	8001086 <osEventFlagsNew+0x1a>
          mem = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	e7ee      	b.n	8001086 <osEventFlagsNew+0x1a>
  hEventGroup = NULL;
 80010a8:	2000      	movs	r0, #0
 80010aa:	e7ef      	b.n	800108c <osEventFlagsNew+0x20>
 80010ac:	2000      	movs	r0, #0
  return ((osEventFlagsId_t)hEventGroup);
 80010ae:	e7ed      	b.n	800108c <osEventFlagsNew+0x20>

080010b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80010b0:	b570      	push	{r4, r5, r6, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d13a      	bne.n	8001132 <osMessageQueueNew+0x82>
 80010bc:	4614      	mov	r4, r2
 80010be:	2800      	cmp	r0, #0
 80010c0:	d03b      	beq.n	800113a <osMessageQueueNew+0x8a>
 80010c2:	2900      	cmp	r1, #0
 80010c4:	d03b      	beq.n	800113e <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 80010c6:	b36a      	cbz	r2, 8001124 <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80010c8:	6893      	ldr	r3, [r2, #8]
 80010ca:	b14b      	cbz	r3, 80010e0 <osMessageQueueNew+0x30>
 80010cc:	68d2      	ldr	r2, [r2, #12]
 80010ce:	2a4f      	cmp	r2, #79	@ 0x4f
 80010d0:	d906      	bls.n	80010e0 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80010d2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80010d4:	b122      	cbz	r2, 80010e0 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80010d6:	fb01 f500 	mul.w	r5, r1, r0
 80010da:	6966      	ldr	r6, [r4, #20]
 80010dc:	42ae      	cmp	r6, r5
 80010de:	d21b      	bcs.n	8001118 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80010e0:	b173      	cbz	r3, 8001100 <osMessageQueueNew+0x50>
    mem = -1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80010e6:	bb63      	cbnz	r3, 8001142 <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f002 fa84 	bl	80035f6 <xQueueGenericCreate>
 80010ee:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80010f0:	b305      	cbz	r5, 8001134 <osMessageQueueNew+0x84>
      if (attr != NULL) {
 80010f2:	b104      	cbz	r4, 80010f6 <osMessageQueueNew+0x46>
        name = attr->name;
 80010f4:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 80010f6:	4621      	mov	r1, r4
 80010f8:	4628      	mov	r0, r5
 80010fa:	f002 fcd1 	bl	8003aa0 <vQueueAddToRegistry>
 80010fe:	e019      	b.n	8001134 <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001100:	68e3      	ldr	r3, [r4, #12]
 8001102:	b98b      	cbnz	r3, 8001128 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001104:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001106:	b113      	cbz	r3, 800110e <osMessageQueueNew+0x5e>
    mem = -1;
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	e7eb      	b.n	80010e6 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800110e:	6963      	ldr	r3, [r4, #20]
 8001110:	b16b      	cbz	r3, 800112e <osMessageQueueNew+0x7e>
    mem = -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e7e6      	b.n	80010e6 <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001118:	2500      	movs	r5, #0
 800111a:	9500      	str	r5, [sp, #0]
 800111c:	f002 fa21 	bl	8003562 <xQueueGenericCreateStatic>
 8001120:	4605      	mov	r5, r0
 8001122:	e7e5      	b.n	80010f0 <osMessageQueueNew+0x40>
      mem = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	e7de      	b.n	80010e6 <osMessageQueueNew+0x36>
    mem = -1;
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	e7db      	b.n	80010e6 <osMessageQueueNew+0x36>
          mem = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	e7d9      	b.n	80010e6 <osMessageQueueNew+0x36>
  hQueue = NULL;
 8001132:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8001134:	4628      	mov	r0, r5
 8001136:	b002      	add	sp, #8
 8001138:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800113a:	2500      	movs	r5, #0
 800113c:	e7fa      	b.n	8001134 <osMessageQueueNew+0x84>
 800113e:	2500      	movs	r5, #0
 8001140:	e7f8      	b.n	8001134 <osMessageQueueNew+0x84>
 8001142:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8001144:	e7f6      	b.n	8001134 <osMessageQueueNew+0x84>

08001146 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8001146:	b510      	push	{r4, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	461c      	mov	r4, r3
 800114c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8001150:	b1c3      	cbz	r3, 8001184 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001152:	b310      	cbz	r0, 800119a <osMessageQueueGet+0x54>
 8001154:	b321      	cbz	r1, 80011a0 <osMessageQueueGet+0x5a>
 8001156:	bb34      	cbnz	r4, 80011a6 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8001158:	2300      	movs	r3, #0
 800115a:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800115c:	aa01      	add	r2, sp, #4
 800115e:	f002 fc48 	bl	80039f2 <xQueueReceiveFromISR>
 8001162:	2801      	cmp	r0, #1
 8001164:	d122      	bne.n	80011ac <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8001166:	9801      	ldr	r0, [sp, #4]
 8001168:	b150      	cbz	r0, 8001180 <osMessageQueueGet+0x3a>
 800116a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800116e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001172:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001176:	f3bf 8f4f 	dsb	sy
 800117a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800117e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8001180:	b002      	add	sp, #8
 8001182:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001184:	b1a8      	cbz	r0, 80011b2 <osMessageQueueGet+0x6c>
 8001186:	b1b9      	cbz	r1, 80011b8 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001188:	4622      	mov	r2, r4
 800118a:	f002 fb83 	bl	8003894 <xQueueReceive>
 800118e:	2801      	cmp	r0, #1
 8001190:	d015      	beq.n	80011be <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8001192:	b1b4      	cbz	r4, 80011c2 <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8001194:	f06f 0001 	mvn.w	r0, #1
 8001198:	e7f2      	b.n	8001180 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800119a:	f06f 0003 	mvn.w	r0, #3
 800119e:	e7ef      	b.n	8001180 <osMessageQueueGet+0x3a>
 80011a0:	f06f 0003 	mvn.w	r0, #3
 80011a4:	e7ec      	b.n	8001180 <osMessageQueueGet+0x3a>
 80011a6:	f06f 0003 	mvn.w	r0, #3
 80011aa:	e7e9      	b.n	8001180 <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 80011ac:	f06f 0002 	mvn.w	r0, #2
 80011b0:	e7e6      	b.n	8001180 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 80011b2:	f06f 0003 	mvn.w	r0, #3
 80011b6:	e7e3      	b.n	8001180 <osMessageQueueGet+0x3a>
 80011b8:	f06f 0003 	mvn.w	r0, #3
 80011bc:	e7e0      	b.n	8001180 <osMessageQueueGet+0x3a>
  stat = osOK;
 80011be:	2000      	movs	r0, #0
 80011c0:	e7de      	b.n	8001180 <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 80011c2:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80011c6:	e7db      	b.n	8001180 <osMessageQueueGet+0x3a>

080011c8 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <vApplicationGetIdleTaskMemory+0x10>)
 80011ca:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <vApplicationGetIdleTaskMemory+0x14>)
 80011ce:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80011d0:	2380      	movs	r3, #128	@ 0x80
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	200009a4 	.word	0x200009a4
 80011dc:	200007a4 	.word	0x200007a4

080011e0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <vApplicationGetTimerTaskMemory+0x10>)
 80011e2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80011e4:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <vApplicationGetTimerTaskMemory+0x14>)
 80011e6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80011e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011ec:	6013      	str	r3, [r2, #0]
}
 80011ee:	4770      	bx	lr
 80011f0:	20000748 	.word	0x20000748
 80011f4:	20000348 	.word	0x20000348

080011f8 <transmit_crc_packet>:
    }
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}

void transmit_crc_packet(uint8_t flag, const uint8_t *buf, size_t size)
{
 80011f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011fc:	b083      	sub	sp, #12
 80011fe:	460f      	mov	r7, r1
 8001200:	4615      	mov	r5, r2
 8001202:	f88d 0007 	strb.w	r0, [sp, #7]
	/* We first calculate the prefix */
    uint16_t packet_size = 0;
	packet_size += 2; // prefix
	packet_size += 1; // flag
	packet_size += 4; // CRC
	packet_size += size; // payload
 8001206:	b296      	uxth	r6, r2
 8001208:	f106 0807 	add.w	r8, r6, #7
 800120c:	fa1f f888 	uxth.w	r8, r8

	/* Converte the size to big endian */
	uint16_t prefix = 0;
	prefix = swap_endian_uint16(sizeof(flag) + size);
 8001210:	3601      	adds	r6, #1
}

// http://en.wikipedia.org/wiki/Endianness
inline uint16_t swap_endian_uint16(uint16_t x)
{
    return ((x << 8) | (x >> 8));
 8001212:	ba76      	rev16	r6, r6

	/* Now we calculate the CRC, over the flag and payload */
	uint32_t crc = 0;
	crc = crc32_inc(0, (void*)&flag, 1); // flag
 8001214:	2201      	movs	r2, #1
 8001216:	f10d 0107 	add.w	r1, sp, #7
 800121a:	2000      	movs	r0, #0
 800121c:	f009 feea 	bl	800aff4 <crc32_inc>
	crc = crc32_inc(crc, buf, size); // payload
 8001220:	462a      	mov	r2, r5
 8001222:	4639      	mov	r1, r7
 8001224:	f009 fee6 	bl	800aff4 <crc32_inc>
}
inline uint32_t swap_endian_uint32(uint32_t x)
{
    return (((x >> 24) & 0x000000ff) | ((x << 8) & 0x00ff0000) |
 8001228:	0204      	lsls	r4, r0, #8
 800122a:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 800122e:	ea44 6410 	orr.w	r4, r4, r0, lsr #24
            ((x >> 8) & 0x0000ff00) | ((x << 24) & 0xff000000));
 8001232:	0a03      	lsrs	r3, r0, #8
 8001234:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    return (((x >> 24) & 0x000000ff) | ((x << 8) & 0x00ff0000) |
 8001238:	431c      	orrs	r4, r3
            ((x >> 8) & 0x0000ff00) | ((x << 24) & 0xff000000));
 800123a:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
	uint32_t suffix = 0;
	suffix = swap_endian_uint32(crc);

	/* Form the packet in the transmit buffer */
	size_t tx_buffer_index = 0;
	memcpy(tx_buffer, &prefix, sizeof(prefix)); // prefix to buffer
 800123e:	f8df 9030 	ldr.w	r9, [pc, #48]	@ 8001270 <transmit_crc_packet+0x78>
 8001242:	f8a9 6000 	strh.w	r6, [r9]
	tx_buffer_index += sizeof(prefix);
	memcpy(tx_buffer + tx_buffer_index, &flag, sizeof(flag)); // flag to buffer
 8001246:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800124a:	f889 3002 	strb.w	r3, [r9, #2]
	tx_buffer_index += sizeof(flag);
	memcpy(tx_buffer + tx_buffer_index, buf, size); // payload to buffer
 800124e:	462a      	mov	r2, r5
 8001250:	4639      	mov	r1, r7
 8001252:	f109 0003 	add.w	r0, r9, #3
 8001256:	f009 ff7d 	bl	800b154 <memcpy>
	tx_buffer_index += size;
 800125a:	3503      	adds	r5, #3
	memcpy(tx_buffer + tx_buffer_index, &suffix, sizeof(suffix)); // suffix to buffer
 800125c:	f849 4005 	str.w	r4, [r9, r5]
	tx_buffer_index += sizeof(suffix);

	/* Finally transmit over USB */

	CDC_Transmit_FS(tx_buffer, packet_size);
 8001260:	4641      	mov	r1, r8
 8001262:	4648      	mov	r0, r9
 8001264:	f008 fedc 	bl	800a020 <CDC_Transmit_FS>
}
 8001268:	b003      	add	sp, #12
 800126a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800126e:	bf00      	nop
 8001270:	20000a04 	.word	0x20000a04

08001274 <send_response>:
{
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	4614      	mov	r4, r2
    if (mode == TS_CRC)
 8001278:	2b01      	cmp	r3, #1
 800127a:	d007      	beq.n	800128c <send_response+0x18>
        if (size > 0)
 800127c:	b94a      	cbnz	r2, 8001292 <send_response+0x1e>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001284:	4807      	ldr	r0, [pc, #28]	@ (80012a4 <send_response+0x30>)
 8001286:	f003 ffa6 	bl	80051d6 <HAL_GPIO_WritePin>
}
 800128a:	bd38      	pop	{r3, r4, r5, pc}
        transmit_crc_packet(flag, data, size);
 800128c:	f7ff ffb4 	bl	80011f8 <transmit_crc_packet>
 8001290:	e7f5      	b.n	800127e <send_response+0xa>
			memcpy(tx_buffer, data, size);
 8001292:	4d05      	ldr	r5, [pc, #20]	@ (80012a8 <send_response+0x34>)
 8001294:	4628      	mov	r0, r5
 8001296:	f009 ff5d 	bl	800b154 <memcpy>
            CDC_Transmit_FS(tx_buffer, size);
 800129a:	b2a1      	uxth	r1, r4
 800129c:	4628      	mov	r0, r5
 800129e:	f008 febf 	bl	800a020 <CDC_Transmit_FS>
 80012a2:	e7ec      	b.n	800127e <send_response+0xa>
 80012a4:	40020800 	.word	0x40020800
 80012a8:	20000a04 	.word	0x20000a04

080012ac <comms_init>:



// ==================== Initialization ====================
void comms_init(void)
{
 80012ac:	b510      	push	{r4, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
	usb_rx_queue = osMessageQueueNew(10, sizeof(usb_packet_ptr_t), NULL);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2108      	movs	r1, #8
 80012b4:	200a      	movs	r0, #10
 80012b6:	f7ff fefb 	bl	80010b0 <osMessageQueueNew>
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <comms_init+0x3c>)
 80012bc:	6018      	str	r0, [r3, #0]

    const osThreadAttr_t comms_task_attrs = {
 80012be:	ac01      	add	r4, sp, #4
 80012c0:	2224      	movs	r2, #36	@ 0x24
 80012c2:	2100      	movs	r1, #0
 80012c4:	4620      	mov	r0, r4
 80012c6:	f009 ff11 	bl	800b0ec <memset>
 80012ca:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <comms_init+0x40>)
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d2:	9306      	str	r3, [sp, #24]
 80012d4:	2328      	movs	r3, #40	@ 0x28
 80012d6:	9307      	str	r3, [sp, #28]
        .name = "comms_task",
        .stack_size = 1024 * 4,
        .priority = osPriorityHigh,
    };
    osThreadNew(comms_task, NULL, &comms_task_attrs);
 80012d8:	4622      	mov	r2, r4
 80012da:	2100      	movs	r1, #0
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <comms_init+0x44>)
 80012de:	f7ff fdef 	bl	8000ec0 <osThreadNew>

}
 80012e2:	b00a      	add	sp, #40	@ 0x28
 80012e4:	bd10      	pop	{r4, pc}
 80012e6:	bf00      	nop
 80012e8:	20000e24 	.word	0x20000e24
 80012ec:	0800cc7c 	.word	0x0800cc7c
 80012f0:	08001525 	.word	0x08001525

080012f4 <process_plain_command>:
    }
}

// ==================== Command Processing ====================
bool process_plain_command(uint8_t *request, uint16_t size)
{
 80012f4:	b508      	push	{r3, lr}
    uint8_t first_byte = request[0];
 80012f6:	7803      	ldrb	r3, [r0, #0]
    switch (first_byte)
 80012f8:	3b43      	subs	r3, #67	@ 0x43
 80012fa:	2b10      	cmp	r3, #16
 80012fc:	d832      	bhi.n	8001364 <process_plain_command+0x70>
 80012fe:	e8df f003 	tbb	[pc, r3]
 8001302:	3121      	.short	0x3121
 8001304:	31310931 	.word	0x31310931
 8001308:	31313129 	.word	0x31313129
 800130c:	31313131 	.word	0x31313131
 8001310:	3119      	.short	0x3119
 8001312:	11          	.byte	0x11
 8001313:	00          	.byte	0x00
    {
    case TS_COMMAND_F:
    #ifndef TS_USE_OLD_PROTOCOL
        send_response(0, (uint8_t*)TS_PROTOCOL, sizeof(TS_PROTOCOL) - 1, TS_PLAIN);
 8001314:	2300      	movs	r3, #0
 8001316:	2203      	movs	r2, #3
 8001318:	4913      	ldr	r1, [pc, #76]	@ (8001368 <process_plain_command+0x74>)
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ffaa 	bl	8001274 <send_response>
        return true;
 8001320:	2001      	movs	r0, #1
 8001322:	e020      	b.n	8001366 <process_plain_command+0x72>
    #endif
        break;
    case TS_HELLO_COMMAND:
        send_response(0, (uint8_t*)TS_SIGNATURE, sizeof(TS_SIGNATURE) - 1, TS_PLAIN);
 8001324:	2300      	movs	r3, #0
 8001326:	2213      	movs	r2, #19
 8001328:	4910      	ldr	r1, [pc, #64]	@ (800136c <process_plain_command+0x78>)
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ffa2 	bl	8001274 <send_response>
        return true;
 8001330:	2001      	movs	r0, #1
 8001332:	e018      	b.n	8001366 <process_plain_command+0x72>
        break;
    case TS_QUERY_COMMAND:
        send_response(0, (uint8_t*)TS_SIGNATURE, sizeof(TS_SIGNATURE) - 1, TS_PLAIN);
 8001334:	2300      	movs	r3, #0
 8001336:	2213      	movs	r2, #19
 8001338:	490c      	ldr	r1, [pc, #48]	@ (800136c <process_plain_command+0x78>)
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff9a 	bl	8001274 <send_response>
        return true;
 8001340:	2001      	movs	r0, #1
 8001342:	e010      	b.n	8001366 <process_plain_command+0x72>
        break;
    case TS_TEST_COMMS_COMMAND:
        send_response(0, (uint8_t *)0xFF, 1, TS_PLAIN);
 8001344:	2300      	movs	r3, #0
 8001346:	2201      	movs	r2, #1
 8001348:	21ff      	movs	r1, #255	@ 0xff
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff92 	bl	8001274 <send_response>
        return true;
 8001350:	2001      	movs	r0, #1
 8001352:	e008      	b.n	8001366 <process_plain_command+0x72>
        break;
    case TS_CAN_ID_COMMAND:
        send_response(0, (uint8_t*)TS_CAN_ID, sizeof(TS_CAN_ID) - 1, TS_PLAIN);
 8001354:	2300      	movs	r3, #0
 8001356:	461a      	mov	r2, r3
 8001358:	4619      	mov	r1, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff8a 	bl	8001274 <send_response>
        return true;
 8001360:	2001      	movs	r0, #1
 8001362:	e000      	b.n	8001366 <process_plain_command+0x72>
    switch (first_byte)
 8001364:	2000      	movs	r0, #0
        break;
    }
        // This wasn't a valid command
        return false;
    
}
 8001366:	bd08      	pop	{r3, pc}
 8001368:	0800cc88 	.word	0x0800cc88
 800136c:	0800cc8c 	.word	0x0800cc8c

08001370 <handle_page_read_command>:
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

void handle_page_read_command(uint16_t page, uint16_t offset, uint16_t count)
{
	if (page > 1)
 8001370:	2801      	cmp	r0, #1
 8001372:	d80c      	bhi.n	800138e <handle_page_read_command+0x1e>
{
 8001374:	b508      	push	{r3, lr}
	{
		return;
	}
	if ((offset + count) > TS_PAGE_SIZE)
 8001376:	188b      	adds	r3, r1, r2
 8001378:	f5b3 5f96 	cmp.w	r3, #4800	@ 0x12c0
 800137c:	d900      	bls.n	8001380 <handle_page_read_command+0x10>
	{
		return;
	}
    
	send_response(TS_RESPONSE_OK, (uint8_t*)&config + offset, count, TS_CRC);
}
 800137e:	bd08      	pop	{r3, pc}
	send_response(TS_RESPONSE_OK, (uint8_t*)&config + offset, count, TS_CRC);
 8001380:	2301      	movs	r3, #1
 8001382:	4803      	ldr	r0, [pc, #12]	@ (8001390 <handle_page_read_command+0x20>)
 8001384:	4401      	add	r1, r0
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff ff74 	bl	8001274 <send_response>
 800138c:	e7f7      	b.n	800137e <handle_page_read_command+0xe>
 800138e:	4770      	bx	lr
 8001390:	20000f28 	.word	0x20000f28

08001394 <process_command>:
{
 8001394:	b530      	push	{r4, r5, lr}
 8001396:	b083      	sub	sp, #12
 8001398:	4605      	mov	r5, r0
 800139a:	460c      	mov	r4, r1
    if (process_plain_command(request, size))
 800139c:	f7ff ffaa 	bl	80012f4 <process_plain_command>
 80013a0:	2800      	cmp	r0, #0
 80013a2:	f040 80b3 	bne.w	800150c <process_command+0x178>
    if (size > 5)
 80013a6:	2c05      	cmp	r4, #5
 80013a8:	d821      	bhi.n	80013ee <process_command+0x5a>
    uint8_t command = request[2];
 80013aa:	78ab      	ldrb	r3, [r5, #2]
    switch (command)
 80013ac:	3b42      	subs	r3, #66	@ 0x42
 80013ae:	2b35      	cmp	r3, #53	@ 0x35
 80013b0:	f200 80a7 	bhi.w	8001502 <process_command+0x16e>
 80013b4:	e8df f003 	tbb	[pc, r3]
 80013b8:	a5a5209b 	.word	0xa5a5209b
 80013bc:	2ea5a527 	.word	0x2ea5a527
 80013c0:	a5a5a5a5 	.word	0xa5a5a5a5
 80013c4:	35a552a5 	.word	0x35a552a5
 80013c8:	a5a53ca5 	.word	0xa5a53ca5
 80013cc:	a5a57ba5 	.word	0xa5a57ba5
 80013d0:	a5a5a5a5 	.word	0xa5a5a5a5
 80013d4:	a5a5a5a5 	.word	0xa5a5a5a5
 80013d8:	a5a5a5a5 	.word	0xa5a5a5a5
 80013dc:	a5a5a543 	.word	0xa5a5a543
 80013e0:	a5a561a5 	.word	0xa5a561a5
 80013e4:	a5a5a5a5 	.word	0xa5a5a5a5
 80013e8:	a5a5a559 	.word	0xa5a5a559
 80013ec:	8ba5      	.short	0x8ba5
        calculated_packet_crc = crc32_inc(0, (void *)(request + TS_PACKET_PREFIX_SIZE), size - TS_PACKET_PREFIX_SIZE - TS_PACKET_CRC_SIZE);
 80013ee:	1fa2      	subs	r2, r4, #6
 80013f0:	1ca9      	adds	r1, r5, #2
 80013f2:	f009 fdff 	bl	800aff4 <crc32_inc>
 80013f6:	e7d8      	b.n	80013aa <process_command+0x16>
        send_response(TS_RESPONSE_OK, (uint8_t *)0xFF, 1, TS_CRC);
 80013f8:	2301      	movs	r3, #1
 80013fa:	461a      	mov	r2, r3
 80013fc:	21ff      	movs	r1, #255	@ 0xff
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff ff38 	bl	8001274 <send_response>
        return;
 8001404:	e082      	b.n	800150c <process_command+0x178>
        send_response(TS_RESPONSE_OK, (uint8_t *)TS_PROTOCOL, sizeof(TS_PROTOCOL) - 1, TS_CRC);
 8001406:	2301      	movs	r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	4941      	ldr	r1, [pc, #260]	@ (8001510 <process_command+0x17c>)
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff ff31 	bl	8001274 <send_response>
        return;
 8001412:	e07b      	b.n	800150c <process_command+0x178>
        send_response(TS_RESPONSE_OK, (uint8_t *)TS_CAN_ID, sizeof(TS_CAN_ID), TS_CRC);
 8001414:	2301      	movs	r3, #1
 8001416:	461a      	mov	r2, r3
 8001418:	2100      	movs	r1, #0
 800141a:	4608      	mov	r0, r1
 800141c:	f7ff ff2a 	bl	8001274 <send_response>
        return;
 8001420:	e074      	b.n	800150c <process_command+0x178>
        send_response(TS_RESPONSE_OK, (uint8_t *)TS_SIGNATURE, sizeof(TS_SIGNATURE) - 1, TS_CRC);
 8001422:	2301      	movs	r3, #1
 8001424:	2213      	movs	r2, #19
 8001426:	493b      	ldr	r1, [pc, #236]	@ (8001514 <process_command+0x180>)
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff ff23 	bl	8001274 <send_response>
        return;
 800142e:	e06d      	b.n	800150c <process_command+0x178>
        send_response(TS_RESPONSE_OK, (uint8_t *)TS_SIGNATURE, sizeof(TS_SIGNATURE), TS_CRC);
 8001430:	2301      	movs	r3, #1
 8001432:	2214      	movs	r2, #20
 8001434:	4937      	ldr	r1, [pc, #220]	@ (8001514 <process_command+0x180>)
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff ff1c 	bl	8001274 <send_response>
        return;
 800143c:	e066      	b.n	800150c <process_command+0x178>
        response[0] = 2; // serial version
 800143e:	2302      	movs	r3, #2
 8001440:	f88d 3000 	strb.w	r3, [sp]
        *(uint16_t *)&response[1] = swap_endian_uint16(TS_TABLE_BLOCKING_FACTOR);
 8001444:	2304      	movs	r3, #4
 8001446:	f8ad 3001 	strh.w	r3, [sp, #1]
        *(uint16_t *)&response[3] = swap_endian_uint16(TS_BLOCKING_FACTOR);
 800144a:	f8ad 3003 	strh.w	r3, [sp, #3]
        send_response(TS_RESPONSE_OK, (uint8_t *)response, sizeof(response), TS_CRC);
 800144e:	2301      	movs	r3, #1
 8001450:	2205      	movs	r2, #5
 8001452:	4669      	mov	r1, sp
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff ff0d 	bl	8001274 <send_response>
        return;
 800145a:	e057      	b.n	800150c <process_command+0x178>
        send_response(TS_RESPONSE_OK, (uint8_t *)&runtime, sizeof(runtime), TS_CRC);
 800145c:	2301      	movs	r3, #1
 800145e:	2254      	movs	r2, #84	@ 0x54
 8001460:	492d      	ldr	r1, [pc, #180]	@ (8001518 <process_command+0x184>)
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff ff06 	bl	8001274 <send_response>
        return;
 8001468:	e050      	b.n	800150c <process_command+0x178>
        handle_page_read_command(page, offset, size);
 800146a:	f8b5 2005 	ldrh.w	r2, [r5, #5]
 800146e:	f8b5 1003 	ldrh.w	r1, [r5, #3]
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff ff7c 	bl	8001370 <handle_page_read_command>
        return;
 8001478:	e048      	b.n	800150c <process_command+0x178>
        uint32_t page_crc = crc32_inc(0, (uint8_t *)&config, sizeof(config));
 800147a:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 800147e:	4927      	ldr	r1, [pc, #156]	@ (800151c <process_command+0x188>)
 8001480:	2000      	movs	r0, #0
 8001482:	f009 fdb7 	bl	800aff4 <crc32_inc>
 8001486:	9000      	str	r0, [sp, #0]
    return (((x >> 24) & 0x000000ff) | ((x << 8) & 0x00ff0000) |
 8001488:	0203      	lsls	r3, r0, #8
 800148a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800148e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
            ((x >> 8) & 0x0000ff00) | ((x << 24) & 0xff000000));
 8001492:	0a02      	lsrs	r2, r0, #8
 8001494:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
    return (((x >> 24) & 0x000000ff) | ((x << 8) & 0x00ff0000) |
 8001498:	4313      	orrs	r3, r2
            ((x >> 8) & 0x0000ff00) | ((x << 24) & 0xff000000));
 800149a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
        page_crc = swap_endian_uint32(page_crc);
 800149e:	9300      	str	r3, [sp, #0]
        send_response(TS_RESPONSE_OK, (uint8_t *)&page_crc, sizeof(page_crc), TS_CRC);
 80014a0:	2301      	movs	r3, #1
 80014a2:	2204      	movs	r2, #4
 80014a4:	4669      	mov	r1, sp
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff fee4 	bl	8001274 <send_response>
        return;
 80014ac:	e02e      	b.n	800150c <process_command+0x178>
        uint16_t offset = *(uint16_t *)&request[3];
 80014ae:	f8b5 3003 	ldrh.w	r3, [r5, #3]
        memcpy((uint8_t *)&config + offset, &request[7], size);
 80014b2:	f8b5 2005 	ldrh.w	r2, [r5, #5]
 80014b6:	1de9      	adds	r1, r5, #7
 80014b8:	4818      	ldr	r0, [pc, #96]	@ (800151c <process_command+0x188>)
 80014ba:	4418      	add	r0, r3
 80014bc:	f009 fe4a 	bl	800b154 <memcpy>
        send_response(TS_RESPONSE_OK, NULL, 0, TS_CRC);
 80014c0:	2301      	movs	r3, #1
 80014c2:	2200      	movs	r2, #0
 80014c4:	4611      	mov	r1, r2
 80014c6:	4610      	mov	r0, r2
 80014c8:	f7ff fed4 	bl	8001274 <send_response>
        return;
 80014cc:	e01e      	b.n	800150c <process_command+0x178>
        uint16_t offset = *(uint16_t *)&request[3];
 80014ce:	f8b5 3003 	ldrh.w	r3, [r5, #3]
        memcpy((uint8_t *)&config + offset, &request[7], size);
 80014d2:	f8b5 2005 	ldrh.w	r2, [r5, #5]
 80014d6:	1de9      	adds	r1, r5, #7
 80014d8:	4810      	ldr	r0, [pc, #64]	@ (800151c <process_command+0x188>)
 80014da:	4418      	add	r0, r3
 80014dc:	f009 fe3a 	bl	800b154 <memcpy>
        send_response(TS_RESPONSE_OK, NULL, 0, TS_CRC);
 80014e0:	2301      	movs	r3, #1
 80014e2:	2200      	movs	r2, #0
 80014e4:	4611      	mov	r1, r2
 80014e6:	4610      	mov	r0, r2
 80014e8:	f7ff fec4 	bl	8001274 <send_response>
        return;
 80014ec:	e00e      	b.n	800150c <process_command+0x178>
        if (controller_save_configuration())
 80014ee:	f000 fb0b 	bl	8001b08 <controller_save_configuration>
 80014f2:	b158      	cbz	r0, 800150c <process_command+0x178>
            send_response(TS_RESPONSE_BURN_OK, NULL, 0, TS_CRC);
 80014f4:	2301      	movs	r3, #1
 80014f6:	2200      	movs	r2, #0
 80014f8:	4611      	mov	r1, r2
 80014fa:	2004      	movs	r0, #4
 80014fc:	f7ff feba 	bl	8001274 <send_response>
 8001500:	e004      	b.n	800150c <process_command+0x178>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001502:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001506:	4806      	ldr	r0, [pc, #24]	@ (8001520 <process_command+0x18c>)
 8001508:	f003 fe6b 	bl	80051e2 <HAL_GPIO_TogglePin>
}
 800150c:	b003      	add	sp, #12
 800150e:	bd30      	pop	{r4, r5, pc}
 8001510:	0800cc88 	.word	0x0800cc88
 8001514:	0800cc8c 	.word	0x0800cc8c
 8001518:	20000ed0 	.word	0x20000ed0
 800151c:	20000f28 	.word	0x20000f28
 8001520:	40020800 	.word	0x40020800

08001524 <comms_task>:
{
 8001524:	b500      	push	{lr}
 8001526:	b083      	sub	sp, #12
        if (osMessageQueueGet(usb_rx_queue, &packet, NULL, osWaitForever) == osOK)
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	2200      	movs	r2, #0
 800152e:	4669      	mov	r1, sp
 8001530:	4805      	ldr	r0, [pc, #20]	@ (8001548 <comms_task+0x24>)
 8001532:	6800      	ldr	r0, [r0, #0]
 8001534:	f7ff fe07 	bl	8001146 <osMessageQueueGet>
 8001538:	2800      	cmp	r0, #0
 800153a:	d1f5      	bne.n	8001528 <comms_task+0x4>
            process_command(packet.data, packet.len);
 800153c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8001540:	9800      	ldr	r0, [sp, #0]
 8001542:	f7ff ff27 	bl	8001394 <process_command>
 8001546:	e7ef      	b.n	8001528 <comms_task+0x4>
 8001548:	20000e24 	.word	0x20000e24

0800154c <controller_long_routines_task>:
  return state;
}


void controller_long_routines_task(void *arg)
{
 800154c:	b508      	push	{r3, lr}
  // uint32_t next_routine_time_ticks = 1000;
  for (;;)
  {
    runtime.seconds = get_time_ms() / 1000;
 800154e:	f008 f82b 	bl	80095a8 <get_time_ms>
 8001552:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <controller_long_routines_task+0x28>)
 8001554:	fba3 3000 	umull	r3, r0, r3, r0
 8001558:	0980      	lsrs	r0, r0, #6
 800155a:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <controller_long_routines_task+0x2c>)
 800155c:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800155e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001562:	4806      	ldr	r0, [pc, #24]	@ (800157c <controller_long_routines_task+0x30>)
 8001564:	f003 fe3d 	bl	80051e2 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001568:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800156c:	f7ff fd02 	bl	8000f74 <osDelay>
  for (;;)
 8001570:	e7ed      	b.n	800154e <controller_long_routines_task+0x2>
 8001572:	bf00      	nop
 8001574:	10624dd3 	.word	0x10624dd3
 8001578:	20000ed0 	.word	0x20000ed0
 800157c:	40020800 	.word	0x40020800

08001580 <controller_sensor_task>:
    // osDelayUntil(next_routine_time_ticks);
  }
}

void controller_sensor_task(void *arg)
{
 8001580:	b508      	push	{r3, lr}
  for (;;)
  {
    runtime.tps1 = sensor_tps_get(&tps1);
 8001582:	4809      	ldr	r0, [pc, #36]	@ (80015a8 <controller_sensor_task+0x28>)
 8001584:	f002 fb22 	bl	8003bcc <sensor_tps_get>
 8001588:	4c08      	ldr	r4, [pc, #32]	@ (80015ac <controller_sensor_task+0x2c>)
 800158a:	ed84 0a0a 	vstr	s0, [r4, #40]	@ 0x28
    runtime.clt_degc = sensor_clt_get();
 800158e:	f002 fcdf 	bl	8003f50 <sensor_clt_get>
 8001592:	ed84 0a0e 	vstr	s0, [r4, #56]	@ 0x38
    runtime.iat_degc = sensor_iat_get();
 8001596:	f002 fc57 	bl	8003e48 <sensor_iat_get>
 800159a:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
    // runtime.map_kpa = sensor_map_get();
    // runtime.oil_pressure_ok = sensor_ops_get();
    osDelay(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff fce8 	bl	8000f74 <osDelay>
  for (;;)
 80015a4:	e7ed      	b.n	8001582 <controller_sensor_task+0x2>
 80015a6:	bf00      	nop
 80015a8:	2000005c 	.word	0x2000005c
 80015ac:	20000ed0 	.word	0x20000ed0

080015b0 <controller_test_task>:
  }
}
void controller_test_task(void *arg)
{
 80015b0:	b508      	push	{r3, lr}
  osDelay(100);
 80015b2:	2064      	movs	r0, #100	@ 0x64
 80015b4:	f7ff fcde 	bl	8000f74 <osDelay>
  trigger_simulator_init(60, 2, trigger_tooth_handle, &trigger1);
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <controller_test_task+0x2c>)
 80015ba:	4a09      	ldr	r2, [pc, #36]	@ (80015e0 <controller_test_task+0x30>)
 80015bc:	2102      	movs	r1, #2
 80015be:	203c      	movs	r0, #60	@ 0x3c
 80015c0:	f008 f9f6 	bl	80099b0 <trigger_simulator_init>
  static rpm_t simulated_rpm = 1000;
  for (;;)
  {
    // simulated_rpm = (rpm_t)mapf((float)analog_inputs_get_data(ANALOG_INPUT_ETB2_SENSE2), 0.0f, 4095.0f, 10.0f, 1000.0f);
    simulated_rpm = 500;
 80015c4:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80015e4 <controller_test_task+0x34>
 80015c8:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <controller_test_task+0x38>)
 80015ca:	ed83 0a00 	vstr	s0, [r3]
    trigger_simulator_update(simulated_rpm);
 80015ce:	f008 fa03 	bl	80099d8 <trigger_simulator_update>
    osDelay(1);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f7ff fcce 	bl	8000f74 <osDelay>
  for (;;)
 80015d8:	e7f4      	b.n	80015c4 <controller_test_task+0x14>
 80015da:	bf00      	nop
 80015dc:	20000e30 	.word	0x20000e30
 80015e0:	080097f9 	.word	0x080097f9
 80015e4:	43fa0000 	.word	0x43fa0000
 80015e8:	20000e28 	.word	0x20000e28

080015ec <controller_load_test_configuration>:
{
 80015ec:	b510      	push	{r4, lr}
 80015ee:	ed2d 8b02 	vpush	{d8}
  for (size_t i = 0; i < TABLE_PRIMARY_SIZE_X; i++)
 80015f2:	2400      	movs	r4, #0
 80015f4:	e038      	b.n	8001668 <controller_load_test_configuration+0x7c>
      float map_factor = (float)j / (TABLE_PRIMARY_SIZE_Y - 1); // 0..1 across MAP/load
 80015f6:	ee07 1a90 	vmov	s15, r1
 80015fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015fe:	eef2 7a0e 	vmov.f32	s15, #46	@ 0x41700000  15.0
 8001602:	eec7 6a27 	vdiv.f32	s13, s14, s15
      config.ve_table_1.data[i][j] = 20.0f + 70.0f * ve_rpm_scale * map_factor;
 8001606:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80018cc <controller_load_test_configuration+0x2e0>
 800160a:	ee26 7a07 	vmul.f32	s14, s12, s14
 800160e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001612:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 8001616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800161a:	4bad      	ldr	r3, [pc, #692]	@ (80018d0 <controller_load_test_configuration+0x2e4>)
 800161c:	eb01 1204 	add.w	r2, r1, r4, lsl #4
 8001620:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001624:	ed80 7a00 	vstr	s14, [r0]
      config.ve_table_2.data[i][j] = 20.0f + 70.0f * ve_rpm_scale * map_factor;
 8001628:	f502 7090 	add.w	r0, r2, #288	@ 0x120
 800162c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001630:	ed80 7a00 	vstr	s14, [r0]
      config.ign_table_1.data[i][j] = 10.0f + 20.0f * rpm_factor - 10.0f * map_factor;
 8001634:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001638:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800163c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001640:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001644:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001648:	f502 7010 	add.w	r0, r2, #576	@ 0x240
 800164c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001650:	edc0 7a00 	vstr	s15, [r0]
      config.ign_table_2.data[i][j] = 10.0f + 20.0f * rpm_factor - 10.0f * map_factor;
 8001654:	f502 7258 	add.w	r2, r2, #864	@ 0x360
 8001658:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800165c:	edc3 7a00 	vstr	s15, [r3]
    for (size_t j = 0; j < TABLE_PRIMARY_SIZE_Y; j++)
 8001660:	3101      	adds	r1, #1
 8001662:	290f      	cmp	r1, #15
 8001664:	d9c7      	bls.n	80015f6 <controller_load_test_configuration+0xa>
  for (size_t i = 0; i < TABLE_PRIMARY_SIZE_X; i++)
 8001666:	3401      	adds	r4, #1
 8001668:	2c0f      	cmp	r4, #15
 800166a:	d817      	bhi.n	800169c <controller_load_test_configuration+0xb0>
    float rpm_factor = (float)i / (TABLE_PRIMARY_SIZE_X - 1); // 0..1 across RPM
 800166c:	ee07 4a90 	vmov	s15, r4
 8001670:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001674:	eef2 7a0e 	vmov.f32	s15, #46	@ 0x41700000  15.0
 8001678:	ee87 8a27 	vdiv.f32	s16, s14, s15
    float ve_rpm_scale = 0.8f * sinf(rpm_factor * 3.14159f) + 0.2f; // 0.2..1.0
 800167c:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 80018d4 <controller_load_test_configuration+0x2e8>
 8001680:	ee28 0a00 	vmul.f32	s0, s16, s0
 8001684:	f00a f9e6 	bl	800ba54 <sinf>
 8001688:	eddf 7a93 	vldr	s15, [pc, #588]	@ 80018d8 <controller_load_test_configuration+0x2ec>
 800168c:	ee20 6a27 	vmul.f32	s12, s0, s15
 8001690:	eddf 7a92 	vldr	s15, [pc, #584]	@ 80018dc <controller_load_test_configuration+0x2f0>
 8001694:	ee36 6a27 	vadd.f32	s12, s12, s15
    for (size_t j = 0; j < TABLE_PRIMARY_SIZE_Y; j++)
 8001698:	2100      	movs	r1, #0
 800169a:	e7e2      	b.n	8001662 <controller_load_test_configuration+0x76>
  for (size_t i = 0; i < TABLE_PRIMARY_SIZE_X; i++)
 800169c:	2200      	movs	r2, #0
 800169e:	e022      	b.n	80016e6 <controller_load_test_configuration+0xfa>
    config.ve_table_1.x_bins[i] = i * FIRMWARE_LIMIT_MAX_RPM / TABLE_PRIMARY_SIZE_X;
 80016a0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80016a4:	fb02 f303 	mul.w	r3, r2, r3
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016b2:	4b87      	ldr	r3, [pc, #540]	@ (80018d0 <controller_load_test_configuration+0x2e4>)
 80016b4:	f502 7180 	add.w	r1, r2, #256	@ 0x100
 80016b8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80016bc:	edc1 7a00 	vstr	s15, [r1]
    config.ve_table_2.x_bins[i] = i * FIRMWARE_LIMIT_MAX_RPM / TABLE_PRIMARY_SIZE_X;
 80016c0:	f502 7108 	add.w	r1, r2, #544	@ 0x220
 80016c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80016c8:	edc1 7a00 	vstr	s15, [r1]
    config.ign_table_1.x_bins[i] = i * FIRMWARE_LIMIT_MAX_RPM / TABLE_PRIMARY_SIZE_X;
 80016cc:	f502 7150 	add.w	r1, r2, #832	@ 0x340
 80016d0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80016d4:	edc1 7a00 	vstr	s15, [r1]
    config.ign_table_2.x_bins[i] = i * FIRMWARE_LIMIT_MAX_RPM / TABLE_PRIMARY_SIZE_X;
 80016d8:	f502 618c 	add.w	r1, r2, #1120	@ 0x460
 80016dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80016e0:	edc3 7a00 	vstr	s15, [r3]
  for (size_t i = 0; i < TABLE_PRIMARY_SIZE_X; i++)
 80016e4:	3201      	adds	r2, #1
 80016e6:	2a0f      	cmp	r2, #15
 80016e8:	d9da      	bls.n	80016a0 <controller_load_test_configuration+0xb4>
  for (size_t i = 0; i < TABLE_PRIMARY_SIZE_Y; i++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	e025      	b.n	800173a <controller_load_test_configuration+0x14e>
    config.ve_table_1.y_bins[i] = i * FIRMWARE_LIMIT_MAX_MAP / TABLE_PRIMARY_SIZE_Y;
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f6:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80018e0 <controller_load_test_configuration+0x2f4>
 80016fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fe:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 80018e4 <controller_load_test_configuration+0x2f8>
 8001702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001706:	4a72      	ldr	r2, [pc, #456]	@ (80018d0 <controller_load_test_configuration+0x2e4>)
 8001708:	f503 7188 	add.w	r1, r3, #272	@ 0x110
 800170c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8001710:	edc1 7a00 	vstr	s15, [r1]
    config.ve_table_2.y_bins[i] = i * FIRMWARE_LIMIT_MAX_MAP / TABLE_PRIMARY_SIZE_Y;
 8001714:	f503 710c 	add.w	r1, r3, #560	@ 0x230
 8001718:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800171c:	edc1 7a00 	vstr	s15, [r1]
    config.ign_table_1.y_bins[i] = i * FIRMWARE_LIMIT_MAX_MAP / TABLE_PRIMARY_SIZE_Y;
 8001720:	f503 7154 	add.w	r1, r3, #848	@ 0x350
 8001724:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8001728:	edc1 7a00 	vstr	s15, [r1]
    config.ign_table_2.y_bins[i] = i * FIRMWARE_LIMIT_MAX_MAP / TABLE_PRIMARY_SIZE_Y;
 800172c:	f503 618e 	add.w	r1, r3, #1136	@ 0x470
 8001730:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001734:	edc2 7a00 	vstr	s15, [r2]
  for (size_t i = 0; i < TABLE_PRIMARY_SIZE_Y; i++)
 8001738:	3301      	adds	r3, #1
 800173a:	2b0f      	cmp	r3, #15
 800173c:	d9d7      	bls.n	80016ee <controller_load_test_configuration+0x102>
  config.cranking_rpm_threshold = 400.0f;
 800173e:	4964      	ldr	r1, [pc, #400]	@ (80018d0 <controller_load_test_configuration+0x2e4>)
 8001740:	f501 5380 	add.w	r3, r1, #4096	@ 0x1000
 8001744:	4a68      	ldr	r2, [pc, #416]	@ (80018e8 <controller_load_test_configuration+0x2fc>)
 8001746:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  config.cranking_advance = 8.0f;
 800174a:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800174e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  config.cranking_throttle = 10.0f;
 8001752:	4a66      	ldr	r2, [pc, #408]	@ (80018ec <controller_load_test_configuration+0x300>)
 8001754:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  config.ignition_dwell = 2.0f;
 8001758:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800175c:	f8c3 020c 	str.w	r0, [r3, #524]	@ 0x20c
  config.multi_spark_rpm_threshold = 3500.0f;
 8001760:	4863      	ldr	r0, [pc, #396]	@ (80018f0 <controller_load_test_configuration+0x304>)
 8001762:	f8c3 0210 	str.w	r0, [r3, #528]	@ 0x210
  config.multi_spark_rest_time_ms = 1.0f;
 8001766:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
 800176a:	f8c3 c214 	str.w	ip, [r3, #532]	@ 0x214
  config.multi_spark_max_trailing_angle = 15.0f;
 800176e:	4861      	ldr	r0, [pc, #388]	@ (80018f4 <controller_load_test_configuration+0x308>)
 8001770:	f8c3 0218 	str.w	r0, [r3, #536]	@ 0x218
  config.stoich_afr_gas = 14.7f;
 8001774:	4860      	ldr	r0, [pc, #384]	@ (80018f8 <controller_load_test_configuration+0x30c>)
 8001776:	f8c3 021c 	str.w	r0, [r3, #540]	@ 0x21c
  config.stoich_afr_petrol = 14.7f;
 800177a:	f8c3 0220 	str.w	r0, [r3, #544]	@ 0x220
  config.governer_target_rpm = 1500.0f;
 800177e:	485f      	ldr	r0, [pc, #380]	@ (80018fc <controller_load_test_configuration+0x310>)
 8001780:	f8c3 0224 	str.w	r0, [r3, #548]	@ 0x224
  config.governer_idle_rpm = 850.0f;
 8001784:	485e      	ldr	r0, [pc, #376]	@ (8001900 <controller_load_test_configuration+0x314>)
 8001786:	f8c3 0228 	str.w	r0, [r3, #552]	@ 0x228
  config.governer_pid_Kp = 10.0f;
 800178a:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
  config.governer_pid_Ki = 0.5f;
 800178e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001792:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  config.governer_pid_Kd = 0.1f;
 8001796:	4a5b      	ldr	r2, [pc, #364]	@ (8001904 <controller_load_test_configuration+0x318>)
 8001798:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  config.governer_pid_limit_integrator_min = -100.0f;
 800179c:	485a      	ldr	r0, [pc, #360]	@ (8001908 <controller_load_test_configuration+0x31c>)
 800179e:	f8c3 0238 	str.w	r0, [r3, #568]	@ 0x238
  config.governer_pid_limit_integrator_max = 100.0f;
 80017a2:	4c5a      	ldr	r4, [pc, #360]	@ (800190c <controller_load_test_configuration+0x320>)
 80017a4:	f8c3 423c 	str.w	r4, [r3, #572]	@ 0x23c
  config.governer_pid_derivative_filter_tau = 0.1f;
 80017a8:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
  config.etb1_pid_Kp = 20.0f;
 80017ac:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 80017b0:	edc3 7a91 	vstr	s15, [r3, #580]	@ 0x244
  config.etb1_pid_Ki = 1.0f;
 80017b4:	f8c3 c248 	str.w	ip, [r3, #584]	@ 0x248
  config.etb1_pid_Kd = 0.0f;
 80017b8:	2000      	movs	r0, #0
 80017ba:	f8c3 024c 	str.w	r0, [r3, #588]	@ 0x24c
  config.etb1_pid_limit_integrator_min = 0.0f;
 80017be:	f8c3 0250 	str.w	r0, [r3, #592]	@ 0x250
  config.etb1_pid_limit_integrator_max = 255.0f;
 80017c2:	f8df e158 	ldr.w	lr, [pc, #344]	@ 800191c <controller_load_test_configuration+0x330>
 80017c6:	f8c3 e254 	str.w	lr, [r3, #596]	@ 0x254
  config.etb1_pid_derivative_filter_tau = 0.1f;
 80017ca:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
  config.etb2_pid_Kp = 20.0f;
 80017ce:	edc3 7a97 	vstr	s15, [r3, #604]	@ 0x25c
  config.etb2_pid_Ki = 1.0f;
 80017d2:	f8c3 c260 	str.w	ip, [r3, #608]	@ 0x260
  config.etb2_pid_Kd = 0.0f;
 80017d6:	f8c3 0264 	str.w	r0, [r3, #612]	@ 0x264
  config.etb2_pid_limit_integrator_min = 0.0f;
 80017da:	f8c3 0268 	str.w	r0, [r3, #616]	@ 0x268
  config.etb2_pid_limit_integrator_max = 255.0f;
 80017de:	f8c3 e26c 	str.w	lr, [r3, #620]	@ 0x26c
  config.etb2_pid_derivative_filter_tau = 0.1f;
 80017e2:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270
  config.protection_clt_shutdown_temprature = 110.0f;
 80017e6:	4a4a      	ldr	r2, [pc, #296]	@ (8001910 <controller_load_test_configuration+0x324>)
 80017e8:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
  config.protection_clt_load_disconnect_temprature = 100.0f;
 80017ec:	f8c3 4278 	str.w	r4, [r3, #632]	@ 0x278
  config.fan1_on_temp = 95.0f;
 80017f0:	4a48      	ldr	r2, [pc, #288]	@ (8001914 <controller_load_test_configuration+0x328>)
 80017f2:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c
  config.fan1_off_temp = 90.0f;
 80017f6:	4848      	ldr	r0, [pc, #288]	@ (8001918 <controller_load_test_configuration+0x32c>)
 80017f8:	f8c3 0280 	str.w	r0, [r3, #640]	@ 0x280
  config.fan2_on_temp = 100.0f;
 80017fc:	f8c3 4284 	str.w	r4, [r3, #644]	@ 0x284
  config.fan2_off_temp = 95.0f;
 8001800:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
  config.rpm_limiter = 4000;
 8001804:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001808:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
  config.engine_displacement_cc = 2400;
 800180c:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001810:	f8a3 228e 	strh.w	r2, [r3, #654]	@ 0x28e
  config.tps1_calib_wide_open_throttle_adc_value = 3000;
 8001814:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001818:	f8a3 0290 	strh.w	r0, [r3, #656]	@ 0x290
  config.tps1_calib_closed_throttle_adc_value = 1700;
 800181c:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001820:	f8a3 2292 	strh.w	r2, [r3, #658]	@ 0x292
  config.tps2_calib_wide_open_throttle_adc_value = 3000;
 8001824:	f8a3 0294 	strh.w	r0, [r3, #660]	@ 0x294
  config.tps2_calib_closed_throttle_adc_value = 1700;
 8001828:	f8a3 2296 	strh.w	r2, [r3, #662]	@ 0x296
  config.firing_order = FO_1342;
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2298 	strb.w	r2, [r3, #664]	@ 0x298
  config.fuel_type = FUEL_TYPE_GAS;
 8001832:	f883 2299 	strb.w	r2, [r3, #665]	@ 0x299
  config.trigger1_type = TW_58_TOOTH_2_MISSING;
 8001836:	f883 229a 	strb.w	r2, [r3, #666]	@ 0x29a
  config.trigger1_filtering = TRIGGER_FILTERING_LITE;
 800183a:	2001      	movs	r0, #1
 800183c:	f883 029b 	strb.w	r0, [r3, #667]	@ 0x29b
  config.trigger2_type = 0;
 8001840:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  config.trigger2_filtering = 0;
 8001844:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  config.trigger2_enabled = 0;
 8001848:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
  config.number_of_injectors = 4;
 800184c:	2404      	movs	r4, #4
 800184e:	f883 429f 	strb.w	r4, [r3, #671]	@ 0x29f
  config.injection_mode = IM_SIMULTANEOUS;
 8001852:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
  config.ignition_mode = IM_INDIVIDUAL_COILS;
 8001856:	2402      	movs	r4, #2
 8001858:	f883 42a1 	strb.w	r4, [r3, #673]	@ 0x2a1
  config.multi_spark_enabled = 0;
 800185c:	f883 22a2 	strb.w	r2, [r3, #674]	@ 0x2a2
  config.multi_spark_number_of_sparks = 5;
 8001860:	2405      	movs	r4, #5
 8001862:	f883 42a3 	strb.w	r4, [r3, #675]	@ 0x2a3
  config.tps1_calib_is_inverted = 0;
 8001866:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4
  config.tps2_calib_is_inverted = 0;
 800186a:	f883 22a5 	strb.w	r2, [r3, #677]	@ 0x2a5
  config.sensor_clt_type = SENSOR_CLT_TYPE_TEST;
 800186e:	f883 22a6 	strb.w	r2, [r3, #678]	@ 0x2a6
  config.sensor_iat_type = SENSOR_IAT_TYPE_TEST;
 8001872:	f883 22a7 	strb.w	r2, [r3, #679]	@ 0x2a7
  config.sensor_map_type = SENSOR_MAP_TYPE_TEST;
 8001876:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  config.protection_oil_pressure_time = 3;
 800187a:	2403      	movs	r4, #3
 800187c:	f883 42a9 	strb.w	r4, [r3, #681]	@ 0x2a9
  config.protection_oil_pressure_enabled = 0;
 8001880:	f883 22aa 	strb.w	r2, [r3, #682]	@ 0x2aa
  config.protection_clt_enabled = 0;
 8001884:	f883 22ab 	strb.w	r2, [r3, #683]	@ 0x2ab
  config.protection_clt_load_disconnect_enabled = 0;
 8001888:	f883 22ac 	strb.w	r2, [r3, #684]	@ 0x2ac
  config.etb1_enabled = 1;
 800188c:	f883 02ad 	strb.w	r0, [r3, #685]	@ 0x2ad
  config.etb2_enabled = 0;
 8001890:	f883 22ae 	strb.w	r2, [r3, #686]	@ 0x2ae
  config.etb1_motor_inverted = 0;
 8001894:	f883 22af 	strb.w	r2, [r3, #687]	@ 0x2af
  config.etb2_motor_inverted = 0;
 8001898:	f883 22b0 	strb.w	r2, [r3, #688]	@ 0x2b0
  config.fan1_enabled = 0;
 800189c:	f883 22b1 	strb.w	r2, [r3, #689]	@ 0x2b1
  config.fan2_enabled = 0;
 80018a0:	f883 22b2 	strb.w	r2, [r3, #690]	@ 0x2b2
  config.tps1_type = 0;
 80018a4:	f883 22b3 	strb.w	r2, [r3, #691]	@ 0x2b3
  config.tps2_type = 0;
 80018a8:	f883 22b4 	strb.w	r2, [r3, #692]	@ 0x2b4
  config._padding[0] = 0;
 80018ac:	f883 22b5 	strb.w	r2, [r3, #693]	@ 0x2b5
  config._padding[1] = 0;
 80018b0:	f883 22b6 	strb.w	r2, [r3, #694]	@ 0x2b6
  config._padding[2] = 0;
 80018b4:	f883 22b7 	strb.w	r2, [r3, #695]	@ 0x2b7
  config.checksum = 0;
 80018b8:	f501 5196 	add.w	r1, r1, #4800	@ 0x12c0
 80018bc:	2200      	movs	r2, #0
 80018be:	2300      	movs	r3, #0
 80018c0:	e941 2302 	strd	r2, r3, [r1, #-8]
}
 80018c4:	ecbd 8b02 	vpop	{d8}
 80018c8:	bd10      	pop	{r4, pc}
 80018ca:	bf00      	nop
 80018cc:	428c0000 	.word	0x428c0000
 80018d0:	20000f28 	.word	0x20000f28
 80018d4:	40490fd0 	.word	0x40490fd0
 80018d8:	3f4ccccd 	.word	0x3f4ccccd
 80018dc:	3e4ccccd 	.word	0x3e4ccccd
 80018e0:	42f00000 	.word	0x42f00000
 80018e4:	3d800000 	.word	0x3d800000
 80018e8:	43c80000 	.word	0x43c80000
 80018ec:	41200000 	.word	0x41200000
 80018f0:	455ac000 	.word	0x455ac000
 80018f4:	41700000 	.word	0x41700000
 80018f8:	416b3333 	.word	0x416b3333
 80018fc:	44bb8000 	.word	0x44bb8000
 8001900:	44548000 	.word	0x44548000
 8001904:	3dcccccd 	.word	0x3dcccccd
 8001908:	c2c80000 	.word	0xc2c80000
 800190c:	42c80000 	.word	0x42c80000
 8001910:	42dc0000 	.word	0x42dc0000
 8001914:	42be0000 	.word	0x42be0000
 8001918:	42b40000 	.word	0x42b40000
 800191c:	437f0000 	.word	0x437f0000

08001920 <controller_load_configuration>:
{
 8001920:	b508      	push	{r3, lr}
  EE_Read();
 8001922:	f000 fb7d 	bl	8002020 <EE_Read>
}
 8001926:	bd08      	pop	{r3, pc}

08001928 <controller_init>:
{
 8001928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192a:	b09f      	sub	sp, #124	@ 0x7c
  memset(&runtime, 0, sizeof(runtime));
 800192c:	2254      	movs	r2, #84	@ 0x54
 800192e:	2100      	movs	r1, #0
 8001930:	4858      	ldr	r0, [pc, #352]	@ (8001a94 <controller_init+0x16c>)
 8001932:	f009 fbdb 	bl	800b0ec <memset>
  memset(&config, 0, sizeof(config));
 8001936:	4c58      	ldr	r4, [pc, #352]	@ (8001a98 <controller_init+0x170>)
 8001938:	f44f 5596 	mov.w	r5, #4800	@ 0x12c0
 800193c:	462a      	mov	r2, r5
 800193e:	2100      	movs	r1, #0
 8001940:	4620      	mov	r0, r4
 8001942:	f009 fbd3 	bl	800b0ec <memset>
  if (EE_Init(&config, sizeof(config_t)) != true)
 8001946:	4629      	mov	r1, r5
 8001948:	4620      	mov	r0, r4
 800194a:	f000 fb25 	bl	8001f98 <EE_Init>
 800194e:	2800      	cmp	r0, #0
 8001950:	d06b      	beq.n	8001a2a <controller_init+0x102>
  controller_load_configuration();
 8001952:	f7ff ffe5 	bl	8001920 <controller_load_configuration>
  if (config.checksum != CONFIG_CHECKSUM) // check the data and if it is wrong, throw an error and load defaults-- add a better check
 8001956:	4b51      	ldr	r3, [pc, #324]	@ (8001a9c <controller_init+0x174>)
 8001958:	f853 1c08 	ldr.w	r1, [r3, #-8]
 800195c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8001960:	4a4f      	ldr	r2, [pc, #316]	@ (8001aa0 <controller_init+0x178>)
 8001962:	2b20      	cmp	r3, #32
 8001964:	bf08      	it	eq
 8001966:	4291      	cmpeq	r1, r2
 8001968:	d165      	bne.n	8001a36 <controller_init+0x10e>
  controller_timing_start(&htim2);
 800196a:	484e      	ldr	r0, [pc, #312]	@ (8001aa4 <controller_init+0x17c>)
 800196c:	f007 fde6 	bl	800953c <controller_timing_start>
  analog_inputs_init(&hadc1);
 8001970:	484d      	ldr	r0, [pc, #308]	@ (8001aa8 <controller_init+0x180>)
 8001972:	f7ff fa2b 	bl	8000dcc <analog_inputs_init>
  trigger_init(&trigger1, config.trigger1_type, &config.trigger1_filtering, STATUS_TRIGGER1_SYNCED, 1);
 8001976:	4c4d      	ldr	r4, [pc, #308]	@ (8001aac <controller_init+0x184>)
 8001978:	2301      	movs	r3, #1
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2303      	movs	r3, #3
 800197e:	f204 229b 	addw	r2, r4, #667	@ 0x29b
 8001982:	f894 129a 	ldrb.w	r1, [r4, #666]	@ 0x29a
 8001986:	484a      	ldr	r0, [pc, #296]	@ (8001ab0 <controller_init+0x188>)
 8001988:	f007 feda 	bl	8009740 <trigger_init>
  sensor_clt_init(&sensor_clt, config.sensor_clt_type);
 800198c:	f894 12a6 	ldrb.w	r1, [r4, #678]	@ 0x2a6
 8001990:	4848      	ldr	r0, [pc, #288]	@ (8001ab4 <controller_init+0x18c>)
 8001992:	f002 fa87 	bl	8003ea4 <sensor_clt_init>
  sensor_iat_init(&sensor_iat, config.sensor_iat_type);
 8001996:	f894 12a7 	ldrb.w	r1, [r4, #679]	@ 0x2a7
 800199a:	4847      	ldr	r0, [pc, #284]	@ (8001ab8 <controller_init+0x190>)
 800199c:	f002 fa04 	bl	8003da8 <sensor_iat_init>
  sensor_map_init(&sensor_map, config.sensor_map_type);
 80019a0:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
 80019a4:	4845      	ldr	r0, [pc, #276]	@ (8001abc <controller_init+0x194>)
 80019a6:	f002 f987 	bl	8003cb8 <sensor_map_init>
  ignition_init(ignition_output_pins);
 80019aa:	4845      	ldr	r0, [pc, #276]	@ (8001ac0 <controller_init+0x198>)
 80019ac:	f000 ff90 	bl	80028d0 <ignition_init>
  if (config.etb1_enabled)
 80019b0:	f894 32ad 	ldrb.w	r3, [r4, #685]	@ 0x2ad
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d144      	bne.n	8001a42 <controller_init+0x11a>
  comms_init();
 80019b8:	f7ff fc78 	bl	80012ac <comms_init>
  const osThreadAttr_t controller_test_attr = {
 80019bc:	ad15      	add	r5, sp, #84	@ 0x54
 80019be:	2424      	movs	r4, #36	@ 0x24
 80019c0:	4622      	mov	r2, r4
 80019c2:	2100      	movs	r1, #0
 80019c4:	4628      	mov	r0, r5
 80019c6:	f009 fb91 	bl	800b0ec <memset>
 80019ca:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac4 <controller_init+0x19c>)
 80019cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80019ce:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 80019d2:	961a      	str	r6, [sp, #104]	@ 0x68
 80019d4:	2330      	movs	r3, #48	@ 0x30
 80019d6:	931b      	str	r3, [sp, #108]	@ 0x6c
  const osThreadAttr_t controller_sensor_task_attr = {
 80019d8:	eb0d 0703 	add.w	r7, sp, r3
 80019dc:	4622      	mov	r2, r4
 80019de:	2100      	movs	r1, #0
 80019e0:	4638      	mov	r0, r7
 80019e2:	f009 fb83 	bl	800b0ec <memset>
 80019e6:	4b38      	ldr	r3, [pc, #224]	@ (8001ac8 <controller_init+0x1a0>)
 80019e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80019ea:	9611      	str	r6, [sp, #68]	@ 0x44
 80019ec:	2320      	movs	r3, #32
 80019ee:	9312      	str	r3, [sp, #72]	@ 0x48
  const osThreadAttr_t controller_long_routines_attr = {
 80019f0:	ae03      	add	r6, sp, #12
 80019f2:	4622      	mov	r2, r4
 80019f4:	2100      	movs	r1, #0
 80019f6:	4630      	mov	r0, r6
 80019f8:	f009 fb78 	bl	800b0ec <memset>
 80019fc:	4b33      	ldr	r3, [pc, #204]	@ (8001acc <controller_init+0x1a4>)
 80019fe:	9303      	str	r3, [sp, #12]
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	9308      	str	r3, [sp, #32]
 8001a04:	2318      	movs	r3, #24
 8001a06:	9309      	str	r3, [sp, #36]	@ 0x24
  osThreadNew(controller_sensor_task, NULL, &controller_sensor_task_attr);
 8001a08:	463a      	mov	r2, r7
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4830      	ldr	r0, [pc, #192]	@ (8001ad0 <controller_init+0x1a8>)
 8001a0e:	f7ff fa57 	bl	8000ec0 <osThreadNew>
  osThreadNew(controller_long_routines_task, NULL, &controller_long_routines_attr);
 8001a12:	4632      	mov	r2, r6
 8001a14:	2100      	movs	r1, #0
 8001a16:	482f      	ldr	r0, [pc, #188]	@ (8001ad4 <controller_init+0x1ac>)
 8001a18:	f7ff fa52 	bl	8000ec0 <osThreadNew>
  osThreadNew(controller_test_task, NULL, &controller_test_attr);
 8001a1c:	462a      	mov	r2, r5
 8001a1e:	2100      	movs	r1, #0
 8001a20:	482d      	ldr	r0, [pc, #180]	@ (8001ad8 <controller_init+0x1b0>)
 8001a22:	f7ff fa4d 	bl	8000ec0 <osThreadNew>
}
 8001a26:	b01f      	add	sp, #124	@ 0x7c
 8001a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    controller_load_test_configuration();
 8001a2a:	f7ff fddf 	bl	80015ec <controller_load_test_configuration>
    log_error("Not able to init eeprom");
 8001a2e:	482b      	ldr	r0, [pc, #172]	@ (8001adc <controller_init+0x1b4>)
 8001a30:	f000 fc28 	bl	8002284 <log_error>
 8001a34:	e78d      	b.n	8001952 <controller_init+0x2a>
    controller_load_test_configuration();
 8001a36:	f7ff fdd9 	bl	80015ec <controller_load_test_configuration>
    log_error("EEPROM data is invalid");
 8001a3a:	4829      	ldr	r0, [pc, #164]	@ (8001ae0 <controller_init+0x1b8>)
 8001a3c:	f000 fc22 	bl	8002284 <log_error>
 8001a40:	e793      	b.n	800196a <controller_init+0x42>
    dc_motor_init(&etb1_motor, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, 25000);
 8001a42:	4e28      	ldr	r6, [pc, #160]	@ (8001ae4 <controller_init+0x1bc>)
 8001a44:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4926      	ldr	r1, [pc, #152]	@ (8001ae8 <controller_init+0x1c0>)
 8001a50:	4630      	mov	r0, r6
 8001a52:	f000 fa33 	bl	8001ebc <dc_motor_init>
    pid_init(&etb1_pid);
 8001a56:	4d25      	ldr	r5, [pc, #148]	@ (8001aec <controller_init+0x1c4>)
 8001a58:	4628      	mov	r0, r5
 8001a5a:	f001 fa4d 	bl	8002ef8 <pid_init>
    electronic_throttle_init(&etb1, &etb1_pid, &tps1, &etb1_motor);
 8001a5e:	4c24      	ldr	r4, [pc, #144]	@ (8001af0 <controller_init+0x1c8>)
 8001a60:	4633      	mov	r3, r6
 8001a62:	4a24      	ldr	r2, [pc, #144]	@ (8001af4 <controller_init+0x1cc>)
 8001a64:	4629      	mov	r1, r5
 8001a66:	4620      	mov	r0, r4
 8001a68:	f000 fb24 	bl	80020b4 <electronic_throttle_init>
    electronic_throttle_set(&etb1, 0);
 8001a6c:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001af8 <controller_init+0x1d0>
 8001a70:	4620      	mov	r0, r4
 8001a72:	f000 fb45 	bl	8002100 <electronic_throttle_set>
    etb1_software_timer = osTimerNew(electronic_throttle_update, osTimerPeriodic, &etb1, NULL);
 8001a76:	2300      	movs	r3, #0
 8001a78:	4622      	mov	r2, r4
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	481f      	ldr	r0, [pc, #124]	@ (8001afc <controller_init+0x1d4>)
 8001a7e:	f7ff fa87 	bl	8000f90 <osTimerNew>
 8001a82:	4b1f      	ldr	r3, [pc, #124]	@ (8001b00 <controller_init+0x1d8>)
 8001a84:	6018      	str	r0, [r3, #0]
    if (etb1_software_timer != NULL)
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d096      	beq.n	80019b8 <controller_init+0x90>
      osTimerStart(etb1_software_timer, 1);
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	f7ff fad4 	bl	8001038 <osTimerStart>
 8001a90:	e792      	b.n	80019b8 <controller_init+0x90>
 8001a92:	bf00      	nop
 8001a94:	20000ed0 	.word	0x20000ed0
 8001a98:	20000f28 	.word	0x20000f28
 8001a9c:	200021e8 	.word	0x200021e8
 8001aa0:	9bb6f041 	.word	0x9bb6f041
 8001aa4:	200064c4 	.word	0x200064c4
 8001aa8:	2000022c 	.word	0x2000022c
 8001aac:	20001f28 	.word	0x20001f28
 8001ab0:	20000e30 	.word	0x20000e30
 8001ab4:	20000e7c 	.word	0x20000e7c
 8001ab8:	20000e64 	.word	0x20000e64
 8001abc:	20000e5c 	.word	0x20000e5c
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	0800ccd0 	.word	0x0800ccd0
 8001ac8:	0800ccdc 	.word	0x0800ccdc
 8001acc:	0800cce8 	.word	0x0800cce8
 8001ad0:	08001581 	.word	0x08001581
 8001ad4:	0800154d 	.word	0x0800154d
 8001ad8:	080015b1 	.word	0x080015b1
 8001adc:	0800cca0 	.word	0x0800cca0
 8001ae0:	0800ccb8 	.word	0x0800ccb8
 8001ae4:	20000e94 	.word	0x20000e94
 8001ae8:	2000647c 	.word	0x2000647c
 8001aec:	20000020 	.word	0x20000020
 8001af0:	20000eac 	.word	0x20000eac
 8001af4:	2000005c 	.word	0x2000005c
 8001af8:	00000000 	.word	0x00000000
 8001afc:	08002129 	.word	0x08002129
 8001b00:	20000e2c 	.word	0x20000e2c
 8001b04:	00000000 	.word	0x00000000

08001b08 <controller_save_configuration>:
{
 8001b08:	b508      	push	{r3, lr}
  config.checksum = CONFIG_CHECKSUM; // implement a proper checksum later
 8001b0a:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <controller_save_configuration+0x20>)
 8001b0c:	a104      	add	r1, pc, #16	@ (adr r1, 8001b20 <controller_save_configuration+0x18>)
 8001b0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b12:	e943 0102 	strd	r0, r1, [r3, #-8]
  state = EE_Write();
 8001b16:	f000 fa97 	bl	8002048 <EE_Write>
}
 8001b1a:	bd08      	pop	{r3, pc}
 8001b1c:	f3af 8000 	nop.w
 8001b20:	9bb6f041 	.word	0x9bb6f041
 8001b24:	00000020 	.word	0x00000020
 8001b28:	200021e8 	.word	0x200021e8

08001b2c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001b2c:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */
  
  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b2e:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <MX_CRC_Init+0x18>)
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <MX_CRC_Init+0x1c>)
 8001b32:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b34:	f002 fe6e 	bl	8004814 <HAL_CRC_Init>
 8001b38:	b900      	cbnz	r0, 8001b3c <MX_CRC_Init+0x10>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b3a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001b3c:	f001 f96c 	bl	8002e18 <Error_Handler>
}
 8001b40:	e7fb      	b.n	8001b3a <MX_CRC_Init+0xe>
 8001b42:	bf00      	nop
 8001b44:	200021e8 	.word	0x200021e8
 8001b48:	40023000 	.word	0x40023000

08001b4c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001b4c:	6802      	ldr	r2, [r0, #0]
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <HAL_CRC_MspInit+0x28>)
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d000      	beq.n	8001b56 <HAL_CRC_MspInit+0xa>
 8001b54:	4770      	bx	lr
{
 8001b56:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b58:	2300      	movs	r3, #0
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_CRC_MspInit+0x2c>)
 8001b5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001b64:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001b70:	b002      	add	sp, #8
 8001b72:	4770      	bx	lr
 8001b74:	40023000 	.word	0x40023000
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	00000000 	.word	0x00000000

08001b80 <dc_motor_set>:
 * @param dir the desired direction of the motor
 * @param duty_cycle a number between 0 and 255 not a percentage
 */
void dc_motor_set(dc_motor_t *motor, dc_motor_direction_t dir, uint8_t duty_cycle)
{
	if (motor == NULL || motor->timer == NULL)
 8001b80:	2800      	cmp	r0, #0
 8001b82:	f000 8138 	beq.w	8001df6 <dc_motor_set+0x276>
{
 8001b86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b8a:	460d      	mov	r5, r1
 8001b8c:	4616      	mov	r6, r2
 8001b8e:	4604      	mov	r4, r0
	if (motor == NULL || motor->timer == NULL)
 8001b90:	6807      	ldr	r7, [r0, #0]
 8001b92:	2f00      	cmp	r7, #0
 8001b94:	d052      	beq.n	8001c3c <dc_motor_set+0xbc>
	if (duty_cycle < 0 || duty_cycle > 255)
	{
		return;
	}
	// Map duty cycle (0-255) to timer compare value
	uint32_t compare_value = (uint32_t)((duty_cycle / 255.0) * __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001b96:	4610      	mov	r0, r2
 8001b98:	f7fe fcac 	bl	80004f4 <__aeabi_i2d>
 8001b9c:	a396      	add	r3, pc, #600	@ (adr r3, 8001df8 <dc_motor_set+0x278>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe fe3b 	bl	800081c <__aeabi_ddiv>
 8001ba6:	4680      	mov	r8, r0
 8001ba8:	4689      	mov	r9, r1
 8001baa:	683f      	ldr	r7, [r7, #0]
 8001bac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001bae:	f7fe fc91 	bl	80004d4 <__aeabi_ui2d>
 8001bb2:	4642      	mov	r2, r8
 8001bb4:	464b      	mov	r3, r9
 8001bb6:	f7fe fd07 	bl	80005c8 <__aeabi_dmul>
 8001bba:	f7fe ff17 	bl	80009ec <__aeabi_d2uiz>
	
	switch (dir)
 8001bbe:	b1fd      	cbz	r5, 8001c00 <dc_motor_set+0x80>
 8001bc0:	2d01      	cmp	r5, #1
 8001bc2:	d079      	beq.n	8001cb8 <dc_motor_set+0x138>
		}
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
		break;
	default:
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001bc4:	6863      	ldr	r3, [r4, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f040 80cf 	bne.w	8001d6a <dc_motor_set+0x1ea>
 8001bcc:	637b      	str	r3, [r7, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001bce:	68a3      	ldr	r3, [r4, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f040 80d7 	bne.w	8001d84 <dc_motor_set+0x204>
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001bde:	68e3      	ldr	r3, [r4, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f040 80e2 	bne.w	8001daa <dc_motor_set+0x22a>
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2200      	movs	r2, #0
 8001bec:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001bee:	6923      	ldr	r3, [r4, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f040 80ed 	bne.w	8001dd0 <dc_motor_set+0x250>
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bfe:	e01b      	b.n	8001c38 <dc_motor_set+0xb8>
		if (motor->timer_channel_output_3 != 0 && motor->timer_channel_output_4 != 0)
 8001c00:	68e3      	ldr	r3, [r4, #12]
 8001c02:	b16b      	cbz	r3, 8001c20 <dc_motor_set+0xa0>
 8001c04:	6922      	ldr	r2, [r4, #16]
 8001c06:	b15a      	cbz	r2, 8001c20 <dc_motor_set+0xa0>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d019      	beq.n	8001c40 <dc_motor_set+0xc0>
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d01a      	beq.n	8001c46 <dc_motor_set+0xc6>
 8001c10:	2300      	movs	r3, #0
 8001c12:	643b      	str	r3, [r7, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001c14:	6923      	ldr	r3, [r4, #16]
 8001c16:	b9cb      	cbnz	r3, 8001c4c <dc_motor_set+0xcc>
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c1e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001c20:	68a3      	ldr	r3, [r4, #8]
 8001c22:	bb33      	cbnz	r3, 8001c72 <dc_motor_set+0xf2>
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, compare_value);
 8001c2c:	6863      	ldr	r3, [r4, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d132      	bne.n	8001c98 <dc_motor_set+0x118>
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6358      	str	r0, [r3, #52]	@ 0x34
		/**
		 * @todo throw an error
		 */
		break;
	}
	motor->current_duty_cycle = duty_cycle;
 8001c38:	7566      	strb	r6, [r4, #21]
	motor->current_direction = dir;
 8001c3a:	7525      	strb	r5, [r4, #20]
}
 8001c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001c40:	2300      	movs	r3, #0
 8001c42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c44:	e7e6      	b.n	8001c14 <dc_motor_set+0x94>
 8001c46:	2300      	movs	r3, #0
 8001c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c4a:	e7e3      	b.n	8001c14 <dc_motor_set+0x94>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d006      	beq.n	8001c5e <dc_motor_set+0xde>
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d009      	beq.n	8001c68 <dc_motor_set+0xe8>
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c5c:	e7e0      	b.n	8001c20 <dc_motor_set+0xa0>
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c64:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c66:	e7db      	b.n	8001c20 <dc_motor_set+0xa0>
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c70:	e7d6      	b.n	8001c20 <dc_motor_set+0xa0>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d006      	beq.n	8001c84 <dc_motor_set+0x104>
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d009      	beq.n	8001c8e <dc_motor_set+0x10e>
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c82:	e7d3      	b.n	8001c2c <dc_motor_set+0xac>
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c8c:	e7ce      	b.n	8001c2c <dc_motor_set+0xac>
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2200      	movs	r2, #0
 8001c94:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c96:	e7c9      	b.n	8001c2c <dc_motor_set+0xac>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, compare_value);
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d005      	beq.n	8001ca8 <dc_motor_set+0x128>
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d007      	beq.n	8001cb0 <dc_motor_set+0x130>
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6418      	str	r0, [r3, #64]	@ 0x40
 8001ca6:	e7c7      	b.n	8001c38 <dc_motor_set+0xb8>
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6398      	str	r0, [r3, #56]	@ 0x38
 8001cae:	e7c3      	b.n	8001c38 <dc_motor_set+0xb8>
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8001cb6:	e7bf      	b.n	8001c38 <dc_motor_set+0xb8>
		if (motor->timer_channel_output_3 != 0 && motor->timer_channel_output_4 != 0)
 8001cb8:	68e3      	ldr	r3, [r4, #12]
 8001cba:	b16b      	cbz	r3, 8001cd8 <dc_motor_set+0x158>
 8001cbc:	6923      	ldr	r3, [r4, #16]
 8001cbe:	b15b      	cbz	r3, 8001cd8 <dc_motor_set+0x158>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d016      	beq.n	8001cf2 <dc_motor_set+0x172>
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d017      	beq.n	8001cf8 <dc_motor_set+0x178>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	643b      	str	r3, [r7, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001ccc:	68e3      	ldr	r3, [r4, #12]
 8001cce:	b9b3      	cbnz	r3, 8001cfe <dc_motor_set+0x17e>
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cd6:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001cd8:	6863      	ldr	r3, [r4, #4]
 8001cda:	bb1b      	cbnz	r3, 8001d24 <dc_motor_set+0x1a4>
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
 8001ce4:	68a3      	ldr	r3, [r4, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d12f      	bne.n	8001d4a <dc_motor_set+0x1ca>
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6358      	str	r0, [r3, #52]	@ 0x34
 8001cf0:	e7a2      	b.n	8001c38 <dc_motor_set+0xb8>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cf6:	e7e9      	b.n	8001ccc <dc_motor_set+0x14c>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cfc:	e7e6      	b.n	8001ccc <dc_motor_set+0x14c>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d006      	beq.n	8001d10 <dc_motor_set+0x190>
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d009      	beq.n	8001d1a <dc_motor_set+0x19a>
 8001d06:	6823      	ldr	r3, [r4, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d0e:	e7e3      	b.n	8001cd8 <dc_motor_set+0x158>
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d16:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d18:	e7de      	b.n	8001cd8 <dc_motor_set+0x158>
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d20:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d22:	e7d9      	b.n	8001cd8 <dc_motor_set+0x158>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d006      	beq.n	8001d36 <dc_motor_set+0x1b6>
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d009      	beq.n	8001d40 <dc_motor_set+0x1c0>
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2200      	movs	r2, #0
 8001d32:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d34:	e7d6      	b.n	8001ce4 <dc_motor_set+0x164>
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d3e:	e7d1      	b.n	8001ce4 <dc_motor_set+0x164>
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2200      	movs	r2, #0
 8001d46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d48:	e7cc      	b.n	8001ce4 <dc_motor_set+0x164>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d005      	beq.n	8001d5a <dc_motor_set+0x1da>
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d007      	beq.n	8001d62 <dc_motor_set+0x1e2>
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6418      	str	r0, [r3, #64]	@ 0x40
 8001d58:	e76e      	b.n	8001c38 <dc_motor_set+0xb8>
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6398      	str	r0, [r3, #56]	@ 0x38
 8001d60:	e76a      	b.n	8001c38 <dc_motor_set+0xb8>
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8001d68:	e766      	b.n	8001c38 <dc_motor_set+0xb8>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d004      	beq.n	8001d78 <dc_motor_set+0x1f8>
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d005      	beq.n	8001d7e <dc_motor_set+0x1fe>
 8001d72:	2300      	movs	r3, #0
 8001d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d76:	e72a      	b.n	8001bce <dc_motor_set+0x4e>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d7c:	e727      	b.n	8001bce <dc_motor_set+0x4e>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d82:	e724      	b.n	8001bce <dc_motor_set+0x4e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d006      	beq.n	8001d96 <dc_motor_set+0x216>
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d009      	beq.n	8001da0 <dc_motor_set+0x220>
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2200      	movs	r2, #0
 8001d92:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d94:	e723      	b.n	8001bde <dc_motor_set+0x5e>
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d9e:	e71e      	b.n	8001bde <dc_motor_set+0x5e>
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2200      	movs	r2, #0
 8001da6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001da8:	e719      	b.n	8001bde <dc_motor_set+0x5e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d006      	beq.n	8001dbc <dc_motor_set+0x23c>
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d009      	beq.n	8001dc6 <dc_motor_set+0x246>
 8001db2:	6823      	ldr	r3, [r4, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2200      	movs	r2, #0
 8001db8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dba:	e718      	b.n	8001bee <dc_motor_set+0x6e>
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dc4:	e713      	b.n	8001bee <dc_motor_set+0x6e>
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dce:	e70e      	b.n	8001bee <dc_motor_set+0x6e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d006      	beq.n	8001de2 <dc_motor_set+0x262>
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d009      	beq.n	8001dec <dc_motor_set+0x26c>
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	641a      	str	r2, [r3, #64]	@ 0x40
 8001de0:	e72a      	b.n	8001c38 <dc_motor_set+0xb8>
 8001de2:	6823      	ldr	r3, [r4, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2200      	movs	r2, #0
 8001de8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dea:	e725      	b.n	8001c38 <dc_motor_set+0xb8>
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2200      	movs	r2, #0
 8001df2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001df4:	e720      	b.n	8001c38 <dc_motor_set+0xb8>
 8001df6:	4770      	bx	lr
 8001df8:	00000000 	.word	0x00000000
 8001dfc:	406fe000 	.word	0x406fe000

08001e00 <dc_motor_disable>:
/**
 * @brief disables the motor.
 */
void dc_motor_disable(dc_motor_t *motor)
{
	if (motor == NULL || motor->timer == NULL)
 8001e00:	4603      	mov	r3, r0
 8001e02:	b178      	cbz	r0, 8001e24 <dc_motor_disable+0x24>
 8001e04:	6802      	ldr	r2, [r0, #0]
 8001e06:	b16a      	cbz	r2, 8001e24 <dc_motor_disable+0x24>
		 * @todo throw an error
		 */
	}

	// Set duty cycle to 0 for both channels
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001e08:	6841      	ldr	r1, [r0, #4]
 8001e0a:	b961      	cbnz	r1, 8001e26 <dc_motor_disable+0x26>
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	6351      	str	r1, [r2, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	b9c2      	cbnz	r2, 8001e46 <dc_motor_disable+0x46>
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	2100      	movs	r1, #0
 8001e1a:	6351      	str	r1, [r2, #52]	@ 0x34
	motor->current_duty_cycle = 0;
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	755a      	strb	r2, [r3, #21]
	motor->status = MOTOR_STATE_DISABLED;
 8001e20:	2202      	movs	r2, #2
 8001e22:	759a      	strb	r2, [r3, #22]
}
 8001e24:	4770      	bx	lr
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001e26:	2904      	cmp	r1, #4
 8001e28:	d005      	beq.n	8001e36 <dc_motor_disable+0x36>
 8001e2a:	2908      	cmp	r1, #8
 8001e2c:	d007      	beq.n	8001e3e <dc_motor_disable+0x3e>
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	2100      	movs	r1, #0
 8001e32:	6411      	str	r1, [r2, #64]	@ 0x40
 8001e34:	e7ec      	b.n	8001e10 <dc_motor_disable+0x10>
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	2100      	movs	r1, #0
 8001e3a:	6391      	str	r1, [r2, #56]	@ 0x38
 8001e3c:	e7e8      	b.n	8001e10 <dc_motor_disable+0x10>
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	2100      	movs	r1, #0
 8001e42:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8001e44:	e7e4      	b.n	8001e10 <dc_motor_disable+0x10>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001e46:	2a04      	cmp	r2, #4
 8001e48:	d006      	beq.n	8001e58 <dc_motor_disable+0x58>
 8001e4a:	2a08      	cmp	r2, #8
 8001e4c:	d009      	beq.n	8001e62 <dc_motor_disable+0x62>
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	2100      	movs	r1, #0
 8001e54:	6411      	str	r1, [r2, #64]	@ 0x40
 8001e56:	e7e1      	b.n	8001e1c <dc_motor_disable+0x1c>
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	6391      	str	r1, [r2, #56]	@ 0x38
 8001e60:	e7dc      	b.n	8001e1c <dc_motor_disable+0x1c>
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	2100      	movs	r1, #0
 8001e68:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8001e6a:	e7d7      	b.n	8001e1c <dc_motor_disable+0x1c>

08001e6c <dc_motor_set_timer_freq>:
{
 8001e6c:	b538      	push	{r3, r4, r5, lr}
 8001e6e:	4605      	mov	r5, r0
	if (frequency == 0)
 8001e70:	b199      	cbz	r1, 8001e9a <dc_motor_set_timer_freq+0x2e>
 8001e72:	460c      	mov	r4, r1
	if (frequency > DC_MOTOR_MAX_FREQUENCY)
 8001e74:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001e78:	4299      	cmp	r1, r3
 8001e7a:	d900      	bls.n	8001e7e <dc_motor_set_timer_freq+0x12>
		frequency = DC_MOTOR_MAX_FREQUENCY;
 8001e7c:	461c      	mov	r4, r3
	uint32_t timer_clock = HAL_RCC_GetSysClockFreq(); // Get the timer clock frequency
 8001e7e:	f004 faff 	bl	8006480 <HAL_RCC_GetSysClockFreq>
	for (prescaler = 0; prescaler <= 0xFFFF; prescaler++)
 8001e82:	2200      	movs	r2, #0
		auto_reload = (timer_clock / ((prescaler + 1) * frequency)) - 1;
 8001e84:	fb02 4304 	mla	r3, r2, r4, r4
 8001e88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8c:	3b01      	subs	r3, #1
		if (auto_reload <= 0xFFFF)
 8001e8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e92:	d305      	bcc.n	8001ea0 <dc_motor_set_timer_freq+0x34>
	for (prescaler = 0; prescaler <= 0xFFFF; prescaler++)
 8001e94:	3201      	adds	r2, #1
 8001e96:	b292      	uxth	r2, r2
		auto_reload = (timer_clock / ((prescaler + 1) * frequency)) - 1;
 8001e98:	e7f4      	b.n	8001e84 <dc_motor_set_timer_freq+0x18>
		dc_motor_disable(motor);
 8001e9a:	f7ff ffb1 	bl	8001e00 <dc_motor_disable>
		return;
 8001e9e:	e00c      	b.n	8001eba <dc_motor_set_timer_freq+0x4e>
	__HAL_TIM_SET_PRESCALER((TIM_HandleTypeDef *)motor->timer, prescaler);
 8001ea0:	6829      	ldr	r1, [r5, #0]
 8001ea2:	6809      	ldr	r1, [r1, #0]
 8001ea4:	628a      	str	r2, [r1, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer, auto_reload);
 8001ea6:	682a      	ldr	r2, [r5, #0]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001eac:	682a      	ldr	r2, [r5, #0]
 8001eae:	60d3      	str	r3, [r2, #12]
	dc_motor_set(motor, motor->current_direction, motor->current_duty_cycle);
 8001eb0:	7d6a      	ldrb	r2, [r5, #21]
 8001eb2:	7d29      	ldrb	r1, [r5, #20]
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	f7ff fe63 	bl	8001b80 <dc_motor_set>
}
 8001eba:	bd38      	pop	{r3, r4, r5, pc}

08001ebc <dc_motor_init>:
    if (motor == NULL || timer == NULL)
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	d04f      	beq.n	8001f60 <dc_motor_init+0xa4>
{
 8001ec0:	b510      	push	{r4, lr}
 8001ec2:	4604      	mov	r4, r0
    if (motor == NULL || timer == NULL)
 8001ec4:	b329      	cbz	r1, 8001f12 <dc_motor_init+0x56>
    motor->timer = timer;
 8001ec6:	6001      	str	r1, [r0, #0]
    motor->timer_channel_output_1 = timer_channel_output_1;
 8001ec8:	6042      	str	r2, [r0, #4]
    motor->timer_channel_output_2 = timer_channel_output_2;
 8001eca:	6083      	str	r3, [r0, #8]
	motor->timer_channel_output_3 = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60c3      	str	r3, [r0, #12]
    motor->timer_channel_output_4 = 0;
 8001ed0:	6103      	str	r3, [r0, #16]
	motor->current_direction = MOTOR_DIRECTION_FORWARD;
 8001ed2:	7503      	strb	r3, [r0, #20]
	motor->status = MOTOR_STATE_NORMAL;
 8001ed4:	7583      	strb	r3, [r0, #22]
	HAL_TIM_Base_Start((TIM_HandleTypeDef *)motor->timer);
 8001ed6:	4608      	mov	r0, r1
 8001ed8:	f004 fcc6 	bl	8006868 <HAL_TIM_Base_Start>
	dc_motor_set_timer_freq(motor, frequency);
 8001edc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f7ff ffc3 	bl	8001e6c <dc_motor_set_timer_freq>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001ee6:	6863      	ldr	r3, [r4, #4]
 8001ee8:	b9a3      	cbnz	r3, 8001f14 <dc_motor_init+0x58>
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001ef2:	68a3      	ldr	r3, [r4, #8]
 8001ef4:	bb0b      	cbnz	r3, 8001f3a <dc_motor_init+0x7e>
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2200      	movs	r2, #0
 8001efc:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1);
 8001efe:	6861      	ldr	r1, [r4, #4]
 8001f00:	6820      	ldr	r0, [r4, #0]
 8001f02:	f005 f8bf 	bl	8007084 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2);
 8001f06:	68a1      	ldr	r1, [r4, #8]
 8001f08:	6820      	ldr	r0, [r4, #0]
 8001f0a:	f005 f8bb 	bl	8007084 <HAL_TIM_PWM_Start>
	motor->current_duty_cycle = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	7563      	strb	r3, [r4, #21]
}
 8001f12:	bd10      	pop	{r4, pc}
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d006      	beq.n	8001f26 <dc_motor_init+0x6a>
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d009      	beq.n	8001f30 <dc_motor_init+0x74>
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f24:	e7e5      	b.n	8001ef2 <dc_motor_init+0x36>
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f2e:	e7e0      	b.n	8001ef2 <dc_motor_init+0x36>
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2200      	movs	r2, #0
 8001f36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f38:	e7db      	b.n	8001ef2 <dc_motor_init+0x36>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d006      	beq.n	8001f4c <dc_motor_init+0x90>
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d009      	beq.n	8001f56 <dc_motor_init+0x9a>
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2200      	movs	r2, #0
 8001f48:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f4a:	e7d8      	b.n	8001efe <dc_motor_init+0x42>
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2200      	movs	r2, #0
 8001f52:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f54:	e7d3      	b.n	8001efe <dc_motor_init+0x42>
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f5e:	e7ce      	b.n	8001efe <dc_motor_init+0x42>
 8001f60:	4770      	bx	lr
	...

08001f64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f64:	b500      	push	{lr}
 8001f66:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f68:	2200      	movs	r2, #0
 8001f6a:	9201      	str	r2, [sp, #4]
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <MX_DMA_Init+0x30>)
 8001f6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f70:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8001f74:	6319      	str	r1, [r3, #48]	@ 0x30
 8001f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001f80:	2105      	movs	r1, #5
 8001f82:	2038      	movs	r0, #56	@ 0x38
 8001f84:	f002 fc32 	bl	80047ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f88:	2038      	movs	r0, #56	@ 0x38
 8001f8a:	f002 fc3f 	bl	800480c <HAL_NVIC_EnableIRQ>

}
 8001f8e:	b003      	add	sp, #12
 8001f90:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f94:	40023800 	.word	0x40023800

08001f98 <EE_Init>:
bool EE_Init(void *pData, uint32_t Size)
{
  bool answer = false;
  do
  {
    if ((pData == NULL) || (Size == 0))
 8001f98:	4602      	mov	r2, r0
 8001f9a:	b1b8      	cbz	r0, 8001fcc <EE_Init+0x34>
 8001f9c:	b1c1      	cbz	r1, 8001fd0 <EE_Init+0x38>
    eeHandle.PageSectorNumber = ((FLASH_SIZE / eeHandle.PageSectorSize) - 1);
    eeHandle.Address = (FLASH_BASE + eeHandle.PageSectorSize * eeHandle.PageSectorNumber);
#endif
#else // manual
#if (defined FLASH_BANK_1) || (defined FLASH_BANK_2)
    eeHandle.BankNumber = EE_SELECTED_BANK;
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <EE_Init+0x3c>)
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	7458      	strb	r0, [r3, #17]
#endif
    eeHandle.PageSectorNumber = EE_SELECTED_PAGE_SECTOR_NUMBER;
 8001fa4:	2005      	movs	r0, #5
 8001fa6:	7418      	strb	r0, [r3, #16]
    eeHandle.PageSectorSize = EE_SELECTED_PAGE_SECTOR_SIZE;
 8001fa8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001fac:	6098      	str	r0, [r3, #8]
    eeHandle.Address = EE_SELECTED_ADDRESS;
 8001fae:	f100 6000 	add.w	r0, r0, #134217728	@ 0x8000000
 8001fb2:	60d8      	str	r0, [r3, #12]
#endif
    /* checking size of eeprom area*/
    if (Size > eeHandle.PageSectorSize)
 8001fb4:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8001fb8:	d903      	bls.n	8001fc2 <EE_Init+0x2a>
    {
      eeHandle.Size = 0;
 8001fba:	2000      	movs	r0, #0
 8001fbc:	6058      	str	r0, [r3, #4]
      eeHandle.pData = NULL;
 8001fbe:	6018      	str	r0, [r3, #0]
      break;
 8001fc0:	4770      	bx	lr
    }
    eeHandle.Size = Size;
 8001fc2:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <EE_Init+0x3c>)
 8001fc4:	6059      	str	r1, [r3, #4]
    eeHandle.pData = (uint8_t*)pData;
 8001fc6:	601a      	str	r2, [r3, #0]
    answer = true;
 8001fc8:	2001      	movs	r0, #1
 8001fca:	4770      	bx	lr
  bool answer = false;
 8001fcc:	2000      	movs	r0, #0
 8001fce:	4770      	bx	lr
 8001fd0:	2000      	movs	r0, #0

  } while (0);

  return answer;
}
 8001fd2:	4770      	bx	lr
 8001fd4:	200021f0 	.word	0x200021f0

08001fd8 <EE_Format>:
  * @return bool Boolean value indicating the success of the operation:
  *     - true: Formatting successful.
  *     - false: Formatting failed.
  */
bool EE_Format(void)
{
 8001fd8:	b510      	push	{r4, lr}
 8001fda:	b086      	sub	sp, #24
  bool answer = false;
  uint32_t error;
  FLASH_EraseInitTypeDef flashErase;
  do
  {
    HAL_FLASH_Unlock();
 8001fdc:	f002 fece 	bl	8004d7c <HAL_FLASH_Unlock>
#elif EE_ERASE == EE_ERASE_PAGE_NUMBER
    flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
    flashErase.Page = eeHandle.PageSectorNumber;
    flashErase.NbPages = 1;
#else
    flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	9300      	str	r3, [sp, #0]
    flashErase.Sector = eeHandle.PageSectorNumber;
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <EE_Format+0x44>)
 8001fe6:	7c1a      	ldrb	r2, [r3, #16]
 8001fe8:	9202      	str	r2, [sp, #8]
    flashErase.NbSectors = 1;
 8001fea:	2201      	movs	r2, #1
 8001fec:	9203      	str	r2, [sp, #12]
#endif
#if (defined FLASH_BANK_1) || (defined FLASH_BANK_2)
    flashErase.Banks = eeHandle.BankNumber;
 8001fee:	7c5b      	ldrb	r3, [r3, #17]
 8001ff0:	9301      	str	r3, [sp, #4]
#endif
#ifdef FLASH_VOLTAGE_RANGE_3
    flashErase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	9304      	str	r3, [sp, #16]
#endif
    /* erasing page/sector */
    if (HAL_FLASHEx_Erase(&flashErase, &error) != HAL_OK)
 8001ff6:	a905      	add	r1, sp, #20
 8001ff8:	4668      	mov	r0, sp
 8001ffa:	f002 ffb7 	bl	8004f6c <HAL_FLASHEx_Erase>
 8001ffe:	b928      	cbnz	r0, 800200c <EE_Format+0x34>
    {
      break;
    }
    /* checking result */
    if (error != 0xFFFFFFFF)
 8002000:	9b05      	ldr	r3, [sp, #20]
 8002002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002006:	d007      	beq.n	8002018 <EE_Format+0x40>
  bool answer = false;
 8002008:	2400      	movs	r4, #0
 800200a:	e000      	b.n	800200e <EE_Format+0x36>
 800200c:	2400      	movs	r4, #0
    }
    answer = true;

  } while (0);

  HAL_FLASH_Lock();
 800200e:	f002 fecd 	bl	8004dac <HAL_FLASH_Lock>
#ifdef HAL_ICACHE_MODULE_ENABLED
  HAL_ICACHE_Enable();
#endif
  return answer;
}
 8002012:	4620      	mov	r0, r4
 8002014:	b006      	add	sp, #24
 8002016:	bd10      	pop	{r4, pc}
    answer = true;
 8002018:	2401      	movs	r4, #1
 800201a:	e7f8      	b.n	800200e <EE_Format+0x36>
 800201c:	200021f0 	.word	0x200021f0

08002020 <EE_Read>:
  * @note This function reads data from the EEPROM emulation area
  *  and loads it into the specified storage pointer.
  */
void EE_Read(void)
{
  uint8_t *data = eeHandle.pData;
 8002020:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <EE_Read+0x24>)
 8002022:	681a      	ldr	r2, [r3, #0]
#ifdef HAL_ICACHE_MODULE_ENABLED
    /* disabling ICACHE if enabled*/
    HAL_ICACHE_Disable();
#endif
  if (data != NULL)
 8002024:	b10a      	cbz	r2, 800202a <EE_Read+0xa>
  {
    /* reading flash */
    for (uint32_t i = 0; i < eeHandle.Size; i++)
 8002026:	2300      	movs	r3, #0
 8002028:	e006      	b.n	8002038 <EE_Read+0x18>
 800202a:	4770      	bx	lr
    {
      *data = (*(__IO uint8_t*) (eeHandle.Address + i));
 800202c:	4905      	ldr	r1, [pc, #20]	@ (8002044 <EE_Read+0x24>)
 800202e:	68c9      	ldr	r1, [r1, #12]
 8002030:	5cc9      	ldrb	r1, [r1, r3]
 8002032:	f802 1b01 	strb.w	r1, [r2], #1
    for (uint32_t i = 0; i < eeHandle.Size; i++)
 8002036:	3301      	adds	r3, #1
 8002038:	4902      	ldr	r1, [pc, #8]	@ (8002044 <EE_Read+0x24>)
 800203a:	6849      	ldr	r1, [r1, #4]
 800203c:	4299      	cmp	r1, r3
 800203e:	d8f5      	bhi.n	800202c <EE_Read+0xc>
  }
#ifdef HAL_ICACHE_MODULE_ENABLED
    /* disabling ICACHE if enabled*/
    HAL_ICACHE_Enable();
#endif
}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	200021f0 	.word	0x200021f0

08002048 <EE_Write>:
  * @brief Writes data to the EEPROM emulation area.
  * @note This function writes data to the EEPROM emulation area.
  * @retval true if the write operation is successful, false otherwise.
  */
bool EE_Write(void)
{
 8002048:	b570      	push	{r4, r5, r6, lr}
  bool answer = true;
  uint8_t *data = eeHandle.pData;
 800204a:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <EE_Write+0x68>)
 800204c:	681c      	ldr	r4, [r3, #0]
  do
  {
    /* checking eeprom is initialize correctly */
    if (data == NULL)
 800204e:	b33c      	cbz	r4, 80020a0 <EE_Write+0x58>
    {
      answer = false;
      break;
    }
    /* formating flash area before writing */
    if (EE_Format() == false)
 8002050:	f7ff ffc2 	bl	8001fd8 <EE_Format>
 8002054:	4606      	mov	r6, r0
 8002056:	b320      	cbz	r0, 80020a2 <EE_Write+0x5a>
    {
      answer = false;
      break;
    }
    HAL_FLASH_Unlock();
 8002058:	f002 fe90 	bl	8004d7c <HAL_FLASH_Unlock>
    /* disabling ICACHE if enabled*/
    HAL_ICACHE_Disable();
#endif
#if (defined FLASH_TYPEPROGRAM_HALFWORD)
    /* writing buffer to flash */
    for (uint32_t i = 0; i < eeHandle.Size ; i += 2)
 800205c:	2500      	movs	r5, #0
 800205e:	4b14      	ldr	r3, [pc, #80]	@ (80020b0 <EE_Write+0x68>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	42ab      	cmp	r3, r5
 8002064:	d90c      	bls.n	8002080 <EE_Write+0x38>
    {
      uint64_t halfWord;
      memcpy((uint8_t*)&halfWord, data, 2);
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, eeHandle.Address + i, halfWord) != HAL_OK)
 8002066:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <EE_Write+0x68>)
 8002068:	68d9      	ldr	r1, [r3, #12]
 800206a:	8822      	ldrh	r2, [r4, #0]
 800206c:	2300      	movs	r3, #0
 800206e:	4429      	add	r1, r5
 8002070:	2001      	movs	r0, #1
 8002072:	f002 fed5 	bl	8004e20 <HAL_FLASH_Program>
 8002076:	b910      	cbnz	r0, 800207e <EE_Write+0x36>
      {
        answer = false;
        break;
      }
      data += 2;
 8002078:	3402      	adds	r4, #2
    for (uint32_t i = 0; i < eeHandle.Size ; i += 2)
 800207a:	3502      	adds	r5, #2
 800207c:	e7ef      	b.n	800205e <EE_Write+0x16>
        answer = false;
 800207e:	2600      	movs	r6, #0
      }
      data += FLASH_NB_32BITWORD_IN_FLASHWORD * 4;
    }
#endif
    /* verifying Flash content */
    data = eeHandle.pData;
 8002080:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <EE_Write+0x68>)
 8002082:	681a      	ldr	r2, [r3, #0]
    for (uint32_t i = 0; i < eeHandle.Size; i++)
 8002084:	2300      	movs	r3, #0
 8002086:	490a      	ldr	r1, [pc, #40]	@ (80020b0 <EE_Write+0x68>)
 8002088:	6849      	ldr	r1, [r1, #4]
 800208a:	4299      	cmp	r1, r3
 800208c:	d909      	bls.n	80020a2 <EE_Write+0x5a>
    {
      if (*data != (*(__IO uint8_t*) (eeHandle.Address + i)))
 800208e:	7811      	ldrb	r1, [r2, #0]
 8002090:	4807      	ldr	r0, [pc, #28]	@ (80020b0 <EE_Write+0x68>)
 8002092:	68c0      	ldr	r0, [r0, #12]
 8002094:	5cc0      	ldrb	r0, [r0, r3]
 8002096:	4288      	cmp	r0, r1
 8002098:	d107      	bne.n	80020aa <EE_Write+0x62>
      {
        answer = false;
        break;
      }
      data++;
 800209a:	3201      	adds	r2, #1
    for (uint32_t i = 0; i < eeHandle.Size; i++)
 800209c:	3301      	adds	r3, #1
 800209e:	e7f2      	b.n	8002086 <EE_Write+0x3e>
      answer = false;
 80020a0:	2600      	movs	r6, #0
    }

  } while (0);

  HAL_FLASH_Lock();
 80020a2:	f002 fe83 	bl	8004dac <HAL_FLASH_Lock>
#ifdef HAL_ICACHE_MODULE_ENABLED
  HAL_ICACHE_Enable();
#endif
  return answer;
}
 80020a6:	4630      	mov	r0, r6
 80020a8:	bd70      	pop	{r4, r5, r6, pc}
        answer = false;
 80020aa:	2600      	movs	r6, #0
 80020ac:	e7f9      	b.n	80020a2 <EE_Write+0x5a>
 80020ae:	bf00      	nop
 80020b0:	200021f0 	.word	0x200021f0

080020b4 <electronic_throttle_init>:

void electronic_throttle_tone_fail(electronic_throttle_t *etb);
void electronic_throttle_tone_success(electronic_throttle_t *etb);

void electronic_throttle_init(electronic_throttle_t *etb, pid_t *pid, sensor_tps_t *sensor, dc_motor_t *motor)
{
 80020b4:	b508      	push	{r3, lr}
    if (etb == NULL || sensor == NULL || motor == NULL)
 80020b6:	b1a0      	cbz	r0, 80020e2 <electronic_throttle_init+0x2e>
 80020b8:	b19a      	cbz	r2, 80020e2 <electronic_throttle_init+0x2e>
 80020ba:	b193      	cbz	r3, 80020e2 <electronic_throttle_init+0x2e>
    {
        log_error("Electronic throttle init failed");
        return;
    }
    
    etb->pid = pid;
 80020bc:	6081      	str	r1, [r0, #8]
    etb->sensor = sensor;
 80020be:	60c2      	str	r2, [r0, #12]
    etb->motor = motor;
 80020c0:	6043      	str	r3, [r0, #4]
    etb->target_position = ELECTRONIC_THROTTLE_FAIL_SAFE_POSITION;
 80020c2:	2300      	movs	r3, #0
 80020c4:	6103      	str	r3, [r0, #16]

    etb->pid->limit_output_max = (float)255;
 80020c6:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <electronic_throttle_init+0x38>)
 80020c8:	614b      	str	r3, [r1, #20]
    etb->pid->limit_output_min = (float)-255;
 80020ca:	6883      	ldr	r3, [r0, #8]
 80020cc:	4a08      	ldr	r2, [pc, #32]	@ (80020f0 <electronic_throttle_init+0x3c>)
 80020ce:	611a      	str	r2, [r3, #16]
    etb->pid->limit_integrator_max = (float)250;
 80020d0:	6883      	ldr	r3, [r0, #8]
 80020d2:	4a08      	ldr	r2, [pc, #32]	@ (80020f4 <electronic_throttle_init+0x40>)
 80020d4:	61da      	str	r2, [r3, #28]
    etb->pid->limit_integrator_min = (float)-250;
 80020d6:	6883      	ldr	r3, [r0, #8]
 80020d8:	4a07      	ldr	r2, [pc, #28]	@ (80020f8 <electronic_throttle_init+0x44>)
 80020da:	619a      	str	r2, [r3, #24]
    
    //electronic_throttle_auto_tune(etb);

    //electronic_throttle_update(etb);

    etb->state = ETB_STATE_NORMAL;
 80020dc:	2301      	movs	r3, #1
 80020de:	7003      	strb	r3, [r0, #0]

}
 80020e0:	bd08      	pop	{r3, pc}
        log_error("Electronic throttle init failed");
 80020e2:	4806      	ldr	r0, [pc, #24]	@ (80020fc <electronic_throttle_init+0x48>)
 80020e4:	f000 f8ce 	bl	8002284 <log_error>
        return;
 80020e8:	e7fa      	b.n	80020e0 <electronic_throttle_init+0x2c>
 80020ea:	bf00      	nop
 80020ec:	437f0000 	.word	0x437f0000
 80020f0:	c37f0000 	.word	0xc37f0000
 80020f4:	437a0000 	.word	0x437a0000
 80020f8:	c37a0000 	.word	0xc37a0000
 80020fc:	0800ccf8 	.word	0x0800ccf8

08002100 <electronic_throttle_set>:

void electronic_throttle_set(electronic_throttle_t *etb, percent_t position)
{
    if (!IS_IN_RANGE(position, (percent_t)0, (percent_t)100))
 8002100:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002108:	db06      	blt.n	8002118 <electronic_throttle_set+0x18>
 800210a:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8002124 <electronic_throttle_set+0x24>
 800210e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002116:	d901      	bls.n	800211c <electronic_throttle_set+0x1c>
    {
        etb->target_position = ELECTRONIC_THROTTLE_FAIL_SAFE_POSITION;
 8002118:	2300      	movs	r3, #0
 800211a:	6103      	str	r3, [r0, #16]
    }
    etb->target_position = position;
 800211c:	ed80 0a04 	vstr	s0, [r0, #16]
}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	42c80000 	.word	0x42c80000

08002128 <electronic_throttle_update>:

void electronic_throttle_update(void *arg)
{
 8002128:	b530      	push	{r4, r5, lr}
 800212a:	ed2d 8b02 	vpush	{d8}
 800212e:	b083      	sub	sp, #12
    
    electronic_throttle_t *etb = (electronic_throttle_t *)arg;
    if (etb == NULL || etb->pid == NULL || etb->sensor == NULL || etb->motor == NULL)
 8002130:	2800      	cmp	r0, #0
 8002132:	d04a      	beq.n	80021ca <electronic_throttle_update+0xa2>
 8002134:	4604      	mov	r4, r0
 8002136:	6883      	ldr	r3, [r0, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d046      	beq.n	80021ca <electronic_throttle_update+0xa2>
 800213c:	68c0      	ldr	r0, [r0, #12]
 800213e:	2800      	cmp	r0, #0
 8002140:	d043      	beq.n	80021ca <electronic_throttle_update+0xa2>
 8002142:	6863      	ldr	r3, [r4, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d040      	beq.n	80021ca <electronic_throttle_update+0xa2>
    {
        log_error("Electronic throttle not initialized");
        return;
    }
    percent_t position = sensor_tps_get(etb->sensor);
 8002148:	f001 fd40 	bl	8003bcc <sensor_tps_get>
 800214c:	eeb0 8a40 	vmov.f32	s16, s0
    etb->current_position = position;
 8002150:	ed84 0a05 	vstr	s0, [r4, #20]
    pid_set_setpoint(etb->pid, etb->target_position);
 8002154:	ed94 0a04 	vldr	s0, [r4, #16]
 8002158:	68a0      	ldr	r0, [r4, #8]
 800215a:	f000 fed6 	bl	8002f0a <pid_set_setpoint>
    percent_t motor_effort = pid_compute(etb->pid, get_time_us(), position);
 800215e:	68a5      	ldr	r5, [r4, #8]
 8002160:	f007 fa1a 	bl	8009598 <get_time_us>
 8002164:	4601      	mov	r1, r0
 8002166:	eeb0 0a48 	vmov.f32	s0, s16
 800216a:	4628      	mov	r0, r5
 800216c:	f000 fed0 	bl	8002f10 <pid_compute>
    dc_motor_direction_t dir = motor_effort > 0 ? MOTOR_DIRECTION_FORWARD : MOTOR_DIRECTION_REVERSE;
 8002170:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002178:	bfd4      	ite	le
 800217a:	2101      	movle	r1, #1
 800217c:	2100      	movgt	r1, #0
    /* Limiting the end of travel duty cycle for protection */
    if (etb->is_duty_cycle_limiting_enabled)
 800217e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d051      	beq.n	800222a <electronic_throttle_update+0x102>
    {
        if (ABS(position - 100.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 8002186:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 8002278 <electronic_throttle_update+0x150>
 800218a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800218e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002196:	d41f      	bmi.n	80021d8 <electronic_throttle_update+0xb0>
 8002198:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800219c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a4:	bf4c      	ite	mi
 80021a6:	2301      	movmi	r3, #1
 80021a8:	2300      	movpl	r3, #0
 80021aa:	b30b      	cbz	r3, 80021f0 <electronic_throttle_update+0xc8>
        {
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_upper);
 80021ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80021b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b4:	d41a      	bmi.n	80021ec <electronic_throttle_update+0xc4>
 80021b6:	edd4 7a07 	vldr	s15, [r4, #28]
 80021ba:	eef4 7ac0 	vcmpe.f32	s15, s0
 80021be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c2:	d515      	bpl.n	80021f0 <electronic_throttle_update+0xc8>
 80021c4:	eeb0 0a67 	vmov.f32	s0, s15
 80021c8:	e012      	b.n	80021f0 <electronic_throttle_update+0xc8>
        log_error("Electronic throttle not initialized");
 80021ca:	482c      	ldr	r0, [pc, #176]	@ (800227c <electronic_throttle_update+0x154>)
 80021cc:	f000 f85a 	bl	8002284 <log_error>
        {
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_lower);
        }
    }
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
}
 80021d0:	b003      	add	sp, #12
 80021d2:	ecbd 8b02 	vpop	{d8}
 80021d6:	bd30      	pop	{r4, r5, pc}
        if (ABS(position - 100.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 80021d8:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80021dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e4:	bfcc      	ite	gt
 80021e6:	2301      	movgt	r3, #1
 80021e8:	2300      	movle	r3, #0
 80021ea:	e7de      	b.n	80021aa <electronic_throttle_update+0x82>
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_upper);
 80021ec:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8002280 <electronic_throttle_update+0x158>
        if (ABS(position - 0.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 80021f0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	d426      	bmi.n	8002248 <electronic_throttle_update+0x120>
 80021fa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80021fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002206:	bf4c      	ite	mi
 8002208:	2301      	movmi	r3, #1
 800220a:	2300      	movpl	r3, #0
 800220c:	b16b      	cbz	r3, 800222a <electronic_throttle_update+0x102>
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_lower);
 800220e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002216:	d421      	bmi.n	800225c <electronic_throttle_update+0x134>
 8002218:	edd4 7a06 	vldr	s15, [r4, #24]
 800221c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8002220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002224:	d501      	bpl.n	800222a <electronic_throttle_update+0x102>
 8002226:	eeb0 0a67 	vmov.f32	s0, s15
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 800222a:	6860      	ldr	r0, [r4, #4]
 800222c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002234:	d416      	bmi.n	8002264 <electronic_throttle_update+0x13c>
 8002236:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800223a:	edcd 7a01 	vstr	s15, [sp, #4]
 800223e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002242:	f7ff fc9d 	bl	8001b80 <dc_motor_set>
 8002246:	e7c3      	b.n	80021d0 <electronic_throttle_update+0xa8>
        if (ABS(position - 0.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 8002248:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 800224c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002254:	bfcc      	ite	gt
 8002256:	2301      	movgt	r3, #1
 8002258:	2300      	movle	r3, #0
 800225a:	e7d7      	b.n	800220c <electronic_throttle_update+0xe4>
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 800225c:	6860      	ldr	r0, [r4, #4]
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_lower);
 800225e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002280 <electronic_throttle_update+0x158>
 8002262:	e7e8      	b.n	8002236 <electronic_throttle_update+0x10e>
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 8002264:	eeb1 0a40 	vneg.f32	s0, s0
 8002268:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800226c:	edcd 7a01 	vstr	s15, [sp, #4]
 8002270:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002274:	e7e5      	b.n	8002242 <electronic_throttle_update+0x11a>
 8002276:	bf00      	nop
 8002278:	42c80000 	.word	0x42c80000
 800227c:	0800cd18 	.word	0x0800cd18
 8002280:	00000000 	.word	0x00000000

08002284 <log_error>:
#include "error_handling.h"

#if ERROR_HANDLING_ENABLED == true
void log_error(const char* message)
{
    if (message == NULL) return;
 8002284:	b1c0      	cbz	r0, 80022b8 <log_error+0x34>
{
 8002286:	b570      	push	{r4, r5, r6, lr}
 8002288:	b09a      	sub	sp, #104	@ 0x68
 800228a:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 800228c:	ac01      	add	r4, sp, #4
 800228e:	2564      	movs	r5, #100	@ 0x64
 8002290:	462a      	mov	r2, r5
 8002292:	2100      	movs	r1, #0
 8002294:	4620      	mov	r0, r4
 8002296:	f008 ff29 	bl	800b0ec <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Error: %s\n", message);
 800229a:	4633      	mov	r3, r6
 800229c:	4a07      	ldr	r2, [pc, #28]	@ (80022bc <log_error+0x38>)
 800229e:	4629      	mov	r1, r5
 80022a0:	4620      	mov	r0, r4
 80022a2:	f008 feed 	bl	800b080 <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 80022a6:	4620      	mov	r0, r4
 80022a8:	f7fd ff7a 	bl	80001a0 <strlen>
 80022ac:	b281      	uxth	r1, r0
 80022ae:	4620      	mov	r0, r4
 80022b0:	f007 feb6 	bl	800a020 <CDC_Transmit_FS>
}
 80022b4:	b01a      	add	sp, #104	@ 0x68
 80022b6:	bd70      	pop	{r4, r5, r6, pc}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	0800cd3c 	.word	0x0800cd3c

080022c0 <log_warning>:

void log_warning(const char* message)
{
    if (message == NULL) return;
 80022c0:	b1c0      	cbz	r0, 80022f4 <log_warning+0x34>
{
 80022c2:	b570      	push	{r4, r5, r6, lr}
 80022c4:	b09a      	sub	sp, #104	@ 0x68
 80022c6:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 80022c8:	ac01      	add	r4, sp, #4
 80022ca:	2564      	movs	r5, #100	@ 0x64
 80022cc:	462a      	mov	r2, r5
 80022ce:	2100      	movs	r1, #0
 80022d0:	4620      	mov	r0, r4
 80022d2:	f008 ff0b 	bl	800b0ec <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Warning: %s\n", message);
 80022d6:	4633      	mov	r3, r6
 80022d8:	4a07      	ldr	r2, [pc, #28]	@ (80022f8 <log_warning+0x38>)
 80022da:	4629      	mov	r1, r5
 80022dc:	4620      	mov	r0, r4
 80022de:	f008 fecf 	bl	800b080 <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 80022e2:	4620      	mov	r0, r4
 80022e4:	f7fd ff5c 	bl	80001a0 <strlen>
 80022e8:	b281      	uxth	r1, r0
 80022ea:	4620      	mov	r0, r4
 80022ec:	f007 fe98 	bl	800a020 <CDC_Transmit_FS>
}
 80022f0:	b01a      	add	sp, #104	@ 0x68
 80022f2:	bd70      	pop	{r4, r5, r6, pc}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	0800cd48 	.word	0x0800cd48

080022fc <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80022fc:	b180      	cbz	r0, 8002320 <xEventGroupCreateStatic+0x24>
	{
 80022fe:	b510      	push	{r4, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8002304:	2320      	movs	r3, #32
 8002306:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8002308:	9b01      	ldr	r3, [sp, #4]
 800230a:	2b20      	cmp	r3, #32
 800230c:	d011      	beq.n	8002332 <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800230e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002312:	f383 8811 	msr	BASEPRI, r3
 8002316:	f3bf 8f6f 	isb	sy
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	e7fe      	b.n	800231e <xEventGroupCreateStatic+0x22>
 8002320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 8002330:	e7fe      	b.n	8002330 <xEventGroupCreateStatic+0x34>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002338:	f000 fd10 	bl	8002d5c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800233c:	2301      	movs	r3, #1
 800233e:	7723      	strb	r3, [r4, #28]
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
	}
 8002340:	4620      	mov	r0, r4
 8002342:	b002      	add	sp, #8
 8002344:	bd10      	pop	{r4, pc}

08002346 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002346:	b538      	push	{r3, r4, r5, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002348:	2020      	movs	r0, #32
 800234a:	f000 f947 	bl	80025dc <pvPortMalloc>

		if( pxEventBits != NULL )
 800234e:	4604      	mov	r4, r0
 8002350:	b128      	cbz	r0, 800235e <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 8002352:	2500      	movs	r5, #0
 8002354:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002358:	f000 fd00 	bl	8002d5c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800235c:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
 800235e:	4620      	mov	r0, r4
 8002360:	bd38      	pop	{r3, r4, r5, pc}

08002362 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002362:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002364:	f007 fb8e 	bl	8009a84 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  osDelay(100);
 8002368:	2064      	movs	r0, #100	@ 0x64
 800236a:	f7fe fe03 	bl	8000f74 <osDelay>
  
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 800236e:	2001      	movs	r0, #1
 8002370:	f7fe fe00 	bl	8000f74 <osDelay>
  for(;;)
 8002374:	e7fb      	b.n	800236e <StartDefaultTask+0xc>

08002376 <controller_init_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controller_init_task */
void controller_init_task(void *argument)
{
 8002376:	b508      	push	{r3, lr}
  /* USER CODE BEGIN controller_init_task */

  controller_init();
 8002378:	f7ff fad6 	bl	8001928 <controller_init>


  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 800237c:	2064      	movs	r0, #100	@ 0x64
 800237e:	f7fe fdf9 	bl	8000f74 <osDelay>
  for(;;)
 8002382:	e7fb      	b.n	800237c <controller_init_task+0x6>

08002384 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8002384:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002386:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <MX_FREERTOS_Init+0x2c>)
 8002388:	2100      	movs	r1, #0
 800238a:	480a      	ldr	r0, [pc, #40]	@ (80023b4 <MX_FREERTOS_Init+0x30>)
 800238c:	f7fe fd98 	bl	8000ec0 <osThreadNew>
 8002390:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <MX_FREERTOS_Init+0x34>)
 8002392:	6018      	str	r0, [r3, #0]
  init_taskHandle = osThreadNew(controller_init_task, NULL, &init_task_attributes);
 8002394:	4a09      	ldr	r2, [pc, #36]	@ (80023bc <MX_FREERTOS_Init+0x38>)
 8002396:	2100      	movs	r1, #0
 8002398:	4809      	ldr	r0, [pc, #36]	@ (80023c0 <MX_FREERTOS_Init+0x3c>)
 800239a:	f7fe fd91 	bl	8000ec0 <osThreadNew>
 800239e:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <MX_FREERTOS_Init+0x40>)
 80023a0:	6018      	str	r0, [r3, #0]
  engine_flagsHandle = osEventFlagsNew(&engine_flags_attributes);
 80023a2:	4809      	ldr	r0, [pc, #36]	@ (80023c8 <MX_FREERTOS_Init+0x44>)
 80023a4:	f7fe fe62 	bl	800106c <osEventFlagsNew>
 80023a8:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <MX_FREERTOS_Init+0x48>)
 80023aa:	6018      	str	r0, [r3, #0]
}
 80023ac:	bd08      	pop	{r3, pc}
 80023ae:	bf00      	nop
 80023b0:	0800d1b8 	.word	0x0800d1b8
 80023b4:	08002363 	.word	0x08002363
 80023b8:	2000222c 	.word	0x2000222c
 80023bc:	0800d194 	.word	0x0800d194
 80023c0:	08002377 	.word	0x08002377
 80023c4:	20002228 	.word	0x20002228
 80023c8:	0800d184 	.word	0x0800d184
 80023cc:	20002224 	.word	0x20002224

080023d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023d4:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d6:	ad05      	add	r5, sp, #20
 80023d8:	2400      	movs	r4, #0
 80023da:	9405      	str	r4, [sp, #20]
 80023dc:	9406      	str	r4, [sp, #24]
 80023de:	9407      	str	r4, [sp, #28]
 80023e0:	9408      	str	r4, [sp, #32]
 80023e2:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e4:	9401      	str	r4, [sp, #4]
 80023e6:	4b46      	ldr	r3, [pc, #280]	@ (8002500 <MX_GPIO_Init+0x130>)
 80023e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023ea:	f042 0204 	orr.w	r2, r2, #4
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80023f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023f2:	f002 0204 	and.w	r2, r2, #4
 80023f6:	9201      	str	r2, [sp, #4]
 80023f8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	9402      	str	r4, [sp, #8]
 80023fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	631a      	str	r2, [r3, #48]	@ 0x30
 8002404:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002406:	f002 0201 	and.w	r2, r2, #1
 800240a:	9202      	str	r2, [sp, #8]
 800240c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	9403      	str	r4, [sp, #12]
 8002410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002412:	f042 0202 	orr.w	r2, r2, #2
 8002416:	631a      	str	r2, [r3, #48]	@ 0x30
 8002418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800241a:	f002 0202 	and.w	r2, r2, #2
 800241e:	9203      	str	r2, [sp, #12]
 8002420:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002422:	9404      	str	r4, [sp, #16]
 8002424:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002426:	f042 0208 	orr.w	r2, r2, #8
 800242a:	631a      	str	r2, [r3, #48]	@ 0x30
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	9304      	str	r3, [sp, #16]
 8002434:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|INJECTOR_OUTPUT_3_Pin|INJECTOR_OUTPUT_2_Pin|INJECTOR_OUTPUT_1_Pin, GPIO_PIN_RESET);
 8002436:	f8df a0d0 	ldr.w	sl, [pc, #208]	@ 8002508 <MX_GPIO_Init+0x138>
 800243a:	4622      	mov	r2, r4
 800243c:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8002440:	4650      	mov	r0, sl
 8002442:	f002 fec8 	bl	80051d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LOW_SIDE_1_Pin|LOW_SIDE_2_Pin|FAN_1_Pin|FAN_2_Pin
 8002446:	4e2f      	ldr	r6, [pc, #188]	@ (8002504 <MX_GPIO_Init+0x134>)
 8002448:	4622      	mov	r2, r4
 800244a:	f24f 413f 	movw	r1, #62527	@ 0xf43f
 800244e:	4630      	mov	r0, r6
 8002450:	f002 fec1 	bl	80051d6 <HAL_GPIO_WritePin>
                          |AUX_RELAY_Pin|GAS_SOLENOID_RELAY_Pin|FUEL_PUMP_RELAY_Pin|MAIN_RELAY_Pin
                          |IGNITION_OUTPUT_3_Pin|IGNITION_OUTPUT_2_Pin|IGNITION_OUTPUT_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INJECTOR_OUTPUT_4_GPIO_Port, INJECTOR_OUTPUT_4_Pin, GPIO_PIN_RESET);
 8002454:	f8df 90b4 	ldr.w	r9, [pc, #180]	@ 800250c <MX_GPIO_Init+0x13c>
 8002458:	4622      	mov	r2, r4
 800245a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800245e:	4648      	mov	r0, r9
 8002460:	f002 feb9 	bl	80051d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IGNITION_OUTPUT_4_GPIO_Port, IGNITION_OUTPUT_4_Pin, GPIO_PIN_RESET);
 8002464:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 8002510 <MX_GPIO_Init+0x140>
 8002468:	4622      	mov	r2, r4
 800246a:	2104      	movs	r1, #4
 800246c:	4640      	mov	r0, r8
 800246e:	f002 feb2 	bl	80051d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin INJECTOR_OUTPUT_3_Pin INJECTOR_OUTPUT_2_Pin INJECTOR_OUTPUT_1_Pin */
  GPIO_InitStruct.Pin = LED_Pin|INJECTOR_OUTPUT_3_Pin|INJECTOR_OUTPUT_2_Pin|INJECTOR_OUTPUT_1_Pin;
 8002472:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002476:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002478:	2701      	movs	r7, #1
 800247a:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002480:	4629      	mov	r1, r5
 8002482:	4650      	mov	r0, sl
 8002484:	f002 fdbc 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOW_SIDE_1_Pin LOW_SIDE_2_Pin FAN_1_Pin FAN_2_Pin
                           AUX_RELAY_Pin GAS_SOLENOID_RELAY_Pin FUEL_PUMP_RELAY_Pin MAIN_RELAY_Pin
                           IGNITION_OUTPUT_3_Pin IGNITION_OUTPUT_2_Pin IGNITION_OUTPUT_1_Pin */
  GPIO_InitStruct.Pin = LOW_SIDE_1_Pin|LOW_SIDE_2_Pin|FAN_1_Pin|FAN_2_Pin
 8002488:	f24f 433f 	movw	r3, #62527	@ 0xf43f
 800248c:	9305      	str	r3, [sp, #20]
                          |AUX_RELAY_Pin|GAS_SOLENOID_RELAY_Pin|FUEL_PUMP_RELAY_Pin|MAIN_RELAY_Pin
                          |IGNITION_OUTPUT_3_Pin|IGNITION_OUTPUT_2_Pin|IGNITION_OUTPUT_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002494:	4629      	mov	r1, r5
 8002496:	4630      	mov	r0, r6
 8002498:	f002 fdb2 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pin : INJECTOR_OUTPUT_4_Pin */
  GPIO_InitStruct.Pin = INJECTOR_OUTPUT_4_Pin;
 800249c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024a0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a2:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(INJECTOR_OUTPUT_4_GPIO_Port, &GPIO_InitStruct);
 80024a8:	4629      	mov	r1, r5
 80024aa:	4648      	mov	r0, r9
 80024ac:	f002 fda8 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pin : IGNITION_OUTPUT_4_Pin */
  GPIO_InitStruct.Pin = IGNITION_OUTPUT_4_Pin;
 80024b0:	2304      	movs	r3, #4
 80024b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(IGNITION_OUTPUT_4_GPIO_Port, &GPIO_InitStruct);
 80024ba:	4629      	mov	r1, r5
 80024bc:	4640      	mov	r0, r8
 80024be:	f002 fd9f 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_VR_1_Pin */
  GPIO_InitStruct.Pin = SENSOR_VR_1_Pin;
 80024c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024c6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SENSOR_VR_1_GPIO_Port, &GPIO_InitStruct);
 80024cc:	4629      	mov	r1, r5
 80024ce:	4630      	mov	r0, r6
 80024d0:	f002 fd96 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_VR2_Pin */
  GPIO_InitStruct.Pin = SENSOR_VR2_Pin;
 80024d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024d8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024de:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SENSOR_VR2_GPIO_Port, &GPIO_InitStruct);
 80024e2:	4629      	mov	r1, r5
 80024e4:	4630      	mov	r0, r6
 80024e6:	f002 fd8b 	bl	8005000 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80024ea:	4622      	mov	r2, r4
 80024ec:	2105      	movs	r1, #5
 80024ee:	2017      	movs	r0, #23
 80024f0:	f002 f97c 	bl	80047ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024f4:	2017      	movs	r0, #23
 80024f6:	f002 f989 	bl	800480c <HAL_NVIC_EnableIRQ>

}
 80024fa:	b00a      	add	sp, #40	@ 0x28
 80024fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002500:	40023800 	.word	0x40023800
 8002504:	40020400 	.word	0x40020400
 8002508:	40020800 	.word	0x40020800
 800250c:	40020000 	.word	0x40020000
 8002510:	40020c00 	.word	0x40020c00

08002514 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002514:	4a12      	ldr	r2, [pc, #72]	@ (8002560 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002516:	f012 0f07 	tst.w	r2, #7
 800251a:	d01e      	beq.n	800255a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800251c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800251e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002522:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 8002526:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002528:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800252a:	480e      	ldr	r0, [pc, #56]	@ (8002564 <prvHeapInit+0x50>)
 800252c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800252e:	2100      	movs	r1, #0
 8002530:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002532:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002534:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002536:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800253a:	480b      	ldr	r0, [pc, #44]	@ (8002568 <prvHeapInit+0x54>)
 800253c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800253e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002540:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002542:	1a99      	subs	r1, r3, r2
 8002544:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002546:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002548:	4b08      	ldr	r3, [pc, #32]	@ (800256c <prvHeapInit+0x58>)
 800254a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800254c:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <prvHeapInit+0x5c>)
 800254e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002550:	4b08      	ldr	r3, [pc, #32]	@ (8002574 <prvHeapInit+0x60>)
 8002552:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002556:	601a      	str	r2, [r3, #0]
}
 8002558:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800255a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800255e:	e7e4      	b.n	800252a <prvHeapInit+0x16>
 8002560:	20002250 	.word	0x20002250
 8002564:	20002248 	.word	0x20002248
 8002568:	20002244 	.word	0x20002244
 800256c:	2000223c 	.word	0x2000223c
 8002570:	20002240 	.word	0x20002240
 8002574:	20002230 	.word	0x20002230

08002578 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002578:	4b16      	ldr	r3, [pc, #88]	@ (80025d4 <prvInsertBlockIntoFreeList+0x5c>)
 800257a:	461a      	mov	r2, r3
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4283      	cmp	r3, r0
 8002580:	d3fb      	bcc.n	800257a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002582:	6851      	ldr	r1, [r2, #4]
 8002584:	eb02 0c01 	add.w	ip, r2, r1
 8002588:	4584      	cmp	ip, r0
 800258a:	d009      	beq.n	80025a0 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800258c:	6841      	ldr	r1, [r0, #4]
 800258e:	eb00 0c01 	add.w	ip, r0, r1
 8002592:	4563      	cmp	r3, ip
 8002594:	d009      	beq.n	80025aa <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002596:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002598:	4290      	cmp	r0, r2
 800259a:	d019      	beq.n	80025d0 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800259c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800259e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80025a0:	6840      	ldr	r0, [r0, #4]
 80025a2:	4401      	add	r1, r0
 80025a4:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80025a6:	4610      	mov	r0, r2
 80025a8:	e7f0      	b.n	800258c <prvInsertBlockIntoFreeList+0x14>
{
 80025aa:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80025ac:	4c0a      	ldr	r4, [pc, #40]	@ (80025d8 <prvInsertBlockIntoFreeList+0x60>)
 80025ae:	6824      	ldr	r4, [r4, #0]
 80025b0:	42a3      	cmp	r3, r4
 80025b2:	d00b      	beq.n	80025cc <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4419      	add	r1, r3
 80025b8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80025ba:	6813      	ldr	r3, [r2, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80025c0:	4290      	cmp	r0, r2
 80025c2:	d000      	beq.n	80025c6 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80025c4:	6010      	str	r0, [r2, #0]
	}
}
 80025c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025ca:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80025cc:	6004      	str	r4, [r0, #0]
 80025ce:	e7f7      	b.n	80025c0 <prvInsertBlockIntoFreeList+0x48>
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20002248 	.word	0x20002248
 80025d8:	20002244 	.word	0x20002244

080025dc <pvPortMalloc>:
{
 80025dc:	b538      	push	{r3, r4, r5, lr}
 80025de:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80025e0:	f005 ffc8 	bl	8008574 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80025e4:	4b38      	ldr	r3, [pc, #224]	@ (80026c8 <pvPortMalloc+0xec>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	b1b3      	cbz	r3, 8002618 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80025ea:	4b38      	ldr	r3, [pc, #224]	@ (80026cc <pvPortMalloc+0xf0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	421c      	tst	r4, r3
 80025f0:	d150      	bne.n	8002694 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 80025f2:	2c00      	cmp	r4, #0
 80025f4:	d050      	beq.n	8002698 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 80025f6:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80025fa:	f014 0f07 	tst.w	r4, #7
 80025fe:	d002      	beq.n	8002606 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002600:	f022 0207 	bic.w	r2, r2, #7
 8002604:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002606:	2a00      	cmp	r2, #0
 8002608:	d055      	beq.n	80026b6 <pvPortMalloc+0xda>
 800260a:	4b31      	ldr	r3, [pc, #196]	@ (80026d0 <pvPortMalloc+0xf4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4293      	cmp	r3, r2
 8002610:	d353      	bcc.n	80026ba <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8002612:	4930      	ldr	r1, [pc, #192]	@ (80026d4 <pvPortMalloc+0xf8>)
 8002614:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002616:	e004      	b.n	8002622 <pvPortMalloc+0x46>
			prvHeapInit();
 8002618:	f7ff ff7c 	bl	8002514 <prvHeapInit>
 800261c:	e7e5      	b.n	80025ea <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800261e:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8002620:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002622:	6863      	ldr	r3, [r4, #4]
 8002624:	4293      	cmp	r3, r2
 8002626:	d202      	bcs.n	800262e <pvPortMalloc+0x52>
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f7      	bne.n	800261e <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800262e:	4b26      	ldr	r3, [pc, #152]	@ (80026c8 <pvPortMalloc+0xec>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	42a3      	cmp	r3, r4
 8002634:	d043      	beq.n	80026be <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002636:	680d      	ldr	r5, [r1, #0]
 8002638:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800263e:	6863      	ldr	r3, [r4, #4]
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	2b10      	cmp	r3, #16
 8002644:	d910      	bls.n	8002668 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002646:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002648:	f010 0f07 	tst.w	r0, #7
 800264c:	d008      	beq.n	8002660 <pvPortMalloc+0x84>
 800264e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002652:	f383 8811 	msr	BASEPRI, r3
 8002656:	f3bf 8f6f 	isb	sy
 800265a:	f3bf 8f4f 	dsb	sy
 800265e:	e7fe      	b.n	800265e <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002660:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002662:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002664:	f7ff ff88 	bl	8002578 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002668:	6862      	ldr	r2, [r4, #4]
 800266a:	4919      	ldr	r1, [pc, #100]	@ (80026d0 <pvPortMalloc+0xf4>)
 800266c:	680b      	ldr	r3, [r1, #0]
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002672:	4919      	ldr	r1, [pc, #100]	@ (80026d8 <pvPortMalloc+0xfc>)
 8002674:	6809      	ldr	r1, [r1, #0]
 8002676:	428b      	cmp	r3, r1
 8002678:	d201      	bcs.n	800267e <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800267a:	4917      	ldr	r1, [pc, #92]	@ (80026d8 <pvPortMalloc+0xfc>)
 800267c:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800267e:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <pvPortMalloc+0xf0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002686:	2300      	movs	r3, #0
 8002688:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800268a:	4a14      	ldr	r2, [pc, #80]	@ (80026dc <pvPortMalloc+0x100>)
 800268c:	6813      	ldr	r3, [r2, #0]
 800268e:	3301      	adds	r3, #1
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e002      	b.n	800269a <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8002694:	2500      	movs	r5, #0
 8002696:	e000      	b.n	800269a <pvPortMalloc+0xbe>
 8002698:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800269a:	f006 f805 	bl	80086a8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800269e:	f015 0f07 	tst.w	r5, #7
 80026a2:	d00e      	beq.n	80026c2 <pvPortMalloc+0xe6>
 80026a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	e7fe      	b.n	80026b4 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 80026b6:	2500      	movs	r5, #0
 80026b8:	e7ef      	b.n	800269a <pvPortMalloc+0xbe>
 80026ba:	2500      	movs	r5, #0
 80026bc:	e7ed      	b.n	800269a <pvPortMalloc+0xbe>
 80026be:	2500      	movs	r5, #0
 80026c0:	e7eb      	b.n	800269a <pvPortMalloc+0xbe>
}
 80026c2:	4628      	mov	r0, r5
 80026c4:	bd38      	pop	{r3, r4, r5, pc}
 80026c6:	bf00      	nop
 80026c8:	20002244 	.word	0x20002244
 80026cc:	20002230 	.word	0x20002230
 80026d0:	20002240 	.word	0x20002240
 80026d4:	20002248 	.word	0x20002248
 80026d8:	2000223c 	.word	0x2000223c
 80026dc:	20002238 	.word	0x20002238

080026e0 <vPortFree>:
	if( pv != NULL )
 80026e0:	2800      	cmp	r0, #0
 80026e2:	d034      	beq.n	800274e <vPortFree+0x6e>
{
 80026e4:	b538      	push	{r3, r4, r5, lr}
 80026e6:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80026e8:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80026ec:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80026f0:	4a17      	ldr	r2, [pc, #92]	@ (8002750 <vPortFree+0x70>)
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	4213      	tst	r3, r2
 80026f6:	d108      	bne.n	800270a <vPortFree+0x2a>
 80026f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	e7fe      	b.n	8002708 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800270a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800270e:	b141      	cbz	r1, 8002722 <vPortFree+0x42>
 8002710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	e7fe      	b.n	8002720 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002722:	ea23 0302 	bic.w	r3, r3, r2
 8002726:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800272a:	f005 ff23 	bl	8008574 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800272e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8002732:	4a08      	ldr	r2, [pc, #32]	@ (8002754 <vPortFree+0x74>)
 8002734:	6813      	ldr	r3, [r2, #0]
 8002736:	440b      	add	r3, r1
 8002738:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800273a:	4628      	mov	r0, r5
 800273c:	f7ff ff1c 	bl	8002578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002740:	4a05      	ldr	r2, [pc, #20]	@ (8002758 <vPortFree+0x78>)
 8002742:	6813      	ldr	r3, [r2, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8002748:	f005 ffae 	bl	80086a8 <xTaskResumeAll>
}
 800274c:	bd38      	pop	{r3, r4, r5, pc}
 800274e:	4770      	bx	lr
 8002750:	20002230 	.word	0x20002230
 8002754:	20002240 	.word	0x20002240
 8002758:	20002234 	.word	0x20002234

0800275c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800275c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800275e:	480b      	ldr	r0, [pc, #44]	@ (800278c <MX_I2C1_Init+0x30>)
 8002760:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <MX_I2C1_Init+0x34>)
 8002762:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002764:	4b0b      	ldr	r3, [pc, #44]	@ (8002794 <MX_I2C1_Init+0x38>)
 8002766:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002768:	2300      	movs	r3, #0
 800276a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800276c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800276e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002772:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002774:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002776:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002778:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800277a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800277c:	f002 fd48 	bl	8005210 <HAL_I2C_Init>
 8002780:	b900      	cbnz	r0, 8002784 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002782:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002784:	f000 fb48 	bl	8002e18 <Error_Handler>
}
 8002788:	e7fb      	b.n	8002782 <MX_I2C1_Init+0x26>
 800278a:	bf00      	nop
 800278c:	20005e50 	.word	0x20005e50
 8002790:	40005400 	.word	0x40005400
 8002794:	000186a0 	.word	0x000186a0

08002798 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002798:	b530      	push	{r4, r5, lr}
 800279a:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	2300      	movs	r3, #0
 800279e:	9303      	str	r3, [sp, #12]
 80027a0:	9304      	str	r3, [sp, #16]
 80027a2:	9305      	str	r3, [sp, #20]
 80027a4:	9306      	str	r3, [sp, #24]
 80027a6:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80027a8:	6802      	ldr	r2, [r0, #0]
 80027aa:	4b14      	ldr	r3, [pc, #80]	@ (80027fc <HAL_I2C_MspInit+0x64>)
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80027b0:	b009      	add	sp, #36	@ 0x24
 80027b2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b4:	2500      	movs	r5, #0
 80027b6:	9501      	str	r5, [sp, #4]
 80027b8:	4c11      	ldr	r4, [pc, #68]	@ (8002800 <HAL_I2C_MspInit+0x68>)
 80027ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80027c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027cc:	23c0      	movs	r3, #192	@ 0xc0
 80027ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027d0:	2312      	movs	r3, #18
 80027d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d4:	2303      	movs	r3, #3
 80027d6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027d8:	2304      	movs	r3, #4
 80027da:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027dc:	a903      	add	r1, sp, #12
 80027de:	4809      	ldr	r0, [pc, #36]	@ (8002804 <HAL_I2C_MspInit+0x6c>)
 80027e0:	f002 fc0e 	bl	8005000 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027e4:	9502      	str	r5, [sp, #8]
 80027e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027ec:	6423      	str	r3, [r4, #64]	@ 0x40
 80027ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f4:	9302      	str	r3, [sp, #8]
 80027f6:	9b02      	ldr	r3, [sp, #8]
}
 80027f8:	e7da      	b.n	80027b0 <HAL_I2C_MspInit+0x18>
 80027fa:	bf00      	nop
 80027fc:	40005400 	.word	0x40005400
 8002800:	40023800 	.word	0x40023800
 8002804:	40020400 	.word	0x40020400

08002808 <ignition_coil_begin_charge>:
 *
 * @param coil_index The index of the coil to be charged.
 */
void ignition_coil_begin_charge(void *arg)
{
    if (arg == NULL)
 8002808:	b330      	cbz	r0, 8002858 <ignition_coil_begin_charge+0x50>
{
 800280a:	b570      	push	{r4, r5, r6, lr}
 800280c:	4604      	mov	r4, r0
    {
        return;
    }
    uint8_t *coil_index = (uint8_t *)arg;

    if (coil_index[1] > FIRMWARE_IGNITION_OUTPUT_COUNT - 1 || coil_index[0] > FIRMWARE_IGNITION_OUTPUT_COUNT - 1)
 800280e:	7843      	ldrb	r3, [r0, #1]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d802      	bhi.n	800281a <ignition_coil_begin_charge+0x12>
 8002814:	7803      	ldrb	r3, [r0, #0]
 8002816:	2b03      	cmp	r3, #3
 8002818:	d903      	bls.n	8002822 <ignition_coil_begin_charge+0x1a>
    {
        log_error("Unkown ignition output");
 800281a:	4810      	ldr	r0, [pc, #64]	@ (800285c <ignition_coil_begin_charge+0x54>)
 800281c:	f7ff fd32 	bl	8002284 <log_error>
    }
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_CHARGING;
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_CHARGING;
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_SET);
}
 8002820:	bd70      	pop	{r4, r5, r6, pc}
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_CHARGING;
 8002822:	4a0f      	ldr	r2, [pc, #60]	@ (8002860 <ignition_coil_begin_charge+0x58>)
 8002824:	2501      	movs	r5, #1
 8002826:	54d5      	strb	r5, [r2, r3]
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_CHARGING;
 8002828:	7843      	ldrb	r3, [r0, #1]
 800282a:	54d5      	strb	r5, [r2, r3]
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_SET);
 800282c:	7800      	ldrb	r0, [r0, #0]
 800282e:	4e0d      	ldr	r6, [pc, #52]	@ (8002864 <ignition_coil_begin_charge+0x5c>)
 8002830:	6833      	ldr	r3, [r6, #0]
 8002832:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 8002836:	462a      	mov	r2, r5
 8002838:	8889      	ldrh	r1, [r1, #4]
 800283a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800283e:	f002 fcca 	bl	80051d6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_SET);
 8002842:	7860      	ldrb	r0, [r4, #1]
 8002844:	6833      	ldr	r3, [r6, #0]
 8002846:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 800284a:	462a      	mov	r2, r5
 800284c:	8889      	ldrh	r1, [r1, #4]
 800284e:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8002852:	f002 fcc0 	bl	80051d6 <HAL_GPIO_WritePin>
 8002856:	e7e3      	b.n	8002820 <ignition_coil_begin_charge+0x18>
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	0800cd80 	.word	0x0800cd80
 8002860:	20005eb0 	.word	0x20005eb0
 8002864:	20005eb4 	.word	0x20005eb4

08002868 <ignition_coil_fire_spark>:
 *
 * @param coil_index The index of the coil to fire the spark from.
 */
void ignition_coil_fire_spark(void *arg)
{
    if (arg == NULL)
 8002868:	b340      	cbz	r0, 80028bc <ignition_coil_fire_spark+0x54>
{
 800286a:	b570      	push	{r4, r5, r6, lr}
 800286c:	4604      	mov	r4, r0
    {
        return;
    }

    uint8_t *coil_index = (uint8_t *)arg;
    if (coil_index[1] > FIRMWARE_IGNITION_OUTPUT_COUNT - 1 || coil_index[0] > FIRMWARE_IGNITION_OUTPUT_COUNT - 1)
 800286e:	7843      	ldrb	r3, [r0, #1]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d802      	bhi.n	800287a <ignition_coil_fire_spark+0x12>
 8002874:	7803      	ldrb	r3, [r0, #0]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d903      	bls.n	8002882 <ignition_coil_fire_spark+0x1a>
    {
        log_error("Unkown ignition output");
 800287a:	4811      	ldr	r0, [pc, #68]	@ (80028c0 <ignition_coil_fire_spark+0x58>)
 800287c:	f7ff fd02 	bl	8002284 <log_error>
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_NOT_CHARGING;
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_NOT_CHARGING;
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_RESET);
    spark_is_in_progress = false;
}
 8002880:	bd70      	pop	{r4, r5, r6, pc}
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_NOT_CHARGING;
 8002882:	4a10      	ldr	r2, [pc, #64]	@ (80028c4 <ignition_coil_fire_spark+0x5c>)
 8002884:	2500      	movs	r5, #0
 8002886:	54d5      	strb	r5, [r2, r3]
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_NOT_CHARGING;
 8002888:	7843      	ldrb	r3, [r0, #1]
 800288a:	54d5      	strb	r5, [r2, r3]
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_RESET);
 800288c:	7800      	ldrb	r0, [r0, #0]
 800288e:	4e0e      	ldr	r6, [pc, #56]	@ (80028c8 <ignition_coil_fire_spark+0x60>)
 8002890:	6833      	ldr	r3, [r6, #0]
 8002892:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 8002896:	462a      	mov	r2, r5
 8002898:	8889      	ldrh	r1, [r1, #4]
 800289a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800289e:	f002 fc9a 	bl	80051d6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_RESET);
 80028a2:	7860      	ldrb	r0, [r4, #1]
 80028a4:	6833      	ldr	r3, [r6, #0]
 80028a6:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 80028aa:	462a      	mov	r2, r5
 80028ac:	8889      	ldrh	r1, [r1, #4]
 80028ae:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80028b2:	f002 fc90 	bl	80051d6 <HAL_GPIO_WritePin>
    spark_is_in_progress = false;
 80028b6:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <ignition_coil_fire_spark+0x64>)
 80028b8:	701d      	strb	r5, [r3, #0]
 80028ba:	e7e1      	b.n	8002880 <ignition_coil_fire_spark+0x18>
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	0800cd80 	.word	0x0800cd80
 80028c4:	20005eb0 	.word	0x20005eb0
 80028c8:	20005eb4 	.word	0x20005eb4
 80028cc:	20005ea7 	.word	0x20005ea7

080028d0 <ignition_init>:
{
 80028d0:	b510      	push	{r4, lr}
    if (outputs == NULL)
 80028d2:	b158      	cbz	r0, 80028ec <ignition_init+0x1c>
    ignition_outputs = outputs;
 80028d4:	4a4f      	ldr	r2, [pc, #316]	@ (8002a14 <ignition_init+0x144>)
 80028d6:	6010      	str	r0, [r2, #0]
    switch (config.firing_order)
 80028d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002a18 <ignition_init+0x148>)
 80028da:	f893 3298 	ldrb.w	r3, [r3, #664]	@ 0x298
 80028de:	b14b      	cbz	r3, 80028f4 <ignition_init+0x24>
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d034      	beq.n	800294e <ignition_init+0x7e>
        log_error("ignition init failed. unkown firing order.");
 80028e4:	484d      	ldr	r0, [pc, #308]	@ (8002a1c <ignition_init+0x14c>)
 80028e6:	f7ff fccd 	bl	8002284 <log_error>
}
 80028ea:	bd10      	pop	{r4, pc}
        log_error("ignition init failed. No output config");
 80028ec:	484c      	ldr	r0, [pc, #304]	@ (8002a20 <ignition_init+0x150>)
 80028ee:	f7ff fcc9 	bl	8002284 <log_error>
        return;
 80028f2:	e7fa      	b.n	80028ea <ignition_init+0x1a>
        number_of_cylinders = 4;
 80028f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002a24 <ignition_init+0x154>)
 80028f6:	2204      	movs	r2, #4
 80028f8:	701a      	strb	r2, [r3, #0]
        switch (config.ignition_mode)
 80028fa:	4b47      	ldr	r3, [pc, #284]	@ (8002a18 <ignition_init+0x148>)
 80028fc:	f893 32a1 	ldrb.w	r3, [r3, #673]	@ 0x2a1
 8002900:	2b02      	cmp	r3, #2
 8002902:	d016      	beq.n	8002932 <ignition_init+0x62>
 8002904:	2b03      	cmp	r3, #3
 8002906:	d00c      	beq.n	8002922 <ignition_init+0x52>
 8002908:	2b01      	cmp	r3, #1
 800290a:	d11c      	bne.n	8002946 <ignition_init+0x76>
            ignition_order[0] = 1;
 800290c:	4b46      	ldr	r3, [pc, #280]	@ (8002a28 <ignition_init+0x158>)
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
            ignition_order[1] = 1;
 8002912:	705a      	strb	r2, [r3, #1]
            ignition_order[2] = 1;
 8002914:	709a      	strb	r2, [r3, #2]
            ignition_order[3] = 1;
 8002916:	70da      	strb	r2, [r3, #3]
    runtime.firing_interval_deg = (angle_t)720 / (angle_t)number_of_cylinders;
 8002918:	4b44      	ldr	r3, [pc, #272]	@ (8002a2c <ignition_init+0x15c>)
 800291a:	4a45      	ldr	r2, [pc, #276]	@ (8002a30 <ignition_init+0x160>)
 800291c:	621a      	str	r2, [r3, #32]
    for (size_t i = 0; i < FIRMWARE_IGNITION_OUTPUT_COUNT; i++)
 800291e:	2400      	movs	r4, #0
 8002920:	e056      	b.n	80029d0 <ignition_init+0x100>
            ignition_order[0] = 1;
 8002922:	4b41      	ldr	r3, [pc, #260]	@ (8002a28 <ignition_init+0x158>)
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
            ignition_order[1] = 2;
 8002928:	2102      	movs	r1, #2
 800292a:	7059      	strb	r1, [r3, #1]
            ignition_order[2] = 2;
 800292c:	7099      	strb	r1, [r3, #2]
            ignition_order[3] = 1;
 800292e:	70da      	strb	r2, [r3, #3]
            break;
 8002930:	e7f2      	b.n	8002918 <ignition_init+0x48>
            ignition_order[0] = 1;
 8002932:	4b3d      	ldr	r3, [pc, #244]	@ (8002a28 <ignition_init+0x158>)
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
            ignition_order[1] = 3;
 8002938:	2203      	movs	r2, #3
 800293a:	705a      	strb	r2, [r3, #1]
            ignition_order[2] = 4;
 800293c:	2204      	movs	r2, #4
 800293e:	709a      	strb	r2, [r3, #2]
            ignition_order[3] = 2;
 8002940:	2202      	movs	r2, #2
 8002942:	70da      	strb	r2, [r3, #3]
            break;
 8002944:	e7e8      	b.n	8002918 <ignition_init+0x48>
            log_error("ignition init failed. unkown mode.");
 8002946:	483b      	ldr	r0, [pc, #236]	@ (8002a34 <ignition_init+0x164>)
 8002948:	f7ff fc9c 	bl	8002284 <log_error>
            return;
 800294c:	e7cd      	b.n	80028ea <ignition_init+0x1a>
        number_of_cylinders = 6;
 800294e:	4b35      	ldr	r3, [pc, #212]	@ (8002a24 <ignition_init+0x154>)
 8002950:	2206      	movs	r2, #6
 8002952:	701a      	strb	r2, [r3, #0]
        switch (config.ignition_mode)
 8002954:	4b30      	ldr	r3, [pc, #192]	@ (8002a18 <ignition_init+0x148>)
 8002956:	f893 32a1 	ldrb.w	r3, [r3, #673]	@ 0x2a1
 800295a:	2b02      	cmp	r3, #2
 800295c:	d017      	beq.n	800298e <ignition_init+0xbe>
 800295e:	2b03      	cmp	r3, #3
 8002960:	d00a      	beq.n	8002978 <ignition_init+0xa8>
 8002962:	2b01      	cmp	r3, #1
 8002964:	d124      	bne.n	80029b0 <ignition_init+0xe0>
            ignition_order[0] = 1;
 8002966:	4b30      	ldr	r3, [pc, #192]	@ (8002a28 <ignition_init+0x158>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
            ignition_order[1] = 1;
 800296c:	705a      	strb	r2, [r3, #1]
            ignition_order[2] = 1;
 800296e:	709a      	strb	r2, [r3, #2]
            ignition_order[3] = 1;
 8002970:	70da      	strb	r2, [r3, #3]
            ignition_order[4] = 1;
 8002972:	711a      	strb	r2, [r3, #4]
            ignition_order[5] = 1;
 8002974:	715a      	strb	r2, [r3, #5]
            break;
 8002976:	e7b5      	b.n	80028e4 <ignition_init+0x14>
            ignition_order[0] = 1;
 8002978:	4b2b      	ldr	r3, [pc, #172]	@ (8002a28 <ignition_init+0x158>)
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
            ignition_order[1] = 2;
 800297e:	2102      	movs	r1, #2
 8002980:	7059      	strb	r1, [r3, #1]
            ignition_order[2] = 3;
 8002982:	2003      	movs	r0, #3
 8002984:	7098      	strb	r0, [r3, #2]
            ignition_order[3] = 3;
 8002986:	70d8      	strb	r0, [r3, #3]
            ignition_order[4] = 2;
 8002988:	7119      	strb	r1, [r3, #4]
            ignition_order[5] = 1;
 800298a:	715a      	strb	r2, [r3, #5]
            break;
 800298c:	e7aa      	b.n	80028e4 <ignition_init+0x14>
            config.ignition_mode = IM_WASTED_SPARK;
 800298e:	2203      	movs	r2, #3
 8002990:	4b21      	ldr	r3, [pc, #132]	@ (8002a18 <ignition_init+0x148>)
 8002992:	f883 22a1 	strb.w	r2, [r3, #673]	@ 0x2a1
            ignition_order[0] = 1;
 8002996:	4b24      	ldr	r3, [pc, #144]	@ (8002a28 <ignition_init+0x158>)
 8002998:	2101      	movs	r1, #1
 800299a:	7019      	strb	r1, [r3, #0]
            ignition_order[1] = 2;
 800299c:	2002      	movs	r0, #2
 800299e:	7058      	strb	r0, [r3, #1]
            ignition_order[2] = 3;
 80029a0:	709a      	strb	r2, [r3, #2]
            ignition_order[3] = 3;
 80029a2:	70da      	strb	r2, [r3, #3]
            ignition_order[4] = 2;
 80029a4:	7118      	strb	r0, [r3, #4]
            ignition_order[5] = 1;
 80029a6:	7159      	strb	r1, [r3, #5]
            log_warning("Coil on plug igntion not possible with 6 cylinders. Defaulted to wasted spark");
 80029a8:	4823      	ldr	r0, [pc, #140]	@ (8002a38 <ignition_init+0x168>)
 80029aa:	f7ff fc89 	bl	80022c0 <log_warning>
            break;
 80029ae:	e799      	b.n	80028e4 <ignition_init+0x14>
            log_error("ignition init failed. unkown mode.");
 80029b0:	4820      	ldr	r0, [pc, #128]	@ (8002a34 <ignition_init+0x164>)
 80029b2:	f7ff fc67 	bl	8002284 <log_error>
            return;
 80029b6:	e798      	b.n	80028ea <ignition_init+0x1a>
        ignition_coil_state[i] = HAL_GPIO_ReadPin(ignition_outputs[i].gpio, ignition_outputs[i].pin);
 80029b8:	4b16      	ldr	r3, [pc, #88]	@ (8002a14 <ignition_init+0x144>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 80029c0:	8891      	ldrh	r1, [r2, #4]
 80029c2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 80029c6:	f002 fbff 	bl	80051c8 <HAL_GPIO_ReadPin>
 80029ca:	4b1c      	ldr	r3, [pc, #112]	@ (8002a3c <ignition_init+0x16c>)
 80029cc:	5518      	strb	r0, [r3, r4]
    for (size_t i = 0; i < FIRMWARE_IGNITION_OUTPUT_COUNT; i++)
 80029ce:	3401      	adds	r4, #1
 80029d0:	2c03      	cmp	r4, #3
 80029d2:	d9f1      	bls.n	80029b8 <ignition_init+0xe8>
    for (size_t i = 0; i < FIRMWARE_IGNITION_OUTPUT_COUNT; i++)
 80029d4:	2400      	movs	r4, #0
 80029d6:	e00a      	b.n	80029ee <ignition_init+0x11e>
        HAL_GPIO_WritePin(ignition_outputs[i].gpio, ignition_outputs[i].pin, GPIO_PIN_RESET);
 80029d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a14 <ignition_init+0x144>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
 80029e0:	2200      	movs	r2, #0
 80029e2:	8889      	ldrh	r1, [r1, #4]
 80029e4:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 80029e8:	f002 fbf5 	bl	80051d6 <HAL_GPIO_WritePin>
    for (size_t i = 0; i < FIRMWARE_IGNITION_OUTPUT_COUNT; i++)
 80029ec:	3401      	adds	r4, #1
 80029ee:	2c03      	cmp	r4, #3
 80029f0:	d9f2      	bls.n	80029d8 <ignition_init+0x108>
    if (config.multi_spark_enabled && !IS_IN_RANGE(config.multi_spark_number_of_sparks, 0, IGNITION_MULTI_SPARK_MAX_SPARKS))
 80029f2:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <ignition_init+0x148>)
 80029f4:	f893 32a2 	ldrb.w	r3, [r3, #674]	@ 0x2a2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f43f af76 	beq.w	80028ea <ignition_init+0x1a>
 80029fe:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <ignition_init+0x148>)
 8002a00:	f893 32a3 	ldrb.w	r3, [r3, #675]	@ 0x2a3
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	f67f af70 	bls.w	80028ea <ignition_init+0x1a>
        log_warning("Multi spark is enabled but number of sparks are 0.");
 8002a0a:	480d      	ldr	r0, [pc, #52]	@ (8002a40 <ignition_init+0x170>)
 8002a0c:	f7ff fc58 	bl	80022c0 <log_warning>
 8002a10:	e76b      	b.n	80028ea <ignition_init+0x1a>
 8002a12:	bf00      	nop
 8002a14:	20005eb4 	.word	0x20005eb4
 8002a18:	20001f28 	.word	0x20001f28
 8002a1c:	0800ce34 	.word	0x0800ce34
 8002a20:	0800cd98 	.word	0x0800cd98
 8002a24:	20005ea6 	.word	0x20005ea6
 8002a28:	20005ea8 	.word	0x20005ea8
 8002a2c:	20000ed0 	.word	0x20000ed0
 8002a30:	43340000 	.word	0x43340000
 8002a34:	0800cdc0 	.word	0x0800cdc0
 8002a38:	0800cde4 	.word	0x0800cde4
 8002a3c:	20005eb0 	.word	0x20005eb0
 8002a40:	0800ce60 	.word	0x0800ce60

08002a44 <ignition_get_advance>:
percent_t ignition_get_coil_duty_cycle()
{
}

angle_t ignition_get_advance()
{
 8002a44:	b508      	push	{r3, lr}
 8002a46:	ed2d 8b02 	vpush	{d8}
    angle_t final_advance = IGNITION_ADVANCE_FAIL_SAFE;
    if (runtime.spinning_state != SS_RUNNING)
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a84 <ignition_get_advance+0x40>)
 8002a4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d005      	beq.n	8002a60 <ignition_get_advance+0x1c>
    {
        return config.cranking_advance;
 8002a54:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <ignition_get_advance+0x44>)
 8002a56:	ed93 0a81 	vldr	s0, [r3, #516]	@ 0x204
    final_advance += table_2d_get_value(&config.ign_table_1, rpm, map); // expand and allow the use of table2 in the future

    /* Here we can apply all kinds of correction to the table */

    return final_advance;
 8002a5a:	ecbd 8b02 	vpop	{d8}
 8002a5e:	bd08      	pop	{r3, pc}
    rpm_t rpm = crankshaft_get_rpm();
 8002a60:	f006 febe 	bl	80097e0 <crankshaft_get_rpm>
 8002a64:	eeb0 8a40 	vmov.f32	s16, s0
    pressure_t map = sensor_map_get();
 8002a68:	f001 f94c 	bl	8003d04 <sensor_map_get>
 8002a6c:	eef0 0a40 	vmov.f32	s1, s0
    final_advance += table_2d_get_value(&config.ign_table_1, rpm, map); // expand and allow the use of table2 in the future
 8002a70:	eeb0 0a48 	vmov.f32	s0, s16
 8002a74:	4805      	ldr	r0, [pc, #20]	@ (8002a8c <ignition_get_advance+0x48>)
 8002a76:	f005 fa77 	bl	8007f68 <table_2d_get_value>
 8002a7a:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8002a7e:	ee30 0a27 	vadd.f32	s0, s0, s15
    return final_advance;
 8002a82:	e7ea      	b.n	8002a5a <ignition_get_advance+0x16>
 8002a84:	20000ed0 	.word	0x20000ed0
 8002a88:	20001f28 	.word	0x20001f28
 8002a8c:	20001828 	.word	0x20001828

08002a90 <ignition_trigger_event_handle>:
    if (config.ignition_mode == IM_NO_IGNITION)
 8002a90:	4ba3      	ldr	r3, [pc, #652]	@ (8002d20 <ignition_trigger_event_handle+0x290>)
 8002a92:	f893 32a1 	ldrb.w	r3, [r3, #673]	@ 0x2a1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8141 	beq.w	8002d1e <ignition_trigger_event_handle+0x28e>
{
 8002a9c:	b570      	push	{r4, r5, r6, lr}
 8002a9e:	ed2d 8b04 	vpush	{d8-d9}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	eef0 8a40 	vmov.f32	s17, s0
 8002aa8:	eeb0 8a60 	vmov.f32	s16, s1
 8002aac:	4604      	mov	r4, r0
    if (runtime.firing_interval_deg == 0)
 8002aae:	4b9d      	ldr	r3, [pc, #628]	@ (8002d24 <ignition_trigger_event_handle+0x294>)
 8002ab0:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ab4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abc:	d021      	beq.n	8002b02 <ignition_trigger_event_handle+0x72>
    if (!IS_IN_RANGE(config.ignition_dwell, IGNITION_MIN_DWELL_TIME_MS, IGNITION_MAX_DWELL_TIME_MS))
 8002abe:	4b98      	ldr	r3, [pc, #608]	@ (8002d20 <ignition_trigger_event_handle+0x290>)
 8002ac0:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 8002ac4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad0:	db06      	blt.n	8002ae0 <ignition_trigger_event_handle+0x50>
 8002ad2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ade:	d920      	bls.n	8002b22 <ignition_trigger_event_handle+0x92>
        config.ignition_dwell = CLAMP(config.ignition_dwell, IGNITION_MIN_DWELL_TIME_MS, IGNITION_MAX_DWELL_TIME_MS);
 8002ae0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ae4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aec:	d40d      	bmi.n	8002b0a <ignition_trigger_event_handle+0x7a>
 8002aee:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afa:	dd08      	ble.n	8002b0e <ignition_trigger_event_handle+0x7e>
 8002afc:	eef0 7a47 	vmov.f32	s15, s14
 8002b00:	e005      	b.n	8002b0e <ignition_trigger_event_handle+0x7e>
        log_error("ignition not initialized.");
 8002b02:	4889      	ldr	r0, [pc, #548]	@ (8002d28 <ignition_trigger_event_handle+0x298>)
 8002b04:	f7ff fbbe 	bl	8002284 <log_error>
        return;
 8002b08:	e007      	b.n	8002b1a <ignition_trigger_event_handle+0x8a>
        config.ignition_dwell = CLAMP(config.ignition_dwell, IGNITION_MIN_DWELL_TIME_MS, IGNITION_MAX_DWELL_TIME_MS);
 8002b0a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002b0e:	4b84      	ldr	r3, [pc, #528]	@ (8002d20 <ignition_trigger_event_handle+0x290>)
 8002b10:	edc3 7a83 	vstr	s15, [r3, #524]	@ 0x20c
        log_error("ignition dwell out of bounds.");
 8002b14:	4885      	ldr	r0, [pc, #532]	@ (8002d2c <ignition_trigger_event_handle+0x29c>)
 8002b16:	f7ff fbb5 	bl	8002284 <log_error>
}
 8002b1a:	b004      	add	sp, #16
 8002b1c:	ecbd 8b04 	vpop	{d8-d9}
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
    spark_advance = ignition_get_advance();
 8002b22:	f7ff ff8f 	bl	8002a44 <ignition_get_advance>
    runtime.ignition_advance_deg = spark_advance;
 8002b26:	4b7f      	ldr	r3, [pc, #508]	@ (8002d24 <ignition_trigger_event_handle+0x294>)
 8002b28:	ed83 0a09 	vstr	s0, [r3, #36]	@ 0x24
    spark_advance = CLAMP(spark_advance, IGNITION_MIN_ADVANCE, IGNITION_MAX_ADVANCE);
 8002b2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b34:	d409      	bmi.n	8002b4a <ignition_trigger_event_handle+0xba>
 8002b36:	eddf 7a7e 	vldr	s15, [pc, #504]	@ 8002d30 <ignition_trigger_event_handle+0x2a0>
 8002b3a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b42:	dd04      	ble.n	8002b4e <ignition_trigger_event_handle+0xbe>
 8002b44:	eeb0 0a67 	vmov.f32	s0, s15
 8002b48:	e001      	b.n	8002b4e <ignition_trigger_event_handle+0xbe>
 8002b4a:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 8002d34 <ignition_trigger_event_handle+0x2a4>
    runtime.dwell_actual = config.ignition_dwell;
 8002b4e:	4b74      	ldr	r3, [pc, #464]	@ (8002d20 <ignition_trigger_event_handle+0x290>)
 8002b50:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 8002b54:	4b73      	ldr	r3, [pc, #460]	@ (8002d24 <ignition_trigger_event_handle+0x294>)
 8002b56:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
    uint8_t phase = (uint8_t)(crankshaft_angle / runtime.firing_interval_deg);
 8002b5a:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b5e:	eec8 6a87 	vdiv.f32	s13, s17, s14
 8002b62:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002b66:	edcd 6a01 	vstr	s13, [sp, #4]
 8002b6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    volatile angle_t next_spark_angle = phase * runtime.firing_interval_deg - spark_advance + runtime.firing_interval_deg;
 8002b6e:	ee06 3a90 	vmov	s13, r3
 8002b72:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002b76:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002b7a:	ee76 6ac0 	vsub.f32	s13, s13, s0
 8002b7e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002b82:	ed8d 7a03 	vstr	s14, [sp, #12]
    volatile angle_t next_dwell_angle = next_spark_angle - (float)config.ignition_dwell * (float)1000 * degrees_per_microsecond(rpm);
 8002b86:	ed9d 7a03 	vldr	s14, [sp, #12]
 8002b8a:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8002d38 <ignition_trigger_event_handle+0x2a8>
 8002b8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 * @brief Function to calculate the degrees the engine turns in one microsecond.
 * @note Returns 0 if rpm is 0.
 */
static inline angle_t degrees_per_microsecond(rpm_t rpm)
{
    if (rpm == 0)
 8002b92:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9a:	f000 80ab 	beq.w	8002cf4 <ignition_trigger_event_handle+0x264>
    {
        return 0.0f;
    }
    return (angle_t)(rpm * 360.0f) / (60.0f * 1e6f);
 8002b9e:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8002d3c <ignition_trigger_event_handle+0x2ac>
 8002ba2:	ee68 6a26 	vmul.f32	s13, s16, s13
 8002ba6:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8002d40 <ignition_trigger_event_handle+0x2b0>
 8002baa:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 8002bae:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb6:	edcd 7a02 	vstr	s15, [sp, #8]
    next_firing_cylinders[0] = ignition_order[phase] - 1;
 8002bba:	4862      	ldr	r0, [pc, #392]	@ (8002d44 <ignition_trigger_event_handle+0x2b4>)
 8002bbc:	5cc2      	ldrb	r2, [r0, r3]
 8002bbe:	3a01      	subs	r2, #1
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	4961      	ldr	r1, [pc, #388]	@ (8002d48 <ignition_trigger_event_handle+0x2b8>)
 8002bc4:	700a      	strb	r2, [r1, #0]
    next_firing_cylinders[1] = ignition_order[phase] - 1;
 8002bc6:	704a      	strb	r2, [r1, #1]
        next_firing_cylinders[1] = ignition_order[phase + 2] - 1;
 8002bc8:	3302      	adds	r3, #2
 8002bca:	5cc3      	ldrb	r3, [r0, r3]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	704b      	strb	r3, [r1, #1]
    bool is_synced = get_bit(runtime.status, STATUS_TRIGGER1_SYNCED);
 8002bd0:	4b54      	ldr	r3, [pc, #336]	@ (8002d24 <ignition_trigger_event_handle+0x294>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
    if (is_synced && (next_dwell_angle - crankshaft_angle) < 10 && !spark_is_in_progress && (next_dwell_angle - crankshaft_angle) > 0)
 8002bd4:	f013 0f08 	tst.w	r3, #8
 8002bd8:	d09f      	beq.n	8002b1a <ignition_trigger_event_handle+0x8a>
 8002bda:	eddd 7a02 	vldr	s15, [sp, #8]
 8002bde:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8002be2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bee:	d594      	bpl.n	8002b1a <ignition_trigger_event_handle+0x8a>
 8002bf0:	4b56      	ldr	r3, [pc, #344]	@ (8002d4c <ignition_trigger_event_handle+0x2bc>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d190      	bne.n	8002b1a <ignition_trigger_event_handle+0x8a>
 8002bf8:	eddd 7a02 	vldr	s15, [sp, #8]
 8002bfc:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8002c00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c08:	dd87      	ble.n	8002b1a <ignition_trigger_event_handle+0x8a>
        time_us_t dwell_start_time_us = current_time_us + (time_us_t)((next_dwell_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 8002c0a:	eddd 7a02 	vldr	s15, [sp, #8]
 8002c0e:	ee77 7ae8 	vsub.f32	s15, s15, s17
    if (rpm == 0)
 8002c12:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1a:	d06e      	beq.n	8002cfa <ignition_trigger_event_handle+0x26a>
    return (time_us_t)60.0f * 1e6f / (rpm * 360.0f);
 8002c1c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002d3c <ignition_trigger_event_handle+0x2ac>
 8002c20:	ee28 7a07 	vmul.f32	s14, s16, s14
 8002c24:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002d40 <ignition_trigger_event_handle+0x2b0>
 8002c28:	ee86 9a87 	vdiv.f32	s18, s13, s14
 8002c2c:	eebc 9ac9 	vcvt.u32.f32	s18, s18
 8002c30:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 8002c34:	ee67 7a89 	vmul.f32	s15, s15, s18
 8002c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c3c:	ee17 6a90 	vmov	r6, s15
 8002c40:	4426      	add	r6, r4
        time_us_t spark_start_time_us = current_time_us + (time_us_t)((next_spark_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 8002c42:	eddd 7a03 	vldr	s15, [sp, #12]
 8002c46:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8002c4a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8002c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c52:	ee17 5a90 	vmov	r5, s15
 8002c56:	4425      	add	r5, r4
        scheduler_schedule_event_with_arg(dwell_start_time_us, ignition_coil_begin_charge, (void *)next_firing_cylinders);
 8002c58:	4c3b      	ldr	r4, [pc, #236]	@ (8002d48 <ignition_trigger_event_handle+0x2b8>)
 8002c5a:	4622      	mov	r2, r4
 8002c5c:	493c      	ldr	r1, [pc, #240]	@ (8002d50 <ignition_trigger_event_handle+0x2c0>)
 8002c5e:	4630      	mov	r0, r6
 8002c60:	f006 fd2a 	bl	80096b8 <scheduler_schedule_event_with_arg>
        scheduler_schedule_event_with_arg(spark_start_time_us, ignition_coil_fire_spark, (void *)next_firing_cylinders);
 8002c64:	4622      	mov	r2, r4
 8002c66:	493b      	ldr	r1, [pc, #236]	@ (8002d54 <ignition_trigger_event_handle+0x2c4>)
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f006 fd25 	bl	80096b8 <scheduler_schedule_event_with_arg>
        if (!config.multi_spark_enabled)
 8002c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d20 <ignition_trigger_event_handle+0x290>)
 8002c70:	f893 32a2 	ldrb.w	r3, [r3, #674]	@ 0x2a2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d043      	beq.n	8002d00 <ignition_trigger_event_handle+0x270>
        uint8_t number_of_scheduled_sparks = 1;
 8002c78:	2401      	movs	r4, #1
        while (number_of_scheduled_sparks < config.multi_spark_number_of_sparks)
 8002c7a:	4b29      	ldr	r3, [pc, #164]	@ (8002d20 <ignition_trigger_event_handle+0x290>)
 8002c7c:	f893 32a3 	ldrb.w	r3, [r3, #675]	@ 0x2a3
 8002c80:	42a3      	cmp	r3, r4
 8002c82:	d945      	bls.n	8002d10 <ignition_trigger_event_handle+0x280>
            if (rpm > config.multi_spark_rpm_threshold)
 8002c84:	4b26      	ldr	r3, [pc, #152]	@ (8002d20 <ignition_trigger_event_handle+0x290>)
 8002c86:	edd3 7a84 	vldr	s15, [r3, #528]	@ 0x210
 8002c8a:	eef4 7ac8 	vcmpe.f32	s15, s16
 8002c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c92:	d43d      	bmi.n	8002d10 <ignition_trigger_event_handle+0x280>
            time_us_t duration_of_spark_and_dwell = (uint32_t)((float)number_of_scheduled_sparks * (config.multi_spark_rest_time_ms + config.ignition_dwell) * (float)1000);
 8002c94:	ee07 4a90 	vmov	s15, r4
 8002c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9c:	ed93 7a85 	vldr	s14, [r3, #532]	@ 0x214
 8002ca0:	edd3 6a83 	vldr	s13, [r3, #524]	@ 0x20c
 8002ca4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cac:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002d38 <ignition_trigger_event_handle+0x2a8>
 8002cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            if (duration_of_spark_and_dwell >= config.multi_spark_max_trailing_angle * microseconds_per_degree(rpm))
 8002cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cbc:	ed93 7a86 	vldr	s14, [r3, #536]	@ 0x218
 8002cc0:	ee29 7a07 	vmul.f32	s14, s18, s14
 8002cc4:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ccc:	da20      	bge.n	8002d10 <ignition_trigger_event_handle+0x280>
            dwell_start_time_us += duration_of_spark_and_dwell;
 8002cce:	ee17 3a90 	vmov	r3, s15
 8002cd2:	441e      	add	r6, r3
            spark_start_time_us += duration_of_spark_and_dwell;
 8002cd4:	441d      	add	r5, r3
            if (!scheduler_schedule_event_with_arg(spark_start_time_us, ignition_coil_fire_spark, (void *)next_firing_cylinders))
 8002cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d48 <ignition_trigger_event_handle+0x2b8>)
 8002cd8:	491e      	ldr	r1, [pc, #120]	@ (8002d54 <ignition_trigger_event_handle+0x2c4>)
 8002cda:	4628      	mov	r0, r5
 8002cdc:	f006 fcec 	bl	80096b8 <scheduler_schedule_event_with_arg>
 8002ce0:	b198      	cbz	r0, 8002d0a <ignition_trigger_event_handle+0x27a>
            if (!scheduler_schedule_event_with_arg(dwell_start_time_us, ignition_coil_begin_charge, (void *)next_firing_cylinders))
 8002ce2:	4a19      	ldr	r2, [pc, #100]	@ (8002d48 <ignition_trigger_event_handle+0x2b8>)
 8002ce4:	491a      	ldr	r1, [pc, #104]	@ (8002d50 <ignition_trigger_event_handle+0x2c0>)
 8002ce6:	4630      	mov	r0, r6
 8002ce8:	f006 fce6 	bl	80096b8 <scheduler_schedule_event_with_arg>
 8002cec:	b180      	cbz	r0, 8002d10 <ignition_trigger_event_handle+0x280>
            number_of_scheduled_sparks++;
 8002cee:	3401      	adds	r4, #1
 8002cf0:	b2e4      	uxtb	r4, r4
 8002cf2:	e7c2      	b.n	8002c7a <ignition_trigger_event_handle+0x1ea>
        return 0.0f;
 8002cf4:	ed9f 6a0f 	vldr	s12, [pc, #60]	@ 8002d34 <ignition_trigger_event_handle+0x2a4>
 8002cf8:	e759      	b.n	8002bae <ignition_trigger_event_handle+0x11e>
        return 0;
 8002cfa:	ed9f 9a17 	vldr	s18, [pc, #92]	@ 8002d58 <ignition_trigger_event_handle+0x2c8>
 8002cfe:	e797      	b.n	8002c30 <ignition_trigger_event_handle+0x1a0>
            runtime.multi_spark_actual_spark_count = number_of_scheduled_sparks;
 8002d00:	4b08      	ldr	r3, [pc, #32]	@ (8002d24 <ignition_trigger_event_handle+0x294>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
            return;
 8002d08:	e707      	b.n	8002b1a <ignition_trigger_event_handle+0x8a>
                ignition_coil_fire_spark((void *)next_firing_cylinders);
 8002d0a:	480f      	ldr	r0, [pc, #60]	@ (8002d48 <ignition_trigger_event_handle+0x2b8>)
 8002d0c:	f7ff fdac 	bl	8002868 <ignition_coil_fire_spark>
        spark_is_in_progress = true;
 8002d10:	4b0e      	ldr	r3, [pc, #56]	@ (8002d4c <ignition_trigger_event_handle+0x2bc>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
        runtime.multi_spark_actual_spark_count = number_of_scheduled_sparks;
 8002d16:	4b03      	ldr	r3, [pc, #12]	@ (8002d24 <ignition_trigger_event_handle+0x294>)
 8002d18:	f883 4052 	strb.w	r4, [r3, #82]	@ 0x52
 8002d1c:	e6fd      	b.n	8002b1a <ignition_trigger_event_handle+0x8a>
 8002d1e:	4770      	bx	lr
 8002d20:	20001f28 	.word	0x20001f28
 8002d24:	20000ed0 	.word	0x20000ed0
 8002d28:	0800ce94 	.word	0x0800ce94
 8002d2c:	0800ceb0 	.word	0x0800ceb0
 8002d30:	42200000 	.word	0x42200000
 8002d34:	00000000 	.word	0x00000000
 8002d38:	447a0000 	.word	0x447a0000
 8002d3c:	43b40000 	.word	0x43b40000
 8002d40:	4c64e1c0 	.word	0x4c64e1c0
 8002d44:	20005ea8 	.word	0x20005ea8
 8002d48:	20005ea4 	.word	0x20005ea4
 8002d4c:	20005ea7 	.word	0x20005ea7
 8002d50:	08002809 	.word	0x08002809
 8002d54:	08002869 	.word	0x08002869
 8002d58:	00000000 	.word	0x00000000

08002d5c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d5c:	f100 0308 	add.w	r3, r0, #8
 8002d60:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d62:	f04f 32ff 	mov.w	r2, #4294967295
 8002d66:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d68:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d6a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d70:	4770      	bx	lr

08002d72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d76:	4770      	bx	lr

08002d78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d78:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d7a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d80:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d82:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d84:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002d86:	6803      	ldr	r3, [r0, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	6003      	str	r3, [r0, #0]
}
 8002d8c:	4770      	bx	lr

08002d8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d8e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d90:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d92:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002d96:	d011      	beq.n	8002dbc <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d98:	f100 0308 	add.w	r3, r0, #8
 8002d9c:	461c      	mov	r4, r3
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	42aa      	cmp	r2, r5
 8002da4:	d9fa      	bls.n	8002d9c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002da6:	6863      	ldr	r3, [r4, #4]
 8002da8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002daa:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002dac:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002dae:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002db0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002db2:	6803      	ldr	r3, [r0, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	6003      	str	r3, [r0, #0]
}
 8002db8:	bc30      	pop	{r4, r5}
 8002dba:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dbc:	6904      	ldr	r4, [r0, #16]
 8002dbe:	e7f2      	b.n	8002da6 <vListInsert+0x18>

08002dc0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002dc0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dc2:	6841      	ldr	r1, [r0, #4]
 8002dc4:	6882      	ldr	r2, [r0, #8]
 8002dc6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002dc8:	6841      	ldr	r1, [r0, #4]
 8002dca:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	4282      	cmp	r2, r0
 8002dd0:	d006      	beq.n	8002de0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	3a01      	subs	r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ddc:	6818      	ldr	r0, [r3, #0]
}
 8002dde:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002de0:	6882      	ldr	r2, [r0, #8]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	e7f5      	b.n	8002dd2 <uxListRemove+0x12>
	...

08002de8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  __NOP();
 8002de8:	bf00      	nop
  if (GPIO_Pin == GPIO_PIN_9)
 8002dea:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002dee:	d000      	beq.n	8002df2 <HAL_GPIO_EXTI_Callback+0xa>
 8002df0:	4770      	bx	lr
{
 8002df2:	b508      	push	{r3, lr}
  {
    trigger_tooth_handle(&trigger1);
 8002df4:	4801      	ldr	r0, [pc, #4]	@ (8002dfc <HAL_GPIO_EXTI_Callback+0x14>)
 8002df6:	f006 fcff 	bl	80097f8 <trigger_tooth_handle>
  }

  
}
 8002dfa:	bd08      	pop	{r3, pc}
 8002dfc:	20000e30 	.word	0x20000e30

08002e00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 8002e02:	6802      	ldr	r2, [r0, #0]
 8002e04:	4b03      	ldr	r3, [pc, #12]	@ (8002e14 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d000      	beq.n	8002e0c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e0a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002e0c:	f001 f8e6 	bl	8003fdc <HAL_IncTick>
}
 8002e10:	e7fb      	b.n	8002e0a <HAL_TIM_PeriodElapsedCallback+0xa>
 8002e12:	bf00      	nop
 8002e14:	40014800 	.word	0x40014800

08002e18 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002e18:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e1a:	e7fe      	b.n	8002e1a <Error_Handler+0x2>

08002e1c <SystemClock_Config>:
{
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e20:	ac08      	add	r4, sp, #32
 8002e22:	2230      	movs	r2, #48	@ 0x30
 8002e24:	2100      	movs	r1, #0
 8002e26:	4620      	mov	r0, r4
 8002e28:	f008 f960 	bl	800b0ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	9303      	str	r3, [sp, #12]
 8002e30:	9304      	str	r3, [sp, #16]
 8002e32:	9305      	str	r3, [sp, #20]
 8002e34:	9306      	str	r3, [sp, #24]
 8002e36:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb8 <SystemClock_Config+0x9c>)
 8002e3c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002e3e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002e42:	6411      	str	r1, [r2, #64]	@ 0x40
 8002e44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e46:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8002e4a:	9201      	str	r2, [sp, #4]
 8002e4c:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e4e:	9302      	str	r3, [sp, #8]
 8002e50:	491a      	ldr	r1, [pc, #104]	@ (8002ebc <SystemClock_Config+0xa0>)
 8002e52:	680a      	ldr	r2, [r1, #0]
 8002e54:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002e58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e5c:	600a      	str	r2, [r1, #0]
 8002e5e:	680a      	ldr	r2, [r1, #0]
 8002e60:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8002e64:	9202      	str	r2, [sp, #8]
 8002e66:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e68:	2202      	movs	r2, #2
 8002e6a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e70:	2110      	movs	r1, #16
 8002e72:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e74:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e76:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002e78:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002e7a:	235a      	movs	r3, #90	@ 0x5a
 8002e7c:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8002e7e:	2308      	movs	r3, #8
 8002e80:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8002e82:	230f      	movs	r3, #15
 8002e84:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e86:	4620      	mov	r0, r4
 8002e88:	f003 f8fe 	bl	8006088 <HAL_RCC_OscConfig>
 8002e8c:	b978      	cbnz	r0, 8002eae <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e8e:	230f      	movs	r3, #15
 8002e90:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e92:	2102      	movs	r1, #2
 8002e94:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e96:	2300      	movs	r3, #0
 8002e98:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e9a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e9e:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ea0:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ea2:	a803      	add	r0, sp, #12
 8002ea4:	f003 fb40 	bl	8006528 <HAL_RCC_ClockConfig>
 8002ea8:	b918      	cbnz	r0, 8002eb2 <SystemClock_Config+0x96>
}
 8002eaa:	b014      	add	sp, #80	@ 0x50
 8002eac:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002eae:	f7ff ffb3 	bl	8002e18 <Error_Handler>
    Error_Handler();
 8002eb2:	f7ff ffb1 	bl	8002e18 <Error_Handler>
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40007000 	.word	0x40007000

08002ec0 <main>:
{
 8002ec0:	b508      	push	{r3, lr}
  HAL_Init();
 8002ec2:	f001 f871 	bl	8003fa8 <HAL_Init>
  SystemClock_Config();
 8002ec6:	f7ff ffa9 	bl	8002e1c <SystemClock_Config>
  MX_GPIO_Init();
 8002eca:	f7ff fa81 	bl	80023d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ece:	f7ff f849 	bl	8001f64 <MX_DMA_Init>
  MX_TIM3_Init();
 8002ed2:	f006 f82f 	bl	8008f34 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002ed6:	f7fd fde3 	bl	8000aa0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002eda:	f005 ffa5 	bl	8008e28 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002ede:	f005 feb3 	bl	8008c48 <MX_TIM2_Init>
  MX_CRC_Init();
 8002ee2:	f7fe fe23 	bl	8001b2c <MX_CRC_Init>
  MX_I2C1_Init();
 8002ee6:	f7ff fc39 	bl	800275c <MX_I2C1_Init>
  osKernelInitialize();
 8002eea:	f7fd ffbb 	bl	8000e64 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002eee:	f7ff fa49 	bl	8002384 <MX_FREERTOS_Init>
  osKernelStart();
 8002ef2:	f7fd ffc9 	bl	8000e88 <osKernelStart>
  while (1)
 8002ef6:	e7fe      	b.n	8002ef6 <main+0x36>

08002ef8 <pid_init>:
#include "pid.h"

void pid_init(pid_t *pid)
{
    /* Clearing controller variables */
    pid->integrator = 0.0f;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	6203      	str	r3, [r0, #32]
    pid->differentiator = 0.0f;
 8002efc:	6243      	str	r3, [r0, #36]	@ 0x24
    pid->prev_error = 0.0f;
 8002efe:	6283      	str	r3, [r0, #40]	@ 0x28
    pid->prev_input = 0.0f;
 8002f00:	62c3      	str	r3, [r0, #44]	@ 0x2c

    pid->prev_controller_time_us = 0;
 8002f02:	2200      	movs	r2, #0
 8002f04:	6302      	str	r2, [r0, #48]	@ 0x30
    pid->output = 0.0f;
 8002f06:	6383      	str	r3, [r0, #56]	@ 0x38

    /**
     * @todo implement checks for the parameters
     */
    
}
 8002f08:	4770      	bx	lr

08002f0a <pid_set_setpoint>:

void pid_set_setpoint(pid_t *pid, float setpoint)
{
    pid->setpoint = setpoint;
 8002f0a:	ed80 0a0d 	vstr	s0, [r0, #52]	@ 0x34
}
 8002f0e:	4770      	bx	lr

08002f10 <pid_compute>:

float pid_compute(pid_t *pid, time_us_t current_time_us, float input)
{
    /* Compute the time between the function calls to determine T */
    time_us_t T_us = current_time_us - pid->prev_controller_time_us;
 8002f10:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002f12:	1acb      	subs	r3, r1, r3
    float T_sec = (float)T_us / (float)1e6f;
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f1c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8003004 <pid_compute+0xf4>
 8002f20:	eec7 6a87 	vdiv.f32	s13, s15, s14

    /* Finding the error */
    float error = pid->setpoint - input;
 8002f24:	ed90 6a0d 	vldr	s12, [r0, #52]	@ 0x34
 8002f28:	ee36 6a40 	vsub.f32	s12, s12, s0

    /* Finding the P-term */
    float proportional = pid->Kp * error;
 8002f2c:	edd0 5a00 	vldr	s11, [r0]
 8002f30:	ee65 5a86 	vmul.f32	s11, s11, s12

    /* Finding the integral term*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * T_sec *(error + pid->prev_error);
 8002f34:	ed90 7a08 	vldr	s14, [r0, #32]
 8002f38:	edd0 7a01 	vldr	s15, [r0, #4]
 8002f3c:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8002f40:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002f44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f48:	ed90 5a0a 	vldr	s10, [r0, #40]	@ 0x28
 8002f4c:	ee35 5a06 	vadd.f32	s10, s10, s12
 8002f50:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f58:	edc0 7a08 	vstr	s15, [r0, #32]

    /* Anti-windup - works by clamping the integrator */
    if (pid->integrator > pid->limit_integrator_max)
 8002f5c:	ed90 7a07 	vldr	s14, [r0, #28]
 8002f60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f68:	dd38      	ble.n	8002fdc <pid_compute+0xcc>
    {
        pid->integrator = pid->limit_integrator_max;
 8002f6a:	ed80 7a08 	vstr	s14, [r0, #32]

    /* Finding the derivative term @note has a low pass filter */
    /**
     * @note only derivative on input has been implemented for now
     */
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 8002f6e:	edd0 7a02 	vldr	s15, [r0, #8]
 8002f72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f76:	ed90 7a0b 	vldr	s14, [r0, #44]	@ 0x2c
 8002f7a:	ee30 7a47 	vsub.f32	s14, s0, s14
 8002f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
                          +(2.0f * pid->derivative_filter_tau - T_sec) * pid->differentiator)
 8002f82:	ed90 7a03 	vldr	s14, [r0, #12]
 8002f86:	ee37 7a07 	vadd.f32	s14, s14, s14
 8002f8a:	ee37 5a66 	vsub.f32	s10, s14, s13
 8002f8e:	edd0 4a09 	vldr	s9, [r0, #36]	@ 0x24
 8002f92:	ee25 5a24 	vmul.f32	s10, s10, s9
 8002f96:	ee77 7a85 	vadd.f32	s15, s15, s10
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 8002f9a:	eef1 7a67 	vneg.f32	s15, s15
                          / (2.0f * pid->derivative_filter_tau + T_sec);
 8002f9e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002fa2:	eec7 6a87 	vdiv.f32	s13, s15, s14
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 8002fa6:	edc0 6a09 	vstr	s13, [r0, #36]	@ 0x24

    /* Summing the terms to make the output */
    pid->output = proportional + pid->integrator + pid->differentiator;
 8002faa:	edd0 7a08 	vldr	s15, [r0, #32]
 8002fae:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fb6:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38

    /* Clamp the output the the output bounds */
    if (pid->output > pid->limit_output_max)
 8002fba:	ed90 7a05 	vldr	s14, [r0, #20]
 8002fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc6:	dd13      	ble.n	8002ff0 <pid_compute+0xe0>
    {
        pid->output = pid->limit_output_max;
 8002fc8:	ed80 7a0e 	vstr	s14, [r0, #56]	@ 0x38
    {
        pid->output = pid->limit_output_min;
    }

    /* Save the variables for the next function call */
    pid->prev_error = error;
 8002fcc:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
    pid->prev_input = input;
 8002fd0:	ed80 0a0b 	vstr	s0, [r0, #44]	@ 0x2c
    pid->prev_controller_time_us = current_time_us;
 8002fd4:	6301      	str	r1, [r0, #48]	@ 0x30
    
    return pid->output;
}
 8002fd6:	ed90 0a0e 	vldr	s0, [r0, #56]	@ 0x38
 8002fda:	4770      	bx	lr
    else if (pid->integrator < pid->limit_integrator_min)
 8002fdc:	ed90 7a06 	vldr	s14, [r0, #24]
 8002fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe8:	d5c1      	bpl.n	8002f6e <pid_compute+0x5e>
        pid->integrator = pid->limit_integrator_min;
 8002fea:	ed80 7a08 	vstr	s14, [r0, #32]
 8002fee:	e7be      	b.n	8002f6e <pid_compute+0x5e>
    else if (pid->output < pid->limit_output_min)
 8002ff0:	ed90 7a04 	vldr	s14, [r0, #16]
 8002ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffc:	d5e6      	bpl.n	8002fcc <pid_compute+0xbc>
        pid->output = pid->limit_output_min;
 8002ffe:	ed80 7a0e 	vstr	s14, [r0, #56]	@ 0x38
 8003002:	e7e3      	b.n	8002fcc <pid_compute+0xbc>
 8003004:	49742400 	.word	0x49742400

08003008 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003008:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800300e:	4b0d      	ldr	r3, [pc, #52]	@ (8003044 <prvTaskExitError+0x3c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003016:	d008      	beq.n	800302a <prvTaskExitError+0x22>
 8003018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	e7fe      	b.n	8003028 <prvTaskExitError+0x20>
 800302a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800303a:	9b01      	ldr	r3, [sp, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0fc      	beq.n	800303a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003040:	b002      	add	sp, #8
 8003042:	4770      	bx	lr
 8003044:	20000064 	.word	0x20000064

08003048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003048:	4808      	ldr	r0, [pc, #32]	@ (800306c <prvPortStartFirstTask+0x24>)
 800304a:	6800      	ldr	r0, [r0, #0]
 800304c:	6800      	ldr	r0, [r0, #0]
 800304e:	f380 8808 	msr	MSP, r0
 8003052:	f04f 0000 	mov.w	r0, #0
 8003056:	f380 8814 	msr	CONTROL, r0
 800305a:	b662      	cpsie	i
 800305c:	b661      	cpsie	f
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	df00      	svc	0
 8003068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800306a:	0000      	.short	0x0000
 800306c:	e000ed08 	.word	0xe000ed08

08003070 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003070:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003080 <vPortEnableVFP+0x10>
 8003074:	6801      	ldr	r1, [r0, #0]
 8003076:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800307a:	6001      	str	r1, [r0, #0]
 800307c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800307e:	0000      	.short	0x0000
 8003080:	e000ed88 	.word	0xe000ed88

08003084 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003084:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003088:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800308c:	f021 0101 	bic.w	r1, r1, #1
 8003090:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003094:	4b05      	ldr	r3, [pc, #20]	@ (80030ac <pxPortInitialiseStack+0x28>)
 8003096:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800309a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800309e:	f06f 0302 	mvn.w	r3, #2
 80030a2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80030a6:	3844      	subs	r0, #68	@ 0x44
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	08003009 	.word	0x08003009

080030b0 <SVC_Handler>:
	__asm volatile (
 80030b0:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <pxCurrentTCBConst2>)
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	6808      	ldr	r0, [r1, #0]
 80030b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ba:	f380 8809 	msr	PSP, r0
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f380 8811 	msr	BASEPRI, r0
 80030ca:	4770      	bx	lr
 80030cc:	f3af 8000 	nop.w

080030d0 <pxCurrentTCBConst2>:
 80030d0:	20006478 	.word	0x20006478

080030d4 <vPortEnterCritical>:
 80030d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80030e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003114 <vPortEnterCritical+0x40>)
 80030e6:	6813      	ldr	r3, [r2, #0]
 80030e8:	3301      	adds	r3, #1
 80030ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d000      	beq.n	80030f2 <vPortEnterCritical+0x1e>
}
 80030f0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80030f6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80030fa:	f013 0fff 	tst.w	r3, #255	@ 0xff
 80030fe:	d0f7      	beq.n	80030f0 <vPortEnterCritical+0x1c>
 8003100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	e7fe      	b.n	8003110 <vPortEnterCritical+0x3c>
 8003112:	bf00      	nop
 8003114:	20000064 	.word	0x20000064

08003118 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003118:	4b09      	ldr	r3, [pc, #36]	@ (8003140 <vPortExitCritical+0x28>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	b943      	cbnz	r3, 8003130 <vPortExitCritical+0x18>
 800311e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	e7fe      	b.n	800312e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003130:	3b01      	subs	r3, #1
 8003132:	4a03      	ldr	r2, [pc, #12]	@ (8003140 <vPortExitCritical+0x28>)
 8003134:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003136:	b90b      	cbnz	r3, 800313c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003138:	f383 8811 	msr	BASEPRI, r3
}
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000064 	.word	0x20000064
	...

08003150 <PendSV_Handler>:
	__asm volatile
 8003150:	f3ef 8009 	mrs	r0, PSP
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <pxCurrentTCBConst>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	f01e 0f10 	tst.w	lr, #16
 8003160:	bf08      	it	eq
 8003162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800316a:	6010      	str	r0, [r2, #0]
 800316c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003170:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003174:	f380 8811 	msr	BASEPRI, r0
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f005 fb34 	bl	80087ec <vTaskSwitchContext>
 8003184:	f04f 0000 	mov.w	r0, #0
 8003188:	f380 8811 	msr	BASEPRI, r0
 800318c:	bc09      	pop	{r0, r3}
 800318e:	6819      	ldr	r1, [r3, #0]
 8003190:	6808      	ldr	r0, [r1, #0]
 8003192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003196:	f01e 0f10 	tst.w	lr, #16
 800319a:	bf08      	it	eq
 800319c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80031a0:	f380 8809 	msr	PSP, r0
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	f3af 8000 	nop.w

080031b0 <pxCurrentTCBConst>:
 80031b0:	20006478 	.word	0x20006478

080031b4 <xPortSysTickHandler>:
{
 80031b4:	b508      	push	{r3, lr}
	__asm volatile
 80031b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80031c6:	f005 f9e3 	bl	8008590 <xTaskIncrementTick>
 80031ca:	b128      	cbz	r0, 80031d8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80031cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80031d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80031d8:	2300      	movs	r3, #0
 80031da:	f383 8811 	msr	BASEPRI, r3
}
 80031de:	bd08      	pop	{r3, pc}

080031e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80031e0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80031e4:	2300      	movs	r3, #0
 80031e6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80031e8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80031ea:	4b05      	ldr	r3, [pc, #20]	@ (8003200 <vPortSetupTimerInterrupt+0x20>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4905      	ldr	r1, [pc, #20]	@ (8003204 <vPortSetupTimerInterrupt+0x24>)
 80031f0:	fba1 1303 	umull	r1, r3, r1, r3
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	3b01      	subs	r3, #1
 80031f8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80031fa:	2307      	movs	r3, #7
 80031fc:	6113      	str	r3, [r2, #16]
}
 80031fe:	4770      	bx	lr
 8003200:	20000070 	.word	0x20000070
 8003204:	10624dd3 	.word	0x10624dd3

08003208 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003208:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800320c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8003210:	4b3d      	ldr	r3, [pc, #244]	@ (8003308 <xPortStartScheduler+0x100>)
 8003212:	429a      	cmp	r2, r3
 8003214:	d01c      	beq.n	8003250 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003216:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800321a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800321e:	4b3b      	ldr	r3, [pc, #236]	@ (800330c <xPortStartScheduler+0x104>)
 8003220:	429a      	cmp	r2, r3
 8003222:	d01e      	beq.n	8003262 <xPortStartScheduler+0x5a>
{
 8003224:	b530      	push	{r4, r5, lr}
 8003226:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003228:	4b39      	ldr	r3, [pc, #228]	@ (8003310 <xPortStartScheduler+0x108>)
 800322a:	781a      	ldrb	r2, [r3, #0]
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003230:	22ff      	movs	r2, #255	@ 0xff
 8003232:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800323c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003240:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003244:	4a33      	ldr	r2, [pc, #204]	@ (8003314 <xPortStartScheduler+0x10c>)
 8003246:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003248:	4b33      	ldr	r3, [pc, #204]	@ (8003318 <xPortStartScheduler+0x110>)
 800324a:	2207      	movs	r2, #7
 800324c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800324e:	e01b      	b.n	8003288 <xPortStartScheduler+0x80>
	__asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003260:	e7fe      	b.n	8003260 <xPortStartScheduler+0x58>
 8003262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003272:	e7fe      	b.n	8003272 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8003274:	4a28      	ldr	r2, [pc, #160]	@ (8003318 <xPortStartScheduler+0x110>)
 8003276:	6813      	ldr	r3, [r2, #0]
 8003278:	3b01      	subs	r3, #1
 800327a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800327c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003288:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800328c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003290:	d1f0      	bne.n	8003274 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003292:	4b21      	ldr	r3, [pc, #132]	@ (8003318 <xPortStartScheduler+0x110>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d008      	beq.n	80032ac <xPortStartScheduler+0xa4>
 800329a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	e7fe      	b.n	80032aa <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003318 <xPortStartScheduler+0x110>)
 80032b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80032b2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032b6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80032b8:	9b01      	ldr	r3, [sp, #4]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	4a14      	ldr	r2, [pc, #80]	@ (8003310 <xPortStartScheduler+0x108>)
 80032be:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80032c0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 80032c4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80032c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032cc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80032d0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80032d4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80032d8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80032dc:	f7ff ff80 	bl	80031e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80032e0:	2500      	movs	r5, #0
 80032e2:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <xPortStartScheduler+0x114>)
 80032e4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80032e6:	f7ff fec3 	bl	8003070 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80032ea:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80032ee:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80032f2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80032f6:	f7ff fea7 	bl	8003048 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80032fa:	f005 fa77 	bl	80087ec <vTaskSwitchContext>
	prvTaskExitError();
 80032fe:	f7ff fe83 	bl	8003008 <prvTaskExitError>
}
 8003302:	4628      	mov	r0, r5
 8003304:	b003      	add	sp, #12
 8003306:	bd30      	pop	{r4, r5, pc}
 8003308:	410fc271 	.word	0x410fc271
 800330c:	410fc270 	.word	0x410fc270
 8003310:	e000e400 	.word	0xe000e400
 8003314:	20005ebc 	.word	0x20005ebc
 8003318:	20005eb8 	.word	0x20005eb8
 800331c:	20000064 	.word	0x20000064

08003320 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003320:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003324:	2b0f      	cmp	r3, #15
 8003326:	d90e      	bls.n	8003346 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003328:	4a11      	ldr	r2, [pc, #68]	@ (8003370 <vPortValidateInterruptPriority+0x50>)
 800332a:	5c9a      	ldrb	r2, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800332c:	4b11      	ldr	r3, [pc, #68]	@ (8003374 <vPortValidateInterruptPriority+0x54>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d208      	bcs.n	8003346 <vPortValidateInterruptPriority+0x26>
 8003334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	e7fe      	b.n	8003344 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003346:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800334a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800334e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003352:	4a09      	ldr	r2, [pc, #36]	@ (8003378 <vPortValidateInterruptPriority+0x58>)
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	4293      	cmp	r3, r2
 8003358:	d908      	bls.n	800336c <vPortValidateInterruptPriority+0x4c>
 800335a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	e7fe      	b.n	800336a <vPortValidateInterruptPriority+0x4a>
	}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	e000e3f0 	.word	0xe000e3f0
 8003374:	20005ebc 	.word	0x20005ebc
 8003378:	20005eb8 	.word	0x20005eb8

0800337c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800337c:	b510      	push	{r4, lr}
 800337e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003380:	f7ff fea8 	bl	80030d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003384:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003386:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003388:	429a      	cmp	r2, r3
 800338a:	d004      	beq.n	8003396 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800338c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800338e:	f7ff fec3 	bl	8003118 <vPortExitCritical>

	return xReturn;
}
 8003392:	4620      	mov	r0, r4
 8003394:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8003396:	2401      	movs	r4, #1
 8003398:	e7f9      	b.n	800338e <prvIsQueueFull+0x12>

0800339a <prvIsQueueEmpty>:
{
 800339a:	b510      	push	{r4, lr}
 800339c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800339e:	f7ff fe99 	bl	80030d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80033a4:	b923      	cbnz	r3, 80033b0 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80033a6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80033a8:	f7ff feb6 	bl	8003118 <vPortExitCritical>
}
 80033ac:	4620      	mov	r0, r4
 80033ae:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80033b0:	2400      	movs	r4, #0
 80033b2:	e7f9      	b.n	80033a8 <prvIsQueueEmpty+0xe>

080033b4 <prvCopyDataToQueue>:
{
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	4604      	mov	r4, r0
 80033b8:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033ba:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033bc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80033be:	b95a      	cbnz	r2, 80033d8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033c0:	6803      	ldr	r3, [r0, #0]
 80033c2:	b11b      	cbz	r3, 80033cc <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80033c4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033c6:	3601      	adds	r6, #1
 80033c8:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 80033ca:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033cc:	6880      	ldr	r0, [r0, #8]
 80033ce:	f005 fb39 	bl	8008a44 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60a3      	str	r3, [r4, #8]
 80033d6:	e7f6      	b.n	80033c6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80033d8:	b96d      	cbnz	r5, 80033f6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033da:	6840      	ldr	r0, [r0, #4]
 80033dc:	f007 feba 	bl	800b154 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033e0:	6863      	ldr	r3, [r4, #4]
 80033e2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80033e4:	4413      	add	r3, r2
 80033e6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033e8:	68a2      	ldr	r2, [r4, #8]
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d319      	bcc.n	8003422 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80033f2:	4628      	mov	r0, r5
 80033f4:	e7e7      	b.n	80033c6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033f6:	68c0      	ldr	r0, [r0, #12]
 80033f8:	f007 feac 	bl	800b154 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033fc:	68e3      	ldr	r3, [r4, #12]
 80033fe:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003400:	4251      	negs	r1, r2
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003406:	6822      	ldr	r2, [r4, #0]
 8003408:	4293      	cmp	r3, r2
 800340a:	d202      	bcs.n	8003412 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800340c:	68a3      	ldr	r3, [r4, #8]
 800340e:	440b      	add	r3, r1
 8003410:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003412:	2d02      	cmp	r5, #2
 8003414:	d001      	beq.n	800341a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8003416:	2000      	movs	r0, #0
 8003418:	e7d5      	b.n	80033c6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800341a:	b126      	cbz	r6, 8003426 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800341c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800341e:	2000      	movs	r0, #0
 8003420:	e7d1      	b.n	80033c6 <prvCopyDataToQueue+0x12>
 8003422:	4628      	mov	r0, r5
 8003424:	e7cf      	b.n	80033c6 <prvCopyDataToQueue+0x12>
 8003426:	2000      	movs	r0, #0
 8003428:	e7cd      	b.n	80033c6 <prvCopyDataToQueue+0x12>

0800342a <prvCopyDataFromQueue>:
{
 800342a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800342c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800342e:	b16a      	cbz	r2, 800344c <prvCopyDataFromQueue+0x22>
{
 8003430:	b510      	push	{r4, lr}
 8003432:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003434:	68d9      	ldr	r1, [r3, #12]
 8003436:	4411      	add	r1, r2
 8003438:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800343a:	689c      	ldr	r4, [r3, #8]
 800343c:	42a1      	cmp	r1, r4
 800343e:	d301      	bcc.n	8003444 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003440:	6819      	ldr	r1, [r3, #0]
 8003442:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003444:	68d9      	ldr	r1, [r3, #12]
 8003446:	f007 fe85 	bl	800b154 <memcpy>
}
 800344a:	bd10      	pop	{r4, pc}
 800344c:	4770      	bx	lr

0800344e <prvUnlockQueue>:
{
 800344e:	b538      	push	{r3, r4, r5, lr}
 8003450:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8003452:	f7ff fe3f 	bl	80030d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003456:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800345a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800345c:	e001      	b.n	8003462 <prvUnlockQueue+0x14>
			--cTxLock;
 800345e:	3c01      	subs	r4, #1
 8003460:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003462:	2c00      	cmp	r4, #0
 8003464:	dd0a      	ble.n	800347c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003466:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003468:	b143      	cbz	r3, 800347c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800346a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800346e:	f005 fa3d 	bl	80088ec <xTaskRemoveFromEventList>
 8003472:	2800      	cmp	r0, #0
 8003474:	d0f3      	beq.n	800345e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8003476:	f005 facf 	bl	8008a18 <vTaskMissedYield>
 800347a:	e7f0      	b.n	800345e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800347c:	23ff      	movs	r3, #255	@ 0xff
 800347e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8003482:	f7ff fe49 	bl	8003118 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003486:	f7ff fe25 	bl	80030d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800348a:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 800348e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003490:	e001      	b.n	8003496 <prvUnlockQueue+0x48>
				--cRxLock;
 8003492:	3c01      	subs	r4, #1
 8003494:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003496:	2c00      	cmp	r4, #0
 8003498:	dd0a      	ble.n	80034b0 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800349a:	692b      	ldr	r3, [r5, #16]
 800349c:	b143      	cbz	r3, 80034b0 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800349e:	f105 0010 	add.w	r0, r5, #16
 80034a2:	f005 fa23 	bl	80088ec <xTaskRemoveFromEventList>
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d0f3      	beq.n	8003492 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80034aa:	f005 fab5 	bl	8008a18 <vTaskMissedYield>
 80034ae:	e7f0      	b.n	8003492 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80034b0:	23ff      	movs	r3, #255	@ 0xff
 80034b2:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80034b6:	f7ff fe2f 	bl	8003118 <vPortExitCritical>
}
 80034ba:	bd38      	pop	{r3, r4, r5, pc}

080034bc <xQueueGenericReset>:
{
 80034bc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80034be:	b1e0      	cbz	r0, 80034fa <xQueueGenericReset+0x3e>
 80034c0:	460d      	mov	r5, r1
 80034c2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80034c4:	f7ff fe06 	bl	80030d4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034c8:	6823      	ldr	r3, [r4, #0]
 80034ca:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80034cc:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80034ce:	fb01 3002 	mla	r0, r1, r2, r3
 80034d2:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034d4:	2000      	movs	r0, #0
 80034d6:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034d8:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034da:	3a01      	subs	r2, #1
 80034dc:	fb02 3301 	mla	r3, r2, r1, r3
 80034e0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034e2:	23ff      	movs	r3, #255	@ 0xff
 80034e4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034e8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80034ec:	b9fd      	cbnz	r5, 800352e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034ee:	6923      	ldr	r3, [r4, #16]
 80034f0:	b963      	cbnz	r3, 800350c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80034f2:	f7ff fe11 	bl	8003118 <vPortExitCritical>
}
 80034f6:	2001      	movs	r0, #1
 80034f8:	bd38      	pop	{r3, r4, r5, pc}
 80034fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800350a:	e7fe      	b.n	800350a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800350c:	f104 0010 	add.w	r0, r4, #16
 8003510:	f005 f9ec 	bl	80088ec <xTaskRemoveFromEventList>
 8003514:	2800      	cmp	r0, #0
 8003516:	d0ec      	beq.n	80034f2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8003518:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800351c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003520:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	e7e1      	b.n	80034f2 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800352e:	f104 0010 	add.w	r0, r4, #16
 8003532:	f7ff fc13 	bl	8002d5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003536:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800353a:	f7ff fc0f 	bl	8002d5c <vListInitialise>
 800353e:	e7d8      	b.n	80034f2 <xQueueGenericReset+0x36>

08003540 <prvInitialiseNewQueue>:
{
 8003540:	b538      	push	{r3, r4, r5, lr}
 8003542:	461d      	mov	r5, r3
 8003544:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003546:	460b      	mov	r3, r1
 8003548:	b949      	cbnz	r1, 800355e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800354a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800354c:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800354e:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003550:	2101      	movs	r1, #1
 8003552:	4620      	mov	r0, r4
 8003554:	f7ff ffb2 	bl	80034bc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003558:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800355c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800355e:	6022      	str	r2, [r4, #0]
 8003560:	e7f4      	b.n	800354c <prvInitialiseNewQueue+0xc>

08003562 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003562:	b940      	cbnz	r0, 8003576 <xQueueGenericCreateStatic+0x14>
 8003564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	e7fe      	b.n	8003574 <xQueueGenericCreateStatic+0x12>
	{
 8003576:	b510      	push	{r4, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	461c      	mov	r4, r3
 800357c:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800357e:	b153      	cbz	r3, 8003596 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003580:	b192      	cbz	r2, 80035a8 <xQueueGenericCreateStatic+0x46>
 8003582:	b989      	cbnz	r1, 80035a8 <xQueueGenericCreateStatic+0x46>
 8003584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	e7fe      	b.n	8003594 <xQueueGenericCreateStatic+0x32>
 8003596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80035a6:	e7fe      	b.n	80035a6 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035a8:	b16a      	cbz	r2, 80035c6 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035aa:	2350      	movs	r3, #80	@ 0x50
 80035ac:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035ae:	9b03      	ldr	r3, [sp, #12]
 80035b0:	2b50      	cmp	r3, #80	@ 0x50
 80035b2:	d013      	beq.n	80035dc <xQueueGenericCreateStatic+0x7a>
 80035b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	e7fe      	b.n	80035c4 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035c6:	2900      	cmp	r1, #0
 80035c8:	d0ef      	beq.n	80035aa <xQueueGenericCreateStatic+0x48>
 80035ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	e7fe      	b.n	80035da <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035dc:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035de:	2301      	movs	r3, #1
 80035e0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035e4:	9400      	str	r4, [sp, #0]
 80035e6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80035ea:	4660      	mov	r0, ip
 80035ec:	f7ff ffa8 	bl	8003540 <prvInitialiseNewQueue>
	}
 80035f0:	4620      	mov	r0, r4
 80035f2:	b004      	add	sp, #16
 80035f4:	bd10      	pop	{r4, pc}

080035f6 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035f6:	b940      	cbnz	r0, 800360a <xQueueGenericCreate+0x14>
 80035f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	e7fe      	b.n	8003608 <xQueueGenericCreate+0x12>
	{
 800360a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800360c:	b083      	sub	sp, #12
 800360e:	460d      	mov	r5, r1
 8003610:	4614      	mov	r4, r2
 8003612:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003614:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003618:	3050      	adds	r0, #80	@ 0x50
 800361a:	f7fe ffdf 	bl	80025dc <pvPortMalloc>
		if( pxNewQueue != NULL )
 800361e:	4607      	mov	r7, r0
 8003620:	b150      	cbz	r0, 8003638 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003622:	2300      	movs	r3, #0
 8003624:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003628:	9000      	str	r0, [sp, #0]
 800362a:	4623      	mov	r3, r4
 800362c:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8003630:	4629      	mov	r1, r5
 8003632:	4630      	mov	r0, r6
 8003634:	f7ff ff84 	bl	8003540 <prvInitialiseNewQueue>
	}
 8003638:	4638      	mov	r0, r7
 800363a:	b003      	add	sp, #12
 800363c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800363e <xQueueGenericSend>:
{
 800363e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003640:	b085      	sub	sp, #20
 8003642:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8003644:	b188      	cbz	r0, 800366a <xQueueGenericSend+0x2c>
 8003646:	460f      	mov	r7, r1
 8003648:	461d      	mov	r5, r3
 800364a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800364c:	b1b1      	cbz	r1, 800367c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800364e:	2d02      	cmp	r5, #2
 8003650:	d120      	bne.n	8003694 <xQueueGenericSend+0x56>
 8003652:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003654:	2b01      	cmp	r3, #1
 8003656:	d01d      	beq.n	8003694 <xQueueGenericSend+0x56>
 8003658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	e7fe      	b.n	8003668 <xQueueGenericSend+0x2a>
 800366a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800367a:	e7fe      	b.n	800367a <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800367c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0e5      	beq.n	800364e <xQueueGenericSend+0x10>
 8003682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	e7fe      	b.n	8003692 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003694:	f005 f9c6 	bl	8008a24 <xTaskGetSchedulerState>
 8003698:	4606      	mov	r6, r0
 800369a:	b958      	cbnz	r0, 80036b4 <xQueueGenericSend+0x76>
 800369c:	9b01      	ldr	r3, [sp, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d048      	beq.n	8003734 <xQueueGenericSend+0xf6>
 80036a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	e7fe      	b.n	80036b2 <xQueueGenericSend+0x74>
 80036b4:	2600      	movs	r6, #0
 80036b6:	e03d      	b.n	8003734 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036b8:	462a      	mov	r2, r5
 80036ba:	4639      	mov	r1, r7
 80036bc:	4620      	mov	r0, r4
 80036be:	f7ff fe79 	bl	80033b4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80036c4:	b97b      	cbnz	r3, 80036e6 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 80036c6:	b148      	cbz	r0, 80036dc <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80036c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80036cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80036dc:	f7ff fd1c 	bl	8003118 <vPortExitCritical>
				return pdPASS;
 80036e0:	2001      	movs	r0, #1
}
 80036e2:	b005      	add	sp, #20
 80036e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036e6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80036ea:	f005 f8ff 	bl	80088ec <xTaskRemoveFromEventList>
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d0f4      	beq.n	80036dc <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 80036f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80036f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	e7e9      	b.n	80036dc <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8003708:	f7ff fd06 	bl	8003118 <vPortExitCritical>
					return errQUEUE_FULL;
 800370c:	2000      	movs	r0, #0
 800370e:	e7e8      	b.n	80036e2 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003710:	a802      	add	r0, sp, #8
 8003712:	f005 f931 	bl	8008978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003716:	2601      	movs	r6, #1
 8003718:	e019      	b.n	800374e <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800371a:	2300      	movs	r3, #0
 800371c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003720:	e021      	b.n	8003766 <xQueueGenericSend+0x128>
 8003722:	2300      	movs	r3, #0
 8003724:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003728:	e023      	b.n	8003772 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800372a:	4620      	mov	r0, r4
 800372c:	f7ff fe8f 	bl	800344e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003730:	f004 ffba 	bl	80086a8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8003734:	f7ff fcce 	bl	80030d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003738:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800373a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800373c:	429a      	cmp	r2, r3
 800373e:	d3bb      	bcc.n	80036b8 <xQueueGenericSend+0x7a>
 8003740:	2d02      	cmp	r5, #2
 8003742:	d0b9      	beq.n	80036b8 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003744:	9b01      	ldr	r3, [sp, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0de      	beq.n	8003708 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800374a:	2e00      	cmp	r6, #0
 800374c:	d0e0      	beq.n	8003710 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800374e:	f7ff fce3 	bl	8003118 <vPortExitCritical>
		vTaskSuspendAll();
 8003752:	f004 ff0f 	bl	8008574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003756:	f7ff fcbd 	bl	80030d4 <vPortEnterCritical>
 800375a:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800375e:	b252      	sxtb	r2, r2
 8003760:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003764:	d0d9      	beq.n	800371a <xQueueGenericSend+0xdc>
 8003766:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800376a:	b252      	sxtb	r2, r2
 800376c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003770:	d0d7      	beq.n	8003722 <xQueueGenericSend+0xe4>
 8003772:	f7ff fcd1 	bl	8003118 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003776:	a901      	add	r1, sp, #4
 8003778:	a802      	add	r0, sp, #8
 800377a:	f005 f909 	bl	8008990 <xTaskCheckForTimeOut>
 800377e:	b9d8      	cbnz	r0, 80037b8 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003780:	4620      	mov	r0, r4
 8003782:	f7ff fdfb 	bl	800337c <prvIsQueueFull>
 8003786:	2800      	cmp	r0, #0
 8003788:	d0cf      	beq.n	800372a <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800378a:	9901      	ldr	r1, [sp, #4]
 800378c:	f104 0010 	add.w	r0, r4, #16
 8003790:	f005 f878 	bl	8008884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003794:	4620      	mov	r0, r4
 8003796:	f7ff fe5a 	bl	800344e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800379a:	f004 ff85 	bl	80086a8 <xTaskResumeAll>
 800379e:	2800      	cmp	r0, #0
 80037a0:	d1c8      	bne.n	8003734 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80037a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80037a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	e7bd      	b.n	8003734 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 80037b8:	4620      	mov	r0, r4
 80037ba:	f7ff fe48 	bl	800344e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037be:	f004 ff73 	bl	80086a8 <xTaskResumeAll>
			return errQUEUE_FULL;
 80037c2:	2000      	movs	r0, #0
 80037c4:	e78d      	b.n	80036e2 <xQueueGenericSend+0xa4>

080037c6 <xQueueGenericSendFromISR>:
{
 80037c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80037ca:	b190      	cbz	r0, 80037f2 <xQueueGenericSendFromISR+0x2c>
 80037cc:	460f      	mov	r7, r1
 80037ce:	4616      	mov	r6, r2
 80037d0:	461c      	mov	r4, r3
 80037d2:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037d4:	b1b1      	cbz	r1, 8003804 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037d6:	2c02      	cmp	r4, #2
 80037d8:	d120      	bne.n	800381c <xQueueGenericSendFromISR+0x56>
 80037da:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d01d      	beq.n	800381c <xQueueGenericSendFromISR+0x56>
 80037e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	e7fe      	b.n	80037f0 <xQueueGenericSendFromISR+0x2a>
 80037f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003802:	e7fe      	b.n	8003802 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003804:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0e5      	beq.n	80037d6 <xQueueGenericSendFromISR+0x10>
 800380a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	e7fe      	b.n	800381a <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800381c:	f7ff fd80 	bl	8003320 <vPortValidateInterruptPriority>
	__asm volatile
 8003820:	f3ef 8811 	mrs	r8, BASEPRI
 8003824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003834:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8003836:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003838:	429a      	cmp	r2, r3
 800383a:	d306      	bcc.n	800384a <xQueueGenericSendFromISR+0x84>
 800383c:	2c02      	cmp	r4, #2
 800383e:	d004      	beq.n	800384a <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8003840:	2000      	movs	r0, #0
	__asm volatile
 8003842:	f388 8811 	msr	BASEPRI, r8
}
 8003846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800384a:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 800384e:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003852:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003854:	4622      	mov	r2, r4
 8003856:	4639      	mov	r1, r7
 8003858:	4628      	mov	r0, r5
 800385a:	f7ff fdab 	bl	80033b4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800385e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003862:	d006      	beq.n	8003872 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003864:	f109 0301 	add.w	r3, r9, #1
 8003868:	b25b      	sxtb	r3, r3
 800386a:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800386e:	2001      	movs	r0, #1
 8003870:	e7e7      	b.n	8003842 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003872:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003874:	b90b      	cbnz	r3, 800387a <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8003876:	2001      	movs	r0, #1
 8003878:	e7e3      	b.n	8003842 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800387a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800387e:	f005 f835 	bl	80088ec <xTaskRemoveFromEventList>
 8003882:	b118      	cbz	r0, 800388c <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8003884:	b126      	cbz	r6, 8003890 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003886:	2001      	movs	r0, #1
 8003888:	6030      	str	r0, [r6, #0]
 800388a:	e7da      	b.n	8003842 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800388c:	2001      	movs	r0, #1
 800388e:	e7d8      	b.n	8003842 <xQueueGenericSendFromISR+0x7c>
 8003890:	2001      	movs	r0, #1
 8003892:	e7d6      	b.n	8003842 <xQueueGenericSendFromISR+0x7c>

08003894 <xQueueReceive>:
{
 8003894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003896:	b085      	sub	sp, #20
 8003898:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800389a:	b190      	cbz	r0, 80038c2 <xQueueReceive+0x2e>
 800389c:	460f      	mov	r7, r1
 800389e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038a0:	b1c1      	cbz	r1, 80038d4 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038a2:	f005 f8bf 	bl	8008a24 <xTaskGetSchedulerState>
 80038a6:	4606      	mov	r6, r0
 80038a8:	bb00      	cbnz	r0, 80038ec <xQueueReceive+0x58>
 80038aa:	9b01      	ldr	r3, [sp, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d05e      	beq.n	800396e <xQueueReceive+0xda>
	__asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	e7fe      	b.n	80038c0 <xQueueReceive+0x2c>
 80038c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80038d2:	e7fe      	b.n	80038d2 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038d4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0e3      	beq.n	80038a2 <xQueueReceive+0xe>
 80038da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	e7fe      	b.n	80038ea <xQueueReceive+0x56>
 80038ec:	2600      	movs	r6, #0
 80038ee:	e03e      	b.n	800396e <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038f0:	4639      	mov	r1, r7
 80038f2:	4620      	mov	r0, r4
 80038f4:	f7ff fd99 	bl	800342a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038f8:	3d01      	subs	r5, #1
 80038fa:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038fc:	6923      	ldr	r3, [r4, #16]
 80038fe:	b923      	cbnz	r3, 800390a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8003900:	f7ff fc0a 	bl	8003118 <vPortExitCritical>
				return pdPASS;
 8003904:	2001      	movs	r0, #1
}
 8003906:	b005      	add	sp, #20
 8003908:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800390a:	f104 0010 	add.w	r0, r4, #16
 800390e:	f004 ffed 	bl	80088ec <xTaskRemoveFromEventList>
 8003912:	2800      	cmp	r0, #0
 8003914:	d0f4      	beq.n	8003900 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8003916:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800391a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800391e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	e7e9      	b.n	8003900 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800392c:	f7ff fbf4 	bl	8003118 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003930:	2000      	movs	r0, #0
 8003932:	e7e8      	b.n	8003906 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003934:	a802      	add	r0, sp, #8
 8003936:	f005 f81f 	bl	8008978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800393a:	2601      	movs	r6, #1
 800393c:	e021      	b.n	8003982 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800393e:	2300      	movs	r3, #0
 8003940:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003944:	e029      	b.n	800399a <xQueueReceive+0x106>
 8003946:	2300      	movs	r3, #0
 8003948:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800394c:	e02b      	b.n	80039a6 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800394e:	4620      	mov	r0, r4
 8003950:	f7ff fd7d 	bl	800344e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003954:	f004 fea8 	bl	80086a8 <xTaskResumeAll>
 8003958:	e009      	b.n	800396e <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800395a:	4620      	mov	r0, r4
 800395c:	f7ff fd77 	bl	800344e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003960:	f004 fea2 	bl	80086a8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003964:	4620      	mov	r0, r4
 8003966:	f7ff fd18 	bl	800339a <prvIsQueueEmpty>
 800396a:	2800      	cmp	r0, #0
 800396c:	d13f      	bne.n	80039ee <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800396e:	f7ff fbb1 	bl	80030d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003972:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003974:	2d00      	cmp	r5, #0
 8003976:	d1bb      	bne.n	80038f0 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003978:	9b01      	ldr	r3, [sp, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0d6      	beq.n	800392c <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800397e:	2e00      	cmp	r6, #0
 8003980:	d0d8      	beq.n	8003934 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8003982:	f7ff fbc9 	bl	8003118 <vPortExitCritical>
		vTaskSuspendAll();
 8003986:	f004 fdf5 	bl	8008574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800398a:	f7ff fba3 	bl	80030d4 <vPortEnterCritical>
 800398e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003992:	b25b      	sxtb	r3, r3
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d0d1      	beq.n	800393e <xQueueReceive+0xaa>
 800399a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800399e:	b25b      	sxtb	r3, r3
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d0cf      	beq.n	8003946 <xQueueReceive+0xb2>
 80039a6:	f7ff fbb7 	bl	8003118 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039aa:	a901      	add	r1, sp, #4
 80039ac:	a802      	add	r0, sp, #8
 80039ae:	f004 ffef 	bl	8008990 <xTaskCheckForTimeOut>
 80039b2:	2800      	cmp	r0, #0
 80039b4:	d1d1      	bne.n	800395a <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039b6:	4620      	mov	r0, r4
 80039b8:	f7ff fcef 	bl	800339a <prvIsQueueEmpty>
 80039bc:	2800      	cmp	r0, #0
 80039be:	d0c6      	beq.n	800394e <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039c0:	9901      	ldr	r1, [sp, #4]
 80039c2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80039c6:	f004 ff5d 	bl	8008884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80039ca:	4620      	mov	r0, r4
 80039cc:	f7ff fd3f 	bl	800344e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039d0:	f004 fe6a 	bl	80086a8 <xTaskResumeAll>
 80039d4:	2800      	cmp	r0, #0
 80039d6:	d1ca      	bne.n	800396e <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80039d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80039dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	e7bf      	b.n	800396e <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80039ee:	2000      	movs	r0, #0
 80039f0:	e789      	b.n	8003906 <xQueueReceive+0x72>

080039f2 <xQueueReceiveFromISR>:
{
 80039f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80039f6:	b1b0      	cbz	r0, 8003a26 <xQueueReceiveFromISR+0x34>
 80039f8:	460d      	mov	r5, r1
 80039fa:	4690      	mov	r8, r2
 80039fc:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039fe:	b1d9      	cbz	r1, 8003a38 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a00:	f7ff fc8e 	bl	8003320 <vPortValidateInterruptPriority>
	__asm volatile
 8003a04:	f3ef 8711 	mrs	r7, BASEPRI
 8003a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a18:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a1a:	b9ce      	cbnz	r6, 8003a50 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8003a1c:	2000      	movs	r0, #0
	__asm volatile
 8003a1e:	f387 8811 	msr	BASEPRI, r7
}
 8003a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003a36:	e7fe      	b.n	8003a36 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a38:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0e0      	beq.n	8003a00 <xQueueReceiveFromISR+0xe>
 8003a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	e7fe      	b.n	8003a4e <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8003a50:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8003a54:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a58:	4629      	mov	r1, r5
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f7ff fce5 	bl	800342a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a60:	1e73      	subs	r3, r6, #1
 8003a62:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8003a64:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003a68:	d006      	beq.n	8003a78 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003a6a:	f109 0301 	add.w	r3, r9, #1
 8003a6e:	b25b      	sxtb	r3, r3
 8003a70:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8003a74:	2001      	movs	r0, #1
 8003a76:	e7d2      	b.n	8003a1e <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a78:	6923      	ldr	r3, [r4, #16]
 8003a7a:	b90b      	cbnz	r3, 8003a80 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	e7ce      	b.n	8003a1e <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a80:	f104 0010 	add.w	r0, r4, #16
 8003a84:	f004 ff32 	bl	80088ec <xTaskRemoveFromEventList>
 8003a88:	b130      	cbz	r0, 8003a98 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8003a8a:	f1b8 0f00 	cmp.w	r8, #0
 8003a8e:	d005      	beq.n	8003a9c <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003a90:	2001      	movs	r0, #1
 8003a92:	f8c8 0000 	str.w	r0, [r8]
 8003a96:	e7c2      	b.n	8003a1e <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8003a98:	2001      	movs	r0, #1
 8003a9a:	e7c0      	b.n	8003a1e <xQueueReceiveFromISR+0x2c>
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	e7be      	b.n	8003a1e <xQueueReceiveFromISR+0x2c>

08003aa0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	2b07      	cmp	r3, #7
 8003aa4:	d80c      	bhi.n	8003ac0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003aa6:	4a07      	ldr	r2, [pc, #28]	@ (8003ac4 <vQueueAddToRegistry+0x24>)
 8003aa8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003aac:	b10a      	cbz	r2, 8003ab2 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003aae:	3301      	adds	r3, #1
 8003ab0:	e7f7      	b.n	8003aa2 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ab2:	4a04      	ldr	r2, [pc, #16]	@ (8003ac4 <vQueueAddToRegistry+0x24>)
 8003ab4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ab8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003abc:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003abe:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	20005ec0 	.word	0x20005ec0

08003ac8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	4604      	mov	r4, r0
 8003acc:	460d      	mov	r5, r1
 8003ace:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ad0:	f7ff fb00 	bl	80030d4 <vPortEnterCritical>
 8003ad4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003ad8:	b25b      	sxtb	r3, r3
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d00d      	beq.n	8003afc <vQueueWaitForMessageRestricted+0x34>
 8003ae0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003ae4:	b25b      	sxtb	r3, r3
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d00b      	beq.n	8003b04 <vQueueWaitForMessageRestricted+0x3c>
 8003aec:	f7ff fb14 	bl	8003118 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003af0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003af2:	b15b      	cbz	r3, 8003b0c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003af4:	4620      	mov	r0, r4
 8003af6:	f7ff fcaa 	bl	800344e <prvUnlockQueue>
	}
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8003afc:	2300      	movs	r3, #0
 8003afe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003b02:	e7ed      	b.n	8003ae0 <vQueueWaitForMessageRestricted+0x18>
 8003b04:	2300      	movs	r3, #0
 8003b06:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003b0a:	e7ef      	b.n	8003aec <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b0c:	4632      	mov	r2, r6
 8003b0e:	4629      	mov	r1, r5
 8003b10:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003b14:	f004 fece 	bl	80088b4 <vTaskPlaceOnEventListRestricted>
 8003b18:	e7ec      	b.n	8003af4 <vQueueWaitForMessageRestricted+0x2c>
	...

08003b1c <resistor_init>:
#include "resistor.h"

void resistor_init(resistor_t* resistor, float pull_resistor, resistor_pull_type_t pull_type, analog_input_channel_t analog_input)
{
 8003b1c:	b508      	push	{r3, lr}
    if (resistor == NULL)
 8003b1e:	b120      	cbz	r0, 8003b2a <resistor_init+0xe>
    {
        log_error("Resistor init failed!");
        return;
    }
    resistor->pull_resistor = pull_resistor;
 8003b20:	ed80 0a01 	vstr	s0, [r0, #4]
    resistor->pull_type = pull_type;
 8003b24:	7001      	strb	r1, [r0, #0]
    resistor->analog_input = analog_input;
 8003b26:	7202      	strb	r2, [r0, #8]
}
 8003b28:	bd08      	pop	{r3, pc}
        log_error("Resistor init failed!");
 8003b2a:	4802      	ldr	r0, [pc, #8]	@ (8003b34 <resistor_init+0x18>)
 8003b2c:	f7fe fbaa 	bl	8002284 <log_error>
        return;
 8003b30:	e7fa      	b.n	8003b28 <resistor_init+0xc>
 8003b32:	bf00      	nop
 8003b34:	0800ced0 	.word	0x0800ced0

08003b38 <resistor_get_resistance>:

/**
 * @todo div by zero will break this!
 */
float resistor_get_resistance(const resistor_t *resistor)
{
 8003b38:	b510      	push	{r4, lr}
 8003b3a:	4604      	mov	r4, r0
    uint16_t adc_value = analog_inputs_get_data(resistor->analog_input);
 8003b3c:	7a00      	ldrb	r0, [r0, #8]
 8003b3e:	f7fd f95d 	bl	8000dfc <analog_inputs_get_data>
 8003b42:	ee07 0a10 	vmov	s14, r0
    float voltage = ((float)adc_value / (float)ADC_MAX_VALUE) * (float)ADC_REF_VOLTAGE;
 8003b46:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003b4a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8003bb4 <resistor_get_resistance+0x7c>
 8003b4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b52:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003bb8 <resistor_get_resistance+0x80>
 8003b56:	ee67 7a87 	vmul.f32	s15, s15, s14
    // simple check to see if the sensor is open circuit or not
    if (!IS_IN_RANGE(voltage, 0.05f * ADC_REF_VOLTAGE, 0.95f * ADC_REF_VOLTAGE))
 8003b5a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003bbc <resistor_get_resistance+0x84>
 8003b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b66:	db13      	blt.n	8003b90 <resistor_get_resistance+0x58>
 8003b68:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003bc0 <resistor_get_resistance+0x88>
 8003b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b74:	d80c      	bhi.n	8003b90 <resistor_get_resistance+0x58>
    {
        log_error("Resistor open circuit.");
        return NAN;
    }
    if (resistor->pull_type == RESISTOR_PULL_UP) {
 8003b76:	7823      	ldrb	r3, [r4, #0]
 8003b78:	b983      	cbnz	r3, 8003b9c <resistor_get_resistance+0x64>
        return (voltage * (float)resistor->pull_resistor) / ((float)ADC_REF_VOLTAGE - voltage);
 8003b7a:	edd4 6a01 	vldr	s13, [r4, #4]
 8003b7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b82:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003bb8 <resistor_get_resistance+0x80>
 8003b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b8a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8003b8e:	e004      	b.n	8003b9a <resistor_get_resistance+0x62>
        log_error("Resistor open circuit.");
 8003b90:	480c      	ldr	r0, [pc, #48]	@ (8003bc4 <resistor_get_resistance+0x8c>)
 8003b92:	f7fe fb77 	bl	8002284 <log_error>
        return NAN;
 8003b96:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8003bc8 <resistor_get_resistance+0x90>
    } else { // PULL_DOWN
        return ((ADC_REF_VOLTAGE - voltage) * (float)resistor->pull_resistor) / voltage;
    }
}
 8003b9a:	bd10      	pop	{r4, pc}
        return ((ADC_REF_VOLTAGE - voltage) * (float)resistor->pull_resistor) / voltage;
 8003b9c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8003bb8 <resistor_get_resistance+0x80>
 8003ba0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ba4:	edd4 6a01 	vldr	s13, [r4, #4]
 8003ba8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003bac:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8003bb0:	e7f3      	b.n	8003b9a <resistor_get_resistance+0x62>
 8003bb2:	bf00      	nop
 8003bb4:	457ff000 	.word	0x457ff000
 8003bb8:	40533333 	.word	0x40533333
 8003bbc:	3e28f5c3 	.word	0x3e28f5c3
 8003bc0:	4048a3d7 	.word	0x4048a3d7
 8003bc4:	0800cee8 	.word	0x0800cee8
 8003bc8:	7fc00000 	.word	0x7fc00000

08003bcc <sensor_tps_get>:
static thermistor_t *sensor_iat = NULL;
static thermistor_t *sensor_clt = NULL;
static sensor_ops_t *sensor_ops = NULL;

percent_t sensor_tps_get(sensor_tps_t *sensor)
{
 8003bcc:	b510      	push	{r4, lr}
    if (sensor == NULL)
 8003bce:	b3b0      	cbz	r0, 8003c3e <sensor_tps_get+0x72>
 8003bd0:	4604      	mov	r4, r0
    {
        log_error("tps is null");
        return SENSOR_TPS_FAIL_SAFE;
    }
     if (sensor->wide_open_throttle_adc_value == 0 && sensor->closed_throttle_adc_value == 0)
 8003bd2:	8803      	ldrh	r3, [r0, #0]
 8003bd4:	b90b      	cbnz	r3, 8003bda <sensor_tps_get+0xe>
 8003bd6:	8843      	ldrh	r3, [r0, #2]
 8003bd8:	b3bb      	cbz	r3, 8003c4a <sensor_tps_get+0x7e>
    {
        log_error("tps wrong sensor calib");
        return SENSOR_TPS_FAIL_SAFE;
    }
    percent_t result = 0;
    uint16_t raw_data = analog_inputs_get_data(sensor->analog_channel);
 8003bda:	7920      	ldrb	r0, [r4, #4]
 8003bdc:	f7fd f90e 	bl	8000dfc <analog_inputs_get_data>
 8003be0:	ee07 0a90 	vmov	s15, r0
    if (sensor->is_inverted)
 8003be4:	7963      	ldrb	r3, [r4, #5]
 8003be6:	b3b3      	cbz	r3, 8003c56 <sensor_tps_get+0x8a>
    {
        result = mapf((float)raw_data, (float)sensor->wide_open_throttle_adc_value, (float)sensor->closed_throttle_adc_value, (float)0, (float)100);
 8003be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bec:	8822      	ldrh	r2, [r4, #0]
 8003bee:	ee07 2a10 	vmov	s14, r2
 8003bf2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003bf6:	8863      	ldrh	r3, [r4, #2]
 8003bf8:	ee07 3a10 	vmov	s14, r3
 8003bfc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (in_max == in_min)
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d045      	beq.n	8003c90 <sensor_tps_get+0xc4>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003c04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003c08:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8003ca4 <sensor_tps_get+0xd8>
 8003c0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003c10:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003c14:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8003c18:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8003ca8 <sensor_tps_get+0xdc>
 8003c1c:	ee30 0a27 	vadd.f32	s0, s0, s15
    }
    else
    {
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
    }
    result = CLAMP(result, (percent_t)0, (percent_t)100);
 8003c20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c28:	d438      	bmi.n	8003c9c <sensor_tps_get+0xd0>
 8003c2a:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8003ca4 <sensor_tps_get+0xd8>
 8003c2e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c36:	dd01      	ble.n	8003c3c <sensor_tps_get+0x70>
 8003c38:	eeb0 0a67 	vmov.f32	s0, s15
    return result;
}
 8003c3c:	bd10      	pop	{r4, pc}
        log_error("tps is null");
 8003c3e:	481b      	ldr	r0, [pc, #108]	@ (8003cac <sensor_tps_get+0xe0>)
 8003c40:	f7fe fb20 	bl	8002284 <log_error>
        return SENSOR_TPS_FAIL_SAFE;
 8003c44:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8003cb0 <sensor_tps_get+0xe4>
 8003c48:	e7f8      	b.n	8003c3c <sensor_tps_get+0x70>
        log_error("tps wrong sensor calib");
 8003c4a:	481a      	ldr	r0, [pc, #104]	@ (8003cb4 <sensor_tps_get+0xe8>)
 8003c4c:	f7fe fb1a 	bl	8002284 <log_error>
        return SENSOR_TPS_FAIL_SAFE;
 8003c50:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8003cb0 <sensor_tps_get+0xe4>
 8003c54:	e7f2      	b.n	8003c3c <sensor_tps_get+0x70>
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	8862      	ldrh	r2, [r4, #2]
 8003c5c:	ee07 2a10 	vmov	s14, r2
 8003c60:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003c64:	8823      	ldrh	r3, [r4, #0]
 8003c66:	ee07 3a10 	vmov	s14, r3
 8003c6a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (in_max == in_min)
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d011      	beq.n	8003c96 <sensor_tps_get+0xca>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003c72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003c76:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8003ca4 <sensor_tps_get+0xd8>
 8003c7a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003c7e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003c82:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8003c86:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8003ca8 <sensor_tps_get+0xdc>
 8003c8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003c8e:	e7c7      	b.n	8003c20 <sensor_tps_get+0x54>
        result = mapf((float)raw_data, (float)sensor->wide_open_throttle_adc_value, (float)sensor->closed_throttle_adc_value, (float)0, (float)100);
 8003c90:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8003ca8 <sensor_tps_get+0xdc>
 8003c94:	e7c9      	b.n	8003c2a <sensor_tps_get+0x5e>
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
 8003c96:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8003ca8 <sensor_tps_get+0xdc>
 8003c9a:	e7c6      	b.n	8003c2a <sensor_tps_get+0x5e>
    result = CLAMP(result, (percent_t)0, (percent_t)100);
 8003c9c:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8003ca8 <sensor_tps_get+0xdc>
 8003ca0:	e7cc      	b.n	8003c3c <sensor_tps_get+0x70>
 8003ca2:	bf00      	nop
 8003ca4:	42c80000 	.word	0x42c80000
 8003ca8:	00000000 	.word	0x00000000
 8003cac:	0800cf00 	.word	0x0800cf00
 8003cb0:	7fc00000 	.word	0x7fc00000
 8003cb4:	0800cf0c 	.word	0x0800cf0c

08003cb8 <sensor_map_init>:

void sensor_map_init(sensor_map_t *sensor, sensor_map_type_t type)
{
 8003cb8:	b510      	push	{r4, lr}
    if (sensor == NULL)
 8003cba:	b168      	cbz	r0, 8003cd8 <sensor_map_init+0x20>
 8003cbc:	4604      	mov	r4, r0
    {
        log_error("map sensor is null");
        return;
    }
    switch (type)
 8003cbe:	b179      	cbz	r1, 8003ce0 <sensor_map_init+0x28>
 8003cc0:	2901      	cmp	r1, #1
 8003cc2:	d115      	bne.n	8003cf0 <sensor_map_init+0x38>
         * a simple linear sensor
         */
        /**
         * @todo actually calculate these values!
         */
        sensor->adc_value_0_bar = 100;
 8003cc4:	2364      	movs	r3, #100	@ 0x64
 8003cc6:	8003      	strh	r3, [r0, #0]
        sensor->adc_value_1_bar = 3000;
 8003cc8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003ccc:	8043      	strh	r3, [r0, #2]
        sensor->analog_channel = ANALOG_INPUT_SENSOR_MAP_PIN;
 8003cce:	2305      	movs	r3, #5
 8003cd0:	7103      	strb	r3, [r0, #4]
    
    default:
        log_error("map sensor type not configured!");
        break;
    }
    map_sensor = sensor;
 8003cd2:	4b09      	ldr	r3, [pc, #36]	@ (8003cf8 <sensor_map_init+0x40>)
 8003cd4:	601c      	str	r4, [r3, #0]
}
 8003cd6:	bd10      	pop	{r4, pc}
        log_error("map sensor is null");
 8003cd8:	4808      	ldr	r0, [pc, #32]	@ (8003cfc <sensor_map_init+0x44>)
 8003cda:	f7fe fad3 	bl	8002284 <log_error>
        return;
 8003cde:	e7fa      	b.n	8003cd6 <sensor_map_init+0x1e>
        sensor->adc_value_0_bar = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	8003      	strh	r3, [r0, #0]
        sensor->adc_value_1_bar = 4095;
 8003ce4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8003ce8:	8043      	strh	r3, [r0, #2]
        sensor->analog_channel = ANALOG_INPUT_SENSOR_MAP_PIN;
 8003cea:	2305      	movs	r3, #5
 8003cec:	7103      	strb	r3, [r0, #4]
        break;
 8003cee:	e7f0      	b.n	8003cd2 <sensor_map_init+0x1a>
        log_error("map sensor type not configured!");
 8003cf0:	4803      	ldr	r0, [pc, #12]	@ (8003d00 <sensor_map_init+0x48>)
 8003cf2:	f7fe fac7 	bl	8002284 <log_error>
        break;
 8003cf6:	e7ec      	b.n	8003cd2 <sensor_map_init+0x1a>
 8003cf8:	20005f08 	.word	0x20005f08
 8003cfc:	0800cf24 	.word	0x0800cf24
 8003d00:	0800cf38 	.word	0x0800cf38

08003d04 <sensor_map_get>:


pressure_t sensor_map_get()
{
 8003d04:	b508      	push	{r3, lr}
    if (map_sensor->adc_value_0_bar == 0 && map_sensor->adc_value_1_bar == 0)
 8003d06:	4b22      	ldr	r3, [pc, #136]	@ (8003d90 <sensor_map_get+0x8c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	881a      	ldrh	r2, [r3, #0]
 8003d0c:	b90a      	cbnz	r2, 8003d12 <sensor_map_get+0xe>
 8003d0e:	885a      	ldrh	r2, [r3, #2]
 8003d10:	b37a      	cbz	r2, 8003d72 <sensor_map_get+0x6e>
        log_error("map sensor no init!");
        return SENSOR_MAP_FAIL_SAFE;
    }
    
    uint16_t raw_adc_value = 0;
    raw_adc_value = analog_inputs_get_data(map_sensor->analog_channel);
 8003d12:	7918      	ldrb	r0, [r3, #4]
 8003d14:	f7fd f872 	bl	8000dfc <analog_inputs_get_data>
 8003d18:	ee07 0a90 	vmov	s15, r0

    pressure_t result = SENSOR_MAP_FAIL_SAFE;

    result = mapf((float)raw_adc_value, (float)map_sensor->adc_value_0_bar, (float)map_sensor->adc_value_1_bar, (pressure_t)0, (pressure_t)100);
 8003d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d20:	4b1b      	ldr	r3, [pc, #108]	@ (8003d90 <sensor_map_get+0x8c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	881a      	ldrh	r2, [r3, #0]
 8003d26:	ee07 2a10 	vmov	s14, r2
 8003d2a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003d2e:	885b      	ldrh	r3, [r3, #2]
 8003d30:	ee07 3a10 	vmov	s14, r3
 8003d34:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (in_max == in_min)
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d020      	beq.n	8003d7e <sensor_map_get+0x7a>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003d3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003d40:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8003d94 <sensor_map_get+0x90>
 8003d44:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003d48:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003d4c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8003d50:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8003d98 <sensor_map_get+0x94>
 8003d54:	ee30 0a27 	vadd.f32	s0, s0, s15

    if (!IS_IN_RANGE(result, (pressure_t)0, FIRMWARE_LIMIT_MAX_MAP))
 8003d58:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d60:	db10      	blt.n	8003d84 <sensor_map_get+0x80>
 8003d62:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003d9c <sensor_map_get+0x98>
 8003d66:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6e:	d809      	bhi.n	8003d84 <sensor_map_get+0x80>
    {
        log_error("map sensor out of range!");
        return SENSOR_MAP_FAIL_SAFE;
    }
    return result;
}
 8003d70:	bd08      	pop	{r3, pc}
        log_error("map sensor no init!");
 8003d72:	480b      	ldr	r0, [pc, #44]	@ (8003da0 <sensor_map_get+0x9c>)
 8003d74:	f7fe fa86 	bl	8002284 <log_error>
        return SENSOR_MAP_FAIL_SAFE;
 8003d78:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8003d98 <sensor_map_get+0x94>
 8003d7c:	e7f8      	b.n	8003d70 <sensor_map_get+0x6c>
        return 0.0f; // Avoid division by zero
 8003d7e:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8003d98 <sensor_map_get+0x94>
 8003d82:	e7ee      	b.n	8003d62 <sensor_map_get+0x5e>
        log_error("map sensor out of range!");
 8003d84:	4807      	ldr	r0, [pc, #28]	@ (8003da4 <sensor_map_get+0xa0>)
 8003d86:	f7fe fa7d 	bl	8002284 <log_error>
        return SENSOR_MAP_FAIL_SAFE;
 8003d8a:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8003d98 <sensor_map_get+0x94>
 8003d8e:	e7ef      	b.n	8003d70 <sensor_map_get+0x6c>
 8003d90:	20005f08 	.word	0x20005f08
 8003d94:	42c80000 	.word	0x42c80000
 8003d98:	00000000 	.word	0x00000000
 8003d9c:	42f00000 	.word	0x42f00000
 8003da0:	0800cf58 	.word	0x0800cf58
 8003da4:	0800cf6c 	.word	0x0800cf6c

08003da8 <sensor_iat_init>:

void sensor_iat_init(thermistor_t *sensor, sensor_iat_type_t type)
{
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	b08a      	sub	sp, #40	@ 0x28
 8003dac:	4604      	mov	r4, r0
    switch (type)
 8003dae:	b1e9      	cbz	r1, 8003dec <sensor_iat_init+0x44>
 8003db0:	2901      	cmp	r1, #1
 8003db2:	d138      	bne.n	8003e26 <sensor_iat_init+0x7e>
    {
        case SENSOR_IAT_TYPE_BOSCH_816:
            resistor_init(&sensor->resistor, 10000, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_IAT_PIN);
 8003db4:	2206      	movs	r2, #6
 8003db6:	2100      	movs	r1, #0
 8003db8:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8003e30 <sensor_iat_init+0x88>
 8003dbc:	f7ff feae 	bl	8003b1c <resistor_init>
            thermistor_conf_t bosch_816_iat_conf = 
 8003dc0:	ad04      	add	r5, sp, #16
 8003dc2:	4e1c      	ldr	r6, [pc, #112]	@ (8003e34 <sensor_iat_init+0x8c>)
 8003dc4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dc8:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003dcc:	e885 0003 	stmia.w	r5, {r0, r1}
                .resistance_3 = 322.5f,
                .tempC_1 = -10.0f,
                .tempC_2 = 25.0f,
                .tempC_3 = 80.0f
            };
            thermistor_init(sensor, bosch_816_iat_conf);
 8003dd0:	ab0a      	add	r3, sp, #40	@ 0x28
 8003dd2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003dd6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003dda:	ab04      	add	r3, sp, #16
 8003ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dde:	4620      	mov	r0, r4
 8003de0:	f004 fe78 	bl	8008ad4 <thermistor_init>
            sensor_iat = sensor;
 8003de4:	4b14      	ldr	r3, [pc, #80]	@ (8003e38 <sensor_iat_init+0x90>)
 8003de6:	601c      	str	r4, [r3, #0]
            break;
    default:
        log_error("iat sensor type not configured!");
        break;
    }
}
 8003de8:	b00a      	add	sp, #40	@ 0x28
 8003dea:	bd70      	pop	{r4, r5, r6, pc}
            resistor_init(&sensor->resistor, 4700, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_IAT_PIN);
 8003dec:	2206      	movs	r2, #6
 8003dee:	2100      	movs	r1, #0
 8003df0:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8003e3c <sensor_iat_init+0x94>
 8003df4:	f7ff fe92 	bl	8003b1c <resistor_init>
            thermistor_conf_t genric_5k =
 8003df8:	f10d 0c10 	add.w	ip, sp, #16
 8003dfc:	4d10      	ldr	r5, [pc, #64]	@ (8003e40 <sensor_iat_init+0x98>)
 8003dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003e04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003e08:	e88c 0003 	stmia.w	ip, {r0, r1}
            thermistor_init(sensor, genric_5k);
 8003e0c:	ab0a      	add	r3, sp, #40	@ 0x28
 8003e0e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003e12:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003e16:	ab04      	add	r3, sp, #16
 8003e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	f004 fe5a 	bl	8008ad4 <thermistor_init>
            sensor_iat = sensor;
 8003e20:	4b05      	ldr	r3, [pc, #20]	@ (8003e38 <sensor_iat_init+0x90>)
 8003e22:	601c      	str	r4, [r3, #0]
            break;
 8003e24:	e7e0      	b.n	8003de8 <sensor_iat_init+0x40>
        log_error("iat sensor type not configured!");
 8003e26:	4807      	ldr	r0, [pc, #28]	@ (8003e44 <sensor_iat_init+0x9c>)
 8003e28:	f7fe fa2c 	bl	8002284 <log_error>
}
 8003e2c:	e7dc      	b.n	8003de8 <sensor_iat_init+0x40>
 8003e2e:	bf00      	nop
 8003e30:	461c4000 	.word	0x461c4000
 8003e34:	0800cbe4 	.word	0x0800cbe4
 8003e38:	20005f04 	.word	0x20005f04
 8003e3c:	4592e000 	.word	0x4592e000
 8003e40:	0800cbfc 	.word	0x0800cbfc
 8003e44:	0800cf88 	.word	0x0800cf88

08003e48 <sensor_iat_get>:

temperature_t sensor_iat_get()
{
 8003e48:	b508      	push	{r3, lr}
    if (sensor_iat == NULL)
 8003e4a:	4b10      	ldr	r3, [pc, #64]	@ (8003e8c <sensor_iat_get+0x44>)
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	b180      	cbz	r0, 8003e72 <sensor_iat_get+0x2a>
    {
        log_error("iat sensor is null");
        return SENSOR_IAT_FAIL_SAFE;
    }
    temperature_t temperature = thermistor_get_temp(sensor_iat);
 8003e50:	f004 feb4 	bl	8008bbc <thermistor_get_temp>
    if (!IS_IN_RANGE(temperature, FIRMWARE_LIMIT_MIN_TEMP, FIRMWARE_LIMIT_MAX_TEMP))
 8003e54:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003e90 <sensor_iat_get+0x48>
 8003e58:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e60:	db0d      	blt.n	8003e7e <sensor_iat_get+0x36>
 8003e62:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003e94 <sensor_iat_get+0x4c>
 8003e66:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6e:	d806      	bhi.n	8003e7e <sensor_iat_get+0x36>
    {
        log_error("iat sensor out of range!");
        return SENSOR_IAT_FAIL_SAFE;
    }
    return temperature;
}
 8003e70:	bd08      	pop	{r3, pc}
        log_error("iat sensor is null");
 8003e72:	4809      	ldr	r0, [pc, #36]	@ (8003e98 <sensor_iat_get+0x50>)
 8003e74:	f7fe fa06 	bl	8002284 <log_error>
        return SENSOR_IAT_FAIL_SAFE;
 8003e78:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003e9c <sensor_iat_get+0x54>
 8003e7c:	e7f8      	b.n	8003e70 <sensor_iat_get+0x28>
        log_error("iat sensor out of range!");
 8003e7e:	4808      	ldr	r0, [pc, #32]	@ (8003ea0 <sensor_iat_get+0x58>)
 8003e80:	f7fe fa00 	bl	8002284 <log_error>
        return SENSOR_IAT_FAIL_SAFE;
 8003e84:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8003e9c <sensor_iat_get+0x54>
 8003e88:	e7f2      	b.n	8003e70 <sensor_iat_get+0x28>
 8003e8a:	bf00      	nop
 8003e8c:	20005f04 	.word	0x20005f04
 8003e90:	c2480000 	.word	0xc2480000
 8003e94:	43160000 	.word	0x43160000
 8003e98:	0800cfa8 	.word	0x0800cfa8
 8003e9c:	42200000 	.word	0x42200000
 8003ea0:	0800cfbc 	.word	0x0800cfbc

08003ea4 <sensor_clt_init>:

void sensor_clt_init(thermistor_t *sensor, sensor_clt_type_t type)
{
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	b08a      	sub	sp, #40	@ 0x28
    if (sensor == NULL)
 8003ea8:	b1f8      	cbz	r0, 8003eea <sensor_clt_init+0x46>
 8003eaa:	4604      	mov	r4, r0
    {
        log_error("clt sensor is null");
        return;
    }
    switch (type)
 8003eac:	b309      	cbz	r1, 8003ef2 <sensor_clt_init+0x4e>
 8003eae:	2901      	cmp	r1, #1
 8003eb0:	d13c      	bne.n	8003f2c <sensor_clt_init+0x88>
    {
    /* Actually make this a proper thing */
    case SENSOR_CLT_TYPE_NISSAN:
        resistor_init(&sensor->resistor, 10000, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_CLT_PIN);
 8003eb2:	2207      	movs	r2, #7
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8003f34 <sensor_clt_init+0x90>
 8003eba:	f7ff fe2f 	bl	8003b1c <resistor_init>
        thermistor_conf_t nissan_clt_conf =
 8003ebe:	ad04      	add	r5, sp, #16
 8003ec0:	4e1d      	ldr	r6, [pc, #116]	@ (8003f38 <sensor_clt_init+0x94>)
 8003ec2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ec6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003eca:	e885 0003 	stmia.w	r5, {r0, r1}
            .resistance_3 = 230.0f,
            .tempC_1 = -20.0f,
            .tempC_2 = 25.0f,
            .tempC_3 = 90.0f
        };
        thermistor_init(sensor, nissan_clt_conf);
 8003ece:	ab0a      	add	r3, sp, #40	@ 0x28
 8003ed0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003ed4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003ed8:	ab04      	add	r3, sp, #16
 8003eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003edc:	4620      	mov	r0, r4
 8003ede:	f004 fdf9 	bl	8008ad4 <thermistor_init>
        sensor_clt = sensor;
 8003ee2:	4b16      	ldr	r3, [pc, #88]	@ (8003f3c <sensor_clt_init+0x98>)
 8003ee4:	601c      	str	r4, [r3, #0]
        break;
    default:
        log_error("clt sensor type not configured!");
        break;
    }
}
 8003ee6:	b00a      	add	sp, #40	@ 0x28
 8003ee8:	bd70      	pop	{r4, r5, r6, pc}
        log_error("clt sensor is null");
 8003eea:	4815      	ldr	r0, [pc, #84]	@ (8003f40 <sensor_clt_init+0x9c>)
 8003eec:	f7fe f9ca 	bl	8002284 <log_error>
        return;
 8003ef0:	e7f9      	b.n	8003ee6 <sensor_clt_init+0x42>
        resistor_init(&sensor->resistor, 4700, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_CLT_PIN);
 8003ef2:	2207      	movs	r2, #7
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8003f44 <sensor_clt_init+0xa0>
 8003efa:	f7ff fe0f 	bl	8003b1c <resistor_init>
        thermistor_conf_t genric_5k =
 8003efe:	f10d 0c10 	add.w	ip, sp, #16
 8003f02:	4d11      	ldr	r5, [pc, #68]	@ (8003f48 <sensor_clt_init+0xa4>)
 8003f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003f0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003f0e:	e88c 0003 	stmia.w	ip, {r0, r1}
        thermistor_init(sensor, genric_5k);
 8003f12:	ab0a      	add	r3, sp, #40	@ 0x28
 8003f14:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003f18:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003f1c:	ab04      	add	r3, sp, #16
 8003f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f20:	4620      	mov	r0, r4
 8003f22:	f004 fdd7 	bl	8008ad4 <thermistor_init>
        sensor_clt = sensor;
 8003f26:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <sensor_clt_init+0x98>)
 8003f28:	601c      	str	r4, [r3, #0]
        break;
 8003f2a:	e7dc      	b.n	8003ee6 <sensor_clt_init+0x42>
        log_error("clt sensor type not configured!");
 8003f2c:	4807      	ldr	r0, [pc, #28]	@ (8003f4c <sensor_clt_init+0xa8>)
 8003f2e:	f7fe f9a9 	bl	8002284 <log_error>
        break;
 8003f32:	e7d8      	b.n	8003ee6 <sensor_clt_init+0x42>
 8003f34:	461c4000 	.word	0x461c4000
 8003f38:	0800cc14 	.word	0x0800cc14
 8003f3c:	20005f00 	.word	0x20005f00
 8003f40:	0800cfd8 	.word	0x0800cfd8
 8003f44:	4592e000 	.word	0x4592e000
 8003f48:	0800cbfc 	.word	0x0800cbfc
 8003f4c:	0800cfec 	.word	0x0800cfec

08003f50 <sensor_clt_get>:

temperature_t sensor_clt_get()
{
 8003f50:	b508      	push	{r3, lr}
    if (sensor_clt == NULL)
 8003f52:	4b10      	ldr	r3, [pc, #64]	@ (8003f94 <sensor_clt_get+0x44>)
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	b180      	cbz	r0, 8003f7a <sensor_clt_get+0x2a>
    {
        log_error("clt sensor is null");
        return SENSOR_CLT_FAIL_SAFE;
    }
    temperature_t temperature = thermistor_get_temp(sensor_clt);
 8003f58:	f004 fe30 	bl	8008bbc <thermistor_get_temp>
    if (!IS_IN_RANGE(temperature, FIRMWARE_LIMIT_MIN_TEMP, FIRMWARE_LIMIT_MAX_TEMP))
 8003f5c:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003f98 <sensor_clt_get+0x48>
 8003f60:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f68:	db0d      	blt.n	8003f86 <sensor_clt_get+0x36>
 8003f6a:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003f9c <sensor_clt_get+0x4c>
 8003f6e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f76:	d806      	bhi.n	8003f86 <sensor_clt_get+0x36>
    {
        log_error("clt sensor out of range!");
        return SENSOR_CLT_FAIL_SAFE;
    }
    return temperature;
}
 8003f78:	bd08      	pop	{r3, pc}
        log_error("clt sensor is null");
 8003f7a:	4809      	ldr	r0, [pc, #36]	@ (8003fa0 <sensor_clt_get+0x50>)
 8003f7c:	f7fe f982 	bl	8002284 <log_error>
        return SENSOR_CLT_FAIL_SAFE;
 8003f80:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8003f84:	e7f8      	b.n	8003f78 <sensor_clt_get+0x28>
        log_error("clt sensor out of range!");
 8003f86:	4807      	ldr	r0, [pc, #28]	@ (8003fa4 <sensor_clt_get+0x54>)
 8003f88:	f7fe f97c 	bl	8002284 <log_error>
        return SENSOR_CLT_FAIL_SAFE;
 8003f8c:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8003f90:	e7f2      	b.n	8003f78 <sensor_clt_get+0x28>
 8003f92:	bf00      	nop
 8003f94:	20005f00 	.word	0x20005f00
 8003f98:	c2480000 	.word	0xc2480000
 8003f9c:	43160000 	.word	0x43160000
 8003fa0:	0800cfd8 	.word	0x0800cfd8
 8003fa4:	0800d00c 	.word	0x0800d00c

08003fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fa8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003faa:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd8 <HAL_Init+0x30>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fba:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fc2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fc4:	2003      	movs	r0, #3
 8003fc6:	f000 fbff 	bl	80047c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fca:	200f      	movs	r0, #15
 8003fcc:	f003 f936 	bl	800723c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fd0:	f001 f9fc 	bl	80053cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	bd08      	pop	{r3, pc}
 8003fd8:	40023c00 	.word	0x40023c00

08003fdc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003fdc:	4a03      	ldr	r2, [pc, #12]	@ (8003fec <HAL_IncTick+0x10>)
 8003fde:	6811      	ldr	r1, [r2, #0]
 8003fe0:	4b03      	ldr	r3, [pc, #12]	@ (8003ff0 <HAL_IncTick+0x14>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	440b      	add	r3, r1
 8003fe6:	6013      	str	r3, [r2, #0]
}
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20005f0c 	.word	0x20005f0c
 8003ff0:	20000068 	.word	0x20000068

08003ff4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003ff4:	4b01      	ldr	r3, [pc, #4]	@ (8003ffc <HAL_GetTick+0x8>)
 8003ff6:	6818      	ldr	r0, [r3, #0]
}
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20005f0c 	.word	0x20005f0c

08004000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004004:	f7ff fff6 	bl	8003ff4 <HAL_GetTick>
 8004008:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800400a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800400e:	d002      	beq.n	8004016 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004010:	4b04      	ldr	r3, [pc, #16]	@ (8004024 <HAL_Delay+0x24>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004016:	f7ff ffed 	bl	8003ff4 <HAL_GetTick>
 800401a:	1b40      	subs	r0, r0, r5
 800401c:	42a0      	cmp	r0, r4
 800401e:	d3fa      	bcc.n	8004016 <HAL_Delay+0x16>
  {
  }
}
 8004020:	bd38      	pop	{r3, r4, r5, pc}
 8004022:	bf00      	nop
 8004024:	20000068 	.word	0x20000068

08004028 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004028:	4b4a      	ldr	r3, [pc, #296]	@ (8004154 <ADC_Init+0x12c>)
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004030:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	6841      	ldr	r1, [r0, #4]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800403a:	6802      	ldr	r2, [r0, #0]
 800403c:	6853      	ldr	r3, [r2, #4]
 800403e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004042:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004044:	6802      	ldr	r2, [r0, #0]
 8004046:	6853      	ldr	r3, [r2, #4]
 8004048:	6901      	ldr	r1, [r0, #16]
 800404a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800404e:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004050:	6802      	ldr	r2, [r0, #0]
 8004052:	6853      	ldr	r3, [r2, #4]
 8004054:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8004058:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800405a:	6802      	ldr	r2, [r0, #0]
 800405c:	6853      	ldr	r3, [r2, #4]
 800405e:	6881      	ldr	r1, [r0, #8]
 8004060:	430b      	orrs	r3, r1
 8004062:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004064:	6802      	ldr	r2, [r0, #0]
 8004066:	6893      	ldr	r3, [r2, #8]
 8004068:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800406c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800406e:	6802      	ldr	r2, [r0, #0]
 8004070:	6893      	ldr	r3, [r2, #8]
 8004072:	68c1      	ldr	r1, [r0, #12]
 8004074:	430b      	orrs	r3, r1
 8004076:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004078:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800407a:	4b37      	ldr	r3, [pc, #220]	@ (8004158 <ADC_Init+0x130>)
 800407c:	429a      	cmp	r2, r3
 800407e:	d057      	beq.n	8004130 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004080:	6802      	ldr	r2, [r0, #0]
 8004082:	6893      	ldr	r3, [r2, #8]
 8004084:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8004088:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800408a:	6802      	ldr	r2, [r0, #0]
 800408c:	6893      	ldr	r3, [r2, #8]
 800408e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004090:	430b      	orrs	r3, r1
 8004092:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004094:	6802      	ldr	r2, [r0, #0]
 8004096:	6893      	ldr	r3, [r2, #8]
 8004098:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800409c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800409e:	6802      	ldr	r2, [r0, #0]
 80040a0:	6893      	ldr	r3, [r2, #8]
 80040a2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040a8:	6802      	ldr	r2, [r0, #0]
 80040aa:	6893      	ldr	r3, [r2, #8]
 80040ac:	f023 0302 	bic.w	r3, r3, #2
 80040b0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040b2:	6802      	ldr	r2, [r0, #0]
 80040b4:	6893      	ldr	r3, [r2, #8]
 80040b6:	7e01      	ldrb	r1, [r0, #24]
 80040b8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80040bc:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80040be:	f890 3020 	ldrb.w	r3, [r0, #32]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d03f      	beq.n	8004146 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040c6:	6802      	ldr	r2, [r0, #0]
 80040c8:	6853      	ldr	r3, [r2, #4]
 80040ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80040ce:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040d0:	6802      	ldr	r2, [r0, #0]
 80040d2:	6853      	ldr	r3, [r2, #4]
 80040d4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80040d8:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040da:	6801      	ldr	r1, [r0, #0]
 80040dc:	684b      	ldr	r3, [r1, #4]
 80040de:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80040e0:	3a01      	subs	r2, #1
 80040e2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80040e6:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040e8:	6802      	ldr	r2, [r0, #0]
 80040ea:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80040ec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80040f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040f2:	6801      	ldr	r1, [r0, #0]
 80040f4:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80040f6:	69c2      	ldr	r2, [r0, #28]
 80040f8:	3a01      	subs	r2, #1
 80040fa:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80040fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004100:	6802      	ldr	r2, [r0, #0]
 8004102:	6893      	ldr	r3, [r2, #8]
 8004104:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004108:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800410a:	6802      	ldr	r2, [r0, #0]
 800410c:	6893      	ldr	r3, [r2, #8]
 800410e:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8004112:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8004116:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004118:	6802      	ldr	r2, [r0, #0]
 800411a:	6893      	ldr	r3, [r2, #8]
 800411c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004120:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004122:	6802      	ldr	r2, [r0, #0]
 8004124:	6893      	ldr	r3, [r2, #8]
 8004126:	6941      	ldr	r1, [r0, #20]
 8004128:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800412c:	6093      	str	r3, [r2, #8]
}
 800412e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004130:	6802      	ldr	r2, [r0, #0]
 8004132:	6893      	ldr	r3, [r2, #8]
 8004134:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8004138:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800413a:	6802      	ldr	r2, [r0, #0]
 800413c:	6893      	ldr	r3, [r2, #8]
 800413e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8004142:	6093      	str	r3, [r2, #8]
 8004144:	e7b0      	b.n	80040a8 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004146:	6802      	ldr	r2, [r0, #0]
 8004148:	6853      	ldr	r3, [r2, #4]
 800414a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800414e:	6053      	str	r3, [r2, #4]
 8004150:	e7ca      	b.n	80040e8 <ADC_Init+0xc0>
 8004152:	bf00      	nop
 8004154:	40012300 	.word	0x40012300
 8004158:	0f000001 	.word	0x0f000001

0800415c <HAL_ADC_Init>:
  if (hadc == NULL)
 800415c:	b338      	cbz	r0, 80041ae <HAL_ADC_Init+0x52>
{
 800415e:	b510      	push	{r4, lr}
 8004160:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004162:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004164:	b143      	cbz	r3, 8004178 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004166:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004168:	f013 0f10 	tst.w	r3, #16
 800416c:	d00b      	beq.n	8004186 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800416e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8004170:	2300      	movs	r3, #0
 8004172:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004176:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8004178:	f7fc fdae 	bl	8000cd8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800417c:	2300      	movs	r3, #0
 800417e:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8004180:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8004184:	e7ef      	b.n	8004166 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8004186:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004188:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800418c:	f023 0302 	bic.w	r3, r3, #2
 8004190:	f043 0302 	orr.w	r3, r3, #2
 8004194:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8004196:	4620      	mov	r0, r4
 8004198:	f7ff ff46 	bl	8004028 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 800419c:	2000      	movs	r0, #0
 800419e:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80041a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80041a2:	f023 0303 	bic.w	r3, r3, #3
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	6423      	str	r3, [r4, #64]	@ 0x40
 80041ac:	e7e0      	b.n	8004170 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80041ae:	2001      	movs	r0, #1
}
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_ADC_Start_DMA>:
{
 80041b4:	b510      	push	{r4, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80041ba:	2200      	movs	r2, #0
 80041bc:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80041be:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80041c2:	2a01      	cmp	r2, #1
 80041c4:	f000 8094 	beq.w	80042f0 <HAL_ADC_Start_DMA+0x13c>
 80041c8:	4604      	mov	r4, r0
 80041ca:	2201      	movs	r2, #1
 80041cc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80041d0:	6802      	ldr	r2, [r0, #0]
 80041d2:	6890      	ldr	r0, [r2, #8]
 80041d4:	f010 0f01 	tst.w	r0, #1
 80041d8:	d113      	bne.n	8004202 <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 80041da:	6890      	ldr	r0, [r2, #8]
 80041dc:	f040 0001 	orr.w	r0, r0, #1
 80041e0:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041e2:	4a46      	ldr	r2, [pc, #280]	@ (80042fc <HAL_ADC_Start_DMA+0x148>)
 80041e4:	6810      	ldr	r0, [r2, #0]
 80041e6:	4a46      	ldr	r2, [pc, #280]	@ (8004300 <HAL_ADC_Start_DMA+0x14c>)
 80041e8:	fba2 2000 	umull	r2, r0, r2, r0
 80041ec:	0c80      	lsrs	r0, r0, #18
 80041ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80041f2:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 80041f4:	e002      	b.n	80041fc <HAL_ADC_Start_DMA+0x48>
      counter--;
 80041f6:	9801      	ldr	r0, [sp, #4]
 80041f8:	3801      	subs	r0, #1
 80041fa:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 80041fc:	9801      	ldr	r0, [sp, #4]
 80041fe:	2800      	cmp	r0, #0
 8004200:	d1f9      	bne.n	80041f6 <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004202:	6822      	ldr	r2, [r4, #0]
 8004204:	6890      	ldr	r0, [r2, #8]
 8004206:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800420a:	d003      	beq.n	8004214 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800420c:	6890      	ldr	r0, [r2, #8]
 800420e:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8004212:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004214:	6822      	ldr	r2, [r4, #0]
 8004216:	6890      	ldr	r0, [r2, #8]
 8004218:	f010 0f01 	tst.w	r0, #1
 800421c:	d05d      	beq.n	80042da <HAL_ADC_Start_DMA+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 800421e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004220:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8004224:	f020 0001 	bic.w	r0, r0, #1
 8004228:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 800422c:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800422e:	6852      	ldr	r2, [r2, #4]
 8004230:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8004234:	d005      	beq.n	8004242 <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004236:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004238:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800423c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004240:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004242:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004244:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8004248:	d034      	beq.n	80042b4 <HAL_ADC_Start_DMA+0x100>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800424a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800424c:	f022 0206 	bic.w	r2, r2, #6
 8004250:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8004252:	2200      	movs	r2, #0
 8004254:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004258:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800425a:	482a      	ldr	r0, [pc, #168]	@ (8004304 <HAL_ADC_Start_DMA+0x150>)
 800425c:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800425e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004260:	4829      	ldr	r0, [pc, #164]	@ (8004308 <HAL_ADC_Start_DMA+0x154>)
 8004262:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004264:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004266:	4829      	ldr	r0, [pc, #164]	@ (800430c <HAL_ADC_Start_DMA+0x158>)
 8004268:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8004270:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004272:	6820      	ldr	r0, [r4, #0]
 8004274:	6842      	ldr	r2, [r0, #4]
 8004276:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800427a:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800427c:	6820      	ldr	r0, [r4, #0]
 800427e:	6882      	ldr	r2, [r0, #8]
 8004280:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004284:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004286:	6820      	ldr	r0, [r4, #0]
 8004288:	460a      	mov	r2, r1
 800428a:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 800428e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004290:	f000 fbb2 	bl	80049f8 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004294:	4b1e      	ldr	r3, [pc, #120]	@ (8004310 <HAL_ADC_Start_DMA+0x15c>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f013 0f1f 	tst.w	r3, #31
 800429c:	d10d      	bne.n	80042ba <HAL_ADC_Start_DMA+0x106>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80042a6:	d125      	bne.n	80042f4 <HAL_ADC_Start_DMA+0x140>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80042ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042b0:	2000      	movs	r0, #0
 80042b2:	e01b      	b.n	80042ec <HAL_ADC_Start_DMA+0x138>
      ADC_CLEAR_ERRORCODE(hadc);
 80042b4:	2200      	movs	r2, #0
 80042b6:	6462      	str	r2, [r4, #68]	@ 0x44
 80042b8:	e7cb      	b.n	8004252 <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	4a15      	ldr	r2, [pc, #84]	@ (8004314 <HAL_ADC_Start_DMA+0x160>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d001      	beq.n	80042c6 <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 80042c2:	2000      	movs	r0, #0
 80042c4:	e012      	b.n	80042ec <HAL_ADC_Start_DMA+0x138>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80042cc:	d114      	bne.n	80042f8 <HAL_ADC_Start_DMA+0x144>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80042d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042d6:	2000      	movs	r0, #0
 80042d8:	e008      	b.n	80042ec <HAL_ADC_Start_DMA+0x138>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80042dc:	f043 0310 	orr.w	r3, r3, #16
 80042e0:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042e2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 80042ea:	2000      	movs	r0, #0
}
 80042ec:	b002      	add	sp, #8
 80042ee:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80042f0:	2002      	movs	r0, #2
 80042f2:	e7fb      	b.n	80042ec <HAL_ADC_Start_DMA+0x138>
  return HAL_OK;
 80042f4:	2000      	movs	r0, #0
 80042f6:	e7f9      	b.n	80042ec <HAL_ADC_Start_DMA+0x138>
 80042f8:	2000      	movs	r0, #0
 80042fa:	e7f7      	b.n	80042ec <HAL_ADC_Start_DMA+0x138>
 80042fc:	20000070 	.word	0x20000070
 8004300:	431bde83 	.word	0x431bde83
 8004304:	0800433d 	.word	0x0800433d
 8004308:	0800431b 	.word	0x0800431b
 800430c:	08004327 	.word	0x08004327
 8004310:	40012300 	.word	0x40012300
 8004314:	40012000 	.word	0x40012000

08004318 <HAL_ADC_ConvHalfCpltCallback>:
}
 8004318:	4770      	bx	lr

0800431a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800431a:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800431c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800431e:	f7ff fffb 	bl	8004318 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004322:	bd08      	pop	{r3, pc}

08004324 <HAL_ADC_ErrorCallback>:
}
 8004324:	4770      	bx	lr

08004326 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004326:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004328:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800432a:	2340      	movs	r3, #64	@ 0x40
 800432c:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800432e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004330:	f043 0304 	orr.w	r3, r3, #4
 8004334:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004336:	f7ff fff5 	bl	8004324 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800433a:	bd08      	pop	{r3, pc}

0800433c <ADC_DMAConvCplt>:
{
 800433c:	b508      	push	{r3, lr}
 800433e:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004340:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004342:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004344:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8004348:	d125      	bne.n	8004396 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800434a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800434c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004350:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004352:	6803      	ldr	r3, [r0, #0]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800435a:	d119      	bne.n	8004390 <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800435c:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800435e:	b9ba      	cbnz	r2, 8004390 <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004362:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8004366:	d003      	beq.n	8004370 <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004368:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800436a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800436e:	d10f      	bne.n	8004390 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	f022 0220 	bic.w	r2, r2, #32
 8004376:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004378:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800437a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800437e:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004380:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004382:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8004386:	d103      	bne.n	8004390 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004388:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8004390:	f7fc fd1a 	bl	8000dc8 <HAL_ADC_ConvCpltCallback>
}
 8004394:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004396:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004398:	f012 0f10 	tst.w	r2, #16
 800439c:	d104      	bne.n	80043a8 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800439e:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80043a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80043a2:	4618      	mov	r0, r3
 80043a4:	4790      	blx	r2
}
 80043a6:	e7f5      	b.n	8004394 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 80043a8:	f7ff ffbc 	bl	8004324 <HAL_ADC_ErrorCallback>
 80043ac:	e7f2      	b.n	8004394 <ADC_DMAConvCplt+0x58>
	...

080043b0 <HAL_ADC_ConfigChannel>:
{
 80043b0:	b430      	push	{r4, r5}
 80043b2:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80043b4:	2200      	movs	r2, #0
 80043b6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80043b8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80043bc:	2a01      	cmp	r2, #1
 80043be:	f000 80b6 	beq.w	800452e <HAL_ADC_ConfigChannel+0x17e>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2201      	movs	r2, #1
 80043c6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80043ca:	680a      	ldr	r2, [r1, #0]
 80043cc:	2a09      	cmp	r2, #9
 80043ce:	d940      	bls.n	8004452 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80043d0:	6804      	ldr	r4, [r0, #0]
 80043d2:	68e0      	ldr	r0, [r4, #12]
 80043d4:	b292      	uxth	r2, r2
 80043d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80043da:	3a1e      	subs	r2, #30
 80043dc:	f04f 0c07 	mov.w	ip, #7
 80043e0:	fa0c f202 	lsl.w	r2, ip, r2
 80043e4:	ea20 0202 	bic.w	r2, r0, r2
 80043e8:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043ea:	681c      	ldr	r4, [r3, #0]
 80043ec:	68e0      	ldr	r0, [r4, #12]
 80043ee:	880a      	ldrh	r2, [r1, #0]
 80043f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80043f4:	3a1e      	subs	r2, #30
 80043f6:	688d      	ldr	r5, [r1, #8]
 80043f8:	fa05 f202 	lsl.w	r2, r5, r2
 80043fc:	4302      	orrs	r2, r0
 80043fe:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8004400:	684a      	ldr	r2, [r1, #4]
 8004402:	2a06      	cmp	r2, #6
 8004404:	d83c      	bhi.n	8004480 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004406:	681c      	ldr	r4, [r3, #0]
 8004408:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800440a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800440e:	3a05      	subs	r2, #5
 8004410:	f04f 0c1f 	mov.w	ip, #31
 8004414:	fa0c f202 	lsl.w	r2, ip, r2
 8004418:	ea20 0202 	bic.w	r2, r0, r2
 800441c:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800441e:	681c      	ldr	r4, [r3, #0]
 8004420:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8004422:	684a      	ldr	r2, [r1, #4]
 8004424:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004428:	3a05      	subs	r2, #5
 800442a:	f8b1 c000 	ldrh.w	ip, [r1]
 800442e:	fa0c f202 	lsl.w	r2, ip, r2
 8004432:	4302      	orrs	r2, r0
 8004434:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004436:	6818      	ldr	r0, [r3, #0]
 8004438:	4a3e      	ldr	r2, [pc, #248]	@ (8004534 <HAL_ADC_ConfigChannel+0x184>)
 800443a:	4290      	cmp	r0, r2
 800443c:	d050      	beq.n	80044e0 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	4a3c      	ldr	r2, [pc, #240]	@ (8004534 <HAL_ADC_ConfigChannel+0x184>)
 8004442:	4290      	cmp	r0, r2
 8004444:	d055      	beq.n	80044f2 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8004446:	2000      	movs	r0, #0
 8004448:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 800444c:	b002      	add	sp, #8
 800444e:	bc30      	pop	{r4, r5}
 8004450:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004452:	6804      	ldr	r4, [r0, #0]
 8004454:	6920      	ldr	r0, [r4, #16]
 8004456:	b292      	uxth	r2, r2
 8004458:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800445c:	f04f 0c07 	mov.w	ip, #7
 8004460:	fa0c f202 	lsl.w	r2, ip, r2
 8004464:	ea20 0202 	bic.w	r2, r0, r2
 8004468:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800446a:	681c      	ldr	r4, [r3, #0]
 800446c:	6920      	ldr	r0, [r4, #16]
 800446e:	880a      	ldrh	r2, [r1, #0]
 8004470:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004474:	688d      	ldr	r5, [r1, #8]
 8004476:	fa05 f202 	lsl.w	r2, r5, r2
 800447a:	4302      	orrs	r2, r0
 800447c:	6122      	str	r2, [r4, #16]
 800447e:	e7bf      	b.n	8004400 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8004480:	2a0c      	cmp	r2, #12
 8004482:	d816      	bhi.n	80044b2 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004484:	681d      	ldr	r5, [r3, #0]
 8004486:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8004488:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800448c:	3a23      	subs	r2, #35	@ 0x23
 800448e:	241f      	movs	r4, #31
 8004490:	fa04 f202 	lsl.w	r2, r4, r2
 8004494:	ea20 0202 	bic.w	r2, r0, r2
 8004498:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800449a:	681d      	ldr	r5, [r3, #0]
 800449c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800449e:	684a      	ldr	r2, [r1, #4]
 80044a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80044a4:	3a23      	subs	r2, #35	@ 0x23
 80044a6:	880c      	ldrh	r4, [r1, #0]
 80044a8:	fa04 f202 	lsl.w	r2, r4, r2
 80044ac:	4302      	orrs	r2, r0
 80044ae:	632a      	str	r2, [r5, #48]	@ 0x30
 80044b0:	e7c1      	b.n	8004436 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044b2:	681d      	ldr	r5, [r3, #0]
 80044b4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80044b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80044ba:	3a41      	subs	r2, #65	@ 0x41
 80044bc:	241f      	movs	r4, #31
 80044be:	fa04 f202 	lsl.w	r2, r4, r2
 80044c2:	ea20 0202 	bic.w	r2, r0, r2
 80044c6:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044c8:	681d      	ldr	r5, [r3, #0]
 80044ca:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80044cc:	684a      	ldr	r2, [r1, #4]
 80044ce:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80044d2:	3a41      	subs	r2, #65	@ 0x41
 80044d4:	880c      	ldrh	r4, [r1, #0]
 80044d6:	fa04 f202 	lsl.w	r2, r4, r2
 80044da:	4302      	orrs	r2, r0
 80044dc:	62ea      	str	r2, [r5, #44]	@ 0x2c
 80044de:	e7aa      	b.n	8004436 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044e0:	680a      	ldr	r2, [r1, #0]
 80044e2:	2a12      	cmp	r2, #18
 80044e4:	d1ab      	bne.n	800443e <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044e6:	4814      	ldr	r0, [pc, #80]	@ (8004538 <HAL_ADC_ConfigChannel+0x188>)
 80044e8:	6842      	ldr	r2, [r0, #4]
 80044ea:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80044ee:	6042      	str	r2, [r0, #4]
 80044f0:	e7a5      	b.n	800443e <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044f2:	680a      	ldr	r2, [r1, #0]
 80044f4:	3a10      	subs	r2, #16
 80044f6:	2a01      	cmp	r2, #1
 80044f8:	d8a5      	bhi.n	8004446 <HAL_ADC_ConfigChannel+0x96>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044fa:	480f      	ldr	r0, [pc, #60]	@ (8004538 <HAL_ADC_ConfigChannel+0x188>)
 80044fc:	6842      	ldr	r2, [r0, #4]
 80044fe:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004502:	6042      	str	r2, [r0, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004504:	680a      	ldr	r2, [r1, #0]
 8004506:	2a10      	cmp	r2, #16
 8004508:	d19d      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800450a:	4a0c      	ldr	r2, [pc, #48]	@ (800453c <HAL_ADC_ConfigChannel+0x18c>)
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	490c      	ldr	r1, [pc, #48]	@ (8004540 <HAL_ADC_ConfigChannel+0x190>)
 8004510:	fba1 1202 	umull	r1, r2, r1, r2
 8004514:	0c92      	lsrs	r2, r2, #18
 8004516:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800451a:	0052      	lsls	r2, r2, #1
 800451c:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 800451e:	e002      	b.n	8004526 <HAL_ADC_ConfigChannel+0x176>
        counter--;
 8004520:	9a01      	ldr	r2, [sp, #4]
 8004522:	3a01      	subs	r2, #1
 8004524:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8004526:	9a01      	ldr	r2, [sp, #4]
 8004528:	2a00      	cmp	r2, #0
 800452a:	d1f9      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x170>
 800452c:	e78b      	b.n	8004446 <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 800452e:	2002      	movs	r0, #2
 8004530:	e78c      	b.n	800444c <HAL_ADC_ConfigChannel+0x9c>
 8004532:	bf00      	nop
 8004534:	40012000 	.word	0x40012000
 8004538:	40012300 	.word	0x40012300
 800453c:	20000070 	.word	0x20000070
 8004540:	431bde83 	.word	0x431bde83

08004544 <HAL_ADCEx_InjectedConfigChannel>:
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004544:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004548:	2a01      	cmp	r2, #1
 800454a:	f000 80f2 	beq.w	8004732 <HAL_ADCEx_InjectedConfigChannel+0x1ee>
{
 800454e:	b430      	push	{r4, r5}
 8004550:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004552:	2201      	movs	r2, #1
 8004554:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004558:	680a      	ldr	r2, [r1, #0]
 800455a:	2a09      	cmp	r2, #9
 800455c:	f240 8089 	bls.w	8004672 <HAL_ADCEx_InjectedConfigChannel+0x12e>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004560:	6805      	ldr	r5, [r0, #0]
 8004562:	68e8      	ldr	r0, [r5, #12]
 8004564:	b292      	uxth	r2, r2
 8004566:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800456a:	3a1e      	subs	r2, #30
 800456c:	2407      	movs	r4, #7
 800456e:	fa04 f202 	lsl.w	r2, r4, r2
 8004572:	ea20 0202 	bic.w	r2, r0, r2
 8004576:	60ea      	str	r2, [r5, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004578:	681d      	ldr	r5, [r3, #0]
 800457a:	68e8      	ldr	r0, [r5, #12]
 800457c:	688c      	ldr	r4, [r1, #8]
 800457e:	880a      	ldrh	r2, [r1, #0]
 8004580:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004584:	3a1e      	subs	r2, #30
 8004586:	4094      	lsls	r4, r2
 8004588:	4320      	orrs	r0, r4
 800458a:	60e8      	str	r0, [r5, #12]
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8004590:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004594:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004596:	681c      	ldr	r4, [r3, #0]
 8004598:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800459a:	6908      	ldr	r0, [r1, #16]
 800459c:	3801      	subs	r0, #1
 800459e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 80045a2:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 80045a4:	681c      	ldr	r4, [r3, #0]
 80045a6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80045a8:	684a      	ldr	r2, [r1, #4]
 80045aa:	690d      	ldr	r5, [r1, #16]
 80045ac:	1b52      	subs	r2, r2, r5
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	3203      	adds	r2, #3
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80045b8:	f04f 0c1f 	mov.w	ip, #31
 80045bc:	fa0c f202 	lsl.w	r2, ip, r2
 80045c0:	ea20 0202 	bic.w	r2, r0, r2
 80045c4:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 80045c6:	681c      	ldr	r4, [r3, #0]
 80045c8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80045ca:	684a      	ldr	r2, [r1, #4]
 80045cc:	690d      	ldr	r5, [r1, #16]
 80045ce:	1b52      	subs	r2, r2, r5
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	3203      	adds	r2, #3
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80045da:	f8b1 c000 	ldrh.w	ip, [r1]
 80045de:	fa0c f202 	lsl.w	r2, ip, r2
 80045e2:	4302      	orrs	r2, r0
 80045e4:	63a2      	str	r2, [r4, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80045e6:	6988      	ldr	r0, [r1, #24]
 80045e8:	4a53      	ldr	r2, [pc, #332]	@ (8004738 <HAL_ADCEx_InjectedConfigChannel+0x1f4>)
 80045ea:	4290      	cmp	r0, r2
 80045ec:	d056      	beq.n	800469c <HAL_ADCEx_InjectedConfigChannel+0x158>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	6882      	ldr	r2, [r0, #8]
 80045f2:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80045f6:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	6882      	ldr	r2, [r0, #8]
 80045fc:	698c      	ldr	r4, [r1, #24]
 80045fe:	4322      	orrs	r2, r4
 8004600:	6082      	str	r2, [r0, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	6882      	ldr	r2, [r0, #8]
 8004606:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800460a:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	6882      	ldr	r2, [r0, #8]
 8004610:	69cc      	ldr	r4, [r1, #28]
 8004612:	4322      	orrs	r2, r4
 8004614:	6082      	str	r2, [r0, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004616:	7d4a      	ldrb	r2, [r1, #21]
 8004618:	2a00      	cmp	r2, #0
 800461a:	d04a      	beq.n	80046b2 <HAL_ADCEx_InjectedConfigChannel+0x16e>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	6842      	ldr	r2, [r0, #4]
 8004620:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004624:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004626:	7d0a      	ldrb	r2, [r1, #20]
 8004628:	2a00      	cmp	r2, #0
 800462a:	d048      	beq.n	80046be <HAL_ADCEx_InjectedConfigChannel+0x17a>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	6842      	ldr	r2, [r0, #4]
 8004630:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004634:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }

  switch (sConfigInjected->InjectedRank)
 8004636:	684a      	ldr	r2, [r1, #4]
 8004638:	2a02      	cmp	r2, #2
 800463a:	d046      	beq.n	80046ca <HAL_ADCEx_InjectedConfigChannel+0x186>
 800463c:	2a03      	cmp	r2, #3
 800463e:	d04f      	beq.n	80046e0 <HAL_ADCEx_InjectedConfigChannel+0x19c>
 8004640:	2a01      	cmp	r2, #1
 8004642:	d158      	bne.n	80046f6 <HAL_ADCEx_InjectedConfigChannel+0x1b2>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	6942      	ldr	r2, [r0, #20]
 8004648:	f36f 020b 	bfc	r2, #0, #12
 800464c:	6142      	str	r2, [r0, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800464e:	6818      	ldr	r0, [r3, #0]
 8004650:	6942      	ldr	r2, [r0, #20]
 8004652:	68cc      	ldr	r4, [r1, #12]
 8004654:	4322      	orrs	r2, r4
 8004656:	6142      	str	r2, [r0, #20]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	4a38      	ldr	r2, [pc, #224]	@ (800473c <HAL_ADCEx_InjectedConfigChannel+0x1f8>)
 800465c:	4290      	cmp	r0, r2
 800465e:	d055      	beq.n	800470c <HAL_ADCEx_InjectedConfigChannel+0x1c8>
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	4a36      	ldr	r2, [pc, #216]	@ (800473c <HAL_ADCEx_InjectedConfigChannel+0x1f8>)
 8004664:	4290      	cmp	r0, r2
 8004666:	d05a      	beq.n	800471e <HAL_ADCEx_InjectedConfigChannel+0x1da>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004668:	2000      	movs	r0, #0
 800466a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
}
 800466e:	bc30      	pop	{r4, r5}
 8004670:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004672:	6805      	ldr	r5, [r0, #0]
 8004674:	6928      	ldr	r0, [r5, #16]
 8004676:	b292      	uxth	r2, r2
 8004678:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800467c:	2407      	movs	r4, #7
 800467e:	fa04 f202 	lsl.w	r2, r4, r2
 8004682:	ea20 0202 	bic.w	r2, r0, r2
 8004686:	612a      	str	r2, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004688:	681d      	ldr	r5, [r3, #0]
 800468a:	6928      	ldr	r0, [r5, #16]
 800468c:	688c      	ldr	r4, [r1, #8]
 800468e:	880a      	ldrh	r2, [r1, #0]
 8004690:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004694:	4094      	lsls	r4, r2
 8004696:	4320      	orrs	r0, r4
 8004698:	6128      	str	r0, [r5, #16]
 800469a:	e777      	b.n	800458c <HAL_ADCEx_InjectedConfigChannel+0x48>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	6882      	ldr	r2, [r0, #8]
 80046a0:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80046a4:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	6882      	ldr	r2, [r0, #8]
 80046aa:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80046ae:	6082      	str	r2, [r0, #8]
 80046b0:	e7b1      	b.n	8004616 <HAL_ADCEx_InjectedConfigChannel+0xd2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	6842      	ldr	r2, [r0, #4]
 80046b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ba:	6042      	str	r2, [r0, #4]
 80046bc:	e7b3      	b.n	8004626 <HAL_ADCEx_InjectedConfigChannel+0xe2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	6842      	ldr	r2, [r0, #4]
 80046c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046c6:	6042      	str	r2, [r0, #4]
 80046c8:	e7b5      	b.n	8004636 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	6982      	ldr	r2, [r0, #24]
 80046ce:	f36f 020b 	bfc	r2, #0, #12
 80046d2:	6182      	str	r2, [r0, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	6982      	ldr	r2, [r0, #24]
 80046d8:	68cc      	ldr	r4, [r1, #12]
 80046da:	4322      	orrs	r2, r4
 80046dc:	6182      	str	r2, [r0, #24]
      break;
 80046de:	e7bb      	b.n	8004658 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	69c2      	ldr	r2, [r0, #28]
 80046e4:	f36f 020b 	bfc	r2, #0, #12
 80046e8:	61c2      	str	r2, [r0, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	69c2      	ldr	r2, [r0, #28]
 80046ee:	68cc      	ldr	r4, [r1, #12]
 80046f0:	4322      	orrs	r2, r4
 80046f2:	61c2      	str	r2, [r0, #28]
      break;
 80046f4:	e7b0      	b.n	8004658 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	6a02      	ldr	r2, [r0, #32]
 80046fa:	f36f 020b 	bfc	r2, #0, #12
 80046fe:	6202      	str	r2, [r0, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	6a02      	ldr	r2, [r0, #32]
 8004704:	68cc      	ldr	r4, [r1, #12]
 8004706:	4322      	orrs	r2, r4
 8004708:	6202      	str	r2, [r0, #32]
      break;
 800470a:	e7a5      	b.n	8004658 <HAL_ADCEx_InjectedConfigChannel+0x114>
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800470c:	680a      	ldr	r2, [r1, #0]
 800470e:	2a12      	cmp	r2, #18
 8004710:	d1a6      	bne.n	8004660 <HAL_ADCEx_InjectedConfigChannel+0x11c>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004712:	480b      	ldr	r0, [pc, #44]	@ (8004740 <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 8004714:	6842      	ldr	r2, [r0, #4]
 8004716:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800471a:	6042      	str	r2, [r0, #4]
 800471c:	e7a0      	b.n	8004660 <HAL_ADCEx_InjectedConfigChannel+0x11c>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800471e:	680a      	ldr	r2, [r1, #0]
 8004720:	3a10      	subs	r2, #16
 8004722:	2a01      	cmp	r2, #1
 8004724:	d8a0      	bhi.n	8004668 <HAL_ADCEx_InjectedConfigChannel+0x124>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004726:	4906      	ldr	r1, [pc, #24]	@ (8004740 <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 8004728:	684a      	ldr	r2, [r1, #4]
 800472a:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800472e:	604a      	str	r2, [r1, #4]
 8004730:	e79a      	b.n	8004668 <HAL_ADCEx_InjectedConfigChannel+0x124>
  __HAL_LOCK(hadc);
 8004732:	2002      	movs	r0, #2
}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	000f0001 	.word	0x000f0001
 800473c:	40012000 	.word	0x40012000
 8004740:	40012300 	.word	0x40012300

08004744 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004744:	2800      	cmp	r0, #0
 8004746:	db07      	blt.n	8004758 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004748:	f000 021f 	and.w	r2, r0, #31
 800474c:	0940      	lsrs	r0, r0, #5
 800474e:	2301      	movs	r3, #1
 8004750:	4093      	lsls	r3, r2
 8004752:	4a02      	ldr	r2, [pc, #8]	@ (800475c <__NVIC_EnableIRQ+0x18>)
 8004754:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	e000e100 	.word	0xe000e100

08004760 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8004760:	2800      	cmp	r0, #0
 8004762:	db08      	blt.n	8004776 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004764:	0109      	lsls	r1, r1, #4
 8004766:	b2c9      	uxtb	r1, r1
 8004768:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800476c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004770:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8004774:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004776:	f000 000f 	and.w	r0, r0, #15
 800477a:	0109      	lsls	r1, r1, #4
 800477c:	b2c9      	uxtb	r1, r1
 800477e:	4b01      	ldr	r3, [pc, #4]	@ (8004784 <__NVIC_SetPriority+0x24>)
 8004780:	5419      	strb	r1, [r3, r0]
  }
}
 8004782:	4770      	bx	lr
 8004784:	e000ed14 	.word	0xe000ed14

08004788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004788:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800478a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800478e:	f1c0 0c07 	rsb	ip, r0, #7
 8004792:	f1bc 0f04 	cmp.w	ip, #4
 8004796:	bf28      	it	cs
 8004798:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800479c:	1d03      	adds	r3, r0, #4
 800479e:	2b06      	cmp	r3, #6
 80047a0:	d90f      	bls.n	80047c2 <NVIC_EncodePriority+0x3a>
 80047a2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a4:	f04f 3eff 	mov.w	lr, #4294967295
 80047a8:	fa0e f00c 	lsl.w	r0, lr, ip
 80047ac:	ea21 0100 	bic.w	r1, r1, r0
 80047b0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047b2:	fa0e fe03 	lsl.w	lr, lr, r3
 80047b6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80047ba:	ea41 0002 	orr.w	r0, r1, r2
 80047be:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047c2:	2300      	movs	r3, #0
 80047c4:	e7ee      	b.n	80047a4 <NVIC_EncodePriority+0x1c>
	...

080047c8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047c8:	4a07      	ldr	r2, [pc, #28]	@ (80047e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80047ca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047cc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80047d0:	041b      	lsls	r3, r3, #16
 80047d2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047d4:	0200      	lsls	r0, r0, #8
 80047d6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047da:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80047dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80047e4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80047e6:	4770      	bx	lr
 80047e8:	e000ed00 	.word	0xe000ed00

080047ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047ec:	b510      	push	{r4, lr}
 80047ee:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047f0:	4b05      	ldr	r3, [pc, #20]	@ (8004808 <HAL_NVIC_SetPriority+0x1c>)
 80047f2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047f4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80047f8:	f7ff ffc6 	bl	8004788 <NVIC_EncodePriority>
 80047fc:	4601      	mov	r1, r0
 80047fe:	4620      	mov	r0, r4
 8004800:	f7ff ffae 	bl	8004760 <__NVIC_SetPriority>
}
 8004804:	bd10      	pop	{r4, pc}
 8004806:	bf00      	nop
 8004808:	e000ed00 	.word	0xe000ed00

0800480c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800480c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800480e:	f7ff ff99 	bl	8004744 <__NVIC_EnableIRQ>
}
 8004812:	bd08      	pop	{r3, pc}

08004814 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004814:	b158      	cbz	r0, 800482e <HAL_CRC_Init+0x1a>
{
 8004816:	b510      	push	{r4, lr}
 8004818:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800481a:	7943      	ldrb	r3, [r0, #5]
 800481c:	b11b      	cbz	r3, 8004826 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800481e:	2301      	movs	r3, #1
 8004820:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8004822:	2000      	movs	r0, #0
}
 8004824:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8004826:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8004828:	f7fd f990 	bl	8001b4c <HAL_CRC_MspInit>
 800482c:	e7f7      	b.n	800481e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 800482e:	2001      	movs	r0, #1
}
 8004830:	4770      	bx	lr

08004832 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004832:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004834:	6805      	ldr	r5, [r0, #0]
 8004836:	682c      	ldr	r4, [r5, #0]
 8004838:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 800483c:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800483e:	6804      	ldr	r4, [r0, #0]
 8004840:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004842:	6883      	ldr	r3, [r0, #8]
 8004844:	2b40      	cmp	r3, #64	@ 0x40
 8004846:	d005      	beq.n	8004854 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8004848:	6803      	ldr	r3, [r0, #0]
 800484a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800484c:	6803      	ldr	r3, [r0, #0]
 800484e:	60da      	str	r2, [r3, #12]
  }
}
 8004850:	bc30      	pop	{r4, r5}
 8004852:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8004854:	6803      	ldr	r3, [r0, #0]
 8004856:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8004858:	6803      	ldr	r3, [r0, #0]
 800485a:	60d9      	str	r1, [r3, #12]
 800485c:	e7f8      	b.n	8004850 <DMA_SetConfig+0x1e>
	...

08004860 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004860:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004862:	6803      	ldr	r3, [r0, #0]
 8004864:	b2d9      	uxtb	r1, r3
 8004866:	3910      	subs	r1, #16
 8004868:	4a0a      	ldr	r2, [pc, #40]	@ (8004894 <DMA_CalcBaseAndBitshift+0x34>)
 800486a:	fba2 4201 	umull	r4, r2, r2, r1
 800486e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004870:	4c09      	ldr	r4, [pc, #36]	@ (8004898 <DMA_CalcBaseAndBitshift+0x38>)
 8004872:	5ca2      	ldrb	r2, [r4, r2]
 8004874:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004876:	295f      	cmp	r1, #95	@ 0x5f
 8004878:	d907      	bls.n	800488a <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800487a:	f36f 0309 	bfc	r3, #0, #10
 800487e:	3304      	adds	r3, #4
 8004880:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8004882:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8004884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004888:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800488a:	f36f 0309 	bfc	r3, #0, #10
 800488e:	6583      	str	r3, [r0, #88]	@ 0x58
 8004890:	e7f7      	b.n	8004882 <DMA_CalcBaseAndBitshift+0x22>
 8004892:	bf00      	nop
 8004894:	aaaaaaab 	.word	0xaaaaaaab
 8004898:	0800d1dc 	.word	0x0800d1dc

0800489c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800489c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800489e:	6982      	ldr	r2, [r0, #24]
 80048a0:	b992      	cbnz	r2, 80048c8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d00a      	beq.n	80048bc <DMA_CheckFifoParam+0x20>
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d002      	beq.n	80048b0 <DMA_CheckFifoParam+0x14>
 80048aa:	b10b      	cbz	r3, 80048b0 <DMA_CheckFifoParam+0x14>
 80048ac:	2000      	movs	r0, #0
 80048ae:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048b0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80048b2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80048b6:	d128      	bne.n	800490a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80048b8:	2000      	movs	r0, #0
 80048ba:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048bc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80048be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048c2:	d024      	beq.n	800490e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80048c4:	2000      	movs	r0, #0
 80048c6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048c8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80048cc:	d009      	beq.n	80048e2 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d925      	bls.n	800491e <DMA_CheckFifoParam+0x82>
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d125      	bne.n	8004922 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048d6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80048d8:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80048dc:	d123      	bne.n	8004926 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80048de:	2000      	movs	r0, #0
 80048e0:	4770      	bx	lr
    switch (tmp)
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d803      	bhi.n	80048ee <DMA_CheckFifoParam+0x52>
 80048e6:	e8df f003 	tbb	[pc, r3]
 80048ea:	0414      	.short	0x0414
 80048ec:	0a14      	.short	0x0a14
 80048ee:	2000      	movs	r0, #0
 80048f0:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048f2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80048f4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80048f8:	d10d      	bne.n	8004916 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2000      	movs	r0, #0
 80048fc:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048fe:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004900:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004904:	d009      	beq.n	800491a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8004906:	2000      	movs	r0, #0
 8004908:	4770      	bx	lr
        status = HAL_ERROR;
 800490a:	2001      	movs	r0, #1
 800490c:	4770      	bx	lr
        status = HAL_ERROR;
 800490e:	2001      	movs	r0, #1
 8004910:	4770      	bx	lr
      status = HAL_ERROR;
 8004912:	2001      	movs	r0, #1
 8004914:	4770      	bx	lr
        status = HAL_ERROR;
 8004916:	2001      	movs	r0, #1
 8004918:	4770      	bx	lr
        status = HAL_ERROR;
 800491a:	2001      	movs	r0, #1
 800491c:	4770      	bx	lr
      status = HAL_ERROR;
 800491e:	2001      	movs	r0, #1
 8004920:	4770      	bx	lr
    switch (tmp)
 8004922:	2000      	movs	r0, #0
 8004924:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8004926:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8004928:	4770      	bx	lr
	...

0800492c <HAL_DMA_Init>:
{
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004930:	f7ff fb60 	bl	8003ff4 <HAL_GetTick>
  if(hdma == NULL)
 8004934:	2c00      	cmp	r4, #0
 8004936:	d05b      	beq.n	80049f0 <HAL_DMA_Init+0xc4>
 8004938:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800493a:	2302      	movs	r3, #2
 800493c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8004940:	2300      	movs	r3, #0
 8004942:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8004946:	6822      	ldr	r2, [r4, #0]
 8004948:	6813      	ldr	r3, [r2, #0]
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	f012 0f01 	tst.w	r2, #1
 8004958:	d00a      	beq.n	8004970 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800495a:	f7ff fb4b 	bl	8003ff4 <HAL_GetTick>
 800495e:	1b43      	subs	r3, r0, r5
 8004960:	2b05      	cmp	r3, #5
 8004962:	d9f5      	bls.n	8004950 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004964:	2320      	movs	r3, #32
 8004966:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004968:	2003      	movs	r0, #3
 800496a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800496e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8004970:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004972:	4920      	ldr	r1, [pc, #128]	@ (80049f4 <HAL_DMA_Init+0xc8>)
 8004974:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004976:	6862      	ldr	r2, [r4, #4]
 8004978:	68a0      	ldr	r0, [r4, #8]
 800497a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800497c:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800497e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004980:	6920      	ldr	r0, [r4, #16]
 8004982:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004984:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004986:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004988:	69a0      	ldr	r0, [r4, #24]
 800498a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800498c:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800498e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004990:	6a20      	ldr	r0, [r4, #32]
 8004992:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004994:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004996:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004998:	2904      	cmp	r1, #4
 800499a:	d01e      	beq.n	80049da <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 800499c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800499e:	6826      	ldr	r6, [r4, #0]
 80049a0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049a2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80049a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80049a8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d107      	bne.n	80049be <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80049ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80049b0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80049b4:	b11b      	cbz	r3, 80049be <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049b6:	4620      	mov	r0, r4
 80049b8:	f7ff ff70 	bl	800489c <DMA_CheckFifoParam>
 80049bc:	b990      	cbnz	r0, 80049e4 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80049be:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049c0:	4620      	mov	r0, r4
 80049c2:	f7ff ff4d 	bl	8004860 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049c6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80049c8:	233f      	movs	r3, #63	@ 0x3f
 80049ca:	4093      	lsls	r3, r2
 80049cc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ce:	2000      	movs	r0, #0
 80049d0:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80049d8:	e7c9      	b.n	800496e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80049dc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80049de:	4301      	orrs	r1, r0
 80049e0:	430a      	orrs	r2, r1
 80049e2:	e7db      	b.n	800499c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049e4:	2340      	movs	r3, #64	@ 0x40
 80049e6:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80049e8:	2001      	movs	r0, #1
 80049ea:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 80049ee:	e7be      	b.n	800496e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80049f0:	2001      	movs	r0, #1
 80049f2:	e7bc      	b.n	800496e <HAL_DMA_Init+0x42>
 80049f4:	f010803f 	.word	0xf010803f

080049f8 <HAL_DMA_Start_IT>:
{
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049fc:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 80049fe:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8004a02:	2801      	cmp	r0, #1
 8004a04:	d02a      	beq.n	8004a5c <HAL_DMA_Start_IT+0x64>
 8004a06:	2001      	movs	r0, #1
 8004a08:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a0c:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8004a10:	2801      	cmp	r0, #1
 8004a12:	d004      	beq.n	8004a1e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8004a14:	2300      	movs	r3, #0
 8004a16:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8004a1a:	2002      	movs	r0, #2
}
 8004a1c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a1e:	2002      	movs	r0, #2
 8004a20:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a24:	2000      	movs	r0, #0
 8004a26:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f7ff ff02 	bl	8004832 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a2e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004a30:	233f      	movs	r3, #63	@ 0x3f
 8004a32:	4093      	lsls	r3, r2
 8004a34:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a36:	6822      	ldr	r2, [r4, #0]
 8004a38:	6813      	ldr	r3, [r2, #0]
 8004a3a:	f043 0316 	orr.w	r3, r3, #22
 8004a3e:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8004a40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a42:	b123      	cbz	r3, 8004a4e <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a44:	6822      	ldr	r2, [r4, #0]
 8004a46:	6813      	ldr	r3, [r2, #0]
 8004a48:	f043 0308 	orr.w	r3, r3, #8
 8004a4c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8004a4e:	6822      	ldr	r2, [r4, #0]
 8004a50:	6813      	ldr	r3, [r2, #0]
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a58:	2000      	movs	r0, #0
 8004a5a:	e7df      	b.n	8004a1c <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8004a5c:	2002      	movs	r0, #2
 8004a5e:	e7dd      	b.n	8004a1c <HAL_DMA_Start_IT+0x24>

08004a60 <HAL_DMA_IRQHandler>:
{
 8004a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a62:	b083      	sub	sp, #12
 8004a64:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a6a:	4b72      	ldr	r3, [pc, #456]	@ (8004c34 <HAL_DMA_IRQHandler+0x1d4>)
 8004a6c:	681d      	ldr	r5, [r3, #0]
 8004a6e:	4b72      	ldr	r3, [pc, #456]	@ (8004c38 <HAL_DMA_IRQHandler+0x1d8>)
 8004a70:	fba3 3505 	umull	r3, r5, r3, r5
 8004a74:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a76:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8004a78:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a7a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8004a7c:	2308      	movs	r3, #8
 8004a7e:	4093      	lsls	r3, r2
 8004a80:	4233      	tst	r3, r6
 8004a82:	d010      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a84:	6803      	ldr	r3, [r0, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	f012 0f04 	tst.w	r2, #4
 8004a8c:	d00b      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	f022 0204 	bic.w	r2, r2, #4
 8004a94:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a96:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8004a98:	2308      	movs	r3, #8
 8004a9a:	4093      	lsls	r3, r2
 8004a9c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a9e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aa6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	4093      	lsls	r3, r2
 8004aac:	4233      	tst	r3, r6
 8004aae:	d009      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ab0:	6822      	ldr	r2, [r4, #0]
 8004ab2:	6952      	ldr	r2, [r2, #20]
 8004ab4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8004ab8:	d004      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004aba:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004abc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004abe:	f043 0302 	orr.w	r3, r3, #2
 8004ac2:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ac4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	4093      	lsls	r3, r2
 8004aca:	4233      	tst	r3, r6
 8004acc:	d009      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	f012 0f02 	tst.w	r2, #2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ad8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ada:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004adc:	f043 0304 	orr.w	r3, r3, #4
 8004ae0:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ae2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	4093      	lsls	r3, r2
 8004ae8:	4233      	tst	r3, r6
 8004aea:	d024      	beq.n	8004b36 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004aec:	6822      	ldr	r2, [r4, #0]
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	f012 0f08 	tst.w	r2, #8
 8004af4:	d01f      	beq.n	8004b36 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004af6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8004b00:	d00d      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8004b08:	d104      	bne.n	8004b14 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8004b0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b0c:	b19b      	cbz	r3, 8004b36 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8004b0e:	4620      	mov	r0, r4
 8004b10:	4798      	blx	r3
 8004b12:	e010      	b.n	8004b36 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b14:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004b16:	b173      	cbz	r3, 8004b36 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8004b18:	4620      	mov	r0, r4
 8004b1a:	4798      	blx	r3
 8004b1c:	e00b      	b.n	8004b36 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8004b24:	d103      	bne.n	8004b2e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	f022 0208 	bic.w	r2, r2, #8
 8004b2c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8004b2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b30:	b10b      	cbz	r3, 8004b36 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8004b32:	4620      	mov	r0, r4
 8004b34:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b36:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004b38:	2320      	movs	r3, #32
 8004b3a:	4093      	lsls	r3, r2
 8004b3c:	4233      	tst	r3, r6
 8004b3e:	d054      	beq.n	8004bea <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b40:	6822      	ldr	r2, [r4, #0]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	f012 0f10 	tst.w	r2, #16
 8004b48:	d04f      	beq.n	8004bea <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b4a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b4c:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8004b50:	2b05      	cmp	r3, #5
 8004b52:	d00e      	beq.n	8004b72 <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8004b5c:	d033      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8004b64:	d12a      	bne.n	8004bbc <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 8004b66:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d03e      	beq.n	8004bea <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	4798      	blx	r3
 8004b70:	e03b      	b.n	8004bea <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b72:	6822      	ldr	r2, [r4, #0]
 8004b74:	6813      	ldr	r3, [r2, #0]
 8004b76:	f023 0316 	bic.w	r3, r3, #22
 8004b7a:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b7c:	6822      	ldr	r2, [r4, #0]
 8004b7e:	6953      	ldr	r3, [r2, #20]
 8004b80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b84:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b88:	b1a3      	cbz	r3, 8004bb4 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	6813      	ldr	r3, [r2, #0]
 8004b8e:	f023 0308 	bic.w	r3, r3, #8
 8004b92:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b94:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004b96:	233f      	movs	r3, #63	@ 0x3f
 8004b98:	4093      	lsls	r3, r2
 8004b9a:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8004ba8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d03f      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8004bae:	4620      	mov	r0, r4
 8004bb0:	4798      	blx	r3
        return;
 8004bb2:	e03c      	b.n	8004c2e <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bb4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1e7      	bne.n	8004b8a <HAL_DMA_IRQHandler+0x12a>
 8004bba:	e7eb      	b.n	8004b94 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 8004bbc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004bbe:	b1a3      	cbz	r3, 8004bea <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	4798      	blx	r3
 8004bc4:	e011      	b.n	8004bea <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8004bcc:	d109      	bne.n	8004be2 <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	f022 0210 	bic.w	r2, r2, #16
 8004bd4:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8004be2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004be4:	b10b      	cbz	r3, 8004bea <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 8004be6:	4620      	mov	r0, r4
 8004be8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004bec:	b1fb      	cbz	r3, 8004c2e <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004bf0:	f013 0f01 	tst.w	r3, #1
 8004bf4:	d017      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bf6:	2305      	movs	r3, #5
 8004bf8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8004bfc:	6822      	ldr	r2, [r4, #0]
 8004bfe:	6813      	ldr	r3, [r2, #0]
 8004c00:	f023 0301 	bic.w	r3, r3, #1
 8004c04:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8004c06:	9b01      	ldr	r3, [sp, #4]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	42ab      	cmp	r3, r5
 8004c0e:	d804      	bhi.n	8004c1a <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f013 0f01 	tst.w	r3, #1
 8004c18:	d1f5      	bne.n	8004c06 <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8004c20:	2300      	movs	r3, #0
 8004c22:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8004c26:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004c28:	b10b      	cbz	r3, 8004c2e <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	4798      	blx	r3
}
 8004c2e:	b003      	add	sp, #12
 8004c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000070 	.word	0x20000070
 8004c38:	1b4e81b5 	.word	0x1b4e81b5

08004c3c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004c3c:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c3e:	490a      	ldr	r1, [pc, #40]	@ (8004c68 <FLASH_Program_DoubleWord+0x2c>)
 8004c40:	690c      	ldr	r4, [r1, #16]
 8004c42:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
 8004c46:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004c48:	690c      	ldr	r4, [r1, #16]
 8004c4a:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 8004c4e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c50:	690c      	ldr	r4, [r1, #16]
 8004c52:	f044 0401 	orr.w	r4, r4, #1
 8004c56:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8004c58:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004c5a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8004c5e:	6043      	str	r3, [r0, #4]
}
 8004c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40023c00 	.word	0x40023c00

08004c6c <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c6c:	4b07      	ldr	r3, [pc, #28]	@ (8004c8c <FLASH_Program_Word+0x20>)
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004c74:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004c76:	691a      	ldr	r2, [r3, #16]
 8004c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c7c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	f042 0201 	orr.w	r2, r2, #1
 8004c84:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t *)Address = Data;
 8004c86:	6001      	str	r1, [r0, #0]
}
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40023c00 	.word	0x40023c00

08004c90 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c90:	4b07      	ldr	r3, [pc, #28]	@ (8004cb0 <FLASH_Program_HalfWord+0x20>)
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004c98:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	f042 0201 	orr.w	r2, r2, #1
 8004ca8:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t *)Address = Data;
 8004caa:	8001      	strh	r1, [r0, #0]
}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40023c00 	.word	0x40023c00

08004cb4 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004cb4:	4b06      	ldr	r3, [pc, #24]	@ (8004cd0 <FLASH_Program_Byte+0x1c>)
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004cbc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t *)Address = Data;
 8004cca:	7001      	strb	r1, [r0, #0]
}
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40023c00 	.word	0x40023c00

08004cd4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004cd4:	4b27      	ldr	r3, [pc, #156]	@ (8004d74 <FLASH_SetErrorCode+0xa0>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f013 0f10 	tst.w	r3, #16
 8004cdc:	d007      	beq.n	8004cee <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004cde:	4a26      	ldr	r2, [pc, #152]	@ (8004d78 <FLASH_SetErrorCode+0xa4>)
 8004ce0:	69d3      	ldr	r3, [r2, #28]
 8004ce2:	f043 0310 	orr.w	r3, r3, #16
 8004ce6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004ce8:	4b22      	ldr	r3, [pc, #136]	@ (8004d74 <FLASH_SetErrorCode+0xa0>)
 8004cea:	2210      	movs	r2, #16
 8004cec:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004cee:	4b21      	ldr	r3, [pc, #132]	@ (8004d74 <FLASH_SetErrorCode+0xa0>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f013 0f20 	tst.w	r3, #32
 8004cf6:	d007      	beq.n	8004d08 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d78 <FLASH_SetErrorCode+0xa4>)
 8004cfa:	69d3      	ldr	r3, [r2, #28]
 8004cfc:	f043 0308 	orr.w	r3, r3, #8
 8004d00:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004d02:	4b1c      	ldr	r3, [pc, #112]	@ (8004d74 <FLASH_SetErrorCode+0xa0>)
 8004d04:	2220      	movs	r2, #32
 8004d06:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004d08:	4b1a      	ldr	r3, [pc, #104]	@ (8004d74 <FLASH_SetErrorCode+0xa0>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004d10:	d007      	beq.n	8004d22 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004d12:	4a19      	ldr	r2, [pc, #100]	@ (8004d78 <FLASH_SetErrorCode+0xa4>)
 8004d14:	69d3      	ldr	r3, [r2, #28]
 8004d16:	f043 0304 	orr.w	r3, r3, #4
 8004d1a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004d1c:	4b15      	ldr	r3, [pc, #84]	@ (8004d74 <FLASH_SetErrorCode+0xa0>)
 8004d1e:	2240      	movs	r2, #64	@ 0x40
 8004d20:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004d22:	4b14      	ldr	r3, [pc, #80]	@ (8004d74 <FLASH_SetErrorCode+0xa0>)
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d2a:	d007      	beq.n	8004d3c <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004d2c:	4a12      	ldr	r2, [pc, #72]	@ (8004d78 <FLASH_SetErrorCode+0xa4>)
 8004d2e:	69d3      	ldr	r3, [r2, #28]
 8004d30:	f043 0302 	orr.w	r3, r3, #2
 8004d34:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004d36:	4b0f      	ldr	r3, [pc, #60]	@ (8004d74 <FLASH_SetErrorCode+0xa0>)
 8004d38:	2280      	movs	r2, #128	@ 0x80
 8004d3a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d74 <FLASH_SetErrorCode+0xa0>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004d44:	d008      	beq.n	8004d58 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004d46:	4a0c      	ldr	r2, [pc, #48]	@ (8004d78 <FLASH_SetErrorCode+0xa4>)
 8004d48:	69d3      	ldr	r3, [r2, #28]
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004d50:	4b08      	ldr	r3, [pc, #32]	@ (8004d74 <FLASH_SetErrorCode+0xa0>)
 8004d52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d56:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004d58:	4b06      	ldr	r3, [pc, #24]	@ (8004d74 <FLASH_SetErrorCode+0xa0>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f013 0f02 	tst.w	r3, #2
 8004d60:	d007      	beq.n	8004d72 <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004d62:	4a05      	ldr	r2, [pc, #20]	@ (8004d78 <FLASH_SetErrorCode+0xa4>)
 8004d64:	69d3      	ldr	r3, [r2, #28]
 8004d66:	f043 0320 	orr.w	r3, r3, #32
 8004d6a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004d6c:	4b01      	ldr	r3, [pc, #4]	@ (8004d74 <FLASH_SetErrorCode+0xa0>)
 8004d6e:	2202      	movs	r2, #2
 8004d70:	60da      	str	r2, [r3, #12]
  }
}
 8004d72:	4770      	bx	lr
 8004d74:	40023c00 	.word	0x40023c00
 8004d78:	20005f10 	.word	0x20005f10

08004d7c <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004d7c:	4b09      	ldr	r3, [pc, #36]	@ (8004da4 <HAL_FLASH_Unlock+0x28>)
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	db01      	blt.n	8004d88 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8004d84:	2000      	movs	r0, #0
 8004d86:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004d88:	4b06      	ldr	r3, [pc, #24]	@ (8004da4 <HAL_FLASH_Unlock+0x28>)
 8004d8a:	4a07      	ldr	r2, [pc, #28]	@ (8004da8 <HAL_FLASH_Unlock+0x2c>)
 8004d8c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004d8e:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8004d92:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	db01      	blt.n	8004d9e <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	4770      	bx	lr
      status = HAL_ERROR;
 8004d9e:	2001      	movs	r0, #1
}
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40023c00 	.word	0x40023c00
 8004da8:	45670123 	.word	0x45670123

08004dac <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8004dac:	4a03      	ldr	r2, [pc, #12]	@ (8004dbc <HAL_FLASH_Lock+0x10>)
 8004dae:	6913      	ldr	r3, [r2, #16]
 8004db0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004db4:	6113      	str	r3, [r2, #16]
}
 8004db6:	2000      	movs	r0, #0
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40023c00 	.word	0x40023c00

08004dc0 <FLASH_WaitForLastOperation>:
{
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004dc4:	4b14      	ldr	r3, [pc, #80]	@ (8004e18 <FLASH_WaitForLastOperation+0x58>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8004dca:	f7ff f913 	bl	8003ff4 <HAL_GetTick>
 8004dce:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004dd0:	4b12      	ldr	r3, [pc, #72]	@ (8004e1c <FLASH_WaitForLastOperation+0x5c>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004dd8:	d00a      	beq.n	8004df0 <FLASH_WaitForLastOperation+0x30>
    if (Timeout != HAL_MAX_DELAY)
 8004dda:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004dde:	d0f7      	beq.n	8004dd0 <FLASH_WaitForLastOperation+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004de0:	b124      	cbz	r4, 8004dec <FLASH_WaitForLastOperation+0x2c>
 8004de2:	f7ff f907 	bl	8003ff4 <HAL_GetTick>
 8004de6:	1b40      	subs	r0, r0, r5
 8004de8:	42a0      	cmp	r0, r4
 8004dea:	d9f1      	bls.n	8004dd0 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8004dec:	2003      	movs	r0, #3
 8004dee:	e00d      	b.n	8004e0c <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004df0:	4b0a      	ldr	r3, [pc, #40]	@ (8004e1c <FLASH_WaitForLastOperation+0x5c>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f013 0f01 	tst.w	r3, #1
 8004df8:	d002      	beq.n	8004e00 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004dfa:	4b08      	ldr	r3, [pc, #32]	@ (8004e1c <FLASH_WaitForLastOperation+0x5c>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	60da      	str	r2, [r3, #12]
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004e00:	4b06      	ldr	r3, [pc, #24]	@ (8004e1c <FLASH_WaitForLastOperation+0x5c>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f413 7ff9 	tst.w	r3, #498	@ 0x1f2
 8004e08:	d101      	bne.n	8004e0e <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8004e0a:	2000      	movs	r0, #0
}
 8004e0c:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8004e0e:	f7ff ff61 	bl	8004cd4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004e12:	2001      	movs	r0, #1
 8004e14:	e7fa      	b.n	8004e0c <FLASH_WaitForLastOperation+0x4c>
 8004e16:	bf00      	nop
 8004e18:	20005f10 	.word	0x20005f10
 8004e1c:	40023c00 	.word	0x40023c00

08004e20 <HAL_FLASH_Program>:
{
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8004e24:	4a1b      	ldr	r2, [pc, #108]	@ (8004e94 <HAL_FLASH_Program+0x74>)
 8004e26:	7e12      	ldrb	r2, [r2, #24]
 8004e28:	2a01      	cmp	r2, #1
 8004e2a:	d030      	beq.n	8004e8e <HAL_FLASH_Program+0x6e>
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	460d      	mov	r5, r1
 8004e30:	461f      	mov	r7, r3
 8004e32:	4b18      	ldr	r3, [pc, #96]	@ (8004e94 <HAL_FLASH_Program+0x74>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e38:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004e3c:	f7ff ffc0 	bl	8004dc0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004e40:	b990      	cbnz	r0, 8004e68 <HAL_FLASH_Program+0x48>
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004e42:	b1ac      	cbz	r4, 8004e70 <HAL_FLASH_Program+0x50>
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004e44:	2c01      	cmp	r4, #1
 8004e46:	d018      	beq.n	8004e7a <HAL_FLASH_Program+0x5a>
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004e48:	2c02      	cmp	r4, #2
 8004e4a:	d01b      	beq.n	8004e84 <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 8004e4c:	4632      	mov	r2, r6
 8004e4e:	463b      	mov	r3, r7
 8004e50:	4628      	mov	r0, r5
 8004e52:	f7ff fef3 	bl	8004c3c <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e56:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004e5a:	f7ff ffb1 	bl	8004dc0 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 8004e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8004e98 <HAL_FLASH_Program+0x78>)
 8004e60:	6913      	ldr	r3, [r2, #16]
 8004e62:	f023 0301 	bic.w	r3, r3, #1
 8004e66:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8004e68:	4b0a      	ldr	r3, [pc, #40]	@ (8004e94 <HAL_FLASH_Program+0x74>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	761a      	strb	r2, [r3, #24]
}
 8004e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004e70:	b2f1      	uxtb	r1, r6
 8004e72:	4628      	mov	r0, r5
 8004e74:	f7ff ff1e 	bl	8004cb4 <FLASH_Program_Byte>
 8004e78:	e7ed      	b.n	8004e56 <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004e7a:	b2b1      	uxth	r1, r6
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	f7ff ff07 	bl	8004c90 <FLASH_Program_HalfWord>
 8004e82:	e7e8      	b.n	8004e56 <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004e84:	4631      	mov	r1, r6
 8004e86:	4628      	mov	r0, r5
 8004e88:	f7ff fef0 	bl	8004c6c <FLASH_Program_Word>
 8004e8c:	e7e3      	b.n	8004e56 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 8004e8e:	2002      	movs	r0, #2
 8004e90:	e7ed      	b.n	8004e6e <HAL_FLASH_Program+0x4e>
 8004e92:	bf00      	nop
 8004e94:	20005f10 	.word	0x20005f10
 8004e98:	40023c00 	.word	0x40023c00

08004e9c <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e9c:	4b07      	ldr	r3, [pc, #28]	@ (8004ebc <FLASH_MassErase+0x20>)
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004ea4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	f042 0204 	orr.w	r2, r2, #4
 8004eac:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004eb4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004eb8:	611a      	str	r2, [r3, #16]
}
 8004eba:	4770      	bx	lr
 8004ebc:	40023c00 	.word	0x40023c00

08004ec0 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004ec0:	2901      	cmp	r1, #1
 8004ec2:	d005      	beq.n	8004ed0 <FLASH_Erase_Sector+0x10>
 8004ec4:	2902      	cmp	r1, #2
 8004ec6:	d006      	beq.n	8004ed6 <FLASH_Erase_Sector+0x16>
 8004ec8:	b139      	cbz	r1, 8004eda <FLASH_Erase_Sector+0x1a>
{
 8004eca:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8004ece:	e004      	b.n	8004eda <FLASH_Erase_Sector+0x1a>
 8004ed0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004ed4:	e001      	b.n	8004eda <FLASH_Erase_Sector+0x1a>
 8004ed6:	f44f 7100 	mov.w	r1, #512	@ 0x200
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004eda:	4b0b      	ldr	r3, [pc, #44]	@ (8004f08 <FLASH_Erase_Sector+0x48>)
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004ee2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8004ee4:	691a      	ldr	r2, [r3, #16]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8004ef0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8004ef8:	f040 0002 	orr.w	r0, r0, #2
 8004efc:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004f04:	611a      	str	r2, [r3, #16]
}
 8004f06:	4770      	bx	lr
 8004f08:	40023c00 	.word	0x40023c00

08004f0c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004f0c:	4b16      	ldr	r3, [pc, #88]	@ (8004f68 <FLASH_FlushCaches+0x5c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8004f14:	d010      	beq.n	8004f38 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004f16:	4b14      	ldr	r3, [pc, #80]	@ (8004f68 <FLASH_FlushCaches+0x5c>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004f1e:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f2e:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f36:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004f38:	4b0b      	ldr	r3, [pc, #44]	@ (8004f68 <FLASH_FlushCaches+0x5c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004f40:	d010      	beq.n	8004f64 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004f42:	4b09      	ldr	r3, [pc, #36]	@ (8004f68 <FLASH_FlushCaches+0x5c>)
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f4a:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f5a:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f62:	601a      	str	r2, [r3, #0]
  }
}
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40023c00 	.word	0x40023c00

08004f6c <HAL_FLASHEx_Erase>:
{
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8004f6e:	4b22      	ldr	r3, [pc, #136]	@ (8004ff8 <HAL_FLASHEx_Erase+0x8c>)
 8004f70:	7e1b      	ldrb	r3, [r3, #24]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d03e      	beq.n	8004ff4 <HAL_FLASHEx_Erase+0x88>
 8004f76:	4604      	mov	r4, r0
 8004f78:	460e      	mov	r6, r1
 8004f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff8 <HAL_FLASHEx_Erase+0x8c>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f80:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004f84:	f7ff ff1c 	bl	8004dc0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004f88:	4607      	mov	r7, r0
 8004f8a:	bb70      	cbnz	r0, 8004fea <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 8004f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f90:	6033      	str	r3, [r6, #0]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d016      	beq.n	8004fc6 <HAL_FLASHEx_Erase+0x5a>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004f98:	68a5      	ldr	r5, [r4, #8]
 8004f9a:	68e3      	ldr	r3, [r4, #12]
 8004f9c:	68a2      	ldr	r2, [r4, #8]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	42ab      	cmp	r3, r5
 8004fa2:	d920      	bls.n	8004fe6 <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004fa4:	7c21      	ldrb	r1, [r4, #16]
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	f7ff ff8a 	bl	8004ec0 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004fb0:	f7ff ff06 	bl	8004dc0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004fb4:	4a11      	ldr	r2, [pc, #68]	@ (8004ffc <HAL_FLASHEx_Erase+0x90>)
 8004fb6:	6913      	ldr	r3, [r2, #16]
 8004fb8:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8004fbc:	6113      	str	r3, [r2, #16]
        if (status != HAL_OK)
 8004fbe:	4607      	mov	r7, r0
 8004fc0:	b980      	cbnz	r0, 8004fe4 <HAL_FLASHEx_Erase+0x78>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004fc2:	3501      	adds	r5, #1
 8004fc4:	e7e9      	b.n	8004f9a <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004fc6:	6861      	ldr	r1, [r4, #4]
 8004fc8:	7c20      	ldrb	r0, [r4, #16]
 8004fca:	f7ff ff67 	bl	8004e9c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fce:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004fd2:	f7ff fef5 	bl	8004dc0 <FLASH_WaitForLastOperation>
 8004fd6:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8004fd8:	4a08      	ldr	r2, [pc, #32]	@ (8004ffc <HAL_FLASHEx_Erase+0x90>)
 8004fda:	6913      	ldr	r3, [r2, #16]
 8004fdc:	f023 0304 	bic.w	r3, r3, #4
 8004fe0:	6113      	str	r3, [r2, #16]
 8004fe2:	e000      	b.n	8004fe6 <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8004fe4:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 8004fe6:	f7ff ff91 	bl	8004f0c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004fea:	4b03      	ldr	r3, [pc, #12]	@ (8004ff8 <HAL_FLASHEx_Erase+0x8c>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	761a      	strb	r2, [r3, #24]
}
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004ff4:	2702      	movs	r7, #2
 8004ff6:	e7fb      	b.n	8004ff0 <HAL_FLASHEx_Erase+0x84>
 8004ff8:	20005f10 	.word	0x20005f10
 8004ffc:	40023c00 	.word	0x40023c00

08005000 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005000:	2300      	movs	r3, #0
 8005002:	2b0f      	cmp	r3, #15
 8005004:	f200 80d7 	bhi.w	80051b6 <HAL_GPIO_Init+0x1b6>
{
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	e065      	b.n	80050da <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800500e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005010:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005014:	2403      	movs	r4, #3
 8005016:	fa04 f40e 	lsl.w	r4, r4, lr
 800501a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800501e:	68cc      	ldr	r4, [r1, #12]
 8005020:	fa04 f40e 	lsl.w	r4, r4, lr
 8005024:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8005026:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005028:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800502a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800502e:	684a      	ldr	r2, [r1, #4]
 8005030:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8005034:	409a      	lsls	r2, r3
 8005036:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8005038:	6042      	str	r2, [r0, #4]
 800503a:	e05c      	b.n	80050f6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800503c:	08dc      	lsrs	r4, r3, #3
 800503e:	3408      	adds	r4, #8
 8005040:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005044:	f003 0507 	and.w	r5, r3, #7
 8005048:	00ad      	lsls	r5, r5, #2
 800504a:	f04f 0e0f 	mov.w	lr, #15
 800504e:	fa0e fe05 	lsl.w	lr, lr, r5
 8005052:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005056:	690a      	ldr	r2, [r1, #16]
 8005058:	40aa      	lsls	r2, r5
 800505a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800505e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8005062:	e05c      	b.n	800511e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005064:	2204      	movs	r2, #4
 8005066:	e000      	b.n	800506a <HAL_GPIO_Init+0x6a>
 8005068:	2200      	movs	r2, #0
 800506a:	fa02 f20e 	lsl.w	r2, r2, lr
 800506e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005070:	3402      	adds	r4, #2
 8005072:	4d51      	ldr	r5, [pc, #324]	@ (80051b8 <HAL_GPIO_Init+0x1b8>)
 8005074:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005078:	4a50      	ldr	r2, [pc, #320]	@ (80051bc <HAL_GPIO_Init+0x1bc>)
 800507a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800507c:	ea6f 020c 	mvn.w	r2, ip
 8005080:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005084:	684e      	ldr	r6, [r1, #4]
 8005086:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800508a:	d001      	beq.n	8005090 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800508c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8005090:	4c4a      	ldr	r4, [pc, #296]	@ (80051bc <HAL_GPIO_Init+0x1bc>)
 8005092:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8005094:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8005096:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800509a:	684e      	ldr	r6, [r1, #4]
 800509c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80050a0:	d001      	beq.n	80050a6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80050a2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80050a6:	4c45      	ldr	r4, [pc, #276]	@ (80051bc <HAL_GPIO_Init+0x1bc>)
 80050a8:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80050aa:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80050ac:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050b0:	684e      	ldr	r6, [r1, #4]
 80050b2:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80050b6:	d001      	beq.n	80050bc <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80050b8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80050bc:	4c3f      	ldr	r4, [pc, #252]	@ (80051bc <HAL_GPIO_Init+0x1bc>)
 80050be:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050c0:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80050c2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050c4:	684d      	ldr	r5, [r1, #4]
 80050c6:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80050ca:	d001      	beq.n	80050d0 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80050cc:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80050d0:	4c3a      	ldr	r4, [pc, #232]	@ (80051bc <HAL_GPIO_Init+0x1bc>)
 80050d2:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050d4:	3301      	adds	r3, #1
 80050d6:	2b0f      	cmp	r3, #15
 80050d8:	d86b      	bhi.n	80051b2 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80050da:	2201      	movs	r2, #1
 80050dc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050de:	680c      	ldr	r4, [r1, #0]
 80050e0:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80050e4:	ea32 0404 	bics.w	r4, r2, r4
 80050e8:	d1f4      	bne.n	80050d4 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ea:	684c      	ldr	r4, [r1, #4]
 80050ec:	f004 0403 	and.w	r4, r4, #3
 80050f0:	3c01      	subs	r4, #1
 80050f2:	2c01      	cmp	r4, #1
 80050f4:	d98b      	bls.n	800500e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050f6:	684a      	ldr	r2, [r1, #4]
 80050f8:	f002 0203 	and.w	r2, r2, #3
 80050fc:	2a03      	cmp	r2, #3
 80050fe:	d009      	beq.n	8005114 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8005100:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005102:	005d      	lsls	r5, r3, #1
 8005104:	2203      	movs	r2, #3
 8005106:	40aa      	lsls	r2, r5
 8005108:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800510c:	688a      	ldr	r2, [r1, #8]
 800510e:	40aa      	lsls	r2, r5
 8005110:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8005112:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005114:	684a      	ldr	r2, [r1, #4]
 8005116:	f002 0203 	and.w	r2, r2, #3
 800511a:	2a02      	cmp	r2, #2
 800511c:	d08e      	beq.n	800503c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 800511e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005120:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005124:	2203      	movs	r2, #3
 8005126:	fa02 f20e 	lsl.w	r2, r2, lr
 800512a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800512e:	684a      	ldr	r2, [r1, #4]
 8005130:	f002 0203 	and.w	r2, r2, #3
 8005134:	fa02 f20e 	lsl.w	r2, r2, lr
 8005138:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800513a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800513c:	684a      	ldr	r2, [r1, #4]
 800513e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8005142:	d0c7      	beq.n	80050d4 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005144:	2200      	movs	r2, #0
 8005146:	9201      	str	r2, [sp, #4]
 8005148:	4a1d      	ldr	r2, [pc, #116]	@ (80051c0 <HAL_GPIO_Init+0x1c0>)
 800514a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800514c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8005150:	6454      	str	r4, [r2, #68]	@ 0x44
 8005152:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005154:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8005158:	9201      	str	r2, [sp, #4]
 800515a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800515c:	089c      	lsrs	r4, r3, #2
 800515e:	1ca5      	adds	r5, r4, #2
 8005160:	4a15      	ldr	r2, [pc, #84]	@ (80051b8 <HAL_GPIO_Init+0x1b8>)
 8005162:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005166:	f003 0e03 	and.w	lr, r3, #3
 800516a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800516e:	220f      	movs	r2, #15
 8005170:	fa02 f20e 	lsl.w	r2, r2, lr
 8005174:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005178:	4a12      	ldr	r2, [pc, #72]	@ (80051c4 <HAL_GPIO_Init+0x1c4>)
 800517a:	4290      	cmp	r0, r2
 800517c:	f43f af74 	beq.w	8005068 <HAL_GPIO_Init+0x68>
 8005180:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005184:	4290      	cmp	r0, r2
 8005186:	d00e      	beq.n	80051a6 <HAL_GPIO_Init+0x1a6>
 8005188:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800518c:	4290      	cmp	r0, r2
 800518e:	d00c      	beq.n	80051aa <HAL_GPIO_Init+0x1aa>
 8005190:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005194:	4290      	cmp	r0, r2
 8005196:	d00a      	beq.n	80051ae <HAL_GPIO_Init+0x1ae>
 8005198:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800519c:	4290      	cmp	r0, r2
 800519e:	f43f af61 	beq.w	8005064 <HAL_GPIO_Init+0x64>
 80051a2:	2207      	movs	r2, #7
 80051a4:	e761      	b.n	800506a <HAL_GPIO_Init+0x6a>
 80051a6:	2201      	movs	r2, #1
 80051a8:	e75f      	b.n	800506a <HAL_GPIO_Init+0x6a>
 80051aa:	2202      	movs	r2, #2
 80051ac:	e75d      	b.n	800506a <HAL_GPIO_Init+0x6a>
 80051ae:	2203      	movs	r2, #3
 80051b0:	e75b      	b.n	800506a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80051b2:	b002      	add	sp, #8
 80051b4:	bd70      	pop	{r4, r5, r6, pc}
 80051b6:	4770      	bx	lr
 80051b8:	40013800 	.word	0x40013800
 80051bc:	40013c00 	.word	0x40013c00
 80051c0:	40023800 	.word	0x40023800
 80051c4:	40020000 	.word	0x40020000

080051c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051c8:	6903      	ldr	r3, [r0, #16]
 80051ca:	4219      	tst	r1, r3
 80051cc:	d001      	beq.n	80051d2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80051ce:	2001      	movs	r0, #1
 80051d0:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051d2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80051d4:	4770      	bx	lr

080051d6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051d6:	b10a      	cbz	r2, 80051dc <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051d8:	6181      	str	r1, [r0, #24]
 80051da:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051dc:	0409      	lsls	r1, r1, #16
 80051de:	6181      	str	r1, [r0, #24]
  }
}
 80051e0:	4770      	bx	lr

080051e2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051e2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051e4:	ea01 0203 	and.w	r2, r1, r3
 80051e8:	ea21 0103 	bic.w	r1, r1, r3
 80051ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80051f0:	6181      	str	r1, [r0, #24]
}
 80051f2:	4770      	bx	lr

080051f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051f4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80051f6:	4b05      	ldr	r3, [pc, #20]	@ (800520c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	4203      	tst	r3, r0
 80051fc:	d100      	bne.n	8005200 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80051fe:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005200:	4b02      	ldr	r3, [pc, #8]	@ (800520c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005202:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005204:	f7fd fdf0 	bl	8002de8 <HAL_GPIO_EXTI_Callback>
}
 8005208:	e7f9      	b.n	80051fe <HAL_GPIO_EXTI_IRQHandler+0xa>
 800520a:	bf00      	nop
 800520c:	40013c00 	.word	0x40013c00

08005210 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005210:	2800      	cmp	r0, #0
 8005212:	f000 80cc 	beq.w	80053ae <HAL_I2C_Init+0x19e>
{
 8005216:	b570      	push	{r4, r5, r6, lr}
 8005218:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800521a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800521e:	2b00      	cmp	r3, #0
 8005220:	d077      	beq.n	8005312 <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005222:	2324      	movs	r3, #36	@ 0x24
 8005224:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005228:	6822      	ldr	r2, [r4, #0]
 800522a:	6813      	ldr	r3, [r2, #0]
 800522c:	f023 0301 	bic.w	r3, r3, #1
 8005230:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005232:	6822      	ldr	r2, [r4, #0]
 8005234:	6813      	ldr	r3, [r2, #0]
 8005236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800523a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800523c:	6822      	ldr	r2, [r4, #0]
 800523e:	6813      	ldr	r3, [r2, #0]
 8005240:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005244:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005246:	f001 fa25 	bl	8006694 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800524a:	6862      	ldr	r2, [r4, #4]
 800524c:	4b5a      	ldr	r3, [pc, #360]	@ (80053b8 <HAL_I2C_Init+0x1a8>)
 800524e:	429a      	cmp	r2, r3
 8005250:	d864      	bhi.n	800531c <HAL_I2C_Init+0x10c>
 8005252:	4b5a      	ldr	r3, [pc, #360]	@ (80053bc <HAL_I2C_Init+0x1ac>)
 8005254:	4298      	cmp	r0, r3
 8005256:	bf8c      	ite	hi
 8005258:	2300      	movhi	r3, #0
 800525a:	2301      	movls	r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	f040 80a8 	bne.w	80053b2 <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005262:	4957      	ldr	r1, [pc, #348]	@ (80053c0 <HAL_I2C_Init+0x1b0>)
 8005264:	fba1 3100 	umull	r3, r1, r1, r0
 8005268:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800526a:	6825      	ldr	r5, [r4, #0]
 800526c:	686a      	ldr	r2, [r5, #4]
 800526e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8005272:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8005276:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005278:	6821      	ldr	r1, [r4, #0]
 800527a:	6a0a      	ldr	r2, [r1, #32]
 800527c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8005280:	6866      	ldr	r6, [r4, #4]
 8005282:	4d4d      	ldr	r5, [pc, #308]	@ (80053b8 <HAL_I2C_Init+0x1a8>)
 8005284:	42ae      	cmp	r6, r5
 8005286:	d84f      	bhi.n	8005328 <HAL_I2C_Init+0x118>
 8005288:	3301      	adds	r3, #1
 800528a:	4313      	orrs	r3, r2
 800528c:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800528e:	6821      	ldr	r1, [r4, #0]
 8005290:	69ca      	ldr	r2, [r1, #28]
 8005292:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8005296:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800529a:	6865      	ldr	r5, [r4, #4]
 800529c:	4b46      	ldr	r3, [pc, #280]	@ (80053b8 <HAL_I2C_Init+0x1a8>)
 800529e:	429d      	cmp	r5, r3
 80052a0:	d84c      	bhi.n	800533c <HAL_I2C_Init+0x12c>
 80052a2:	1e43      	subs	r3, r0, #1
 80052a4:	006d      	lsls	r5, r5, #1
 80052a6:	fbb3 f3f5 	udiv	r3, r3, r5
 80052aa:	3301      	adds	r3, #1
 80052ac:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80052b0:	4203      	tst	r3, r0
 80052b2:	d078      	beq.n	80053a6 <HAL_I2C_Init+0x196>
 80052b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b8:	431a      	orrs	r2, r3
 80052ba:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052bc:	6821      	ldr	r1, [r4, #0]
 80052be:	680b      	ldr	r3, [r1, #0]
 80052c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80052c4:	69e2      	ldr	r2, [r4, #28]
 80052c6:	6a20      	ldr	r0, [r4, #32]
 80052c8:	4302      	orrs	r2, r0
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052ce:	6821      	ldr	r1, [r4, #0]
 80052d0:	688b      	ldr	r3, [r1, #8]
 80052d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80052d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80052da:	6922      	ldr	r2, [r4, #16]
 80052dc:	68e0      	ldr	r0, [r4, #12]
 80052de:	4302      	orrs	r2, r0
 80052e0:	4313      	orrs	r3, r2
 80052e2:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052e4:	6821      	ldr	r1, [r4, #0]
 80052e6:	68cb      	ldr	r3, [r1, #12]
 80052e8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80052ec:	6962      	ldr	r2, [r4, #20]
 80052ee:	69a0      	ldr	r0, [r4, #24]
 80052f0:	4302      	orrs	r2, r0
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052f6:	6822      	ldr	r2, [r4, #0]
 80052f8:	6813      	ldr	r3, [r2, #0]
 80052fa:	f043 0301 	orr.w	r3, r3, #1
 80052fe:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005300:	2000      	movs	r0, #0
 8005302:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005304:	2320      	movs	r3, #32
 8005306:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800530a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800530c:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 8005310:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005312:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8005316:	f7fd fa3f 	bl	8002798 <HAL_I2C_MspInit>
 800531a:	e782      	b.n	8005222 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800531c:	4b29      	ldr	r3, [pc, #164]	@ (80053c4 <HAL_I2C_Init+0x1b4>)
 800531e:	4298      	cmp	r0, r3
 8005320:	bf8c      	ite	hi
 8005322:	2300      	movhi	r3, #0
 8005324:	2301      	movls	r3, #1
 8005326:	e799      	b.n	800525c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005328:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800532c:	fb05 f303 	mul.w	r3, r5, r3
 8005330:	4d25      	ldr	r5, [pc, #148]	@ (80053c8 <HAL_I2C_Init+0x1b8>)
 8005332:	fba5 5303 	umull	r5, r3, r5, r3
 8005336:	099b      	lsrs	r3, r3, #6
 8005338:	3301      	adds	r3, #1
 800533a:	e7a6      	b.n	800528a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800533c:	68a6      	ldr	r6, [r4, #8]
 800533e:	b9be      	cbnz	r6, 8005370 <HAL_I2C_Init+0x160>
 8005340:	1e43      	subs	r3, r0, #1
 8005342:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8005346:	fbb3 f3fc 	udiv	r3, r3, ip
 800534a:	3301      	adds	r3, #1
 800534c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005350:	fab3 f383 	clz	r3, r3
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	bb43      	cbnz	r3, 80053aa <HAL_I2C_Init+0x19a>
 8005358:	b9c6      	cbnz	r6, 800538c <HAL_I2C_Init+0x17c>
 800535a:	1e43      	subs	r3, r0, #1
 800535c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005360:	fbb3 f3f5 	udiv	r3, r3, r5
 8005364:	3301      	adds	r3, #1
 8005366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800536e:	e7a3      	b.n	80052b8 <HAL_I2C_Init+0xa8>
 8005370:	1e43      	subs	r3, r0, #1
 8005372:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8005376:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800537a:	fbb3 f3fc 	udiv	r3, r3, ip
 800537e:	3301      	adds	r3, #1
 8005380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005384:	fab3 f383 	clz	r3, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	e7e4      	b.n	8005356 <HAL_I2C_Init+0x146>
 800538c:	1e43      	subs	r3, r0, #1
 800538e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005392:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005396:	fbb3 f3f5 	udiv	r3, r3, r5
 800539a:	3301      	adds	r3, #1
 800539c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053a4:	e788      	b.n	80052b8 <HAL_I2C_Init+0xa8>
 80053a6:	2304      	movs	r3, #4
 80053a8:	e786      	b.n	80052b8 <HAL_I2C_Init+0xa8>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e784      	b.n	80052b8 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80053ae:	2001      	movs	r0, #1
}
 80053b0:	4770      	bx	lr
    return HAL_ERROR;
 80053b2:	2001      	movs	r0, #1
 80053b4:	e7ac      	b.n	8005310 <HAL_I2C_Init+0x100>
 80053b6:	bf00      	nop
 80053b8:	000186a0 	.word	0x000186a0
 80053bc:	001e847f 	.word	0x001e847f
 80053c0:	431bde83 	.word	0x431bde83
 80053c4:	003d08ff 	.word	0x003d08ff
 80053c8:	10624dd3 	.word	0x10624dd3

080053cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053cc:	b500      	push	{lr}
 80053ce:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053d0:	2200      	movs	r2, #0
 80053d2:	9200      	str	r2, [sp, #0]
 80053d4:	4b0d      	ldr	r3, [pc, #52]	@ (800540c <HAL_MspInit+0x40>)
 80053d6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80053d8:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80053dc:	6459      	str	r1, [r3, #68]	@ 0x44
 80053de:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80053e0:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80053e4:	9100      	str	r1, [sp, #0]
 80053e6:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053e8:	9201      	str	r2, [sp, #4]
 80053ea:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80053ec:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80053f0:	6419      	str	r1, [r3, #64]	@ 0x40
 80053f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80053fc:	210f      	movs	r1, #15
 80053fe:	f06f 0001 	mvn.w	r0, #1
 8005402:	f7ff f9f3 	bl	80047ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005406:	b003      	add	sp, #12
 8005408:	f85d fb04 	ldr.w	pc, [sp], #4
 800540c:	40023800 	.word	0x40023800

08005410 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005414:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005416:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800541a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800541e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005422:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005426:	429a      	cmp	r2, r3
 8005428:	d854      	bhi.n	80054d4 <PCD_WriteEmptyTxFifo+0xc4>
 800542a:	4607      	mov	r7, r0
 800542c:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800542e:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8005430:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8005434:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005438:	69d2      	ldr	r2, [r2, #28]
 800543a:	429a      	cmp	r2, r3
 800543c:	d300      	bcc.n	8005440 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 800543e:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8005440:	f102 0903 	add.w	r9, r2, #3
 8005444:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005448:	e015      	b.n	8005476 <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 800544a:	f106 0903 	add.w	r9, r6, #3
 800544e:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 8005452:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005454:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8005458:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800545c:	6a29      	ldr	r1, [r5, #32]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	b2b3      	uxth	r3, r6
 8005462:	b2e2      	uxtb	r2, r4
 8005464:	4640      	mov	r0, r8
 8005466:	f002 facc 	bl	8007a02 <USB_WritePacket>

    ep->xfer_buff  += len;
 800546a:	6a2b      	ldr	r3, [r5, #32]
 800546c:	4433      	add	r3, r6
 800546e:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8005470:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8005472:	4433      	add	r3, r6
 8005474:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005476:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 800547a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005482:	454b      	cmp	r3, r9
 8005484:	d312      	bcc.n	80054ac <PCD_WriteEmptyTxFifo+0x9c>
 8005486:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800548a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800548e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005492:	429a      	cmp	r2, r3
 8005494:	d20a      	bcs.n	80054ac <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005496:	b14b      	cbz	r3, 80054ac <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8005498:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 800549a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800549e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80054a2:	69d6      	ldr	r6, [r2, #28]
 80054a4:	429e      	cmp	r6, r3
 80054a6:	d3d0      	bcc.n	800544a <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 80054a8:	461e      	mov	r6, r3
 80054aa:	e7ce      	b.n	800544a <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80054ac:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80054b0:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80054b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d80f      	bhi.n	80054dc <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054bc:	f004 040f 	and.w	r4, r4, #15
 80054c0:	2201      	movs	r2, #1
 80054c2:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054c4:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 80054c8:	ea23 0302 	bic.w	r3, r3, r2
 80054cc:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 80054d0:	2000      	movs	r0, #0
 80054d2:	e000      	b.n	80054d6 <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 80054d4:	2001      	movs	r0, #1
}
 80054d6:	b003      	add	sp, #12
 80054d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 80054dc:	2000      	movs	r0, #0
 80054de:	e7fa      	b.n	80054d6 <PCD_WriteEmptyTxFifo+0xc6>

080054e0 <HAL_PCD_Init>:
{
 80054e0:	b530      	push	{r4, r5, lr}
 80054e2:	b083      	sub	sp, #12
  if (hpcd == NULL)
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d07a      	beq.n	80055de <HAL_PCD_Init+0xfe>
 80054e8:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 80054ea:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054ec:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 80054f0:	b1c3      	cbz	r3, 8005524 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80054f2:	2303      	movs	r3, #3
 80054f4:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 80054f8:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 80054fc:	d017      	beq.n	800552e <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 80054fe:	6820      	ldr	r0, [r4, #0]
 8005500:	f002 f830 	bl	8007564 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005504:	7c23      	ldrb	r3, [r4, #16]
 8005506:	f88d 3000 	strb.w	r3, [sp]
 800550a:	1d23      	adds	r3, r4, #4
 800550c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800550e:	6820      	ldr	r0, [r4, #0]
 8005510:	f001 ff67 	bl	80073e2 <USB_CoreInit>
 8005514:	b170      	cbz	r0, 8005534 <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005516:	2302      	movs	r3, #2
 8005518:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800551c:	2501      	movs	r5, #1
}
 800551e:	4628      	mov	r0, r5
 8005520:	b003      	add	sp, #12
 8005522:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8005524:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8005528:	f004 fd90 	bl	800a04c <HAL_PCD_MspInit>
 800552c:	e7e1      	b.n	80054f2 <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	71a3      	strb	r3, [r4, #6]
 8005532:	e7e4      	b.n	80054fe <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005534:	2100      	movs	r1, #0
 8005536:	6820      	ldr	r0, [r4, #0]
 8005538:	f002 fc79 	bl	8007e2e <USB_SetCurrentMode>
 800553c:	4602      	mov	r2, r0
 800553e:	b9b8      	cbnz	r0, 8005570 <HAL_PCD_Init+0x90>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005540:	4603      	mov	r3, r0
 8005542:	7920      	ldrb	r0, [r4, #4]
 8005544:	4298      	cmp	r0, r3
 8005546:	d918      	bls.n	800557a <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 8005548:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800554c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005550:	2001      	movs	r0, #1
 8005552:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8005554:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005556:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005558:	2000      	movs	r0, #0
 800555a:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 800555c:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800555e:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005560:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8005564:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005568:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800556a:	3301      	adds	r3, #1
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e7e8      	b.n	8005542 <HAL_PCD_Init+0x62>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005570:	2302      	movs	r3, #2
 8005572:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8005576:	2501      	movs	r5, #1
 8005578:	e7d1      	b.n	800551e <HAL_PCD_Init+0x3e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800557a:	4290      	cmp	r0, r2
 800557c:	d917      	bls.n	80055ae <HAL_PCD_Init+0xce>
    hpcd->OUT_ep[i].is_in = 0U;
 800557e:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8005582:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005586:	2100      	movs	r1, #0
 8005588:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 800558c:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005590:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005594:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005598:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 800559c:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 80055a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80055a4:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055a8:	3201      	adds	r2, #1
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	e7e5      	b.n	800557a <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055ae:	7c23      	ldrb	r3, [r4, #16]
 80055b0:	f88d 3000 	strb.w	r3, [sp]
 80055b4:	1d23      	adds	r3, r4, #4
 80055b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055b8:	6820      	ldr	r0, [r4, #0]
 80055ba:	f002 f829 	bl	8007610 <USB_DevInit>
 80055be:	4605      	mov	r5, r0
 80055c0:	b120      	cbz	r0, 80055cc <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055c2:	2302      	movs	r3, #2
 80055c4:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80055c8:	2501      	movs	r5, #1
 80055ca:	e7a8      	b.n	800551e <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 80055d6:	6820      	ldr	r0, [r4, #0]
 80055d8:	f002 fbe8 	bl	8007dac <USB_DevDisconnect>
  return HAL_OK;
 80055dc:	e79f      	b.n	800551e <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 80055de:	2501      	movs	r5, #1
 80055e0:	e79d      	b.n	800551e <HAL_PCD_Init+0x3e>

080055e2 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055e2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 80055e4:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 80055e8:	2a01      	cmp	r2, #1
 80055ea:	d01a      	beq.n	8005622 <HAL_PCD_Start+0x40>
{
 80055ec:	b510      	push	{r4, lr}
 80055ee:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80055f0:	2201      	movs	r2, #1
 80055f2:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80055fc:	d002      	beq.n	8005604 <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 80055fe:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005600:	2a01      	cmp	r2, #1
 8005602:	d009      	beq.n	8005618 <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 8005604:	6820      	ldr	r0, [r4, #0]
 8005606:	f001 ffa7 	bl	8007558 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800560a:	6820      	ldr	r0, [r4, #0]
 800560c:	f002 fbc0 	bl	8007d90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005610:	2000      	movs	r0, #0
 8005612:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8005616:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800561a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800561e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005620:	e7f0      	b.n	8005604 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 8005622:	2002      	movs	r0, #2
}
 8005624:	4770      	bx	lr
	...

08005628 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	4604      	mov	r4, r0
 800562c:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800562e:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005630:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005632:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8005636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800563a:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 800563c:	79a1      	ldrb	r1, [r4, #6]
 800563e:	2901      	cmp	r1, #1
 8005640:	d011      	beq.n	8005666 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005642:	4938      	ldr	r1, [pc, #224]	@ (8005724 <PCD_EP_OutXfrComplete_int+0xfc>)
 8005644:	428e      	cmp	r6, r1
 8005646:	d056      	beq.n	80056f6 <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005648:	b93d      	cbnz	r5, 800565a <PCD_EP_OutXfrComplete_int+0x32>
 800564a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800564e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005652:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8005656:	2b00      	cmp	r3, #0
 8005658:	d05e      	beq.n	8005718 <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800565a:	b2e9      	uxtb	r1, r5
 800565c:	4620      	mov	r0, r4
 800565e:	f004 fd41 	bl	800a0e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8005662:	2000      	movs	r0, #0
 8005664:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005666:	f012 0f08 	tst.w	r2, #8
 800566a:	d009      	beq.n	8005680 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800566c:	492e      	ldr	r1, [pc, #184]	@ (8005728 <PCD_EP_OutXfrComplete_int+0x100>)
 800566e:	428e      	cmp	r6, r1
 8005670:	d9f7      	bls.n	8005662 <PCD_EP_OutXfrComplete_int+0x3a>
 8005672:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8005676:	d0f4      	beq.n	8005662 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005678:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800567c:	609a      	str	r2, [r3, #8]
 800567e:	e7f0      	b.n	8005662 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005680:	f012 0f20 	tst.w	r2, #32
 8005684:	d002      	beq.n	800568c <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005686:	2220      	movs	r2, #32
 8005688:	609a      	str	r2, [r3, #8]
 800568a:	e7ea      	b.n	8005662 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800568c:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8005690:	d1e7      	bne.n	8005662 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005692:	4925      	ldr	r1, [pc, #148]	@ (8005728 <PCD_EP_OutXfrComplete_int+0x100>)
 8005694:	428e      	cmp	r6, r1
 8005696:	d906      	bls.n	80056a6 <PCD_EP_OutXfrComplete_int+0x7e>
 8005698:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800569c:	d003      	beq.n	80056a6 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800569e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80056a2:	609a      	str	r2, [r3, #8]
 80056a4:	e7dd      	b.n	8005662 <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80056a6:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80056aa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80056ae:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056b8:	1acb      	subs	r3, r1, r3
 80056ba:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 80056be:	b97d      	cbnz	r5, 80056e0 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 80056c0:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80056c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80056c8:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 80056cc:	b16a      	cbz	r2, 80056ea <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 80056ce:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80056d2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80056d6:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 80056da:	4419      	add	r1, r3
 80056dc:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056e0:	b2e9      	uxtb	r1, r5
 80056e2:	4620      	mov	r0, r4
 80056e4:	f004 fcfe 	bl	800a0e4 <HAL_PCD_DataOutStageCallback>
 80056e8:	e7bb      	b.n	8005662 <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056ea:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80056ee:	2101      	movs	r1, #1
 80056f0:	f002 fbdc 	bl	8007eac <USB_EP0_OutStart>
 80056f4:	e7f4      	b.n	80056e0 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80056f6:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80056fa:	d003      	beq.n	8005704 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005700:	609a      	str	r2, [r3, #8]
 8005702:	e7ae      	b.n	8005662 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005704:	f012 0f20 	tst.w	r2, #32
 8005708:	d001      	beq.n	800570e <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800570a:	2220      	movs	r2, #32
 800570c:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800570e:	b2e9      	uxtb	r1, r5
 8005710:	4620      	mov	r0, r4
 8005712:	f004 fce7 	bl	800a0e4 <HAL_PCD_DataOutStageCallback>
 8005716:	e7a4      	b.n	8005662 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005718:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800571c:	2100      	movs	r1, #0
 800571e:	f002 fbc5 	bl	8007eac <USB_EP0_OutStart>
 8005722:	e79a      	b.n	800565a <PCD_EP_OutXfrComplete_int+0x32>
 8005724:	4f54310a 	.word	0x4f54310a
 8005728:	4f54300a 	.word	0x4f54300a

0800572c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005730:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005732:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005734:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005738:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800573c:	4a0e      	ldr	r2, [pc, #56]	@ (8005778 <PCD_EP_OutSetupPacket_int+0x4c>)
 800573e:	4295      	cmp	r5, r2
 8005740:	d907      	bls.n	8005752 <PCD_EP_OutSetupPacket_int+0x26>
 8005742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005746:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 800574a:	d002      	beq.n	8005752 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800574c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005750:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005752:	4620      	mov	r0, r4
 8005754:	f004 fcbe 	bl	800a0d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005758:	4b07      	ldr	r3, [pc, #28]	@ (8005778 <PCD_EP_OutSetupPacket_int+0x4c>)
 800575a:	429d      	cmp	r5, r3
 800575c:	d902      	bls.n	8005764 <PCD_EP_OutSetupPacket_int+0x38>
 800575e:	79a3      	ldrb	r3, [r4, #6]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d001      	beq.n	8005768 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8005764:	2000      	movs	r0, #0
 8005766:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005768:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800576c:	2101      	movs	r1, #1
 800576e:	6820      	ldr	r0, [r4, #0]
 8005770:	f002 fb9c 	bl	8007eac <USB_EP0_OutStart>
 8005774:	e7f6      	b.n	8005764 <PCD_EP_OutSetupPacket_int+0x38>
 8005776:	bf00      	nop
 8005778:	4f54300a 	.word	0x4f54300a

0800577c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800577c:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8005780:	2b01      	cmp	r3, #1
 8005782:	d00c      	beq.n	800579e <HAL_PCD_SetAddress+0x22>
{
 8005784:	b510      	push	{r4, lr}
 8005786:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005788:	2301      	movs	r3, #1
 800578a:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800578e:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005790:	6800      	ldr	r0, [r0, #0]
 8005792:	f002 faed 	bl	8007d70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005796:	2000      	movs	r0, #0
 8005798:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800579c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800579e:	2002      	movs	r0, #2
}
 80057a0:	4770      	bx	lr

080057a2 <HAL_PCD_EP_Open>:
{
 80057a2:	b538      	push	{r3, r4, r5, lr}
 80057a4:	4605      	mov	r5, r0
 80057a6:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80057a8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80057ac:	d12b      	bne.n	8005806 <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ae:	f001 0e0f 	and.w	lr, r1, #15
 80057b2:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 80057b6:	00a4      	lsls	r4, r4, #2
 80057b8:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 80057bc:	4404      	add	r4, r0
 80057be:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 80057c0:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80057c4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80057c8:	2000      	movs	r0, #0
 80057ca:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80057ce:	f00c 0c0f 	and.w	ip, ip, #15
 80057d2:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80057d6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80057da:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80057dc:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 80057de:	784a      	ldrb	r2, [r1, #1]
 80057e0:	b10a      	cbz	r2, 80057e6 <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 80057e2:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d01c      	beq.n	8005824 <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 80057ea:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d01b      	beq.n	800582a <HAL_PCD_EP_Open+0x88>
 80057f2:	2301      	movs	r3, #1
 80057f4:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80057f8:	6828      	ldr	r0, [r5, #0]
 80057fa:	f001 ffe6 	bl	80077ca <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057fe:	2000      	movs	r0, #0
 8005800:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 8005804:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005806:	f001 000f 	and.w	r0, r1, #15
 800580a:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 800580e:	0089      	lsls	r1, r1, #2
 8005810:	3110      	adds	r1, #16
 8005812:	4429      	add	r1, r5
 8005814:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8005816:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800581a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800581e:	2401      	movs	r4, #1
 8005820:	7544      	strb	r4, [r0, #21]
 8005822:	e7d4      	b.n	80057ce <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	714b      	strb	r3, [r1, #5]
 8005828:	e7df      	b.n	80057ea <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 800582a:	2002      	movs	r0, #2
 800582c:	e7ea      	b.n	8005804 <HAL_PCD_EP_Open+0x62>

0800582e <HAL_PCD_EP_Close>:
{
 800582e:	b510      	push	{r4, lr}
 8005830:	4604      	mov	r4, r0
 8005832:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005834:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005838:	d120      	bne.n	800587c <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800583a:	f001 000f 	and.w	r0, r1, #15
 800583e:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005848:	4423      	add	r3, r4
 800584a:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 800584c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8005850:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005854:	2300      	movs	r3, #0
 8005856:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 800585a:	f002 020f 	and.w	r2, r2, #15
 800585e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005860:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8005864:	2b01      	cmp	r3, #1
 8005866:	d018      	beq.n	800589a <HAL_PCD_EP_Close+0x6c>
 8005868:	2301      	movs	r3, #1
 800586a:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800586e:	6820      	ldr	r0, [r4, #0]
 8005870:	f001 fff8 	bl	8007864 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005874:	2000      	movs	r0, #0
 8005876:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800587a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800587c:	f001 000f 	and.w	r0, r1, #15
 8005880:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	3310      	adds	r3, #16
 8005888:	4423      	add	r3, r4
 800588a:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 800588c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8005890:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005894:	2301      	movs	r3, #1
 8005896:	7543      	strb	r3, [r0, #21]
 8005898:	e7df      	b.n	800585a <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 800589a:	2002      	movs	r0, #2
 800589c:	e7ed      	b.n	800587a <HAL_PCD_EP_Close+0x4c>

0800589e <HAL_PCD_EP_Receive>:
{
 800589e:	b510      	push	{r4, lr}
 80058a0:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058a2:	f001 0c0f 	and.w	ip, r1, #15
 80058a6:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80058aa:	0089      	lsls	r1, r1, #2
 80058ac:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80058b0:	4401      	add	r1, r0
 80058b2:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80058b4:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80058b8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80058bc:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 80058c0:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 80058ca:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80058ce:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 80058d2:	7982      	ldrb	r2, [r0, #6]
 80058d4:	2a01      	cmp	r2, #1
 80058d6:	d004      	beq.n	80058e2 <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058d8:	6800      	ldr	r0, [r0, #0]
 80058da:	f002 f8a9 	bl	8007a30 <USB_EPStartXfer>
}
 80058de:	2000      	movs	r0, #0
 80058e0:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80058e2:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 80058e6:	e7f7      	b.n	80058d8 <HAL_PCD_EP_Receive+0x3a>

080058e8 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80058e8:	f001 010f 	and.w	r1, r1, #15
 80058ec:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80058f0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80058f4:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 80058f8:	4770      	bx	lr

080058fa <HAL_PCD_EP_Transmit>:
{
 80058fa:	b510      	push	{r4, lr}
 80058fc:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058fe:	f001 0c0f 	and.w	ip, r1, #15
 8005902:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8005906:	0089      	lsls	r1, r1, #2
 8005908:	3110      	adds	r1, #16
 800590a:	4401      	add	r1, r0
 800590c:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 800590e:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8005912:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8005916:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 800591a:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 8005924:	2301      	movs	r3, #1
 8005926:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 800592a:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 800592e:	7982      	ldrb	r2, [r0, #6]
 8005930:	429a      	cmp	r2, r3
 8005932:	d004      	beq.n	800593e <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005934:	6800      	ldr	r0, [r0, #0]
 8005936:	f002 f87b 	bl	8007a30 <USB_EPStartXfer>
}
 800593a:	2000      	movs	r0, #0
 800593c:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800593e:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 8005942:	e7f7      	b.n	8005934 <HAL_PCD_EP_Transmit+0x3a>

08005944 <HAL_PCD_EP_SetStall>:
{
 8005944:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005946:	f001 050f 	and.w	r5, r1, #15
 800594a:	7902      	ldrb	r2, [r0, #4]
 800594c:	42aa      	cmp	r2, r5
 800594e:	d338      	bcc.n	80059c2 <HAL_PCD_EP_SetStall+0x7e>
 8005950:	4604      	mov	r4, r0
 8005952:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8005954:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005958:	d11f      	bne.n	800599a <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 800595a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800595e:	0089      	lsls	r1, r1, #2
 8005960:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8005964:	4401      	add	r1, r0
 8005966:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8005968:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800596c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 8005976:	2301      	movs	r3, #1
 8005978:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800597a:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800597c:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8005980:	2b01      	cmp	r3, #1
 8005982:	d020      	beq.n	80059c6 <HAL_PCD_EP_SetStall+0x82>
 8005984:	2301      	movs	r3, #1
 8005986:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800598a:	6820      	ldr	r0, [r4, #0]
 800598c:	f002 f995 	bl	8007cba <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005990:	b185      	cbz	r5, 80059b4 <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 8005992:	2000      	movs	r0, #0
 8005994:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8005998:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800599a:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800599e:	0089      	lsls	r1, r1, #2
 80059a0:	3110      	adds	r1, #16
 80059a2:	4401      	add	r1, r0
 80059a4:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80059a6:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80059aa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80059ae:	2201      	movs	r2, #1
 80059b0:	755a      	strb	r2, [r3, #21]
 80059b2:	e7e0      	b.n	8005976 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80059b4:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80059b8:	79a1      	ldrb	r1, [r4, #6]
 80059ba:	6820      	ldr	r0, [r4, #0]
 80059bc:	f002 fa76 	bl	8007eac <USB_EP0_OutStart>
 80059c0:	e7e7      	b.n	8005992 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 80059c2:	2001      	movs	r0, #1
 80059c4:	e7e8      	b.n	8005998 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80059c6:	2002      	movs	r0, #2
 80059c8:	e7e6      	b.n	8005998 <HAL_PCD_EP_SetStall+0x54>

080059ca <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80059ca:	f001 030f 	and.w	r3, r1, #15
 80059ce:	7902      	ldrb	r2, [r0, #4]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d330      	bcc.n	8005a36 <HAL_PCD_EP_ClrStall+0x6c>
{
 80059d4:	b510      	push	{r4, lr}
 80059d6:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80059d8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80059dc:	d11e      	bne.n	8005a1c <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059de:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80059e2:	0089      	lsls	r1, r1, #2
 80059e4:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80059e8:	4401      	add	r1, r0
 80059ea:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80059ec:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80059f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80059f4:	2000      	movs	r0, #0
 80059f6:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 80059fa:	2200      	movs	r2, #0
 80059fc:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059fe:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8005a00:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d018      	beq.n	8005a3a <HAL_PCD_EP_ClrStall+0x70>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a0e:	6820      	ldr	r0, [r4, #0]
 8005a10:	f002 f980 	bl	8007d14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a14:	2000      	movs	r0, #0
 8005a16:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8005a1a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a1c:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8005a20:	0089      	lsls	r1, r1, #2
 8005a22:	3110      	adds	r1, #16
 8005a24:	4401      	add	r1, r0
 8005a26:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8005a28:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8005a2c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005a30:	2001      	movs	r0, #1
 8005a32:	7550      	strb	r0, [r2, #21]
 8005a34:	e7e1      	b.n	80059fa <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8005a36:	2001      	movs	r0, #1
}
 8005a38:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8005a3a:	2002      	movs	r0, #2
 8005a3c:	e7ed      	b.n	8005a1a <HAL_PCD_EP_ClrStall+0x50>

08005a3e <HAL_PCD_EP_Abort>:
{
 8005a3e:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8005a40:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005a44:	d10c      	bne.n	8005a60 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a46:	f001 010f 	and.w	r1, r1, #15
 8005a4a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005a4e:	0089      	lsls	r1, r1, #2
 8005a50:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8005a54:	4401      	add	r1, r0
 8005a56:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005a58:	6800      	ldr	r0, [r0, #0]
 8005a5a:	f001 ff73 	bl	8007944 <USB_EPStopXfer>
}
 8005a5e:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a60:	f001 010f 	and.w	r1, r1, #15
 8005a64:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005a68:	0089      	lsls	r1, r1, #2
 8005a6a:	3110      	adds	r1, #16
 8005a6c:	4401      	add	r1, r0
 8005a6e:	3104      	adds	r1, #4
 8005a70:	e7f2      	b.n	8005a58 <HAL_PCD_EP_Abort+0x1a>

08005a72 <HAL_PCD_IRQHandler>:
{
 8005a72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a76:	b083      	sub	sp, #12
 8005a78:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a7a:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f002 f9d2 	bl	8007e26 <USB_GetMode>
 8005a82:	b110      	cbz	r0, 8005a8a <HAL_PCD_IRQHandler+0x18>
}
 8005a84:	b003      	add	sp, #12
 8005a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8a:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005a8c:	6820      	ldr	r0, [r4, #0]
 8005a8e:	f002 f99b 	bl	8007dc8 <USB_ReadInterrupts>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d0f6      	beq.n	8005a84 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005a96:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8005aa0:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	f002 f98f 	bl	8007dc8 <USB_ReadInterrupts>
 8005aaa:	f010 0f02 	tst.w	r0, #2
 8005aae:	d004      	beq.n	8005aba <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005ab0:	6822      	ldr	r2, [r4, #0]
 8005ab2:	6953      	ldr	r3, [r2, #20]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005aba:	6820      	ldr	r0, [r4, #0]
 8005abc:	f002 f984 	bl	8007dc8 <USB_ReadInterrupts>
 8005ac0:	f010 0f10 	tst.w	r0, #16
 8005ac4:	d015      	beq.n	8005af2 <HAL_PCD_IRQHandler+0x80>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ac6:	6822      	ldr	r2, [r4, #0]
 8005ac8:	6993      	ldr	r3, [r2, #24]
 8005aca:	f023 0310 	bic.w	r3, r3, #16
 8005ace:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8005ad0:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005ad4:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005ad8:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 8005adc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ae0:	d04c      	beq.n	8005b7c <HAL_PCD_IRQHandler+0x10a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005ae2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005ae6:	d06f      	beq.n	8005bc8 <HAL_PCD_IRQHandler+0x156>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ae8:	6822      	ldr	r2, [r4, #0]
 8005aea:	6993      	ldr	r3, [r2, #24]
 8005aec:	f043 0310 	orr.w	r3, r3, #16
 8005af0:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005af2:	6820      	ldr	r0, [r4, #0]
 8005af4:	f002 f968 	bl	8007dc8 <USB_ReadInterrupts>
 8005af8:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8005afc:	d176      	bne.n	8005bec <HAL_PCD_IRQHandler+0x17a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005afe:	6820      	ldr	r0, [r4, #0]
 8005b00:	f002 f962 	bl	8007dc8 <USB_ReadInterrupts>
 8005b04:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8005b08:	f040 80e0 	bne.w	8005ccc <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b0c:	6820      	ldr	r0, [r4, #0]
 8005b0e:	f002 f95b 	bl	8007dc8 <USB_ReadInterrupts>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	f2c0 8161 	blt.w	8005dda <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b18:	6820      	ldr	r0, [r4, #0]
 8005b1a:	f002 f955 	bl	8007dc8 <USB_ReadInterrupts>
 8005b1e:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8005b22:	d009      	beq.n	8005b38 <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f013 0f01 	tst.w	r3, #1
 8005b2a:	f040 816e 	bne.w	8005e0a <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005b2e:	6822      	ldr	r2, [r4, #0]
 8005b30:	6953      	ldr	r3, [r2, #20]
 8005b32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b36:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005b38:	6820      	ldr	r0, [r4, #0]
 8005b3a:	f002 f945 	bl	8007dc8 <USB_ReadInterrupts>
 8005b3e:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8005b42:	f040 8166 	bne.w	8005e12 <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005b46:	6820      	ldr	r0, [r4, #0]
 8005b48:	f002 f93e 	bl	8007dc8 <USB_ReadInterrupts>
 8005b4c:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8005b50:	f040 81b3 	bne.w	8005eba <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005b54:	6820      	ldr	r0, [r4, #0]
 8005b56:	f002 f937 	bl	8007dc8 <USB_ReadInterrupts>
 8005b5a:	f010 0f08 	tst.w	r0, #8
 8005b5e:	f040 81c4 	bne.w	8005eea <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005b62:	6820      	ldr	r0, [r4, #0]
 8005b64:	f002 f930 	bl	8007dc8 <USB_ReadInterrupts>
 8005b68:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8005b6c:	f000 81d7 	beq.w	8005f1e <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005b70:	69ab      	ldr	r3, [r5, #24]
 8005b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b76:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b78:	2601      	movs	r6, #1
 8005b7a:	e1c0      	b.n	8005efe <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005b7c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005b80:	ea18 0f03 	tst.w	r8, r3
 8005b84:	d0b0      	beq.n	8005ae8 <HAL_PCD_IRQHandler+0x76>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005b86:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 8005b94:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8005b98:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8005b9c:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f002 f867 	bl	8007c74 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ba6:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8005baa:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8005bae:	4453      	add	r3, sl
 8005bb0:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bb4:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 8005bb8:	9a01      	ldr	r2, [sp, #4]
 8005bba:	444a      	add	r2, r9
 8005bbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005bc0:	4453      	add	r3, sl
 8005bc2:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8005bc6:	e78f      	b.n	8005ae8 <HAL_PCD_IRQHandler+0x76>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005bc8:	2208      	movs	r2, #8
 8005bca:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f002 f850 	bl	8007c74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bd4:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005bd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bdc:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8005be0:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8005be4:	4442      	add	r2, r8
 8005be6:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 8005bea:	e77d      	b.n	8005ae8 <HAL_PCD_IRQHandler+0x76>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005bec:	6820      	ldr	r0, [r4, #0]
 8005bee:	f002 f8ef 	bl	8007dd0 <USB_ReadDevAllOutEpInterrupt>
 8005bf2:	4680      	mov	r8, r0
      epnum = 0U;
 8005bf4:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8005bf6:	e035      	b.n	8005c64 <HAL_PCD_IRQHandler+0x1f2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005bf8:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005c02:	4649      	mov	r1, r9
 8005c04:	4620      	mov	r0, r4
 8005c06:	f7ff fd0f 	bl	8005628 <PCD_EP_OutXfrComplete_int>
 8005c0a:	e03c      	b.n	8005c86 <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005c0c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005c10:	2208      	movs	r2, #8
 8005c12:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005c16:	4649      	mov	r1, r9
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f7ff fd87 	bl	800572c <PCD_EP_OutSetupPacket_int>
 8005c1e:	e035      	b.n	8005c8c <HAL_PCD_IRQHandler+0x21a>
            if (ep->is_iso_incomplete == 1U)
 8005c20:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005c24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c28:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d041      	beq.n	8005cb4 <HAL_PCD_IRQHandler+0x242>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005c30:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005c34:	2202      	movs	r2, #2
 8005c36:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c3a:	f01a 0f20 	tst.w	sl, #32
 8005c3e:	d004      	beq.n	8005c4a <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c40:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005c4a:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8005c4e:	d005      	beq.n	8005c5c <HAL_PCD_IRQHandler+0x1ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005c50:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005c54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005c58:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8005c5c:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8005c60:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8005c64:	f1b8 0f00 	cmp.w	r8, #0
 8005c68:	f43f af49 	beq.w	8005afe <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 8005c6c:	f018 0f01 	tst.w	r8, #1
 8005c70:	d0f4      	beq.n	8005c5c <HAL_PCD_IRQHandler+0x1ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c72:	fa5f fb89 	uxtb.w	fp, r9
 8005c76:	4659      	mov	r1, fp
 8005c78:	6820      	ldr	r0, [r4, #0]
 8005c7a:	f002 f8b9 	bl	8007df0 <USB_ReadDevOutEPInterrupt>
 8005c7e:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005c80:	f010 0f01 	tst.w	r0, #1
 8005c84:	d1b8      	bne.n	8005bf8 <HAL_PCD_IRQHandler+0x186>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005c86:	f01a 0f08 	tst.w	sl, #8
 8005c8a:	d1bf      	bne.n	8005c0c <HAL_PCD_IRQHandler+0x19a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005c8c:	f01a 0f10 	tst.w	sl, #16
 8005c90:	d004      	beq.n	8005c9c <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005c92:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005c96:	2210      	movs	r2, #16
 8005c98:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005c9c:	f01a 0f02 	tst.w	sl, #2
 8005ca0:	d0cb      	beq.n	8005c3a <HAL_PCD_IRQHandler+0x1c8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005ca2:	696b      	ldr	r3, [r5, #20]
 8005ca4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ca8:	d0ba      	beq.n	8005c20 <HAL_PCD_IRQHandler+0x1ae>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005cb0:	607b      	str	r3, [r7, #4]
 8005cb2:	e7b5      	b.n	8005c20 <HAL_PCD_IRQHandler+0x1ae>
              ep->is_iso_incomplete = 0U;
 8005cb4:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005cb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005cc2:	4659      	mov	r1, fp
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f004 fa5b 	bl	800a180 <HAL_PCD_ISOOUTIncompleteCallback>
 8005cca:	e7b1      	b.n	8005c30 <HAL_PCD_IRQHandler+0x1be>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005ccc:	6820      	ldr	r0, [r4, #0]
 8005cce:	f002 f887 	bl	8007de0 <USB_ReadDevAllInEpInterrupt>
 8005cd2:	4680      	mov	r8, r0
      epnum = 0U;
 8005cd4:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8005cd6:	e025      	b.n	8005d24 <HAL_PCD_IRQHandler+0x2b2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005cd8:	4659      	mov	r1, fp
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f004 fa0e 	bl	800a0fc <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005ce0:	f01a 0f08 	tst.w	sl, #8
 8005ce4:	d004      	beq.n	8005cf0 <HAL_PCD_IRQHandler+0x27e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005ce6:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005cea:	2208      	movs	r2, #8
 8005cec:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005cf0:	f01a 0f10 	tst.w	sl, #16
 8005cf4:	d004      	beq.n	8005d00 <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005cf6:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005cfa:	2210      	movs	r2, #16
 8005cfc:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005d00:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8005d04:	d004      	beq.n	8005d10 <HAL_PCD_IRQHandler+0x29e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d06:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005d0a:	2240      	movs	r2, #64	@ 0x40
 8005d0c:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005d10:	f01a 0f02 	tst.w	sl, #2
 8005d14:	d140      	bne.n	8005d98 <HAL_PCD_IRQHandler+0x326>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d16:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8005d1a:	d159      	bne.n	8005dd0 <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 8005d1c:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8005d20:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8005d24:	f1b8 0f00 	cmp.w	r8, #0
 8005d28:	f43f aef0 	beq.w	8005b0c <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005d2c:	f018 0f01 	tst.w	r8, #1
 8005d30:	d0f4      	beq.n	8005d1c <HAL_PCD_IRQHandler+0x2aa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d32:	fa5f fb89 	uxtb.w	fp, r9
 8005d36:	4659      	mov	r1, fp
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	f002 f862 	bl	8007e02 <USB_ReadDevInEPInterrupt>
 8005d3e:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005d40:	f010 0f01 	tst.w	r0, #1
 8005d44:	d0cc      	beq.n	8005ce0 <HAL_PCD_IRQHandler+0x26e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d46:	f009 020f 	and.w	r2, r9, #15
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d52:	ea23 0302 	bic.w	r3, r3, r2
 8005d56:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005d58:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005d5c:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8005d60:	79a3      	ldrb	r3, [r4, #6]
 8005d62:	428b      	cmp	r3, r1
 8005d64:	d1b8      	bne.n	8005cd8 <HAL_PCD_IRQHandler+0x266>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005d66:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005d6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d6e:	6a1a      	ldr	r2, [r3, #32]
 8005d70:	69d9      	ldr	r1, [r3, #28]
 8005d72:	440a      	add	r2, r1
 8005d74:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005d76:	f1b9 0f00 	cmp.w	r9, #0
 8005d7a:	d1ad      	bne.n	8005cd8 <HAL_PCD_IRQHandler+0x266>
 8005d7c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005d80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1a6      	bne.n	8005cd8 <HAL_PCD_IRQHandler+0x266>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d8a:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005d8e:	2101      	movs	r1, #1
 8005d90:	6820      	ldr	r0, [r4, #0]
 8005d92:	f002 f88b 	bl	8007eac <USB_EP0_OutStart>
 8005d96:	e79f      	b.n	8005cd8 <HAL_PCD_IRQHandler+0x266>
            (void)USB_FlushTxFifo(USBx, epnum);
 8005d98:	4649      	mov	r1, r9
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f001 fbe8 	bl	8007570 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8005da0:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005da4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005da8:	7ddb      	ldrb	r3, [r3, #23]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d005      	beq.n	8005dba <HAL_PCD_IRQHandler+0x348>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005dae:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005db2:	2202      	movs	r2, #2
 8005db4:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8005db8:	e7ad      	b.n	8005d16 <HAL_PCD_IRQHandler+0x2a4>
              ep->is_iso_incomplete = 0U;
 8005dba:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005dbe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005dc6:	4659      	mov	r1, fp
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f004 f9df 	bl	800a18c <HAL_PCD_ISOINIncompleteCallback>
 8005dce:	e7ee      	b.n	8005dae <HAL_PCD_IRQHandler+0x33c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f7ff fb1c 	bl	8005410 <PCD_WriteEmptyTxFifo>
 8005dd8:	e7a0      	b.n	8005d1c <HAL_PCD_IRQHandler+0x2aa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f023 0301 	bic.w	r3, r3, #1
 8005de0:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8005de2:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d008      	beq.n	8005dfc <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 8005dea:	4620      	mov	r0, r4
 8005dec:	f004 f9c2 	bl	800a174 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005df0:	6822      	ldr	r2, [r4, #0]
 8005df2:	6953      	ldr	r3, [r2, #20]
 8005df4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005df8:	6153      	str	r3, [r2, #20]
 8005dfa:	e68d      	b.n	8005b18 <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e02:	4620      	mov	r0, r4
 8005e04:	f000 f93f 	bl	8006086 <HAL_PCDEx_LPM_Callback>
 8005e08:	e7f2      	b.n	8005df0 <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f004 f99a 	bl	800a144 <HAL_PCD_SuspendCallback>
 8005e10:	e68d      	b.n	8005b2e <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f023 0301 	bic.w	r3, r3, #1
 8005e18:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005e1a:	2110      	movs	r1, #16
 8005e1c:	6820      	ldr	r0, [r4, #0]
 8005e1e:	f001 fba7 	bl	8007570 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e22:	e01a      	b.n	8005e5a <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005e24:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8005e28:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8005e2c:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e30:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8005e34:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8005e38:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e3c:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e40:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8005e44:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8005e48:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e4c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8005e50:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8005e54:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e58:	3601      	adds	r6, #1
 8005e5a:	7923      	ldrb	r3, [r4, #4]
 8005e5c:	42b3      	cmp	r3, r6
 8005e5e:	d8e1      	bhi.n	8005e24 <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005e66:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e68:	7be3      	ldrb	r3, [r4, #15]
 8005e6a:	b1db      	cbz	r3, 8005ea4 <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e70:	f043 030b 	orr.w	r3, r3, #11
 8005e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e7a:	f043 030b 	orr.w	r3, r3, #11
 8005e7e:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005e80:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 8005e84:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005e88:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e8c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005e90:	79a1      	ldrb	r1, [r4, #6]
 8005e92:	6820      	ldr	r0, [r4, #0]
 8005e94:	f002 f80a 	bl	8007eac <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	6953      	ldr	r3, [r2, #20]
 8005e9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ea0:	6153      	str	r3, [r2, #20]
 8005ea2:	e650      	b.n	8005b46 <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005eaa:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005eae:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f043 030b 	orr.w	r3, r3, #11
 8005eb6:	613b      	str	r3, [r7, #16]
 8005eb8:	e7e2      	b.n	8005e80 <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 8005eba:	6820      	ldr	r0, [r4, #0]
 8005ebc:	f001 ffe8 	bl	8007e90 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ec0:	6820      	ldr	r0, [r4, #0]
 8005ec2:	f001 fc71 	bl	80077a8 <USB_GetDevSpeed>
 8005ec6:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ec8:	6826      	ldr	r6, [r4, #0]
 8005eca:	f000 fbdd 	bl	8006688 <HAL_RCC_GetHCLKFreq>
 8005ece:	4601      	mov	r1, r0
 8005ed0:	79e2      	ldrb	r2, [r4, #7]
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	f001 face 	bl	8007474 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f004 f920 	bl	800a11e <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005ede:	6822      	ldr	r2, [r4, #0]
 8005ee0:	6953      	ldr	r3, [r2, #20]
 8005ee2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ee6:	6153      	str	r3, [r2, #20]
 8005ee8:	e634      	b.n	8005b54 <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 8005eea:	4620      	mov	r0, r4
 8005eec:	f004 f911 	bl	800a112 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005ef0:	6822      	ldr	r2, [r4, #0]
 8005ef2:	6953      	ldr	r3, [r2, #20]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	6153      	str	r3, [r2, #20]
 8005efa:	e632      	b.n	8005b62 <HAL_PCD_IRQHandler+0xf0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005efc:	3601      	adds	r6, #1
 8005efe:	7923      	ldrb	r3, [r4, #4]
 8005f00:	42b3      	cmp	r3, r6
 8005f02:	d90c      	bls.n	8005f1e <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005f04:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8005f08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f0c:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d1f3      	bne.n	8005efc <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005f14:	b2f1      	uxtb	r1, r6
 8005f16:	4620      	mov	r0, r4
 8005f18:	f7ff fd91 	bl	8005a3e <HAL_PCD_EP_Abort>
 8005f1c:	e7ee      	b.n	8005efc <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005f1e:	6820      	ldr	r0, [r4, #0]
 8005f20:	f001 ff52 	bl	8007dc8 <USB_ReadInterrupts>
 8005f24:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8005f28:	d125      	bne.n	8005f76 <HAL_PCD_IRQHandler+0x504>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f2a:	6820      	ldr	r0, [r4, #0]
 8005f2c:	f001 ff4c 	bl	8007dc8 <USB_ReadInterrupts>
 8005f30:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8005f34:	d059      	beq.n	8005fea <HAL_PCD_IRQHandler+0x578>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f36:	2301      	movs	r3, #1
 8005f38:	e026      	b.n	8005f88 <HAL_PCD_IRQHandler+0x516>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f3a:	3601      	adds	r6, #1
 8005f3c:	7923      	ldrb	r3, [r4, #4]
 8005f3e:	42b3      	cmp	r3, r6
 8005f40:	d91b      	bls.n	8005f7a <HAL_PCD_IRQHandler+0x508>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005f42:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8005f46:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f4a:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8005f4e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f52:	7e1b      	ldrb	r3, [r3, #24]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d1f0      	bne.n	8005f3a <HAL_PCD_IRQHandler+0x4c8>
 8005f58:	2a00      	cmp	r2, #0
 8005f5a:	daee      	bge.n	8005f3a <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005f5c:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8005f60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f64:	2201      	movs	r2, #1
 8005f66:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005f68:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8005f6c:	b2c9      	uxtb	r1, r1
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f7ff fd65 	bl	8005a3e <HAL_PCD_EP_Abort>
 8005f74:	e7e1      	b.n	8005f3a <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f76:	2601      	movs	r6, #1
 8005f78:	e7e0      	b.n	8005f3c <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f7a:	6822      	ldr	r2, [r4, #0]
 8005f7c:	6953      	ldr	r3, [r2, #20]
 8005f7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f82:	6153      	str	r3, [r2, #20]
 8005f84:	e7d1      	b.n	8005f2a <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f86:	3301      	adds	r3, #1
 8005f88:	7922      	ldrb	r2, [r4, #4]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d928      	bls.n	8005fe0 <HAL_PCD_IRQHandler+0x56e>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005f8e:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8005f92:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f96:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8005f9a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005f9e:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 8005fa2:	2a01      	cmp	r2, #1
 8005fa4:	d1ef      	bne.n	8005f86 <HAL_PCD_IRQHandler+0x514>
 8005fa6:	2900      	cmp	r1, #0
 8005fa8:	daed      	bge.n	8005f86 <HAL_PCD_IRQHandler+0x514>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005faa:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 8005fae:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8005fb2:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005fb6:	4291      	cmp	r1, r2
 8005fb8:	d1e5      	bne.n	8005f86 <HAL_PCD_IRQHandler+0x514>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005fba:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8005fbe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005fc8:	69aa      	ldr	r2, [r5, #24]
 8005fca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005fce:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005fd0:	696a      	ldr	r2, [r5, #20]
 8005fd2:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8005fd6:	d1d6      	bne.n	8005f86 <HAL_PCD_IRQHandler+0x514>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fde:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005fe0:	6822      	ldr	r2, [r4, #0]
 8005fe2:	6953      	ldr	r3, [r2, #20]
 8005fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fe8:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005fea:	6820      	ldr	r0, [r4, #0]
 8005fec:	f001 feec 	bl	8007dc8 <USB_ReadInterrupts>
 8005ff0:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8005ff4:	d110      	bne.n	8006018 <HAL_PCD_IRQHandler+0x5a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ff6:	6820      	ldr	r0, [r4, #0]
 8005ff8:	f001 fee6 	bl	8007dc8 <USB_ReadInterrupts>
 8005ffc:	f010 0f04 	tst.w	r0, #4
 8006000:	f43f ad40 	beq.w	8005a84 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006008:	f015 0f04 	tst.w	r5, #4
 800600c:	d10d      	bne.n	800602a <HAL_PCD_IRQHandler+0x5b8>
      hpcd->Instance->GOTGINT |= RegVal;
 800600e:	6822      	ldr	r2, [r4, #0]
 8006010:	6853      	ldr	r3, [r2, #4]
 8006012:	432b      	orrs	r3, r5
 8006014:	6053      	str	r3, [r2, #4]
 8006016:	e535      	b.n	8005a84 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8006018:	4620      	mov	r0, r4
 800601a:	f004 f8bd 	bl	800a198 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	6953      	ldr	r3, [r2, #20]
 8006022:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006026:	6153      	str	r3, [r2, #20]
 8006028:	e7e5      	b.n	8005ff6 <HAL_PCD_IRQHandler+0x584>
        HAL_PCD_DisconnectCallback(hpcd);
 800602a:	4620      	mov	r0, r4
 800602c:	f004 f8ba 	bl	800a1a4 <HAL_PCD_DisconnectCallback>
 8006030:	e7ed      	b.n	800600e <HAL_PCD_IRQHandler+0x59c>

08006032 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006032:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006034:	6804      	ldr	r4, [r0, #0]
 8006036:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8006038:	b931      	cbnz	r1, 8006048 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800603a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800603e:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8006040:	2000      	movs	r0, #0
 8006042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800604a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800604c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8006050:	2300      	movs	r3, #0
 8006052:	e008      	b.n	8006066 <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006054:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8006058:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800605c:	6849      	ldr	r1, [r1, #4]
 800605e:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8006062:	3301      	adds	r3, #1
 8006064:	b2db      	uxtb	r3, r3
 8006066:	f10c 31ff 	add.w	r1, ip, #4294967295
 800606a:	428b      	cmp	r3, r1
 800606c:	d3f2      	bcc.n	8006054 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800606e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8006072:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 8006076:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800607a:	6060      	str	r0, [r4, #4]
 800607c:	e7e0      	b.n	8006040 <HAL_PCDEx_SetTxFiFo+0xe>

0800607e <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800607e:	6803      	ldr	r3, [r0, #0]
 8006080:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8006082:	2000      	movs	r0, #0
 8006084:	4770      	bx	lr

08006086 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006086:	4770      	bx	lr

08006088 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006088:	2800      	cmp	r0, #0
 800608a:	f000 81e0 	beq.w	800644e <HAL_RCC_OscConfig+0x3c6>
{
 800608e:	b570      	push	{r4, r5, r6, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006094:	6803      	ldr	r3, [r0, #0]
 8006096:	f013 0f01 	tst.w	r3, #1
 800609a:	d03b      	beq.n	8006114 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800609c:	4b9f      	ldr	r3, [pc, #636]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 030c 	and.w	r3, r3, #12
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d02c      	beq.n	8006102 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060a8:	4b9c      	ldr	r3, [pc, #624]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d021      	beq.n	80060f8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060b4:	6863      	ldr	r3, [r4, #4]
 80060b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ba:	d04f      	beq.n	800615c <HAL_RCC_OscConfig+0xd4>
 80060bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060c0:	d052      	beq.n	8006168 <HAL_RCC_OscConfig+0xe0>
 80060c2:	4b96      	ldr	r3, [pc, #600]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80060d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060d4:	6863      	ldr	r3, [r4, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d050      	beq.n	800617c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060da:	f7fd ff8b 	bl	8003ff4 <HAL_GetTick>
 80060de:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060e0:	4b8e      	ldr	r3, [pc, #568]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80060e8:	d114      	bne.n	8006114 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060ea:	f7fd ff83 	bl	8003ff4 <HAL_GetTick>
 80060ee:	1b40      	subs	r0, r0, r5
 80060f0:	2864      	cmp	r0, #100	@ 0x64
 80060f2:	d9f5      	bls.n	80060e0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80060f4:	2003      	movs	r0, #3
 80060f6:	e1b1      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060f8:	4b88      	ldr	r3, [pc, #544]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8006100:	d0d8      	beq.n	80060b4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006102:	4b86      	ldr	r3, [pc, #536]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800610a:	d003      	beq.n	8006114 <HAL_RCC_OscConfig+0x8c>
 800610c:	6863      	ldr	r3, [r4, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 819f 	beq.w	8006452 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	f013 0f02 	tst.w	r3, #2
 800611a:	d054      	beq.n	80061c6 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800611c:	4b7f      	ldr	r3, [pc, #508]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f013 0f0c 	tst.w	r3, #12
 8006124:	d03e      	beq.n	80061a4 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006126:	4b7d      	ldr	r3, [pc, #500]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800612e:	2b08      	cmp	r3, #8
 8006130:	d033      	beq.n	800619a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006132:	68e3      	ldr	r3, [r4, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d068      	beq.n	800620a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006138:	4b79      	ldr	r3, [pc, #484]	@ (8006320 <HAL_RCC_OscConfig+0x298>)
 800613a:	2201      	movs	r2, #1
 800613c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613e:	f7fd ff59 	bl	8003ff4 <HAL_GetTick>
 8006142:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006144:	4b75      	ldr	r3, [pc, #468]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f013 0f02 	tst.w	r3, #2
 800614c:	d154      	bne.n	80061f8 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800614e:	f7fd ff51 	bl	8003ff4 <HAL_GetTick>
 8006152:	1b40      	subs	r0, r0, r5
 8006154:	2802      	cmp	r0, #2
 8006156:	d9f5      	bls.n	8006144 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8006158:	2003      	movs	r0, #3
 800615a:	e17f      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800615c:	4a6f      	ldr	r2, [pc, #444]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 800615e:	6813      	ldr	r3, [r2, #0]
 8006160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	e7b5      	b.n	80060d4 <HAL_RCC_OscConfig+0x4c>
 8006168:	4b6c      	ldr	r3, [pc, #432]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	e7ab      	b.n	80060d4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800617c:	f7fd ff3a 	bl	8003ff4 <HAL_GetTick>
 8006180:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006182:	4b66      	ldr	r3, [pc, #408]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800618a:	d0c3      	beq.n	8006114 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800618c:	f7fd ff32 	bl	8003ff4 <HAL_GetTick>
 8006190:	1b40      	subs	r0, r0, r5
 8006192:	2864      	cmp	r0, #100	@ 0x64
 8006194:	d9f5      	bls.n	8006182 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8006196:	2003      	movs	r0, #3
 8006198:	e160      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800619a:	4b60      	ldr	r3, [pc, #384]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80061a2:	d1c6      	bne.n	8006132 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061a4:	4b5d      	ldr	r3, [pc, #372]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f013 0f02 	tst.w	r3, #2
 80061ac:	d003      	beq.n	80061b6 <HAL_RCC_OscConfig+0x12e>
 80061ae:	68e3      	ldr	r3, [r4, #12]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	f040 8150 	bne.w	8006456 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061b6:	4a59      	ldr	r2, [pc, #356]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 80061b8:	6813      	ldr	r3, [r2, #0]
 80061ba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80061be:	6921      	ldr	r1, [r4, #16]
 80061c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80061c4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	f013 0f08 	tst.w	r3, #8
 80061cc:	d042      	beq.n	8006254 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061ce:	6963      	ldr	r3, [r4, #20]
 80061d0:	b36b      	cbz	r3, 800622e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061d2:	4b53      	ldr	r3, [pc, #332]	@ (8006320 <HAL_RCC_OscConfig+0x298>)
 80061d4:	2201      	movs	r2, #1
 80061d6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061da:	f7fd ff0b 	bl	8003ff4 <HAL_GetTick>
 80061de:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061e0:	4b4e      	ldr	r3, [pc, #312]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 80061e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061e4:	f013 0f02 	tst.w	r3, #2
 80061e8:	d134      	bne.n	8006254 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ea:	f7fd ff03 	bl	8003ff4 <HAL_GetTick>
 80061ee:	1b40      	subs	r0, r0, r5
 80061f0:	2802      	cmp	r0, #2
 80061f2:	d9f5      	bls.n	80061e0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80061f4:	2003      	movs	r0, #3
 80061f6:	e131      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061f8:	4a48      	ldr	r2, [pc, #288]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 80061fa:	6813      	ldr	r3, [r2, #0]
 80061fc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006200:	6921      	ldr	r1, [r4, #16]
 8006202:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	e7dd      	b.n	80061c6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800620a:	4b45      	ldr	r3, [pc, #276]	@ (8006320 <HAL_RCC_OscConfig+0x298>)
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006210:	f7fd fef0 	bl	8003ff4 <HAL_GetTick>
 8006214:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006216:	4b41      	ldr	r3, [pc, #260]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f013 0f02 	tst.w	r3, #2
 800621e:	d0d2      	beq.n	80061c6 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006220:	f7fd fee8 	bl	8003ff4 <HAL_GetTick>
 8006224:	1b40      	subs	r0, r0, r5
 8006226:	2802      	cmp	r0, #2
 8006228:	d9f5      	bls.n	8006216 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800622a:	2003      	movs	r0, #3
 800622c:	e116      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800622e:	4b3c      	ldr	r3, [pc, #240]	@ (8006320 <HAL_RCC_OscConfig+0x298>)
 8006230:	2200      	movs	r2, #0
 8006232:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006236:	f7fd fedd 	bl	8003ff4 <HAL_GetTick>
 800623a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800623c:	4b37      	ldr	r3, [pc, #220]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 800623e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006240:	f013 0f02 	tst.w	r3, #2
 8006244:	d006      	beq.n	8006254 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006246:	f7fd fed5 	bl	8003ff4 <HAL_GetTick>
 800624a:	1b40      	subs	r0, r0, r5
 800624c:	2802      	cmp	r0, #2
 800624e:	d9f5      	bls.n	800623c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8006250:	2003      	movs	r0, #3
 8006252:	e103      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	f013 0f04 	tst.w	r3, #4
 800625a:	d077      	beq.n	800634c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800625c:	4b2f      	ldr	r3, [pc, #188]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 800625e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006260:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8006264:	d133      	bne.n	80062ce <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006266:	2300      	movs	r3, #0
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	4b2c      	ldr	r3, [pc, #176]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 800626c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800626e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006272:	641a      	str	r2, [r3, #64]	@ 0x40
 8006274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800627e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006280:	4b28      	ldr	r3, [pc, #160]	@ (8006324 <HAL_RCC_OscConfig+0x29c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006288:	d023      	beq.n	80062d2 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800628a:	68a3      	ldr	r3, [r4, #8]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d034      	beq.n	80062fa <HAL_RCC_OscConfig+0x272>
 8006290:	2b05      	cmp	r3, #5
 8006292:	d038      	beq.n	8006306 <HAL_RCC_OscConfig+0x27e>
 8006294:	4b21      	ldr	r3, [pc, #132]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 8006296:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006298:	f022 0201 	bic.w	r2, r2, #1
 800629c:	671a      	str	r2, [r3, #112]	@ 0x70
 800629e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062a0:	f022 0204 	bic.w	r2, r2, #4
 80062a4:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062a6:	68a3      	ldr	r3, [r4, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d03d      	beq.n	8006328 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ac:	f7fd fea2 	bl	8003ff4 <HAL_GetTick>
 80062b0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b2:	4b1a      	ldr	r3, [pc, #104]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b6:	f013 0f02 	tst.w	r3, #2
 80062ba:	d146      	bne.n	800634a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062bc:	f7fd fe9a 	bl	8003ff4 <HAL_GetTick>
 80062c0:	1b80      	subs	r0, r0, r6
 80062c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80062c6:	4298      	cmp	r0, r3
 80062c8:	d9f3      	bls.n	80062b2 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80062ca:	2003      	movs	r0, #3
 80062cc:	e0c6      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80062ce:	2500      	movs	r5, #0
 80062d0:	e7d6      	b.n	8006280 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062d2:	4a14      	ldr	r2, [pc, #80]	@ (8006324 <HAL_RCC_OscConfig+0x29c>)
 80062d4:	6813      	ldr	r3, [r2, #0]
 80062d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062da:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80062dc:	f7fd fe8a 	bl	8003ff4 <HAL_GetTick>
 80062e0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e2:	4b10      	ldr	r3, [pc, #64]	@ (8006324 <HAL_RCC_OscConfig+0x29c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80062ea:	d1ce      	bne.n	800628a <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ec:	f7fd fe82 	bl	8003ff4 <HAL_GetTick>
 80062f0:	1b80      	subs	r0, r0, r6
 80062f2:	2802      	cmp	r0, #2
 80062f4:	d9f5      	bls.n	80062e2 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80062f6:	2003      	movs	r0, #3
 80062f8:	e0b0      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062fa:	4a08      	ldr	r2, [pc, #32]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 80062fc:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80062fe:	f043 0301 	orr.w	r3, r3, #1
 8006302:	6713      	str	r3, [r2, #112]	@ 0x70
 8006304:	e7cf      	b.n	80062a6 <HAL_RCC_OscConfig+0x21e>
 8006306:	4b05      	ldr	r3, [pc, #20]	@ (800631c <HAL_RCC_OscConfig+0x294>)
 8006308:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800630a:	f042 0204 	orr.w	r2, r2, #4
 800630e:	671a      	str	r2, [r3, #112]	@ 0x70
 8006310:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006312:	f042 0201 	orr.w	r2, r2, #1
 8006316:	671a      	str	r2, [r3, #112]	@ 0x70
 8006318:	e7c5      	b.n	80062a6 <HAL_RCC_OscConfig+0x21e>
 800631a:	bf00      	nop
 800631c:	40023800 	.word	0x40023800
 8006320:	42470000 	.word	0x42470000
 8006324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006328:	f7fd fe64 	bl	8003ff4 <HAL_GetTick>
 800632c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800632e:	4b52      	ldr	r3, [pc, #328]	@ (8006478 <HAL_RCC_OscConfig+0x3f0>)
 8006330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006332:	f013 0f02 	tst.w	r3, #2
 8006336:	d008      	beq.n	800634a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006338:	f7fd fe5c 	bl	8003ff4 <HAL_GetTick>
 800633c:	1b80      	subs	r0, r0, r6
 800633e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006342:	4298      	cmp	r0, r3
 8006344:	d9f3      	bls.n	800632e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8006346:	2003      	movs	r0, #3
 8006348:	e088      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800634a:	b9ed      	cbnz	r5, 8006388 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800634c:	69a3      	ldr	r3, [r4, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 8083 	beq.w	800645a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006354:	4a48      	ldr	r2, [pc, #288]	@ (8006478 <HAL_RCC_OscConfig+0x3f0>)
 8006356:	6892      	ldr	r2, [r2, #8]
 8006358:	f002 020c 	and.w	r2, r2, #12
 800635c:	2a08      	cmp	r2, #8
 800635e:	d051      	beq.n	8006404 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006360:	2b02      	cmp	r3, #2
 8006362:	d017      	beq.n	8006394 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006364:	4b45      	ldr	r3, [pc, #276]	@ (800647c <HAL_RCC_OscConfig+0x3f4>)
 8006366:	2200      	movs	r2, #0
 8006368:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636a:	f7fd fe43 	bl	8003ff4 <HAL_GetTick>
 800636e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006370:	4b41      	ldr	r3, [pc, #260]	@ (8006478 <HAL_RCC_OscConfig+0x3f0>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006378:	d042      	beq.n	8006400 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800637a:	f7fd fe3b 	bl	8003ff4 <HAL_GetTick>
 800637e:	1b00      	subs	r0, r0, r4
 8006380:	2802      	cmp	r0, #2
 8006382:	d9f5      	bls.n	8006370 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006384:	2003      	movs	r0, #3
 8006386:	e069      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006388:	4a3b      	ldr	r2, [pc, #236]	@ (8006478 <HAL_RCC_OscConfig+0x3f0>)
 800638a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800638c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006390:	6413      	str	r3, [r2, #64]	@ 0x40
 8006392:	e7db      	b.n	800634c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8006394:	4b39      	ldr	r3, [pc, #228]	@ (800647c <HAL_RCC_OscConfig+0x3f4>)
 8006396:	2200      	movs	r2, #0
 8006398:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800639a:	f7fd fe2b 	bl	8003ff4 <HAL_GetTick>
 800639e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063a0:	4b35      	ldr	r3, [pc, #212]	@ (8006478 <HAL_RCC_OscConfig+0x3f0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80063a8:	d006      	beq.n	80063b8 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063aa:	f7fd fe23 	bl	8003ff4 <HAL_GetTick>
 80063ae:	1b40      	subs	r0, r0, r5
 80063b0:	2802      	cmp	r0, #2
 80063b2:	d9f5      	bls.n	80063a0 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80063b4:	2003      	movs	r0, #3
 80063b6:	e051      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063b8:	69e3      	ldr	r3, [r4, #28]
 80063ba:	6a22      	ldr	r2, [r4, #32]
 80063bc:	4313      	orrs	r3, r2
 80063be:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80063c0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80063c4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80063c6:	0852      	lsrs	r2, r2, #1
 80063c8:	3a01      	subs	r2, #1
 80063ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80063d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80063d4:	4a28      	ldr	r2, [pc, #160]	@ (8006478 <HAL_RCC_OscConfig+0x3f0>)
 80063d6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80063d8:	4b28      	ldr	r3, [pc, #160]	@ (800647c <HAL_RCC_OscConfig+0x3f4>)
 80063da:	2201      	movs	r2, #1
 80063dc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80063de:	f7fd fe09 	bl	8003ff4 <HAL_GetTick>
 80063e2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063e4:	4b24      	ldr	r3, [pc, #144]	@ (8006478 <HAL_RCC_OscConfig+0x3f0>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80063ec:	d106      	bne.n	80063fc <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ee:	f7fd fe01 	bl	8003ff4 <HAL_GetTick>
 80063f2:	1b00      	subs	r0, r0, r4
 80063f4:	2802      	cmp	r0, #2
 80063f6:	d9f5      	bls.n	80063e4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80063f8:	2003      	movs	r0, #3
 80063fa:	e02f      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80063fc:	2000      	movs	r0, #0
 80063fe:	e02d      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
 8006400:	2000      	movs	r0, #0
 8006402:	e02b      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006404:	2b01      	cmp	r3, #1
 8006406:	d02b      	beq.n	8006460 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8006408:	4b1b      	ldr	r3, [pc, #108]	@ (8006478 <HAL_RCC_OscConfig+0x3f0>)
 800640a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800640c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8006410:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006412:	4291      	cmp	r1, r2
 8006414:	d126      	bne.n	8006464 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006416:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800641a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800641c:	428a      	cmp	r2, r1
 800641e:	d123      	bne.n	8006468 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006420:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006422:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8006426:	401a      	ands	r2, r3
 8006428:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800642c:	d11e      	bne.n	800646c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800642e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8006432:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006434:	0852      	lsrs	r2, r2, #1
 8006436:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006438:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800643c:	d118      	bne.n	8006470 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800643e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8006442:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006444:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8006448:	d114      	bne.n	8006474 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800644a:	2000      	movs	r0, #0
 800644c:	e006      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800644e:	2001      	movs	r0, #1
}
 8006450:	4770      	bx	lr
        return HAL_ERROR;
 8006452:	2001      	movs	r0, #1
 8006454:	e002      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8006456:	2001      	movs	r0, #1
 8006458:	e000      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800645a:	2000      	movs	r0, #0
}
 800645c:	b002      	add	sp, #8
 800645e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006460:	2001      	movs	r0, #1
 8006462:	e7fb      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8006464:	2001      	movs	r0, #1
 8006466:	e7f9      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
 8006468:	2001      	movs	r0, #1
 800646a:	e7f7      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
 800646c:	2001      	movs	r0, #1
 800646e:	e7f5      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
 8006470:	2001      	movs	r0, #1
 8006472:	e7f3      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
 8006474:	2001      	movs	r0, #1
 8006476:	e7f1      	b.n	800645c <HAL_RCC_OscConfig+0x3d4>
 8006478:	40023800 	.word	0x40023800
 800647c:	42470000 	.word	0x42470000

08006480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006480:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006482:	4b26      	ldr	r3, [pc, #152]	@ (800651c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 030c 	and.w	r3, r3, #12
 800648a:	2b04      	cmp	r3, #4
 800648c:	d041      	beq.n	8006512 <HAL_RCC_GetSysClockFreq+0x92>
 800648e:	2b08      	cmp	r3, #8
 8006490:	d141      	bne.n	8006516 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006492:	4b22      	ldr	r3, [pc, #136]	@ (800651c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80064a0:	d012      	beq.n	80064c8 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064a2:	4b1e      	ldr	r3, [pc, #120]	@ (800651c <HAL_RCC_GetSysClockFreq+0x9c>)
 80064a4:	6859      	ldr	r1, [r3, #4]
 80064a6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80064aa:	481d      	ldr	r0, [pc, #116]	@ (8006520 <HAL_RCC_GetSysClockFreq+0xa0>)
 80064ac:	2300      	movs	r3, #0
 80064ae:	fba1 0100 	umull	r0, r1, r1, r0
 80064b2:	f7fa fabb 	bl	8000a2c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80064b6:	4b19      	ldr	r3, [pc, #100]	@ (800651c <HAL_RCC_GetSysClockFreq+0x9c>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80064be:	3301      	adds	r3, #1
 80064c0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80064c2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80064c6:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064c8:	4b14      	ldr	r3, [pc, #80]	@ (800651c <HAL_RCC_GetSysClockFreq+0x9c>)
 80064ca:	6858      	ldr	r0, [r3, #4]
 80064cc:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80064d0:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80064d4:	ebbc 0c00 	subs.w	ip, ip, r0
 80064d8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80064dc:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80064e0:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80064e4:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80064e8:	ebb1 010c 	subs.w	r1, r1, ip
 80064ec:	eb63 030e 	sbc.w	r3, r3, lr
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064f6:	00c9      	lsls	r1, r1, #3
 80064f8:	eb11 0c00 	adds.w	ip, r1, r0
 80064fc:	f143 0300 	adc.w	r3, r3, #0
 8006500:	0299      	lsls	r1, r3, #10
 8006502:	2300      	movs	r3, #0
 8006504:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8006508:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800650c:	f7fa fa8e 	bl	8000a2c <__aeabi_uldivmod>
 8006510:	e7d1      	b.n	80064b6 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8006512:	4803      	ldr	r0, [pc, #12]	@ (8006520 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006514:	e7d7      	b.n	80064c6 <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006516:	4803      	ldr	r0, [pc, #12]	@ (8006524 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8006518:	e7d5      	b.n	80064c6 <HAL_RCC_GetSysClockFreq+0x46>
 800651a:	bf00      	nop
 800651c:	40023800 	.word	0x40023800
 8006520:	017d7840 	.word	0x017d7840
 8006524:	00f42400 	.word	0x00f42400

08006528 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006528:	2800      	cmp	r0, #0
 800652a:	f000 809b 	beq.w	8006664 <HAL_RCC_ClockConfig+0x13c>
{
 800652e:	b570      	push	{r4, r5, r6, lr}
 8006530:	460d      	mov	r5, r1
 8006532:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006534:	4b4f      	ldr	r3, [pc, #316]	@ (8006674 <HAL_RCC_ClockConfig+0x14c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	428b      	cmp	r3, r1
 800653e:	d208      	bcs.n	8006552 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006540:	b2cb      	uxtb	r3, r1
 8006542:	4a4c      	ldr	r2, [pc, #304]	@ (8006674 <HAL_RCC_ClockConfig+0x14c>)
 8006544:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006546:	6813      	ldr	r3, [r2, #0]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	428b      	cmp	r3, r1
 800654e:	f040 808b 	bne.w	8006668 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	f013 0f02 	tst.w	r3, #2
 8006558:	d017      	beq.n	800658a <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800655a:	f013 0f04 	tst.w	r3, #4
 800655e:	d004      	beq.n	800656a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006560:	4a45      	ldr	r2, [pc, #276]	@ (8006678 <HAL_RCC_ClockConfig+0x150>)
 8006562:	6893      	ldr	r3, [r2, #8]
 8006564:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006568:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	f013 0f08 	tst.w	r3, #8
 8006570:	d004      	beq.n	800657c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006572:	4a41      	ldr	r2, [pc, #260]	@ (8006678 <HAL_RCC_ClockConfig+0x150>)
 8006574:	6893      	ldr	r3, [r2, #8]
 8006576:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800657a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800657c:	4a3e      	ldr	r2, [pc, #248]	@ (8006678 <HAL_RCC_ClockConfig+0x150>)
 800657e:	6893      	ldr	r3, [r2, #8]
 8006580:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006584:	68a1      	ldr	r1, [r4, #8]
 8006586:	430b      	orrs	r3, r1
 8006588:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	f013 0f01 	tst.w	r3, #1
 8006590:	d032      	beq.n	80065f8 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006592:	6863      	ldr	r3, [r4, #4]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d021      	beq.n	80065dc <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006598:	1e9a      	subs	r2, r3, #2
 800659a:	2a01      	cmp	r2, #1
 800659c:	d925      	bls.n	80065ea <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800659e:	4a36      	ldr	r2, [pc, #216]	@ (8006678 <HAL_RCC_ClockConfig+0x150>)
 80065a0:	6812      	ldr	r2, [r2, #0]
 80065a2:	f012 0f02 	tst.w	r2, #2
 80065a6:	d061      	beq.n	800666c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065a8:	4933      	ldr	r1, [pc, #204]	@ (8006678 <HAL_RCC_ClockConfig+0x150>)
 80065aa:	688a      	ldr	r2, [r1, #8]
 80065ac:	f022 0203 	bic.w	r2, r2, #3
 80065b0:	4313      	orrs	r3, r2
 80065b2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80065b4:	f7fd fd1e 	bl	8003ff4 <HAL_GetTick>
 80065b8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006678 <HAL_RCC_ClockConfig+0x150>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 030c 	and.w	r3, r3, #12
 80065c2:	6862      	ldr	r2, [r4, #4]
 80065c4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80065c8:	d016      	beq.n	80065f8 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065ca:	f7fd fd13 	bl	8003ff4 <HAL_GetTick>
 80065ce:	1b80      	subs	r0, r0, r6
 80065d0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80065d4:	4298      	cmp	r0, r3
 80065d6:	d9f0      	bls.n	80065ba <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80065d8:	2003      	movs	r0, #3
 80065da:	e042      	b.n	8006662 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065dc:	4a26      	ldr	r2, [pc, #152]	@ (8006678 <HAL_RCC_ClockConfig+0x150>)
 80065de:	6812      	ldr	r2, [r2, #0]
 80065e0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80065e4:	d1e0      	bne.n	80065a8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80065e6:	2001      	movs	r0, #1
 80065e8:	e03b      	b.n	8006662 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ea:	4a23      	ldr	r2, [pc, #140]	@ (8006678 <HAL_RCC_ClockConfig+0x150>)
 80065ec:	6812      	ldr	r2, [r2, #0]
 80065ee:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80065f2:	d1d9      	bne.n	80065a8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80065f4:	2001      	movs	r0, #1
 80065f6:	e034      	b.n	8006662 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006674 <HAL_RCC_ClockConfig+0x14c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	42ab      	cmp	r3, r5
 8006602:	d907      	bls.n	8006614 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006604:	b2ea      	uxtb	r2, r5
 8006606:	4b1b      	ldr	r3, [pc, #108]	@ (8006674 <HAL_RCC_ClockConfig+0x14c>)
 8006608:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	42ab      	cmp	r3, r5
 8006612:	d12d      	bne.n	8006670 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	f013 0f04 	tst.w	r3, #4
 800661a:	d006      	beq.n	800662a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800661c:	4a16      	ldr	r2, [pc, #88]	@ (8006678 <HAL_RCC_ClockConfig+0x150>)
 800661e:	6893      	ldr	r3, [r2, #8]
 8006620:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8006624:	68e1      	ldr	r1, [r4, #12]
 8006626:	430b      	orrs	r3, r1
 8006628:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	f013 0f08 	tst.w	r3, #8
 8006630:	d007      	beq.n	8006642 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006632:	4a11      	ldr	r2, [pc, #68]	@ (8006678 <HAL_RCC_ClockConfig+0x150>)
 8006634:	6893      	ldr	r3, [r2, #8]
 8006636:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800663a:	6921      	ldr	r1, [r4, #16]
 800663c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006640:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006642:	f7ff ff1d 	bl	8006480 <HAL_RCC_GetSysClockFreq>
 8006646:	4b0c      	ldr	r3, [pc, #48]	@ (8006678 <HAL_RCC_ClockConfig+0x150>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800664e:	4a0b      	ldr	r2, [pc, #44]	@ (800667c <HAL_RCC_ClockConfig+0x154>)
 8006650:	5cd3      	ldrb	r3, [r2, r3]
 8006652:	40d8      	lsrs	r0, r3
 8006654:	4b0a      	ldr	r3, [pc, #40]	@ (8006680 <HAL_RCC_ClockConfig+0x158>)
 8006656:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006658:	4b0a      	ldr	r3, [pc, #40]	@ (8006684 <HAL_RCC_ClockConfig+0x15c>)
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	f000 fdee 	bl	800723c <HAL_InitTick>
  return HAL_OK;
 8006660:	2000      	movs	r0, #0
}
 8006662:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006664:	2001      	movs	r0, #1
}
 8006666:	4770      	bx	lr
      return HAL_ERROR;
 8006668:	2001      	movs	r0, #1
 800666a:	e7fa      	b.n	8006662 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800666c:	2001      	movs	r0, #1
 800666e:	e7f8      	b.n	8006662 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8006670:	2001      	movs	r0, #1
 8006672:	e7f6      	b.n	8006662 <HAL_RCC_ClockConfig+0x13a>
 8006674:	40023c00 	.word	0x40023c00
 8006678:	40023800 	.word	0x40023800
 800667c:	0800d1ec 	.word	0x0800d1ec
 8006680:	20000070 	.word	0x20000070
 8006684:	2000006c 	.word	0x2000006c

08006688 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8006688:	4b01      	ldr	r3, [pc, #4]	@ (8006690 <HAL_RCC_GetHCLKFreq+0x8>)
 800668a:	6818      	ldr	r0, [r3, #0]
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	20000070 	.word	0x20000070

08006694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006694:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006696:	f7ff fff7 	bl	8006688 <HAL_RCC_GetHCLKFreq>
 800669a:	4b04      	ldr	r3, [pc, #16]	@ (80066ac <HAL_RCC_GetPCLK1Freq+0x18>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80066a2:	4a03      	ldr	r2, [pc, #12]	@ (80066b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80066a4:	5cd3      	ldrb	r3, [r2, r3]
}
 80066a6:	40d8      	lsrs	r0, r3
 80066a8:	bd08      	pop	{r3, pc}
 80066aa:	bf00      	nop
 80066ac:	40023800 	.word	0x40023800
 80066b0:	0800d1e4 	.word	0x0800d1e4

080066b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066b4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066b6:	f7ff ffe7 	bl	8006688 <HAL_RCC_GetHCLKFreq>
 80066ba:	4b04      	ldr	r3, [pc, #16]	@ (80066cc <HAL_RCC_GetPCLK2Freq+0x18>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80066c2:	4a03      	ldr	r2, [pc, #12]	@ (80066d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80066c4:	5cd3      	ldrb	r3, [r2, r3]
}
 80066c6:	40d8      	lsrs	r0, r3
 80066c8:	bd08      	pop	{r3, pc}
 80066ca:	bf00      	nop
 80066cc:	40023800 	.word	0x40023800
 80066d0:	0800d1e4 	.word	0x0800d1e4

080066d4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80066d4:	230f      	movs	r3, #15
 80066d6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80066d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006708 <HAL_RCC_GetClockConfig+0x34>)
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	f002 0203 	and.w	r2, r2, #3
 80066e0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80066e8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80066f0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	08db      	lsrs	r3, r3, #3
 80066f6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80066fa:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80066fc:	4b03      	ldr	r3, [pc, #12]	@ (800670c <HAL_RCC_GetClockConfig+0x38>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	600b      	str	r3, [r1, #0]
}
 8006706:	4770      	bx	lr
 8006708:	40023800 	.word	0x40023800
 800670c:	40023c00 	.word	0x40023c00

08006710 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006712:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006714:	6a03      	ldr	r3, [r0, #32]
 8006716:	f023 0301 	bic.w	r3, r3, #1
 800671a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800671c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800671e:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006720:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006724:	680c      	ldr	r4, [r1, #0]
 8006726:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006728:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800672c:	688b      	ldr	r3, [r1, #8]
 800672e:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006730:	4a0b      	ldr	r2, [pc, #44]	@ (8006760 <TIM_OC1_SetConfig+0x50>)
 8006732:	4290      	cmp	r0, r2
 8006734:	d006      	beq.n	8006744 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006736:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006738:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800673a:	684a      	ldr	r2, [r1, #4]
 800673c:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800673e:	6203      	str	r3, [r0, #32]
}
 8006740:	bc30      	pop	{r4, r5}
 8006742:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8006744:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006748:	68ca      	ldr	r2, [r1, #12]
 800674a:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 800674c:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006750:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8006754:	694a      	ldr	r2, [r1, #20]
 8006756:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8006758:	698d      	ldr	r5, [r1, #24]
 800675a:	4315      	orrs	r5, r2
 800675c:	e7eb      	b.n	8006736 <TIM_OC1_SetConfig+0x26>
 800675e:	bf00      	nop
 8006760:	40010000 	.word	0x40010000

08006764 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006764:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006766:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006768:	6a02      	ldr	r2, [r0, #32]
 800676a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800676e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006770:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006772:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006774:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006778:	680d      	ldr	r5, [r1, #0]
 800677a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800677c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006780:	688a      	ldr	r2, [r1, #8]
 8006782:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006786:	4a0d      	ldr	r2, [pc, #52]	@ (80067bc <TIM_OC3_SetConfig+0x58>)
 8006788:	4290      	cmp	r0, r2
 800678a:	d006      	beq.n	800679a <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800678c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800678e:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006790:	684a      	ldr	r2, [r1, #4]
 8006792:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006794:	6203      	str	r3, [r0, #32]
}
 8006796:	bc30      	pop	{r4, r5}
 8006798:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800679a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800679e:	68ca      	ldr	r2, [r1, #12]
 80067a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80067a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067a8:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067ac:	694a      	ldr	r2, [r1, #20]
 80067ae:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067b2:	698a      	ldr	r2, [r1, #24]
 80067b4:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 80067b8:	e7e8      	b.n	800678c <TIM_OC3_SetConfig+0x28>
 80067ba:	bf00      	nop
 80067bc:	40010000 	.word	0x40010000

080067c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067c0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067c4:	6a02      	ldr	r2, [r0, #32]
 80067c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80067ca:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ce:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067d0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d4:	680d      	ldr	r5, [r1, #0]
 80067d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067de:	688d      	ldr	r5, [r1, #8]
 80067e0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e4:	4d07      	ldr	r5, [pc, #28]	@ (8006804 <TIM_OC4_SetConfig+0x44>)
 80067e6:	42a8      	cmp	r0, r5
 80067e8:	d006      	beq.n	80067f8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ea:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ec:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067ee:	684a      	ldr	r2, [r1, #4]
 80067f0:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f2:	6203      	str	r3, [r0, #32]
}
 80067f4:	bc30      	pop	{r4, r5}
 80067f6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067f8:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067fc:	694d      	ldr	r5, [r1, #20]
 80067fe:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8006802:	e7f2      	b.n	80067ea <TIM_OC4_SetConfig+0x2a>
 8006804:	40010000 	.word	0x40010000

08006808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006808:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800680a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800680c:	6a04      	ldr	r4, [r0, #32]
 800680e:	f024 0401 	bic.w	r4, r4, #1
 8006812:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006814:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006816:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800681a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800681e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8006822:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006824:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006826:	6203      	str	r3, [r0, #32]
}
 8006828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800682c:	4770      	bx	lr

0800682e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800682e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006830:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006832:	6a04      	ldr	r4, [r0, #32]
 8006834:	f024 0410 	bic.w	r4, r4, #16
 8006838:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800683a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800683c:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006840:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006844:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006848:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800684c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800684e:	6203      	str	r3, [r0, #32]
}
 8006850:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006854:	4770      	bx	lr

08006856 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006856:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800685c:	430b      	orrs	r3, r1
 800685e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006862:	6083      	str	r3, [r0, #8]
}
 8006864:	4770      	bx	lr
	...

08006868 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006868:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800686c:	2b01      	cmp	r3, #1
 800686e:	d12a      	bne.n	80068c6 <HAL_TIM_Base_Start+0x5e>
  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	2302      	movs	r3, #2
 8006872:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006876:	6803      	ldr	r3, [r0, #0]
 8006878:	4a15      	ldr	r2, [pc, #84]	@ (80068d0 <HAL_TIM_Base_Start+0x68>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d018      	beq.n	80068b0 <HAL_TIM_Base_Start+0x48>
 800687e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006882:	d015      	beq.n	80068b0 <HAL_TIM_Base_Start+0x48>
 8006884:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006888:	4293      	cmp	r3, r2
 800688a:	d011      	beq.n	80068b0 <HAL_TIM_Base_Start+0x48>
 800688c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006890:	4293      	cmp	r3, r2
 8006892:	d00d      	beq.n	80068b0 <HAL_TIM_Base_Start+0x48>
 8006894:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006898:	4293      	cmp	r3, r2
 800689a:	d009      	beq.n	80068b0 <HAL_TIM_Base_Start+0x48>
 800689c:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d005      	beq.n	80068b0 <HAL_TIM_Base_Start+0x48>
    __HAL_TIM_ENABLE(htim);
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80068ac:	2000      	movs	r0, #0
 80068ae:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b6:	2a06      	cmp	r2, #6
 80068b8:	d007      	beq.n	80068ca <HAL_TIM_Base_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	f042 0201 	orr.w	r2, r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80068c2:	2000      	movs	r0, #0
 80068c4:	4770      	bx	lr
    return HAL_ERROR;
 80068c6:	2001      	movs	r0, #1
 80068c8:	4770      	bx	lr
  return HAL_OK;
 80068ca:	2000      	movs	r0, #0
}
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40010000 	.word	0x40010000

080068d4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80068d4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d12f      	bne.n	800693c <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 80068dc:	2302      	movs	r3, #2
 80068de:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068e2:	6802      	ldr	r2, [r0, #0]
 80068e4:	68d3      	ldr	r3, [r2, #12]
 80068e6:	f043 0301 	orr.w	r3, r3, #1
 80068ea:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ec:	6803      	ldr	r3, [r0, #0]
 80068ee:	4a15      	ldr	r2, [pc, #84]	@ (8006944 <HAL_TIM_Base_Start_IT+0x70>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d018      	beq.n	8006926 <HAL_TIM_Base_Start_IT+0x52>
 80068f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068f8:	d015      	beq.n	8006926 <HAL_TIM_Base_Start_IT+0x52>
 80068fa:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80068fe:	4293      	cmp	r3, r2
 8006900:	d011      	beq.n	8006926 <HAL_TIM_Base_Start_IT+0x52>
 8006902:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006906:	4293      	cmp	r3, r2
 8006908:	d00d      	beq.n	8006926 <HAL_TIM_Base_Start_IT+0x52>
 800690a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800690e:	4293      	cmp	r3, r2
 8006910:	d009      	beq.n	8006926 <HAL_TIM_Base_Start_IT+0x52>
 8006912:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8006916:	4293      	cmp	r3, r2
 8006918:	d005      	beq.n	8006926 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	f042 0201 	orr.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006922:	2000      	movs	r0, #0
 8006924:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800692c:	2a06      	cmp	r2, #6
 800692e:	d007      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	f042 0201 	orr.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006938:	2000      	movs	r0, #0
 800693a:	4770      	bx	lr
    return HAL_ERROR;
 800693c:	2001      	movs	r0, #1
 800693e:	4770      	bx	lr
  return HAL_OK;
 8006940:	2000      	movs	r0, #0
}
 8006942:	4770      	bx	lr
 8006944:	40010000 	.word	0x40010000

08006948 <HAL_TIM_OC_MspInit>:
}
 8006948:	4770      	bx	lr

0800694a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800694a:	4770      	bx	lr

0800694c <HAL_TIM_IC_CaptureCallback>:
}
 800694c:	4770      	bx	lr

0800694e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800694e:	4770      	bx	lr

08006950 <HAL_TIM_TriggerCallback>:
}
 8006950:	4770      	bx	lr

08006952 <HAL_TIM_IRQHandler>:
{
 8006952:	b570      	push	{r4, r5, r6, lr}
 8006954:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8006956:	6803      	ldr	r3, [r0, #0]
 8006958:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800695a:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800695c:	f015 0f02 	tst.w	r5, #2
 8006960:	d010      	beq.n	8006984 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006962:	f016 0f02 	tst.w	r6, #2
 8006966:	d00d      	beq.n	8006984 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006968:	f06f 0202 	mvn.w	r2, #2
 800696c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800696e:	2301      	movs	r3, #1
 8006970:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006972:	6803      	ldr	r3, [r0, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	f013 0f03 	tst.w	r3, #3
 800697a:	d05e      	beq.n	8006a3a <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 800697c:	f7ff ffe6 	bl	800694c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006980:	2300      	movs	r3, #0
 8006982:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006984:	f015 0f04 	tst.w	r5, #4
 8006988:	d012      	beq.n	80069b0 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800698a:	f016 0f04 	tst.w	r6, #4
 800698e:	d00f      	beq.n	80069b0 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	f06f 0204 	mvn.w	r2, #4
 8006996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006998:	2302      	movs	r3, #2
 800699a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80069a4:	d04f      	beq.n	8006a46 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80069a6:	4620      	mov	r0, r4
 80069a8:	f7ff ffd0 	bl	800694c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ac:	2300      	movs	r3, #0
 80069ae:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069b0:	f015 0f08 	tst.w	r5, #8
 80069b4:	d012      	beq.n	80069dc <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069b6:	f016 0f08 	tst.w	r6, #8
 80069ba:	d00f      	beq.n	80069dc <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	f06f 0208 	mvn.w	r2, #8
 80069c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069c4:	2304      	movs	r3, #4
 80069c6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	f013 0f03 	tst.w	r3, #3
 80069d0:	d040      	beq.n	8006a54 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80069d2:	4620      	mov	r0, r4
 80069d4:	f7ff ffba 	bl	800694c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d8:	2300      	movs	r3, #0
 80069da:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069dc:	f015 0f10 	tst.w	r5, #16
 80069e0:	d012      	beq.n	8006a08 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069e2:	f016 0f10 	tst.w	r6, #16
 80069e6:	d00f      	beq.n	8006a08 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	f06f 0210 	mvn.w	r2, #16
 80069ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069f0:	2308      	movs	r3, #8
 80069f2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80069fc:	d031      	beq.n	8006a62 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80069fe:	4620      	mov	r0, r4
 8006a00:	f7ff ffa4 	bl	800694c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a04:	2300      	movs	r3, #0
 8006a06:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a08:	f015 0f01 	tst.w	r5, #1
 8006a0c:	d002      	beq.n	8006a14 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a0e:	f016 0f01 	tst.w	r6, #1
 8006a12:	d12d      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a14:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8006a18:	d002      	beq.n	8006a20 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a1a:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8006a1e:	d12f      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a20:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8006a24:	d002      	beq.n	8006a2c <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a26:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8006a2a:	d131      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a2c:	f015 0f20 	tst.w	r5, #32
 8006a30:	d002      	beq.n	8006a38 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a32:	f016 0f20 	tst.w	r6, #32
 8006a36:	d133      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x14e>
}
 8006a38:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3a:	f7ff ff86 	bl	800694a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f7ff ff85 	bl	800694e <HAL_TIM_PWM_PulseFinishedCallback>
 8006a44:	e79c      	b.n	8006980 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a46:	4620      	mov	r0, r4
 8006a48:	f7ff ff7f 	bl	800694a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f7ff ff7e 	bl	800694e <HAL_TIM_PWM_PulseFinishedCallback>
 8006a52:	e7ab      	b.n	80069ac <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a54:	4620      	mov	r0, r4
 8006a56:	f7ff ff78 	bl	800694a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f7ff ff77 	bl	800694e <HAL_TIM_PWM_PulseFinishedCallback>
 8006a60:	e7ba      	b.n	80069d8 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a62:	4620      	mov	r0, r4
 8006a64:	f7ff ff71 	bl	800694a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f7ff ff70 	bl	800694e <HAL_TIM_PWM_PulseFinishedCallback>
 8006a6e:	e7c9      	b.n	8006a04 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	f06f 0201 	mvn.w	r2, #1
 8006a76:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f7fc f9c1 	bl	8002e00 <HAL_TIM_PeriodElapsedCallback>
 8006a7e:	e7c9      	b.n	8006a14 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a86:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f000 fbd5 	bl	8007238 <HAL_TIMEx_BreakCallback>
 8006a8e:	e7c7      	b.n	8006a20 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a96:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f7ff ff59 	bl	8006950 <HAL_TIM_TriggerCallback>
 8006a9e:	e7c5      	b.n	8006a2c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	f06f 0220 	mvn.w	r2, #32
 8006aa6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f000 fbc4 	bl	8007236 <HAL_TIMEx_CommutCallback>
}
 8006aae:	e7c3      	b.n	8006a38 <HAL_TIM_IRQHandler+0xe6>

08006ab0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006ab0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ab2:	4a29      	ldr	r2, [pc, #164]	@ (8006b58 <TIM_Base_SetConfig+0xa8>)
 8006ab4:	4290      	cmp	r0, r2
 8006ab6:	d00e      	beq.n	8006ad6 <TIM_Base_SetConfig+0x26>
 8006ab8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006abc:	d00b      	beq.n	8006ad6 <TIM_Base_SetConfig+0x26>
 8006abe:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006ac2:	4290      	cmp	r0, r2
 8006ac4:	d007      	beq.n	8006ad6 <TIM_Base_SetConfig+0x26>
 8006ac6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006aca:	4290      	cmp	r0, r2
 8006acc:	d003      	beq.n	8006ad6 <TIM_Base_SetConfig+0x26>
 8006ace:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006ad2:	4290      	cmp	r0, r2
 8006ad4:	d103      	bne.n	8006ade <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006ada:	684a      	ldr	r2, [r1, #4]
 8006adc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ade:	4a1e      	ldr	r2, [pc, #120]	@ (8006b58 <TIM_Base_SetConfig+0xa8>)
 8006ae0:	4290      	cmp	r0, r2
 8006ae2:	d01a      	beq.n	8006b1a <TIM_Base_SetConfig+0x6a>
 8006ae4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006ae8:	d017      	beq.n	8006b1a <TIM_Base_SetConfig+0x6a>
 8006aea:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006aee:	4290      	cmp	r0, r2
 8006af0:	d013      	beq.n	8006b1a <TIM_Base_SetConfig+0x6a>
 8006af2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006af6:	4290      	cmp	r0, r2
 8006af8:	d00f      	beq.n	8006b1a <TIM_Base_SetConfig+0x6a>
 8006afa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006afe:	4290      	cmp	r0, r2
 8006b00:	d00b      	beq.n	8006b1a <TIM_Base_SetConfig+0x6a>
 8006b02:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8006b06:	4290      	cmp	r0, r2
 8006b08:	d007      	beq.n	8006b1a <TIM_Base_SetConfig+0x6a>
 8006b0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006b0e:	4290      	cmp	r0, r2
 8006b10:	d003      	beq.n	8006b1a <TIM_Base_SetConfig+0x6a>
 8006b12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006b16:	4290      	cmp	r0, r2
 8006b18:	d103      	bne.n	8006b22 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b1e:	68ca      	ldr	r2, [r1, #12]
 8006b20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b26:	694a      	ldr	r2, [r1, #20]
 8006b28:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006b2a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b2c:	688b      	ldr	r3, [r1, #8]
 8006b2e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006b30:	680b      	ldr	r3, [r1, #0]
 8006b32:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b34:	4b08      	ldr	r3, [pc, #32]	@ (8006b58 <TIM_Base_SetConfig+0xa8>)
 8006b36:	4298      	cmp	r0, r3
 8006b38:	d00a      	beq.n	8006b50 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b3e:	6903      	ldr	r3, [r0, #16]
 8006b40:	f013 0f01 	tst.w	r3, #1
 8006b44:	d003      	beq.n	8006b4e <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b46:	6903      	ldr	r3, [r0, #16]
 8006b48:	f023 0301 	bic.w	r3, r3, #1
 8006b4c:	6103      	str	r3, [r0, #16]
}
 8006b4e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8006b50:	690b      	ldr	r3, [r1, #16]
 8006b52:	6303      	str	r3, [r0, #48]	@ 0x30
 8006b54:	e7f1      	b.n	8006b3a <TIM_Base_SetConfig+0x8a>
 8006b56:	bf00      	nop
 8006b58:	40010000 	.word	0x40010000

08006b5c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006b5c:	b340      	cbz	r0, 8006bb0 <HAL_TIM_Base_Init+0x54>
{
 8006b5e:	b510      	push	{r4, lr}
 8006b60:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006b62:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006b66:	b1f3      	cbz	r3, 8006ba6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006b68:	2302      	movs	r3, #2
 8006b6a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b6e:	4621      	mov	r1, r4
 8006b70:	f851 0b04 	ldr.w	r0, [r1], #4
 8006b74:	f7ff ff9c 	bl	8006ab0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b7e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006b82:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006b86:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006b8a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b8e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b96:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006b9a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006b9e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006ba2:	2000      	movs	r0, #0
}
 8006ba4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006ba6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006baa:	f002 f89f 	bl	8008cec <HAL_TIM_Base_MspInit>
 8006bae:	e7db      	b.n	8006b68 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006bb0:	2001      	movs	r0, #1
}
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8006bb4:	b340      	cbz	r0, 8006c08 <HAL_TIM_OC_Init+0x54>
{
 8006bb6:	b510      	push	{r4, lr}
 8006bb8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006bba:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006bbe:	b1f3      	cbz	r3, 8006bfe <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	f851 0b04 	ldr.w	r0, [r1], #4
 8006bcc:	f7ff ff70 	bl	8006ab0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006bda:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006bde:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006be2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bee:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006bf2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006bf6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006bfa:	2000      	movs	r0, #0
}
 8006bfc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006bfe:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8006c02:	f7ff fea1 	bl	8006948 <HAL_TIM_OC_MspInit>
 8006c06:	e7db      	b.n	8006bc0 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8006c08:	2001      	movs	r0, #1
}
 8006c0a:	4770      	bx	lr

08006c0c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006c0c:	b340      	cbz	r0, 8006c60 <HAL_TIM_PWM_Init+0x54>
{
 8006c0e:	b510      	push	{r4, lr}
 8006c10:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006c12:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006c16:	b1f3      	cbz	r3, 8006c56 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006c18:	2302      	movs	r3, #2
 8006c1a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c1e:	4621      	mov	r1, r4
 8006c20:	f851 0b04 	ldr.w	r0, [r1], #4
 8006c24:	f7ff ff44 	bl	8006ab0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c2e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006c32:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006c36:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006c3a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c3e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c46:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006c4a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006c4e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006c52:	2000      	movs	r0, #0
}
 8006c54:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006c56:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006c5a:	f002 f881 	bl	8008d60 <HAL_TIM_PWM_MspInit>
 8006c5e:	e7db      	b.n	8006c18 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8006c60:	2001      	movs	r0, #1
}
 8006c62:	4770      	bx	lr

08006c64 <TIM_OC2_SetConfig>:
{
 8006c64:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8006c66:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c68:	6a02      	ldr	r2, [r0, #32]
 8006c6a:	f022 0210 	bic.w	r2, r2, #16
 8006c6e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006c70:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006c72:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c74:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c78:	680d      	ldr	r5, [r1, #0]
 8006c7a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006c7e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c82:	688d      	ldr	r5, [r1, #8]
 8006c84:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c88:	4d0c      	ldr	r5, [pc, #48]	@ (8006cbc <TIM_OC2_SetConfig+0x58>)
 8006c8a:	42a8      	cmp	r0, r5
 8006c8c:	d006      	beq.n	8006c9c <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8006c8e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006c90:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006c92:	684a      	ldr	r2, [r1, #4]
 8006c94:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8006c96:	6203      	str	r3, [r0, #32]
}
 8006c98:	bc30      	pop	{r4, r5}
 8006c9a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ca0:	68cd      	ldr	r5, [r1, #12]
 8006ca2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ca6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006caa:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cae:	694d      	ldr	r5, [r1, #20]
 8006cb0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cb4:	698d      	ldr	r5, [r1, #24]
 8006cb6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8006cba:	e7e8      	b.n	8006c8e <TIM_OC2_SetConfig+0x2a>
 8006cbc:	40010000 	.word	0x40010000

08006cc0 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8006cc0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d028      	beq.n	8006d1a <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8006cc8:	b510      	push	{r4, lr}
 8006cca:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8006cd2:	2a0c      	cmp	r2, #12
 8006cd4:	d81c      	bhi.n	8006d10 <HAL_TIM_OC_ConfigChannel+0x50>
 8006cd6:	e8df f002 	tbb	[pc, r2]
 8006cda:	1b07      	.short	0x1b07
 8006cdc:	1b0c1b1b 	.word	0x1b0c1b1b
 8006ce0:	1b111b1b 	.word	0x1b111b1b
 8006ce4:	1b1b      	.short	0x1b1b
 8006ce6:	16          	.byte	0x16
 8006ce7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ce8:	6800      	ldr	r0, [r0, #0]
 8006cea:	f7ff fd11 	bl	8006710 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006cee:	2000      	movs	r0, #0
      break;
 8006cf0:	e00f      	b.n	8006d12 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cf2:	6800      	ldr	r0, [r0, #0]
 8006cf4:	f7ff ffb6 	bl	8006c64 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006cf8:	2000      	movs	r0, #0
      break;
 8006cfa:	e00a      	b.n	8006d12 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cfc:	6800      	ldr	r0, [r0, #0]
 8006cfe:	f7ff fd31 	bl	8006764 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006d02:	2000      	movs	r0, #0
      break;
 8006d04:	e005      	b.n	8006d12 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d06:	6800      	ldr	r0, [r0, #0]
 8006d08:	f7ff fd5a 	bl	80067c0 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006d0c:	2000      	movs	r0, #0
      break;
 8006d0e:	e000      	b.n	8006d12 <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 8006d10:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8006d12:	2300      	movs	r3, #0
 8006d14:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006d18:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8006d1a:	2002      	movs	r0, #2
}
 8006d1c:	4770      	bx	lr

08006d1e <HAL_TIM_PWM_ConfigChannel>:
{
 8006d1e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006d20:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d066      	beq.n	8006df6 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8006d28:	4604      	mov	r4, r0
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8006d32:	2a0c      	cmp	r2, #12
 8006d34:	d85a      	bhi.n	8006dec <HAL_TIM_PWM_ConfigChannel+0xce>
 8006d36:	e8df f002 	tbb	[pc, r2]
 8006d3a:	5907      	.short	0x5907
 8006d3c:	591b5959 	.word	0x591b5959
 8006d40:	59305959 	.word	0x59305959
 8006d44:	5959      	.short	0x5959
 8006d46:	44          	.byte	0x44
 8006d47:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d48:	6800      	ldr	r0, [r0, #0]
 8006d4a:	f7ff fce1 	bl	8006710 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d4e:	6822      	ldr	r2, [r4, #0]
 8006d50:	6993      	ldr	r3, [r2, #24]
 8006d52:	f043 0308 	orr.w	r3, r3, #8
 8006d56:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d58:	6822      	ldr	r2, [r4, #0]
 8006d5a:	6993      	ldr	r3, [r2, #24]
 8006d5c:	f023 0304 	bic.w	r3, r3, #4
 8006d60:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d62:	6822      	ldr	r2, [r4, #0]
 8006d64:	6993      	ldr	r3, [r2, #24]
 8006d66:	6929      	ldr	r1, [r5, #16]
 8006d68:	430b      	orrs	r3, r1
 8006d6a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006d6c:	2000      	movs	r0, #0
      break;
 8006d6e:	e03e      	b.n	8006dee <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d70:	6800      	ldr	r0, [r0, #0]
 8006d72:	f7ff ff77 	bl	8006c64 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d76:	6822      	ldr	r2, [r4, #0]
 8006d78:	6993      	ldr	r3, [r2, #24]
 8006d7a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006d7e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d80:	6822      	ldr	r2, [r4, #0]
 8006d82:	6993      	ldr	r3, [r2, #24]
 8006d84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d88:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d8a:	6822      	ldr	r2, [r4, #0]
 8006d8c:	6993      	ldr	r3, [r2, #24]
 8006d8e:	6929      	ldr	r1, [r5, #16]
 8006d90:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006d94:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006d96:	2000      	movs	r0, #0
      break;
 8006d98:	e029      	b.n	8006dee <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d9a:	6800      	ldr	r0, [r0, #0]
 8006d9c:	f7ff fce2 	bl	8006764 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006da0:	6822      	ldr	r2, [r4, #0]
 8006da2:	69d3      	ldr	r3, [r2, #28]
 8006da4:	f043 0308 	orr.w	r3, r3, #8
 8006da8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006daa:	6822      	ldr	r2, [r4, #0]
 8006dac:	69d3      	ldr	r3, [r2, #28]
 8006dae:	f023 0304 	bic.w	r3, r3, #4
 8006db2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006db4:	6822      	ldr	r2, [r4, #0]
 8006db6:	69d3      	ldr	r3, [r2, #28]
 8006db8:	6929      	ldr	r1, [r5, #16]
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006dbe:	2000      	movs	r0, #0
      break;
 8006dc0:	e015      	b.n	8006dee <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006dc2:	6800      	ldr	r0, [r0, #0]
 8006dc4:	f7ff fcfc 	bl	80067c0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006dc8:	6822      	ldr	r2, [r4, #0]
 8006dca:	69d3      	ldr	r3, [r2, #28]
 8006dcc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006dd0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dd2:	6822      	ldr	r2, [r4, #0]
 8006dd4:	69d3      	ldr	r3, [r2, #28]
 8006dd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006dda:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ddc:	6822      	ldr	r2, [r4, #0]
 8006dde:	69d3      	ldr	r3, [r2, #28]
 8006de0:	6929      	ldr	r1, [r5, #16]
 8006de2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006de6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006de8:	2000      	movs	r0, #0
      break;
 8006dea:	e000      	b.n	8006dee <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8006dec:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8006dee:	2300      	movs	r3, #0
 8006df0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006df4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8006df6:	2002      	movs	r0, #2
 8006df8:	e7fc      	b.n	8006df4 <HAL_TIM_PWM_ConfigChannel+0xd6>

08006dfa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dfa:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dfc:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dfe:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e02:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8006e06:	430a      	orrs	r2, r1
 8006e08:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e0c:	6082      	str	r2, [r0, #8]
}
 8006e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006e14:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d078      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0xfa>
{
 8006e1c:	b510      	push	{r4, lr}
 8006e1e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006e20:	2301      	movs	r3, #1
 8006e22:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006e26:	2302      	movs	r3, #2
 8006e28:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006e2c:	6802      	ldr	r2, [r0, #0]
 8006e2e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e30:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e34:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8006e38:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006e3a:	680b      	ldr	r3, [r1, #0]
 8006e3c:	2b60      	cmp	r3, #96	@ 0x60
 8006e3e:	d04c      	beq.n	8006eda <HAL_TIM_ConfigClockSource+0xc6>
 8006e40:	d823      	bhi.n	8006e8a <HAL_TIM_ConfigClockSource+0x76>
 8006e42:	2b40      	cmp	r3, #64	@ 0x40
 8006e44:	d054      	beq.n	8006ef0 <HAL_TIM_ConfigClockSource+0xdc>
 8006e46:	d811      	bhi.n	8006e6c <HAL_TIM_ConfigClockSource+0x58>
 8006e48:	2b20      	cmp	r3, #32
 8006e4a:	d003      	beq.n	8006e54 <HAL_TIM_ConfigClockSource+0x40>
 8006e4c:	d80a      	bhi.n	8006e64 <HAL_TIM_ConfigClockSource+0x50>
 8006e4e:	b10b      	cbz	r3, 8006e54 <HAL_TIM_ConfigClockSource+0x40>
 8006e50:	2b10      	cmp	r3, #16
 8006e52:	d105      	bne.n	8006e60 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e54:	4619      	mov	r1, r3
 8006e56:	6820      	ldr	r0, [r4, #0]
 8006e58:	f7ff fcfd 	bl	8006856 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006e5c:	2000      	movs	r0, #0
      break;
 8006e5e:	e028      	b.n	8006eb2 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8006e60:	2001      	movs	r0, #1
 8006e62:	e026      	b.n	8006eb2 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8006e64:	2b30      	cmp	r3, #48	@ 0x30
 8006e66:	d0f5      	beq.n	8006e54 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8006e68:	2001      	movs	r0, #1
 8006e6a:	e022      	b.n	8006eb2 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8006e6c:	2b50      	cmp	r3, #80	@ 0x50
 8006e6e:	d10a      	bne.n	8006e86 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e70:	68ca      	ldr	r2, [r1, #12]
 8006e72:	6849      	ldr	r1, [r1, #4]
 8006e74:	6800      	ldr	r0, [r0, #0]
 8006e76:	f7ff fcc7 	bl	8006808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e7a:	2150      	movs	r1, #80	@ 0x50
 8006e7c:	6820      	ldr	r0, [r4, #0]
 8006e7e:	f7ff fcea 	bl	8006856 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006e82:	2000      	movs	r0, #0
      break;
 8006e84:	e015      	b.n	8006eb2 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8006e86:	2001      	movs	r0, #1
 8006e88:	e013      	b.n	8006eb2 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8006e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e8e:	d03a      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0xf2>
 8006e90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e94:	d014      	beq.n	8006ec0 <HAL_TIM_ConfigClockSource+0xac>
 8006e96:	2b70      	cmp	r3, #112	@ 0x70
 8006e98:	d137      	bne.n	8006f0a <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8006e9a:	68cb      	ldr	r3, [r1, #12]
 8006e9c:	684a      	ldr	r2, [r1, #4]
 8006e9e:	6889      	ldr	r1, [r1, #8]
 8006ea0:	6800      	ldr	r0, [r0, #0]
 8006ea2:	f7ff ffaa 	bl	8006dfa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ea6:	6822      	ldr	r2, [r4, #0]
 8006ea8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006eaa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006eae:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006ebe:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8006ec0:	68cb      	ldr	r3, [r1, #12]
 8006ec2:	684a      	ldr	r2, [r1, #4]
 8006ec4:	6889      	ldr	r1, [r1, #8]
 8006ec6:	6800      	ldr	r0, [r0, #0]
 8006ec8:	f7ff ff97 	bl	8006dfa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ecc:	6822      	ldr	r2, [r4, #0]
 8006ece:	6893      	ldr	r3, [r2, #8]
 8006ed0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ed4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006ed6:	2000      	movs	r0, #0
      break;
 8006ed8:	e7eb      	b.n	8006eb2 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eda:	68ca      	ldr	r2, [r1, #12]
 8006edc:	6849      	ldr	r1, [r1, #4]
 8006ede:	6800      	ldr	r0, [r0, #0]
 8006ee0:	f7ff fca5 	bl	800682e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ee4:	2160      	movs	r1, #96	@ 0x60
 8006ee6:	6820      	ldr	r0, [r4, #0]
 8006ee8:	f7ff fcb5 	bl	8006856 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006eec:	2000      	movs	r0, #0
      break;
 8006eee:	e7e0      	b.n	8006eb2 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ef0:	68ca      	ldr	r2, [r1, #12]
 8006ef2:	6849      	ldr	r1, [r1, #4]
 8006ef4:	6800      	ldr	r0, [r0, #0]
 8006ef6:	f7ff fc87 	bl	8006808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006efa:	2140      	movs	r1, #64	@ 0x40
 8006efc:	6820      	ldr	r0, [r4, #0]
 8006efe:	f7ff fcaa 	bl	8006856 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006f02:	2000      	movs	r0, #0
      break;
 8006f04:	e7d5      	b.n	8006eb2 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8006f06:	2000      	movs	r0, #0
 8006f08:	e7d3      	b.n	8006eb2 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8006f0a:	2001      	movs	r0, #1
 8006f0c:	e7d1      	b.n	8006eb2 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8006f0e:	2002      	movs	r0, #2
}
 8006f10:	4770      	bx	lr

08006f12 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f12:	f001 011f 	and.w	r1, r1, #31
 8006f16:	f04f 0c01 	mov.w	ip, #1
 8006f1a:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f1e:	6a03      	ldr	r3, [r0, #32]
 8006f20:	ea23 030c 	bic.w	r3, r3, ip
 8006f24:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f26:	6a03      	ldr	r3, [r0, #32]
 8006f28:	408a      	lsls	r2, r1
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	6203      	str	r3, [r0, #32]
}
 8006f2e:	4770      	bx	lr

08006f30 <HAL_TIM_OC_Start_IT>:
{
 8006f30:	b510      	push	{r4, lr}
 8006f32:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f34:	4608      	mov	r0, r1
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d137      	bne.n	8006faa <HAL_TIM_OC_Start_IT+0x7a>
 8006f3a:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	bf18      	it	ne
 8006f42:	2301      	movne	r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f040 8095 	bne.w	8007074 <HAL_TIM_OC_Start_IT+0x144>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d143      	bne.n	8006fd6 <HAL_TIM_OC_Start_IT+0xa6>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006f54:	6822      	ldr	r2, [r4, #0]
 8006f56:	68d3      	ldr	r3, [r2, #12]
 8006f58:	f043 0302 	orr.w	r3, r3, #2
 8006f5c:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f5e:	2201      	movs	r2, #1
 8006f60:	4601      	mov	r1, r0
 8006f62:	6820      	ldr	r0, [r4, #0]
 8006f64:	f7ff ffd5 	bl	8006f12 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	4a45      	ldr	r2, [pc, #276]	@ (8007080 <HAL_TIM_OC_Start_IT+0x150>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d071      	beq.n	8007054 <HAL_TIM_OC_Start_IT+0x124>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	4a43      	ldr	r2, [pc, #268]	@ (8007080 <HAL_TIM_OC_Start_IT+0x150>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d072      	beq.n	800705e <HAL_TIM_OC_Start_IT+0x12e>
 8006f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f7c:	d06f      	beq.n	800705e <HAL_TIM_OC_Start_IT+0x12e>
 8006f7e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d06b      	beq.n	800705e <HAL_TIM_OC_Start_IT+0x12e>
 8006f86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d067      	beq.n	800705e <HAL_TIM_OC_Start_IT+0x12e>
 8006f8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d063      	beq.n	800705e <HAL_TIM_OC_Start_IT+0x12e>
 8006f96:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d05f      	beq.n	800705e <HAL_TIM_OC_Start_IT+0x12e>
      __HAL_TIM_ENABLE(htim);
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	f042 0201 	orr.w	r2, r2, #1
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	e065      	b.n	8007076 <HAL_TIM_OC_Start_IT+0x146>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006faa:	2904      	cmp	r1, #4
 8006fac:	d007      	beq.n	8006fbe <HAL_TIM_OC_Start_IT+0x8e>
 8006fae:	2908      	cmp	r1, #8
 8006fb0:	d00b      	beq.n	8006fca <HAL_TIM_OC_Start_IT+0x9a>
 8006fb2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	bf18      	it	ne
 8006fba:	2301      	movne	r3, #1
 8006fbc:	e7c2      	b.n	8006f44 <HAL_TIM_OC_Start_IT+0x14>
 8006fbe:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	bf18      	it	ne
 8006fc6:	2301      	movne	r3, #1
 8006fc8:	e7bc      	b.n	8006f44 <HAL_TIM_OC_Start_IT+0x14>
 8006fca:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	bf18      	it	ne
 8006fd2:	2301      	movne	r3, #1
 8006fd4:	e7b6      	b.n	8006f44 <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fd6:	2804      	cmp	r0, #4
 8006fd8:	d024      	beq.n	8007024 <HAL_TIM_OC_Start_IT+0xf4>
 8006fda:	2808      	cmp	r0, #8
 8006fdc:	d02b      	beq.n	8007036 <HAL_TIM_OC_Start_IT+0x106>
 8006fde:	2302      	movs	r3, #2
 8006fe0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  switch (Channel)
 8006fe4:	280c      	cmp	r0, #12
 8006fe6:	d847      	bhi.n	8007078 <HAL_TIM_OC_Start_IT+0x148>
 8006fe8:	a301      	add	r3, pc, #4	@ (adr r3, 8006ff0 <HAL_TIM_OC_Start_IT+0xc0>)
 8006fea:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8006fee:	bf00      	nop
 8006ff0:	08006f55 	.word	0x08006f55
 8006ff4:	08007079 	.word	0x08007079
 8006ff8:	08007079 	.word	0x08007079
 8006ffc:	08007079 	.word	0x08007079
 8007000:	0800702b 	.word	0x0800702b
 8007004:	08007079 	.word	0x08007079
 8007008:	08007079 	.word	0x08007079
 800700c:	08007079 	.word	0x08007079
 8007010:	0800703d 	.word	0x0800703d
 8007014:	08007079 	.word	0x08007079
 8007018:	08007079 	.word	0x08007079
 800701c:	08007079 	.word	0x08007079
 8007020:	08007049 	.word	0x08007049
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007024:	2302      	movs	r3, #2
 8007026:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800702a:	6822      	ldr	r2, [r4, #0]
 800702c:	68d3      	ldr	r3, [r2, #12]
 800702e:	f043 0304 	orr.w	r3, r3, #4
 8007032:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8007034:	e793      	b.n	8006f5e <HAL_TIM_OC_Start_IT+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007036:	2302      	movs	r3, #2
 8007038:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800703c:	6822      	ldr	r2, [r4, #0]
 800703e:	68d3      	ldr	r3, [r2, #12]
 8007040:	f043 0308 	orr.w	r3, r3, #8
 8007044:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8007046:	e78a      	b.n	8006f5e <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007048:	6822      	ldr	r2, [r4, #0]
 800704a:	68d3      	ldr	r3, [r2, #12]
 800704c:	f043 0310 	orr.w	r3, r3, #16
 8007050:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8007052:	e784      	b.n	8006f5e <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_MOE_ENABLE(htim);
 8007054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800705a:	645a      	str	r2, [r3, #68]	@ 0x44
 800705c:	e788      	b.n	8006f70 <HAL_TIM_OC_Start_IT+0x40>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007064:	2a06      	cmp	r2, #6
 8007066:	d009      	beq.n	800707c <HAL_TIM_OC_Start_IT+0x14c>
        __HAL_TIM_ENABLE(htim);
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	f042 0201 	orr.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	2000      	movs	r0, #0
 8007072:	e000      	b.n	8007076 <HAL_TIM_OC_Start_IT+0x146>
    return HAL_ERROR;
 8007074:	2001      	movs	r0, #1
}
 8007076:	bd10      	pop	{r4, pc}
  switch (Channel)
 8007078:	2001      	movs	r0, #1
 800707a:	e7fc      	b.n	8007076 <HAL_TIM_OC_Start_IT+0x146>
 800707c:	2000      	movs	r0, #0
 800707e:	e7fa      	b.n	8007076 <HAL_TIM_OC_Start_IT+0x146>
 8007080:	40010000 	.word	0x40010000

08007084 <HAL_TIM_PWM_Start>:
{
 8007084:	b510      	push	{r4, lr}
 8007086:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007088:	4608      	mov	r0, r1
 800708a:	bb89      	cbnz	r1, 80070f0 <HAL_TIM_PWM_Start+0x6c>
 800708c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8007090:	3b01      	subs	r3, #1
 8007092:	bf18      	it	ne
 8007094:	2301      	movne	r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d160      	bne.n	800715c <HAL_TIM_PWM_Start+0xd8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800709a:	2800      	cmp	r0, #0
 800709c:	d13e      	bne.n	800711c <HAL_TIM_PWM_Start+0x98>
 800709e:	2302      	movs	r3, #2
 80070a0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070a4:	2201      	movs	r2, #1
 80070a6:	4601      	mov	r1, r0
 80070a8:	6820      	ldr	r0, [r4, #0]
 80070aa:	f7ff ff32 	bl	8006f12 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	4a2c      	ldr	r2, [pc, #176]	@ (8007164 <HAL_TIM_PWM_Start+0xe0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d042      	beq.n	800713c <HAL_TIM_PWM_Start+0xb8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	4a2a      	ldr	r2, [pc, #168]	@ (8007164 <HAL_TIM_PWM_Start+0xe0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d043      	beq.n	8007146 <HAL_TIM_PWM_Start+0xc2>
 80070be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070c2:	d040      	beq.n	8007146 <HAL_TIM_PWM_Start+0xc2>
 80070c4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d03c      	beq.n	8007146 <HAL_TIM_PWM_Start+0xc2>
 80070cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d038      	beq.n	8007146 <HAL_TIM_PWM_Start+0xc2>
 80070d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070d8:	4293      	cmp	r3, r2
 80070da:	d034      	beq.n	8007146 <HAL_TIM_PWM_Start+0xc2>
 80070dc:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d030      	beq.n	8007146 <HAL_TIM_PWM_Start+0xc2>
    __HAL_TIM_ENABLE(htim);
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	f042 0201 	orr.w	r2, r2, #1
 80070ea:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80070ec:	2000      	movs	r0, #0
 80070ee:	e034      	b.n	800715a <HAL_TIM_PWM_Start+0xd6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070f0:	2904      	cmp	r1, #4
 80070f2:	d007      	beq.n	8007104 <HAL_TIM_PWM_Start+0x80>
 80070f4:	2908      	cmp	r1, #8
 80070f6:	d00b      	beq.n	8007110 <HAL_TIM_PWM_Start+0x8c>
 80070f8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80070fc:	3b01      	subs	r3, #1
 80070fe:	bf18      	it	ne
 8007100:	2301      	movne	r3, #1
 8007102:	e7c8      	b.n	8007096 <HAL_TIM_PWM_Start+0x12>
 8007104:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8007108:	3b01      	subs	r3, #1
 800710a:	bf18      	it	ne
 800710c:	2301      	movne	r3, #1
 800710e:	e7c2      	b.n	8007096 <HAL_TIM_PWM_Start+0x12>
 8007110:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8007114:	3b01      	subs	r3, #1
 8007116:	bf18      	it	ne
 8007118:	2301      	movne	r3, #1
 800711a:	e7bc      	b.n	8007096 <HAL_TIM_PWM_Start+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800711c:	2804      	cmp	r0, #4
 800711e:	d005      	beq.n	800712c <HAL_TIM_PWM_Start+0xa8>
 8007120:	2808      	cmp	r0, #8
 8007122:	d007      	beq.n	8007134 <HAL_TIM_PWM_Start+0xb0>
 8007124:	2302      	movs	r3, #2
 8007126:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800712a:	e7bb      	b.n	80070a4 <HAL_TIM_PWM_Start+0x20>
 800712c:	2302      	movs	r3, #2
 800712e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007132:	e7b7      	b.n	80070a4 <HAL_TIM_PWM_Start+0x20>
 8007134:	2302      	movs	r3, #2
 8007136:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800713a:	e7b3      	b.n	80070a4 <HAL_TIM_PWM_Start+0x20>
    __HAL_TIM_MOE_ENABLE(htim);
 800713c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800713e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007142:	645a      	str	r2, [r3, #68]	@ 0x44
 8007144:	e7b7      	b.n	80070b6 <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800714c:	2a06      	cmp	r2, #6
 800714e:	d007      	beq.n	8007160 <HAL_TIM_PWM_Start+0xdc>
      __HAL_TIM_ENABLE(htim);
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	f042 0201 	orr.w	r2, r2, #1
 8007156:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007158:	2000      	movs	r0, #0
}
 800715a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800715c:	2001      	movs	r0, #1
 800715e:	e7fc      	b.n	800715a <HAL_TIM_PWM_Start+0xd6>
  return HAL_OK;
 8007160:	2000      	movs	r0, #0
 8007162:	e7fa      	b.n	800715a <HAL_TIM_PWM_Start+0xd6>
 8007164:	40010000 	.word	0x40010000

08007168 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007168:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800716c:	2a01      	cmp	r2, #1
 800716e:	d035      	beq.n	80071dc <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8007170:	b410      	push	{r4}
 8007172:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8007174:	2201      	movs	r2, #1
 8007176:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717a:	2202      	movs	r2, #2
 800717c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007180:	6802      	ldr	r2, [r0, #0]
 8007182:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007184:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007186:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800718a:	6808      	ldr	r0, [r1, #0]
 800718c:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007190:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	4812      	ldr	r0, [pc, #72]	@ (80071e0 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8007196:	4282      	cmp	r2, r0
 8007198:	d012      	beq.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800719a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800719e:	d00f      	beq.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80071a0:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80071a4:	4282      	cmp	r2, r0
 80071a6:	d00b      	beq.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80071a8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80071ac:	4282      	cmp	r2, r0
 80071ae:	d007      	beq.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80071b0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80071b4:	4282      	cmp	r2, r0
 80071b6:	d003      	beq.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80071b8:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 80071bc:	4282      	cmp	r2, r0
 80071be:	d104      	bne.n	80071ca <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071c0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071c4:	6849      	ldr	r1, [r1, #4]
 80071c6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071c8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071d0:	2000      	movs	r0, #0
 80071d2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80071d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071da:	4770      	bx	lr
  __HAL_LOCK(htim);
 80071dc:	2002      	movs	r0, #2
}
 80071de:	4770      	bx	lr
 80071e0:	40010000 	.word	0x40010000

080071e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80071e4:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80071e6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d021      	beq.n	8007232 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 80071ee:	2301      	movs	r3, #1
 80071f0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071f4:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071fa:	6888      	ldr	r0, [r1, #8]
 80071fc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007202:	6848      	ldr	r0, [r1, #4]
 8007204:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007206:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800720a:	6808      	ldr	r0, [r1, #0]
 800720c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800720e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007212:	6908      	ldr	r0, [r1, #16]
 8007214:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007216:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800721a:	6948      	ldr	r0, [r1, #20]
 800721c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800721e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007222:	69c9      	ldr	r1, [r1, #28]
 8007224:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007226:	6811      	ldr	r1, [r2, #0]
 8007228:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800722a:	2000      	movs	r0, #0
 800722c:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8007230:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007232:	2002      	movs	r0, #2
}
 8007234:	4770      	bx	lr

08007236 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007236:	4770      	bx	lr

08007238 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007238:	4770      	bx	lr
	...

0800723c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800723c:	b530      	push	{r4, r5, lr}
 800723e:	b089      	sub	sp, #36	@ 0x24
 8007240:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8007242:	2400      	movs	r4, #0
 8007244:	9401      	str	r4, [sp, #4]
 8007246:	4b1d      	ldr	r3, [pc, #116]	@ (80072bc <HAL_InitTick+0x80>)
 8007248:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800724a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800724e:	645a      	str	r2, [r3, #68]	@ 0x44
 8007250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007252:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800725a:	a902      	add	r1, sp, #8
 800725c:	a803      	add	r0, sp, #12
 800725e:	f7ff fa39 	bl	80066d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007262:	f7ff fa27 	bl	80066b4 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007266:	4a16      	ldr	r2, [pc, #88]	@ (80072c0 <HAL_InitTick+0x84>)
 8007268:	fba2 2300 	umull	r2, r3, r2, r0
 800726c:	0c9b      	lsrs	r3, r3, #18
 800726e:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8007270:	4814      	ldr	r0, [pc, #80]	@ (80072c4 <HAL_InitTick+0x88>)
 8007272:	4a15      	ldr	r2, [pc, #84]	@ (80072c8 <HAL_InitTick+0x8c>)
 8007274:	6002      	str	r2, [r0, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8007276:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800727a:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800727c:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 800727e:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007280:	6084      	str	r4, [r0, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007282:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8007284:	f7ff fc6a 	bl	8006b5c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8007288:	4604      	mov	r4, r0
 800728a:	b110      	cbz	r0, 8007292 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 800728c:	4620      	mov	r0, r4
 800728e:	b009      	add	sp, #36	@ 0x24
 8007290:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim11);
 8007292:	480c      	ldr	r0, [pc, #48]	@ (80072c4 <HAL_InitTick+0x88>)
 8007294:	f7ff fb1e 	bl	80068d4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8007298:	4604      	mov	r4, r0
 800729a:	2800      	cmp	r0, #0
 800729c:	d1f6      	bne.n	800728c <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800729e:	201a      	movs	r0, #26
 80072a0:	f7fd fab4 	bl	800480c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80072a4:	2d0f      	cmp	r5, #15
 80072a6:	d901      	bls.n	80072ac <HAL_InitTick+0x70>
        status = HAL_ERROR;
 80072a8:	2401      	movs	r4, #1
 80072aa:	e7ef      	b.n	800728c <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80072ac:	2200      	movs	r2, #0
 80072ae:	4629      	mov	r1, r5
 80072b0:	201a      	movs	r0, #26
 80072b2:	f7fd fa9b 	bl	80047ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80072b6:	4b05      	ldr	r3, [pc, #20]	@ (80072cc <HAL_InitTick+0x90>)
 80072b8:	601d      	str	r5, [r3, #0]
 80072ba:	e7e7      	b.n	800728c <HAL_InitTick+0x50>
 80072bc:	40023800 	.word	0x40023800
 80072c0:	431bde83 	.word	0x431bde83
 80072c4:	20005f30 	.word	0x20005f30
 80072c8:	40014800 	.word	0x40014800
 80072cc:	2000006c 	.word	0x2000006c

080072d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80072d0:	e7fe      	b.n	80072d0 <NMI_Handler>
	...

080072d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072d4:	b090      	sub	sp, #64	@ 0x40
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80072d6:	f3ef 8314 	mrs	r3, CONTROL
  /* USER CODE BEGIN HardFault_IRQn 0 */
  uint32_t *stacked_regs;

  /* Figure out which stack pointer was active */
  if (__get_CONTROL() & 2) {
 80072da:	f013 0f02 	tst.w	r3, #2
 80072de:	d025      	beq.n	800732c <HardFault_Handler+0x58>
      /* Process Stack Pointer was in use */
      __asm volatile("MRS %0, PSP" : "=r"(stacked_regs));
 80072e0:	f3ef 8309 	mrs	r3, PSP
      /* Main Stack Pointer was in use */
      __asm volatile("MRS %0, MSP" : "=r"(stacked_regs));
  }

  /* CPU stacked registers (automatically pushed on exception entry) */
  volatile uint32_t stacked_r0  = stacked_regs[0];
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	920f      	str	r2, [sp, #60]	@ 0x3c
  volatile uint32_t stacked_r1  = stacked_regs[1];
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	920e      	str	r2, [sp, #56]	@ 0x38
  volatile uint32_t stacked_r2  = stacked_regs[2];
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	920d      	str	r2, [sp, #52]	@ 0x34
  volatile uint32_t stacked_r3  = stacked_regs[3];
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	920c      	str	r2, [sp, #48]	@ 0x30
  volatile uint32_t stacked_r12 = stacked_regs[4];
 80072f4:	691a      	ldr	r2, [r3, #16]
 80072f6:	920b      	str	r2, [sp, #44]	@ 0x2c
  volatile uint32_t stacked_lr  = stacked_regs[5]; // LR (R14)
 80072f8:	695a      	ldr	r2, [r3, #20]
 80072fa:	920a      	str	r2, [sp, #40]	@ 0x28
  volatile uint32_t stacked_pc  = stacked_regs[6]; // PC at time of fault
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	9209      	str	r2, [sp, #36]	@ 0x24
  volatile uint32_t stacked_psr = stacked_regs[7]; // xPSR
 8007300:	69da      	ldr	r2, [r3, #28]
 8007302:	9208      	str	r2, [sp, #32]

  /* System fault status registers */
  volatile uint32_t cfsr  = SCB->CFSR;   // Configurable Fault Status
 8007304:	4a0b      	ldr	r2, [pc, #44]	@ (8007334 <HardFault_Handler+0x60>)
 8007306:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007308:	9107      	str	r1, [sp, #28]
  volatile uint32_t hfsr  = SCB->HFSR;   // HardFault Status
 800730a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800730c:	9106      	str	r1, [sp, #24]
  volatile uint32_t mmfar = SCB->MMFAR;  // MemManage Fault Address
 800730e:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8007310:	9105      	str	r1, [sp, #20]
  volatile uint32_t bfar  = SCB->BFAR;   // BusFault Address
 8007312:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007314:	9204      	str	r2, [sp, #16]

  /* Optional: peek a few words below SP to see if stack is filled with 0xA5 */
  volatile uint32_t s_m1 = stacked_regs[-1];
 8007316:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800731a:	9203      	str	r2, [sp, #12]
  volatile uint32_t s_m2 = stacked_regs[-2];
 800731c:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8007320:	9202      	str	r2, [sp, #8]
  volatile uint32_t s_m3 = stacked_regs[-3];
 8007322:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8007326:	9301      	str	r3, [sp, #4]

  __NOP();  // <-- Set a breakpoint here and inspect variables above
 8007328:	bf00      	nop
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800732a:	e7fe      	b.n	800732a <HardFault_Handler+0x56>
      __asm volatile("MRS %0, MSP" : "=r"(stacked_regs));
 800732c:	f3ef 8308 	mrs	r3, MSP
 8007330:	e7d8      	b.n	80072e4 <HardFault_Handler+0x10>
 8007332:	bf00      	nop
 8007334:	e000ed00 	.word	0xe000ed00

08007338 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007338:	e7fe      	b.n	8007338 <MemManage_Handler>

0800733a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800733a:	e7fe      	b.n	800733a <BusFault_Handler>

0800733c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800733c:	e7fe      	b.n	800733c <UsageFault_Handler>

0800733e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800733e:	4770      	bx	lr

08007340 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007340:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR_VR2_Pin);
 8007342:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007346:	f7fd ff55 	bl	80051f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800734a:	bd08      	pop	{r3, pc}

0800734c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800734c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800734e:	4803      	ldr	r0, [pc, #12]	@ (800735c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8007350:	f7ff faff 	bl	8006952 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8007354:	4802      	ldr	r0, [pc, #8]	@ (8007360 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8007356:	f7ff fafc 	bl	8006952 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800735a:	bd08      	pop	{r3, pc}
 800735c:	2000650c 	.word	0x2000650c
 8007360:	20005f30 	.word	0x20005f30

08007364 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007364:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  scheduler_timer_callback();
 8007366:	f002 f95b 	bl	8009620 <scheduler_timer_callback>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800736a:	4802      	ldr	r0, [pc, #8]	@ (8007374 <TIM2_IRQHandler+0x10>)
 800736c:	f7ff faf1 	bl	8006952 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007370:	bd08      	pop	{r3, pc}
 8007372:	bf00      	nop
 8007374:	200064c4 	.word	0x200064c4

08007378 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007378:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800737a:	4802      	ldr	r0, [pc, #8]	@ (8007384 <DMA2_Stream0_IRQHandler+0xc>)
 800737c:	f7fd fb70 	bl	8004a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007380:	bd08      	pop	{r3, pc}
 8007382:	bf00      	nop
 8007384:	200001cc 	.word	0x200001cc

08007388 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007388:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800738a:	4802      	ldr	r0, [pc, #8]	@ (8007394 <OTG_FS_IRQHandler+0xc>)
 800738c:	f7fe fb71 	bl	8005a72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007390:	bd08      	pop	{r3, pc}
 8007392:	bf00      	nop
 8007394:	20007b64 	.word	0x20007b64

08007398 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007398:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800739e:	9b01      	ldr	r3, [sp, #4]
 80073a0:	3301      	adds	r3, #1
 80073a2:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80073a4:	9b01      	ldr	r3, [sp, #4]
 80073a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073aa:	d815      	bhi.n	80073d8 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073ac:	6903      	ldr	r3, [r0, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	daf5      	bge.n	800739e <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073b6:	6903      	ldr	r3, [r0, #16]
 80073b8:	f043 0301 	orr.w	r3, r3, #1
 80073bc:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 80073be:	9b01      	ldr	r3, [sp, #4]
 80073c0:	3301      	adds	r3, #1
 80073c2:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80073c4:	9b01      	ldr	r3, [sp, #4]
 80073c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073ca:	d808      	bhi.n	80073de <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073cc:	6903      	ldr	r3, [r0, #16]
 80073ce:	f013 0f01 	tst.w	r3, #1
 80073d2:	d1f4      	bne.n	80073be <USB_CoreReset+0x26>

  return HAL_OK;
 80073d4:	2000      	movs	r0, #0
 80073d6:	e000      	b.n	80073da <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 80073d8:	2003      	movs	r0, #3
}
 80073da:	b002      	add	sp, #8
 80073dc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80073de:	2003      	movs	r0, #3
 80073e0:	e7fb      	b.n	80073da <USB_CoreReset+0x42>

080073e2 <USB_CoreInit>:
{
 80073e2:	b084      	sub	sp, #16
 80073e4:	b510      	push	{r4, lr}
 80073e6:	4604      	mov	r4, r0
 80073e8:	a803      	add	r0, sp, #12
 80073ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073ee:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d121      	bne.n	800743a <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80073f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073fc:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073fe:	68e3      	ldr	r3, [r4, #12]
 8007400:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007404:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007408:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800740a:	68e3      	ldr	r3, [r4, #12]
 800740c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007410:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8007412:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d00a      	beq.n	8007430 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 800741a:	4620      	mov	r0, r4
 800741c:	f7ff ffbc 	bl	8007398 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8007420:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d01c      	beq.n	8007462 <USB_CoreInit+0x80>
}
 8007428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800742c:	b004      	add	sp, #16
 800742e:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007430:	68e3      	ldr	r3, [r4, #12]
 8007432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007436:	60e3      	str	r3, [r4, #12]
 8007438:	e7ef      	b.n	800741a <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800743a:	68e3      	ldr	r3, [r4, #12]
 800743c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007440:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8007442:	4620      	mov	r0, r4
 8007444:	f7ff ffa8 	bl	8007398 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8007448:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800744c:	b923      	cbnz	r3, 8007458 <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800744e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007454:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007456:	e7e3      	b.n	8007420 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007458:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800745a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800745e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007460:	e7de      	b.n	8007420 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007462:	68a3      	ldr	r3, [r4, #8]
 8007464:	f043 0306 	orr.w	r3, r3, #6
 8007468:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800746a:	68a3      	ldr	r3, [r4, #8]
 800746c:	f043 0320 	orr.w	r3, r3, #32
 8007470:	60a3      	str	r3, [r4, #8]
 8007472:	e7d9      	b.n	8007428 <USB_CoreInit+0x46>

08007474 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8007474:	2a02      	cmp	r2, #2
 8007476:	d00a      	beq.n	800748e <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007478:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800747a:	68c3      	ldr	r3, [r0, #12]
 800747c:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8007480:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007482:	68c3      	ldr	r3, [r0, #12]
 8007484:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8007488:	60c3      	str	r3, [r0, #12]
}
 800748a:	2000      	movs	r0, #0
 800748c:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800748e:	4b23      	ldr	r3, [pc, #140]	@ (800751c <USB_SetTurnaroundTime+0xa8>)
 8007490:	440b      	add	r3, r1
 8007492:	4a23      	ldr	r2, [pc, #140]	@ (8007520 <USB_SetTurnaroundTime+0xac>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d92f      	bls.n	80074f8 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007498:	4b22      	ldr	r3, [pc, #136]	@ (8007524 <USB_SetTurnaroundTime+0xb0>)
 800749a:	440b      	add	r3, r1
 800749c:	4a22      	ldr	r2, [pc, #136]	@ (8007528 <USB_SetTurnaroundTime+0xb4>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d92c      	bls.n	80074fc <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80074a2:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 80074a6:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 80074aa:	4a20      	ldr	r2, [pc, #128]	@ (800752c <USB_SetTurnaroundTime+0xb8>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d927      	bls.n	8007500 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80074b0:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 80074b4:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 80074b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007530 <USB_SetTurnaroundTime+0xbc>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d322      	bcc.n	8007504 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80074be:	4b1d      	ldr	r3, [pc, #116]	@ (8007534 <USB_SetTurnaroundTime+0xc0>)
 80074c0:	440b      	add	r3, r1
 80074c2:	4a1d      	ldr	r2, [pc, #116]	@ (8007538 <USB_SetTurnaroundTime+0xc4>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d91f      	bls.n	8007508 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80074c8:	4b1c      	ldr	r3, [pc, #112]	@ (800753c <USB_SetTurnaroundTime+0xc8>)
 80074ca:	440b      	add	r3, r1
 80074cc:	4a1c      	ldr	r2, [pc, #112]	@ (8007540 <USB_SetTurnaroundTime+0xcc>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d31c      	bcc.n	800750c <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80074d2:	4b1c      	ldr	r3, [pc, #112]	@ (8007544 <USB_SetTurnaroundTime+0xd0>)
 80074d4:	440b      	add	r3, r1
 80074d6:	4a1c      	ldr	r2, [pc, #112]	@ (8007548 <USB_SetTurnaroundTime+0xd4>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d319      	bcc.n	8007510 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80074dc:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 80074e0:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 80074e4:	4a19      	ldr	r2, [pc, #100]	@ (800754c <USB_SetTurnaroundTime+0xd8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d314      	bcc.n	8007514 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80074ea:	4b19      	ldr	r3, [pc, #100]	@ (8007550 <USB_SetTurnaroundTime+0xdc>)
 80074ec:	440b      	add	r3, r1
 80074ee:	4a19      	ldr	r2, [pc, #100]	@ (8007554 <USB_SetTurnaroundTime+0xe0>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d211      	bcs.n	8007518 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 80074f4:	2207      	movs	r2, #7
 80074f6:	e7c0      	b.n	800747a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80074f8:	220f      	movs	r2, #15
 80074fa:	e7be      	b.n	800747a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80074fc:	220e      	movs	r2, #14
 80074fe:	e7bc      	b.n	800747a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8007500:	220d      	movs	r2, #13
 8007502:	e7ba      	b.n	800747a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8007504:	220c      	movs	r2, #12
 8007506:	e7b8      	b.n	800747a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8007508:	220b      	movs	r2, #11
 800750a:	e7b6      	b.n	800747a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 800750c:	220a      	movs	r2, #10
 800750e:	e7b4      	b.n	800747a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8007510:	2209      	movs	r2, #9
 8007512:	e7b2      	b.n	800747a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8007514:	2208      	movs	r2, #8
 8007516:	e7b0      	b.n	800747a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8007518:	2206      	movs	r2, #6
 800751a:	e7ae      	b.n	800747a <USB_SetTurnaroundTime+0x6>
 800751c:	ff275340 	.word	0xff275340
 8007520:	000c34ff 	.word	0x000c34ff
 8007524:	ff1b1e40 	.word	0xff1b1e40
 8007528:	000f423f 	.word	0x000f423f
 800752c:	00124f7f 	.word	0x00124f7f
 8007530:	0013d620 	.word	0x0013d620
 8007534:	fee5b660 	.word	0xfee5b660
 8007538:	0016e35f 	.word	0x0016e35f
 800753c:	feced300 	.word	0xfeced300
 8007540:	001b7740 	.word	0x001b7740
 8007544:	feb35bc0 	.word	0xfeb35bc0
 8007548:	002191c0 	.word	0x002191c0
 800754c:	00387520 	.word	0x00387520
 8007550:	fe5954e0 	.word	0xfe5954e0
 8007554:	00419ce0 	.word	0x00419ce0

08007558 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007558:	6883      	ldr	r3, [r0, #8]
 800755a:	f043 0301 	orr.w	r3, r3, #1
 800755e:	6083      	str	r3, [r0, #8]
}
 8007560:	2000      	movs	r0, #0
 8007562:	4770      	bx	lr

08007564 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007564:	6883      	ldr	r3, [r0, #8]
 8007566:	f023 0301 	bic.w	r3, r3, #1
 800756a:	6083      	str	r3, [r0, #8]
}
 800756c:	2000      	movs	r0, #0
 800756e:	4770      	bx	lr

08007570 <USB_FlushTxFifo>:
{
 8007570:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	9301      	str	r3, [sp, #4]
    count++;
 8007576:	9b01      	ldr	r3, [sp, #4]
 8007578:	3301      	adds	r3, #1
 800757a:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800757c:	9b01      	ldr	r3, [sp, #4]
 800757e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007582:	d815      	bhi.n	80075b0 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007584:	6903      	ldr	r3, [r0, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	daf5      	bge.n	8007576 <USB_FlushTxFifo+0x6>
  count = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800758e:	0189      	lsls	r1, r1, #6
 8007590:	f041 0120 	orr.w	r1, r1, #32
 8007594:	6101      	str	r1, [r0, #16]
    count++;
 8007596:	9b01      	ldr	r3, [sp, #4]
 8007598:	3301      	adds	r3, #1
 800759a:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800759c:	9b01      	ldr	r3, [sp, #4]
 800759e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075a2:	d808      	bhi.n	80075b6 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075a4:	6903      	ldr	r3, [r0, #16]
 80075a6:	f013 0f20 	tst.w	r3, #32
 80075aa:	d1f4      	bne.n	8007596 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 80075ac:	2000      	movs	r0, #0
 80075ae:	e000      	b.n	80075b2 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 80075b0:	2003      	movs	r0, #3
}
 80075b2:	b002      	add	sp, #8
 80075b4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80075b6:	2003      	movs	r0, #3
 80075b8:	e7fb      	b.n	80075b2 <USB_FlushTxFifo+0x42>

080075ba <USB_FlushRxFifo>:
{
 80075ba:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	9301      	str	r3, [sp, #4]
    count++;
 80075c0:	9b01      	ldr	r3, [sp, #4]
 80075c2:	3301      	adds	r3, #1
 80075c4:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80075c6:	9b01      	ldr	r3, [sp, #4]
 80075c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075cc:	d813      	bhi.n	80075f6 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075ce:	6903      	ldr	r3, [r0, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	daf5      	bge.n	80075c0 <USB_FlushRxFifo+0x6>
  count = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075d8:	2310      	movs	r3, #16
 80075da:	6103      	str	r3, [r0, #16]
    count++;
 80075dc:	9b01      	ldr	r3, [sp, #4]
 80075de:	3301      	adds	r3, #1
 80075e0:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80075e2:	9b01      	ldr	r3, [sp, #4]
 80075e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075e8:	d808      	bhi.n	80075fc <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075ea:	6903      	ldr	r3, [r0, #16]
 80075ec:	f013 0f10 	tst.w	r3, #16
 80075f0:	d1f4      	bne.n	80075dc <USB_FlushRxFifo+0x22>
  return HAL_OK;
 80075f2:	2000      	movs	r0, #0
 80075f4:	e000      	b.n	80075f8 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 80075f6:	2003      	movs	r0, #3
}
 80075f8:	b002      	add	sp, #8
 80075fa:	4770      	bx	lr
      return HAL_TIMEOUT;
 80075fc:	2003      	movs	r0, #3
 80075fe:	e7fb      	b.n	80075f8 <USB_FlushRxFifo+0x3e>

08007600 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8007600:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8007604:	4319      	orrs	r1, r3
 8007606:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 800760a:	2000      	movs	r0, #0
 800760c:	4770      	bx	lr
	...

08007610 <USB_DevInit>:
{
 8007610:	b084      	sub	sp, #16
 8007612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007614:	4604      	mov	r4, r0
 8007616:	a807      	add	r0, sp, #28
 8007618:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800761c:	2300      	movs	r3, #0
 800761e:	e006      	b.n	800762e <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8007620:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8007624:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007628:	2100      	movs	r1, #0
 800762a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800762c:	3301      	adds	r3, #1
 800762e:	2b0e      	cmp	r3, #14
 8007630:	d9f6      	bls.n	8007620 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 8007632:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 8007636:	bb06      	cbnz	r6, 800767a <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007638:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 800763c:	f043 0302 	orr.w	r3, r3, #2
 8007640:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007644:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007646:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800764a:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800764c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800764e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007652:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007654:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800765a:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007662:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8007666:	2b01      	cmp	r3, #1
 8007668:	d115      	bne.n	8007696 <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 800766a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800766e:	b96b      	cbnz	r3, 800768c <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007670:	2100      	movs	r1, #0
 8007672:	4620      	mov	r0, r4
 8007674:	f7ff ffc4 	bl	8007600 <USB_SetDevSpeed>
 8007678:	e011      	b.n	800769e <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800767a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800767c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007680:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007682:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007684:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007688:	63a3      	str	r3, [r4, #56]	@ 0x38
 800768a:	e7e7      	b.n	800765c <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800768c:	2101      	movs	r1, #1
 800768e:	4620      	mov	r0, r4
 8007690:	f7ff ffb6 	bl	8007600 <USB_SetDevSpeed>
 8007694:	e003      	b.n	800769e <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007696:	2103      	movs	r1, #3
 8007698:	4620      	mov	r0, r4
 800769a:	f7ff ffb1 	bl	8007600 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800769e:	2110      	movs	r1, #16
 80076a0:	4620      	mov	r0, r4
 80076a2:	f7ff ff65 	bl	8007570 <USB_FlushTxFifo>
 80076a6:	4605      	mov	r5, r0
 80076a8:	b100      	cbz	r0, 80076ac <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 80076aa:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80076ac:	4620      	mov	r0, r4
 80076ae:	f7ff ff84 	bl	80075ba <USB_FlushRxFifo>
 80076b2:	b100      	cbz	r0, 80076b6 <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 80076b4:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80076b6:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 80076ba:	2300      	movs	r3, #0
 80076bc:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80076c0:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80076c4:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076c8:	e00d      	b.n	80076e6 <USB_DevInit+0xd6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80076ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80076ce:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 80076d2:	e002      	b.n	80076da <USB_DevInit+0xca>
      USBx_INEP(i)->DIEPCTL = 0U;
 80076d4:	2000      	movs	r0, #0
 80076d6:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80076da:	2200      	movs	r2, #0
 80076dc:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076de:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 80076e2:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076e4:	3301      	adds	r3, #1
 80076e6:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80076ea:	4299      	cmp	r1, r3
 80076ec:	d90e      	bls.n	800770c <USB_DevInit+0xfc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076ee:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80076f2:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 80076f6:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 80076fa:	2800      	cmp	r0, #0
 80076fc:	daea      	bge.n	80076d4 <USB_DevInit+0xc4>
      if (i == 0U)
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e3      	bne.n	80076ca <USB_DevInit+0xba>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007702:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8007706:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 800770a:	e7e6      	b.n	80076da <USB_DevInit+0xca>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800770c:	2300      	movs	r3, #0
 800770e:	e00a      	b.n	8007726 <USB_DevInit+0x116>
      if (i == 0U)
 8007710:	b1bb      	cbz	r3, 8007742 <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007712:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 8007716:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800771a:	2200      	movs	r2, #0
 800771c:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800771e:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8007722:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007724:	3301      	adds	r3, #1
 8007726:	4299      	cmp	r1, r3
 8007728:	d910      	bls.n	800774c <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800772a:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800772e:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8007732:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 8007736:	2f00      	cmp	r7, #0
 8007738:	dbea      	blt.n	8007710 <USB_DevInit+0x100>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800773a:	2700      	movs	r7, #0
 800773c:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8007740:	e7eb      	b.n	800771a <USB_DevInit+0x10a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007742:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 8007746:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 800774a:	e7e6      	b.n	800771a <USB_DevInit+0x10a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800774c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8007750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007754:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800775c:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8007760:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8007762:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8007766:	b91b      	cbnz	r3, 8007770 <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007768:	69a3      	ldr	r3, [r4, #24]
 800776a:	f043 0310 	orr.w	r3, r3, #16
 800776e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007770:	69a2      	ldr	r2, [r4, #24]
 8007772:	4b0c      	ldr	r3, [pc, #48]	@ (80077a4 <USB_DevInit+0x194>)
 8007774:	4313      	orrs	r3, r2
 8007776:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8007778:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 800777c:	b11b      	cbz	r3, 8007786 <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800777e:	69a3      	ldr	r3, [r4, #24]
 8007780:	f043 0308 	orr.w	r3, r3, #8
 8007784:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8007786:	2e01      	cmp	r6, #1
 8007788:	d004      	beq.n	8007794 <USB_DevInit+0x184>
}
 800778a:	4628      	mov	r0, r5
 800778c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007790:	b004      	add	sp, #16
 8007792:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007794:	69a3      	ldr	r3, [r4, #24]
 8007796:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800779a:	f043 0304 	orr.w	r3, r3, #4
 800779e:	61a3      	str	r3, [r4, #24]
 80077a0:	e7f3      	b.n	800778a <USB_DevInit+0x17a>
 80077a2:	bf00      	nop
 80077a4:	803c3800 	.word	0x803c3800

080077a8 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80077a8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80077ac:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d004      	beq.n	80077be <USB_GetDevSpeed+0x16>
 80077b4:	2b06      	cmp	r3, #6
 80077b6:	d004      	beq.n	80077c2 <USB_GetDevSpeed+0x1a>
 80077b8:	b92b      	cbnz	r3, 80077c6 <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80077ba:	2000      	movs	r0, #0
 80077bc:	4770      	bx	lr
 80077be:	2002      	movs	r0, #2
 80077c0:	4770      	bx	lr
 80077c2:	2002      	movs	r0, #2
 80077c4:	4770      	bx	lr
 80077c6:	200f      	movs	r0, #15
}
 80077c8:	4770      	bx	lr

080077ca <USB_ActivateEndpoint>:
{
 80077ca:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80077cc:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 80077d0:	784b      	ldrb	r3, [r1, #1]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d023      	beq.n	800781e <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80077d6:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 80077da:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 80077de:	f00c 040f 	and.w	r4, ip, #15
 80077e2:	2201      	movs	r2, #1
 80077e4:	40a2      	lsls	r2, r4
 80077e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077ea:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80077ee:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80077f2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80077f6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80077fa:	d10e      	bne.n	800781a <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077fc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007800:	688a      	ldr	r2, [r1, #8]
 8007802:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007806:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007808:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800780c:	4313      	orrs	r3, r2
 800780e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007816:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800781a:	2000      	movs	r0, #0
 800781c:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800781e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8007822:	f00c 0e0f 	and.w	lr, ip, #15
 8007826:	fa03 f30e 	lsl.w	r3, r3, lr
 800782a:	b29b      	uxth	r3, r3
 800782c:	4313      	orrs	r3, r2
 800782e:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007832:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8007836:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800783a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800783e:	d1ec      	bne.n	800781a <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007840:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007844:	688a      	ldr	r2, [r1, #8]
 8007846:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800784a:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800784c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007850:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007854:	4313      	orrs	r3, r2
 8007856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800785a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800785e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8007862:	e7da      	b.n	800781a <USB_ActivateEndpoint+0x50>

08007864 <USB_DeactivateEndpoint>:
{
 8007864:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8007866:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8007868:	784a      	ldrb	r2, [r1, #1]
 800786a:	2a01      	cmp	r2, #1
 800786c:	d026      	beq.n	80078bc <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800786e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8007872:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8007876:	2a00      	cmp	r2, #0
 8007878:	db52      	blt.n	8007920 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800787a:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 800787e:	780a      	ldrb	r2, [r1, #0]
 8007880:	f002 020f 	and.w	r2, r2, #15
 8007884:	f04f 0c01 	mov.w	ip, #1
 8007888:	fa0c f202 	lsl.w	r2, ip, r2
 800788c:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8007890:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007894:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8007898:	7809      	ldrb	r1, [r1, #0]
 800789a:	f001 010f 	and.w	r1, r1, #15
 800789e:	fa0c fc01 	lsl.w	ip, ip, r1
 80078a2:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 80078a6:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80078aa:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 80078ae:	4a23      	ldr	r2, [pc, #140]	@ (800793c <USB_DeactivateEndpoint+0xd8>)
 80078b0:	400a      	ands	r2, r1
 80078b2:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 80078b6:	2000      	movs	r0, #0
 80078b8:	bc30      	pop	{r4, r5}
 80078ba:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078bc:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80078c0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80078c4:	2a00      	cmp	r2, #0
 80078c6:	db1e      	blt.n	8007906 <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80078c8:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 80078cc:	780a      	ldrb	r2, [r1, #0]
 80078ce:	f002 020f 	and.w	r2, r2, #15
 80078d2:	2401      	movs	r4, #1
 80078d4:	fa04 f202 	lsl.w	r2, r4, r2
 80078d8:	b292      	uxth	r2, r2
 80078da:	ea25 0202 	bic.w	r2, r5, r2
 80078de:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80078e2:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80078e6:	7809      	ldrb	r1, [r1, #0]
 80078e8:	f001 010f 	and.w	r1, r1, #15
 80078ec:	408c      	lsls	r4, r1
 80078ee:	b2a4      	uxth	r4, r4
 80078f0:	ea22 0204 	bic.w	r2, r2, r4
 80078f4:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80078f8:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80078fc:	4a10      	ldr	r2, [pc, #64]	@ (8007940 <USB_DeactivateEndpoint+0xdc>)
 80078fe:	400a      	ands	r2, r1
 8007900:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8007904:	e7d7      	b.n	80078b6 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007906:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800790a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800790e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007912:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8007916:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800791a:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 800791e:	e7d3      	b.n	80078c8 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007920:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8007924:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8007928:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800792c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8007930:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007934:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8007938:	e79f      	b.n	800787a <USB_DeactivateEndpoint+0x16>
 800793a:	bf00      	nop
 800793c:	eff37800 	.word	0xeff37800
 8007940:	ec337800 	.word	0xec337800

08007944 <USB_EPStopXfer>:
{
 8007944:	b410      	push	{r4}
 8007946:	b083      	sub	sp, #12
 8007948:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 800794e:	7848      	ldrb	r0, [r1, #1]
 8007950:	2801      	cmp	r0, #1
 8007952:	d00b      	beq.n	800796c <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007954:	780b      	ldrb	r3, [r1, #0]
 8007956:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800795a:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 800795e:	2800      	cmp	r0, #0
 8007960:	db2d      	blt.n	80079be <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8007962:	2000      	movs	r0, #0
}
 8007964:	b003      	add	sp, #12
 8007966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800796a:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800796c:	780b      	ldrb	r3, [r1, #0]
 800796e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007972:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8007976:	2c00      	cmp	r4, #0
 8007978:	db01      	blt.n	800797e <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 800797a:	2000      	movs	r0, #0
 800797c:	e7f2      	b.n	8007964 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800797e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8007982:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8007986:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800798a:	780b      	ldrb	r3, [r1, #0]
 800798c:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007990:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8007994:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8007998:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 800799c:	9b01      	ldr	r3, [sp, #4]
 800799e:	3301      	adds	r3, #1
 80079a0:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80079a2:	9c01      	ldr	r4, [sp, #4]
 80079a4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80079a8:	429c      	cmp	r4, r3
 80079aa:	d8db      	bhi.n	8007964 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80079ac:	780b      	ldrb	r3, [r1, #0]
 80079ae:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80079b2:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	dbf0      	blt.n	800799c <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 80079ba:	2000      	movs	r0, #0
 80079bc:	e7d2      	b.n	8007964 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80079be:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80079c2:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 80079c6:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80079ca:	780b      	ldrb	r3, [r1, #0]
 80079cc:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80079d0:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80079d4:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80079d8:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 80079dc:	9b01      	ldr	r3, [sp, #4]
 80079de:	3301      	adds	r3, #1
 80079e0:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80079e2:	9801      	ldr	r0, [sp, #4]
 80079e4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80079e8:	4298      	cmp	r0, r3
 80079ea:	d808      	bhi.n	80079fe <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80079ec:	780b      	ldrb	r3, [r1, #0]
 80079ee:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80079f2:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	dbf0      	blt.n	80079dc <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 80079fa:	2000      	movs	r0, #0
 80079fc:	e7b2      	b.n	8007964 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 80079fe:	2001      	movs	r0, #1
 8007a00:	e7b0      	b.n	8007964 <USB_EPStopXfer+0x20>

08007a02 <USB_WritePacket>:
{
 8007a02:	b510      	push	{r4, lr}
 8007a04:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8007a08:	b984      	cbnz	r4, 8007a2c <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a0a:	3303      	adds	r3, #3
 8007a0c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8007a10:	f04f 0c00 	mov.w	ip, #0
 8007a14:	e008      	b.n	8007a28 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a16:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8007a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a1e:	f851 4b04 	ldr.w	r4, [r1], #4
 8007a22:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8007a24:	f10c 0c01 	add.w	ip, ip, #1
 8007a28:	45f4      	cmp	ip, lr
 8007a2a:	d3f4      	bcc.n	8007a16 <USB_WritePacket+0x14>
}
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	bd10      	pop	{r4, pc}

08007a30 <USB_EPStartXfer>:
{
 8007a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a32:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8007a34:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8007a36:	784b      	ldrb	r3, [r1, #1]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d02d      	beq.n	8007a98 <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a3c:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8007a40:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8007a44:	691d      	ldr	r5, [r3, #16]
 8007a46:	f36f 0512 	bfc	r5, #0, #19
 8007a4a:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a4c:	691d      	ldr	r5, [r3, #16]
 8007a4e:	f36f 45dc 	bfc	r5, #19, #10
 8007a52:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8007a54:	2c00      	cmp	r4, #0
 8007a56:	f040 80ce 	bne.w	8007bf6 <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 8007a5a:	690c      	ldr	r4, [r1, #16]
 8007a5c:	b10c      	cbz	r4, 8007a62 <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8007a5e:	688c      	ldr	r4, [r1, #8]
 8007a60:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8007a62:	688c      	ldr	r4, [r1, #8]
 8007a64:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007a66:	691d      	ldr	r5, [r3, #16]
 8007a68:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007a6c:	432c      	orrs	r4, r5
 8007a6e:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a70:	691c      	ldr	r4, [r3, #16]
 8007a72:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8007a76:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8007a78:	2a01      	cmp	r2, #1
 8007a7a:	f000 80df 	beq.w	8007c3c <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 8007a7e:	790b      	ldrb	r3, [r1, #4]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	f000 80e1 	beq.w	8007c48 <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a86:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8007a8a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a8e:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8007a92:	2000      	movs	r0, #0
 8007a94:	b003      	add	sp, #12
 8007a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8007a98:	690b      	ldr	r3, [r1, #16]
 8007a9a:	bb73      	cbnz	r3, 8007afa <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a9c:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8007aa0:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8007aa4:	f36f 45dc 	bfc	r5, #19, #10
 8007aa8:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007aac:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8007ab0:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8007ab4:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ab8:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8007abc:	f36f 0512 	bfc	r5, #0, #19
 8007ac0:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8007ac4:	2a01      	cmp	r2, #1
 8007ac6:	d054      	beq.n	8007b72 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ac8:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8007acc:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007ad0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007ad4:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8007ad8:	790b      	ldrb	r3, [r1, #4]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d072      	beq.n	8007bc4 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 8007ade:	690b      	ldr	r3, [r1, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0d6      	beq.n	8007a92 <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ae4:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8007ae8:	7809      	ldrb	r1, [r1, #0]
 8007aea:	f001 010f 	and.w	r1, r1, #15
 8007aee:	2201      	movs	r2, #1
 8007af0:	408a      	lsls	r2, r1
 8007af2:	4313      	orrs	r3, r2
 8007af4:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8007af8:	e7cb      	b.n	8007a92 <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007afa:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8007afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b02:	691d      	ldr	r5, [r3, #16]
 8007b04:	f36f 0512 	bfc	r5, #0, #19
 8007b08:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b0a:	691d      	ldr	r5, [r3, #16]
 8007b0c:	f36f 45dc 	bfc	r5, #19, #10
 8007b10:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8007b12:	b984      	cbnz	r4, 8007b36 <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 8007b14:	690e      	ldr	r6, [r1, #16]
 8007b16:	688d      	ldr	r5, [r1, #8]
 8007b18:	42ae      	cmp	r6, r5
 8007b1a:	d900      	bls.n	8007b1e <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 8007b1c:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b1e:	691d      	ldr	r5, [r3, #16]
 8007b20:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8007b24:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b26:	691d      	ldr	r5, [r3, #16]
 8007b28:	690e      	ldr	r6, [r1, #16]
 8007b2a:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8007b2e:	ea45 050c 	orr.w	r5, r5, ip
 8007b32:	611d      	str	r5, [r3, #16]
 8007b34:	e7c6      	b.n	8007ac4 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b36:	690d      	ldr	r5, [r1, #16]
 8007b38:	688e      	ldr	r6, [r1, #8]
 8007b3a:	4435      	add	r5, r6
 8007b3c:	3d01      	subs	r5, #1
 8007b3e:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007b42:	691e      	ldr	r6, [r3, #16]
 8007b44:	fa1f fc85 	uxth.w	ip, r5
 8007b48:	4f49      	ldr	r7, [pc, #292]	@ (8007c70 <USB_EPStartXfer+0x240>)
 8007b4a:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8007b4e:	4335      	orrs	r5, r6
 8007b50:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8007b52:	790d      	ldrb	r5, [r1, #4]
 8007b54:	2d01      	cmp	r5, #1
 8007b56:	d1e6      	bne.n	8007b26 <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007b58:	691d      	ldr	r5, [r3, #16]
 8007b5a:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8007b5e:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007b60:	691d      	ldr	r5, [r3, #16]
 8007b62:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8007b66:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 8007b6a:	ea45 050c 	orr.w	r5, r5, ip
 8007b6e:	611d      	str	r5, [r3, #16]
 8007b70:	e7d9      	b.n	8007b26 <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8007b72:	69cb      	ldr	r3, [r1, #28]
 8007b74:	b11b      	cbz	r3, 8007b7e <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b76:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8007b7a:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8007b7e:	790b      	ldrb	r3, [r1, #4]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d008      	beq.n	8007b96 <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b84:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8007b88:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007b8c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b90:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8007b94:	e77d      	b.n	8007a92 <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b96:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8007b9a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007b9e:	d108      	bne.n	8007bb2 <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ba0:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8007ba4:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8007ba8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007bac:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8007bb0:	e7e8      	b.n	8007b84 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007bb2:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8007bb6:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8007bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bbe:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8007bc2:	e7df      	b.n	8007b84 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bc4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8007bc8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007bcc:	d10c      	bne.n	8007be8 <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007bce:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007bd2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007bd6:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007bda:	9200      	str	r2, [sp, #0]
 8007bdc:	8a0b      	ldrh	r3, [r1, #16]
 8007bde:	780a      	ldrb	r2, [r1, #0]
 8007be0:	68c9      	ldr	r1, [r1, #12]
 8007be2:	f7ff ff0e 	bl	8007a02 <USB_WritePacket>
 8007be6:	e754      	b.n	8007a92 <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007be8:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bf0:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8007bf4:	e7f1      	b.n	8007bda <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 8007bf6:	690c      	ldr	r4, [r1, #16]
 8007bf8:	b954      	cbnz	r4, 8007c10 <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007bfa:	691c      	ldr	r4, [r3, #16]
 8007bfc:	688d      	ldr	r5, [r1, #8]
 8007bfe:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8007c02:	432c      	orrs	r4, r5
 8007c04:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c06:	691c      	ldr	r4, [r3, #16]
 8007c08:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8007c0c:	611c      	str	r4, [r3, #16]
 8007c0e:	e733      	b.n	8007a78 <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c10:	688d      	ldr	r5, [r1, #8]
 8007c12:	442c      	add	r4, r5
 8007c14:	3c01      	subs	r4, #1
 8007c16:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007c1a:	b2a4      	uxth	r4, r4
 8007c1c:	fb04 f505 	mul.w	r5, r4, r5
 8007c20:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c22:	691d      	ldr	r5, [r3, #16]
 8007c24:	4e12      	ldr	r6, [pc, #72]	@ (8007c70 <USB_EPStartXfer+0x240>)
 8007c26:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8007c2a:	432c      	orrs	r4, r5
 8007c2c:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c2e:	691c      	ldr	r4, [r3, #16]
 8007c30:	6a0d      	ldr	r5, [r1, #32]
 8007c32:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8007c36:	432c      	orrs	r4, r5
 8007c38:	611c      	str	r4, [r3, #16]
 8007c3a:	e71d      	b.n	8007a78 <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c3c:	68ca      	ldr	r2, [r1, #12]
 8007c3e:	2a00      	cmp	r2, #0
 8007c40:	f43f af1d 	beq.w	8007a7e <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c44:	615a      	str	r2, [r3, #20]
 8007c46:	e71a      	b.n	8007a7e <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c48:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8007c4c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007c50:	d106      	bne.n	8007c60 <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c52:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8007c56:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c5a:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8007c5e:	e712      	b.n	8007a86 <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c60:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8007c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c68:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8007c6c:	e70b      	b.n	8007a86 <USB_EPStartXfer+0x56>
 8007c6e:	bf00      	nop
 8007c70:	1ff80000 	.word	0x1ff80000

08007c74 <USB_ReadPacket>:
{
 8007c74:	b510      	push	{r4, lr}
 8007c76:	4684      	mov	ip, r0
 8007c78:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8007c7a:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8007c7e:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8007c82:	2300      	movs	r3, #0
 8007c84:	e005      	b.n	8007c92 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007c86:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 8007c8a:	6809      	ldr	r1, [r1, #0]
 8007c8c:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8007c90:	3301      	adds	r3, #1
 8007c92:	4573      	cmp	r3, lr
 8007c94:	d3f7      	bcc.n	8007c86 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8007c96:	b17a      	cbz	r2, 8007cb8 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007c98:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8007c9c:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8007ca0:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ca2:	b2cb      	uxtb	r3, r1
 8007ca4:	00db      	lsls	r3, r3, #3
 8007ca6:	fa24 f303 	lsr.w	r3, r4, r3
 8007caa:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8007cae:	3101      	adds	r1, #1
      remaining_bytes--;
 8007cb0:	3a01      	subs	r2, #1
 8007cb2:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8007cb4:	2a00      	cmp	r2, #0
 8007cb6:	d1f4      	bne.n	8007ca2 <USB_ReadPacket+0x2e>
}
 8007cb8:	bd10      	pop	{r4, pc}

08007cba <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8007cba:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8007cbc:	784a      	ldrb	r2, [r1, #1]
 8007cbe:	2a01      	cmp	r2, #1
 8007cc0:	d014      	beq.n	8007cec <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cc2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007cc6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8007cca:	2a00      	cmp	r2, #0
 8007ccc:	db06      	blt.n	8007cdc <USB_EPSetStall+0x22>
 8007cce:	b12b      	cbz	r3, 8007cdc <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007cd0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007cd4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007cd8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007cdc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007ce0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ce4:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8007ce8:	2000      	movs	r0, #0
 8007cea:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cec:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007cf0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8007cf4:	2a00      	cmp	r2, #0
 8007cf6:	db06      	blt.n	8007d06 <USB_EPSetStall+0x4c>
 8007cf8:	b12b      	cbz	r3, 8007d06 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007cfa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007cfe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d02:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d06:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007d0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d0e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8007d12:	e7e9      	b.n	8007ce8 <USB_EPSetStall+0x2e>

08007d14 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8007d14:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8007d16:	784a      	ldrb	r2, [r1, #1]
 8007d18:	2a01      	cmp	r2, #1
 8007d1a:	d00e      	beq.n	8007d3a <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d1c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007d20:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007d24:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d28:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d2c:	790b      	ldrb	r3, [r1, #4]
 8007d2e:	3b02      	subs	r3, #2
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d915      	bls.n	8007d62 <USB_EPClearStall+0x4e>
}
 8007d36:	2000      	movs	r0, #0
 8007d38:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d3a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007d3e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007d42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d46:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d4a:	790b      	ldrb	r3, [r1, #4]
 8007d4c:	3b02      	subs	r3, #2
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d8f0      	bhi.n	8007d36 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d54:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d5c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8007d60:	e7e9      	b.n	8007d36 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d62:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d6a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8007d6e:	e7e2      	b.n	8007d36 <USB_EPClearStall+0x22>

08007d70 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d70:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8007d74:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007d78:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007d7c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8007d80:	0109      	lsls	r1, r1, #4
 8007d82:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8007d86:	430b      	orrs	r3, r1
 8007d88:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	4770      	bx	lr

08007d90 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d90:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8007d94:	f023 0303 	bic.w	r3, r3, #3
 8007d98:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d9c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8007da0:	f023 0302 	bic.w	r3, r3, #2
 8007da4:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8007da8:	2000      	movs	r0, #0
 8007daa:	4770      	bx	lr

08007dac <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007dac:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8007db0:	f023 0303 	bic.w	r3, r3, #3
 8007db4:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007db8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8007dbc:	f043 0302 	orr.w	r3, r3, #2
 8007dc0:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	4770      	bx	lr

08007dc8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8007dc8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8007dca:	6980      	ldr	r0, [r0, #24]
}
 8007dcc:	4010      	ands	r0, r2
 8007dce:	4770      	bx	lr

08007dd0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007dd0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8007dd4:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dd8:	69c0      	ldr	r0, [r0, #28]
 8007dda:	4018      	ands	r0, r3
}
 8007ddc:	0c00      	lsrs	r0, r0, #16
 8007dde:	4770      	bx	lr

08007de0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007de0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8007de4:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007de8:	69c0      	ldr	r0, [r0, #28]
 8007dea:	4018      	ands	r0, r3
}
 8007dec:	b280      	uxth	r0, r0
 8007dee:	4770      	bx	lr

08007df0 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007df0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8007df4:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007df8:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8007dfc:	6940      	ldr	r0, [r0, #20]
}
 8007dfe:	4010      	ands	r0, r2
 8007e00:	4770      	bx	lr

08007e02 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8007e02:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e06:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e0a:	f001 0c0f 	and.w	ip, r1, #15
 8007e0e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007e12:	01db      	lsls	r3, r3, #7
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e18:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8007e1c:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8007e20:	6880      	ldr	r0, [r0, #8]
}
 8007e22:	4018      	ands	r0, r3
 8007e24:	4770      	bx	lr

08007e26 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8007e26:	6940      	ldr	r0, [r0, #20]
}
 8007e28:	f000 0001 	and.w	r0, r0, #1
 8007e2c:	4770      	bx	lr

08007e2e <USB_SetCurrentMode>:
{
 8007e2e:	b538      	push	{r3, r4, r5, lr}
 8007e30:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e32:	68c3      	ldr	r3, [r0, #12]
 8007e34:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007e38:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007e3a:	2901      	cmp	r1, #1
 8007e3c:	d013      	beq.n	8007e66 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8007e3e:	bb19      	cbnz	r1, 8007e88 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e40:	68c3      	ldr	r3, [r0, #12]
 8007e42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e46:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8007e48:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8007e4a:	200a      	movs	r0, #10
 8007e4c:	f7fc f8d8 	bl	8004000 <HAL_Delay>
      ms += 10U;
 8007e50:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e52:	4628      	mov	r0, r5
 8007e54:	f7ff ffe7 	bl	8007e26 <USB_GetMode>
 8007e58:	b108      	cbz	r0, 8007e5e <USB_SetCurrentMode+0x30>
 8007e5a:	2cc7      	cmp	r4, #199	@ 0xc7
 8007e5c:	d9f5      	bls.n	8007e4a <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007e5e:	2cc8      	cmp	r4, #200	@ 0xc8
 8007e60:	d014      	beq.n	8007e8c <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8007e62:	2000      	movs	r0, #0
}
 8007e64:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e66:	68c3      	ldr	r3, [r0, #12]
 8007e68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e6c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8007e6e:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8007e70:	200a      	movs	r0, #10
 8007e72:	f7fc f8c5 	bl	8004000 <HAL_Delay>
      ms += 10U;
 8007e76:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e78:	4628      	mov	r0, r5
 8007e7a:	f7ff ffd4 	bl	8007e26 <USB_GetMode>
 8007e7e:	2801      	cmp	r0, #1
 8007e80:	d0ed      	beq.n	8007e5e <USB_SetCurrentMode+0x30>
 8007e82:	2cc7      	cmp	r4, #199	@ 0xc7
 8007e84:	d9f4      	bls.n	8007e70 <USB_SetCurrentMode+0x42>
 8007e86:	e7ea      	b.n	8007e5e <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8007e88:	2001      	movs	r0, #1
 8007e8a:	e7eb      	b.n	8007e64 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8007e8c:	2001      	movs	r0, #1
 8007e8e:	e7e9      	b.n	8007e64 <USB_SetCurrentMode+0x36>

08007e90 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e90:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007e94:	f36f 030a 	bfc	r3, #0, #11
 8007e98:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e9c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8007ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ea4:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	4770      	bx	lr

08007eac <USB_EP0_OutStart>:
{
 8007eac:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007eae:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007eb0:	4b15      	ldr	r3, [pc, #84]	@ (8007f08 <USB_EP0_OutStart+0x5c>)
 8007eb2:	429c      	cmp	r4, r3
 8007eb4:	d903      	bls.n	8007ebe <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007eb6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	db16      	blt.n	8007eec <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007ebe:	2400      	movs	r4, #0
 8007ec0:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ec4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8007ec8:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8007ecc:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007ed0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8007ed4:	f044 0418 	orr.w	r4, r4, #24
 8007ed8:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007edc:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8007ee0:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8007ee4:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8007ee8:	2901      	cmp	r1, #1
 8007eea:	d003      	beq.n	8007ef4 <USB_EP0_OutStart+0x48>
}
 8007eec:	2000      	movs	r0, #0
 8007eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ef2:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ef4:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ef8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007efc:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007f00:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8007f04:	e7f2      	b.n	8007eec <USB_EP0_OutStart+0x40>
 8007f06:	bf00      	nop
 8007f08:	4f54300a 	.word	0x4f54300a

08007f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007f0c:	b510      	push	{r4, lr}
 8007f0e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007f10:	4a0c      	ldr	r2, [pc, #48]	@ (8007f44 <_sbrk+0x38>)
 8007f12:	490d      	ldr	r1, [pc, #52]	@ (8007f48 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007f14:	480d      	ldr	r0, [pc, #52]	@ (8007f4c <_sbrk+0x40>)
 8007f16:	6800      	ldr	r0, [r0, #0]
 8007f18:	b140      	cbz	r0, 8007f2c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007f1a:	480c      	ldr	r0, [pc, #48]	@ (8007f4c <_sbrk+0x40>)
 8007f1c:	6800      	ldr	r0, [r0, #0]
 8007f1e:	4403      	add	r3, r0
 8007f20:	1a52      	subs	r2, r2, r1
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d806      	bhi.n	8007f34 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8007f26:	4a09      	ldr	r2, [pc, #36]	@ (8007f4c <_sbrk+0x40>)
 8007f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8007f2a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8007f2c:	4807      	ldr	r0, [pc, #28]	@ (8007f4c <_sbrk+0x40>)
 8007f2e:	4c08      	ldr	r4, [pc, #32]	@ (8007f50 <_sbrk+0x44>)
 8007f30:	6004      	str	r4, [r0, #0]
 8007f32:	e7f2      	b.n	8007f1a <_sbrk+0xe>
    errno = ENOMEM;
 8007f34:	f003 f8e2 	bl	800b0fc <__errno>
 8007f38:	230c      	movs	r3, #12
 8007f3a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8007f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f40:	e7f3      	b.n	8007f2a <_sbrk+0x1e>
 8007f42:	bf00      	nop
 8007f44:	20010000 	.word	0x20010000
 8007f48:	00000400 	.word	0x00000400
 8007f4c:	20005f78 	.word	0x20005f78
 8007f50:	20008398 	.word	0x20008398

08007f54 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007f54:	4a03      	ldr	r2, [pc, #12]	@ (8007f64 <SystemInit+0x10>)
 8007f56:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007f5a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007f5e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007f62:	4770      	bx	lr
 8007f64:	e000ed00 	.word	0xe000ed00

08007f68 <table_2d_get_value>:
#include "tables.h"
#include "error_handling.h"
#include "utils.h"

float table_2d_get_value(table_2d_t *table, float x, float y)
{
 8007f68:	b500      	push	{lr}
    uint8_t num_x_bins = sizeof(table->x_bins) / sizeof(table->x_bins[0]);
    uint8_t num_y_bins = sizeof(table->y_bins) / sizeof(table->y_bins[0]);
    x = CLAMP(x, table->x_bins[0], table->x_bins[num_x_bins - 1]);
 8007f6a:	f500 6380 	add.w	r3, r0, #1024	@ 0x400
 8007f6e:	edd3 6a00 	vldr	s13, [r3]
 8007f72:	eef4 6ac0 	vcmpe.f32	s13, s0
 8007f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f7a:	dc0a      	bgt.n	8007f92 <table_2d_get_value+0x2a>
 8007f7c:	f200 433c 	addw	r3, r0, #1084	@ 0x43c
 8007f80:	edd3 6a00 	vldr	s13, [r3]
 8007f84:	eef4 6ac0 	vcmpe.f32	s13, s0
 8007f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f8c:	d401      	bmi.n	8007f92 <table_2d_get_value+0x2a>
 8007f8e:	eef0 6a40 	vmov.f32	s13, s0
    y = CLAMP(y, table->y_bins[0], table->y_bins[num_y_bins - 1]);
 8007f92:	f500 6388 	add.w	r3, r0, #1088	@ 0x440
 8007f96:	ed93 7a00 	vldr	s14, [r3]
 8007f9a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa2:	dc0a      	bgt.n	8007fba <table_2d_get_value+0x52>
 8007fa4:	f200 437c 	addw	r3, r0, #1148	@ 0x47c
 8007fa8:	ed93 7a00 	vldr	s14, [r3]
 8007fac:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb4:	d401      	bmi.n	8007fba <table_2d_get_value+0x52>
 8007fb6:	eeb0 7a60 	vmov.f32	s14, s1

    // Find x_bin (lower index)
    uint8_t x_bin = 0;
 8007fba:	2300      	movs	r3, #0
    while (x_bin < num_x_bins - 1 && x >= table->x_bins[x_bin + 1])
 8007fbc:	e001      	b.n	8007fc2 <table_2d_get_value+0x5a>
    {
        x_bin++;
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	b2db      	uxtb	r3, r3
    while (x_bin < num_x_bins - 1 && x >= table->x_bins[x_bin + 1])
 8007fc2:	2b0e      	cmp	r3, #14
 8007fc4:	d80a      	bhi.n	8007fdc <table_2d_get_value+0x74>
 8007fc6:	f203 1201 	addw	r2, r3, #257	@ 0x101
 8007fca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007fce:	edd2 7a00 	vldr	s15, [r2]
 8007fd2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fda:	d9f0      	bls.n	8007fbe <table_2d_get_value+0x56>
    }
    uint8_t x_bin_next = (x_bin < num_x_bins - 1) ? x_bin + 1 : x_bin;
 8007fdc:	2b0e      	cmp	r3, #14
 8007fde:	d814      	bhi.n	800800a <table_2d_get_value+0xa2>
 8007fe0:	f103 0c01 	add.w	ip, r3, #1
 8007fe4:	fa5f fc8c 	uxtb.w	ip, ip

    // Find y_bin (lower index)
    uint8_t y_bin = 0;
 8007fe8:	2200      	movs	r2, #0
    while (y_bin < num_y_bins - 1 && y >= table->y_bins[y_bin + 1])
 8007fea:	2a0e      	cmp	r2, #14
 8007fec:	d80f      	bhi.n	800800e <table_2d_get_value+0xa6>
 8007fee:	f202 1111 	addw	r1, r2, #273	@ 0x111
 8007ff2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ff6:	edd1 7a00 	vldr	s15, [r1]
 8007ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008002:	d804      	bhi.n	800800e <table_2d_get_value+0xa6>
    {
        y_bin++;
 8008004:	3201      	adds	r2, #1
 8008006:	b2d2      	uxtb	r2, r2
 8008008:	e7ef      	b.n	8007fea <table_2d_get_value+0x82>
    uint8_t x_bin_next = (x_bin < num_x_bins - 1) ? x_bin + 1 : x_bin;
 800800a:	469c      	mov	ip, r3
 800800c:	e7ec      	b.n	8007fe8 <table_2d_get_value+0x80>
    }
    uint8_t y_bin_next = (y_bin < num_y_bins - 1) ? y_bin + 1 : y_bin;
 800800e:	2a0e      	cmp	r2, #14
 8008010:	d802      	bhi.n	8008018 <table_2d_get_value+0xb0>
 8008012:	1c51      	adds	r1, r2, #1
 8008014:	b2c9      	uxtb	r1, r1
 8008016:	e000      	b.n	800801a <table_2d_get_value+0xb2>
 8008018:	4611      	mov	r1, r2

    // Get bin edges
    float x0 = table->x_bins[x_bin];
 800801a:	f503 7e80 	add.w	lr, r3, #256	@ 0x100
 800801e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8008022:	ed9e 4a00 	vldr	s8, [lr]
    float x1 = table->x_bins[x_bin_next];
 8008026:	f50c 7e80 	add.w	lr, ip, #256	@ 0x100
 800802a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800802e:	ed9e 5a00 	vldr	s10, [lr]
    float y0 = table->y_bins[y_bin];
 8008032:	f502 7e88 	add.w	lr, r2, #272	@ 0x110
 8008036:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800803a:	edde 4a00 	vldr	s9, [lr]
    float y1 = table->y_bins[y_bin_next];
 800803e:	f501 7e88 	add.w	lr, r1, #272	@ 0x110
 8008042:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8008046:	ed9e 6a00 	vldr	s12, [lr]

    // Get table values at corners
    float q11 = table->data[x_bin][y_bin];
 800804a:	eb02 1e03 	add.w	lr, r2, r3, lsl #4
 800804e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8008052:	edde 7a00 	vldr	s15, [lr]
    float q21 = table->data[x_bin_next][y_bin];
 8008056:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800805a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800805e:	edd2 5a00 	vldr	s11, [r2]
    float q12 = table->data[x_bin][y_bin_next];
 8008062:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8008066:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800806a:	ed93 3a00 	vldr	s6, [r3]
    float q22 = table->data[x_bin_next][y_bin_next];
 800806e:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8008072:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008076:	edd0 3a00 	vldr	s7, [r0]

    // Handle edge cases (avoid division by zero)
    float x_frac = (x1 != x0) ? (x - x0) / (x1 - x0) : 0.0f;
 800807a:	eeb4 4a45 	vcmp.f32	s8, s10
 800807e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008082:	d006      	beq.n	8008092 <table_2d_get_value+0x12a>
 8008084:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8008088:	ee35 5a44 	vsub.f32	s10, s10, s8
 800808c:	ee86 0a85 	vdiv.f32	s0, s13, s10
 8008090:	e001      	b.n	8008096 <table_2d_get_value+0x12e>
 8008092:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 80080f0 <table_2d_get_value+0x188>
    float y_frac = (y1 != y0) ? (y - y0) / (y1 - y0) : 0.0f;
 8008096:	eef4 4a46 	vcmp.f32	s9, s12
 800809a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809e:	d006      	beq.n	80080ae <table_2d_get_value+0x146>
 80080a0:	ee37 7a64 	vsub.f32	s14, s14, s9
 80080a4:	ee76 6a64 	vsub.f32	s13, s12, s9
 80080a8:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80080ac:	e001      	b.n	80080b2 <table_2d_get_value+0x14a>
 80080ae:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80080f0 <table_2d_get_value+0x188>

    // Bilinear interpolation
    float interp =
        q11 * (1 - x_frac) * (1 - y_frac) +
 80080b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080b6:	ee77 6a40 	vsub.f32	s13, s14, s0
 80080ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80080be:	ee37 7a46 	vsub.f32	s14, s14, s12
 80080c2:	ee67 7a87 	vmul.f32	s15, s15, s14
        q21 * x_frac * (1 - y_frac) +
 80080c6:	ee60 5a25 	vmul.f32	s11, s0, s11
 80080ca:	ee27 7a25 	vmul.f32	s14, s14, s11
        q11 * (1 - x_frac) * (1 - y_frac) +
 80080ce:	ee77 7a87 	vadd.f32	s15, s15, s14
        q12 * (1 - x_frac) * y_frac +
 80080d2:	ee66 6a83 	vmul.f32	s13, s13, s6
 80080d6:	ee66 6a86 	vmul.f32	s13, s13, s12
        q21 * x_frac * (1 - y_frac) +
 80080da:	ee77 7aa6 	vadd.f32	s15, s15, s13
        q22 * x_frac * y_frac;
 80080de:	ee20 0a23 	vmul.f32	s0, s0, s7
 80080e2:	ee20 0a06 	vmul.f32	s0, s0, s12

    return interp;
}
 80080e6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80080ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80080ee:	bf00      	nop
 80080f0:	00000000 	.word	0x00000000

080080f4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080f4:	4b08      	ldr	r3, [pc, #32]	@ (8008118 <prvResetNextTaskUnblockTime+0x24>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	b923      	cbnz	r3, 8008106 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080fc:	4b07      	ldr	r3, [pc, #28]	@ (800811c <prvResetNextTaskUnblockTime+0x28>)
 80080fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008106:	4b04      	ldr	r3, [pc, #16]	@ (8008118 <prvResetNextTaskUnblockTime+0x24>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	4b02      	ldr	r3, [pc, #8]	@ (800811c <prvResetNextTaskUnblockTime+0x28>)
 8008112:	601a      	str	r2, [r3, #0]
	}
}
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	20005fec 	.word	0x20005fec
 800811c:	20005f84 	.word	0x20005f84

08008120 <prvInitialiseNewTask>:
{
 8008120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008124:	4680      	mov	r8, r0
 8008126:	460d      	mov	r5, r1
 8008128:	4617      	mov	r7, r2
 800812a:	4699      	mov	r9, r3
 800812c:	9e08      	ldr	r6, [sp, #32]
 800812e:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8008132:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008134:	0092      	lsls	r2, r2, #2
 8008136:	21a5      	movs	r1, #165	@ 0xa5
 8008138:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800813a:	f002 ffd7 	bl	800b0ec <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800813e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008140:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8008144:	3a01      	subs	r2, #1
 8008146:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800814a:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800814e:	b3a5      	cbz	r5, 80081ba <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008150:	f04f 0c00 	mov.w	ip, #0
 8008154:	f1bc 0f0f 	cmp.w	ip, #15
 8008158:	d809      	bhi.n	800816e <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800815a:	f815 300c 	ldrb.w	r3, [r5, ip]
 800815e:	eb04 020c 	add.w	r2, r4, ip
 8008162:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8008166:	b113      	cbz	r3, 800816e <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008168:	f10c 0c01 	add.w	ip, ip, #1
 800816c:	e7f2      	b.n	8008154 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800816e:	2300      	movs	r3, #0
 8008170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008174:	2e37      	cmp	r6, #55	@ 0x37
 8008176:	d900      	bls.n	800817a <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008178:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800817a:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800817c:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800817e:	2500      	movs	r5, #0
 8008180:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008182:	1d20      	adds	r0, r4, #4
 8008184:	f7fa fdf5 	bl	8002d72 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008188:	f104 0018 	add.w	r0, r4, #24
 800818c:	f7fa fdf1 	bl	8002d72 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008190:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008192:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8008196:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008198:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800819a:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800819c:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081a0:	464a      	mov	r2, r9
 80081a2:	4641      	mov	r1, r8
 80081a4:	4638      	mov	r0, r7
 80081a6:	f7fa ff6d 	bl	8003084 <pxPortInitialiseStack>
 80081aa:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80081ac:	f1ba 0f00 	cmp.w	sl, #0
 80081b0:	d001      	beq.n	80081b6 <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081b2:	f8ca 4000 	str.w	r4, [sl]
}
 80081b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081ba:	2300      	movs	r3, #0
 80081bc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80081c0:	e7d8      	b.n	8008174 <prvInitialiseNewTask+0x54>
	...

080081c4 <prvInitialiseTaskLists>:
{
 80081c4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081c6:	2400      	movs	r4, #0
 80081c8:	e007      	b.n	80081da <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081ca:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80081ce:	0093      	lsls	r3, r2, #2
 80081d0:	480e      	ldr	r0, [pc, #56]	@ (800820c <prvInitialiseTaskLists+0x48>)
 80081d2:	4418      	add	r0, r3
 80081d4:	f7fa fdc2 	bl	8002d5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081d8:	3401      	adds	r4, #1
 80081da:	2c37      	cmp	r4, #55	@ 0x37
 80081dc:	d9f5      	bls.n	80081ca <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80081de:	4d0c      	ldr	r5, [pc, #48]	@ (8008210 <prvInitialiseTaskLists+0x4c>)
 80081e0:	4628      	mov	r0, r5
 80081e2:	f7fa fdbb 	bl	8002d5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081e6:	4c0b      	ldr	r4, [pc, #44]	@ (8008214 <prvInitialiseTaskLists+0x50>)
 80081e8:	4620      	mov	r0, r4
 80081ea:	f7fa fdb7 	bl	8002d5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081ee:	480a      	ldr	r0, [pc, #40]	@ (8008218 <prvInitialiseTaskLists+0x54>)
 80081f0:	f7fa fdb4 	bl	8002d5c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80081f4:	4809      	ldr	r0, [pc, #36]	@ (800821c <prvInitialiseTaskLists+0x58>)
 80081f6:	f7fa fdb1 	bl	8002d5c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80081fa:	4809      	ldr	r0, [pc, #36]	@ (8008220 <prvInitialiseTaskLists+0x5c>)
 80081fc:	f7fa fdae 	bl	8002d5c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008200:	4b08      	ldr	r3, [pc, #32]	@ (8008224 <prvInitialiseTaskLists+0x60>)
 8008202:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008204:	4b08      	ldr	r3, [pc, #32]	@ (8008228 <prvInitialiseTaskLists+0x64>)
 8008206:	601c      	str	r4, [r3, #0]
}
 8008208:	bd38      	pop	{r3, r4, r5, pc}
 800820a:	bf00      	nop
 800820c:	20006018 	.word	0x20006018
 8008210:	20006004 	.word	0x20006004
 8008214:	20005ff0 	.word	0x20005ff0
 8008218:	20005fd4 	.word	0x20005fd4
 800821c:	20005fc0 	.word	0x20005fc0
 8008220:	20005fa8 	.word	0x20005fa8
 8008224:	20005fec 	.word	0x20005fec
 8008228:	20005fe8 	.word	0x20005fe8

0800822c <prvAddNewTaskToReadyList>:
{
 800822c:	b510      	push	{r4, lr}
 800822e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008230:	f7fa ff50 	bl	80030d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008234:	4a22      	ldr	r2, [pc, #136]	@ (80082c0 <prvAddNewTaskToReadyList+0x94>)
 8008236:	6813      	ldr	r3, [r2, #0]
 8008238:	3301      	adds	r3, #1
 800823a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800823c:	4b21      	ldr	r3, [pc, #132]	@ (80082c4 <prvAddNewTaskToReadyList+0x98>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	b15b      	cbz	r3, 800825a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8008242:	4b21      	ldr	r3, [pc, #132]	@ (80082c8 <prvAddNewTaskToReadyList+0x9c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	b96b      	cbnz	r3, 8008264 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008248:	4b1e      	ldr	r3, [pc, #120]	@ (80082c4 <prvAddNewTaskToReadyList+0x98>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800824e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008250:	429a      	cmp	r2, r3
 8008252:	d807      	bhi.n	8008264 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8008254:	4b1b      	ldr	r3, [pc, #108]	@ (80082c4 <prvAddNewTaskToReadyList+0x98>)
 8008256:	601c      	str	r4, [r3, #0]
 8008258:	e004      	b.n	8008264 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800825a:	4b1a      	ldr	r3, [pc, #104]	@ (80082c4 <prvAddNewTaskToReadyList+0x98>)
 800825c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800825e:	6813      	ldr	r3, [r2, #0]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d029      	beq.n	80082b8 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8008264:	4a19      	ldr	r2, [pc, #100]	@ (80082cc <prvAddNewTaskToReadyList+0xa0>)
 8008266:	6813      	ldr	r3, [r2, #0]
 8008268:	3301      	adds	r3, #1
 800826a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800826c:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800826e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008270:	4b17      	ldr	r3, [pc, #92]	@ (80082d0 <prvAddNewTaskToReadyList+0xa4>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4298      	cmp	r0, r3
 8008276:	d901      	bls.n	800827c <prvAddNewTaskToReadyList+0x50>
 8008278:	4b15      	ldr	r3, [pc, #84]	@ (80082d0 <prvAddNewTaskToReadyList+0xa4>)
 800827a:	6018      	str	r0, [r3, #0]
 800827c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008280:	1d21      	adds	r1, r4, #4
 8008282:	4b14      	ldr	r3, [pc, #80]	@ (80082d4 <prvAddNewTaskToReadyList+0xa8>)
 8008284:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008288:	f7fa fd76 	bl	8002d78 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800828c:	f7fa ff44 	bl	8003118 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008290:	4b0d      	ldr	r3, [pc, #52]	@ (80082c8 <prvAddNewTaskToReadyList+0x9c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	b17b      	cbz	r3, 80082b6 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008296:	4b0b      	ldr	r3, [pc, #44]	@ (80082c4 <prvAddNewTaskToReadyList+0x98>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800829c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800829e:	429a      	cmp	r2, r3
 80082a0:	d209      	bcs.n	80082b6 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 80082a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80082a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	f3bf 8f6f 	isb	sy
}
 80082b6:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80082b8:	f7ff ff84 	bl	80081c4 <prvInitialiseTaskLists>
 80082bc:	e7d2      	b.n	8008264 <prvAddNewTaskToReadyList+0x38>
 80082be:	bf00      	nop
 80082c0:	20005fa4 	.word	0x20005fa4
 80082c4:	20006478 	.word	0x20006478
 80082c8:	20005f98 	.word	0x20005f98
 80082cc:	20005f88 	.word	0x20005f88
 80082d0:	20005f9c 	.word	0x20005f9c
 80082d4:	20006018 	.word	0x20006018

080082d8 <prvDeleteTCB>:
	{
 80082d8:	b510      	push	{r4, lr}
 80082da:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082dc:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 80082e0:	b163      	cbz	r3, 80082fc <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d011      	beq.n	800830a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d00e      	beq.n	8008308 <prvDeleteTCB+0x30>
 80082ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	e7fe      	b.n	80082fa <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80082fc:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80082fe:	f7fa f9ef 	bl	80026e0 <vPortFree>
				vPortFree( pxTCB );
 8008302:	4620      	mov	r0, r4
 8008304:	f7fa f9ec 	bl	80026e0 <vPortFree>
	}
 8008308:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800830a:	f7fa f9e9 	bl	80026e0 <vPortFree>
 800830e:	e7fb      	b.n	8008308 <prvDeleteTCB+0x30>

08008310 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008310:	4b0f      	ldr	r3, [pc, #60]	@ (8008350 <prvCheckTasksWaitingTermination+0x40>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	b1d3      	cbz	r3, 800834c <prvCheckTasksWaitingTermination+0x3c>
{
 8008316:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8008318:	f7fa fedc 	bl	80030d4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800831c:	4b0d      	ldr	r3, [pc, #52]	@ (8008354 <prvCheckTasksWaitingTermination+0x44>)
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008322:	1d20      	adds	r0, r4, #4
 8008324:	f7fa fd4c 	bl	8002dc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008328:	4a0b      	ldr	r2, [pc, #44]	@ (8008358 <prvCheckTasksWaitingTermination+0x48>)
 800832a:	6813      	ldr	r3, [r2, #0]
 800832c:	3b01      	subs	r3, #1
 800832e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008330:	4a07      	ldr	r2, [pc, #28]	@ (8008350 <prvCheckTasksWaitingTermination+0x40>)
 8008332:	6813      	ldr	r3, [r2, #0]
 8008334:	3b01      	subs	r3, #1
 8008336:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8008338:	f7fa feee 	bl	8003118 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800833c:	4620      	mov	r0, r4
 800833e:	f7ff ffcb 	bl	80082d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008342:	4b03      	ldr	r3, [pc, #12]	@ (8008350 <prvCheckTasksWaitingTermination+0x40>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1e6      	bne.n	8008318 <prvCheckTasksWaitingTermination+0x8>
}
 800834a:	bd10      	pop	{r4, pc}
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	20005fbc 	.word	0x20005fbc
 8008354:	20005fc0 	.word	0x20005fc0
 8008358:	20005fa4 	.word	0x20005fa4

0800835c <prvIdleTask>:
{
 800835c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800835e:	f7ff ffd7 	bl	8008310 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008362:	4b07      	ldr	r3, [pc, #28]	@ (8008380 <prvIdleTask+0x24>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d9f9      	bls.n	800835e <prvIdleTask+0x2>
				taskYIELD();
 800836a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800836e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008372:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	e7ee      	b.n	800835e <prvIdleTask+0x2>
 8008380:	20006018 	.word	0x20006018

08008384 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008384:	b570      	push	{r4, r5, r6, lr}
 8008386:	4604      	mov	r4, r0
 8008388:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800838a:	4b17      	ldr	r3, [pc, #92]	@ (80083e8 <prvAddCurrentTaskToDelayedList+0x64>)
 800838c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800838e:	4b17      	ldr	r3, [pc, #92]	@ (80083ec <prvAddCurrentTaskToDelayedList+0x68>)
 8008390:	6818      	ldr	r0, [r3, #0]
 8008392:	3004      	adds	r0, #4
 8008394:	f7fa fd14 	bl	8002dc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008398:	f1b4 3fff 	cmp.w	r4, #4294967295
 800839c:	d00d      	beq.n	80083ba <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800839e:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083a0:	4b12      	ldr	r3, [pc, #72]	@ (80083ec <prvAddCurrentTaskToDelayedList+0x68>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80083a6:	42a6      	cmp	r6, r4
 80083a8:	d910      	bls.n	80083cc <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083aa:	4b11      	ldr	r3, [pc, #68]	@ (80083f0 <prvAddCurrentTaskToDelayedList+0x6c>)
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	4b0f      	ldr	r3, [pc, #60]	@ (80083ec <prvAddCurrentTaskToDelayedList+0x68>)
 80083b0:	6819      	ldr	r1, [r3, #0]
 80083b2:	3104      	adds	r1, #4
 80083b4:	f7fa fceb 	bl	8002d8e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083b8:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083ba:	2d00      	cmp	r5, #0
 80083bc:	d0ef      	beq.n	800839e <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083be:	4b0b      	ldr	r3, [pc, #44]	@ (80083ec <prvAddCurrentTaskToDelayedList+0x68>)
 80083c0:	6819      	ldr	r1, [r3, #0]
 80083c2:	3104      	adds	r1, #4
 80083c4:	480b      	ldr	r0, [pc, #44]	@ (80083f4 <prvAddCurrentTaskToDelayedList+0x70>)
 80083c6:	f7fa fcd7 	bl	8002d78 <vListInsertEnd>
 80083ca:	e7f5      	b.n	80083b8 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083cc:	4b0a      	ldr	r3, [pc, #40]	@ (80083f8 <prvAddCurrentTaskToDelayedList+0x74>)
 80083ce:	6818      	ldr	r0, [r3, #0]
 80083d0:	4b06      	ldr	r3, [pc, #24]	@ (80083ec <prvAddCurrentTaskToDelayedList+0x68>)
 80083d2:	6819      	ldr	r1, [r3, #0]
 80083d4:	3104      	adds	r1, #4
 80083d6:	f7fa fcda 	bl	8002d8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083da:	4b08      	ldr	r3, [pc, #32]	@ (80083fc <prvAddCurrentTaskToDelayedList+0x78>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	42a3      	cmp	r3, r4
 80083e0:	d9ea      	bls.n	80083b8 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 80083e2:	4b06      	ldr	r3, [pc, #24]	@ (80083fc <prvAddCurrentTaskToDelayedList+0x78>)
 80083e4:	601c      	str	r4, [r3, #0]
}
 80083e6:	e7e7      	b.n	80083b8 <prvAddCurrentTaskToDelayedList+0x34>
 80083e8:	20005fa0 	.word	0x20005fa0
 80083ec:	20006478 	.word	0x20006478
 80083f0:	20005fe8 	.word	0x20005fe8
 80083f4:	20005fa8 	.word	0x20005fa8
 80083f8:	20005fec 	.word	0x20005fec
 80083fc:	20005f84 	.word	0x20005f84

08008400 <xTaskCreateStatic>:
	{
 8008400:	b530      	push	{r4, r5, lr}
 8008402:	b087      	sub	sp, #28
 8008404:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008406:	b17c      	cbz	r4, 8008428 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008408:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800840a:	b1b5      	cbz	r5, 800843a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800840c:	255c      	movs	r5, #92	@ 0x5c
 800840e:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008410:	9d04      	ldr	r5, [sp, #16]
 8008412:	2d5c      	cmp	r5, #92	@ 0x5c
 8008414:	d01a      	beq.n	800844c <xTaskCreateStatic+0x4c>
 8008416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	e7fe      	b.n	8008426 <xTaskCreateStatic+0x26>
 8008428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8008438:	e7fe      	b.n	8008438 <xTaskCreateStatic+0x38>
 800843a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800844a:	e7fe      	b.n	800844a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800844c:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800844e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8008450:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008452:	2402      	movs	r4, #2
 8008454:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008458:	2400      	movs	r4, #0
 800845a:	9403      	str	r4, [sp, #12]
 800845c:	9502      	str	r5, [sp, #8]
 800845e:	ac05      	add	r4, sp, #20
 8008460:	9401      	str	r4, [sp, #4]
 8008462:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008464:	9400      	str	r4, [sp, #0]
 8008466:	f7ff fe5b 	bl	8008120 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800846a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800846c:	f7ff fede 	bl	800822c <prvAddNewTaskToReadyList>
	}
 8008470:	9805      	ldr	r0, [sp, #20]
 8008472:	b007      	add	sp, #28
 8008474:	bd30      	pop	{r4, r5, pc}

08008476 <xTaskCreate>:
	{
 8008476:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800847a:	b085      	sub	sp, #20
 800847c:	4607      	mov	r7, r0
 800847e:	4688      	mov	r8, r1
 8008480:	4614      	mov	r4, r2
 8008482:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008484:	0090      	lsls	r0, r2, #2
 8008486:	f7fa f8a9 	bl	80025dc <pvPortMalloc>
			if( pxStack != NULL )
 800848a:	b308      	cbz	r0, 80084d0 <xTaskCreate+0x5a>
 800848c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800848e:	205c      	movs	r0, #92	@ 0x5c
 8008490:	f7fa f8a4 	bl	80025dc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008494:	4605      	mov	r5, r0
 8008496:	b1a8      	cbz	r0, 80084c4 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8008498:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800849c:	2300      	movs	r3, #0
 800849e:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084a2:	9303      	str	r3, [sp, #12]
 80084a4:	9002      	str	r0, [sp, #8]
 80084a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084a8:	9301      	str	r3, [sp, #4]
 80084aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	4633      	mov	r3, r6
 80084b0:	4622      	mov	r2, r4
 80084b2:	4641      	mov	r1, r8
 80084b4:	4638      	mov	r0, r7
 80084b6:	f7ff fe33 	bl	8008120 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084ba:	4628      	mov	r0, r5
 80084bc:	f7ff feb6 	bl	800822c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084c0:	2001      	movs	r0, #1
 80084c2:	e007      	b.n	80084d4 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80084c4:	4648      	mov	r0, r9
 80084c6:	f7fa f90b 	bl	80026e0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084ca:	f04f 30ff 	mov.w	r0, #4294967295
 80084ce:	e001      	b.n	80084d4 <xTaskCreate+0x5e>
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80084d4:	b005      	add	sp, #20
 80084d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080084dc <vTaskStartScheduler>:
{
 80084dc:	b510      	push	{r4, lr}
 80084de:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084e0:	2400      	movs	r4, #0
 80084e2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084e4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084e6:	aa07      	add	r2, sp, #28
 80084e8:	a906      	add	r1, sp, #24
 80084ea:	a805      	add	r0, sp, #20
 80084ec:	f7f8 fe6c 	bl	80011c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084f0:	9b05      	ldr	r3, [sp, #20]
 80084f2:	9302      	str	r3, [sp, #8]
 80084f4:	9b06      	ldr	r3, [sp, #24]
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	9400      	str	r4, [sp, #0]
 80084fa:	4623      	mov	r3, r4
 80084fc:	9a07      	ldr	r2, [sp, #28]
 80084fe:	4917      	ldr	r1, [pc, #92]	@ (800855c <vTaskStartScheduler+0x80>)
 8008500:	4817      	ldr	r0, [pc, #92]	@ (8008560 <vTaskStartScheduler+0x84>)
 8008502:	f7ff ff7d 	bl	8008400 <xTaskCreateStatic>
 8008506:	4b17      	ldr	r3, [pc, #92]	@ (8008564 <vTaskStartScheduler+0x88>)
 8008508:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800850a:	b1c0      	cbz	r0, 800853e <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 800850c:	f000 fe00 	bl	8009110 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008510:	2801      	cmp	r0, #1
 8008512:	d115      	bne.n	8008540 <vTaskStartScheduler+0x64>
 8008514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8008524:	4b10      	ldr	r3, [pc, #64]	@ (8008568 <vTaskStartScheduler+0x8c>)
 8008526:	f04f 32ff 	mov.w	r2, #4294967295
 800852a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800852c:	4b0f      	ldr	r3, [pc, #60]	@ (800856c <vTaskStartScheduler+0x90>)
 800852e:	2201      	movs	r2, #1
 8008530:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008532:	4b0f      	ldr	r3, [pc, #60]	@ (8008570 <vTaskStartScheduler+0x94>)
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8008538:	f7fa fe66 	bl	8003208 <xPortStartScheduler>
		}
 800853c:	e003      	b.n	8008546 <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 800853e:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008540:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008544:	d001      	beq.n	800854a <vTaskStartScheduler+0x6e>
}
 8008546:	b008      	add	sp, #32
 8008548:	bd10      	pop	{r4, pc}
 800854a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800855a:	e7fe      	b.n	800855a <vTaskStartScheduler+0x7e>
 800855c:	0800d028 	.word	0x0800d028
 8008560:	0800835d 	.word	0x0800835d
 8008564:	20005f80 	.word	0x20005f80
 8008568:	20005f84 	.word	0x20005f84
 800856c:	20005f98 	.word	0x20005f98
 8008570:	20005fa0 	.word	0x20005fa0

08008574 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008574:	4a02      	ldr	r2, [pc, #8]	@ (8008580 <vTaskSuspendAll+0xc>)
 8008576:	6813      	ldr	r3, [r2, #0]
 8008578:	3301      	adds	r3, #1
 800857a:	6013      	str	r3, [r2, #0]
}
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	20005f7c 	.word	0x20005f7c

08008584 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008584:	4b01      	ldr	r3, [pc, #4]	@ (800858c <xTaskGetTickCount+0x8>)
 8008586:	6818      	ldr	r0, [r3, #0]
}
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	20005fa0 	.word	0x20005fa0

08008590 <xTaskIncrementTick>:
{
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008592:	4b3a      	ldr	r3, [pc, #232]	@ (800867c <xTaskIncrementTick+0xec>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d169      	bne.n	800866e <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800859a:	4b39      	ldr	r3, [pc, #228]	@ (8008680 <xTaskIncrementTick+0xf0>)
 800859c:	681d      	ldr	r5, [r3, #0]
 800859e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80085a0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085a2:	b9c5      	cbnz	r5, 80085d6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80085a4:	4b37      	ldr	r3, [pc, #220]	@ (8008684 <xTaskIncrementTick+0xf4>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	b143      	cbz	r3, 80085be <xTaskIncrementTick+0x2e>
 80085ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	e7fe      	b.n	80085bc <xTaskIncrementTick+0x2c>
 80085be:	4a31      	ldr	r2, [pc, #196]	@ (8008684 <xTaskIncrementTick+0xf4>)
 80085c0:	6811      	ldr	r1, [r2, #0]
 80085c2:	4b31      	ldr	r3, [pc, #196]	@ (8008688 <xTaskIncrementTick+0xf8>)
 80085c4:	6818      	ldr	r0, [r3, #0]
 80085c6:	6010      	str	r0, [r2, #0]
 80085c8:	6019      	str	r1, [r3, #0]
 80085ca:	4a30      	ldr	r2, [pc, #192]	@ (800868c <xTaskIncrementTick+0xfc>)
 80085cc:	6813      	ldr	r3, [r2, #0]
 80085ce:	3301      	adds	r3, #1
 80085d0:	6013      	str	r3, [r2, #0]
 80085d2:	f7ff fd8f 	bl	80080f4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085d6:	4b2e      	ldr	r3, [pc, #184]	@ (8008690 <xTaskIncrementTick+0x100>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	42ab      	cmp	r3, r5
 80085dc:	d93d      	bls.n	800865a <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80085de:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085e0:	4b2c      	ldr	r3, [pc, #176]	@ (8008694 <xTaskIncrementTick+0x104>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80085ea:	009a      	lsls	r2, r3, #2
 80085ec:	4b2a      	ldr	r3, [pc, #168]	@ (8008698 <xTaskIncrementTick+0x108>)
 80085ee:	589b      	ldr	r3, [r3, r2]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d900      	bls.n	80085f6 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80085f4:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 80085f6:	4b29      	ldr	r3, [pc, #164]	@ (800869c <xTaskIncrementTick+0x10c>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d03c      	beq.n	8008678 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 80085fe:	2701      	movs	r7, #1
	return xSwitchRequired;
 8008600:	e03a      	b.n	8008678 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8008602:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008604:	4b1f      	ldr	r3, [pc, #124]	@ (8008684 <xTaskIncrementTick+0xf4>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	b343      	cbz	r3, 800865e <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800860c:	4b1d      	ldr	r3, [pc, #116]	@ (8008684 <xTaskIncrementTick+0xf4>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008614:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8008616:	429d      	cmp	r5, r3
 8008618:	d326      	bcc.n	8008668 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800861a:	1d26      	adds	r6, r4, #4
 800861c:	4630      	mov	r0, r6
 800861e:	f7fa fbcf 	bl	8002dc0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008622:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008624:	b11b      	cbz	r3, 800862e <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008626:	f104 0018 	add.w	r0, r4, #24
 800862a:	f7fa fbc9 	bl	8002dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800862e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008630:	4a1b      	ldr	r2, [pc, #108]	@ (80086a0 <xTaskIncrementTick+0x110>)
 8008632:	6812      	ldr	r2, [r2, #0]
 8008634:	4293      	cmp	r3, r2
 8008636:	d901      	bls.n	800863c <xTaskIncrementTick+0xac>
 8008638:	4a19      	ldr	r2, [pc, #100]	@ (80086a0 <xTaskIncrementTick+0x110>)
 800863a:	6013      	str	r3, [r2, #0]
 800863c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008640:	009a      	lsls	r2, r3, #2
 8008642:	4631      	mov	r1, r6
 8008644:	4814      	ldr	r0, [pc, #80]	@ (8008698 <xTaskIncrementTick+0x108>)
 8008646:	4410      	add	r0, r2
 8008648:	f7fa fb96 	bl	8002d78 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800864c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800864e:	4b11      	ldr	r3, [pc, #68]	@ (8008694 <xTaskIncrementTick+0x104>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008654:	429a      	cmp	r2, r3
 8008656:	d2d4      	bcs.n	8008602 <xTaskIncrementTick+0x72>
 8008658:	e7d4      	b.n	8008604 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800865a:	2700      	movs	r7, #0
 800865c:	e7d2      	b.n	8008604 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800865e:	4b0c      	ldr	r3, [pc, #48]	@ (8008690 <xTaskIncrementTick+0x100>)
 8008660:	f04f 32ff 	mov.w	r2, #4294967295
 8008664:	601a      	str	r2, [r3, #0]
					break;
 8008666:	e7bb      	b.n	80085e0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8008668:	4a09      	ldr	r2, [pc, #36]	@ (8008690 <xTaskIncrementTick+0x100>)
 800866a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800866c:	e7b8      	b.n	80085e0 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800866e:	4a0d      	ldr	r2, [pc, #52]	@ (80086a4 <xTaskIncrementTick+0x114>)
 8008670:	6813      	ldr	r3, [r2, #0]
 8008672:	3301      	adds	r3, #1
 8008674:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8008676:	2700      	movs	r7, #0
}
 8008678:	4638      	mov	r0, r7
 800867a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800867c:	20005f7c 	.word	0x20005f7c
 8008680:	20005fa0 	.word	0x20005fa0
 8008684:	20005fec 	.word	0x20005fec
 8008688:	20005fe8 	.word	0x20005fe8
 800868c:	20005f8c 	.word	0x20005f8c
 8008690:	20005f84 	.word	0x20005f84
 8008694:	20006478 	.word	0x20006478
 8008698:	20006018 	.word	0x20006018
 800869c:	20005f90 	.word	0x20005f90
 80086a0:	20005f9c 	.word	0x20005f9c
 80086a4:	20005f94 	.word	0x20005f94

080086a8 <xTaskResumeAll>:
{
 80086a8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80086aa:	4b35      	ldr	r3, [pc, #212]	@ (8008780 <xTaskResumeAll+0xd8>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	b943      	cbnz	r3, 80086c2 <xTaskResumeAll+0x1a>
 80086b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	e7fe      	b.n	80086c0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80086c2:	f7fa fd07 	bl	80030d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80086c6:	4b2e      	ldr	r3, [pc, #184]	@ (8008780 <xTaskResumeAll+0xd8>)
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	3a01      	subs	r2, #1
 80086cc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d14f      	bne.n	8008774 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086d4:	4b2b      	ldr	r3, [pc, #172]	@ (8008784 <xTaskResumeAll+0xdc>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	b90b      	cbnz	r3, 80086de <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80086da:	2400      	movs	r4, #0
 80086dc:	e04b      	b.n	8008776 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80086de:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086e0:	4b29      	ldr	r3, [pc, #164]	@ (8008788 <xTaskResumeAll+0xe0>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	b31b      	cbz	r3, 800872e <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086e6:	4b28      	ldr	r3, [pc, #160]	@ (8008788 <xTaskResumeAll+0xe0>)
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086ec:	f104 0018 	add.w	r0, r4, #24
 80086f0:	f7fa fb66 	bl	8002dc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086f4:	1d25      	adds	r5, r4, #4
 80086f6:	4628      	mov	r0, r5
 80086f8:	f7fa fb62 	bl	8002dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086fc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80086fe:	4b23      	ldr	r3, [pc, #140]	@ (800878c <xTaskResumeAll+0xe4>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4298      	cmp	r0, r3
 8008704:	d901      	bls.n	800870a <xTaskResumeAll+0x62>
 8008706:	4b21      	ldr	r3, [pc, #132]	@ (800878c <xTaskResumeAll+0xe4>)
 8008708:	6018      	str	r0, [r3, #0]
 800870a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800870e:	4629      	mov	r1, r5
 8008710:	4b1f      	ldr	r3, [pc, #124]	@ (8008790 <xTaskResumeAll+0xe8>)
 8008712:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008716:	f7fa fb2f 	bl	8002d78 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800871a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800871c:	4b1d      	ldr	r3, [pc, #116]	@ (8008794 <xTaskResumeAll+0xec>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008722:	429a      	cmp	r2, r3
 8008724:	d3dc      	bcc.n	80086e0 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8008726:	4b1c      	ldr	r3, [pc, #112]	@ (8008798 <xTaskResumeAll+0xf0>)
 8008728:	2201      	movs	r2, #1
 800872a:	601a      	str	r2, [r3, #0]
 800872c:	e7d8      	b.n	80086e0 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800872e:	b10c      	cbz	r4, 8008734 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8008730:	f7ff fce0 	bl	80080f4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008734:	4b19      	ldr	r3, [pc, #100]	@ (800879c <xTaskResumeAll+0xf4>)
 8008736:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8008738:	b984      	cbnz	r4, 800875c <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800873a:	4b17      	ldr	r3, [pc, #92]	@ (8008798 <xTaskResumeAll+0xf0>)
 800873c:	681c      	ldr	r4, [r3, #0]
 800873e:	b1d4      	cbz	r4, 8008776 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8008740:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008748:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008754:	2401      	movs	r4, #1
 8008756:	e00e      	b.n	8008776 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008758:	3c01      	subs	r4, #1
 800875a:	d007      	beq.n	800876c <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800875c:	f7ff ff18 	bl	8008590 <xTaskIncrementTick>
 8008760:	2800      	cmp	r0, #0
 8008762:	d0f9      	beq.n	8008758 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8008764:	4b0c      	ldr	r3, [pc, #48]	@ (8008798 <xTaskResumeAll+0xf0>)
 8008766:	2201      	movs	r2, #1
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	e7f5      	b.n	8008758 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800876c:	4b0b      	ldr	r3, [pc, #44]	@ (800879c <xTaskResumeAll+0xf4>)
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	e7e2      	b.n	800873a <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8008774:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008776:	f7fa fccf 	bl	8003118 <vPortExitCritical>
}
 800877a:	4620      	mov	r0, r4
 800877c:	bd38      	pop	{r3, r4, r5, pc}
 800877e:	bf00      	nop
 8008780:	20005f7c 	.word	0x20005f7c
 8008784:	20005fa4 	.word	0x20005fa4
 8008788:	20005fd4 	.word	0x20005fd4
 800878c:	20005f9c 	.word	0x20005f9c
 8008790:	20006018 	.word	0x20006018
 8008794:	20006478 	.word	0x20006478
 8008798:	20005f90 	.word	0x20005f90
 800879c:	20005f94 	.word	0x20005f94

080087a0 <vTaskDelay>:
	{
 80087a0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087a2:	b1a8      	cbz	r0, 80087d0 <vTaskDelay+0x30>
 80087a4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80087a6:	4b10      	ldr	r3, [pc, #64]	@ (80087e8 <vTaskDelay+0x48>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	b143      	cbz	r3, 80087be <vTaskDelay+0x1e>
 80087ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	e7fe      	b.n	80087bc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80087be:	f7ff fed9 	bl	8008574 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087c2:	2100      	movs	r1, #0
 80087c4:	4620      	mov	r0, r4
 80087c6:	f7ff fddd 	bl	8008384 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80087ca:	f7ff ff6d 	bl	80086a8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80087ce:	b948      	cbnz	r0, 80087e4 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80087d0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80087d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	f3bf 8f6f 	isb	sy
	}
 80087e4:	bd10      	pop	{r4, pc}
 80087e6:	bf00      	nop
 80087e8:	20005f7c 	.word	0x20005f7c

080087ec <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087ec:	4b20      	ldr	r3, [pc, #128]	@ (8008870 <vTaskSwitchContext+0x84>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	b11b      	cbz	r3, 80087fa <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80087f2:	4b20      	ldr	r3, [pc, #128]	@ (8008874 <vTaskSwitchContext+0x88>)
 80087f4:	2201      	movs	r2, #1
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80087fa:	4b1e      	ldr	r3, [pc, #120]	@ (8008874 <vTaskSwitchContext+0x88>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008800:	4b1d      	ldr	r3, [pc, #116]	@ (8008878 <vTaskSwitchContext+0x8c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008808:	008a      	lsls	r2, r1, #2
 800880a:	491c      	ldr	r1, [pc, #112]	@ (800887c <vTaskSwitchContext+0x90>)
 800880c:	588a      	ldr	r2, [r1, r2]
 800880e:	b95a      	cbnz	r2, 8008828 <vTaskSwitchContext+0x3c>
 8008810:	b10b      	cbz	r3, 8008816 <vTaskSwitchContext+0x2a>
 8008812:	3b01      	subs	r3, #1
 8008814:	e7f6      	b.n	8008804 <vTaskSwitchContext+0x18>
 8008816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	e7fe      	b.n	8008826 <vTaskSwitchContext+0x3a>
 8008828:	4608      	mov	r0, r1
 800882a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800882e:	008a      	lsls	r2, r1, #2
 8008830:	4402      	add	r2, r0
 8008832:	6851      	ldr	r1, [r2, #4]
 8008834:	6849      	ldr	r1, [r1, #4]
 8008836:	6051      	str	r1, [r2, #4]
 8008838:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800883c:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8008840:	3208      	adds	r2, #8
 8008842:	4402      	add	r2, r0
 8008844:	4291      	cmp	r1, r2
 8008846:	d00b      	beq.n	8008860 <vTaskSwitchContext+0x74>
 8008848:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800884c:	0091      	lsls	r1, r2, #2
 800884e:	4a0b      	ldr	r2, [pc, #44]	@ (800887c <vTaskSwitchContext+0x90>)
 8008850:	440a      	add	r2, r1
 8008852:	6852      	ldr	r2, [r2, #4]
 8008854:	68d1      	ldr	r1, [r2, #12]
 8008856:	4a0a      	ldr	r2, [pc, #40]	@ (8008880 <vTaskSwitchContext+0x94>)
 8008858:	6011      	str	r1, [r2, #0]
 800885a:	4a07      	ldr	r2, [pc, #28]	@ (8008878 <vTaskSwitchContext+0x8c>)
 800885c:	6013      	str	r3, [r2, #0]
}
 800885e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008860:	6848      	ldr	r0, [r1, #4]
 8008862:	4662      	mov	r2, ip
 8008864:	0091      	lsls	r1, r2, #2
 8008866:	4a05      	ldr	r2, [pc, #20]	@ (800887c <vTaskSwitchContext+0x90>)
 8008868:	440a      	add	r2, r1
 800886a:	6050      	str	r0, [r2, #4]
 800886c:	e7ec      	b.n	8008848 <vTaskSwitchContext+0x5c>
 800886e:	bf00      	nop
 8008870:	20005f7c 	.word	0x20005f7c
 8008874:	20005f90 	.word	0x20005f90
 8008878:	20005f9c 	.word	0x20005f9c
 800887c:	20006018 	.word	0x20006018
 8008880:	20006478 	.word	0x20006478

08008884 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8008884:	b158      	cbz	r0, 800889e <vTaskPlaceOnEventList+0x1a>
{
 8008886:	b510      	push	{r4, lr}
 8008888:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800888a:	4a09      	ldr	r2, [pc, #36]	@ (80088b0 <vTaskPlaceOnEventList+0x2c>)
 800888c:	6811      	ldr	r1, [r2, #0]
 800888e:	3118      	adds	r1, #24
 8008890:	f7fa fa7d 	bl	8002d8e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008894:	2101      	movs	r1, #1
 8008896:	4620      	mov	r0, r4
 8008898:	f7ff fd74 	bl	8008384 <prvAddCurrentTaskToDelayedList>
}
 800889c:	bd10      	pop	{r4, pc}
 800889e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80088ae:	e7fe      	b.n	80088ae <vTaskPlaceOnEventList+0x2a>
 80088b0:	20006478 	.word	0x20006478

080088b4 <vTaskPlaceOnEventListRestricted>:
	{
 80088b4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80088b6:	b170      	cbz	r0, 80088d6 <vTaskPlaceOnEventListRestricted+0x22>
 80088b8:	460d      	mov	r5, r1
 80088ba:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088bc:	4a0a      	ldr	r2, [pc, #40]	@ (80088e8 <vTaskPlaceOnEventListRestricted+0x34>)
 80088be:	6811      	ldr	r1, [r2, #0]
 80088c0:	3118      	adds	r1, #24
 80088c2:	f7fa fa59 	bl	8002d78 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80088c6:	b10c      	cbz	r4, 80088cc <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80088c8:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80088cc:	4621      	mov	r1, r4
 80088ce:	4628      	mov	r0, r5
 80088d0:	f7ff fd58 	bl	8008384 <prvAddCurrentTaskToDelayedList>
	}
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
 80088d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088da:	f383 8811 	msr	BASEPRI, r3
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80088e6:	e7fe      	b.n	80088e6 <vTaskPlaceOnEventListRestricted+0x32>
 80088e8:	20006478 	.word	0x20006478

080088ec <xTaskRemoveFromEventList>:
{
 80088ec:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ee:	68c3      	ldr	r3, [r0, #12]
 80088f0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80088f2:	b324      	cbz	r4, 800893e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088f4:	f104 0518 	add.w	r5, r4, #24
 80088f8:	4628      	mov	r0, r5
 80088fa:	f7fa fa61 	bl	8002dc0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088fe:	4b18      	ldr	r3, [pc, #96]	@ (8008960 <xTaskRemoveFromEventList+0x74>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	bb2b      	cbnz	r3, 8008950 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008904:	1d25      	adds	r5, r4, #4
 8008906:	4628      	mov	r0, r5
 8008908:	f7fa fa5a 	bl	8002dc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800890c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800890e:	4b15      	ldr	r3, [pc, #84]	@ (8008964 <xTaskRemoveFromEventList+0x78>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4298      	cmp	r0, r3
 8008914:	d901      	bls.n	800891a <xTaskRemoveFromEventList+0x2e>
 8008916:	4b13      	ldr	r3, [pc, #76]	@ (8008964 <xTaskRemoveFromEventList+0x78>)
 8008918:	6018      	str	r0, [r3, #0]
 800891a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800891e:	4629      	mov	r1, r5
 8008920:	4b11      	ldr	r3, [pc, #68]	@ (8008968 <xTaskRemoveFromEventList+0x7c>)
 8008922:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008926:	f7fa fa27 	bl	8002d78 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800892a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800892c:	4b0f      	ldr	r3, [pc, #60]	@ (800896c <xTaskRemoveFromEventList+0x80>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008932:	429a      	cmp	r2, r3
 8008934:	d911      	bls.n	800895a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8008936:	2001      	movs	r0, #1
 8008938:	4b0d      	ldr	r3, [pc, #52]	@ (8008970 <xTaskRemoveFromEventList+0x84>)
 800893a:	6018      	str	r0, [r3, #0]
}
 800893c:	bd38      	pop	{r3, r4, r5, pc}
 800893e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800894e:	e7fe      	b.n	800894e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008950:	4629      	mov	r1, r5
 8008952:	4808      	ldr	r0, [pc, #32]	@ (8008974 <xTaskRemoveFromEventList+0x88>)
 8008954:	f7fa fa10 	bl	8002d78 <vListInsertEnd>
 8008958:	e7e7      	b.n	800892a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800895a:	2000      	movs	r0, #0
	return xReturn;
 800895c:	e7ee      	b.n	800893c <xTaskRemoveFromEventList+0x50>
 800895e:	bf00      	nop
 8008960:	20005f7c 	.word	0x20005f7c
 8008964:	20005f9c 	.word	0x20005f9c
 8008968:	20006018 	.word	0x20006018
 800896c:	20006478 	.word	0x20006478
 8008970:	20005f90 	.word	0x20005f90
 8008974:	20005fd4 	.word	0x20005fd4

08008978 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008978:	4b03      	ldr	r3, [pc, #12]	@ (8008988 <vTaskInternalSetTimeOutState+0x10>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800897e:	4b03      	ldr	r3, [pc, #12]	@ (800898c <vTaskInternalSetTimeOutState+0x14>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6043      	str	r3, [r0, #4]
}
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	20005f8c 	.word	0x20005f8c
 800898c:	20005fa0 	.word	0x20005fa0

08008990 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8008990:	b1e0      	cbz	r0, 80089cc <xTaskCheckForTimeOut+0x3c>
{
 8008992:	b570      	push	{r4, r5, r6, lr}
 8008994:	460c      	mov	r4, r1
 8008996:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8008998:	b309      	cbz	r1, 80089de <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 800899a:	f7fa fb9b 	bl	80030d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800899e:	4b1c      	ldr	r3, [pc, #112]	@ (8008a10 <xTaskCheckForTimeOut+0x80>)
 80089a0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089a2:	686b      	ldr	r3, [r5, #4]
 80089a4:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80089a6:	6822      	ldr	r2, [r4, #0]
 80089a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80089ac:	d028      	beq.n	8008a00 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089ae:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8008a14 <xTaskCheckForTimeOut+0x84>
 80089b2:	f8dc c000 	ldr.w	ip, [ip]
 80089b6:	682e      	ldr	r6, [r5, #0]
 80089b8:	4566      	cmp	r6, ip
 80089ba:	d001      	beq.n	80089c0 <xTaskCheckForTimeOut+0x30>
 80089bc:	428b      	cmp	r3, r1
 80089be:	d924      	bls.n	8008a0a <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089c0:	4282      	cmp	r2, r0
 80089c2:	d815      	bhi.n	80089f0 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80089c8:	2401      	movs	r4, #1
 80089ca:	e01a      	b.n	8008a02 <xTaskCheckForTimeOut+0x72>
 80089cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80089dc:	e7fe      	b.n	80089dc <xTaskCheckForTimeOut+0x4c>
 80089de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80089ee:	e7fe      	b.n	80089ee <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 80089f0:	1a5b      	subs	r3, r3, r1
 80089f2:	4413      	add	r3, r2
 80089f4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089f6:	4628      	mov	r0, r5
 80089f8:	f7ff ffbe 	bl	8008978 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089fc:	2400      	movs	r4, #0
 80089fe:	e000      	b.n	8008a02 <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 8008a00:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008a02:	f7fa fb89 	bl	8003118 <vPortExitCritical>
}
 8008a06:	4620      	mov	r0, r4
 8008a08:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8008a0a:	2401      	movs	r4, #1
 8008a0c:	e7f9      	b.n	8008a02 <xTaskCheckForTimeOut+0x72>
 8008a0e:	bf00      	nop
 8008a10:	20005fa0 	.word	0x20005fa0
 8008a14:	20005f8c 	.word	0x20005f8c

08008a18 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008a18:	4b01      	ldr	r3, [pc, #4]	@ (8008a20 <vTaskMissedYield+0x8>)
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]
}
 8008a1e:	4770      	bx	lr
 8008a20:	20005f90 	.word	0x20005f90

08008a24 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008a24:	4b05      	ldr	r3, [pc, #20]	@ (8008a3c <xTaskGetSchedulerState+0x18>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	b133      	cbz	r3, 8008a38 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a2a:	4b05      	ldr	r3, [pc, #20]	@ (8008a40 <xTaskGetSchedulerState+0x1c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	b10b      	cbz	r3, 8008a34 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a30:	2000      	movs	r0, #0
	}
 8008a32:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8008a34:	2002      	movs	r0, #2
 8008a36:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a38:	2001      	movs	r0, #1
 8008a3a:	4770      	bx	lr
 8008a3c:	20005f98 	.word	0x20005f98
 8008a40:	20005f7c 	.word	0x20005f7c

08008a44 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d03b      	beq.n	8008ac0 <xTaskPriorityDisinherit+0x7c>
	{
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8008a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac8 <xTaskPriorityDisinherit+0x84>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4283      	cmp	r3, r0
 8008a52:	d008      	beq.n	8008a66 <xTaskPriorityDisinherit+0x22>
 8008a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	e7fe      	b.n	8008a64 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a66:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008a68:	b943      	cbnz	r3, 8008a7c <xTaskPriorityDisinherit+0x38>
 8008a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	e7fe      	b.n	8008a7a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a80:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8008a82:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8008a84:	4291      	cmp	r1, r2
 8008a86:	d01d      	beq.n	8008ac4 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a88:	b10b      	cbz	r3, 8008a8e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8008a8a:	2000      	movs	r0, #0
	}
 8008a8c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a8e:	1d05      	adds	r5, r0, #4
 8008a90:	4628      	mov	r0, r5
 8008a92:	f7fa f995 	bl	8002dc0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a96:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8008a98:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a9a:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8008a9e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8008acc <xTaskPriorityDisinherit+0x88>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4298      	cmp	r0, r3
 8008aa6:	d901      	bls.n	8008aac <xTaskPriorityDisinherit+0x68>
 8008aa8:	4b08      	ldr	r3, [pc, #32]	@ (8008acc <xTaskPriorityDisinherit+0x88>)
 8008aaa:	6018      	str	r0, [r3, #0]
 8008aac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	4b07      	ldr	r3, [pc, #28]	@ (8008ad0 <xTaskPriorityDisinherit+0x8c>)
 8008ab4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ab8:	f7fa f95e 	bl	8002d78 <vListInsertEnd>
					xReturn = pdTRUE;
 8008abc:	2001      	movs	r0, #1
 8008abe:	e7e5      	b.n	8008a8c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8008ac0:	2000      	movs	r0, #0
	}
 8008ac2:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	e7e1      	b.n	8008a8c <xTaskPriorityDisinherit+0x48>
 8008ac8:	20006478 	.word	0x20006478
 8008acc:	20005f9c 	.word	0x20005f9c
 8008ad0:	20006018 	.word	0x20006018

08008ad4 <thermistor_init>:
#include "thermistor.h"
#include "utils.h"


void thermistor_init(thermistor_t *thermistor, thermistor_conf_t cfg)
{
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	b510      	push	{r4, lr}
 8008ad8:	ed2d 8b02 	vpush	{d8}
 8008adc:	f10d 0c14 	add.w	ip, sp, #20
 8008ae0:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
    if (thermistor == NULL)
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d060      	beq.n	8008baa <thermistor_init+0xd6>
 8008ae8:	4604      	mov	r4, r0
        log_error("Thermistor init failed!");
        return;
    }

    // https://en.wikipedia.org/wiki/Steinhart%E2%80%93Hart_equation
	float l1 = logf(cfg.resistance_1);
 8008aea:	ed9d 0a08 	vldr	s0, [sp, #32]
 8008aee:	f002 ff81 	bl	800b9f4 <logf>
 8008af2:	eef0 8a40 	vmov.f32	s17, s0
	float l2 = logf(cfg.resistance_2);
 8008af6:	ed9d 0a09 	vldr	s0, [sp, #36]	@ 0x24
 8008afa:	f002 ff7b 	bl	800b9f4 <logf>
 8008afe:	eeb0 8a40 	vmov.f32	s16, s0
	float l3 = logf(cfg.resistance_3);
 8008b02:	ed9d 0a0a 	vldr	s0, [sp, #40]	@ 0x28
 8008b06:	f002 ff75 	bl	800b9f4 <logf>

	float y1 = 1 / CELSIUS_TO_KELVIN(cfg.tempC_1);
 8008b0a:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 8008bb4 <thermistor_init+0xe0>
 8008b0e:	eddd 7a05 	vldr	s15, [sp, #20]
 8008b12:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008b16:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8008b1a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
	float y2 = 1 / CELSIUS_TO_KELVIN(cfg.tempC_2);
 8008b1e:	eddd 7a06 	vldr	s15, [sp, #24]
 8008b22:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008b26:	ee85 7aa7 	vdiv.f32	s14, s11, s15
	float y3 = 1 / CELSIUS_TO_KELVIN(cfg.tempC_3);
 8008b2a:	eddd 7a07 	vldr	s15, [sp, #28]
 8008b2e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008b32:	ee85 6aa7 	vdiv.f32	s12, s11, s15

	float u2 = (y2 - y1) / (l2 - l1);
 8008b36:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008b3a:	ee78 5a68 	vsub.f32	s11, s16, s17
 8008b3e:	eec7 7a25 	vdiv.f32	s15, s14, s11
	float u3 = (y3 - y1) / (l3 - l1);
 8008b42:	ee36 6a66 	vsub.f32	s12, s12, s13
 8008b46:	ee70 5a68 	vsub.f32	s11, s0, s17
 8008b4a:	ee86 7a25 	vdiv.f32	s14, s12, s11

	thermistor->m_c = ((u3 - u2) / (l3 - l2)) / (l1 + l2 + l3);
 8008b4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008b52:	ee30 6a48 	vsub.f32	s12, s0, s16
 8008b56:	eec7 5a06 	vdiv.f32	s11, s14, s12
 8008b5a:	ee38 7a88 	vadd.f32	s14, s17, s16
 8008b5e:	ee37 7a00 	vadd.f32	s14, s14, s0
 8008b62:	ee85 6a87 	vdiv.f32	s12, s11, s14
 8008b66:	ed84 6a05 	vstr	s12, [r4, #20]
	thermistor->m_b = u2 - thermistor->m_c * (l1 * l1 + l1 * l2 + l2 * l2);
 8008b6a:	ee68 5aa8 	vmul.f32	s11, s17, s17
 8008b6e:	ee28 7a88 	vmul.f32	s14, s17, s16
 8008b72:	ee35 7a87 	vadd.f32	s14, s11, s14
 8008b76:	ee28 8a08 	vmul.f32	s16, s16, s16
 8008b7a:	ee37 7a08 	vadd.f32	s14, s14, s16
 8008b7e:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008b82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b86:	edc4 7a04 	vstr	s15, [r4, #16]
	thermistor->m_a = y1 - (thermistor->m_b + l1 * l1 * thermistor->m_c) * l1;
 8008b8a:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008b8e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008b92:	ee27 0aa8 	vmul.f32	s0, s15, s17
 8008b96:	ee76 6ac0 	vsub.f32	s13, s13, s0
 8008b9a:	edc4 6a03 	vstr	s13, [r4, #12]
	if (tempAt90percentPoint > cfg.tempC_3)
    {
        log_error("Thermistor configuration has failed 90% test");
	}
    */
}
 8008b9e:	ecbd 8b02 	vpop	{d8}
 8008ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ba6:	b004      	add	sp, #16
 8008ba8:	4770      	bx	lr
        log_error("Thermistor init failed!");
 8008baa:	4803      	ldr	r0, [pc, #12]	@ (8008bb8 <thermistor_init+0xe4>)
 8008bac:	f7f9 fb6a 	bl	8002284 <log_error>
        return;
 8008bb0:	e7f5      	b.n	8008b9e <thermistor_init+0xca>
 8008bb2:	bf00      	nop
 8008bb4:	43889333 	.word	0x43889333
 8008bb8:	0800d030 	.word	0x0800d030

08008bbc <thermistor_get_temp>:

temperature_t thermistor_get_temp(thermistor_t *thermistor)
{
 8008bbc:	b510      	push	{r4, lr}
 8008bbe:	4604      	mov	r4, r0
    // This resistance should have already been validated - only
	// thing we can check is that it's non-negative
    float ohms = resistor_get_resistance(&thermistor->resistor);
 8008bc0:	f7fa ffba 	bl	8003b38 <resistor_get_resistance>
    {
        log_error("Thermistor invalid resistance!");
        return NAN;
    }

	float lnR = logf(ohms);
 8008bc4:	f002 ff16 	bl	800b9f4 <logf>

	float lnR3 = lnR * lnR * lnR;
 8008bc8:	ee60 6a00 	vmul.f32	s13, s0, s0
 8008bcc:	ee66 6a80 	vmul.f32	s13, s13, s0

	float recip = thermistor->m_a + thermistor->m_b * lnR + thermistor->m_c * lnR3;
 8008bd0:	edd4 7a03 	vldr	s15, [r4, #12]
 8008bd4:	ed94 7a04 	vldr	s14, [r4, #16]
 8008bd8:	ee27 7a00 	vmul.f32	s14, s14, s0
 8008bdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008be0:	ed94 7a05 	vldr	s14, [r4, #20]
 8008be4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008be8:	ee77 7a87 	vadd.f32	s15, s15, s14

	float kelvin = 1 / recip;
 8008bec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bf0:	ee87 0a27 	vdiv.f32	s0, s14, s15

	float celsius = KELVIN_TO_CELSIUS(kelvin);
 8008bf4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8008c34 <thermistor_get_temp+0x78>
 8008bf8:	ee30 0a67 	vsub.f32	s0, s0, s15

	// bounds check result - please don't try to run this SGC when it is colder than -50C :)
	if (celsius < -50) {
 8008bfc:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8008c38 <thermistor_get_temp+0x7c>
 8008c00:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c08:	d407      	bmi.n	8008c1a <thermistor_get_temp+0x5e>
		log_error("Thermistor temp bound check failed!");
        return NAN;
	}

	if (celsius > 250) {
 8008c0a:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8008c3c <thermistor_get_temp+0x80>
 8008c0e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c16:	dc06      	bgt.n	8008c26 <thermistor_get_temp+0x6a>
		log_error("Thermistor temp bound check failed!");
        return NAN;
	}

	return celsius;
 8008c18:	bd10      	pop	{r4, pc}
		log_error("Thermistor temp bound check failed!");
 8008c1a:	4809      	ldr	r0, [pc, #36]	@ (8008c40 <thermistor_get_temp+0x84>)
 8008c1c:	f7f9 fb32 	bl	8002284 <log_error>
        return NAN;
 8008c20:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008c44 <thermistor_get_temp+0x88>
 8008c24:	e7f8      	b.n	8008c18 <thermistor_get_temp+0x5c>
		log_error("Thermistor temp bound check failed!");
 8008c26:	4806      	ldr	r0, [pc, #24]	@ (8008c40 <thermistor_get_temp+0x84>)
 8008c28:	f7f9 fb2c 	bl	8002284 <log_error>
        return NAN;
 8008c2c:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8008c44 <thermistor_get_temp+0x88>
 8008c30:	e7f2      	b.n	8008c18 <thermistor_get_temp+0x5c>
 8008c32:	bf00      	nop
 8008c34:	43889333 	.word	0x43889333
 8008c38:	c2480000 	.word	0xc2480000
 8008c3c:	437a0000 	.word	0x437a0000
 8008c40:	0800d048 	.word	0x0800d048
 8008c44:	7fc00000 	.word	0x7fc00000

08008c48 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008c48:	b500      	push	{lr}
 8008c4a:	b08f      	sub	sp, #60	@ 0x3c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c52:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c54:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c56:	9308      	str	r3, [sp, #32]
 8008c58:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	9302      	str	r3, [sp, #8]
 8008c5e:	9303      	str	r3, [sp, #12]
 8008c60:	9304      	str	r3, [sp, #16]
 8008c62:	9305      	str	r3, [sp, #20]
 8008c64:	9306      	str	r3, [sp, #24]
 8008c66:	9307      	str	r3, [sp, #28]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008c68:	481f      	ldr	r0, [pc, #124]	@ (8008ce8 <MX_TIM2_Init+0xa0>)
 8008c6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008c6e:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 84-1;
 8008c70:	2253      	movs	r2, #83	@ 0x53
 8008c72:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c74:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8008c76:	f04f 32ff 	mov.w	r2, #4294967295
 8008c7a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c7c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c7e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008c80:	f7fd ff6c 	bl	8006b5c <HAL_TIM_Base_Init>
 8008c84:	bb00      	cbnz	r0, 8008cc8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008c86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008c8a:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008c8c:	a90a      	add	r1, sp, #40	@ 0x28
 8008c8e:	4816      	ldr	r0, [pc, #88]	@ (8008ce8 <MX_TIM2_Init+0xa0>)
 8008c90:	f7fe f8c0 	bl	8006e14 <HAL_TIM_ConfigClockSource>
 8008c94:	b9d8      	cbnz	r0, 8008cce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8008c96:	4814      	ldr	r0, [pc, #80]	@ (8008ce8 <MX_TIM2_Init+0xa0>)
 8008c98:	f7fd ff8c 	bl	8006bb4 <HAL_TIM_OC_Init>
 8008c9c:	b9d0      	cbnz	r0, 8008cd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ca2:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008ca4:	a908      	add	r1, sp, #32
 8008ca6:	4810      	ldr	r0, [pc, #64]	@ (8008ce8 <MX_TIM2_Init+0xa0>)
 8008ca8:	f7fe fa5e 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 8008cac:	b9a8      	cbnz	r0, 8008cda <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8008cae:	2200      	movs	r2, #0
 8008cb0:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8008cb2:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008cb4:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008cb6:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008cb8:	a901      	add	r1, sp, #4
 8008cba:	480b      	ldr	r0, [pc, #44]	@ (8008ce8 <MX_TIM2_Init+0xa0>)
 8008cbc:	f7fe f800 	bl	8006cc0 <HAL_TIM_OC_ConfigChannel>
 8008cc0:	b970      	cbnz	r0, 8008ce0 <MX_TIM2_Init+0x98>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008cc2:	b00f      	add	sp, #60	@ 0x3c
 8008cc4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8008cc8:	f7fa f8a6 	bl	8002e18 <Error_Handler>
 8008ccc:	e7db      	b.n	8008c86 <MX_TIM2_Init+0x3e>
    Error_Handler();
 8008cce:	f7fa f8a3 	bl	8002e18 <Error_Handler>
 8008cd2:	e7e0      	b.n	8008c96 <MX_TIM2_Init+0x4e>
    Error_Handler();
 8008cd4:	f7fa f8a0 	bl	8002e18 <Error_Handler>
 8008cd8:	e7e1      	b.n	8008c9e <MX_TIM2_Init+0x56>
    Error_Handler();
 8008cda:	f7fa f89d 	bl	8002e18 <Error_Handler>
 8008cde:	e7e6      	b.n	8008cae <MX_TIM2_Init+0x66>
    Error_Handler();
 8008ce0:	f7fa f89a 	bl	8002e18 <Error_Handler>
}
 8008ce4:	e7ed      	b.n	8008cc2 <MX_TIM2_Init+0x7a>
 8008ce6:	bf00      	nop
 8008ce8:	200064c4 	.word	0x200064c4

08008cec <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008cec:	b500      	push	{lr}
 8008cee:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM1)
 8008cf0:	6803      	ldr	r3, [r0, #0]
 8008cf2:	4a19      	ldr	r2, [pc, #100]	@ (8008d58 <HAL_TIM_Base_MspInit+0x6c>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d005      	beq.n	8008d04 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8008cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cfc:	d016      	beq.n	8008d2c <HAL_TIM_Base_MspInit+0x40>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8008cfe:	b003      	add	sp, #12
 8008d00:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008d04:	2200      	movs	r2, #0
 8008d06:	9200      	str	r2, [sp, #0]
 8008d08:	4b14      	ldr	r3, [pc, #80]	@ (8008d5c <HAL_TIM_Base_MspInit+0x70>)
 8008d0a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008d0c:	f041 0101 	orr.w	r1, r1, #1
 8008d10:	6459      	str	r1, [r3, #68]	@ 0x44
 8008d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8008d1c:	210f      	movs	r1, #15
 8008d1e:	201a      	movs	r0, #26
 8008d20:	f7fb fd64 	bl	80047ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8008d24:	201a      	movs	r0, #26
 8008d26:	f7fb fd71 	bl	800480c <HAL_NVIC_EnableIRQ>
 8008d2a:	e7e8      	b.n	8008cfe <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	9201      	str	r2, [sp, #4]
 8008d30:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8008d34:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008d36:	f041 0101 	orr.w	r1, r1, #1
 8008d3a:	6419      	str	r1, [r3, #64]	@ 0x40
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	9301      	str	r3, [sp, #4]
 8008d44:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8008d46:	2105      	movs	r1, #5
 8008d48:	201c      	movs	r0, #28
 8008d4a:	f7fb fd4f 	bl	80047ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008d4e:	201c      	movs	r0, #28
 8008d50:	f7fb fd5c 	bl	800480c <HAL_NVIC_EnableIRQ>
}
 8008d54:	e7d3      	b.n	8008cfe <HAL_TIM_Base_MspInit+0x12>
 8008d56:	bf00      	nop
 8008d58:	40010000 	.word	0x40010000
 8008d5c:	40023800 	.word	0x40023800

08008d60 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM3)
 8008d60:	6802      	ldr	r2, [r0, #0]
 8008d62:	4b09      	ldr	r3, [pc, #36]	@ (8008d88 <HAL_TIM_PWM_MspInit+0x28>)
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d000      	beq.n	8008d6a <HAL_TIM_PWM_MspInit+0xa>
 8008d68:	4770      	bx	lr
{
 8008d6a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	9301      	str	r3, [sp, #4]
 8008d70:	4b06      	ldr	r3, [pc, #24]	@ (8008d8c <HAL_TIM_PWM_MspInit+0x2c>)
 8008d72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d74:	f042 0202 	orr.w	r2, r2, #2
 8008d78:	641a      	str	r2, [r3, #64]	@ 0x40
 8008d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7c:	f003 0302 	and.w	r3, r3, #2
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008d84:	b002      	add	sp, #8
 8008d86:	4770      	bx	lr
 8008d88:	40000400 	.word	0x40000400
 8008d8c:	40023800 	.word	0x40023800

08008d90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008d90:	b500      	push	{lr}
 8008d92:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d94:	2300      	movs	r3, #0
 8008d96:	9303      	str	r3, [sp, #12]
 8008d98:	9304      	str	r3, [sp, #16]
 8008d9a:	9305      	str	r3, [sp, #20]
 8008d9c:	9306      	str	r3, [sp, #24]
 8008d9e:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 8008da0:	6803      	ldr	r3, [r0, #0]
 8008da2:	4a1c      	ldr	r2, [pc, #112]	@ (8008e14 <HAL_TIM_MspPostInit+0x84>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d005      	beq.n	8008db4 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 8008da8:	4a1b      	ldr	r2, [pc, #108]	@ (8008e18 <HAL_TIM_MspPostInit+0x88>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d01a      	beq.n	8008de4 <HAL_TIM_MspPostInit+0x54>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008dae:	b009      	add	sp, #36	@ 0x24
 8008db0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008db4:	2300      	movs	r3, #0
 8008db6:	9301      	str	r3, [sp, #4]
 8008db8:	4b18      	ldr	r3, [pc, #96]	@ (8008e1c <HAL_TIM_MspPostInit+0x8c>)
 8008dba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008dbc:	f042 0201 	orr.w	r2, r2, #1
 8008dc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8008dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	9301      	str	r3, [sp, #4]
 8008dca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_OUT_1_Pin|PWM_OUT_2_Pin|PWM_OUT_3_Pin;
 8008dcc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8008dd0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dda:	a903      	add	r1, sp, #12
 8008ddc:	4810      	ldr	r0, [pc, #64]	@ (8008e20 <HAL_TIM_MspPostInit+0x90>)
 8008dde:	f7fc f90f 	bl	8005000 <HAL_GPIO_Init>
 8008de2:	e7e4      	b.n	8008dae <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008de4:	2300      	movs	r3, #0
 8008de6:	9302      	str	r3, [sp, #8]
 8008de8:	4b0c      	ldr	r3, [pc, #48]	@ (8008e1c <HAL_TIM_MspPostInit+0x8c>)
 8008dea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008dec:	f042 0204 	orr.w	r2, r2, #4
 8008df0:	631a      	str	r2, [r3, #48]	@ 0x30
 8008df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008df4:	f003 0304 	and.w	r3, r3, #4
 8008df8:	9302      	str	r3, [sp, #8]
 8008dfa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DC_MOTOR2_1_Pin|DC_MOTOR2_2_Pin|DC_MOTOR1_1_Pin|DC_MOTOR1_2_Pin;
 8008dfc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8008e00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e02:	2302      	movs	r3, #2
 8008e04:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008e06:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e08:	a903      	add	r1, sp, #12
 8008e0a:	4806      	ldr	r0, [pc, #24]	@ (8008e24 <HAL_TIM_MspPostInit+0x94>)
 8008e0c:	f7fc f8f8 	bl	8005000 <HAL_GPIO_Init>
}
 8008e10:	e7cd      	b.n	8008dae <HAL_TIM_MspPostInit+0x1e>
 8008e12:	bf00      	nop
 8008e14:	40010000 	.word	0x40010000
 8008e18:	40000400 	.word	0x40000400
 8008e1c:	40023800 	.word	0x40023800
 8008e20:	40020000 	.word	0x40020000
 8008e24:	40020800 	.word	0x40020800

08008e28 <MX_TIM1_Init>:
{
 8008e28:	b510      	push	{r4, lr}
 8008e2a:	b096      	sub	sp, #88	@ 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008e2c:	2400      	movs	r4, #0
 8008e2e:	9412      	str	r4, [sp, #72]	@ 0x48
 8008e30:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008e32:	9414      	str	r4, [sp, #80]	@ 0x50
 8008e34:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e36:	9410      	str	r4, [sp, #64]	@ 0x40
 8008e38:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008e3a:	9409      	str	r4, [sp, #36]	@ 0x24
 8008e3c:	940a      	str	r4, [sp, #40]	@ 0x28
 8008e3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008e40:	940c      	str	r4, [sp, #48]	@ 0x30
 8008e42:	940d      	str	r4, [sp, #52]	@ 0x34
 8008e44:	940e      	str	r4, [sp, #56]	@ 0x38
 8008e46:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008e48:	2220      	movs	r2, #32
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	a801      	add	r0, sp, #4
 8008e4e:	f002 f94d 	bl	800b0ec <memset>
  htim1.Instance = TIM1;
 8008e52:	4836      	ldr	r0, [pc, #216]	@ (8008f2c <MX_TIM1_Init+0x104>)
 8008e54:	4b36      	ldr	r3, [pc, #216]	@ (8008f30 <MX_TIM1_Init+0x108>)
 8008e56:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8008e58:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e5a:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 65535;
 8008e5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008e60:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e62:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8008e64:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e66:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008e68:	f7fd fe78 	bl	8006b5c <HAL_TIM_Base_Init>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d144      	bne.n	8008efa <MX_TIM1_Init+0xd2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008e74:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008e76:	a912      	add	r1, sp, #72	@ 0x48
 8008e78:	482c      	ldr	r0, [pc, #176]	@ (8008f2c <MX_TIM1_Init+0x104>)
 8008e7a:	f7fd ffcb 	bl	8006e14 <HAL_TIM_ConfigClockSource>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d13e      	bne.n	8008f00 <MX_TIM1_Init+0xd8>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008e82:	482a      	ldr	r0, [pc, #168]	@ (8008f2c <MX_TIM1_Init+0x104>)
 8008e84:	f7fd fec2 	bl	8006c0c <HAL_TIM_PWM_Init>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d13c      	bne.n	8008f06 <MX_TIM1_Init+0xde>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e90:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008e92:	a910      	add	r1, sp, #64	@ 0x40
 8008e94:	4825      	ldr	r0, [pc, #148]	@ (8008f2c <MX_TIM1_Init+0x104>)
 8008e96:	f7fe f967 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d136      	bne.n	8008f0c <MX_TIM1_Init+0xe4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008e9e:	2360      	movs	r3, #96	@ 0x60
 8008ea0:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008ea6:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008ea8:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008eaa:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008eac:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008eae:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008eb0:	a909      	add	r1, sp, #36	@ 0x24
 8008eb2:	481e      	ldr	r0, [pc, #120]	@ (8008f2c <MX_TIM1_Init+0x104>)
 8008eb4:	f7fd ff33 	bl	8006d1e <HAL_TIM_PWM_ConfigChannel>
 8008eb8:	bb58      	cbnz	r0, 8008f12 <MX_TIM1_Init+0xea>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008eba:	2204      	movs	r2, #4
 8008ebc:	a909      	add	r1, sp, #36	@ 0x24
 8008ebe:	481b      	ldr	r0, [pc, #108]	@ (8008f2c <MX_TIM1_Init+0x104>)
 8008ec0:	f7fd ff2d 	bl	8006d1e <HAL_TIM_PWM_ConfigChannel>
 8008ec4:	bb40      	cbnz	r0, 8008f18 <MX_TIM1_Init+0xf0>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008ec6:	2208      	movs	r2, #8
 8008ec8:	a909      	add	r1, sp, #36	@ 0x24
 8008eca:	4818      	ldr	r0, [pc, #96]	@ (8008f2c <MX_TIM1_Init+0x104>)
 8008ecc:	f7fd ff27 	bl	8006d1e <HAL_TIM_PWM_ConfigChannel>
 8008ed0:	bb28      	cbnz	r0, 8008f1e <MX_TIM1_Init+0xf6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008ed6:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008ed8:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008eda:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008edc:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008ede:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008ee2:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008ee4:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008ee6:	a901      	add	r1, sp, #4
 8008ee8:	4810      	ldr	r0, [pc, #64]	@ (8008f2c <MX_TIM1_Init+0x104>)
 8008eea:	f7fe f97b 	bl	80071e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8008eee:	b9c8      	cbnz	r0, 8008f24 <MX_TIM1_Init+0xfc>
  HAL_TIM_MspPostInit(&htim1);
 8008ef0:	480e      	ldr	r0, [pc, #56]	@ (8008f2c <MX_TIM1_Init+0x104>)
 8008ef2:	f7ff ff4d 	bl	8008d90 <HAL_TIM_MspPostInit>
}
 8008ef6:	b016      	add	sp, #88	@ 0x58
 8008ef8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8008efa:	f7f9 ff8d 	bl	8002e18 <Error_Handler>
 8008efe:	e7b7      	b.n	8008e70 <MX_TIM1_Init+0x48>
    Error_Handler();
 8008f00:	f7f9 ff8a 	bl	8002e18 <Error_Handler>
 8008f04:	e7bd      	b.n	8008e82 <MX_TIM1_Init+0x5a>
    Error_Handler();
 8008f06:	f7f9 ff87 	bl	8002e18 <Error_Handler>
 8008f0a:	e7bf      	b.n	8008e8c <MX_TIM1_Init+0x64>
    Error_Handler();
 8008f0c:	f7f9 ff84 	bl	8002e18 <Error_Handler>
 8008f10:	e7c5      	b.n	8008e9e <MX_TIM1_Init+0x76>
    Error_Handler();
 8008f12:	f7f9 ff81 	bl	8002e18 <Error_Handler>
 8008f16:	e7d0      	b.n	8008eba <MX_TIM1_Init+0x92>
    Error_Handler();
 8008f18:	f7f9 ff7e 	bl	8002e18 <Error_Handler>
 8008f1c:	e7d3      	b.n	8008ec6 <MX_TIM1_Init+0x9e>
    Error_Handler();
 8008f1e:	f7f9 ff7b 	bl	8002e18 <Error_Handler>
 8008f22:	e7d6      	b.n	8008ed2 <MX_TIM1_Init+0xaa>
    Error_Handler();
 8008f24:	f7f9 ff78 	bl	8002e18 <Error_Handler>
 8008f28:	e7e2      	b.n	8008ef0 <MX_TIM1_Init+0xc8>
 8008f2a:	bf00      	nop
 8008f2c:	2000650c 	.word	0x2000650c
 8008f30:	40010000 	.word	0x40010000

08008f34 <MX_TIM3_Init>:
{
 8008f34:	b500      	push	{lr}
 8008f36:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f38:	2300      	movs	r3, #0
 8008f3a:	9308      	str	r3, [sp, #32]
 8008f3c:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008f3e:	9301      	str	r3, [sp, #4]
 8008f40:	9302      	str	r3, [sp, #8]
 8008f42:	9303      	str	r3, [sp, #12]
 8008f44:	9304      	str	r3, [sp, #16]
 8008f46:	9305      	str	r3, [sp, #20]
 8008f48:	9306      	str	r3, [sp, #24]
 8008f4a:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8008f4c:	4825      	ldr	r0, [pc, #148]	@ (8008fe4 <MX_TIM3_Init+0xb0>)
 8008f4e:	4a26      	ldr	r2, [pc, #152]	@ (8008fe8 <MX_TIM3_Init+0xb4>)
 8008f50:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8008f52:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f54:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8008f56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008f5a:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f5c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f5e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008f60:	f7fd fe54 	bl	8006c0c <HAL_TIM_PWM_Init>
 8008f64:	bb58      	cbnz	r0, 8008fbe <MX_TIM3_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f66:	2300      	movs	r3, #0
 8008f68:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f6a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008f6c:	a908      	add	r1, sp, #32
 8008f6e:	481d      	ldr	r0, [pc, #116]	@ (8008fe4 <MX_TIM3_Init+0xb0>)
 8008f70:	f7fe f8fa 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 8008f74:	bb30      	cbnz	r0, 8008fc4 <MX_TIM3_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f76:	2360      	movs	r3, #96	@ 0x60
 8008f78:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f7e:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f80:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008f82:	a901      	add	r1, sp, #4
 8008f84:	4817      	ldr	r0, [pc, #92]	@ (8008fe4 <MX_TIM3_Init+0xb0>)
 8008f86:	f7fd feca 	bl	8006d1e <HAL_TIM_PWM_ConfigChannel>
 8008f8a:	b9f0      	cbnz	r0, 8008fca <MX_TIM3_Init+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008f8c:	2204      	movs	r2, #4
 8008f8e:	eb0d 0102 	add.w	r1, sp, r2
 8008f92:	4814      	ldr	r0, [pc, #80]	@ (8008fe4 <MX_TIM3_Init+0xb0>)
 8008f94:	f7fd fec3 	bl	8006d1e <HAL_TIM_PWM_ConfigChannel>
 8008f98:	b9d0      	cbnz	r0, 8008fd0 <MX_TIM3_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008f9a:	2208      	movs	r2, #8
 8008f9c:	a901      	add	r1, sp, #4
 8008f9e:	4811      	ldr	r0, [pc, #68]	@ (8008fe4 <MX_TIM3_Init+0xb0>)
 8008fa0:	f7fd febd 	bl	8006d1e <HAL_TIM_PWM_ConfigChannel>
 8008fa4:	b9b8      	cbnz	r0, 8008fd6 <MX_TIM3_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008fa6:	220c      	movs	r2, #12
 8008fa8:	a901      	add	r1, sp, #4
 8008faa:	480e      	ldr	r0, [pc, #56]	@ (8008fe4 <MX_TIM3_Init+0xb0>)
 8008fac:	f7fd feb7 	bl	8006d1e <HAL_TIM_PWM_ConfigChannel>
 8008fb0:	b9a0      	cbnz	r0, 8008fdc <MX_TIM3_Init+0xa8>
  HAL_TIM_MspPostInit(&htim3);
 8008fb2:	480c      	ldr	r0, [pc, #48]	@ (8008fe4 <MX_TIM3_Init+0xb0>)
 8008fb4:	f7ff feec 	bl	8008d90 <HAL_TIM_MspPostInit>
}
 8008fb8:	b00b      	add	sp, #44	@ 0x2c
 8008fba:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8008fbe:	f7f9 ff2b 	bl	8002e18 <Error_Handler>
 8008fc2:	e7d0      	b.n	8008f66 <MX_TIM3_Init+0x32>
    Error_Handler();
 8008fc4:	f7f9 ff28 	bl	8002e18 <Error_Handler>
 8008fc8:	e7d5      	b.n	8008f76 <MX_TIM3_Init+0x42>
    Error_Handler();
 8008fca:	f7f9 ff25 	bl	8002e18 <Error_Handler>
 8008fce:	e7dd      	b.n	8008f8c <MX_TIM3_Init+0x58>
    Error_Handler();
 8008fd0:	f7f9 ff22 	bl	8002e18 <Error_Handler>
 8008fd4:	e7e1      	b.n	8008f9a <MX_TIM3_Init+0x66>
    Error_Handler();
 8008fd6:	f7f9 ff1f 	bl	8002e18 <Error_Handler>
 8008fda:	e7e4      	b.n	8008fa6 <MX_TIM3_Init+0x72>
    Error_Handler();
 8008fdc:	f7f9 ff1c 	bl	8002e18 <Error_Handler>
 8008fe0:	e7e7      	b.n	8008fb2 <MX_TIM3_Init+0x7e>
 8008fe2:	bf00      	nop
 8008fe4:	2000647c 	.word	0x2000647c
 8008fe8:	40000400 	.word	0x40000400

08008fec <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fec:	4b06      	ldr	r3, [pc, #24]	@ (8009008 <prvGetNextExpireTime+0x1c>)
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	6813      	ldr	r3, [r2, #0]
 8008ff2:	b92b      	cbnz	r3, 8009000 <prvGetNextExpireTime+0x14>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ff8:	b923      	cbnz	r3, 8009004 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ffa:	68d3      	ldr	r3, [r2, #12]
 8008ffc:	6818      	ldr	r0, [r3, #0]
 8008ffe:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009000:	2300      	movs	r3, #0
 8009002:	e7f8      	b.n	8008ff6 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009004:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8009006:	4770      	bx	lr
 8009008:	20006654 	.word	0x20006654

0800900c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800900c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800900e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009010:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009012:	4291      	cmp	r1, r2
 8009014:	d80c      	bhi.n	8009030 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009016:	1ad2      	subs	r2, r2, r3
 8009018:	6983      	ldr	r3, [r0, #24]
 800901a:	429a      	cmp	r2, r3
 800901c:	d301      	bcc.n	8009022 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800901e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8009020:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009022:	1d01      	adds	r1, r0, #4
 8009024:	4b09      	ldr	r3, [pc, #36]	@ (800904c <prvInsertTimerInActiveList+0x40>)
 8009026:	6818      	ldr	r0, [r3, #0]
 8009028:	f7f9 feb1 	bl	8002d8e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800902c:	2000      	movs	r0, #0
 800902e:	e7f7      	b.n	8009020 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009030:	429a      	cmp	r2, r3
 8009032:	d201      	bcs.n	8009038 <prvInsertTimerInActiveList+0x2c>
 8009034:	4299      	cmp	r1, r3
 8009036:	d206      	bcs.n	8009046 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009038:	1d01      	adds	r1, r0, #4
 800903a:	4b05      	ldr	r3, [pc, #20]	@ (8009050 <prvInsertTimerInActiveList+0x44>)
 800903c:	6818      	ldr	r0, [r3, #0]
 800903e:	f7f9 fea6 	bl	8002d8e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009042:	2000      	movs	r0, #0
 8009044:	e7ec      	b.n	8009020 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8009046:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009048:	e7ea      	b.n	8009020 <prvInsertTimerInActiveList+0x14>
 800904a:	bf00      	nop
 800904c:	20006650 	.word	0x20006650
 8009050:	20006654 	.word	0x20006654

08009054 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009054:	b530      	push	{r4, r5, lr}
 8009056:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009058:	f7fa f83c 	bl	80030d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800905c:	4b11      	ldr	r3, [pc, #68]	@ (80090a4 <prvCheckForValidListAndQueue+0x50>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	b11b      	cbz	r3, 800906a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009062:	f7fa f859 	bl	8003118 <vPortExitCritical>
}
 8009066:	b003      	add	sp, #12
 8009068:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800906a:	4d0f      	ldr	r5, [pc, #60]	@ (80090a8 <prvCheckForValidListAndQueue+0x54>)
 800906c:	4628      	mov	r0, r5
 800906e:	f7f9 fe75 	bl	8002d5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009072:	4c0e      	ldr	r4, [pc, #56]	@ (80090ac <prvCheckForValidListAndQueue+0x58>)
 8009074:	4620      	mov	r0, r4
 8009076:	f7f9 fe71 	bl	8002d5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800907a:	4b0d      	ldr	r3, [pc, #52]	@ (80090b0 <prvCheckForValidListAndQueue+0x5c>)
 800907c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800907e:	4b0d      	ldr	r3, [pc, #52]	@ (80090b4 <prvCheckForValidListAndQueue+0x60>)
 8009080:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009082:	2300      	movs	r3, #0
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	4b0c      	ldr	r3, [pc, #48]	@ (80090b8 <prvCheckForValidListAndQueue+0x64>)
 8009088:	4a0c      	ldr	r2, [pc, #48]	@ (80090bc <prvCheckForValidListAndQueue+0x68>)
 800908a:	2110      	movs	r1, #16
 800908c:	200a      	movs	r0, #10
 800908e:	f7fa fa68 	bl	8003562 <xQueueGenericCreateStatic>
 8009092:	4b04      	ldr	r3, [pc, #16]	@ (80090a4 <prvCheckForValidListAndQueue+0x50>)
 8009094:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8009096:	2800      	cmp	r0, #0
 8009098:	d0e3      	beq.n	8009062 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800909a:	4909      	ldr	r1, [pc, #36]	@ (80090c0 <prvCheckForValidListAndQueue+0x6c>)
 800909c:	f7fa fd00 	bl	8003aa0 <vQueueAddToRegistry>
 80090a0:	e7df      	b.n	8009062 <prvCheckForValidListAndQueue+0xe>
 80090a2:	bf00      	nop
 80090a4:	2000664c 	.word	0x2000664c
 80090a8:	2000666c 	.word	0x2000666c
 80090ac:	20006658 	.word	0x20006658
 80090b0:	20006654 	.word	0x20006654
 80090b4:	20006650 	.word	0x20006650
 80090b8:	20006554 	.word	0x20006554
 80090bc:	200065a4 	.word	0x200065a4
 80090c0:	0800d06c 	.word	0x0800d06c

080090c4 <prvInitialiseNewTimer>:
{
 80090c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c8:	9f07      	ldr	r7, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80090ca:	b941      	cbnz	r1, 80090de <prvInitialiseNewTimer+0x1a>
 80090cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d0:	f383 8811 	msr	BASEPRI, r3
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	e7fe      	b.n	80090dc <prvInitialiseNewTimer+0x18>
 80090de:	4606      	mov	r6, r0
 80090e0:	4614      	mov	r4, r2
 80090e2:	461d      	mov	r5, r3
 80090e4:	4688      	mov	r8, r1
	if( pxNewTimer != NULL )
 80090e6:	b18f      	cbz	r7, 800910c <prvInitialiseNewTimer+0x48>
		prvCheckForValidListAndQueue();
 80090e8:	f7ff ffb4 	bl	8009054 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 80090ec:	603e      	str	r6, [r7, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80090ee:	f8c7 8018 	str.w	r8, [r7, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80090f2:	61fd      	str	r5, [r7, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80090f4:	9b06      	ldr	r3, [sp, #24]
 80090f6:	623b      	str	r3, [r7, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80090f8:	1d38      	adds	r0, r7, #4
 80090fa:	f7f9 fe3a 	bl	8002d72 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80090fe:	b12c      	cbz	r4, 800910c <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009100:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009104:	f043 0304 	orr.w	r3, r3, #4
 8009108:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
}
 800910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009110 <xTimerCreateTimerTask>:
{
 8009110:	b510      	push	{r4, lr}
 8009112:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009114:	f7ff ff9e 	bl	8009054 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009118:	4b12      	ldr	r3, [pc, #72]	@ (8009164 <xTimerCreateTimerTask+0x54>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	b1cb      	cbz	r3, 8009152 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800911e:	2400      	movs	r4, #0
 8009120:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009122:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009124:	aa07      	add	r2, sp, #28
 8009126:	a906      	add	r1, sp, #24
 8009128:	a805      	add	r0, sp, #20
 800912a:	f7f8 f859 	bl	80011e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800912e:	9b05      	ldr	r3, [sp, #20]
 8009130:	9302      	str	r3, [sp, #8]
 8009132:	9b06      	ldr	r3, [sp, #24]
 8009134:	9301      	str	r3, [sp, #4]
 8009136:	2302      	movs	r3, #2
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	4623      	mov	r3, r4
 800913c:	9a07      	ldr	r2, [sp, #28]
 800913e:	490a      	ldr	r1, [pc, #40]	@ (8009168 <xTimerCreateTimerTask+0x58>)
 8009140:	480a      	ldr	r0, [pc, #40]	@ (800916c <xTimerCreateTimerTask+0x5c>)
 8009142:	f7ff f95d 	bl	8008400 <xTaskCreateStatic>
 8009146:	4b0a      	ldr	r3, [pc, #40]	@ (8009170 <xTimerCreateTimerTask+0x60>)
 8009148:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800914a:	b110      	cbz	r0, 8009152 <xTimerCreateTimerTask+0x42>
}
 800914c:	2001      	movs	r0, #1
 800914e:	b008      	add	sp, #32
 8009150:	bd10      	pop	{r4, pc}
 8009152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8009162:	e7fe      	b.n	8009162 <xTimerCreateTimerTask+0x52>
 8009164:	2000664c 	.word	0x2000664c
 8009168:	0800d074 	.word	0x0800d074
 800916c:	08009501 	.word	0x08009501
 8009170:	20006648 	.word	0x20006648

08009174 <xTimerCreate>:
	{
 8009174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009178:	b082      	sub	sp, #8
 800917a:	4604      	mov	r4, r0
 800917c:	4688      	mov	r8, r1
 800917e:	4617      	mov	r7, r2
 8009180:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009182:	202c      	movs	r0, #44	@ 0x2c
 8009184:	f7f9 fa2a 	bl	80025dc <pvPortMalloc>
		if( pxNewTimer != NULL )
 8009188:	4606      	mov	r6, r0
 800918a:	b158      	cbz	r0, 80091a4 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 800918c:	2300      	movs	r3, #0
 800918e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009192:	9001      	str	r0, [sp, #4]
 8009194:	9b08      	ldr	r3, [sp, #32]
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	462b      	mov	r3, r5
 800919a:	463a      	mov	r2, r7
 800919c:	4641      	mov	r1, r8
 800919e:	4620      	mov	r0, r4
 80091a0:	f7ff ff90 	bl	80090c4 <prvInitialiseNewTimer>
	}
 80091a4:	4630      	mov	r0, r6
 80091a6:	b002      	add	sp, #8
 80091a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080091ac <xTimerCreateStatic>:
	{
 80091ac:	b510      	push	{r4, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	4684      	mov	ip, r0
			volatile size_t xSize = sizeof( StaticTimer_t );
 80091b2:	202c      	movs	r0, #44	@ 0x2c
 80091b4:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 80091b6:	9803      	ldr	r0, [sp, #12]
 80091b8:	282c      	cmp	r0, #44	@ 0x2c
 80091ba:	d008      	beq.n	80091ce <xTimerCreateStatic+0x22>
 80091bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	e7fe      	b.n	80091cc <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091ce:	9803      	ldr	r0, [sp, #12]
		configASSERT( pxTimerBuffer );
 80091d0:	9807      	ldr	r0, [sp, #28]
 80091d2:	b160      	cbz	r0, 80091ee <xTimerCreateStatic+0x42>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80091d4:	2002      	movs	r0, #2
 80091d6:	9c07      	ldr	r4, [sp, #28]
 80091d8:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80091dc:	9401      	str	r4, [sp, #4]
 80091de:	9806      	ldr	r0, [sp, #24]
 80091e0:	9000      	str	r0, [sp, #0]
 80091e2:	4660      	mov	r0, ip
 80091e4:	f7ff ff6e 	bl	80090c4 <prvInitialiseNewTimer>
	}
 80091e8:	9807      	ldr	r0, [sp, #28]
 80091ea:	b004      	add	sp, #16
 80091ec:	bd10      	pop	{r4, pc}
 80091ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
 80091fe:	e7fe      	b.n	80091fe <xTimerCreateStatic+0x52>

08009200 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8009200:	b1b8      	cbz	r0, 8009232 <xTimerGenericCommand+0x32>
 8009202:	469c      	mov	ip, r3
 8009204:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8009206:	4818      	ldr	r0, [pc, #96]	@ (8009268 <xTimerGenericCommand+0x68>)
 8009208:	6800      	ldr	r0, [r0, #0]
 800920a:	b358      	cbz	r0, 8009264 <xTimerGenericCommand+0x64>
{
 800920c:	b500      	push	{lr}
 800920e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8009210:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009212:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009214:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009216:	2905      	cmp	r1, #5
 8009218:	dc1c      	bgt.n	8009254 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800921a:	f7ff fc03 	bl	8008a24 <xTaskGetSchedulerState>
 800921e:	2802      	cmp	r0, #2
 8009220:	d010      	beq.n	8009244 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009222:	2300      	movs	r3, #0
 8009224:	461a      	mov	r2, r3
 8009226:	4669      	mov	r1, sp
 8009228:	480f      	ldr	r0, [pc, #60]	@ (8009268 <xTimerGenericCommand+0x68>)
 800922a:	6800      	ldr	r0, [r0, #0]
 800922c:	f7fa fa07 	bl	800363e <xQueueGenericSend>
 8009230:	e015      	b.n	800925e <xTimerGenericCommand+0x5e>
 8009232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8009242:	e7fe      	b.n	8009242 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009244:	2300      	movs	r3, #0
 8009246:	9a06      	ldr	r2, [sp, #24]
 8009248:	4669      	mov	r1, sp
 800924a:	4807      	ldr	r0, [pc, #28]	@ (8009268 <xTimerGenericCommand+0x68>)
 800924c:	6800      	ldr	r0, [r0, #0]
 800924e:	f7fa f9f6 	bl	800363e <xQueueGenericSend>
 8009252:	e004      	b.n	800925e <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009254:	2300      	movs	r3, #0
 8009256:	4662      	mov	r2, ip
 8009258:	4669      	mov	r1, sp
 800925a:	f7fa fab4 	bl	80037c6 <xQueueGenericSendFromISR>
}
 800925e:	b005      	add	sp, #20
 8009260:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8009264:	2000      	movs	r0, #0
}
 8009266:	4770      	bx	lr
 8009268:	2000664c 	.word	0x2000664c

0800926c <prvSwitchTimerLists>:
{
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009270:	4b1b      	ldr	r3, [pc, #108]	@ (80092e0 <prvSwitchTimerLists+0x74>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	b362      	cbz	r2, 80092d2 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800927c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800927e:	1d25      	adds	r5, r4, #4
 8009280:	4628      	mov	r0, r5
 8009282:	f7f9 fd9d 	bl	8002dc0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009286:	6a23      	ldr	r3, [r4, #32]
 8009288:	4620      	mov	r0, r4
 800928a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800928c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8009290:	f013 0f04 	tst.w	r3, #4
 8009294:	d0ec      	beq.n	8009270 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009296:	69a3      	ldr	r3, [r4, #24]
 8009298:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800929a:	429e      	cmp	r6, r3
 800929c:	d207      	bcs.n	80092ae <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800929e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092a0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092a2:	4629      	mov	r1, r5
 80092a4:	4b0e      	ldr	r3, [pc, #56]	@ (80092e0 <prvSwitchTimerLists+0x74>)
 80092a6:	6818      	ldr	r0, [r3, #0]
 80092a8:	f7f9 fd71 	bl	8002d8e <vListInsert>
 80092ac:	e7e0      	b.n	8009270 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092ae:	2100      	movs	r1, #0
 80092b0:	9100      	str	r1, [sp, #0]
 80092b2:	460b      	mov	r3, r1
 80092b4:	4632      	mov	r2, r6
 80092b6:	4620      	mov	r0, r4
 80092b8:	f7ff ffa2 	bl	8009200 <xTimerGenericCommand>
				configASSERT( xResult );
 80092bc:	2800      	cmp	r0, #0
 80092be:	d1d7      	bne.n	8009270 <prvSwitchTimerLists+0x4>
 80092c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	e7fe      	b.n	80092d0 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 80092d2:	4a04      	ldr	r2, [pc, #16]	@ (80092e4 <prvSwitchTimerLists+0x78>)
 80092d4:	6810      	ldr	r0, [r2, #0]
 80092d6:	4902      	ldr	r1, [pc, #8]	@ (80092e0 <prvSwitchTimerLists+0x74>)
 80092d8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80092da:	6013      	str	r3, [r2, #0]
}
 80092dc:	b002      	add	sp, #8
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	20006654 	.word	0x20006654
 80092e4:	20006650 	.word	0x20006650

080092e8 <prvSampleTimeNow>:
{
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 80092ec:	f7ff f94a 	bl	8008584 <xTaskGetTickCount>
 80092f0:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 80092f2:	4b07      	ldr	r3, [pc, #28]	@ (8009310 <prvSampleTimeNow+0x28>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4283      	cmp	r3, r0
 80092f8:	d805      	bhi.n	8009306 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 80092fa:	2300      	movs	r3, #0
 80092fc:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 80092fe:	4b04      	ldr	r3, [pc, #16]	@ (8009310 <prvSampleTimeNow+0x28>)
 8009300:	601c      	str	r4, [r3, #0]
}
 8009302:	4620      	mov	r0, r4
 8009304:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8009306:	f7ff ffb1 	bl	800926c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800930a:	2301      	movs	r3, #1
 800930c:	602b      	str	r3, [r5, #0]
 800930e:	e7f6      	b.n	80092fe <prvSampleTimeNow+0x16>
 8009310:	20006644 	.word	0x20006644

08009314 <prvProcessExpiredTimer>:
{
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	4606      	mov	r6, r0
 800931a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800931c:	4917      	ldr	r1, [pc, #92]	@ (800937c <prvProcessExpiredTimer+0x68>)
 800931e:	6809      	ldr	r1, [r1, #0]
 8009320:	68c9      	ldr	r1, [r1, #12]
 8009322:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009324:	1d20      	adds	r0, r4, #4
 8009326:	f7f9 fd4b 	bl	8002dc0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800932a:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 800932e:	f01c 0f04 	tst.w	ip, #4
 8009332:	d108      	bne.n	8009346 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009334:	f02c 0c01 	bic.w	ip, ip, #1
 8009338:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800933c:	6a23      	ldr	r3, [r4, #32]
 800933e:	4620      	mov	r0, r4
 8009340:	4798      	blx	r3
}
 8009342:	b002      	add	sp, #8
 8009344:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009346:	69a1      	ldr	r1, [r4, #24]
 8009348:	4633      	mov	r3, r6
 800934a:	462a      	mov	r2, r5
 800934c:	4431      	add	r1, r6
 800934e:	4620      	mov	r0, r4
 8009350:	f7ff fe5c 	bl	800900c <prvInsertTimerInActiveList>
 8009354:	2800      	cmp	r0, #0
 8009356:	d0f1      	beq.n	800933c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009358:	2100      	movs	r1, #0
 800935a:	9100      	str	r1, [sp, #0]
 800935c:	460b      	mov	r3, r1
 800935e:	4632      	mov	r2, r6
 8009360:	4620      	mov	r0, r4
 8009362:	f7ff ff4d 	bl	8009200 <xTimerGenericCommand>
			configASSERT( xResult );
 8009366:	2800      	cmp	r0, #0
 8009368:	d1e8      	bne.n	800933c <prvProcessExpiredTimer+0x28>
 800936a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	e7fe      	b.n	800937a <prvProcessExpiredTimer+0x66>
 800937c:	20006654 	.word	0x20006654

08009380 <prvProcessTimerOrBlockTask>:
{
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	4606      	mov	r6, r0
 8009386:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8009388:	f7ff f8f4 	bl	8008574 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800938c:	a801      	add	r0, sp, #4
 800938e:	f7ff ffab 	bl	80092e8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009392:	9b01      	ldr	r3, [sp, #4]
 8009394:	bb33      	cbnz	r3, 80093e4 <prvProcessTimerOrBlockTask+0x64>
 8009396:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009398:	b9e4      	cbnz	r4, 80093d4 <prvProcessTimerOrBlockTask+0x54>
 800939a:	42b0      	cmp	r0, r6
 800939c:	d213      	bcs.n	80093c6 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800939e:	4622      	mov	r2, r4
 80093a0:	1b71      	subs	r1, r6, r5
 80093a2:	4b12      	ldr	r3, [pc, #72]	@ (80093ec <prvProcessTimerOrBlockTask+0x6c>)
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	f7fa fb8f 	bl	8003ac8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093aa:	f7ff f97d 	bl	80086a8 <xTaskResumeAll>
 80093ae:	b9d8      	cbnz	r0, 80093e8 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 80093b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80093b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	e010      	b.n	80093e8 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 80093c6:	f7ff f96f 	bl	80086a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80093ca:	4629      	mov	r1, r5
 80093cc:	4630      	mov	r0, r6
 80093ce:	f7ff ffa1 	bl	8009314 <prvProcessExpiredTimer>
 80093d2:	e009      	b.n	80093e8 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093d4:	4a06      	ldr	r2, [pc, #24]	@ (80093f0 <prvProcessTimerOrBlockTask+0x70>)
 80093d6:	6812      	ldr	r2, [r2, #0]
 80093d8:	6812      	ldr	r2, [r2, #0]
 80093da:	b90a      	cbnz	r2, 80093e0 <prvProcessTimerOrBlockTask+0x60>
 80093dc:	2401      	movs	r4, #1
 80093de:	e7de      	b.n	800939e <prvProcessTimerOrBlockTask+0x1e>
 80093e0:	461c      	mov	r4, r3
 80093e2:	e7dc      	b.n	800939e <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 80093e4:	f7ff f960 	bl	80086a8 <xTaskResumeAll>
}
 80093e8:	b002      	add	sp, #8
 80093ea:	bd70      	pop	{r4, r5, r6, pc}
 80093ec:	2000664c 	.word	0x2000664c
 80093f0:	20006650 	.word	0x20006650

080093f4 <prvProcessReceivedCommands>:
{
 80093f4:	b510      	push	{r4, lr}
 80093f6:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093f8:	e002      	b.n	8009400 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80093fa:	9b04      	ldr	r3, [sp, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	da0f      	bge.n	8009420 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009400:	2200      	movs	r2, #0
 8009402:	a904      	add	r1, sp, #16
 8009404:	4b3d      	ldr	r3, [pc, #244]	@ (80094fc <prvProcessReceivedCommands+0x108>)
 8009406:	6818      	ldr	r0, [r3, #0]
 8009408:	f7fa fa44 	bl	8003894 <xQueueReceive>
 800940c:	2800      	cmp	r0, #0
 800940e:	d072      	beq.n	80094f6 <prvProcessReceivedCommands+0x102>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009410:	9b04      	ldr	r3, [sp, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	daf1      	bge.n	80093fa <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009416:	9907      	ldr	r1, [sp, #28]
 8009418:	9806      	ldr	r0, [sp, #24]
 800941a:	9b05      	ldr	r3, [sp, #20]
 800941c:	4798      	blx	r3
 800941e:	e7ec      	b.n	80093fa <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009420:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009422:	6963      	ldr	r3, [r4, #20]
 8009424:	b113      	cbz	r3, 800942c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009426:	1d20      	adds	r0, r4, #4
 8009428:	f7f9 fcca 	bl	8002dc0 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800942c:	a803      	add	r0, sp, #12
 800942e:	f7ff ff5b 	bl	80092e8 <prvSampleTimeNow>
 8009432:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8009434:	9b04      	ldr	r3, [sp, #16]
 8009436:	2b09      	cmp	r3, #9
 8009438:	d8e2      	bhi.n	8009400 <prvProcessReceivedCommands+0xc>
 800943a:	e8df f003 	tbb	[pc, r3]
 800943e:	0505      	.short	0x0505
 8009440:	4e362f05 	.word	0x4e362f05
 8009444:	362f0505 	.word	0x362f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009448:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800944c:	f043 0301 	orr.w	r3, r3, #1
 8009450:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009454:	9b05      	ldr	r3, [sp, #20]
 8009456:	69a1      	ldr	r1, [r4, #24]
 8009458:	4419      	add	r1, r3
 800945a:	4620      	mov	r0, r4
 800945c:	f7ff fdd6 	bl	800900c <prvInsertTimerInActiveList>
 8009460:	2800      	cmp	r0, #0
 8009462:	d0cd      	beq.n	8009400 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009464:	6a23      	ldr	r3, [r4, #32]
 8009466:	4620      	mov	r0, r4
 8009468:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800946a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800946e:	f013 0f04 	tst.w	r3, #4
 8009472:	d0c5      	beq.n	8009400 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009474:	69a2      	ldr	r2, [r4, #24]
 8009476:	2100      	movs	r1, #0
 8009478:	9100      	str	r1, [sp, #0]
 800947a:	460b      	mov	r3, r1
 800947c:	9805      	ldr	r0, [sp, #20]
 800947e:	4402      	add	r2, r0
 8009480:	4620      	mov	r0, r4
 8009482:	f7ff febd 	bl	8009200 <xTimerGenericCommand>
							configASSERT( xResult );
 8009486:	2800      	cmp	r0, #0
 8009488:	d1ba      	bne.n	8009400 <prvProcessReceivedCommands+0xc>
 800948a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	e7fe      	b.n	800949a <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800949c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80094a0:	f023 0301 	bic.w	r3, r3, #1
 80094a4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 80094a8:	e7aa      	b.n	8009400 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094aa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80094ae:	f043 0301 	orr.w	r3, r3, #1
 80094b2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094b6:	9905      	ldr	r1, [sp, #20]
 80094b8:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094ba:	b129      	cbz	r1, 80094c8 <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094bc:	4603      	mov	r3, r0
 80094be:	4401      	add	r1, r0
 80094c0:	4620      	mov	r0, r4
 80094c2:	f7ff fda3 	bl	800900c <prvInsertTimerInActiveList>
					break;
 80094c6:	e79b      	b.n	8009400 <prvProcessReceivedCommands+0xc>
 80094c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094d8:	e7fe      	b.n	80094d8 <prvProcessReceivedCommands+0xe4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80094da:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80094de:	f013 0f02 	tst.w	r3, #2
 80094e2:	d004      	beq.n	80094ee <prvProcessReceivedCommands+0xfa>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094e4:	f023 0301 	bic.w	r3, r3, #1
 80094e8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80094ec:	e788      	b.n	8009400 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7f9 f8f6 	bl	80026e0 <vPortFree>
 80094f4:	e784      	b.n	8009400 <prvProcessReceivedCommands+0xc>
}
 80094f6:	b008      	add	sp, #32
 80094f8:	bd10      	pop	{r4, pc}
 80094fa:	bf00      	nop
 80094fc:	2000664c 	.word	0x2000664c

08009500 <prvTimerTask>:
{
 8009500:	b500      	push	{lr}
 8009502:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009504:	a801      	add	r0, sp, #4
 8009506:	f7ff fd71 	bl	8008fec <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800950a:	9901      	ldr	r1, [sp, #4]
 800950c:	f7ff ff38 	bl	8009380 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8009510:	f7ff ff70 	bl	80093f4 <prvProcessReceivedCommands>
	for( ;; )
 8009514:	e7f6      	b.n	8009504 <prvTimerTask+0x4>

08009516 <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8009516:	b140      	cbz	r0, 800952a <pvTimerGetTimerID+0x14>
{
 8009518:	b510      	push	{r4, lr}
 800951a:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
 800951c:	f7f9 fdda 	bl	80030d4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009520:	69e4      	ldr	r4, [r4, #28]
	}
	taskEXIT_CRITICAL();
 8009522:	f7f9 fdf9 	bl	8003118 <vPortExitCritical>

	return pvReturn;
}
 8009526:	4620      	mov	r0, r4
 8009528:	bd10      	pop	{r4, pc}
 800952a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800953a:	e7fe      	b.n	800953a <pvTimerGetTimerID+0x24>

0800953c <controller_timing_start>:

void update_next_event(void);

void controller_timing_start(TIM_HandleTypeDef *htim)
{
    if (htim == NULL)
 800953c:	b320      	cbz	r0, 8009588 <controller_timing_start+0x4c>
{
 800953e:	b510      	push	{r4, lr}
        /**
         * @todo throw an error
         */
        return;
    }
    timer = htim;
 8009540:	4c12      	ldr	r4, [pc, #72]	@ (800958c <controller_timing_start+0x50>)
 8009542:	6020      	str	r0, [r4, #0]
    
    /**
     * This assumes that sys clock is the same as timer clock
     */
    timer->Instance->PSC = (HAL_RCC_GetSysClockFreq() / 1000000UL) - 1;
 8009544:	f7fc ff9c 	bl	8006480 <HAL_RCC_GetSysClockFreq>
 8009548:	4b11      	ldr	r3, [pc, #68]	@ (8009590 <controller_timing_start+0x54>)
 800954a:	fba3 2300 	umull	r2, r3, r3, r0
 800954e:	0c9b      	lsrs	r3, r3, #18
 8009550:	6820      	ldr	r0, [r4, #0]
 8009552:	6802      	ldr	r2, [r0, #0]
 8009554:	3b01      	subs	r3, #1
 8009556:	6293      	str	r3, [r2, #40]	@ 0x28
    //timer->Instance->ARR = 100000;
    timer->Instance->EGR |= TIM_EGR_UG;  // Force an update event → immediately reloads PSC
 8009558:	6802      	ldr	r2, [r0, #0]
 800955a:	6953      	ldr	r3, [r2, #20]
 800955c:	f043 0301 	orr.w	r3, r3, #1
 8009560:	6153      	str	r3, [r2, #20]

    HAL_TIM_Base_Start_IT(timer);
 8009562:	f7fd f9b7 	bl	80068d4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_OC_Start_IT(timer, TIM_CHANNEL_1);    
 8009566:	2100      	movs	r1, #0
 8009568:	6820      	ldr	r0, [r4, #0]
 800956a:	f7fd fce1 	bl	8006f30 <HAL_TIM_OC_Start_IT>

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 800956e:	2300      	movs	r3, #0
 8009570:	e007      	b.n	8009582 <controller_timing_start+0x46>
    {
        event_queue[i].state = EVENT_STATE_INACTIVE;
 8009572:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009576:	4a07      	ldr	r2, [pc, #28]	@ (8009594 <controller_timing_start+0x58>)
 8009578:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800957c:	2100      	movs	r1, #0
 800957e:	7411      	strb	r1, [r2, #16]
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8009580:	3301      	adds	r3, #1
 8009582:	2b63      	cmp	r3, #99	@ 0x63
 8009584:	d9f5      	bls.n	8009572 <controller_timing_start+0x36>
    }
    
}
 8009586:	bd10      	pop	{r4, pc}
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	20006e50 	.word	0x20006e50
 8009590:	431bde83 	.word	0x431bde83
 8009594:	20006680 	.word	0x20006680

08009598 <get_time_us>:

time_us_t get_time_us(void)
{
    return timer->Instance->CNT;
 8009598:	4b02      	ldr	r3, [pc, #8]	@ (80095a4 <get_time_us+0xc>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	20006e50 	.word	0x20006e50

080095a8 <get_time_ms>:

time_ms_t get_time_ms(void)
{
    return timer->Instance->CNT / 1000U;
 80095a8:	4b04      	ldr	r3, [pc, #16]	@ (80095bc <get_time_ms+0x14>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80095b0:	4b03      	ldr	r3, [pc, #12]	@ (80095c0 <get_time_ms+0x18>)
 80095b2:	fba3 3000 	umull	r3, r0, r3, r0
}
 80095b6:	0980      	lsrs	r0, r0, #6
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	20006e50 	.word	0x20006e50
 80095c0:	10624dd3 	.word	0x10624dd3

080095c4 <update_next_event>:

void update_next_event(void)
{
 80095c4:	b410      	push	{r4}
    time_us_t nearest_time = 0xFFFFFFFF;
    bool found = false;

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 80095c6:	2300      	movs	r3, #0
    bool found = false;
 80095c8:	4618      	mov	r0, r3
    time_us_t nearest_time = 0xFFFFFFFF;
 80095ca:	f04f 34ff 	mov.w	r4, #4294967295
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 80095ce:	e006      	b.n	80095de <update_next_event+0x1a>
        
        /* This will handle wraparound safely aparantly, but i don't know how it works yet :( */
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
        {
            found = true;
            nearest_time = event_queue[i].timestamp_us;
 80095d0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80095d4:	008a      	lsls	r2, r1, #2
 80095d6:	4910      	ldr	r1, [pc, #64]	@ (8009618 <update_next_event+0x54>)
 80095d8:	588c      	ldr	r4, [r1, r2]
            found = true;
 80095da:	2001      	movs	r0, #1
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 80095dc:	3301      	adds	r3, #1
 80095de:	2b63      	cmp	r3, #99	@ 0x63
 80095e0:	d812      	bhi.n	8009608 <update_next_event+0x44>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 80095e2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80095e6:	0091      	lsls	r1, r2, #2
 80095e8:	4a0b      	ldr	r2, [pc, #44]	@ (8009618 <update_next_event+0x54>)
 80095ea:	440a      	add	r2, r1
 80095ec:	7c12      	ldrb	r2, [r2, #16]
 80095ee:	2a01      	cmp	r2, #1
 80095f0:	d1f4      	bne.n	80095dc <update_next_event+0x18>
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d0ec      	beq.n	80095d0 <update_next_event+0xc>
 80095f6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80095fa:	008a      	lsls	r2, r1, #2
 80095fc:	4906      	ldr	r1, [pc, #24]	@ (8009618 <update_next_event+0x54>)
 80095fe:	588a      	ldr	r2, [r1, r2]
 8009600:	1b12      	subs	r2, r2, r4
 8009602:	2a00      	cmp	r2, #0
 8009604:	daea      	bge.n	80095dc <update_next_event+0x18>
 8009606:	e7e3      	b.n	80095d0 <update_next_event+0xc>
        }        
    }

    if (found) {
 8009608:	b118      	cbz	r0, 8009612 <update_next_event+0x4e>
        // Schedule next interrupt
        timer->Instance->CCR1 = nearest_time;
 800960a:	4b04      	ldr	r3, [pc, #16]	@ (800961c <update_next_event+0x58>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	635c      	str	r4, [r3, #52]	@ 0x34
    } else {
        // No pending events — disable future interrupts or set a dummy compare
        /* Should i set a compare in the near future ?*/
        //timer->Instance->CCR1 = 0xFFFFFFFF;
    }
}
 8009612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009616:	4770      	bx	lr
 8009618:	20006680 	.word	0x20006680
 800961c:	20006e50 	.word	0x20006e50

08009620 <scheduler_timer_callback>:

void scheduler_timer_callback()
{
 8009620:	b538      	push	{r3, r4, r5, lr}
    // Exit early if this wasn't a CCR1 match
    if (!(timer->Instance->SR & TIM_SR_CC1IF))
 8009622:	4b23      	ldr	r3, [pc, #140]	@ (80096b0 <scheduler_timer_callback+0x90>)
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	6813      	ldr	r3, [r2, #0]
 8009628:	6919      	ldr	r1, [r3, #16]
 800962a:	f011 0f02 	tst.w	r1, #2
 800962e:	d03e      	beq.n	80096ae <scheduler_timer_callback+0x8e>
    {
        return;
    }

    timer->Instance->SR &= ~TIM_SR_CC1IF;  // Clear the compare match flag
 8009630:	6919      	ldr	r1, [r3, #16]
 8009632:	f021 0102 	bic.w	r1, r1, #2
 8009636:	6119      	str	r1, [r3, #16]
    time_us_t time_now_us = timer->Instance->CNT; // I have avoided the function call overhead here. might be minimal anyways...
 8009638:	6813      	ldr	r3, [r2, #0]
 800963a:	6a5d      	ldr	r5, [r3, #36]	@ 0x24

    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 800963c:	2400      	movs	r4, #0
 800963e:	e00e      	b.n	800965e <scheduler_timer_callback+0x3e>
        {
            event_queue[i].callback_arg(event_queue[i].arg);
        }
        else
        {
            event_queue[i].callback_noarg();
 8009640:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8009644:	009a      	lsls	r2, r3, #2
 8009646:	4b1b      	ldr	r3, [pc, #108]	@ (80096b4 <scheduler_timer_callback+0x94>)
 8009648:	4413      	add	r3, r2
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	4798      	blx	r3
        }

        event_queue[i].state = EVENT_STATE_INACTIVE;
 800964e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8009652:	009a      	lsls	r2, r3, #2
 8009654:	4b17      	ldr	r3, [pc, #92]	@ (80096b4 <scheduler_timer_callback+0x94>)
 8009656:	4413      	add	r3, r2
 8009658:	2200      	movs	r2, #0
 800965a:	741a      	strb	r2, [r3, #16]
    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 800965c:	3401      	adds	r4, #1
 800965e:	2c63      	cmp	r4, #99	@ 0x63
 8009660:	dc23      	bgt.n	80096aa <scheduler_timer_callback+0x8a>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 8009662:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8009666:	009a      	lsls	r2, r3, #2
 8009668:	4b12      	ldr	r3, [pc, #72]	@ (80096b4 <scheduler_timer_callback+0x94>)
 800966a:	4413      	add	r3, r2
 800966c:	7c1b      	ldrb	r3, [r3, #16]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d1f4      	bne.n	800965c <scheduler_timer_callback+0x3c>
        if ((int32_t)(time_now_us - event_queue[i].timestamp_us) < 0)
 8009672:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009676:	0093      	lsls	r3, r2, #2
 8009678:	4a0e      	ldr	r2, [pc, #56]	@ (80096b4 <scheduler_timer_callback+0x94>)
 800967a:	58d3      	ldr	r3, [r2, r3]
 800967c:	1aeb      	subs	r3, r5, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	dbec      	blt.n	800965c <scheduler_timer_callback+0x3c>
        event_queue[i].state = EVENT_STATE_ACTIVE;
 8009682:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8009686:	009a      	lsls	r2, r3, #2
 8009688:	4b0a      	ldr	r3, [pc, #40]	@ (80096b4 <scheduler_timer_callback+0x94>)
 800968a:	4413      	add	r3, r2
 800968c:	2202      	movs	r2, #2
 800968e:	741a      	strb	r2, [r3, #16]
        if (event_queue[i].uses_arg)
 8009690:	7c5b      	ldrb	r3, [r3, #17]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d0d4      	beq.n	8009640 <scheduler_timer_callback+0x20>
            event_queue[i].callback_arg(event_queue[i].arg);
 8009696:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800969a:	fa03 f202 	lsl.w	r2, r3, r2
 800969e:	4b05      	ldr	r3, [pc, #20]	@ (80096b4 <scheduler_timer_callback+0x94>)
 80096a0:	4413      	add	r3, r2
 80096a2:	685a      	ldr	r2, [r3, #4]
 80096a4:	68d8      	ldr	r0, [r3, #12]
 80096a6:	4790      	blx	r2
 80096a8:	e7d1      	b.n	800964e <scheduler_timer_callback+0x2e>
    }

    update_next_event();  // Schedule the next event
 80096aa:	f7ff ff8b 	bl	80095c4 <update_next_event>
}
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	20006e50 	.word	0x20006e50
 80096b4:	20006680 	.word	0x20006680

080096b8 <scheduler_schedule_event_with_arg>:


bool scheduler_schedule_event_with_arg(time_us_t timestamp_us, void (*callback)(void *), void *arg)
{
    if (callback == NULL) return false;
 80096b8:	b311      	cbz	r1, 8009700 <scheduler_schedule_event_with_arg+0x48>
{
 80096ba:	b538      	push	{r3, r4, r5, lr}
 80096bc:	460d      	mov	r5, r1

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 80096be:	2300      	movs	r3, #0
 80096c0:	2b63      	cmp	r3, #99	@ 0x63
 80096c2:	d81b      	bhi.n	80096fc <scheduler_schedule_event_with_arg+0x44>
        if (event_queue[i].state == EVENT_STATE_INACTIVE) {
 80096c4:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80096c8:	490e      	ldr	r1, [pc, #56]	@ (8009704 <scheduler_schedule_event_with_arg+0x4c>)
 80096ca:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 80096ce:	7c09      	ldrb	r1, [r1, #16]
 80096d0:	b109      	cbz	r1, 80096d6 <scheduler_schedule_event_with_arg+0x1e>
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 80096d2:	3301      	adds	r3, #1
 80096d4:	e7f4      	b.n	80096c0 <scheduler_schedule_event_with_arg+0x8>
            event_queue[i].timestamp_us = timestamp_us;
 80096d6:	490b      	ldr	r1, [pc, #44]	@ (8009704 <scheduler_schedule_event_with_arg+0x4c>)
 80096d8:	4664      	mov	r4, ip
 80096da:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80096de:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
            event_queue[i].callback_arg = callback;
 80096e2:	f8cc 5004 	str.w	r5, [ip, #4]
            event_queue[i].arg = arg;
 80096e6:	f8cc 200c 	str.w	r2, [ip, #12]
            event_queue[i].uses_arg = true;
 80096ea:	2401      	movs	r4, #1
 80096ec:	f88c 4011 	strb.w	r4, [ip, #17]
            event_queue[i].state = EVENT_STATE_PENDING;
 80096f0:	f88c 4010 	strb.w	r4, [ip, #16]

            update_next_event();
 80096f4:	f7ff ff66 	bl	80095c4 <update_next_event>
            return true;
 80096f8:	4620      	mov	r0, r4
        }
    }

    return false;
}
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
    return false;
 80096fc:	2000      	movs	r0, #0
 80096fe:	e7fc      	b.n	80096fa <scheduler_schedule_event_with_arg+0x42>
    if (callback == NULL) return false;
 8009700:	2000      	movs	r0, #0
}
 8009702:	4770      	bx	lr
 8009704:	20006680 	.word	0x20006680

08009708 <set_filtering>:



void set_filtering(trigger_t *trigger)
{
  switch (*(trigger->filtering))
 8009708:	6843      	ldr	r3, [r0, #4]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	2b03      	cmp	r3, #3
 800970e:	d813      	bhi.n	8009738 <set_filtering+0x30>
 8009710:	e8df f003 	tbb	[pc, r3]
 8009714:	0c090502 	.word	0x0c090502
  {
  case TRIGGER_FILTERING_NONE:
    trigger->_trigger_filter_time_us = 0;
 8009718:	2300      	movs	r3, #0
 800971a:	6083      	str	r3, [r0, #8]
    break;
 800971c:	4770      	bx	lr
  case TRIGGER_FILTERING_LITE:
    trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 4U;
 800971e:	6983      	ldr	r3, [r0, #24]
 8009720:	089b      	lsrs	r3, r3, #2
 8009722:	6083      	str	r3, [r0, #8]
    break;
 8009724:	4770      	bx	lr
  case TRIGGER_FILTERING_MEDIUM:
    trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 1U;
 8009726:	6983      	ldr	r3, [r0, #24]
 8009728:	6083      	str	r3, [r0, #8]
    break;
 800972a:	4770      	bx	lr
  case TRIGGER_FILTERING_AGGRESSIVE:
    trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us * 3 / 4;
 800972c:	6983      	ldr	r3, [r0, #24]
 800972e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009732:	089b      	lsrs	r3, r3, #2
 8009734:	6083      	str	r3, [r0, #8]
    break;
 8009736:	4770      	bx	lr
  default:
    // Handle invalid filtering level
    trigger->_trigger_filter_time_us = 0;
 8009738:	2300      	movs	r3, #0
 800973a:	6083      	str	r3, [r0, #8]
    break;
  }
}
 800973c:	4770      	bx	lr
	...

08009740 <trigger_init>:

void trigger_init(trigger_t *trigger, trigger_wheel_type_t wheel_type, uint8_t *filtering, status_t sync_status_bit, uint8_t trigger_number)
{
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	f89d 5010 	ldrb.w	r5, [sp, #16]
  bool temp_status = true;
  if (trigger == NULL)
 8009746:	b158      	cbz	r0, 8009760 <trigger_init+0x20>
 8009748:	4604      	mov	r4, r0
  {
    log_error("Trigger initialization failed. Trigger is NULL.");
    return;
  }
  trigger->filtering = filtering;
 800974a:	6042      	str	r2, [r0, #4]
  trigger->status_synced_index = sync_status_bit;
 800974c:	7043      	strb	r3, [r0, #1]

  switch (wheel_type)
 800974e:	b159      	cbz	r1, 8009768 <trigger_init+0x28>
 8009750:	2901      	cmp	r1, #1
 8009752:	d019      	beq.n	8009788 <trigger_init+0x48>
    trigger->_missing_teeth = 1;
    trigger->_full_teeth = 29;
    break;

  default:
    trigger->initialized = temp_status;
 8009754:	2301      	movs	r3, #1
 8009756:	7003      	strb	r3, [r0, #0]
    log_error("Trigger initialization failed. Wheel type not recognized.");
 8009758:	481d      	ldr	r0, [pc, #116]	@ (80097d0 <trigger_init+0x90>)
 800975a:	f7f8 fd93 	bl	8002284 <log_error>
    break;
 800975e:	e009      	b.n	8009774 <trigger_init+0x34>
    log_error("Trigger initialization failed. Trigger is NULL.");
 8009760:	481c      	ldr	r0, [pc, #112]	@ (80097d4 <trigger_init+0x94>)
 8009762:	f7f8 fd8f 	bl	8002284 <log_error>
    return;
 8009766:	e02f      	b.n	80097c8 <trigger_init+0x88>
    trigger->_missing_teeth = 2;
 8009768:	2302      	movs	r3, #2
 800976a:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
    trigger->_full_teeth = 60;
 800976e:	233c      	movs	r3, #60	@ 0x3c
 8009770:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
  }

  switch (trigger_number)
 8009774:	2d01      	cmp	r5, #1
 8009776:	d00e      	beq.n	8009796 <trigger_init+0x56>
 8009778:	2d02      	cmp	r5, #2
 800977a:	d026      	beq.n	80097ca <trigger_init+0x8a>
    break;
  case 2:
    trigger->status_synced_index = STATUS_TRIGGER2_SYNCED;
    break;
  default:
    log_error("Trigger initialization failed. unknown trigger number.");
 800977c:	4816      	ldr	r0, [pc, #88]	@ (80097d8 <trigger_init+0x98>)
 800977e:	f7f8 fd81 	bl	8002284 <log_error>
    trigger->initialized = false;
 8009782:	2300      	movs	r3, #0
 8009784:	7023      	strb	r3, [r4, #0]
    return;
 8009786:	e01f      	b.n	80097c8 <trigger_init+0x88>
    trigger->_missing_teeth = 1;
 8009788:	2301      	movs	r3, #1
 800978a:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
    trigger->_full_teeth = 29;
 800978e:	231d      	movs	r3, #29
 8009790:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
    break;
 8009794:	e7ee      	b.n	8009774 <trigger_init+0x34>
    trigger->status_synced_index = STATUS_TRIGGER1_SYNCED;
 8009796:	2303      	movs	r3, #3
 8009798:	7063      	strb	r3, [r4, #1]
  }

  change_bit(&runtime.status, trigger->status_synced_index, false);
 800979a:	7863      	ldrb	r3, [r4, #1]
    if (bit > 31)
 800979c:	2b1f      	cmp	r3, #31
 800979e:	d807      	bhi.n	80097b0 <trigger_init+0x70>
        *var &= ~(1u << bit);
 80097a0:	480e      	ldr	r0, [pc, #56]	@ (80097dc <trigger_init+0x9c>)
 80097a2:	6802      	ldr	r2, [r0, #0]
 80097a4:	2101      	movs	r1, #1
 80097a6:	fa01 f303 	lsl.w	r3, r1, r3
 80097aa:	ea22 0203 	bic.w	r2, r2, r3
 80097ae:	6002      	str	r2, [r0, #0]
  set_filtering(trigger);
 80097b0:	4620      	mov	r0, r4
 80097b2:	f7ff ffa9 	bl	8009708 <set_filtering>
  trigger->_trigger_actual_teeth = trigger->_full_teeth - trigger->_missing_teeth;
 80097b6:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 80097ba:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 80097be:	1a9b      	subs	r3, r3, r2
 80097c0:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
  trigger->initialized = true;
 80097c4:	2301      	movs	r3, #1
 80097c6:	7023      	strb	r3, [r4, #0]
}
 80097c8:	bd38      	pop	{r3, r4, r5, pc}
    trigger->status_synced_index = STATUS_TRIGGER2_SYNCED;
 80097ca:	2304      	movs	r3, #4
 80097cc:	7063      	strb	r3, [r4, #1]
    break;
 80097ce:	e7e4      	b.n	800979a <trigger_init+0x5a>
 80097d0:	0800d0ac 	.word	0x0800d0ac
 80097d4:	0800d07c 	.word	0x0800d07c
 80097d8:	0800d0e8 	.word	0x0800d0e8
 80097dc:	20000ed0 	.word	0x20000ed0

080097e0 <crankshaft_get_rpm>:
}

rpm_t crankshaft_get_rpm()
{
  return runtime.rpm;
}
 80097e0:	4b01      	ldr	r3, [pc, #4]	@ (80097e8 <crankshaft_get_rpm+0x8>)
 80097e2:	ed93 0a06 	vldr	s0, [r3, #24]
 80097e6:	4770      	bx	lr
 80097e8:	20000ed0 	.word	0x20000ed0

080097ec <crankshaft_get_angle>:
 * @note angle is updated on every trigger event!
 */
angle_t crankshaft_get_angle()
{
  return runtime.crankshaft_angle;
}
 80097ec:	4b01      	ldr	r3, [pc, #4]	@ (80097f4 <crankshaft_get_angle+0x8>)
 80097ee:	ed93 0a04 	vldr	s0, [r3, #16]
 80097f2:	4770      	bx	lr
 80097f4:	20000ed0 	.word	0x20000ed0

080097f8 <trigger_tooth_handle>:
{
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	ed2d 8b02 	vpush	{d8}
  if (!trigger->initialized)
 80097fe:	7805      	ldrb	r5, [r0, #0]
 8009800:	2d00      	cmp	r5, #0
 8009802:	d06d      	beq.n	80098e0 <trigger_tooth_handle+0xe8>
 8009804:	4604      	mov	r4, r0
  trigger->_tooth_time_us[0] = get_time_us();
 8009806:	f7ff fec7 	bl	8009598 <get_time_us>
 800980a:	60e0      	str	r0, [r4, #12]
  trigger->_current_tooth_gap_us = trigger->_tooth_time_us[0] - trigger->_tooth_time_us[1];
 800980c:	6922      	ldr	r2, [r4, #16]
 800980e:	1a80      	subs	r0, r0, r2
 8009810:	61a0      	str	r0, [r4, #24]
  if (trigger->_current_tooth_gap_us < trigger->_trigger_filter_time_us) // Pulses should never be less than _trigger_filter_time_us, so if they are it means a false trigger. (A 36-1 wheel at 8000rpm will have triggers approx. every 200uS)
 8009812:	68a3      	ldr	r3, [r4, #8]
 8009814:	4298      	cmp	r0, r3
 8009816:	f0c0 80b4 	bcc.w	8009982 <trigger_tooth_handle+0x18a>
  trigger->_counted_tooth++; // Increment the tooth counter
 800981a:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 800981c:	3301      	adds	r3, #1
 800981e:	b29b      	uxth	r3, r3
 8009820:	84a3      	strh	r3, [r4, #36]	@ 0x24
  previous_tooth_gap = trigger->_tooth_time_us[1] - trigger->_tooth_time_us[2];
 8009822:	6961      	ldr	r1, [r4, #20]
 8009824:	1a52      	subs	r2, r2, r1
  if (previous_tooth_gap < trigger->_current_tooth_gap_us)
 8009826:	4290      	cmp	r0, r2
 8009828:	d95e      	bls.n	80098e8 <trigger_tooth_handle+0xf0>
    trigger->_shorter_tooth_gap = previous_tooth_gap;
 800982a:	61e2      	str	r2, [r4, #28]
  if (trigger->_missing_teeth == 1)
 800982c:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8009830:	2a01      	cmp	r2, #1
 8009832:	d05b      	beq.n	80098ec <trigger_tooth_handle+0xf4>
    trigger->_target_tooth_gap_us = trigger->_shorter_tooth_gap * trigger->_missing_teeth;
 8009834:	69e1      	ldr	r1, [r4, #28]
 8009836:	fb02 f101 	mul.w	r1, r2, r1
 800983a:	6221      	str	r1, [r4, #32]
  if ((trigger->_current_tooth_gap_us > trigger->_target_tooth_gap_us) || (trigger->_counted_tooth > trigger->_trigger_actual_teeth))
 800983c:	6a22      	ldr	r2, [r4, #32]
 800983e:	4290      	cmp	r0, r2
 8009840:	d803      	bhi.n	800984a <trigger_tooth_handle+0x52>
 8009842:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
 8009846:	4293      	cmp	r3, r2
 8009848:	d971      	bls.n	800992e <trigger_tooth_handle+0x136>
    if (trigger->_counted_tooth < trigger->_trigger_actual_teeth)
 800984a:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
 800984e:	4293      	cmp	r3, r2
 8009850:	d258      	bcs.n	8009904 <trigger_tooth_handle+0x10c>
      change_bit(&runtime.status, trigger->status_synced_index, TS_NOT_SYNCED);
 8009852:	7863      	ldrb	r3, [r4, #1]
    if (bit > 31)
 8009854:	2b1f      	cmp	r3, #31
 8009856:	d807      	bhi.n	8009868 <trigger_tooth_handle+0x70>
        *var &= ~(1u << bit);
 8009858:	4850      	ldr	r0, [pc, #320]	@ (800999c <trigger_tooth_handle+0x1a4>)
 800985a:	6802      	ldr	r2, [r0, #0]
 800985c:	2101      	movs	r1, #1
 800985e:	fa01 f303 	lsl.w	r3, r1, r3
 8009862:	ea22 0203 	bic.w	r2, r2, r3
 8009866:	6002      	str	r2, [r0, #0]
      runtime.sync_loss_counter++;
 8009868:	4a4c      	ldr	r2, [pc, #304]	@ (800999c <trigger_tooth_handle+0x1a4>)
 800986a:	6853      	ldr	r3, [r2, #4]
 800986c:	3301      	adds	r3, #1
 800986e:	6053      	str	r3, [r2, #4]
      if (trigger->status_synced_index == STATUS_TRIGGER1_SYNCED)
 8009870:	7863      	ldrb	r3, [r4, #1]
 8009872:	2b03      	cmp	r3, #3
 8009874:	d040      	beq.n	80098f8 <trigger_tooth_handle+0x100>
      trigger->_counted_tooth = 0;
 8009876:	2300      	movs	r3, #0
 8009878:	84a3      	strh	r3, [r4, #36]	@ 0x24
  runtime.crankshaft_angle = 360.0f / (angle_t)trigger->_full_teeth * (angle_t)trigger->_counted_tooth;
 800987a:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
 800987e:	ee07 1a90 	vmov	s15, r1
 8009882:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009886:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80099a0 <trigger_tooth_handle+0x1a8>
 800988a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800988e:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 8009890:	ee07 3a10 	vmov	s14, r3
 8009894:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800989c:	4a3f      	ldr	r2, [pc, #252]	@ (800999c <trigger_tooth_handle+0x1a4>)
 800989e:	edc2 7a04 	vstr	s15, [r2, #16]
  runtime.rpm = (rpm_t)(CONVERSION_FACTOR_SECONDS_TO_MICROSECONDS * CONVERSION_FACTOR_MINUTES_TO_SECONDS / trigger->_shorter_tooth_gap / trigger->_full_teeth);
 80098a2:	69e0      	ldr	r0, [r4, #28]
 80098a4:	4b3f      	ldr	r3, [pc, #252]	@ (80099a4 <trigger_tooth_handle+0x1ac>)
 80098a6:	fbb3 f3f0 	udiv	r3, r3, r0
 80098aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80098ae:	ee07 3a90 	vmov	s15, r3
 80098b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b6:	edc2 7a06 	vstr	s15, [r2, #24]
  if (get_bit(runtime.status, STATUS_TRIGGER1_SYNCED) == TS_FULLY_SYNCED && runtime.rpm >= config.cranking_rpm_threshold)
 80098ba:	6813      	ldr	r3, [r2, #0]
        return (flags >> bit) & 1u;
 80098bc:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 80098c0:	f013 0f08 	tst.w	r3, #8
 80098c4:	d035      	beq.n	8009932 <trigger_tooth_handle+0x13a>
 80098c6:	4b38      	ldr	r3, [pc, #224]	@ (80099a8 <trigger_tooth_handle+0x1b0>)
 80098c8:	ed93 7a80 	vldr	s14, [r3, #512]	@ 0x200
 80098cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098d4:	db2d      	blt.n	8009932 <trigger_tooth_handle+0x13a>
    runtime.spinning_state = SS_RUNNING;
 80098d6:	4b31      	ldr	r3, [pc, #196]	@ (800999c <trigger_tooth_handle+0x1a4>)
 80098d8:	2203      	movs	r2, #3
 80098da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80098de:	e03b      	b.n	8009958 <trigger_tooth_handle+0x160>
    log_error("Trigger is not initialized.");
 80098e0:	4832      	ldr	r0, [pc, #200]	@ (80099ac <trigger_tooth_handle+0x1b4>)
 80098e2:	f7f8 fccf 	bl	8002284 <log_error>
    return;
 80098e6:	e04c      	b.n	8009982 <trigger_tooth_handle+0x18a>
    trigger->_shorter_tooth_gap = trigger->_current_tooth_gap_us;
 80098e8:	61e0      	str	r0, [r4, #28]
 80098ea:	e79f      	b.n	800982c <trigger_tooth_handle+0x34>
    trigger->_target_tooth_gap_us = (3 * trigger->_shorter_tooth_gap) >> 1;
 80098ec:	69e2      	ldr	r2, [r4, #28]
 80098ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80098f2:	0852      	lsrs	r2, r2, #1
 80098f4:	6222      	str	r2, [r4, #32]
 80098f6:	e7a1      	b.n	800983c <trigger_tooth_handle+0x44>
        runtime.total_revolutions = 0;
 80098f8:	4613      	mov	r3, r2
 80098fa:	2200      	movs	r2, #0
 80098fc:	609a      	str	r2, [r3, #8]
        runtime.rpm = 0;
 80098fe:	2200      	movs	r2, #0
 8009900:	619a      	str	r2, [r3, #24]
 8009902:	e7b8      	b.n	8009876 <trigger_tooth_handle+0x7e>
      change_bit(&runtime.status, trigger->status_synced_index, TS_FULLY_SYNCED);
 8009904:	7863      	ldrb	r3, [r4, #1]
    if (bit > 31)
 8009906:	2b1f      	cmp	r3, #31
 8009908:	d806      	bhi.n	8009918 <trigger_tooth_handle+0x120>
        *var |= (1u << bit);
 800990a:	4824      	ldr	r0, [pc, #144]	@ (800999c <trigger_tooth_handle+0x1a4>)
 800990c:	6802      	ldr	r2, [r0, #0]
 800990e:	2101      	movs	r1, #1
 8009910:	fa01 f303 	lsl.w	r3, r1, r3
 8009914:	431a      	orrs	r2, r3
 8009916:	6002      	str	r2, [r0, #0]
      if (trigger->status_synced_index == STATUS_TRIGGER1_SYNCED)
 8009918:	7863      	ldrb	r3, [r4, #1]
 800991a:	2b03      	cmp	r3, #3
 800991c:	d002      	beq.n	8009924 <trigger_tooth_handle+0x12c>
      trigger->_counted_tooth = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	84a3      	strh	r3, [r4, #36]	@ 0x24
 8009922:	e7aa      	b.n	800987a <trigger_tooth_handle+0x82>
        runtime.total_revolutions++;
 8009924:	4a1d      	ldr	r2, [pc, #116]	@ (800999c <trigger_tooth_handle+0x1a4>)
 8009926:	6893      	ldr	r3, [r2, #8]
 8009928:	3301      	adds	r3, #1
 800992a:	6093      	str	r3, [r2, #8]
 800992c:	e7f7      	b.n	800991e <trigger_tooth_handle+0x126>
  bool is_missing_teeth = false;
 800992e:	2500      	movs	r5, #0
 8009930:	e7a3      	b.n	800987a <trigger_tooth_handle+0x82>
  else if (get_bit(runtime.status, STATUS_TRIGGER1_SYNCED) == TS_FULLY_SYNCED && runtime.rpm < config.cranking_rpm_threshold)
 8009932:	b162      	cbz	r2, 800994e <trigger_tooth_handle+0x156>
 8009934:	4b1c      	ldr	r3, [pc, #112]	@ (80099a8 <trigger_tooth_handle+0x1b0>)
 8009936:	ed93 7a80 	vldr	s14, [r3, #512]	@ 0x200
 800993a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800993e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009942:	d504      	bpl.n	800994e <trigger_tooth_handle+0x156>
    runtime.spinning_state = SS_CRANKING;
 8009944:	4b15      	ldr	r3, [pc, #84]	@ (800999c <trigger_tooth_handle+0x1a4>)
 8009946:	2202      	movs	r2, #2
 8009948:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800994c:	e004      	b.n	8009958 <trigger_tooth_handle+0x160>
  else if (get_bit(runtime.status, STATUS_TRIGGER1_SYNCED) == TS_NOT_SYNCED)
 800994e:	b9da      	cbnz	r2, 8009988 <trigger_tooth_handle+0x190>
    runtime.spinning_state = SS_SPINNING_UP;
 8009950:	4b12      	ldr	r3, [pc, #72]	@ (800999c <trigger_tooth_handle+0x1a4>)
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (is_missing_teeth == false)
 8009958:	b1dd      	cbz	r5, 8009992 <trigger_tooth_handle+0x19a>
  trigger->_tooth_time_us[2] = trigger->_tooth_time_us[1];
 800995a:	6923      	ldr	r3, [r4, #16]
 800995c:	6163      	str	r3, [r4, #20]
  trigger->_tooth_time_us[1] = trigger->_tooth_time_us[0];
 800995e:	68e3      	ldr	r3, [r4, #12]
 8009960:	6123      	str	r3, [r4, #16]
  ignition_trigger_event_handle(crankshaft_get_angle(), crankshaft_get_rpm(), get_time_us());
 8009962:	f7ff ff43 	bl	80097ec <crankshaft_get_angle>
 8009966:	eeb0 8a40 	vmov.f32	s16, s0
 800996a:	f7ff ff39 	bl	80097e0 <crankshaft_get_rpm>
 800996e:	eef0 8a40 	vmov.f32	s17, s0
 8009972:	f7ff fe11 	bl	8009598 <get_time_us>
 8009976:	eef0 0a68 	vmov.f32	s1, s17
 800997a:	eeb0 0a48 	vmov.f32	s0, s16
 800997e:	f7f9 f887 	bl	8002a90 <ignition_trigger_event_handle>
}
 8009982:	ecbd 8b02 	vpop	{d8}
 8009986:	bd38      	pop	{r3, r4, r5, pc}
    runtime.spinning_state = SS_STOPPED;
 8009988:	4b04      	ldr	r3, [pc, #16]	@ (800999c <trigger_tooth_handle+0x1a4>)
 800998a:	2200      	movs	r2, #0
 800998c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8009990:	e7e2      	b.n	8009958 <trigger_tooth_handle+0x160>
    set_filtering(trigger);
 8009992:	4620      	mov	r0, r4
 8009994:	f7ff feb8 	bl	8009708 <set_filtering>
 8009998:	e7df      	b.n	800995a <trigger_tooth_handle+0x162>
 800999a:	bf00      	nop
 800999c:	20000ed0 	.word	0x20000ed0
 80099a0:	43b40000 	.word	0x43b40000
 80099a4:	03938700 	.word	0x03938700
 80099a8:	20001f28 	.word	0x20001f28
 80099ac:	0800d120 	.word	0x0800d120

080099b0 <trigger_simulator_init>:

static void (*trigger_callback)(trigger_t *arg);  //passing an argument
static trigger_t *trigger_callback_arg;           // data to pass to callback_arg

void trigger_simulator_init(uint8_t full_teeth, uint8_t missing_teeth, void (*cb)(trigger_t *arg), trigger_t *arg)
{
 80099b0:	b410      	push	{r4}
    wheel_full_teeth = full_teeth;
 80099b2:	4c05      	ldr	r4, [pc, #20]	@ (80099c8 <trigger_simulator_init+0x18>)
 80099b4:	7020      	strb	r0, [r4, #0]
    wheel_missing_teeth = missing_teeth;
 80099b6:	4805      	ldr	r0, [pc, #20]	@ (80099cc <trigger_simulator_init+0x1c>)
 80099b8:	7001      	strb	r1, [r0, #0]
    trigger_callback = cb;
 80099ba:	4905      	ldr	r1, [pc, #20]	@ (80099d0 <trigger_simulator_init+0x20>)
 80099bc:	600a      	str	r2, [r1, #0]
    trigger_callback_arg = arg;
 80099be:	4a05      	ldr	r2, [pc, #20]	@ (80099d4 <trigger_simulator_init+0x24>)
 80099c0:	6013      	str	r3, [r2, #0]
}
 80099c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	20006e65 	.word	0x20006e65
 80099cc:	20006e64 	.word	0x20006e64
 80099d0:	20006e60 	.word	0x20006e60
 80099d4:	20006e5c 	.word	0x20006e5c

080099d8 <trigger_simulator_update>:

void trigger_simulator_update(rpm_t rpm)
{
    if (trigger_callback == NULL)
 80099d8:	4b22      	ldr	r3, [pc, #136]	@ (8009a64 <trigger_simulator_update+0x8c>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d040      	beq.n	8009a62 <trigger_simulator_update+0x8a>
    {
        return;
    }
    if (wheel_full_teeth == 0) {
 80099e0:	4b21      	ldr	r3, [pc, #132]	@ (8009a68 <trigger_simulator_update+0x90>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d03c      	beq.n	8009a62 <trigger_simulator_update+0x8a>
{
 80099e8:	b510      	push	{r4, lr}
    if (rpm == 0)
 80099ea:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80099ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f2:	d030      	beq.n	8009a56 <trigger_simulator_update+0x7e>
    return (time_us_t)60.0f * 1e6f / (rpm * 360.0f);
 80099f4:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8009a6c <trigger_simulator_update+0x94>
 80099f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80099fc:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8009a70 <trigger_simulator_update+0x98>
 8009a00:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a08:	ee17 4a90 	vmov	r4, s15
        return; // Prevent division by zero
    }
    time_us_t tooth_interval = microseconds_per_degree(rpm) * 360 / wheel_full_teeth;
 8009a0c:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8009a10:	fb02 f404 	mul.w	r4, r2, r4
 8009a14:	fbb4 f4f3 	udiv	r4, r4, r3

    time_us_t current_time = get_time_us();
 8009a18:	f7ff fdbe 	bl	8009598 <get_time_us>
    static time_us_t prev_time = 0;


    if ((int32_t)(current_time - prev_time) < tooth_interval)
 8009a1c:	4b15      	ldr	r3, [pc, #84]	@ (8009a74 <trigger_simulator_update+0x9c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	1ac3      	subs	r3, r0, r3
 8009a22:	42a3      	cmp	r3, r4
 8009a24:	d316      	bcc.n	8009a54 <trigger_simulator_update+0x7c>
    {
        return;
    }
    prev_time = current_time;
 8009a26:	4b13      	ldr	r3, [pc, #76]	@ (8009a74 <trigger_simulator_update+0x9c>)
 8009a28:	6018      	str	r0, [r3, #0]
    
    static uint8_t current_tooth_index = 0;

    if (current_tooth_index < wheel_missing_teeth)
 8009a2a:	4b13      	ldr	r3, [pc, #76]	@ (8009a78 <trigger_simulator_update+0xa0>)
 8009a2c:	781a      	ldrb	r2, [r3, #0]
 8009a2e:	4b13      	ldr	r3, [pc, #76]	@ (8009a7c <trigger_simulator_update+0xa4>)
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d304      	bcc.n	8009a40 <trigger_simulator_update+0x68>
    {
        // welll do nothing!
    }
    else
    {
        trigger_callback(trigger_callback_arg);
 8009a36:	4b0b      	ldr	r3, [pc, #44]	@ (8009a64 <trigger_simulator_update+0x8c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a11      	ldr	r2, [pc, #68]	@ (8009a80 <trigger_simulator_update+0xa8>)
 8009a3c:	6810      	ldr	r0, [r2, #0]
 8009a3e:	4798      	blx	r3
    }
    

    if (current_tooth_index < (wheel_full_teeth - 1))
 8009a40:	4b0d      	ldr	r3, [pc, #52]	@ (8009a78 <trigger_simulator_update+0xa0>)
 8009a42:	781a      	ldrb	r2, [r3, #0]
 8009a44:	4b08      	ldr	r3, [pc, #32]	@ (8009a68 <trigger_simulator_update+0x90>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	da05      	bge.n	8009a5a <trigger_simulator_update+0x82>
    {
        current_tooth_index++;
 8009a4e:	3201      	adds	r2, #1
 8009a50:	4b09      	ldr	r3, [pc, #36]	@ (8009a78 <trigger_simulator_update+0xa0>)
 8009a52:	701a      	strb	r2, [r3, #0]
    {
        current_tooth_index = 0;
    }


}
 8009a54:	bd10      	pop	{r4, pc}
        return 0;
 8009a56:	2400      	movs	r4, #0
 8009a58:	e7d8      	b.n	8009a0c <trigger_simulator_update+0x34>
        current_tooth_index = 0;
 8009a5a:	4b07      	ldr	r3, [pc, #28]	@ (8009a78 <trigger_simulator_update+0xa0>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	701a      	strb	r2, [r3, #0]
 8009a60:	e7f8      	b.n	8009a54 <trigger_simulator_update+0x7c>
 8009a62:	4770      	bx	lr
 8009a64:	20006e60 	.word	0x20006e60
 8009a68:	20006e65 	.word	0x20006e65
 8009a6c:	43b40000 	.word	0x43b40000
 8009a70:	4c64e1c0 	.word	0x4c64e1c0
 8009a74:	20006e58 	.word	0x20006e58
 8009a78:	20006e54 	.word	0x20006e54
 8009a7c:	20006e64 	.word	0x20006e64
 8009a80:	20006e5c 	.word	0x20006e5c

08009a84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a86:	2200      	movs	r2, #0
 8009a88:	490f      	ldr	r1, [pc, #60]	@ (8009ac8 <MX_USB_DEVICE_Init+0x44>)
 8009a8a:	4810      	ldr	r0, [pc, #64]	@ (8009acc <MX_USB_DEVICE_Init+0x48>)
 8009a8c:	f000 fc32 	bl	800a2f4 <USBD_Init>
 8009a90:	b970      	cbnz	r0, 8009ab0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a92:	490f      	ldr	r1, [pc, #60]	@ (8009ad0 <MX_USB_DEVICE_Init+0x4c>)
 8009a94:	480d      	ldr	r0, [pc, #52]	@ (8009acc <MX_USB_DEVICE_Init+0x48>)
 8009a96:	f000 fc44 	bl	800a322 <USBD_RegisterClass>
 8009a9a:	b960      	cbnz	r0, 8009ab6 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a9c:	490d      	ldr	r1, [pc, #52]	@ (8009ad4 <MX_USB_DEVICE_Init+0x50>)
 8009a9e:	480b      	ldr	r0, [pc, #44]	@ (8009acc <MX_USB_DEVICE_Init+0x48>)
 8009aa0:	f000 fa39 	bl	8009f16 <USBD_CDC_RegisterInterface>
 8009aa4:	b950      	cbnz	r0, 8009abc <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009aa6:	4809      	ldr	r0, [pc, #36]	@ (8009acc <MX_USB_DEVICE_Init+0x48>)
 8009aa8:	f000 fc5b 	bl	800a362 <USBD_Start>
 8009aac:	b948      	cbnz	r0, 8009ac2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009aae:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009ab0:	f7f9 f9b2 	bl	8002e18 <Error_Handler>
 8009ab4:	e7ed      	b.n	8009a92 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8009ab6:	f7f9 f9af 	bl	8002e18 <Error_Handler>
 8009aba:	e7ef      	b.n	8009a9c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8009abc:	f7f9 f9ac 	bl	8002e18 <Error_Handler>
 8009ac0:	e7f1      	b.n	8009aa6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8009ac2:	f7f9 f9a9 	bl	8002e18 <Error_Handler>
}
 8009ac6:	e7f2      	b.n	8009aae <MX_USB_DEVICE_Init+0x2a>
 8009ac8:	20000144 	.word	0x20000144
 8009acc:	20006e68 	.word	0x20006e68
 8009ad0:	200000b8 	.word	0x200000b8
 8009ad4:	200000fc 	.word	0x200000fc

08009ad8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ad8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ada:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009ade:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8009ae2:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 8009ae6:	b18c      	cbz	r4, 8009b0c <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ae8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8009aec:	6843      	ldr	r3, [r0, #4]
 8009aee:	b17b      	cbz	r3, 8009b10 <USBD_CDC_EP0_RxReady+0x38>
 8009af0:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8009af4:	28ff      	cmp	r0, #255	@ 0xff
 8009af6:	d00d      	beq.n	8009b14 <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8009afe:	4621      	mov	r1, r4
 8009b00:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8009b02:	23ff      	movs	r3, #255	@ 0xff
 8009b04:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009b08:	2000      	movs	r0, #0
}
 8009b0a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8009b0c:	2003      	movs	r0, #3
 8009b0e:	e7fc      	b.n	8009b0a <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 8009b10:	2000      	movs	r0, #0
 8009b12:	e7fa      	b.n	8009b0a <USBD_CDC_EP0_RxReady+0x32>
 8009b14:	2000      	movs	r0, #0
 8009b16:	e7f8      	b.n	8009b0a <USBD_CDC_EP0_RxReady+0x32>

08009b18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009b18:	230a      	movs	r3, #10
 8009b1a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8009b1c:	4800      	ldr	r0, [pc, #0]	@ (8009b20 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8009b1e:	4770      	bx	lr
 8009b20:	200000f0 	.word	0x200000f0

08009b24 <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 8009b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b26:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b28:	4f0f      	ldr	r7, [pc, #60]	@ (8009b68 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8009b2a:	2182      	movs	r1, #130	@ 0x82
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	f000 fdcb 	bl	800a6c8 <USBD_GetEpDesc>
 8009b32:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b34:	2101      	movs	r1, #1
 8009b36:	4638      	mov	r0, r7
 8009b38:	f000 fdc6 	bl	800a6c8 <USBD_GetEpDesc>
 8009b3c:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b3e:	2181      	movs	r1, #129	@ 0x81
 8009b40:	4638      	mov	r0, r7
 8009b42:	f000 fdc1 	bl	800a6c8 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8009b46:	b10d      	cbz	r5, 8009b4c <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b48:	2210      	movs	r2, #16
 8009b4a:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8009b4c:	b11c      	cbz	r4, 8009b56 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b4e:	2240      	movs	r2, #64	@ 0x40
 8009b50:	7122      	strb	r2, [r4, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8009b56:	b118      	cbz	r0, 8009b60 <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b58:	2240      	movs	r2, #64	@ 0x40
 8009b5a:	7102      	strb	r2, [r0, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b60:	2343      	movs	r3, #67	@ 0x43
 8009b62:	8033      	strh	r3, [r6, #0]
}
 8009b64:	4800      	ldr	r0, [pc, #0]	@ (8009b68 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8009b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b68:	20000074 	.word	0x20000074

08009b6c <USBD_CDC_GetFSCfgDesc>:
{
 8009b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6e:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b70:	4f0f      	ldr	r7, [pc, #60]	@ (8009bb0 <USBD_CDC_GetFSCfgDesc+0x44>)
 8009b72:	2182      	movs	r1, #130	@ 0x82
 8009b74:	4638      	mov	r0, r7
 8009b76:	f000 fda7 	bl	800a6c8 <USBD_GetEpDesc>
 8009b7a:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	4638      	mov	r0, r7
 8009b80:	f000 fda2 	bl	800a6c8 <USBD_GetEpDesc>
 8009b84:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b86:	2181      	movs	r1, #129	@ 0x81
 8009b88:	4638      	mov	r0, r7
 8009b8a:	f000 fd9d 	bl	800a6c8 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8009b8e:	b10d      	cbz	r5, 8009b94 <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b90:	2210      	movs	r2, #16
 8009b92:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8009b94:	b11c      	cbz	r4, 8009b9e <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b96:	2240      	movs	r2, #64	@ 0x40
 8009b98:	7122      	strb	r2, [r4, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8009b9e:	b118      	cbz	r0, 8009ba8 <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ba0:	2240      	movs	r2, #64	@ 0x40
 8009ba2:	7102      	strb	r2, [r0, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ba8:	2343      	movs	r3, #67	@ 0x43
 8009baa:	8033      	strh	r3, [r6, #0]
}
 8009bac:	4800      	ldr	r0, [pc, #0]	@ (8009bb0 <USBD_CDC_GetFSCfgDesc+0x44>)
 8009bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bb0:	20000074 	.word	0x20000074

08009bb4 <USBD_CDC_GetHSCfgDesc>:
{
 8009bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb6:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009bb8:	4f0f      	ldr	r7, [pc, #60]	@ (8009bf8 <USBD_CDC_GetHSCfgDesc+0x44>)
 8009bba:	2182      	movs	r1, #130	@ 0x82
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	f000 fd83 	bl	800a6c8 <USBD_GetEpDesc>
 8009bc2:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	f000 fd7e 	bl	800a6c8 <USBD_GetEpDesc>
 8009bcc:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009bce:	2181      	movs	r1, #129	@ 0x81
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	f000 fd79 	bl	800a6c8 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8009bd6:	b10d      	cbz	r5, 8009bdc <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009bd8:	2210      	movs	r2, #16
 8009bda:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8009bdc:	b11c      	cbz	r4, 8009be6 <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009bde:	2200      	movs	r2, #0
 8009be0:	7122      	strb	r2, [r4, #4]
 8009be2:	2202      	movs	r2, #2
 8009be4:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8009be6:	b118      	cbz	r0, 8009bf0 <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009be8:	2200      	movs	r2, #0
 8009bea:	7102      	strb	r2, [r0, #4]
 8009bec:	2202      	movs	r2, #2
 8009bee:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009bf0:	2343      	movs	r3, #67	@ 0x43
 8009bf2:	8033      	strh	r3, [r6, #0]
}
 8009bf4:	4800      	ldr	r0, [pc, #0]	@ (8009bf8 <USBD_CDC_GetHSCfgDesc+0x44>)
 8009bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bf8:	20000074 	.word	0x20000074

08009bfc <USBD_CDC_DataOut>:
{
 8009bfc:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bfe:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009c02:	33b0      	adds	r3, #176	@ 0xb0
 8009c04:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c08:	b195      	cbz	r5, 8009c30 <USBD_CDC_DataOut+0x34>
 8009c0a:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c0c:	f000 fb1a 	bl	800a244 <USBD_LL_GetRxDataSize>
 8009c10:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c14:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009c18:	33b0      	adds	r3, #176	@ 0xb0
 8009c1a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009c1e:	6863      	ldr	r3, [r4, #4]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8009c26:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8009c2a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8009c2c:	2000      	movs	r0, #0
}
 8009c2e:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8009c30:	2003      	movs	r0, #3
 8009c32:	e7fc      	b.n	8009c2e <USBD_CDC_DataOut+0x32>

08009c34 <USBD_CDC_DataIn>:
{
 8009c34:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009c36:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c3a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009c3e:	33b0      	adds	r3, #176	@ 0xb0
 8009c40:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8009c44:	b384      	cbz	r4, 8009ca8 <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009c46:	f001 030f 	and.w	r3, r1, #15
 8009c4a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009c4e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009c52:	6992      	ldr	r2, [r2, #24]
 8009c54:	b14a      	cbz	r2, 8009c6a <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009c56:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 8009c5a:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8009c5e:	69ed      	ldr	r5, [r5, #28]
 8009c60:	fbb2 fcf5 	udiv	ip, r2, r5
 8009c64:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009c68:	b192      	cbz	r2, 8009c90 <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009c70:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009c74:	33b0      	adds	r3, #176	@ 0xb0
 8009c76:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009c7a:	6843      	ldr	r3, [r0, #4]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	b1ab      	cbz	r3, 8009cac <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009c80:	460a      	mov	r2, r1
 8009c82:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 8009c86:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 8009c8a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8009c8c:	2000      	movs	r0, #0
}
 8009c8e:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009c90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009c94:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009c98:	2400      	movs	r4, #0
 8009c9a:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009c9c:	4623      	mov	r3, r4
 8009c9e:	4622      	mov	r2, r4
 8009ca0:	f000 fb18 	bl	800a2d4 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8009ca4:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009ca6:	e7f2      	b.n	8009c8e <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 8009ca8:	2003      	movs	r0, #3
 8009caa:	e7f0      	b.n	8009c8e <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 8009cac:	2000      	movs	r0, #0
 8009cae:	e7ee      	b.n	8009c8e <USBD_CDC_DataIn+0x5a>

08009cb0 <USBD_CDC_Setup>:
{
 8009cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cb2:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cb4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009cb8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8009cbc:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 8009cc6:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 8009cca:	2f00      	cmp	r7, #0
 8009ccc:	d078      	beq.n	8009dc0 <USBD_CDC_Setup+0x110>
 8009cce:	4604      	mov	r4, r0
 8009cd0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cd2:	7809      	ldrb	r1, [r1, #0]
 8009cd4:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 8009cd8:	d034      	beq.n	8009d44 <USBD_CDC_Setup+0x94>
 8009cda:	2e20      	cmp	r6, #32
 8009cdc:	d169      	bne.n	8009db2 <USBD_CDC_Setup+0x102>
      if (req->wLength != 0U)
 8009cde:	88ea      	ldrh	r2, [r5, #6]
 8009ce0:	b32a      	cbz	r2, 8009d2e <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 8009ce2:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8009ce6:	d10e      	bne.n	8009d06 <USBD_CDC_Setup+0x56>
          hcdc->CmdOpCode = req->bRequest;
 8009ce8:	786b      	ldrb	r3, [r5, #1]
 8009cea:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009cee:	88ea      	ldrh	r2, [r5, #6]
 8009cf0:	2a3f      	cmp	r2, #63	@ 0x3f
 8009cf2:	d81a      	bhi.n	8009d2a <USBD_CDC_Setup+0x7a>
 8009cf4:	b2d2      	uxtb	r2, r2
 8009cf6:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009cfa:	4639      	mov	r1, r7
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f001 f94c 	bl	800af9a <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8009d02:	2600      	movs	r6, #0
 8009d04:	e059      	b.n	8009dba <USBD_CDC_Setup+0x10a>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d06:	33b0      	adds	r3, #176	@ 0xb0
 8009d08:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	4639      	mov	r1, r7
 8009d12:	7868      	ldrb	r0, [r5, #1]
 8009d14:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d16:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009d18:	2a07      	cmp	r2, #7
 8009d1a:	bf28      	it	cs
 8009d1c:	2207      	movcs	r2, #7
 8009d1e:	4639      	mov	r1, r7
 8009d20:	4620      	mov	r0, r4
 8009d22:	f001 f925 	bl	800af70 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009d26:	2600      	movs	r6, #0
 8009d28:	e047      	b.n	8009dba <USBD_CDC_Setup+0x10a>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009d2a:	2240      	movs	r2, #64	@ 0x40
 8009d2c:	e7e3      	b.n	8009cf6 <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d2e:	33b0      	adds	r3, #176	@ 0xb0
 8009d30:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	7868      	ldrb	r0, [r5, #1]
 8009d3e:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8009d40:	2600      	movs	r6, #0
 8009d42:	e03a      	b.n	8009dba <USBD_CDC_Setup+0x10a>
      switch (req->bRequest)
 8009d44:	786f      	ldrb	r7, [r5, #1]
 8009d46:	2f0b      	cmp	r7, #11
 8009d48:	d82e      	bhi.n	8009da8 <USBD_CDC_Setup+0xf8>
 8009d4a:	e8df f007 	tbb	[pc, r7]
 8009d4e:	3606      	.short	0x3606
 8009d50:	2d2d2d2d 	.word	0x2d2d2d2d
 8009d54:	2d2d2d2d 	.word	0x2d2d2d2d
 8009d58:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d5a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d004      	beq.n	8009d6c <USBD_CDC_Setup+0xbc>
            USBD_CtlError(pdev, req);
 8009d62:	4629      	mov	r1, r5
 8009d64:	f000 fced 	bl	800a742 <USBD_CtlError>
            ret = USBD_FAIL;
 8009d68:	2603      	movs	r6, #3
 8009d6a:	e026      	b.n	8009dba <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009d6c:	2202      	movs	r2, #2
 8009d6e:	a901      	add	r1, sp, #4
 8009d70:	f001 f8fe 	bl	800af70 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009d74:	463e      	mov	r6, r7
 8009d76:	e020      	b.n	8009dba <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d78:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009d7c:	2b03      	cmp	r3, #3
 8009d7e:	d004      	beq.n	8009d8a <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 8009d80:	4629      	mov	r1, r5
 8009d82:	f000 fcde 	bl	800a742 <USBD_CtlError>
            ret = USBD_FAIL;
 8009d86:	2603      	movs	r6, #3
 8009d88:	e017      	b.n	8009dba <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f10d 0107 	add.w	r1, sp, #7
 8009d90:	f001 f8ee 	bl	800af70 <USBD_CtlSendData>
 8009d94:	e011      	b.n	8009dba <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009d96:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009d9a:	2b03      	cmp	r3, #3
 8009d9c:	d00d      	beq.n	8009dba <USBD_CDC_Setup+0x10a>
            USBD_CtlError(pdev, req);
 8009d9e:	4629      	mov	r1, r5
 8009da0:	f000 fccf 	bl	800a742 <USBD_CtlError>
            ret = USBD_FAIL;
 8009da4:	2603      	movs	r6, #3
 8009da6:	e008      	b.n	8009dba <USBD_CDC_Setup+0x10a>
          USBD_CtlError(pdev, req);
 8009da8:	4629      	mov	r1, r5
 8009daa:	f000 fcca 	bl	800a742 <USBD_CtlError>
          ret = USBD_FAIL;
 8009dae:	2603      	movs	r6, #3
          break;
 8009db0:	e003      	b.n	8009dba <USBD_CDC_Setup+0x10a>
      USBD_CtlError(pdev, req);
 8009db2:	4629      	mov	r1, r5
 8009db4:	f000 fcc5 	bl	800a742 <USBD_CtlError>
      ret = USBD_FAIL;
 8009db8:	2603      	movs	r6, #3
}
 8009dba:	4630      	mov	r0, r6
 8009dbc:	b003      	add	sp, #12
 8009dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8009dc0:	2603      	movs	r6, #3
 8009dc2:	e7fa      	b.n	8009dba <USBD_CDC_Setup+0x10a>

08009dc4 <USBD_CDC_DeInit>:
{
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009dc8:	2181      	movs	r1, #129	@ 0x81
 8009dca:	f000 fa63 	bl	800a294 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009dce:	2500      	movs	r5, #0
 8009dd0:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f000 fa5d 	bl	800a294 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009dda:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009dde:	2182      	movs	r1, #130	@ 0x82
 8009de0:	4620      	mov	r0, r4
 8009de2:	f000 fa57 	bl	800a294 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009de6:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009dea:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009dee:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009df2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8009df6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dfa:	b19a      	cbz	r2, 8009e24 <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009dfc:	33b0      	adds	r3, #176	@ 0xb0
 8009dfe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e08:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009e0c:	33b0      	adds	r3, #176	@ 0xb0
 8009e0e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8009e12:	f000 fa21 	bl	800a258 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e16:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009e1a:	33b0      	adds	r3, #176	@ 0xb0
 8009e1c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8009e20:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8009e24:	2000      	movs	r0, #0
 8009e26:	bd38      	pop	{r3, r4, r5, pc}

08009e28 <USBD_CDC_Init>:
{
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009e2c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009e30:	f000 fa0e 	bl	800a250 <USBD_static_malloc>
  if (hcdc == NULL)
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d049      	beq.n	8009ecc <USBD_CDC_Init+0xa4>
 8009e38:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009e3a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009e3e:	2100      	movs	r1, #0
 8009e40:	f001 f954 	bl	800b0ec <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009e44:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009e48:	33b0      	adds	r3, #176	@ 0xb0
 8009e4a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009e4e:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e52:	7c23      	ldrb	r3, [r4, #16]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d141      	bne.n	8009edc <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009e58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e5c:	2202      	movs	r2, #2
 8009e5e:	2181      	movs	r1, #129	@ 0x81
 8009e60:	4620      	mov	r0, r4
 8009e62:	f000 fa0c 	bl	800a27e <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009e66:	2601      	movs	r6, #1
 8009e68:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009e6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e6e:	2202      	movs	r2, #2
 8009e70:	4631      	mov	r1, r6
 8009e72:	4620      	mov	r0, r4
 8009e74:	f000 fa03 	bl	800a27e <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009e78:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009e7c:	2310      	movs	r3, #16
 8009e7e:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009e82:	2308      	movs	r3, #8
 8009e84:	2203      	movs	r2, #3
 8009e86:	2182      	movs	r1, #130	@ 0x82
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f000 f9f8 	bl	800a27e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
  hcdc->RxBuffer = NULL;
 8009e94:	2600      	movs	r6, #0
 8009e96:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009e9a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009e9e:	33b0      	adds	r3, #176	@ 0xb0
 8009ea0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4798      	blx	r3
  hcdc->TxState = 0U;
 8009eaa:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009eae:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 8009eb2:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8009eb6:	b362      	cbz	r2, 8009f12 <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009eb8:	7c25      	ldrb	r5, [r4, #16]
 8009eba:	bb1d      	cbnz	r5, 8009f04 <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ebc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f000 fa0e 	bl	800a2e4 <USBD_LL_PrepareReceive>
}
 8009ec8:	4628      	mov	r0, r5
 8009eca:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ecc:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009ed0:	33b0      	adds	r3, #176	@ 0xb0
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009ed8:	2502      	movs	r5, #2
 8009eda:	e7f5      	b.n	8009ec8 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009edc:	2340      	movs	r3, #64	@ 0x40
 8009ede:	2202      	movs	r2, #2
 8009ee0:	2181      	movs	r1, #129	@ 0x81
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f000 f9cb 	bl	800a27e <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009ee8:	2601      	movs	r6, #1
 8009eea:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009eec:	2340      	movs	r3, #64	@ 0x40
 8009eee:	2202      	movs	r2, #2
 8009ef0:	4631      	mov	r1, r6
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f000 f9c3 	bl	800a27e <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009ef8:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009efc:	2310      	movs	r3, #16
 8009efe:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 8009f02:	e7be      	b.n	8009e82 <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f04:	2340      	movs	r3, #64	@ 0x40
 8009f06:	2101      	movs	r1, #1
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f000 f9eb 	bl	800a2e4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8009f0e:	2500      	movs	r5, #0
 8009f10:	e7da      	b.n	8009ec8 <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 8009f12:	2502      	movs	r5, #2
 8009f14:	e7d8      	b.n	8009ec8 <USBD_CDC_Init+0xa0>

08009f16 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8009f16:	b139      	cbz	r1, 8009f28 <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8009f18:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009f1c:	33b0      	adds	r3, #176	@ 0xb0
 8009f1e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009f22:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 8009f24:	2000      	movs	r0, #0
 8009f26:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009f28:	2003      	movs	r0, #3
}
 8009f2a:	4770      	bx	lr

08009f2c <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f2c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009f30:	33b0      	adds	r3, #176	@ 0xb0
 8009f32:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009f36:	b12b      	cbz	r3, 8009f44 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8009f38:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009f3c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009f40:	2000      	movs	r0, #0
 8009f42:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009f44:	2003      	movs	r0, #3
}
 8009f46:	4770      	bx	lr

08009f48 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f48:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009f4c:	33b0      	adds	r3, #176	@ 0xb0
 8009f4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8009f52:	b11b      	cbz	r3, 8009f5c <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8009f54:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009f58:	2000      	movs	r0, #0
 8009f5a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009f5c:	2003      	movs	r0, #3
}
 8009f5e:	4770      	bx	lr

08009f60 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009f60:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f62:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009f66:	33b0      	adds	r3, #176	@ 0xb0
 8009f68:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009f6c:	b18a      	cbz	r2, 8009f92 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8009f6e:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 8009f72:	b10b      	cbz	r3, 8009f78 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009f74:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8009f76:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009f7e:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 8009f82:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009f84:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8009f88:	2181      	movs	r1, #129	@ 0x81
 8009f8a:	f000 f9a3 	bl	800a2d4 <USBD_LL_Transmit>
    ret = USBD_OK;
 8009f8e:	2000      	movs	r0, #0
 8009f90:	e7f1      	b.n	8009f76 <USBD_CDC_TransmitPacket+0x16>
    return (uint8_t)USBD_FAIL;
 8009f92:	2003      	movs	r0, #3
 8009f94:	e7ef      	b.n	8009f76 <USBD_CDC_TransmitPacket+0x16>

08009f96 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f96:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f98:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009f9c:	33b0      	adds	r3, #176	@ 0xb0
 8009f9e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009fa2:	b192      	cbz	r2, 8009fca <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fa4:	7c04      	ldrb	r4, [r0, #16]
 8009fa6:	b944      	cbnz	r4, 8009fba <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009fa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009fac:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	f000 f997 	bl	800a2e4 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009fba:	2340      	movs	r3, #64	@ 0x40
 8009fbc:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	f000 f98f 	bl	800a2e4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8009fc6:	2400      	movs	r4, #0
 8009fc8:	e7f5      	b.n	8009fb6 <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 8009fca:	2403      	movs	r4, #3
 8009fcc:	e7f3      	b.n	8009fb6 <USBD_CDC_ReceivePacket+0x20>

08009fce <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8009fce:	2000      	movs	r0, #0
 8009fd0:	4770      	bx	lr

08009fd2 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	4770      	bx	lr

08009fd6 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	4770      	bx	lr
	...

08009fdc <CDC_Receive_FS>:
{
 8009fdc:	b510      	push	{r4, lr}
 8009fde:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009fe0:	4c04      	ldr	r4, [pc, #16]	@ (8009ff4 <CDC_Receive_FS+0x18>)
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f7ff ffb0 	bl	8009f48 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f7ff ffd4 	bl	8009f96 <USBD_CDC_ReceivePacket>
}
 8009fee:	2000      	movs	r0, #0
 8009ff0:	bd10      	pop	{r4, pc}
 8009ff2:	bf00      	nop
 8009ff4:	20006e68 	.word	0x20006e68

08009ff8 <CDC_Init_FS>:
{
 8009ff8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009ffa:	4c06      	ldr	r4, [pc, #24]	@ (800a014 <CDC_Init_FS+0x1c>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	4906      	ldr	r1, [pc, #24]	@ (800a018 <CDC_Init_FS+0x20>)
 800a000:	4620      	mov	r0, r4
 800a002:	f7ff ff93 	bl	8009f2c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a006:	4905      	ldr	r1, [pc, #20]	@ (800a01c <CDC_Init_FS+0x24>)
 800a008:	4620      	mov	r0, r4
 800a00a:	f7ff ff9d 	bl	8009f48 <USBD_CDC_SetRxBuffer>
}
 800a00e:	2000      	movs	r0, #0
 800a010:	bd10      	pop	{r4, pc}
 800a012:	bf00      	nop
 800a014:	20006e68 	.word	0x20006e68
 800a018:	20007144 	.word	0x20007144
 800a01c:	20007544 	.word	0x20007544

0800a020 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a020:	4b09      	ldr	r3, [pc, #36]	@ (800a048 <CDC_Transmit_FS+0x28>)
 800a022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 800a026:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a02a:	b10b      	cbz	r3, 800a030 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 800a02c:	2001      	movs	r0, #1
}
 800a02e:	4770      	bx	lr
{
 800a030:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a032:	4c05      	ldr	r4, [pc, #20]	@ (800a048 <CDC_Transmit_FS+0x28>)
 800a034:	460a      	mov	r2, r1
 800a036:	4601      	mov	r1, r0
 800a038:	4620      	mov	r0, r4
 800a03a:	f7ff ff77 	bl	8009f2c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a03e:	4620      	mov	r0, r4
 800a040:	f7ff ff8e 	bl	8009f60 <USBD_CDC_TransmitPacket>
}
 800a044:	bd10      	pop	{r4, pc}
 800a046:	bf00      	nop
 800a048:	20006e68 	.word	0x20006e68

0800a04c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a04c:	b530      	push	{r4, r5, lr}
 800a04e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a050:	2300      	movs	r3, #0
 800a052:	9303      	str	r3, [sp, #12]
 800a054:	9304      	str	r3, [sp, #16]
 800a056:	9305      	str	r3, [sp, #20]
 800a058:	9306      	str	r3, [sp, #24]
 800a05a:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a05c:	6803      	ldr	r3, [r0, #0]
 800a05e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a062:	d001      	beq.n	800a068 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a064:	b009      	add	sp, #36	@ 0x24
 800a066:	bd30      	pop	{r4, r5, pc}
 800a068:	aa03      	add	r2, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a06a:	2500      	movs	r5, #0
 800a06c:	9501      	str	r5, [sp, #4]
 800a06e:	4c17      	ldr	r4, [pc, #92]	@ (800a0cc <HAL_PCD_MspInit+0x80>)
 800a070:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a072:	f043 0301 	orr.w	r3, r3, #1
 800a076:	6323      	str	r3, [r4, #48]	@ 0x30
 800a078:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	9301      	str	r3, [sp, #4]
 800a080:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a082:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a086:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a088:	2302      	movs	r3, #2
 800a08a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a08c:	2303      	movs	r3, #3
 800a08e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a090:	230a      	movs	r3, #10
 800a092:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a094:	4611      	mov	r1, r2
 800a096:	480e      	ldr	r0, [pc, #56]	@ (800a0d0 <HAL_PCD_MspInit+0x84>)
 800a098:	f7fa ffb2 	bl	8005000 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a09c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a09e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0a4:	9502      	str	r5, [sp, #8]
 800a0a6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a0a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a0ac:	6463      	str	r3, [r4, #68]	@ 0x44
 800a0ae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a0b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a0b4:	9302      	str	r3, [sp, #8]
 800a0b6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a0b8:	462a      	mov	r2, r5
 800a0ba:	2105      	movs	r1, #5
 800a0bc:	2043      	movs	r0, #67	@ 0x43
 800a0be:	f7fa fb95 	bl	80047ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a0c2:	2043      	movs	r0, #67	@ 0x43
 800a0c4:	f7fa fba2 	bl	800480c <HAL_NVIC_EnableIRQ>
}
 800a0c8:	e7cc      	b.n	800a064 <HAL_PCD_MspInit+0x18>
 800a0ca:	bf00      	nop
 800a0cc:	40023800 	.word	0x40023800
 800a0d0:	40020000 	.word	0x40020000

0800a0d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0d4:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0d6:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 800a0da:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800a0de:	f000 f956 	bl	800a38e <USBD_LL_SetupStage>
}
 800a0e2:	bd08      	pop	{r3, pc}

0800a0e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0e4:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0e6:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800a0ea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a0ee:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800a0f2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800a0f6:	f000 fa17 	bl	800a528 <USBD_LL_DataOutStage>
}
 800a0fa:	bd08      	pop	{r3, pc}

0800a0fc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0fc:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a0fe:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800a102:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a106:	6a1a      	ldr	r2, [r3, #32]
 800a108:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800a10c:	f000 fa6c 	bl	800a5e8 <USBD_LL_DataInStage>
}
 800a110:	bd08      	pop	{r3, pc}

0800a112 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a112:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a114:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800a118:	f000 f9b4 	bl	800a484 <USBD_LL_SOF>
}
 800a11c:	bd08      	pop	{r3, pc}

0800a11e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a11e:	b510      	push	{r4, lr}
 800a120:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a122:	79c3      	ldrb	r3, [r0, #7]
 800a124:	2b02      	cmp	r3, #2
 800a126:	d109      	bne.n	800a13c <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a128:	2101      	movs	r1, #1
 800a12a:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800a12e:	f000 f98c 	bl	800a44a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a132:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800a136:	f000 f956 	bl	800a3e6 <USBD_LL_Reset>
}
 800a13a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800a13c:	f7f8 fe6c 	bl	8002e18 <Error_Handler>
 800a140:	e7f2      	b.n	800a128 <HAL_PCD_ResetCallback+0xa>
	...

0800a144 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a144:	b510      	push	{r4, lr}
 800a146:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a148:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800a14c:	f000 f980 	bl	800a450 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a150:	6822      	ldr	r2, [r4, #0]
 800a152:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 800a156:	f043 0301 	orr.w	r3, r3, #1
 800a15a:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a15e:	7ae3      	ldrb	r3, [r4, #11]
 800a160:	b123      	cbz	r3, 800a16c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a162:	4a03      	ldr	r2, [pc, #12]	@ (800a170 <HAL_PCD_SuspendCallback+0x2c>)
 800a164:	6913      	ldr	r3, [r2, #16]
 800a166:	f043 0306 	orr.w	r3, r3, #6
 800a16a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a16c:	bd10      	pop	{r4, pc}
 800a16e:	bf00      	nop
 800a170:	e000ed00 	.word	0xe000ed00

0800a174 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a174:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a176:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800a17a:	f000 f977 	bl	800a46c <USBD_LL_Resume>
}
 800a17e:	bd08      	pop	{r3, pc}

0800a180 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a180:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a182:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800a186:	f000 f9a3 	bl	800a4d0 <USBD_LL_IsoOUTIncomplete>
}
 800a18a:	bd08      	pop	{r3, pc}

0800a18c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a18c:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a18e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800a192:	f000 f987 	bl	800a4a4 <USBD_LL_IsoINIncomplete>
}
 800a196:	bd08      	pop	{r3, pc}

0800a198 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a198:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a19a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800a19e:	f000 f9ad 	bl	800a4fc <USBD_LL_DevConnected>
}
 800a1a2:	bd08      	pop	{r3, pc}

0800a1a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1a4:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a1a6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800a1aa:	f000 f9a9 	bl	800a500 <USBD_LL_DevDisconnected>
}
 800a1ae:	bd08      	pop	{r3, pc}

0800a1b0 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a1b0:	7802      	ldrb	r2, [r0, #0]
 800a1b2:	b10a      	cbz	r2, 800a1b8 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	4770      	bx	lr
{
 800a1b8:	b510      	push	{r4, lr}
 800a1ba:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 800a1bc:	4815      	ldr	r0, [pc, #84]	@ (800a214 <USBD_LL_Init+0x64>)
 800a1be:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a1c2:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a1c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800a1ca:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a1cc:	2304      	movs	r3, #4
 800a1ce:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a1d0:	2202      	movs	r2, #2
 800a1d2:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a1d8:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a1da:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a1dc:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a1de:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a1e0:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a1e2:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a1e4:	f7fb f97c 	bl	80054e0 <HAL_PCD_Init>
 800a1e8:	b980      	cbnz	r0, 800a20c <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a1ea:	4c0a      	ldr	r4, [pc, #40]	@ (800a214 <USBD_LL_Init+0x64>)
 800a1ec:	2180      	movs	r1, #128	@ 0x80
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f7fb ff45 	bl	800607e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a1f4:	2240      	movs	r2, #64	@ 0x40
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f7fb ff1a 	bl	8006032 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a1fe:	2280      	movs	r2, #128	@ 0x80
 800a200:	2101      	movs	r1, #1
 800a202:	4620      	mov	r0, r4
 800a204:	f7fb ff15 	bl	8006032 <HAL_PCDEx_SetTxFiFo>
}
 800a208:	2000      	movs	r0, #0
 800a20a:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800a20c:	f7f8 fe04 	bl	8002e18 <Error_Handler>
 800a210:	e7eb      	b.n	800a1ea <USBD_LL_Init+0x3a>
 800a212:	bf00      	nop
 800a214:	20007b64 	.word	0x20007b64

0800a218 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a218:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 800a21c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800a220:	d108      	bne.n	800a234 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a222:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800a226:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800a22a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a22e:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 800a232:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a234:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800a238:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800a23c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a240:	7d98      	ldrb	r0, [r3, #22]
 800a242:	4770      	bx	lr

0800a244 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a244:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a246:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800a24a:	f7fb fb4d 	bl	80058e8 <HAL_PCD_EP_GetRxCount>
}
 800a24e:	bd08      	pop	{r3, pc}

0800a250 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 800a250:	4800      	ldr	r0, [pc, #0]	@ (800a254 <USBD_static_malloc+0x4>)
 800a252:	4770      	bx	lr
 800a254:	20007944 	.word	0x20007944

0800a258 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 800a258:	4770      	bx	lr

0800a25a <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800a25a:	2803      	cmp	r0, #3
 800a25c:	d805      	bhi.n	800a26a <USBD_Get_USB_Status+0x10>
 800a25e:	e8df f000 	tbb	[pc, r0]
 800a262:	0405      	.short	0x0405
 800a264:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a266:	2001      	movs	r0, #1
    break;
 800a268:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800a26a:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800a26c:	4770      	bx	lr

0800a26e <USBD_LL_Start>:
{
 800a26e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800a270:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800a274:	f7fb f9b5 	bl	80055e2 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a278:	f7ff ffef 	bl	800a25a <USBD_Get_USB_Status>
}
 800a27c:	bd08      	pop	{r3, pc}

0800a27e <USBD_LL_OpenEP>:
{
 800a27e:	b508      	push	{r3, lr}
 800a280:	4694      	mov	ip, r2
 800a282:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a284:	4663      	mov	r3, ip
 800a286:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800a28a:	f7fb fa8a 	bl	80057a2 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a28e:	f7ff ffe4 	bl	800a25a <USBD_Get_USB_Status>
}
 800a292:	bd08      	pop	{r3, pc}

0800a294 <USBD_LL_CloseEP>:
{
 800a294:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a296:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800a29a:	f7fb fac8 	bl	800582e <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a29e:	f7ff ffdc 	bl	800a25a <USBD_Get_USB_Status>
}
 800a2a2:	bd08      	pop	{r3, pc}

0800a2a4 <USBD_LL_StallEP>:
{
 800a2a4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2a6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800a2aa:	f7fb fb4b 	bl	8005944 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2ae:	f7ff ffd4 	bl	800a25a <USBD_Get_USB_Status>
}
 800a2b2:	bd08      	pop	{r3, pc}

0800a2b4 <USBD_LL_ClearStallEP>:
{
 800a2b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2b6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800a2ba:	f7fb fb86 	bl	80059ca <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2be:	f7ff ffcc 	bl	800a25a <USBD_Get_USB_Status>
}
 800a2c2:	bd08      	pop	{r3, pc}

0800a2c4 <USBD_LL_SetUSBAddress>:
{
 800a2c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a2c6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800a2ca:	f7fb fa57 	bl	800577c <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2ce:	f7ff ffc4 	bl	800a25a <USBD_Get_USB_Status>
}
 800a2d2:	bd08      	pop	{r3, pc}

0800a2d4 <USBD_LL_Transmit>:
{
 800a2d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a2d6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800a2da:	f7fb fb0e 	bl	80058fa <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2de:	f7ff ffbc 	bl	800a25a <USBD_Get_USB_Status>
}
 800a2e2:	bd08      	pop	{r3, pc}

0800a2e4 <USBD_LL_PrepareReceive>:
{
 800a2e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a2e6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800a2ea:	f7fb fad8 	bl	800589e <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2ee:	f7ff ffb4 	bl	800a25a <USBD_Get_USB_Status>
}
 800a2f2:	bd08      	pop	{r3, pc}

0800a2f4 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a2f4:	b198      	cbz	r0, 800a31e <USBD_Init+0x2a>
{
 800a2f6:	b508      	push	{r3, lr}
 800a2f8:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a300:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a304:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a308:	b109      	cbz	r1, 800a30e <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800a30a:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a30e:	2101      	movs	r1, #1
 800a310:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a314:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a316:	4618      	mov	r0, r3
 800a318:	f7ff ff4a 	bl	800a1b0 <USBD_LL_Init>

  return ret;
}
 800a31c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800a31e:	2003      	movs	r0, #3
}
 800a320:	4770      	bx	lr

0800a322 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a322:	b510      	push	{r4, lr}
 800a324:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800a326:	2300      	movs	r3, #0
 800a328:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800a32c:	b1b9      	cbz	r1, 800a35e <USBD_RegisterClass+0x3c>
 800a32e:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a330:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a334:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800a338:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800a33a:	b143      	cbz	r3, 800a34e <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a33c:	32ae      	adds	r2, #174	@ 0xae
 800a33e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800a342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a344:	f10d 0006 	add.w	r0, sp, #6
 800a348:	4798      	blx	r3
 800a34a:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a34e:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 800a352:	3301      	adds	r3, #1
 800a354:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 800a358:	2000      	movs	r0, #0
}
 800a35a:	b002      	add	sp, #8
 800a35c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800a35e:	2003      	movs	r0, #3
 800a360:	e7fb      	b.n	800a35a <USBD_RegisterClass+0x38>

0800a362 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a362:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a364:	f7ff ff83 	bl	800a26e <USBD_LL_Start>
}
 800a368:	bd08      	pop	{r3, pc}

0800a36a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a36a:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a36c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a370:	b113      	cbz	r3, 800a378 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800a376:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800a378:	2000      	movs	r0, #0
 800a37a:	e7fc      	b.n	800a376 <USBD_SetClassConfig+0xc>

0800a37c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a37c:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a37e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	4798      	blx	r3
 800a386:	b900      	cbnz	r0, 800a38a <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800a388:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 800a38a:	2003      	movs	r0, #3
 800a38c:	e7fc      	b.n	800a388 <USBD_ClrClassConfig+0xc>

0800a38e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a38e:	b538      	push	{r3, r4, r5, lr}
 800a390:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a392:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800a396:	4628      	mov	r0, r5
 800a398:	f000 f9bf 	bl	800a71a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a39c:	2301      	movs	r3, #1
 800a39e:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a3a2:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 800a3a6:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a3aa:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 800a3ae:	f001 031f 	and.w	r3, r1, #31
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d007      	beq.n	800a3c6 <USBD_LL_SetupStage+0x38>
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d00a      	beq.n	800a3d0 <USBD_LL_SetupStage+0x42>
 800a3ba:	b973      	cbnz	r3, 800a3da <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a3bc:	4629      	mov	r1, r5
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f000 fb80 	bl	800aac4 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 800a3c4:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f000 fbb6 	bl	800ab3a <USBD_StdItfReq>
      break;
 800a3ce:	e7f9      	b.n	800a3c4 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	f000 fbf3 	bl	800abbe <USBD_StdEPReq>
      break;
 800a3d8:	e7f4      	b.n	800a3c4 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3da:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f7ff ff60 	bl	800a2a4 <USBD_LL_StallEP>
      break;
 800a3e4:	e7ee      	b.n	800a3c4 <USBD_LL_SetupStage+0x36>

0800a3e6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a3e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e8:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a3f6:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800a3f8:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a3fc:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a400:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a404:	b1db      	cbz	r3, 800a43e <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	b1db      	cbz	r3, 800a442 <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a40a:	2100      	movs	r1, #0
 800a40c:	4798      	blx	r3
 800a40e:	4607      	mov	r7, r0
 800a410:	b9c8      	cbnz	r0, 800a446 <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a412:	2340      	movs	r3, #64	@ 0x40
 800a414:	2200      	movs	r2, #0
 800a416:	4611      	mov	r1, r2
 800a418:	4620      	mov	r0, r4
 800a41a:	f7ff ff30 	bl	800a27e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a41e:	2601      	movs	r6, #1
 800a420:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a424:	2540      	movs	r5, #64	@ 0x40
 800a426:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a42a:	462b      	mov	r3, r5
 800a42c:	2200      	movs	r2, #0
 800a42e:	2180      	movs	r1, #128	@ 0x80
 800a430:	4620      	mov	r0, r4
 800a432:	f7ff ff24 	bl	800a27e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a436:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a438:	6225      	str	r5, [r4, #32]

  return ret;
}
 800a43a:	4638      	mov	r0, r7
 800a43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800a43e:	2700      	movs	r7, #0
 800a440:	e7e7      	b.n	800a412 <USBD_LL_Reset+0x2c>
 800a442:	2700      	movs	r7, #0
 800a444:	e7e5      	b.n	800a412 <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 800a446:	2703      	movs	r7, #3
 800a448:	e7e3      	b.n	800a412 <USBD_LL_Reset+0x2c>

0800a44a <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800a44a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800a44c:	2000      	movs	r0, #0
 800a44e:	4770      	bx	lr

0800a450 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a450:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a454:	2b04      	cmp	r3, #4
 800a456:	d004      	beq.n	800a462 <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a458:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a462:	2304      	movs	r3, #4
 800a464:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800a468:	2000      	movs	r0, #0
 800a46a:	4770      	bx	lr

0800a46c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a46c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a470:	2b04      	cmp	r3, #4
 800a472:	d001      	beq.n	800a478 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800a474:	2000      	movs	r0, #0
 800a476:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800a478:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 800a482:	e7f7      	b.n	800a474 <USBD_LL_Resume+0x8>

0800a484 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a484:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a486:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d001      	beq.n	800a492 <USBD_LL_SOF+0xe>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800a48e:	2000      	movs	r0, #0
 800a490:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 800a492:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a496:	2b00      	cmp	r3, #0
 800a498:	d0f9      	beq.n	800a48e <USBD_LL_SOF+0xa>
      if (pdev->pClass[0]->SOF != NULL)
 800a49a:	69db      	ldr	r3, [r3, #28]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d0f6      	beq.n	800a48e <USBD_LL_SOF+0xa>
        (void)pdev->pClass[0]->SOF(pdev);
 800a4a0:	4798      	blx	r3
 800a4a2:	e7f4      	b.n	800a48e <USBD_LL_SOF+0xa>

0800a4a4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a4a4:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800a4a6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a4aa:	33ae      	adds	r3, #174	@ 0xae
 800a4ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a4b0:	b153      	cbz	r3, 800a4c8 <USBD_LL_IsoINIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b2:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a4b6:	2a03      	cmp	r2, #3
 800a4b8:	d001      	beq.n	800a4be <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800a4ba:	2000      	movs	r0, #0
}
 800a4bc:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a4be:	6a1b      	ldr	r3, [r3, #32]
 800a4c0:	b123      	cbz	r3, 800a4cc <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a4c2:	4798      	blx	r3
  return USBD_OK;
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	e7f9      	b.n	800a4bc <USBD_LL_IsoINIncomplete+0x18>
    return USBD_FAIL;
 800a4c8:	2003      	movs	r0, #3
 800a4ca:	e7f7      	b.n	800a4bc <USBD_LL_IsoINIncomplete+0x18>
  return USBD_OK;
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	e7f5      	b.n	800a4bc <USBD_LL_IsoINIncomplete+0x18>

0800a4d0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a4d0:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800a4d2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a4d6:	33ae      	adds	r3, #174	@ 0xae
 800a4d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a4dc:	b153      	cbz	r3, 800a4f4 <USBD_LL_IsoOUTIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4de:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a4e2:	2a03      	cmp	r2, #3
 800a4e4:	d001      	beq.n	800a4ea <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800a4e6:	2000      	movs	r0, #0
}
 800a4e8:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ec:	b123      	cbz	r3, 800a4f8 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a4ee:	4798      	blx	r3
  return USBD_OK;
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	e7f9      	b.n	800a4e8 <USBD_LL_IsoOUTIncomplete+0x18>
    return USBD_FAIL;
 800a4f4:	2003      	movs	r0, #3
 800a4f6:	e7f7      	b.n	800a4e8 <USBD_LL_IsoOUTIncomplete+0x18>
  return USBD_OK;
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	e7f5      	b.n	800a4e8 <USBD_LL_IsoOUTIncomplete+0x18>

0800a4fc <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	4770      	bx	lr

0800a500 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a500:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a502:	2301      	movs	r3, #1
 800a504:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a508:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a50c:	b123      	cbz	r3, 800a518 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	7901      	ldrb	r1, [r0, #4]
 800a512:	4798      	blx	r3
 800a514:	b910      	cbnz	r0, 800a51c <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800a516:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800a518:	2000      	movs	r0, #0
 800a51a:	e7fc      	b.n	800a516 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 800a51c:	2003      	movs	r0, #3
 800a51e:	e7fa      	b.n	800a516 <USBD_LL_DevDisconnected+0x16>

0800a520 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a520:	2000      	movs	r0, #0
 800a522:	4770      	bx	lr

0800a524 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a524:	2000      	movs	r0, #0
 800a526:	4770      	bx	lr

0800a528 <USBD_LL_DataOutStage>:
{
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	4604      	mov	r4, r0
  if (epnum == 0U)
 800a52c:	460d      	mov	r5, r1
 800a52e:	2900      	cmp	r1, #0
 800a530:	d141      	bne.n	800a5b6 <USBD_LL_DataOutStage+0x8e>
 800a532:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a534:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800a538:	2a03      	cmp	r2, #3
 800a53a:	d001      	beq.n	800a540 <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 800a53c:	4608      	mov	r0, r1
}
 800a53e:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800a540:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 800a544:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 800a548:	4291      	cmp	r1, r2
 800a54a:	d809      	bhi.n	800a560 <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 800a54c:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 800a550:	f003 031f 	and.w	r3, r3, #31
 800a554:	2b01      	cmp	r3, #1
 800a556:	d00e      	beq.n	800a576 <USBD_LL_DataOutStage+0x4e>
 800a558:	2b02      	cmp	r3, #2
 800a55a:	d01a      	beq.n	800a592 <USBD_LL_DataOutStage+0x6a>
 800a55c:	4628      	mov	r0, r5
 800a55e:	e00f      	b.n	800a580 <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 800a560:	1a89      	subs	r1, r1, r2
 800a562:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a566:	428a      	cmp	r2, r1
 800a568:	bf28      	it	cs
 800a56a:	460a      	movcs	r2, r1
 800a56c:	4619      	mov	r1, r3
 800a56e:	f000 fd23 	bl	800afb8 <USBD_CtlContinueRx>
  return USBD_OK;
 800a572:	4628      	mov	r0, r5
 800a574:	e7e3      	b.n	800a53e <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a576:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 800a57a:	f7ff ffd1 	bl	800a520 <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a57e:	b918      	cbnz	r0, 800a588 <USBD_LL_DataOutStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a580:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800a584:	2b03      	cmp	r3, #3
 800a586:	d009      	beq.n	800a59c <USBD_LL_DataOutStage+0x74>
        (void)USBD_CtlSendStatus(pdev);
 800a588:	4620      	mov	r0, r4
 800a58a:	f000 fd1d 	bl	800afc8 <USBD_CtlSendStatus>
  return USBD_OK;
 800a58e:	4628      	mov	r0, r5
 800a590:	e7d5      	b.n	800a53e <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a592:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 800a596:	f7ff ffc5 	bl	800a524 <USBD_CoreFindEP>
            break;
 800a59a:	e7f0      	b.n	800a57e <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a59c:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800a5a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a5a4:	691a      	ldr	r2, [r3, #16]
 800a5a6:	2a00      	cmp	r2, #0
 800a5a8:	d0ee      	beq.n	800a588 <USBD_LL_DataOutStage+0x60>
              pdev->classId = idx;
 800a5aa:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	4798      	blx	r3
 800a5b4:	e7e8      	b.n	800a588 <USBD_LL_DataOutStage+0x60>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a5b6:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800a5ba:	f7ff ffb3 	bl	800a524 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5be:	b988      	cbnz	r0, 800a5e4 <USBD_LL_DataOutStage+0xbc>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5c0:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800a5c4:	2b03      	cmp	r3, #3
 800a5c6:	d1ba      	bne.n	800a53e <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 800a5c8:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800a5cc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a5d0:	699a      	ldr	r2, [r3, #24]
 800a5d2:	2a00      	cmp	r2, #0
 800a5d4:	d0b3      	beq.n	800a53e <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 800a5d6:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	4629      	mov	r1, r5
 800a5de:	4620      	mov	r0, r4
 800a5e0:	4798      	blx	r3
      if (ret != USBD_OK)
 800a5e2:	e7ac      	b.n	800a53e <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 800a5e4:	2000      	movs	r0, #0
 800a5e6:	e7aa      	b.n	800a53e <USBD_LL_DataOutStage+0x16>

0800a5e8 <USBD_LL_DataInStage>:
{
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4604      	mov	r4, r0
  if (epnum == 0U)
 800a5ec:	460d      	mov	r5, r1
 800a5ee:	2900      	cmp	r1, #0
 800a5f0:	d14a      	bne.n	800a688 <USBD_LL_DataInStage+0xa0>
 800a5f2:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a5f4:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800a5f8:	2a02      	cmp	r2, #2
 800a5fa:	d007      	beq.n	800a60c <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 800a5fc:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 800a600:	b118      	cbz	r0, 800a60a <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 800a602:	2300      	movs	r3, #0
 800a604:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 800a608:	4628      	mov	r0, r5
}
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800a60c:	69c2      	ldr	r2, [r0, #28]
 800a60e:	6a01      	ldr	r1, [r0, #32]
 800a610:	428a      	cmp	r2, r1
 800a612:	d80d      	bhi.n	800a630 <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 800a614:	428a      	cmp	r2, r1
 800a616:	d017      	beq.n	800a648 <USBD_LL_DataInStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a618:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800a61c:	2b03      	cmp	r3, #3
 800a61e:	d027      	beq.n	800a670 <USBD_LL_DataInStage+0x88>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a620:	2180      	movs	r1, #128	@ 0x80
 800a622:	4620      	mov	r0, r4
 800a624:	f7ff fe3e 	bl	800a2a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a628:	4620      	mov	r0, r4
 800a62a:	f000 fcd8 	bl	800afde <USBD_CtlReceiveStatus>
 800a62e:	e7e5      	b.n	800a5fc <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800a630:	1a52      	subs	r2, r2, r1
 800a632:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a634:	4619      	mov	r1, r3
 800a636:	f000 fca8 	bl	800af8a <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a63a:	2300      	movs	r3, #0
 800a63c:	461a      	mov	r2, r3
 800a63e:	4619      	mov	r1, r3
 800a640:	4620      	mov	r0, r4
 800a642:	f7ff fe4f 	bl	800a2e4 <USBD_LL_PrepareReceive>
 800a646:	e7d9      	b.n	800a5fc <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800a648:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800a64a:	4299      	cmp	r1, r3
 800a64c:	d8e4      	bhi.n	800a618 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 800a64e:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a652:	4293      	cmp	r3, r2
 800a654:	d2e0      	bcs.n	800a618 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a656:	2200      	movs	r2, #0
 800a658:	4611      	mov	r1, r2
 800a65a:	f000 fc96 	bl	800af8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a65e:	2100      	movs	r1, #0
 800a660:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a664:	460b      	mov	r3, r1
 800a666:	460a      	mov	r2, r1
 800a668:	4620      	mov	r0, r4
 800a66a:	f7ff fe3b 	bl	800a2e4 <USBD_LL_PrepareReceive>
 800a66e:	e7c5      	b.n	800a5fc <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a670:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800a674:	68da      	ldr	r2, [r3, #12]
 800a676:	2a00      	cmp	r2, #0
 800a678:	d0d2      	beq.n	800a620 <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 800a67a:	2200      	movs	r2, #0
 800a67c:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	4620      	mov	r0, r4
 800a684:	4798      	blx	r3
 800a686:	e7cb      	b.n	800a620 <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a688:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800a68c:	f7ff ff4a 	bl	800a524 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a690:	b988      	cbnz	r0, 800a6b6 <USBD_LL_DataInStage+0xce>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a692:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800a696:	2b03      	cmp	r3, #3
 800a698:	d1b7      	bne.n	800a60a <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 800a69a:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800a69e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a6a2:	695a      	ldr	r2, [r3, #20]
 800a6a4:	2a00      	cmp	r2, #0
 800a6a6:	d0b0      	beq.n	800a60a <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 800a6a8:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	4798      	blx	r3
          if (ret != USBD_OK)
 800a6b4:	e7a9      	b.n	800a60a <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 800a6b6:	2000      	movs	r0, #0
 800a6b8:	e7a7      	b.n	800a60a <USBD_LL_DataInStage+0x22>

0800a6ba <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800a6ba:	880b      	ldrh	r3, [r1, #0]
 800a6bc:	7802      	ldrb	r2, [r0, #0]
 800a6be:	4413      	add	r3, r2
 800a6c0:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a6c2:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 800a6c4:	4418      	add	r0, r3
 800a6c6:	4770      	bx	lr

0800a6c8 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 800a6c8:	8842      	ldrh	r2, [r0, #2]
 800a6ca:	7803      	ldrb	r3, [r0, #0]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d918      	bls.n	800a702 <USBD_GetEpDesc+0x3a>
{
 800a6d0:	b530      	push	{r4, r5, lr}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	460d      	mov	r5, r1
    ptr = desc->bLength;
 800a6d8:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 800a6dc:	8863      	ldrh	r3, [r4, #2]
 800a6de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d20a      	bcs.n	800a6fc <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a6e6:	f10d 0106 	add.w	r1, sp, #6
 800a6ea:	f7ff ffe6 	bl	800a6ba <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a6ee:	7843      	ldrb	r3, [r0, #1]
 800a6f0:	2b05      	cmp	r3, #5
 800a6f2:	d1f3      	bne.n	800a6dc <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800a6f4:	7883      	ldrb	r3, [r0, #2]
 800a6f6:	42ab      	cmp	r3, r5
 800a6f8:	d1f0      	bne.n	800a6dc <USBD_GetEpDesc+0x14>
 800a6fa:	e000      	b.n	800a6fe <USBD_GetEpDesc+0x36>
 800a6fc:	2000      	movs	r0, #0
}
 800a6fe:	b003      	add	sp, #12
 800a700:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a702:	2000      	movs	r0, #0
}
 800a704:	4770      	bx	lr

0800a706 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a706:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800a708:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800a70a:	e002      	b.n	800a712 <USBD_GetLen+0xc>
  {
    len++;
 800a70c:	3001      	adds	r0, #1
 800a70e:	b2c0      	uxtb	r0, r0
    pbuff++;
 800a710:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800a712:	781a      	ldrb	r2, [r3, #0]
 800a714:	2a00      	cmp	r2, #0
 800a716:	d1f9      	bne.n	800a70c <USBD_GetLen+0x6>
  }

  return len;
}
 800a718:	4770      	bx	lr

0800a71a <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800a71a:	780b      	ldrb	r3, [r1, #0]
 800a71c:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800a71e:	784b      	ldrb	r3, [r1, #1]
 800a720:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800a722:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800a724:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a726:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800a72a:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800a72c:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800a72e:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a730:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800a734:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800a736:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800a738:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a73a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800a73e:	80c3      	strh	r3, [r0, #6]
}
 800a740:	4770      	bx	lr

0800a742 <USBD_CtlError>:
{
 800a742:	b510      	push	{r4, lr}
 800a744:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a746:	2180      	movs	r1, #128	@ 0x80
 800a748:	f7ff fdac 	bl	800a2a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a74c:	2100      	movs	r1, #0
 800a74e:	4620      	mov	r0, r4
 800a750:	f7ff fda8 	bl	800a2a4 <USBD_LL_StallEP>
}
 800a754:	bd10      	pop	{r4, pc}

0800a756 <USBD_GetDescriptor>:
{
 800a756:	b530      	push	{r4, r5, lr}
 800a758:	b083      	sub	sp, #12
 800a75a:	4604      	mov	r4, r0
 800a75c:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800a75e:	2300      	movs	r3, #0
 800a760:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800a764:	884a      	ldrh	r2, [r1, #2]
 800a766:	0a13      	lsrs	r3, r2, #8
 800a768:	3b01      	subs	r3, #1
 800a76a:	2b06      	cmp	r3, #6
 800a76c:	f200 80aa 	bhi.w	800a8c4 <USBD_GetDescriptor+0x16e>
 800a770:	e8df f003 	tbb	[pc, r3]
 800a774:	a8321e04 	.word	0xa8321e04
 800a778:	8ca8      	.short	0x8ca8
 800a77a:	99          	.byte	0x99
 800a77b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a77c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f10d 0106 	add.w	r1, sp, #6
 800a786:	7c00      	ldrb	r0, [r0, #16]
 800a788:	4798      	blx	r3
  if (req->wLength != 0U)
 800a78a:	88ea      	ldrh	r2, [r5, #6]
 800a78c:	2a00      	cmp	r2, #0
 800a78e:	f000 80a3 	beq.w	800a8d8 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 800a792:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a796:	2b00      	cmp	r3, #0
 800a798:	f000 8099 	beq.w	800a8ce <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 800a79c:	429a      	cmp	r2, r3
 800a79e:	bf28      	it	cs
 800a7a0:	461a      	movcs	r2, r3
 800a7a2:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a7a6:	4601      	mov	r1, r0
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f000 fbe1 	bl	800af70 <USBD_CtlSendData>
 800a7ae:	e08c      	b.n	800a8ca <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7b0:	7c03      	ldrb	r3, [r0, #16]
 800a7b2:	b943      	cbnz	r3, 800a7c6 <USBD_GetDescriptor+0x70>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a7b4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a7b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ba:	f10d 0006 	add.w	r0, sp, #6
 800a7be:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a7c4:	e7e1      	b.n	800a78a <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a7c6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a7ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7cc:	f10d 0006 	add.w	r0, sp, #6
 800a7d0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7d2:	2302      	movs	r3, #2
 800a7d4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a7d6:	e7d8      	b.n	800a78a <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800a7d8:	b2d2      	uxtb	r2, r2
 800a7da:	2a05      	cmp	r2, #5
 800a7dc:	d852      	bhi.n	800a884 <USBD_GetDescriptor+0x12e>
 800a7de:	e8df f002 	tbb	[pc, r2]
 800a7e2:	1003      	.short	0x1003
 800a7e4:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a7e8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	b123      	cbz	r3, 800a7fa <USBD_GetDescriptor+0xa4>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a7f0:	f10d 0106 	add.w	r1, sp, #6
 800a7f4:	7c00      	ldrb	r0, [r0, #16]
 800a7f6:	4798      	blx	r3
  if (err != 0U)
 800a7f8:	e7c7      	b.n	800a78a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	f7ff ffa1 	bl	800a742 <USBD_CtlError>
  if (err != 0U)
 800a800:	e063      	b.n	800a8ca <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a802:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	b123      	cbz	r3, 800a814 <USBD_GetDescriptor+0xbe>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a80a:	f10d 0106 	add.w	r1, sp, #6
 800a80e:	7c00      	ldrb	r0, [r0, #16]
 800a810:	4798      	blx	r3
  if (err != 0U)
 800a812:	e7ba      	b.n	800a78a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a814:	4629      	mov	r1, r5
 800a816:	f7ff ff94 	bl	800a742 <USBD_CtlError>
  if (err != 0U)
 800a81a:	e056      	b.n	800a8ca <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a81c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	b123      	cbz	r3, 800a82e <USBD_GetDescriptor+0xd8>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a824:	f10d 0106 	add.w	r1, sp, #6
 800a828:	7c00      	ldrb	r0, [r0, #16]
 800a82a:	4798      	blx	r3
  if (err != 0U)
 800a82c:	e7ad      	b.n	800a78a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a82e:	4629      	mov	r1, r5
 800a830:	f7ff ff87 	bl	800a742 <USBD_CtlError>
  if (err != 0U)
 800a834:	e049      	b.n	800a8ca <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a836:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	b123      	cbz	r3, 800a848 <USBD_GetDescriptor+0xf2>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a83e:	f10d 0106 	add.w	r1, sp, #6
 800a842:	7c00      	ldrb	r0, [r0, #16]
 800a844:	4798      	blx	r3
  if (err != 0U)
 800a846:	e7a0      	b.n	800a78a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a848:	4629      	mov	r1, r5
 800a84a:	f7ff ff7a 	bl	800a742 <USBD_CtlError>
  if (err != 0U)
 800a84e:	e03c      	b.n	800a8ca <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a850:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	b123      	cbz	r3, 800a862 <USBD_GetDescriptor+0x10c>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a858:	f10d 0106 	add.w	r1, sp, #6
 800a85c:	7c00      	ldrb	r0, [r0, #16]
 800a85e:	4798      	blx	r3
  if (err != 0U)
 800a860:	e793      	b.n	800a78a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a862:	4629      	mov	r1, r5
 800a864:	f7ff ff6d 	bl	800a742 <USBD_CtlError>
  if (err != 0U)
 800a868:	e02f      	b.n	800a8ca <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a86a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	b123      	cbz	r3, 800a87c <USBD_GetDescriptor+0x126>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a872:	f10d 0106 	add.w	r1, sp, #6
 800a876:	7c00      	ldrb	r0, [r0, #16]
 800a878:	4798      	blx	r3
  if (err != 0U)
 800a87a:	e786      	b.n	800a78a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a87c:	4629      	mov	r1, r5
 800a87e:	f7ff ff60 	bl	800a742 <USBD_CtlError>
  if (err != 0U)
 800a882:	e022      	b.n	800a8ca <USBD_GetDescriptor+0x174>
          USBD_CtlError(pdev, req);
 800a884:	4629      	mov	r1, r5
 800a886:	f7ff ff5c 	bl	800a742 <USBD_CtlError>
  if (err != 0U)
 800a88a:	e01e      	b.n	800a8ca <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a88c:	7c03      	ldrb	r3, [r0, #16]
 800a88e:	b933      	cbnz	r3, 800a89e <USBD_GetDescriptor+0x148>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a890:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a896:	f10d 0006 	add.w	r0, sp, #6
 800a89a:	4798      	blx	r3
  if (err != 0U)
 800a89c:	e775      	b.n	800a78a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800a89e:	4629      	mov	r1, r5
 800a8a0:	f7ff ff4f 	bl	800a742 <USBD_CtlError>
  if (err != 0U)
 800a8a4:	e011      	b.n	800a8ca <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8a6:	7c03      	ldrb	r3, [r0, #16]
 800a8a8:	b943      	cbnz	r3, 800a8bc <USBD_GetDescriptor+0x166>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a8aa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a8ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8b0:	f10d 0006 	add.w	r0, sp, #6
 800a8b4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8b6:	2307      	movs	r3, #7
 800a8b8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a8ba:	e766      	b.n	800a78a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800a8bc:	4629      	mov	r1, r5
 800a8be:	f7ff ff40 	bl	800a742 <USBD_CtlError>
  if (err != 0U)
 800a8c2:	e002      	b.n	800a8ca <USBD_GetDescriptor+0x174>
      USBD_CtlError(pdev, req);
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	f7ff ff3c 	bl	800a742 <USBD_CtlError>
}
 800a8ca:	b003      	add	sp, #12
 800a8cc:	bd30      	pop	{r4, r5, pc}
      USBD_CtlError(pdev, req);
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f7ff ff36 	bl	800a742 <USBD_CtlError>
 800a8d6:	e7f8      	b.n	800a8ca <USBD_GetDescriptor+0x174>
    (void)USBD_CtlSendStatus(pdev);
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f000 fb75 	bl	800afc8 <USBD_CtlSendStatus>
 800a8de:	e7f4      	b.n	800a8ca <USBD_GetDescriptor+0x174>

0800a8e0 <USBD_SetAddress>:
{
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a8e4:	888b      	ldrh	r3, [r1, #4]
 800a8e6:	b9f3      	cbnz	r3, 800a926 <USBD_SetAddress+0x46>
 800a8e8:	88cb      	ldrh	r3, [r1, #6]
 800a8ea:	b9e3      	cbnz	r3, 800a926 <USBD_SetAddress+0x46>
 800a8ec:	884b      	ldrh	r3, [r1, #2]
 800a8ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800a8f0:	d819      	bhi.n	800a926 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a8f2:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d00c      	beq.n	800a918 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 800a8fe:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a902:	4629      	mov	r1, r5
 800a904:	f7ff fcde 	bl	800a2c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 fb5d 	bl	800afc8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800a90e:	b135      	cbz	r5, 800a91e <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a910:	2302      	movs	r3, #2
 800a912:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a916:	e009      	b.n	800a92c <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 800a918:	f7ff ff13 	bl	800a742 <USBD_CtlError>
 800a91c:	e006      	b.n	800a92c <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a91e:	2301      	movs	r3, #1
 800a920:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a924:	e002      	b.n	800a92c <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 800a926:	4620      	mov	r0, r4
 800a928:	f7ff ff0b 	bl	800a742 <USBD_CtlError>
}
 800a92c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a930 <USBD_SetConfig>:
{
 800a930:	b570      	push	{r4, r5, r6, lr}
 800a932:	4604      	mov	r4, r0
 800a934:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800a936:	788d      	ldrb	r5, [r1, #2]
 800a938:	4b2f      	ldr	r3, [pc, #188]	@ (800a9f8 <USBD_SetConfig+0xc8>)
 800a93a:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a93c:	2d01      	cmp	r5, #1
 800a93e:	d810      	bhi.n	800a962 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800a940:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a944:	b2da      	uxtb	r2, r3
 800a946:	2b02      	cmp	r3, #2
 800a948:	d00f      	beq.n	800a96a <USBD_SetConfig+0x3a>
 800a94a:	2a03      	cmp	r2, #3
 800a94c:	d026      	beq.n	800a99c <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 800a94e:	f7ff fef8 	bl	800a742 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a952:	4b29      	ldr	r3, [pc, #164]	@ (800a9f8 <USBD_SetConfig+0xc8>)
 800a954:	7819      	ldrb	r1, [r3, #0]
 800a956:	4620      	mov	r0, r4
 800a958:	f7ff fd10 	bl	800a37c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a95c:	2503      	movs	r5, #3
}
 800a95e:	4628      	mov	r0, r5
 800a960:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800a962:	f7ff feee 	bl	800a742 <USBD_CtlError>
    return USBD_FAIL;
 800a966:	2503      	movs	r5, #3
 800a968:	e7f9      	b.n	800a95e <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800a96a:	b1a5      	cbz	r5, 800a996 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 800a96c:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a96e:	4629      	mov	r1, r5
 800a970:	f7ff fcfb 	bl	800a36a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a974:	4605      	mov	r5, r0
 800a976:	b138      	cbz	r0, 800a988 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 800a978:	4631      	mov	r1, r6
 800a97a:	4620      	mov	r0, r4
 800a97c:	f7ff fee1 	bl	800a742 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a980:	2302      	movs	r3, #2
 800a982:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a986:	e7ea      	b.n	800a95e <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 fb1d 	bl	800afc8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a98e:	2303      	movs	r3, #3
 800a990:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a994:	e7e3      	b.n	800a95e <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a996:	f000 fb17 	bl	800afc8 <USBD_CtlSendStatus>
 800a99a:	e7e0      	b.n	800a95e <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800a99c:	b1cd      	cbz	r5, 800a9d2 <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 800a99e:	6841      	ldr	r1, [r0, #4]
 800a9a0:	428d      	cmp	r5, r1
 800a9a2:	d025      	beq.n	800a9f0 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a9a4:	b2c9      	uxtb	r1, r1
 800a9a6:	f7ff fce9 	bl	800a37c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a9aa:	4b13      	ldr	r3, [pc, #76]	@ (800a9f8 <USBD_SetConfig+0xc8>)
 800a9ac:	7819      	ldrb	r1, [r3, #0]
 800a9ae:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f7ff fcda 	bl	800a36a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	b1b0      	cbz	r0, 800a9e8 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 800a9ba:	4631      	mov	r1, r6
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f7ff fec0 	bl	800a742 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a9c2:	7921      	ldrb	r1, [r4, #4]
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f7ff fcd9 	bl	800a37c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a9d0:	e7c5      	b.n	800a95e <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a9d8:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a9da:	4629      	mov	r1, r5
 800a9dc:	f7ff fcce 	bl	800a37c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f000 faf1 	bl	800afc8 <USBD_CtlSendStatus>
 800a9e6:	e7ba      	b.n	800a95e <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 faed 	bl	800afc8 <USBD_CtlSendStatus>
 800a9ee:	e7b6      	b.n	800a95e <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a9f0:	f000 faea 	bl	800afc8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a9f4:	2500      	movs	r5, #0
 800a9f6:	e7b2      	b.n	800a95e <USBD_SetConfig+0x2e>
 800a9f8:	20008048 	.word	0x20008048

0800a9fc <USBD_GetConfig>:
{
 800a9fc:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800a9fe:	88cb      	ldrh	r3, [r1, #6]
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d10b      	bne.n	800aa1c <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800aa04:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800aa08:	b2da      	uxtb	r2, r3
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d909      	bls.n	800aa22 <USBD_GetConfig+0x26>
 800aa0e:	2a03      	cmp	r2, #3
 800aa10:	d111      	bne.n	800aa36 <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aa12:	2201      	movs	r2, #1
 800aa14:	1d01      	adds	r1, r0, #4
 800aa16:	f000 faab 	bl	800af70 <USBD_CtlSendData>
        break;
 800aa1a:	e001      	b.n	800aa20 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800aa1c:	f7ff fe91 	bl	800a742 <USBD_CtlError>
}
 800aa20:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800aa22:	b252      	sxtb	r2, r2
 800aa24:	b13a      	cbz	r2, 800aa36 <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 800aa26:	4601      	mov	r1, r0
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f000 fa9e 	bl	800af70 <USBD_CtlSendData>
        break;
 800aa34:	e7f4      	b.n	800aa20 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 800aa36:	f7ff fe84 	bl	800a742 <USBD_CtlError>
}
 800aa3a:	e7f1      	b.n	800aa20 <USBD_GetConfig+0x24>

0800aa3c <USBD_GetStatus>:
{
 800aa3c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800aa3e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800aa42:	3b01      	subs	r3, #1
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d812      	bhi.n	800aa6e <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800aa48:	88cb      	ldrh	r3, [r1, #6]
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d10c      	bne.n	800aa68 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800aa52:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800aa56:	b10b      	cbz	r3, 800aa5c <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aa5c:	2202      	movs	r2, #2
 800aa5e:	f100 010c 	add.w	r1, r0, #12
 800aa62:	f000 fa85 	bl	800af70 <USBD_CtlSendData>
}
 800aa66:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800aa68:	f7ff fe6b 	bl	800a742 <USBD_CtlError>
        break;
 800aa6c:	e7fb      	b.n	800aa66 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800aa6e:	f7ff fe68 	bl	800a742 <USBD_CtlError>
}
 800aa72:	e7f8      	b.n	800aa66 <USBD_GetStatus+0x2a>

0800aa74 <USBD_SetFeature>:
{
 800aa74:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa76:	884b      	ldrh	r3, [r1, #2]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d004      	beq.n	800aa86 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d007      	beq.n	800aa90 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 800aa80:	f7ff fe5f 	bl	800a742 <USBD_CtlError>
}
 800aa84:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800aa86:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aa8a:	f000 fa9d 	bl	800afc8 <USBD_CtlSendStatus>
 800aa8e:	e7f9      	b.n	800aa84 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800aa90:	888b      	ldrh	r3, [r1, #4]
 800aa92:	0a1b      	lsrs	r3, r3, #8
 800aa94:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aa98:	f000 fa96 	bl	800afc8 <USBD_CtlSendStatus>
 800aa9c:	e7f2      	b.n	800aa84 <USBD_SetFeature+0x10>

0800aa9e <USBD_ClrFeature>:
{
 800aa9e:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800aaa0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d809      	bhi.n	800aabe <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aaaa:	884b      	ldrh	r3, [r1, #2]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d000      	beq.n	800aab2 <USBD_ClrFeature+0x14>
}
 800aab0:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800aab2:	2300      	movs	r3, #0
 800aab4:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aab8:	f000 fa86 	bl	800afc8 <USBD_CtlSendStatus>
 800aabc:	e7f8      	b.n	800aab0 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800aabe:	f7ff fe40 	bl	800a742 <USBD_CtlError>
}
 800aac2:	e7f5      	b.n	800aab0 <USBD_ClrFeature+0x12>

0800aac4 <USBD_StdDevReq>:
{
 800aac4:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aac6:	780c      	ldrb	r4, [r1, #0]
 800aac8:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800aacc:	2c20      	cmp	r4, #32
 800aace:	d006      	beq.n	800aade <USBD_StdDevReq+0x1a>
 800aad0:	2c40      	cmp	r4, #64	@ 0x40
 800aad2:	d004      	beq.n	800aade <USBD_StdDevReq+0x1a>
 800aad4:	b16c      	cbz	r4, 800aaf2 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 800aad6:	f7ff fe34 	bl	800a742 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800aada:	2400      	movs	r4, #0
      break;
 800aadc:	e007      	b.n	800aaee <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aade:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800aae2:	33ae      	adds	r3, #174	@ 0xae
 800aae4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	4798      	blx	r3
 800aaec:	4604      	mov	r4, r0
}
 800aaee:	4620      	mov	r0, r4
 800aaf0:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800aaf2:	784d      	ldrb	r5, [r1, #1]
 800aaf4:	2d09      	cmp	r5, #9
 800aaf6:	d81d      	bhi.n	800ab34 <USBD_StdDevReq+0x70>
 800aaf8:	e8df f005 	tbb	[pc, r5]
 800aafc:	161c1912 	.word	0x161c1912
 800ab00:	1c05081c 	.word	0x1c05081c
 800ab04:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800ab06:	f7ff fe26 	bl	800a756 <USBD_GetDescriptor>
          break;
 800ab0a:	e7f0      	b.n	800aaee <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 800ab0c:	f7ff fee8 	bl	800a8e0 <USBD_SetAddress>
          break;
 800ab10:	e7ed      	b.n	800aaee <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 800ab12:	f7ff ff0d 	bl	800a930 <USBD_SetConfig>
 800ab16:	4604      	mov	r4, r0
          break;
 800ab18:	e7e9      	b.n	800aaee <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 800ab1a:	f7ff ff6f 	bl	800a9fc <USBD_GetConfig>
          break;
 800ab1e:	e7e6      	b.n	800aaee <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 800ab20:	f7ff ff8c 	bl	800aa3c <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab24:	462c      	mov	r4, r5
          break;
 800ab26:	e7e2      	b.n	800aaee <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 800ab28:	f7ff ffa4 	bl	800aa74 <USBD_SetFeature>
          break;
 800ab2c:	e7df      	b.n	800aaee <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 800ab2e:	f7ff ffb6 	bl	800aa9e <USBD_ClrFeature>
          break;
 800ab32:	e7dc      	b.n	800aaee <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 800ab34:	f7ff fe05 	bl	800a742 <USBD_CtlError>
          break;
 800ab38:	e7d9      	b.n	800aaee <USBD_StdDevReq+0x2a>

0800ab3a <USBD_StdItfReq>:
{
 800ab3a:	b570      	push	{r4, r5, r6, lr}
 800ab3c:	4605      	mov	r5, r0
 800ab3e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab40:	780b      	ldrb	r3, [r1, #0]
 800ab42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab46:	2b20      	cmp	r3, #32
 800ab48:	d007      	beq.n	800ab5a <USBD_StdItfReq+0x20>
 800ab4a:	2b40      	cmp	r3, #64	@ 0x40
 800ab4c:	d005      	beq.n	800ab5a <USBD_StdItfReq+0x20>
 800ab4e:	b123      	cbz	r3, 800ab5a <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800ab50:	f7ff fdf7 	bl	800a742 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab54:	2600      	movs	r6, #0
}
 800ab56:	4630      	mov	r0, r6
 800ab58:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800ab5a:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d826      	bhi.n	800abb2 <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab64:	7921      	ldrb	r1, [r4, #4]
 800ab66:	2901      	cmp	r1, #1
 800ab68:	d905      	bls.n	800ab76 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	f7ff fde8 	bl	800a742 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab72:	2600      	movs	r6, #0
 800ab74:	e7ef      	b.n	800ab56 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ab76:	4628      	mov	r0, r5
 800ab78:	f7ff fcd2 	bl	800a520 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab7c:	b968      	cbnz	r0, 800ab9a <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 800ab7e:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 800ab82:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800ab86:	6891      	ldr	r1, [r2, #8]
 800ab88:	b189      	cbz	r1, 800abae <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 800ab8a:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab8e:	6893      	ldr	r3, [r2, #8]
 800ab90:	4621      	mov	r1, r4
 800ab92:	4628      	mov	r0, r5
 800ab94:	4798      	blx	r3
 800ab96:	4606      	mov	r6, r0
 800ab98:	e000      	b.n	800ab9c <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 800ab9a:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab9c:	88e3      	ldrh	r3, [r4, #6]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1d9      	bne.n	800ab56 <USBD_StdItfReq+0x1c>
 800aba2:	2e00      	cmp	r6, #0
 800aba4:	d1d7      	bne.n	800ab56 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800aba6:	4628      	mov	r0, r5
 800aba8:	f000 fa0e 	bl	800afc8 <USBD_CtlSendStatus>
 800abac:	e7d3      	b.n	800ab56 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 800abae:	2603      	movs	r6, #3
 800abb0:	e7f4      	b.n	800ab9c <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 800abb2:	4621      	mov	r1, r4
 800abb4:	4628      	mov	r0, r5
 800abb6:	f7ff fdc4 	bl	800a742 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800abba:	2600      	movs	r6, #0
          break;
 800abbc:	e7cb      	b.n	800ab56 <USBD_StdItfReq+0x1c>

0800abbe <USBD_StdEPReq>:
{
 800abbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc2:	4606      	mov	r6, r0
 800abc4:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800abc6:	888b      	ldrh	r3, [r1, #4]
 800abc8:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abca:	780c      	ldrb	r4, [r1, #0]
 800abcc:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800abd0:	2c20      	cmp	r4, #32
 800abd2:	d008      	beq.n	800abe6 <USBD_StdEPReq+0x28>
 800abd4:	2c40      	cmp	r4, #64	@ 0x40
 800abd6:	d006      	beq.n	800abe6 <USBD_StdEPReq+0x28>
 800abd8:	b1dc      	cbz	r4, 800ac12 <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 800abda:	f7ff fdb2 	bl	800a742 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800abde:	2400      	movs	r4, #0
}
 800abe0:	4620      	mov	r0, r4
 800abe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800abe6:	4639      	mov	r1, r7
 800abe8:	4630      	mov	r0, r6
 800abea:	f7ff fc9b 	bl	800a524 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abee:	4604      	mov	r4, r0
 800abf0:	2800      	cmp	r0, #0
 800abf2:	f040 80fc 	bne.w	800adee <USBD_StdEPReq+0x230>
        pdev->classId = idx;
 800abf6:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 800abfa:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800abfe:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d0eb      	beq.n	800abe0 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ac08:	4629      	mov	r1, r5
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	4798      	blx	r3
 800ac0e:	4604      	mov	r4, r0
 800ac10:	e7e6      	b.n	800abe0 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800ac12:	f891 8001 	ldrb.w	r8, [r1, #1]
 800ac16:	f1b8 0f01 	cmp.w	r8, #1
 800ac1a:	d031      	beq.n	800ac80 <USBD_StdEPReq+0xc2>
 800ac1c:	f1b8 0f03 	cmp.w	r8, #3
 800ac20:	d005      	beq.n	800ac2e <USBD_StdEPReq+0x70>
 800ac22:	f1b8 0f00 	cmp.w	r8, #0
 800ac26:	d067      	beq.n	800acf8 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 800ac28:	f7ff fd8b 	bl	800a742 <USBD_CtlError>
          break;
 800ac2c:	e7d8      	b.n	800abe0 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800ac2e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d004      	beq.n	800ac42 <USBD_StdEPReq+0x84>
 800ac38:	2a03      	cmp	r2, #3
 800ac3a:	d012      	beq.n	800ac62 <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 800ac3c:	f7ff fd81 	bl	800a742 <USBD_CtlError>
              break;
 800ac40:	e7ce      	b.n	800abe0 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac42:	b10f      	cbz	r7, 800ac48 <USBD_StdEPReq+0x8a>
 800ac44:	2f80      	cmp	r7, #128	@ 0x80
 800ac46:	d104      	bne.n	800ac52 <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 800ac48:	4629      	mov	r1, r5
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f7ff fd79 	bl	800a742 <USBD_CtlError>
 800ac50:	e7c6      	b.n	800abe0 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac52:	4639      	mov	r1, r7
 800ac54:	f7ff fb26 	bl	800a2a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac58:	2180      	movs	r1, #128	@ 0x80
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f7ff fb22 	bl	800a2a4 <USBD_LL_StallEP>
 800ac60:	e7be      	b.n	800abe0 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac62:	884b      	ldrh	r3, [r1, #2]
 800ac64:	b923      	cbnz	r3, 800ac70 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac66:	b11f      	cbz	r7, 800ac70 <USBD_StdEPReq+0xb2>
 800ac68:	2f80      	cmp	r7, #128	@ 0x80
 800ac6a:	d001      	beq.n	800ac70 <USBD_StdEPReq+0xb2>
 800ac6c:	88cb      	ldrh	r3, [r1, #6]
 800ac6e:	b11b      	cbz	r3, 800ac78 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 800ac70:	4630      	mov	r0, r6
 800ac72:	f000 f9a9 	bl	800afc8 <USBD_CtlSendStatus>
              break;
 800ac76:	e7b3      	b.n	800abe0 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac78:	4639      	mov	r1, r7
 800ac7a:	f7ff fb13 	bl	800a2a4 <USBD_LL_StallEP>
 800ac7e:	e7f7      	b.n	800ac70 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 800ac80:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d004      	beq.n	800ac94 <USBD_StdEPReq+0xd6>
 800ac8a:	2a03      	cmp	r2, #3
 800ac8c:	d012      	beq.n	800acb4 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 800ac8e:	f7ff fd58 	bl	800a742 <USBD_CtlError>
              break;
 800ac92:	e7a5      	b.n	800abe0 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac94:	b10f      	cbz	r7, 800ac9a <USBD_StdEPReq+0xdc>
 800ac96:	2f80      	cmp	r7, #128	@ 0x80
 800ac98:	d104      	bne.n	800aca4 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f7ff fd50 	bl	800a742 <USBD_CtlError>
 800aca2:	e79d      	b.n	800abe0 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aca4:	4639      	mov	r1, r7
 800aca6:	f7ff fafd 	bl	800a2a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800acaa:	2180      	movs	r1, #128	@ 0x80
 800acac:	4630      	mov	r0, r6
 800acae:	f7ff faf9 	bl	800a2a4 <USBD_LL_StallEP>
 800acb2:	e795      	b.n	800abe0 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acb4:	884b      	ldrh	r3, [r1, #2]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d192      	bne.n	800abe0 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 800acba:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800acbe:	d117      	bne.n	800acf0 <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 800acc0:	4630      	mov	r0, r6
 800acc2:	f000 f981 	bl	800afc8 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800acc6:	4639      	mov	r1, r7
 800acc8:	4630      	mov	r0, r6
 800acca:	f7ff fc2b 	bl	800a524 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acce:	2800      	cmp	r0, #0
 800acd0:	d186      	bne.n	800abe0 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 800acd2:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800acd6:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 800acda:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800acde:	6892      	ldr	r2, [r2, #8]
 800ace0:	2a00      	cmp	r2, #0
 800ace2:	f000 8086 	beq.w	800adf2 <USBD_StdEPReq+0x234>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ace6:	4629      	mov	r1, r5
 800ace8:	4630      	mov	r0, r6
 800acea:	4790      	blx	r2
 800acec:	4604      	mov	r4, r0
 800acee:	e777      	b.n	800abe0 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800acf0:	4639      	mov	r1, r7
 800acf2:	f7ff fadf 	bl	800a2b4 <USBD_LL_ClearStallEP>
 800acf6:	e7e3      	b.n	800acc0 <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 800acf8:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800acfc:	b2d1      	uxtb	r1, r2
 800acfe:	2a02      	cmp	r2, #2
 800ad00:	d006      	beq.n	800ad10 <USBD_StdEPReq+0x152>
 800ad02:	2903      	cmp	r1, #3
 800ad04:	d029      	beq.n	800ad5a <USBD_StdEPReq+0x19c>
              USBD_CtlError(pdev, req);
 800ad06:	4629      	mov	r1, r5
 800ad08:	f7ff fd1b 	bl	800a742 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ad0c:	4644      	mov	r4, r8
              break;
 800ad0e:	e767      	b.n	800abe0 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad10:	b10f      	cbz	r7, 800ad16 <USBD_StdEPReq+0x158>
 800ad12:	2f80      	cmp	r7, #128	@ 0x80
 800ad14:	d113      	bne.n	800ad3e <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad16:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad1a:	d115      	bne.n	800ad48 <USBD_StdEPReq+0x18a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad1c:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad20:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800ad24:	00b9      	lsls	r1, r7, #2
 800ad26:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 800ad2a:	4431      	add	r1, r6
 800ad2c:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad32:	2202      	movs	r2, #2
 800ad34:	4630      	mov	r0, r6
 800ad36:	f000 f91b 	bl	800af70 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800ad3a:	4644      	mov	r4, r8
              break;
 800ad3c:	e750      	b.n	800abe0 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800ad3e:	4629      	mov	r1, r5
 800ad40:	f7ff fcff 	bl	800a742 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ad44:	4644      	mov	r4, r8
                break;
 800ad46:	e74b      	b.n	800abe0 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad48:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 800ad4c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800ad50:	00b9      	lsls	r1, r7, #2
 800ad52:	3110      	adds	r1, #16
 800ad54:	4431      	add	r1, r6
 800ad56:	3104      	adds	r1, #4
 800ad58:	e7e9      	b.n	800ad2e <USBD_StdEPReq+0x170>
              if ((ep_addr & 0x80U) == 0x80U)
 800ad5a:	b25b      	sxtb	r3, r3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	db1f      	blt.n	800ada0 <USBD_StdEPReq+0x1e2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ad60:	f007 020f 	and.w	r2, r7, #15
 800ad64:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ad68:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ad6c:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 800ad70:	b322      	cbz	r2, 800adbc <USBD_StdEPReq+0x1fe>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	db27      	blt.n	800adc6 <USBD_StdEPReq+0x208>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad76:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ad7e:	009c      	lsls	r4, r3, #2
 800ad80:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 800ad84:	4434      	add	r4, r6
 800ad86:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad88:	b10f      	cbz	r7, 800ad8e <USBD_StdEPReq+0x1d0>
 800ad8a:	2f80      	cmp	r7, #128	@ 0x80
 800ad8c:	d124      	bne.n	800add8 <USBD_StdEPReq+0x21a>
                pep->status = 0x0000U;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad92:	2202      	movs	r2, #2
 800ad94:	4621      	mov	r1, r4
 800ad96:	4630      	mov	r0, r6
 800ad98:	f000 f8ea 	bl	800af70 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800ad9c:	4644      	mov	r4, r8
              break;
 800ad9e:	e71f      	b.n	800abe0 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ada0:	f007 020f 	and.w	r2, r7, #15
 800ada4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ada8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800adac:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800adae:	2a00      	cmp	r2, #0
 800adb0:	d1df      	bne.n	800ad72 <USBD_StdEPReq+0x1b4>
                  USBD_CtlError(pdev, req);
 800adb2:	4629      	mov	r1, r5
 800adb4:	f7ff fcc5 	bl	800a742 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800adb8:	4644      	mov	r4, r8
                  break;
 800adba:	e711      	b.n	800abe0 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 800adbc:	4629      	mov	r1, r5
 800adbe:	f7ff fcc0 	bl	800a742 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800adc2:	4644      	mov	r4, r8
                  break;
 800adc4:	e70c      	b.n	800abe0 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adc6:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 800adca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800adce:	009c      	lsls	r4, r3, #2
 800add0:	3410      	adds	r4, #16
 800add2:	4434      	add	r4, r6
 800add4:	3404      	adds	r4, #4
 800add6:	e7d7      	b.n	800ad88 <USBD_StdEPReq+0x1ca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800add8:	4639      	mov	r1, r7
 800adda:	4630      	mov	r0, r6
 800addc:	f7ff fa1c 	bl	800a218 <USBD_LL_IsStallEP>
 800ade0:	b110      	cbz	r0, 800ade8 <USBD_StdEPReq+0x22a>
                pep->status = 0x0001U;
 800ade2:	2301      	movs	r3, #1
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	e7d4      	b.n	800ad92 <USBD_StdEPReq+0x1d4>
                pep->status = 0x0000U;
 800ade8:	2300      	movs	r3, #0
 800adea:	6023      	str	r3, [r4, #0]
 800adec:	e7d1      	b.n	800ad92 <USBD_StdEPReq+0x1d4>
  USBD_StatusTypeDef ret = USBD_OK;
 800adee:	2400      	movs	r4, #0
 800adf0:	e6f6      	b.n	800abe0 <USBD_StdEPReq+0x22>
 800adf2:	4604      	mov	r4, r0
 800adf4:	e6f4      	b.n	800abe0 <USBD_StdEPReq+0x22>

0800adf6 <USBD_GetString>:
  if (desc == NULL)
 800adf6:	b300      	cbz	r0, 800ae3a <USBD_GetString+0x44>
{
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	460d      	mov	r5, r1
 800adfc:	4616      	mov	r6, r2
 800adfe:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ae00:	f7ff fc81 	bl	800a706 <USBD_GetLen>
 800ae04:	3001      	adds	r0, #1
 800ae06:	0043      	lsls	r3, r0, #1
 800ae08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae0c:	d806      	bhi.n	800ae1c <USBD_GetString+0x26>
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800ae12:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ae14:	2303      	movs	r3, #3
 800ae16:	706b      	strb	r3, [r5, #1]
  idx++;
 800ae18:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800ae1a:	e00a      	b.n	800ae32 <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ae1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae20:	e7f6      	b.n	800ae10 <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 800ae22:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800ae24:	3401      	adds	r4, #1
    idx++;
 800ae26:	1c5a      	adds	r2, r3, #1
 800ae28:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	54a9      	strb	r1, [r5, r2]
    idx++;
 800ae2e:	3302      	adds	r3, #2
 800ae30:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800ae32:	7822      	ldrb	r2, [r4, #0]
 800ae34:	2a00      	cmp	r2, #0
 800ae36:	d1f4      	bne.n	800ae22 <USBD_GetString+0x2c>
}
 800ae38:	bd70      	pop	{r4, r5, r6, pc}
 800ae3a:	4770      	bx	lr

0800ae3c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ae3c:	2312      	movs	r3, #18
 800ae3e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800ae40:	4800      	ldr	r0, [pc, #0]	@ (800ae44 <USBD_FS_DeviceDescriptor+0x8>)
 800ae42:	4770      	bx	lr
 800ae44:	20000130 	.word	0x20000130

0800ae48 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ae48:	2304      	movs	r3, #4
 800ae4a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800ae4c:	4800      	ldr	r0, [pc, #0]	@ (800ae50 <USBD_FS_LangIDStrDescriptor+0x8>)
 800ae4e:	4770      	bx	lr
 800ae50:	2000012c 	.word	0x2000012c

0800ae54 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800ae54:	2300      	movs	r3, #0
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d21e      	bcs.n	800ae98 <IntToUnicode+0x44>
{
 800ae5a:	b500      	push	{lr}
 800ae5c:	e010      	b.n	800ae80 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ae5e:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 800ae62:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800ae66:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800ae68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ae6c:	f10c 0c01 	add.w	ip, ip, #1
 800ae70:	f04f 0e00 	mov.w	lr, #0
 800ae74:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 800ae78:	3301      	adds	r3, #1
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d209      	bcs.n	800ae94 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800ae80:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800ae84:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 800ae88:	d2e9      	bcs.n	800ae5e <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800ae8a:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 800ae8e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800ae92:	e7e8      	b.n	800ae66 <IntToUnicode+0x12>
  }
}
 800ae94:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae98:	4770      	bx	lr
	...

0800ae9c <Get_SerialNum>:
{
 800ae9c:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ae9e:	4b0b      	ldr	r3, [pc, #44]	@ (800aecc <Get_SerialNum+0x30>)
 800aea0:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aea4:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aea8:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 800aeac:	18c0      	adds	r0, r0, r3
 800aeae:	d100      	bne.n	800aeb2 <Get_SerialNum+0x16>
}
 800aeb0:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aeb2:	4d07      	ldr	r5, [pc, #28]	@ (800aed0 <Get_SerialNum+0x34>)
 800aeb4:	2208      	movs	r2, #8
 800aeb6:	4629      	mov	r1, r5
 800aeb8:	f7ff ffcc 	bl	800ae54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aebc:	2204      	movs	r2, #4
 800aebe:	f105 0110 	add.w	r1, r5, #16
 800aec2:	4620      	mov	r0, r4
 800aec4:	f7ff ffc6 	bl	800ae54 <IntToUnicode>
}
 800aec8:	e7f2      	b.n	800aeb0 <Get_SerialNum+0x14>
 800aeca:	bf00      	nop
 800aecc:	1fff7000 	.word	0x1fff7000
 800aed0:	20000112 	.word	0x20000112

0800aed4 <USBD_FS_SerialStrDescriptor>:
{
 800aed4:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800aed6:	231a      	movs	r3, #26
 800aed8:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800aeda:	f7ff ffdf 	bl	800ae9c <Get_SerialNum>
}
 800aede:	4801      	ldr	r0, [pc, #4]	@ (800aee4 <USBD_FS_SerialStrDescriptor+0x10>)
 800aee0:	bd08      	pop	{r3, pc}
 800aee2:	bf00      	nop
 800aee4:	20000110 	.word	0x20000110

0800aee8 <USBD_FS_ProductStrDescriptor>:
{
 800aee8:	b508      	push	{r3, lr}
 800aeea:	460a      	mov	r2, r1
  if(speed == 0)
 800aeec:	b928      	cbnz	r0, 800aefa <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aeee:	4905      	ldr	r1, [pc, #20]	@ (800af04 <USBD_FS_ProductStrDescriptor+0x1c>)
 800aef0:	4805      	ldr	r0, [pc, #20]	@ (800af08 <USBD_FS_ProductStrDescriptor+0x20>)
 800aef2:	f7ff ff80 	bl	800adf6 <USBD_GetString>
}
 800aef6:	4803      	ldr	r0, [pc, #12]	@ (800af04 <USBD_FS_ProductStrDescriptor+0x1c>)
 800aef8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aefa:	4902      	ldr	r1, [pc, #8]	@ (800af04 <USBD_FS_ProductStrDescriptor+0x1c>)
 800aefc:	4802      	ldr	r0, [pc, #8]	@ (800af08 <USBD_FS_ProductStrDescriptor+0x20>)
 800aefe:	f7ff ff7a 	bl	800adf6 <USBD_GetString>
 800af02:	e7f8      	b.n	800aef6 <USBD_FS_ProductStrDescriptor+0xe>
 800af04:	2000804c 	.word	0x2000804c
 800af08:	0800d13c 	.word	0x0800d13c

0800af0c <USBD_FS_ManufacturerStrDescriptor>:
{
 800af0c:	b510      	push	{r4, lr}
 800af0e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af10:	4c03      	ldr	r4, [pc, #12]	@ (800af20 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800af12:	4621      	mov	r1, r4
 800af14:	4803      	ldr	r0, [pc, #12]	@ (800af24 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800af16:	f7ff ff6e 	bl	800adf6 <USBD_GetString>
}
 800af1a:	4620      	mov	r0, r4
 800af1c:	bd10      	pop	{r4, pc}
 800af1e:	bf00      	nop
 800af20:	2000804c 	.word	0x2000804c
 800af24:	0800d154 	.word	0x0800d154

0800af28 <USBD_FS_ConfigStrDescriptor>:
{
 800af28:	b508      	push	{r3, lr}
 800af2a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800af2c:	b928      	cbnz	r0, 800af3a <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af2e:	4905      	ldr	r1, [pc, #20]	@ (800af44 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800af30:	4805      	ldr	r0, [pc, #20]	@ (800af48 <USBD_FS_ConfigStrDescriptor+0x20>)
 800af32:	f7ff ff60 	bl	800adf6 <USBD_GetString>
}
 800af36:	4803      	ldr	r0, [pc, #12]	@ (800af44 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800af38:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af3a:	4902      	ldr	r1, [pc, #8]	@ (800af44 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800af3c:	4802      	ldr	r0, [pc, #8]	@ (800af48 <USBD_FS_ConfigStrDescriptor+0x20>)
 800af3e:	f7ff ff5a 	bl	800adf6 <USBD_GetString>
 800af42:	e7f8      	b.n	800af36 <USBD_FS_ConfigStrDescriptor+0xe>
 800af44:	2000804c 	.word	0x2000804c
 800af48:	0800d168 	.word	0x0800d168

0800af4c <USBD_FS_InterfaceStrDescriptor>:
{
 800af4c:	b508      	push	{r3, lr}
 800af4e:	460a      	mov	r2, r1
  if(speed == 0)
 800af50:	b928      	cbnz	r0, 800af5e <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800af52:	4905      	ldr	r1, [pc, #20]	@ (800af68 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800af54:	4805      	ldr	r0, [pc, #20]	@ (800af6c <USBD_FS_InterfaceStrDescriptor+0x20>)
 800af56:	f7ff ff4e 	bl	800adf6 <USBD_GetString>
}
 800af5a:	4803      	ldr	r0, [pc, #12]	@ (800af68 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800af5c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800af5e:	4902      	ldr	r1, [pc, #8]	@ (800af68 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800af60:	4802      	ldr	r0, [pc, #8]	@ (800af6c <USBD_FS_InterfaceStrDescriptor+0x20>)
 800af62:	f7ff ff48 	bl	800adf6 <USBD_GetString>
 800af66:	e7f8      	b.n	800af5a <USBD_FS_InterfaceStrDescriptor+0xe>
 800af68:	2000804c 	.word	0x2000804c
 800af6c:	0800d174 	.word	0x0800d174

0800af70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800af70:	b508      	push	{r3, lr}
 800af72:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af74:	2202      	movs	r2, #2
 800af76:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800af7a:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800af7c:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af7e:	460a      	mov	r2, r1
 800af80:	2100      	movs	r1, #0
 800af82:	f7ff f9a7 	bl	800a2d4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800af86:	2000      	movs	r0, #0
 800af88:	bd08      	pop	{r3, pc}

0800af8a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800af8a:	b508      	push	{r3, lr}
 800af8c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af8e:	460a      	mov	r2, r1
 800af90:	2100      	movs	r1, #0
 800af92:	f7ff f99f 	bl	800a2d4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800af96:	2000      	movs	r0, #0
 800af98:	bd08      	pop	{r3, pc}

0800af9a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800af9a:	b508      	push	{r3, lr}
 800af9c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800af9e:	2203      	movs	r2, #3
 800afa0:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800afa4:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800afa8:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afac:	460a      	mov	r2, r1
 800afae:	2100      	movs	r1, #0
 800afb0:	f7ff f998 	bl	800a2e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800afb4:	2000      	movs	r0, #0
 800afb6:	bd08      	pop	{r3, pc}

0800afb8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800afb8:	b508      	push	{r3, lr}
 800afba:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afbc:	460a      	mov	r2, r1
 800afbe:	2100      	movs	r1, #0
 800afc0:	f7ff f990 	bl	800a2e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800afc4:	2000      	movs	r0, #0
 800afc6:	bd08      	pop	{r3, pc}

0800afc8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800afc8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800afca:	2204      	movs	r2, #4
 800afcc:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800afd0:	2300      	movs	r3, #0
 800afd2:	461a      	mov	r2, r3
 800afd4:	4619      	mov	r1, r3
 800afd6:	f7ff f97d 	bl	800a2d4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800afda:	2000      	movs	r0, #0
 800afdc:	bd08      	pop	{r3, pc}

0800afde <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800afde:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800afe0:	2205      	movs	r2, #5
 800afe2:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afe6:	2300      	movs	r3, #0
 800afe8:	461a      	mov	r2, r3
 800afea:	4619      	mov	r1, r3
 800afec:	f7ff f97a 	bl	800a2e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800aff0:	2000      	movs	r0, #0
 800aff2:	bd08      	pop	{r3, pc}

0800aff4 <crc32_inc>:
    unsigned long crc32;
    unsigned char *byte_buf;
    size_t i;

    /** accumulate crc32 for buffer **/
    crc32 = in_crc32 ^ 0xFFFFFFFF;
 800aff4:	43c0      	mvns	r0, r0
    byte_buf = (unsigned char *)buf;
    for (i = 0; i < size; i++)
 800aff6:	f04f 0c00 	mov.w	ip, #0
 800affa:	4594      	cmp	ip, r2
 800affc:	d211      	bcs.n	800b022 <crc32_inc+0x2e>
{
 800affe:	b410      	push	{r4}
    {
        crc32 = (crc32 >> 8) ^ crcTable[(crc32 ^ byte_buf[i]) & 0xFF];
 800b000:	f811 300c 	ldrb.w	r3, [r1, ip]
 800b004:	4043      	eors	r3, r0
 800b006:	b2db      	uxtb	r3, r3
 800b008:	4c07      	ldr	r4, [pc, #28]	@ (800b028 <crc32_inc+0x34>)
 800b00a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b00e:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
    for (i = 0; i < size; i++)
 800b012:	f10c 0c01 	add.w	ip, ip, #1
 800b016:	4594      	cmp	ip, r2
 800b018:	d3f2      	bcc.n	800b000 <crc32_inc+0xc>
    }
    return (crc32 ^ 0xFFFFFFFF);
}
 800b01a:	43c0      	mvns	r0, r0
 800b01c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	43c0      	mvns	r0, r0
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	0800d1fc 	.word	0x0800d1fc

0800b02c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b02c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800b064 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800b030:	f7fc ff90 	bl	8007f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b034:	480c      	ldr	r0, [pc, #48]	@ (800b068 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b036:	490d      	ldr	r1, [pc, #52]	@ (800b06c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b038:	4a0d      	ldr	r2, [pc, #52]	@ (800b070 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b03a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b03c:	e002      	b.n	800b044 <LoopCopyDataInit>

0800b03e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b03e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b042:	3304      	adds	r3, #4

0800b044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b048:	d3f9      	bcc.n	800b03e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b04a:	4a0a      	ldr	r2, [pc, #40]	@ (800b074 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b04c:	4c0a      	ldr	r4, [pc, #40]	@ (800b078 <LoopFillZerobss+0x22>)
  movs r3, #0
 800b04e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b050:	e001      	b.n	800b056 <LoopFillZerobss>

0800b052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b054:	3204      	adds	r2, #4

0800b056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b058:	d3fb      	bcc.n	800b052 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b05a:	f000 f855 	bl	800b108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b05e:	f7f7 ff2f 	bl	8002ec0 <main>
  bx  lr    
 800b062:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b064:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800b068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b06c:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 800b070:	0800da10 	.word	0x0800da10
  ldr r2, =_sbss
 800b074:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 800b078:	20008394 	.word	0x20008394

0800b07c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b07c:	e7fe      	b.n	800b07c <ADC_IRQHandler>
	...

0800b080 <sniprintf>:
 800b080:	b40c      	push	{r2, r3}
 800b082:	b530      	push	{r4, r5, lr}
 800b084:	4b18      	ldr	r3, [pc, #96]	@ (800b0e8 <sniprintf+0x68>)
 800b086:	1e0c      	subs	r4, r1, #0
 800b088:	681d      	ldr	r5, [r3, #0]
 800b08a:	b09d      	sub	sp, #116	@ 0x74
 800b08c:	da08      	bge.n	800b0a0 <sniprintf+0x20>
 800b08e:	238b      	movs	r3, #139	@ 0x8b
 800b090:	602b      	str	r3, [r5, #0]
 800b092:	f04f 30ff 	mov.w	r0, #4294967295
 800b096:	b01d      	add	sp, #116	@ 0x74
 800b098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b09c:	b002      	add	sp, #8
 800b09e:	4770      	bx	lr
 800b0a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b0a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b0a8:	f04f 0300 	mov.w	r3, #0
 800b0ac:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b0ae:	bf14      	ite	ne
 800b0b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b0b4:	4623      	moveq	r3, r4
 800b0b6:	9304      	str	r3, [sp, #16]
 800b0b8:	9307      	str	r3, [sp, #28]
 800b0ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b0be:	9002      	str	r0, [sp, #8]
 800b0c0:	9006      	str	r0, [sp, #24]
 800b0c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b0c6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b0c8:	ab21      	add	r3, sp, #132	@ 0x84
 800b0ca:	a902      	add	r1, sp, #8
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	9301      	str	r3, [sp, #4]
 800b0d0:	f000 f9a6 	bl	800b420 <_svfiprintf_r>
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	bfbc      	itt	lt
 800b0d8:	238b      	movlt	r3, #139	@ 0x8b
 800b0da:	602b      	strlt	r3, [r5, #0]
 800b0dc:	2c00      	cmp	r4, #0
 800b0de:	d0da      	beq.n	800b096 <sniprintf+0x16>
 800b0e0:	9b02      	ldr	r3, [sp, #8]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	701a      	strb	r2, [r3, #0]
 800b0e6:	e7d6      	b.n	800b096 <sniprintf+0x16>
 800b0e8:	20000160 	.word	0x20000160

0800b0ec <memset>:
 800b0ec:	4402      	add	r2, r0
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d100      	bne.n	800b0f6 <memset+0xa>
 800b0f4:	4770      	bx	lr
 800b0f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b0fa:	e7f9      	b.n	800b0f0 <memset+0x4>

0800b0fc <__errno>:
 800b0fc:	4b01      	ldr	r3, [pc, #4]	@ (800b104 <__errno+0x8>)
 800b0fe:	6818      	ldr	r0, [r3, #0]
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	20000160 	.word	0x20000160

0800b108 <__libc_init_array>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	4b0d      	ldr	r3, [pc, #52]	@ (800b140 <__libc_init_array+0x38>)
 800b10c:	4d0d      	ldr	r5, [pc, #52]	@ (800b144 <__libc_init_array+0x3c>)
 800b10e:	1b5b      	subs	r3, r3, r5
 800b110:	109c      	asrs	r4, r3, #2
 800b112:	2600      	movs	r6, #0
 800b114:	42a6      	cmp	r6, r4
 800b116:	d109      	bne.n	800b12c <__libc_init_array+0x24>
 800b118:	f001 fd58 	bl	800cbcc <_init>
 800b11c:	4d0a      	ldr	r5, [pc, #40]	@ (800b148 <__libc_init_array+0x40>)
 800b11e:	4b0b      	ldr	r3, [pc, #44]	@ (800b14c <__libc_init_array+0x44>)
 800b120:	1b5b      	subs	r3, r3, r5
 800b122:	109c      	asrs	r4, r3, #2
 800b124:	2600      	movs	r6, #0
 800b126:	42a6      	cmp	r6, r4
 800b128:	d105      	bne.n	800b136 <__libc_init_array+0x2e>
 800b12a:	bd70      	pop	{r4, r5, r6, pc}
 800b12c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b130:	4798      	blx	r3
 800b132:	3601      	adds	r6, #1
 800b134:	e7ee      	b.n	800b114 <__libc_init_array+0xc>
 800b136:	f855 3b04 	ldr.w	r3, [r5], #4
 800b13a:	4798      	blx	r3
 800b13c:	3601      	adds	r6, #1
 800b13e:	e7f2      	b.n	800b126 <__libc_init_array+0x1e>
 800b140:	0800da08 	.word	0x0800da08
 800b144:	0800da08 	.word	0x0800da08
 800b148:	0800da08 	.word	0x0800da08
 800b14c:	0800da0c 	.word	0x0800da0c

0800b150 <__retarget_lock_acquire_recursive>:
 800b150:	4770      	bx	lr

0800b152 <__retarget_lock_release_recursive>:
 800b152:	4770      	bx	lr

0800b154 <memcpy>:
 800b154:	440a      	add	r2, r1
 800b156:	4291      	cmp	r1, r2
 800b158:	f100 33ff 	add.w	r3, r0, #4294967295
 800b15c:	d100      	bne.n	800b160 <memcpy+0xc>
 800b15e:	4770      	bx	lr
 800b160:	b510      	push	{r4, lr}
 800b162:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b16a:	4291      	cmp	r1, r2
 800b16c:	d1f9      	bne.n	800b162 <memcpy+0xe>
 800b16e:	bd10      	pop	{r4, pc}

0800b170 <_free_r>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	4605      	mov	r5, r0
 800b174:	2900      	cmp	r1, #0
 800b176:	d041      	beq.n	800b1fc <_free_r+0x8c>
 800b178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b17c:	1f0c      	subs	r4, r1, #4
 800b17e:	2b00      	cmp	r3, #0
 800b180:	bfb8      	it	lt
 800b182:	18e4      	addlt	r4, r4, r3
 800b184:	f000 f8e0 	bl	800b348 <__malloc_lock>
 800b188:	4a1d      	ldr	r2, [pc, #116]	@ (800b200 <_free_r+0x90>)
 800b18a:	6813      	ldr	r3, [r2, #0]
 800b18c:	b933      	cbnz	r3, 800b19c <_free_r+0x2c>
 800b18e:	6063      	str	r3, [r4, #4]
 800b190:	6014      	str	r4, [r2, #0]
 800b192:	4628      	mov	r0, r5
 800b194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b198:	f000 b8dc 	b.w	800b354 <__malloc_unlock>
 800b19c:	42a3      	cmp	r3, r4
 800b19e:	d908      	bls.n	800b1b2 <_free_r+0x42>
 800b1a0:	6820      	ldr	r0, [r4, #0]
 800b1a2:	1821      	adds	r1, r4, r0
 800b1a4:	428b      	cmp	r3, r1
 800b1a6:	bf01      	itttt	eq
 800b1a8:	6819      	ldreq	r1, [r3, #0]
 800b1aa:	685b      	ldreq	r3, [r3, #4]
 800b1ac:	1809      	addeq	r1, r1, r0
 800b1ae:	6021      	streq	r1, [r4, #0]
 800b1b0:	e7ed      	b.n	800b18e <_free_r+0x1e>
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	b10b      	cbz	r3, 800b1bc <_free_r+0x4c>
 800b1b8:	42a3      	cmp	r3, r4
 800b1ba:	d9fa      	bls.n	800b1b2 <_free_r+0x42>
 800b1bc:	6811      	ldr	r1, [r2, #0]
 800b1be:	1850      	adds	r0, r2, r1
 800b1c0:	42a0      	cmp	r0, r4
 800b1c2:	d10b      	bne.n	800b1dc <_free_r+0x6c>
 800b1c4:	6820      	ldr	r0, [r4, #0]
 800b1c6:	4401      	add	r1, r0
 800b1c8:	1850      	adds	r0, r2, r1
 800b1ca:	4283      	cmp	r3, r0
 800b1cc:	6011      	str	r1, [r2, #0]
 800b1ce:	d1e0      	bne.n	800b192 <_free_r+0x22>
 800b1d0:	6818      	ldr	r0, [r3, #0]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	6053      	str	r3, [r2, #4]
 800b1d6:	4408      	add	r0, r1
 800b1d8:	6010      	str	r0, [r2, #0]
 800b1da:	e7da      	b.n	800b192 <_free_r+0x22>
 800b1dc:	d902      	bls.n	800b1e4 <_free_r+0x74>
 800b1de:	230c      	movs	r3, #12
 800b1e0:	602b      	str	r3, [r5, #0]
 800b1e2:	e7d6      	b.n	800b192 <_free_r+0x22>
 800b1e4:	6820      	ldr	r0, [r4, #0]
 800b1e6:	1821      	adds	r1, r4, r0
 800b1e8:	428b      	cmp	r3, r1
 800b1ea:	bf04      	itt	eq
 800b1ec:	6819      	ldreq	r1, [r3, #0]
 800b1ee:	685b      	ldreq	r3, [r3, #4]
 800b1f0:	6063      	str	r3, [r4, #4]
 800b1f2:	bf04      	itt	eq
 800b1f4:	1809      	addeq	r1, r1, r0
 800b1f6:	6021      	streq	r1, [r4, #0]
 800b1f8:	6054      	str	r4, [r2, #4]
 800b1fa:	e7ca      	b.n	800b192 <_free_r+0x22>
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	bf00      	nop
 800b200:	20008390 	.word	0x20008390

0800b204 <sbrk_aligned>:
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	4e0f      	ldr	r6, [pc, #60]	@ (800b244 <sbrk_aligned+0x40>)
 800b208:	460c      	mov	r4, r1
 800b20a:	6831      	ldr	r1, [r6, #0]
 800b20c:	4605      	mov	r5, r0
 800b20e:	b911      	cbnz	r1, 800b216 <sbrk_aligned+0x12>
 800b210:	f000 fbaa 	bl	800b968 <_sbrk_r>
 800b214:	6030      	str	r0, [r6, #0]
 800b216:	4621      	mov	r1, r4
 800b218:	4628      	mov	r0, r5
 800b21a:	f000 fba5 	bl	800b968 <_sbrk_r>
 800b21e:	1c43      	adds	r3, r0, #1
 800b220:	d103      	bne.n	800b22a <sbrk_aligned+0x26>
 800b222:	f04f 34ff 	mov.w	r4, #4294967295
 800b226:	4620      	mov	r0, r4
 800b228:	bd70      	pop	{r4, r5, r6, pc}
 800b22a:	1cc4      	adds	r4, r0, #3
 800b22c:	f024 0403 	bic.w	r4, r4, #3
 800b230:	42a0      	cmp	r0, r4
 800b232:	d0f8      	beq.n	800b226 <sbrk_aligned+0x22>
 800b234:	1a21      	subs	r1, r4, r0
 800b236:	4628      	mov	r0, r5
 800b238:	f000 fb96 	bl	800b968 <_sbrk_r>
 800b23c:	3001      	adds	r0, #1
 800b23e:	d1f2      	bne.n	800b226 <sbrk_aligned+0x22>
 800b240:	e7ef      	b.n	800b222 <sbrk_aligned+0x1e>
 800b242:	bf00      	nop
 800b244:	2000838c 	.word	0x2000838c

0800b248 <_malloc_r>:
 800b248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b24c:	1ccd      	adds	r5, r1, #3
 800b24e:	f025 0503 	bic.w	r5, r5, #3
 800b252:	3508      	adds	r5, #8
 800b254:	2d0c      	cmp	r5, #12
 800b256:	bf38      	it	cc
 800b258:	250c      	movcc	r5, #12
 800b25a:	2d00      	cmp	r5, #0
 800b25c:	4606      	mov	r6, r0
 800b25e:	db01      	blt.n	800b264 <_malloc_r+0x1c>
 800b260:	42a9      	cmp	r1, r5
 800b262:	d904      	bls.n	800b26e <_malloc_r+0x26>
 800b264:	230c      	movs	r3, #12
 800b266:	6033      	str	r3, [r6, #0]
 800b268:	2000      	movs	r0, #0
 800b26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b26e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b344 <_malloc_r+0xfc>
 800b272:	f000 f869 	bl	800b348 <__malloc_lock>
 800b276:	f8d8 3000 	ldr.w	r3, [r8]
 800b27a:	461c      	mov	r4, r3
 800b27c:	bb44      	cbnz	r4, 800b2d0 <_malloc_r+0x88>
 800b27e:	4629      	mov	r1, r5
 800b280:	4630      	mov	r0, r6
 800b282:	f7ff ffbf 	bl	800b204 <sbrk_aligned>
 800b286:	1c43      	adds	r3, r0, #1
 800b288:	4604      	mov	r4, r0
 800b28a:	d158      	bne.n	800b33e <_malloc_r+0xf6>
 800b28c:	f8d8 4000 	ldr.w	r4, [r8]
 800b290:	4627      	mov	r7, r4
 800b292:	2f00      	cmp	r7, #0
 800b294:	d143      	bne.n	800b31e <_malloc_r+0xd6>
 800b296:	2c00      	cmp	r4, #0
 800b298:	d04b      	beq.n	800b332 <_malloc_r+0xea>
 800b29a:	6823      	ldr	r3, [r4, #0]
 800b29c:	4639      	mov	r1, r7
 800b29e:	4630      	mov	r0, r6
 800b2a0:	eb04 0903 	add.w	r9, r4, r3
 800b2a4:	f000 fb60 	bl	800b968 <_sbrk_r>
 800b2a8:	4581      	cmp	r9, r0
 800b2aa:	d142      	bne.n	800b332 <_malloc_r+0xea>
 800b2ac:	6821      	ldr	r1, [r4, #0]
 800b2ae:	1a6d      	subs	r5, r5, r1
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	f7ff ffa6 	bl	800b204 <sbrk_aligned>
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	d03a      	beq.n	800b332 <_malloc_r+0xea>
 800b2bc:	6823      	ldr	r3, [r4, #0]
 800b2be:	442b      	add	r3, r5
 800b2c0:	6023      	str	r3, [r4, #0]
 800b2c2:	f8d8 3000 	ldr.w	r3, [r8]
 800b2c6:	685a      	ldr	r2, [r3, #4]
 800b2c8:	bb62      	cbnz	r2, 800b324 <_malloc_r+0xdc>
 800b2ca:	f8c8 7000 	str.w	r7, [r8]
 800b2ce:	e00f      	b.n	800b2f0 <_malloc_r+0xa8>
 800b2d0:	6822      	ldr	r2, [r4, #0]
 800b2d2:	1b52      	subs	r2, r2, r5
 800b2d4:	d420      	bmi.n	800b318 <_malloc_r+0xd0>
 800b2d6:	2a0b      	cmp	r2, #11
 800b2d8:	d917      	bls.n	800b30a <_malloc_r+0xc2>
 800b2da:	1961      	adds	r1, r4, r5
 800b2dc:	42a3      	cmp	r3, r4
 800b2de:	6025      	str	r5, [r4, #0]
 800b2e0:	bf18      	it	ne
 800b2e2:	6059      	strne	r1, [r3, #4]
 800b2e4:	6863      	ldr	r3, [r4, #4]
 800b2e6:	bf08      	it	eq
 800b2e8:	f8c8 1000 	streq.w	r1, [r8]
 800b2ec:	5162      	str	r2, [r4, r5]
 800b2ee:	604b      	str	r3, [r1, #4]
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	f000 f82f 	bl	800b354 <__malloc_unlock>
 800b2f6:	f104 000b 	add.w	r0, r4, #11
 800b2fa:	1d23      	adds	r3, r4, #4
 800b2fc:	f020 0007 	bic.w	r0, r0, #7
 800b300:	1ac2      	subs	r2, r0, r3
 800b302:	bf1c      	itt	ne
 800b304:	1a1b      	subne	r3, r3, r0
 800b306:	50a3      	strne	r3, [r4, r2]
 800b308:	e7af      	b.n	800b26a <_malloc_r+0x22>
 800b30a:	6862      	ldr	r2, [r4, #4]
 800b30c:	42a3      	cmp	r3, r4
 800b30e:	bf0c      	ite	eq
 800b310:	f8c8 2000 	streq.w	r2, [r8]
 800b314:	605a      	strne	r2, [r3, #4]
 800b316:	e7eb      	b.n	800b2f0 <_malloc_r+0xa8>
 800b318:	4623      	mov	r3, r4
 800b31a:	6864      	ldr	r4, [r4, #4]
 800b31c:	e7ae      	b.n	800b27c <_malloc_r+0x34>
 800b31e:	463c      	mov	r4, r7
 800b320:	687f      	ldr	r7, [r7, #4]
 800b322:	e7b6      	b.n	800b292 <_malloc_r+0x4a>
 800b324:	461a      	mov	r2, r3
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	42a3      	cmp	r3, r4
 800b32a:	d1fb      	bne.n	800b324 <_malloc_r+0xdc>
 800b32c:	2300      	movs	r3, #0
 800b32e:	6053      	str	r3, [r2, #4]
 800b330:	e7de      	b.n	800b2f0 <_malloc_r+0xa8>
 800b332:	230c      	movs	r3, #12
 800b334:	6033      	str	r3, [r6, #0]
 800b336:	4630      	mov	r0, r6
 800b338:	f000 f80c 	bl	800b354 <__malloc_unlock>
 800b33c:	e794      	b.n	800b268 <_malloc_r+0x20>
 800b33e:	6005      	str	r5, [r0, #0]
 800b340:	e7d6      	b.n	800b2f0 <_malloc_r+0xa8>
 800b342:	bf00      	nop
 800b344:	20008390 	.word	0x20008390

0800b348 <__malloc_lock>:
 800b348:	4801      	ldr	r0, [pc, #4]	@ (800b350 <__malloc_lock+0x8>)
 800b34a:	f7ff bf01 	b.w	800b150 <__retarget_lock_acquire_recursive>
 800b34e:	bf00      	nop
 800b350:	20008388 	.word	0x20008388

0800b354 <__malloc_unlock>:
 800b354:	4801      	ldr	r0, [pc, #4]	@ (800b35c <__malloc_unlock+0x8>)
 800b356:	f7ff befc 	b.w	800b152 <__retarget_lock_release_recursive>
 800b35a:	bf00      	nop
 800b35c:	20008388 	.word	0x20008388

0800b360 <__ssputs_r>:
 800b360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b364:	688e      	ldr	r6, [r1, #8]
 800b366:	461f      	mov	r7, r3
 800b368:	42be      	cmp	r6, r7
 800b36a:	4682      	mov	sl, r0
 800b36c:	460c      	mov	r4, r1
 800b36e:	4690      	mov	r8, r2
 800b370:	4633      	mov	r3, r6
 800b372:	d853      	bhi.n	800b41c <__ssputs_r+0xbc>
 800b374:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800b378:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 800b37c:	d02b      	beq.n	800b3d6 <__ssputs_r+0x76>
 800b37e:	6965      	ldr	r5, [r4, #20]
 800b380:	6823      	ldr	r3, [r4, #0]
 800b382:	6909      	ldr	r1, [r1, #16]
 800b384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b388:	eba3 0901 	sub.w	r9, r3, r1
 800b38c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b390:	1c7b      	adds	r3, r7, #1
 800b392:	106d      	asrs	r5, r5, #1
 800b394:	444b      	add	r3, r9
 800b396:	42ab      	cmp	r3, r5
 800b398:	462a      	mov	r2, r5
 800b39a:	bf84      	itt	hi
 800b39c:	461d      	movhi	r5, r3
 800b39e:	462a      	movhi	r2, r5
 800b3a0:	0543      	lsls	r3, r0, #21
 800b3a2:	d527      	bpl.n	800b3f4 <__ssputs_r+0x94>
 800b3a4:	4611      	mov	r1, r2
 800b3a6:	4650      	mov	r0, sl
 800b3a8:	f7ff ff4e 	bl	800b248 <_malloc_r>
 800b3ac:	4606      	mov	r6, r0
 800b3ae:	b358      	cbz	r0, 800b408 <__ssputs_r+0xa8>
 800b3b0:	6921      	ldr	r1, [r4, #16]
 800b3b2:	464a      	mov	r2, r9
 800b3b4:	f7ff fece 	bl	800b154 <memcpy>
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b3be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3c2:	81a3      	strh	r3, [r4, #12]
 800b3c4:	6126      	str	r6, [r4, #16]
 800b3c6:	6165      	str	r5, [r4, #20]
 800b3c8:	444e      	add	r6, r9
 800b3ca:	eba5 0509 	sub.w	r5, r5, r9
 800b3ce:	6026      	str	r6, [r4, #0]
 800b3d0:	60a5      	str	r5, [r4, #8]
 800b3d2:	463e      	mov	r6, r7
 800b3d4:	463b      	mov	r3, r7
 800b3d6:	461f      	mov	r7, r3
 800b3d8:	6820      	ldr	r0, [r4, #0]
 800b3da:	463a      	mov	r2, r7
 800b3dc:	4641      	mov	r1, r8
 800b3de:	f000 faa9 	bl	800b934 <memmove>
 800b3e2:	68a3      	ldr	r3, [r4, #8]
 800b3e4:	1b9b      	subs	r3, r3, r6
 800b3e6:	60a3      	str	r3, [r4, #8]
 800b3e8:	6823      	ldr	r3, [r4, #0]
 800b3ea:	443b      	add	r3, r7
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f4:	4650      	mov	r0, sl
 800b3f6:	f000 fac7 	bl	800b988 <_realloc_r>
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d1e1      	bne.n	800b3c4 <__ssputs_r+0x64>
 800b400:	6921      	ldr	r1, [r4, #16]
 800b402:	4650      	mov	r0, sl
 800b404:	f7ff feb4 	bl	800b170 <_free_r>
 800b408:	230c      	movs	r3, #12
 800b40a:	f8ca 3000 	str.w	r3, [sl]
 800b40e:	89a3      	ldrh	r3, [r4, #12]
 800b410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b414:	81a3      	strh	r3, [r4, #12]
 800b416:	f04f 30ff 	mov.w	r0, #4294967295
 800b41a:	e7e9      	b.n	800b3f0 <__ssputs_r+0x90>
 800b41c:	463e      	mov	r6, r7
 800b41e:	e7db      	b.n	800b3d8 <__ssputs_r+0x78>

0800b420 <_svfiprintf_r>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	4698      	mov	r8, r3
 800b426:	898b      	ldrh	r3, [r1, #12]
 800b428:	061b      	lsls	r3, r3, #24
 800b42a:	b09d      	sub	sp, #116	@ 0x74
 800b42c:	4607      	mov	r7, r0
 800b42e:	460d      	mov	r5, r1
 800b430:	4614      	mov	r4, r2
 800b432:	d510      	bpl.n	800b456 <_svfiprintf_r+0x36>
 800b434:	690b      	ldr	r3, [r1, #16]
 800b436:	b973      	cbnz	r3, 800b456 <_svfiprintf_r+0x36>
 800b438:	2140      	movs	r1, #64	@ 0x40
 800b43a:	f7ff ff05 	bl	800b248 <_malloc_r>
 800b43e:	6028      	str	r0, [r5, #0]
 800b440:	6128      	str	r0, [r5, #16]
 800b442:	b930      	cbnz	r0, 800b452 <_svfiprintf_r+0x32>
 800b444:	230c      	movs	r3, #12
 800b446:	603b      	str	r3, [r7, #0]
 800b448:	f04f 30ff 	mov.w	r0, #4294967295
 800b44c:	b01d      	add	sp, #116	@ 0x74
 800b44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b452:	2340      	movs	r3, #64	@ 0x40
 800b454:	616b      	str	r3, [r5, #20]
 800b456:	2300      	movs	r3, #0
 800b458:	9309      	str	r3, [sp, #36]	@ 0x24
 800b45a:	2320      	movs	r3, #32
 800b45c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b460:	f8cd 800c 	str.w	r8, [sp, #12]
 800b464:	2330      	movs	r3, #48	@ 0x30
 800b466:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b604 <_svfiprintf_r+0x1e4>
 800b46a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b46e:	f04f 0901 	mov.w	r9, #1
 800b472:	4623      	mov	r3, r4
 800b474:	469a      	mov	sl, r3
 800b476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b47a:	b10a      	cbz	r2, 800b480 <_svfiprintf_r+0x60>
 800b47c:	2a25      	cmp	r2, #37	@ 0x25
 800b47e:	d1f9      	bne.n	800b474 <_svfiprintf_r+0x54>
 800b480:	ebba 0b04 	subs.w	fp, sl, r4
 800b484:	d00b      	beq.n	800b49e <_svfiprintf_r+0x7e>
 800b486:	465b      	mov	r3, fp
 800b488:	4622      	mov	r2, r4
 800b48a:	4629      	mov	r1, r5
 800b48c:	4638      	mov	r0, r7
 800b48e:	f7ff ff67 	bl	800b360 <__ssputs_r>
 800b492:	3001      	adds	r0, #1
 800b494:	f000 80a7 	beq.w	800b5e6 <_svfiprintf_r+0x1c6>
 800b498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b49a:	445a      	add	r2, fp
 800b49c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b49e:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f000 809f 	beq.w	800b5e6 <_svfiprintf_r+0x1c6>
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4b2:	f10a 0a01 	add.w	sl, sl, #1
 800b4b6:	9304      	str	r3, [sp, #16]
 800b4b8:	9307      	str	r3, [sp, #28]
 800b4ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4be:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4c0:	4654      	mov	r4, sl
 800b4c2:	2205      	movs	r2, #5
 800b4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c8:	484e      	ldr	r0, [pc, #312]	@ (800b604 <_svfiprintf_r+0x1e4>)
 800b4ca:	f7f4 fe71 	bl	80001b0 <memchr>
 800b4ce:	9a04      	ldr	r2, [sp, #16]
 800b4d0:	b9d8      	cbnz	r0, 800b50a <_svfiprintf_r+0xea>
 800b4d2:	06d0      	lsls	r0, r2, #27
 800b4d4:	bf44      	itt	mi
 800b4d6:	2320      	movmi	r3, #32
 800b4d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4dc:	0711      	lsls	r1, r2, #28
 800b4de:	bf44      	itt	mi
 800b4e0:	232b      	movmi	r3, #43	@ 0x2b
 800b4e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4e6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4ec:	d015      	beq.n	800b51a <_svfiprintf_r+0xfa>
 800b4ee:	9a07      	ldr	r2, [sp, #28]
 800b4f0:	4654      	mov	r4, sl
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	f04f 0c0a 	mov.w	ip, #10
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4fe:	3b30      	subs	r3, #48	@ 0x30
 800b500:	2b09      	cmp	r3, #9
 800b502:	d94b      	bls.n	800b59c <_svfiprintf_r+0x17c>
 800b504:	b1b0      	cbz	r0, 800b534 <_svfiprintf_r+0x114>
 800b506:	9207      	str	r2, [sp, #28]
 800b508:	e014      	b.n	800b534 <_svfiprintf_r+0x114>
 800b50a:	eba0 0308 	sub.w	r3, r0, r8
 800b50e:	fa09 f303 	lsl.w	r3, r9, r3
 800b512:	4313      	orrs	r3, r2
 800b514:	9304      	str	r3, [sp, #16]
 800b516:	46a2      	mov	sl, r4
 800b518:	e7d2      	b.n	800b4c0 <_svfiprintf_r+0xa0>
 800b51a:	9b03      	ldr	r3, [sp, #12]
 800b51c:	1d19      	adds	r1, r3, #4
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	9103      	str	r1, [sp, #12]
 800b522:	2b00      	cmp	r3, #0
 800b524:	bfbb      	ittet	lt
 800b526:	425b      	neglt	r3, r3
 800b528:	f042 0202 	orrlt.w	r2, r2, #2
 800b52c:	9307      	strge	r3, [sp, #28]
 800b52e:	9307      	strlt	r3, [sp, #28]
 800b530:	bfb8      	it	lt
 800b532:	9204      	strlt	r2, [sp, #16]
 800b534:	7823      	ldrb	r3, [r4, #0]
 800b536:	2b2e      	cmp	r3, #46	@ 0x2e
 800b538:	d10a      	bne.n	800b550 <_svfiprintf_r+0x130>
 800b53a:	7863      	ldrb	r3, [r4, #1]
 800b53c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b53e:	d132      	bne.n	800b5a6 <_svfiprintf_r+0x186>
 800b540:	9b03      	ldr	r3, [sp, #12]
 800b542:	1d1a      	adds	r2, r3, #4
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	9203      	str	r2, [sp, #12]
 800b548:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b54c:	3402      	adds	r4, #2
 800b54e:	9305      	str	r3, [sp, #20]
 800b550:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b614 <_svfiprintf_r+0x1f4>
 800b554:	7821      	ldrb	r1, [r4, #0]
 800b556:	2203      	movs	r2, #3
 800b558:	4650      	mov	r0, sl
 800b55a:	f7f4 fe29 	bl	80001b0 <memchr>
 800b55e:	b138      	cbz	r0, 800b570 <_svfiprintf_r+0x150>
 800b560:	9b04      	ldr	r3, [sp, #16]
 800b562:	eba0 000a 	sub.w	r0, r0, sl
 800b566:	2240      	movs	r2, #64	@ 0x40
 800b568:	4082      	lsls	r2, r0
 800b56a:	4313      	orrs	r3, r2
 800b56c:	3401      	adds	r4, #1
 800b56e:	9304      	str	r3, [sp, #16]
 800b570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b574:	4824      	ldr	r0, [pc, #144]	@ (800b608 <_svfiprintf_r+0x1e8>)
 800b576:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b57a:	2206      	movs	r2, #6
 800b57c:	f7f4 fe18 	bl	80001b0 <memchr>
 800b580:	2800      	cmp	r0, #0
 800b582:	d036      	beq.n	800b5f2 <_svfiprintf_r+0x1d2>
 800b584:	4b21      	ldr	r3, [pc, #132]	@ (800b60c <_svfiprintf_r+0x1ec>)
 800b586:	bb1b      	cbnz	r3, 800b5d0 <_svfiprintf_r+0x1b0>
 800b588:	9b03      	ldr	r3, [sp, #12]
 800b58a:	3307      	adds	r3, #7
 800b58c:	f023 0307 	bic.w	r3, r3, #7
 800b590:	3308      	adds	r3, #8
 800b592:	9303      	str	r3, [sp, #12]
 800b594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b596:	4433      	add	r3, r6
 800b598:	9309      	str	r3, [sp, #36]	@ 0x24
 800b59a:	e76a      	b.n	800b472 <_svfiprintf_r+0x52>
 800b59c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5a0:	460c      	mov	r4, r1
 800b5a2:	2001      	movs	r0, #1
 800b5a4:	e7a8      	b.n	800b4f8 <_svfiprintf_r+0xd8>
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	3401      	adds	r4, #1
 800b5aa:	9305      	str	r3, [sp, #20]
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	f04f 0c0a 	mov.w	ip, #10
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5b8:	3a30      	subs	r2, #48	@ 0x30
 800b5ba:	2a09      	cmp	r2, #9
 800b5bc:	d903      	bls.n	800b5c6 <_svfiprintf_r+0x1a6>
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d0c6      	beq.n	800b550 <_svfiprintf_r+0x130>
 800b5c2:	9105      	str	r1, [sp, #20]
 800b5c4:	e7c4      	b.n	800b550 <_svfiprintf_r+0x130>
 800b5c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e7f0      	b.n	800b5b2 <_svfiprintf_r+0x192>
 800b5d0:	ab03      	add	r3, sp, #12
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	462a      	mov	r2, r5
 800b5d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b610 <_svfiprintf_r+0x1f0>)
 800b5d8:	a904      	add	r1, sp, #16
 800b5da:	4638      	mov	r0, r7
 800b5dc:	f3af 8000 	nop.w
 800b5e0:	1c42      	adds	r2, r0, #1
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	d1d6      	bne.n	800b594 <_svfiprintf_r+0x174>
 800b5e6:	89ab      	ldrh	r3, [r5, #12]
 800b5e8:	065b      	lsls	r3, r3, #25
 800b5ea:	f53f af2d 	bmi.w	800b448 <_svfiprintf_r+0x28>
 800b5ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5f0:	e72c      	b.n	800b44c <_svfiprintf_r+0x2c>
 800b5f2:	ab03      	add	r3, sp, #12
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	462a      	mov	r2, r5
 800b5f8:	4b05      	ldr	r3, [pc, #20]	@ (800b610 <_svfiprintf_r+0x1f0>)
 800b5fa:	a904      	add	r1, sp, #16
 800b5fc:	4638      	mov	r0, r7
 800b5fe:	f000 f879 	bl	800b6f4 <_printf_i>
 800b602:	e7ed      	b.n	800b5e0 <_svfiprintf_r+0x1c0>
 800b604:	0800d5fc 	.word	0x0800d5fc
 800b608:	0800d606 	.word	0x0800d606
 800b60c:	00000000 	.word	0x00000000
 800b610:	0800b361 	.word	0x0800b361
 800b614:	0800d602 	.word	0x0800d602

0800b618 <_printf_common>:
 800b618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b61c:	4616      	mov	r6, r2
 800b61e:	4698      	mov	r8, r3
 800b620:	688a      	ldr	r2, [r1, #8]
 800b622:	690b      	ldr	r3, [r1, #16]
 800b624:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b628:	4293      	cmp	r3, r2
 800b62a:	bfb8      	it	lt
 800b62c:	4613      	movlt	r3, r2
 800b62e:	6033      	str	r3, [r6, #0]
 800b630:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b634:	4607      	mov	r7, r0
 800b636:	460c      	mov	r4, r1
 800b638:	b10a      	cbz	r2, 800b63e <_printf_common+0x26>
 800b63a:	3301      	adds	r3, #1
 800b63c:	6033      	str	r3, [r6, #0]
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	0699      	lsls	r1, r3, #26
 800b642:	bf42      	ittt	mi
 800b644:	6833      	ldrmi	r3, [r6, #0]
 800b646:	3302      	addmi	r3, #2
 800b648:	6033      	strmi	r3, [r6, #0]
 800b64a:	6825      	ldr	r5, [r4, #0]
 800b64c:	f015 0506 	ands.w	r5, r5, #6
 800b650:	d106      	bne.n	800b660 <_printf_common+0x48>
 800b652:	f104 0a19 	add.w	sl, r4, #25
 800b656:	68e3      	ldr	r3, [r4, #12]
 800b658:	6832      	ldr	r2, [r6, #0]
 800b65a:	1a9b      	subs	r3, r3, r2
 800b65c:	42ab      	cmp	r3, r5
 800b65e:	dc26      	bgt.n	800b6ae <_printf_common+0x96>
 800b660:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b664:	6822      	ldr	r2, [r4, #0]
 800b666:	3b00      	subs	r3, #0
 800b668:	bf18      	it	ne
 800b66a:	2301      	movne	r3, #1
 800b66c:	0692      	lsls	r2, r2, #26
 800b66e:	d42b      	bmi.n	800b6c8 <_printf_common+0xb0>
 800b670:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b674:	4641      	mov	r1, r8
 800b676:	4638      	mov	r0, r7
 800b678:	47c8      	blx	r9
 800b67a:	3001      	adds	r0, #1
 800b67c:	d01e      	beq.n	800b6bc <_printf_common+0xa4>
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	6922      	ldr	r2, [r4, #16]
 800b682:	f003 0306 	and.w	r3, r3, #6
 800b686:	2b04      	cmp	r3, #4
 800b688:	bf02      	ittt	eq
 800b68a:	68e5      	ldreq	r5, [r4, #12]
 800b68c:	6833      	ldreq	r3, [r6, #0]
 800b68e:	1aed      	subeq	r5, r5, r3
 800b690:	68a3      	ldr	r3, [r4, #8]
 800b692:	bf0c      	ite	eq
 800b694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b698:	2500      	movne	r5, #0
 800b69a:	4293      	cmp	r3, r2
 800b69c:	bfc4      	itt	gt
 800b69e:	1a9b      	subgt	r3, r3, r2
 800b6a0:	18ed      	addgt	r5, r5, r3
 800b6a2:	2600      	movs	r6, #0
 800b6a4:	341a      	adds	r4, #26
 800b6a6:	42b5      	cmp	r5, r6
 800b6a8:	d11a      	bne.n	800b6e0 <_printf_common+0xc8>
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	e008      	b.n	800b6c0 <_printf_common+0xa8>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	4652      	mov	r2, sl
 800b6b2:	4641      	mov	r1, r8
 800b6b4:	4638      	mov	r0, r7
 800b6b6:	47c8      	blx	r9
 800b6b8:	3001      	adds	r0, #1
 800b6ba:	d103      	bne.n	800b6c4 <_printf_common+0xac>
 800b6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c4:	3501      	adds	r5, #1
 800b6c6:	e7c6      	b.n	800b656 <_printf_common+0x3e>
 800b6c8:	18e1      	adds	r1, r4, r3
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	2030      	movs	r0, #48	@ 0x30
 800b6ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6d2:	4422      	add	r2, r4
 800b6d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b6d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6dc:	3302      	adds	r3, #2
 800b6de:	e7c7      	b.n	800b670 <_printf_common+0x58>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	4622      	mov	r2, r4
 800b6e4:	4641      	mov	r1, r8
 800b6e6:	4638      	mov	r0, r7
 800b6e8:	47c8      	blx	r9
 800b6ea:	3001      	adds	r0, #1
 800b6ec:	d0e6      	beq.n	800b6bc <_printf_common+0xa4>
 800b6ee:	3601      	adds	r6, #1
 800b6f0:	e7d9      	b.n	800b6a6 <_printf_common+0x8e>
	...

0800b6f4 <_printf_i>:
 800b6f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f8:	7e0f      	ldrb	r7, [r1, #24]
 800b6fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6fc:	2f78      	cmp	r7, #120	@ 0x78
 800b6fe:	4691      	mov	r9, r2
 800b700:	4680      	mov	r8, r0
 800b702:	460c      	mov	r4, r1
 800b704:	469a      	mov	sl, r3
 800b706:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b70a:	d807      	bhi.n	800b71c <_printf_i+0x28>
 800b70c:	2f62      	cmp	r7, #98	@ 0x62
 800b70e:	d80a      	bhi.n	800b726 <_printf_i+0x32>
 800b710:	2f00      	cmp	r7, #0
 800b712:	f000 80d2 	beq.w	800b8ba <_printf_i+0x1c6>
 800b716:	2f58      	cmp	r7, #88	@ 0x58
 800b718:	f000 80b7 	beq.w	800b88a <_printf_i+0x196>
 800b71c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b720:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b724:	e03a      	b.n	800b79c <_printf_i+0xa8>
 800b726:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b72a:	2b15      	cmp	r3, #21
 800b72c:	d8f6      	bhi.n	800b71c <_printf_i+0x28>
 800b72e:	a101      	add	r1, pc, #4	@ (adr r1, 800b734 <_printf_i+0x40>)
 800b730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b734:	0800b78d 	.word	0x0800b78d
 800b738:	0800b7a1 	.word	0x0800b7a1
 800b73c:	0800b71d 	.word	0x0800b71d
 800b740:	0800b71d 	.word	0x0800b71d
 800b744:	0800b71d 	.word	0x0800b71d
 800b748:	0800b71d 	.word	0x0800b71d
 800b74c:	0800b7a1 	.word	0x0800b7a1
 800b750:	0800b71d 	.word	0x0800b71d
 800b754:	0800b71d 	.word	0x0800b71d
 800b758:	0800b71d 	.word	0x0800b71d
 800b75c:	0800b71d 	.word	0x0800b71d
 800b760:	0800b8a1 	.word	0x0800b8a1
 800b764:	0800b7cb 	.word	0x0800b7cb
 800b768:	0800b857 	.word	0x0800b857
 800b76c:	0800b71d 	.word	0x0800b71d
 800b770:	0800b71d 	.word	0x0800b71d
 800b774:	0800b8c3 	.word	0x0800b8c3
 800b778:	0800b71d 	.word	0x0800b71d
 800b77c:	0800b7cb 	.word	0x0800b7cb
 800b780:	0800b71d 	.word	0x0800b71d
 800b784:	0800b71d 	.word	0x0800b71d
 800b788:	0800b85f 	.word	0x0800b85f
 800b78c:	6833      	ldr	r3, [r6, #0]
 800b78e:	1d1a      	adds	r2, r3, #4
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6032      	str	r2, [r6, #0]
 800b794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b798:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b79c:	2301      	movs	r3, #1
 800b79e:	e09d      	b.n	800b8dc <_printf_i+0x1e8>
 800b7a0:	6833      	ldr	r3, [r6, #0]
 800b7a2:	6820      	ldr	r0, [r4, #0]
 800b7a4:	1d19      	adds	r1, r3, #4
 800b7a6:	6031      	str	r1, [r6, #0]
 800b7a8:	0606      	lsls	r6, r0, #24
 800b7aa:	d501      	bpl.n	800b7b0 <_printf_i+0xbc>
 800b7ac:	681d      	ldr	r5, [r3, #0]
 800b7ae:	e003      	b.n	800b7b8 <_printf_i+0xc4>
 800b7b0:	0645      	lsls	r5, r0, #25
 800b7b2:	d5fb      	bpl.n	800b7ac <_printf_i+0xb8>
 800b7b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b7b8:	2d00      	cmp	r5, #0
 800b7ba:	da03      	bge.n	800b7c4 <_printf_i+0xd0>
 800b7bc:	232d      	movs	r3, #45	@ 0x2d
 800b7be:	426d      	negs	r5, r5
 800b7c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7c4:	4859      	ldr	r0, [pc, #356]	@ (800b92c <_printf_i+0x238>)
 800b7c6:	230a      	movs	r3, #10
 800b7c8:	e010      	b.n	800b7ec <_printf_i+0xf8>
 800b7ca:	6821      	ldr	r1, [r4, #0]
 800b7cc:	6833      	ldr	r3, [r6, #0]
 800b7ce:	0608      	lsls	r0, r1, #24
 800b7d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7d4:	d402      	bmi.n	800b7dc <_printf_i+0xe8>
 800b7d6:	0649      	lsls	r1, r1, #25
 800b7d8:	bf48      	it	mi
 800b7da:	b2ad      	uxthmi	r5, r5
 800b7dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7de:	4853      	ldr	r0, [pc, #332]	@ (800b92c <_printf_i+0x238>)
 800b7e0:	6033      	str	r3, [r6, #0]
 800b7e2:	d159      	bne.n	800b898 <_printf_i+0x1a4>
 800b7e4:	2308      	movs	r3, #8
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7ec:	6866      	ldr	r6, [r4, #4]
 800b7ee:	60a6      	str	r6, [r4, #8]
 800b7f0:	2e00      	cmp	r6, #0
 800b7f2:	db05      	blt.n	800b800 <_printf_i+0x10c>
 800b7f4:	6821      	ldr	r1, [r4, #0]
 800b7f6:	432e      	orrs	r6, r5
 800b7f8:	f021 0104 	bic.w	r1, r1, #4
 800b7fc:	6021      	str	r1, [r4, #0]
 800b7fe:	d04d      	beq.n	800b89c <_printf_i+0x1a8>
 800b800:	4616      	mov	r6, r2
 800b802:	fbb5 f1f3 	udiv	r1, r5, r3
 800b806:	fb03 5711 	mls	r7, r3, r1, r5
 800b80a:	5dc7      	ldrb	r7, [r0, r7]
 800b80c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b810:	462f      	mov	r7, r5
 800b812:	42bb      	cmp	r3, r7
 800b814:	460d      	mov	r5, r1
 800b816:	d9f4      	bls.n	800b802 <_printf_i+0x10e>
 800b818:	2b08      	cmp	r3, #8
 800b81a:	d10b      	bne.n	800b834 <_printf_i+0x140>
 800b81c:	6823      	ldr	r3, [r4, #0]
 800b81e:	07df      	lsls	r7, r3, #31
 800b820:	d508      	bpl.n	800b834 <_printf_i+0x140>
 800b822:	6923      	ldr	r3, [r4, #16]
 800b824:	6861      	ldr	r1, [r4, #4]
 800b826:	4299      	cmp	r1, r3
 800b828:	bfde      	ittt	le
 800b82a:	2330      	movle	r3, #48	@ 0x30
 800b82c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b830:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b834:	1b92      	subs	r2, r2, r6
 800b836:	6122      	str	r2, [r4, #16]
 800b838:	f8cd a000 	str.w	sl, [sp]
 800b83c:	464b      	mov	r3, r9
 800b83e:	aa03      	add	r2, sp, #12
 800b840:	4621      	mov	r1, r4
 800b842:	4640      	mov	r0, r8
 800b844:	f7ff fee8 	bl	800b618 <_printf_common>
 800b848:	3001      	adds	r0, #1
 800b84a:	d14c      	bne.n	800b8e6 <_printf_i+0x1f2>
 800b84c:	f04f 30ff 	mov.w	r0, #4294967295
 800b850:	b004      	add	sp, #16
 800b852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	f043 0320 	orr.w	r3, r3, #32
 800b85c:	6023      	str	r3, [r4, #0]
 800b85e:	4834      	ldr	r0, [pc, #208]	@ (800b930 <_printf_i+0x23c>)
 800b860:	2778      	movs	r7, #120	@ 0x78
 800b862:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	6831      	ldr	r1, [r6, #0]
 800b86a:	061f      	lsls	r7, r3, #24
 800b86c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b870:	d402      	bmi.n	800b878 <_printf_i+0x184>
 800b872:	065f      	lsls	r7, r3, #25
 800b874:	bf48      	it	mi
 800b876:	b2ad      	uxthmi	r5, r5
 800b878:	6031      	str	r1, [r6, #0]
 800b87a:	07d9      	lsls	r1, r3, #31
 800b87c:	bf44      	itt	mi
 800b87e:	f043 0320 	orrmi.w	r3, r3, #32
 800b882:	6023      	strmi	r3, [r4, #0]
 800b884:	b11d      	cbz	r5, 800b88e <_printf_i+0x19a>
 800b886:	2310      	movs	r3, #16
 800b888:	e7ad      	b.n	800b7e6 <_printf_i+0xf2>
 800b88a:	4828      	ldr	r0, [pc, #160]	@ (800b92c <_printf_i+0x238>)
 800b88c:	e7e9      	b.n	800b862 <_printf_i+0x16e>
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	f023 0320 	bic.w	r3, r3, #32
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	e7f6      	b.n	800b886 <_printf_i+0x192>
 800b898:	230a      	movs	r3, #10
 800b89a:	e7a4      	b.n	800b7e6 <_printf_i+0xf2>
 800b89c:	4616      	mov	r6, r2
 800b89e:	e7bb      	b.n	800b818 <_printf_i+0x124>
 800b8a0:	6833      	ldr	r3, [r6, #0]
 800b8a2:	6825      	ldr	r5, [r4, #0]
 800b8a4:	6961      	ldr	r1, [r4, #20]
 800b8a6:	1d18      	adds	r0, r3, #4
 800b8a8:	6030      	str	r0, [r6, #0]
 800b8aa:	062e      	lsls	r6, r5, #24
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	d501      	bpl.n	800b8b4 <_printf_i+0x1c0>
 800b8b0:	6019      	str	r1, [r3, #0]
 800b8b2:	e002      	b.n	800b8ba <_printf_i+0x1c6>
 800b8b4:	0668      	lsls	r0, r5, #25
 800b8b6:	d5fb      	bpl.n	800b8b0 <_printf_i+0x1bc>
 800b8b8:	8019      	strh	r1, [r3, #0]
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	6123      	str	r3, [r4, #16]
 800b8be:	4616      	mov	r6, r2
 800b8c0:	e7ba      	b.n	800b838 <_printf_i+0x144>
 800b8c2:	6833      	ldr	r3, [r6, #0]
 800b8c4:	1d1a      	adds	r2, r3, #4
 800b8c6:	6032      	str	r2, [r6, #0]
 800b8c8:	681e      	ldr	r6, [r3, #0]
 800b8ca:	6862      	ldr	r2, [r4, #4]
 800b8cc:	2100      	movs	r1, #0
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	f7f4 fc6e 	bl	80001b0 <memchr>
 800b8d4:	b108      	cbz	r0, 800b8da <_printf_i+0x1e6>
 800b8d6:	1b80      	subs	r0, r0, r6
 800b8d8:	6060      	str	r0, [r4, #4]
 800b8da:	6863      	ldr	r3, [r4, #4]
 800b8dc:	6123      	str	r3, [r4, #16]
 800b8de:	2300      	movs	r3, #0
 800b8e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8e4:	e7a8      	b.n	800b838 <_printf_i+0x144>
 800b8e6:	6923      	ldr	r3, [r4, #16]
 800b8e8:	4632      	mov	r2, r6
 800b8ea:	4649      	mov	r1, r9
 800b8ec:	4640      	mov	r0, r8
 800b8ee:	47d0      	blx	sl
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	d0ab      	beq.n	800b84c <_printf_i+0x158>
 800b8f4:	6823      	ldr	r3, [r4, #0]
 800b8f6:	079b      	lsls	r3, r3, #30
 800b8f8:	d413      	bmi.n	800b922 <_printf_i+0x22e>
 800b8fa:	68e0      	ldr	r0, [r4, #12]
 800b8fc:	9b03      	ldr	r3, [sp, #12]
 800b8fe:	4298      	cmp	r0, r3
 800b900:	bfb8      	it	lt
 800b902:	4618      	movlt	r0, r3
 800b904:	e7a4      	b.n	800b850 <_printf_i+0x15c>
 800b906:	2301      	movs	r3, #1
 800b908:	4632      	mov	r2, r6
 800b90a:	4649      	mov	r1, r9
 800b90c:	4640      	mov	r0, r8
 800b90e:	47d0      	blx	sl
 800b910:	3001      	adds	r0, #1
 800b912:	d09b      	beq.n	800b84c <_printf_i+0x158>
 800b914:	3501      	adds	r5, #1
 800b916:	68e3      	ldr	r3, [r4, #12]
 800b918:	9903      	ldr	r1, [sp, #12]
 800b91a:	1a5b      	subs	r3, r3, r1
 800b91c:	42ab      	cmp	r3, r5
 800b91e:	dcf2      	bgt.n	800b906 <_printf_i+0x212>
 800b920:	e7eb      	b.n	800b8fa <_printf_i+0x206>
 800b922:	2500      	movs	r5, #0
 800b924:	f104 0619 	add.w	r6, r4, #25
 800b928:	e7f5      	b.n	800b916 <_printf_i+0x222>
 800b92a:	bf00      	nop
 800b92c:	0800d60d 	.word	0x0800d60d
 800b930:	0800d61e 	.word	0x0800d61e

0800b934 <memmove>:
 800b934:	4288      	cmp	r0, r1
 800b936:	b510      	push	{r4, lr}
 800b938:	eb01 0402 	add.w	r4, r1, r2
 800b93c:	d902      	bls.n	800b944 <memmove+0x10>
 800b93e:	4284      	cmp	r4, r0
 800b940:	4623      	mov	r3, r4
 800b942:	d807      	bhi.n	800b954 <memmove+0x20>
 800b944:	1e43      	subs	r3, r0, #1
 800b946:	42a1      	cmp	r1, r4
 800b948:	d007      	beq.n	800b95a <memmove+0x26>
 800b94a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b94e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b952:	e7f8      	b.n	800b946 <memmove+0x12>
 800b954:	4402      	add	r2, r0
 800b956:	4282      	cmp	r2, r0
 800b958:	d100      	bne.n	800b95c <memmove+0x28>
 800b95a:	bd10      	pop	{r4, pc}
 800b95c:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b960:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800b964:	e7f7      	b.n	800b956 <memmove+0x22>
	...

0800b968 <_sbrk_r>:
 800b968:	b538      	push	{r3, r4, r5, lr}
 800b96a:	4d06      	ldr	r5, [pc, #24]	@ (800b984 <_sbrk_r+0x1c>)
 800b96c:	2300      	movs	r3, #0
 800b96e:	4604      	mov	r4, r0
 800b970:	4608      	mov	r0, r1
 800b972:	602b      	str	r3, [r5, #0]
 800b974:	f7fc faca 	bl	8007f0c <_sbrk>
 800b978:	1c43      	adds	r3, r0, #1
 800b97a:	d102      	bne.n	800b982 <_sbrk_r+0x1a>
 800b97c:	682b      	ldr	r3, [r5, #0]
 800b97e:	b103      	cbz	r3, 800b982 <_sbrk_r+0x1a>
 800b980:	6023      	str	r3, [r4, #0]
 800b982:	bd38      	pop	{r3, r4, r5, pc}
 800b984:	20008384 	.word	0x20008384

0800b988 <_realloc_r>:
 800b988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b98c:	4607      	mov	r7, r0
 800b98e:	4614      	mov	r4, r2
 800b990:	460d      	mov	r5, r1
 800b992:	b921      	cbnz	r1, 800b99e <_realloc_r+0x16>
 800b994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b998:	4611      	mov	r1, r2
 800b99a:	f7ff bc55 	b.w	800b248 <_malloc_r>
 800b99e:	b92a      	cbnz	r2, 800b9ac <_realloc_r+0x24>
 800b9a0:	f7ff fbe6 	bl	800b170 <_free_r>
 800b9a4:	4625      	mov	r5, r4
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ac:	f000 f81a 	bl	800b9e4 <_malloc_usable_size_r>
 800b9b0:	4284      	cmp	r4, r0
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	d802      	bhi.n	800b9bc <_realloc_r+0x34>
 800b9b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9ba:	d8f4      	bhi.n	800b9a6 <_realloc_r+0x1e>
 800b9bc:	4621      	mov	r1, r4
 800b9be:	4638      	mov	r0, r7
 800b9c0:	f7ff fc42 	bl	800b248 <_malloc_r>
 800b9c4:	4680      	mov	r8, r0
 800b9c6:	b908      	cbnz	r0, 800b9cc <_realloc_r+0x44>
 800b9c8:	4645      	mov	r5, r8
 800b9ca:	e7ec      	b.n	800b9a6 <_realloc_r+0x1e>
 800b9cc:	42b4      	cmp	r4, r6
 800b9ce:	4622      	mov	r2, r4
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	bf28      	it	cs
 800b9d4:	4632      	movcs	r2, r6
 800b9d6:	f7ff fbbd 	bl	800b154 <memcpy>
 800b9da:	4629      	mov	r1, r5
 800b9dc:	4638      	mov	r0, r7
 800b9de:	f7ff fbc7 	bl	800b170 <_free_r>
 800b9e2:	e7f1      	b.n	800b9c8 <_realloc_r+0x40>

0800b9e4 <_malloc_usable_size_r>:
 800b9e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9e8:	1f18      	subs	r0, r3, #4
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	bfbc      	itt	lt
 800b9ee:	580b      	ldrlt	r3, [r1, r0]
 800b9f0:	18c0      	addlt	r0, r0, r3
 800b9f2:	4770      	bx	lr

0800b9f4 <logf>:
 800b9f4:	b508      	push	{r3, lr}
 800b9f6:	ed2d 8b02 	vpush	{d8}
 800b9fa:	eeb0 8a40 	vmov.f32	s16, s0
 800b9fe:	f000 f933 	bl	800bc68 <__ieee754_logf>
 800ba02:	eeb4 8a48 	vcmp.f32	s16, s16
 800ba06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba0a:	d60f      	bvs.n	800ba2c <logf+0x38>
 800ba0c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ba10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba14:	dc0a      	bgt.n	800ba2c <logf+0x38>
 800ba16:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ba1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba1e:	d108      	bne.n	800ba32 <logf+0x3e>
 800ba20:	f7ff fb6c 	bl	800b0fc <__errno>
 800ba24:	2322      	movs	r3, #34	@ 0x22
 800ba26:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800ba4c <logf+0x58>
 800ba2a:	6003      	str	r3, [r0, #0]
 800ba2c:	ecbd 8b02 	vpop	{d8}
 800ba30:	bd08      	pop	{r3, pc}
 800ba32:	f7ff fb63 	bl	800b0fc <__errno>
 800ba36:	ecbd 8b02 	vpop	{d8}
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2221      	movs	r2, #33	@ 0x21
 800ba3e:	601a      	str	r2, [r3, #0]
 800ba40:	4803      	ldr	r0, [pc, #12]	@ (800ba50 <logf+0x5c>)
 800ba42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ba46:	f000 b83f 	b.w	800bac8 <nanf>
 800ba4a:	bf00      	nop
 800ba4c:	ff800000 	.word	0xff800000
 800ba50:	0800cd54 	.word	0x0800cd54

0800ba54 <sinf>:
 800ba54:	ee10 3a10 	vmov	r3, s0
 800ba58:	4919      	ldr	r1, [pc, #100]	@ (800bac0 <sinf+0x6c>)
 800ba5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ba5e:	428a      	cmp	r2, r1
 800ba60:	d91b      	bls.n	800ba9a <sinf+0x46>
 800ba62:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ba66:	d302      	bcc.n	800ba6e <sinf+0x1a>
 800ba68:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ba6c:	4770      	bx	lr
 800ba6e:	b500      	push	{lr}
 800ba70:	b083      	sub	sp, #12
 800ba72:	4668      	mov	r0, sp
 800ba74:	f000 f9f2 	bl	800be5c <__ieee754_rem_pio2f>
 800ba78:	f000 0003 	and.w	r0, r0, #3
 800ba7c:	2801      	cmp	r0, #1
 800ba7e:	ed9d 0a00 	vldr	s0, [sp]
 800ba82:	eddd 0a01 	vldr	s1, [sp, #4]
 800ba86:	d013      	beq.n	800bab0 <sinf+0x5c>
 800ba88:	2802      	cmp	r0, #2
 800ba8a:	d00b      	beq.n	800baa4 <sinf+0x50>
 800ba8c:	b998      	cbnz	r0, 800bab6 <sinf+0x62>
 800ba8e:	2001      	movs	r0, #1
 800ba90:	f000 f8a2 	bl	800bbd8 <__kernel_sinf>
 800ba94:	b003      	add	sp, #12
 800ba96:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba9a:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 800bac4 <sinf+0x70>
 800ba9e:	2000      	movs	r0, #0
 800baa0:	f000 b89a 	b.w	800bbd8 <__kernel_sinf>
 800baa4:	2001      	movs	r0, #1
 800baa6:	f000 f897 	bl	800bbd8 <__kernel_sinf>
 800baaa:	eeb1 0a40 	vneg.f32	s0, s0
 800baae:	e7f1      	b.n	800ba94 <sinf+0x40>
 800bab0:	f000 f810 	bl	800bad4 <__kernel_cosf>
 800bab4:	e7ee      	b.n	800ba94 <sinf+0x40>
 800bab6:	f000 f80d 	bl	800bad4 <__kernel_cosf>
 800baba:	eeb1 0a40 	vneg.f32	s0, s0
 800babe:	e7e9      	b.n	800ba94 <sinf+0x40>
 800bac0:	3f490fd8 	.word	0x3f490fd8
 800bac4:	00000000 	.word	0x00000000

0800bac8 <nanf>:
 800bac8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bad0 <nanf+0x8>
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop
 800bad0:	7fc00000 	.word	0x7fc00000

0800bad4 <__kernel_cosf>:
 800bad4:	ee10 3a10 	vmov	r3, s0
 800bad8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800badc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bae0:	d22c      	bcs.n	800bb3c <__kernel_cosf+0x68>
 800bae2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bae6:	ee17 3a90 	vmov	r3, s15
 800baea:	2b00      	cmp	r3, #0
 800baec:	d060      	beq.n	800bbb0 <__kernel_cosf+0xdc>
 800baee:	ee60 7a00 	vmul.f32	s15, s0, s0
 800baf2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800bbb8 <__kernel_cosf+0xe4>
 800baf6:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800bbbc <__kernel_cosf+0xe8>
 800bafa:	eddf 5a31 	vldr	s11, [pc, #196]	@ 800bbc0 <__kernel_cosf+0xec>
 800bafe:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 800bbc4 <__kernel_cosf+0xf0>
 800bb02:	eddf 6a31 	vldr	s13, [pc, #196]	@ 800bbc8 <__kernel_cosf+0xf4>
 800bb06:	eea7 5a87 	vfma.f32	s10, s15, s14
 800bb0a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800bbcc <__kernel_cosf+0xf8>
 800bb0e:	eee7 5a85 	vfma.f32	s11, s15, s10
 800bb12:	eea7 6aa5 	vfma.f32	s12, s15, s11
 800bb16:	eea7 7a86 	vfma.f32	s14, s15, s12
 800bb1a:	eee7 6a87 	vfma.f32	s13, s15, s14
 800bb1e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800bb22:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800bb26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bb2a:	eee7 0aa6 	vfma.f32	s1, s15, s13
 800bb2e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bb32:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bb36:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bb3a:	4770      	bx	lr
 800bb3c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800bb40:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800bbb8 <__kernel_cosf+0xe4>
 800bb44:	ed9f 5a1d 	vldr	s10, [pc, #116]	@ 800bbbc <__kernel_cosf+0xe8>
 800bb48:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800bbc0 <__kernel_cosf+0xec>
 800bb4c:	ed9f 6a1d 	vldr	s12, [pc, #116]	@ 800bbc4 <__kernel_cosf+0xf0>
 800bb50:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800bbc8 <__kernel_cosf+0xf4>
 800bb54:	4a1e      	ldr	r2, [pc, #120]	@ (800bbd0 <__kernel_cosf+0xfc>)
 800bb56:	eea7 5a87 	vfma.f32	s10, s15, s14
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800bbcc <__kernel_cosf+0xf8>
 800bb60:	eee5 5a27 	vfma.f32	s11, s10, s15
 800bb64:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800bb68:	eea6 7a27 	vfma.f32	s14, s12, s15
 800bb6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bb70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bb74:	d9d5      	bls.n	800bb22 <__kernel_cosf+0x4e>
 800bb76:	4a17      	ldr	r2, [pc, #92]	@ (800bbd4 <__kernel_cosf+0x100>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d814      	bhi.n	800bba6 <__kernel_cosf+0xd2>
 800bb7c:	f103 437f 	add.w	r3, r3, #4278190080	@ 0xff000000
 800bb80:	ee07 3a10 	vmov	s14, r3
 800bb84:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800bb88:	ee36 6a47 	vsub.f32	s12, s12, s14
 800bb8c:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800bb90:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800bb94:	ee97 7aa5 	vfnms.f32	s14, s15, s11
 800bb98:	eee7 0aa6 	vfma.f32	s1, s15, s13
 800bb9c:	ee37 7a60 	vsub.f32	s14, s14, s1
 800bba0:	ee36 0a47 	vsub.f32	s0, s12, s14
 800bba4:	4770      	bx	lr
 800bba6:	eeb6 6a07 	vmov.f32	s12, #103	@ 0x3f380000  0.7187500
 800bbaa:	eeb5 7a02 	vmov.f32	s14, #82	@ 0x3e900000  0.2812500
 800bbae:	e7ed      	b.n	800bb8c <__kernel_cosf+0xb8>
 800bbb0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	ad47d74e 	.word	0xad47d74e
 800bbbc:	310f74f6 	.word	0x310f74f6
 800bbc0:	b493f27c 	.word	0xb493f27c
 800bbc4:	37d00d01 	.word	0x37d00d01
 800bbc8:	3d2aaaab 	.word	0x3d2aaaab
 800bbcc:	bab60b61 	.word	0xbab60b61
 800bbd0:	3e999999 	.word	0x3e999999
 800bbd4:	3f480000 	.word	0x3f480000

0800bbd8 <__kernel_sinf>:
 800bbd8:	ee10 3a10 	vmov	r3, s0
 800bbdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bbe0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bbe4:	d204      	bcs.n	800bbf0 <__kernel_sinf+0x18>
 800bbe6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bbea:	ee17 3a90 	vmov	r3, s15
 800bbee:	b35b      	cbz	r3, 800bc48 <__kernel_sinf+0x70>
 800bbf0:	ee60 7a00 	vmul.f32	s15, s0, s0
 800bbf4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800bc4c <__kernel_sinf+0x74>
 800bbf8:	eddf 5a15 	vldr	s11, [pc, #84]	@ 800bc50 <__kernel_sinf+0x78>
 800bbfc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800bc54 <__kernel_sinf+0x7c>
 800bc00:	eddf 6a15 	vldr	s13, [pc, #84]	@ 800bc58 <__kernel_sinf+0x80>
 800bc04:	eee7 5a87 	vfma.f32	s11, s15, s14
 800bc08:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800bc5c <__kernel_sinf+0x84>
 800bc0c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800bc10:	ee20 5a27 	vmul.f32	s10, s0, s15
 800bc14:	eee6 6a27 	vfma.f32	s13, s12, s15
 800bc18:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bc1c:	b930      	cbnz	r0, 800bc2c <__kernel_sinf+0x54>
 800bc1e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800bc60 <__kernel_sinf+0x88>
 800bc22:	eee7 6a87 	vfma.f32	s13, s15, s14
 800bc26:	eea6 0a85 	vfma.f32	s0, s13, s10
 800bc2a:	4770      	bx	lr
 800bc2c:	ee27 7a45 	vnmul.f32	s14, s14, s10
 800bc30:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800bc34:	eea0 7aa6 	vfma.f32	s14, s1, s13
 800bc38:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800bc64 <__kernel_sinf+0x8c>
 800bc3c:	eed7 0a27 	vfnms.f32	s1, s14, s15
 800bc40:	eee5 0a26 	vfma.f32	s1, s10, s13
 800bc44:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	2f2ec9d3 	.word	0x2f2ec9d3
 800bc50:	b2d72f34 	.word	0xb2d72f34
 800bc54:	3638ef1b 	.word	0x3638ef1b
 800bc58:	b9500d01 	.word	0xb9500d01
 800bc5c:	3c088889 	.word	0x3c088889
 800bc60:	be2aaaab 	.word	0xbe2aaaab
 800bc64:	3e2aaaab 	.word	0x3e2aaaab

0800bc68 <__ieee754_logf>:
 800bc68:	ee10 2a10 	vmov	r2, s0
 800bc6c:	f032 4300 	bics.w	r3, r2, #2147483648	@ 0x80000000
 800bc70:	d02f      	beq.n	800bcd2 <__ieee754_logf+0x6a>
 800bc72:	2a00      	cmp	r2, #0
 800bc74:	4613      	mov	r3, r2
 800bc76:	db33      	blt.n	800bce0 <__ieee754_logf+0x78>
 800bc78:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bc7c:	da40      	bge.n	800bd00 <__ieee754_logf+0x98>
 800bc7e:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800bc82:	db34      	blt.n	800bcee <__ieee754_logf+0x86>
 800bc84:	f04f 0c00 	mov.w	ip, #0
 800bc88:	4864      	ldr	r0, [pc, #400]	@ (800be1c <__ieee754_logf+0x1b4>)
 800bc8a:	f3c3 0116 	ubfx	r1, r3, #0, #23
 800bc8e:	4408      	add	r0, r1
 800bc90:	f400 0200 	and.w	r2, r0, #8388608	@ 0x800000
 800bc94:	f082 527e 	eor.w	r2, r2, #1065353216	@ 0x3f800000
 800bc98:	430a      	orrs	r2, r1
 800bc9a:	15db      	asrs	r3, r3, #23
 800bc9c:	ee00 2a10 	vmov	s0, r2
 800bca0:	3b7f      	subs	r3, #127	@ 0x7f
 800bca2:	4a5f      	ldr	r2, [pc, #380]	@ (800be20 <__ieee754_logf+0x1b8>)
 800bca4:	4463      	add	r3, ip
 800bca6:	f101 0c0f 	add.w	ip, r1, #15
 800bcaa:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bcae:	ea0c 0202 	and.w	r2, ip, r2
 800bcb2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bcb6:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800bcba:	bb22      	cbnz	r2, 800bd06 <__ieee754_logf+0x9e>
 800bcbc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800bcc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc4:	d162      	bne.n	800bd8c <__ieee754_logf+0x124>
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f040 8090 	bne.w	800bdec <__ieee754_logf+0x184>
 800bccc:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 800be24 <__ieee754_logf+0x1bc>
 800bcd0:	4770      	bx	lr
 800bcd2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800be28 <__ieee754_logf+0x1c0>
 800bcd6:	eddf 7a53 	vldr	s15, [pc, #332]	@ 800be24 <__ieee754_logf+0x1bc>
 800bcda:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800bcde:	4770      	bx	lr
 800bce0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bce4:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800be24 <__ieee754_logf+0x1bc>
 800bce8:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800bcec:	4770      	bx	lr
 800bcee:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 800be2c <__ieee754_logf+0x1c4>
 800bcf2:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bcf6:	f06f 0c18 	mvn.w	ip, #24
 800bcfa:	ee17 3a90 	vmov	r3, s15
 800bcfe:	e7c3      	b.n	800bc88 <__ieee754_logf+0x20>
 800bd00:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd04:	4770      	bx	lr
 800bd06:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800bd0a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bd0e:	ee07 3a10 	vmov	s14, r3
 800bd12:	ee80 4a27 	vdiv.f32	s8, s0, s15
 800bd16:	4846      	ldr	r0, [pc, #280]	@ (800be30 <__ieee754_logf+0x1c8>)
 800bd18:	f5c1 1257 	rsb	r2, r1, #3522560	@ 0x35c000
 800bd1c:	4408      	add	r0, r1
 800bd1e:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800bd22:	4302      	orrs	r2, r0
 800bd24:	2a00      	cmp	r2, #0
 800bd26:	ed9f 3a43 	vldr	s6, [pc, #268]	@ 800be34 <__ieee754_logf+0x1cc>
 800bd2a:	eddf 4a43 	vldr	s9, [pc, #268]	@ 800be38 <__ieee754_logf+0x1d0>
 800bd2e:	eddf 5a43 	vldr	s11, [pc, #268]	@ 800be3c <__ieee754_logf+0x1d4>
 800bd32:	eddf 3a43 	vldr	s7, [pc, #268]	@ 800be40 <__ieee754_logf+0x1d8>
 800bd36:	ed9f 5a43 	vldr	s10, [pc, #268]	@ 800be44 <__ieee754_logf+0x1dc>
 800bd3a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800be48 <__ieee754_logf+0x1e0>
 800bd3e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800be4c <__ieee754_logf+0x1e4>
 800bd42:	ee24 6a04 	vmul.f32	s12, s8, s8
 800bd46:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 800bd4a:	ee26 7a06 	vmul.f32	s14, s12, s12
 800bd4e:	eee7 4a03 	vfma.f32	s9, s14, s6
 800bd52:	eea7 5a23 	vfma.f32	s10, s14, s7
 800bd56:	eee4 5a87 	vfma.f32	s11, s9, s14
 800bd5a:	eee5 6a07 	vfma.f32	s13, s10, s14
 800bd5e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800bd62:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bd66:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bd6a:	dd2a      	ble.n	800bdc2 <__ieee754_logf+0x15a>
 800bd6c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bd70:	ee20 7a07 	vmul.f32	s14, s0, s14
 800bd74:	ee27 7a00 	vmul.f32	s14, s14, s0
 800bd78:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd7c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800bd80:	bb3b      	cbnz	r3, 800bdd2 <__ieee754_logf+0x16a>
 800bd82:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bd86:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bd8a:	4770      	bx	lr
 800bd8c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800be50 <__ieee754_logf+0x1e8>
 800bd90:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bd94:	eee0 7a47 	vfms.f32	s15, s0, s14
 800bd98:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bd9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d0f0      	beq.n	800bd86 <__ieee754_logf+0x11e>
 800bda4:	ee07 3a90 	vmov	s15, r3
 800bda8:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 800be54 <__ieee754_logf+0x1ec>
 800bdac:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800be58 <__ieee754_logf+0x1f0>
 800bdb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdb4:	eea7 7ac6 	vfms.f32	s14, s15, s12
 800bdb8:	ee37 0a40 	vsub.f32	s0, s14, s0
 800bdbc:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 800bdc0:	4770      	bx	lr
 800bdc2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bdc6:	ee67 7a84 	vmul.f32	s15, s15, s8
 800bdca:	b9e3      	cbnz	r3, 800be06 <__ieee754_logf+0x19e>
 800bdcc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bdd0:	4770      	bx	lr
 800bdd2:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 800be54 <__ieee754_logf+0x1ec>
 800bdd6:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800be58 <__ieee754_logf+0x1f0>
 800bdda:	eee2 7a86 	vfma.f32	s15, s5, s12
 800bdde:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bde2:	ee37 0a40 	vsub.f32	s0, s14, s0
 800bde6:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 800bdea:	4770      	bx	lr
 800bdec:	ee07 3a90 	vmov	s15, r3
 800bdf0:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800be54 <__ieee754_logf+0x1ec>
 800bdf4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800be58 <__ieee754_logf+0x1f0>
 800bdf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdfc:	ee27 0a80 	vmul.f32	s0, s15, s0
 800be00:	eea7 0a87 	vfma.f32	s0, s15, s14
 800be04:	4770      	bx	lr
 800be06:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800be54 <__ieee754_logf+0x1ec>
 800be0a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800be58 <__ieee754_logf+0x1f0>
 800be0e:	eee2 7ae6 	vfms.f32	s15, s5, s13
 800be12:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800be16:	ee92 0a87 	vfnms.f32	s0, s5, s14
 800be1a:	4770      	bx	lr
 800be1c:	004afb20 	.word	0x004afb20
 800be20:	007ffff0 	.word	0x007ffff0
 800be24:	00000000 	.word	0x00000000
 800be28:	cc000000 	.word	0xcc000000
 800be2c:	4c000000 	.word	0x4c000000
 800be30:	ffcf5c30 	.word	0xffcf5c30
 800be34:	3e178897 	.word	0x3e178897
 800be38:	3e3a3325 	.word	0x3e3a3325
 800be3c:	3e924925 	.word	0x3e924925
 800be40:	3e1cd04f 	.word	0x3e1cd04f
 800be44:	3e638e29 	.word	0x3e638e29
 800be48:	3f2aaaab 	.word	0x3f2aaaab
 800be4c:	3ecccccd 	.word	0x3ecccccd
 800be50:	3eaaaaab 	.word	0x3eaaaaab
 800be54:	3717f7d1 	.word	0x3717f7d1
 800be58:	3f317180 	.word	0x3f317180

0800be5c <__ieee754_rem_pio2f>:
 800be5c:	b570      	push	{r4, r5, r6, lr}
 800be5e:	ee10 3a10 	vmov	r3, s0
 800be62:	4a8b      	ldr	r2, [pc, #556]	@ (800c090 <__ieee754_rem_pio2f+0x234>)
 800be64:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800be68:	4294      	cmp	r4, r2
 800be6a:	b086      	sub	sp, #24
 800be6c:	4605      	mov	r5, r0
 800be6e:	d971      	bls.n	800bf54 <__ieee754_rem_pio2f+0xf8>
 800be70:	4a88      	ldr	r2, [pc, #544]	@ (800c094 <__ieee754_rem_pio2f+0x238>)
 800be72:	4294      	cmp	r4, r2
 800be74:	461e      	mov	r6, r3
 800be76:	d824      	bhi.n	800bec2 <__ieee754_rem_pio2f+0x66>
 800be78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	eddf 7a86 	vldr	s15, [pc, #536]	@ 800c098 <__ieee754_rem_pio2f+0x23c>
 800be82:	4986      	ldr	r1, [pc, #536]	@ (800c09c <__ieee754_rem_pio2f+0x240>)
 800be84:	f022 020f 	bic.w	r2, r2, #15
 800be88:	eeb0 7a40 	vmov.f32	s14, s0
 800be8c:	f340 80e6 	ble.w	800c05c <__ieee754_rem_pio2f+0x200>
 800be90:	428a      	cmp	r2, r1
 800be92:	ee70 7a67 	vsub.f32	s15, s0, s15
 800be96:	bf09      	itett	eq
 800be98:	ed9f 7a81 	vldreq	s14, [pc, #516]	@ 800c0a0 <__ieee754_rem_pio2f+0x244>
 800be9c:	eddf 6a81 	vldrne	s13, [pc, #516]	@ 800c0a4 <__ieee754_rem_pio2f+0x248>
 800bea0:	eddf 6a81 	vldreq	s13, [pc, #516]	@ 800c0a8 <__ieee754_rem_pio2f+0x24c>
 800bea4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800bea8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800beac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800beb0:	ed80 7a00 	vstr	s14, [r0]
 800beb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800beb8:	edc0 7a01 	vstr	s15, [r0, #4]
 800bebc:	2001      	movs	r0, #1
 800bebe:	b006      	add	sp, #24
 800bec0:	bd70      	pop	{r4, r5, r6, pc}
 800bec2:	4a7a      	ldr	r2, [pc, #488]	@ (800c0ac <__ieee754_rem_pio2f+0x250>)
 800bec4:	4294      	cmp	r4, r2
 800bec6:	d953      	bls.n	800bf70 <__ieee754_rem_pio2f+0x114>
 800bec8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800becc:	d249      	bcs.n	800bf62 <__ieee754_rem_pio2f+0x106>
 800bece:	15e2      	asrs	r2, r4, #23
 800bed0:	3a86      	subs	r2, #134	@ 0x86
 800bed2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800bed6:	ee07 3a90 	vmov	s15, r3
 800beda:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bede:	eddf 6a74 	vldr	s13, [pc, #464]	@ 800c0b0 <__ieee754_rem_pio2f+0x254>
 800bee2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bee6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800beea:	ed8d 7a03 	vstr	s14, [sp, #12]
 800beee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bef2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bef6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800befa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800befe:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bf02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bf06:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bf0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf0e:	edcd 7a05 	vstr	s15, [sp, #20]
 800bf12:	f040 808e 	bne.w	800c032 <__ieee754_rem_pio2f+0x1d6>
 800bf16:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bf1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf1e:	f040 808a 	bne.w	800c036 <__ieee754_rem_pio2f+0x1da>
 800bf22:	2301      	movs	r3, #1
 800bf24:	4963      	ldr	r1, [pc, #396]	@ (800c0b4 <__ieee754_rem_pio2f+0x258>)
 800bf26:	9101      	str	r1, [sp, #4]
 800bf28:	2102      	movs	r1, #2
 800bf2a:	9100      	str	r1, [sp, #0]
 800bf2c:	a803      	add	r0, sp, #12
 800bf2e:	4629      	mov	r1, r5
 800bf30:	f000 f8d2 	bl	800c0d8 <__kernel_rem_pio2f>
 800bf34:	2e00      	cmp	r6, #0
 800bf36:	dac2      	bge.n	800bebe <__ieee754_rem_pio2f+0x62>
 800bf38:	ed95 7a00 	vldr	s14, [r5]
 800bf3c:	edd5 7a01 	vldr	s15, [r5, #4]
 800bf40:	eeb1 7a47 	vneg.f32	s14, s14
 800bf44:	eef1 7a67 	vneg.f32	s15, s15
 800bf48:	ed85 7a00 	vstr	s14, [r5]
 800bf4c:	edc5 7a01 	vstr	s15, [r5, #4]
 800bf50:	4240      	negs	r0, r0
 800bf52:	e7b4      	b.n	800bebe <__ieee754_rem_pio2f+0x62>
 800bf54:	2200      	movs	r2, #0
 800bf56:	ed85 0a00 	vstr	s0, [r5]
 800bf5a:	6042      	str	r2, [r0, #4]
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	b006      	add	sp, #24
 800bf60:	bd70      	pop	{r4, r5, r6, pc}
 800bf62:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bf66:	edc0 7a01 	vstr	s15, [r0, #4]
 800bf6a:	edc0 7a00 	vstr	s15, [r0]
 800bf6e:	e7f5      	b.n	800bf5c <__ieee754_rem_pio2f+0x100>
 800bf70:	f000 f8aa 	bl	800c0c8 <fabsf>
 800bf74:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800c0b8 <__ieee754_rem_pio2f+0x25c>
 800bf78:	ed9f 6a47 	vldr	s12, [pc, #284]	@ 800c098 <__ieee754_rem_pio2f+0x23c>
 800bf7c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bf80:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bf84:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800c0a4 <__ieee754_rem_pio2f+0x248>
 800bf88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bf90:	ee17 0a90 	vmov	r0, s15
 800bf94:	eea6 0ac6 	vfms.f32	s0, s13, s12
 800bf98:	281f      	cmp	r0, #31
 800bf9a:	ee66 7a87 	vmul.f32	s15, s13, s14
 800bf9e:	eeb1 6a66 	vneg.f32	s12, s13
 800bfa2:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bfa6:	dc1e      	bgt.n	800bfe6 <__ieee754_rem_pio2f+0x18a>
 800bfa8:	4a44      	ldr	r2, [pc, #272]	@ (800c0bc <__ieee754_rem_pio2f+0x260>)
 800bfaa:	1e41      	subs	r1, r0, #1
 800bfac:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bfb0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bfb4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d014      	beq.n	800bfe6 <__ieee754_rem_pio2f+0x18a>
 800bfbc:	ed85 7a00 	vstr	s14, [r5]
 800bfc0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bfc4:	2e00      	cmp	r6, #0
 800bfc6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bfca:	ed85 0a01 	vstr	s0, [r5, #4]
 800bfce:	f6bf af76 	bge.w	800bebe <__ieee754_rem_pio2f+0x62>
 800bfd2:	eeb1 7a47 	vneg.f32	s14, s14
 800bfd6:	eeb1 0a40 	vneg.f32	s0, s0
 800bfda:	ed85 7a00 	vstr	s14, [r5]
 800bfde:	ed85 0a01 	vstr	s0, [r5, #4]
 800bfe2:	4240      	negs	r0, r0
 800bfe4:	e76b      	b.n	800bebe <__ieee754_rem_pio2f+0x62>
 800bfe6:	ee17 3a10 	vmov	r3, s14
 800bfea:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800bfee:	ebc3 53d4 	rsb	r3, r3, r4, lsr #23
 800bff2:	2b08      	cmp	r3, #8
 800bff4:	ea4f 52e4 	mov.w	r2, r4, asr #23
 800bff8:	dde0      	ble.n	800bfbc <__ieee754_rem_pio2f+0x160>
 800bffa:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800c0a0 <__ieee754_rem_pio2f+0x244>
 800bffe:	ed9f 5a2a 	vldr	s10, [pc, #168]	@ 800c0a8 <__ieee754_rem_pio2f+0x24c>
 800c002:	eef0 5a40 	vmov.f32	s11, s0
 800c006:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c00a:	ee70 7a65 	vsub.f32	s15, s0, s11
 800c00e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c012:	eed6 7a85 	vfnms.f32	s15, s13, s10
 800c016:	ee35 7ae7 	vsub.f32	s14, s11, s15
 800c01a:	ee17 3a10 	vmov	r3, s14
 800c01e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800c022:	1ad2      	subs	r2, r2, r3
 800c024:	2a19      	cmp	r2, #25
 800c026:	dc08      	bgt.n	800c03a <__ieee754_rem_pio2f+0x1de>
 800c028:	eeb0 0a65 	vmov.f32	s0, s11
 800c02c:	ed85 7a00 	vstr	s14, [r5]
 800c030:	e7c6      	b.n	800bfc0 <__ieee754_rem_pio2f+0x164>
 800c032:	2303      	movs	r3, #3
 800c034:	e776      	b.n	800bf24 <__ieee754_rem_pio2f+0xc8>
 800c036:	2302      	movs	r3, #2
 800c038:	e774      	b.n	800bf24 <__ieee754_rem_pio2f+0xc8>
 800c03a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800c0c0 <__ieee754_rem_pio2f+0x264>
 800c03e:	ed9f 5a21 	vldr	s10, [pc, #132]	@ 800c0c4 <__ieee754_rem_pio2f+0x268>
 800c042:	eeb0 0a65 	vmov.f32	s0, s11
 800c046:	eea6 0a07 	vfma.f32	s0, s12, s14
 800c04a:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800c04e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c052:	eed6 7a85 	vfnms.f32	s15, s13, s10
 800c056:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c05a:	e7af      	b.n	800bfbc <__ieee754_rem_pio2f+0x160>
 800c05c:	428a      	cmp	r2, r1
 800c05e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c062:	bf09      	itett	eq
 800c064:	ed9f 7a0e 	vldreq	s14, [pc, #56]	@ 800c0a0 <__ieee754_rem_pio2f+0x244>
 800c068:	eddf 6a0e 	vldrne	s13, [pc, #56]	@ 800c0a4 <__ieee754_rem_pio2f+0x248>
 800c06c:	eddf 6a0e 	vldreq	s13, [pc, #56]	@ 800c0a8 <__ieee754_rem_pio2f+0x24c>
 800c070:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c074:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c078:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c07c:	ed80 7a00 	vstr	s14, [r0]
 800c080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c084:	edc0 7a01 	vstr	s15, [r0, #4]
 800c088:	f04f 30ff 	mov.w	r0, #4294967295
 800c08c:	e717      	b.n	800bebe <__ieee754_rem_pio2f+0x62>
 800c08e:	bf00      	nop
 800c090:	3f490fd8 	.word	0x3f490fd8
 800c094:	4016cbe3 	.word	0x4016cbe3
 800c098:	3fc90f80 	.word	0x3fc90f80
 800c09c:	3fc90fd0 	.word	0x3fc90fd0
 800c0a0:	37354400 	.word	0x37354400
 800c0a4:	37354443 	.word	0x37354443
 800c0a8:	2e85a308 	.word	0x2e85a308
 800c0ac:	43490f80 	.word	0x43490f80
 800c0b0:	43800000 	.word	0x43800000
 800c0b4:	0800d6b0 	.word	0x0800d6b0
 800c0b8:	3f22f984 	.word	0x3f22f984
 800c0bc:	0800d630 	.word	0x0800d630
 800c0c0:	2e85a300 	.word	0x2e85a300
 800c0c4:	248d3132 	.word	0x248d3132

0800c0c8 <fabsf>:
 800c0c8:	ee10 3a10 	vmov	r3, s0
 800c0cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c0d0:	ee00 3a10 	vmov	s0, r3
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop

0800c0d8 <__kernel_rem_pio2f>:
 800c0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0dc:	ed2d 8b04 	vpush	{d8-d9}
 800c0e0:	b0db      	sub	sp, #364	@ 0x16c
 800c0e2:	461c      	mov	r4, r3
 800c0e4:	4694      	mov	ip, r2
 800c0e6:	9303      	str	r3, [sp, #12]
 800c0e8:	460a      	mov	r2, r1
 800c0ea:	4bba      	ldr	r3, [pc, #744]	@ (800c3d4 <__kernel_rem_pio2f+0x2fc>)
 800c0ec:	9968      	ldr	r1, [sp, #416]	@ 0x1a0
 800c0ee:	f11c 0f04 	cmn.w	ip, #4
 800c0f2:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
 800c0f6:	4682      	mov	sl, r0
 800c0f8:	f104 39ff 	add.w	r9, r4, #4294967295
 800c0fc:	f2c0 8256 	blt.w	800c5ac <__kernel_rem_pio2f+0x4d4>
 800c100:	f1bc 0303 	subs.w	r3, ip, #3
 800c104:	bf48      	it	mi
 800c106:	f10c 0304 	addmi.w	r3, ip, #4
 800c10a:	10db      	asrs	r3, r3, #3
 800c10c:	9302      	str	r3, [sp, #8]
 800c10e:	3301      	adds	r3, #1
 800c110:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
 800c114:	ebac 030e 	sub.w	r3, ip, lr
 800c118:	9305      	str	r3, [sp, #20]
 800c11a:	9b02      	ldr	r3, [sp, #8]
 800c11c:	eb17 0009 	adds.w	r0, r7, r9
 800c120:	eba3 0309 	sub.w	r3, r3, r9
 800c124:	d416      	bmi.n	800c154 <__kernel_rem_pio2f+0x7c>
 800c126:	3001      	adds	r0, #1
 800c128:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 800c3d8 <__kernel_rem_pio2f+0x300>
 800c12c:	9c69      	ldr	r4, [sp, #420]	@ 0x1a4
 800c12e:	4418      	add	r0, r3
 800c130:	a91e      	add	r1, sp, #120	@ 0x78
 800c132:	2b00      	cmp	r3, #0
 800c134:	bfa4      	itt	ge
 800c136:	f854 5023 	ldrge.w	r5, [r4, r3, lsl #2]
 800c13a:	ee07 5a90 	vmovge	s15, r5
 800c13e:	f103 0301 	add.w	r3, r3, #1
 800c142:	bfac      	ite	ge
 800c144:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 800c148:	eef0 7a47 	vmovlt.f32	s15, s14
 800c14c:	4283      	cmp	r3, r0
 800c14e:	ece1 7a01 	vstmia	r1!, {s15}
 800c152:	d1ee      	bne.n	800c132 <__kernel_rem_pio2f+0x5a>
 800c154:	2f00      	cmp	r7, #0
 800c156:	f2c0 82e2 	blt.w	800c71e <__kernel_rem_pio2f+0x646>
 800c15a:	9903      	ldr	r1, [sp, #12]
 800c15c:	a81e      	add	r0, sp, #120	@ 0x78
 800c15e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c162:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800c166:	187e      	adds	r6, r7, r1
 800c168:	2300      	movs	r3, #0
 800c16a:	ad46      	add	r5, sp, #280	@ 0x118
 800c16c:	464c      	mov	r4, r9
 800c16e:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800c172:	f1b9 0f00 	cmp.w	r9, #0
 800c176:	f280 80c8 	bge.w	800c30a <__kernel_rem_pio2f+0x232>
 800c17a:	3401      	adds	r4, #1
 800c17c:	42b4      	cmp	r4, r6
 800c17e:	f845 3b04 	str.w	r3, [r5], #4
 800c182:	f100 0004 	add.w	r0, r0, #4
 800c186:	d1f4      	bne.n	800c172 <__kernel_rem_pio2f+0x9a>
 800c188:	f10d 0b28 	add.w	fp, sp, #40	@ 0x28
 800c18c:	eb0b 0387 	add.w	r3, fp, r7, lsl #2
 800c190:	e9cd 2e06 	strd	r2, lr, [sp, #24]
 800c194:	3b04      	subs	r3, #4
 800c196:	ed9f 9a92 	vldr	s18, [pc, #584]	@ 800c3e0 <__kernel_rem_pio2f+0x308>
 800c19a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800c3dc <__kernel_rem_pio2f+0x304>
 800c19e:	9805      	ldr	r0, [sp, #20]
 800c1a0:	9304      	str	r3, [sp, #16]
 800c1a2:	eb0a 0408 	add.w	r4, sl, r8
 800c1a6:	ae46      	add	r6, sp, #280	@ 0x118
 800c1a8:	eb0b 0887 	add.w	r8, fp, r7, lsl #2
 800c1ac:	9700      	str	r7, [sp, #0]
 800c1ae:	f8cd c020 	str.w	ip, [sp, #32]
 800c1b2:	eb0d 0387 	add.w	r3, sp, r7, lsl #2
 800c1b6:	2f00      	cmp	r7, #0
 800c1b8:	ed93 0a46 	vldr	s0, [r3, #280]	@ 0x118
 800c1bc:	ea4f 0587 	mov.w	r5, r7, lsl #2
 800c1c0:	dd15      	ble.n	800c1ee <__kernel_rem_pio2f+0x116>
 800c1c2:	1973      	adds	r3, r6, r5
 800c1c4:	465a      	mov	r2, fp
 800c1c6:	ee60 7a09 	vmul.f32	s15, s0, s18
 800c1ca:	eeb0 7a40 	vmov.f32	s14, s0
 800c1ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c1d2:	ed73 6a01 	vldmdb	r3!, {s13}
 800c1d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1da:	42b3      	cmp	r3, r6
 800c1dc:	eea7 7ae8 	vfms.f32	s14, s15, s17
 800c1e0:	ee37 0aa6 	vadd.f32	s0, s15, s13
 800c1e4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c1e8:	eca2 7a01 	vstmia	r2!, {s14}
 800c1ec:	d1eb      	bne.n	800c1c6 <__kernel_rem_pio2f+0xee>
 800c1ee:	9001      	str	r0, [sp, #4]
 800c1f0:	f000 fab8 	bl	800c764 <scalbnf>
 800c1f4:	eef4 7a00 	vmov.f32	s15, #64	@ 0x3e000000  0.125
 800c1f8:	eeb0 8a40 	vmov.f32	s16, s0
 800c1fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c200:	f000 fb1e 	bl	800c840 <floorf>
 800c204:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c208:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c20c:	9801      	ldr	r0, [sp, #4]
 800c20e:	2800      	cmp	r0, #0
 800c210:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 800c214:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 800c218:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c21c:	f340 8082 	ble.w	800c324 <__kernel_rem_pio2f+0x24c>
 800c220:	1e79      	subs	r1, r7, #1
 800c222:	f1c0 0308 	rsb	r3, r0, #8
 800c226:	f85b e021 	ldr.w	lr, [fp, r1, lsl #2]
 800c22a:	fa4e fc03 	asr.w	ip, lr, r3
 800c22e:	fa0c f303 	lsl.w	r3, ip, r3
 800c232:	ebae 0e03 	sub.w	lr, lr, r3
 800c236:	f1c0 0207 	rsb	r2, r0, #7
 800c23a:	ee19 3a90 	vmov	r3, s19
 800c23e:	fa4e f202 	asr.w	r2, lr, r2
 800c242:	4463      	add	r3, ip
 800c244:	2a00      	cmp	r2, #0
 800c246:	ee09 3a90 	vmov	s19, r3
 800c24a:	f84b e021 	str.w	lr, [fp, r1, lsl #2]
 800c24e:	f300 80af 	bgt.w	800c3b0 <__kernel_rem_pio2f+0x2d8>
 800c252:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c25a:	d174      	bne.n	800c346 <__kernel_rem_pio2f+0x26e>
 800c25c:	9b00      	ldr	r3, [sp, #0]
 800c25e:	429f      	cmp	r7, r3
 800c260:	dd0a      	ble.n	800c278 <__kernel_rem_pio2f+0x1a0>
 800c262:	445d      	add	r5, fp
 800c264:	2300      	movs	r3, #0
 800c266:	f855 1d04 	ldr.w	r1, [r5, #-4]!
 800c26a:	4545      	cmp	r5, r8
 800c26c:	ea43 0301 	orr.w	r3, r3, r1
 800c270:	d1f9      	bne.n	800c266 <__kernel_rem_pio2f+0x18e>
 800c272:	2b00      	cmp	r3, #0
 800c274:	f040 8102 	bne.w	800c47c <__kernel_rem_pio2f+0x3a4>
 800c278:	9b00      	ldr	r3, [sp, #0]
 800c27a:	3b01      	subs	r3, #1
 800c27c:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
 800c280:	1c7b      	adds	r3, r7, #1
 800c282:	469c      	mov	ip, r3
 800c284:	2a00      	cmp	r2, #0
 800c286:	f040 80f7 	bne.w	800c478 <__kernel_rem_pio2f+0x3a0>
 800c28a:	9a04      	ldr	r2, [sp, #16]
 800c28c:	2101      	movs	r1, #1
 800c28e:	f852 5d04 	ldr.w	r5, [r2, #-4]!
 800c292:	3101      	adds	r1, #1
 800c294:	2d00      	cmp	r5, #0
 800c296:	d0fa      	beq.n	800c28e <__kernel_rem_pio2f+0x1b6>
 800c298:	4439      	add	r1, r7
 800c29a:	9d02      	ldr	r5, [sp, #8]
 800c29c:	9a03      	ldr	r2, [sp, #12]
 800c29e:	eb05 0e03 	add.w	lr, r5, r3
 800c2a2:	f10e 4e80 	add.w	lr, lr, #1073741824	@ 0x40000000
 800c2a6:	9d69      	ldr	r5, [sp, #420]	@ 0x1a4
 800c2a8:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c2ac:	443a      	add	r2, r7
 800c2ae:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 800c2b2:	ad1e      	add	r5, sp, #120	@ 0x78
 800c2b4:	eb06 0783 	add.w	r7, r6, r3, lsl #2
 800c2b8:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800c2bc:	edde 7a01 	vldr	s15, [lr, #4]
 800c2c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2c4:	f1b9 0f00 	cmp.w	r9, #0
 800c2c8:	f10e 0e04 	add.w	lr, lr, #4
 800c2cc:	ece5 7a01 	vstmia	r5!, {s15}
 800c2d0:	eddf 7a41 	vldr	s15, [pc, #260]	@ 800c3d8 <__kernel_rem_pio2f+0x300>
 800c2d4:	db09      	blt.n	800c2ea <__kernel_rem_pio2f+0x212>
 800c2d6:	462a      	mov	r2, r5
 800c2d8:	4653      	mov	r3, sl
 800c2da:	ecf3 6a01 	vldmia	r3!, {s13}
 800c2de:	ed32 7a01 	vldmdb	r2!, {s14}
 800c2e2:	42a3      	cmp	r3, r4
 800c2e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c2e8:	d1f7      	bne.n	800c2da <__kernel_rem_pio2f+0x202>
 800c2ea:	f10c 0c01 	add.w	ip, ip, #1
 800c2ee:	458c      	cmp	ip, r1
 800c2f0:	ece7 7a01 	vstmia	r7!, {s15}
 800c2f4:	dde2      	ble.n	800c2bc <__kernel_rem_pio2f+0x1e4>
 800c2f6:	460f      	mov	r7, r1
 800c2f8:	e75b      	b.n	800c1b2 <__kernel_rem_pio2f+0xda>
 800c2fa:	3401      	adds	r4, #1
 800c2fc:	42b4      	cmp	r4, r6
 800c2fe:	ece5 7a01 	vstmia	r5!, {s15}
 800c302:	f100 0004 	add.w	r0, r0, #4
 800c306:	f43f af3f 	beq.w	800c188 <__kernel_rem_pio2f+0xb0>
 800c30a:	eddf 7a33 	vldr	s15, [pc, #204]	@ 800c3d8 <__kernel_rem_pio2f+0x300>
 800c30e:	4683      	mov	fp, r0
 800c310:	4653      	mov	r3, sl
 800c312:	ecf3 6a01 	vldmia	r3!, {s13}
 800c316:	ed3b 7a01 	vldmdb	fp!, {s14}
 800c31a:	428b      	cmp	r3, r1
 800c31c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c320:	d1f7      	bne.n	800c312 <__kernel_rem_pio2f+0x23a>
 800c322:	e7ea      	b.n	800c2fa <__kernel_rem_pio2f+0x222>
 800c324:	f000 8091 	beq.w	800c44a <__kernel_rem_pio2f+0x372>
 800c328:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c32c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c334:	f280 8129 	bge.w	800c58a <__kernel_rem_pio2f+0x4b2>
 800c338:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c340:	f04f 0200 	mov.w	r2, #0
 800c344:	d08a      	beq.n	800c25c <__kernel_rem_pio2f+0x184>
 800c346:	4692      	mov	sl, r2
 800c348:	e9dd 2e06 	ldrd	r2, lr, [sp, #24]
 800c34c:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c350:	9701      	str	r7, [sp, #4]
 800c352:	ebae 000c 	sub.w	r0, lr, ip
 800c356:	eeb0 0a48 	vmov.f32	s0, s16
 800c35a:	9f00      	ldr	r7, [sp, #0]
 800c35c:	9200      	str	r2, [sp, #0]
 800c35e:	f000 fa01 	bl	800c764 <scalbnf>
 800c362:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c3dc <__kernel_rem_pio2f+0x304>
 800c366:	eeb4 0ae6 	vcmpe.f32	s0, s13
 800c36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c36e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c372:	eef0 7a40 	vmov.f32	s15, s0
 800c376:	f2c0 819c 	blt.w	800c6b2 <__kernel_rem_pio2f+0x5da>
 800c37a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c3e0 <__kernel_rem_pio2f+0x308>
 800c37e:	9905      	ldr	r1, [sp, #20]
 800c380:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c384:	3108      	adds	r1, #8
 800c386:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c38a:	9105      	str	r1, [sp, #20]
 800c38c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c390:	1c5c      	adds	r4, r3, #1
 800c392:	eee7 7a66 	vfms.f32	s15, s14, s13
 800c396:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c39a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c39e:	ee17 1a90 	vmov	r1, s15
 800c3a2:	f84b 1023 	str.w	r1, [fp, r3, lsl #2]
 800c3a6:	ee17 3a10 	vmov	r3, s14
 800c3aa:	f84b 3024 	str.w	r3, [fp, r4, lsl #2]
 800c3ae:	e07e      	b.n	800c4ae <__kernel_rem_pio2f+0x3d6>
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	2f00      	cmp	r7, #0
 800c3b4:	ee09 3a90 	vmov	s19, r3
 800c3b8:	f340 819d 	ble.w	800c6f6 <__kernel_rem_pio2f+0x61e>
 800c3bc:	4659      	mov	r1, fp
 800c3be:	f04f 0e00 	mov.w	lr, #0
 800c3c2:	f851 3b04 	ldr.w	r3, [r1], #4
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d039      	beq.n	800c43e <__kernel_rem_pio2f+0x366>
 800c3ca:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800c3ce:	f841 3c04 	str.w	r3, [r1, #-4]
 800c3d2:	e00c      	b.n	800c3ee <__kernel_rem_pio2f+0x316>
 800c3d4:	0800d9f4 	.word	0x0800d9f4
 800c3d8:	00000000 	.word	0x00000000
 800c3dc:	43800000 	.word	0x43800000
 800c3e0:	3b800000 	.word	0x3b800000
 800c3e4:	680b      	ldr	r3, [r1, #0]
 800c3e6:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800c3ea:	f841 3b04 	str.w	r3, [r1], #4
 800c3ee:	f10e 0e01 	add.w	lr, lr, #1
 800c3f2:	4577      	cmp	r7, lr
 800c3f4:	dcf6      	bgt.n	800c3e4 <__kernel_rem_pio2f+0x30c>
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	469e      	mov	lr, r3
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	dd0b      	ble.n	800c416 <__kernel_rem_pio2f+0x33e>
 800c3fe:	2801      	cmp	r0, #1
 800c400:	f000 80bb 	beq.w	800c57a <__kernel_rem_pio2f+0x4a2>
 800c404:	2802      	cmp	r0, #2
 800c406:	d106      	bne.n	800c416 <__kernel_rem_pio2f+0x33e>
 800c408:	1e79      	subs	r1, r7, #1
 800c40a:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 800c40e:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 800c412:	f84b c021 	str.w	ip, [fp, r1, lsl #2]
 800c416:	2a02      	cmp	r2, #2
 800c418:	f47f af1b 	bne.w	800c252 <__kernel_rem_pio2f+0x17a>
 800c41c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c420:	4673      	mov	r3, lr
 800c422:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c426:	2b00      	cmp	r3, #0
 800c428:	f43f af13 	beq.w	800c252 <__kernel_rem_pio2f+0x17a>
 800c42c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c42e:	9001      	str	r0, [sp, #4]
 800c430:	f000 f998 	bl	800c764 <scalbnf>
 800c434:	9801      	ldr	r0, [sp, #4]
 800c436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c438:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c43c:	e709      	b.n	800c252 <__kernel_rem_pio2f+0x17a>
 800c43e:	f10e 0e01 	add.w	lr, lr, #1
 800c442:	4577      	cmp	r7, lr
 800c444:	dcbd      	bgt.n	800c3c2 <__kernel_rem_pio2f+0x2ea>
 800c446:	469e      	mov	lr, r3
 800c448:	e7d7      	b.n	800c3fa <__kernel_rem_pio2f+0x322>
 800c44a:	1e7b      	subs	r3, r7, #1
 800c44c:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
 800c450:	11d2      	asrs	r2, r2, #7
 800c452:	2a00      	cmp	r2, #0
 800c454:	f77f aefd 	ble.w	800c252 <__kernel_rem_pio2f+0x17a>
 800c458:	ee19 3a90 	vmov	r3, s19
 800c45c:	2f00      	cmp	r7, #0
 800c45e:	f103 0301 	add.w	r3, r3, #1
 800c462:	ee09 3a90 	vmov	s19, r3
 800c466:	dca9      	bgt.n	800c3bc <__kernel_rem_pio2f+0x2e4>
 800c468:	2a02      	cmp	r2, #2
 800c46a:	f47f aef2 	bne.w	800c252 <__kernel_rem_pio2f+0x17a>
 800c46e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c472:	ee37 8ac8 	vsub.f32	s16, s15, s16
 800c476:	e6ec      	b.n	800c252 <__kernel_rem_pio2f+0x17a>
 800c478:	4619      	mov	r1, r3
 800c47a:	e70e      	b.n	800c29a <__kernel_rem_pio2f+0x1c2>
 800c47c:	463b      	mov	r3, r7
 800c47e:	4692      	mov	sl, r2
 800c480:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800c484:	1e5c      	subs	r4, r3, #1
 800c486:	f1a1 0008 	sub.w	r0, r1, #8
 800c48a:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800c48e:	9f00      	ldr	r7, [sp, #0]
 800c490:	9005      	str	r0, [sp, #20]
 800c492:	b961      	cbnz	r1, 800c4ae <__kernel_rem_pio2f+0x3d6>
 800c494:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c498:	3b01      	subs	r3, #1
 800c49a:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c49e:	4601      	mov	r1, r0
 800c4a0:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800c4a4:	3c01      	subs	r4, #1
 800c4a6:	3908      	subs	r1, #8
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	d0f9      	beq.n	800c4a0 <__kernel_rem_pio2f+0x3c8>
 800c4ac:	9105      	str	r1, [sp, #20]
 800c4ae:	9805      	ldr	r0, [sp, #20]
 800c4b0:	9200      	str	r2, [sp, #0]
 800c4b2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c4b6:	f000 f955 	bl	800c764 <scalbnf>
 800c4ba:	2c00      	cmp	r4, #0
 800c4bc:	9a00      	ldr	r2, [sp, #0]
 800c4be:	eeb0 7a40 	vmov.f32	s14, s0
 800c4c2:	f2c0 8122 	blt.w	800c70a <__kernel_rem_pio2f+0x632>
 800c4c6:	1c60      	adds	r0, r4, #1
 800c4c8:	ad46      	add	r5, sp, #280	@ 0x118
 800c4ca:	ed5f 6a3b 	vldr	s13, [pc, #-236]	@ 800c3e0 <__kernel_rem_pio2f+0x308>
 800c4ce:	0081      	lsls	r1, r0, #2
 800c4d0:	eb0b 0380 	add.w	r3, fp, r0, lsl #2
 800c4d4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800c4d8:	ed73 7a01 	vldmdb	r3!, {s15}
 800c4dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4e0:	455b      	cmp	r3, fp
 800c4e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4e6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c4ea:	ed60 7a01 	vstmdb	r0!, {s15}
 800c4ee:	d1f3      	bne.n	800c4d8 <__kernel_rem_pio2f+0x400>
 800c4f0:	f10d 08c8 	add.w	r8, sp, #200	@ 0xc8
 800c4f4:	1f0e      	subs	r6, r1, #4
 800c4f6:	442e      	add	r6, r5
 800c4f8:	46c6      	mov	lr, r8
 800c4fa:	46a4      	mov	ip, r4
 800c4fc:	2500      	movs	r5, #0
 800c4fe:	2f00      	cmp	r7, #0
 800c500:	db7d      	blt.n	800c5fe <__kernel_rem_pio2f+0x526>
 800c502:	f8df 925c 	ldr.w	r9, [pc, #604]	@ 800c760 <__kernel_rem_pio2f+0x688>
 800c506:	eddf 7a95 	vldr	s15, [pc, #596]	@ 800c75c <__kernel_rem_pio2f+0x684>
 800c50a:	4630      	mov	r0, r6
 800c50c:	2300      	movs	r3, #0
 800c50e:	e007      	b.n	800c520 <__kernel_rem_pio2f+0x448>
 800c510:	ecf9 6a01 	vldmia	r9!, {s13}
 800c514:	ecb0 7a01 	vldmia	r0!, {s14}
 800c518:	429f      	cmp	r7, r3
 800c51a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c51e:	db03      	blt.n	800c528 <__kernel_rem_pio2f+0x450>
 800c520:	42ab      	cmp	r3, r5
 800c522:	f103 0301 	add.w	r3, r3, #1
 800c526:	ddf3      	ble.n	800c510 <__kernel_rem_pio2f+0x438>
 800c528:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c52c:	f1bc 3fff 	cmp.w	ip, #4294967295
 800c530:	ecee 7a01 	vstmia	lr!, {s15}
 800c534:	f105 0501 	add.w	r5, r5, #1
 800c538:	f1a6 0604 	sub.w	r6, r6, #4
 800c53c:	d1e1      	bne.n	800c502 <__kernel_rem_pio2f+0x42a>
 800c53e:	9b68      	ldr	r3, [sp, #416]	@ 0x1a0
 800c540:	2b02      	cmp	r3, #2
 800c542:	dc6a      	bgt.n	800c61a <__kernel_rem_pio2f+0x542>
 800c544:	2b00      	cmp	r3, #0
 800c546:	dc36      	bgt.n	800c5b6 <__kernel_rem_pio2f+0x4de>
 800c548:	d10e      	bne.n	800c568 <__kernel_rem_pio2f+0x490>
 800c54a:	eddf 7a84 	vldr	s15, [pc, #528]	@ 800c75c <__kernel_rem_pio2f+0x684>
 800c54e:	4441      	add	r1, r8
 800c550:	ed31 7a01 	vldmdb	r1!, {s14}
 800c554:	4541      	cmp	r1, r8
 800c556:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c55a:	d1f9      	bne.n	800c550 <__kernel_rem_pio2f+0x478>
 800c55c:	4653      	mov	r3, sl
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f040 80c6 	bne.w	800c6f0 <__kernel_rem_pio2f+0x618>
 800c564:	edc2 7a00 	vstr	s15, [r2]
 800c568:	ee19 3a90 	vmov	r3, s19
 800c56c:	f003 0007 	and.w	r0, r3, #7
 800c570:	b05b      	add	sp, #364	@ 0x16c
 800c572:	ecbd 8b04 	vpop	{d8-d9}
 800c576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c57a:	1e79      	subs	r1, r7, #1
 800c57c:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 800c580:	f003 0c7f 	and.w	ip, r3, #127	@ 0x7f
 800c584:	f84b c021 	str.w	ip, [fp, r1, lsl #2]
 800c588:	e745      	b.n	800c416 <__kernel_rem_pio2f+0x33e>
 800c58a:	ee19 3a90 	vmov	r3, s19
 800c58e:	2f00      	cmp	r7, #0
 800c590:	f103 0301 	add.w	r3, r3, #1
 800c594:	ee09 3a90 	vmov	s19, r3
 800c598:	bfc8      	it	gt
 800c59a:	2202      	movgt	r2, #2
 800c59c:	f73f af0e 	bgt.w	800c3bc <__kernel_rem_pio2f+0x2e4>
 800c5a0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c5a4:	ee37 8ac8 	vsub.f32	s16, s15, s16
 800c5a8:	2202      	movs	r2, #2
 800c5aa:	e652      	b.n	800c252 <__kernel_rem_pio2f+0x17a>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f04f 0e08 	mov.w	lr, #8
 800c5b2:	9302      	str	r3, [sp, #8]
 800c5b4:	e5ae      	b.n	800c114 <__kernel_rem_pio2f+0x3c>
 800c5b6:	eddd 7a32 	vldr	s15, [sp, #200]	@ 0xc8
 800c5ba:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c75c <__kernel_rem_pio2f+0x684>
 800c5be:	4441      	add	r1, r8
 800c5c0:	ed71 6a01 	vldmdb	r1!, {s13}
 800c5c4:	4541      	cmp	r1, r8
 800c5c6:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c5ca:	d1f9      	bne.n	800c5c0 <__kernel_rem_pio2f+0x4e8>
 800c5cc:	4653      	mov	r3, sl
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f040 8084 	bne.w	800c6dc <__kernel_rem_pio2f+0x604>
 800c5d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5d8:	ed82 7a00 	vstr	s14, [r2]
 800c5dc:	b164      	cbz	r4, 800c5f8 <__kernel_rem_pio2f+0x520>
 800c5de:	a933      	add	r1, sp, #204	@ 0xcc
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	ecb1 7a01 	vldmia	r1!, {s14}
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	429c      	cmp	r4, r3
 800c5ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5ee:	daf8      	bge.n	800c5e2 <__kernel_rem_pio2f+0x50a>
 800c5f0:	4653      	mov	r3, sl
 800c5f2:	b10b      	cbz	r3, 800c5f8 <__kernel_rem_pio2f+0x520>
 800c5f4:	eef1 7a67 	vneg.f32	s15, s15
 800c5f8:	edc2 7a01 	vstr	s15, [r2, #4]
 800c5fc:	e7b4      	b.n	800c568 <__kernel_rem_pio2f+0x490>
 800c5fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c602:	2300      	movs	r3, #0
 800c604:	f1bc 3fff 	cmp.w	ip, #4294967295
 800c608:	f84e 3b04 	str.w	r3, [lr], #4
 800c60c:	f105 0501 	add.w	r5, r5, #1
 800c610:	f1a6 0604 	sub.w	r6, r6, #4
 800c614:	f47f af73 	bne.w	800c4fe <__kernel_rem_pio2f+0x426>
 800c618:	e791      	b.n	800c53e <__kernel_rem_pio2f+0x466>
 800c61a:	9b68      	ldr	r3, [sp, #416]	@ 0x1a0
 800c61c:	2b03      	cmp	r3, #3
 800c61e:	d1a3      	bne.n	800c568 <__kernel_rem_pio2f+0x490>
 800c620:	2c00      	cmp	r4, #0
 800c622:	f000 808c 	beq.w	800c73e <__kernel_rem_pio2f+0x666>
 800c626:	eb08 0584 	add.w	r5, r8, r4, lsl #2
 800c62a:	ed95 7a00 	vldr	s14, [r5]
 800c62e:	00a0      	lsls	r0, r4, #2
 800c630:	462b      	mov	r3, r5
 800c632:	4629      	mov	r1, r5
 800c634:	ed71 7a01 	vldmdb	r1!, {s15}
 800c638:	eef0 6a47 	vmov.f32	s13, s14
 800c63c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c640:	4541      	cmp	r1, r8
 800c642:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c646:	ed81 7a00 	vstr	s14, [r1]
 800c64a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c64e:	edc1 7a01 	vstr	s15, [r1, #4]
 800c652:	d1ef      	bne.n	800c634 <__kernel_rem_pio2f+0x55c>
 800c654:	2c01      	cmp	r4, #1
 800c656:	d072      	beq.n	800c73e <__kernel_rem_pio2f+0x666>
 800c658:	ed95 7a00 	vldr	s14, [r5]
 800c65c:	f108 0104 	add.w	r1, r8, #4
 800c660:	ed73 7a01 	vldmdb	r3!, {s15}
 800c664:	eef0 6a47 	vmov.f32	s13, s14
 800c668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c66c:	4299      	cmp	r1, r3
 800c66e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c672:	ed83 7a00 	vstr	s14, [r3]
 800c676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c67a:	edc3 7a01 	vstr	s15, [r3, #4]
 800c67e:	d1ef      	bne.n	800c660 <__kernel_rem_pio2f+0x588>
 800c680:	1d03      	adds	r3, r0, #4
 800c682:	eddf 7a36 	vldr	s15, [pc, #216]	@ 800c75c <__kernel_rem_pio2f+0x684>
 800c686:	4443      	add	r3, r8
 800c688:	f108 0808 	add.w	r8, r8, #8
 800c68c:	ed33 7a01 	vldmdb	r3!, {s14}
 800c690:	4598      	cmp	r8, r3
 800c692:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c696:	d1f9      	bne.n	800c68c <__kernel_rem_pio2f+0x5b4>
 800c698:	4653      	mov	r3, sl
 800c69a:	eddd 6a32 	vldr	s13, [sp, #200]	@ 0xc8
 800c69e:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 800c6a2:	b973      	cbnz	r3, 800c6c2 <__kernel_rem_pio2f+0x5ea>
 800c6a4:	edc2 6a00 	vstr	s13, [r2]
 800c6a8:	ed82 7a01 	vstr	s14, [r2, #4]
 800c6ac:	edc2 7a02 	vstr	s15, [r2, #8]
 800c6b0:	e75a      	b.n	800c568 <__kernel_rem_pio2f+0x490>
 800c6b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c6b6:	461c      	mov	r4, r3
 800c6b8:	ee17 1a90 	vmov	r1, s15
 800c6bc:	f84b 1023 	str.w	r1, [fp, r3, lsl #2]
 800c6c0:	e6f5      	b.n	800c4ae <__kernel_rem_pio2f+0x3d6>
 800c6c2:	eef1 6a66 	vneg.f32	s13, s13
 800c6c6:	eeb1 7a47 	vneg.f32	s14, s14
 800c6ca:	eef1 7a67 	vneg.f32	s15, s15
 800c6ce:	edc2 6a00 	vstr	s13, [r2]
 800c6d2:	ed82 7a01 	vstr	s14, [r2, #4]
 800c6d6:	edc2 7a02 	vstr	s15, [r2, #8]
 800c6da:	e745      	b.n	800c568 <__kernel_rem_pio2f+0x490>
 800c6dc:	eef1 6a47 	vneg.f32	s13, s14
 800c6e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6e4:	edc2 6a00 	vstr	s13, [r2]
 800c6e8:	2c00      	cmp	r4, #0
 800c6ea:	f47f af78 	bne.w	800c5de <__kernel_rem_pio2f+0x506>
 800c6ee:	e781      	b.n	800c5f4 <__kernel_rem_pio2f+0x51c>
 800c6f0:	eef1 7a67 	vneg.f32	s15, s15
 800c6f4:	e736      	b.n	800c564 <__kernel_rem_pio2f+0x48c>
 800c6f6:	2801      	cmp	r0, #1
 800c6f8:	d015      	beq.n	800c726 <__kernel_rem_pio2f+0x64e>
 800c6fa:	2802      	cmp	r0, #2
 800c6fc:	f47f aeb4 	bne.w	800c468 <__kernel_rem_pio2f+0x390>
 800c700:	f00e 033f 	and.w	r3, lr, #63	@ 0x3f
 800c704:	f84b 3021 	str.w	r3, [fp, r1, lsl #2]
 800c708:	e6ae      	b.n	800c468 <__kernel_rem_pio2f+0x390>
 800c70a:	9b68      	ldr	r3, [sp, #416]	@ 0x1a0
 800c70c:	2b02      	cmp	r3, #2
 800c70e:	dc12      	bgt.n	800c736 <__kernel_rem_pio2f+0x65e>
 800c710:	2b00      	cmp	r3, #0
 800c712:	dc17      	bgt.n	800c744 <__kernel_rem_pio2f+0x66c>
 800c714:	f47f af28 	bne.w	800c568 <__kernel_rem_pio2f+0x490>
 800c718:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800c75c <__kernel_rem_pio2f+0x684>
 800c71c:	e71e      	b.n	800c55c <__kernel_rem_pio2f+0x484>
 800c71e:	9b03      	ldr	r3, [sp, #12]
 800c720:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800c724:	e530      	b.n	800c188 <__kernel_rem_pio2f+0xb0>
 800c726:	f00e 037f 	and.w	r3, lr, #127	@ 0x7f
 800c72a:	2a02      	cmp	r2, #2
 800c72c:	f84b 3021 	str.w	r3, [fp, r1, lsl #2]
 800c730:	f47f ad8f 	bne.w	800c252 <__kernel_rem_pio2f+0x17a>
 800c734:	e69b      	b.n	800c46e <__kernel_rem_pio2f+0x396>
 800c736:	9b68      	ldr	r3, [sp, #416]	@ 0x1a0
 800c738:	2b03      	cmp	r3, #3
 800c73a:	f47f af15 	bne.w	800c568 <__kernel_rem_pio2f+0x490>
 800c73e:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800c75c <__kernel_rem_pio2f+0x684>
 800c742:	e7a9      	b.n	800c698 <__kernel_rem_pio2f+0x5c0>
 800c744:	4653      	mov	r3, sl
 800c746:	eddd 7a32 	vldr	s15, [sp, #200]	@ 0xc8
 800c74a:	b11b      	cbz	r3, 800c754 <__kernel_rem_pio2f+0x67c>
 800c74c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c750:	6013      	str	r3, [r2, #0]
 800c752:	e74f      	b.n	800c5f4 <__kernel_rem_pio2f+0x51c>
 800c754:	2300      	movs	r3, #0
 800c756:	6013      	str	r3, [r2, #0]
 800c758:	e74e      	b.n	800c5f8 <__kernel_rem_pio2f+0x520>
 800c75a:	bf00      	nop
 800c75c:	00000000 	.word	0x00000000
 800c760:	0800d9c8 	.word	0x0800d9c8

0800c764 <scalbnf>:
 800c764:	ee10 3a10 	vmov	r3, s0
 800c768:	f033 4100 	bics.w	r1, r3, #2147483648	@ 0x80000000
 800c76c:	461a      	mov	r2, r3
 800c76e:	d025      	beq.n	800c7bc <scalbnf+0x58>
 800c770:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c774:	d21f      	bcs.n	800c7b6 <scalbnf+0x52>
 800c776:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c77a:	d120      	bne.n	800c7be <scalbnf+0x5a>
 800c77c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800c824 <scalbnf+0xc0>
 800c780:	4a29      	ldr	r2, [pc, #164]	@ (800c828 <scalbnf+0xc4>)
 800c782:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c786:	4290      	cmp	r0, r2
 800c788:	ee17 3a90 	vmov	r3, s15
 800c78c:	db31      	blt.n	800c7f2 <scalbnf+0x8e>
 800c78e:	f24c 3c50 	movw	ip, #50000	@ 0xc350
 800c792:	f3c3 51c7 	ubfx	r1, r3, #23, #8
 800c796:	4560      	cmp	r0, ip
 800c798:	461a      	mov	r2, r3
 800c79a:	f1a1 0119 	sub.w	r1, r1, #25
 800c79e:	dd14      	ble.n	800c7ca <scalbnf+0x66>
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	eddf 7a22 	vldr	s15, [pc, #136]	@ 800c82c <scalbnf+0xc8>
 800c7a6:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 800c82c <scalbnf+0xc8>
 800c7aa:	bfb8      	it	lt
 800c7ac:	eddf 7a20 	vldrlt	s15, [pc, #128]	@ 800c830 <scalbnf+0xcc>
 800c7b0:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c7b4:	4770      	bx	lr
 800c7b6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7ba:	4770      	bx	lr
 800c7bc:	4770      	bx	lr
 800c7be:	f24c 3c50 	movw	ip, #50000	@ 0xc350
 800c7c2:	4560      	cmp	r0, ip
 800c7c4:	ea4f 51d1 	mov.w	r1, r1, lsr #23
 800c7c8:	dcea      	bgt.n	800c7a0 <scalbnf+0x3c>
 800c7ca:	4401      	add	r1, r0
 800c7cc:	29fe      	cmp	r1, #254	@ 0xfe
 800c7ce:	dce7      	bgt.n	800c7a0 <scalbnf+0x3c>
 800c7d0:	2900      	cmp	r1, #0
 800c7d2:	dc15      	bgt.n	800c800 <scalbnf+0x9c>
 800c7d4:	f111 0f16 	cmn.w	r1, #22
 800c7d8:	db19      	blt.n	800c80e <scalbnf+0xaa>
 800c7da:	3119      	adds	r1, #25
 800c7dc:	f022 42ff 	bic.w	r2, r2, #2139095040	@ 0x7f800000
 800c7e0:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800c7e4:	ee07 2a90 	vmov	s15, r2
 800c7e8:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 800c834 <scalbnf+0xd0>
 800c7ec:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c7f0:	4770      	bx	lr
 800c7f2:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800c838 <scalbnf+0xd4>
 800c7f6:	ee07 3a10 	vmov	s14, r3
 800c7fa:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c7fe:	4770      	bx	lr
 800c800:	f022 42ff 	bic.w	r2, r2, #2139095040	@ 0x7f800000
 800c804:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 800c808:	ee00 3a10 	vmov	s0, r3
 800c80c:	4770      	bx	lr
 800c80e:	2b00      	cmp	r3, #0
 800c810:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800c838 <scalbnf+0xd4>
 800c814:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c838 <scalbnf+0xd4>
 800c818:	bfb8      	it	lt
 800c81a:	eddf 7a08 	vldrlt	s15, [pc, #32]	@ 800c83c <scalbnf+0xd8>
 800c81e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c822:	4770      	bx	lr
 800c824:	4c000000 	.word	0x4c000000
 800c828:	ffff3cb0 	.word	0xffff3cb0
 800c82c:	7149f2ca 	.word	0x7149f2ca
 800c830:	f149f2ca 	.word	0xf149f2ca
 800c834:	33000000 	.word	0x33000000
 800c838:	0da24260 	.word	0x0da24260
 800c83c:	8da24260 	.word	0x8da24260

0800c840 <floorf>:
 800c840:	ee10 2a10 	vmov	r2, s0
 800c844:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800c848:	3b7f      	subs	r3, #127	@ 0x7f
 800c84a:	2b16      	cmp	r3, #22
 800c84c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c850:	dc1b      	bgt.n	800c88a <floorf+0x4a>
 800c852:	2b00      	cmp	r3, #0
 800c854:	4610      	mov	r0, r2
 800c856:	db1e      	blt.n	800c896 <floorf+0x56>
 800c858:	491a      	ldr	r1, [pc, #104]	@ (800c8c4 <floorf+0x84>)
 800c85a:	4119      	asrs	r1, r3
 800c85c:	420a      	tst	r2, r1
 800c85e:	d023      	beq.n	800c8a8 <floorf+0x68>
 800c860:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c8c8 <floorf+0x88>
 800c864:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c868:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c870:	dd1a      	ble.n	800c8a8 <floorf+0x68>
 800c872:	2a00      	cmp	r2, #0
 800c874:	da04      	bge.n	800c880 <floorf+0x40>
 800c876:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800c87a:	fa42 f303 	asr.w	r3, r2, r3
 800c87e:	4418      	add	r0, r3
 800c880:	ea20 0301 	bic.w	r3, r0, r1
 800c884:	ee00 3a10 	vmov	s0, r3
 800c888:	4770      	bx	lr
 800c88a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c88e:	d30b      	bcc.n	800c8a8 <floorf+0x68>
 800c890:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c894:	4770      	bx	lr
 800c896:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c8c8 <floorf+0x88>
 800c89a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c89e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8a6:	dc00      	bgt.n	800c8aa <floorf+0x6a>
 800c8a8:	4770      	bx	lr
 800c8aa:	2a00      	cmp	r2, #0
 800c8ac:	db02      	blt.n	800c8b4 <floorf+0x74>
 800c8ae:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800c8cc <floorf+0x8c>
 800c8b2:	4770      	bx	lr
 800c8b4:	b911      	cbnz	r1, 800c8bc <floorf+0x7c>
 800c8b6:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800c8d0 <floorf+0x90>
 800c8ba:	4770      	bx	lr
 800c8bc:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800c8c0:	e7f2      	b.n	800c8a8 <floorf+0x68>
 800c8c2:	bf00      	nop
 800c8c4:	007fffff 	.word	0x007fffff
 800c8c8:	7149f2ca 	.word	0x7149f2ca
 800c8cc:	00000000 	.word	0x00000000
 800c8d0:	80000000 	.word	0x80000000

0800c8d4 <__udivmoddi4>:
 800c8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d8:	9d08      	ldr	r5, [sp, #32]
 800c8da:	460f      	mov	r7, r1
 800c8dc:	4604      	mov	r4, r0
 800c8de:	468c      	mov	ip, r1
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d148      	bne.n	800c976 <__udivmoddi4+0xa2>
 800c8e4:	428a      	cmp	r2, r1
 800c8e6:	4616      	mov	r6, r2
 800c8e8:	d961      	bls.n	800c9ae <__udivmoddi4+0xda>
 800c8ea:	fab2 f382 	clz	r3, r2
 800c8ee:	b14b      	cbz	r3, 800c904 <__udivmoddi4+0x30>
 800c8f0:	f1c3 0220 	rsb	r2, r3, #32
 800c8f4:	fa01 fc03 	lsl.w	ip, r1, r3
 800c8f8:	fa20 f202 	lsr.w	r2, r0, r2
 800c8fc:	409e      	lsls	r6, r3
 800c8fe:	ea42 0c0c 	orr.w	ip, r2, ip
 800c902:	409c      	lsls	r4, r3
 800c904:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800c908:	b2b7      	uxth	r7, r6
 800c90a:	fbbc f1fe 	udiv	r1, ip, lr
 800c90e:	0c22      	lsrs	r2, r4, #16
 800c910:	fb0e cc11 	mls	ip, lr, r1, ip
 800c914:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800c918:	fb01 f007 	mul.w	r0, r1, r7
 800c91c:	4290      	cmp	r0, r2
 800c91e:	d909      	bls.n	800c934 <__udivmoddi4+0x60>
 800c920:	18b2      	adds	r2, r6, r2
 800c922:	f101 3cff 	add.w	ip, r1, #4294967295
 800c926:	f080 80ee 	bcs.w	800cb06 <__udivmoddi4+0x232>
 800c92a:	4290      	cmp	r0, r2
 800c92c:	f240 80eb 	bls.w	800cb06 <__udivmoddi4+0x232>
 800c930:	3902      	subs	r1, #2
 800c932:	4432      	add	r2, r6
 800c934:	1a12      	subs	r2, r2, r0
 800c936:	b2a4      	uxth	r4, r4
 800c938:	fbb2 f0fe 	udiv	r0, r2, lr
 800c93c:	fb0e 2210 	mls	r2, lr, r0, r2
 800c940:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c944:	fb00 f707 	mul.w	r7, r0, r7
 800c948:	42a7      	cmp	r7, r4
 800c94a:	d909      	bls.n	800c960 <__udivmoddi4+0x8c>
 800c94c:	1934      	adds	r4, r6, r4
 800c94e:	f100 32ff 	add.w	r2, r0, #4294967295
 800c952:	f080 80da 	bcs.w	800cb0a <__udivmoddi4+0x236>
 800c956:	42a7      	cmp	r7, r4
 800c958:	f240 80d7 	bls.w	800cb0a <__udivmoddi4+0x236>
 800c95c:	4434      	add	r4, r6
 800c95e:	3802      	subs	r0, #2
 800c960:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800c964:	1be4      	subs	r4, r4, r7
 800c966:	2100      	movs	r1, #0
 800c968:	b11d      	cbz	r5, 800c972 <__udivmoddi4+0x9e>
 800c96a:	40dc      	lsrs	r4, r3
 800c96c:	2300      	movs	r3, #0
 800c96e:	e9c5 4300 	strd	r4, r3, [r5]
 800c972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c976:	428b      	cmp	r3, r1
 800c978:	d906      	bls.n	800c988 <__udivmoddi4+0xb4>
 800c97a:	b10d      	cbz	r5, 800c980 <__udivmoddi4+0xac>
 800c97c:	e9c5 0100 	strd	r0, r1, [r5]
 800c980:	2100      	movs	r1, #0
 800c982:	4608      	mov	r0, r1
 800c984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c988:	fab3 f183 	clz	r1, r3
 800c98c:	2900      	cmp	r1, #0
 800c98e:	d148      	bne.n	800ca22 <__udivmoddi4+0x14e>
 800c990:	42bb      	cmp	r3, r7
 800c992:	d302      	bcc.n	800c99a <__udivmoddi4+0xc6>
 800c994:	4282      	cmp	r2, r0
 800c996:	f200 8107 	bhi.w	800cba8 <__udivmoddi4+0x2d4>
 800c99a:	1a84      	subs	r4, r0, r2
 800c99c:	eb67 0203 	sbc.w	r2, r7, r3
 800c9a0:	2001      	movs	r0, #1
 800c9a2:	4694      	mov	ip, r2
 800c9a4:	2d00      	cmp	r5, #0
 800c9a6:	d0e4      	beq.n	800c972 <__udivmoddi4+0x9e>
 800c9a8:	e9c5 4c00 	strd	r4, ip, [r5]
 800c9ac:	e7e1      	b.n	800c972 <__udivmoddi4+0x9e>
 800c9ae:	2a00      	cmp	r2, #0
 800c9b0:	f000 8092 	beq.w	800cad8 <__udivmoddi4+0x204>
 800c9b4:	fab2 f382 	clz	r3, r2
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f040 80a8 	bne.w	800cb0e <__udivmoddi4+0x23a>
 800c9be:	1a8a      	subs	r2, r1, r2
 800c9c0:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800c9c4:	fa1f fc86 	uxth.w	ip, r6
 800c9c8:	2101      	movs	r1, #1
 800c9ca:	0c20      	lsrs	r0, r4, #16
 800c9cc:	fbb2 f7fe 	udiv	r7, r2, lr
 800c9d0:	fb0e 2217 	mls	r2, lr, r7, r2
 800c9d4:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800c9d8:	fb0c f007 	mul.w	r0, ip, r7
 800c9dc:	4290      	cmp	r0, r2
 800c9de:	d907      	bls.n	800c9f0 <__udivmoddi4+0x11c>
 800c9e0:	18b2      	adds	r2, r6, r2
 800c9e2:	f107 38ff 	add.w	r8, r7, #4294967295
 800c9e6:	d202      	bcs.n	800c9ee <__udivmoddi4+0x11a>
 800c9e8:	4290      	cmp	r0, r2
 800c9ea:	f200 80e2 	bhi.w	800cbb2 <__udivmoddi4+0x2de>
 800c9ee:	4647      	mov	r7, r8
 800c9f0:	1a12      	subs	r2, r2, r0
 800c9f2:	b2a4      	uxth	r4, r4
 800c9f4:	fbb2 f0fe 	udiv	r0, r2, lr
 800c9f8:	fb0e 2210 	mls	r2, lr, r0, r2
 800c9fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ca00:	fb0c fc00 	mul.w	ip, ip, r0
 800ca04:	45a4      	cmp	ip, r4
 800ca06:	d907      	bls.n	800ca18 <__udivmoddi4+0x144>
 800ca08:	1934      	adds	r4, r6, r4
 800ca0a:	f100 32ff 	add.w	r2, r0, #4294967295
 800ca0e:	d202      	bcs.n	800ca16 <__udivmoddi4+0x142>
 800ca10:	45a4      	cmp	ip, r4
 800ca12:	f200 80cb 	bhi.w	800cbac <__udivmoddi4+0x2d8>
 800ca16:	4610      	mov	r0, r2
 800ca18:	eba4 040c 	sub.w	r4, r4, ip
 800ca1c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800ca20:	e7a2      	b.n	800c968 <__udivmoddi4+0x94>
 800ca22:	f1c1 0620 	rsb	r6, r1, #32
 800ca26:	408b      	lsls	r3, r1
 800ca28:	fa22 fc06 	lsr.w	ip, r2, r6
 800ca2c:	ea4c 0c03 	orr.w	ip, ip, r3
 800ca30:	fa07 f401 	lsl.w	r4, r7, r1
 800ca34:	fa20 f306 	lsr.w	r3, r0, r6
 800ca38:	40f7      	lsrs	r7, r6
 800ca3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800ca3e:	4323      	orrs	r3, r4
 800ca40:	fa00 f801 	lsl.w	r8, r0, r1
 800ca44:	fa1f fe8c 	uxth.w	lr, ip
 800ca48:	fbb7 f0f9 	udiv	r0, r7, r9
 800ca4c:	0c1c      	lsrs	r4, r3, #16
 800ca4e:	fb09 7710 	mls	r7, r9, r0, r7
 800ca52:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800ca56:	fb00 f70e 	mul.w	r7, r0, lr
 800ca5a:	42a7      	cmp	r7, r4
 800ca5c:	fa02 f201 	lsl.w	r2, r2, r1
 800ca60:	d90a      	bls.n	800ca78 <__udivmoddi4+0x1a4>
 800ca62:	eb1c 0404 	adds.w	r4, ip, r4
 800ca66:	f100 3aff 	add.w	sl, r0, #4294967295
 800ca6a:	f080 809b 	bcs.w	800cba4 <__udivmoddi4+0x2d0>
 800ca6e:	42a7      	cmp	r7, r4
 800ca70:	f240 8098 	bls.w	800cba4 <__udivmoddi4+0x2d0>
 800ca74:	3802      	subs	r0, #2
 800ca76:	4464      	add	r4, ip
 800ca78:	1be4      	subs	r4, r4, r7
 800ca7a:	b29f      	uxth	r7, r3
 800ca7c:	fbb4 f3f9 	udiv	r3, r4, r9
 800ca80:	fb09 4413 	mls	r4, r9, r3, r4
 800ca84:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 800ca88:	fb03 fe0e 	mul.w	lr, r3, lr
 800ca8c:	45a6      	cmp	lr, r4
 800ca8e:	d909      	bls.n	800caa4 <__udivmoddi4+0x1d0>
 800ca90:	eb1c 0404 	adds.w	r4, ip, r4
 800ca94:	f103 37ff 	add.w	r7, r3, #4294967295
 800ca98:	f080 8082 	bcs.w	800cba0 <__udivmoddi4+0x2cc>
 800ca9c:	45a6      	cmp	lr, r4
 800ca9e:	d97f      	bls.n	800cba0 <__udivmoddi4+0x2cc>
 800caa0:	3b02      	subs	r3, #2
 800caa2:	4464      	add	r4, ip
 800caa4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800caa8:	eba4 040e 	sub.w	r4, r4, lr
 800caac:	fba0 e702 	umull	lr, r7, r0, r2
 800cab0:	42bc      	cmp	r4, r7
 800cab2:	4673      	mov	r3, lr
 800cab4:	46b9      	mov	r9, r7
 800cab6:	d363      	bcc.n	800cb80 <__udivmoddi4+0x2ac>
 800cab8:	d060      	beq.n	800cb7c <__udivmoddi4+0x2a8>
 800caba:	b15d      	cbz	r5, 800cad4 <__udivmoddi4+0x200>
 800cabc:	ebb8 0203 	subs.w	r2, r8, r3
 800cac0:	eb64 0409 	sbc.w	r4, r4, r9
 800cac4:	fa04 f606 	lsl.w	r6, r4, r6
 800cac8:	fa22 f301 	lsr.w	r3, r2, r1
 800cacc:	431e      	orrs	r6, r3
 800cace:	40cc      	lsrs	r4, r1
 800cad0:	e9c5 6400 	strd	r6, r4, [r5]
 800cad4:	2100      	movs	r1, #0
 800cad6:	e74c      	b.n	800c972 <__udivmoddi4+0x9e>
 800cad8:	0862      	lsrs	r2, r4, #1
 800cada:	0848      	lsrs	r0, r1, #1
 800cadc:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 800cae0:	0c0b      	lsrs	r3, r1, #16
 800cae2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cae6:	b28a      	uxth	r2, r1
 800cae8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800caec:	fbb3 f1f6 	udiv	r1, r3, r6
 800caf0:	07e4      	lsls	r4, r4, #31
 800caf2:	46b4      	mov	ip, r6
 800caf4:	4637      	mov	r7, r6
 800caf6:	46b6      	mov	lr, r6
 800caf8:	231f      	movs	r3, #31
 800cafa:	fbb0 f0f6 	udiv	r0, r0, r6
 800cafe:	1bd2      	subs	r2, r2, r7
 800cb00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cb04:	e761      	b.n	800c9ca <__udivmoddi4+0xf6>
 800cb06:	4661      	mov	r1, ip
 800cb08:	e714      	b.n	800c934 <__udivmoddi4+0x60>
 800cb0a:	4610      	mov	r0, r2
 800cb0c:	e728      	b.n	800c960 <__udivmoddi4+0x8c>
 800cb0e:	f1c3 0120 	rsb	r1, r3, #32
 800cb12:	fa20 f201 	lsr.w	r2, r0, r1
 800cb16:	409e      	lsls	r6, r3
 800cb18:	fa27 f101 	lsr.w	r1, r7, r1
 800cb1c:	409f      	lsls	r7, r3
 800cb1e:	433a      	orrs	r2, r7
 800cb20:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800cb24:	fa1f fc86 	uxth.w	ip, r6
 800cb28:	fbb1 f7fe 	udiv	r7, r1, lr
 800cb2c:	fb0e 1017 	mls	r0, lr, r7, r1
 800cb30:	0c11      	lsrs	r1, r2, #16
 800cb32:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cb36:	fb07 f80c 	mul.w	r8, r7, ip
 800cb3a:	4588      	cmp	r8, r1
 800cb3c:	fa04 f403 	lsl.w	r4, r4, r3
 800cb40:	d93a      	bls.n	800cbb8 <__udivmoddi4+0x2e4>
 800cb42:	1871      	adds	r1, r6, r1
 800cb44:	f107 30ff 	add.w	r0, r7, #4294967295
 800cb48:	d201      	bcs.n	800cb4e <__udivmoddi4+0x27a>
 800cb4a:	4588      	cmp	r8, r1
 800cb4c:	d81f      	bhi.n	800cb8e <__udivmoddi4+0x2ba>
 800cb4e:	eba1 0108 	sub.w	r1, r1, r8
 800cb52:	fbb1 f8fe 	udiv	r8, r1, lr
 800cb56:	fb08 f70c 	mul.w	r7, r8, ip
 800cb5a:	fb0e 1118 	mls	r1, lr, r8, r1
 800cb5e:	b292      	uxth	r2, r2
 800cb60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cb64:	42ba      	cmp	r2, r7
 800cb66:	d22f      	bcs.n	800cbc8 <__udivmoddi4+0x2f4>
 800cb68:	18b2      	adds	r2, r6, r2
 800cb6a:	f108 31ff 	add.w	r1, r8, #4294967295
 800cb6e:	d2c6      	bcs.n	800cafe <__udivmoddi4+0x22a>
 800cb70:	42ba      	cmp	r2, r7
 800cb72:	d2c4      	bcs.n	800cafe <__udivmoddi4+0x22a>
 800cb74:	f1a8 0102 	sub.w	r1, r8, #2
 800cb78:	4432      	add	r2, r6
 800cb7a:	e7c0      	b.n	800cafe <__udivmoddi4+0x22a>
 800cb7c:	45f0      	cmp	r8, lr
 800cb7e:	d29c      	bcs.n	800caba <__udivmoddi4+0x1e6>
 800cb80:	ebbe 0302 	subs.w	r3, lr, r2
 800cb84:	eb67 070c 	sbc.w	r7, r7, ip
 800cb88:	3801      	subs	r0, #1
 800cb8a:	46b9      	mov	r9, r7
 800cb8c:	e795      	b.n	800caba <__udivmoddi4+0x1e6>
 800cb8e:	eba6 0808 	sub.w	r8, r6, r8
 800cb92:	4441      	add	r1, r8
 800cb94:	1eb8      	subs	r0, r7, #2
 800cb96:	fbb1 f8fe 	udiv	r8, r1, lr
 800cb9a:	fb08 f70c 	mul.w	r7, r8, ip
 800cb9e:	e7dc      	b.n	800cb5a <__udivmoddi4+0x286>
 800cba0:	463b      	mov	r3, r7
 800cba2:	e77f      	b.n	800caa4 <__udivmoddi4+0x1d0>
 800cba4:	4650      	mov	r0, sl
 800cba6:	e767      	b.n	800ca78 <__udivmoddi4+0x1a4>
 800cba8:	4608      	mov	r0, r1
 800cbaa:	e6fb      	b.n	800c9a4 <__udivmoddi4+0xd0>
 800cbac:	4434      	add	r4, r6
 800cbae:	3802      	subs	r0, #2
 800cbb0:	e732      	b.n	800ca18 <__udivmoddi4+0x144>
 800cbb2:	3f02      	subs	r7, #2
 800cbb4:	4432      	add	r2, r6
 800cbb6:	e71b      	b.n	800c9f0 <__udivmoddi4+0x11c>
 800cbb8:	eba1 0108 	sub.w	r1, r1, r8
 800cbbc:	4638      	mov	r0, r7
 800cbbe:	fbb1 f8fe 	udiv	r8, r1, lr
 800cbc2:	fb08 f70c 	mul.w	r7, r8, ip
 800cbc6:	e7c8      	b.n	800cb5a <__udivmoddi4+0x286>
 800cbc8:	4641      	mov	r1, r8
 800cbca:	e798      	b.n	800cafe <__udivmoddi4+0x22a>

0800cbcc <_init>:
 800cbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbce:	bf00      	nop
 800cbd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbd2:	bc08      	pop	{r3}
 800cbd4:	469e      	mov	lr, r3
 800cbd6:	4770      	bx	lr

0800cbd8 <_fini>:
 800cbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbda:	bf00      	nop
 800cbdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbde:	bc08      	pop	{r3}
 800cbe0:	469e      	mov	lr, r3
 800cbe2:	4770      	bx	lr
