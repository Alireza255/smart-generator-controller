
build/debug/SGC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005668  08005668  00006668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005754  08005754  00007148  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005754  08005754  00006754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800575c  0800575c  00007148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800575c  0800575c  0000675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005760  08005760  00006760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000148  20000000  08005764  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016bc  20000148  080058ac  00007148  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001804  080058ac  00007804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007148  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  00007178  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019f73  00000000  00000000  000071b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f44  00000000  00000000  00021124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000bf2b  00000000  00000000  00025068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001200  00000000  00000000  00030f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000db8  00000000  00000000  00032198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001218b  00000000  00000000  00032f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005d79  00000000  00000000  000450db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d88  00000000  00000000  0004ae54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000194  00000000  00000000  0004dbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b80c 	b.w	8000270 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f005 f87a 	bl	8005358 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__aeabi_idiv0>:
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	20000148 	.word	0x20000148
 8000290:	00000000 	.word	0x00000000
 8000294:	08005650 	.word	0x08005650

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	2000014c 	.word	0x2000014c
 80002b0:	08005650 	.word	0x08005650

080002b4 <controller_time_start>:

TIM_HandleTypeDef *timer = NULL;

void controller_time_start(TIM_HandleTypeDef *htim)
{
    if (htim == NULL)
 80002b4:	b178      	cbz	r0, 80002d6 <controller_time_start+0x22>
{
 80002b6:	b510      	push	{r4, lr}
        /**
         * @todo throw an error
         */
        return;
    }
    timer = htim;
 80002b8:	4c07      	ldr	r4, [pc, #28]	@ (80002d8 <controller_time_start+0x24>)
 80002ba:	6020      	str	r0, [r4, #0]
    /**
     * This assumes that sys clock is the same as timer clock
     */
    timer->Instance->PSC = (HAL_RCC_GetSysClockFreq() / 1000000UL) - 1;
 80002bc:	f001 fb1a 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <controller_time_start+0x28>)
 80002c2:	fba3 2300 	umull	r2, r3, r3, r0
 80002c6:	0c9b      	lsrs	r3, r3, #18
 80002c8:	6820      	ldr	r0, [r4, #0]
 80002ca:	6802      	ldr	r2, [r0, #0]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_TIM_Base_Start(timer);
 80002d0:	f001 fcf4 	bl	8001cbc <HAL_TIM_Base_Start>
}
 80002d4:	bd10      	pop	{r4, pc}
 80002d6:	4770      	bx	lr
 80002d8:	20000164 	.word	0x20000164
 80002dc:	431bde83 	.word	0x431bde83

080002e0 <get_time_us>:

time_us_t get_time_us(void)
{
    return timer->Instance->CNT;
 80002e0:	4b02      	ldr	r3, [pc, #8]	@ (80002ec <get_time_us+0xc>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	20000164 	.word	0x20000164

080002f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002f0:	b510      	push	{r4, lr}
 80002f2:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f4:	a905      	add	r1, sp, #20
 80002f6:	2400      	movs	r4, #0
 80002f8:	9405      	str	r4, [sp, #20]
 80002fa:	604c      	str	r4, [r1, #4]
 80002fc:	608c      	str	r4, [r1, #8]
 80002fe:	60cc      	str	r4, [r1, #12]
 8000300:	610c      	str	r4, [r1, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000302:	9401      	str	r4, [sp, #4]
 8000304:	4b1e      	ldr	r3, [pc, #120]	@ (8000380 <MX_GPIO_Init+0x90>)
 8000306:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000308:	f042 0204 	orr.w	r2, r2, #4
 800030c:	631a      	str	r2, [r3, #48]	@ 0x30
 800030e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000310:	f002 0204 	and.w	r2, r2, #4
 8000314:	9201      	str	r2, [sp, #4]
 8000316:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000318:	9402      	str	r4, [sp, #8]
 800031a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800031c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000320:	631a      	str	r2, [r3, #48]	@ 0x30
 8000322:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000324:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000328:	9202      	str	r2, [sp, #8]
 800032a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	9403      	str	r4, [sp, #12]
 800032e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000330:	f042 0201 	orr.w	r2, r2, #1
 8000334:	631a      	str	r2, [r3, #48]	@ 0x30
 8000336:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000338:	f002 0201 	and.w	r2, r2, #1
 800033c:	9203      	str	r2, [sp, #12]
 800033e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	9404      	str	r4, [sp, #16]
 8000342:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000344:	f042 0202 	orr.w	r2, r2, #2
 8000348:	631a      	str	r2, [r3, #48]	@ 0x30
 800034a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034c:	f003 0302 	and.w	r3, r3, #2
 8000350:	9304      	str	r3, [sp, #16]
 8000352:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000358:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800035a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800035e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000360:	2302      	movs	r3, #2
 8000362:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000364:	4807      	ldr	r0, [pc, #28]	@ (8000384 <MX_GPIO_Init+0x94>)
 8000366:	f000 f97f 	bl	8000668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800036a:	4622      	mov	r2, r4
 800036c:	4621      	mov	r1, r4
 800036e:	2028      	movs	r0, #40	@ 0x28
 8000370:	f000 f966 	bl	8000640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000374:	2028      	movs	r0, #40	@ 0x28
 8000376:	f000 f973 	bl	8000660 <HAL_NVIC_EnableIRQ>

}
 800037a:	b00a      	add	sp, #40	@ 0x28
 800037c:	bd10      	pop	{r4, pc}
 800037e:	bf00      	nop
 8000380:	40023800 	.word	0x40023800
 8000384:	40020400 	.word	0x40020400

08000388 <log_error>:
 * @param message The error message to be logged.
 */

void log_error(const char* message)
{
    if (message == NULL) return;
 8000388:	b1a8      	cbz	r0, 80003b6 <log_error+0x2e>
{
 800038a:	b570      	push	{r4, r5, r6, lr}
 800038c:	b09a      	sub	sp, #104	@ 0x68
 800038e:	4606      	mov	r6, r0
    
    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 8000390:	ac01      	add	r4, sp, #4
 8000392:	2564      	movs	r5, #100	@ 0x64
 8000394:	462a      	mov	r2, r5
 8000396:	2100      	movs	r1, #0
 8000398:	4620      	mov	r0, r4
 800039a:	f004 fb59 	bl	8004a50 <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Error: %s\n", message);
 800039e:	4633      	mov	r3, r6
 80003a0:	4a05      	ldr	r2, [pc, #20]	@ (80003b8 <log_error+0x30>)
 80003a2:	4629      	mov	r1, r5
 80003a4:	4620      	mov	r0, r4
 80003a6:	f004 fb1d 	bl	80049e4 <sniprintf>

    CDC_Transmit_FS(buffer, ERROR_HANDLING_BUFFER_SIZE);
 80003aa:	4629      	mov	r1, r5
 80003ac:	4620      	mov	r0, r4
 80003ae:	f003 fb05 	bl	80039bc <CDC_Transmit_FS>
}
 80003b2:	b01a      	add	sp, #104	@ 0x68
 80003b4:	bd70      	pop	{r4, r5, r6, pc}
 80003b6:	4770      	bx	lr
 80003b8:	08005668 	.word	0x08005668

080003bc <log_warning>:
 * @param message A null-terminated string containing the warning message.
 *                It must not be null.
 */
void log_warning(const char* message)
{
    if (message == NULL) return;
 80003bc:	b1a8      	cbz	r0, 80003ea <log_warning+0x2e>
{
 80003be:	b570      	push	{r4, r5, r6, lr}
 80003c0:	b09a      	sub	sp, #104	@ 0x68
 80003c2:	4606      	mov	r6, r0
    
    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 80003c4:	ac01      	add	r4, sp, #4
 80003c6:	2564      	movs	r5, #100	@ 0x64
 80003c8:	462a      	mov	r2, r5
 80003ca:	2100      	movs	r1, #0
 80003cc:	4620      	mov	r0, r4
 80003ce:	f004 fb3f 	bl	8004a50 <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Warning: %s\n", message);
 80003d2:	4633      	mov	r3, r6
 80003d4:	4a05      	ldr	r2, [pc, #20]	@ (80003ec <log_warning+0x30>)
 80003d6:	4629      	mov	r1, r5
 80003d8:	4620      	mov	r0, r4
 80003da:	f004 fb03 	bl	80049e4 <sniprintf>

    CDC_Transmit_FS(buffer, ERROR_HANDLING_BUFFER_SIZE);
 80003de:	4629      	mov	r1, r5
 80003e0:	4620      	mov	r0, r4
 80003e2:	f003 faeb 	bl	80039bc <CDC_Transmit_FS>
}
 80003e6:	b01a      	add	sp, #104	@ 0x68
 80003e8:	bd70      	pop	{r4, r5, r6, pc}
 80003ea:	4770      	bx	lr
 80003ec:	08005674 	.word	0x08005674

080003f0 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_12)
 80003f0:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80003f4:	d000      	beq.n	80003f8 <HAL_GPIO_EXTI_Callback+0x8>
 80003f6:	4770      	bx	lr
{
 80003f8:	b508      	push	{r3, lr}
  {
    trigger_tooth_handle(&engine.trigger);
 80003fa:	4802      	ldr	r0, [pc, #8]	@ (8000404 <HAL_GPIO_EXTI_Callback+0x14>)
 80003fc:	f002 ff64 	bl	80032c8 <trigger_tooth_handle>
  }
}
 8000400:	bd08      	pop	{r3, pc}
 8000402:	bf00      	nop
 8000404:	20000180 	.word	0x20000180

08000408 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000408:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 800040a:	6802      	ldr	r2, [r0, #0]
 800040c:	4b03      	ldr	r3, [pc, #12]	@ (800041c <HAL_TIM_PeriodElapsedCallback+0x14>)
 800040e:	429a      	cmp	r2, r3
 8000410:	d000      	beq.n	8000414 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000412:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000414:	f000 f89a 	bl	800054c <HAL_IncTick>
}
 8000418:	e7fb      	b.n	8000412 <HAL_TIM_PeriodElapsedCallback+0xa>
 800041a:	bf00      	nop
 800041c:	40014800 	.word	0x40014800

08000420 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000422:	e7fe      	b.n	8000422 <Error_Handler+0x2>

08000424 <SystemClock_Config>:
{
 8000424:	b510      	push	{r4, lr}
 8000426:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000428:	ac08      	add	r4, sp, #32
 800042a:	2230      	movs	r2, #48	@ 0x30
 800042c:	2100      	movs	r1, #0
 800042e:	4620      	mov	r0, r4
 8000430:	f004 fb0e 	bl	8004a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	2300      	movs	r3, #0
 8000436:	9303      	str	r3, [sp, #12]
 8000438:	9304      	str	r3, [sp, #16]
 800043a:	9305      	str	r3, [sp, #20]
 800043c:	9306      	str	r3, [sp, #24]
 800043e:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	4a21      	ldr	r2, [pc, #132]	@ (80004c8 <SystemClock_Config+0xa4>)
 8000444:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000446:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800044a:	6411      	str	r1, [r2, #64]	@ 0x40
 800044c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800044e:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000452:	9201      	str	r2, [sp, #4]
 8000454:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000456:	9302      	str	r3, [sp, #8]
 8000458:	4a1c      	ldr	r2, [pc, #112]	@ (80004cc <SystemClock_Config+0xa8>)
 800045a:	6813      	ldr	r3, [r2, #0]
 800045c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000460:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000464:	6013      	str	r3, [r2, #0]
 8000466:	6813      	ldr	r3, [r2, #0]
 8000468:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800046c:	9302      	str	r3, [sp, #8]
 800046e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000470:	2301      	movs	r3, #1
 8000472:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000474:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000478:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047a:	2302      	movs	r3, #2
 800047c:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800047e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000482:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000484:	2319      	movs	r3, #25
 8000486:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000488:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800048c:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800048e:	2304      	movs	r3, #4
 8000490:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000492:	2307      	movs	r3, #7
 8000494:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	4620      	mov	r0, r4
 8000498:	f001 f830 	bl	80014fc <HAL_RCC_OscConfig>
 800049c:	b978      	cbnz	r0, 80004be <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049e:	230f      	movs	r3, #15
 80004a0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a2:	2102      	movs	r1, #2
 80004a4:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80004ae:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b0:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b2:	a803      	add	r0, sp, #12
 80004b4:	f001 fa72 	bl	800199c <HAL_RCC_ClockConfig>
 80004b8:	b918      	cbnz	r0, 80004c2 <SystemClock_Config+0x9e>
}
 80004ba:	b014      	add	sp, #80	@ 0x50
 80004bc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80004be:	f7ff ffaf 	bl	8000420 <Error_Handler>
    Error_Handler();
 80004c2:	f7ff ffad 	bl	8000420 <Error_Handler>
 80004c6:	bf00      	nop
 80004c8:	40023800 	.word	0x40023800
 80004cc:	40007000 	.word	0x40007000

080004d0 <main>:
{
 80004d0:	b508      	push	{r3, lr}
  HAL_Init();
 80004d2:	f000 f821 	bl	8000518 <HAL_Init>
  SystemClock_Config();
 80004d6:	f7ff ffa5 	bl	8000424 <SystemClock_Config>
  MX_GPIO_Init();
 80004da:	f7ff ff09 	bl	80002f0 <MX_GPIO_Init>
  MX_TIM5_Init();
 80004de:	f002 fdb7 	bl	8003050 <MX_TIM5_Init>
  MX_TIM3_Init();
 80004e2:	f002 fe77 	bl	80031d4 <MX_TIM3_Init>
  MX_TIM2_Init();
 80004e6:	f002 fd7d 	bl	8002fe4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80004ea:	f002 ff99 	bl	8003420 <MX_USB_DEVICE_Init>
  controller_time_start(&htim5);
 80004ee:	4807      	ldr	r0, [pc, #28]	@ (800050c <main+0x3c>)
 80004f0:	f7ff fee0 	bl	80002b4 <controller_time_start>
    log_warning("This is an example warning!");
 80004f4:	4806      	ldr	r0, [pc, #24]	@ (8000510 <main+0x40>)
 80004f6:	f7ff ff61 	bl	80003bc <log_warning>
    log_error("This is an example error!");
 80004fa:	4806      	ldr	r0, [pc, #24]	@ (8000514 <main+0x44>)
 80004fc:	f7ff ff44 	bl	8000388 <log_error>
    HAL_Delay(1000);
 8000500:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000504:	f000 f834 	bl	8000570 <HAL_Delay>
  while (1)
 8000508:	e7f4      	b.n	80004f4 <main+0x24>
 800050a:	bf00      	nop
 800050c:	200001fc 	.word	0x200001fc
 8000510:	08005684 	.word	0x08005684
 8000514:	080056a0 	.word	0x080056a0

08000518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000518:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800051a:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <HAL_Init+0x30>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000522:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800052a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000532:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000534:	2003      	movs	r0, #3
 8000536:	f000 f871 	bl	800061c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800053a:	200f      	movs	r0, #15
 800053c:	f001 fef8 	bl	8002330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000540:	f000 f984 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000544:	2000      	movs	r0, #0
 8000546:	bd08      	pop	{r3, pc}
 8000548:	40023c00 	.word	0x40023c00

0800054c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800054c:	4a03      	ldr	r2, [pc, #12]	@ (800055c <HAL_IncTick+0x10>)
 800054e:	6811      	ldr	r1, [r2, #0]
 8000550:	4b03      	ldr	r3, [pc, #12]	@ (8000560 <HAL_IncTick+0x14>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	440b      	add	r3, r1
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	200001ac 	.word	0x200001ac
 8000560:	20000000 	.word	0x20000000

08000564 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000564:	4b01      	ldr	r3, [pc, #4]	@ (800056c <HAL_GetTick+0x8>)
 8000566:	6818      	ldr	r0, [r3, #0]
}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	200001ac 	.word	0x200001ac

08000570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000570:	b538      	push	{r3, r4, r5, lr}
 8000572:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000574:	f7ff fff6 	bl	8000564 <HAL_GetTick>
 8000578:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800057a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800057e:	d002      	beq.n	8000586 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000580:	4b04      	ldr	r3, [pc, #16]	@ (8000594 <HAL_Delay+0x24>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000586:	f7ff ffed 	bl	8000564 <HAL_GetTick>
 800058a:	1b40      	subs	r0, r0, r5
 800058c:	42a0      	cmp	r0, r4
 800058e:	d3fa      	bcc.n	8000586 <HAL_Delay+0x16>
  {
  }
}
 8000590:	bd38      	pop	{r3, r4, r5, pc}
 8000592:	bf00      	nop
 8000594:	20000000 	.word	0x20000000

08000598 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000598:	2800      	cmp	r0, #0
 800059a:	db07      	blt.n	80005ac <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800059c:	f000 021f 	and.w	r2, r0, #31
 80005a0:	0940      	lsrs	r0, r0, #5
 80005a2:	2301      	movs	r3, #1
 80005a4:	4093      	lsls	r3, r2
 80005a6:	4a02      	ldr	r2, [pc, #8]	@ (80005b0 <__NVIC_EnableIRQ+0x18>)
 80005a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000e100 	.word	0xe000e100

080005b4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80005b4:	2800      	cmp	r0, #0
 80005b6:	db08      	blt.n	80005ca <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b8:	0109      	lsls	r1, r1, #4
 80005ba:	b2c9      	uxtb	r1, r1
 80005bc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80005c0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80005c4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80005c8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	f000 000f 	and.w	r0, r0, #15
 80005ce:	0109      	lsls	r1, r1, #4
 80005d0:	b2c9      	uxtb	r1, r1
 80005d2:	4b01      	ldr	r3, [pc, #4]	@ (80005d8 <__NVIC_SetPriority+0x24>)
 80005d4:	5419      	strb	r1, [r3, r0]
  }
}
 80005d6:	4770      	bx	lr
 80005d8:	e000ed14 	.word	0xe000ed14

080005dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005dc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005de:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e2:	f1c0 0c07 	rsb	ip, r0, #7
 80005e6:	f1bc 0f04 	cmp.w	ip, #4
 80005ea:	bf28      	it	cs
 80005ec:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f0:	1d03      	adds	r3, r0, #4
 80005f2:	2b06      	cmp	r3, #6
 80005f4:	d90f      	bls.n	8000616 <NVIC_EncodePriority+0x3a>
 80005f6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	f04f 3eff 	mov.w	lr, #4294967295
 80005fc:	fa0e f00c 	lsl.w	r0, lr, ip
 8000600:	ea21 0100 	bic.w	r1, r1, r0
 8000604:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000606:	fa0e fe03 	lsl.w	lr, lr, r3
 800060a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800060e:	ea41 0002 	orr.w	r0, r1, r2
 8000612:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000616:	2300      	movs	r3, #0
 8000618:	e7ee      	b.n	80005f8 <NVIC_EncodePriority+0x1c>
	...

0800061c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4a07      	ldr	r2, [pc, #28]	@ (800063c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800061e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000620:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000624:	041b      	lsls	r3, r3, #16
 8000626:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000628:	0200      	lsls	r0, r0, #8
 800062a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000630:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000638:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000640:	b510      	push	{r4, lr}
 8000642:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <HAL_NVIC_SetPriority+0x1c>)
 8000646:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000648:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800064c:	f7ff ffc6 	bl	80005dc <NVIC_EncodePriority>
 8000650:	4601      	mov	r1, r0
 8000652:	4620      	mov	r0, r4
 8000654:	f7ff ffae 	bl	80005b4 <__NVIC_SetPriority>
}
 8000658:	bd10      	pop	{r4, pc}
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000660:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000662:	f7ff ff99 	bl	8000598 <__NVIC_EnableIRQ>
}
 8000666:	bd08      	pop	{r3, pc}

08000668 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000668:	2300      	movs	r3, #0
 800066a:	2b0f      	cmp	r3, #15
 800066c:	f200 80d7 	bhi.w	800081e <HAL_GPIO_Init+0x1b6>
{
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	e065      	b.n	8000742 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000676:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000678:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800067c:	2403      	movs	r4, #3
 800067e:	fa04 f40e 	lsl.w	r4, r4, lr
 8000682:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000686:	68cc      	ldr	r4, [r1, #12]
 8000688:	fa04 f40e 	lsl.w	r4, r4, lr
 800068c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800068e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000690:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000692:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000696:	684a      	ldr	r2, [r1, #4]
 8000698:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800069c:	409a      	lsls	r2, r3
 800069e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80006a0:	6042      	str	r2, [r0, #4]
 80006a2:	e05c      	b.n	800075e <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80006a4:	08dc      	lsrs	r4, r3, #3
 80006a6:	3408      	adds	r4, #8
 80006a8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006ac:	f003 0507 	and.w	r5, r3, #7
 80006b0:	00ad      	lsls	r5, r5, #2
 80006b2:	f04f 0e0f 	mov.w	lr, #15
 80006b6:	fa0e fe05 	lsl.w	lr, lr, r5
 80006ba:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006be:	690a      	ldr	r2, [r1, #16]
 80006c0:	40aa      	lsls	r2, r5
 80006c2:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80006c6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80006ca:	e05c      	b.n	8000786 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006cc:	2204      	movs	r2, #4
 80006ce:	e000      	b.n	80006d2 <HAL_GPIO_Init+0x6a>
 80006d0:	2200      	movs	r2, #0
 80006d2:	fa02 f20e 	lsl.w	r2, r2, lr
 80006d6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006d8:	3402      	adds	r4, #2
 80006da:	4d51      	ldr	r5, [pc, #324]	@ (8000820 <HAL_GPIO_Init+0x1b8>)
 80006dc:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006e0:	4a50      	ldr	r2, [pc, #320]	@ (8000824 <HAL_GPIO_Init+0x1bc>)
 80006e2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80006e4:	ea6f 020c 	mvn.w	r2, ip
 80006e8:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80006ec:	684e      	ldr	r6, [r1, #4]
 80006ee:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80006f2:	d001      	beq.n	80006f8 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80006f4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80006f8:	4c4a      	ldr	r4, [pc, #296]	@ (8000824 <HAL_GPIO_Init+0x1bc>)
 80006fa:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80006fc:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80006fe:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000702:	684e      	ldr	r6, [r1, #4]
 8000704:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000708:	d001      	beq.n	800070e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800070a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800070e:	4c45      	ldr	r4, [pc, #276]	@ (8000824 <HAL_GPIO_Init+0x1bc>)
 8000710:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000712:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000714:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000718:	684e      	ldr	r6, [r1, #4]
 800071a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800071e:	d001      	beq.n	8000724 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000720:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000724:	4c3f      	ldr	r4, [pc, #252]	@ (8000824 <HAL_GPIO_Init+0x1bc>)
 8000726:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000728:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800072a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800072c:	684d      	ldr	r5, [r1, #4]
 800072e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000732:	d001      	beq.n	8000738 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000734:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000738:	4c3a      	ldr	r4, [pc, #232]	@ (8000824 <HAL_GPIO_Init+0x1bc>)
 800073a:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800073c:	3301      	adds	r3, #1
 800073e:	2b0f      	cmp	r3, #15
 8000740:	d86b      	bhi.n	800081a <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8000742:	2201      	movs	r2, #1
 8000744:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000746:	680c      	ldr	r4, [r1, #0]
 8000748:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 800074c:	ea32 0404 	bics.w	r4, r2, r4
 8000750:	d1f4      	bne.n	800073c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000752:	684c      	ldr	r4, [r1, #4]
 8000754:	f004 0403 	and.w	r4, r4, #3
 8000758:	3c01      	subs	r4, #1
 800075a:	2c01      	cmp	r4, #1
 800075c:	d98b      	bls.n	8000676 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800075e:	684a      	ldr	r2, [r1, #4]
 8000760:	f002 0203 	and.w	r2, r2, #3
 8000764:	2a03      	cmp	r2, #3
 8000766:	d009      	beq.n	800077c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000768:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800076a:	005d      	lsls	r5, r3, #1
 800076c:	2203      	movs	r2, #3
 800076e:	40aa      	lsls	r2, r5
 8000770:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000774:	688a      	ldr	r2, [r1, #8]
 8000776:	40aa      	lsls	r2, r5
 8000778:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800077a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800077c:	684a      	ldr	r2, [r1, #4]
 800077e:	f002 0203 	and.w	r2, r2, #3
 8000782:	2a02      	cmp	r2, #2
 8000784:	d08e      	beq.n	80006a4 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000786:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000788:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800078c:	2203      	movs	r2, #3
 800078e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000792:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000796:	684a      	ldr	r2, [r1, #4]
 8000798:	f002 0203 	and.w	r2, r2, #3
 800079c:	fa02 f20e 	lsl.w	r2, r2, lr
 80007a0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80007a2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80007a4:	684a      	ldr	r2, [r1, #4]
 80007a6:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80007aa:	d0c7      	beq.n	800073c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ac:	2200      	movs	r2, #0
 80007ae:	9201      	str	r2, [sp, #4]
 80007b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000828 <HAL_GPIO_Init+0x1c0>)
 80007b2:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80007b4:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80007b8:	6454      	str	r4, [r2, #68]	@ 0x44
 80007ba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80007bc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80007c0:	9201      	str	r2, [sp, #4]
 80007c2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80007c4:	089c      	lsrs	r4, r3, #2
 80007c6:	1ca5      	adds	r5, r4, #2
 80007c8:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <HAL_GPIO_Init+0x1b8>)
 80007ca:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007ce:	f003 0e03 	and.w	lr, r3, #3
 80007d2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80007d6:	220f      	movs	r2, #15
 80007d8:	fa02 f20e 	lsl.w	r2, r2, lr
 80007dc:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007e0:	4a12      	ldr	r2, [pc, #72]	@ (800082c <HAL_GPIO_Init+0x1c4>)
 80007e2:	4290      	cmp	r0, r2
 80007e4:	f43f af74 	beq.w	80006d0 <HAL_GPIO_Init+0x68>
 80007e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80007ec:	4290      	cmp	r0, r2
 80007ee:	d00e      	beq.n	800080e <HAL_GPIO_Init+0x1a6>
 80007f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80007f4:	4290      	cmp	r0, r2
 80007f6:	d00c      	beq.n	8000812 <HAL_GPIO_Init+0x1aa>
 80007f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80007fc:	4290      	cmp	r0, r2
 80007fe:	d00a      	beq.n	8000816 <HAL_GPIO_Init+0x1ae>
 8000800:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000804:	4290      	cmp	r0, r2
 8000806:	f43f af61 	beq.w	80006cc <HAL_GPIO_Init+0x64>
 800080a:	2207      	movs	r2, #7
 800080c:	e761      	b.n	80006d2 <HAL_GPIO_Init+0x6a>
 800080e:	2201      	movs	r2, #1
 8000810:	e75f      	b.n	80006d2 <HAL_GPIO_Init+0x6a>
 8000812:	2202      	movs	r2, #2
 8000814:	e75d      	b.n	80006d2 <HAL_GPIO_Init+0x6a>
 8000816:	2203      	movs	r2, #3
 8000818:	e75b      	b.n	80006d2 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800081a:	b002      	add	sp, #8
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	4770      	bx	lr
 8000820:	40013800 	.word	0x40013800
 8000824:	40013c00 	.word	0x40013c00
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000

08000830 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000830:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000832:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4203      	tst	r3, r0
 8000838:	d100      	bne.n	800083c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800083a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800083c:	4b02      	ldr	r3, [pc, #8]	@ (8000848 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800083e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000840:	f7ff fdd6 	bl	80003f0 <HAL_GPIO_EXTI_Callback>
}
 8000844:	e7f9      	b.n	800083a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000846:	bf00      	nop
 8000848:	40013c00 	.word	0x40013c00

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2100      	movs	r1, #0
 8000850:	9100      	str	r1, [sp, #0]
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <HAL_MspInit+0x34>)
 8000854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000856:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800085a:	645a      	str	r2, [r3, #68]	@ 0x44
 800085c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800085e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000862:	9200      	str	r2, [sp, #0]
 8000864:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	9101      	str	r1, [sp, #4]
 8000868:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800086a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800086e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	b002      	add	sp, #8
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000888:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800088a:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800088e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000892:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000896:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800089a:	429a      	cmp	r2, r3
 800089c:	d854      	bhi.n	8000948 <PCD_WriteEmptyTxFifo+0xc4>
 800089e:	4607      	mov	r7, r0
 80008a0:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 80008a2:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 80008a4:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 80008a8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008ac:	69d2      	ldr	r2, [r2, #28]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d300      	bcc.n	80008b4 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 80008b2:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 80008b4:	f102 0903 	add.w	r9, r2, #3
 80008b8:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80008bc:	e015      	b.n	80008ea <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 80008be:	f106 0903 	add.w	r9, r6, #3
 80008c2:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 80008c6:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80008c8:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 80008cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80008d0:	6a29      	ldr	r1, [r5, #32]
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	b2b3      	uxth	r3, r6
 80008d6:	b2e2      	uxtb	r2, r4
 80008d8:	4640      	mov	r0, r8
 80008da:	f002 f8d0 	bl	8002a7e <USB_WritePacket>

    ep->xfer_buff  += len;
 80008de:	6a2b      	ldr	r3, [r5, #32]
 80008e0:	4433      	add	r3, r6
 80008e2:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 80008e4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80008e6:	4433      	add	r3, r6
 80008e8:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80008ea:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 80008ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80008f6:	454b      	cmp	r3, r9
 80008f8:	d312      	bcc.n	8000920 <PCD_WriteEmptyTxFifo+0x9c>
 80008fa:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80008fe:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8000902:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000906:	429a      	cmp	r2, r3
 8000908:	d20a      	bcs.n	8000920 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800090a:	b14b      	cbz	r3, 8000920 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 800090c:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 800090e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8000912:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8000916:	69d6      	ldr	r6, [r2, #28]
 8000918:	429e      	cmp	r6, r3
 800091a:	d3d0      	bcc.n	80008be <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 800091c:	461e      	mov	r6, r3
 800091e:	e7ce      	b.n	80008be <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8000920:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8000924:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8000928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800092a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800092c:	429a      	cmp	r2, r3
 800092e:	d80f      	bhi.n	8000950 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000930:	f004 040f 	and.w	r4, r4, #15
 8000934:	2201      	movs	r2, #1
 8000936:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000938:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 800093c:	ea23 0302 	bic.w	r3, r3, r2
 8000940:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 8000944:	2000      	movs	r0, #0
 8000946:	e000      	b.n	800094a <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 8000948:	2001      	movs	r0, #1
}
 800094a:	b003      	add	sp, #12
 800094c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8000950:	2000      	movs	r0, #0
 8000952:	e7fa      	b.n	800094a <PCD_WriteEmptyTxFifo+0xc6>

08000954 <HAL_PCD_Init>:
{
 8000954:	b530      	push	{r4, r5, lr}
 8000956:	b083      	sub	sp, #12
  if (hpcd == NULL)
 8000958:	2800      	cmp	r0, #0
 800095a:	d07a      	beq.n	8000a52 <HAL_PCD_Init+0xfe>
 800095c:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 800095e:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000960:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8000964:	b1c3      	cbz	r3, 8000998 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000966:	2303      	movs	r3, #3
 8000968:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 800096c:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 8000970:	d017      	beq.n	80009a2 <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 8000972:	6820      	ldr	r0, [r4, #0]
 8000974:	f001 fe34 	bl	80025e0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000978:	7c23      	ldrb	r3, [r4, #16]
 800097a:	f88d 3000 	strb.w	r3, [sp]
 800097e:	1d23      	adds	r3, r4, #4
 8000980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000982:	6820      	ldr	r0, [r4, #0]
 8000984:	f001 fd6b 	bl	800245e <USB_CoreInit>
 8000988:	b170      	cbz	r0, 80009a8 <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800098a:	2302      	movs	r3, #2
 800098c:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8000990:	2501      	movs	r5, #1
}
 8000992:	4628      	mov	r0, r5
 8000994:	b003      	add	sp, #12
 8000996:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000998:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 800099c:	f003 f824 	bl	80039e8 <HAL_PCD_MspInit>
 80009a0:	e7e1      	b.n	8000966 <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 80009a2:	2300      	movs	r3, #0
 80009a4:	71a3      	strb	r3, [r4, #6]
 80009a6:	e7e4      	b.n	8000972 <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	6820      	ldr	r0, [r4, #0]
 80009ac:	f002 fa7d 	bl	8002eaa <USB_SetCurrentMode>
 80009b0:	4602      	mov	r2, r0
 80009b2:	b9b8      	cbnz	r0, 80009e4 <HAL_PCD_Init+0x90>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009b4:	4603      	mov	r3, r0
 80009b6:	7920      	ldrb	r0, [r4, #4]
 80009b8:	4298      	cmp	r0, r3
 80009ba:	d918      	bls.n	80009ee <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 80009bc:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80009c0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80009c4:	2001      	movs	r0, #1
 80009c6:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 80009c8:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80009ca:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80009cc:	2000      	movs	r0, #0
 80009ce:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 80009d0:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80009d2:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 80009d4:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80009d8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80009dc:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009de:	3301      	adds	r3, #1
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	e7e8      	b.n	80009b6 <HAL_PCD_Init+0x62>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80009e4:	2302      	movs	r3, #2
 80009e6:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80009ea:	2501      	movs	r5, #1
 80009ec:	e7d1      	b.n	8000992 <HAL_PCD_Init+0x3e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009ee:	4290      	cmp	r0, r2
 80009f0:	d917      	bls.n	8000a22 <HAL_PCD_Init+0xce>
    hpcd->OUT_ep[i].is_in = 0U;
 80009f2:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 80009f6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80009fa:	2100      	movs	r1, #0
 80009fc:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8000a00:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000a04:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000a08:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000a0c:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000a10:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8000a14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000a18:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a1c:	3201      	adds	r2, #1
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	e7e5      	b.n	80009ee <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000a22:	7c23      	ldrb	r3, [r4, #16]
 8000a24:	f88d 3000 	strb.w	r3, [sp]
 8000a28:	1d23      	adds	r3, r4, #4
 8000a2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a2c:	6820      	ldr	r0, [r4, #0]
 8000a2e:	f001 fe2d 	bl	800268c <USB_DevInit>
 8000a32:	4605      	mov	r5, r0
 8000a34:	b120      	cbz	r0, 8000a40 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000a36:	2302      	movs	r3, #2
 8000a38:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8000a3c:	2501      	movs	r5, #1
 8000a3e:	e7a8      	b.n	8000992 <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8000a44:	2301      	movs	r3, #1
 8000a46:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8000a4a:	6820      	ldr	r0, [r4, #0]
 8000a4c:	f002 f9ec 	bl	8002e28 <USB_DevDisconnect>
  return HAL_OK;
 8000a50:	e79f      	b.n	8000992 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8000a52:	2501      	movs	r5, #1
 8000a54:	e79d      	b.n	8000992 <HAL_PCD_Init+0x3e>

08000a56 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000a56:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 8000a58:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8000a5c:	2a01      	cmp	r2, #1
 8000a5e:	d01a      	beq.n	8000a96 <HAL_PCD_Start+0x40>
{
 8000a60:	b510      	push	{r4, lr}
 8000a62:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8000a6a:	68da      	ldr	r2, [r3, #12]
 8000a6c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8000a70:	d002      	beq.n	8000a78 <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 8000a72:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8000a74:	2a01      	cmp	r2, #1
 8000a76:	d009      	beq.n	8000a8c <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 8000a78:	6820      	ldr	r0, [r4, #0]
 8000a7a:	f001 fdab 	bl	80025d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000a7e:	6820      	ldr	r0, [r4, #0]
 8000a80:	f002 f9c4 	bl	8002e0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8000a8a:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a8e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000a92:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a94:	e7f0      	b.n	8000a78 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 8000a96:	2002      	movs	r0, #2
}
 8000a98:	4770      	bx	lr
	...

08000a9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	4604      	mov	r4, r0
 8000aa0:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000aa2:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8000aa4:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000aa6:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8000aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8000aae:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8000ab0:	79a1      	ldrb	r1, [r4, #6]
 8000ab2:	2901      	cmp	r1, #1
 8000ab4:	d011      	beq.n	8000ada <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8000ab6:	4938      	ldr	r1, [pc, #224]	@ (8000b98 <PCD_EP_OutXfrComplete_int+0xfc>)
 8000ab8:	428e      	cmp	r6, r1
 8000aba:	d056      	beq.n	8000b6a <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000abc:	b93d      	cbnz	r5, 8000ace <PCD_EP_OutXfrComplete_int+0x32>
 8000abe:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8000ac2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000ac6:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d05e      	beq.n	8000b8c <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000ace:	b2e9      	uxtb	r1, r5
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	f002 ffd5 	bl	8003a80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8000ada:	f012 0f08 	tst.w	r2, #8
 8000ade:	d009      	beq.n	8000af4 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000ae0:	492e      	ldr	r1, [pc, #184]	@ (8000b9c <PCD_EP_OutXfrComplete_int+0x100>)
 8000ae2:	428e      	cmp	r6, r1
 8000ae4:	d9f7      	bls.n	8000ad6 <PCD_EP_OutXfrComplete_int+0x3a>
 8000ae6:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8000aea:	d0f4      	beq.n	8000ad6 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000aec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	e7f0      	b.n	8000ad6 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8000af4:	f012 0f20 	tst.w	r2, #32
 8000af8:	d002      	beq.n	8000b00 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000afa:	2220      	movs	r2, #32
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	e7ea      	b.n	8000ad6 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8000b00:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8000b04:	d1e7      	bne.n	8000ad6 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000b06:	4925      	ldr	r1, [pc, #148]	@ (8000b9c <PCD_EP_OutXfrComplete_int+0x100>)
 8000b08:	428e      	cmp	r6, r1
 8000b0a:	d906      	bls.n	8000b1a <PCD_EP_OutXfrComplete_int+0x7e>
 8000b0c:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8000b10:	d003      	beq.n	8000b1a <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000b12:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	e7dd      	b.n	8000ad6 <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8000b1a:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8000b1e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8000b22:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 8000b26:	691b      	ldr	r3, [r3, #16]
 8000b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b2c:	1acb      	subs	r3, r1, r3
 8000b2e:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 8000b32:	b97d      	cbnz	r5, 8000b54 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 8000b34:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8000b38:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8000b3c:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 8000b40:	b16a      	cbz	r2, 8000b5e <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 8000b42:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8000b46:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8000b4a:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 8000b4e:	4419      	add	r1, r3
 8000b50:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000b54:	b2e9      	uxtb	r1, r5
 8000b56:	4620      	mov	r0, r4
 8000b58:	f002 ff92 	bl	8003a80 <HAL_PCD_DataOutStageCallback>
 8000b5c:	e7bb      	b.n	8000ad6 <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000b5e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8000b62:	2101      	movs	r1, #1
 8000b64:	f002 f9e0 	bl	8002f28 <USB_EP0_OutStart>
 8000b68:	e7f4      	b.n	8000b54 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8000b6a:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8000b6e:	d003      	beq.n	8000b78 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000b70:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	e7ae      	b.n	8000ad6 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000b78:	f012 0f20 	tst.w	r2, #32
 8000b7c:	d001      	beq.n	8000b82 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000b7e:	2220      	movs	r2, #32
 8000b80:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000b82:	b2e9      	uxtb	r1, r5
 8000b84:	4620      	mov	r0, r4
 8000b86:	f002 ff7b 	bl	8003a80 <HAL_PCD_DataOutStageCallback>
 8000b8a:	e7a4      	b.n	8000ad6 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8000b8c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8000b90:	2100      	movs	r1, #0
 8000b92:	f002 f9c9 	bl	8002f28 <USB_EP0_OutStart>
 8000b96:	e79a      	b.n	8000ace <PCD_EP_OutXfrComplete_int+0x32>
 8000b98:	4f54310a 	.word	0x4f54310a
 8000b9c:	4f54300a 	.word	0x4f54300a

08000ba0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000ba0:	b538      	push	{r3, r4, r5, lr}
 8000ba2:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ba4:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8000ba6:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000ba8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8000bac:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	@ (8000bec <PCD_EP_OutSetupPacket_int+0x4c>)
 8000bb2:	4295      	cmp	r5, r2
 8000bb4:	d907      	bls.n	8000bc6 <PCD_EP_OutSetupPacket_int+0x26>
 8000bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8000bba:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8000bbe:	d002      	beq.n	8000bc6 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000bc0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bc4:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f002 ff52 	bl	8003a70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <PCD_EP_OutSetupPacket_int+0x4c>)
 8000bce:	429d      	cmp	r5, r3
 8000bd0:	d902      	bls.n	8000bd8 <PCD_EP_OutSetupPacket_int+0x38>
 8000bd2:	79a3      	ldrb	r3, [r4, #6]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d001      	beq.n	8000bdc <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8000bd8:	2000      	movs	r0, #0
 8000bda:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000bdc:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8000be0:	2101      	movs	r1, #1
 8000be2:	6820      	ldr	r0, [r4, #0]
 8000be4:	f002 f9a0 	bl	8002f28 <USB_EP0_OutStart>
 8000be8:	e7f6      	b.n	8000bd8 <PCD_EP_OutSetupPacket_int+0x38>
 8000bea:	bf00      	nop
 8000bec:	4f54300a 	.word	0x4f54300a

08000bf0 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8000bf0:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d00c      	beq.n	8000c12 <HAL_PCD_SetAddress+0x22>
{
 8000bf8:	b510      	push	{r4, lr}
 8000bfa:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8000c02:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c04:	6800      	ldr	r0, [r0, #0]
 8000c06:	f002 f8f1 	bl	8002dec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8000c10:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000c12:	2002      	movs	r0, #2
}
 8000c14:	4770      	bx	lr

08000c16 <HAL_PCD_EP_Open>:
{
 8000c16:	b538      	push	{r3, r4, r5, lr}
 8000c18:	4605      	mov	r5, r0
 8000c1a:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8000c1c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8000c20:	d12b      	bne.n	8000c7a <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c22:	f001 0e0f 	and.w	lr, r1, #15
 8000c26:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8000c2a:	00a4      	lsls	r4, r4, #2
 8000c2c:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 8000c30:	4404      	add	r4, r0
 8000c32:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8000c34:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8000c38:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c42:	f00c 0c0f 	and.w	ip, ip, #15
 8000c46:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8000c4a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000c4e:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8000c50:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8000c52:	784a      	ldrb	r2, [r1, #1]
 8000c54:	b10a      	cbz	r2, 8000c5a <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 8000c56:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d01c      	beq.n	8000c98 <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 8000c5e:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d01b      	beq.n	8000c9e <HAL_PCD_EP_Open+0x88>
 8000c66:	2301      	movs	r3, #1
 8000c68:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000c6c:	6828      	ldr	r0, [r5, #0]
 8000c6e:	f001 fdea 	bl	8002846 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 8000c78:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c7a:	f001 000f 	and.w	r0, r1, #15
 8000c7e:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8000c82:	0089      	lsls	r1, r1, #2
 8000c84:	3110      	adds	r1, #16
 8000c86:	4429      	add	r1, r5
 8000c88:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8000c8a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8000c8e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8000c92:	2401      	movs	r4, #1
 8000c94:	7544      	strb	r4, [r0, #21]
 8000c96:	e7d4      	b.n	8000c42 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	714b      	strb	r3, [r1, #5]
 8000c9c:	e7df      	b.n	8000c5e <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	e7ea      	b.n	8000c78 <HAL_PCD_EP_Open+0x62>

08000ca2 <HAL_PCD_EP_Close>:
{
 8000ca2:	b510      	push	{r4, lr}
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8000ca8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8000cac:	d120      	bne.n	8000cf0 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cae:	f001 000f 	and.w	r0, r1, #15
 8000cb2:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8000cbc:	4423      	add	r3, r4
 8000cbe:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8000cc0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8000cc4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8000cce:	f002 020f 	and.w	r2, r2, #15
 8000cd2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8000cd4:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d018      	beq.n	8000d0e <HAL_PCD_EP_Close+0x6c>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000ce2:	6820      	ldr	r0, [r4, #0]
 8000ce4:	f001 fdfc 	bl	80028e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8000cee:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cf0:	f001 000f 	and.w	r0, r1, #15
 8000cf4:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	3310      	adds	r3, #16
 8000cfc:	4423      	add	r3, r4
 8000cfe:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8000d00:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8000d04:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000d08:	2301      	movs	r3, #1
 8000d0a:	7543      	strb	r3, [r0, #21]
 8000d0c:	e7df      	b.n	8000cce <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8000d0e:	2002      	movs	r0, #2
 8000d10:	e7ed      	b.n	8000cee <HAL_PCD_EP_Close+0x4c>

08000d12 <HAL_PCD_EP_Receive>:
{
 8000d12:	b510      	push	{r4, lr}
 8000d14:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d16:	f001 0c0f 	and.w	ip, r1, #15
 8000d1a:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8000d1e:	0089      	lsls	r1, r1, #2
 8000d20:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8000d24:	4401      	add	r1, r0
 8000d26:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8000d28:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8000d2c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8000d30:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 8000d34:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 8000d3e:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d42:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 8000d46:	7982      	ldrb	r2, [r0, #6]
 8000d48:	2a01      	cmp	r2, #1
 8000d4a:	d004      	beq.n	8000d56 <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8000d4c:	6800      	ldr	r0, [r0, #0]
 8000d4e:	f001 fead 	bl	8002aac <USB_EPStartXfer>
}
 8000d52:	2000      	movs	r0, #0
 8000d54:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8000d56:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 8000d5a:	e7f7      	b.n	8000d4c <HAL_PCD_EP_Receive+0x3a>

08000d5c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000d5c:	f001 010f 	and.w	r1, r1, #15
 8000d60:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8000d64:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8000d68:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 8000d6c:	4770      	bx	lr

08000d6e <HAL_PCD_EP_Transmit>:
{
 8000d6e:	b510      	push	{r4, lr}
 8000d70:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d72:	f001 0c0f 	and.w	ip, r1, #15
 8000d76:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8000d7a:	0089      	lsls	r1, r1, #2
 8000d7c:	3110      	adds	r1, #16
 8000d7e:	4401      	add	r1, r0
 8000d80:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8000d82:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8000d86:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8000d8a:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8000d8e:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d9e:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 8000da2:	7982      	ldrb	r2, [r0, #6]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d004      	beq.n	8000db2 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8000da8:	6800      	ldr	r0, [r0, #0]
 8000daa:	f001 fe7f 	bl	8002aac <USB_EPStartXfer>
}
 8000dae:	2000      	movs	r0, #0
 8000db0:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8000db2:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 8000db6:	e7f7      	b.n	8000da8 <HAL_PCD_EP_Transmit+0x3a>

08000db8 <HAL_PCD_EP_SetStall>:
{
 8000db8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000dba:	f001 050f 	and.w	r5, r1, #15
 8000dbe:	7902      	ldrb	r2, [r0, #4]
 8000dc0:	42aa      	cmp	r2, r5
 8000dc2:	d338      	bcc.n	8000e36 <HAL_PCD_EP_SetStall+0x7e>
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8000dc8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8000dcc:	d11f      	bne.n	8000e0e <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8000dce:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8000dd2:	0089      	lsls	r1, r1, #2
 8000dd4:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8000dd8:	4401      	add	r1, r0
 8000dda:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8000ddc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000de0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 8000dea:	2301      	movs	r3, #1
 8000dec:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000dee:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8000df0:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d020      	beq.n	8000e3a <HAL_PCD_EP_SetStall+0x82>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000dfe:	6820      	ldr	r0, [r4, #0]
 8000e00:	f001 ff99 	bl	8002d36 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e04:	b185      	cbz	r5, 8000e28 <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8000e0c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e0e:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8000e12:	0089      	lsls	r1, r1, #2
 8000e14:	3110      	adds	r1, #16
 8000e16:	4401      	add	r1, r0
 8000e18:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8000e1a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8000e1e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000e22:	2201      	movs	r2, #1
 8000e24:	755a      	strb	r2, [r3, #21]
 8000e26:	e7e0      	b.n	8000dea <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000e28:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8000e2c:	79a1      	ldrb	r1, [r4, #6]
 8000e2e:	6820      	ldr	r0, [r4, #0]
 8000e30:	f002 f87a 	bl	8002f28 <USB_EP0_OutStart>
 8000e34:	e7e7      	b.n	8000e06 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8000e36:	2001      	movs	r0, #1
 8000e38:	e7e8      	b.n	8000e0c <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	e7e6      	b.n	8000e0c <HAL_PCD_EP_SetStall+0x54>

08000e3e <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000e3e:	f001 030f 	and.w	r3, r1, #15
 8000e42:	7902      	ldrb	r2, [r0, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d330      	bcc.n	8000eaa <HAL_PCD_EP_ClrStall+0x6c>
{
 8000e48:	b510      	push	{r4, lr}
 8000e4a:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8000e4c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8000e50:	d11e      	bne.n	8000e90 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e52:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8000e56:	0089      	lsls	r1, r1, #2
 8000e58:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8000e5c:	4401      	add	r1, r0
 8000e5e:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8000e60:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8000e64:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 8000e6e:	2200      	movs	r2, #0
 8000e70:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e72:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8000e74:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d018      	beq.n	8000eae <HAL_PCD_EP_ClrStall+0x70>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000e82:	6820      	ldr	r0, [r4, #0]
 8000e84:	f001 ff84 	bl	8002d90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8000e8e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e90:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8000e94:	0089      	lsls	r1, r1, #2
 8000e96:	3110      	adds	r1, #16
 8000e98:	4401      	add	r1, r0
 8000e9a:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8000e9c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8000ea0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	7550      	strb	r0, [r2, #21]
 8000ea8:	e7e1      	b.n	8000e6e <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8000eaa:	2001      	movs	r0, #1
}
 8000eac:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8000eae:	2002      	movs	r0, #2
 8000eb0:	e7ed      	b.n	8000e8e <HAL_PCD_EP_ClrStall+0x50>

08000eb2 <HAL_PCD_EP_Abort>:
{
 8000eb2:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000eb4:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8000eb8:	d10c      	bne.n	8000ed4 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000eba:	f001 010f 	and.w	r1, r1, #15
 8000ebe:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8000ec2:	0089      	lsls	r1, r1, #2
 8000ec4:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8000ec8:	4401      	add	r1, r0
 8000eca:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8000ecc:	6800      	ldr	r0, [r0, #0]
 8000ece:	f001 fd77 	bl	80029c0 <USB_EPStopXfer>
}
 8000ed2:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ed4:	f001 010f 	and.w	r1, r1, #15
 8000ed8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8000edc:	0089      	lsls	r1, r1, #2
 8000ede:	3110      	adds	r1, #16
 8000ee0:	4401      	add	r1, r0
 8000ee2:	3104      	adds	r1, #4
 8000ee4:	e7f2      	b.n	8000ecc <HAL_PCD_EP_Abort+0x1a>

08000ee6 <HAL_PCD_IRQHandler>:
{
 8000ee6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eea:	b083      	sub	sp, #12
 8000eec:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000eee:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	f001 ffd6 	bl	8002ea2 <USB_GetMode>
 8000ef6:	b110      	cbz	r0, 8000efe <HAL_PCD_IRQHandler+0x18>
}
 8000ef8:	b003      	add	sp, #12
 8000efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000efe:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000f00:	6820      	ldr	r0, [r4, #0]
 8000f02:	f001 ff9f 	bl	8002e44 <USB_ReadInterrupts>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d0f6      	beq.n	8000ef8 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000f0a:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8000f14:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000f18:	6820      	ldr	r0, [r4, #0]
 8000f1a:	f001 ff93 	bl	8002e44 <USB_ReadInterrupts>
 8000f1e:	f010 0f02 	tst.w	r0, #2
 8000f22:	d004      	beq.n	8000f2e <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000f24:	6822      	ldr	r2, [r4, #0]
 8000f26:	6953      	ldr	r3, [r2, #20]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000f2e:	6820      	ldr	r0, [r4, #0]
 8000f30:	f001 ff88 	bl	8002e44 <USB_ReadInterrupts>
 8000f34:	f010 0f10 	tst.w	r0, #16
 8000f38:	d015      	beq.n	8000f66 <HAL_PCD_IRQHandler+0x80>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f3a:	6822      	ldr	r2, [r4, #0]
 8000f3c:	6993      	ldr	r3, [r2, #24]
 8000f3e:	f023 0310 	bic.w	r3, r3, #16
 8000f42:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8000f44:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000f48:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000f4c:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 8000f50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8000f54:	d04c      	beq.n	8000ff0 <HAL_PCD_IRQHandler+0x10a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000f56:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8000f5a:	d06f      	beq.n	800103c <HAL_PCD_IRQHandler+0x156>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f5c:	6822      	ldr	r2, [r4, #0]
 8000f5e:	6993      	ldr	r3, [r2, #24]
 8000f60:	f043 0310 	orr.w	r3, r3, #16
 8000f64:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000f66:	6820      	ldr	r0, [r4, #0]
 8000f68:	f001 ff6c 	bl	8002e44 <USB_ReadInterrupts>
 8000f6c:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8000f70:	d176      	bne.n	8001060 <HAL_PCD_IRQHandler+0x17a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000f72:	6820      	ldr	r0, [r4, #0]
 8000f74:	f001 ff66 	bl	8002e44 <USB_ReadInterrupts>
 8000f78:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8000f7c:	f040 80e0 	bne.w	8001140 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000f80:	6820      	ldr	r0, [r4, #0]
 8000f82:	f001 ff5f 	bl	8002e44 <USB_ReadInterrupts>
 8000f86:	2800      	cmp	r0, #0
 8000f88:	f2c0 8161 	blt.w	800124e <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000f8c:	6820      	ldr	r0, [r4, #0]
 8000f8e:	f001 ff59 	bl	8002e44 <USB_ReadInterrupts>
 8000f92:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8000f96:	d009      	beq.n	8000fac <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f013 0f01 	tst.w	r3, #1
 8000f9e:	f040 816e 	bne.w	800127e <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000fa2:	6822      	ldr	r2, [r4, #0]
 8000fa4:	6953      	ldr	r3, [r2, #20]
 8000fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000faa:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000fac:	6820      	ldr	r0, [r4, #0]
 8000fae:	f001 ff49 	bl	8002e44 <USB_ReadInterrupts>
 8000fb2:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8000fb6:	f040 8166 	bne.w	8001286 <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000fba:	6820      	ldr	r0, [r4, #0]
 8000fbc:	f001 ff42 	bl	8002e44 <USB_ReadInterrupts>
 8000fc0:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8000fc4:	f040 81b3 	bne.w	800132e <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000fc8:	6820      	ldr	r0, [r4, #0]
 8000fca:	f001 ff3b 	bl	8002e44 <USB_ReadInterrupts>
 8000fce:	f010 0f08 	tst.w	r0, #8
 8000fd2:	f040 81c4 	bne.w	800135e <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8000fd6:	6820      	ldr	r0, [r4, #0]
 8000fd8:	f001 ff34 	bl	8002e44 <USB_ReadInterrupts>
 8000fdc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8000fe0:	f000 81d7 	beq.w	8001392 <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8000fe4:	69ab      	ldr	r3, [r5, #24]
 8000fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fea:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8000fec:	2601      	movs	r6, #1
 8000fee:	e1c0      	b.n	8001372 <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000ff0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8000ff4:	ea18 0f03 	tst.w	r8, r3
 8000ff8:	d0b0      	beq.n	8000f5c <HAL_PCD_IRQHandler+0x76>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000ffa:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 8001008:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 800100c:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8001010:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8001014:	4628      	mov	r0, r5
 8001016:	f001 fe6b 	bl	8002cf0 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800101a:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 800101e:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8001022:	4453      	add	r3, sl
 8001024:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001028:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 800102c:	9a01      	ldr	r2, [sp, #4]
 800102e:	444a      	add	r2, r9
 8001030:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001034:	4453      	add	r3, sl
 8001036:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 800103a:	e78f      	b.n	8000f5c <HAL_PCD_IRQHandler+0x76>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800103c:	2208      	movs	r2, #8
 800103e:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8001042:	4628      	mov	r0, r5
 8001044:	f001 fe54 	bl	8002cf0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001048:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800104c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001050:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8001054:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8001058:	4442      	add	r2, r8
 800105a:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 800105e:	e77d      	b.n	8000f5c <HAL_PCD_IRQHandler+0x76>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001060:	6820      	ldr	r0, [r4, #0]
 8001062:	f001 fef3 	bl	8002e4c <USB_ReadDevAllOutEpInterrupt>
 8001066:	4680      	mov	r8, r0
      epnum = 0U;
 8001068:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800106a:	e035      	b.n	80010d8 <HAL_PCD_IRQHandler+0x1f2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800106c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001070:	2201      	movs	r2, #1
 8001072:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001076:	4649      	mov	r1, r9
 8001078:	4620      	mov	r0, r4
 800107a:	f7ff fd0f 	bl	8000a9c <PCD_EP_OutXfrComplete_int>
 800107e:	e03c      	b.n	80010fa <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001080:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001084:	2208      	movs	r2, #8
 8001086:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800108a:	4649      	mov	r1, r9
 800108c:	4620      	mov	r0, r4
 800108e:	f7ff fd87 	bl	8000ba0 <PCD_EP_OutSetupPacket_int>
 8001092:	e035      	b.n	8001100 <HAL_PCD_IRQHandler+0x21a>
            if (ep->is_iso_incomplete == 1U)
 8001094:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001098:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800109c:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d041      	beq.n	8001128 <HAL_PCD_IRQHandler+0x242>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80010a4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80010a8:	2202      	movs	r2, #2
 80010aa:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80010ae:	f01a 0f20 	tst.w	sl, #32
 80010b2:	d004      	beq.n	80010be <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80010b4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80010b8:	2220      	movs	r2, #32
 80010ba:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80010be:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 80010c2:	d005      	beq.n	80010d0 <HAL_PCD_IRQHandler+0x1ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80010c4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80010c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010cc:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 80010d0:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80010d4:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80010d8:	f1b8 0f00 	cmp.w	r8, #0
 80010dc:	f43f af49 	beq.w	8000f72 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 80010e0:	f018 0f01 	tst.w	r8, #1
 80010e4:	d0f4      	beq.n	80010d0 <HAL_PCD_IRQHandler+0x1ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80010e6:	fa5f fb89 	uxtb.w	fp, r9
 80010ea:	4659      	mov	r1, fp
 80010ec:	6820      	ldr	r0, [r4, #0]
 80010ee:	f001 febd 	bl	8002e6c <USB_ReadDevOutEPInterrupt>
 80010f2:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80010f4:	f010 0f01 	tst.w	r0, #1
 80010f8:	d1b8      	bne.n	800106c <HAL_PCD_IRQHandler+0x186>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80010fa:	f01a 0f08 	tst.w	sl, #8
 80010fe:	d1bf      	bne.n	8001080 <HAL_PCD_IRQHandler+0x19a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001100:	f01a 0f10 	tst.w	sl, #16
 8001104:	d004      	beq.n	8001110 <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001106:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800110a:	2210      	movs	r2, #16
 800110c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001110:	f01a 0f02 	tst.w	sl, #2
 8001114:	d0cb      	beq.n	80010ae <HAL_PCD_IRQHandler+0x1c8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001116:	696b      	ldr	r3, [r5, #20]
 8001118:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800111c:	d0ba      	beq.n	8001094 <HAL_PCD_IRQHandler+0x1ae>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	e7b5      	b.n	8001094 <HAL_PCD_IRQHandler+0x1ae>
              ep->is_iso_incomplete = 0U;
 8001128:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800112c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001136:	4659      	mov	r1, fp
 8001138:	4620      	mov	r0, r4
 800113a:	f002 fcef 	bl	8003b1c <HAL_PCD_ISOOUTIncompleteCallback>
 800113e:	e7b1      	b.n	80010a4 <HAL_PCD_IRQHandler+0x1be>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001140:	6820      	ldr	r0, [r4, #0]
 8001142:	f001 fe8b 	bl	8002e5c <USB_ReadDevAllInEpInterrupt>
 8001146:	4680      	mov	r8, r0
      epnum = 0U;
 8001148:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800114a:	e025      	b.n	8001198 <HAL_PCD_IRQHandler+0x2b2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800114c:	4659      	mov	r1, fp
 800114e:	4620      	mov	r0, r4
 8001150:	f002 fca2 	bl	8003a98 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001154:	f01a 0f08 	tst.w	sl, #8
 8001158:	d004      	beq.n	8001164 <HAL_PCD_IRQHandler+0x27e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800115a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800115e:	2208      	movs	r2, #8
 8001160:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001164:	f01a 0f10 	tst.w	sl, #16
 8001168:	d004      	beq.n	8001174 <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800116a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800116e:	2210      	movs	r2, #16
 8001170:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001174:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8001178:	d004      	beq.n	8001184 <HAL_PCD_IRQHandler+0x29e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800117a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800117e:	2240      	movs	r2, #64	@ 0x40
 8001180:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001184:	f01a 0f02 	tst.w	sl, #2
 8001188:	d140      	bne.n	800120c <HAL_PCD_IRQHandler+0x326>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800118a:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 800118e:	d159      	bne.n	8001244 <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 8001190:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001194:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001198:	f1b8 0f00 	cmp.w	r8, #0
 800119c:	f43f aef0 	beq.w	8000f80 <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80011a0:	f018 0f01 	tst.w	r8, #1
 80011a4:	d0f4      	beq.n	8001190 <HAL_PCD_IRQHandler+0x2aa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011a6:	fa5f fb89 	uxtb.w	fp, r9
 80011aa:	4659      	mov	r1, fp
 80011ac:	6820      	ldr	r0, [r4, #0]
 80011ae:	f001 fe66 	bl	8002e7e <USB_ReadDevInEPInterrupt>
 80011b2:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80011b4:	f010 0f01 	tst.w	r0, #1
 80011b8:	d0cc      	beq.n	8001154 <HAL_PCD_IRQHandler+0x26e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80011ba:	f009 020f 	and.w	r2, r9, #15
 80011be:	2101      	movs	r1, #1
 80011c0:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80011c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011c6:	ea23 0302 	bic.w	r3, r3, r2
 80011ca:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80011cc:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80011d0:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 80011d4:	79a3      	ldrb	r3, [r4, #6]
 80011d6:	428b      	cmp	r3, r1
 80011d8:	d1b8      	bne.n	800114c <HAL_PCD_IRQHandler+0x266>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80011da:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80011de:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80011e2:	6a1a      	ldr	r2, [r3, #32]
 80011e4:	69d9      	ldr	r1, [r3, #28]
 80011e6:	440a      	add	r2, r1
 80011e8:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80011ea:	f1b9 0f00 	cmp.w	r9, #0
 80011ee:	d1ad      	bne.n	800114c <HAL_PCD_IRQHandler+0x266>
 80011f0:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80011f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80011f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1a6      	bne.n	800114c <HAL_PCD_IRQHandler+0x266>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80011fe:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001202:	2101      	movs	r1, #1
 8001204:	6820      	ldr	r0, [r4, #0]
 8001206:	f001 fe8f 	bl	8002f28 <USB_EP0_OutStart>
 800120a:	e79f      	b.n	800114c <HAL_PCD_IRQHandler+0x266>
            (void)USB_FlushTxFifo(USBx, epnum);
 800120c:	4649      	mov	r1, r9
 800120e:	4628      	mov	r0, r5
 8001210:	f001 f9ec 	bl	80025ec <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8001214:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001218:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800121c:	7ddb      	ldrb	r3, [r3, #23]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d005      	beq.n	800122e <HAL_PCD_IRQHandler+0x348>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001222:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001226:	2202      	movs	r2, #2
 8001228:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 800122c:	e7ad      	b.n	800118a <HAL_PCD_IRQHandler+0x2a4>
              ep->is_iso_incomplete = 0U;
 800122e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001232:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001236:	2200      	movs	r2, #0
 8001238:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800123a:	4659      	mov	r1, fp
 800123c:	4620      	mov	r0, r4
 800123e:	f002 fc73 	bl	8003b28 <HAL_PCD_ISOINIncompleteCallback>
 8001242:	e7ee      	b.n	8001222 <HAL_PCD_IRQHandler+0x33c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001244:	4649      	mov	r1, r9
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff fb1c 	bl	8000884 <PCD_WriteEmptyTxFifo>
 800124c:	e7a0      	b.n	8001190 <HAL_PCD_IRQHandler+0x2aa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8001256:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 800125a:	2b01      	cmp	r3, #1
 800125c:	d008      	beq.n	8001270 <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 800125e:	4620      	mov	r0, r4
 8001260:	f002 fc56 	bl	8003b10 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001264:	6822      	ldr	r2, [r4, #0]
 8001266:	6953      	ldr	r3, [r2, #20]
 8001268:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800126c:	6153      	str	r3, [r2, #20]
 800126e:	e68d      	b.n	8000f8c <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 8001270:	2100      	movs	r1, #0
 8001272:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001276:	4620      	mov	r0, r4
 8001278:	f000 f93f 	bl	80014fa <HAL_PCDEx_LPM_Callback>
 800127c:	e7f2      	b.n	8001264 <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 800127e:	4620      	mov	r0, r4
 8001280:	f002 fc2e 	bl	8003ae0 <HAL_PCD_SuspendCallback>
 8001284:	e68d      	b.n	8000fa2 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800128e:	2110      	movs	r1, #16
 8001290:	6820      	ldr	r0, [r4, #0]
 8001292:	f001 f9ab 	bl	80025ec <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001296:	e01a      	b.n	80012ce <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001298:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 800129c:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 80012a0:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80012a4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80012a8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80012ac:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80012b0:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80012b4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80012b8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80012bc:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80012c0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80012c4:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80012c8:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012cc:	3601      	adds	r6, #1
 80012ce:	7923      	ldrb	r3, [r4, #4]
 80012d0:	42b3      	cmp	r3, r6
 80012d2:	d8e1      	bhi.n	8001298 <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80012da:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80012dc:	7be3      	ldrb	r3, [r4, #15]
 80012de:	b1db      	cbz	r3, 8001318 <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80012e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012e4:	f043 030b 	orr.w	r3, r3, #11
 80012e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80012ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012ee:	f043 030b 	orr.w	r3, r3, #11
 80012f2:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80012f4:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 80012f8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80012fc:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001300:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001304:	79a1      	ldrb	r1, [r4, #6]
 8001306:	6820      	ldr	r0, [r4, #0]
 8001308:	f001 fe0e 	bl	8002f28 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800130c:	6822      	ldr	r2, [r4, #0]
 800130e:	6953      	ldr	r3, [r2, #20]
 8001310:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001314:	6153      	str	r3, [r2, #20]
 8001316:	e650      	b.n	8000fba <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800131e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001322:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	f043 030b 	orr.w	r3, r3, #11
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	e7e2      	b.n	80012f4 <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 800132e:	6820      	ldr	r0, [r4, #0]
 8001330:	f001 fdec 	bl	8002f0c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001334:	6820      	ldr	r0, [r4, #0]
 8001336:	f001 fa75 	bl	8002824 <USB_GetDevSpeed>
 800133a:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800133c:	6826      	ldr	r6, [r4, #0]
 800133e:	f000 fbdd 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001342:	4601      	mov	r1, r0
 8001344:	79e2      	ldrb	r2, [r4, #7]
 8001346:	4630      	mov	r0, r6
 8001348:	f001 f8d2 	bl	80024f0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800134c:	4620      	mov	r0, r4
 800134e:	f002 fbb4 	bl	8003aba <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001352:	6822      	ldr	r2, [r4, #0]
 8001354:	6953      	ldr	r3, [r2, #20]
 8001356:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800135a:	6153      	str	r3, [r2, #20]
 800135c:	e634      	b.n	8000fc8 <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 800135e:	4620      	mov	r0, r4
 8001360:	f002 fba5 	bl	8003aae <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001364:	6822      	ldr	r2, [r4, #0]
 8001366:	6953      	ldr	r3, [r2, #20]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	6153      	str	r3, [r2, #20]
 800136e:	e632      	b.n	8000fd6 <HAL_PCD_IRQHandler+0xf0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001370:	3601      	adds	r6, #1
 8001372:	7923      	ldrb	r3, [r4, #4]
 8001374:	42b3      	cmp	r3, r6
 8001376:	d90c      	bls.n	8001392 <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001378:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800137c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001380:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8001384:	2b01      	cmp	r3, #1
 8001386:	d1f3      	bne.n	8001370 <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001388:	b2f1      	uxtb	r1, r6
 800138a:	4620      	mov	r0, r4
 800138c:	f7ff fd91 	bl	8000eb2 <HAL_PCD_EP_Abort>
 8001390:	e7ee      	b.n	8001370 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001392:	6820      	ldr	r0, [r4, #0]
 8001394:	f001 fd56 	bl	8002e44 <USB_ReadInterrupts>
 8001398:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 800139c:	d125      	bne.n	80013ea <HAL_PCD_IRQHandler+0x504>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800139e:	6820      	ldr	r0, [r4, #0]
 80013a0:	f001 fd50 	bl	8002e44 <USB_ReadInterrupts>
 80013a4:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 80013a8:	d059      	beq.n	800145e <HAL_PCD_IRQHandler+0x578>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80013aa:	2301      	movs	r3, #1
 80013ac:	e026      	b.n	80013fc <HAL_PCD_IRQHandler+0x516>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80013ae:	3601      	adds	r6, #1
 80013b0:	7923      	ldrb	r3, [r4, #4]
 80013b2:	42b3      	cmp	r3, r6
 80013b4:	d91b      	bls.n	80013ee <HAL_PCD_IRQHandler+0x508>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80013b6:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 80013ba:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80013be:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80013c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80013c6:	7e1b      	ldrb	r3, [r3, #24]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d1f0      	bne.n	80013ae <HAL_PCD_IRQHandler+0x4c8>
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	daee      	bge.n	80013ae <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80013d0:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80013d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80013d8:	2201      	movs	r2, #1
 80013da:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80013dc:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 80013e0:	b2c9      	uxtb	r1, r1
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff fd65 	bl	8000eb2 <HAL_PCD_EP_Abort>
 80013e8:	e7e1      	b.n	80013ae <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80013ea:	2601      	movs	r6, #1
 80013ec:	e7e0      	b.n	80013b0 <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80013ee:	6822      	ldr	r2, [r4, #0]
 80013f0:	6953      	ldr	r3, [r2, #20]
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013f6:	6153      	str	r3, [r2, #20]
 80013f8:	e7d1      	b.n	800139e <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80013fa:	3301      	adds	r3, #1
 80013fc:	7922      	ldrb	r2, [r4, #4]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d928      	bls.n	8001454 <HAL_PCD_IRQHandler+0x56e>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001402:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001406:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800140a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800140e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001412:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 8001416:	2a01      	cmp	r2, #1
 8001418:	d1ef      	bne.n	80013fa <HAL_PCD_IRQHandler+0x514>
 800141a:	2900      	cmp	r1, #0
 800141c:	daed      	bge.n	80013fa <HAL_PCD_IRQHandler+0x514>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800141e:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 8001422:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8001426:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800142a:	4291      	cmp	r1, r2
 800142c:	d1e5      	bne.n	80013fa <HAL_PCD_IRQHandler+0x514>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800142e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001432:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001436:	2101      	movs	r1, #1
 8001438:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800143c:	69aa      	ldr	r2, [r5, #24]
 800143e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001442:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001444:	696a      	ldr	r2, [r5, #20]
 8001446:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800144a:	d1d6      	bne.n	80013fa <HAL_PCD_IRQHandler+0x514>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001452:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001454:	6822      	ldr	r2, [r4, #0]
 8001456:	6953      	ldr	r3, [r2, #20]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800145e:	6820      	ldr	r0, [r4, #0]
 8001460:	f001 fcf0 	bl	8002e44 <USB_ReadInterrupts>
 8001464:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8001468:	d110      	bne.n	800148c <HAL_PCD_IRQHandler+0x5a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800146a:	6820      	ldr	r0, [r4, #0]
 800146c:	f001 fcea 	bl	8002e44 <USB_ReadInterrupts>
 8001470:	f010 0f04 	tst.w	r0, #4
 8001474:	f43f ad40 	beq.w	8000ef8 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800147c:	f015 0f04 	tst.w	r5, #4
 8001480:	d10d      	bne.n	800149e <HAL_PCD_IRQHandler+0x5b8>
      hpcd->Instance->GOTGINT |= RegVal;
 8001482:	6822      	ldr	r2, [r4, #0]
 8001484:	6853      	ldr	r3, [r2, #4]
 8001486:	432b      	orrs	r3, r5
 8001488:	6053      	str	r3, [r2, #4]
 800148a:	e535      	b.n	8000ef8 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 800148c:	4620      	mov	r0, r4
 800148e:	f002 fb51 	bl	8003b34 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001492:	6822      	ldr	r2, [r4, #0]
 8001494:	6953      	ldr	r3, [r2, #20]
 8001496:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800149a:	6153      	str	r3, [r2, #20]
 800149c:	e7e5      	b.n	800146a <HAL_PCD_IRQHandler+0x584>
        HAL_PCD_DisconnectCallback(hpcd);
 800149e:	4620      	mov	r0, r4
 80014a0:	f002 fb4e 	bl	8003b40 <HAL_PCD_DisconnectCallback>
 80014a4:	e7ed      	b.n	8001482 <HAL_PCD_IRQHandler+0x59c>

080014a6 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80014a6:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80014a8:	6804      	ldr	r4, [r0, #0]
 80014aa:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 80014ac:	b931      	cbnz	r1, 80014bc <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80014ae:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80014b2:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80014b4:	2000      	movs	r0, #0
 80014b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80014be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80014c0:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	e008      	b.n	80014da <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80014c8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80014cc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80014d0:	6849      	ldr	r1, [r1, #4]
 80014d2:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80014d6:	3301      	adds	r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	f10c 31ff 	add.w	r1, ip, #4294967295
 80014de:	428b      	cmp	r3, r1
 80014e0:	d3f2      	bcc.n	80014c8 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80014e2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80014e6:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 80014ea:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80014ee:	6060      	str	r0, [r4, #4]
 80014f0:	e7e0      	b.n	80014b4 <HAL_PCDEx_SetTxFiFo+0xe>

080014f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80014f2:	6803      	ldr	r3, [r0, #0]
 80014f4:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 80014f6:	2000      	movs	r0, #0
 80014f8:	4770      	bx	lr

080014fa <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80014fa:	4770      	bx	lr

080014fc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014fc:	2800      	cmp	r0, #0
 80014fe:	f000 81e0 	beq.w	80018c2 <HAL_RCC_OscConfig+0x3c6>
{
 8001502:	b570      	push	{r4, r5, r6, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001508:	6803      	ldr	r3, [r0, #0]
 800150a:	f013 0f01 	tst.w	r3, #1
 800150e:	d03b      	beq.n	8001588 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001510:	4b9f      	ldr	r3, [pc, #636]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b04      	cmp	r3, #4
 800151a:	d02c      	beq.n	8001576 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800151c:	4b9c      	ldr	r3, [pc, #624]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001524:	2b08      	cmp	r3, #8
 8001526:	d021      	beq.n	800156c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001528:	6863      	ldr	r3, [r4, #4]
 800152a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800152e:	d04f      	beq.n	80015d0 <HAL_RCC_OscConfig+0xd4>
 8001530:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001534:	d052      	beq.n	80015dc <HAL_RCC_OscConfig+0xe0>
 8001536:	4b96      	ldr	r3, [pc, #600]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001546:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001548:	6863      	ldr	r3, [r4, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d050      	beq.n	80015f0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff f809 	bl	8000564 <HAL_GetTick>
 8001552:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001554:	4b8e      	ldr	r3, [pc, #568]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800155c:	d114      	bne.n	8001588 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155e:	f7ff f801 	bl	8000564 <HAL_GetTick>
 8001562:	1b40      	subs	r0, r0, r5
 8001564:	2864      	cmp	r0, #100	@ 0x64
 8001566:	d9f5      	bls.n	8001554 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001568:	2003      	movs	r0, #3
 800156a:	e1b1      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800156c:	4b88      	ldr	r3, [pc, #544]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001574:	d0d8      	beq.n	8001528 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001576:	4b86      	ldr	r3, [pc, #536]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800157e:	d003      	beq.n	8001588 <HAL_RCC_OscConfig+0x8c>
 8001580:	6863      	ldr	r3, [r4, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 819f 	beq.w	80018c6 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	f013 0f02 	tst.w	r3, #2
 800158e:	d054      	beq.n	800163a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001590:	4b7f      	ldr	r3, [pc, #508]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f013 0f0c 	tst.w	r3, #12
 8001598:	d03e      	beq.n	8001618 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159a:	4b7d      	ldr	r3, [pc, #500]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d033      	beq.n	800160e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015a6:	68e3      	ldr	r3, [r4, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d068      	beq.n	800167e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ac:	4b79      	ldr	r3, [pc, #484]	@ (8001794 <HAL_RCC_OscConfig+0x298>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b2:	f7fe ffd7 	bl	8000564 <HAL_GetTick>
 80015b6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	4b75      	ldr	r3, [pc, #468]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f013 0f02 	tst.w	r3, #2
 80015c0:	d154      	bne.n	800166c <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c2:	f7fe ffcf 	bl	8000564 <HAL_GetTick>
 80015c6:	1b40      	subs	r0, r0, r5
 80015c8:	2802      	cmp	r0, #2
 80015ca:	d9f5      	bls.n	80015b8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80015cc:	2003      	movs	r0, #3
 80015ce:	e17f      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d0:	4a6f      	ldr	r2, [pc, #444]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 80015d2:	6813      	ldr	r3, [r2, #0]
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e7b5      	b.n	8001548 <HAL_RCC_OscConfig+0x4c>
 80015dc:	4b6c      	ldr	r3, [pc, #432]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	e7ab      	b.n	8001548 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80015f0:	f7fe ffb8 	bl	8000564 <HAL_GetTick>
 80015f4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f6:	4b66      	ldr	r3, [pc, #408]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80015fe:	d0c3      	beq.n	8001588 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001600:	f7fe ffb0 	bl	8000564 <HAL_GetTick>
 8001604:	1b40      	subs	r0, r0, r5
 8001606:	2864      	cmp	r0, #100	@ 0x64
 8001608:	d9f5      	bls.n	80015f6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800160a:	2003      	movs	r0, #3
 800160c:	e160      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800160e:	4b60      	ldr	r3, [pc, #384]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001616:	d1c6      	bne.n	80015a6 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001618:	4b5d      	ldr	r3, [pc, #372]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f013 0f02 	tst.w	r3, #2
 8001620:	d003      	beq.n	800162a <HAL_RCC_OscConfig+0x12e>
 8001622:	68e3      	ldr	r3, [r4, #12]
 8001624:	2b01      	cmp	r3, #1
 8001626:	f040 8150 	bne.w	80018ca <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162a:	4a59      	ldr	r2, [pc, #356]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 800162c:	6813      	ldr	r3, [r2, #0]
 800162e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001632:	6921      	ldr	r1, [r4, #16]
 8001634:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001638:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163a:	6823      	ldr	r3, [r4, #0]
 800163c:	f013 0f08 	tst.w	r3, #8
 8001640:	d042      	beq.n	80016c8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001642:	6963      	ldr	r3, [r4, #20]
 8001644:	b36b      	cbz	r3, 80016a2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001646:	4b53      	ldr	r3, [pc, #332]	@ (8001794 <HAL_RCC_OscConfig+0x298>)
 8001648:	2201      	movs	r2, #1
 800164a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164e:	f7fe ff89 	bl	8000564 <HAL_GetTick>
 8001652:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001654:	4b4e      	ldr	r3, [pc, #312]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 8001656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001658:	f013 0f02 	tst.w	r3, #2
 800165c:	d134      	bne.n	80016c8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165e:	f7fe ff81 	bl	8000564 <HAL_GetTick>
 8001662:	1b40      	subs	r0, r0, r5
 8001664:	2802      	cmp	r0, #2
 8001666:	d9f5      	bls.n	8001654 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001668:	2003      	movs	r0, #3
 800166a:	e131      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4a48      	ldr	r2, [pc, #288]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 800166e:	6813      	ldr	r3, [r2, #0]
 8001670:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001674:	6921      	ldr	r1, [r4, #16]
 8001676:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e7dd      	b.n	800163a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b45      	ldr	r3, [pc, #276]	@ (8001794 <HAL_RCC_OscConfig+0x298>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001684:	f7fe ff6e 	bl	8000564 <HAL_GetTick>
 8001688:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	4b41      	ldr	r3, [pc, #260]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f013 0f02 	tst.w	r3, #2
 8001692:	d0d2      	beq.n	800163a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001694:	f7fe ff66 	bl	8000564 <HAL_GetTick>
 8001698:	1b40      	subs	r0, r0, r5
 800169a:	2802      	cmp	r0, #2
 800169c:	d9f5      	bls.n	800168a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800169e:	2003      	movs	r0, #3
 80016a0:	e116      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001794 <HAL_RCC_OscConfig+0x298>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7fe ff5b 	bl	8000564 <HAL_GetTick>
 80016ae:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b0:	4b37      	ldr	r3, [pc, #220]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 80016b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016b4:	f013 0f02 	tst.w	r3, #2
 80016b8:	d006      	beq.n	80016c8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ba:	f7fe ff53 	bl	8000564 <HAL_GetTick>
 80016be:	1b40      	subs	r0, r0, r5
 80016c0:	2802      	cmp	r0, #2
 80016c2:	d9f5      	bls.n	80016b0 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80016c4:	2003      	movs	r0, #3
 80016c6:	e103      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	f013 0f04 	tst.w	r3, #4
 80016ce:	d077      	beq.n	80017c0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80016d8:	d133      	bne.n	8001742 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	4b2c      	ldr	r3, [pc, #176]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 80016e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016e2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80016e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80016f2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	4b28      	ldr	r3, [pc, #160]	@ (8001798 <HAL_RCC_OscConfig+0x29c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80016fc:	d023      	beq.n	8001746 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fe:	68a3      	ldr	r3, [r4, #8]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d034      	beq.n	800176e <HAL_RCC_OscConfig+0x272>
 8001704:	2b05      	cmp	r3, #5
 8001706:	d038      	beq.n	800177a <HAL_RCC_OscConfig+0x27e>
 8001708:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 800170a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	671a      	str	r2, [r3, #112]	@ 0x70
 8001712:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001714:	f022 0204 	bic.w	r2, r2, #4
 8001718:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800171a:	68a3      	ldr	r3, [r4, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d03d      	beq.n	800179c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001720:	f7fe ff20 	bl	8000564 <HAL_GetTick>
 8001724:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001726:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172a:	f013 0f02 	tst.w	r3, #2
 800172e:	d146      	bne.n	80017be <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7fe ff18 	bl	8000564 <HAL_GetTick>
 8001734:	1b80      	subs	r0, r0, r6
 8001736:	f241 3388 	movw	r3, #5000	@ 0x1388
 800173a:	4298      	cmp	r0, r3
 800173c:	d9f3      	bls.n	8001726 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800173e:	2003      	movs	r0, #3
 8001740:	e0c6      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001742:	2500      	movs	r5, #0
 8001744:	e7d6      	b.n	80016f4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001746:	4a14      	ldr	r2, [pc, #80]	@ (8001798 <HAL_RCC_OscConfig+0x29c>)
 8001748:	6813      	ldr	r3, [r2, #0]
 800174a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001750:	f7fe ff08 	bl	8000564 <HAL_GetTick>
 8001754:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <HAL_RCC_OscConfig+0x29c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800175e:	d1ce      	bne.n	80016fe <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001760:	f7fe ff00 	bl	8000564 <HAL_GetTick>
 8001764:	1b80      	subs	r0, r0, r6
 8001766:	2802      	cmp	r0, #2
 8001768:	d9f5      	bls.n	8001756 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800176a:	2003      	movs	r0, #3
 800176c:	e0b0      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176e:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 8001770:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6713      	str	r3, [r2, #112]	@ 0x70
 8001778:	e7cf      	b.n	800171a <HAL_RCC_OscConfig+0x21e>
 800177a:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <HAL_RCC_OscConfig+0x294>)
 800177c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800177e:	f042 0204 	orr.w	r2, r2, #4
 8001782:	671a      	str	r2, [r3, #112]	@ 0x70
 8001784:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001786:	f042 0201 	orr.w	r2, r2, #1
 800178a:	671a      	str	r2, [r3, #112]	@ 0x70
 800178c:	e7c5      	b.n	800171a <HAL_RCC_OscConfig+0x21e>
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	42470000 	.word	0x42470000
 8001798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179c:	f7fe fee2 	bl	8000564 <HAL_GetTick>
 80017a0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a2:	4b52      	ldr	r3, [pc, #328]	@ (80018ec <HAL_RCC_OscConfig+0x3f0>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a6:	f013 0f02 	tst.w	r3, #2
 80017aa:	d008      	beq.n	80017be <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ac:	f7fe feda 	bl	8000564 <HAL_GetTick>
 80017b0:	1b80      	subs	r0, r0, r6
 80017b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017b6:	4298      	cmp	r0, r3
 80017b8:	d9f3      	bls.n	80017a2 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80017ba:	2003      	movs	r0, #3
 80017bc:	e088      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017be:	b9ed      	cbnz	r5, 80017fc <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c0:	69a3      	ldr	r3, [r4, #24]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8083 	beq.w	80018ce <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c8:	4a48      	ldr	r2, [pc, #288]	@ (80018ec <HAL_RCC_OscConfig+0x3f0>)
 80017ca:	6892      	ldr	r2, [r2, #8]
 80017cc:	f002 020c 	and.w	r2, r2, #12
 80017d0:	2a08      	cmp	r2, #8
 80017d2:	d051      	beq.n	8001878 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d017      	beq.n	8001808 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d8:	4b45      	ldr	r3, [pc, #276]	@ (80018f0 <HAL_RCC_OscConfig+0x3f4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7fe fec1 	bl	8000564 <HAL_GetTick>
 80017e2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e4:	4b41      	ldr	r3, [pc, #260]	@ (80018ec <HAL_RCC_OscConfig+0x3f0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80017ec:	d042      	beq.n	8001874 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ee:	f7fe feb9 	bl	8000564 <HAL_GetTick>
 80017f2:	1b00      	subs	r0, r0, r4
 80017f4:	2802      	cmp	r0, #2
 80017f6:	d9f5      	bls.n	80017e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80017f8:	2003      	movs	r0, #3
 80017fa:	e069      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fc:	4a3b      	ldr	r2, [pc, #236]	@ (80018ec <HAL_RCC_OscConfig+0x3f0>)
 80017fe:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001800:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001804:	6413      	str	r3, [r2, #64]	@ 0x40
 8001806:	e7db      	b.n	80017c0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001808:	4b39      	ldr	r3, [pc, #228]	@ (80018f0 <HAL_RCC_OscConfig+0x3f4>)
 800180a:	2200      	movs	r2, #0
 800180c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800180e:	f7fe fea9 	bl	8000564 <HAL_GetTick>
 8001812:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001814:	4b35      	ldr	r3, [pc, #212]	@ (80018ec <HAL_RCC_OscConfig+0x3f0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800181c:	d006      	beq.n	800182c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181e:	f7fe fea1 	bl	8000564 <HAL_GetTick>
 8001822:	1b40      	subs	r0, r0, r5
 8001824:	2802      	cmp	r0, #2
 8001826:	d9f5      	bls.n	8001814 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001828:	2003      	movs	r0, #3
 800182a:	e051      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800182c:	69e3      	ldr	r3, [r4, #28]
 800182e:	6a22      	ldr	r2, [r4, #32]
 8001830:	4313      	orrs	r3, r2
 8001832:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001834:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001838:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800183a:	0852      	lsrs	r2, r2, #1
 800183c:	3a01      	subs	r2, #1
 800183e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001842:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001844:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001848:	4a28      	ldr	r2, [pc, #160]	@ (80018ec <HAL_RCC_OscConfig+0x3f0>)
 800184a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800184c:	4b28      	ldr	r3, [pc, #160]	@ (80018f0 <HAL_RCC_OscConfig+0x3f4>)
 800184e:	2201      	movs	r2, #1
 8001850:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001852:	f7fe fe87 	bl	8000564 <HAL_GetTick>
 8001856:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001858:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <HAL_RCC_OscConfig+0x3f0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001860:	d106      	bne.n	8001870 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001862:	f7fe fe7f 	bl	8000564 <HAL_GetTick>
 8001866:	1b00      	subs	r0, r0, r4
 8001868:	2802      	cmp	r0, #2
 800186a:	d9f5      	bls.n	8001858 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 800186c:	2003      	movs	r0, #3
 800186e:	e02f      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001870:	2000      	movs	r0, #0
 8001872:	e02d      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
 8001874:	2000      	movs	r0, #0
 8001876:	e02b      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001878:	2b01      	cmp	r3, #1
 800187a:	d02b      	beq.n	80018d4 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 800187c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_RCC_OscConfig+0x3f0>)
 800187e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001880:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001884:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001886:	4291      	cmp	r1, r2
 8001888:	d126      	bne.n	80018d8 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800188a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800188e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001890:	428a      	cmp	r2, r1
 8001892:	d123      	bne.n	80018dc <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001894:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001896:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800189a:	401a      	ands	r2, r3
 800189c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80018a0:	d11e      	bne.n	80018e0 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80018a6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80018a8:	0852      	lsrs	r2, r2, #1
 80018aa:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ac:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80018b0:	d118      	bne.n	80018e4 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018b2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80018b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80018bc:	d114      	bne.n	80018e8 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80018be:	2000      	movs	r0, #0
 80018c0:	e006      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80018c2:	2001      	movs	r0, #1
}
 80018c4:	4770      	bx	lr
        return HAL_ERROR;
 80018c6:	2001      	movs	r0, #1
 80018c8:	e002      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80018ca:	2001      	movs	r0, #1
 80018cc:	e000      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80018ce:	2000      	movs	r0, #0
}
 80018d0:	b002      	add	sp, #8
 80018d2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80018d4:	2001      	movs	r0, #1
 80018d6:	e7fb      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80018d8:	2001      	movs	r0, #1
 80018da:	e7f9      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
 80018dc:	2001      	movs	r0, #1
 80018de:	e7f7      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
 80018e0:	2001      	movs	r0, #1
 80018e2:	e7f5      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
 80018e4:	2001      	movs	r0, #1
 80018e6:	e7f3      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
 80018e8:	2001      	movs	r0, #1
 80018ea:	e7f1      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d4>
 80018ec:	40023800 	.word	0x40023800
 80018f0:	42470000 	.word	0x42470000

080018f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f6:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d041      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x92>
 8001902:	2b08      	cmp	r3, #8
 8001904:	d141      	bne.n	800198a <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001906:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001914:	d012      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001916:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001918:	6859      	ldr	r1, [r3, #4]
 800191a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800191e:	481d      	ldr	r0, [pc, #116]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001920:	2300      	movs	r3, #0
 8001922:	fba1 0100 	umull	r0, r1, r1, r0
 8001926:	f7fe fc8b 	bl	8000240 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800192a:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x9c>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001932:	3301      	adds	r3, #1
 8001934:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001936:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800193a:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193c:	4b14      	ldr	r3, [pc, #80]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x9c>)
 800193e:	6858      	ldr	r0, [r3, #4]
 8001940:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001944:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001948:	ebbc 0c00 	subs.w	ip, ip, r0
 800194c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001950:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001954:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001958:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800195c:	ebb1 010c 	subs.w	r1, r1, ip
 8001960:	eb63 030e 	sbc.w	r3, r3, lr
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800196a:	00c9      	lsls	r1, r1, #3
 800196c:	eb11 0c00 	adds.w	ip, r1, r0
 8001970:	f143 0300 	adc.w	r3, r3, #0
 8001974:	0299      	lsls	r1, r3, #10
 8001976:	2300      	movs	r3, #0
 8001978:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800197c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001980:	f7fe fc5e 	bl	8000240 <__aeabi_uldivmod>
 8001984:	e7d1      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001986:	4803      	ldr	r0, [pc, #12]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001988:	e7d7      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800198a:	4803      	ldr	r0, [pc, #12]	@ (8001998 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 800198c:	e7d5      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x46>
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	017d7840 	.word	0x017d7840
 8001998:	00f42400 	.word	0x00f42400

0800199c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800199c:	2800      	cmp	r0, #0
 800199e:	f000 809b 	beq.w	8001ad8 <HAL_RCC_ClockConfig+0x13c>
{
 80019a2:	b570      	push	{r4, r5, r6, lr}
 80019a4:	460d      	mov	r5, r1
 80019a6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ae8 <HAL_RCC_ClockConfig+0x14c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	428b      	cmp	r3, r1
 80019b2:	d208      	bcs.n	80019c6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b4:	b2cb      	uxtb	r3, r1
 80019b6:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae8 <HAL_RCC_ClockConfig+0x14c>)
 80019b8:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	6813      	ldr	r3, [r2, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	428b      	cmp	r3, r1
 80019c2:	f040 808b 	bne.w	8001adc <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	f013 0f02 	tst.w	r3, #2
 80019cc:	d017      	beq.n	80019fe <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ce:	f013 0f04 	tst.w	r3, #4
 80019d2:	d004      	beq.n	80019de <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d4:	4a45      	ldr	r2, [pc, #276]	@ (8001aec <HAL_RCC_ClockConfig+0x150>)
 80019d6:	6893      	ldr	r3, [r2, #8]
 80019d8:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019dc:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	f013 0f08 	tst.w	r3, #8
 80019e4:	d004      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e6:	4a41      	ldr	r2, [pc, #260]	@ (8001aec <HAL_RCC_ClockConfig+0x150>)
 80019e8:	6893      	ldr	r3, [r2, #8]
 80019ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019ee:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f0:	4a3e      	ldr	r2, [pc, #248]	@ (8001aec <HAL_RCC_ClockConfig+0x150>)
 80019f2:	6893      	ldr	r3, [r2, #8]
 80019f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019f8:	68a1      	ldr	r1, [r4, #8]
 80019fa:	430b      	orrs	r3, r1
 80019fc:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	f013 0f01 	tst.w	r3, #1
 8001a04:	d032      	beq.n	8001a6c <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a06:	6863      	ldr	r3, [r4, #4]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d021      	beq.n	8001a50 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0c:	1e9a      	subs	r2, r3, #2
 8001a0e:	2a01      	cmp	r2, #1
 8001a10:	d925      	bls.n	8001a5e <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4a36      	ldr	r2, [pc, #216]	@ (8001aec <HAL_RCC_ClockConfig+0x150>)
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	f012 0f02 	tst.w	r2, #2
 8001a1a:	d061      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1c:	4933      	ldr	r1, [pc, #204]	@ (8001aec <HAL_RCC_ClockConfig+0x150>)
 8001a1e:	688a      	ldr	r2, [r1, #8]
 8001a20:	f022 0203 	bic.w	r2, r2, #3
 8001a24:	4313      	orrs	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001a28:	f7fe fd9c 	bl	8000564 <HAL_GetTick>
 8001a2c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001aec <HAL_RCC_ClockConfig+0x150>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	6862      	ldr	r2, [r4, #4]
 8001a38:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a3c:	d016      	beq.n	8001a6c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3e:	f7fe fd91 	bl	8000564 <HAL_GetTick>
 8001a42:	1b80      	subs	r0, r0, r6
 8001a44:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a48:	4298      	cmp	r0, r3
 8001a4a:	d9f0      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	e042      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a50:	4a26      	ldr	r2, [pc, #152]	@ (8001aec <HAL_RCC_ClockConfig+0x150>)
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001a58:	d1e0      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	e03b      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5e:	4a23      	ldr	r2, [pc, #140]	@ (8001aec <HAL_RCC_ClockConfig+0x150>)
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001a66:	d1d9      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001a68:	2001      	movs	r0, #1
 8001a6a:	e034      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <HAL_RCC_ClockConfig+0x14c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	42ab      	cmp	r3, r5
 8001a76:	d907      	bls.n	8001a88 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a78:	b2ea      	uxtb	r2, r5
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <HAL_RCC_ClockConfig+0x14c>)
 8001a7c:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	42ab      	cmp	r3, r5
 8001a86:	d12d      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	f013 0f04 	tst.w	r3, #4
 8001a8e:	d006      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a90:	4a16      	ldr	r2, [pc, #88]	@ (8001aec <HAL_RCC_ClockConfig+0x150>)
 8001a92:	6893      	ldr	r3, [r2, #8]
 8001a94:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001a98:	68e1      	ldr	r1, [r4, #12]
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	f013 0f08 	tst.w	r3, #8
 8001aa4:	d007      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aa6:	4a11      	ldr	r2, [pc, #68]	@ (8001aec <HAL_RCC_ClockConfig+0x150>)
 8001aa8:	6893      	ldr	r3, [r2, #8]
 8001aaa:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001aae:	6921      	ldr	r1, [r4, #16]
 8001ab0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ab4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ab6:	f7ff ff1d 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 8001aba:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <HAL_RCC_ClockConfig+0x150>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8001af0 <HAL_RCC_ClockConfig+0x154>)
 8001ac4:	5cd3      	ldrb	r3, [r2, r3]
 8001ac6:	40d8      	lsrs	r0, r3
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <HAL_RCC_ClockConfig+0x158>)
 8001aca:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001acc:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <HAL_RCC_ClockConfig+0x15c>)
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	f000 fc2e 	bl	8002330 <HAL_InitTick>
  return HAL_OK;
 8001ad4:	2000      	movs	r0, #0
}
 8001ad6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001ad8:	2001      	movs	r0, #1
}
 8001ada:	4770      	bx	lr
      return HAL_ERROR;
 8001adc:	2001      	movs	r0, #1
 8001ade:	e7fa      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	e7f8      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	e7f6      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x13a>
 8001ae8:	40023c00 	.word	0x40023c00
 8001aec:	40023800 	.word	0x40023800
 8001af0:	08005710 	.word	0x08005710
 8001af4:	20000008 	.word	0x20000008
 8001af8:	20000004 	.word	0x20000004

08001afc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001afc:	4b01      	ldr	r3, [pc, #4]	@ (8001b04 <HAL_RCC_GetHCLKFreq+0x8>)
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000008 	.word	0x20000008

08001b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b08:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b0a:	f7ff fff7 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b0e:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001b16:	4a03      	ldr	r2, [pc, #12]	@ (8001b24 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b18:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b1a:	40d8      	lsrs	r0, r3
 8001b1c:	bd08      	pop	{r3, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	08005708 	.word	0x08005708

08001b28 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b28:	230f      	movs	r3, #15
 8001b2a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <HAL_RCC_GetClockConfig+0x34>)
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	f002 0203 	and.w	r2, r2, #3
 8001b34:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8001b3c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8001b44:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	08db      	lsrs	r3, r3, #3
 8001b4a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001b4e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b50:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <HAL_RCC_GetClockConfig+0x38>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	600b      	str	r3, [r1, #0]
}
 8001b5a:	4770      	bx	lr
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40023c00 	.word	0x40023c00

08001b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001b64:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b66:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b68:	6a03      	ldr	r3, [r0, #32]
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b70:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b72:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b74:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b78:	680c      	ldr	r4, [r1, #0]
 8001b7a:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001b7c:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001b80:	688b      	ldr	r3, [r1, #8]
 8001b82:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b84:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb4 <TIM_OC1_SetConfig+0x50>)
 8001b86:	4290      	cmp	r0, r2
 8001b88:	d006      	beq.n	8001b98 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b8a:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b8c:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b8e:	684a      	ldr	r2, [r1, #4]
 8001b90:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b92:	6203      	str	r3, [r0, #32]
}
 8001b94:	bc30      	pop	{r4, r5}
 8001b96:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8001b98:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001b9c:	68ca      	ldr	r2, [r1, #12]
 8001b9e:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ba0:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ba4:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8001ba8:	694a      	ldr	r2, [r1, #20]
 8001baa:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bac:	698d      	ldr	r5, [r1, #24]
 8001bae:	4315      	orrs	r5, r2
 8001bb0:	e7eb      	b.n	8001b8a <TIM_OC1_SetConfig+0x26>
 8001bb2:	bf00      	nop
 8001bb4:	40010000 	.word	0x40010000

08001bb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001bb8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bba:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bbc:	6a02      	ldr	r2, [r0, #32]
 8001bbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bc2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bc4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001bc6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001bc8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bcc:	680d      	ldr	r5, [r1, #0]
 8001bce:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001bd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bd4:	688a      	ldr	r2, [r1, #8]
 8001bd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bda:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <TIM_OC3_SetConfig+0x58>)
 8001bdc:	4290      	cmp	r0, r2
 8001bde:	d006      	beq.n	8001bee <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001be0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001be2:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001be4:	684a      	ldr	r2, [r1, #4]
 8001be6:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001be8:	6203      	str	r3, [r0, #32]
}
 8001bea:	bc30      	pop	{r4, r5}
 8001bec:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8001bee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001bf2:	68ca      	ldr	r2, [r1, #12]
 8001bf4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001bf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001bfc:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c00:	694a      	ldr	r2, [r1, #20]
 8001c02:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c06:	698a      	ldr	r2, [r1, #24]
 8001c08:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8001c0c:	e7e8      	b.n	8001be0 <TIM_OC3_SetConfig+0x28>
 8001c0e:	bf00      	nop
 8001c10:	40010000 	.word	0x40010000

08001c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c14:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c16:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c18:	6a02      	ldr	r2, [r0, #32]
 8001c1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c1e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c20:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c22:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c24:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c28:	680d      	ldr	r5, [r1, #0]
 8001c2a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001c2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c32:	688d      	ldr	r5, [r1, #8]
 8001c34:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c38:	4d07      	ldr	r5, [pc, #28]	@ (8001c58 <TIM_OC4_SetConfig+0x44>)
 8001c3a:	42a8      	cmp	r0, r5
 8001c3c:	d006      	beq.n	8001c4c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c3e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c40:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c42:	684a      	ldr	r2, [r1, #4]
 8001c44:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c46:	6203      	str	r3, [r0, #32]
}
 8001c48:	bc30      	pop	{r4, r5}
 8001c4a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001c4c:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c50:	694d      	ldr	r5, [r1, #20]
 8001c52:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001c56:	e7f2      	b.n	8001c3e <TIM_OC4_SetConfig+0x2a>
 8001c58:	40010000 	.word	0x40010000

08001c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c5c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c5e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c60:	6a04      	ldr	r4, [r0, #32]
 8001c62:	f024 0401 	bic.w	r4, r4, #1
 8001c66:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c68:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c6a:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c6e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c72:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001c76:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c78:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c7a:	6203      	str	r3, [r0, #32]
}
 8001c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c82:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001c84:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c86:	6a04      	ldr	r4, [r0, #32]
 8001c88:	f024 0410 	bic.w	r4, r4, #16
 8001c8c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c8e:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c90:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c94:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c98:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c9c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ca0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ca2:	6203      	str	r3, [r0, #32]
}
 8001ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001caa:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cb6:	6083      	str	r3, [r0, #8]
}
 8001cb8:	4770      	bx	lr
	...

08001cbc <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001cbc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d12a      	bne.n	8001d1a <HAL_TIM_Base_Start+0x5e>
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cca:	6803      	ldr	r3, [r0, #0]
 8001ccc:	4a15      	ldr	r2, [pc, #84]	@ (8001d24 <HAL_TIM_Base_Start+0x68>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d018      	beq.n	8001d04 <HAL_TIM_Base_Start+0x48>
 8001cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cd6:	d015      	beq.n	8001d04 <HAL_TIM_Base_Start+0x48>
 8001cd8:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d011      	beq.n	8001d04 <HAL_TIM_Base_Start+0x48>
 8001ce0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d00d      	beq.n	8001d04 <HAL_TIM_Base_Start+0x48>
 8001ce8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d009      	beq.n	8001d04 <HAL_TIM_Base_Start+0x48>
 8001cf0:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d005      	beq.n	8001d04 <HAL_TIM_Base_Start+0x48>
    __HAL_TIM_ENABLE(htim);
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001d00:	2000      	movs	r0, #0
 8001d02:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0a:	2a06      	cmp	r2, #6
 8001d0c:	d007      	beq.n	8001d1e <HAL_TIM_Base_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001d16:	2000      	movs	r0, #0
 8001d18:	4770      	bx	lr
    return HAL_ERROR;
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	4770      	bx	lr
  return HAL_OK;
 8001d1e:	2000      	movs	r0, #0
}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010000 	.word	0x40010000

08001d28 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001d28:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d12f      	bne.n	8001d90 <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d30:	2302      	movs	r3, #2
 8001d32:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d36:	6802      	ldr	r2, [r0, #0]
 8001d38:	68d3      	ldr	r3, [r2, #12]
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d40:	6803      	ldr	r3, [r0, #0]
 8001d42:	4a15      	ldr	r2, [pc, #84]	@ (8001d98 <HAL_TIM_Base_Start_IT+0x70>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d018      	beq.n	8001d7a <HAL_TIM_Base_Start_IT+0x52>
 8001d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d4c:	d015      	beq.n	8001d7a <HAL_TIM_Base_Start_IT+0x52>
 8001d4e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d011      	beq.n	8001d7a <HAL_TIM_Base_Start_IT+0x52>
 8001d56:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00d      	beq.n	8001d7a <HAL_TIM_Base_Start_IT+0x52>
 8001d5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d009      	beq.n	8001d7a <HAL_TIM_Base_Start_IT+0x52>
 8001d66:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d005      	beq.n	8001d7a <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001d76:	2000      	movs	r0, #0
 8001d78:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d80:	2a06      	cmp	r2, #6
 8001d82:	d007      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	4770      	bx	lr
    return HAL_ERROR;
 8001d90:	2001      	movs	r0, #1
 8001d92:	4770      	bx	lr
  return HAL_OK;
 8001d94:	2000      	movs	r0, #0
}
 8001d96:	4770      	bx	lr
 8001d98:	40010000 	.word	0x40010000

08001d9c <HAL_TIM_PWM_MspInit>:
}
 8001d9c:	4770      	bx	lr

08001d9e <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001d9e:	4770      	bx	lr

08001da0 <HAL_TIM_IC_CaptureCallback>:
}
 8001da0:	4770      	bx	lr

08001da2 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001da2:	4770      	bx	lr

08001da4 <HAL_TIM_TriggerCallback>:
}
 8001da4:	4770      	bx	lr

08001da6 <HAL_TIM_IRQHandler>:
{
 8001da6:	b570      	push	{r4, r5, r6, lr}
 8001da8:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8001daa:	6803      	ldr	r3, [r0, #0]
 8001dac:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dae:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001db0:	f015 0f02 	tst.w	r5, #2
 8001db4:	d010      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001db6:	f016 0f02 	tst.w	r6, #2
 8001dba:	d00d      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dbc:	f06f 0202 	mvn.w	r2, #2
 8001dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dc6:	6803      	ldr	r3, [r0, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f013 0f03 	tst.w	r3, #3
 8001dce:	d05e      	beq.n	8001e8e <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8001dd0:	f7ff ffe6 	bl	8001da0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001dd8:	f015 0f04 	tst.w	r5, #4
 8001ddc:	d012      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dde:	f016 0f04 	tst.w	r6, #4
 8001de2:	d00f      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	f06f 0204 	mvn.w	r2, #4
 8001dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dec:	2302      	movs	r3, #2
 8001dee:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001df8:	d04f      	beq.n	8001e9a <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f7ff ffd0 	bl	8001da0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e00:	2300      	movs	r3, #0
 8001e02:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e04:	f015 0f08 	tst.w	r5, #8
 8001e08:	d012      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e0a:	f016 0f08 	tst.w	r6, #8
 8001e0e:	d00f      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	f06f 0208 	mvn.w	r2, #8
 8001e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e18:	2304      	movs	r3, #4
 8001e1a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f013 0f03 	tst.w	r3, #3
 8001e24:	d040      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff ffba 	bl	8001da0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e30:	f015 0f10 	tst.w	r5, #16
 8001e34:	d012      	beq.n	8001e5c <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e36:	f016 0f10 	tst.w	r6, #16
 8001e3a:	d00f      	beq.n	8001e5c <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	f06f 0210 	mvn.w	r2, #16
 8001e42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e44:	2308      	movs	r3, #8
 8001e46:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001e50:	d031      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e52:	4620      	mov	r0, r4
 8001e54:	f7ff ffa4 	bl	8001da0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e5c:	f015 0f01 	tst.w	r5, #1
 8001e60:	d002      	beq.n	8001e68 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e62:	f016 0f01 	tst.w	r6, #1
 8001e66:	d12d      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e68:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8001e6c:	d002      	beq.n	8001e74 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e6e:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8001e72:	d12f      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e74:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8001e78:	d002      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e7a:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8001e7e:	d131      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e80:	f015 0f20 	tst.w	r5, #32
 8001e84:	d002      	beq.n	8001e8c <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e86:	f016 0f20 	tst.w	r6, #32
 8001e8a:	d133      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x14e>
}
 8001e8c:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8e:	f7ff ff86 	bl	8001d9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff ff85 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e98:	e79c      	b.n	8001dd4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f7ff ff7f 	bl	8001d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7ff ff7e 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ea6:	e7ab      	b.n	8001e00 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f7ff ff78 	bl	8001d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f7ff ff77 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001eb4:	e7ba      	b.n	8001e2c <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f7ff ff71 	bl	8001d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	f7ff ff70 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ec2:	e7c9      	b.n	8001e58 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	f06f 0201 	mvn.w	r2, #1
 8001eca:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f7fe fa9b 	bl	8000408 <HAL_TIM_PeriodElapsedCallback>
 8001ed2:	e7c9      	b.n	8001e68 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001eda:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001edc:	4620      	mov	r0, r4
 8001ede:	f000 fa26 	bl	800232e <HAL_TIMEx_BreakCallback>
 8001ee2:	e7c7      	b.n	8001e74 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001eea:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001eec:	4620      	mov	r0, r4
 8001eee:	f7ff ff59 	bl	8001da4 <HAL_TIM_TriggerCallback>
 8001ef2:	e7c5      	b.n	8001e80 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	f06f 0220 	mvn.w	r2, #32
 8001efa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001efc:	4620      	mov	r0, r4
 8001efe:	f000 fa15 	bl	800232c <HAL_TIMEx_CommutCallback>
}
 8001f02:	e7c3      	b.n	8001e8c <HAL_TIM_IRQHandler+0xe6>

08001f04 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001f04:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f06:	4a29      	ldr	r2, [pc, #164]	@ (8001fac <TIM_Base_SetConfig+0xa8>)
 8001f08:	4290      	cmp	r0, r2
 8001f0a:	d00e      	beq.n	8001f2a <TIM_Base_SetConfig+0x26>
 8001f0c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001f10:	d00b      	beq.n	8001f2a <TIM_Base_SetConfig+0x26>
 8001f12:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001f16:	4290      	cmp	r0, r2
 8001f18:	d007      	beq.n	8001f2a <TIM_Base_SetConfig+0x26>
 8001f1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f1e:	4290      	cmp	r0, r2
 8001f20:	d003      	beq.n	8001f2a <TIM_Base_SetConfig+0x26>
 8001f22:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f26:	4290      	cmp	r0, r2
 8001f28:	d103      	bne.n	8001f32 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f2e:	684a      	ldr	r2, [r1, #4]
 8001f30:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f32:	4a1e      	ldr	r2, [pc, #120]	@ (8001fac <TIM_Base_SetConfig+0xa8>)
 8001f34:	4290      	cmp	r0, r2
 8001f36:	d01a      	beq.n	8001f6e <TIM_Base_SetConfig+0x6a>
 8001f38:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001f3c:	d017      	beq.n	8001f6e <TIM_Base_SetConfig+0x6a>
 8001f3e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001f42:	4290      	cmp	r0, r2
 8001f44:	d013      	beq.n	8001f6e <TIM_Base_SetConfig+0x6a>
 8001f46:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f4a:	4290      	cmp	r0, r2
 8001f4c:	d00f      	beq.n	8001f6e <TIM_Base_SetConfig+0x6a>
 8001f4e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f52:	4290      	cmp	r0, r2
 8001f54:	d00b      	beq.n	8001f6e <TIM_Base_SetConfig+0x6a>
 8001f56:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001f5a:	4290      	cmp	r0, r2
 8001f5c:	d007      	beq.n	8001f6e <TIM_Base_SetConfig+0x6a>
 8001f5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f62:	4290      	cmp	r0, r2
 8001f64:	d003      	beq.n	8001f6e <TIM_Base_SetConfig+0x6a>
 8001f66:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f6a:	4290      	cmp	r0, r2
 8001f6c:	d103      	bne.n	8001f76 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f72:	68ca      	ldr	r2, [r1, #12]
 8001f74:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f7a:	694a      	ldr	r2, [r1, #20]
 8001f7c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001f7e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f80:	688b      	ldr	r3, [r1, #8]
 8001f82:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001f84:	680b      	ldr	r3, [r1, #0]
 8001f86:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f88:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <TIM_Base_SetConfig+0xa8>)
 8001f8a:	4298      	cmp	r0, r3
 8001f8c:	d00a      	beq.n	8001fa4 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f92:	6903      	ldr	r3, [r0, #16]
 8001f94:	f013 0f01 	tst.w	r3, #1
 8001f98:	d003      	beq.n	8001fa2 <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f9a:	6903      	ldr	r3, [r0, #16]
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6103      	str	r3, [r0, #16]
}
 8001fa2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa4:	690b      	ldr	r3, [r1, #16]
 8001fa6:	6303      	str	r3, [r0, #48]	@ 0x30
 8001fa8:	e7f1      	b.n	8001f8e <TIM_Base_SetConfig+0x8a>
 8001faa:	bf00      	nop
 8001fac:	40010000 	.word	0x40010000

08001fb0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001fb0:	b340      	cbz	r0, 8002004 <HAL_TIM_Base_Init+0x54>
{
 8001fb2:	b510      	push	{r4, lr}
 8001fb4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001fba:	b1f3      	cbz	r3, 8001ffa <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	f851 0b04 	ldr.w	r0, [r1], #4
 8001fc8:	f7ff ff9c 	bl	8001f04 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001fd6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001fda:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001fde:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001fe6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001fea:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001fee:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001ff2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001ff6:	2000      	movs	r0, #0
}
 8001ff8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001ffa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001ffe:	f001 f85d 	bl	80030bc <HAL_TIM_Base_MspInit>
 8002002:	e7db      	b.n	8001fbc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002004:	2001      	movs	r0, #1
}
 8002006:	4770      	bx	lr

08002008 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002008:	b340      	cbz	r0, 800205c <HAL_TIM_PWM_Init+0x54>
{
 800200a:	b510      	push	{r4, lr}
 800200c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800200e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002012:	b1f3      	cbz	r3, 8002052 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002014:	2302      	movs	r3, #2
 8002016:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800201a:	4621      	mov	r1, r4
 800201c:	f851 0b04 	ldr.w	r0, [r1], #4
 8002020:	f7ff ff70 	bl	8001f04 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002024:	2301      	movs	r3, #1
 8002026:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800202e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002032:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002036:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800203e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002042:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002046:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800204a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800204e:	2000      	movs	r0, #0
}
 8002050:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002052:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002056:	f7ff fea1 	bl	8001d9c <HAL_TIM_PWM_MspInit>
 800205a:	e7db      	b.n	8002014 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800205c:	2001      	movs	r0, #1
}
 800205e:	4770      	bx	lr

08002060 <TIM_OC2_SetConfig>:
{
 8002060:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8002062:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002064:	6a02      	ldr	r2, [r0, #32]
 8002066:	f022 0210 	bic.w	r2, r2, #16
 800206a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800206c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800206e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002070:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002074:	680d      	ldr	r5, [r1, #0]
 8002076:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800207a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800207e:	688d      	ldr	r5, [r1, #8]
 8002080:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002084:	4d0c      	ldr	r5, [pc, #48]	@ (80020b8 <TIM_OC2_SetConfig+0x58>)
 8002086:	42a8      	cmp	r0, r5
 8002088:	d006      	beq.n	8002098 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 800208a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800208c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800208e:	684a      	ldr	r2, [r1, #4]
 8002090:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002092:	6203      	str	r3, [r0, #32]
}
 8002094:	bc30      	pop	{r4, r5}
 8002096:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002098:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800209c:	68cd      	ldr	r5, [r1, #12]
 800209e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80020a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020a6:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80020aa:	694d      	ldr	r5, [r1, #20]
 80020ac:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020b0:	698d      	ldr	r5, [r1, #24]
 80020b2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80020b6:	e7e8      	b.n	800208a <TIM_OC2_SetConfig+0x2a>
 80020b8:	40010000 	.word	0x40010000

080020bc <HAL_TIM_PWM_ConfigChannel>:
{
 80020bc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80020be:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d066      	beq.n	8002194 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80020c6:	4604      	mov	r4, r0
 80020c8:	460d      	mov	r5, r1
 80020ca:	2301      	movs	r3, #1
 80020cc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80020d0:	2a0c      	cmp	r2, #12
 80020d2:	d85a      	bhi.n	800218a <HAL_TIM_PWM_ConfigChannel+0xce>
 80020d4:	e8df f002 	tbb	[pc, r2]
 80020d8:	59595907 	.word	0x59595907
 80020dc:	5959591b 	.word	0x5959591b
 80020e0:	59595930 	.word	0x59595930
 80020e4:	44          	.byte	0x44
 80020e5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020e6:	6800      	ldr	r0, [r0, #0]
 80020e8:	f7ff fd3c 	bl	8001b64 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020ec:	6822      	ldr	r2, [r4, #0]
 80020ee:	6993      	ldr	r3, [r2, #24]
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020f6:	6822      	ldr	r2, [r4, #0]
 80020f8:	6993      	ldr	r3, [r2, #24]
 80020fa:	f023 0304 	bic.w	r3, r3, #4
 80020fe:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002100:	6822      	ldr	r2, [r4, #0]
 8002102:	6993      	ldr	r3, [r2, #24]
 8002104:	6929      	ldr	r1, [r5, #16]
 8002106:	430b      	orrs	r3, r1
 8002108:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800210a:	2000      	movs	r0, #0
      break;
 800210c:	e03e      	b.n	800218c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800210e:	6800      	ldr	r0, [r0, #0]
 8002110:	f7ff ffa6 	bl	8002060 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002114:	6822      	ldr	r2, [r4, #0]
 8002116:	6993      	ldr	r3, [r2, #24]
 8002118:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800211c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800211e:	6822      	ldr	r2, [r4, #0]
 8002120:	6993      	ldr	r3, [r2, #24]
 8002122:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002126:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002128:	6822      	ldr	r2, [r4, #0]
 800212a:	6993      	ldr	r3, [r2, #24]
 800212c:	6929      	ldr	r1, [r5, #16]
 800212e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002132:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002134:	2000      	movs	r0, #0
      break;
 8002136:	e029      	b.n	800218c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002138:	6800      	ldr	r0, [r0, #0]
 800213a:	f7ff fd3d 	bl	8001bb8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800213e:	6822      	ldr	r2, [r4, #0]
 8002140:	69d3      	ldr	r3, [r2, #28]
 8002142:	f043 0308 	orr.w	r3, r3, #8
 8002146:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002148:	6822      	ldr	r2, [r4, #0]
 800214a:	69d3      	ldr	r3, [r2, #28]
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002152:	6822      	ldr	r2, [r4, #0]
 8002154:	69d3      	ldr	r3, [r2, #28]
 8002156:	6929      	ldr	r1, [r5, #16]
 8002158:	430b      	orrs	r3, r1
 800215a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800215c:	2000      	movs	r0, #0
      break;
 800215e:	e015      	b.n	800218c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002160:	6800      	ldr	r0, [r0, #0]
 8002162:	f7ff fd57 	bl	8001c14 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002166:	6822      	ldr	r2, [r4, #0]
 8002168:	69d3      	ldr	r3, [r2, #28]
 800216a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800216e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002170:	6822      	ldr	r2, [r4, #0]
 8002172:	69d3      	ldr	r3, [r2, #28]
 8002174:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002178:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800217a:	6822      	ldr	r2, [r4, #0]
 800217c:	69d3      	ldr	r3, [r2, #28]
 800217e:	6929      	ldr	r1, [r5, #16]
 8002180:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002184:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002186:	2000      	movs	r0, #0
      break;
 8002188:	e000      	b.n	800218c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 800218a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800218c:	2300      	movs	r3, #0
 800218e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002192:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002194:	2002      	movs	r0, #2
 8002196:	e7fc      	b.n	8002192 <HAL_TIM_PWM_ConfigChannel+0xd6>

08002198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002198:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800219a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800219c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021a0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80021a4:	430a      	orrs	r2, r1
 80021a6:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021aa:	6082      	str	r2, [r0, #8]
}
 80021ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80021b2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d078      	beq.n	80022ac <HAL_TIM_ConfigClockSource+0xfa>
{
 80021ba:	b510      	push	{r4, lr}
 80021bc:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80021be:	2301      	movs	r3, #1
 80021c0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	2302      	movs	r3, #2
 80021c6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80021ca:	6802      	ldr	r2, [r0, #0]
 80021cc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80021d6:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80021d8:	680b      	ldr	r3, [r1, #0]
 80021da:	2b60      	cmp	r3, #96	@ 0x60
 80021dc:	d04c      	beq.n	8002278 <HAL_TIM_ConfigClockSource+0xc6>
 80021de:	d823      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x76>
 80021e0:	2b40      	cmp	r3, #64	@ 0x40
 80021e2:	d054      	beq.n	800228e <HAL_TIM_ConfigClockSource+0xdc>
 80021e4:	d811      	bhi.n	800220a <HAL_TIM_ConfigClockSource+0x58>
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	d003      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0x40>
 80021ea:	d80a      	bhi.n	8002202 <HAL_TIM_ConfigClockSource+0x50>
 80021ec:	b10b      	cbz	r3, 80021f2 <HAL_TIM_ConfigClockSource+0x40>
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d105      	bne.n	80021fe <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021f2:	4619      	mov	r1, r3
 80021f4:	6820      	ldr	r0, [r4, #0]
 80021f6:	f7ff fd58 	bl	8001caa <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80021fa:	2000      	movs	r0, #0
      break;
 80021fc:	e028      	b.n	8002250 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80021fe:	2001      	movs	r0, #1
 8002200:	e026      	b.n	8002250 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002202:	2b30      	cmp	r3, #48	@ 0x30
 8002204:	d0f5      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8002206:	2001      	movs	r0, #1
 8002208:	e022      	b.n	8002250 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800220a:	2b50      	cmp	r3, #80	@ 0x50
 800220c:	d10a      	bne.n	8002224 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800220e:	68ca      	ldr	r2, [r1, #12]
 8002210:	6849      	ldr	r1, [r1, #4]
 8002212:	6800      	ldr	r0, [r0, #0]
 8002214:	f7ff fd22 	bl	8001c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002218:	2150      	movs	r1, #80	@ 0x50
 800221a:	6820      	ldr	r0, [r4, #0]
 800221c:	f7ff fd45 	bl	8001caa <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002220:	2000      	movs	r0, #0
      break;
 8002222:	e015      	b.n	8002250 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8002224:	2001      	movs	r0, #1
 8002226:	e013      	b.n	8002250 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800222c:	d03a      	beq.n	80022a4 <HAL_TIM_ConfigClockSource+0xf2>
 800222e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002232:	d014      	beq.n	800225e <HAL_TIM_ConfigClockSource+0xac>
 8002234:	2b70      	cmp	r3, #112	@ 0x70
 8002236:	d137      	bne.n	80022a8 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8002238:	68cb      	ldr	r3, [r1, #12]
 800223a:	684a      	ldr	r2, [r1, #4]
 800223c:	6889      	ldr	r1, [r1, #8]
 800223e:	6800      	ldr	r0, [r0, #0]
 8002240:	f7ff ffaa 	bl	8002198 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002244:	6822      	ldr	r2, [r4, #0]
 8002246:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002248:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800224c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800224e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002250:	2301      	movs	r3, #1
 8002252:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002256:	2300      	movs	r3, #0
 8002258:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800225c:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 800225e:	68cb      	ldr	r3, [r1, #12]
 8002260:	684a      	ldr	r2, [r1, #4]
 8002262:	6889      	ldr	r1, [r1, #8]
 8002264:	6800      	ldr	r0, [r0, #0]
 8002266:	f7ff ff97 	bl	8002198 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800226a:	6822      	ldr	r2, [r4, #0]
 800226c:	6893      	ldr	r3, [r2, #8]
 800226e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002272:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002274:	2000      	movs	r0, #0
      break;
 8002276:	e7eb      	b.n	8002250 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002278:	68ca      	ldr	r2, [r1, #12]
 800227a:	6849      	ldr	r1, [r1, #4]
 800227c:	6800      	ldr	r0, [r0, #0]
 800227e:	f7ff fd00 	bl	8001c82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002282:	2160      	movs	r1, #96	@ 0x60
 8002284:	6820      	ldr	r0, [r4, #0]
 8002286:	f7ff fd10 	bl	8001caa <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800228a:	2000      	movs	r0, #0
      break;
 800228c:	e7e0      	b.n	8002250 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228e:	68ca      	ldr	r2, [r1, #12]
 8002290:	6849      	ldr	r1, [r1, #4]
 8002292:	6800      	ldr	r0, [r0, #0]
 8002294:	f7ff fce2 	bl	8001c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002298:	2140      	movs	r1, #64	@ 0x40
 800229a:	6820      	ldr	r0, [r4, #0]
 800229c:	f7ff fd05 	bl	8001caa <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80022a0:	2000      	movs	r0, #0
      break;
 80022a2:	e7d5      	b.n	8002250 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80022a4:	2000      	movs	r0, #0
 80022a6:	e7d3      	b.n	8002250 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80022a8:	2001      	movs	r0, #1
 80022aa:	e7d1      	b.n	8002250 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 80022ac:	2002      	movs	r0, #2
}
 80022ae:	4770      	bx	lr

080022b0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022b0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80022b4:	2a01      	cmp	r2, #1
 80022b6:	d035      	beq.n	8002324 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 80022b8:	b410      	push	{r4}
 80022ba:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80022bc:	2201      	movs	r2, #1
 80022be:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c2:	2202      	movs	r2, #2
 80022c4:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022c8:	6802      	ldr	r2, [r0, #0]
 80022ca:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022cc:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022ce:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022d2:	6808      	ldr	r0, [r1, #0]
 80022d4:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022d8:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4812      	ldr	r0, [pc, #72]	@ (8002328 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80022de:	4282      	cmp	r2, r0
 80022e0:	d012      	beq.n	8002308 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80022e2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80022e6:	d00f      	beq.n	8002308 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80022e8:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80022ec:	4282      	cmp	r2, r0
 80022ee:	d00b      	beq.n	8002308 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80022f0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80022f4:	4282      	cmp	r2, r0
 80022f6:	d007      	beq.n	8002308 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80022f8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80022fc:	4282      	cmp	r2, r0
 80022fe:	d003      	beq.n	8002308 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002300:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8002304:	4282      	cmp	r2, r0
 8002306:	d104      	bne.n	8002312 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002308:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800230c:	6849      	ldr	r1, [r1, #4]
 800230e:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002310:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002318:	2000      	movs	r0, #0
 800231a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800231e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002322:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002324:	2002      	movs	r0, #2
}
 8002326:	4770      	bx	lr
 8002328:	40010000 	.word	0x40010000

0800232c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800232c:	4770      	bx	lr

0800232e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800232e:	4770      	bx	lr

08002330 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002330:	b530      	push	{r4, r5, lr}
 8002332:	b089      	sub	sp, #36	@ 0x24
 8002334:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002336:	2400      	movs	r4, #0
 8002338:	9401      	str	r4, [sp, #4]
 800233a:	4b1d      	ldr	r3, [pc, #116]	@ (80023b0 <HAL_InitTick+0x80>)
 800233c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800233e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002342:	645a      	str	r2, [r3, #68]	@ 0x44
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800234e:	a902      	add	r1, sp, #8
 8002350:	a803      	add	r0, sp, #12
 8002352:	f7ff fbe9 	bl	8001b28 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002356:	f7ff fbd7 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800235a:	4a16      	ldr	r2, [pc, #88]	@ (80023b4 <HAL_InitTick+0x84>)
 800235c:	fba2 2300 	umull	r2, r3, r2, r0
 8002360:	0c9b      	lsrs	r3, r3, #18
 8002362:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002364:	4814      	ldr	r0, [pc, #80]	@ (80023b8 <HAL_InitTick+0x88>)
 8002366:	4a15      	ldr	r2, [pc, #84]	@ (80023bc <HAL_InitTick+0x8c>)
 8002368:	6002      	str	r2, [r0, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800236a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800236e:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8002370:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 8002372:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002374:	6084      	str	r4, [r0, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002376:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8002378:	f7ff fe1a 	bl	8001fb0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800237c:	4604      	mov	r4, r0
 800237e:	b110      	cbz	r0, 8002386 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8002380:	4620      	mov	r0, r4
 8002382:	b009      	add	sp, #36	@ 0x24
 8002384:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim11);
 8002386:	480c      	ldr	r0, [pc, #48]	@ (80023b8 <HAL_InitTick+0x88>)
 8002388:	f7ff fcce 	bl	8001d28 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800238c:	4604      	mov	r4, r0
 800238e:	2800      	cmp	r0, #0
 8002390:	d1f6      	bne.n	8002380 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002392:	201a      	movs	r0, #26
 8002394:	f7fe f964 	bl	8000660 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002398:	2d0f      	cmp	r5, #15
 800239a:	d901      	bls.n	80023a0 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 800239c:	2401      	movs	r4, #1
 800239e:	e7ef      	b.n	8002380 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80023a0:	2200      	movs	r2, #0
 80023a2:	4629      	mov	r1, r5
 80023a4:	201a      	movs	r0, #26
 80023a6:	f7fe f94b 	bl	8000640 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023aa:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <HAL_InitTick+0x90>)
 80023ac:	601d      	str	r5, [r3, #0]
 80023ae:	e7e7      	b.n	8002380 <HAL_InitTick+0x50>
 80023b0:	40023800 	.word	0x40023800
 80023b4:	431bde83 	.word	0x431bde83
 80023b8:	200001b0 	.word	0x200001b0
 80023bc:	40014800 	.word	0x40014800
 80023c0:	20000004 	.word	0x20000004

080023c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023c4:	e7fe      	b.n	80023c4 <NMI_Handler>

080023c6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <HardFault_Handler>

080023c8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <MemManage_Handler>

080023ca <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ca:	e7fe      	b.n	80023ca <BusFault_Handler>

080023cc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <UsageFault_Handler>

080023ce <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ce:	4770      	bx	lr

080023d0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d0:	4770      	bx	lr

080023d2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d2:	4770      	bx	lr

080023d4 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d4:	4770      	bx	lr
	...

080023d8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80023d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80023da:	4802      	ldr	r0, [pc, #8]	@ (80023e4 <TIM1_TRG_COM_TIM11_IRQHandler+0xc>)
 80023dc:	f7ff fce3 	bl	8001da6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80023e0:	bd08      	pop	{r3, pc}
 80023e2:	bf00      	nop
 80023e4:	200001b0 	.word	0x200001b0

080023e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023ea:	4802      	ldr	r0, [pc, #8]	@ (80023f4 <TIM2_IRQHandler+0xc>)
 80023ec:	f7ff fcdb 	bl	8001da6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023f0:	bd08      	pop	{r3, pc}
 80023f2:	bf00      	nop
 80023f4:	2000028c 	.word	0x2000028c

080023f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80023fa:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80023fe:	f7fe fa17 	bl	8000830 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002402:	bd08      	pop	{r3, pc}

08002404 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002404:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002406:	4802      	ldr	r0, [pc, #8]	@ (8002410 <OTG_FS_IRQHandler+0xc>)
 8002408:	f7fe fd6d 	bl	8000ee6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800240c:	bd08      	pop	{r3, pc}
 800240e:	bf00      	nop
 8002410:	20000fd4 	.word	0x20000fd4

08002414 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002414:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	3301      	adds	r3, #1
 800241e:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8002420:	9b01      	ldr	r3, [sp, #4]
 8002422:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002426:	d815      	bhi.n	8002454 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002428:	6903      	ldr	r3, [r0, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	daf5      	bge.n	800241a <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002432:	6903      	ldr	r3, [r0, #16]
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 800243a:	9b01      	ldr	r3, [sp, #4]
 800243c:	3301      	adds	r3, #1
 800243e:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8002440:	9b01      	ldr	r3, [sp, #4]
 8002442:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002446:	d808      	bhi.n	800245a <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002448:	6903      	ldr	r3, [r0, #16]
 800244a:	f013 0f01 	tst.w	r3, #1
 800244e:	d1f4      	bne.n	800243a <USB_CoreReset+0x26>

  return HAL_OK;
 8002450:	2000      	movs	r0, #0
 8002452:	e000      	b.n	8002456 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8002454:	2003      	movs	r0, #3
}
 8002456:	b002      	add	sp, #8
 8002458:	4770      	bx	lr
      return HAL_TIMEOUT;
 800245a:	2003      	movs	r0, #3
 800245c:	e7fb      	b.n	8002456 <USB_CoreReset+0x42>

0800245e <USB_CoreInit>:
{
 800245e:	b084      	sub	sp, #16
 8002460:	b510      	push	{r4, lr}
 8002462:	4604      	mov	r4, r0
 8002464:	a803      	add	r0, sp, #12
 8002466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800246a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d121      	bne.n	80024b6 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002472:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002478:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800247a:	68e3      	ldr	r3, [r4, #12]
 800247c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002480:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002484:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002486:	68e3      	ldr	r3, [r4, #12]
 8002488:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800248c:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 800248e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d00a      	beq.n	80024ac <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 8002496:	4620      	mov	r0, r4
 8002498:	f7ff ffbc 	bl	8002414 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800249c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d01c      	beq.n	80024de <USB_CoreInit+0x80>
}
 80024a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024a8:	b004      	add	sp, #16
 80024aa:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80024ac:	68e3      	ldr	r3, [r4, #12]
 80024ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024b2:	60e3      	str	r3, [r4, #12]
 80024b4:	e7ef      	b.n	8002496 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80024b6:	68e3      	ldr	r3, [r4, #12]
 80024b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024bc:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80024be:	4620      	mov	r0, r4
 80024c0:	f7ff ffa8 	bl	8002414 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80024c4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80024c8:	b923      	cbnz	r3, 80024d4 <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80024d2:	e7e3      	b.n	800249c <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80024d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80024d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024da:	63a3      	str	r3, [r4, #56]	@ 0x38
 80024dc:	e7de      	b.n	800249c <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80024de:	68a3      	ldr	r3, [r4, #8]
 80024e0:	f043 0306 	orr.w	r3, r3, #6
 80024e4:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80024e6:	68a3      	ldr	r3, [r4, #8]
 80024e8:	f043 0320 	orr.w	r3, r3, #32
 80024ec:	60a3      	str	r3, [r4, #8]
 80024ee:	e7d9      	b.n	80024a4 <USB_CoreInit+0x46>

080024f0 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80024f0:	2a02      	cmp	r2, #2
 80024f2:	d00a      	beq.n	800250a <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 80024f4:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80024f6:	68c3      	ldr	r3, [r0, #12]
 80024f8:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80024fc:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80024fe:	68c3      	ldr	r3, [r0, #12]
 8002500:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002504:	60c3      	str	r3, [r0, #12]
}
 8002506:	2000      	movs	r0, #0
 8002508:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800250a:	4b23      	ldr	r3, [pc, #140]	@ (8002598 <USB_SetTurnaroundTime+0xa8>)
 800250c:	440b      	add	r3, r1
 800250e:	4a23      	ldr	r2, [pc, #140]	@ (800259c <USB_SetTurnaroundTime+0xac>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d92f      	bls.n	8002574 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002514:	4b22      	ldr	r3, [pc, #136]	@ (80025a0 <USB_SetTurnaroundTime+0xb0>)
 8002516:	440b      	add	r3, r1
 8002518:	4a22      	ldr	r2, [pc, #136]	@ (80025a4 <USB_SetTurnaroundTime+0xb4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d92c      	bls.n	8002578 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800251e:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 8002522:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 8002526:	4a20      	ldr	r2, [pc, #128]	@ (80025a8 <USB_SetTurnaroundTime+0xb8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d927      	bls.n	800257c <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800252c:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 8002530:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8002534:	4a1d      	ldr	r2, [pc, #116]	@ (80025ac <USB_SetTurnaroundTime+0xbc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d322      	bcc.n	8002580 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800253a:	4b1d      	ldr	r3, [pc, #116]	@ (80025b0 <USB_SetTurnaroundTime+0xc0>)
 800253c:	440b      	add	r3, r1
 800253e:	4a1d      	ldr	r2, [pc, #116]	@ (80025b4 <USB_SetTurnaroundTime+0xc4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d91f      	bls.n	8002584 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002544:	4b1c      	ldr	r3, [pc, #112]	@ (80025b8 <USB_SetTurnaroundTime+0xc8>)
 8002546:	440b      	add	r3, r1
 8002548:	4a1c      	ldr	r2, [pc, #112]	@ (80025bc <USB_SetTurnaroundTime+0xcc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d31c      	bcc.n	8002588 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800254e:	4b1c      	ldr	r3, [pc, #112]	@ (80025c0 <USB_SetTurnaroundTime+0xd0>)
 8002550:	440b      	add	r3, r1
 8002552:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <USB_SetTurnaroundTime+0xd4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d319      	bcc.n	800258c <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002558:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 800255c:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 8002560:	4a19      	ldr	r2, [pc, #100]	@ (80025c8 <USB_SetTurnaroundTime+0xd8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d314      	bcc.n	8002590 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002566:	4b19      	ldr	r3, [pc, #100]	@ (80025cc <USB_SetTurnaroundTime+0xdc>)
 8002568:	440b      	add	r3, r1
 800256a:	4a19      	ldr	r2, [pc, #100]	@ (80025d0 <USB_SetTurnaroundTime+0xe0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d211      	bcs.n	8002594 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 8002570:	2207      	movs	r2, #7
 8002572:	e7c0      	b.n	80024f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8002574:	220f      	movs	r2, #15
 8002576:	e7be      	b.n	80024f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8002578:	220e      	movs	r2, #14
 800257a:	e7bc      	b.n	80024f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 800257c:	220d      	movs	r2, #13
 800257e:	e7ba      	b.n	80024f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8002580:	220c      	movs	r2, #12
 8002582:	e7b8      	b.n	80024f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8002584:	220b      	movs	r2, #11
 8002586:	e7b6      	b.n	80024f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8002588:	220a      	movs	r2, #10
 800258a:	e7b4      	b.n	80024f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 800258c:	2209      	movs	r2, #9
 800258e:	e7b2      	b.n	80024f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8002590:	2208      	movs	r2, #8
 8002592:	e7b0      	b.n	80024f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8002594:	2206      	movs	r2, #6
 8002596:	e7ae      	b.n	80024f6 <USB_SetTurnaroundTime+0x6>
 8002598:	ff275340 	.word	0xff275340
 800259c:	000c34ff 	.word	0x000c34ff
 80025a0:	ff1b1e40 	.word	0xff1b1e40
 80025a4:	000f423f 	.word	0x000f423f
 80025a8:	00124f7f 	.word	0x00124f7f
 80025ac:	0013d620 	.word	0x0013d620
 80025b0:	fee5b660 	.word	0xfee5b660
 80025b4:	0016e35f 	.word	0x0016e35f
 80025b8:	feced300 	.word	0xfeced300
 80025bc:	001b7740 	.word	0x001b7740
 80025c0:	feb35bc0 	.word	0xfeb35bc0
 80025c4:	002191c0 	.word	0x002191c0
 80025c8:	00387520 	.word	0x00387520
 80025cc:	fe5954e0 	.word	0xfe5954e0
 80025d0:	00419ce0 	.word	0x00419ce0

080025d4 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80025d4:	6883      	ldr	r3, [r0, #8]
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6083      	str	r3, [r0, #8]
}
 80025dc:	2000      	movs	r0, #0
 80025de:	4770      	bx	lr

080025e0 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80025e0:	6883      	ldr	r3, [r0, #8]
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	6083      	str	r3, [r0, #8]
}
 80025e8:	2000      	movs	r0, #0
 80025ea:	4770      	bx	lr

080025ec <USB_FlushTxFifo>:
{
 80025ec:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	9301      	str	r3, [sp, #4]
    count++;
 80025f2:	9b01      	ldr	r3, [sp, #4]
 80025f4:	3301      	adds	r3, #1
 80025f6:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80025f8:	9b01      	ldr	r3, [sp, #4]
 80025fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80025fe:	d815      	bhi.n	800262c <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002600:	6903      	ldr	r3, [r0, #16]
 8002602:	2b00      	cmp	r3, #0
 8002604:	daf5      	bge.n	80025f2 <USB_FlushTxFifo+0x6>
  count = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800260a:	0189      	lsls	r1, r1, #6
 800260c:	f041 0120 	orr.w	r1, r1, #32
 8002610:	6101      	str	r1, [r0, #16]
    count++;
 8002612:	9b01      	ldr	r3, [sp, #4]
 8002614:	3301      	adds	r3, #1
 8002616:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002618:	9b01      	ldr	r3, [sp, #4]
 800261a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800261e:	d808      	bhi.n	8002632 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002620:	6903      	ldr	r3, [r0, #16]
 8002622:	f013 0f20 	tst.w	r3, #32
 8002626:	d1f4      	bne.n	8002612 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8002628:	2000      	movs	r0, #0
 800262a:	e000      	b.n	800262e <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 800262c:	2003      	movs	r0, #3
}
 800262e:	b002      	add	sp, #8
 8002630:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002632:	2003      	movs	r0, #3
 8002634:	e7fb      	b.n	800262e <USB_FlushTxFifo+0x42>

08002636 <USB_FlushRxFifo>:
{
 8002636:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	9301      	str	r3, [sp, #4]
    count++;
 800263c:	9b01      	ldr	r3, [sp, #4]
 800263e:	3301      	adds	r3, #1
 8002640:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002642:	9b01      	ldr	r3, [sp, #4]
 8002644:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002648:	d813      	bhi.n	8002672 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800264a:	6903      	ldr	r3, [r0, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	daf5      	bge.n	800263c <USB_FlushRxFifo+0x6>
  count = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002654:	2310      	movs	r3, #16
 8002656:	6103      	str	r3, [r0, #16]
    count++;
 8002658:	9b01      	ldr	r3, [sp, #4]
 800265a:	3301      	adds	r3, #1
 800265c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800265e:	9b01      	ldr	r3, [sp, #4]
 8002660:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002664:	d808      	bhi.n	8002678 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002666:	6903      	ldr	r3, [r0, #16]
 8002668:	f013 0f10 	tst.w	r3, #16
 800266c:	d1f4      	bne.n	8002658 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 800266e:	2000      	movs	r0, #0
 8002670:	e000      	b.n	8002674 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8002672:	2003      	movs	r0, #3
}
 8002674:	b002      	add	sp, #8
 8002676:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002678:	2003      	movs	r0, #3
 800267a:	e7fb      	b.n	8002674 <USB_FlushRxFifo+0x3e>

0800267c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800267c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8002680:	4319      	orrs	r1, r3
 8002682:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8002686:	2000      	movs	r0, #0
 8002688:	4770      	bx	lr
	...

0800268c <USB_DevInit>:
{
 800268c:	b084      	sub	sp, #16
 800268e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002690:	4604      	mov	r4, r0
 8002692:	a807      	add	r0, sp, #28
 8002694:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002698:	2300      	movs	r3, #0
 800269a:	e006      	b.n	80026aa <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 800269c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80026a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80026a4:	2100      	movs	r1, #0
 80026a6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80026a8:	3301      	adds	r3, #1
 80026aa:	2b0e      	cmp	r3, #14
 80026ac:	d9f6      	bls.n	800269c <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 80026ae:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 80026b2:	bb06      	cbnz	r6, 80026f6 <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80026b4:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80026c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80026c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026c6:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80026c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80026ca:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80026ce:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80026d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026d6:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80026de:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d115      	bne.n	8002712 <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 80026e6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80026ea:	b96b      	cbnz	r3, 8002708 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80026ec:	2100      	movs	r1, #0
 80026ee:	4620      	mov	r0, r4
 80026f0:	f7ff ffc4 	bl	800267c <USB_SetDevSpeed>
 80026f4:	e011      	b.n	800271a <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80026f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80026f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80026fc:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80026fe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002700:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002704:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002706:	e7e7      	b.n	80026d8 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002708:	2101      	movs	r1, #1
 800270a:	4620      	mov	r0, r4
 800270c:	f7ff ffb6 	bl	800267c <USB_SetDevSpeed>
 8002710:	e003      	b.n	800271a <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002712:	2103      	movs	r1, #3
 8002714:	4620      	mov	r0, r4
 8002716:	f7ff ffb1 	bl	800267c <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800271a:	2110      	movs	r1, #16
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff ff65 	bl	80025ec <USB_FlushTxFifo>
 8002722:	4605      	mov	r5, r0
 8002724:	b100      	cbz	r0, 8002728 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 8002726:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002728:	4620      	mov	r0, r4
 800272a:	f7ff ff84 	bl	8002636 <USB_FlushRxFifo>
 800272e:	b100      	cbz	r0, 8002732 <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 8002730:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002732:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8002736:	2300      	movs	r3, #0
 8002738:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800273c:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002740:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002744:	e00d      	b.n	8002762 <USB_DevInit+0xd6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800274a:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 800274e:	e002      	b.n	8002756 <USB_DevInit+0xca>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002750:	2000      	movs	r0, #0
 8002752:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002756:	2200      	movs	r2, #0
 8002758:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800275a:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 800275e:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002760:	3301      	adds	r3, #1
 8002762:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8002766:	4299      	cmp	r1, r3
 8002768:	d90e      	bls.n	8002788 <USB_DevInit+0xfc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800276a:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800276e:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 8002772:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 8002776:	2800      	cmp	r0, #0
 8002778:	daea      	bge.n	8002750 <USB_DevInit+0xc4>
      if (i == 0U)
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1e3      	bne.n	8002746 <USB_DevInit+0xba>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800277e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002782:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8002786:	e7e6      	b.n	8002756 <USB_DevInit+0xca>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002788:	2300      	movs	r3, #0
 800278a:	e00a      	b.n	80027a2 <USB_DevInit+0x116>
      if (i == 0U)
 800278c:	b1bb      	cbz	r3, 80027be <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800278e:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 8002792:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002796:	2200      	movs	r2, #0
 8002798:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800279a:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 800279e:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80027a0:	3301      	adds	r3, #1
 80027a2:	4299      	cmp	r1, r3
 80027a4:	d910      	bls.n	80027c8 <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80027a6:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80027aa:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 80027ae:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 80027b2:	2f00      	cmp	r7, #0
 80027b4:	dbea      	blt.n	800278c <USB_DevInit+0x100>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80027b6:	2700      	movs	r7, #0
 80027b8:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 80027bc:	e7eb      	b.n	8002796 <USB_DevInit+0x10a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80027be:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 80027c2:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 80027c6:	e7e6      	b.n	8002796 <USB_DevInit+0x10a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80027c8:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80027cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027d0:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80027d8:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 80027dc:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80027de:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80027e2:	b91b      	cbnz	r3, 80027ec <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80027e4:	69a3      	ldr	r3, [r4, #24]
 80027e6:	f043 0310 	orr.w	r3, r3, #16
 80027ea:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80027ec:	69a2      	ldr	r2, [r4, #24]
 80027ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <USB_DevInit+0x194>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80027f4:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 80027f8:	b11b      	cbz	r3, 8002802 <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80027fa:	69a3      	ldr	r3, [r4, #24]
 80027fc:	f043 0308 	orr.w	r3, r3, #8
 8002800:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002802:	2e01      	cmp	r6, #1
 8002804:	d004      	beq.n	8002810 <USB_DevInit+0x184>
}
 8002806:	4628      	mov	r0, r5
 8002808:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800280c:	b004      	add	sp, #16
 800280e:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002810:	69a3      	ldr	r3, [r4, #24]
 8002812:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	61a3      	str	r3, [r4, #24]
 800281c:	e7f3      	b.n	8002806 <USB_DevInit+0x17a>
 800281e:	bf00      	nop
 8002820:	803c3800 	.word	0x803c3800

08002824 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002824:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8002828:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800282c:	2b02      	cmp	r3, #2
 800282e:	d004      	beq.n	800283a <USB_GetDevSpeed+0x16>
 8002830:	2b06      	cmp	r3, #6
 8002832:	d004      	beq.n	800283e <USB_GetDevSpeed+0x1a>
 8002834:	b92b      	cbnz	r3, 8002842 <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002836:	2000      	movs	r0, #0
 8002838:	4770      	bx	lr
 800283a:	2002      	movs	r0, #2
 800283c:	4770      	bx	lr
 800283e:	2002      	movs	r0, #2
 8002840:	4770      	bx	lr
 8002842:	200f      	movs	r0, #15
}
 8002844:	4770      	bx	lr

08002846 <USB_ActivateEndpoint>:
{
 8002846:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8002848:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800284c:	784b      	ldrb	r3, [r1, #1]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d023      	beq.n	800289a <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002852:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 8002856:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 800285a:	f00c 040f 	and.w	r4, ip, #15
 800285e:	2201      	movs	r2, #1
 8002860:	40a2      	lsls	r2, r4
 8002862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002866:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800286a:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800286e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002872:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002876:	d10e      	bne.n	8002896 <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002878:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800287c:	688a      	ldr	r2, [r1, #8]
 800287e:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002882:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002884:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8002888:	4313      	orrs	r3, r2
 800288a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800288e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002892:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8002896:	2000      	movs	r0, #0
 8002898:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800289a:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800289e:	f00c 0e0f 	and.w	lr, ip, #15
 80028a2:	fa03 f30e 	lsl.w	r3, r3, lr
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80028ae:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80028b2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80028b6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80028ba:	d1ec      	bne.n	8002896 <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80028bc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80028c0:	688a      	ldr	r2, [r1, #8]
 80028c2:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80028c6:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80028c8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80028cc:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028da:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80028de:	e7da      	b.n	8002896 <USB_ActivateEndpoint+0x50>

080028e0 <USB_DeactivateEndpoint>:
{
 80028e0:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 80028e2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80028e4:	784a      	ldrb	r2, [r1, #1]
 80028e6:	2a01      	cmp	r2, #1
 80028e8:	d026      	beq.n	8002938 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80028ea:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80028ee:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80028f2:	2a00      	cmp	r2, #0
 80028f4:	db52      	blt.n	800299c <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80028f6:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 80028fa:	780a      	ldrb	r2, [r1, #0]
 80028fc:	f002 020f 	and.w	r2, r2, #15
 8002900:	f04f 0c01 	mov.w	ip, #1
 8002904:	fa0c f202 	lsl.w	r2, ip, r2
 8002908:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 800290c:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002910:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8002914:	7809      	ldrb	r1, [r1, #0]
 8002916:	f001 010f 	and.w	r1, r1, #15
 800291a:	fa0c fc01 	lsl.w	ip, ip, r1
 800291e:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 8002922:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002926:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800292a:	4a23      	ldr	r2, [pc, #140]	@ (80029b8 <USB_DeactivateEndpoint+0xd8>)
 800292c:	400a      	ands	r2, r1
 800292e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8002932:	2000      	movs	r0, #0
 8002934:	bc30      	pop	{r4, r5}
 8002936:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002938:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800293c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002940:	2a00      	cmp	r2, #0
 8002942:	db1e      	blt.n	8002982 <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002944:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8002948:	780a      	ldrb	r2, [r1, #0]
 800294a:	f002 020f 	and.w	r2, r2, #15
 800294e:	2401      	movs	r4, #1
 8002950:	fa04 f202 	lsl.w	r2, r4, r2
 8002954:	b292      	uxth	r2, r2
 8002956:	ea25 0202 	bic.w	r2, r5, r2
 800295a:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800295e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8002962:	7809      	ldrb	r1, [r1, #0]
 8002964:	f001 010f 	and.w	r1, r1, #15
 8002968:	408c      	lsls	r4, r1
 800296a:	b2a4      	uxth	r4, r4
 800296c:	ea22 0204 	bic.w	r2, r2, r4
 8002970:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002974:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8002978:	4a10      	ldr	r2, [pc, #64]	@ (80029bc <USB_DeactivateEndpoint+0xdc>)
 800297a:	400a      	ands	r2, r1
 800297c:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8002980:	e7d7      	b.n	8002932 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002982:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002986:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800298a:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800298e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002992:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002996:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 800299a:	e7d3      	b.n	8002944 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800299c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80029a0:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80029a4:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80029a8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80029ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80029b0:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 80029b4:	e79f      	b.n	80028f6 <USB_DeactivateEndpoint+0x16>
 80029b6:	bf00      	nop
 80029b8:	eff37800 	.word	0xeff37800
 80029bc:	ec337800 	.word	0xec337800

080029c0 <USB_EPStopXfer>:
{
 80029c0:	b410      	push	{r4}
 80029c2:	b083      	sub	sp, #12
 80029c4:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 80029ca:	7848      	ldrb	r0, [r1, #1]
 80029cc:	2801      	cmp	r0, #1
 80029ce:	d00b      	beq.n	80029e8 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80029d0:	780b      	ldrb	r3, [r1, #0]
 80029d2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80029d6:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80029da:	2800      	cmp	r0, #0
 80029dc:	db2d      	blt.n	8002a3a <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 80029de:	2000      	movs	r0, #0
}
 80029e0:	b003      	add	sp, #12
 80029e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029e6:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80029e8:	780b      	ldrb	r3, [r1, #0]
 80029ea:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80029ee:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80029f2:	2c00      	cmp	r4, #0
 80029f4:	db01      	blt.n	80029fa <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 80029f6:	2000      	movs	r0, #0
 80029f8:	e7f2      	b.n	80029e0 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80029fa:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80029fe:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8002a02:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8002a06:	780b      	ldrb	r3, [r1, #0]
 8002a08:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002a0c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8002a10:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8002a14:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8002a18:	9b01      	ldr	r3, [sp, #4]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8002a1e:	9c01      	ldr	r4, [sp, #4]
 8002a20:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002a24:	429c      	cmp	r4, r3
 8002a26:	d8db      	bhi.n	80029e0 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8002a28:	780b      	ldrb	r3, [r1, #0]
 8002a2a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002a2e:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	dbf0      	blt.n	8002a18 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 8002a36:	2000      	movs	r0, #0
 8002a38:	e7d2      	b.n	80029e0 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8002a3a:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8002a3e:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 8002a42:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8002a46:	780b      	ldrb	r3, [r1, #0]
 8002a48:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002a4c:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8002a50:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8002a54:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 8002a58:	9b01      	ldr	r3, [sp, #4]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8002a5e:	9801      	ldr	r0, [sp, #4]
 8002a60:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002a64:	4298      	cmp	r0, r3
 8002a66:	d808      	bhi.n	8002a7a <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8002a68:	780b      	ldrb	r3, [r1, #0]
 8002a6a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002a6e:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	dbf0      	blt.n	8002a58 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 8002a76:	2000      	movs	r0, #0
 8002a78:	e7b2      	b.n	80029e0 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	e7b0      	b.n	80029e0 <USB_EPStopXfer+0x20>

08002a7e <USB_WritePacket>:
{
 8002a7e:	b510      	push	{r4, lr}
 8002a80:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8002a84:	b984      	cbnz	r4, 8002aa8 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002a86:	3303      	adds	r3, #3
 8002a88:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8002a8c:	f04f 0c00 	mov.w	ip, #0
 8002a90:	e008      	b.n	8002aa4 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002a92:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8002a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a9a:	f851 4b04 	ldr.w	r4, [r1], #4
 8002a9e:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8002aa0:	f10c 0c01 	add.w	ip, ip, #1
 8002aa4:	45f4      	cmp	ip, lr
 8002aa6:	d3f4      	bcc.n	8002a92 <USB_WritePacket+0x14>
}
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	bd10      	pop	{r4, pc}

08002aac <USB_EPStartXfer>:
{
 8002aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aae:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8002ab0:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8002ab2:	784b      	ldrb	r3, [r1, #1]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d02d      	beq.n	8002b14 <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ab8:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8002abc:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8002ac0:	691d      	ldr	r5, [r3, #16]
 8002ac2:	f36f 0512 	bfc	r5, #0, #19
 8002ac6:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002ac8:	691d      	ldr	r5, [r3, #16]
 8002aca:	f36f 45dc 	bfc	r5, #19, #10
 8002ace:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8002ad0:	2c00      	cmp	r4, #0
 8002ad2:	f040 80ce 	bne.w	8002c72 <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 8002ad6:	690c      	ldr	r4, [r1, #16]
 8002ad8:	b10c      	cbz	r4, 8002ade <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8002ada:	688c      	ldr	r4, [r1, #8]
 8002adc:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8002ade:	688c      	ldr	r4, [r1, #8]
 8002ae0:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8002ae2:	691d      	ldr	r5, [r3, #16]
 8002ae4:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002ae8:	432c      	orrs	r4, r5
 8002aea:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002aec:	691c      	ldr	r4, [r3, #16]
 8002aee:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8002af2:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8002af4:	2a01      	cmp	r2, #1
 8002af6:	f000 80df 	beq.w	8002cb8 <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 8002afa:	790b      	ldrb	r3, [r1, #4]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	f000 80e1 	beq.w	8002cc4 <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002b02:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8002b06:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8002b0a:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8002b0e:	2000      	movs	r0, #0
 8002b10:	b003      	add	sp, #12
 8002b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8002b14:	690b      	ldr	r3, [r1, #16]
 8002b16:	bb73      	cbnz	r3, 8002b76 <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002b18:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8002b1c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8002b20:	f36f 45dc 	bfc	r5, #19, #10
 8002b24:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002b28:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8002b2c:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8002b30:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002b34:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8002b38:	f36f 0512 	bfc	r5, #0, #19
 8002b3c:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8002b40:	2a01      	cmp	r2, #1
 8002b42:	d054      	beq.n	8002bee <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002b44:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002b48:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8002b4c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8002b50:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002b54:	790b      	ldrb	r3, [r1, #4]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d072      	beq.n	8002c40 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 8002b5a:	690b      	ldr	r3, [r1, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0d6      	beq.n	8002b0e <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002b60:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8002b64:	7809      	ldrb	r1, [r1, #0]
 8002b66:	f001 010f 	and.w	r1, r1, #15
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	408a      	lsls	r2, r1
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8002b74:	e7cb      	b.n	8002b0e <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002b76:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8002b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b7e:	691d      	ldr	r5, [r3, #16]
 8002b80:	f36f 0512 	bfc	r5, #0, #19
 8002b84:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002b86:	691d      	ldr	r5, [r3, #16]
 8002b88:	f36f 45dc 	bfc	r5, #19, #10
 8002b8c:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8002b8e:	b984      	cbnz	r4, 8002bb2 <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 8002b90:	690e      	ldr	r6, [r1, #16]
 8002b92:	688d      	ldr	r5, [r1, #8]
 8002b94:	42ae      	cmp	r6, r5
 8002b96:	d900      	bls.n	8002b9a <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 8002b98:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002b9a:	691d      	ldr	r5, [r3, #16]
 8002b9c:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8002ba0:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002ba2:	691d      	ldr	r5, [r3, #16]
 8002ba4:	690e      	ldr	r6, [r1, #16]
 8002ba6:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8002baa:	ea45 050c 	orr.w	r5, r5, ip
 8002bae:	611d      	str	r5, [r3, #16]
 8002bb0:	e7c6      	b.n	8002b40 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002bb2:	690d      	ldr	r5, [r1, #16]
 8002bb4:	688e      	ldr	r6, [r1, #8]
 8002bb6:	4435      	add	r5, r6
 8002bb8:	3d01      	subs	r5, #1
 8002bba:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8002bbe:	691e      	ldr	r6, [r3, #16]
 8002bc0:	fa1f fc85 	uxth.w	ip, r5
 8002bc4:	4f49      	ldr	r7, [pc, #292]	@ (8002cec <USB_EPStartXfer+0x240>)
 8002bc6:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8002bca:	4335      	orrs	r5, r6
 8002bcc:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8002bce:	790d      	ldrb	r5, [r1, #4]
 8002bd0:	2d01      	cmp	r5, #1
 8002bd2:	d1e6      	bne.n	8002ba2 <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002bd4:	691d      	ldr	r5, [r3, #16]
 8002bd6:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8002bda:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8002bdc:	691d      	ldr	r5, [r3, #16]
 8002bde:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8002be2:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 8002be6:	ea45 050c 	orr.w	r5, r5, ip
 8002bea:	611d      	str	r5, [r3, #16]
 8002bec:	e7d9      	b.n	8002ba2 <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8002bee:	69cb      	ldr	r3, [r1, #28]
 8002bf0:	b11b      	cbz	r3, 8002bfa <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002bf2:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8002bf6:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8002bfa:	790b      	ldrb	r3, [r1, #4]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d008      	beq.n	8002c12 <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002c00:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002c04:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8002c08:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8002c0c:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8002c10:	e77d      	b.n	8002b0e <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002c12:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8002c16:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002c1a:	d108      	bne.n	8002c2e <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002c1c:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8002c20:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8002c24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c28:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8002c2c:	e7e8      	b.n	8002c00 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002c2e:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8002c32:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8002c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8002c3e:	e7df      	b.n	8002c00 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002c40:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8002c44:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002c48:	d10c      	bne.n	8002c64 <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002c4a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8002c4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c52:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002c56:	9200      	str	r2, [sp, #0]
 8002c58:	8a0b      	ldrh	r3, [r1, #16]
 8002c5a:	780a      	ldrb	r2, [r1, #0]
 8002c5c:	68c9      	ldr	r1, [r1, #12]
 8002c5e:	f7ff ff0e 	bl	8002a7e <USB_WritePacket>
 8002c62:	e754      	b.n	8002b0e <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002c64:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8002c70:	e7f1      	b.n	8002c56 <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 8002c72:	690c      	ldr	r4, [r1, #16]
 8002c74:	b954      	cbnz	r4, 8002c8c <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002c76:	691c      	ldr	r4, [r3, #16]
 8002c78:	688d      	ldr	r5, [r1, #8]
 8002c7a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002c7e:	432c      	orrs	r4, r5
 8002c80:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002c82:	691c      	ldr	r4, [r3, #16]
 8002c84:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8002c88:	611c      	str	r4, [r3, #16]
 8002c8a:	e733      	b.n	8002af4 <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002c8c:	688d      	ldr	r5, [r1, #8]
 8002c8e:	442c      	add	r4, r5
 8002c90:	3c01      	subs	r4, #1
 8002c92:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8002c96:	b2a4      	uxth	r4, r4
 8002c98:	fb04 f505 	mul.w	r5, r4, r5
 8002c9c:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002c9e:	691d      	ldr	r5, [r3, #16]
 8002ca0:	4e12      	ldr	r6, [pc, #72]	@ (8002cec <USB_EPStartXfer+0x240>)
 8002ca2:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8002ca6:	432c      	orrs	r4, r5
 8002ca8:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8002caa:	691c      	ldr	r4, [r3, #16]
 8002cac:	6a0d      	ldr	r5, [r1, #32]
 8002cae:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002cb2:	432c      	orrs	r4, r5
 8002cb4:	611c      	str	r4, [r3, #16]
 8002cb6:	e71d      	b.n	8002af4 <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002cb8:	68ca      	ldr	r2, [r1, #12]
 8002cba:	2a00      	cmp	r2, #0
 8002cbc:	f43f af1d 	beq.w	8002afa <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002cc0:	615a      	str	r2, [r3, #20]
 8002cc2:	e71a      	b.n	8002afa <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002cc4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8002cc8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002ccc:	d106      	bne.n	8002cdc <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002cce:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8002cd2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002cd6:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8002cda:	e712      	b.n	8002b02 <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002cdc:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce4:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8002ce8:	e70b      	b.n	8002b02 <USB_EPStartXfer+0x56>
 8002cea:	bf00      	nop
 8002cec:	1ff80000 	.word	0x1ff80000

08002cf0 <USB_ReadPacket>:
{
 8002cf0:	b510      	push	{r4, lr}
 8002cf2:	4684      	mov	ip, r0
 8002cf4:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8002cf6:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8002cfa:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e005      	b.n	8002d0e <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002d02:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 8002d06:	6809      	ldr	r1, [r1, #0]
 8002d08:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	4573      	cmp	r3, lr
 8002d10:	d3f7      	bcc.n	8002d02 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8002d12:	b17a      	cbz	r2, 8002d34 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002d14:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8002d18:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8002d1c:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002d1e:	b2cb      	uxtb	r3, r1
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	fa24 f303 	lsr.w	r3, r4, r3
 8002d26:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8002d2a:	3101      	adds	r1, #1
      remaining_bytes--;
 8002d2c:	3a01      	subs	r2, #1
 8002d2e:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8002d30:	2a00      	cmp	r2, #0
 8002d32:	d1f4      	bne.n	8002d1e <USB_ReadPacket+0x2e>
}
 8002d34:	bd10      	pop	{r4, pc}

08002d36 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8002d36:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002d38:	784a      	ldrb	r2, [r1, #1]
 8002d3a:	2a01      	cmp	r2, #1
 8002d3c:	d014      	beq.n	8002d68 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002d3e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002d42:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8002d46:	2a00      	cmp	r2, #0
 8002d48:	db06      	blt.n	8002d58 <USB_EPSetStall+0x22>
 8002d4a:	b12b      	cbz	r3, 8002d58 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002d4c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002d50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d54:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002d58:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002d5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d60:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8002d64:	2000      	movs	r0, #0
 8002d66:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002d68:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002d6c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8002d70:	2a00      	cmp	r2, #0
 8002d72:	db06      	blt.n	8002d82 <USB_EPSetStall+0x4c>
 8002d74:	b12b      	cbz	r3, 8002d82 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8002d76:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002d7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d7e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8002d82:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002d86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d8a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8002d8e:	e7e9      	b.n	8002d64 <USB_EPSetStall+0x2e>

08002d90 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8002d90:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002d92:	784a      	ldrb	r2, [r1, #1]
 8002d94:	2a01      	cmp	r2, #1
 8002d96:	d00e      	beq.n	8002db6 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d98:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002d9c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002da0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002da4:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002da8:	790b      	ldrb	r3, [r1, #4]
 8002daa:	3b02      	subs	r3, #2
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d915      	bls.n	8002dde <USB_EPClearStall+0x4e>
}
 8002db2:	2000      	movs	r0, #0
 8002db4:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002db6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002dba:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002dbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002dc2:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002dc6:	790b      	ldrb	r3, [r1, #4]
 8002dc8:	3b02      	subs	r3, #2
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d8f0      	bhi.n	8002db2 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002dd0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd8:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8002ddc:	e7e9      	b.n	8002db2 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002dde:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de6:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8002dea:	e7e2      	b.n	8002db2 <USB_EPClearStall+0x22>

08002dec <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002dec:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8002df0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002df4:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002df8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8002dfc:	0109      	lsls	r1, r1, #4
 8002dfe:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8002e02:	430b      	orrs	r3, r1
 8002e04:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8002e08:	2000      	movs	r0, #0
 8002e0a:	4770      	bx	lr

08002e0c <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002e0c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8002e10:	f023 0303 	bic.w	r3, r3, #3
 8002e14:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002e18:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8002e1c:	f023 0302 	bic.w	r3, r3, #2
 8002e20:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8002e24:	2000      	movs	r0, #0
 8002e26:	4770      	bx	lr

08002e28 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002e28:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8002e2c:	f023 0303 	bic.w	r3, r3, #3
 8002e30:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e34:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8002e38:	f043 0302 	orr.w	r3, r3, #2
 8002e3c:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8002e40:	2000      	movs	r0, #0
 8002e42:	4770      	bx	lr

08002e44 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002e44:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002e46:	6980      	ldr	r0, [r0, #24]
}
 8002e48:	4010      	ands	r0, r2
 8002e4a:	4770      	bx	lr

08002e4c <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002e4c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8002e50:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002e54:	69c0      	ldr	r0, [r0, #28]
 8002e56:	4018      	ands	r0, r3
}
 8002e58:	0c00      	lsrs	r0, r0, #16
 8002e5a:	4770      	bx	lr

08002e5c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002e5c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8002e60:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002e64:	69c0      	ldr	r0, [r0, #28]
 8002e66:	4018      	ands	r0, r3
}
 8002e68:	b280      	uxth	r0, r0
 8002e6a:	4770      	bx	lr

08002e6c <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002e6c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002e70:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002e74:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8002e78:	6940      	ldr	r0, [r0, #20]
}
 8002e7a:	4010      	ands	r0, r2
 8002e7c:	4770      	bx	lr

08002e7e <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8002e7e:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002e82:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002e86:	f001 0c0f 	and.w	ip, r1, #15
 8002e8a:	fa23 f30c 	lsr.w	r3, r3, ip
 8002e8e:	01db      	lsls	r3, r3, #7
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002e94:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8002e98:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8002e9c:	6880      	ldr	r0, [r0, #8]
}
 8002e9e:	4018      	ands	r0, r3
 8002ea0:	4770      	bx	lr

08002ea2 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002ea2:	6940      	ldr	r0, [r0, #20]
}
 8002ea4:	f000 0001 	and.w	r0, r0, #1
 8002ea8:	4770      	bx	lr

08002eaa <USB_SetCurrentMode>:
{
 8002eaa:	b538      	push	{r3, r4, r5, lr}
 8002eac:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002eae:	68c3      	ldr	r3, [r0, #12]
 8002eb0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8002eb4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002eb6:	2901      	cmp	r1, #1
 8002eb8:	d013      	beq.n	8002ee2 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8002eba:	bb19      	cbnz	r1, 8002f04 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ebc:	68c3      	ldr	r3, [r0, #12]
 8002ebe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ec2:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002ec4:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8002ec6:	200a      	movs	r0, #10
 8002ec8:	f7fd fb52 	bl	8000570 <HAL_Delay>
      ms += 10U;
 8002ecc:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f7ff ffe7 	bl	8002ea2 <USB_GetMode>
 8002ed4:	b108      	cbz	r0, 8002eda <USB_SetCurrentMode+0x30>
 8002ed6:	2cc7      	cmp	r4, #199	@ 0xc7
 8002ed8:	d9f5      	bls.n	8002ec6 <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002eda:	2cc8      	cmp	r4, #200	@ 0xc8
 8002edc:	d014      	beq.n	8002f08 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8002ede:	2000      	movs	r0, #0
}
 8002ee0:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ee2:	68c3      	ldr	r3, [r0, #12]
 8002ee4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002ee8:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002eea:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8002eec:	200a      	movs	r0, #10
 8002eee:	f7fd fb3f 	bl	8000570 <HAL_Delay>
      ms += 10U;
 8002ef2:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	f7ff ffd4 	bl	8002ea2 <USB_GetMode>
 8002efa:	2801      	cmp	r0, #1
 8002efc:	d0ed      	beq.n	8002eda <USB_SetCurrentMode+0x30>
 8002efe:	2cc7      	cmp	r4, #199	@ 0xc7
 8002f00:	d9f4      	bls.n	8002eec <USB_SetCurrentMode+0x42>
 8002f02:	e7ea      	b.n	8002eda <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8002f04:	2001      	movs	r0, #1
 8002f06:	e7eb      	b.n	8002ee0 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8002f08:	2001      	movs	r0, #1
 8002f0a:	e7e9      	b.n	8002ee0 <USB_SetCurrentMode+0x36>

08002f0c <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002f0c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002f10:	f36f 030a 	bfc	r3, #0, #11
 8002f14:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002f18:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f20:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8002f24:	2000      	movs	r0, #0
 8002f26:	4770      	bx	lr

08002f28 <USB_EP0_OutStart>:
{
 8002f28:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002f2a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002f2c:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <USB_EP0_OutStart+0x5c>)
 8002f2e:	429c      	cmp	r4, r3
 8002f30:	d903      	bls.n	8002f3a <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f32:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	db16      	blt.n	8002f68 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002f3a:	2400      	movs	r4, #0
 8002f3c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002f40:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8002f44:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8002f48:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002f4c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8002f50:	f044 0418 	orr.w	r4, r4, #24
 8002f54:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002f58:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8002f5c:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8002f60:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8002f64:	2901      	cmp	r1, #1
 8002f66:	d003      	beq.n	8002f70 <USB_EP0_OutStart+0x48>
}
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f6e:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002f70:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8002f74:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002f78:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8002f7c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8002f80:	e7f2      	b.n	8002f68 <USB_EP0_OutStart+0x40>
 8002f82:	bf00      	nop
 8002f84:	4f54300a 	.word	0x4f54300a

08002f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f88:	b510      	push	{r4, lr}
 8002f8a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc0 <_sbrk+0x38>)
 8002f8e:	490d      	ldr	r1, [pc, #52]	@ (8002fc4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f90:	480d      	ldr	r0, [pc, #52]	@ (8002fc8 <_sbrk+0x40>)
 8002f92:	6800      	ldr	r0, [r0, #0]
 8002f94:	b140      	cbz	r0, 8002fa8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f96:	480c      	ldr	r0, [pc, #48]	@ (8002fc8 <_sbrk+0x40>)
 8002f98:	6800      	ldr	r0, [r0, #0]
 8002f9a:	4403      	add	r3, r0
 8002f9c:	1a52      	subs	r2, r2, r1
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d806      	bhi.n	8002fb0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002fa2:	4a09      	ldr	r2, [pc, #36]	@ (8002fc8 <_sbrk+0x40>)
 8002fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002fa6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002fa8:	4807      	ldr	r0, [pc, #28]	@ (8002fc8 <_sbrk+0x40>)
 8002faa:	4c08      	ldr	r4, [pc, #32]	@ (8002fcc <_sbrk+0x44>)
 8002fac:	6004      	str	r4, [r0, #0]
 8002fae:	e7f2      	b.n	8002f96 <_sbrk+0xe>
    errno = ENOMEM;
 8002fb0:	f001 fd56 	bl	8004a60 <__errno>
 8002fb4:	230c      	movs	r3, #12
 8002fb6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	e7f3      	b.n	8002fa6 <_sbrk+0x1e>
 8002fbe:	bf00      	nop
 8002fc0:	20010000 	.word	0x20010000
 8002fc4:	00000400 	.word	0x00000400
 8002fc8:	200001f8 	.word	0x200001f8
 8002fcc:	20001808 	.word	0x20001808

08002fd0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fd0:	4a03      	ldr	r2, [pc, #12]	@ (8002fe0 <SystemInit+0x10>)
 8002fd2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002fd6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fda:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002fe4:	b500      	push	{lr}
 8002fe6:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fe8:	2300      	movs	r3, #0
 8002fea:	9302      	str	r3, [sp, #8]
 8002fec:	9303      	str	r3, [sp, #12]
 8002fee:	9304      	str	r3, [sp, #16]
 8002ff0:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ff6:	4815      	ldr	r0, [pc, #84]	@ (800304c <MX_TIM2_Init+0x68>)
 8002ff8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ffc:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8002ffe:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003000:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8003002:	f04f 32ff 	mov.w	r2, #4294967295
 8003006:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003008:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800300a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800300c:	f7fe ffd0 	bl	8001fb0 <HAL_TIM_Base_Init>
 8003010:	b990      	cbnz	r0, 8003038 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003012:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003016:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003018:	a902      	add	r1, sp, #8
 800301a:	480c      	ldr	r0, [pc, #48]	@ (800304c <MX_TIM2_Init+0x68>)
 800301c:	f7ff f8c9 	bl	80021b2 <HAL_TIM_ConfigClockSource>
 8003020:	b968      	cbnz	r0, 800303e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003022:	2300      	movs	r3, #0
 8003024:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003026:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003028:	4669      	mov	r1, sp
 800302a:	4808      	ldr	r0, [pc, #32]	@ (800304c <MX_TIM2_Init+0x68>)
 800302c:	f7ff f940 	bl	80022b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003030:	b940      	cbnz	r0, 8003044 <MX_TIM2_Init+0x60>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003032:	b007      	add	sp, #28
 8003034:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003038:	f7fd f9f2 	bl	8000420 <Error_Handler>
 800303c:	e7e9      	b.n	8003012 <MX_TIM2_Init+0x2e>
    Error_Handler();
 800303e:	f7fd f9ef 	bl	8000420 <Error_Handler>
 8003042:	e7ee      	b.n	8003022 <MX_TIM2_Init+0x3e>
    Error_Handler();
 8003044:	f7fd f9ec 	bl	8000420 <Error_Handler>
}
 8003048:	e7f3      	b.n	8003032 <MX_TIM2_Init+0x4e>
 800304a:	bf00      	nop
 800304c:	2000028c 	.word	0x2000028c

08003050 <MX_TIM5_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003050:	b500      	push	{lr}
 8003052:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003054:	2300      	movs	r3, #0
 8003056:	9302      	str	r3, [sp, #8]
 8003058:	9303      	str	r3, [sp, #12]
 800305a:	9304      	str	r3, [sp, #16]
 800305c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003062:	4814      	ldr	r0, [pc, #80]	@ (80030b4 <MX_TIM5_Init+0x64>)
 8003064:	4a14      	ldr	r2, [pc, #80]	@ (80030b8 <MX_TIM5_Init+0x68>)
 8003066:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 0;
 8003068:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800306a:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 4294967295;
 800306c:	f04f 32ff 	mov.w	r2, #4294967295
 8003070:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003072:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003074:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003076:	f7fe ff9b 	bl	8001fb0 <HAL_TIM_Base_Init>
 800307a:	b990      	cbnz	r0, 80030a2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800307c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003080:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003082:	a902      	add	r1, sp, #8
 8003084:	480b      	ldr	r0, [pc, #44]	@ (80030b4 <MX_TIM5_Init+0x64>)
 8003086:	f7ff f894 	bl	80021b2 <HAL_TIM_ConfigClockSource>
 800308a:	b968      	cbnz	r0, 80030a8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800308c:	2300      	movs	r3, #0
 800308e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003090:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003092:	4669      	mov	r1, sp
 8003094:	4807      	ldr	r0, [pc, #28]	@ (80030b4 <MX_TIM5_Init+0x64>)
 8003096:	f7ff f90b 	bl	80022b0 <HAL_TIMEx_MasterConfigSynchronization>
 800309a:	b940      	cbnz	r0, 80030ae <MX_TIM5_Init+0x5e>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800309c:	b007      	add	sp, #28
 800309e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80030a2:	f7fd f9bd 	bl	8000420 <Error_Handler>
 80030a6:	e7e9      	b.n	800307c <MX_TIM5_Init+0x2c>
    Error_Handler();
 80030a8:	f7fd f9ba 	bl	8000420 <Error_Handler>
 80030ac:	e7ee      	b.n	800308c <MX_TIM5_Init+0x3c>
    Error_Handler();
 80030ae:	f7fd f9b7 	bl	8000420 <Error_Handler>
}
 80030b2:	e7f3      	b.n	800309c <MX_TIM5_Init+0x4c>
 80030b4:	200001fc 	.word	0x200001fc
 80030b8:	40000c00 	.word	0x40000c00

080030bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030bc:	b510      	push	{r4, lr}
 80030be:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	2300      	movs	r3, #0
 80030c2:	9305      	str	r3, [sp, #20]
 80030c4:	9306      	str	r3, [sp, #24]
 80030c6:	9307      	str	r3, [sp, #28]
 80030c8:	9308      	str	r3, [sp, #32]
 80030ca:	9309      	str	r3, [sp, #36]	@ 0x24
  if(tim_baseHandle->Instance==TIM2)
 80030cc:	6803      	ldr	r3, [r0, #0]
 80030ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d2:	d007      	beq.n	80030e4 <HAL_TIM_Base_MspInit+0x28>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 80030d4:	4a25      	ldr	r2, [pc, #148]	@ (800316c <HAL_TIM_Base_MspInit+0xb0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02e      	beq.n	8003138 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 80030da:	4a25      	ldr	r2, [pc, #148]	@ (8003170 <HAL_TIM_Base_MspInit+0xb4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d038      	beq.n	8003152 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80030e0:	b00a      	add	sp, #40	@ 0x28
 80030e2:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030e4:	2400      	movs	r4, #0
 80030e6:	9401      	str	r4, [sp, #4]
 80030e8:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 80030ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80030f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030f6:	f002 0201 	and.w	r2, r2, #1
 80030fa:	9201      	str	r2, [sp, #4]
 80030fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fe:	9402      	str	r4, [sp, #8]
 8003100:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	631a      	str	r2, [r3, #48]	@ 0x30
 8003108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	9302      	str	r3, [sp, #8]
 8003110:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8003112:	2305      	movs	r3, #5
 8003114:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800311a:	2301      	movs	r3, #1
 800311c:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311e:	a905      	add	r1, sp, #20
 8003120:	4814      	ldr	r0, [pc, #80]	@ (8003174 <HAL_TIM_Base_MspInit+0xb8>)
 8003122:	f7fd faa1 	bl	8000668 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003126:	4622      	mov	r2, r4
 8003128:	4621      	mov	r1, r4
 800312a:	201c      	movs	r0, #28
 800312c:	f7fd fa88 	bl	8000640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003130:	201c      	movs	r0, #28
 8003132:	f7fd fa95 	bl	8000660 <HAL_NVIC_EnableIRQ>
 8003136:	e7d3      	b.n	80030e0 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003138:	2300      	movs	r3, #0
 800313a:	9303      	str	r3, [sp, #12]
 800313c:	4b0e      	ldr	r3, [pc, #56]	@ (8003178 <HAL_TIM_Base_MspInit+0xbc>)
 800313e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003140:	f042 0202 	orr.w	r2, r2, #2
 8003144:	641a      	str	r2, [r3, #64]	@ 0x40
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	9303      	str	r3, [sp, #12]
 800314e:	9b03      	ldr	r3, [sp, #12]
 8003150:	e7c6      	b.n	80030e0 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	9304      	str	r3, [sp, #16]
 8003156:	4b08      	ldr	r3, [pc, #32]	@ (8003178 <HAL_TIM_Base_MspInit+0xbc>)
 8003158:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800315a:	f042 0208 	orr.w	r2, r2, #8
 800315e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	9304      	str	r3, [sp, #16]
 8003168:	9b04      	ldr	r3, [sp, #16]
}
 800316a:	e7b9      	b.n	80030e0 <HAL_TIM_Base_MspInit+0x24>
 800316c:	40000400 	.word	0x40000400
 8003170:	40000c00 	.word	0x40000c00
 8003174:	40020000 	.word	0x40020000
 8003178:	40023800 	.word	0x40023800

0800317c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800317c:	b500      	push	{lr}
 800317e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	2300      	movs	r3, #0
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	9302      	str	r3, [sp, #8]
 8003186:	9303      	str	r3, [sp, #12]
 8003188:	9304      	str	r3, [sp, #16]
 800318a:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 800318c:	6802      	ldr	r2, [r0, #0]
 800318e:	4b0e      	ldr	r3, [pc, #56]	@ (80031c8 <HAL_TIM_MspPostInit+0x4c>)
 8003190:	429a      	cmp	r2, r3
 8003192:	d002      	beq.n	800319a <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003194:	b007      	add	sp, #28
 8003196:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <HAL_TIM_MspPostInit+0x50>)
 80031a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031b2:	23c0      	movs	r3, #192	@ 0xc0
 80031b4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031ba:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031bc:	a901      	add	r1, sp, #4
 80031be:	4804      	ldr	r0, [pc, #16]	@ (80031d0 <HAL_TIM_MspPostInit+0x54>)
 80031c0:	f7fd fa52 	bl	8000668 <HAL_GPIO_Init>
}
 80031c4:	e7e6      	b.n	8003194 <HAL_TIM_MspPostInit+0x18>
 80031c6:	bf00      	nop
 80031c8:	40000400 	.word	0x40000400
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40020000 	.word	0x40020000

080031d4 <MX_TIM3_Init>:
{
 80031d4:	b500      	push	{lr}
 80031d6:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031d8:	2300      	movs	r3, #0
 80031da:	930a      	str	r3, [sp, #40]	@ 0x28
 80031dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80031de:	930c      	str	r3, [sp, #48]	@ 0x30
 80031e0:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031e2:	9308      	str	r3, [sp, #32]
 80031e4:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	9302      	str	r3, [sp, #8]
 80031ea:	9303      	str	r3, [sp, #12]
 80031ec:	9304      	str	r3, [sp, #16]
 80031ee:	9305      	str	r3, [sp, #20]
 80031f0:	9306      	str	r3, [sp, #24]
 80031f2:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 80031f4:	4825      	ldr	r0, [pc, #148]	@ (800328c <MX_TIM3_Init+0xb8>)
 80031f6:	4a26      	ldr	r2, [pc, #152]	@ (8003290 <MX_TIM3_Init+0xbc>)
 80031f8:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 80031fa:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031fc:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 80031fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003202:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003204:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003206:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003208:	f7fe fed2 	bl	8001fb0 <HAL_TIM_Base_Init>
 800320c:	bb58      	cbnz	r0, 8003266 <MX_TIM3_Init+0x92>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800320e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003212:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003214:	a90a      	add	r1, sp, #40	@ 0x28
 8003216:	481d      	ldr	r0, [pc, #116]	@ (800328c <MX_TIM3_Init+0xb8>)
 8003218:	f7fe ffcb 	bl	80021b2 <HAL_TIM_ConfigClockSource>
 800321c:	bb30      	cbnz	r0, 800326c <MX_TIM3_Init+0x98>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800321e:	481b      	ldr	r0, [pc, #108]	@ (800328c <MX_TIM3_Init+0xb8>)
 8003220:	f7fe fef2 	bl	8002008 <HAL_TIM_PWM_Init>
 8003224:	bb28      	cbnz	r0, 8003272 <MX_TIM3_Init+0x9e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800322a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800322c:	a908      	add	r1, sp, #32
 800322e:	4817      	ldr	r0, [pc, #92]	@ (800328c <MX_TIM3_Init+0xb8>)
 8003230:	f7ff f83e 	bl	80022b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003234:	bb00      	cbnz	r0, 8003278 <MX_TIM3_Init+0xa4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003236:	2360      	movs	r3, #96	@ 0x60
 8003238:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800323a:	2200      	movs	r2, #0
 800323c:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800323e:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003240:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003242:	a901      	add	r1, sp, #4
 8003244:	4811      	ldr	r0, [pc, #68]	@ (800328c <MX_TIM3_Init+0xb8>)
 8003246:	f7fe ff39 	bl	80020bc <HAL_TIM_PWM_ConfigChannel>
 800324a:	b9c0      	cbnz	r0, 800327e <MX_TIM3_Init+0xaa>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800324c:	2204      	movs	r2, #4
 800324e:	eb0d 0102 	add.w	r1, sp, r2
 8003252:	480e      	ldr	r0, [pc, #56]	@ (800328c <MX_TIM3_Init+0xb8>)
 8003254:	f7fe ff32 	bl	80020bc <HAL_TIM_PWM_ConfigChannel>
 8003258:	b9a0      	cbnz	r0, 8003284 <MX_TIM3_Init+0xb0>
  HAL_TIM_MspPostInit(&htim3);
 800325a:	480c      	ldr	r0, [pc, #48]	@ (800328c <MX_TIM3_Init+0xb8>)
 800325c:	f7ff ff8e 	bl	800317c <HAL_TIM_MspPostInit>
}
 8003260:	b00f      	add	sp, #60	@ 0x3c
 8003262:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003266:	f7fd f8db 	bl	8000420 <Error_Handler>
 800326a:	e7d0      	b.n	800320e <MX_TIM3_Init+0x3a>
    Error_Handler();
 800326c:	f7fd f8d8 	bl	8000420 <Error_Handler>
 8003270:	e7d5      	b.n	800321e <MX_TIM3_Init+0x4a>
    Error_Handler();
 8003272:	f7fd f8d5 	bl	8000420 <Error_Handler>
 8003276:	e7d6      	b.n	8003226 <MX_TIM3_Init+0x52>
    Error_Handler();
 8003278:	f7fd f8d2 	bl	8000420 <Error_Handler>
 800327c:	e7db      	b.n	8003236 <MX_TIM3_Init+0x62>
    Error_Handler();
 800327e:	f7fd f8cf 	bl	8000420 <Error_Handler>
 8003282:	e7e3      	b.n	800324c <MX_TIM3_Init+0x78>
    Error_Handler();
 8003284:	f7fd f8cc 	bl	8000420 <Error_Handler>
 8003288:	e7e7      	b.n	800325a <MX_TIM3_Init+0x86>
 800328a:	bf00      	nop
 800328c:	20000244 	.word	0x20000244
 8003290:	40000400 	.word	0x40000400

08003294 <set_filtering>:

trigger_s *trigger = NULL;

void set_filtering(trigger_s *trigger)
{
  switch (trigger->settings.filtering)
 8003294:	7903      	ldrb	r3, [r0, #4]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d813      	bhi.n	80032c2 <set_filtering+0x2e>
 800329a:	e8df f003 	tbb	[pc, r3]
 800329e:	0502      	.short	0x0502
 80032a0:	0c09      	.short	0x0c09
  {
    case TF_FILTERING_NONE:
      trigger->_trigger_filter_time_us = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	60c3      	str	r3, [r0, #12]
        break;
 80032a6:	4770      	bx	lr
    case TF_FILTERING_LITE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 4U; 
 80032a8:	69c3      	ldr	r3, [r0, #28]
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	60c3      	str	r3, [r0, #12]
        break;
 80032ae:	4770      	bx	lr
    case TF_FILTERING_MEDIUM:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 1U;
 80032b0:	69c3      	ldr	r3, [r0, #28]
 80032b2:	60c3      	str	r3, [r0, #12]
        break;
 80032b4:	4770      	bx	lr
    case TF_FILTERING_AGGRESSIVE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us * 3 / 4;
 80032b6:	69c3      	ldr	r3, [r0, #28]
 80032b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80032bc:	089b      	lsrs	r3, r3, #2
 80032be:	60c3      	str	r3, [r0, #12]
        break;
 80032c0:	4770      	bx	lr
    default:
        // Handle invalid filtering level
        trigger->_trigger_filter_time_us = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60c3      	str	r3, [r0, #12]
        break;
  }
}
 80032c6:	4770      	bx	lr

080032c8 <trigger_tooth_handle>:
  trigger->initialized = temp_status;
    
}

void trigger_tooth_handle()
{
 80032c8:	b538      	push	{r3, r4, r5, lr}

  if (!trigger->initialized)
 80032ca:	4b51      	ldr	r3, [pc, #324]	@ (8003410 <trigger_tooth_handle+0x148>)
 80032cc:	681c      	ldr	r4, [r3, #0]
 80032ce:	7825      	ldrb	r5, [r4, #0]
 80032d0:	b905      	cbnz	r5, 80032d4 <trigger_tooth_handle+0xc>
    set_filtering(trigger); 
  }
  
  trigger->_tooth_time_us[2] = trigger->_tooth_time_us[1];
  trigger->_tooth_time_us[1] = trigger->_tooth_time_us[0];
}
 80032d2:	bd38      	pop	{r3, r4, r5, pc}
  trigger->_tooth_time_us[0] = get_time_us();
 80032d4:	f7fd f804 	bl	80002e0 <get_time_us>
 80032d8:	6120      	str	r0, [r4, #16]
  trigger->_current_tooth_gap_us = trigger->_tooth_time_us[0] - trigger->_tooth_time_us[1];
 80032da:	4b4d      	ldr	r3, [pc, #308]	@ (8003410 <trigger_tooth_handle+0x148>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	6958      	ldr	r0, [r3, #20]
 80032e2:	1a12      	subs	r2, r2, r0
 80032e4:	61da      	str	r2, [r3, #28]
  if (trigger->_current_tooth_gap_us < trigger->_trigger_filter_time_us) // Pulses should never be less than _trigger_filter_time_us, so if they are it means a false trigger. (A 36-1 wheel at 8000rpm will have triggers approx. every 200uS)
 80032e6:	68d9      	ldr	r1, [r3, #12]
 80032e8:	428a      	cmp	r2, r1
 80032ea:	d3f2      	bcc.n	80032d2 <trigger_tooth_handle+0xa>
  trigger->_counted_tooth++; //Increment the tooth counter
 80032ec:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 80032ee:	3101      	adds	r1, #1
 80032f0:	b289      	uxth	r1, r1
 80032f2:	8519      	strh	r1, [r3, #40]	@ 0x28
  previous_tooth_gap = trigger->_tooth_time_us[1] - trigger->_tooth_time_us[2];
 80032f4:	699c      	ldr	r4, [r3, #24]
 80032f6:	1b00      	subs	r0, r0, r4
  if (previous_tooth_gap < trigger->_current_tooth_gap_us) 
 80032f8:	4282      	cmp	r2, r0
 80032fa:	d956      	bls.n	80033aa <trigger_tooth_handle+0xe2>
    trigger->_shorter_tooth_gap = previous_tooth_gap;
 80032fc:	6218      	str	r0, [r3, #32]
  if(trigger->settings.missing_teeth == 1)
 80032fe:	7998      	ldrb	r0, [r3, #6]
 8003300:	2801      	cmp	r0, #1
 8003302:	d054      	beq.n	80033ae <trigger_tooth_handle+0xe6>
    trigger->_target_tooth_gap_us = trigger->_shorter_tooth_gap * trigger->settings.missing_teeth;
 8003304:	6a1c      	ldr	r4, [r3, #32]
 8003306:	fb00 f404 	mul.w	r4, r0, r4
 800330a:	625c      	str	r4, [r3, #36]	@ 0x24
  if ((trigger->_current_tooth_gap_us > trigger->_target_tooth_gap_us) || (trigger->_counted_tooth > trigger->_trigger_actual_teeth))
 800330c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800330e:	4282      	cmp	r2, r0
 8003310:	d803      	bhi.n	800331a <trigger_tooth_handle+0x52>
 8003312:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8003316:	4291      	cmp	r1, r2
 8003318:	d95a      	bls.n	80033d0 <trigger_tooth_handle+0x108>
    if (trigger->_counted_tooth < trigger->_trigger_actual_teeth)
 800331a:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800331e:	4291      	cmp	r1, r2
 8003320:	d24b      	bcs.n	80033ba <trigger_tooth_handle+0xf2>
      trigger->sync_status = TS_NOT_SYNCED;
 8003322:	2200      	movs	r2, #0
 8003324:	705a      	strb	r2, [r3, #1]
      trigger->sync_loss_counter++;
 8003326:	493a      	ldr	r1, [pc, #232]	@ (8003410 <trigger_tooth_handle+0x148>)
 8003328:	6808      	ldr	r0, [r1, #0]
 800332a:	8843      	ldrh	r3, [r0, #2]
 800332c:	3301      	adds	r3, #1
 800332e:	8043      	strh	r3, [r0, #2]
      engine.total_revolutions = 0;
 8003330:	4b38      	ldr	r3, [pc, #224]	@ (8003414 <trigger_tooth_handle+0x14c>)
 8003332:	601a      	str	r2, [r3, #0]
      engine.rpm = 0;
 8003334:	2000      	movs	r0, #0
 8003336:	60d8      	str	r0, [r3, #12]
      trigger->_counted_tooth = 0;
 8003338:	680b      	ldr	r3, [r1, #0]
 800333a:	851a      	strh	r2, [r3, #40]	@ 0x28
  engine.crankshaft_angle = 360.0f / (angle_t)trigger->settings.full_teeth * (angle_t)trigger->_counted_tooth;
 800333c:	4b34      	ldr	r3, [pc, #208]	@ (8003410 <trigger_tooth_handle+0x148>)
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	7943      	ldrb	r3, [r0, #5]
 8003342:	ee07 3a10 	vmov	s14, r3
 8003346:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800334a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8003418 <trigger_tooth_handle+0x150>
 800334e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003352:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 8003354:	ee07 3a10 	vmov	s14, r3
 8003358:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800335c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003360:	4a2c      	ldr	r2, [pc, #176]	@ (8003414 <trigger_tooth_handle+0x14c>)
 8003362:	edc2 7a01 	vstr	s15, [r2, #4]
  engine.rpm = (rpm_t)(CONVERSION_FACTOR_SECONDS_TO_MICROSECONDS * CONVERSION_FACTOR_MINUTES_TO_SECONDS / trigger->_shorter_tooth_gap / trigger->settings.full_teeth);
 8003366:	6a01      	ldr	r1, [r0, #32]
 8003368:	4b2c      	ldr	r3, [pc, #176]	@ (800341c <trigger_tooth_handle+0x154>)
 800336a:	fbb3 f3f1 	udiv	r3, r3, r1
 800336e:	7941      	ldrb	r1, [r0, #5]
 8003370:	fbb3 f3f1 	udiv	r3, r3, r1
 8003374:	ee07 3a90 	vmov	s15, r3
 8003378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337c:	edc2 7a03 	vstr	s15, [r2, #12]
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= trigger->cranking_rpm_threshold)
 8003380:	7843      	ldrb	r3, [r0, #1]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d026      	beq.n	80033d4 <trigger_tooth_handle+0x10c>
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < trigger->cranking_rpm_threshold)
 8003386:	7843      	ldrb	r3, [r0, #1]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d02e      	beq.n	80033ea <trigger_tooth_handle+0x122>
  if (trigger->sync_status == TS_NOT_SYNCED)
 800338c:	7843      	ldrb	r3, [r0, #1]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d136      	bne.n	8003400 <trigger_tooth_handle+0x138>
    engine.spinning_state = SS_SPINNING_UP;
 8003392:	4b20      	ldr	r3, [pc, #128]	@ (8003414 <trigger_tooth_handle+0x14c>)
 8003394:	2201      	movs	r2, #1
 8003396:	745a      	strb	r2, [r3, #17]
  if(is_missing_teeth == false)
 8003398:	2d00      	cmp	r5, #0
 800339a:	d035      	beq.n	8003408 <trigger_tooth_handle+0x140>
  trigger->_tooth_time_us[2] = trigger->_tooth_time_us[1];
 800339c:	4b1c      	ldr	r3, [pc, #112]	@ (8003410 <trigger_tooth_handle+0x148>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	619a      	str	r2, [r3, #24]
  trigger->_tooth_time_us[1] = trigger->_tooth_time_us[0];
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	615a      	str	r2, [r3, #20]
 80033a8:	e793      	b.n	80032d2 <trigger_tooth_handle+0xa>
    trigger->_shorter_tooth_gap = trigger->_current_tooth_gap_us;
 80033aa:	621a      	str	r2, [r3, #32]
 80033ac:	e7a7      	b.n	80032fe <trigger_tooth_handle+0x36>
    trigger->_target_tooth_gap_us = (3 * trigger->_shorter_tooth_gap) >> 1; 
 80033ae:	6a18      	ldr	r0, [r3, #32]
 80033b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80033b4:	0840      	lsrs	r0, r0, #1
 80033b6:	6258      	str	r0, [r3, #36]	@ 0x24
 80033b8:	e7a8      	b.n	800330c <trigger_tooth_handle+0x44>
      trigger->sync_status = TS_FULLY_SYNCED;
 80033ba:	2201      	movs	r2, #1
 80033bc:	705a      	strb	r2, [r3, #1]
      engine.total_revolutions++;
 80033be:	4a15      	ldr	r2, [pc, #84]	@ (8003414 <trigger_tooth_handle+0x14c>)
 80033c0:	6813      	ldr	r3, [r2, #0]
 80033c2:	3301      	adds	r3, #1
 80033c4:	6013      	str	r3, [r2, #0]
      trigger->_counted_tooth = 0;
 80033c6:	4b12      	ldr	r3, [pc, #72]	@ (8003410 <trigger_tooth_handle+0x148>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2200      	movs	r2, #0
 80033cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80033ce:	e7b5      	b.n	800333c <trigger_tooth_handle+0x74>
  bool is_missing_teeth = false;
 80033d0:	2500      	movs	r5, #0
 80033d2:	e7b3      	b.n	800333c <trigger_tooth_handle+0x74>
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= trigger->cranking_rpm_threshold)
 80033d4:	ed90 7a02 	vldr	s14, [r0, #8]
 80033d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e0:	dbd1      	blt.n	8003386 <trigger_tooth_handle+0xbe>
    engine.spinning_state = SS_RUNNING;
 80033e2:	4613      	mov	r3, r2
 80033e4:	2203      	movs	r2, #3
 80033e6:	745a      	strb	r2, [r3, #17]
 80033e8:	e7cd      	b.n	8003386 <trigger_tooth_handle+0xbe>
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < trigger->cranking_rpm_threshold)
 80033ea:	ed90 7a02 	vldr	s14, [r0, #8]
 80033ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f6:	d5c9      	bpl.n	800338c <trigger_tooth_handle+0xc4>
    engine.spinning_state = SS_CRANKING;
 80033f8:	4b06      	ldr	r3, [pc, #24]	@ (8003414 <trigger_tooth_handle+0x14c>)
 80033fa:	2202      	movs	r2, #2
 80033fc:	745a      	strb	r2, [r3, #17]
 80033fe:	e7c5      	b.n	800338c <trigger_tooth_handle+0xc4>
    engine.spinning_state = SS_STOPPED;
 8003400:	4b04      	ldr	r3, [pc, #16]	@ (8003414 <trigger_tooth_handle+0x14c>)
 8003402:	2200      	movs	r2, #0
 8003404:	745a      	strb	r2, [r3, #17]
 8003406:	e7c7      	b.n	8003398 <trigger_tooth_handle+0xd0>
    set_filtering(trigger); 
 8003408:	f7ff ff44 	bl	8003294 <set_filtering>
 800340c:	e7c6      	b.n	800339c <trigger_tooth_handle+0xd4>
 800340e:	bf00      	nop
 8003410:	200002d4 	.word	0x200002d4
 8003414:	20000168 	.word	0x20000168
 8003418:	43b40000 	.word	0x43b40000
 800341c:	03938700 	.word	0x03938700

08003420 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003420:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003422:	2200      	movs	r2, #0
 8003424:	490f      	ldr	r1, [pc, #60]	@ (8003464 <MX_USB_DEVICE_Init+0x44>)
 8003426:	4810      	ldr	r0, [pc, #64]	@ (8003468 <MX_USB_DEVICE_Init+0x48>)
 8003428:	f000 fc32 	bl	8003c90 <USBD_Init>
 800342c:	b970      	cbnz	r0, 800344c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800342e:	490f      	ldr	r1, [pc, #60]	@ (800346c <MX_USB_DEVICE_Init+0x4c>)
 8003430:	480d      	ldr	r0, [pc, #52]	@ (8003468 <MX_USB_DEVICE_Init+0x48>)
 8003432:	f000 fc44 	bl	8003cbe <USBD_RegisterClass>
 8003436:	b960      	cbnz	r0, 8003452 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003438:	490d      	ldr	r1, [pc, #52]	@ (8003470 <MX_USB_DEVICE_Init+0x50>)
 800343a:	480b      	ldr	r0, [pc, #44]	@ (8003468 <MX_USB_DEVICE_Init+0x48>)
 800343c:	f000 fa39 	bl	80038b2 <USBD_CDC_RegisterInterface>
 8003440:	b950      	cbnz	r0, 8003458 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003442:	4809      	ldr	r0, [pc, #36]	@ (8003468 <MX_USB_DEVICE_Init+0x48>)
 8003444:	f000 fc5b 	bl	8003cfe <USBD_Start>
 8003448:	b948      	cbnz	r0, 800345e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800344a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800344c:	f7fc ffe8 	bl	8000420 <Error_Handler>
 8003450:	e7ed      	b.n	800342e <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8003452:	f7fc ffe5 	bl	8000420 <Error_Handler>
 8003456:	e7ef      	b.n	8003438 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8003458:	f7fc ffe2 	bl	8000420 <Error_Handler>
 800345c:	e7f1      	b.n	8003442 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800345e:	f7fc ffdf 	bl	8000420 <Error_Handler>
}
 8003462:	e7f2      	b.n	800344a <MX_USB_DEVICE_Init+0x2a>
 8003464:	200000dc 	.word	0x200000dc
 8003468:	200002d8 	.word	0x200002d8
 800346c:	20000050 	.word	0x20000050
 8003470:	20000094 	.word	0x20000094

08003474 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003474:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003476:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800347a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800347e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 8003482:	b18c      	cbz	r4, 80034a8 <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003484:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003488:	6843      	ldr	r3, [r0, #4]
 800348a:	b17b      	cbz	r3, 80034ac <USBD_CDC_EP0_RxReady+0x38>
 800348c:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8003490:	28ff      	cmp	r0, #255	@ 0xff
 8003492:	d00d      	beq.n	80034b0 <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800349a:	4621      	mov	r1, r4
 800349c:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800349e:	23ff      	movs	r3, #255	@ 0xff
 80034a0:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80034a4:	2000      	movs	r0, #0
}
 80034a6:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80034a8:	2003      	movs	r0, #3
 80034aa:	e7fc      	b.n	80034a6 <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 80034ac:	2000      	movs	r0, #0
 80034ae:	e7fa      	b.n	80034a6 <USBD_CDC_EP0_RxReady+0x32>
 80034b0:	2000      	movs	r0, #0
 80034b2:	e7f8      	b.n	80034a6 <USBD_CDC_EP0_RxReady+0x32>

080034b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80034b4:	230a      	movs	r3, #10
 80034b6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80034b8:	4800      	ldr	r0, [pc, #0]	@ (80034bc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80034ba:	4770      	bx	lr
 80034bc:	20000088 	.word	0x20000088

080034c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80034c4:	4f0f      	ldr	r7, [pc, #60]	@ (8003504 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80034c6:	2182      	movs	r1, #130	@ 0x82
 80034c8:	4638      	mov	r0, r7
 80034ca:	f000 fdcb 	bl	8004064 <USBD_GetEpDesc>
 80034ce:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80034d0:	2101      	movs	r1, #1
 80034d2:	4638      	mov	r0, r7
 80034d4:	f000 fdc6 	bl	8004064 <USBD_GetEpDesc>
 80034d8:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80034da:	2181      	movs	r1, #129	@ 0x81
 80034dc:	4638      	mov	r0, r7
 80034de:	f000 fdc1 	bl	8004064 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80034e2:	b10d      	cbz	r5, 80034e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80034e4:	2210      	movs	r2, #16
 80034e6:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80034e8:	b11c      	cbz	r4, 80034f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80034ea:	2240      	movs	r2, #64	@ 0x40
 80034ec:	7122      	strb	r2, [r4, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80034f2:	b118      	cbz	r0, 80034fc <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80034f4:	2240      	movs	r2, #64	@ 0x40
 80034f6:	7102      	strb	r2, [r0, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80034fc:	2343      	movs	r3, #67	@ 0x43
 80034fe:	8033      	strh	r3, [r6, #0]
}
 8003500:	4800      	ldr	r0, [pc, #0]	@ (8003504 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8003502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003504:	2000000c 	.word	0x2000000c

08003508 <USBD_CDC_GetFSCfgDesc>:
{
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800350c:	4f0f      	ldr	r7, [pc, #60]	@ (800354c <USBD_CDC_GetFSCfgDesc+0x44>)
 800350e:	2182      	movs	r1, #130	@ 0x82
 8003510:	4638      	mov	r0, r7
 8003512:	f000 fda7 	bl	8004064 <USBD_GetEpDesc>
 8003516:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8003518:	2101      	movs	r1, #1
 800351a:	4638      	mov	r0, r7
 800351c:	f000 fda2 	bl	8004064 <USBD_GetEpDesc>
 8003520:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8003522:	2181      	movs	r1, #129	@ 0x81
 8003524:	4638      	mov	r0, r7
 8003526:	f000 fd9d 	bl	8004064 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800352a:	b10d      	cbz	r5, 8003530 <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800352c:	2210      	movs	r2, #16
 800352e:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8003530:	b11c      	cbz	r4, 800353a <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8003532:	2240      	movs	r2, #64	@ 0x40
 8003534:	7122      	strb	r2, [r4, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800353a:	b118      	cbz	r0, 8003544 <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800353c:	2240      	movs	r2, #64	@ 0x40
 800353e:	7102      	strb	r2, [r0, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8003544:	2343      	movs	r3, #67	@ 0x43
 8003546:	8033      	strh	r3, [r6, #0]
}
 8003548:	4800      	ldr	r0, [pc, #0]	@ (800354c <USBD_CDC_GetFSCfgDesc+0x44>)
 800354a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800354c:	2000000c 	.word	0x2000000c

08003550 <USBD_CDC_GetHSCfgDesc>:
{
 8003550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003552:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8003554:	4f0f      	ldr	r7, [pc, #60]	@ (8003594 <USBD_CDC_GetHSCfgDesc+0x44>)
 8003556:	2182      	movs	r1, #130	@ 0x82
 8003558:	4638      	mov	r0, r7
 800355a:	f000 fd83 	bl	8004064 <USBD_GetEpDesc>
 800355e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8003560:	2101      	movs	r1, #1
 8003562:	4638      	mov	r0, r7
 8003564:	f000 fd7e 	bl	8004064 <USBD_GetEpDesc>
 8003568:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800356a:	2181      	movs	r1, #129	@ 0x81
 800356c:	4638      	mov	r0, r7
 800356e:	f000 fd79 	bl	8004064 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8003572:	b10d      	cbz	r5, 8003578 <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8003574:	2210      	movs	r2, #16
 8003576:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8003578:	b11c      	cbz	r4, 8003582 <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800357a:	2200      	movs	r2, #0
 800357c:	7122      	strb	r2, [r4, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8003582:	b118      	cbz	r0, 800358c <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8003584:	2200      	movs	r2, #0
 8003586:	7102      	strb	r2, [r0, #4]
 8003588:	2202      	movs	r2, #2
 800358a:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800358c:	2343      	movs	r3, #67	@ 0x43
 800358e:	8033      	strh	r3, [r6, #0]
}
 8003590:	4800      	ldr	r0, [pc, #0]	@ (8003594 <USBD_CDC_GetHSCfgDesc+0x44>)
 8003592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003594:	2000000c 	.word	0x2000000c

08003598 <USBD_CDC_DataOut>:
{
 8003598:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800359a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800359e:	33b0      	adds	r3, #176	@ 0xb0
 80035a0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80035a4:	b195      	cbz	r5, 80035cc <USBD_CDC_DataOut+0x34>
 80035a6:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80035a8:	f000 fb1a 	bl	8003be0 <USBD_LL_GetRxDataSize>
 80035ac:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80035b0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80035b4:	33b0      	adds	r3, #176	@ 0xb0
 80035b6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80035ba:	6863      	ldr	r3, [r4, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 80035c2:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 80035c6:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80035c8:	2000      	movs	r0, #0
}
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80035cc:	2003      	movs	r0, #3
 80035ce:	e7fc      	b.n	80035ca <USBD_CDC_DataOut+0x32>

080035d0 <USBD_CDC_DataIn>:
{
 80035d0:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80035d2:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80035d6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80035da:	33b0      	adds	r3, #176	@ 0xb0
 80035dc:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80035e0:	b384      	cbz	r4, 8003644 <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80035e2:	f001 030f 	and.w	r3, r1, #15
 80035e6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80035ea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80035ee:	6992      	ldr	r2, [r2, #24]
 80035f0:	b14a      	cbz	r2, 8003606 <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80035f2:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 80035f6:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 80035fa:	69ed      	ldr	r5, [r5, #28]
 80035fc:	fbb2 fcf5 	udiv	ip, r2, r5
 8003600:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8003604:	b192      	cbz	r2, 800362c <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800360c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003610:	33b0      	adds	r3, #176	@ 0xb0
 8003612:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003616:	6843      	ldr	r3, [r0, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	b1ab      	cbz	r3, 8003648 <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800361c:	460a      	mov	r2, r1
 800361e:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 8003622:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 8003626:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8003628:	2000      	movs	r0, #0
}
 800362a:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800362c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003630:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003634:	2400      	movs	r4, #0
 8003636:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003638:	4623      	mov	r3, r4
 800363a:	4622      	mov	r2, r4
 800363c:	f000 fb18 	bl	8003c70 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8003640:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003642:	e7f2      	b.n	800362a <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 8003644:	2003      	movs	r0, #3
 8003646:	e7f0      	b.n	800362a <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 8003648:	2000      	movs	r0, #0
 800364a:	e7ee      	b.n	800362a <USBD_CDC_DataIn+0x5a>

0800364c <USBD_CDC_Setup>:
{
 800364c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364e:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003650:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003654:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003658:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 800365c:	2200      	movs	r2, #0
 800365e:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 8003662:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 8003666:	2f00      	cmp	r7, #0
 8003668:	d078      	beq.n	800375c <USBD_CDC_Setup+0x110>
 800366a:	4604      	mov	r4, r0
 800366c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800366e:	7809      	ldrb	r1, [r1, #0]
 8003670:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 8003674:	d034      	beq.n	80036e0 <USBD_CDC_Setup+0x94>
 8003676:	2e20      	cmp	r6, #32
 8003678:	d169      	bne.n	800374e <USBD_CDC_Setup+0x102>
      if (req->wLength != 0U)
 800367a:	88ea      	ldrh	r2, [r5, #6]
 800367c:	b32a      	cbz	r2, 80036ca <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 800367e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003682:	d10e      	bne.n	80036a2 <USBD_CDC_Setup+0x56>
          hcdc->CmdOpCode = req->bRequest;
 8003684:	786b      	ldrb	r3, [r5, #1]
 8003686:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800368a:	88ea      	ldrh	r2, [r5, #6]
 800368c:	2a3f      	cmp	r2, #63	@ 0x3f
 800368e:	d81a      	bhi.n	80036c6 <USBD_CDC_Setup+0x7a>
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8003696:	4639      	mov	r1, r7
 8003698:	4620      	mov	r0, r4
 800369a:	f001 f94c 	bl	8004936 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800369e:	2600      	movs	r6, #0
 80036a0:	e059      	b.n	8003756 <USBD_CDC_Setup+0x10a>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80036a2:	33b0      	adds	r3, #176	@ 0xb0
 80036a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4639      	mov	r1, r7
 80036ae:	7868      	ldrb	r0, [r5, #1]
 80036b0:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80036b2:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80036b4:	2a07      	cmp	r2, #7
 80036b6:	bf28      	it	cs
 80036b8:	2207      	movcs	r2, #7
 80036ba:	4639      	mov	r1, r7
 80036bc:	4620      	mov	r0, r4
 80036be:	f001 f925 	bl	800490c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80036c2:	2600      	movs	r6, #0
 80036c4:	e047      	b.n	8003756 <USBD_CDC_Setup+0x10a>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80036c6:	2240      	movs	r2, #64	@ 0x40
 80036c8:	e7e3      	b.n	8003692 <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80036ca:	33b0      	adds	r3, #176	@ 0xb0
 80036cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2200      	movs	r2, #0
 80036d6:	4629      	mov	r1, r5
 80036d8:	7868      	ldrb	r0, [r5, #1]
 80036da:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 80036dc:	2600      	movs	r6, #0
 80036de:	e03a      	b.n	8003756 <USBD_CDC_Setup+0x10a>
      switch (req->bRequest)
 80036e0:	786f      	ldrb	r7, [r5, #1]
 80036e2:	2f0b      	cmp	r7, #11
 80036e4:	d82e      	bhi.n	8003744 <USBD_CDC_Setup+0xf8>
 80036e6:	e8df f007 	tbb	[pc, r7]
 80036ea:	3606      	.short	0x3606
 80036ec:	2d2d2d2d 	.word	0x2d2d2d2d
 80036f0:	2d2d2d2d 	.word	0x2d2d2d2d
 80036f4:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80036f6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d004      	beq.n	8003708 <USBD_CDC_Setup+0xbc>
            USBD_CtlError(pdev, req);
 80036fe:	4629      	mov	r1, r5
 8003700:	f000 fced 	bl	80040de <USBD_CtlError>
            ret = USBD_FAIL;
 8003704:	2603      	movs	r6, #3
 8003706:	e026      	b.n	8003756 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8003708:	2202      	movs	r2, #2
 800370a:	a901      	add	r1, sp, #4
 800370c:	f001 f8fe 	bl	800490c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003710:	463e      	mov	r6, r7
 8003712:	e020      	b.n	8003756 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003714:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003718:	2b03      	cmp	r3, #3
 800371a:	d004      	beq.n	8003726 <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 800371c:	4629      	mov	r1, r5
 800371e:	f000 fcde 	bl	80040de <USBD_CtlError>
            ret = USBD_FAIL;
 8003722:	2603      	movs	r6, #3
 8003724:	e017      	b.n	8003756 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8003726:	2201      	movs	r2, #1
 8003728:	f10d 0107 	add.w	r1, sp, #7
 800372c:	f001 f8ee 	bl	800490c <USBD_CtlSendData>
 8003730:	e011      	b.n	8003756 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003732:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003736:	2b03      	cmp	r3, #3
 8003738:	d00d      	beq.n	8003756 <USBD_CDC_Setup+0x10a>
            USBD_CtlError(pdev, req);
 800373a:	4629      	mov	r1, r5
 800373c:	f000 fccf 	bl	80040de <USBD_CtlError>
            ret = USBD_FAIL;
 8003740:	2603      	movs	r6, #3
 8003742:	e008      	b.n	8003756 <USBD_CDC_Setup+0x10a>
          USBD_CtlError(pdev, req);
 8003744:	4629      	mov	r1, r5
 8003746:	f000 fcca 	bl	80040de <USBD_CtlError>
          ret = USBD_FAIL;
 800374a:	2603      	movs	r6, #3
          break;
 800374c:	e003      	b.n	8003756 <USBD_CDC_Setup+0x10a>
      USBD_CtlError(pdev, req);
 800374e:	4629      	mov	r1, r5
 8003750:	f000 fcc5 	bl	80040de <USBD_CtlError>
      ret = USBD_FAIL;
 8003754:	2603      	movs	r6, #3
}
 8003756:	4630      	mov	r0, r6
 8003758:	b003      	add	sp, #12
 800375a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800375c:	2603      	movs	r6, #3
 800375e:	e7fa      	b.n	8003756 <USBD_CDC_Setup+0x10a>

08003760 <USBD_CDC_DeInit>:
{
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8003764:	2181      	movs	r1, #129	@ 0x81
 8003766:	f000 fa63 	bl	8003c30 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800376a:	2500      	movs	r5, #0
 800376c:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800376e:	2101      	movs	r1, #1
 8003770:	4620      	mov	r0, r4
 8003772:	f000 fa5d 	bl	8003c30 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8003776:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800377a:	2182      	movs	r1, #130	@ 0x82
 800377c:	4620      	mov	r0, r4
 800377e:	f000 fa57 	bl	8003c30 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8003782:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8003786:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800378a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800378e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003796:	b19a      	cbz	r2, 80037c0 <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8003798:	33b0      	adds	r3, #176	@ 0xb0
 800379a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80037a4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80037a8:	33b0      	adds	r3, #176	@ 0xb0
 80037aa:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80037ae:	f000 fa21 	bl	8003bf4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80037b2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80037b6:	33b0      	adds	r3, #176	@ 0xb0
 80037b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 80037bc:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 80037c0:	2000      	movs	r0, #0
 80037c2:	bd38      	pop	{r3, r4, r5, pc}

080037c4 <USBD_CDC_Init>:
{
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80037c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80037cc:	f000 fa0e 	bl	8003bec <USBD_static_malloc>
  if (hcdc == NULL)
 80037d0:	2800      	cmp	r0, #0
 80037d2:	d049      	beq.n	8003868 <USBD_CDC_Init+0xa4>
 80037d4:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80037d6:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80037da:	2100      	movs	r1, #0
 80037dc:	f001 f938 	bl	8004a50 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80037e0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80037e4:	33b0      	adds	r3, #176	@ 0xb0
 80037e6:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80037ea:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80037ee:	7c23      	ldrb	r3, [r4, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d141      	bne.n	8003878 <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80037f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037f8:	2202      	movs	r2, #2
 80037fa:	2181      	movs	r1, #129	@ 0x81
 80037fc:	4620      	mov	r0, r4
 80037fe:	f000 fa0c 	bl	8003c1a <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003802:	2601      	movs	r6, #1
 8003804:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8003806:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800380a:	2202      	movs	r2, #2
 800380c:	4631      	mov	r1, r6
 800380e:	4620      	mov	r0, r4
 8003810:	f000 fa03 	bl	8003c1a <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003814:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8003818:	2310      	movs	r3, #16
 800381a:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800381e:	2308      	movs	r3, #8
 8003820:	2203      	movs	r2, #3
 8003822:	2182      	movs	r1, #130	@ 0x82
 8003824:	4620      	mov	r0, r4
 8003826:	f000 f9f8 	bl	8003c1a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800382a:	2301      	movs	r3, #1
 800382c:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
  hcdc->RxBuffer = NULL;
 8003830:	2600      	movs	r6, #0
 8003832:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8003836:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800383a:	33b0      	adds	r3, #176	@ 0xb0
 800383c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4798      	blx	r3
  hcdc->TxState = 0U;
 8003846:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 800384a:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 800384e:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8003852:	b362      	cbz	r2, 80038ae <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003854:	7c25      	ldrb	r5, [r4, #16]
 8003856:	bb1d      	cbnz	r5, 80038a0 <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003858:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800385c:	2101      	movs	r1, #1
 800385e:	4620      	mov	r0, r4
 8003860:	f000 fa0e 	bl	8003c80 <USBD_LL_PrepareReceive>
}
 8003864:	4628      	mov	r0, r5
 8003866:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003868:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800386c:	33b0      	adds	r3, #176	@ 0xb0
 800386e:	2200      	movs	r2, #0
 8003870:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8003874:	2502      	movs	r5, #2
 8003876:	e7f5      	b.n	8003864 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003878:	2340      	movs	r3, #64	@ 0x40
 800387a:	2202      	movs	r2, #2
 800387c:	2181      	movs	r1, #129	@ 0x81
 800387e:	4620      	mov	r0, r4
 8003880:	f000 f9cb 	bl	8003c1a <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003884:	2601      	movs	r6, #1
 8003886:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8003888:	2340      	movs	r3, #64	@ 0x40
 800388a:	2202      	movs	r2, #2
 800388c:	4631      	mov	r1, r6
 800388e:	4620      	mov	r0, r4
 8003890:	f000 f9c3 	bl	8003c1a <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003894:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8003898:	2310      	movs	r3, #16
 800389a:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 800389e:	e7be      	b.n	800381e <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80038a0:	2340      	movs	r3, #64	@ 0x40
 80038a2:	2101      	movs	r1, #1
 80038a4:	4620      	mov	r0, r4
 80038a6:	f000 f9eb 	bl	8003c80 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80038aa:	2500      	movs	r5, #0
 80038ac:	e7da      	b.n	8003864 <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 80038ae:	2502      	movs	r5, #2
 80038b0:	e7d8      	b.n	8003864 <USBD_CDC_Init+0xa0>

080038b2 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 80038b2:	b139      	cbz	r1, 80038c4 <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 80038b4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80038b8:	33b0      	adds	r3, #176	@ 0xb0
 80038ba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80038be:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 80038c0:	2000      	movs	r0, #0
 80038c2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80038c4:	2003      	movs	r0, #3
}
 80038c6:	4770      	bx	lr

080038c8 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80038c8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80038cc:	33b0      	adds	r3, #176	@ 0xb0
 80038ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80038d2:	b12b      	cbz	r3, 80038e0 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 80038d4:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80038d8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80038dc:	2000      	movs	r0, #0
 80038de:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80038e0:	2003      	movs	r0, #3
}
 80038e2:	4770      	bx	lr

080038e4 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80038e4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80038e8:	33b0      	adds	r3, #176	@ 0xb0
 80038ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 80038ee:	b11b      	cbz	r3, 80038f8 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 80038f0:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80038f4:	2000      	movs	r0, #0
 80038f6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80038f8:	2003      	movs	r0, #3
}
 80038fa:	4770      	bx	lr

080038fc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80038fc:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80038fe:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003902:	33b0      	adds	r3, #176	@ 0xb0
 8003904:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8003908:	b18a      	cbz	r2, 800392e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800390a:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 800390e:	b10b      	cbz	r3, 8003914 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8003910:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8003912:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8003914:	2301      	movs	r3, #1
 8003916:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800391a:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 800391e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8003920:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8003924:	2181      	movs	r1, #129	@ 0x81
 8003926:	f000 f9a3 	bl	8003c70 <USBD_LL_Transmit>
    ret = USBD_OK;
 800392a:	2000      	movs	r0, #0
 800392c:	e7f1      	b.n	8003912 <USBD_CDC_TransmitPacket+0x16>
    return (uint8_t)USBD_FAIL;
 800392e:	2003      	movs	r0, #3
 8003930:	e7ef      	b.n	8003912 <USBD_CDC_TransmitPacket+0x16>

08003932 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8003932:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003934:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003938:	33b0      	adds	r3, #176	@ 0xb0
 800393a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800393e:	b192      	cbz	r2, 8003966 <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003940:	7c04      	ldrb	r4, [r0, #16]
 8003942:	b944      	cbnz	r4, 8003956 <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003944:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003948:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 800394c:	2101      	movs	r1, #1
 800394e:	f000 f997 	bl	8003c80 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8003952:	4620      	mov	r0, r4
 8003954:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003956:	2340      	movs	r3, #64	@ 0x40
 8003958:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 800395c:	2101      	movs	r1, #1
 800395e:	f000 f98f 	bl	8003c80 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8003962:	2400      	movs	r4, #0
 8003964:	e7f5      	b.n	8003952 <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 8003966:	2403      	movs	r4, #3
 8003968:	e7f3      	b.n	8003952 <USBD_CDC_ReceivePacket+0x20>

0800396a <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800396a:	2000      	movs	r0, #0
 800396c:	4770      	bx	lr

0800396e <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800396e:	2000      	movs	r0, #0
 8003970:	4770      	bx	lr

08003972 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8003972:	2000      	movs	r0, #0
 8003974:	4770      	bx	lr
	...

08003978 <CDC_Receive_FS>:
{
 8003978:	b510      	push	{r4, lr}
 800397a:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800397c:	4c04      	ldr	r4, [pc, #16]	@ (8003990 <CDC_Receive_FS+0x18>)
 800397e:	4620      	mov	r0, r4
 8003980:	f7ff ffb0 	bl	80038e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003984:	4620      	mov	r0, r4
 8003986:	f7ff ffd4 	bl	8003932 <USBD_CDC_ReceivePacket>
}
 800398a:	2000      	movs	r0, #0
 800398c:	bd10      	pop	{r4, pc}
 800398e:	bf00      	nop
 8003990:	200002d8 	.word	0x200002d8

08003994 <CDC_Init_FS>:
{
 8003994:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003996:	4c06      	ldr	r4, [pc, #24]	@ (80039b0 <CDC_Init_FS+0x1c>)
 8003998:	2200      	movs	r2, #0
 800399a:	4906      	ldr	r1, [pc, #24]	@ (80039b4 <CDC_Init_FS+0x20>)
 800399c:	4620      	mov	r0, r4
 800399e:	f7ff ff93 	bl	80038c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80039a2:	4905      	ldr	r1, [pc, #20]	@ (80039b8 <CDC_Init_FS+0x24>)
 80039a4:	4620      	mov	r0, r4
 80039a6:	f7ff ff9d 	bl	80038e4 <USBD_CDC_SetRxBuffer>
}
 80039aa:	2000      	movs	r0, #0
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	bf00      	nop
 80039b0:	200002d8 	.word	0x200002d8
 80039b4:	200005b4 	.word	0x200005b4
 80039b8:	200009b4 	.word	0x200009b4

080039bc <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80039bc:	4b09      	ldr	r3, [pc, #36]	@ (80039e4 <CDC_Transmit_FS+0x28>)
 80039be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 80039c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80039c6:	b10b      	cbz	r3, 80039cc <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 80039c8:	2001      	movs	r0, #1
}
 80039ca:	4770      	bx	lr
{
 80039cc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80039ce:	4c05      	ldr	r4, [pc, #20]	@ (80039e4 <CDC_Transmit_FS+0x28>)
 80039d0:	460a      	mov	r2, r1
 80039d2:	4601      	mov	r1, r0
 80039d4:	4620      	mov	r0, r4
 80039d6:	f7ff ff77 	bl	80038c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80039da:	4620      	mov	r0, r4
 80039dc:	f7ff ff8e 	bl	80038fc <USBD_CDC_TransmitPacket>
}
 80039e0:	bd10      	pop	{r4, pc}
 80039e2:	bf00      	nop
 80039e4:	200002d8 	.word	0x200002d8

080039e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80039e8:	b530      	push	{r4, r5, lr}
 80039ea:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ec:	2300      	movs	r3, #0
 80039ee:	9303      	str	r3, [sp, #12]
 80039f0:	9304      	str	r3, [sp, #16]
 80039f2:	9305      	str	r3, [sp, #20]
 80039f4:	9306      	str	r3, [sp, #24]
 80039f6:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 80039f8:	6803      	ldr	r3, [r0, #0]
 80039fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039fe:	d001      	beq.n	8003a04 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003a00:	b009      	add	sp, #36	@ 0x24
 8003a02:	bd30      	pop	{r4, r5, pc}
 8003a04:	aa03      	add	r2, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a06:	2500      	movs	r5, #0
 8003a08:	9501      	str	r5, [sp, #4]
 8003a0a:	4c17      	ldr	r4, [pc, #92]	@ (8003a68 <HAL_PCD_MspInit+0x80>)
 8003a0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6323      	str	r3, [r4, #48]	@ 0x30
 8003a14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a1e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003a22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a24:	2302      	movs	r3, #2
 8003a26:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003a2c:	230a      	movs	r3, #10
 8003a2e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a30:	4611      	mov	r1, r2
 8003a32:	480e      	ldr	r0, [pc, #56]	@ (8003a6c <HAL_PCD_MspInit+0x84>)
 8003a34:	f7fc fe18 	bl	8000668 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003a38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a40:	9502      	str	r5, [sp, #8]
 8003a42:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003a44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a48:	6463      	str	r3, [r4, #68]	@ 0x44
 8003a4a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003a4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a50:	9302      	str	r3, [sp, #8]
 8003a52:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003a54:	462a      	mov	r2, r5
 8003a56:	4629      	mov	r1, r5
 8003a58:	2043      	movs	r0, #67	@ 0x43
 8003a5a:	f7fc fdf1 	bl	8000640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003a5e:	2043      	movs	r0, #67	@ 0x43
 8003a60:	f7fc fdfe 	bl	8000660 <HAL_NVIC_EnableIRQ>
}
 8003a64:	e7cc      	b.n	8003a00 <HAL_PCD_MspInit+0x18>
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40020000 	.word	0x40020000

08003a70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003a70:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003a72:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8003a76:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003a7a:	f000 f956 	bl	8003d2a <USBD_LL_SetupStage>
}
 8003a7e:	bd08      	pop	{r3, pc}

08003a80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003a80:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003a82:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8003a86:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003a8a:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8003a8e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003a92:	f000 fa17 	bl	8003ec4 <USBD_LL_DataOutStage>
}
 8003a96:	bd08      	pop	{r3, pc}

08003a98 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003a98:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003a9a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8003a9e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003aa2:	6a1a      	ldr	r2, [r3, #32]
 8003aa4:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003aa8:	f000 fa6c 	bl	8003f84 <USBD_LL_DataInStage>
}
 8003aac:	bd08      	pop	{r3, pc}

08003aae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003aae:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003ab0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003ab4:	f000 f9b4 	bl	8003e20 <USBD_LL_SOF>
}
 8003ab8:	bd08      	pop	{r3, pc}

08003aba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003aba:	b510      	push	{r4, lr}
 8003abc:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003abe:	79c3      	ldrb	r3, [r0, #7]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d109      	bne.n	8003ad8 <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8003aca:	f000 f98c 	bl	8003de6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003ace:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8003ad2:	f000 f956 	bl	8003d82 <USBD_LL_Reset>
}
 8003ad6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003ad8:	f7fc fca2 	bl	8000420 <Error_Handler>
 8003adc:	e7f2      	b.n	8003ac4 <HAL_PCD_ResetCallback+0xa>
	...

08003ae0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003ae0:	b510      	push	{r4, lr}
 8003ae2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003ae4:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003ae8:	f000 f980 	bl	8003dec <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003aec:	6822      	ldr	r2, [r4, #0]
 8003aee:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003afa:	7ae3      	ldrb	r3, [r4, #11]
 8003afc:	b123      	cbz	r3, 8003b08 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003afe:	4a03      	ldr	r2, [pc, #12]	@ (8003b0c <HAL_PCD_SuspendCallback+0x2c>)
 8003b00:	6913      	ldr	r3, [r2, #16]
 8003b02:	f043 0306 	orr.w	r3, r3, #6
 8003b06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8003b08:	bd10      	pop	{r4, pc}
 8003b0a:	bf00      	nop
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003b10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003b12:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b16:	f000 f977 	bl	8003e08 <USBD_LL_Resume>
}
 8003b1a:	bd08      	pop	{r3, pc}

08003b1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003b1c:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003b1e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b22:	f000 f9a3 	bl	8003e6c <USBD_LL_IsoOUTIncomplete>
}
 8003b26:	bd08      	pop	{r3, pc}

08003b28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003b28:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003b2a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b2e:	f000 f987 	bl	8003e40 <USBD_LL_IsoINIncomplete>
}
 8003b32:	bd08      	pop	{r3, pc}

08003b34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003b34:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003b36:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b3a:	f000 f9ad 	bl	8003e98 <USBD_LL_DevConnected>
}
 8003b3e:	bd08      	pop	{r3, pc}

08003b40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003b40:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8003b42:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b46:	f000 f9a9 	bl	8003e9c <USBD_LL_DevDisconnected>
}
 8003b4a:	bd08      	pop	{r3, pc}

08003b4c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8003b4c:	7802      	ldrb	r2, [r0, #0]
 8003b4e:	b10a      	cbz	r2, 8003b54 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8003b50:	2000      	movs	r0, #0
 8003b52:	4770      	bx	lr
{
 8003b54:	b510      	push	{r4, lr}
 8003b56:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8003b58:	4815      	ldr	r0, [pc, #84]	@ (8003bb0 <USBD_LL_Init+0x64>)
 8003b5a:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8003b5e:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003b62:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b66:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003b68:	2304      	movs	r3, #4
 8003b6a:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003b70:	2300      	movs	r3, #0
 8003b72:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003b74:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003b76:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003b78:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003b7a:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003b7c:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003b7e:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003b80:	f7fc fee8 	bl	8000954 <HAL_PCD_Init>
 8003b84:	b980      	cbnz	r0, 8003ba8 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8003b86:	4c0a      	ldr	r4, [pc, #40]	@ (8003bb0 <USBD_LL_Init+0x64>)
 8003b88:	2180      	movs	r1, #128	@ 0x80
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f7fd fcb1 	bl	80014f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003b90:	2240      	movs	r2, #64	@ 0x40
 8003b92:	2100      	movs	r1, #0
 8003b94:	4620      	mov	r0, r4
 8003b96:	f7fd fc86 	bl	80014a6 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8003b9a:	2280      	movs	r2, #128	@ 0x80
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f7fd fc81 	bl	80014a6 <HAL_PCDEx_SetTxFiFo>
}
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8003ba8:	f7fc fc3a 	bl	8000420 <Error_Handler>
 8003bac:	e7eb      	b.n	8003b86 <USBD_LL_Init+0x3a>
 8003bae:	bf00      	nop
 8003bb0:	20000fd4 	.word	0x20000fd4

08003bb4 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003bb4:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8003bb8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003bbc:	d108      	bne.n	8003bd0 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003bbe:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8003bc2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003bc6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003bca:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8003bce:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003bd0:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8003bd4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003bd8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003bdc:	7d98      	ldrb	r0, [r3, #22]
 8003bde:	4770      	bx	lr

08003be0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003be0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003be2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003be6:	f7fd f8b9 	bl	8000d5c <HAL_PCD_EP_GetRxCount>
}
 8003bea:	bd08      	pop	{r3, pc}

08003bec <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003bec:	4800      	ldr	r0, [pc, #0]	@ (8003bf0 <USBD_static_malloc+0x4>)
 8003bee:	4770      	bx	lr
 8003bf0:	20000db4 	.word	0x20000db4

08003bf4 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8003bf4:	4770      	bx	lr

08003bf6 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003bf6:	2803      	cmp	r0, #3
 8003bf8:	d805      	bhi.n	8003c06 <USBD_Get_USB_Status+0x10>
 8003bfa:	e8df f000 	tbb	[pc, r0]
 8003bfe:	0405      	.short	0x0405
 8003c00:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8003c02:	2001      	movs	r0, #1
    break;
 8003c04:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8003c06:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003c08:	4770      	bx	lr

08003c0a <USBD_LL_Start>:
{
 8003c0a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003c0c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c10:	f7fc ff21 	bl	8000a56 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c14:	f7ff ffef 	bl	8003bf6 <USBD_Get_USB_Status>
}
 8003c18:	bd08      	pop	{r3, pc}

08003c1a <USBD_LL_OpenEP>:
{
 8003c1a:	b508      	push	{r3, lr}
 8003c1c:	4694      	mov	ip, r2
 8003c1e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003c20:	4663      	mov	r3, ip
 8003c22:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c26:	f7fc fff6 	bl	8000c16 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c2a:	f7ff ffe4 	bl	8003bf6 <USBD_Get_USB_Status>
}
 8003c2e:	bd08      	pop	{r3, pc}

08003c30 <USBD_LL_CloseEP>:
{
 8003c30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003c32:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c36:	f7fd f834 	bl	8000ca2 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c3a:	f7ff ffdc 	bl	8003bf6 <USBD_Get_USB_Status>
}
 8003c3e:	bd08      	pop	{r3, pc}

08003c40 <USBD_LL_StallEP>:
{
 8003c40:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003c42:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c46:	f7fd f8b7 	bl	8000db8 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c4a:	f7ff ffd4 	bl	8003bf6 <USBD_Get_USB_Status>
}
 8003c4e:	bd08      	pop	{r3, pc}

08003c50 <USBD_LL_ClearStallEP>:
{
 8003c50:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003c52:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c56:	f7fd f8f2 	bl	8000e3e <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c5a:	f7ff ffcc 	bl	8003bf6 <USBD_Get_USB_Status>
}
 8003c5e:	bd08      	pop	{r3, pc}

08003c60 <USBD_LL_SetUSBAddress>:
{
 8003c60:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003c62:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c66:	f7fc ffc3 	bl	8000bf0 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c6a:	f7ff ffc4 	bl	8003bf6 <USBD_Get_USB_Status>
}
 8003c6e:	bd08      	pop	{r3, pc}

08003c70 <USBD_LL_Transmit>:
{
 8003c70:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003c72:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c76:	f7fd f87a 	bl	8000d6e <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c7a:	f7ff ffbc 	bl	8003bf6 <USBD_Get_USB_Status>
}
 8003c7e:	bd08      	pop	{r3, pc}

08003c80 <USBD_LL_PrepareReceive>:
{
 8003c80:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003c82:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c86:	f7fd f844 	bl	8000d12 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c8a:	f7ff ffb4 	bl	8003bf6 <USBD_Get_USB_Status>
}
 8003c8e:	bd08      	pop	{r3, pc}

08003c90 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003c90:	b198      	cbz	r0, 8003cba <USBD_Init+0x2a>
{
 8003c92:	b508      	push	{r3, lr}
 8003c94:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8003c96:	2000      	movs	r0, #0
 8003c98:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8003c9c:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8003ca0:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003ca4:	b109      	cbz	r1, 8003caa <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8003ca6:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003caa:	2101      	movs	r1, #1
 8003cac:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8003cb0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff ff4a 	bl	8003b4c <USBD_LL_Init>

  return ret;
}
 8003cb8:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003cba:	2003      	movs	r0, #3
}
 8003cbc:	4770      	bx	lr

08003cbe <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003cbe:	b510      	push	{r4, lr}
 8003cc0:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8003cc8:	b1b9      	cbz	r1, 8003cfa <USBD_RegisterClass+0x3c>
 8003cca:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8003ccc:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8003cd0:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8003cd4:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8003cd6:	b143      	cbz	r3, 8003cea <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8003cd8:	32ae      	adds	r2, #174	@ 0xae
 8003cda:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8003cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce0:	f10d 0006 	add.w	r0, sp, #6
 8003ce4:	4798      	blx	r3
 8003ce6:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8003cea:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8003cee:	3301      	adds	r3, #1
 8003cf0:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8003cf4:	2000      	movs	r0, #0
}
 8003cf6:	b002      	add	sp, #8
 8003cf8:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003cfa:	2003      	movs	r0, #3
 8003cfc:	e7fb      	b.n	8003cf6 <USBD_RegisterClass+0x38>

08003cfe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003cfe:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8003d00:	f7ff ff83 	bl	8003c0a <USBD_LL_Start>
}
 8003d04:	bd08      	pop	{r3, pc}

08003d06 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003d06:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8003d08:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003d0c:	b113      	cbz	r3, 8003d14 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8003d12:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8003d14:	2000      	movs	r0, #0
 8003d16:	e7fc      	b.n	8003d12 <USBD_SetClassConfig+0xc>

08003d18 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003d18:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8003d1a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4798      	blx	r3
 8003d22:	b900      	cbnz	r0, 8003d26 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8003d24:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 8003d26:	2003      	movs	r0, #3
 8003d28:	e7fc      	b.n	8003d24 <USBD_ClrClassConfig+0xc>

08003d2a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003d2a:	b538      	push	{r3, r4, r5, lr}
 8003d2c:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003d2e:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8003d32:	4628      	mov	r0, r5
 8003d34:	f000 f9bf 	bl	80040b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003d3e:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8003d42:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003d46:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8003d4a:	f001 031f 	and.w	r3, r1, #31
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d007      	beq.n	8003d62 <USBD_LL_SetupStage+0x38>
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d00a      	beq.n	8003d6c <USBD_LL_SetupStage+0x42>
 8003d56:	b973      	cbnz	r3, 8003d76 <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8003d58:	4629      	mov	r1, r5
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f000 fb80 	bl	8004460 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8003d60:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003d62:	4629      	mov	r1, r5
 8003d64:	4620      	mov	r0, r4
 8003d66:	f000 fbb6 	bl	80044d6 <USBD_StdItfReq>
      break;
 8003d6a:	e7f9      	b.n	8003d60 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	4620      	mov	r0, r4
 8003d70:	f000 fbf3 	bl	800455a <USBD_StdEPReq>
      break;
 8003d74:	e7f4      	b.n	8003d60 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003d76:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	f7ff ff60 	bl	8003c40 <USBD_LL_StallEP>
      break;
 8003d80:	e7ee      	b.n	8003d60 <USBD_LL_SetupStage+0x36>

08003d82 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d84:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8003d92:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8003d94:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8003d98:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8003d9c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003da0:	b1db      	cbz	r3, 8003dda <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	b1db      	cbz	r3, 8003dde <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8003da6:	2100      	movs	r1, #0
 8003da8:	4798      	blx	r3
 8003daa:	4607      	mov	r7, r0
 8003dac:	b9c8      	cbnz	r0, 8003de2 <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003dae:	2340      	movs	r3, #64	@ 0x40
 8003db0:	2200      	movs	r2, #0
 8003db2:	4611      	mov	r1, r2
 8003db4:	4620      	mov	r0, r4
 8003db6:	f7ff ff30 	bl	8003c1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003dba:	2601      	movs	r6, #1
 8003dbc:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003dc0:	2540      	movs	r5, #64	@ 0x40
 8003dc2:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003dc6:	462b      	mov	r3, r5
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2180      	movs	r1, #128	@ 0x80
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f7ff ff24 	bl	8003c1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003dd2:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003dd4:	6225      	str	r5, [r4, #32]

  return ret;
}
 8003dd6:	4638      	mov	r0, r7
 8003dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8003dda:	2700      	movs	r7, #0
 8003ddc:	e7e7      	b.n	8003dae <USBD_LL_Reset+0x2c>
 8003dde:	2700      	movs	r7, #0
 8003de0:	e7e5      	b.n	8003dae <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8003de2:	2703      	movs	r7, #3
 8003de4:	e7e3      	b.n	8003dae <USBD_LL_Reset+0x2c>

08003de6 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003de6:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003de8:	2000      	movs	r0, #0
 8003dea:	4770      	bx	lr

08003dec <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8003dec:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d004      	beq.n	8003dfe <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8003df4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8003dfe:	2304      	movs	r3, #4
 8003e00:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8003e04:	2000      	movs	r0, #0
 8003e06:	4770      	bx	lr

08003e08 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003e08:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d001      	beq.n	8003e14 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8003e10:	2000      	movs	r0, #0
 8003e12:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8003e14:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8003e1e:	e7f7      	b.n	8003e10 <USBD_LL_Resume+0x8>

08003e20 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003e20:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e22:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d001      	beq.n	8003e2e <USBD_LL_SOF+0xe>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 8003e2e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f9      	beq.n	8003e2a <USBD_LL_SOF+0xa>
      if (pdev->pClass[0]->SOF != NULL)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f6      	beq.n	8003e2a <USBD_LL_SOF+0xa>
        (void)pdev->pClass[0]->SOF(pdev);
 8003e3c:	4798      	blx	r3
 8003e3e:	e7f4      	b.n	8003e2a <USBD_LL_SOF+0xa>

08003e40 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8003e40:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8003e42:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003e46:	33ae      	adds	r3, #174	@ 0xae
 8003e48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e4c:	b153      	cbz	r3, 8003e64 <USBD_LL_IsoINIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e4e:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003e52:	2a03      	cmp	r2, #3
 8003e54:	d001      	beq.n	8003e5a <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8003e56:	2000      	movs	r0, #0
}
 8003e58:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	b123      	cbz	r3, 8003e68 <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8003e5e:	4798      	blx	r3
  return USBD_OK;
 8003e60:	2000      	movs	r0, #0
 8003e62:	e7f9      	b.n	8003e58 <USBD_LL_IsoINIncomplete+0x18>
    return USBD_FAIL;
 8003e64:	2003      	movs	r0, #3
 8003e66:	e7f7      	b.n	8003e58 <USBD_LL_IsoINIncomplete+0x18>
  return USBD_OK;
 8003e68:	2000      	movs	r0, #0
 8003e6a:	e7f5      	b.n	8003e58 <USBD_LL_IsoINIncomplete+0x18>

08003e6c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8003e6c:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8003e6e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003e72:	33ae      	adds	r3, #174	@ 0xae
 8003e74:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e78:	b153      	cbz	r3, 8003e90 <USBD_LL_IsoOUTIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e7a:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003e7e:	2a03      	cmp	r2, #3
 8003e80:	d001      	beq.n	8003e86 <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8003e82:	2000      	movs	r0, #0
}
 8003e84:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	b123      	cbz	r3, 8003e94 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8003e8a:	4798      	blx	r3
  return USBD_OK;
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	e7f9      	b.n	8003e84 <USBD_LL_IsoOUTIncomplete+0x18>
    return USBD_FAIL;
 8003e90:	2003      	movs	r0, #3
 8003e92:	e7f7      	b.n	8003e84 <USBD_LL_IsoOUTIncomplete+0x18>
  return USBD_OK;
 8003e94:	2000      	movs	r0, #0
 8003e96:	e7f5      	b.n	8003e84 <USBD_LL_IsoOUTIncomplete+0x18>

08003e98 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8003e98:	2000      	movs	r0, #0
 8003e9a:	4770      	bx	lr

08003e9c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8003e9c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8003ea4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003ea8:	b123      	cbz	r3, 8003eb4 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	7901      	ldrb	r1, [r0, #4]
 8003eae:	4798      	blx	r3
 8003eb0:	b910      	cbnz	r0, 8003eb8 <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8003eb2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	e7fc      	b.n	8003eb2 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 8003eb8:	2003      	movs	r0, #3
 8003eba:	e7fa      	b.n	8003eb2 <USBD_LL_DevDisconnected+0x16>

08003ebc <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	4770      	bx	lr

08003ec0 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	4770      	bx	lr

08003ec4 <USBD_LL_DataOutStage>:
{
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4604      	mov	r4, r0
  if (epnum == 0U)
 8003ec8:	460d      	mov	r5, r1
 8003eca:	2900      	cmp	r1, #0
 8003ecc:	d141      	bne.n	8003f52 <USBD_LL_DataOutStage+0x8e>
 8003ece:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003ed0:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8003ed4:	2a03      	cmp	r2, #3
 8003ed6:	d001      	beq.n	8003edc <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 8003ed8:	4608      	mov	r0, r1
}
 8003eda:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8003edc:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 8003ee0:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 8003ee4:	4291      	cmp	r1, r2
 8003ee6:	d809      	bhi.n	8003efc <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 8003ee8:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d00e      	beq.n	8003f12 <USBD_LL_DataOutStage+0x4e>
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d01a      	beq.n	8003f2e <USBD_LL_DataOutStage+0x6a>
 8003ef8:	4628      	mov	r0, r5
 8003efa:	e00f      	b.n	8003f1c <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 8003efc:	1a89      	subs	r1, r1, r2
 8003efe:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8003f02:	428a      	cmp	r2, r1
 8003f04:	bf28      	it	cs
 8003f06:	460a      	movcs	r2, r1
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f000 fd23 	bl	8004954 <USBD_CtlContinueRx>
  return USBD_OK;
 8003f0e:	4628      	mov	r0, r5
 8003f10:	e7e3      	b.n	8003eda <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8003f12:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8003f16:	f7ff ffd1 	bl	8003ebc <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8003f1a:	b918      	cbnz	r0, 8003f24 <USBD_LL_DataOutStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f1c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d009      	beq.n	8003f38 <USBD_LL_DataOutStage+0x74>
        (void)USBD_CtlSendStatus(pdev);
 8003f24:	4620      	mov	r0, r4
 8003f26:	f000 fd1d 	bl	8004964 <USBD_CtlSendStatus>
  return USBD_OK;
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	e7d5      	b.n	8003eda <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8003f2e:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8003f32:	f7ff ffc5 	bl	8003ec0 <USBD_CoreFindEP>
            break;
 8003f36:	e7f0      	b.n	8003f1a <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8003f38:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8003f3c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	2a00      	cmp	r2, #0
 8003f44:	d0ee      	beq.n	8003f24 <USBD_LL_DataOutStage+0x60>
              pdev->classId = idx;
 8003f46:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	4798      	blx	r3
 8003f50:	e7e8      	b.n	8003f24 <USBD_LL_DataOutStage+0x60>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8003f52:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8003f56:	f7ff ffb3 	bl	8003ec0 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8003f5a:	b988      	cbnz	r0, 8003f80 <USBD_LL_DataOutStage+0xbc>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f5c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d1ba      	bne.n	8003eda <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 8003f64:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8003f68:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003f6c:	699a      	ldr	r2, [r3, #24]
 8003f6e:	2a00      	cmp	r2, #0
 8003f70:	d0b3      	beq.n	8003eda <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 8003f72:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	4629      	mov	r1, r5
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	4798      	blx	r3
      if (ret != USBD_OK)
 8003f7e:	e7ac      	b.n	8003eda <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8003f80:	2000      	movs	r0, #0
 8003f82:	e7aa      	b.n	8003eda <USBD_LL_DataOutStage+0x16>

08003f84 <USBD_LL_DataInStage>:
{
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4604      	mov	r4, r0
  if (epnum == 0U)
 8003f88:	460d      	mov	r5, r1
 8003f8a:	2900      	cmp	r1, #0
 8003f8c:	d14a      	bne.n	8004024 <USBD_LL_DataInStage+0xa0>
 8003f8e:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003f90:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8003f94:	2a02      	cmp	r2, #2
 8003f96:	d007      	beq.n	8003fa8 <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 8003f98:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 8003f9c:	b118      	cbz	r0, 8003fa6 <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8003fa4:	4628      	mov	r0, r5
}
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8003fa8:	69c2      	ldr	r2, [r0, #28]
 8003faa:	6a01      	ldr	r1, [r0, #32]
 8003fac:	428a      	cmp	r2, r1
 8003fae:	d80d      	bhi.n	8003fcc <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 8003fb0:	428a      	cmp	r2, r1
 8003fb2:	d017      	beq.n	8003fe4 <USBD_LL_DataInStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fb4:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d027      	beq.n	800400c <USBD_LL_DataInStage+0x88>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8003fbc:	2180      	movs	r1, #128	@ 0x80
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f7ff fe3e 	bl	8003c40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f000 fcd8 	bl	800497a <USBD_CtlReceiveStatus>
 8003fca:	e7e5      	b.n	8003f98 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8003fcc:	1a52      	subs	r2, r2, r1
 8003fce:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f000 fca8 	bl	8004926 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f7ff fe4f 	bl	8003c80 <USBD_LL_PrepareReceive>
 8003fe2:	e7d9      	b.n	8003f98 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8003fe4:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8003fe6:	4299      	cmp	r1, r3
 8003fe8:	d8e4      	bhi.n	8003fb4 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 8003fea:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d2e0      	bcs.n	8003fb4 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	f000 fc96 	bl	8004926 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004000:	460b      	mov	r3, r1
 8004002:	460a      	mov	r2, r1
 8004004:	4620      	mov	r0, r4
 8004006:	f7ff fe3b 	bl	8003c80 <USBD_LL_PrepareReceive>
 800400a:	e7c5      	b.n	8003f98 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800400c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	2a00      	cmp	r2, #0
 8004014:	d0d2      	beq.n	8003fbc <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 8004016:	2200      	movs	r2, #0
 8004018:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	4620      	mov	r0, r4
 8004020:	4798      	blx	r3
 8004022:	e7cb      	b.n	8003fbc <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004024:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004028:	f7ff ff4a 	bl	8003ec0 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800402c:	b988      	cbnz	r0, 8004052 <USBD_LL_DataInStage+0xce>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800402e:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004032:	2b03      	cmp	r3, #3
 8004034:	d1b7      	bne.n	8003fa6 <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 8004036:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800403a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	2a00      	cmp	r2, #0
 8004042:	d0b0      	beq.n	8003fa6 <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 8004044:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	4629      	mov	r1, r5
 800404c:	4620      	mov	r0, r4
 800404e:	4798      	blx	r3
          if (ret != USBD_OK)
 8004050:	e7a9      	b.n	8003fa6 <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 8004052:	2000      	movs	r0, #0
 8004054:	e7a7      	b.n	8003fa6 <USBD_LL_DataInStage+0x22>

08004056 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8004056:	880b      	ldrh	r3, [r1, #0]
 8004058:	7802      	ldrb	r2, [r0, #0]
 800405a:	4413      	add	r3, r2
 800405c:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800405e:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 8004060:	4418      	add	r0, r3
 8004062:	4770      	bx	lr

08004064 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 8004064:	8842      	ldrh	r2, [r0, #2]
 8004066:	7803      	ldrb	r3, [r0, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d918      	bls.n	800409e <USBD_GetEpDesc+0x3a>
{
 800406c:	b530      	push	{r4, r5, lr}
 800406e:	b083      	sub	sp, #12
 8004070:	4604      	mov	r4, r0
 8004072:	460d      	mov	r5, r1
    ptr = desc->bLength;
 8004074:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 8004078:	8863      	ldrh	r3, [r4, #2]
 800407a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800407e:	429a      	cmp	r2, r3
 8004080:	d20a      	bcs.n	8004098 <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8004082:	f10d 0106 	add.w	r1, sp, #6
 8004086:	f7ff ffe6 	bl	8004056 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800408a:	7843      	ldrb	r3, [r0, #1]
 800408c:	2b05      	cmp	r3, #5
 800408e:	d1f3      	bne.n	8004078 <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8004090:	7883      	ldrb	r3, [r0, #2]
 8004092:	42ab      	cmp	r3, r5
 8004094:	d1f0      	bne.n	8004078 <USBD_GetEpDesc+0x14>
 8004096:	e000      	b.n	800409a <USBD_GetEpDesc+0x36>
 8004098:	2000      	movs	r0, #0
}
 800409a:	b003      	add	sp, #12
 800409c:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800409e:	2000      	movs	r0, #0
}
 80040a0:	4770      	bx	lr

080040a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80040a2:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80040a4:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80040a6:	e002      	b.n	80040ae <USBD_GetLen+0xc>
  {
    len++;
 80040a8:	3001      	adds	r0, #1
 80040aa:	b2c0      	uxtb	r0, r0
    pbuff++;
 80040ac:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 80040ae:	781a      	ldrb	r2, [r3, #0]
 80040b0:	2a00      	cmp	r2, #0
 80040b2:	d1f9      	bne.n	80040a8 <USBD_GetLen+0x6>
  }

  return len;
}
 80040b4:	4770      	bx	lr

080040b6 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80040b6:	780b      	ldrb	r3, [r1, #0]
 80040b8:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80040ba:	784b      	ldrb	r3, [r1, #1]
 80040bc:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 80040be:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80040c0:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80040c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 80040c6:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 80040c8:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 80040ca:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80040cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 80040d0:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 80040d2:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 80040d4:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80040d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 80040da:	80c3      	strh	r3, [r0, #6]
}
 80040dc:	4770      	bx	lr

080040de <USBD_CtlError>:
{
 80040de:	b510      	push	{r4, lr}
 80040e0:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80040e2:	2180      	movs	r1, #128	@ 0x80
 80040e4:	f7ff fdac 	bl	8003c40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80040e8:	2100      	movs	r1, #0
 80040ea:	4620      	mov	r0, r4
 80040ec:	f7ff fda8 	bl	8003c40 <USBD_LL_StallEP>
}
 80040f0:	bd10      	pop	{r4, pc}

080040f2 <USBD_GetDescriptor>:
{
 80040f2:	b530      	push	{r4, r5, lr}
 80040f4:	b083      	sub	sp, #12
 80040f6:	4604      	mov	r4, r0
 80040f8:	460d      	mov	r5, r1
  uint16_t len = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004100:	884a      	ldrh	r2, [r1, #2]
 8004102:	0a13      	lsrs	r3, r2, #8
 8004104:	3b01      	subs	r3, #1
 8004106:	2b06      	cmp	r3, #6
 8004108:	f200 80aa 	bhi.w	8004260 <USBD_GetDescriptor+0x16e>
 800410c:	e8df f003 	tbb	[pc, r3]
 8004110:	a8321e04 	.word	0xa8321e04
 8004114:	8ca8      	.short	0x8ca8
 8004116:	99          	.byte	0x99
 8004117:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004118:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f10d 0106 	add.w	r1, sp, #6
 8004122:	7c00      	ldrb	r0, [r0, #16]
 8004124:	4798      	blx	r3
  if (req->wLength != 0U)
 8004126:	88ea      	ldrh	r2, [r5, #6]
 8004128:	2a00      	cmp	r2, #0
 800412a:	f000 80a3 	beq.w	8004274 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 800412e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 8099 	beq.w	800426a <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8004138:	429a      	cmp	r2, r3
 800413a:	bf28      	it	cs
 800413c:	461a      	movcs	r2, r3
 800413e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004142:	4601      	mov	r1, r0
 8004144:	4620      	mov	r0, r4
 8004146:	f000 fbe1 	bl	800490c <USBD_CtlSendData>
 800414a:	e08c      	b.n	8004266 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800414c:	7c03      	ldrb	r3, [r0, #16]
 800414e:	b943      	cbnz	r3, 8004162 <USBD_GetDescriptor+0x70>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8004150:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004156:	f10d 0006 	add.w	r0, sp, #6
 800415a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800415c:	2302      	movs	r3, #2
 800415e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004160:	e7e1      	b.n	8004126 <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8004162:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004168:	f10d 0006 	add.w	r0, sp, #6
 800416c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800416e:	2302      	movs	r3, #2
 8004170:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004172:	e7d8      	b.n	8004126 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	2a05      	cmp	r2, #5
 8004178:	d852      	bhi.n	8004220 <USBD_GetDescriptor+0x12e>
 800417a:	e8df f002 	tbb	[pc, r2]
 800417e:	1003      	.short	0x1003
 8004180:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004184:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	b123      	cbz	r3, 8004196 <USBD_GetDescriptor+0xa4>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800418c:	f10d 0106 	add.w	r1, sp, #6
 8004190:	7c00      	ldrb	r0, [r0, #16]
 8004192:	4798      	blx	r3
  if (err != 0U)
 8004194:	e7c7      	b.n	8004126 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004196:	4629      	mov	r1, r5
 8004198:	f7ff ffa1 	bl	80040de <USBD_CtlError>
  if (err != 0U)
 800419c:	e063      	b.n	8004266 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800419e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	b123      	cbz	r3, 80041b0 <USBD_GetDescriptor+0xbe>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80041a6:	f10d 0106 	add.w	r1, sp, #6
 80041aa:	7c00      	ldrb	r0, [r0, #16]
 80041ac:	4798      	blx	r3
  if (err != 0U)
 80041ae:	e7ba      	b.n	8004126 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80041b0:	4629      	mov	r1, r5
 80041b2:	f7ff ff94 	bl	80040de <USBD_CtlError>
  if (err != 0U)
 80041b6:	e056      	b.n	8004266 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80041b8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	b123      	cbz	r3, 80041ca <USBD_GetDescriptor+0xd8>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80041c0:	f10d 0106 	add.w	r1, sp, #6
 80041c4:	7c00      	ldrb	r0, [r0, #16]
 80041c6:	4798      	blx	r3
  if (err != 0U)
 80041c8:	e7ad      	b.n	8004126 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80041ca:	4629      	mov	r1, r5
 80041cc:	f7ff ff87 	bl	80040de <USBD_CtlError>
  if (err != 0U)
 80041d0:	e049      	b.n	8004266 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80041d2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	b123      	cbz	r3, 80041e4 <USBD_GetDescriptor+0xf2>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80041da:	f10d 0106 	add.w	r1, sp, #6
 80041de:	7c00      	ldrb	r0, [r0, #16]
 80041e0:	4798      	blx	r3
  if (err != 0U)
 80041e2:	e7a0      	b.n	8004126 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80041e4:	4629      	mov	r1, r5
 80041e6:	f7ff ff7a 	bl	80040de <USBD_CtlError>
  if (err != 0U)
 80041ea:	e03c      	b.n	8004266 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80041ec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	b123      	cbz	r3, 80041fe <USBD_GetDescriptor+0x10c>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80041f4:	f10d 0106 	add.w	r1, sp, #6
 80041f8:	7c00      	ldrb	r0, [r0, #16]
 80041fa:	4798      	blx	r3
  if (err != 0U)
 80041fc:	e793      	b.n	8004126 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80041fe:	4629      	mov	r1, r5
 8004200:	f7ff ff6d 	bl	80040de <USBD_CtlError>
  if (err != 0U)
 8004204:	e02f      	b.n	8004266 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004206:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	b123      	cbz	r3, 8004218 <USBD_GetDescriptor+0x126>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800420e:	f10d 0106 	add.w	r1, sp, #6
 8004212:	7c00      	ldrb	r0, [r0, #16]
 8004214:	4798      	blx	r3
  if (err != 0U)
 8004216:	e786      	b.n	8004126 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004218:	4629      	mov	r1, r5
 800421a:	f7ff ff60 	bl	80040de <USBD_CtlError>
  if (err != 0U)
 800421e:	e022      	b.n	8004266 <USBD_GetDescriptor+0x174>
          USBD_CtlError(pdev, req);
 8004220:	4629      	mov	r1, r5
 8004222:	f7ff ff5c 	bl	80040de <USBD_CtlError>
  if (err != 0U)
 8004226:	e01e      	b.n	8004266 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004228:	7c03      	ldrb	r3, [r0, #16]
 800422a:	b933      	cbnz	r3, 800423a <USBD_GetDescriptor+0x148>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800422c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004232:	f10d 0006 	add.w	r0, sp, #6
 8004236:	4798      	blx	r3
  if (err != 0U)
 8004238:	e775      	b.n	8004126 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800423a:	4629      	mov	r1, r5
 800423c:	f7ff ff4f 	bl	80040de <USBD_CtlError>
  if (err != 0U)
 8004240:	e011      	b.n	8004266 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004242:	7c03      	ldrb	r3, [r0, #16]
 8004244:	b943      	cbnz	r3, 8004258 <USBD_GetDescriptor+0x166>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8004246:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800424a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424c:	f10d 0006 	add.w	r0, sp, #6
 8004250:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004252:	2307      	movs	r3, #7
 8004254:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004256:	e766      	b.n	8004126 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004258:	4629      	mov	r1, r5
 800425a:	f7ff ff40 	bl	80040de <USBD_CtlError>
  if (err != 0U)
 800425e:	e002      	b.n	8004266 <USBD_GetDescriptor+0x174>
      USBD_CtlError(pdev, req);
 8004260:	4629      	mov	r1, r5
 8004262:	f7ff ff3c 	bl	80040de <USBD_CtlError>
}
 8004266:	b003      	add	sp, #12
 8004268:	bd30      	pop	{r4, r5, pc}
      USBD_CtlError(pdev, req);
 800426a:	4629      	mov	r1, r5
 800426c:	4620      	mov	r0, r4
 800426e:	f7ff ff36 	bl	80040de <USBD_CtlError>
 8004272:	e7f8      	b.n	8004266 <USBD_GetDescriptor+0x174>
    (void)USBD_CtlSendStatus(pdev);
 8004274:	4620      	mov	r0, r4
 8004276:	f000 fb75 	bl	8004964 <USBD_CtlSendStatus>
 800427a:	e7f4      	b.n	8004266 <USBD_GetDescriptor+0x174>

0800427c <USBD_SetAddress>:
{
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004280:	888b      	ldrh	r3, [r1, #4]
 8004282:	b9f3      	cbnz	r3, 80042c2 <USBD_SetAddress+0x46>
 8004284:	88cb      	ldrh	r3, [r1, #6]
 8004286:	b9e3      	cbnz	r3, 80042c2 <USBD_SetAddress+0x46>
 8004288:	884b      	ldrh	r3, [r1, #2]
 800428a:	2b7f      	cmp	r3, #127	@ 0x7f
 800428c:	d819      	bhi.n	80042c2 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800428e:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004292:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004296:	2b03      	cmp	r3, #3
 8004298:	d00c      	beq.n	80042b4 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 800429a:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800429e:	4629      	mov	r1, r5
 80042a0:	f7ff fcde 	bl	8003c60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80042a4:	4620      	mov	r0, r4
 80042a6:	f000 fb5d 	bl	8004964 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80042aa:	b135      	cbz	r5, 80042ba <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80042ac:	2302      	movs	r3, #2
 80042ae:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80042b2:	e009      	b.n	80042c8 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80042b4:	f7ff ff13 	bl	80040de <USBD_CtlError>
 80042b8:	e006      	b.n	80042c8 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80042c0:	e002      	b.n	80042c8 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 80042c2:	4620      	mov	r0, r4
 80042c4:	f7ff ff0b 	bl	80040de <USBD_CtlError>
}
 80042c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080042cc <USBD_SetConfig>:
{
 80042cc:	b570      	push	{r4, r5, r6, lr}
 80042ce:	4604      	mov	r4, r0
 80042d0:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 80042d2:	788d      	ldrb	r5, [r1, #2]
 80042d4:	4b2f      	ldr	r3, [pc, #188]	@ (8004394 <USBD_SetConfig+0xc8>)
 80042d6:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80042d8:	2d01      	cmp	r5, #1
 80042da:	d810      	bhi.n	80042fe <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 80042dc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d00f      	beq.n	8004306 <USBD_SetConfig+0x3a>
 80042e6:	2a03      	cmp	r2, #3
 80042e8:	d026      	beq.n	8004338 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 80042ea:	f7ff fef8 	bl	80040de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80042ee:	4b29      	ldr	r3, [pc, #164]	@ (8004394 <USBD_SetConfig+0xc8>)
 80042f0:	7819      	ldrb	r1, [r3, #0]
 80042f2:	4620      	mov	r0, r4
 80042f4:	f7ff fd10 	bl	8003d18 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80042f8:	2503      	movs	r5, #3
}
 80042fa:	4628      	mov	r0, r5
 80042fc:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 80042fe:	f7ff feee 	bl	80040de <USBD_CtlError>
    return USBD_FAIL;
 8004302:	2503      	movs	r5, #3
 8004304:	e7f9      	b.n	80042fa <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8004306:	b1a5      	cbz	r5, 8004332 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 8004308:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800430a:	4629      	mov	r1, r5
 800430c:	f7ff fcfb 	bl	8003d06 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004310:	4605      	mov	r5, r0
 8004312:	b138      	cbz	r0, 8004324 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 8004314:	4631      	mov	r1, r6
 8004316:	4620      	mov	r0, r4
 8004318:	f7ff fee1 	bl	80040de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800431c:	2302      	movs	r3, #2
 800431e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004322:	e7ea      	b.n	80042fa <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004324:	4620      	mov	r0, r4
 8004326:	f000 fb1d 	bl	8004964 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800432a:	2303      	movs	r3, #3
 800432c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004330:	e7e3      	b.n	80042fa <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8004332:	f000 fb17 	bl	8004964 <USBD_CtlSendStatus>
 8004336:	e7e0      	b.n	80042fa <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8004338:	b1cd      	cbz	r5, 800436e <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 800433a:	6841      	ldr	r1, [r0, #4]
 800433c:	428d      	cmp	r5, r1
 800433e:	d025      	beq.n	800438c <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004340:	b2c9      	uxtb	r1, r1
 8004342:	f7ff fce9 	bl	8003d18 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004346:	4b13      	ldr	r3, [pc, #76]	@ (8004394 <USBD_SetConfig+0xc8>)
 8004348:	7819      	ldrb	r1, [r3, #0]
 800434a:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800434c:	4620      	mov	r0, r4
 800434e:	f7ff fcda 	bl	8003d06 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004352:	4605      	mov	r5, r0
 8004354:	b1b0      	cbz	r0, 8004384 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 8004356:	4631      	mov	r1, r6
 8004358:	4620      	mov	r0, r4
 800435a:	f7ff fec0 	bl	80040de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800435e:	7921      	ldrb	r1, [r4, #4]
 8004360:	4620      	mov	r0, r4
 8004362:	f7ff fcd9 	bl	8003d18 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004366:	2302      	movs	r3, #2
 8004368:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800436c:	e7c5      	b.n	80042fa <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800436e:	2302      	movs	r3, #2
 8004370:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8004374:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004376:	4629      	mov	r1, r5
 8004378:	f7ff fcce 	bl	8003d18 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800437c:	4620      	mov	r0, r4
 800437e:	f000 faf1 	bl	8004964 <USBD_CtlSendStatus>
 8004382:	e7ba      	b.n	80042fa <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004384:	4620      	mov	r0, r4
 8004386:	f000 faed 	bl	8004964 <USBD_CtlSendStatus>
 800438a:	e7b6      	b.n	80042fa <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800438c:	f000 faea 	bl	8004964 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004390:	2500      	movs	r5, #0
 8004392:	e7b2      	b.n	80042fa <USBD_SetConfig+0x2e>
 8004394:	200014b8 	.word	0x200014b8

08004398 <USBD_GetConfig>:
{
 8004398:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800439a:	88cb      	ldrh	r3, [r1, #6]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d10b      	bne.n	80043b8 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80043a0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d909      	bls.n	80043be <USBD_GetConfig+0x26>
 80043aa:	2a03      	cmp	r2, #3
 80043ac:	d111      	bne.n	80043d2 <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80043ae:	2201      	movs	r2, #1
 80043b0:	1d01      	adds	r1, r0, #4
 80043b2:	f000 faab 	bl	800490c <USBD_CtlSendData>
        break;
 80043b6:	e001      	b.n	80043bc <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 80043b8:	f7ff fe91 	bl	80040de <USBD_CtlError>
}
 80043bc:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80043be:	b252      	sxtb	r2, r2
 80043c0:	b13a      	cbz	r2, 80043d2 <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 80043c2:	4601      	mov	r1, r0
 80043c4:	2300      	movs	r3, #0
 80043c6:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80043ca:	2201      	movs	r2, #1
 80043cc:	f000 fa9e 	bl	800490c <USBD_CtlSendData>
        break;
 80043d0:	e7f4      	b.n	80043bc <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 80043d2:	f7ff fe84 	bl	80040de <USBD_CtlError>
}
 80043d6:	e7f1      	b.n	80043bc <USBD_GetConfig+0x24>

080043d8 <USBD_GetStatus>:
{
 80043d8:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80043da:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80043de:	3b01      	subs	r3, #1
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d812      	bhi.n	800440a <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80043e4:	88cb      	ldrh	r3, [r1, #6]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d10c      	bne.n	8004404 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80043ea:	2301      	movs	r3, #1
 80043ec:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 80043ee:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80043f2:	b10b      	cbz	r3, 80043f8 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80043f4:	2303      	movs	r3, #3
 80043f6:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80043f8:	2202      	movs	r2, #2
 80043fa:	f100 010c 	add.w	r1, r0, #12
 80043fe:	f000 fa85 	bl	800490c <USBD_CtlSendData>
}
 8004402:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8004404:	f7ff fe6b 	bl	80040de <USBD_CtlError>
        break;
 8004408:	e7fb      	b.n	8004402 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800440a:	f7ff fe68 	bl	80040de <USBD_CtlError>
}
 800440e:	e7f8      	b.n	8004402 <USBD_GetStatus+0x2a>

08004410 <USBD_SetFeature>:
{
 8004410:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004412:	884b      	ldrh	r3, [r1, #2]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d004      	beq.n	8004422 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8004418:	2b02      	cmp	r3, #2
 800441a:	d007      	beq.n	800442c <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 800441c:	f7ff fe5f 	bl	80040de <USBD_CtlError>
}
 8004420:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8004422:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8004426:	f000 fa9d 	bl	8004964 <USBD_CtlSendStatus>
 800442a:	e7f9      	b.n	8004420 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800442c:	888b      	ldrh	r3, [r1, #4]
 800442e:	0a1b      	lsrs	r3, r3, #8
 8004430:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8004434:	f000 fa96 	bl	8004964 <USBD_CtlSendStatus>
 8004438:	e7f2      	b.n	8004420 <USBD_SetFeature+0x10>

0800443a <USBD_ClrFeature>:
{
 800443a:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800443c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004440:	3b01      	subs	r3, #1
 8004442:	2b02      	cmp	r3, #2
 8004444:	d809      	bhi.n	800445a <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004446:	884b      	ldrh	r3, [r1, #2]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d000      	beq.n	800444e <USBD_ClrFeature+0x14>
}
 800444c:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004454:	f000 fa86 	bl	8004964 <USBD_CtlSendStatus>
 8004458:	e7f8      	b.n	800444c <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800445a:	f7ff fe40 	bl	80040de <USBD_CtlError>
}
 800445e:	e7f5      	b.n	800444c <USBD_ClrFeature+0x12>

08004460 <USBD_StdDevReq>:
{
 8004460:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004462:	780c      	ldrb	r4, [r1, #0]
 8004464:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8004468:	2c20      	cmp	r4, #32
 800446a:	d006      	beq.n	800447a <USBD_StdDevReq+0x1a>
 800446c:	2c40      	cmp	r4, #64	@ 0x40
 800446e:	d004      	beq.n	800447a <USBD_StdDevReq+0x1a>
 8004470:	b16c      	cbz	r4, 800448e <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8004472:	f7ff fe34 	bl	80040de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004476:	2400      	movs	r4, #0
      break;
 8004478:	e007      	b.n	800448a <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800447a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800447e:	33ae      	adds	r3, #174	@ 0xae
 8004480:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	4798      	blx	r3
 8004488:	4604      	mov	r4, r0
}
 800448a:	4620      	mov	r0, r4
 800448c:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800448e:	784d      	ldrb	r5, [r1, #1]
 8004490:	2d09      	cmp	r5, #9
 8004492:	d81d      	bhi.n	80044d0 <USBD_StdDevReq+0x70>
 8004494:	e8df f005 	tbb	[pc, r5]
 8004498:	161c1912 	.word	0x161c1912
 800449c:	1c05081c 	.word	0x1c05081c
 80044a0:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 80044a2:	f7ff fe26 	bl	80040f2 <USBD_GetDescriptor>
          break;
 80044a6:	e7f0      	b.n	800448a <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 80044a8:	f7ff fee8 	bl	800427c <USBD_SetAddress>
          break;
 80044ac:	e7ed      	b.n	800448a <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 80044ae:	f7ff ff0d 	bl	80042cc <USBD_SetConfig>
 80044b2:	4604      	mov	r4, r0
          break;
 80044b4:	e7e9      	b.n	800448a <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 80044b6:	f7ff ff6f 	bl	8004398 <USBD_GetConfig>
          break;
 80044ba:	e7e6      	b.n	800448a <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 80044bc:	f7ff ff8c 	bl	80043d8 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80044c0:	462c      	mov	r4, r5
          break;
 80044c2:	e7e2      	b.n	800448a <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 80044c4:	f7ff ffa4 	bl	8004410 <USBD_SetFeature>
          break;
 80044c8:	e7df      	b.n	800448a <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 80044ca:	f7ff ffb6 	bl	800443a <USBD_ClrFeature>
          break;
 80044ce:	e7dc      	b.n	800448a <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 80044d0:	f7ff fe05 	bl	80040de <USBD_CtlError>
          break;
 80044d4:	e7d9      	b.n	800448a <USBD_StdDevReq+0x2a>

080044d6 <USBD_StdItfReq>:
{
 80044d6:	b570      	push	{r4, r5, r6, lr}
 80044d8:	4605      	mov	r5, r0
 80044da:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044dc:	780b      	ldrb	r3, [r1, #0]
 80044de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	d007      	beq.n	80044f6 <USBD_StdItfReq+0x20>
 80044e6:	2b40      	cmp	r3, #64	@ 0x40
 80044e8:	d005      	beq.n	80044f6 <USBD_StdItfReq+0x20>
 80044ea:	b123      	cbz	r3, 80044f6 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 80044ec:	f7ff fdf7 	bl	80040de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80044f0:	2600      	movs	r6, #0
}
 80044f2:	4630      	mov	r0, r6
 80044f4:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80044f6:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 80044fa:	3b01      	subs	r3, #1
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d826      	bhi.n	800454e <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004500:	7921      	ldrb	r1, [r4, #4]
 8004502:	2901      	cmp	r1, #1
 8004504:	d905      	bls.n	8004512 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 8004506:	4621      	mov	r1, r4
 8004508:	4628      	mov	r0, r5
 800450a:	f7ff fde8 	bl	80040de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800450e:	2600      	movs	r6, #0
 8004510:	e7ef      	b.n	80044f2 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8004512:	4628      	mov	r0, r5
 8004514:	f7ff fcd2 	bl	8003ebc <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004518:	b968      	cbnz	r0, 8004536 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 800451a:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 800451e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8004522:	6891      	ldr	r1, [r2, #8]
 8004524:	b189      	cbz	r1, 800454a <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 8004526:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800452a:	6893      	ldr	r3, [r2, #8]
 800452c:	4621      	mov	r1, r4
 800452e:	4628      	mov	r0, r5
 8004530:	4798      	blx	r3
 8004532:	4606      	mov	r6, r0
 8004534:	e000      	b.n	8004538 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 8004536:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004538:	88e3      	ldrh	r3, [r4, #6]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1d9      	bne.n	80044f2 <USBD_StdItfReq+0x1c>
 800453e:	2e00      	cmp	r6, #0
 8004540:	d1d7      	bne.n	80044f2 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8004542:	4628      	mov	r0, r5
 8004544:	f000 fa0e 	bl	8004964 <USBD_CtlSendStatus>
 8004548:	e7d3      	b.n	80044f2 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 800454a:	2603      	movs	r6, #3
 800454c:	e7f4      	b.n	8004538 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 800454e:	4621      	mov	r1, r4
 8004550:	4628      	mov	r0, r5
 8004552:	f7ff fdc4 	bl	80040de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004556:	2600      	movs	r6, #0
          break;
 8004558:	e7cb      	b.n	80044f2 <USBD_StdItfReq+0x1c>

0800455a <USBD_StdEPReq>:
{
 800455a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800455e:	4606      	mov	r6, r0
 8004560:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8004562:	888b      	ldrh	r3, [r1, #4]
 8004564:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004566:	780c      	ldrb	r4, [r1, #0]
 8004568:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800456c:	2c20      	cmp	r4, #32
 800456e:	d008      	beq.n	8004582 <USBD_StdEPReq+0x28>
 8004570:	2c40      	cmp	r4, #64	@ 0x40
 8004572:	d006      	beq.n	8004582 <USBD_StdEPReq+0x28>
 8004574:	b1dc      	cbz	r4, 80045ae <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 8004576:	f7ff fdb2 	bl	80040de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800457a:	2400      	movs	r4, #0
}
 800457c:	4620      	mov	r0, r4
 800457e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8004582:	4639      	mov	r1, r7
 8004584:	4630      	mov	r0, r6
 8004586:	f7ff fc9b 	bl	8003ec0 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800458a:	4604      	mov	r4, r0
 800458c:	2800      	cmp	r0, #0
 800458e:	f040 80fc 	bne.w	800478a <USBD_StdEPReq+0x230>
        pdev->classId = idx;
 8004592:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 8004596:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800459a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0eb      	beq.n	800457c <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80045a4:	4629      	mov	r1, r5
 80045a6:	4630      	mov	r0, r6
 80045a8:	4798      	blx	r3
 80045aa:	4604      	mov	r4, r0
 80045ac:	e7e6      	b.n	800457c <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 80045ae:	f891 8001 	ldrb.w	r8, [r1, #1]
 80045b2:	f1b8 0f01 	cmp.w	r8, #1
 80045b6:	d031      	beq.n	800461c <USBD_StdEPReq+0xc2>
 80045b8:	f1b8 0f03 	cmp.w	r8, #3
 80045bc:	d005      	beq.n	80045ca <USBD_StdEPReq+0x70>
 80045be:	f1b8 0f00 	cmp.w	r8, #0
 80045c2:	d067      	beq.n	8004694 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 80045c4:	f7ff fd8b 	bl	80040de <USBD_CtlError>
          break;
 80045c8:	e7d8      	b.n	800457c <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 80045ca:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d004      	beq.n	80045de <USBD_StdEPReq+0x84>
 80045d4:	2a03      	cmp	r2, #3
 80045d6:	d012      	beq.n	80045fe <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 80045d8:	f7ff fd81 	bl	80040de <USBD_CtlError>
              break;
 80045dc:	e7ce      	b.n	800457c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80045de:	b10f      	cbz	r7, 80045e4 <USBD_StdEPReq+0x8a>
 80045e0:	2f80      	cmp	r7, #128	@ 0x80
 80045e2:	d104      	bne.n	80045ee <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 80045e4:	4629      	mov	r1, r5
 80045e6:	4630      	mov	r0, r6
 80045e8:	f7ff fd79 	bl	80040de <USBD_CtlError>
 80045ec:	e7c6      	b.n	800457c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80045ee:	4639      	mov	r1, r7
 80045f0:	f7ff fb26 	bl	8003c40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80045f4:	2180      	movs	r1, #128	@ 0x80
 80045f6:	4630      	mov	r0, r6
 80045f8:	f7ff fb22 	bl	8003c40 <USBD_LL_StallEP>
 80045fc:	e7be      	b.n	800457c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80045fe:	884b      	ldrh	r3, [r1, #2]
 8004600:	b923      	cbnz	r3, 800460c <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004602:	b11f      	cbz	r7, 800460c <USBD_StdEPReq+0xb2>
 8004604:	2f80      	cmp	r7, #128	@ 0x80
 8004606:	d001      	beq.n	800460c <USBD_StdEPReq+0xb2>
 8004608:	88cb      	ldrh	r3, [r1, #6]
 800460a:	b11b      	cbz	r3, 8004614 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 800460c:	4630      	mov	r0, r6
 800460e:	f000 f9a9 	bl	8004964 <USBD_CtlSendStatus>
              break;
 8004612:	e7b3      	b.n	800457c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004614:	4639      	mov	r1, r7
 8004616:	f7ff fb13 	bl	8003c40 <USBD_LL_StallEP>
 800461a:	e7f7      	b.n	800460c <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 800461c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004620:	b2da      	uxtb	r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d004      	beq.n	8004630 <USBD_StdEPReq+0xd6>
 8004626:	2a03      	cmp	r2, #3
 8004628:	d012      	beq.n	8004650 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 800462a:	f7ff fd58 	bl	80040de <USBD_CtlError>
              break;
 800462e:	e7a5      	b.n	800457c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004630:	b10f      	cbz	r7, 8004636 <USBD_StdEPReq+0xdc>
 8004632:	2f80      	cmp	r7, #128	@ 0x80
 8004634:	d104      	bne.n	8004640 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 8004636:	4629      	mov	r1, r5
 8004638:	4630      	mov	r0, r6
 800463a:	f7ff fd50 	bl	80040de <USBD_CtlError>
 800463e:	e79d      	b.n	800457c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004640:	4639      	mov	r1, r7
 8004642:	f7ff fafd 	bl	8003c40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004646:	2180      	movs	r1, #128	@ 0x80
 8004648:	4630      	mov	r0, r6
 800464a:	f7ff faf9 	bl	8003c40 <USBD_LL_StallEP>
 800464e:	e795      	b.n	800457c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004650:	884b      	ldrh	r3, [r1, #2]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d192      	bne.n	800457c <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004656:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800465a:	d117      	bne.n	800468c <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 800465c:	4630      	mov	r0, r6
 800465e:	f000 f981 	bl	8004964 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8004662:	4639      	mov	r1, r7
 8004664:	4630      	mov	r0, r6
 8004666:	f7ff fc2b 	bl	8003ec0 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800466a:	2800      	cmp	r0, #0
 800466c:	d186      	bne.n	800457c <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 800466e:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8004672:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8004676:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800467a:	6892      	ldr	r2, [r2, #8]
 800467c:	2a00      	cmp	r2, #0
 800467e:	f000 8086 	beq.w	800478e <USBD_StdEPReq+0x234>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004682:	4629      	mov	r1, r5
 8004684:	4630      	mov	r0, r6
 8004686:	4790      	blx	r2
 8004688:	4604      	mov	r4, r0
 800468a:	e777      	b.n	800457c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800468c:	4639      	mov	r1, r7
 800468e:	f7ff fadf 	bl	8003c50 <USBD_LL_ClearStallEP>
 8004692:	e7e3      	b.n	800465c <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 8004694:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004698:	b2d1      	uxtb	r1, r2
 800469a:	2a02      	cmp	r2, #2
 800469c:	d006      	beq.n	80046ac <USBD_StdEPReq+0x152>
 800469e:	2903      	cmp	r1, #3
 80046a0:	d029      	beq.n	80046f6 <USBD_StdEPReq+0x19c>
              USBD_CtlError(pdev, req);
 80046a2:	4629      	mov	r1, r5
 80046a4:	f7ff fd1b 	bl	80040de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80046a8:	4644      	mov	r4, r8
              break;
 80046aa:	e767      	b.n	800457c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80046ac:	b10f      	cbz	r7, 80046b2 <USBD_StdEPReq+0x158>
 80046ae:	2f80      	cmp	r7, #128	@ 0x80
 80046b0:	d113      	bne.n	80046da <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80046b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80046b6:	d115      	bne.n	80046e4 <USBD_StdEPReq+0x18a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80046b8:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80046bc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80046c0:	00b9      	lsls	r1, r7, #2
 80046c2:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 80046c6:	4431      	add	r1, r6
 80046c8:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80046ce:	2202      	movs	r2, #2
 80046d0:	4630      	mov	r0, r6
 80046d2:	f000 f91b 	bl	800490c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80046d6:	4644      	mov	r4, r8
              break;
 80046d8:	e750      	b.n	800457c <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 80046da:	4629      	mov	r1, r5
 80046dc:	f7ff fcff 	bl	80040de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80046e0:	4644      	mov	r4, r8
                break;
 80046e2:	e74b      	b.n	800457c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80046e4:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 80046e8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80046ec:	00b9      	lsls	r1, r7, #2
 80046ee:	3110      	adds	r1, #16
 80046f0:	4431      	add	r1, r6
 80046f2:	3104      	adds	r1, #4
 80046f4:	e7e9      	b.n	80046ca <USBD_StdEPReq+0x170>
              if ((ep_addr & 0x80U) == 0x80U)
 80046f6:	b25b      	sxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	db1f      	blt.n	800473c <USBD_StdEPReq+0x1e2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80046fc:	f007 020f 	and.w	r2, r7, #15
 8004700:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004704:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004708:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 800470c:	b322      	cbz	r2, 8004758 <USBD_StdEPReq+0x1fe>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800470e:	2b00      	cmp	r3, #0
 8004710:	db27      	blt.n	8004762 <USBD_StdEPReq+0x208>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004712:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004716:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800471a:	009c      	lsls	r4, r3, #2
 800471c:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8004720:	4434      	add	r4, r6
 8004722:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004724:	b10f      	cbz	r7, 800472a <USBD_StdEPReq+0x1d0>
 8004726:	2f80      	cmp	r7, #128	@ 0x80
 8004728:	d124      	bne.n	8004774 <USBD_StdEPReq+0x21a>
                pep->status = 0x0000U;
 800472a:	2300      	movs	r3, #0
 800472c:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800472e:	2202      	movs	r2, #2
 8004730:	4621      	mov	r1, r4
 8004732:	4630      	mov	r0, r6
 8004734:	f000 f8ea 	bl	800490c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004738:	4644      	mov	r4, r8
              break;
 800473a:	e71f      	b.n	800457c <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800473c:	f007 020f 	and.w	r2, r7, #15
 8004740:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004744:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004748:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800474a:	2a00      	cmp	r2, #0
 800474c:	d1df      	bne.n	800470e <USBD_StdEPReq+0x1b4>
                  USBD_CtlError(pdev, req);
 800474e:	4629      	mov	r1, r5
 8004750:	f7ff fcc5 	bl	80040de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004754:	4644      	mov	r4, r8
                  break;
 8004756:	e711      	b.n	800457c <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8004758:	4629      	mov	r1, r5
 800475a:	f7ff fcc0 	bl	80040de <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800475e:	4644      	mov	r4, r8
                  break;
 8004760:	e70c      	b.n	800457c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004762:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 8004766:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800476a:	009c      	lsls	r4, r3, #2
 800476c:	3410      	adds	r4, #16
 800476e:	4434      	add	r4, r6
 8004770:	3404      	adds	r4, #4
 8004772:	e7d7      	b.n	8004724 <USBD_StdEPReq+0x1ca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004774:	4639      	mov	r1, r7
 8004776:	4630      	mov	r0, r6
 8004778:	f7ff fa1c 	bl	8003bb4 <USBD_LL_IsStallEP>
 800477c:	b110      	cbz	r0, 8004784 <USBD_StdEPReq+0x22a>
                pep->status = 0x0001U;
 800477e:	2301      	movs	r3, #1
 8004780:	6023      	str	r3, [r4, #0]
 8004782:	e7d4      	b.n	800472e <USBD_StdEPReq+0x1d4>
                pep->status = 0x0000U;
 8004784:	2300      	movs	r3, #0
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	e7d1      	b.n	800472e <USBD_StdEPReq+0x1d4>
  USBD_StatusTypeDef ret = USBD_OK;
 800478a:	2400      	movs	r4, #0
 800478c:	e6f6      	b.n	800457c <USBD_StdEPReq+0x22>
 800478e:	4604      	mov	r4, r0
 8004790:	e6f4      	b.n	800457c <USBD_StdEPReq+0x22>

08004792 <USBD_GetString>:
  if (desc == NULL)
 8004792:	b300      	cbz	r0, 80047d6 <USBD_GetString+0x44>
{
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	460d      	mov	r5, r1
 8004798:	4616      	mov	r6, r2
 800479a:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800479c:	f7ff fc81 	bl	80040a2 <USBD_GetLen>
 80047a0:	3001      	adds	r0, #1
 80047a2:	0043      	lsls	r3, r0, #1
 80047a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047a8:	d806      	bhi.n	80047b8 <USBD_GetString+0x26>
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 80047ae:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80047b0:	2303      	movs	r3, #3
 80047b2:	706b      	strb	r3, [r5, #1]
  idx++;
 80047b4:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 80047b6:	e00a      	b.n	80047ce <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80047b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047bc:	e7f6      	b.n	80047ac <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 80047be:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 80047c0:	3401      	adds	r4, #1
    idx++;
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 80047c6:	2100      	movs	r1, #0
 80047c8:	54a9      	strb	r1, [r5, r2]
    idx++;
 80047ca:	3302      	adds	r3, #2
 80047cc:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 80047ce:	7822      	ldrb	r2, [r4, #0]
 80047d0:	2a00      	cmp	r2, #0
 80047d2:	d1f4      	bne.n	80047be <USBD_GetString+0x2c>
}
 80047d4:	bd70      	pop	{r4, r5, r6, pc}
 80047d6:	4770      	bx	lr

080047d8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80047d8:	2312      	movs	r3, #18
 80047da:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80047dc:	4800      	ldr	r0, [pc, #0]	@ (80047e0 <USBD_FS_DeviceDescriptor+0x8>)
 80047de:	4770      	bx	lr
 80047e0:	200000c8 	.word	0x200000c8

080047e4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80047e4:	2304      	movs	r3, #4
 80047e6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80047e8:	4800      	ldr	r0, [pc, #0]	@ (80047ec <USBD_FS_LangIDStrDescriptor+0x8>)
 80047ea:	4770      	bx	lr
 80047ec:	200000c4 	.word	0x200000c4

080047f0 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80047f0:	2300      	movs	r3, #0
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d21e      	bcs.n	8004834 <IntToUnicode+0x44>
{
 80047f6:	b500      	push	{lr}
 80047f8:	e010      	b.n	800481c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80047fa:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 80047fe:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8004802:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8004804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004808:	f10c 0c01 	add.w	ip, ip, #1
 800480c:	f04f 0e00 	mov.w	lr, #0
 8004810:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8004814:	3301      	adds	r3, #1
 8004816:	b2db      	uxtb	r3, r3
 8004818:	4293      	cmp	r3, r2
 800481a:	d209      	bcs.n	8004830 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800481c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8004820:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8004824:	d2e9      	bcs.n	80047fa <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004826:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 800482a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800482e:	e7e8      	b.n	8004802 <IntToUnicode+0x12>
  }
}
 8004830:	f85d fb04 	ldr.w	pc, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <Get_SerialNum>:
{
 8004838:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800483a:	4b0b      	ldr	r3, [pc, #44]	@ (8004868 <Get_SerialNum+0x30>)
 800483c:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004840:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004844:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 8004848:	18c0      	adds	r0, r0, r3
 800484a:	d100      	bne.n	800484e <Get_SerialNum+0x16>
}
 800484c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800484e:	4d07      	ldr	r5, [pc, #28]	@ (800486c <Get_SerialNum+0x34>)
 8004850:	2208      	movs	r2, #8
 8004852:	4629      	mov	r1, r5
 8004854:	f7ff ffcc 	bl	80047f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004858:	2204      	movs	r2, #4
 800485a:	f105 0110 	add.w	r1, r5, #16
 800485e:	4620      	mov	r0, r4
 8004860:	f7ff ffc6 	bl	80047f0 <IntToUnicode>
}
 8004864:	e7f2      	b.n	800484c <Get_SerialNum+0x14>
 8004866:	bf00      	nop
 8004868:	1fff7000 	.word	0x1fff7000
 800486c:	200000aa 	.word	0x200000aa

08004870 <USBD_FS_SerialStrDescriptor>:
{
 8004870:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004872:	231a      	movs	r3, #26
 8004874:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8004876:	f7ff ffdf 	bl	8004838 <Get_SerialNum>
}
 800487a:	4801      	ldr	r0, [pc, #4]	@ (8004880 <USBD_FS_SerialStrDescriptor+0x10>)
 800487c:	bd08      	pop	{r3, pc}
 800487e:	bf00      	nop
 8004880:	200000a8 	.word	0x200000a8

08004884 <USBD_FS_ProductStrDescriptor>:
{
 8004884:	b508      	push	{r3, lr}
 8004886:	460a      	mov	r2, r1
  if(speed == 0)
 8004888:	b928      	cbnz	r0, 8004896 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800488a:	4905      	ldr	r1, [pc, #20]	@ (80048a0 <USBD_FS_ProductStrDescriptor+0x1c>)
 800488c:	4805      	ldr	r0, [pc, #20]	@ (80048a4 <USBD_FS_ProductStrDescriptor+0x20>)
 800488e:	f7ff ff80 	bl	8004792 <USBD_GetString>
}
 8004892:	4803      	ldr	r0, [pc, #12]	@ (80048a0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004894:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004896:	4902      	ldr	r1, [pc, #8]	@ (80048a0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004898:	4802      	ldr	r0, [pc, #8]	@ (80048a4 <USBD_FS_ProductStrDescriptor+0x20>)
 800489a:	f7ff ff7a 	bl	8004792 <USBD_GetString>
 800489e:	e7f8      	b.n	8004892 <USBD_FS_ProductStrDescriptor+0xe>
 80048a0:	200014bc 	.word	0x200014bc
 80048a4:	080056bc 	.word	0x080056bc

080048a8 <USBD_FS_ManufacturerStrDescriptor>:
{
 80048a8:	b510      	push	{r4, lr}
 80048aa:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80048ac:	4c03      	ldr	r4, [pc, #12]	@ (80048bc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80048ae:	4621      	mov	r1, r4
 80048b0:	4803      	ldr	r0, [pc, #12]	@ (80048c0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80048b2:	f7ff ff6e 	bl	8004792 <USBD_GetString>
}
 80048b6:	4620      	mov	r0, r4
 80048b8:	bd10      	pop	{r4, pc}
 80048ba:	bf00      	nop
 80048bc:	200014bc 	.word	0x200014bc
 80048c0:	080056d8 	.word	0x080056d8

080048c4 <USBD_FS_ConfigStrDescriptor>:
{
 80048c4:	b508      	push	{r3, lr}
 80048c6:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80048c8:	b928      	cbnz	r0, 80048d6 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80048ca:	4905      	ldr	r1, [pc, #20]	@ (80048e0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80048cc:	4805      	ldr	r0, [pc, #20]	@ (80048e4 <USBD_FS_ConfigStrDescriptor+0x20>)
 80048ce:	f7ff ff60 	bl	8004792 <USBD_GetString>
}
 80048d2:	4803      	ldr	r0, [pc, #12]	@ (80048e0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80048d4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80048d6:	4902      	ldr	r1, [pc, #8]	@ (80048e0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80048d8:	4802      	ldr	r0, [pc, #8]	@ (80048e4 <USBD_FS_ConfigStrDescriptor+0x20>)
 80048da:	f7ff ff5a 	bl	8004792 <USBD_GetString>
 80048de:	e7f8      	b.n	80048d2 <USBD_FS_ConfigStrDescriptor+0xe>
 80048e0:	200014bc 	.word	0x200014bc
 80048e4:	080056ec 	.word	0x080056ec

080048e8 <USBD_FS_InterfaceStrDescriptor>:
{
 80048e8:	b508      	push	{r3, lr}
 80048ea:	460a      	mov	r2, r1
  if(speed == 0)
 80048ec:	b928      	cbnz	r0, 80048fa <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80048ee:	4905      	ldr	r1, [pc, #20]	@ (8004904 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80048f0:	4805      	ldr	r0, [pc, #20]	@ (8004908 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80048f2:	f7ff ff4e 	bl	8004792 <USBD_GetString>
}
 80048f6:	4803      	ldr	r0, [pc, #12]	@ (8004904 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80048f8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80048fa:	4902      	ldr	r1, [pc, #8]	@ (8004904 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80048fc:	4802      	ldr	r0, [pc, #8]	@ (8004908 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80048fe:	f7ff ff48 	bl	8004792 <USBD_GetString>
 8004902:	e7f8      	b.n	80048f6 <USBD_FS_InterfaceStrDescriptor+0xe>
 8004904:	200014bc 	.word	0x200014bc
 8004908:	080056f8 	.word	0x080056f8

0800490c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800490c:	b508      	push	{r3, lr}
 800490e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004910:	2202      	movs	r2, #2
 8004912:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8004916:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8004918:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800491a:	460a      	mov	r2, r1
 800491c:	2100      	movs	r1, #0
 800491e:	f7ff f9a7 	bl	8003c70 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004922:	2000      	movs	r0, #0
 8004924:	bd08      	pop	{r3, pc}

08004926 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004926:	b508      	push	{r3, lr}
 8004928:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800492a:	460a      	mov	r2, r1
 800492c:	2100      	movs	r1, #0
 800492e:	f7ff f99f 	bl	8003c70 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004932:	2000      	movs	r0, #0
 8004934:	bd08      	pop	{r3, pc}

08004936 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8004936:	b508      	push	{r3, lr}
 8004938:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800493a:	2203      	movs	r2, #3
 800493c:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8004940:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8004944:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004948:	460a      	mov	r2, r1
 800494a:	2100      	movs	r1, #0
 800494c:	f7ff f998 	bl	8003c80 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004950:	2000      	movs	r0, #0
 8004952:	bd08      	pop	{r3, pc}

08004954 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004954:	b508      	push	{r3, lr}
 8004956:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004958:	460a      	mov	r2, r1
 800495a:	2100      	movs	r1, #0
 800495c:	f7ff f990 	bl	8003c80 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004960:	2000      	movs	r0, #0
 8004962:	bd08      	pop	{r3, pc}

08004964 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004964:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004966:	2204      	movs	r2, #4
 8004968:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800496c:	2300      	movs	r3, #0
 800496e:	461a      	mov	r2, r3
 8004970:	4619      	mov	r1, r3
 8004972:	f7ff f97d 	bl	8003c70 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004976:	2000      	movs	r0, #0
 8004978:	bd08      	pop	{r3, pc}

0800497a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800497a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800497c:	2205      	movs	r2, #5
 800497e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004982:	2300      	movs	r3, #0
 8004984:	461a      	mov	r2, r3
 8004986:	4619      	mov	r1, r3
 8004988:	f7ff f97a 	bl	8003c80 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800498c:	2000      	movs	r0, #0
 800498e:	bd08      	pop	{r3, pc}

08004990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004990:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80049c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004994:	f7fe fb1c 	bl	8002fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004998:	480c      	ldr	r0, [pc, #48]	@ (80049cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800499a:	490d      	ldr	r1, [pc, #52]	@ (80049d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800499c:	4a0d      	ldr	r2, [pc, #52]	@ (80049d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800499e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049a0:	e002      	b.n	80049a8 <LoopCopyDataInit>

080049a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049a6:	3304      	adds	r3, #4

080049a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049ac:	d3f9      	bcc.n	80049a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049ae:	4a0a      	ldr	r2, [pc, #40]	@ (80049d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049b0:	4c0a      	ldr	r4, [pc, #40]	@ (80049dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80049b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049b4:	e001      	b.n	80049ba <LoopFillZerobss>

080049b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049b8:	3204      	adds	r2, #4

080049ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049bc:	d3fb      	bcc.n	80049b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049be:	f000 f855 	bl	8004a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049c2:	f7fb fd85 	bl	80004d0 <main>
  bx  lr    
 80049c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80049c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80049cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049d0:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 80049d4:	08005764 	.word	0x08005764
  ldr r2, =_sbss
 80049d8:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 80049dc:	20001804 	.word	0x20001804

080049e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049e0:	e7fe      	b.n	80049e0 <ADC_IRQHandler>
	...

080049e4 <sniprintf>:
 80049e4:	b40c      	push	{r2, r3}
 80049e6:	b530      	push	{r4, r5, lr}
 80049e8:	4b18      	ldr	r3, [pc, #96]	@ (8004a4c <sniprintf+0x68>)
 80049ea:	1e0c      	subs	r4, r1, #0
 80049ec:	681d      	ldr	r5, [r3, #0]
 80049ee:	b09d      	sub	sp, #116	@ 0x74
 80049f0:	da08      	bge.n	8004a04 <sniprintf+0x20>
 80049f2:	238b      	movs	r3, #139	@ 0x8b
 80049f4:	602b      	str	r3, [r5, #0]
 80049f6:	f04f 30ff 	mov.w	r0, #4294967295
 80049fa:	b01d      	add	sp, #116	@ 0x74
 80049fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a00:	b002      	add	sp, #8
 8004a02:	4770      	bx	lr
 8004a04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004a08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004a12:	bf14      	ite	ne
 8004a14:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004a18:	4623      	moveq	r3, r4
 8004a1a:	9304      	str	r3, [sp, #16]
 8004a1c:	9307      	str	r3, [sp, #28]
 8004a1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a22:	9002      	str	r0, [sp, #8]
 8004a24:	9006      	str	r0, [sp, #24]
 8004a26:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004a2a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004a2c:	ab21      	add	r3, sp, #132	@ 0x84
 8004a2e:	a902      	add	r1, sp, #8
 8004a30:	4628      	mov	r0, r5
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	f000 f998 	bl	8004d68 <_svfiprintf_r>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	bfbc      	itt	lt
 8004a3c:	238b      	movlt	r3, #139	@ 0x8b
 8004a3e:	602b      	strlt	r3, [r5, #0]
 8004a40:	2c00      	cmp	r4, #0
 8004a42:	d0da      	beq.n	80049fa <sniprintf+0x16>
 8004a44:	9b02      	ldr	r3, [sp, #8]
 8004a46:	2200      	movs	r2, #0
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e7d6      	b.n	80049fa <sniprintf+0x16>
 8004a4c:	200000f8 	.word	0x200000f8

08004a50 <memset>:
 8004a50:	4402      	add	r2, r0
 8004a52:	4603      	mov	r3, r0
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d100      	bne.n	8004a5a <memset+0xa>
 8004a58:	4770      	bx	lr
 8004a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a5e:	e7f9      	b.n	8004a54 <memset+0x4>

08004a60 <__errno>:
 8004a60:	4b01      	ldr	r3, [pc, #4]	@ (8004a68 <__errno+0x8>)
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	200000f8 	.word	0x200000f8

08004a6c <__libc_init_array>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <__libc_init_array+0x38>)
 8004a70:	4d0d      	ldr	r5, [pc, #52]	@ (8004aa8 <__libc_init_array+0x3c>)
 8004a72:	1b5b      	subs	r3, r3, r5
 8004a74:	109c      	asrs	r4, r3, #2
 8004a76:	2600      	movs	r6, #0
 8004a78:	42a6      	cmp	r6, r4
 8004a7a:	d109      	bne.n	8004a90 <__libc_init_array+0x24>
 8004a7c:	f000 fde8 	bl	8005650 <_init>
 8004a80:	4d0a      	ldr	r5, [pc, #40]	@ (8004aac <__libc_init_array+0x40>)
 8004a82:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab0 <__libc_init_array+0x44>)
 8004a84:	1b5b      	subs	r3, r3, r5
 8004a86:	109c      	asrs	r4, r3, #2
 8004a88:	2600      	movs	r6, #0
 8004a8a:	42a6      	cmp	r6, r4
 8004a8c:	d105      	bne.n	8004a9a <__libc_init_array+0x2e>
 8004a8e:	bd70      	pop	{r4, r5, r6, pc}
 8004a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a94:	4798      	blx	r3
 8004a96:	3601      	adds	r6, #1
 8004a98:	e7ee      	b.n	8004a78 <__libc_init_array+0xc>
 8004a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9e:	4798      	blx	r3
 8004aa0:	3601      	adds	r6, #1
 8004aa2:	e7f2      	b.n	8004a8a <__libc_init_array+0x1e>
 8004aa4:	0800575c 	.word	0x0800575c
 8004aa8:	0800575c 	.word	0x0800575c
 8004aac:	0800575c 	.word	0x0800575c
 8004ab0:	08005760 	.word	0x08005760

08004ab4 <__retarget_lock_acquire_recursive>:
 8004ab4:	4770      	bx	lr

08004ab6 <__retarget_lock_release_recursive>:
 8004ab6:	4770      	bx	lr

08004ab8 <_free_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4605      	mov	r5, r0
 8004abc:	2900      	cmp	r1, #0
 8004abe:	d041      	beq.n	8004b44 <_free_r+0x8c>
 8004ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ac4:	1f0c      	subs	r4, r1, #4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	bfb8      	it	lt
 8004aca:	18e4      	addlt	r4, r4, r3
 8004acc:	f000 f8e0 	bl	8004c90 <__malloc_lock>
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b48 <_free_r+0x90>)
 8004ad2:	6813      	ldr	r3, [r2, #0]
 8004ad4:	b933      	cbnz	r3, 8004ae4 <_free_r+0x2c>
 8004ad6:	6063      	str	r3, [r4, #4]
 8004ad8:	6014      	str	r4, [r2, #0]
 8004ada:	4628      	mov	r0, r5
 8004adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ae0:	f000 b8dc 	b.w	8004c9c <__malloc_unlock>
 8004ae4:	42a3      	cmp	r3, r4
 8004ae6:	d908      	bls.n	8004afa <_free_r+0x42>
 8004ae8:	6820      	ldr	r0, [r4, #0]
 8004aea:	1821      	adds	r1, r4, r0
 8004aec:	428b      	cmp	r3, r1
 8004aee:	bf01      	itttt	eq
 8004af0:	6819      	ldreq	r1, [r3, #0]
 8004af2:	685b      	ldreq	r3, [r3, #4]
 8004af4:	1809      	addeq	r1, r1, r0
 8004af6:	6021      	streq	r1, [r4, #0]
 8004af8:	e7ed      	b.n	8004ad6 <_free_r+0x1e>
 8004afa:	461a      	mov	r2, r3
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	b10b      	cbz	r3, 8004b04 <_free_r+0x4c>
 8004b00:	42a3      	cmp	r3, r4
 8004b02:	d9fa      	bls.n	8004afa <_free_r+0x42>
 8004b04:	6811      	ldr	r1, [r2, #0]
 8004b06:	1850      	adds	r0, r2, r1
 8004b08:	42a0      	cmp	r0, r4
 8004b0a:	d10b      	bne.n	8004b24 <_free_r+0x6c>
 8004b0c:	6820      	ldr	r0, [r4, #0]
 8004b0e:	4401      	add	r1, r0
 8004b10:	1850      	adds	r0, r2, r1
 8004b12:	4283      	cmp	r3, r0
 8004b14:	6011      	str	r1, [r2, #0]
 8004b16:	d1e0      	bne.n	8004ada <_free_r+0x22>
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	6053      	str	r3, [r2, #4]
 8004b1e:	4408      	add	r0, r1
 8004b20:	6010      	str	r0, [r2, #0]
 8004b22:	e7da      	b.n	8004ada <_free_r+0x22>
 8004b24:	d902      	bls.n	8004b2c <_free_r+0x74>
 8004b26:	230c      	movs	r3, #12
 8004b28:	602b      	str	r3, [r5, #0]
 8004b2a:	e7d6      	b.n	8004ada <_free_r+0x22>
 8004b2c:	6820      	ldr	r0, [r4, #0]
 8004b2e:	1821      	adds	r1, r4, r0
 8004b30:	428b      	cmp	r3, r1
 8004b32:	bf04      	itt	eq
 8004b34:	6819      	ldreq	r1, [r3, #0]
 8004b36:	685b      	ldreq	r3, [r3, #4]
 8004b38:	6063      	str	r3, [r4, #4]
 8004b3a:	bf04      	itt	eq
 8004b3c:	1809      	addeq	r1, r1, r0
 8004b3e:	6021      	streq	r1, [r4, #0]
 8004b40:	6054      	str	r4, [r2, #4]
 8004b42:	e7ca      	b.n	8004ada <_free_r+0x22>
 8004b44:	bd38      	pop	{r3, r4, r5, pc}
 8004b46:	bf00      	nop
 8004b48:	20001800 	.word	0x20001800

08004b4c <sbrk_aligned>:
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	4e0f      	ldr	r6, [pc, #60]	@ (8004b8c <sbrk_aligned+0x40>)
 8004b50:	460c      	mov	r4, r1
 8004b52:	6831      	ldr	r1, [r6, #0]
 8004b54:	4605      	mov	r5, r0
 8004b56:	b911      	cbnz	r1, 8004b5e <sbrk_aligned+0x12>
 8004b58:	f000 fbaa 	bl	80052b0 <_sbrk_r>
 8004b5c:	6030      	str	r0, [r6, #0]
 8004b5e:	4621      	mov	r1, r4
 8004b60:	4628      	mov	r0, r5
 8004b62:	f000 fba5 	bl	80052b0 <_sbrk_r>
 8004b66:	1c43      	adds	r3, r0, #1
 8004b68:	d103      	bne.n	8004b72 <sbrk_aligned+0x26>
 8004b6a:	f04f 34ff 	mov.w	r4, #4294967295
 8004b6e:	4620      	mov	r0, r4
 8004b70:	bd70      	pop	{r4, r5, r6, pc}
 8004b72:	1cc4      	adds	r4, r0, #3
 8004b74:	f024 0403 	bic.w	r4, r4, #3
 8004b78:	42a0      	cmp	r0, r4
 8004b7a:	d0f8      	beq.n	8004b6e <sbrk_aligned+0x22>
 8004b7c:	1a21      	subs	r1, r4, r0
 8004b7e:	4628      	mov	r0, r5
 8004b80:	f000 fb96 	bl	80052b0 <_sbrk_r>
 8004b84:	3001      	adds	r0, #1
 8004b86:	d1f2      	bne.n	8004b6e <sbrk_aligned+0x22>
 8004b88:	e7ef      	b.n	8004b6a <sbrk_aligned+0x1e>
 8004b8a:	bf00      	nop
 8004b8c:	200017fc 	.word	0x200017fc

08004b90 <_malloc_r>:
 8004b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b94:	1ccd      	adds	r5, r1, #3
 8004b96:	f025 0503 	bic.w	r5, r5, #3
 8004b9a:	3508      	adds	r5, #8
 8004b9c:	2d0c      	cmp	r5, #12
 8004b9e:	bf38      	it	cc
 8004ba0:	250c      	movcc	r5, #12
 8004ba2:	2d00      	cmp	r5, #0
 8004ba4:	4606      	mov	r6, r0
 8004ba6:	db01      	blt.n	8004bac <_malloc_r+0x1c>
 8004ba8:	42a9      	cmp	r1, r5
 8004baa:	d904      	bls.n	8004bb6 <_malloc_r+0x26>
 8004bac:	230c      	movs	r3, #12
 8004bae:	6033      	str	r3, [r6, #0]
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c8c <_malloc_r+0xfc>
 8004bba:	f000 f869 	bl	8004c90 <__malloc_lock>
 8004bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004bc2:	461c      	mov	r4, r3
 8004bc4:	bb44      	cbnz	r4, 8004c18 <_malloc_r+0x88>
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	4630      	mov	r0, r6
 8004bca:	f7ff ffbf 	bl	8004b4c <sbrk_aligned>
 8004bce:	1c43      	adds	r3, r0, #1
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	d158      	bne.n	8004c86 <_malloc_r+0xf6>
 8004bd4:	f8d8 4000 	ldr.w	r4, [r8]
 8004bd8:	4627      	mov	r7, r4
 8004bda:	2f00      	cmp	r7, #0
 8004bdc:	d143      	bne.n	8004c66 <_malloc_r+0xd6>
 8004bde:	2c00      	cmp	r4, #0
 8004be0:	d04b      	beq.n	8004c7a <_malloc_r+0xea>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	4639      	mov	r1, r7
 8004be6:	4630      	mov	r0, r6
 8004be8:	eb04 0903 	add.w	r9, r4, r3
 8004bec:	f000 fb60 	bl	80052b0 <_sbrk_r>
 8004bf0:	4581      	cmp	r9, r0
 8004bf2:	d142      	bne.n	8004c7a <_malloc_r+0xea>
 8004bf4:	6821      	ldr	r1, [r4, #0]
 8004bf6:	1a6d      	subs	r5, r5, r1
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f7ff ffa6 	bl	8004b4c <sbrk_aligned>
 8004c00:	3001      	adds	r0, #1
 8004c02:	d03a      	beq.n	8004c7a <_malloc_r+0xea>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	442b      	add	r3, r5
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	bb62      	cbnz	r2, 8004c6c <_malloc_r+0xdc>
 8004c12:	f8c8 7000 	str.w	r7, [r8]
 8004c16:	e00f      	b.n	8004c38 <_malloc_r+0xa8>
 8004c18:	6822      	ldr	r2, [r4, #0]
 8004c1a:	1b52      	subs	r2, r2, r5
 8004c1c:	d420      	bmi.n	8004c60 <_malloc_r+0xd0>
 8004c1e:	2a0b      	cmp	r2, #11
 8004c20:	d917      	bls.n	8004c52 <_malloc_r+0xc2>
 8004c22:	1961      	adds	r1, r4, r5
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	6025      	str	r5, [r4, #0]
 8004c28:	bf18      	it	ne
 8004c2a:	6059      	strne	r1, [r3, #4]
 8004c2c:	6863      	ldr	r3, [r4, #4]
 8004c2e:	bf08      	it	eq
 8004c30:	f8c8 1000 	streq.w	r1, [r8]
 8004c34:	5162      	str	r2, [r4, r5]
 8004c36:	604b      	str	r3, [r1, #4]
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f000 f82f 	bl	8004c9c <__malloc_unlock>
 8004c3e:	f104 000b 	add.w	r0, r4, #11
 8004c42:	1d23      	adds	r3, r4, #4
 8004c44:	f020 0007 	bic.w	r0, r0, #7
 8004c48:	1ac2      	subs	r2, r0, r3
 8004c4a:	bf1c      	itt	ne
 8004c4c:	1a1b      	subne	r3, r3, r0
 8004c4e:	50a3      	strne	r3, [r4, r2]
 8004c50:	e7af      	b.n	8004bb2 <_malloc_r+0x22>
 8004c52:	6862      	ldr	r2, [r4, #4]
 8004c54:	42a3      	cmp	r3, r4
 8004c56:	bf0c      	ite	eq
 8004c58:	f8c8 2000 	streq.w	r2, [r8]
 8004c5c:	605a      	strne	r2, [r3, #4]
 8004c5e:	e7eb      	b.n	8004c38 <_malloc_r+0xa8>
 8004c60:	4623      	mov	r3, r4
 8004c62:	6864      	ldr	r4, [r4, #4]
 8004c64:	e7ae      	b.n	8004bc4 <_malloc_r+0x34>
 8004c66:	463c      	mov	r4, r7
 8004c68:	687f      	ldr	r7, [r7, #4]
 8004c6a:	e7b6      	b.n	8004bda <_malloc_r+0x4a>
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	42a3      	cmp	r3, r4
 8004c72:	d1fb      	bne.n	8004c6c <_malloc_r+0xdc>
 8004c74:	2300      	movs	r3, #0
 8004c76:	6053      	str	r3, [r2, #4]
 8004c78:	e7de      	b.n	8004c38 <_malloc_r+0xa8>
 8004c7a:	230c      	movs	r3, #12
 8004c7c:	6033      	str	r3, [r6, #0]
 8004c7e:	4630      	mov	r0, r6
 8004c80:	f000 f80c 	bl	8004c9c <__malloc_unlock>
 8004c84:	e794      	b.n	8004bb0 <_malloc_r+0x20>
 8004c86:	6005      	str	r5, [r0, #0]
 8004c88:	e7d6      	b.n	8004c38 <_malloc_r+0xa8>
 8004c8a:	bf00      	nop
 8004c8c:	20001800 	.word	0x20001800

08004c90 <__malloc_lock>:
 8004c90:	4801      	ldr	r0, [pc, #4]	@ (8004c98 <__malloc_lock+0x8>)
 8004c92:	f7ff bf0f 	b.w	8004ab4 <__retarget_lock_acquire_recursive>
 8004c96:	bf00      	nop
 8004c98:	200017f8 	.word	0x200017f8

08004c9c <__malloc_unlock>:
 8004c9c:	4801      	ldr	r0, [pc, #4]	@ (8004ca4 <__malloc_unlock+0x8>)
 8004c9e:	f7ff bf0a 	b.w	8004ab6 <__retarget_lock_release_recursive>
 8004ca2:	bf00      	nop
 8004ca4:	200017f8 	.word	0x200017f8

08004ca8 <__ssputs_r>:
 8004ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cac:	688e      	ldr	r6, [r1, #8]
 8004cae:	461f      	mov	r7, r3
 8004cb0:	42be      	cmp	r6, r7
 8004cb2:	4682      	mov	sl, r0
 8004cb4:	460c      	mov	r4, r1
 8004cb6:	4690      	mov	r8, r2
 8004cb8:	4633      	mov	r3, r6
 8004cba:	d853      	bhi.n	8004d64 <__ssputs_r+0xbc>
 8004cbc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8004cc0:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 8004cc4:	d02b      	beq.n	8004d1e <__ssputs_r+0x76>
 8004cc6:	6965      	ldr	r5, [r4, #20]
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	6909      	ldr	r1, [r1, #16]
 8004ccc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cd0:	eba3 0901 	sub.w	r9, r3, r1
 8004cd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cd8:	1c7b      	adds	r3, r7, #1
 8004cda:	106d      	asrs	r5, r5, #1
 8004cdc:	444b      	add	r3, r9
 8004cde:	42ab      	cmp	r3, r5
 8004ce0:	462a      	mov	r2, r5
 8004ce2:	bf84      	itt	hi
 8004ce4:	461d      	movhi	r5, r3
 8004ce6:	462a      	movhi	r2, r5
 8004ce8:	0543      	lsls	r3, r0, #21
 8004cea:	d527      	bpl.n	8004d3c <__ssputs_r+0x94>
 8004cec:	4611      	mov	r1, r2
 8004cee:	4650      	mov	r0, sl
 8004cf0:	f7ff ff4e 	bl	8004b90 <_malloc_r>
 8004cf4:	4606      	mov	r6, r0
 8004cf6:	b358      	cbz	r0, 8004d50 <__ssputs_r+0xa8>
 8004cf8:	6921      	ldr	r1, [r4, #16]
 8004cfa:	464a      	mov	r2, r9
 8004cfc:	f000 fae8 	bl	80052d0 <memcpy>
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d0a:	81a3      	strh	r3, [r4, #12]
 8004d0c:	6126      	str	r6, [r4, #16]
 8004d0e:	6165      	str	r5, [r4, #20]
 8004d10:	444e      	add	r6, r9
 8004d12:	eba5 0509 	sub.w	r5, r5, r9
 8004d16:	6026      	str	r6, [r4, #0]
 8004d18:	60a5      	str	r5, [r4, #8]
 8004d1a:	463e      	mov	r6, r7
 8004d1c:	463b      	mov	r3, r7
 8004d1e:	461f      	mov	r7, r3
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	463a      	mov	r2, r7
 8004d24:	4641      	mov	r1, r8
 8004d26:	f000 faa9 	bl	800527c <memmove>
 8004d2a:	68a3      	ldr	r3, [r4, #8]
 8004d2c:	1b9b      	subs	r3, r3, r6
 8004d2e:	60a3      	str	r3, [r4, #8]
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	443b      	add	r3, r7
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	2000      	movs	r0, #0
 8004d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3c:	4650      	mov	r0, sl
 8004d3e:	f000 fad5 	bl	80052ec <_realloc_r>
 8004d42:	4606      	mov	r6, r0
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d1e1      	bne.n	8004d0c <__ssputs_r+0x64>
 8004d48:	6921      	ldr	r1, [r4, #16]
 8004d4a:	4650      	mov	r0, sl
 8004d4c:	f7ff feb4 	bl	8004ab8 <_free_r>
 8004d50:	230c      	movs	r3, #12
 8004d52:	f8ca 3000 	str.w	r3, [sl]
 8004d56:	89a3      	ldrh	r3, [r4, #12]
 8004d58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d5c:	81a3      	strh	r3, [r4, #12]
 8004d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d62:	e7e9      	b.n	8004d38 <__ssputs_r+0x90>
 8004d64:	463e      	mov	r6, r7
 8004d66:	e7db      	b.n	8004d20 <__ssputs_r+0x78>

08004d68 <_svfiprintf_r>:
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	4698      	mov	r8, r3
 8004d6e:	898b      	ldrh	r3, [r1, #12]
 8004d70:	061b      	lsls	r3, r3, #24
 8004d72:	b09d      	sub	sp, #116	@ 0x74
 8004d74:	4607      	mov	r7, r0
 8004d76:	460d      	mov	r5, r1
 8004d78:	4614      	mov	r4, r2
 8004d7a:	d510      	bpl.n	8004d9e <_svfiprintf_r+0x36>
 8004d7c:	690b      	ldr	r3, [r1, #16]
 8004d7e:	b973      	cbnz	r3, 8004d9e <_svfiprintf_r+0x36>
 8004d80:	2140      	movs	r1, #64	@ 0x40
 8004d82:	f7ff ff05 	bl	8004b90 <_malloc_r>
 8004d86:	6028      	str	r0, [r5, #0]
 8004d88:	6128      	str	r0, [r5, #16]
 8004d8a:	b930      	cbnz	r0, 8004d9a <_svfiprintf_r+0x32>
 8004d8c:	230c      	movs	r3, #12
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	f04f 30ff 	mov.w	r0, #4294967295
 8004d94:	b01d      	add	sp, #116	@ 0x74
 8004d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d9a:	2340      	movs	r3, #64	@ 0x40
 8004d9c:	616b      	str	r3, [r5, #20]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004da2:	2320      	movs	r3, #32
 8004da4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004da8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dac:	2330      	movs	r3, #48	@ 0x30
 8004dae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f4c <_svfiprintf_r+0x1e4>
 8004db2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004db6:	f04f 0901 	mov.w	r9, #1
 8004dba:	4623      	mov	r3, r4
 8004dbc:	469a      	mov	sl, r3
 8004dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dc2:	b10a      	cbz	r2, 8004dc8 <_svfiprintf_r+0x60>
 8004dc4:	2a25      	cmp	r2, #37	@ 0x25
 8004dc6:	d1f9      	bne.n	8004dbc <_svfiprintf_r+0x54>
 8004dc8:	ebba 0b04 	subs.w	fp, sl, r4
 8004dcc:	d00b      	beq.n	8004de6 <_svfiprintf_r+0x7e>
 8004dce:	465b      	mov	r3, fp
 8004dd0:	4622      	mov	r2, r4
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	4638      	mov	r0, r7
 8004dd6:	f7ff ff67 	bl	8004ca8 <__ssputs_r>
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f000 80a7 	beq.w	8004f2e <_svfiprintf_r+0x1c6>
 8004de0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004de2:	445a      	add	r2, fp
 8004de4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004de6:	f89a 3000 	ldrb.w	r3, [sl]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 809f 	beq.w	8004f2e <_svfiprintf_r+0x1c6>
 8004df0:	2300      	movs	r3, #0
 8004df2:	f04f 32ff 	mov.w	r2, #4294967295
 8004df6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dfa:	f10a 0a01 	add.w	sl, sl, #1
 8004dfe:	9304      	str	r3, [sp, #16]
 8004e00:	9307      	str	r3, [sp, #28]
 8004e02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e06:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e08:	4654      	mov	r4, sl
 8004e0a:	2205      	movs	r2, #5
 8004e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e10:	484e      	ldr	r0, [pc, #312]	@ (8004f4c <_svfiprintf_r+0x1e4>)
 8004e12:	f7fb f9c5 	bl	80001a0 <memchr>
 8004e16:	9a04      	ldr	r2, [sp, #16]
 8004e18:	b9d8      	cbnz	r0, 8004e52 <_svfiprintf_r+0xea>
 8004e1a:	06d0      	lsls	r0, r2, #27
 8004e1c:	bf44      	itt	mi
 8004e1e:	2320      	movmi	r3, #32
 8004e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e24:	0711      	lsls	r1, r2, #28
 8004e26:	bf44      	itt	mi
 8004e28:	232b      	movmi	r3, #43	@ 0x2b
 8004e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e32:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e34:	d015      	beq.n	8004e62 <_svfiprintf_r+0xfa>
 8004e36:	9a07      	ldr	r2, [sp, #28]
 8004e38:	4654      	mov	r4, sl
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	f04f 0c0a 	mov.w	ip, #10
 8004e40:	4621      	mov	r1, r4
 8004e42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e46:	3b30      	subs	r3, #48	@ 0x30
 8004e48:	2b09      	cmp	r3, #9
 8004e4a:	d94b      	bls.n	8004ee4 <_svfiprintf_r+0x17c>
 8004e4c:	b1b0      	cbz	r0, 8004e7c <_svfiprintf_r+0x114>
 8004e4e:	9207      	str	r2, [sp, #28]
 8004e50:	e014      	b.n	8004e7c <_svfiprintf_r+0x114>
 8004e52:	eba0 0308 	sub.w	r3, r0, r8
 8004e56:	fa09 f303 	lsl.w	r3, r9, r3
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	9304      	str	r3, [sp, #16]
 8004e5e:	46a2      	mov	sl, r4
 8004e60:	e7d2      	b.n	8004e08 <_svfiprintf_r+0xa0>
 8004e62:	9b03      	ldr	r3, [sp, #12]
 8004e64:	1d19      	adds	r1, r3, #4
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	9103      	str	r1, [sp, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bfbb      	ittet	lt
 8004e6e:	425b      	neglt	r3, r3
 8004e70:	f042 0202 	orrlt.w	r2, r2, #2
 8004e74:	9307      	strge	r3, [sp, #28]
 8004e76:	9307      	strlt	r3, [sp, #28]
 8004e78:	bfb8      	it	lt
 8004e7a:	9204      	strlt	r2, [sp, #16]
 8004e7c:	7823      	ldrb	r3, [r4, #0]
 8004e7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e80:	d10a      	bne.n	8004e98 <_svfiprintf_r+0x130>
 8004e82:	7863      	ldrb	r3, [r4, #1]
 8004e84:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e86:	d132      	bne.n	8004eee <_svfiprintf_r+0x186>
 8004e88:	9b03      	ldr	r3, [sp, #12]
 8004e8a:	1d1a      	adds	r2, r3, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	9203      	str	r2, [sp, #12]
 8004e90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e94:	3402      	adds	r4, #2
 8004e96:	9305      	str	r3, [sp, #20]
 8004e98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f5c <_svfiprintf_r+0x1f4>
 8004e9c:	7821      	ldrb	r1, [r4, #0]
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	4650      	mov	r0, sl
 8004ea2:	f7fb f97d 	bl	80001a0 <memchr>
 8004ea6:	b138      	cbz	r0, 8004eb8 <_svfiprintf_r+0x150>
 8004ea8:	9b04      	ldr	r3, [sp, #16]
 8004eaa:	eba0 000a 	sub.w	r0, r0, sl
 8004eae:	2240      	movs	r2, #64	@ 0x40
 8004eb0:	4082      	lsls	r2, r0
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	3401      	adds	r4, #1
 8004eb6:	9304      	str	r3, [sp, #16]
 8004eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ebc:	4824      	ldr	r0, [pc, #144]	@ (8004f50 <_svfiprintf_r+0x1e8>)
 8004ebe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ec2:	2206      	movs	r2, #6
 8004ec4:	f7fb f96c 	bl	80001a0 <memchr>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d036      	beq.n	8004f3a <_svfiprintf_r+0x1d2>
 8004ecc:	4b21      	ldr	r3, [pc, #132]	@ (8004f54 <_svfiprintf_r+0x1ec>)
 8004ece:	bb1b      	cbnz	r3, 8004f18 <_svfiprintf_r+0x1b0>
 8004ed0:	9b03      	ldr	r3, [sp, #12]
 8004ed2:	3307      	adds	r3, #7
 8004ed4:	f023 0307 	bic.w	r3, r3, #7
 8004ed8:	3308      	adds	r3, #8
 8004eda:	9303      	str	r3, [sp, #12]
 8004edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ede:	4433      	add	r3, r6
 8004ee0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ee2:	e76a      	b.n	8004dba <_svfiprintf_r+0x52>
 8004ee4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ee8:	460c      	mov	r4, r1
 8004eea:	2001      	movs	r0, #1
 8004eec:	e7a8      	b.n	8004e40 <_svfiprintf_r+0xd8>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	3401      	adds	r4, #1
 8004ef2:	9305      	str	r3, [sp, #20]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f04f 0c0a 	mov.w	ip, #10
 8004efa:	4620      	mov	r0, r4
 8004efc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f00:	3a30      	subs	r2, #48	@ 0x30
 8004f02:	2a09      	cmp	r2, #9
 8004f04:	d903      	bls.n	8004f0e <_svfiprintf_r+0x1a6>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0c6      	beq.n	8004e98 <_svfiprintf_r+0x130>
 8004f0a:	9105      	str	r1, [sp, #20]
 8004f0c:	e7c4      	b.n	8004e98 <_svfiprintf_r+0x130>
 8004f0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f12:	4604      	mov	r4, r0
 8004f14:	2301      	movs	r3, #1
 8004f16:	e7f0      	b.n	8004efa <_svfiprintf_r+0x192>
 8004f18:	ab03      	add	r3, sp, #12
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	462a      	mov	r2, r5
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f58 <_svfiprintf_r+0x1f0>)
 8004f20:	a904      	add	r1, sp, #16
 8004f22:	4638      	mov	r0, r7
 8004f24:	f3af 8000 	nop.w
 8004f28:	1c42      	adds	r2, r0, #1
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	d1d6      	bne.n	8004edc <_svfiprintf_r+0x174>
 8004f2e:	89ab      	ldrh	r3, [r5, #12]
 8004f30:	065b      	lsls	r3, r3, #25
 8004f32:	f53f af2d 	bmi.w	8004d90 <_svfiprintf_r+0x28>
 8004f36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f38:	e72c      	b.n	8004d94 <_svfiprintf_r+0x2c>
 8004f3a:	ab03      	add	r3, sp, #12
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	462a      	mov	r2, r5
 8004f40:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <_svfiprintf_r+0x1f0>)
 8004f42:	a904      	add	r1, sp, #16
 8004f44:	4638      	mov	r0, r7
 8004f46:	f000 f879 	bl	800503c <_printf_i>
 8004f4a:	e7ed      	b.n	8004f28 <_svfiprintf_r+0x1c0>
 8004f4c:	08005720 	.word	0x08005720
 8004f50:	0800572a 	.word	0x0800572a
 8004f54:	00000000 	.word	0x00000000
 8004f58:	08004ca9 	.word	0x08004ca9
 8004f5c:	08005726 	.word	0x08005726

08004f60 <_printf_common>:
 8004f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f64:	4616      	mov	r6, r2
 8004f66:	4698      	mov	r8, r3
 8004f68:	688a      	ldr	r2, [r1, #8]
 8004f6a:	690b      	ldr	r3, [r1, #16]
 8004f6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f70:	4293      	cmp	r3, r2
 8004f72:	bfb8      	it	lt
 8004f74:	4613      	movlt	r3, r2
 8004f76:	6033      	str	r3, [r6, #0]
 8004f78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f7c:	4607      	mov	r7, r0
 8004f7e:	460c      	mov	r4, r1
 8004f80:	b10a      	cbz	r2, 8004f86 <_printf_common+0x26>
 8004f82:	3301      	adds	r3, #1
 8004f84:	6033      	str	r3, [r6, #0]
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	0699      	lsls	r1, r3, #26
 8004f8a:	bf42      	ittt	mi
 8004f8c:	6833      	ldrmi	r3, [r6, #0]
 8004f8e:	3302      	addmi	r3, #2
 8004f90:	6033      	strmi	r3, [r6, #0]
 8004f92:	6825      	ldr	r5, [r4, #0]
 8004f94:	f015 0506 	ands.w	r5, r5, #6
 8004f98:	d106      	bne.n	8004fa8 <_printf_common+0x48>
 8004f9a:	f104 0a19 	add.w	sl, r4, #25
 8004f9e:	68e3      	ldr	r3, [r4, #12]
 8004fa0:	6832      	ldr	r2, [r6, #0]
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	42ab      	cmp	r3, r5
 8004fa6:	dc26      	bgt.n	8004ff6 <_printf_common+0x96>
 8004fa8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fac:	6822      	ldr	r2, [r4, #0]
 8004fae:	3b00      	subs	r3, #0
 8004fb0:	bf18      	it	ne
 8004fb2:	2301      	movne	r3, #1
 8004fb4:	0692      	lsls	r2, r2, #26
 8004fb6:	d42b      	bmi.n	8005010 <_printf_common+0xb0>
 8004fb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	47c8      	blx	r9
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	d01e      	beq.n	8005004 <_printf_common+0xa4>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	6922      	ldr	r2, [r4, #16]
 8004fca:	f003 0306 	and.w	r3, r3, #6
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	bf02      	ittt	eq
 8004fd2:	68e5      	ldreq	r5, [r4, #12]
 8004fd4:	6833      	ldreq	r3, [r6, #0]
 8004fd6:	1aed      	subeq	r5, r5, r3
 8004fd8:	68a3      	ldr	r3, [r4, #8]
 8004fda:	bf0c      	ite	eq
 8004fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fe0:	2500      	movne	r5, #0
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	bfc4      	itt	gt
 8004fe6:	1a9b      	subgt	r3, r3, r2
 8004fe8:	18ed      	addgt	r5, r5, r3
 8004fea:	2600      	movs	r6, #0
 8004fec:	341a      	adds	r4, #26
 8004fee:	42b5      	cmp	r5, r6
 8004ff0:	d11a      	bne.n	8005028 <_printf_common+0xc8>
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	e008      	b.n	8005008 <_printf_common+0xa8>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	4652      	mov	r2, sl
 8004ffa:	4641      	mov	r1, r8
 8004ffc:	4638      	mov	r0, r7
 8004ffe:	47c8      	blx	r9
 8005000:	3001      	adds	r0, #1
 8005002:	d103      	bne.n	800500c <_printf_common+0xac>
 8005004:	f04f 30ff 	mov.w	r0, #4294967295
 8005008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800500c:	3501      	adds	r5, #1
 800500e:	e7c6      	b.n	8004f9e <_printf_common+0x3e>
 8005010:	18e1      	adds	r1, r4, r3
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	2030      	movs	r0, #48	@ 0x30
 8005016:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800501a:	4422      	add	r2, r4
 800501c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005020:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005024:	3302      	adds	r3, #2
 8005026:	e7c7      	b.n	8004fb8 <_printf_common+0x58>
 8005028:	2301      	movs	r3, #1
 800502a:	4622      	mov	r2, r4
 800502c:	4641      	mov	r1, r8
 800502e:	4638      	mov	r0, r7
 8005030:	47c8      	blx	r9
 8005032:	3001      	adds	r0, #1
 8005034:	d0e6      	beq.n	8005004 <_printf_common+0xa4>
 8005036:	3601      	adds	r6, #1
 8005038:	e7d9      	b.n	8004fee <_printf_common+0x8e>
	...

0800503c <_printf_i>:
 800503c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005040:	7e0f      	ldrb	r7, [r1, #24]
 8005042:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005044:	2f78      	cmp	r7, #120	@ 0x78
 8005046:	4691      	mov	r9, r2
 8005048:	4680      	mov	r8, r0
 800504a:	460c      	mov	r4, r1
 800504c:	469a      	mov	sl, r3
 800504e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005052:	d807      	bhi.n	8005064 <_printf_i+0x28>
 8005054:	2f62      	cmp	r7, #98	@ 0x62
 8005056:	d80a      	bhi.n	800506e <_printf_i+0x32>
 8005058:	2f00      	cmp	r7, #0
 800505a:	f000 80d2 	beq.w	8005202 <_printf_i+0x1c6>
 800505e:	2f58      	cmp	r7, #88	@ 0x58
 8005060:	f000 80b7 	beq.w	80051d2 <_printf_i+0x196>
 8005064:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005068:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800506c:	e03a      	b.n	80050e4 <_printf_i+0xa8>
 800506e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005072:	2b15      	cmp	r3, #21
 8005074:	d8f6      	bhi.n	8005064 <_printf_i+0x28>
 8005076:	a101      	add	r1, pc, #4	@ (adr r1, 800507c <_printf_i+0x40>)
 8005078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800507c:	080050d5 	.word	0x080050d5
 8005080:	080050e9 	.word	0x080050e9
 8005084:	08005065 	.word	0x08005065
 8005088:	08005065 	.word	0x08005065
 800508c:	08005065 	.word	0x08005065
 8005090:	08005065 	.word	0x08005065
 8005094:	080050e9 	.word	0x080050e9
 8005098:	08005065 	.word	0x08005065
 800509c:	08005065 	.word	0x08005065
 80050a0:	08005065 	.word	0x08005065
 80050a4:	08005065 	.word	0x08005065
 80050a8:	080051e9 	.word	0x080051e9
 80050ac:	08005113 	.word	0x08005113
 80050b0:	0800519f 	.word	0x0800519f
 80050b4:	08005065 	.word	0x08005065
 80050b8:	08005065 	.word	0x08005065
 80050bc:	0800520b 	.word	0x0800520b
 80050c0:	08005065 	.word	0x08005065
 80050c4:	08005113 	.word	0x08005113
 80050c8:	08005065 	.word	0x08005065
 80050cc:	08005065 	.word	0x08005065
 80050d0:	080051a7 	.word	0x080051a7
 80050d4:	6833      	ldr	r3, [r6, #0]
 80050d6:	1d1a      	adds	r2, r3, #4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6032      	str	r2, [r6, #0]
 80050dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050e4:	2301      	movs	r3, #1
 80050e6:	e09d      	b.n	8005224 <_printf_i+0x1e8>
 80050e8:	6833      	ldr	r3, [r6, #0]
 80050ea:	6820      	ldr	r0, [r4, #0]
 80050ec:	1d19      	adds	r1, r3, #4
 80050ee:	6031      	str	r1, [r6, #0]
 80050f0:	0606      	lsls	r6, r0, #24
 80050f2:	d501      	bpl.n	80050f8 <_printf_i+0xbc>
 80050f4:	681d      	ldr	r5, [r3, #0]
 80050f6:	e003      	b.n	8005100 <_printf_i+0xc4>
 80050f8:	0645      	lsls	r5, r0, #25
 80050fa:	d5fb      	bpl.n	80050f4 <_printf_i+0xb8>
 80050fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005100:	2d00      	cmp	r5, #0
 8005102:	da03      	bge.n	800510c <_printf_i+0xd0>
 8005104:	232d      	movs	r3, #45	@ 0x2d
 8005106:	426d      	negs	r5, r5
 8005108:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800510c:	4859      	ldr	r0, [pc, #356]	@ (8005274 <_printf_i+0x238>)
 800510e:	230a      	movs	r3, #10
 8005110:	e010      	b.n	8005134 <_printf_i+0xf8>
 8005112:	6821      	ldr	r1, [r4, #0]
 8005114:	6833      	ldr	r3, [r6, #0]
 8005116:	0608      	lsls	r0, r1, #24
 8005118:	f853 5b04 	ldr.w	r5, [r3], #4
 800511c:	d402      	bmi.n	8005124 <_printf_i+0xe8>
 800511e:	0649      	lsls	r1, r1, #25
 8005120:	bf48      	it	mi
 8005122:	b2ad      	uxthmi	r5, r5
 8005124:	2f6f      	cmp	r7, #111	@ 0x6f
 8005126:	4853      	ldr	r0, [pc, #332]	@ (8005274 <_printf_i+0x238>)
 8005128:	6033      	str	r3, [r6, #0]
 800512a:	d159      	bne.n	80051e0 <_printf_i+0x1a4>
 800512c:	2308      	movs	r3, #8
 800512e:	2100      	movs	r1, #0
 8005130:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005134:	6866      	ldr	r6, [r4, #4]
 8005136:	60a6      	str	r6, [r4, #8]
 8005138:	2e00      	cmp	r6, #0
 800513a:	db05      	blt.n	8005148 <_printf_i+0x10c>
 800513c:	6821      	ldr	r1, [r4, #0]
 800513e:	432e      	orrs	r6, r5
 8005140:	f021 0104 	bic.w	r1, r1, #4
 8005144:	6021      	str	r1, [r4, #0]
 8005146:	d04d      	beq.n	80051e4 <_printf_i+0x1a8>
 8005148:	4616      	mov	r6, r2
 800514a:	fbb5 f1f3 	udiv	r1, r5, r3
 800514e:	fb03 5711 	mls	r7, r3, r1, r5
 8005152:	5dc7      	ldrb	r7, [r0, r7]
 8005154:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005158:	462f      	mov	r7, r5
 800515a:	42bb      	cmp	r3, r7
 800515c:	460d      	mov	r5, r1
 800515e:	d9f4      	bls.n	800514a <_printf_i+0x10e>
 8005160:	2b08      	cmp	r3, #8
 8005162:	d10b      	bne.n	800517c <_printf_i+0x140>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	07df      	lsls	r7, r3, #31
 8005168:	d508      	bpl.n	800517c <_printf_i+0x140>
 800516a:	6923      	ldr	r3, [r4, #16]
 800516c:	6861      	ldr	r1, [r4, #4]
 800516e:	4299      	cmp	r1, r3
 8005170:	bfde      	ittt	le
 8005172:	2330      	movle	r3, #48	@ 0x30
 8005174:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005178:	f106 36ff 	addle.w	r6, r6, #4294967295
 800517c:	1b92      	subs	r2, r2, r6
 800517e:	6122      	str	r2, [r4, #16]
 8005180:	f8cd a000 	str.w	sl, [sp]
 8005184:	464b      	mov	r3, r9
 8005186:	aa03      	add	r2, sp, #12
 8005188:	4621      	mov	r1, r4
 800518a:	4640      	mov	r0, r8
 800518c:	f7ff fee8 	bl	8004f60 <_printf_common>
 8005190:	3001      	adds	r0, #1
 8005192:	d14c      	bne.n	800522e <_printf_i+0x1f2>
 8005194:	f04f 30ff 	mov.w	r0, #4294967295
 8005198:	b004      	add	sp, #16
 800519a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	f043 0320 	orr.w	r3, r3, #32
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	4834      	ldr	r0, [pc, #208]	@ (8005278 <_printf_i+0x23c>)
 80051a8:	2778      	movs	r7, #120	@ 0x78
 80051aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	6831      	ldr	r1, [r6, #0]
 80051b2:	061f      	lsls	r7, r3, #24
 80051b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80051b8:	d402      	bmi.n	80051c0 <_printf_i+0x184>
 80051ba:	065f      	lsls	r7, r3, #25
 80051bc:	bf48      	it	mi
 80051be:	b2ad      	uxthmi	r5, r5
 80051c0:	6031      	str	r1, [r6, #0]
 80051c2:	07d9      	lsls	r1, r3, #31
 80051c4:	bf44      	itt	mi
 80051c6:	f043 0320 	orrmi.w	r3, r3, #32
 80051ca:	6023      	strmi	r3, [r4, #0]
 80051cc:	b11d      	cbz	r5, 80051d6 <_printf_i+0x19a>
 80051ce:	2310      	movs	r3, #16
 80051d0:	e7ad      	b.n	800512e <_printf_i+0xf2>
 80051d2:	4828      	ldr	r0, [pc, #160]	@ (8005274 <_printf_i+0x238>)
 80051d4:	e7e9      	b.n	80051aa <_printf_i+0x16e>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	f023 0320 	bic.w	r3, r3, #32
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	e7f6      	b.n	80051ce <_printf_i+0x192>
 80051e0:	230a      	movs	r3, #10
 80051e2:	e7a4      	b.n	800512e <_printf_i+0xf2>
 80051e4:	4616      	mov	r6, r2
 80051e6:	e7bb      	b.n	8005160 <_printf_i+0x124>
 80051e8:	6833      	ldr	r3, [r6, #0]
 80051ea:	6825      	ldr	r5, [r4, #0]
 80051ec:	6961      	ldr	r1, [r4, #20]
 80051ee:	1d18      	adds	r0, r3, #4
 80051f0:	6030      	str	r0, [r6, #0]
 80051f2:	062e      	lsls	r6, r5, #24
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	d501      	bpl.n	80051fc <_printf_i+0x1c0>
 80051f8:	6019      	str	r1, [r3, #0]
 80051fa:	e002      	b.n	8005202 <_printf_i+0x1c6>
 80051fc:	0668      	lsls	r0, r5, #25
 80051fe:	d5fb      	bpl.n	80051f8 <_printf_i+0x1bc>
 8005200:	8019      	strh	r1, [r3, #0]
 8005202:	2300      	movs	r3, #0
 8005204:	6123      	str	r3, [r4, #16]
 8005206:	4616      	mov	r6, r2
 8005208:	e7ba      	b.n	8005180 <_printf_i+0x144>
 800520a:	6833      	ldr	r3, [r6, #0]
 800520c:	1d1a      	adds	r2, r3, #4
 800520e:	6032      	str	r2, [r6, #0]
 8005210:	681e      	ldr	r6, [r3, #0]
 8005212:	6862      	ldr	r2, [r4, #4]
 8005214:	2100      	movs	r1, #0
 8005216:	4630      	mov	r0, r6
 8005218:	f7fa ffc2 	bl	80001a0 <memchr>
 800521c:	b108      	cbz	r0, 8005222 <_printf_i+0x1e6>
 800521e:	1b80      	subs	r0, r0, r6
 8005220:	6060      	str	r0, [r4, #4]
 8005222:	6863      	ldr	r3, [r4, #4]
 8005224:	6123      	str	r3, [r4, #16]
 8005226:	2300      	movs	r3, #0
 8005228:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800522c:	e7a8      	b.n	8005180 <_printf_i+0x144>
 800522e:	6923      	ldr	r3, [r4, #16]
 8005230:	4632      	mov	r2, r6
 8005232:	4649      	mov	r1, r9
 8005234:	4640      	mov	r0, r8
 8005236:	47d0      	blx	sl
 8005238:	3001      	adds	r0, #1
 800523a:	d0ab      	beq.n	8005194 <_printf_i+0x158>
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	079b      	lsls	r3, r3, #30
 8005240:	d413      	bmi.n	800526a <_printf_i+0x22e>
 8005242:	68e0      	ldr	r0, [r4, #12]
 8005244:	9b03      	ldr	r3, [sp, #12]
 8005246:	4298      	cmp	r0, r3
 8005248:	bfb8      	it	lt
 800524a:	4618      	movlt	r0, r3
 800524c:	e7a4      	b.n	8005198 <_printf_i+0x15c>
 800524e:	2301      	movs	r3, #1
 8005250:	4632      	mov	r2, r6
 8005252:	4649      	mov	r1, r9
 8005254:	4640      	mov	r0, r8
 8005256:	47d0      	blx	sl
 8005258:	3001      	adds	r0, #1
 800525a:	d09b      	beq.n	8005194 <_printf_i+0x158>
 800525c:	3501      	adds	r5, #1
 800525e:	68e3      	ldr	r3, [r4, #12]
 8005260:	9903      	ldr	r1, [sp, #12]
 8005262:	1a5b      	subs	r3, r3, r1
 8005264:	42ab      	cmp	r3, r5
 8005266:	dcf2      	bgt.n	800524e <_printf_i+0x212>
 8005268:	e7eb      	b.n	8005242 <_printf_i+0x206>
 800526a:	2500      	movs	r5, #0
 800526c:	f104 0619 	add.w	r6, r4, #25
 8005270:	e7f5      	b.n	800525e <_printf_i+0x222>
 8005272:	bf00      	nop
 8005274:	08005731 	.word	0x08005731
 8005278:	08005742 	.word	0x08005742

0800527c <memmove>:
 800527c:	4288      	cmp	r0, r1
 800527e:	b510      	push	{r4, lr}
 8005280:	eb01 0402 	add.w	r4, r1, r2
 8005284:	d902      	bls.n	800528c <memmove+0x10>
 8005286:	4284      	cmp	r4, r0
 8005288:	4623      	mov	r3, r4
 800528a:	d807      	bhi.n	800529c <memmove+0x20>
 800528c:	1e43      	subs	r3, r0, #1
 800528e:	42a1      	cmp	r1, r4
 8005290:	d007      	beq.n	80052a2 <memmove+0x26>
 8005292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800529a:	e7f8      	b.n	800528e <memmove+0x12>
 800529c:	4402      	add	r2, r0
 800529e:	4282      	cmp	r2, r0
 80052a0:	d100      	bne.n	80052a4 <memmove+0x28>
 80052a2:	bd10      	pop	{r4, pc}
 80052a4:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80052a8:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80052ac:	e7f7      	b.n	800529e <memmove+0x22>
	...

080052b0 <_sbrk_r>:
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4d06      	ldr	r5, [pc, #24]	@ (80052cc <_sbrk_r+0x1c>)
 80052b4:	2300      	movs	r3, #0
 80052b6:	4604      	mov	r4, r0
 80052b8:	4608      	mov	r0, r1
 80052ba:	602b      	str	r3, [r5, #0]
 80052bc:	f7fd fe64 	bl	8002f88 <_sbrk>
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	d102      	bne.n	80052ca <_sbrk_r+0x1a>
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	b103      	cbz	r3, 80052ca <_sbrk_r+0x1a>
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	bd38      	pop	{r3, r4, r5, pc}
 80052cc:	200017f4 	.word	0x200017f4

080052d0 <memcpy>:
 80052d0:	440a      	add	r2, r1
 80052d2:	4291      	cmp	r1, r2
 80052d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80052d8:	d100      	bne.n	80052dc <memcpy+0xc>
 80052da:	4770      	bx	lr
 80052dc:	b510      	push	{r4, lr}
 80052de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052e6:	4291      	cmp	r1, r2
 80052e8:	d1f9      	bne.n	80052de <memcpy+0xe>
 80052ea:	bd10      	pop	{r4, pc}

080052ec <_realloc_r>:
 80052ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f0:	4607      	mov	r7, r0
 80052f2:	4614      	mov	r4, r2
 80052f4:	460d      	mov	r5, r1
 80052f6:	b921      	cbnz	r1, 8005302 <_realloc_r+0x16>
 80052f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052fc:	4611      	mov	r1, r2
 80052fe:	f7ff bc47 	b.w	8004b90 <_malloc_r>
 8005302:	b92a      	cbnz	r2, 8005310 <_realloc_r+0x24>
 8005304:	f7ff fbd8 	bl	8004ab8 <_free_r>
 8005308:	4625      	mov	r5, r4
 800530a:	4628      	mov	r0, r5
 800530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005310:	f000 f81a 	bl	8005348 <_malloc_usable_size_r>
 8005314:	4284      	cmp	r4, r0
 8005316:	4606      	mov	r6, r0
 8005318:	d802      	bhi.n	8005320 <_realloc_r+0x34>
 800531a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800531e:	d8f4      	bhi.n	800530a <_realloc_r+0x1e>
 8005320:	4621      	mov	r1, r4
 8005322:	4638      	mov	r0, r7
 8005324:	f7ff fc34 	bl	8004b90 <_malloc_r>
 8005328:	4680      	mov	r8, r0
 800532a:	b908      	cbnz	r0, 8005330 <_realloc_r+0x44>
 800532c:	4645      	mov	r5, r8
 800532e:	e7ec      	b.n	800530a <_realloc_r+0x1e>
 8005330:	42b4      	cmp	r4, r6
 8005332:	4622      	mov	r2, r4
 8005334:	4629      	mov	r1, r5
 8005336:	bf28      	it	cs
 8005338:	4632      	movcs	r2, r6
 800533a:	f7ff ffc9 	bl	80052d0 <memcpy>
 800533e:	4629      	mov	r1, r5
 8005340:	4638      	mov	r0, r7
 8005342:	f7ff fbb9 	bl	8004ab8 <_free_r>
 8005346:	e7f1      	b.n	800532c <_realloc_r+0x40>

08005348 <_malloc_usable_size_r>:
 8005348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800534c:	1f18      	subs	r0, r3, #4
 800534e:	2b00      	cmp	r3, #0
 8005350:	bfbc      	itt	lt
 8005352:	580b      	ldrlt	r3, [r1, r0]
 8005354:	18c0      	addlt	r0, r0, r3
 8005356:	4770      	bx	lr

08005358 <__udivmoddi4>:
 8005358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800535c:	9d08      	ldr	r5, [sp, #32]
 800535e:	460f      	mov	r7, r1
 8005360:	4604      	mov	r4, r0
 8005362:	468c      	mov	ip, r1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d148      	bne.n	80053fa <__udivmoddi4+0xa2>
 8005368:	428a      	cmp	r2, r1
 800536a:	4616      	mov	r6, r2
 800536c:	d961      	bls.n	8005432 <__udivmoddi4+0xda>
 800536e:	fab2 f382 	clz	r3, r2
 8005372:	b14b      	cbz	r3, 8005388 <__udivmoddi4+0x30>
 8005374:	f1c3 0220 	rsb	r2, r3, #32
 8005378:	fa01 fc03 	lsl.w	ip, r1, r3
 800537c:	fa20 f202 	lsr.w	r2, r0, r2
 8005380:	409e      	lsls	r6, r3
 8005382:	ea42 0c0c 	orr.w	ip, r2, ip
 8005386:	409c      	lsls	r4, r3
 8005388:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800538c:	b2b7      	uxth	r7, r6
 800538e:	fbbc f1fe 	udiv	r1, ip, lr
 8005392:	0c22      	lsrs	r2, r4, #16
 8005394:	fb0e cc11 	mls	ip, lr, r1, ip
 8005398:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800539c:	fb01 f007 	mul.w	r0, r1, r7
 80053a0:	4290      	cmp	r0, r2
 80053a2:	d909      	bls.n	80053b8 <__udivmoddi4+0x60>
 80053a4:	18b2      	adds	r2, r6, r2
 80053a6:	f101 3cff 	add.w	ip, r1, #4294967295
 80053aa:	f080 80ee 	bcs.w	800558a <__udivmoddi4+0x232>
 80053ae:	4290      	cmp	r0, r2
 80053b0:	f240 80eb 	bls.w	800558a <__udivmoddi4+0x232>
 80053b4:	3902      	subs	r1, #2
 80053b6:	4432      	add	r2, r6
 80053b8:	1a12      	subs	r2, r2, r0
 80053ba:	b2a4      	uxth	r4, r4
 80053bc:	fbb2 f0fe 	udiv	r0, r2, lr
 80053c0:	fb0e 2210 	mls	r2, lr, r0, r2
 80053c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80053c8:	fb00 f707 	mul.w	r7, r0, r7
 80053cc:	42a7      	cmp	r7, r4
 80053ce:	d909      	bls.n	80053e4 <__udivmoddi4+0x8c>
 80053d0:	1934      	adds	r4, r6, r4
 80053d2:	f100 32ff 	add.w	r2, r0, #4294967295
 80053d6:	f080 80da 	bcs.w	800558e <__udivmoddi4+0x236>
 80053da:	42a7      	cmp	r7, r4
 80053dc:	f240 80d7 	bls.w	800558e <__udivmoddi4+0x236>
 80053e0:	4434      	add	r4, r6
 80053e2:	3802      	subs	r0, #2
 80053e4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80053e8:	1be4      	subs	r4, r4, r7
 80053ea:	2100      	movs	r1, #0
 80053ec:	b11d      	cbz	r5, 80053f6 <__udivmoddi4+0x9e>
 80053ee:	40dc      	lsrs	r4, r3
 80053f0:	2300      	movs	r3, #0
 80053f2:	e9c5 4300 	strd	r4, r3, [r5]
 80053f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053fa:	428b      	cmp	r3, r1
 80053fc:	d906      	bls.n	800540c <__udivmoddi4+0xb4>
 80053fe:	b10d      	cbz	r5, 8005404 <__udivmoddi4+0xac>
 8005400:	e9c5 0100 	strd	r0, r1, [r5]
 8005404:	2100      	movs	r1, #0
 8005406:	4608      	mov	r0, r1
 8005408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540c:	fab3 f183 	clz	r1, r3
 8005410:	2900      	cmp	r1, #0
 8005412:	d148      	bne.n	80054a6 <__udivmoddi4+0x14e>
 8005414:	42bb      	cmp	r3, r7
 8005416:	d302      	bcc.n	800541e <__udivmoddi4+0xc6>
 8005418:	4282      	cmp	r2, r0
 800541a:	f200 8107 	bhi.w	800562c <__udivmoddi4+0x2d4>
 800541e:	1a84      	subs	r4, r0, r2
 8005420:	eb67 0203 	sbc.w	r2, r7, r3
 8005424:	2001      	movs	r0, #1
 8005426:	4694      	mov	ip, r2
 8005428:	2d00      	cmp	r5, #0
 800542a:	d0e4      	beq.n	80053f6 <__udivmoddi4+0x9e>
 800542c:	e9c5 4c00 	strd	r4, ip, [r5]
 8005430:	e7e1      	b.n	80053f6 <__udivmoddi4+0x9e>
 8005432:	2a00      	cmp	r2, #0
 8005434:	f000 8092 	beq.w	800555c <__udivmoddi4+0x204>
 8005438:	fab2 f382 	clz	r3, r2
 800543c:	2b00      	cmp	r3, #0
 800543e:	f040 80a8 	bne.w	8005592 <__udivmoddi4+0x23a>
 8005442:	1a8a      	subs	r2, r1, r2
 8005444:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8005448:	fa1f fc86 	uxth.w	ip, r6
 800544c:	2101      	movs	r1, #1
 800544e:	0c20      	lsrs	r0, r4, #16
 8005450:	fbb2 f7fe 	udiv	r7, r2, lr
 8005454:	fb0e 2217 	mls	r2, lr, r7, r2
 8005458:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800545c:	fb0c f007 	mul.w	r0, ip, r7
 8005460:	4290      	cmp	r0, r2
 8005462:	d907      	bls.n	8005474 <__udivmoddi4+0x11c>
 8005464:	18b2      	adds	r2, r6, r2
 8005466:	f107 38ff 	add.w	r8, r7, #4294967295
 800546a:	d202      	bcs.n	8005472 <__udivmoddi4+0x11a>
 800546c:	4290      	cmp	r0, r2
 800546e:	f200 80e2 	bhi.w	8005636 <__udivmoddi4+0x2de>
 8005472:	4647      	mov	r7, r8
 8005474:	1a12      	subs	r2, r2, r0
 8005476:	b2a4      	uxth	r4, r4
 8005478:	fbb2 f0fe 	udiv	r0, r2, lr
 800547c:	fb0e 2210 	mls	r2, lr, r0, r2
 8005480:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005484:	fb0c fc00 	mul.w	ip, ip, r0
 8005488:	45a4      	cmp	ip, r4
 800548a:	d907      	bls.n	800549c <__udivmoddi4+0x144>
 800548c:	1934      	adds	r4, r6, r4
 800548e:	f100 32ff 	add.w	r2, r0, #4294967295
 8005492:	d202      	bcs.n	800549a <__udivmoddi4+0x142>
 8005494:	45a4      	cmp	ip, r4
 8005496:	f200 80cb 	bhi.w	8005630 <__udivmoddi4+0x2d8>
 800549a:	4610      	mov	r0, r2
 800549c:	eba4 040c 	sub.w	r4, r4, ip
 80054a0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80054a4:	e7a2      	b.n	80053ec <__udivmoddi4+0x94>
 80054a6:	f1c1 0620 	rsb	r6, r1, #32
 80054aa:	408b      	lsls	r3, r1
 80054ac:	fa22 fc06 	lsr.w	ip, r2, r6
 80054b0:	ea4c 0c03 	orr.w	ip, ip, r3
 80054b4:	fa07 f401 	lsl.w	r4, r7, r1
 80054b8:	fa20 f306 	lsr.w	r3, r0, r6
 80054bc:	40f7      	lsrs	r7, r6
 80054be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80054c2:	4323      	orrs	r3, r4
 80054c4:	fa00 f801 	lsl.w	r8, r0, r1
 80054c8:	fa1f fe8c 	uxth.w	lr, ip
 80054cc:	fbb7 f0f9 	udiv	r0, r7, r9
 80054d0:	0c1c      	lsrs	r4, r3, #16
 80054d2:	fb09 7710 	mls	r7, r9, r0, r7
 80054d6:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80054da:	fb00 f70e 	mul.w	r7, r0, lr
 80054de:	42a7      	cmp	r7, r4
 80054e0:	fa02 f201 	lsl.w	r2, r2, r1
 80054e4:	d90a      	bls.n	80054fc <__udivmoddi4+0x1a4>
 80054e6:	eb1c 0404 	adds.w	r4, ip, r4
 80054ea:	f100 3aff 	add.w	sl, r0, #4294967295
 80054ee:	f080 809b 	bcs.w	8005628 <__udivmoddi4+0x2d0>
 80054f2:	42a7      	cmp	r7, r4
 80054f4:	f240 8098 	bls.w	8005628 <__udivmoddi4+0x2d0>
 80054f8:	3802      	subs	r0, #2
 80054fa:	4464      	add	r4, ip
 80054fc:	1be4      	subs	r4, r4, r7
 80054fe:	b29f      	uxth	r7, r3
 8005500:	fbb4 f3f9 	udiv	r3, r4, r9
 8005504:	fb09 4413 	mls	r4, r9, r3, r4
 8005508:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 800550c:	fb03 fe0e 	mul.w	lr, r3, lr
 8005510:	45a6      	cmp	lr, r4
 8005512:	d909      	bls.n	8005528 <__udivmoddi4+0x1d0>
 8005514:	eb1c 0404 	adds.w	r4, ip, r4
 8005518:	f103 37ff 	add.w	r7, r3, #4294967295
 800551c:	f080 8082 	bcs.w	8005624 <__udivmoddi4+0x2cc>
 8005520:	45a6      	cmp	lr, r4
 8005522:	d97f      	bls.n	8005624 <__udivmoddi4+0x2cc>
 8005524:	3b02      	subs	r3, #2
 8005526:	4464      	add	r4, ip
 8005528:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800552c:	eba4 040e 	sub.w	r4, r4, lr
 8005530:	fba0 e702 	umull	lr, r7, r0, r2
 8005534:	42bc      	cmp	r4, r7
 8005536:	4673      	mov	r3, lr
 8005538:	46b9      	mov	r9, r7
 800553a:	d363      	bcc.n	8005604 <__udivmoddi4+0x2ac>
 800553c:	d060      	beq.n	8005600 <__udivmoddi4+0x2a8>
 800553e:	b15d      	cbz	r5, 8005558 <__udivmoddi4+0x200>
 8005540:	ebb8 0203 	subs.w	r2, r8, r3
 8005544:	eb64 0409 	sbc.w	r4, r4, r9
 8005548:	fa04 f606 	lsl.w	r6, r4, r6
 800554c:	fa22 f301 	lsr.w	r3, r2, r1
 8005550:	431e      	orrs	r6, r3
 8005552:	40cc      	lsrs	r4, r1
 8005554:	e9c5 6400 	strd	r6, r4, [r5]
 8005558:	2100      	movs	r1, #0
 800555a:	e74c      	b.n	80053f6 <__udivmoddi4+0x9e>
 800555c:	0862      	lsrs	r2, r4, #1
 800555e:	0848      	lsrs	r0, r1, #1
 8005560:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8005564:	0c0b      	lsrs	r3, r1, #16
 8005566:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800556a:	b28a      	uxth	r2, r1
 800556c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005570:	fbb3 f1f6 	udiv	r1, r3, r6
 8005574:	07e4      	lsls	r4, r4, #31
 8005576:	46b4      	mov	ip, r6
 8005578:	4637      	mov	r7, r6
 800557a:	46b6      	mov	lr, r6
 800557c:	231f      	movs	r3, #31
 800557e:	fbb0 f0f6 	udiv	r0, r0, r6
 8005582:	1bd2      	subs	r2, r2, r7
 8005584:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005588:	e761      	b.n	800544e <__udivmoddi4+0xf6>
 800558a:	4661      	mov	r1, ip
 800558c:	e714      	b.n	80053b8 <__udivmoddi4+0x60>
 800558e:	4610      	mov	r0, r2
 8005590:	e728      	b.n	80053e4 <__udivmoddi4+0x8c>
 8005592:	f1c3 0120 	rsb	r1, r3, #32
 8005596:	fa20 f201 	lsr.w	r2, r0, r1
 800559a:	409e      	lsls	r6, r3
 800559c:	fa27 f101 	lsr.w	r1, r7, r1
 80055a0:	409f      	lsls	r7, r3
 80055a2:	433a      	orrs	r2, r7
 80055a4:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80055a8:	fa1f fc86 	uxth.w	ip, r6
 80055ac:	fbb1 f7fe 	udiv	r7, r1, lr
 80055b0:	fb0e 1017 	mls	r0, lr, r7, r1
 80055b4:	0c11      	lsrs	r1, r2, #16
 80055b6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80055ba:	fb07 f80c 	mul.w	r8, r7, ip
 80055be:	4588      	cmp	r8, r1
 80055c0:	fa04 f403 	lsl.w	r4, r4, r3
 80055c4:	d93a      	bls.n	800563c <__udivmoddi4+0x2e4>
 80055c6:	1871      	adds	r1, r6, r1
 80055c8:	f107 30ff 	add.w	r0, r7, #4294967295
 80055cc:	d201      	bcs.n	80055d2 <__udivmoddi4+0x27a>
 80055ce:	4588      	cmp	r8, r1
 80055d0:	d81f      	bhi.n	8005612 <__udivmoddi4+0x2ba>
 80055d2:	eba1 0108 	sub.w	r1, r1, r8
 80055d6:	fbb1 f8fe 	udiv	r8, r1, lr
 80055da:	fb08 f70c 	mul.w	r7, r8, ip
 80055de:	fb0e 1118 	mls	r1, lr, r8, r1
 80055e2:	b292      	uxth	r2, r2
 80055e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80055e8:	42ba      	cmp	r2, r7
 80055ea:	d22f      	bcs.n	800564c <__udivmoddi4+0x2f4>
 80055ec:	18b2      	adds	r2, r6, r2
 80055ee:	f108 31ff 	add.w	r1, r8, #4294967295
 80055f2:	d2c6      	bcs.n	8005582 <__udivmoddi4+0x22a>
 80055f4:	42ba      	cmp	r2, r7
 80055f6:	d2c4      	bcs.n	8005582 <__udivmoddi4+0x22a>
 80055f8:	f1a8 0102 	sub.w	r1, r8, #2
 80055fc:	4432      	add	r2, r6
 80055fe:	e7c0      	b.n	8005582 <__udivmoddi4+0x22a>
 8005600:	45f0      	cmp	r8, lr
 8005602:	d29c      	bcs.n	800553e <__udivmoddi4+0x1e6>
 8005604:	ebbe 0302 	subs.w	r3, lr, r2
 8005608:	eb67 070c 	sbc.w	r7, r7, ip
 800560c:	3801      	subs	r0, #1
 800560e:	46b9      	mov	r9, r7
 8005610:	e795      	b.n	800553e <__udivmoddi4+0x1e6>
 8005612:	eba6 0808 	sub.w	r8, r6, r8
 8005616:	4441      	add	r1, r8
 8005618:	1eb8      	subs	r0, r7, #2
 800561a:	fbb1 f8fe 	udiv	r8, r1, lr
 800561e:	fb08 f70c 	mul.w	r7, r8, ip
 8005622:	e7dc      	b.n	80055de <__udivmoddi4+0x286>
 8005624:	463b      	mov	r3, r7
 8005626:	e77f      	b.n	8005528 <__udivmoddi4+0x1d0>
 8005628:	4650      	mov	r0, sl
 800562a:	e767      	b.n	80054fc <__udivmoddi4+0x1a4>
 800562c:	4608      	mov	r0, r1
 800562e:	e6fb      	b.n	8005428 <__udivmoddi4+0xd0>
 8005630:	4434      	add	r4, r6
 8005632:	3802      	subs	r0, #2
 8005634:	e732      	b.n	800549c <__udivmoddi4+0x144>
 8005636:	3f02      	subs	r7, #2
 8005638:	4432      	add	r2, r6
 800563a:	e71b      	b.n	8005474 <__udivmoddi4+0x11c>
 800563c:	eba1 0108 	sub.w	r1, r1, r8
 8005640:	4638      	mov	r0, r7
 8005642:	fbb1 f8fe 	udiv	r8, r1, lr
 8005646:	fb08 f70c 	mul.w	r7, r8, ip
 800564a:	e7c8      	b.n	80055de <__udivmoddi4+0x286>
 800564c:	4641      	mov	r1, r8
 800564e:	e798      	b.n	8005582 <__udivmoddi4+0x22a>

08005650 <_init>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	bf00      	nop
 8005654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005656:	bc08      	pop	{r3}
 8005658:	469e      	mov	lr, r3
 800565a:	4770      	bx	lr

0800565c <_fini>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	bf00      	nop
 8005660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005662:	bc08      	pop	{r3}
 8005664:	469e      	mov	lr, r3
 8005666:	4770      	bx	lr
