
build/debug/SGC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e0c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08009fac  08009fac  0000afac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2b8  0800a2b8  0000c194  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a2b8  0800a2b8  0000b2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2c0  0800a2c0  0000c194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2c0  0800a2c0  0000b2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2c4  0800a2c4  0000b2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  0800a2c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063c0  20000194  0800a45c  0000c194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006554  0800a45c  0000c554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c194  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000c1c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032114  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007d62  00000000  00000000  0003e311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001528b  00000000  00000000  00046073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f38  00000000  00000000  0005b300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000018af  00000000  00000000  0005d238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022506  00000000  00000000  0005eae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ad72  00000000  00000000  00080fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000534c  00000000  00000000  0008bd60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000001a1  00000000  00000000  000910ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__aeabi_d2uiz>:
 80009ec:	004a      	lsls	r2, r1, #1
 80009ee:	d211      	bcs.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009f4:	d211      	bcs.n	8000a1a <__aeabi_d2uiz+0x2e>
 80009f6:	d50d      	bpl.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a00:	d40e      	bmi.n	8000a20 <__aeabi_d2uiz+0x34>
 8000a02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a1e:	d102      	bne.n	8000a26 <__aeabi_d2uiz+0x3a>
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	4770      	bx	lr
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	4770      	bx	lr

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b80c 	b.w	8000a5c <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f009 f926 	bl	8009c9c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_idiv0>:
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__do_global_dtors_aux>:
 8000a60:	b510      	push	{r4, lr}
 8000a62:	4c05      	ldr	r4, [pc, #20]	@ (8000a78 <__do_global_dtors_aux+0x18>)
 8000a64:	7823      	ldrb	r3, [r4, #0]
 8000a66:	b933      	cbnz	r3, 8000a76 <__do_global_dtors_aux+0x16>
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <__do_global_dtors_aux+0x1c>)
 8000a6a:	b113      	cbz	r3, 8000a72 <__do_global_dtors_aux+0x12>
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <__do_global_dtors_aux+0x20>)
 8000a6e:	f3af 8000 	nop.w
 8000a72:	2301      	movs	r3, #1
 8000a74:	7023      	strb	r3, [r4, #0]
 8000a76:	bd10      	pop	{r4, pc}
 8000a78:	20000194 	.word	0x20000194
 8000a7c:	00000000 	.word	0x00000000
 8000a80:	08009f94 	.word	0x08009f94

08000a84 <frame_dummy>:
 8000a84:	b508      	push	{r3, lr}
 8000a86:	4b03      	ldr	r3, [pc, #12]	@ (8000a94 <frame_dummy+0x10>)
 8000a88:	b11b      	cbz	r3, 8000a92 <frame_dummy+0xe>
 8000a8a:	4903      	ldr	r1, [pc, #12]	@ (8000a98 <frame_dummy+0x14>)
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <frame_dummy+0x18>)
 8000a8e:	f3af 8000 	nop.w
 8000a92:	bd08      	pop	{r3, pc}
 8000a94:	00000000 	.word	0x00000000
 8000a98:	20000198 	.word	0x20000198
 8000a9c:	08009f94 	.word	0x08009f94

08000aa0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000aa0:	b500      	push	{lr}
 8000aa2:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	9301      	str	r3, [sp, #4]
 8000aaa:	9302      	str	r3, [sp, #8]
 8000aac:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aae:	4861      	ldr	r0, [pc, #388]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000ab0:	4a61      	ldr	r2, [pc, #388]	@ (8000c38 <MX_ADC1_Init+0x198>)
 8000ab2:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ab4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ab8:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aba:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000abc:	2201      	movs	r2, #1
 8000abe:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ac0:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ac2:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac8:	495c      	ldr	r1, [pc, #368]	@ (8000c3c <MX_ADC1_Init+0x19c>)
 8000aca:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000acc:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 13;
 8000ace:	210d      	movs	r1, #13
 8000ad0:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ad2:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad6:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad8:	f002 fa2a 	bl	8002f30 <HAL_ADC_Init>
 8000adc:	2800      	cmp	r0, #0
 8000ade:	d17e      	bne.n	8000bde <MX_ADC1_Init+0x13e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	9201      	str	r2, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ae8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aea:	4669      	mov	r1, sp
 8000aec:	4851      	ldr	r0, [pc, #324]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000aee:	f002 fb49 	bl	8003184 <HAL_ADC_ConfigChannel>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	d176      	bne.n	8000be4 <MX_ADC1_Init+0x144>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afe:	4669      	mov	r1, sp
 8000b00:	484c      	ldr	r0, [pc, #304]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b02:	f002 fb3f 	bl	8003184 <HAL_ADC_ConfigChannel>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d16f      	bne.n	8000bea <MX_ADC1_Init+0x14a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b12:	4669      	mov	r1, sp
 8000b14:	4847      	ldr	r0, [pc, #284]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b16:	f002 fb35 	bl	8003184 <HAL_ADC_ConfigChannel>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	d168      	bne.n	8000bf0 <MX_ADC1_Init+0x150>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8000b22:	2304      	movs	r3, #4
 8000b24:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b26:	4669      	mov	r1, sp
 8000b28:	4842      	ldr	r0, [pc, #264]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b2a:	f002 fb2b 	bl	8003184 <HAL_ADC_ConfigChannel>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	d161      	bne.n	8000bf6 <MX_ADC1_Init+0x156>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b32:	2304      	movs	r3, #4
 8000b34:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 5;
 8000b36:	2305      	movs	r3, #5
 8000b38:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3a:	4669      	mov	r1, sp
 8000b3c:	483d      	ldr	r0, [pc, #244]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b3e:	f002 fb21 	bl	8003184 <HAL_ADC_ConfigChannel>
 8000b42:	2800      	cmp	r0, #0
 8000b44:	d15a      	bne.n	8000bfc <MX_ADC1_Init+0x15c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b46:	2305      	movs	r3, #5
 8000b48:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 6;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4e:	4669      	mov	r1, sp
 8000b50:	4838      	ldr	r0, [pc, #224]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b52:	f002 fb17 	bl	8003184 <HAL_ADC_ConfigChannel>
 8000b56:	2800      	cmp	r0, #0
 8000b58:	d153      	bne.n	8000c02 <MX_ADC1_Init+0x162>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b5a:	2306      	movs	r3, #6
 8000b5c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 7;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b62:	4669      	mov	r1, sp
 8000b64:	4833      	ldr	r0, [pc, #204]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b66:	f002 fb0d 	bl	8003184 <HAL_ADC_ConfigChannel>
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d14c      	bne.n	8000c08 <MX_ADC1_Init+0x168>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b6e:	2307      	movs	r3, #7
 8000b70:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 8;
 8000b72:	2308      	movs	r3, #8
 8000b74:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b76:	4669      	mov	r1, sp
 8000b78:	482e      	ldr	r0, [pc, #184]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b7a:	f002 fb03 	bl	8003184 <HAL_ADC_ConfigChannel>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	d145      	bne.n	8000c0e <MX_ADC1_Init+0x16e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b82:	230e      	movs	r3, #14
 8000b84:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 9;
 8000b86:	2309      	movs	r3, #9
 8000b88:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8a:	4669      	mov	r1, sp
 8000b8c:	4829      	ldr	r0, [pc, #164]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b8e:	f002 faf9 	bl	8003184 <HAL_ADC_ConfigChannel>
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d13e      	bne.n	8000c14 <MX_ADC1_Init+0x174>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b96:	230a      	movs	r3, #10
 8000b98:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 10;
 8000b9a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b9c:	4669      	mov	r1, sp
 8000b9e:	4825      	ldr	r0, [pc, #148]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000ba0:	f002 faf0 	bl	8003184 <HAL_ADC_ConfigChannel>
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	d138      	bne.n	8000c1a <MX_ADC1_Init+0x17a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ba8:	230b      	movs	r3, #11
 8000baa:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 11;
 8000bac:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bae:	4669      	mov	r1, sp
 8000bb0:	4820      	ldr	r0, [pc, #128]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000bb2:	f002 fae7 	bl	8003184 <HAL_ADC_ConfigChannel>
 8000bb6:	bb98      	cbnz	r0, 8000c20 <MX_ADC1_Init+0x180>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bb8:	230c      	movs	r3, #12
 8000bba:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 12;
 8000bbc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bbe:	4669      	mov	r1, sp
 8000bc0:	481c      	ldr	r0, [pc, #112]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000bc2:	f002 fadf 	bl	8003184 <HAL_ADC_ConfigChannel>
 8000bc6:	bb70      	cbnz	r0, 8000c26 <MX_ADC1_Init+0x186>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000bc8:	230d      	movs	r3, #13
 8000bca:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 13;
 8000bcc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bce:	4669      	mov	r1, sp
 8000bd0:	4818      	ldr	r0, [pc, #96]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000bd2:	f002 fad7 	bl	8003184 <HAL_ADC_ConfigChannel>
 8000bd6:	bb48      	cbnz	r0, 8000c2c <MX_ADC1_Init+0x18c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bd8:	b005      	add	sp, #20
 8000bda:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000bde:	f001 fa37 	bl	8002050 <Error_Handler>
 8000be2:	e77d      	b.n	8000ae0 <MX_ADC1_Init+0x40>
    Error_Handler();
 8000be4:	f001 fa34 	bl	8002050 <Error_Handler>
 8000be8:	e785      	b.n	8000af6 <MX_ADC1_Init+0x56>
    Error_Handler();
 8000bea:	f001 fa31 	bl	8002050 <Error_Handler>
 8000bee:	e78c      	b.n	8000b0a <MX_ADC1_Init+0x6a>
    Error_Handler();
 8000bf0:	f001 fa2e 	bl	8002050 <Error_Handler>
 8000bf4:	e793      	b.n	8000b1e <MX_ADC1_Init+0x7e>
    Error_Handler();
 8000bf6:	f001 fa2b 	bl	8002050 <Error_Handler>
 8000bfa:	e79a      	b.n	8000b32 <MX_ADC1_Init+0x92>
    Error_Handler();
 8000bfc:	f001 fa28 	bl	8002050 <Error_Handler>
 8000c00:	e7a1      	b.n	8000b46 <MX_ADC1_Init+0xa6>
    Error_Handler();
 8000c02:	f001 fa25 	bl	8002050 <Error_Handler>
 8000c06:	e7a8      	b.n	8000b5a <MX_ADC1_Init+0xba>
    Error_Handler();
 8000c08:	f001 fa22 	bl	8002050 <Error_Handler>
 8000c0c:	e7af      	b.n	8000b6e <MX_ADC1_Init+0xce>
    Error_Handler();
 8000c0e:	f001 fa1f 	bl	8002050 <Error_Handler>
 8000c12:	e7b6      	b.n	8000b82 <MX_ADC1_Init+0xe2>
    Error_Handler();
 8000c14:	f001 fa1c 	bl	8002050 <Error_Handler>
 8000c18:	e7bd      	b.n	8000b96 <MX_ADC1_Init+0xf6>
    Error_Handler();
 8000c1a:	f001 fa19 	bl	8002050 <Error_Handler>
 8000c1e:	e7c3      	b.n	8000ba8 <MX_ADC1_Init+0x108>
    Error_Handler();
 8000c20:	f001 fa16 	bl	8002050 <Error_Handler>
 8000c24:	e7c8      	b.n	8000bb8 <MX_ADC1_Init+0x118>
    Error_Handler();
 8000c26:	f001 fa13 	bl	8002050 <Error_Handler>
 8000c2a:	e7cd      	b.n	8000bc8 <MX_ADC1_Init+0x128>
    Error_Handler();
 8000c2c:	f001 fa10 	bl	8002050 <Error_Handler>
}
 8000c30:	e7d2      	b.n	8000bd8 <MX_ADC1_Init+0x138>
 8000c32:	bf00      	nop
 8000c34:	20000210 	.word	0x20000210
 8000c38:	40012000 	.word	0x40012000
 8000c3c:	0f000001 	.word	0x0f000001

08000c40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c42:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	2300      	movs	r3, #0
 8000c46:	9303      	str	r3, [sp, #12]
 8000c48:	9304      	str	r3, [sp, #16]
 8000c4a:	9305      	str	r3, [sp, #20]
 8000c4c:	9306      	str	r3, [sp, #24]
 8000c4e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000c50:	6802      	ldr	r2, [r0, #0]
 8000c52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000c56:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d001      	beq.n	8000c62 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c5e:	b009      	add	sp, #36	@ 0x24
 8000c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c62:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c64:	2500      	movs	r5, #0
 8000c66:	9500      	str	r5, [sp, #0]
 8000c68:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000c72:	645a      	str	r2, [r3, #68]	@ 0x44
 8000c74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c76:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000c7a:	9200      	str	r2, [sp, #0]
 8000c7c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	9501      	str	r5, [sp, #4]
 8000c80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c82:	f042 0204 	orr.w	r2, r2, #4
 8000c86:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c8a:	f002 0204 	and.w	r2, r2, #4
 8000c8e:	9201      	str	r2, [sp, #4]
 8000c90:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	9502      	str	r5, [sp, #8]
 8000c94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c96:	f042 0201 	orr.w	r2, r2, #1
 8000c9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	9302      	str	r3, [sp, #8]
 8000ca4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD_INPUT1_PIN_Pin|AD_INPUT2_PIN_Pin|AD_INPUT3_PIN_Pin|AD_INPUT4_PIN_Pin
 8000ca6:	231f      	movs	r3, #31
 8000ca8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000caa:	2703      	movs	r7, #3
 8000cac:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cae:	ae03      	add	r6, sp, #12
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	4814      	ldr	r0, [pc, #80]	@ (8000d04 <HAL_ADC_MspInit+0xc4>)
 8000cb4:	f002 fdac 	bl	8003810 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ETB1_SENSE1_Pin|ETB1_SENSE2_Pin|ETB2_SENSE1_Pin|ETB2_SENSE2_Pin
 8000cb8:	23ff      	movs	r3, #255	@ 0xff
 8000cba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	4811      	ldr	r0, [pc, #68]	@ (8000d08 <HAL_ADC_MspInit+0xc8>)
 8000cc4:	f002 fda4 	bl	8003810 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000cc8:	4810      	ldr	r0, [pc, #64]	@ (8000d0c <HAL_ADC_MspInit+0xcc>)
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <HAL_ADC_MspInit+0xd0>)
 8000ccc:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cce:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cd0:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd2:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cd8:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cde:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce4:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ce6:	61c5      	str	r5, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ce8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cec:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cee:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cf0:	f002 fc06 	bl	8003500 <HAL_DMA_Init>
 8000cf4:	b918      	cbnz	r0, 8000cfe <HAL_ADC_MspInit+0xbe>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cf6:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <HAL_ADC_MspInit+0xcc>)
 8000cf8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000cfa:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000cfc:	e7af      	b.n	8000c5e <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000cfe:	f001 f9a7 	bl	8002050 <Error_Handler>
 8000d02:	e7f8      	b.n	8000cf6 <HAL_ADC_MspInit+0xb6>
 8000d04:	40020800 	.word	0x40020800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	200001b0 	.word	0x200001b0
 8000d10:	40026410 	.word	0x40026410

08000d14 <analog_inputs_start_conversion>:
 * 
 * This function triggers the ADC to begin converting the analog signals
 * to digital values.
 */
void analog_inputs_start_conversion()
{
 8000d14:	b508      	push	{r3, lr}
    if (hadc == NULL)
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <analog_inputs_start_conversion+0x20>)
 8000d18:	6818      	ldr	r0, [r3, #0]
 8000d1a:	b110      	cbz	r0, 8000d22 <analog_inputs_start_conversion+0xe>
    {
        return;
    }
    if (conversion_is_happening)
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <analog_inputs_start_conversion+0x24>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b103      	cbz	r3, 8000d24 <analog_inputs_start_conversion+0x10>
        return;
    }
    
    conversion_is_happening = true;
    HAL_ADC_Start_DMA(hadc, (uint32_t*)&analog_data.raw_values, ANALOG_INPUTS_MAX);
}
 8000d22:	bd08      	pop	{r3, pc}
    conversion_is_happening = true;
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <analog_inputs_start_conversion+0x24>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
    HAL_ADC_Start_DMA(hadc, (uint32_t*)&analog_data.raw_values, ANALOG_INPUTS_MAX);
 8000d2a:	220d      	movs	r2, #13
 8000d2c:	4903      	ldr	r1, [pc, #12]	@ (8000d3c <analog_inputs_start_conversion+0x28>)
 8000d2e:	f002 f92b 	bl	8002f88 <HAL_ADC_Start_DMA>
 8000d32:	e7f6      	b.n	8000d22 <analog_inputs_start_conversion+0xe>
 8000d34:	20000278 	.word	0x20000278
 8000d38:	20000258 	.word	0x20000258
 8000d3c:	2000025c 	.word	0x2000025c

08000d40 <HAL_ADC_ConvCpltCallback>:
    conversion_is_happening = false;
 8000d40:	4b01      	ldr	r3, [pc, #4]	@ (8000d48 <HAL_ADC_ConvCpltCallback+0x8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
}
 8000d46:	4770      	bx	lr
 8000d48:	20000258 	.word	0x20000258

08000d4c <analog_inputs_init>:
{
 8000d4c:	b510      	push	{r4, lr}
    if (adc_handle == NULL)
 8000d4e:	b190      	cbz	r0, 8000d76 <analog_inputs_init+0x2a>
    hadc = adc_handle;
 8000d50:	4a0b      	ldr	r2, [pc, #44]	@ (8000d80 <analog_inputs_init+0x34>)
 8000d52:	6010      	str	r0, [r2, #0]
    conversion_is_happening = true;
 8000d54:	2401      	movs	r4, #1
 8000d56:	4a0b      	ldr	r2, [pc, #44]	@ (8000d84 <analog_inputs_init+0x38>)
 8000d58:	7014      	strb	r4, [r2, #0]
    HAL_ADC_Start_DMA(hadc, (uint32_t*)&analog_data.raw_values, ANALOG_INPUTS_MAX);
 8000d5a:	220d      	movs	r2, #13
 8000d5c:	490a      	ldr	r1, [pc, #40]	@ (8000d88 <analog_inputs_init+0x3c>)
 8000d5e:	f002 f913 	bl	8002f88 <HAL_ADC_Start_DMA>
    osTimerId_t timer_id = osTimerNew(
 8000d62:	2300      	movs	r3, #0
 8000d64:	461a      	mov	r2, r3
 8000d66:	4621      	mov	r1, r4
 8000d68:	4808      	ldr	r0, [pc, #32]	@ (8000d8c <analog_inputs_init+0x40>)
 8000d6a:	f000 f8cf 	bl	8000f0c <osTimerNew>
    osTimerStart(timer_id, 1);
 8000d6e:	4621      	mov	r1, r4
 8000d70:	f000 f920 	bl	8000fb4 <osTimerStart>
}
 8000d74:	bd10      	pop	{r4, pc}
        log_error("Analog input init failed! adc handle is null.");
 8000d76:	4806      	ldr	r0, [pc, #24]	@ (8000d90 <analog_inputs_init+0x44>)
 8000d78:	f000 fd06 	bl	8001788 <log_error>
        return;
 8000d7c:	e7fa      	b.n	8000d74 <analog_inputs_init+0x28>
 8000d7e:	bf00      	nop
 8000d80:	20000278 	.word	0x20000278
 8000d84:	20000258 	.word	0x20000258
 8000d88:	2000025c 	.word	0x2000025c
 8000d8c:	08000d15 	.word	0x08000d15
 8000d90:	08009fcc 	.word	0x08009fcc

08000d94 <analog_inputs_get_data>:
#if ANALOG_INPUTS_ADC_BITS == 12
uint16_t analog_inputs_get_data(analog_input_adc_channel_mapping_e input_index)
#elif ANALOG_INPUTS_ADC_BITS == 24
uint32_t analog_inputs_get_data(analog_input_adc_channel_mapping_e input_index)
#endif
{
 8000d94:	b508      	push	{r3, lr}
    if (input_index > (ANALOG_INPUTS_MAX - 1))
 8000d96:	280c      	cmp	r0, #12
 8000d98:	d804      	bhi.n	8000da4 <analog_inputs_get_data+0x10>
    {
        log_error("Invalid index in analog input.");
        return 0;
    }
    return analog_data.raw_values[input_index];
 8000d9a:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <analog_inputs_get_data+0x1c>)
 8000d9c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8000da0:	b280      	uxth	r0, r0
}
 8000da2:	bd08      	pop	{r3, pc}
        log_error("Invalid index in analog input.");
 8000da4:	4803      	ldr	r0, [pc, #12]	@ (8000db4 <analog_inputs_get_data+0x20>)
 8000da6:	f000 fcef 	bl	8001788 <log_error>
        return 0;
 8000daa:	2000      	movs	r0, #0
 8000dac:	e7f9      	b.n	8000da2 <analog_inputs_get_data+0xe>
 8000dae:	bf00      	nop
 8000db0:	2000025c 	.word	0x2000025c
 8000db4:	08009ffc 	.word	0x08009ffc

08000db8 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8000db8:	b508      	push	{r3, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8000dba:	f006 fcf2 	bl	80077a2 <pvTimerGetTimerID>

  if (callb != NULL) {
 8000dbe:	b110      	cbz	r0, 8000dc6 <TimerCallback+0xe>
    callb->func (callb->arg);
 8000dc0:	6802      	ldr	r2, [r0, #0]
 8000dc2:	6840      	ldr	r0, [r0, #4]
 8000dc4:	4790      	blx	r2
  }
}
 8000dc6:	bd08      	pop	{r3, pc}

08000dc8 <SysTick_Handler>:
void SysTick_Handler (void) {
 8000dc8:	b508      	push	{r3, lr}
  SysTick->CTRL;
 8000dca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000dce:	691b      	ldr	r3, [r3, #16]
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8000dd0:	f006 f84a 	bl	8006e68 <xTaskGetSchedulerState>
 8000dd4:	2801      	cmp	r0, #1
 8000dd6:	d100      	bne.n	8000dda <SysTick_Handler+0x12>
}
 8000dd8:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8000dda:	f001 fb1b 	bl	8002414 <xPortSysTickHandler>
}
 8000dde:	e7fb      	b.n	8000dd8 <SysTick_Handler+0x10>

08000de0 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000de0:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000de4:	b92b      	cbnz	r3, 8000df2 <osKernelInitialize+0x12>
    if (KernelState == osKernelInactive) {
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <osKernelInitialize+0x20>)
 8000de8:	6818      	ldr	r0, [r3, #0]
 8000dea:	b928      	cbnz	r0, 8000df8 <osKernelInitialize+0x18>
      KernelState = osKernelReady;
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000df0:	4770      	bx	lr
    stat = osErrorISR;
 8000df2:	f06f 0005 	mvn.w	r0, #5
 8000df6:	4770      	bx	lr
      stat = osError;
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000934 	.word	0x20000934

08000e04 <osKernelStart>:
 8000e04:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000e08:	b973      	cbnz	r3, 8000e28 <osKernelStart+0x24>
    if (KernelState == osKernelReady) {
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <osKernelStart+0x30>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d10d      	bne.n	8000e2e <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8000e12:	b510      	push	{r4, lr}
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	2400      	movs	r4, #0
 8000e16:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <osKernelStart+0x34>)
 8000e18:	77dc      	strb	r4, [r3, #31]
      KernelState = osKernelRunning;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <osKernelStart+0x30>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8000e20:	f005 fd7e 	bl	8006920 <vTaskStartScheduler>
      stat = osOK;
 8000e24:	4620      	mov	r0, r4
}
 8000e26:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8000e28:	f06f 0005 	mvn.w	r0, #5
 8000e2c:	4770      	bx	lr
      stat = osError;
 8000e2e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000e32:	4770      	bx	lr
 8000e34:	20000934 	.word	0x20000934
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3e:	b087      	sub	sp, #28
  hTask = NULL;
 8000e40:	2400      	movs	r4, #0
 8000e42:	9405      	str	r4, [sp, #20]
 8000e44:	f3ef 8405 	mrs	r4, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 8000e48:	bb04      	cbnz	r4, 8000e8c <osThreadNew+0x50>
 8000e4a:	b1f8      	cbz	r0, 8000e8c <osThreadNew+0x50>
    if (attr != NULL) {
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	d034      	beq.n	8000eba <osThreadNew+0x7e>
      if (attr->name != NULL) {
 8000e50:	6815      	ldr	r5, [r2, #0]
      if (attr->priority != osPriorityNone) {
 8000e52:	6993      	ldr	r3, [r2, #24]
 8000e54:	b12b      	cbz	r3, 8000e62 <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 8000e56:	461e      	mov	r6, r3
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	2b37      	cmp	r3, #55	@ 0x37
 8000e5c:	d902      	bls.n	8000e64 <osThreadNew+0x28>
        return (NULL);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	e015      	b.n	8000e8e <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;
 8000e62:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000e64:	6853      	ldr	r3, [r2, #4]
 8000e66:	f013 0f01 	tst.w	r3, #1
 8000e6a:	d13f      	bne.n	8000eec <osThreadNew+0xb0>
      if (attr->stack_size > 0U) {
 8000e6c:	6954      	ldr	r4, [r2, #20]
 8000e6e:	b184      	cbz	r4, 8000e92 <osThreadNew+0x56>
        stack = attr->stack_size / sizeof(StackType_t);
 8000e70:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000e74:	6893      	ldr	r3, [r2, #8]
 8000e76:	b12b      	cbz	r3, 8000e84 <osThreadNew+0x48>
 8000e78:	68d7      	ldr	r7, [r2, #12]
 8000e7a:	2f5b      	cmp	r7, #91	@ 0x5b
 8000e7c:	d902      	bls.n	8000e84 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000e7e:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000e80:	b107      	cbz	r7, 8000e84 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000e82:	b984      	cbnz	r4, 8000ea6 <osThreadNew+0x6a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000e84:	b143      	cbz	r3, 8000e98 <osThreadNew+0x5c>
    mem  = -1;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
      if (mem == 0) {
 8000e8a:	b30b      	cbz	r3, 8000ed0 <osThreadNew+0x94>
  return ((osThreadId_t)hTask);
 8000e8c:	9805      	ldr	r0, [sp, #20]
}
 8000e8e:	b007      	add	sp, #28
 8000e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8000e92:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000e96:	e7ed      	b.n	8000e74 <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000e98:	68d3      	ldr	r3, [r2, #12]
 8000e9a:	b9a3      	cbnz	r3, 8000ec6 <osThreadNew+0x8a>
 8000e9c:	6913      	ldr	r3, [r2, #16]
 8000e9e:	b1ab      	cbz	r3, 8000ecc <osThreadNew+0x90>
    mem  = -1;
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea4:	e7f1      	b.n	8000e8a <osThreadNew+0x4e>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000ea6:	9302      	str	r3, [sp, #8]
 8000ea8:	9701      	str	r7, [sp, #4]
 8000eaa:	9600      	str	r6, [sp, #0]
 8000eac:	460b      	mov	r3, r1
 8000eae:	4662      	mov	r2, ip
 8000eb0:	4629      	mov	r1, r5
 8000eb2:	f005 fcc7 	bl	8006844 <xTaskCreateStatic>
 8000eb6:	9005      	str	r0, [sp, #20]
 8000eb8:	e7e8      	b.n	8000e8c <osThreadNew+0x50>
    name = NULL;
 8000eba:	4615      	mov	r5, r2
      mem = 0;
 8000ebc:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8000ebe:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 8000ec0:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000ec4:	e7e1      	b.n	8000e8a <osThreadNew+0x4e>
    mem  = -1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e7de      	b.n	8000e8a <osThreadNew+0x4e>
          mem = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e7dc      	b.n	8000e8a <osThreadNew+0x4e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000ed0:	ab05      	add	r3, sp, #20
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	9600      	str	r6, [sp, #0]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	fa1f f28c 	uxth.w	r2, ip
 8000edc:	4629      	mov	r1, r5
 8000ede:	f005 fcec 	bl	80068ba <xTaskCreate>
 8000ee2:	2801      	cmp	r0, #1
 8000ee4:	d0d2      	beq.n	8000e8c <osThreadNew+0x50>
            hTask = NULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9305      	str	r3, [sp, #20]
 8000eea:	e7cf      	b.n	8000e8c <osThreadNew+0x50>
        return (NULL);
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7ce      	b.n	8000e8e <osThreadNew+0x52>

08000ef0 <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
 8000ef0:	b508      	push	{r3, lr}
 8000ef2:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000ef6:	b933      	cbnz	r3, 8000f06 <osDelay+0x16>
    if (ticks != 0U) {
 8000ef8:	b908      	cbnz	r0, 8000efe <osDelay+0xe>
    stat = osOK;
 8000efa:	2000      	movs	r0, #0
}
 8000efc:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8000efe:	f005 fe71 	bl	8006be4 <vTaskDelay>
    stat = osOK;
 8000f02:	2000      	movs	r0, #0
 8000f04:	e7fa      	b.n	8000efc <osDelay+0xc>
    stat = osErrorISR;
 8000f06:	f06f 0005 	mvn.w	r0, #5
 8000f0a:	e7f7      	b.n	8000efc <osDelay+0xc>

08000f0c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8000f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f10:	b083      	sub	sp, #12
 8000f12:	f3ef 8705 	mrs	r7, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 8000f16:	2f00      	cmp	r7, #0
 8000f18:	d143      	bne.n	8000fa2 <osTimerNew+0x96>
 8000f1a:	4606      	mov	r6, r0
 8000f1c:	4689      	mov	r9, r1
 8000f1e:	4615      	mov	r5, r2
 8000f20:	461c      	mov	r4, r3
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d03f      	beq.n	8000fa6 <osTimerNew+0x9a>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8000f26:	2008      	movs	r0, #8
 8000f28:	f000 fde8 	bl	8001afc <pvPortMalloc>

    if (callb != NULL) {
 8000f2c:	4680      	mov	r8, r0
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	d03b      	beq.n	8000faa <osTimerNew+0x9e>
      callb->func = func;
 8000f32:	6006      	str	r6, [r0, #0]
      callb->arg  = argument;
 8000f34:	6045      	str	r5, [r0, #4]

      if (type == osTimerOnce) {
 8000f36:	f1b9 0f00 	cmp.w	r9, #0
 8000f3a:	d000      	beq.n	8000f3e <osTimerNew+0x32>
        reload = pdFALSE;
      } else {
        reload = pdTRUE;
 8000f3c:	2701      	movs	r7, #1
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
 8000f3e:	b304      	cbz	r4, 8000f82 <osTimerNew+0x76>
        if (attr->name != NULL) {
 8000f40:	6820      	ldr	r0, [r4, #0]
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8000f42:	68a3      	ldr	r3, [r4, #8]
 8000f44:	b113      	cbz	r3, 8000f4c <osTimerNew+0x40>
 8000f46:	68e2      	ldr	r2, [r4, #12]
 8000f48:	2a2b      	cmp	r2, #43	@ 0x2b
 8000f4a:	d810      	bhi.n	8000f6e <osTimerNew+0x62>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000f4c:	b153      	cbz	r3, 8000f64 <osTimerNew+0x58>
      mem  = -1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
        #endif
      }
      else {
        if (mem == 0) {
 8000f52:	b1db      	cbz	r3, 8000f8c <osTimerNew+0x80>
  hTimer = NULL;
 8000f54:	2400      	movs	r4, #0
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
        vPortFree (callb);
 8000f56:	4640      	mov	r0, r8
 8000f58:	f000 fe52 	bl	8001c00 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	b003      	add	sp, #12
 8000f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000f64:	68e3      	ldr	r3, [r4, #12]
 8000f66:	b17b      	cbz	r3, 8000f88 <osTimerNew+0x7c>
      mem  = -1;
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	e7f1      	b.n	8000f52 <osTimerNew+0x46>
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <osTimerNew+0xa4>)
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	4643      	mov	r3, r8
 8000f76:	463a      	mov	r2, r7
 8000f78:	2101      	movs	r1, #1
 8000f7a:	f006 fa5d 	bl	8007438 <xTimerCreateStatic>
 8000f7e:	4604      	mov	r4, r0
 8000f80:	e00c      	b.n	8000f9c <osTimerNew+0x90>
      name = NULL;
 8000f82:	4620      	mov	r0, r4
        mem = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e7e4      	b.n	8000f52 <osTimerNew+0x46>
            mem = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e7e2      	b.n	8000f52 <osTimerNew+0x46>
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <osTimerNew+0xa4>)
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	4643      	mov	r3, r8
 8000f92:	463a      	mov	r2, r7
 8000f94:	2101      	movs	r1, #1
 8000f96:	f006 fa33 	bl	8007400 <xTimerCreate>
 8000f9a:	4604      	mov	r4, r0
      if ((hTimer == NULL) && (callb != NULL)) {
 8000f9c:	2c00      	cmp	r4, #0
 8000f9e:	d1dd      	bne.n	8000f5c <osTimerNew+0x50>
 8000fa0:	e7d9      	b.n	8000f56 <osTimerNew+0x4a>
  hTimer = NULL;
 8000fa2:	2400      	movs	r4, #0
 8000fa4:	e7da      	b.n	8000f5c <osTimerNew+0x50>
 8000fa6:	2400      	movs	r4, #0
 8000fa8:	e7d8      	b.n	8000f5c <osTimerNew+0x50>
 8000faa:	4604      	mov	r4, r0
  return ((osTimerId_t)hTimer);
 8000fac:	e7d6      	b.n	8000f5c <osTimerNew+0x50>
 8000fae:	bf00      	nop
 8000fb0:	08000db9 	.word	0x08000db9

08000fb4 <osTimerStart>:
 8000fb4:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8000fb8:	b96b      	cbnz	r3, 8000fd6 <osTimerStart+0x22>
 8000fba:	460a      	mov	r2, r1
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
 8000fbc:	b170      	cbz	r0, 8000fdc <osTimerStart+0x28>
osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8000fbe:	b500      	push	{lr}
 8000fc0:	b083      	sub	sp, #12
    stat = osErrorParameter;
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	f006 fa61 	bl	800748c <xTimerGenericCommand>
 8000fca:	2801      	cmp	r0, #1
 8000fcc:	d109      	bne.n	8000fe2 <osTimerStart+0x2e>
      stat = osOK;
 8000fce:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8000fd0:	b003      	add	sp, #12
 8000fd2:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorISR;
 8000fd6:	f06f 0005 	mvn.w	r0, #5
 8000fda:	4770      	bx	lr
    stat = osErrorParameter;
 8000fdc:	f06f 0003 	mvn.w	r0, #3
}
 8000fe0:	4770      	bx	lr
      stat = osErrorResource;
 8000fe2:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8000fe6:	e7f3      	b.n	8000fd0 <osTimerStart+0x1c>

08000fe8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8000fe8:	b570      	push	{r4, r5, r6, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d13a      	bne.n	800106a <osMessageQueueNew+0x82>
 8000ff4:	4614      	mov	r4, r2
 8000ff6:	2800      	cmp	r0, #0
 8000ff8:	d03b      	beq.n	8001072 <osMessageQueueNew+0x8a>
 8000ffa:	2900      	cmp	r1, #0
 8000ffc:	d03b      	beq.n	8001076 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 8000ffe:	b36a      	cbz	r2, 800105c <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001000:	6893      	ldr	r3, [r2, #8]
 8001002:	b14b      	cbz	r3, 8001018 <osMessageQueueNew+0x30>
 8001004:	68d2      	ldr	r2, [r2, #12]
 8001006:	2a4f      	cmp	r2, #79	@ 0x4f
 8001008:	d906      	bls.n	8001018 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800100a:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800100c:	b122      	cbz	r2, 8001018 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800100e:	fb01 f500 	mul.w	r5, r1, r0
 8001012:	6966      	ldr	r6, [r4, #20]
 8001014:	42ae      	cmp	r6, r5
 8001016:	d21b      	bcs.n	8001050 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001018:	b173      	cbz	r3, 8001038 <osMessageQueueNew+0x50>
    mem = -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800101e:	bb63      	cbnz	r3, 800107a <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8001020:	2200      	movs	r2, #0
 8001022:	f001 fc18 	bl	8002856 <xQueueGenericCreate>
 8001026:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001028:	b305      	cbz	r5, 800106c <osMessageQueueNew+0x84>
      if (attr != NULL) {
 800102a:	b104      	cbz	r4, 800102e <osMessageQueueNew+0x46>
        name = attr->name;
 800102c:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800102e:	4621      	mov	r1, r4
 8001030:	4628      	mov	r0, r5
 8001032:	f001 fe65 	bl	8002d00 <vQueueAddToRegistry>
 8001036:	e019      	b.n	800106c <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001038:	68e3      	ldr	r3, [r4, #12]
 800103a:	b98b      	cbnz	r3, 8001060 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800103c:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800103e:	b113      	cbz	r3, 8001046 <osMessageQueueNew+0x5e>
    mem = -1;
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	e7eb      	b.n	800101e <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001046:	6963      	ldr	r3, [r4, #20]
 8001048:	b16b      	cbz	r3, 8001066 <osMessageQueueNew+0x7e>
    mem = -1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	e7e6      	b.n	800101e <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001050:	2500      	movs	r5, #0
 8001052:	9500      	str	r5, [sp, #0]
 8001054:	f001 fbb5 	bl	80027c2 <xQueueGenericCreateStatic>
 8001058:	4605      	mov	r5, r0
 800105a:	e7e5      	b.n	8001028 <osMessageQueueNew+0x40>
      mem = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	e7de      	b.n	800101e <osMessageQueueNew+0x36>
    mem = -1;
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	e7db      	b.n	800101e <osMessageQueueNew+0x36>
          mem = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	e7d9      	b.n	800101e <osMessageQueueNew+0x36>
  hQueue = NULL;
 800106a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800106c:	4628      	mov	r0, r5
 800106e:	b002      	add	sp, #8
 8001070:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8001072:	2500      	movs	r5, #0
 8001074:	e7fa      	b.n	800106c <osMessageQueueNew+0x84>
 8001076:	2500      	movs	r5, #0
 8001078:	e7f8      	b.n	800106c <osMessageQueueNew+0x84>
 800107a:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800107c:	e7f6      	b.n	800106c <osMessageQueueNew+0x84>

0800107e <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800107e:	b510      	push	{r4, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	461c      	mov	r4, r3
 8001084:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8001088:	b1c3      	cbz	r3, 80010bc <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800108a:	b318      	cbz	r0, 80010d4 <osMessageQueuePut+0x56>
 800108c:	b329      	cbz	r1, 80010da <osMessageQueuePut+0x5c>
 800108e:	bb3c      	cbnz	r4, 80010e0 <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8001090:	2300      	movs	r3, #0
 8001092:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8001094:	aa01      	add	r2, sp, #4
 8001096:	f001 fcc6 	bl	8002a26 <xQueueGenericSendFromISR>
 800109a:	2801      	cmp	r0, #1
 800109c:	d123      	bne.n	80010e6 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800109e:	9801      	ldr	r0, [sp, #4]
 80010a0:	b150      	cbz	r0, 80010b8 <osMessageQueuePut+0x3a>
 80010a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80010a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80010ae:	f3bf 8f4f 	dsb	sy
 80010b2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80010b6:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80010b8:	b002      	add	sp, #8
 80010ba:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80010bc:	b1b0      	cbz	r0, 80010ec <osMessageQueuePut+0x6e>
 80010be:	b1c1      	cbz	r1, 80010f2 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	4622      	mov	r2, r4
 80010c4:	f001 fbeb 	bl	800289e <xQueueGenericSend>
 80010c8:	2801      	cmp	r0, #1
 80010ca:	d015      	beq.n	80010f8 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 80010cc:	b1b4      	cbz	r4, 80010fc <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 80010ce:	f06f 0001 	mvn.w	r0, #1
 80010d2:	e7f1      	b.n	80010b8 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 80010d4:	f06f 0003 	mvn.w	r0, #3
 80010d8:	e7ee      	b.n	80010b8 <osMessageQueuePut+0x3a>
 80010da:	f06f 0003 	mvn.w	r0, #3
 80010de:	e7eb      	b.n	80010b8 <osMessageQueuePut+0x3a>
 80010e0:	f06f 0003 	mvn.w	r0, #3
 80010e4:	e7e8      	b.n	80010b8 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 80010e6:	f06f 0002 	mvn.w	r0, #2
 80010ea:	e7e5      	b.n	80010b8 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 80010ec:	f06f 0003 	mvn.w	r0, #3
 80010f0:	e7e2      	b.n	80010b8 <osMessageQueuePut+0x3a>
 80010f2:	f06f 0003 	mvn.w	r0, #3
 80010f6:	e7df      	b.n	80010b8 <osMessageQueuePut+0x3a>
  stat = osOK;
 80010f8:	2000      	movs	r0, #0
 80010fa:	e7dd      	b.n	80010b8 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 80010fc:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8001100:	e7da      	b.n	80010b8 <osMessageQueuePut+0x3a>

08001102 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8001102:	b510      	push	{r4, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	461c      	mov	r4, r3
 8001108:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800110c:	b1c3      	cbz	r3, 8001140 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800110e:	b310      	cbz	r0, 8001156 <osMessageQueueGet+0x54>
 8001110:	b321      	cbz	r1, 800115c <osMessageQueueGet+0x5a>
 8001112:	bb34      	cbnz	r4, 8001162 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8001114:	2300      	movs	r3, #0
 8001116:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8001118:	aa01      	add	r2, sp, #4
 800111a:	f001 fd9a 	bl	8002c52 <xQueueReceiveFromISR>
 800111e:	2801      	cmp	r0, #1
 8001120:	d122      	bne.n	8001168 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8001122:	9801      	ldr	r0, [sp, #4]
 8001124:	b150      	cbz	r0, 800113c <osMessageQueueGet+0x3a>
 8001126:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800112a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800112e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001132:	f3bf 8f4f 	dsb	sy
 8001136:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800113a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800113c:	b002      	add	sp, #8
 800113e:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001140:	b1a8      	cbz	r0, 800116e <osMessageQueueGet+0x6c>
 8001142:	b1b9      	cbz	r1, 8001174 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001144:	4622      	mov	r2, r4
 8001146:	f001 fcd5 	bl	8002af4 <xQueueReceive>
 800114a:	2801      	cmp	r0, #1
 800114c:	d015      	beq.n	800117a <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 800114e:	b1b4      	cbz	r4, 800117e <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8001150:	f06f 0001 	mvn.w	r0, #1
 8001154:	e7f2      	b.n	800113c <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8001156:	f06f 0003 	mvn.w	r0, #3
 800115a:	e7ef      	b.n	800113c <osMessageQueueGet+0x3a>
 800115c:	f06f 0003 	mvn.w	r0, #3
 8001160:	e7ec      	b.n	800113c <osMessageQueueGet+0x3a>
 8001162:	f06f 0003 	mvn.w	r0, #3
 8001166:	e7e9      	b.n	800113c <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8001168:	f06f 0002 	mvn.w	r0, #2
 800116c:	e7e6      	b.n	800113c <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800116e:	f06f 0003 	mvn.w	r0, #3
 8001172:	e7e3      	b.n	800113c <osMessageQueueGet+0x3a>
 8001174:	f06f 0003 	mvn.w	r0, #3
 8001178:	e7e0      	b.n	800113c <osMessageQueueGet+0x3a>
  stat = osOK;
 800117a:	2000      	movs	r0, #0
 800117c:	e7de      	b.n	800113c <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 800117e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8001182:	e7db      	b.n	800113c <osMessageQueueGet+0x3a>

08001184 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001184:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <vApplicationGetIdleTaskMemory+0x10>)
 8001186:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <vApplicationGetIdleTaskMemory+0x14>)
 800118a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800118c:	2380      	movs	r3, #128	@ 0x80
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200008d8 	.word	0x200008d8
 8001198:	200006d8 	.word	0x200006d8

0800119c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800119c:	4b03      	ldr	r3, [pc, #12]	@ (80011ac <vApplicationGetTimerTaskMemory+0x10>)
 800119e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80011a0:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <vApplicationGetTimerTaskMemory+0x14>)
 80011a2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80011a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011a8:	6013      	str	r3, [r2, #0]
}
 80011aa:	4770      	bx	lr
 80011ac:	2000067c 	.word	0x2000067c
 80011b0:	2000027c 	.word	0x2000027c

080011b4 <comm_task_entry>:
    };
    comm_task_handle = osThreadNew(comm_task_entry, NULL, &comm_task_attributes);
}

// --- Task Entry Function ---
void comm_task_entry(void *argument) {
 80011b4:	b500      	push	{lr}
 80011b6:	b093      	sub	sp, #76	@ 0x4c
 80011b8:	e003      	b.n	80011c2 <comm_task_entry+0xe>
            continue;// ignore null commands
        }
        else if (command == TS_QUERY_COMMAND || command == TS_HELLO_COMMAND)
        {
            
            CDC_Transmit_FS(TS_SIGNATURE, sizeof(TS_SIGNATURE));
 80011ba:	2104      	movs	r1, #4
 80011bc:	4816      	ldr	r0, [pc, #88]	@ (8001218 <comm_task_entry+0x64>)
 80011be:	f007 f89f 	bl	8008300 <CDC_Transmit_FS>
        osStatus_t status = osMessageQueueGet(usb_rx_queue_handle, &received_packet, NULL, osWaitForever); // 1-second timeout
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	2200      	movs	r2, #0
 80011c8:	a901      	add	r1, sp, #4
 80011ca:	4814      	ldr	r0, [pc, #80]	@ (800121c <comm_task_entry+0x68>)
 80011cc:	6800      	ldr	r0, [r0, #0]
 80011ce:	f7ff ff98 	bl	8001102 <osMessageQueueGet>
        if (status != osOK) { continue; }
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d1f5      	bne.n	80011c2 <comm_task_entry+0xe>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80011d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011da:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 80011de:	f500 3002 	add.w	r0, r0, #133120	@ 0x20800
 80011e2:	f002 fc06 	bl	80039f2 <HAL_GPIO_TogglePin>
        command = received_packet.data[0];
 80011e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80011ea:	f88d 3003 	strb.w	r3, [sp, #3]
        if (command == 0)
 80011ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0e5      	beq.n	80011c2 <comm_task_entry+0xe>
        else if (command == TS_QUERY_COMMAND || command == TS_HELLO_COMMAND)
 80011f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80011fa:	2b51      	cmp	r3, #81	@ 0x51
 80011fc:	d0dd      	beq.n	80011ba <comm_task_entry+0x6>
 80011fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001202:	2b53      	cmp	r3, #83	@ 0x53
 8001204:	d0d9      	beq.n	80011ba <comm_task_entry+0x6>
        }
        else if (command == TS_COMMAND_F)
 8001206:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800120a:	2b46      	cmp	r3, #70	@ 0x46
 800120c:	d1d9      	bne.n	80011c2 <comm_task_entry+0xe>
        {
            CDC_Transmit_FS(TS_PROTOCOL, sizeof(TS_PROTOCOL));
 800120e:	2104      	movs	r1, #4
 8001210:	4803      	ldr	r0, [pc, #12]	@ (8001220 <comm_task_entry+0x6c>)
 8001212:	f007 f875 	bl	8008300 <CDC_Transmit_FS>
 8001216:	e7d4      	b.n	80011c2 <comm_task_entry+0xe>
 8001218:	0800a218 	.word	0x0800a218
 800121c:	2000093c 	.word	0x2000093c
 8001220:	0800a01c 	.word	0x0800a01c

08001224 <comms_init>:
{
 8001224:	b510      	push	{r4, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
    usb_rx_queue_handle = osMessageQueueNew(
 8001228:	2200      	movs	r2, #0
 800122a:	2144      	movs	r1, #68	@ 0x44
 800122c:	2008      	movs	r0, #8
 800122e:	f7ff fedb 	bl	8000fe8 <osMessageQueueNew>
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <comms_init+0x40>)
 8001234:	6018      	str	r0, [r3, #0]
    const osThreadAttr_t comm_task_attributes = {
 8001236:	ac01      	add	r4, sp, #4
 8001238:	2224      	movs	r2, #36	@ 0x24
 800123a:	2100      	movs	r1, #0
 800123c:	4620      	mov	r0, r4
 800123e:	f008 f8a9 	bl	8009394 <memset>
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <comms_init+0x44>)
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800124a:	9306      	str	r3, [sp, #24]
 800124c:	2318      	movs	r3, #24
 800124e:	9307      	str	r3, [sp, #28]
    comm_task_handle = osThreadNew(comm_task_entry, NULL, &comm_task_attributes);
 8001250:	4622      	mov	r2, r4
 8001252:	2100      	movs	r1, #0
 8001254:	4805      	ldr	r0, [pc, #20]	@ (800126c <comms_init+0x48>)
 8001256:	f7ff fdf1 	bl	8000e3c <osThreadNew>
 800125a:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <comms_init+0x4c>)
 800125c:	6018      	str	r0, [r3, #0]
}
 800125e:	b00a      	add	sp, #40	@ 0x28
 8001260:	bd10      	pop	{r4, pc}
 8001262:	bf00      	nop
 8001264:	2000093c 	.word	0x2000093c
 8001268:	0800a020 	.word	0x0800a020
 800126c:	080011b5 	.word	0x080011b5
 8001270:	20000938 	.word	0x20000938

08001274 <controller_init>:
engine_s engine = {0};

static electronic_throttle_s etb1 = {0};

void controller_init()
{
 8001274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001278:	b08a      	sub	sp, #40	@ 0x28
    engine.total_revolutions = 0;
 800127a:	4e2a      	ldr	r6, [pc, #168]	@ (8001324 <controller_init+0xb0>)
 800127c:	2700      	movs	r7, #0
 800127e:	6037      	str	r7, [r6, #0]
    engine.crankshaft_angle = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	6073      	str	r3, [r6, #4]
    engine.camshaft_angle = 0;
 8001284:	60b3      	str	r3, [r6, #8]
    engine.rpm = 0;
 8001286:	60f3      	str	r3, [r6, #12]
    engine.cylinder_count = 4;
 8001288:	f04f 0804 	mov.w	r8, #4
 800128c:	f886 8010 	strb.w	r8, [r6, #16]
    engine.spinning_state = SS_STOPPED;
 8001290:	7477      	strb	r7, [r6, #17]
    engine.firing_interval = 180.0f;
 8001292:	4b25      	ldr	r3, [pc, #148]	@ (8001328 <controller_init+0xb4>)
 8001294:	6173      	str	r3, [r6, #20]
    // engine.trigger = .....;

    configuration.ignition_dwell = (float_time_ms_t)3;
 8001296:	4d25      	ldr	r5, [pc, #148]	@ (800132c <controller_init+0xb8>)
 8001298:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <controller_init+0xbc>)
 800129a:	61eb      	str	r3, [r5, #28]
    configuration.ignition_mode = IM_WASTED_SPARK;
 800129c:	2303      	movs	r3, #3
 800129e:	762b      	strb	r3, [r5, #24]

    configuration.trigger.filtering = TF_FILTERING_NONE;
 80012a0:	71af      	strb	r7, [r5, #6]
    configuration.trigger.full_teeth = 60;
 80012a2:	233c      	movs	r3, #60	@ 0x3c
 80012a4:	71eb      	strb	r3, [r5, #7]
    configuration.trigger.missing_teeth = 2;
 80012a6:	2302      	movs	r3, #2
 80012a8:	722b      	strb	r3, [r5, #8]
    configuration.cranking_rpm_threshold = 400;
 80012aa:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <controller_init+0xc0>)
 80012ac:	60eb      	str	r3, [r5, #12]
    
    ignition_output_conf_s ignition_output_conf =
 80012ae:	f10d 0c08 	add.w	ip, sp, #8
 80012b2:	4c21      	ldr	r4, [pc, #132]	@ (8001338 <controller_init+0xc4>)
 80012b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80012ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        .output[0] = {.gpio = IGNITION_OUTPUT1_GPIO_Port, .pin = IGNITION_OUTPUT1_Pin},
        .output[1] = {.gpio = IGNITION_OUTPUT2_GPIO_Port, .pin = IGNITION_OUTPUT2_Pin},
        .output[2] = {.gpio = IGNITION_OUTPUT3_GPIO_Port, .pin = IGNITION_OUTPUT3_Pin},
        .output[3] = {.gpio = IGNITION_OUTPUT4_GPIO_Port, .pin = IGNITION_OUTPUT4_Pin}
    };
    configuration.governer_pid.Kp = 1;
 80012c2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012c6:	67eb      	str	r3, [r5, #124]	@ 0x7c
    configuration.cranking_throttle = 10;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <controller_init+0xc8>)
 80012ca:	616b      	str	r3, [r5, #20]
    configuration.governer_target_rpm = 1000;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <controller_init+0xcc>)
 80012ce:	65eb      	str	r3, [r5, #92]	@ 0x5c

    controller_timing_start(&htim2);
 80012d0:	481c      	ldr	r0, [pc, #112]	@ (8001344 <controller_init+0xd0>)
 80012d2:	f006 fa79 	bl	80077c8 <controller_timing_start>
    analog_inputs_init(&hadc1);
 80012d6:	481c      	ldr	r0, [pc, #112]	@ (8001348 <controller_init+0xd4>)
 80012d8:	f7ff fd38 	bl	8000d4c <analog_inputs_init>
    trigger_init(&engine.trigger);
 80012dc:	f106 0018 	add.w	r0, r6, #24
 80012e0:	f006 fbde 	bl	8007aa0 <trigger_init>
    ignition_init(&ignition_output_conf);
 80012e4:	a802      	add	r0, sp, #8
 80012e6:	f000 fd25 	bl	8001d34 <ignition_init>
    comms_init();
 80012ea:	f7ff ff9b 	bl	8001224 <comms_init>
    // this has to eventually use the configuration 
    static pid_t etb1_pid = {.Kp = 10, .Ki = 0, .Kd = 0, .setpoint = 50};
    pid_init(&etb1_pid);
 80012ee:	4d17      	ldr	r5, [pc, #92]	@ (800134c <controller_init+0xd8>)
 80012f0:	4628      	mov	r0, r5
 80012f2:	f000 ff1f 	bl	8002134 <pid_init>
    static sensor_tps_s etb1_tps = {.analog_channel = ANALOG_INPUT_ETB1_SENSE1, .closed_throttle_adc_value = 0, .wide_open_throttle_adc_value = 4095, .is_inverted = false};
    static dc_motor_s etb1_motor = {0};
    dc_motor_init(&etb1_motor, &htim1, TIM_CHANNEL_1, TIM_CHANNEL_2, 1000);
 80012f6:	4e16      	ldr	r6, [pc, #88]	@ (8001350 <controller_init+0xdc>)
 80012f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	4643      	mov	r3, r8
 8001300:	463a      	mov	r2, r7
 8001302:	4914      	ldr	r1, [pc, #80]	@ (8001354 <controller_init+0xe0>)
 8001304:	4630      	mov	r0, r6
 8001306:	f000 f955 	bl	80015b4 <dc_motor_init>
    electronic_throttle_init(&etb1, &etb1_pid, &etb1_tps, &etb1_motor);
 800130a:	4c13      	ldr	r4, [pc, #76]	@ (8001358 <controller_init+0xe4>)
 800130c:	4633      	mov	r3, r6
 800130e:	4a13      	ldr	r2, [pc, #76]	@ (800135c <controller_init+0xe8>)
 8001310:	4629      	mov	r1, r5
 8001312:	4620      	mov	r0, r4
 8001314:	f000 f9fc 	bl	8001710 <electronic_throttle_init>

    governer_init(&etb1);
 8001318:	4620      	mov	r0, r4
 800131a:	f000 faed 	bl	80018f8 <governer_init>

    //HAL_FLASH_Unlock();
    //EE_Init();
}
 800131e:	b00a      	add	sp, #40	@ 0x28
 8001320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001324:	20000964 	.word	0x20000964
 8001328:	43340000 	.word	0x43340000
 800132c:	200009a4 	.word	0x200009a4
 8001330:	40400000 	.word	0x40400000
 8001334:	43c80000 	.word	0x43c80000
 8001338:	08009fac 	.word	0x08009fac
 800133c:	41200000 	.word	0x41200000
 8001340:	447a0000 	.word	0x447a0000
 8001344:	20004cc4 	.word	0x20004cc4
 8001348:	20000210 	.word	0x20000210
 800134c:	20000008 	.word	0x20000008
 8001350:	20000940 	.word	0x20000940
 8001354:	20004d0c 	.word	0x20004d0c
 8001358:	20000950 	.word	0x20000950
 800135c:	20000000 	.word	0x20000000

08001360 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001360:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001362:	4805      	ldr	r0, [pc, #20]	@ (8001378 <MX_CRC_Init+0x18>)
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <MX_CRC_Init+0x1c>)
 8001366:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001368:	f002 f83e 	bl	80033e8 <HAL_CRC_Init>
 800136c:	b900      	cbnz	r0, 8001370 <MX_CRC_Init+0x10>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800136e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001370:	f000 fe6e 	bl	8002050 <Error_Handler>
}
 8001374:	e7fb      	b.n	800136e <MX_CRC_Init+0xe>
 8001376:	bf00      	nop
 8001378:	20000a48 	.word	0x20000a48
 800137c:	40023000 	.word	0x40023000

08001380 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001380:	6802      	ldr	r2, [r0, #0]
 8001382:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <HAL_CRC_MspInit+0x28>)
 8001384:	429a      	cmp	r2, r3
 8001386:	d000      	beq.n	800138a <HAL_CRC_MspInit+0xa>
 8001388:	4770      	bx	lr
{
 800138a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_CRC_MspInit+0x2c>)
 8001392:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001394:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001398:	631a      	str	r2, [r3, #48]	@ 0x30
 800139a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80013a4:	b002      	add	sp, #8
 80013a6:	4770      	bx	lr
 80013a8:	40023000 	.word	0x40023000
 80013ac:	40023800 	.word	0x40023800

080013b0 <dc_motor_set>:
 * @param dir the desired direction of the motor
 * @param duty_cycle a number between 0 and 255 not a percentage
 */
void dc_motor_set(dc_motor_s *motor, dc_motor_direction_e dir, uint8_t duty_cycle)
{
	if (motor == NULL || motor->timer == NULL)
 80013b0:	2800      	cmp	r0, #0
 80013b2:	f000 809b 	beq.w	80014ec <dc_motor_set+0x13c>
{
 80013b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013ba:	460d      	mov	r5, r1
 80013bc:	4616      	mov	r6, r2
 80013be:	4604      	mov	r4, r0
	if (motor == NULL || motor->timer == NULL)
 80013c0:	6807      	ldr	r7, [r0, #0]
 80013c2:	2f00      	cmp	r7, #0
 80013c4:	d02d      	beq.n	8001422 <dc_motor_set+0x72>
	if (duty_cycle < 0 || duty_cycle > 255)
	{
		return;
	}
	// Map duty cycle (0-255) to timer compare value
	uint32_t compare_value = (uint32_t)((duty_cycle / 255.0) * __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 80013c6:	4610      	mov	r0, r2
 80013c8:	f7ff f894 	bl	80004f4 <__aeabi_i2d>
 80013cc:	a348      	add	r3, pc, #288	@ (adr r3, 80014f0 <dc_motor_set+0x140>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f7ff fa23 	bl	800081c <__aeabi_ddiv>
 80013d6:	4680      	mov	r8, r0
 80013d8:	4689      	mov	r9, r1
 80013da:	683f      	ldr	r7, [r7, #0]
 80013dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013de:	f7ff f879 	bl	80004d4 <__aeabi_ui2d>
 80013e2:	4642      	mov	r2, r8
 80013e4:	464b      	mov	r3, r9
 80013e6:	f7ff f8ef 	bl	80005c8 <__aeabi_dmul>
 80013ea:	f7ff faff 	bl	80009ec <__aeabi_d2uiz>
	
	switch (dir)
 80013ee:	b16d      	cbz	r5, 800140c <dc_motor_set+0x5c>
 80013f0:	2d01      	cmp	r5, #1
 80013f2:	d035      	beq.n	8001460 <dc_motor_set+0xb0>
	case MD_REVERSE:
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
		break;
	default:
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 80013f4:	6863      	ldr	r3, [r4, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d158      	bne.n	80014ac <dc_motor_set+0xfc>
 80013fa:	637b      	str	r3, [r7, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 80013fc:	68a3      	ldr	r3, [r4, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d161      	bne.n	80014c6 <dc_motor_set+0x116>
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2200      	movs	r2, #0
 8001408:	635a      	str	r2, [r3, #52]	@ 0x34
 800140a:	e008      	b.n	800141e <dc_motor_set+0x6e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, compare_value);
 800140c:	6863      	ldr	r3, [r4, #4]
 800140e:	b953      	cbnz	r3, 8001426 <dc_motor_set+0x76>
 8001410:	6378      	str	r0, [r7, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001412:	68a3      	ldr	r3, [r4, #8]
 8001414:	b98b      	cbnz	r3, 800143a <dc_motor_set+0x8a>
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2200      	movs	r2, #0
 800141c:	635a      	str	r2, [r3, #52]	@ 0x34
		/**
		 * @todo throw an error
		 */
		break;
	}
	motor->current_duty_cycle = duty_cycle;
 800141e:	7366      	strb	r6, [r4, #13]
	motor->current_direction = dir;
 8001420:	7325      	strb	r5, [r4, #12]
}
 8001422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, compare_value);
 8001426:	2b04      	cmp	r3, #4
 8001428:	d003      	beq.n	8001432 <dc_motor_set+0x82>
 800142a:	2b08      	cmp	r3, #8
 800142c:	d003      	beq.n	8001436 <dc_motor_set+0x86>
 800142e:	6438      	str	r0, [r7, #64]	@ 0x40
 8001430:	e7ef      	b.n	8001412 <dc_motor_set+0x62>
 8001432:	63b8      	str	r0, [r7, #56]	@ 0x38
 8001434:	e7ed      	b.n	8001412 <dc_motor_set+0x62>
 8001436:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001438:	e7eb      	b.n	8001412 <dc_motor_set+0x62>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 800143a:	2b04      	cmp	r3, #4
 800143c:	d006      	beq.n	800144c <dc_motor_set+0x9c>
 800143e:	2b08      	cmp	r3, #8
 8001440:	d009      	beq.n	8001456 <dc_motor_set+0xa6>
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	641a      	str	r2, [r3, #64]	@ 0x40
 800144a:	e7e8      	b.n	800141e <dc_motor_set+0x6e>
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	639a      	str	r2, [r3, #56]	@ 0x38
 8001454:	e7e3      	b.n	800141e <dc_motor_set+0x6e>
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2200      	movs	r2, #0
 800145c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800145e:	e7de      	b.n	800141e <dc_motor_set+0x6e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001460:	6863      	ldr	r3, [r4, #4]
 8001462:	b933      	cbnz	r3, 8001472 <dc_motor_set+0xc2>
 8001464:	637b      	str	r3, [r7, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
 8001466:	68a3      	ldr	r3, [r4, #8]
 8001468:	b983      	cbnz	r3, 800148c <dc_motor_set+0xdc>
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6358      	str	r0, [r3, #52]	@ 0x34
 8001470:	e7d5      	b.n	800141e <dc_motor_set+0x6e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001472:	2b04      	cmp	r3, #4
 8001474:	d004      	beq.n	8001480 <dc_motor_set+0xd0>
 8001476:	2b08      	cmp	r3, #8
 8001478:	d005      	beq.n	8001486 <dc_motor_set+0xd6>
 800147a:	2300      	movs	r3, #0
 800147c:	643b      	str	r3, [r7, #64]	@ 0x40
 800147e:	e7f2      	b.n	8001466 <dc_motor_set+0xb6>
 8001480:	2300      	movs	r3, #0
 8001482:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001484:	e7ef      	b.n	8001466 <dc_motor_set+0xb6>
 8001486:	2300      	movs	r3, #0
 8001488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800148a:	e7ec      	b.n	8001466 <dc_motor_set+0xb6>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
 800148c:	2b04      	cmp	r3, #4
 800148e:	d005      	beq.n	800149c <dc_motor_set+0xec>
 8001490:	2b08      	cmp	r3, #8
 8001492:	d007      	beq.n	80014a4 <dc_motor_set+0xf4>
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6418      	str	r0, [r3, #64]	@ 0x40
 800149a:	e7c0      	b.n	800141e <dc_motor_set+0x6e>
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6398      	str	r0, [r3, #56]	@ 0x38
 80014a2:	e7bc      	b.n	800141e <dc_motor_set+0x6e>
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	63d8      	str	r0, [r3, #60]	@ 0x3c
 80014aa:	e7b8      	b.n	800141e <dc_motor_set+0x6e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d004      	beq.n	80014ba <dc_motor_set+0x10a>
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d005      	beq.n	80014c0 <dc_motor_set+0x110>
 80014b4:	2300      	movs	r3, #0
 80014b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80014b8:	e7a0      	b.n	80013fc <dc_motor_set+0x4c>
 80014ba:	2300      	movs	r3, #0
 80014bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014be:	e79d      	b.n	80013fc <dc_motor_set+0x4c>
 80014c0:	2300      	movs	r3, #0
 80014c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014c4:	e79a      	b.n	80013fc <dc_motor_set+0x4c>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d006      	beq.n	80014d8 <dc_motor_set+0x128>
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d009      	beq.n	80014e2 <dc_motor_set+0x132>
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2200      	movs	r2, #0
 80014d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80014d6:	e7a2      	b.n	800141e <dc_motor_set+0x6e>
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2200      	movs	r2, #0
 80014de:	639a      	str	r2, [r3, #56]	@ 0x38
 80014e0:	e79d      	b.n	800141e <dc_motor_set+0x6e>
 80014e2:	6823      	ldr	r3, [r4, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2200      	movs	r2, #0
 80014e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014ea:	e798      	b.n	800141e <dc_motor_set+0x6e>
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	00000000 	.word	0x00000000
 80014f4:	406fe000 	.word	0x406fe000

080014f8 <dc_motor_disable>:
/**
 * @brief disables the motor.
 */
void dc_motor_disable(dc_motor_s *motor)
{
	if (motor == NULL || motor->timer == NULL)
 80014f8:	4603      	mov	r3, r0
 80014fa:	b178      	cbz	r0, 800151c <dc_motor_disable+0x24>
 80014fc:	6802      	ldr	r2, [r0, #0]
 80014fe:	b16a      	cbz	r2, 800151c <dc_motor_disable+0x24>
		 * @todo throw an error
		 */
	}

	// Set duty cycle to 0 for both channels
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001500:	6841      	ldr	r1, [r0, #4]
 8001502:	b961      	cbnz	r1, 800151e <dc_motor_disable+0x26>
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	6351      	str	r1, [r2, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	b9c2      	cbnz	r2, 800153e <dc_motor_disable+0x46>
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	2100      	movs	r1, #0
 8001512:	6351      	str	r1, [r2, #52]	@ 0x34
	motor->current_duty_cycle = 0;
 8001514:	2200      	movs	r2, #0
 8001516:	735a      	strb	r2, [r3, #13]
	motor->status = MS_DISABLED;
 8001518:	2202      	movs	r2, #2
 800151a:	739a      	strb	r2, [r3, #14]
}
 800151c:	4770      	bx	lr
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 800151e:	2904      	cmp	r1, #4
 8001520:	d005      	beq.n	800152e <dc_motor_disable+0x36>
 8001522:	2908      	cmp	r1, #8
 8001524:	d007      	beq.n	8001536 <dc_motor_disable+0x3e>
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	2100      	movs	r1, #0
 800152a:	6411      	str	r1, [r2, #64]	@ 0x40
 800152c:	e7ec      	b.n	8001508 <dc_motor_disable+0x10>
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	2100      	movs	r1, #0
 8001532:	6391      	str	r1, [r2, #56]	@ 0x38
 8001534:	e7e8      	b.n	8001508 <dc_motor_disable+0x10>
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	2100      	movs	r1, #0
 800153a:	63d1      	str	r1, [r2, #60]	@ 0x3c
 800153c:	e7e4      	b.n	8001508 <dc_motor_disable+0x10>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 800153e:	2a04      	cmp	r2, #4
 8001540:	d006      	beq.n	8001550 <dc_motor_disable+0x58>
 8001542:	2a08      	cmp	r2, #8
 8001544:	d009      	beq.n	800155a <dc_motor_disable+0x62>
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	2100      	movs	r1, #0
 800154c:	6411      	str	r1, [r2, #64]	@ 0x40
 800154e:	e7e1      	b.n	8001514 <dc_motor_disable+0x1c>
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	2100      	movs	r1, #0
 8001556:	6391      	str	r1, [r2, #56]	@ 0x38
 8001558:	e7dc      	b.n	8001514 <dc_motor_disable+0x1c>
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	2100      	movs	r1, #0
 8001560:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8001562:	e7d7      	b.n	8001514 <dc_motor_disable+0x1c>

08001564 <dc_motor_set_timer_freq>:
{
 8001564:	b538      	push	{r3, r4, r5, lr}
 8001566:	4605      	mov	r5, r0
	if (frequency == 0)
 8001568:	b199      	cbz	r1, 8001592 <dc_motor_set_timer_freq+0x2e>
 800156a:	460c      	mov	r4, r1
	if (frequency > DC_MOTOR_MAX_FREQUENCY)
 800156c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001570:	4299      	cmp	r1, r3
 8001572:	d900      	bls.n	8001576 <dc_motor_set_timer_freq+0x12>
		frequency = DC_MOTOR_MAX_FREQUENCY;
 8001574:	461c      	mov	r4, r3
	uint32_t timer_clock = HAL_RCC_GetSysClockFreq(); // Get the timer clock frequency
 8001576:	f003 faad 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
	for (prescaler = 0; prescaler <= 0xFFFF; prescaler++)
 800157a:	2200      	movs	r2, #0
		auto_reload = (timer_clock / ((prescaler + 1) * frequency)) - 1;
 800157c:	fb02 4304 	mla	r3, r2, r4, r4
 8001580:	fbb0 f3f3 	udiv	r3, r0, r3
 8001584:	3b01      	subs	r3, #1
		if (auto_reload <= 0xFFFF)
 8001586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800158a:	d305      	bcc.n	8001598 <dc_motor_set_timer_freq+0x34>
	for (prescaler = 0; prescaler <= 0xFFFF; prescaler++)
 800158c:	3201      	adds	r2, #1
 800158e:	b292      	uxth	r2, r2
		auto_reload = (timer_clock / ((prescaler + 1) * frequency)) - 1;
 8001590:	e7f4      	b.n	800157c <dc_motor_set_timer_freq+0x18>
		dc_motor_disable(motor);
 8001592:	f7ff ffb1 	bl	80014f8 <dc_motor_disable>
		return;
 8001596:	e00c      	b.n	80015b2 <dc_motor_set_timer_freq+0x4e>
	__HAL_TIM_SET_PRESCALER((TIM_HandleTypeDef *)motor->timer, prescaler);
 8001598:	6829      	ldr	r1, [r5, #0]
 800159a:	6809      	ldr	r1, [r1, #0]
 800159c:	628a      	str	r2, [r1, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer, auto_reload);
 800159e:	682a      	ldr	r2, [r5, #0]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80015a4:	682a      	ldr	r2, [r5, #0]
 80015a6:	60d3      	str	r3, [r2, #12]
	dc_motor_set(motor, motor->current_direction, motor->current_duty_cycle);
 80015a8:	7b6a      	ldrb	r2, [r5, #13]
 80015aa:	7b29      	ldrb	r1, [r5, #12]
 80015ac:	4628      	mov	r0, r5
 80015ae:	f7ff feff 	bl	80013b0 <dc_motor_set>
}
 80015b2:	bd38      	pop	{r3, r4, r5, pc}

080015b4 <dc_motor_init>:
    if (motor == NULL || timer == NULL)
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d04d      	beq.n	8001654 <dc_motor_init+0xa0>
{
 80015b8:	b510      	push	{r4, lr}
 80015ba:	4604      	mov	r4, r0
    if (motor == NULL || timer == NULL)
 80015bc:	b319      	cbz	r1, 8001606 <dc_motor_init+0x52>
    motor->timer = timer;
 80015be:	6001      	str	r1, [r0, #0]
    motor->timer_channel_output_1 = timer_channel_output_1;
 80015c0:	6042      	str	r2, [r0, #4]
    motor->timer_channel_output_2 = timer_channel_output_2;
 80015c2:	6083      	str	r3, [r0, #8]
	motor->current_direction = MD_FORWARD;
 80015c4:	2300      	movs	r3, #0
 80015c6:	7303      	strb	r3, [r0, #12]
	motor->status = MS_NORMAL;
 80015c8:	7383      	strb	r3, [r0, #14]
	HAL_TIM_Base_Start((TIM_HandleTypeDef *)motor->timer);
 80015ca:	4608      	mov	r0, r1
 80015cc:	f003 fc66 	bl	8004e9c <HAL_TIM_Base_Start>
	dc_motor_set_timer_freq(motor, frequency);
 80015d0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80015d4:	4620      	mov	r0, r4
 80015d6:	f7ff ffc5 	bl	8001564 <dc_motor_set_timer_freq>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 80015da:	6863      	ldr	r3, [r4, #4]
 80015dc:	b9a3      	cbnz	r3, 8001608 <dc_motor_init+0x54>
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2200      	movs	r2, #0
 80015e4:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 80015e6:	68a3      	ldr	r3, [r4, #8]
 80015e8:	bb0b      	cbnz	r3, 800162e <dc_motor_init+0x7a>
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2200      	movs	r2, #0
 80015f0:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1);
 80015f2:	6861      	ldr	r1, [r4, #4]
 80015f4:	6820      	ldr	r0, [r4, #0]
 80015f6:	f004 f85f 	bl	80056b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2);
 80015fa:	68a1      	ldr	r1, [r4, #8]
 80015fc:	6820      	ldr	r0, [r4, #0]
 80015fe:	f004 f85b 	bl	80056b8 <HAL_TIM_PWM_Start>
	motor->current_duty_cycle = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	7363      	strb	r3, [r4, #13]
}
 8001606:	bd10      	pop	{r4, pc}
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001608:	2b04      	cmp	r3, #4
 800160a:	d006      	beq.n	800161a <dc_motor_init+0x66>
 800160c:	2b08      	cmp	r3, #8
 800160e:	d009      	beq.n	8001624 <dc_motor_init+0x70>
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2200      	movs	r2, #0
 8001616:	641a      	str	r2, [r3, #64]	@ 0x40
 8001618:	e7e5      	b.n	80015e6 <dc_motor_init+0x32>
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2200      	movs	r2, #0
 8001620:	639a      	str	r2, [r3, #56]	@ 0x38
 8001622:	e7e0      	b.n	80015e6 <dc_motor_init+0x32>
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2200      	movs	r2, #0
 800162a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800162c:	e7db      	b.n	80015e6 <dc_motor_init+0x32>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 800162e:	2b04      	cmp	r3, #4
 8001630:	d006      	beq.n	8001640 <dc_motor_init+0x8c>
 8001632:	2b08      	cmp	r3, #8
 8001634:	d009      	beq.n	800164a <dc_motor_init+0x96>
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2200      	movs	r2, #0
 800163c:	641a      	str	r2, [r3, #64]	@ 0x40
 800163e:	e7d8      	b.n	80015f2 <dc_motor_init+0x3e>
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	639a      	str	r2, [r3, #56]	@ 0x38
 8001648:	e7d3      	b.n	80015f2 <dc_motor_init+0x3e>
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2200      	movs	r2, #0
 8001650:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001652:	e7ce      	b.n	80015f2 <dc_motor_init+0x3e>
 8001654:	4770      	bx	lr
	...

08001658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001658:	b500      	push	{lr}
 800165a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800165c:	2200      	movs	r2, #0
 800165e:	9201      	str	r2, [sp, #4]
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <MX_DMA_Init+0x30>)
 8001662:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001664:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8001668:	6319      	str	r1, [r3, #48]	@ 0x30
 800166a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001674:	2105      	movs	r1, #5
 8001676:	2038      	movs	r0, #56	@ 0x38
 8001678:	f001 fea2 	bl	80033c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800167c:	2038      	movs	r0, #56	@ 0x38
 800167e:	f001 feaf 	bl	80033e0 <HAL_NVIC_EnableIRQ>

}
 8001682:	b003      	add	sp, #12
 8001684:	f85d fb04 	ldr.w	pc, [sp], #4
 8001688:	40023800 	.word	0x40023800

0800168c <electronic_throttle_update>:
    }
    etb->target_position = position;
}

void electronic_throttle_update(void *arg)
{
 800168c:	b530      	push	{r4, r5, lr}
 800168e:	ed2d 8b02 	vpush	{d8}
 8001692:	b083      	sub	sp, #12
    electronic_throttle_s *etb = (electronic_throttle_s *)arg;
    if (etb == NULL || etb->pid == NULL || etb->sensor == NULL || etb->motor == NULL)
 8001694:	b350      	cbz	r0, 80016ec <electronic_throttle_update+0x60>
 8001696:	4604      	mov	r4, r0
 8001698:	6883      	ldr	r3, [r0, #8]
 800169a:	b33b      	cbz	r3, 80016ec <electronic_throttle_update+0x60>
 800169c:	68c0      	ldr	r0, [r0, #12]
 800169e:	b328      	cbz	r0, 80016ec <electronic_throttle_update+0x60>
 80016a0:	6863      	ldr	r3, [r4, #4]
 80016a2:	b31b      	cbz	r3, 80016ec <electronic_throttle_update+0x60>
    {
        log_error("Electronic throttle not initialized");
        return;
    }
    percent_t postion = sensor_tps_get(etb->sensor);
 80016a4:	f006 f968 	bl	8007978 <sensor_tps_get>
 80016a8:	eeb0 8a40 	vmov.f32	s16, s0
    pid_set_setpoint(etb->pid, etb->target_position);
 80016ac:	ed94 0a04 	vldr	s0, [r4, #16]
 80016b0:	68a0      	ldr	r0, [r4, #8]
 80016b2:	f000 fd48 	bl	8002146 <pid_set_setpoint>
    percent_t motor_effort = pid_compute(etb->pid, get_time_us(), postion);
 80016b6:	68a5      	ldr	r5, [r4, #8]
 80016b8:	f006 f8b4 	bl	8007824 <get_time_us>
 80016bc:	4601      	mov	r1, r0
 80016be:	eeb0 0a48 	vmov.f32	s0, s16
 80016c2:	4628      	mov	r0, r5
 80016c4:	f000 fd42 	bl	800214c <pid_compute>
    dc_motor_direction_e dir = motor_effort > 0 ? MD_FORWARD : MD_REVERSE;
 80016c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80016cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d0:	bfd4      	ite	le
 80016d2:	2101      	movle	r1, #1
 80016d4:	2100      	movgt	r1, #0
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 80016d6:	6860      	ldr	r0, [r4, #4]
 80016d8:	d40f      	bmi.n	80016fa <electronic_throttle_update+0x6e>
 80016da:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80016de:	edcd 7a01 	vstr	s15, [sp, #4]
 80016e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80016e6:	f7ff fe63 	bl	80013b0 <dc_motor_set>
 80016ea:	e002      	b.n	80016f2 <electronic_throttle_update+0x66>
        log_error("Electronic throttle not initialized");
 80016ec:	4807      	ldr	r0, [pc, #28]	@ (800170c <electronic_throttle_update+0x80>)
 80016ee:	f000 f84b 	bl	8001788 <log_error>
}
 80016f2:	b003      	add	sp, #12
 80016f4:	ecbd 8b02 	vpop	{d8}
 80016f8:	bd30      	pop	{r4, r5, pc}
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 80016fa:	eeb1 0a40 	vneg.f32	s0, s0
 80016fe:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8001702:	edcd 7a01 	vstr	s15, [sp, #4]
 8001706:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800170a:	e7ec      	b.n	80016e6 <electronic_throttle_update+0x5a>
 800170c:	0800a02c 	.word	0x0800a02c

08001710 <electronic_throttle_init>:
{
 8001710:	b510      	push	{r4, lr}
    if (etb == NULL || sensor == NULL || motor == NULL)
 8001712:	b1c0      	cbz	r0, 8001746 <electronic_throttle_init+0x36>
 8001714:	4604      	mov	r4, r0
 8001716:	b1b2      	cbz	r2, 8001746 <electronic_throttle_init+0x36>
 8001718:	b1ab      	cbz	r3, 8001746 <electronic_throttle_init+0x36>
    etb->pid = pid;
 800171a:	6081      	str	r1, [r0, #8]
    etb->sensor = sensor;
 800171c:	60c2      	str	r2, [r0, #12]
    etb->motor = motor;
 800171e:	6043      	str	r3, [r0, #4]
    etb->target_position = ELECTRONIC_THROTTLE_FAIL_SAFE_POSITION;
 8001720:	2300      	movs	r3, #0
 8001722:	6103      	str	r3, [r0, #16]
    etb->pid->limit_output_max = (float)255;
 8001724:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <electronic_throttle_init+0x40>)
 8001726:	614b      	str	r3, [r1, #20]
    etb->pid->limit_output_min = (float)-255;
 8001728:	6883      	ldr	r3, [r0, #8]
 800172a:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <electronic_throttle_init+0x44>)
 800172c:	611a      	str	r2, [r3, #16]
    osTimerId_t timer_id = osTimerNew(
 800172e:	2300      	movs	r3, #0
 8001730:	4602      	mov	r2, r0
 8001732:	2101      	movs	r1, #1
 8001734:	4808      	ldr	r0, [pc, #32]	@ (8001758 <electronic_throttle_init+0x48>)
 8001736:	f7ff fbe9 	bl	8000f0c <osTimerNew>
    osTimerStart(timer_id, 1); // every 1 tick = every 1ms = 1000Hz
 800173a:	2101      	movs	r1, #1
 800173c:	f7ff fc3a 	bl	8000fb4 <osTimerStart>
    etb->state = ETB_STATE_NORMAL;
 8001740:	2301      	movs	r3, #1
 8001742:	7023      	strb	r3, [r4, #0]
}
 8001744:	bd10      	pop	{r4, pc}
        log_error("Electronic throttle init failed");
 8001746:	4805      	ldr	r0, [pc, #20]	@ (800175c <electronic_throttle_init+0x4c>)
 8001748:	f000 f81e 	bl	8001788 <log_error>
        return;
 800174c:	e7fa      	b.n	8001744 <electronic_throttle_init+0x34>
 800174e:	bf00      	nop
 8001750:	437f0000 	.word	0x437f0000
 8001754:	c37f0000 	.word	0xc37f0000
 8001758:	0800168d 	.word	0x0800168d
 800175c:	0800a050 	.word	0x0800a050

08001760 <electronic_throttle_set>:
    if (!IS_IN_RANGE(position, (percent_t)0, (percent_t)100))
 8001760:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001768:	db06      	blt.n	8001778 <electronic_throttle_set+0x18>
 800176a:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8001784 <electronic_throttle_set+0x24>
 800176e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	d901      	bls.n	800177c <electronic_throttle_set+0x1c>
        etb->target_position = ELECTRONIC_THROTTLE_FAIL_SAFE_POSITION;
 8001778:	2300      	movs	r3, #0
 800177a:	6103      	str	r3, [r0, #16]
    etb->target_position = position;
 800177c:	ed80 0a04 	vstr	s0, [r0, #16]
}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	42c80000 	.word	0x42c80000

08001788 <log_error>:
#include "error_handling.h"


void log_error(const char* message)
{
    if (message == NULL) return;
 8001788:	b1c0      	cbz	r0, 80017bc <log_error+0x34>
{
 800178a:	b570      	push	{r4, r5, r6, lr}
 800178c:	b09a      	sub	sp, #104	@ 0x68
 800178e:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 8001790:	ac01      	add	r4, sp, #4
 8001792:	2564      	movs	r5, #100	@ 0x64
 8001794:	462a      	mov	r2, r5
 8001796:	2100      	movs	r1, #0
 8001798:	4620      	mov	r0, r4
 800179a:	f007 fdfb 	bl	8009394 <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Error: %s\n", message);
 800179e:	4633      	mov	r3, r6
 80017a0:	4a07      	ldr	r2, [pc, #28]	@ (80017c0 <log_error+0x38>)
 80017a2:	4629      	mov	r1, r5
 80017a4:	4620      	mov	r0, r4
 80017a6:	f007 fdbf 	bl	8009328 <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 80017aa:	4620      	mov	r0, r4
 80017ac:	f7fe fcf8 	bl	80001a0 <strlen>
 80017b0:	b281      	uxth	r1, r0
 80017b2:	4620      	mov	r0, r4
 80017b4:	f006 fda4 	bl	8008300 <CDC_Transmit_FS>
}
 80017b8:	b01a      	add	sp, #104	@ 0x68
 80017ba:	bd70      	pop	{r4, r5, r6, pc}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	0800a070 	.word	0x0800a070

080017c4 <log_warning>:

void log_warning(const char* message)
{
    if (message == NULL) return;
 80017c4:	b1c0      	cbz	r0, 80017f8 <log_warning+0x34>
{
 80017c6:	b570      	push	{r4, r5, r6, lr}
 80017c8:	b09a      	sub	sp, #104	@ 0x68
 80017ca:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 80017cc:	ac01      	add	r4, sp, #4
 80017ce:	2564      	movs	r5, #100	@ 0x64
 80017d0:	462a      	mov	r2, r5
 80017d2:	2100      	movs	r1, #0
 80017d4:	4620      	mov	r0, r4
 80017d6:	f007 fddd 	bl	8009394 <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Warning: %s\n", message);
 80017da:	4633      	mov	r3, r6
 80017dc:	4a07      	ldr	r2, [pc, #28]	@ (80017fc <log_warning+0x38>)
 80017de:	4629      	mov	r1, r5
 80017e0:	4620      	mov	r0, r4
 80017e2:	f007 fda1 	bl	8009328 <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 80017e6:	4620      	mov	r0, r4
 80017e8:	f7fe fcda 	bl	80001a0 <strlen>
 80017ec:	b281      	uxth	r1, r0
 80017ee:	4620      	mov	r0, r4
 80017f0:	f006 fd86 	bl	8008300 <CDC_Transmit_FS>
 80017f4:	b01a      	add	sp, #104	@ 0x68
 80017f6:	bd70      	pop	{r4, r5, r6, pc}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	0800a07c 	.word	0x0800a07c

08001800 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001800:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001802:	f006 fa97 	bl	8007d34 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  controller_init();
 8001806:	f7ff fd35 	bl	8001274 <controller_init>
  osDelay(100);
 800180a:	2064      	movs	r0, #100	@ 0x64
 800180c:	f7ff fb70 	bl	8000ef0 <osDelay>
  
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8001810:	2001      	movs	r0, #1
 8001812:	f7ff fb6d 	bl	8000ef0 <osDelay>
  for(;;)
 8001816:	e7fb      	b.n	8001810 <StartDefaultTask+0x10>

08001818 <trigger_simulator_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_trigger_simulator_task */
void trigger_simulator_task(void *argument)
{
 8001818:	b508      	push	{r3, lr}
  /* USER CODE BEGIN trigger_simulator_task */
  trigger_simulator_init(60, 2, trigger_tooth_handle);
 800181a:	4a07      	ldr	r2, [pc, #28]	@ (8001838 <trigger_simulator_task+0x20>)
 800181c:	2102      	movs	r1, #2
 800181e:	203c      	movs	r0, #60	@ 0x3c
 8001820:	f006 fa2a 	bl	8007c78 <trigger_simulator_init>
  /* Infinite loop */
  for(;;)
  {
    trigger_simulator_update(simulated_rpm);
 8001824:	4b05      	ldr	r3, [pc, #20]	@ (800183c <trigger_simulator_task+0x24>)
 8001826:	ed93 0a00 	vldr	s0, [r3]
 800182a:	f006 fa33 	bl	8007c94 <trigger_simulator_update>
    osDelay(1);
 800182e:	2001      	movs	r0, #1
 8001830:	f7ff fb5e 	bl	8000ef0 <osDelay>
  for(;;)
 8001834:	e7f6      	b.n	8001824 <trigger_simulator_task+0xc>
 8001836:	bf00      	nop
 8001838:	08007af5 	.word	0x08007af5
 800183c:	20000044 	.word	0x20000044

08001840 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001840:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001842:	4a07      	ldr	r2, [pc, #28]	@ (8001860 <MX_FREERTOS_Init+0x20>)
 8001844:	2100      	movs	r1, #0
 8001846:	4807      	ldr	r0, [pc, #28]	@ (8001864 <MX_FREERTOS_Init+0x24>)
 8001848:	f7ff faf8 	bl	8000e3c <osThreadNew>
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <MX_FREERTOS_Init+0x28>)
 800184e:	6018      	str	r0, [r3, #0]
  trig_simHandle = osThreadNew(trigger_simulator_task, NULL, &trig_sim_attributes);
 8001850:	4a06      	ldr	r2, [pc, #24]	@ (800186c <MX_FREERTOS_Init+0x2c>)
 8001852:	2100      	movs	r1, #0
 8001854:	4806      	ldr	r0, [pc, #24]	@ (8001870 <MX_FREERTOS_Init+0x30>)
 8001856:	f7ff faf1 	bl	8000e3c <osThreadNew>
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <MX_FREERTOS_Init+0x34>)
 800185c:	6018      	str	r0, [r3, #0]
}
 800185e:	bd08      	pop	{r3, pc}
 8001860:	0800a240 	.word	0x0800a240
 8001864:	08001801 	.word	0x08001801
 8001868:	20000a54 	.word	0x20000a54
 800186c:	0800a21c 	.word	0x0800a21c
 8001870:	08001819 	.word	0x08001819
 8001874:	20000a50 	.word	0x20000a50

08001878 <governer_update>:
    osTimerStart(timer, 1);
    
}

void governer_update()
{
 8001878:	b510      	push	{r4, lr}
 800187a:	ed2d 8b02 	vpush	{d8}
    if (governer_etb == NULL)
 800187e:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <governer_update+0x6c>)
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	b178      	cbz	r0, 80018a4 <governer_update+0x2c>
        log_error("Governer no init!");
        return;
    }
    percent_t throttle_setpoint = ELECTRONIC_THROTTLE_FAIL_SAFE_POSITION;

    if (engine.spinning_state != SS_RUNNING)
 8001884:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <governer_update+0x70>)
 8001886:	7c5b      	ldrb	r3, [r3, #17]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d00f      	beq.n	80018ac <governer_update+0x34>
    {
        throttle_setpoint = configuration.cranking_throttle;
        engine.governer_status = GOVERNER_STATUS_IGNORED;
 800188c:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <governer_update+0x70>)
 800188e:	2200      	movs	r2, #0
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        electronic_throttle_set(governer_etb, throttle_setpoint);
 8001894:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <governer_update+0x74>)
 8001896:	ed93 0a05 	vldr	s0, [r3, #20]
 800189a:	f7ff ff61 	bl	8001760 <electronic_throttle_set>
        pid_set_setpoint(&governer_pid, configuration.governer_target_rpm);
        rpm_t rpm = crankshaft_get_rpm();
        throttle_setpoint = pid_compute(&governer_pid, get_time_us(), rpm);
        electronic_throttle_set(governer_etb, throttle_setpoint);
    }
}
 800189e:	ecbd 8b02 	vpop	{d8}
 80018a2:	bd10      	pop	{r4, pc}
        log_error("Governer no init!");
 80018a4:	4812      	ldr	r0, [pc, #72]	@ (80018f0 <governer_update+0x78>)
 80018a6:	f7ff ff6f 	bl	8001788 <log_error>
        return;
 80018aa:	e7f8      	b.n	800189e <governer_update+0x26>
        engine.governer_status = GOVERNER_STATUS_TARGET;
 80018ac:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <governer_update+0x70>)
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        pid_set_setpoint(&governer_pid, configuration.governer_target_rpm);
 80018b4:	4c0f      	ldr	r4, [pc, #60]	@ (80018f4 <governer_update+0x7c>)
 80018b6:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <governer_update+0x74>)
 80018b8:	ed93 0a17 	vldr	s0, [r3, #92]	@ 0x5c
 80018bc:	4620      	mov	r0, r4
 80018be:	f000 fc42 	bl	8002146 <pid_set_setpoint>
        rpm_t rpm = crankshaft_get_rpm();
 80018c2:	f006 f90b 	bl	8007adc <crankshaft_get_rpm>
 80018c6:	eeb0 8a40 	vmov.f32	s16, s0
        throttle_setpoint = pid_compute(&governer_pid, get_time_us(), rpm);
 80018ca:	f005 ffab 	bl	8007824 <get_time_us>
 80018ce:	4601      	mov	r1, r0
 80018d0:	eeb0 0a48 	vmov.f32	s0, s16
 80018d4:	4620      	mov	r0, r4
 80018d6:	f000 fc39 	bl	800214c <pid_compute>
        electronic_throttle_set(governer_etb, throttle_setpoint);
 80018da:	4b02      	ldr	r3, [pc, #8]	@ (80018e4 <governer_update+0x6c>)
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	f7ff ff3f 	bl	8001760 <electronic_throttle_set>
 80018e2:	e7dc      	b.n	800189e <governer_update+0x26>
 80018e4:	20000a94 	.word	0x20000a94
 80018e8:	20000964 	.word	0x20000964
 80018ec:	200009a4 	.word	0x200009a4
 80018f0:	0800a0a4 	.word	0x0800a0a4
 80018f4:	20000a58 	.word	0x20000a58

080018f8 <governer_init>:
{
 80018f8:	b510      	push	{r4, lr}
    if (etb == NULL)
 80018fa:	b1b8      	cbz	r0, 800192c <governer_init+0x34>
    governer_etb = etb;
 80018fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001934 <governer_init+0x3c>)
 80018fe:	6010      	str	r0, [r2, #0]
    pid_init(&governer_pid);
 8001900:	4c0d      	ldr	r4, [pc, #52]	@ (8001938 <governer_init+0x40>)
 8001902:	4620      	mov	r0, r4
 8001904:	f000 fc16 	bl	8002134 <pid_init>
    governer_pid.limit_output_max = (percent_t)100;
 8001908:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <governer_init+0x44>)
 800190a:	6163      	str	r3, [r4, #20]
    governer_pid.limit_output_min = (percent_t)0;
 800190c:	2300      	movs	r3, #0
 800190e:	6123      	str	r3, [r4, #16]
    pid_set_tuning(&governer_pid, &configuration.governer_pid);
 8001910:	490b      	ldr	r1, [pc, #44]	@ (8001940 <governer_init+0x48>)
 8001912:	4620      	mov	r0, r4
 8001914:	f000 fc96 	bl	8002244 <pid_set_tuning>
    osTimerId_t timer = osTimerNew(governer_update, osTimerPeriodic, NULL, NULL);
 8001918:	2300      	movs	r3, #0
 800191a:	461a      	mov	r2, r3
 800191c:	2101      	movs	r1, #1
 800191e:	4809      	ldr	r0, [pc, #36]	@ (8001944 <governer_init+0x4c>)
 8001920:	f7ff faf4 	bl	8000f0c <osTimerNew>
    osTimerStart(timer, 1);
 8001924:	2101      	movs	r1, #1
 8001926:	f7ff fb45 	bl	8000fb4 <osTimerStart>
}
 800192a:	bd10      	pop	{r4, pc}
        log_error("Governer init failed!");
 800192c:	4806      	ldr	r0, [pc, #24]	@ (8001948 <governer_init+0x50>)
 800192e:	f7ff ff2b 	bl	8001788 <log_error>
        return;
 8001932:	e7fa      	b.n	800192a <governer_init+0x32>
 8001934:	20000a94 	.word	0x20000a94
 8001938:	20000a58 	.word	0x20000a58
 800193c:	42c80000 	.word	0x42c80000
 8001940:	20000a20 	.word	0x20000a20
 8001944:	08001879 	.word	0x08001879
 8001948:	0800a0b8 	.word	0x0800a0b8

0800194c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800194c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001950:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	ad05      	add	r5, sp, #20
 8001954:	2400      	movs	r4, #0
 8001956:	9405      	str	r4, [sp, #20]
 8001958:	9406      	str	r4, [sp, #24]
 800195a:	9407      	str	r4, [sp, #28]
 800195c:	9408      	str	r4, [sp, #32]
 800195e:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001960:	9401      	str	r4, [sp, #4]
 8001962:	4b31      	ldr	r3, [pc, #196]	@ (8001a28 <MX_GPIO_Init+0xdc>)
 8001964:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001966:	f042 0204 	orr.w	r2, r2, #4
 800196a:	631a      	str	r2, [r3, #48]	@ 0x30
 800196c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800196e:	f002 0204 	and.w	r2, r2, #4
 8001972:	9201      	str	r2, [sp, #4]
 8001974:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001976:	9402      	str	r4, [sp, #8]
 8001978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800197a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800197e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001980:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001982:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001986:	9202      	str	r2, [sp, #8]
 8001988:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	9403      	str	r4, [sp, #12]
 800198c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	631a      	str	r2, [r3, #48]	@ 0x30
 8001994:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001996:	f002 0201 	and.w	r2, r2, #1
 800199a:	9203      	str	r2, [sp, #12]
 800199c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	9404      	str	r4, [sp, #16]
 80019a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019a2:	f042 0202 	orr.w	r2, r2, #2
 80019a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	9304      	str	r3, [sp, #16]
 80019b0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80019b2:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8001a30 <MX_GPIO_Init+0xe4>
 80019b6:	4622      	mov	r2, r4
 80019b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019bc:	4640      	mov	r0, r8
 80019be:	f002 f812 	bl	80039e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IGNITION_OUTPUT4_Pin|IGNITION_OUTPUT3_Pin|IGNITION_OUTPUT2_Pin|IGNITION_OUTPUT1_Pin, GPIO_PIN_RESET);
 80019c2:	4e1a      	ldr	r6, [pc, #104]	@ (8001a2c <MX_GPIO_Init+0xe0>)
 80019c4:	4622      	mov	r2, r4
 80019c6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80019ca:	4630      	mov	r0, r6
 80019cc:	f002 f80b 	bl	80039e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80019d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019d4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2701      	movs	r7, #1
 80019d8:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019de:	4629      	mov	r1, r5
 80019e0:	4640      	mov	r0, r8
 80019e2:	f001 ff15 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : IGNITION_OUTPUT4_Pin IGNITION_OUTPUT3_Pin IGNITION_OUTPUT2_Pin IGNITION_OUTPUT1_Pin */
  GPIO_InitStruct.Pin = IGNITION_OUTPUT4_Pin|IGNITION_OUTPUT3_Pin|IGNITION_OUTPUT2_Pin|IGNITION_OUTPUT1_Pin;
 80019e6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80019ea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ec:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	4629      	mov	r1, r5
 80019f4:	4630      	mov	r0, r6
 80019f6:	f001 ff0b 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019fe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a04:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a08:	4629      	mov	r1, r5
 8001a0a:	4630      	mov	r0, r6
 8001a0c:	f001 ff00 	bl	8003810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001a10:	4622      	mov	r2, r4
 8001a12:	2105      	movs	r1, #5
 8001a14:	2017      	movs	r0, #23
 8001a16:	f001 fcd3 	bl	80033c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a1a:	2017      	movs	r0, #23
 8001a1c:	f001 fce0 	bl	80033e0 <HAL_NVIC_EnableIRQ>

}
 8001a20:	b00a      	add	sp, #40	@ 0x28
 8001a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40020800 	.word	0x40020800

08001a34 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001a34:	4a12      	ldr	r2, [pc, #72]	@ (8001a80 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001a36:	f012 0f07 	tst.w	r2, #7
 8001a3a:	d01e      	beq.n	8001a7a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001a3c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a3e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001a42:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 8001a46:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a48:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001a4a:	480e      	ldr	r0, [pc, #56]	@ (8001a84 <prvHeapInit+0x50>)
 8001a4c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001a4e:	2100      	movs	r1, #0
 8001a50:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001a52:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001a54:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a56:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8001a5a:	480b      	ldr	r0, [pc, #44]	@ (8001a88 <prvHeapInit+0x54>)
 8001a5c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8001a5e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001a60:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001a62:	1a99      	subs	r1, r3, r2
 8001a64:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001a66:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a68:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <prvHeapInit+0x58>)
 8001a6a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a6c:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <prvHeapInit+0x5c>)
 8001a6e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <prvHeapInit+0x60>)
 8001a72:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a76:	601a      	str	r2, [r3, #0]
}
 8001a78:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001a7a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8001a7e:	e7e4      	b.n	8001a4a <prvHeapInit+0x16>
 8001a80:	20000ab8 	.word	0x20000ab8
 8001a84:	20000ab0 	.word	0x20000ab0
 8001a88:	20000aac 	.word	0x20000aac
 8001a8c:	20000aa4 	.word	0x20000aa4
 8001a90:	20000aa8 	.word	0x20000aa8
 8001a94:	20000a98 	.word	0x20000a98

08001a98 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <prvInsertBlockIntoFreeList+0x5c>)
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4283      	cmp	r3, r0
 8001aa0:	d3fb      	bcc.n	8001a9a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001aa2:	6851      	ldr	r1, [r2, #4]
 8001aa4:	eb02 0c01 	add.w	ip, r2, r1
 8001aa8:	4584      	cmp	ip, r0
 8001aaa:	d009      	beq.n	8001ac0 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001aac:	6841      	ldr	r1, [r0, #4]
 8001aae:	eb00 0c01 	add.w	ip, r0, r1
 8001ab2:	4563      	cmp	r3, ip
 8001ab4:	d009      	beq.n	8001aca <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001ab6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001ab8:	4290      	cmp	r0, r2
 8001aba:	d019      	beq.n	8001af0 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001abc:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8001abe:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ac0:	6840      	ldr	r0, [r0, #4]
 8001ac2:	4401      	add	r1, r0
 8001ac4:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	e7f0      	b.n	8001aac <prvInsertBlockIntoFreeList+0x14>
{
 8001aca:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001acc:	4c0a      	ldr	r4, [pc, #40]	@ (8001af8 <prvInsertBlockIntoFreeList+0x60>)
 8001ace:	6824      	ldr	r4, [r4, #0]
 8001ad0:	42a3      	cmp	r3, r4
 8001ad2:	d00b      	beq.n	8001aec <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4419      	add	r1, r3
 8001ad8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001ada:	6813      	ldr	r3, [r2, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8001ae0:	4290      	cmp	r0, r2
 8001ae2:	d000      	beq.n	8001ae6 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001ae4:	6010      	str	r0, [r2, #0]
	}
}
 8001ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001aea:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001aec:	6004      	str	r4, [r0, #0]
 8001aee:	e7f7      	b.n	8001ae0 <prvInsertBlockIntoFreeList+0x48>
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000ab0 	.word	0x20000ab0
 8001af8:	20000aac 	.word	0x20000aac

08001afc <pvPortMalloc>:
{
 8001afc:	b538      	push	{r3, r4, r5, lr}
 8001afe:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001b00:	f004 ff5a 	bl	80069b8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001b04:	4b38      	ldr	r3, [pc, #224]	@ (8001be8 <pvPortMalloc+0xec>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	b1b3      	cbz	r3, 8001b38 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001b0a:	4b38      	ldr	r3, [pc, #224]	@ (8001bec <pvPortMalloc+0xf0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	421c      	tst	r4, r3
 8001b10:	d150      	bne.n	8001bb4 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8001b12:	2c00      	cmp	r4, #0
 8001b14:	d050      	beq.n	8001bb8 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8001b16:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b1a:	f014 0f07 	tst.w	r4, #7
 8001b1e:	d002      	beq.n	8001b26 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b20:	f022 0207 	bic.w	r2, r2, #7
 8001b24:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	d055      	beq.n	8001bd6 <pvPortMalloc+0xda>
 8001b2a:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <pvPortMalloc+0xf4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d353      	bcc.n	8001bda <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8001b32:	4930      	ldr	r1, [pc, #192]	@ (8001bf4 <pvPortMalloc+0xf8>)
 8001b34:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b36:	e004      	b.n	8001b42 <pvPortMalloc+0x46>
			prvHeapInit();
 8001b38:	f7ff ff7c 	bl	8001a34 <prvHeapInit>
 8001b3c:	e7e5      	b.n	8001b0a <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8001b3e:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8001b40:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b42:	6863      	ldr	r3, [r4, #4]
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d202      	bcs.n	8001b4e <pvPortMalloc+0x52>
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f7      	bne.n	8001b3e <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8001b4e:	4b26      	ldr	r3, [pc, #152]	@ (8001be8 <pvPortMalloc+0xec>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	42a3      	cmp	r3, r4
 8001b54:	d043      	beq.n	8001bde <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001b56:	680d      	ldr	r5, [r1, #0]
 8001b58:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001b5e:	6863      	ldr	r3, [r4, #4]
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	2b10      	cmp	r3, #16
 8001b64:	d910      	bls.n	8001b88 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001b66:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b68:	f010 0f07 	tst.w	r0, #7
 8001b6c:	d008      	beq.n	8001b80 <pvPortMalloc+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b72:	f383 8811 	msr	BASEPRI, r3
 8001b76:	f3bf 8f6f 	isb	sy
 8001b7a:	f3bf 8f4f 	dsb	sy
 8001b7e:	e7fe      	b.n	8001b7e <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001b80:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001b82:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001b84:	f7ff ff88 	bl	8001a98 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001b88:	6862      	ldr	r2, [r4, #4]
 8001b8a:	4919      	ldr	r1, [pc, #100]	@ (8001bf0 <pvPortMalloc+0xf4>)
 8001b8c:	680b      	ldr	r3, [r1, #0]
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001b92:	4919      	ldr	r1, [pc, #100]	@ (8001bf8 <pvPortMalloc+0xfc>)
 8001b94:	6809      	ldr	r1, [r1, #0]
 8001b96:	428b      	cmp	r3, r1
 8001b98:	d201      	bcs.n	8001b9e <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001b9a:	4917      	ldr	r1, [pc, #92]	@ (8001bf8 <pvPortMalloc+0xfc>)
 8001b9c:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <pvPortMalloc+0xf0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8001baa:	4a14      	ldr	r2, [pc, #80]	@ (8001bfc <pvPortMalloc+0x100>)
 8001bac:	6813      	ldr	r3, [r2, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e002      	b.n	8001bba <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8001bb4:	2500      	movs	r5, #0
 8001bb6:	e000      	b.n	8001bba <pvPortMalloc+0xbe>
 8001bb8:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8001bba:	f004 ff97 	bl	8006aec <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001bbe:	f015 0f07 	tst.w	r5, #7
 8001bc2:	d00e      	beq.n	8001be2 <pvPortMalloc+0xe6>
 8001bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bc8:	f383 8811 	msr	BASEPRI, r3
 8001bcc:	f3bf 8f6f 	isb	sy
 8001bd0:	f3bf 8f4f 	dsb	sy
 8001bd4:	e7fe      	b.n	8001bd4 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8001bd6:	2500      	movs	r5, #0
 8001bd8:	e7ef      	b.n	8001bba <pvPortMalloc+0xbe>
 8001bda:	2500      	movs	r5, #0
 8001bdc:	e7ed      	b.n	8001bba <pvPortMalloc+0xbe>
 8001bde:	2500      	movs	r5, #0
 8001be0:	e7eb      	b.n	8001bba <pvPortMalloc+0xbe>
}
 8001be2:	4628      	mov	r0, r5
 8001be4:	bd38      	pop	{r3, r4, r5, pc}
 8001be6:	bf00      	nop
 8001be8:	20000aac 	.word	0x20000aac
 8001bec:	20000a98 	.word	0x20000a98
 8001bf0:	20000aa8 	.word	0x20000aa8
 8001bf4:	20000ab0 	.word	0x20000ab0
 8001bf8:	20000aa4 	.word	0x20000aa4
 8001bfc:	20000aa0 	.word	0x20000aa0

08001c00 <vPortFree>:
	if( pv != NULL )
 8001c00:	2800      	cmp	r0, #0
 8001c02:	d034      	beq.n	8001c6e <vPortFree+0x6e>
{
 8001c04:	b538      	push	{r3, r4, r5, lr}
 8001c06:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8001c08:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001c0c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001c10:	4a17      	ldr	r2, [pc, #92]	@ (8001c70 <vPortFree+0x70>)
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	4213      	tst	r3, r2
 8001c16:	d108      	bne.n	8001c2a <vPortFree+0x2a>
 8001c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c1c:	f383 8811 	msr	BASEPRI, r3
 8001c20:	f3bf 8f6f 	isb	sy
 8001c24:	f3bf 8f4f 	dsb	sy
 8001c28:	e7fe      	b.n	8001c28 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001c2a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001c2e:	b141      	cbz	r1, 8001c42 <vPortFree+0x42>
 8001c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c34:	f383 8811 	msr	BASEPRI, r3
 8001c38:	f3bf 8f6f 	isb	sy
 8001c3c:	f3bf 8f4f 	dsb	sy
 8001c40:	e7fe      	b.n	8001c40 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001c42:	ea23 0302 	bic.w	r3, r3, r2
 8001c46:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001c4a:	f004 feb5 	bl	80069b8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001c4e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001c52:	4a08      	ldr	r2, [pc, #32]	@ (8001c74 <vPortFree+0x74>)
 8001c54:	6813      	ldr	r3, [r2, #0]
 8001c56:	440b      	add	r3, r1
 8001c58:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001c5a:	4628      	mov	r0, r5
 8001c5c:	f7ff ff1c 	bl	8001a98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001c60:	4a05      	ldr	r2, [pc, #20]	@ (8001c78 <vPortFree+0x78>)
 8001c62:	6813      	ldr	r3, [r2, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8001c68:	f004 ff40 	bl	8006aec <xTaskResumeAll>
}
 8001c6c:	bd38      	pop	{r3, r4, r5, pc}
 8001c6e:	4770      	bx	lr
 8001c70:	20000a98 	.word	0x20000a98
 8001c74:	20000aa8 	.word	0x20000aa8
 8001c78:	20000a9c 	.word	0x20000a9c

08001c7c <ignition_coil_begin_charge>:
 * 
 * @param coil_index The index of the coil to be charged.
 */
void ignition_coil_begin_charge(void *arg)
{
    if (arg == NULL)
 8001c7c:	b310      	cbz	r0, 8001cc4 <ignition_coil_begin_charge+0x48>
{
 8001c7e:	b570      	push	{r4, r5, r6, lr}
 8001c80:	4604      	mov	r4, r0
    {
        return;
    }
    uint8_t *coil_index = (uint8_t*)arg;

    if (coil_index[1] > IGNITION_MAX_OUTPUTS - 1)
 8001c82:	7843      	ldrb	r3, [r0, #1]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d819      	bhi.n	8001cbc <ignition_coil_begin_charge+0x40>
    {
        log_error("Unkown ignition output");
        return;
    }
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_CHARGING;
 8001c88:	7802      	ldrb	r2, [r0, #0]
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <ignition_coil_begin_charge+0x4c>)
 8001c8c:	2601      	movs	r6, #1
 8001c8e:	549e      	strb	r6, [r3, r2]
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_CHARGING;
 8001c90:	7842      	ldrb	r2, [r0, #1]
 8001c92:	549e      	strb	r6, [r3, r2]
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_SET);
 8001c94:	7803      	ldrb	r3, [r0, #0]
 8001c96:	4d0d      	ldr	r5, [pc, #52]	@ (8001ccc <ignition_coil_begin_charge+0x50>)
 8001c98:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8001c9c:	4632      	mov	r2, r6
 8001c9e:	8889      	ldrh	r1, [r1, #4]
 8001ca0:	f855 0033 	ldr.w	r0, [r5, r3, lsl #3]
 8001ca4:	f001 fe9f 	bl	80039e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_SET);
 8001ca8:	7863      	ldrb	r3, [r4, #1]
 8001caa:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8001cae:	4632      	mov	r2, r6
 8001cb0:	8889      	ldrh	r1, [r1, #4]
 8001cb2:	f855 0033 	ldr.w	r0, [r5, r3, lsl #3]
 8001cb6:	f001 fe96 	bl	80039e6 <HAL_GPIO_WritePin>
}
 8001cba:	bd70      	pop	{r4, r5, r6, pc}
        log_error("Unkown ignition output");
 8001cbc:	4804      	ldr	r0, [pc, #16]	@ (8001cd0 <ignition_coil_begin_charge+0x54>)
 8001cbe:	f7ff fd63 	bl	8001788 <log_error>
        return;
 8001cc2:	e7fa      	b.n	8001cba <ignition_coil_begin_charge+0x3e>
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	200046c0 	.word	0x200046c0
 8001ccc:	200046c4 	.word	0x200046c4
 8001cd0:	0800a0d0 	.word	0x0800a0d0

08001cd4 <ignition_coil_fire_spark>:
 * 
 * @param coil_index The index of the coil to fire the spark from.
 */
void ignition_coil_fire_spark(void *arg)
{
    if (arg == NULL)
 8001cd4:	b320      	cbz	r0, 8001d20 <ignition_coil_fire_spark+0x4c>
{
 8001cd6:	b570      	push	{r4, r5, r6, lr}
 8001cd8:	4604      	mov	r4, r0
    {
        return;
    }
    
    uint8_t *coil_index = (uint8_t*)arg;
    if (coil_index[1] > IGNITION_MAX_OUTPUTS - 1)
 8001cda:	7843      	ldrb	r3, [r0, #1]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d81b      	bhi.n	8001d18 <ignition_coil_fire_spark+0x44>
    {
        log_error("Unkown ignition output");
        return;
    }
    
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_NOT_CHARGING;
 8001ce0:	7802      	ldrb	r2, [r0, #0]
 8001ce2:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <ignition_coil_fire_spark+0x50>)
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	549d      	strb	r5, [r3, r2]
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_NOT_CHARGING;
 8001ce8:	7842      	ldrb	r2, [r0, #1]
 8001cea:	549d      	strb	r5, [r3, r2]
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_RESET);
 8001cec:	7803      	ldrb	r3, [r0, #0]
 8001cee:	4e0e      	ldr	r6, [pc, #56]	@ (8001d28 <ignition_coil_fire_spark+0x54>)
 8001cf0:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8001cf4:	462a      	mov	r2, r5
 8001cf6:	8889      	ldrh	r1, [r1, #4]
 8001cf8:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
 8001cfc:	f001 fe73 	bl	80039e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_RESET);
 8001d00:	7863      	ldrb	r3, [r4, #1]
 8001d02:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8001d06:	462a      	mov	r2, r5
 8001d08:	8889      	ldrh	r1, [r1, #4]
 8001d0a:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
 8001d0e:	f001 fe6a 	bl	80039e6 <HAL_GPIO_WritePin>
    spark_is_in_progress = false;
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <ignition_coil_fire_spark+0x58>)
 8001d14:	701d      	strb	r5, [r3, #0]
}
 8001d16:	bd70      	pop	{r4, r5, r6, pc}
        log_error("Unkown ignition output");
 8001d18:	4805      	ldr	r0, [pc, #20]	@ (8001d30 <ignition_coil_fire_spark+0x5c>)
 8001d1a:	f7ff fd35 	bl	8001788 <log_error>
        return;
 8001d1e:	e7fa      	b.n	8001d16 <ignition_coil_fire_spark+0x42>
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	200046c0 	.word	0x200046c0
 8001d28:	200046c4 	.word	0x200046c4
 8001d2c:	200046ba 	.word	0x200046ba
 8001d30:	0800a0d0 	.word	0x0800a0d0

08001d34 <ignition_init>:
{
 8001d34:	b510      	push	{r4, lr}
    if (output_conf == NULL)
 8001d36:	b190      	cbz	r0, 8001d5e <ignition_init+0x2a>
 8001d38:	4601      	mov	r1, r0
    switch (configuration.firing_order)
 8001d3a:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <ignition_init+0xa4>)
 8001d3c:	791b      	ldrb	r3, [r3, #4]
 8001d3e:	b993      	cbnz	r3, 8001d66 <ignition_init+0x32>
            engine.cylinder_count = 4;
 8001d40:	4a26      	ldr	r2, [pc, #152]	@ (8001ddc <ignition_init+0xa8>)
 8001d42:	2004      	movs	r0, #4
 8001d44:	7410      	strb	r0, [r2, #16]
            ignition_order[0] = 1;
 8001d46:	4b26      	ldr	r3, [pc, #152]	@ (8001de0 <ignition_init+0xac>)
 8001d48:	2401      	movs	r4, #1
 8001d4a:	701c      	strb	r4, [r3, #0]
            ignition_order[1] = 3;
 8001d4c:	2403      	movs	r4, #3
 8001d4e:	705c      	strb	r4, [r3, #1]
            ignition_order[2] = 4;
 8001d50:	7098      	strb	r0, [r3, #2]
            ignition_order[3] = 2;
 8001d52:	2002      	movs	r0, #2
 8001d54:	70d8      	strb	r0, [r3, #3]
    engine.firing_interval = (angle_t)720 / engine.cylinder_count;
 8001d56:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <ignition_init+0xb0>)
 8001d58:	6153      	str	r3, [r2, #20]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e013      	b.n	8001d86 <ignition_init+0x52>
        log_error("ignition init failed. No output config");
 8001d5e:	4822      	ldr	r0, [pc, #136]	@ (8001de8 <ignition_init+0xb4>)
 8001d60:	f7ff fd12 	bl	8001788 <log_error>
        return;
 8001d64:	e002      	b.n	8001d6c <ignition_init+0x38>
            log_error("ignition init failed. unkown firing order.");
 8001d66:	4821      	ldr	r0, [pc, #132]	@ (8001dec <ignition_init+0xb8>)
 8001d68:	f7ff fd0e 	bl	8001788 <log_error>
}
 8001d6c:	bd10      	pop	{r4, pc}
        ignition_outputs[i].gpio = output_conf->output[i].gpio;
 8001d6e:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8001d72:	4a1f      	ldr	r2, [pc, #124]	@ (8001df0 <ignition_init+0xbc>)
 8001d74:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
        ignition_outputs[i].pin = output_conf->output[i].pin;
 8001d78:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 8001d7c:	6840      	ldr	r0, [r0, #4]
 8001d7e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001d82:	6050      	str	r0, [r2, #4]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8001d84:	3301      	adds	r3, #1
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d9f1      	bls.n	8001d6e <ignition_init+0x3a>
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8001d8a:	2400      	movs	r4, #0
 8001d8c:	e008      	b.n	8001da0 <ignition_init+0x6c>
        ignition_coil_state[i] = HAL_GPIO_ReadPin(ignition_outputs[i].gpio, ignition_outputs->pin);
 8001d8e:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <ignition_init+0xbc>)
 8001d90:	8899      	ldrh	r1, [r3, #4]
 8001d92:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8001d96:	f001 fe1f 	bl	80039d8 <HAL_GPIO_ReadPin>
 8001d9a:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <ignition_init+0xc0>)
 8001d9c:	5518      	strb	r0, [r3, r4]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8001d9e:	3401      	adds	r4, #1
 8001da0:	2c03      	cmp	r4, #3
 8001da2:	d9f4      	bls.n	8001d8e <ignition_init+0x5a>
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8001da4:	2400      	movs	r4, #0
 8001da6:	e007      	b.n	8001db8 <ignition_init+0x84>
        HAL_GPIO_WritePin(ignition_outputs[i].gpio, ignition_outputs->pin, GPIO_PIN_RESET);
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <ignition_init+0xbc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	8899      	ldrh	r1, [r3, #4]
 8001dae:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8001db2:	f001 fe18 	bl	80039e6 <HAL_GPIO_WritePin>
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8001db6:	3401      	adds	r4, #1
 8001db8:	2c03      	cmp	r4, #3
 8001dba:	d9f5      	bls.n	8001da8 <ignition_init+0x74>
    if (configuration.ignition_is_multi_spark && !IS_IN_RANGE(configuration.ignition_multi_spark_number_of_sparks, 0, IGNITION_MULTI_SPARK_MAX_SPARKS))
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <ignition_init+0xa4>)
 8001dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0d2      	beq.n	8001d6c <ignition_init+0x38>
 8001dc6:	4b04      	ldr	r3, [pc, #16]	@ (8001dd8 <ignition_init+0xa4>)
 8001dc8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d9cd      	bls.n	8001d6c <ignition_init+0x38>
        log_warning("Multi spark is enabled but number of sparks are 0.");
 8001dd0:	4809      	ldr	r0, [pc, #36]	@ (8001df8 <ignition_init+0xc4>)
 8001dd2:	f7ff fcf7 	bl	80017c4 <log_warning>
 8001dd6:	e7c9      	b.n	8001d6c <ignition_init+0x38>
 8001dd8:	200009a4 	.word	0x200009a4
 8001ddc:	20000964 	.word	0x20000964
 8001de0:	200046bc 	.word	0x200046bc
 8001de4:	43340000 	.word	0x43340000
 8001de8:	0800a0e8 	.word	0x0800a0e8
 8001dec:	0800a110 	.word	0x0800a110
 8001df0:	200046c4 	.word	0x200046c4
 8001df4:	200046c0 	.word	0x200046c0
 8001df8:	0800a13c 	.word	0x0800a13c

08001dfc <ignition_trigger_event_handle>:
    if (configuration.ignition_mode == IM_NO_IGNITION)
 8001dfc:	4b5a      	ldr	r3, [pc, #360]	@ (8001f68 <ignition_trigger_event_handle+0x16c>)
 8001dfe:	7e1b      	ldrb	r3, [r3, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80af 	beq.w	8001f64 <ignition_trigger_event_handle+0x168>
{
 8001e06:	b530      	push	{r4, r5, lr}
 8001e08:	b085      	sub	sp, #20
    if (!IS_IN_RANGE(configuration.ignition_dwell, IGNITION_MIN_DWELL_TIME_MS, IGNITION_MAX_DWELL_TIME_MS))
 8001e0a:	4b57      	ldr	r3, [pc, #348]	@ (8001f68 <ignition_trigger_event_handle+0x16c>)
 8001e0c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e10:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	f2c0 8097 	blt.w	8001f4e <ignition_trigger_event_handle+0x152>
 8001e20:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	f200 808f 	bhi.w	8001f4e <ignition_trigger_event_handle+0x152>
    uint8_t phase = (uint8_t)(crankshaft_angle / engine.firing_interval);
 8001e30:	4b4e      	ldr	r3, [pc, #312]	@ (8001f6c <ignition_trigger_event_handle+0x170>)
 8001e32:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e36:	eec0 6a07 	vdiv.f32	s13, s0, s14
 8001e3a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001e3e:	edcd 6a01 	vstr	s13, [sp, #4]
 8001e42:	f89d 3004 	ldrb.w	r3, [sp, #4]
    volatile angle_t next_spark_angle = phase * engine.firing_interval - spark_advance + engine.firing_interval;
 8001e46:	ee06 3a90 	vmov	s13, r3
 8001e4a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001e4e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001e52:	eeb3 6a0e 	vmov.f32	s12, #62	@ 0x41f00000  30.0
 8001e56:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8001e5a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001e5e:	ed8d 7a03 	vstr	s14, [sp, #12]
    volatile angle_t next_dwell_angle = next_spark_angle - (float)configuration.ignition_dwell * (float)1000 * degrees_per_microsecond(rpm);
 8001e62:	ed9d 7a03 	vldr	s14, [sp, #12]
 8001e66:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8001f70 <ignition_trigger_event_handle+0x174>
 8001e6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 * @brief Function to calculate the degrees the engine turns in one microsecond.
 * @note Returns 0 if rpm is 0.
 */
static inline angle_t degrees_per_microsecond(rpm_t rpm)
{
    if (rpm == 0)
 8001e6e:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d06f      	beq.n	8001f58 <ignition_trigger_event_handle+0x15c>
    {
        return 0.0f;
    }
    return (angle_t)(rpm * 360.0f) / (60.0f * 1e6f);
 8001e78:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8001f74 <ignition_trigger_event_handle+0x178>
 8001e7c:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8001e80:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8001f78 <ignition_trigger_event_handle+0x17c>
 8001e84:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 8001e88:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e90:	edcd 7a02 	vstr	s15, [sp, #8]
    next_firing_cylinders[0] = ignition_order[phase] - 1;
 8001e94:	4c39      	ldr	r4, [pc, #228]	@ (8001f7c <ignition_trigger_event_handle+0x180>)
 8001e96:	5ce2      	ldrb	r2, [r4, r3]
 8001e98:	3a01      	subs	r2, #1
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	4938      	ldr	r1, [pc, #224]	@ (8001f80 <ignition_trigger_event_handle+0x184>)
 8001e9e:	700a      	strb	r2, [r1, #0]
    next_firing_cylinders[1] = ignition_order[phase] - 1;
 8001ea0:	704a      	strb	r2, [r1, #1]
        next_firing_cylinders[1] = ignition_order[phase + 2] - 1;
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	5ce3      	ldrb	r3, [r4, r3]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	704b      	strb	r3, [r1, #1]
    bool is_synced = engine.trigger.sync_status == TS_FULLY_SYNCED;
 8001eaa:	4b30      	ldr	r3, [pc, #192]	@ (8001f6c <ignition_trigger_event_handle+0x170>)
 8001eac:	7e5b      	ldrb	r3, [r3, #25]
    if (is_synced && (next_dwell_angle - crankshaft_angle) < 10 && !spark_is_in_progress && (next_dwell_angle - crankshaft_angle) > 0)
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d150      	bne.n	8001f54 <ignition_trigger_event_handle+0x158>
 8001eb2:	eddd 7a02 	vldr	s15, [sp, #8]
 8001eb6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8001eba:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec6:	d545      	bpl.n	8001f54 <ignition_trigger_event_handle+0x158>
 8001ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f84 <ignition_trigger_event_handle+0x188>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d141      	bne.n	8001f54 <ignition_trigger_event_handle+0x158>
 8001ed0:	eddd 7a02 	vldr	s15, [sp, #8]
 8001ed4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8001ed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee0:	dd38      	ble.n	8001f54 <ignition_trigger_event_handle+0x158>
        spark_is_in_progress = true;
 8001ee2:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <ignition_trigger_event_handle+0x188>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
        time_us_t dwell_start_time_us = current_time_us + (time_us_t)((next_dwell_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 8001ee8:	ed9d 7a02 	vldr	s14, [sp, #8]
 8001eec:	ee37 7a40 	vsub.f32	s14, s14, s0
    if (rpm == 0)
 8001ef0:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef8:	d031      	beq.n	8001f5e <ignition_trigger_event_handle+0x162>
    return (time_us_t) 60.0f * 1e6f / (rpm * 360.0f);
 8001efa:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8001f74 <ignition_trigger_event_handle+0x178>
 8001efe:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8001f02:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001f78 <ignition_trigger_event_handle+0x17c>
 8001f06:	eec6 7aa0 	vdiv.f32	s15, s13, s1
 8001f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f16:	eebc 7ac7 	vcvt.u32.f32	s14, s14
        time_us_t spark_start_time_us = current_time_us + (time_us_t)((next_spark_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 8001f1a:	eddd 6a03 	vldr	s13, [sp, #12]
 8001f1e:	ee76 6ac0 	vsub.f32	s13, s13, s0
 8001f22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f2a:	ee17 4a90 	vmov	r4, s15
 8001f2e:	4404      	add	r4, r0
        scheduler_schedule_event_with_arg(dwell_start_time_us, ignition_coil_begin_charge, (void*)next_firing_cylinders);
 8001f30:	4d13      	ldr	r5, [pc, #76]	@ (8001f80 <ignition_trigger_event_handle+0x184>)
 8001f32:	462a      	mov	r2, r5
 8001f34:	4914      	ldr	r1, [pc, #80]	@ (8001f88 <ignition_trigger_event_handle+0x18c>)
 8001f36:	ee17 3a10 	vmov	r3, s14
 8001f3a:	4403      	add	r3, r0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f005 fcf3 	bl	8007928 <scheduler_schedule_event_with_arg>
        scheduler_schedule_event_with_arg(spark_start_time_us, ignition_coil_fire_spark, (void*)next_firing_cylinders);
 8001f42:	462a      	mov	r2, r5
 8001f44:	4911      	ldr	r1, [pc, #68]	@ (8001f8c <ignition_trigger_event_handle+0x190>)
 8001f46:	4620      	mov	r0, r4
 8001f48:	f005 fcee 	bl	8007928 <scheduler_schedule_event_with_arg>
 8001f4c:	e002      	b.n	8001f54 <ignition_trigger_event_handle+0x158>
        log_error("ignition dwell out of bounds.");
 8001f4e:	4810      	ldr	r0, [pc, #64]	@ (8001f90 <ignition_trigger_event_handle+0x194>)
 8001f50:	f7ff fc1a 	bl	8001788 <log_error>
}
 8001f54:	b005      	add	sp, #20
 8001f56:	bd30      	pop	{r4, r5, pc}
        return 0.0f;
 8001f58:	ed9f 6a0e 	vldr	s12, [pc, #56]	@ 8001f94 <ignition_trigger_event_handle+0x198>
 8001f5c:	e794      	b.n	8001e88 <ignition_trigger_event_handle+0x8c>
        return 0;
 8001f5e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8001f98 <ignition_trigger_event_handle+0x19c>
 8001f62:	e7d4      	b.n	8001f0e <ignition_trigger_event_handle+0x112>
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	200009a4 	.word	0x200009a4
 8001f6c:	20000964 	.word	0x20000964
 8001f70:	447a0000 	.word	0x447a0000
 8001f74:	43b40000 	.word	0x43b40000
 8001f78:	4c64e1c0 	.word	0x4c64e1c0
 8001f7c:	200046bc 	.word	0x200046bc
 8001f80:	200046b8 	.word	0x200046b8
 8001f84:	200046ba 	.word	0x200046ba
 8001f88:	08001c7d 	.word	0x08001c7d
 8001f8c:	08001cd5 	.word	0x08001cd5
 8001f90:	0800a170 	.word	0x0800a170
	...

08001f9c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f9c:	f100 0308 	add.w	r3, r0, #8
 8001fa0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fa8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001faa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fb0:	4770      	bx	lr

08001fb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fb6:	4770      	bx	lr

08001fb8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001fb8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001fba:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fc0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001fc2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001fc4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001fc6:	6803      	ldr	r3, [r0, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	6003      	str	r3, [r0, #0]
}
 8001fcc:	4770      	bx	lr

08001fce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fce:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fd0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fd2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001fd6:	d011      	beq.n	8001ffc <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001fd8:	f100 0308 	add.w	r3, r0, #8
 8001fdc:	461c      	mov	r4, r3
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	42aa      	cmp	r2, r5
 8001fe4:	d9fa      	bls.n	8001fdc <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fe6:	6863      	ldr	r3, [r4, #4]
 8001fe8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fea:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fec:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fee:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001ff0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001ff2:	6803      	ldr	r3, [r0, #0]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	6003      	str	r3, [r0, #0]
}
 8001ff8:	bc30      	pop	{r4, r5}
 8001ffa:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ffc:	6904      	ldr	r4, [r0, #16]
 8001ffe:	e7f2      	b.n	8001fe6 <vListInsert+0x18>

08002000 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002000:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002002:	6841      	ldr	r1, [r0, #4]
 8002004:	6882      	ldr	r2, [r0, #8]
 8002006:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002008:	6841      	ldr	r1, [r0, #4]
 800200a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	4282      	cmp	r2, r0
 8002010:	d006      	beq.n	8002020 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002012:	2200      	movs	r2, #0
 8002014:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	3a01      	subs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800201c:	6818      	ldr	r0, [r3, #0]
}
 800201e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002020:	6882      	ldr	r2, [r0, #8]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	e7f5      	b.n	8002012 <uxListRemove+0x12>

08002026 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  __NOP();
 8002026:	bf00      	nop
  if (GPIO_Pin == GPIO_PIN_9)
 8002028:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800202c:	d000      	beq.n	8002030 <HAL_GPIO_EXTI_Callback+0xa>
 800202e:	4770      	bx	lr
{
 8002030:	b508      	push	{r3, lr}
  {
    trigger_tooth_handle();
 8002032:	f005 fd5f 	bl	8007af4 <trigger_tooth_handle>
  }
}
 8002036:	bd08      	pop	{r3, pc}

08002038 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002038:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 800203a:	6802      	ldr	r2, [r0, #0]
 800203c:	4b03      	ldr	r3, [pc, #12]	@ (800204c <HAL_TIM_PeriodElapsedCallback+0x14>)
 800203e:	429a      	cmp	r2, r3
 8002040:	d000      	beq.n	8002044 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002042:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002044:	f000 feb4 	bl	8002db0 <HAL_IncTick>
}
 8002048:	e7fb      	b.n	8002042 <HAL_TIM_PeriodElapsedCallback+0xa>
 800204a:	bf00      	nop
 800204c:	40014800 	.word	0x40014800

08002050 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002050:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002052:	e7fe      	b.n	8002052 <Error_Handler+0x2>

08002054 <SystemClock_Config>:
{
 8002054:	b510      	push	{r4, lr}
 8002056:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002058:	ac08      	add	r4, sp, #32
 800205a:	2230      	movs	r2, #48	@ 0x30
 800205c:	2100      	movs	r1, #0
 800205e:	4620      	mov	r0, r4
 8002060:	f007 f998 	bl	8009394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002064:	2300      	movs	r3, #0
 8002066:	9303      	str	r3, [sp, #12]
 8002068:	9304      	str	r3, [sp, #16]
 800206a:	9305      	str	r3, [sp, #20]
 800206c:	9306      	str	r3, [sp, #24]
 800206e:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	4a21      	ldr	r2, [pc, #132]	@ (80020f8 <SystemClock_Config+0xa4>)
 8002074:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002076:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800207a:	6411      	str	r1, [r2, #64]	@ 0x40
 800207c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800207e:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8002082:	9201      	str	r2, [sp, #4]
 8002084:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002086:	9302      	str	r3, [sp, #8]
 8002088:	4a1c      	ldr	r2, [pc, #112]	@ (80020fc <SystemClock_Config+0xa8>)
 800208a:	6813      	ldr	r3, [r2, #0]
 800208c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	6813      	ldr	r3, [r2, #0]
 8002098:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800209c:	9302      	str	r3, [sp, #8]
 800209e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020a0:	2301      	movs	r3, #1
 80020a2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020a8:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020aa:	2302      	movs	r3, #2
 80020ac:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020b2:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80020b4:	2319      	movs	r3, #25
 80020b6:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80020b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80020bc:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80020be:	2304      	movs	r3, #4
 80020c0:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020c2:	2307      	movs	r3, #7
 80020c4:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c6:	4620      	mov	r0, r4
 80020c8:	f002 fb08 	bl	80046dc <HAL_RCC_OscConfig>
 80020cc:	b978      	cbnz	r0, 80020ee <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ce:	230f      	movs	r3, #15
 80020d0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020d2:	2102      	movs	r1, #2
 80020d4:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020de:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020e0:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020e2:	a803      	add	r0, sp, #12
 80020e4:	f002 fd4a 	bl	8004b7c <HAL_RCC_ClockConfig>
 80020e8:	b918      	cbnz	r0, 80020f2 <SystemClock_Config+0x9e>
}
 80020ea:	b014      	add	sp, #80	@ 0x50
 80020ec:	bd10      	pop	{r4, pc}
    Error_Handler();
 80020ee:	f7ff ffaf 	bl	8002050 <Error_Handler>
    Error_Handler();
 80020f2:	f7ff ffad 	bl	8002050 <Error_Handler>
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40007000 	.word	0x40007000

08002100 <main>:
{
 8002100:	b508      	push	{r3, lr}
  HAL_Init();
 8002102:	f000 fe3b 	bl	8002d7c <HAL_Init>
  SystemClock_Config();
 8002106:	f7ff ffa5 	bl	8002054 <SystemClock_Config>
  MX_GPIO_Init();
 800210a:	f7ff fc1f 	bl	800194c <MX_GPIO_Init>
  MX_DMA_Init();
 800210e:	f7ff faa3 	bl	8001658 <MX_DMA_Init>
  MX_TIM3_Init();
 8002112:	f005 f855 	bl	80071c0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002116:	f7fe fcc3 	bl	8000aa0 <MX_ADC1_Init>
  MX_TIM1_Init();
 800211a:	f004 ffed 	bl	80070f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800211e:	f004 fefb 	bl	8006f18 <MX_TIM2_Init>
  MX_CRC_Init();
 8002122:	f7ff f91d 	bl	8001360 <MX_CRC_Init>
  osKernelInitialize();
 8002126:	f7fe fe5b 	bl	8000de0 <osKernelInitialize>
  MX_FREERTOS_Init();
 800212a:	f7ff fb89 	bl	8001840 <MX_FREERTOS_Init>
  osKernelStart();
 800212e:	f7fe fe69 	bl	8000e04 <osKernelStart>
  while (1)
 8002132:	e7fe      	b.n	8002132 <main+0x32>

08002134 <pid_init>:
#include "pid.h"

void pid_init(pid_t *pid)
{
    /* Clearing controller variables */
    pid->integrator = 0.0f;
 8002134:	2300      	movs	r3, #0
 8002136:	6203      	str	r3, [r0, #32]
    pid->differentiator = 0.0f;
 8002138:	6243      	str	r3, [r0, #36]	@ 0x24
    pid->prev_error = 0.0f;
 800213a:	6283      	str	r3, [r0, #40]	@ 0x28
    pid->prev_input = 0.0f;
 800213c:	62c3      	str	r3, [r0, #44]	@ 0x2c

    pid->prev_controller_time_us = 0;
 800213e:	2200      	movs	r2, #0
 8002140:	6302      	str	r2, [r0, #48]	@ 0x30
    pid->output = 0.0f;
 8002142:	6383      	str	r3, [r0, #56]	@ 0x38

    /**
     * @todo implement checks for the parameters
     */
    
}
 8002144:	4770      	bx	lr

08002146 <pid_set_setpoint>:

void pid_set_setpoint(pid_t *pid, float setpoint)
{
    pid->setpoint = setpoint;
 8002146:	ed80 0a0d 	vstr	s0, [r0, #52]	@ 0x34
}
 800214a:	4770      	bx	lr

0800214c <pid_compute>:

float pid_compute(pid_t *pid, time_us_t current_time_us, float input)
{
    /* Compute the time between the function calls to determine T */
    time_us_t T_us = current_time_us - pid->prev_controller_time_us;
 800214c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800214e:	1acb      	subs	r3, r1, r3
    float T_sec = (float)T_us / (float)1e6f;
 8002150:	ee07 3a90 	vmov	s15, r3
 8002154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002158:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002240 <pid_compute+0xf4>
 800215c:	eec7 6a87 	vdiv.f32	s13, s15, s14

    /* Finding the error */
    float error = pid->setpoint - input;
 8002160:	ed90 6a0d 	vldr	s12, [r0, #52]	@ 0x34
 8002164:	ee36 6a40 	vsub.f32	s12, s12, s0

    /* Finding the P-term */
    float proportional = pid->Kp * error;
 8002168:	edd0 5a00 	vldr	s11, [r0]
 800216c:	ee65 5a86 	vmul.f32	s11, s11, s12

    /* Finding the integral term*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * T_sec *(error + pid->prev_error);
 8002170:	ed90 7a08 	vldr	s14, [r0, #32]
 8002174:	edd0 7a01 	vldr	s15, [r0, #4]
 8002178:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 800217c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002180:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002184:	ed90 5a0a 	vldr	s10, [r0, #40]	@ 0x28
 8002188:	ee35 5a06 	vadd.f32	s10, s10, s12
 800218c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002194:	edc0 7a08 	vstr	s15, [r0, #32]

    /* Anti-windup - works by clamping the integrator */
    if (pid->integrator > pid->limit_integrator_max)
 8002198:	ed90 7a07 	vldr	s14, [r0, #28]
 800219c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a4:	dd38      	ble.n	8002218 <pid_compute+0xcc>
    {
        pid->integrator = pid->limit_integrator_max;
 80021a6:	ed80 7a08 	vstr	s14, [r0, #32]

    /* Finding the derivative term @note has a low pass filter */
    /**
     * @note only derivative on input has been implemented for now
     */
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 80021aa:	edd0 7a02 	vldr	s15, [r0, #8]
 80021ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021b2:	ed90 7a0b 	vldr	s14, [r0, #44]	@ 0x2c
 80021b6:	ee30 7a47 	vsub.f32	s14, s0, s14
 80021ba:	ee67 7a87 	vmul.f32	s15, s15, s14
                          +(2.0f * pid->derivative_filter_tau - T_sec) * pid->differentiator)
 80021be:	ed90 7a03 	vldr	s14, [r0, #12]
 80021c2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80021c6:	ee37 5a66 	vsub.f32	s10, s14, s13
 80021ca:	edd0 4a09 	vldr	s9, [r0, #36]	@ 0x24
 80021ce:	ee25 5a24 	vmul.f32	s10, s10, s9
 80021d2:	ee77 7a85 	vadd.f32	s15, s15, s10
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 80021d6:	eef1 7a67 	vneg.f32	s15, s15
                          / (2.0f * pid->derivative_filter_tau + T_sec);
 80021da:	ee37 7a26 	vadd.f32	s14, s14, s13
 80021de:	eec7 6a87 	vdiv.f32	s13, s15, s14
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 80021e2:	edc0 6a09 	vstr	s13, [r0, #36]	@ 0x24

    /* Summing the terms to make the output */
    pid->output = proportional + pid->integrator + pid->differentiator;
 80021e6:	edd0 7a08 	vldr	s15, [r0, #32]
 80021ea:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80021ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021f2:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38

    /* Clamp the output the the output bounds */
    if (pid->output > pid->limit_output_max)
 80021f6:	ed90 7a05 	vldr	s14, [r0, #20]
 80021fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002202:	dd13      	ble.n	800222c <pid_compute+0xe0>
    {
        pid->output = pid->limit_output_max;
 8002204:	ed80 7a0e 	vstr	s14, [r0, #56]	@ 0x38
    {
        pid->output = pid->limit_output_min;
    }

    /* Save the variables for the next function call */
    pid->prev_error = error;
 8002208:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
    pid->prev_input = input;
 800220c:	ed80 0a0b 	vstr	s0, [r0, #44]	@ 0x2c
    pid->prev_controller_time_us = current_time_us;
 8002210:	6301      	str	r1, [r0, #48]	@ 0x30
    
    return pid->output;
}
 8002212:	ed90 0a0e 	vldr	s0, [r0, #56]	@ 0x38
 8002216:	4770      	bx	lr
    else if (pid->integrator < pid->limit_integrator_min)
 8002218:	ed90 7a06 	vldr	s14, [r0, #24]
 800221c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002224:	d5c1      	bpl.n	80021aa <pid_compute+0x5e>
        pid->integrator = pid->limit_integrator_min;
 8002226:	ed80 7a08 	vstr	s14, [r0, #32]
 800222a:	e7be      	b.n	80021aa <pid_compute+0x5e>
    else if (pid->output < pid->limit_output_min)
 800222c:	ed90 7a04 	vldr	s14, [r0, #16]
 8002230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002238:	d5e6      	bpl.n	8002208 <pid_compute+0xbc>
        pid->output = pid->limit_output_min;
 800223a:	ed80 7a0e 	vstr	s14, [r0, #56]	@ 0x38
 800223e:	e7e3      	b.n	8002208 <pid_compute+0xbc>
 8002240:	49742400 	.word	0x49742400

08002244 <pid_set_tuning>:

void pid_set_tuning(pid_t *pid, pid_configuration_s *conf)
{
    if (pid == NULL)
 8002244:	b158      	cbz	r0, 800225e <pid_set_tuning+0x1a>
        return;
    }
    /**
     * @todo provide propper range checks in the furture
     */
    pid->Kp = conf->Kp;
 8002246:	680a      	ldr	r2, [r1, #0]
 8002248:	6002      	str	r2, [r0, #0]
    pid->Ki = conf->Ki;
 800224a:	684a      	ldr	r2, [r1, #4]
 800224c:	6042      	str	r2, [r0, #4]
    pid->Kd = conf->Kd;
 800224e:	688a      	ldr	r2, [r1, #8]
 8002250:	6082      	str	r2, [r0, #8]
    pid->limit_integrator_min = conf->limit_integrator_min;
 8002252:	68ca      	ldr	r2, [r1, #12]
 8002254:	6182      	str	r2, [r0, #24]
    pid->limit_integrator_max = conf->limit_integrator_max;
 8002256:	690a      	ldr	r2, [r1, #16]
 8002258:	61c2      	str	r2, [r0, #28]
    pid->derivative_filter_tau = conf->derivative_filter_tau;
 800225a:	694a      	ldr	r2, [r1, #20]
 800225c:	60c2      	str	r2, [r0, #12]
 800225e:	4770      	bx	lr

08002260 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002260:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002266:	4b0d      	ldr	r3, [pc, #52]	@ (800229c <prvTaskExitError+0x3c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226e:	d008      	beq.n	8002282 <prvTaskExitError+0x22>
 8002270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002274:	f383 8811 	msr	BASEPRI, r3
 8002278:	f3bf 8f6f 	isb	sy
 800227c:	f3bf 8f4f 	dsb	sy
 8002280:	e7fe      	b.n	8002280 <prvTaskExitError+0x20>
 8002282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002292:	9b01      	ldr	r3, [sp, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0fc      	beq.n	8002292 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002298:	b002      	add	sp, #8
 800229a:	4770      	bx	lr
 800229c:	20000048 	.word	0x20000048

080022a0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80022a0:	4808      	ldr	r0, [pc, #32]	@ (80022c4 <prvPortStartFirstTask+0x24>)
 80022a2:	6800      	ldr	r0, [r0, #0]
 80022a4:	6800      	ldr	r0, [r0, #0]
 80022a6:	f380 8808 	msr	MSP, r0
 80022aa:	f04f 0000 	mov.w	r0, #0
 80022ae:	f380 8814 	msr	CONTROL, r0
 80022b2:	b662      	cpsie	i
 80022b4:	b661      	cpsie	f
 80022b6:	f3bf 8f4f 	dsb	sy
 80022ba:	f3bf 8f6f 	isb	sy
 80022be:	df00      	svc	0
 80022c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80022c2:	0000      	.short	0x0000
 80022c4:	e000ed08 	.word	0xe000ed08

080022c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80022c8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80022d8 <vPortEnableVFP+0x10>
 80022cc:	6801      	ldr	r1, [r0, #0]
 80022ce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80022d2:	6001      	str	r1, [r0, #0]
 80022d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80022d6:	0000      	.short	0x0000
 80022d8:	e000ed88 	.word	0xe000ed88

080022dc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80022dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022e0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80022e4:	f021 0101 	bic.w	r1, r1, #1
 80022e8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80022ec:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <pxPortInitialiseStack+0x28>)
 80022ee:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80022f2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80022f6:	f06f 0302 	mvn.w	r3, #2
 80022fa:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80022fe:	3844      	subs	r0, #68	@ 0x44
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	08002261 	.word	0x08002261
	...

08002310 <SVC_Handler>:
	__asm volatile (
 8002310:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <pxCurrentTCBConst2>)
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	6808      	ldr	r0, [r1, #0]
 8002316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800231a:	f380 8809 	msr	PSP, r0
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f04f 0000 	mov.w	r0, #0
 8002326:	f380 8811 	msr	BASEPRI, r0
 800232a:	4770      	bx	lr
 800232c:	f3af 8000 	nop.w

08002330 <pxCurrentTCBConst2>:
 8002330:	20004c78 	.word	0x20004c78

08002334 <vPortEnterCritical>:
 8002334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002344:	4a0b      	ldr	r2, [pc, #44]	@ (8002374 <vPortEnterCritical+0x40>)
 8002346:	6813      	ldr	r3, [r2, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800234c:	2b01      	cmp	r3, #1
 800234e:	d000      	beq.n	8002352 <vPortEnterCritical+0x1e>
}
 8002350:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002352:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002356:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800235a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800235e:	d0f7      	beq.n	8002350 <vPortEnterCritical+0x1c>
 8002360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002364:	f383 8811 	msr	BASEPRI, r3
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	e7fe      	b.n	8002370 <vPortEnterCritical+0x3c>
 8002372:	bf00      	nop
 8002374:	20000048 	.word	0x20000048

08002378 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002378:	4b09      	ldr	r3, [pc, #36]	@ (80023a0 <vPortExitCritical+0x28>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	b943      	cbnz	r3, 8002390 <vPortExitCritical+0x18>
 800237e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002382:	f383 8811 	msr	BASEPRI, r3
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	e7fe      	b.n	800238e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002390:	3b01      	subs	r3, #1
 8002392:	4a03      	ldr	r2, [pc, #12]	@ (80023a0 <vPortExitCritical+0x28>)
 8002394:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002396:	b90b      	cbnz	r3, 800239c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002398:	f383 8811 	msr	BASEPRI, r3
}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000048 	.word	0x20000048
	...

080023b0 <PendSV_Handler>:
	__asm volatile
 80023b0:	f3ef 8009 	mrs	r0, PSP
 80023b4:	f3bf 8f6f 	isb	sy
 80023b8:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <pxCurrentTCBConst>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	f01e 0f10 	tst.w	lr, #16
 80023c0:	bf08      	it	eq
 80023c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80023c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ca:	6010      	str	r0, [r2, #0]
 80023cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80023d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80023d4:	f380 8811 	msr	BASEPRI, r0
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	f3bf 8f6f 	isb	sy
 80023e0:	f004 fc26 	bl	8006c30 <vTaskSwitchContext>
 80023e4:	f04f 0000 	mov.w	r0, #0
 80023e8:	f380 8811 	msr	BASEPRI, r0
 80023ec:	bc09      	pop	{r0, r3}
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	6808      	ldr	r0, [r1, #0]
 80023f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023f6:	f01e 0f10 	tst.w	lr, #16
 80023fa:	bf08      	it	eq
 80023fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002400:	f380 8809 	msr	PSP, r0
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	f3af 8000 	nop.w

08002410 <pxCurrentTCBConst>:
 8002410:	20004c78 	.word	0x20004c78

08002414 <xPortSysTickHandler>:
{
 8002414:	b508      	push	{r3, lr}
	__asm volatile
 8002416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002426:	f004 fad5 	bl	80069d4 <xTaskIncrementTick>
 800242a:	b128      	cbz	r0, 8002438 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800242c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002434:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8002438:	2300      	movs	r3, #0
 800243a:	f383 8811 	msr	BASEPRI, r3
}
 800243e:	bd08      	pop	{r3, pc}

08002440 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002440:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002444:	2300      	movs	r3, #0
 8002446:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002448:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800244a:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <vPortSetupTimerInterrupt+0x20>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4905      	ldr	r1, [pc, #20]	@ (8002464 <vPortSetupTimerInterrupt+0x24>)
 8002450:	fba1 1303 	umull	r1, r3, r1, r3
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	3b01      	subs	r3, #1
 8002458:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800245a:	2307      	movs	r3, #7
 800245c:	6113      	str	r3, [r2, #16]
}
 800245e:	4770      	bx	lr
 8002460:	20000054 	.word	0x20000054
 8002464:	10624dd3 	.word	0x10624dd3

08002468 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002468:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800246c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002470:	4b3d      	ldr	r3, [pc, #244]	@ (8002568 <xPortStartScheduler+0x100>)
 8002472:	429a      	cmp	r2, r3
 8002474:	d01c      	beq.n	80024b0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002476:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800247a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800247e:	4b3b      	ldr	r3, [pc, #236]	@ (800256c <xPortStartScheduler+0x104>)
 8002480:	429a      	cmp	r2, r3
 8002482:	d01e      	beq.n	80024c2 <xPortStartScheduler+0x5a>
{
 8002484:	b530      	push	{r4, r5, lr}
 8002486:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002488:	4b39      	ldr	r3, [pc, #228]	@ (8002570 <xPortStartScheduler+0x108>)
 800248a:	781a      	ldrb	r2, [r3, #0]
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002490:	22ff      	movs	r2, #255	@ 0xff
 8002492:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800249c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80024a0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80024a4:	4a33      	ldr	r2, [pc, #204]	@ (8002574 <xPortStartScheduler+0x10c>)
 80024a6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80024a8:	4b33      	ldr	r3, [pc, #204]	@ (8002578 <xPortStartScheduler+0x110>)
 80024aa:	2207      	movs	r2, #7
 80024ac:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024ae:	e01b      	b.n	80024e8 <xPortStartScheduler+0x80>
	__asm volatile
 80024b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024b4:	f383 8811 	msr	BASEPRI, r3
 80024b8:	f3bf 8f6f 	isb	sy
 80024bc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80024c0:	e7fe      	b.n	80024c0 <xPortStartScheduler+0x58>
 80024c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c6:	f383 8811 	msr	BASEPRI, r3
 80024ca:	f3bf 8f6f 	isb	sy
 80024ce:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80024d2:	e7fe      	b.n	80024d2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 80024d4:	4a28      	ldr	r2, [pc, #160]	@ (8002578 <xPortStartScheduler+0x110>)
 80024d6:	6813      	ldr	r3, [r2, #0]
 80024d8:	3b01      	subs	r3, #1
 80024da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80024dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80024ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80024f0:	d1f0      	bne.n	80024d4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80024f2:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <xPortStartScheduler+0x110>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d008      	beq.n	800250c <xPortStartScheduler+0xa4>
 80024fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024fe:	f383 8811 	msr	BASEPRI, r3
 8002502:	f3bf 8f6f 	isb	sy
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	e7fe      	b.n	800250a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800250c:	021b      	lsls	r3, r3, #8
 800250e:	4a1a      	ldr	r2, [pc, #104]	@ (8002578 <xPortStartScheduler+0x110>)
 8002510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002512:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002516:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002518:	9b01      	ldr	r3, [sp, #4]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4a14      	ldr	r2, [pc, #80]	@ (8002570 <xPortStartScheduler+0x108>)
 800251e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002520:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8002524:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8002528:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800252c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002530:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8002534:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002538:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800253c:	f7ff ff80 	bl	8002440 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002540:	2500      	movs	r5, #0
 8002542:	4b0e      	ldr	r3, [pc, #56]	@ (800257c <xPortStartScheduler+0x114>)
 8002544:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8002546:	f7ff febf 	bl	80022c8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800254a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800254e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002552:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8002556:	f7ff fea3 	bl	80022a0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800255a:	f004 fb69 	bl	8006c30 <vTaskSwitchContext>
	prvTaskExitError();
 800255e:	f7ff fe7f 	bl	8002260 <prvTaskExitError>
}
 8002562:	4628      	mov	r0, r5
 8002564:	b003      	add	sp, #12
 8002566:	bd30      	pop	{r4, r5, pc}
 8002568:	410fc271 	.word	0x410fc271
 800256c:	410fc270 	.word	0x410fc270
 8002570:	e000e400 	.word	0xe000e400
 8002574:	200046e8 	.word	0x200046e8
 8002578:	200046e4 	.word	0x200046e4
 800257c:	20000048 	.word	0x20000048

08002580 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002580:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002584:	2b0f      	cmp	r3, #15
 8002586:	d90e      	bls.n	80025a6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002588:	4a11      	ldr	r2, [pc, #68]	@ (80025d0 <vPortValidateInterruptPriority+0x50>)
 800258a:	5c9a      	ldrb	r2, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800258c:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <vPortValidateInterruptPriority+0x54>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d208      	bcs.n	80025a6 <vPortValidateInterruptPriority+0x26>
 8002594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	e7fe      	b.n	80025a4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80025a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80025aa:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80025ae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80025b2:	4a09      	ldr	r2, [pc, #36]	@ (80025d8 <vPortValidateInterruptPriority+0x58>)
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d908      	bls.n	80025cc <vPortValidateInterruptPriority+0x4c>
 80025ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025be:	f383 8811 	msr	BASEPRI, r3
 80025c2:	f3bf 8f6f 	isb	sy
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	e7fe      	b.n	80025ca <vPortValidateInterruptPriority+0x4a>
	}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e3f0 	.word	0xe000e3f0
 80025d4:	200046e8 	.word	0x200046e8
 80025d8:	200046e4 	.word	0x200046e4

080025dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80025dc:	b510      	push	{r4, lr}
 80025de:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025e0:	f7ff fea8 	bl	8002334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80025e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80025e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d004      	beq.n	80025f6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80025ec:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80025ee:	f7ff fec3 	bl	8002378 <vPortExitCritical>

	return xReturn;
}
 80025f2:	4620      	mov	r0, r4
 80025f4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80025f6:	2401      	movs	r4, #1
 80025f8:	e7f9      	b.n	80025ee <prvIsQueueFull+0x12>

080025fa <prvIsQueueEmpty>:
{
 80025fa:	b510      	push	{r4, lr}
 80025fc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80025fe:	f7ff fe99 	bl	8002334 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002602:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002604:	b923      	cbnz	r3, 8002610 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8002606:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8002608:	f7ff feb6 	bl	8002378 <vPortExitCritical>
}
 800260c:	4620      	mov	r0, r4
 800260e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8002610:	2400      	movs	r4, #0
 8002612:	e7f9      	b.n	8002608 <prvIsQueueEmpty+0xe>

08002614 <prvCopyDataToQueue>:
{
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	4604      	mov	r4, r0
 8002618:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800261a:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800261c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800261e:	b95a      	cbnz	r2, 8002638 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002620:	6803      	ldr	r3, [r0, #0]
 8002622:	b11b      	cbz	r3, 800262c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8002624:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002626:	3601      	adds	r6, #1
 8002628:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 800262a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800262c:	6880      	ldr	r0, [r0, #8]
 800262e:	f004 fc2b 	bl	8006e88 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002632:	2300      	movs	r3, #0
 8002634:	60a3      	str	r3, [r4, #8]
 8002636:	e7f6      	b.n	8002626 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8002638:	b96d      	cbnz	r5, 8002656 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800263a:	6840      	ldr	r0, [r0, #4]
 800263c:	f006 fede 	bl	80093fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002640:	6863      	ldr	r3, [r4, #4]
 8002642:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002644:	4413      	add	r3, r2
 8002646:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002648:	68a2      	ldr	r2, [r4, #8]
 800264a:	4293      	cmp	r3, r2
 800264c:	d319      	bcc.n	8002682 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8002652:	4628      	mov	r0, r5
 8002654:	e7e7      	b.n	8002626 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002656:	68c0      	ldr	r0, [r0, #12]
 8002658:	f006 fed0 	bl	80093fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800265c:	68e3      	ldr	r3, [r4, #12]
 800265e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002660:	4251      	negs	r1, r2
 8002662:	1a9b      	subs	r3, r3, r2
 8002664:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002666:	6822      	ldr	r2, [r4, #0]
 8002668:	4293      	cmp	r3, r2
 800266a:	d202      	bcs.n	8002672 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800266c:	68a3      	ldr	r3, [r4, #8]
 800266e:	440b      	add	r3, r1
 8002670:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002672:	2d02      	cmp	r5, #2
 8002674:	d001      	beq.n	800267a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8002676:	2000      	movs	r0, #0
 8002678:	e7d5      	b.n	8002626 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800267a:	b126      	cbz	r6, 8002686 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800267c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800267e:	2000      	movs	r0, #0
 8002680:	e7d1      	b.n	8002626 <prvCopyDataToQueue+0x12>
 8002682:	4628      	mov	r0, r5
 8002684:	e7cf      	b.n	8002626 <prvCopyDataToQueue+0x12>
 8002686:	2000      	movs	r0, #0
 8002688:	e7cd      	b.n	8002626 <prvCopyDataToQueue+0x12>

0800268a <prvCopyDataFromQueue>:
{
 800268a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800268c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800268e:	b16a      	cbz	r2, 80026ac <prvCopyDataFromQueue+0x22>
{
 8002690:	b510      	push	{r4, lr}
 8002692:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002694:	68d9      	ldr	r1, [r3, #12]
 8002696:	4411      	add	r1, r2
 8002698:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800269a:	689c      	ldr	r4, [r3, #8]
 800269c:	42a1      	cmp	r1, r4
 800269e:	d301      	bcc.n	80026a4 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026a4:	68d9      	ldr	r1, [r3, #12]
 80026a6:	f006 fea9 	bl	80093fc <memcpy>
}
 80026aa:	bd10      	pop	{r4, pc}
 80026ac:	4770      	bx	lr

080026ae <prvUnlockQueue>:
{
 80026ae:	b538      	push	{r3, r4, r5, lr}
 80026b0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80026b2:	f7ff fe3f 	bl	8002334 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80026b6:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 80026ba:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026bc:	e001      	b.n	80026c2 <prvUnlockQueue+0x14>
			--cTxLock;
 80026be:	3c01      	subs	r4, #1
 80026c0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026c2:	2c00      	cmp	r4, #0
 80026c4:	dd0a      	ble.n	80026dc <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026c6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80026c8:	b143      	cbz	r3, 80026dc <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026ca:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80026ce:	f004 fb2f 	bl	8006d30 <xTaskRemoveFromEventList>
 80026d2:	2800      	cmp	r0, #0
 80026d4:	d0f3      	beq.n	80026be <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80026d6:	f004 fbc1 	bl	8006e5c <vTaskMissedYield>
 80026da:	e7f0      	b.n	80026be <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80026dc:	23ff      	movs	r3, #255	@ 0xff
 80026de:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80026e2:	f7ff fe49 	bl	8002378 <vPortExitCritical>
	taskENTER_CRITICAL();
 80026e6:	f7ff fe25 	bl	8002334 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80026ea:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 80026ee:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80026f0:	e001      	b.n	80026f6 <prvUnlockQueue+0x48>
				--cRxLock;
 80026f2:	3c01      	subs	r4, #1
 80026f4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80026f6:	2c00      	cmp	r4, #0
 80026f8:	dd0a      	ble.n	8002710 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026fa:	692b      	ldr	r3, [r5, #16]
 80026fc:	b143      	cbz	r3, 8002710 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026fe:	f105 0010 	add.w	r0, r5, #16
 8002702:	f004 fb15 	bl	8006d30 <xTaskRemoveFromEventList>
 8002706:	2800      	cmp	r0, #0
 8002708:	d0f3      	beq.n	80026f2 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800270a:	f004 fba7 	bl	8006e5c <vTaskMissedYield>
 800270e:	e7f0      	b.n	80026f2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8002710:	23ff      	movs	r3, #255	@ 0xff
 8002712:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8002716:	f7ff fe2f 	bl	8002378 <vPortExitCritical>
}
 800271a:	bd38      	pop	{r3, r4, r5, pc}

0800271c <xQueueGenericReset>:
{
 800271c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800271e:	b1e0      	cbz	r0, 800275a <xQueueGenericReset+0x3e>
 8002720:	460d      	mov	r5, r1
 8002722:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002724:	f7ff fe06 	bl	8002334 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800272c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800272e:	fb01 3002 	mla	r0, r1, r2, r3
 8002732:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002734:	2000      	movs	r0, #0
 8002736:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002738:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800273a:	3a01      	subs	r2, #1
 800273c:	fb02 3301 	mla	r3, r2, r1, r3
 8002740:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002742:	23ff      	movs	r3, #255	@ 0xff
 8002744:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002748:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800274c:	b9fd      	cbnz	r5, 800278e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800274e:	6923      	ldr	r3, [r4, #16]
 8002750:	b963      	cbnz	r3, 800276c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8002752:	f7ff fe11 	bl	8002378 <vPortExitCritical>
}
 8002756:	2001      	movs	r0, #1
 8002758:	bd38      	pop	{r3, r4, r5, pc}
 800275a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800276a:	e7fe      	b.n	800276a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800276c:	f104 0010 	add.w	r0, r4, #16
 8002770:	f004 fade 	bl	8006d30 <xTaskRemoveFromEventList>
 8002774:	2800      	cmp	r0, #0
 8002776:	d0ec      	beq.n	8002752 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8002778:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800277c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002780:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	e7e1      	b.n	8002752 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800278e:	f104 0010 	add.w	r0, r4, #16
 8002792:	f7ff fc03 	bl	8001f9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002796:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800279a:	f7ff fbff 	bl	8001f9c <vListInitialise>
 800279e:	e7d8      	b.n	8002752 <xQueueGenericReset+0x36>

080027a0 <prvInitialiseNewQueue>:
{
 80027a0:	b538      	push	{r3, r4, r5, lr}
 80027a2:	461d      	mov	r5, r3
 80027a4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80027a6:	460b      	mov	r3, r1
 80027a8:	b949      	cbnz	r1, 80027be <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027aa:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80027ac:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80027ae:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027b0:	2101      	movs	r1, #1
 80027b2:	4620      	mov	r0, r4
 80027b4:	f7ff ffb2 	bl	800271c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80027b8:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 80027bc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027be:	6022      	str	r2, [r4, #0]
 80027c0:	e7f4      	b.n	80027ac <prvInitialiseNewQueue+0xc>

080027c2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027c2:	b940      	cbnz	r0, 80027d6 <xQueueGenericCreateStatic+0x14>
 80027c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	e7fe      	b.n	80027d4 <xQueueGenericCreateStatic+0x12>
	{
 80027d6:	b510      	push	{r4, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	461c      	mov	r4, r3
 80027dc:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 80027de:	b153      	cbz	r3, 80027f6 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027e0:	b192      	cbz	r2, 8002808 <xQueueGenericCreateStatic+0x46>
 80027e2:	b989      	cbnz	r1, 8002808 <xQueueGenericCreateStatic+0x46>
 80027e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	e7fe      	b.n	80027f4 <xQueueGenericCreateStatic+0x32>
 80027f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027fa:	f383 8811 	msr	BASEPRI, r3
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8002806:	e7fe      	b.n	8002806 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002808:	b16a      	cbz	r2, 8002826 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800280a:	2350      	movs	r3, #80	@ 0x50
 800280c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800280e:	9b03      	ldr	r3, [sp, #12]
 8002810:	2b50      	cmp	r3, #80	@ 0x50
 8002812:	d013      	beq.n	800283c <xQueueGenericCreateStatic+0x7a>
 8002814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	e7fe      	b.n	8002824 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002826:	2900      	cmp	r1, #0
 8002828:	d0ef      	beq.n	800280a <xQueueGenericCreateStatic+0x48>
 800282a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800282e:	f383 8811 	msr	BASEPRI, r3
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	f3bf 8f4f 	dsb	sy
 800283a:	e7fe      	b.n	800283a <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800283c:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800283e:	2301      	movs	r3, #1
 8002840:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002844:	9400      	str	r4, [sp, #0]
 8002846:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800284a:	4660      	mov	r0, ip
 800284c:	f7ff ffa8 	bl	80027a0 <prvInitialiseNewQueue>
	}
 8002850:	4620      	mov	r0, r4
 8002852:	b004      	add	sp, #16
 8002854:	bd10      	pop	{r4, pc}

08002856 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002856:	b940      	cbnz	r0, 800286a <xQueueGenericCreate+0x14>
 8002858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	e7fe      	b.n	8002868 <xQueueGenericCreate+0x12>
	{
 800286a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800286c:	b083      	sub	sp, #12
 800286e:	460d      	mov	r5, r1
 8002870:	4614      	mov	r4, r2
 8002872:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002874:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002878:	3050      	adds	r0, #80	@ 0x50
 800287a:	f7ff f93f 	bl	8001afc <pvPortMalloc>
		if( pxNewQueue != NULL )
 800287e:	4607      	mov	r7, r0
 8002880:	b150      	cbz	r0, 8002898 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002882:	2300      	movs	r3, #0
 8002884:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002888:	9000      	str	r0, [sp, #0]
 800288a:	4623      	mov	r3, r4
 800288c:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8002890:	4629      	mov	r1, r5
 8002892:	4630      	mov	r0, r6
 8002894:	f7ff ff84 	bl	80027a0 <prvInitialiseNewQueue>
	}
 8002898:	4638      	mov	r0, r7
 800289a:	b003      	add	sp, #12
 800289c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800289e <xQueueGenericSend>:
{
 800289e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a0:	b085      	sub	sp, #20
 80028a2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80028a4:	b188      	cbz	r0, 80028ca <xQueueGenericSend+0x2c>
 80028a6:	460f      	mov	r7, r1
 80028a8:	461d      	mov	r5, r3
 80028aa:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028ac:	b1b1      	cbz	r1, 80028dc <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028ae:	2d02      	cmp	r5, #2
 80028b0:	d120      	bne.n	80028f4 <xQueueGenericSend+0x56>
 80028b2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d01d      	beq.n	80028f4 <xQueueGenericSend+0x56>
 80028b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	e7fe      	b.n	80028c8 <xQueueGenericSend+0x2a>
 80028ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ce:	f383 8811 	msr	BASEPRI, r3
 80028d2:	f3bf 8f6f 	isb	sy
 80028d6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80028da:	e7fe      	b.n	80028da <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028dc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0e5      	beq.n	80028ae <xQueueGenericSend+0x10>
 80028e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e6:	f383 8811 	msr	BASEPRI, r3
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	e7fe      	b.n	80028f2 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028f4:	f004 fab8 	bl	8006e68 <xTaskGetSchedulerState>
 80028f8:	4606      	mov	r6, r0
 80028fa:	b958      	cbnz	r0, 8002914 <xQueueGenericSend+0x76>
 80028fc:	9b01      	ldr	r3, [sp, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d048      	beq.n	8002994 <xQueueGenericSend+0xf6>
 8002902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002906:	f383 8811 	msr	BASEPRI, r3
 800290a:	f3bf 8f6f 	isb	sy
 800290e:	f3bf 8f4f 	dsb	sy
 8002912:	e7fe      	b.n	8002912 <xQueueGenericSend+0x74>
 8002914:	2600      	movs	r6, #0
 8002916:	e03d      	b.n	8002994 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002918:	462a      	mov	r2, r5
 800291a:	4639      	mov	r1, r7
 800291c:	4620      	mov	r0, r4
 800291e:	f7ff fe79 	bl	8002614 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002922:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002924:	b97b      	cbnz	r3, 8002946 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8002926:	b148      	cbz	r0, 800293c <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8002928:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800292c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002930:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800293c:	f7ff fd1c 	bl	8002378 <vPortExitCritical>
				return pdPASS;
 8002940:	2001      	movs	r0, #1
}
 8002942:	b005      	add	sp, #20
 8002944:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002946:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800294a:	f004 f9f1 	bl	8006d30 <xTaskRemoveFromEventList>
 800294e:	2800      	cmp	r0, #0
 8002950:	d0f4      	beq.n	800293c <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8002952:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800295a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	e7e9      	b.n	800293c <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8002968:	f7ff fd06 	bl	8002378 <vPortExitCritical>
					return errQUEUE_FULL;
 800296c:	2000      	movs	r0, #0
 800296e:	e7e8      	b.n	8002942 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002970:	a802      	add	r0, sp, #8
 8002972:	f004 fa23 	bl	8006dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002976:	2601      	movs	r6, #1
 8002978:	e019      	b.n	80029ae <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800297a:	2300      	movs	r3, #0
 800297c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002980:	e021      	b.n	80029c6 <xQueueGenericSend+0x128>
 8002982:	2300      	movs	r3, #0
 8002984:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002988:	e023      	b.n	80029d2 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800298a:	4620      	mov	r0, r4
 800298c:	f7ff fe8f 	bl	80026ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002990:	f004 f8ac 	bl	8006aec <xTaskResumeAll>
		taskENTER_CRITICAL();
 8002994:	f7ff fcce 	bl	8002334 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002998:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800299a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800299c:	429a      	cmp	r2, r3
 800299e:	d3bb      	bcc.n	8002918 <xQueueGenericSend+0x7a>
 80029a0:	2d02      	cmp	r5, #2
 80029a2:	d0b9      	beq.n	8002918 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80029a4:	9b01      	ldr	r3, [sp, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0de      	beq.n	8002968 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 80029aa:	2e00      	cmp	r6, #0
 80029ac:	d0e0      	beq.n	8002970 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 80029ae:	f7ff fce3 	bl	8002378 <vPortExitCritical>
		vTaskSuspendAll();
 80029b2:	f004 f801 	bl	80069b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029b6:	f7ff fcbd 	bl	8002334 <vPortEnterCritical>
 80029ba:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80029be:	b252      	sxtb	r2, r2
 80029c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80029c4:	d0d9      	beq.n	800297a <xQueueGenericSend+0xdc>
 80029c6:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80029ca:	b252      	sxtb	r2, r2
 80029cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80029d0:	d0d7      	beq.n	8002982 <xQueueGenericSend+0xe4>
 80029d2:	f7ff fcd1 	bl	8002378 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029d6:	a901      	add	r1, sp, #4
 80029d8:	a802      	add	r0, sp, #8
 80029da:	f004 f9fb 	bl	8006dd4 <xTaskCheckForTimeOut>
 80029de:	b9d8      	cbnz	r0, 8002a18 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029e0:	4620      	mov	r0, r4
 80029e2:	f7ff fdfb 	bl	80025dc <prvIsQueueFull>
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d0cf      	beq.n	800298a <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029ea:	9901      	ldr	r1, [sp, #4]
 80029ec:	f104 0010 	add.w	r0, r4, #16
 80029f0:	f004 f96a 	bl	8006cc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7ff fe5a 	bl	80026ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029fa:	f004 f877 	bl	8006aec <xTaskResumeAll>
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d1c8      	bne.n	8002994 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8002a02:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	e7bd      	b.n	8002994 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f7ff fe48 	bl	80026ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a1e:	f004 f865 	bl	8006aec <xTaskResumeAll>
			return errQUEUE_FULL;
 8002a22:	2000      	movs	r0, #0
 8002a24:	e78d      	b.n	8002942 <xQueueGenericSend+0xa4>

08002a26 <xQueueGenericSendFromISR>:
{
 8002a26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8002a2a:	b190      	cbz	r0, 8002a52 <xQueueGenericSendFromISR+0x2c>
 8002a2c:	460f      	mov	r7, r1
 8002a2e:	4616      	mov	r6, r2
 8002a30:	461c      	mov	r4, r3
 8002a32:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a34:	b1b1      	cbz	r1, 8002a64 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a36:	2c02      	cmp	r4, #2
 8002a38:	d120      	bne.n	8002a7c <xQueueGenericSendFromISR+0x56>
 8002a3a:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d01d      	beq.n	8002a7c <xQueueGenericSendFromISR+0x56>
 8002a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	e7fe      	b.n	8002a50 <xQueueGenericSendFromISR+0x2a>
 8002a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a56:	f383 8811 	msr	BASEPRI, r3
 8002a5a:	f3bf 8f6f 	isb	sy
 8002a5e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002a62:	e7fe      	b.n	8002a62 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a64:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0e5      	beq.n	8002a36 <xQueueGenericSendFromISR+0x10>
 8002a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	e7fe      	b.n	8002a7a <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a7c:	f7ff fd80 	bl	8002580 <vPortValidateInterruptPriority>
	__asm volatile
 8002a80:	f3ef 8811 	mrs	r8, BASEPRI
 8002a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a94:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8002a96:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d306      	bcc.n	8002aaa <xQueueGenericSendFromISR+0x84>
 8002a9c:	2c02      	cmp	r4, #2
 8002a9e:	d004      	beq.n	8002aaa <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8002aa0:	2000      	movs	r0, #0
	__asm volatile
 8002aa2:	f388 8811 	msr	BASEPRI, r8
}
 8002aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8002aaa:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8002aae:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ab2:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ab4:	4622      	mov	r2, r4
 8002ab6:	4639      	mov	r1, r7
 8002ab8:	4628      	mov	r0, r5
 8002aba:	f7ff fdab 	bl	8002614 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002abe:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002ac2:	d006      	beq.n	8002ad2 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ac4:	f109 0301 	add.w	r3, r9, #1
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8002ace:	2001      	movs	r0, #1
 8002ad0:	e7e7      	b.n	8002aa2 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ad2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002ad4:	b90b      	cbnz	r3, 8002ada <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	e7e3      	b.n	8002aa2 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ada:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8002ade:	f004 f927 	bl	8006d30 <xTaskRemoveFromEventList>
 8002ae2:	b118      	cbz	r0, 8002aec <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8002ae4:	b126      	cbz	r6, 8002af0 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	6030      	str	r0, [r6, #0]
 8002aea:	e7da      	b.n	8002aa2 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8002aec:	2001      	movs	r0, #1
 8002aee:	e7d8      	b.n	8002aa2 <xQueueGenericSendFromISR+0x7c>
 8002af0:	2001      	movs	r0, #1
 8002af2:	e7d6      	b.n	8002aa2 <xQueueGenericSendFromISR+0x7c>

08002af4 <xQueueReceive>:
{
 8002af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af6:	b085      	sub	sp, #20
 8002af8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002afa:	b190      	cbz	r0, 8002b22 <xQueueReceive+0x2e>
 8002afc:	460f      	mov	r7, r1
 8002afe:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b00:	b1c1      	cbz	r1, 8002b34 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b02:	f004 f9b1 	bl	8006e68 <xTaskGetSchedulerState>
 8002b06:	4606      	mov	r6, r0
 8002b08:	bb00      	cbnz	r0, 8002b4c <xQueueReceive+0x58>
 8002b0a:	9b01      	ldr	r3, [sp, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d05e      	beq.n	8002bce <xQueueReceive+0xda>
	__asm volatile
 8002b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	e7fe      	b.n	8002b20 <xQueueReceive+0x2c>
 8002b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8002b32:	e7fe      	b.n	8002b32 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b34:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0e3      	beq.n	8002b02 <xQueueReceive+0xe>
 8002b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	e7fe      	b.n	8002b4a <xQueueReceive+0x56>
 8002b4c:	2600      	movs	r6, #0
 8002b4e:	e03e      	b.n	8002bce <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b50:	4639      	mov	r1, r7
 8002b52:	4620      	mov	r0, r4
 8002b54:	f7ff fd99 	bl	800268a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b58:	3d01      	subs	r5, #1
 8002b5a:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b5c:	6923      	ldr	r3, [r4, #16]
 8002b5e:	b923      	cbnz	r3, 8002b6a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8002b60:	f7ff fc0a 	bl	8002378 <vPortExitCritical>
				return pdPASS;
 8002b64:	2001      	movs	r0, #1
}
 8002b66:	b005      	add	sp, #20
 8002b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b6a:	f104 0010 	add.w	r0, r4, #16
 8002b6e:	f004 f8df 	bl	8006d30 <xTaskRemoveFromEventList>
 8002b72:	2800      	cmp	r0, #0
 8002b74:	d0f4      	beq.n	8002b60 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8002b76:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002b82:	f3bf 8f4f 	dsb	sy
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	e7e9      	b.n	8002b60 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8002b8c:	f7ff fbf4 	bl	8002378 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002b90:	2000      	movs	r0, #0
 8002b92:	e7e8      	b.n	8002b66 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b94:	a802      	add	r0, sp, #8
 8002b96:	f004 f911 	bl	8006dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b9a:	2601      	movs	r6, #1
 8002b9c:	e021      	b.n	8002be2 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002ba4:	e029      	b.n	8002bfa <xQueueReceive+0x106>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002bac:	e02b      	b.n	8002c06 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f7ff fd7d 	bl	80026ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bb4:	f003 ff9a 	bl	8006aec <xTaskResumeAll>
 8002bb8:	e009      	b.n	8002bce <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f7ff fd77 	bl	80026ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bc0:	f003 ff94 	bl	8006aec <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f7ff fd18 	bl	80025fa <prvIsQueueEmpty>
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d13f      	bne.n	8002c4e <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8002bce:	f7ff fbb1 	bl	8002334 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bd2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bd4:	2d00      	cmp	r5, #0
 8002bd6:	d1bb      	bne.n	8002b50 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bd8:	9b01      	ldr	r3, [sp, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0d6      	beq.n	8002b8c <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8002bde:	2e00      	cmp	r6, #0
 8002be0:	d0d8      	beq.n	8002b94 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8002be2:	f7ff fbc9 	bl	8002378 <vPortExitCritical>
		vTaskSuspendAll();
 8002be6:	f003 fee7 	bl	80069b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bea:	f7ff fba3 	bl	8002334 <vPortEnterCritical>
 8002bee:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002bf2:	b25b      	sxtb	r3, r3
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf8:	d0d1      	beq.n	8002b9e <xQueueReceive+0xaa>
 8002bfa:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002bfe:	b25b      	sxtb	r3, r3
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d0cf      	beq.n	8002ba6 <xQueueReceive+0xb2>
 8002c06:	f7ff fbb7 	bl	8002378 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c0a:	a901      	add	r1, sp, #4
 8002c0c:	a802      	add	r0, sp, #8
 8002c0e:	f004 f8e1 	bl	8006dd4 <xTaskCheckForTimeOut>
 8002c12:	2800      	cmp	r0, #0
 8002c14:	d1d1      	bne.n	8002bba <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c16:	4620      	mov	r0, r4
 8002c18:	f7ff fcef 	bl	80025fa <prvIsQueueEmpty>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d0c6      	beq.n	8002bae <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c20:	9901      	ldr	r1, [sp, #4]
 8002c22:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002c26:	f004 f84f 	bl	8006cc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f7ff fd3f 	bl	80026ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c30:	f003 ff5c 	bl	8006aec <xTaskResumeAll>
 8002c34:	2800      	cmp	r0, #0
 8002c36:	d1ca      	bne.n	8002bce <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8002c38:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002c3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c40:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	e7bf      	b.n	8002bce <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8002c4e:	2000      	movs	r0, #0
 8002c50:	e789      	b.n	8002b66 <xQueueReceive+0x72>

08002c52 <xQueueReceiveFromISR>:
{
 8002c52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8002c56:	b1b0      	cbz	r0, 8002c86 <xQueueReceiveFromISR+0x34>
 8002c58:	460d      	mov	r5, r1
 8002c5a:	4690      	mov	r8, r2
 8002c5c:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c5e:	b1d9      	cbz	r1, 8002c98 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c60:	f7ff fc8e 	bl	8002580 <vPortValidateInterruptPriority>
	__asm volatile
 8002c64:	f3ef 8711 	mrs	r7, BASEPRI
 8002c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c78:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c7a:	b9ce      	cbnz	r6, 8002cb0 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8002c7c:	2000      	movs	r0, #0
	__asm volatile
 8002c7e:	f387 8811 	msr	BASEPRI, r7
}
 8002c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002c96:	e7fe      	b.n	8002c96 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c98:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0e0      	beq.n	8002c60 <xQueueReceiveFromISR+0xe>
 8002c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	e7fe      	b.n	8002cae <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002cb0:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8002cb4:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cb8:	4629      	mov	r1, r5
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f7ff fce5 	bl	800268a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cc0:	1e73      	subs	r3, r6, #1
 8002cc2:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8002cc4:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002cc8:	d006      	beq.n	8002cd8 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002cca:	f109 0301 	add.w	r3, r9, #1
 8002cce:	b25b      	sxtb	r3, r3
 8002cd0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	e7d2      	b.n	8002c7e <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cd8:	6923      	ldr	r3, [r4, #16]
 8002cda:	b90b      	cbnz	r3, 8002ce0 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8002cdc:	2001      	movs	r0, #1
 8002cde:	e7ce      	b.n	8002c7e <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ce0:	f104 0010 	add.w	r0, r4, #16
 8002ce4:	f004 f824 	bl	8006d30 <xTaskRemoveFromEventList>
 8002ce8:	b130      	cbz	r0, 8002cf8 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8002cea:	f1b8 0f00 	cmp.w	r8, #0
 8002cee:	d005      	beq.n	8002cfc <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	f8c8 0000 	str.w	r0, [r8]
 8002cf6:	e7c2      	b.n	8002c7e <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	e7c0      	b.n	8002c7e <xQueueReceiveFromISR+0x2c>
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	e7be      	b.n	8002c7e <xQueueReceiveFromISR+0x2c>

08002d00 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d00:	2300      	movs	r3, #0
 8002d02:	2b07      	cmp	r3, #7
 8002d04:	d80c      	bhi.n	8002d20 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d06:	4a07      	ldr	r2, [pc, #28]	@ (8002d24 <vQueueAddToRegistry+0x24>)
 8002d08:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002d0c:	b10a      	cbz	r2, 8002d12 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d0e:	3301      	adds	r3, #1
 8002d10:	e7f7      	b.n	8002d02 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d12:	4a04      	ldr	r2, [pc, #16]	@ (8002d24 <vQueueAddToRegistry+0x24>)
 8002d14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002d18:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002d1c:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002d1e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	200046ec 	.word	0x200046ec

08002d28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	460d      	mov	r5, r1
 8002d2e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d30:	f7ff fb00 	bl	8002334 <vPortEnterCritical>
 8002d34:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002d38:	b25b      	sxtb	r3, r3
 8002d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3e:	d00d      	beq.n	8002d5c <vQueueWaitForMessageRestricted+0x34>
 8002d40:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4a:	d00b      	beq.n	8002d64 <vQueueWaitForMessageRestricted+0x3c>
 8002d4c:	f7ff fb14 	bl	8002378 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d50:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002d52:	b15b      	cbz	r3, 8002d6c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d54:	4620      	mov	r0, r4
 8002d56:	f7ff fcaa 	bl	80026ae <prvUnlockQueue>
	}
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002d62:	e7ed      	b.n	8002d40 <vQueueWaitForMessageRestricted+0x18>
 8002d64:	2300      	movs	r3, #0
 8002d66:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002d6a:	e7ef      	b.n	8002d4c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d6c:	4632      	mov	r2, r6
 8002d6e:	4629      	mov	r1, r5
 8002d70:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002d74:	f003 ffc0 	bl	8006cf8 <vTaskPlaceOnEventListRestricted>
 8002d78:	e7ec      	b.n	8002d54 <vQueueWaitForMessageRestricted+0x2c>
	...

08002d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d7c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <HAL_Init+0x30>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d86:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d8e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d98:	2003      	movs	r0, #3
 8002d9a:	f000 faff 	bl	800339c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d9e:	200f      	movs	r0, #15
 8002da0:	f002 fd66 	bl	8005870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da4:	f000 fe3c 	bl	8003a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002da8:	2000      	movs	r0, #0
 8002daa:	bd08      	pop	{r3, pc}
 8002dac:	40023c00 	.word	0x40023c00

08002db0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002db0:	4a03      	ldr	r2, [pc, #12]	@ (8002dc0 <HAL_IncTick+0x10>)
 8002db2:	6811      	ldr	r1, [r2, #0]
 8002db4:	4b03      	ldr	r3, [pc, #12]	@ (8002dc4 <HAL_IncTick+0x14>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	440b      	add	r3, r1
 8002dba:	6013      	str	r3, [r2, #0]
}
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	2000472c 	.word	0x2000472c
 8002dc4:	2000004c 	.word	0x2000004c

08002dc8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002dc8:	4b01      	ldr	r3, [pc, #4]	@ (8002dd0 <HAL_GetTick+0x8>)
 8002dca:	6818      	ldr	r0, [r3, #0]
}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	2000472c 	.word	0x2000472c

08002dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd4:	b538      	push	{r3, r4, r5, lr}
 8002dd6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff fff6 	bl	8002dc8 <HAL_GetTick>
 8002ddc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dde:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002de2:	d002      	beq.n	8002dea <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002de4:	4b04      	ldr	r3, [pc, #16]	@ (8002df8 <HAL_Delay+0x24>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dea:	f7ff ffed 	bl	8002dc8 <HAL_GetTick>
 8002dee:	1b40      	subs	r0, r0, r5
 8002df0:	42a0      	cmp	r0, r4
 8002df2:	d3fa      	bcc.n	8002dea <HAL_Delay+0x16>
  {
  }
}
 8002df4:	bd38      	pop	{r3, r4, r5, pc}
 8002df6:	bf00      	nop
 8002df8:	2000004c 	.word	0x2000004c

08002dfc <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8002f28 <ADC_Init+0x12c>)
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002e04:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	6841      	ldr	r1, [r0, #4]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e0e:	6802      	ldr	r2, [r0, #0]
 8002e10:	6853      	ldr	r3, [r2, #4]
 8002e12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e16:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e18:	6802      	ldr	r2, [r0, #0]
 8002e1a:	6853      	ldr	r3, [r2, #4]
 8002e1c:	6901      	ldr	r1, [r0, #16]
 8002e1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002e22:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e24:	6802      	ldr	r2, [r0, #0]
 8002e26:	6853      	ldr	r3, [r2, #4]
 8002e28:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002e2c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e2e:	6802      	ldr	r2, [r0, #0]
 8002e30:	6853      	ldr	r3, [r2, #4]
 8002e32:	6881      	ldr	r1, [r0, #8]
 8002e34:	430b      	orrs	r3, r1
 8002e36:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e38:	6802      	ldr	r2, [r0, #0]
 8002e3a:	6893      	ldr	r3, [r2, #8]
 8002e3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e40:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e42:	6802      	ldr	r2, [r0, #0]
 8002e44:	6893      	ldr	r3, [r2, #8]
 8002e46:	68c1      	ldr	r1, [r0, #12]
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e4c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8002e4e:	4b37      	ldr	r3, [pc, #220]	@ (8002f2c <ADC_Init+0x130>)
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d057      	beq.n	8002f04 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e54:	6802      	ldr	r2, [r0, #0]
 8002e56:	6893      	ldr	r3, [r2, #8]
 8002e58:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8002e5c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e5e:	6802      	ldr	r2, [r0, #0]
 8002e60:	6893      	ldr	r3, [r2, #8]
 8002e62:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8002e64:	430b      	orrs	r3, r1
 8002e66:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e68:	6802      	ldr	r2, [r0, #0]
 8002e6a:	6893      	ldr	r3, [r2, #8]
 8002e6c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002e70:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e72:	6802      	ldr	r2, [r0, #0]
 8002e74:	6893      	ldr	r3, [r2, #8]
 8002e76:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e7c:	6802      	ldr	r2, [r0, #0]
 8002e7e:	6893      	ldr	r3, [r2, #8]
 8002e80:	f023 0302 	bic.w	r3, r3, #2
 8002e84:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e86:	6802      	ldr	r2, [r0, #0]
 8002e88:	6893      	ldr	r3, [r2, #8]
 8002e8a:	7e01      	ldrb	r1, [r0, #24]
 8002e8c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002e90:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e92:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d03f      	beq.n	8002f1a <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e9a:	6802      	ldr	r2, [r0, #0]
 8002e9c:	6853      	ldr	r3, [r2, #4]
 8002e9e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ea2:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ea4:	6802      	ldr	r2, [r0, #0]
 8002ea6:	6853      	ldr	r3, [r2, #4]
 8002ea8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002eac:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002eae:	6801      	ldr	r1, [r0, #0]
 8002eb0:	684b      	ldr	r3, [r1, #4]
 8002eb2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8002eb4:	3a01      	subs	r2, #1
 8002eb6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002eba:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ebc:	6802      	ldr	r2, [r0, #0]
 8002ebe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002ec0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ec6:	6801      	ldr	r1, [r0, #0]
 8002ec8:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8002eca:	69c2      	ldr	r2, [r0, #28]
 8002ecc:	3a01      	subs	r2, #1
 8002ece:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002ed2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ed4:	6802      	ldr	r2, [r0, #0]
 8002ed6:	6893      	ldr	r3, [r2, #8]
 8002ed8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002edc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ede:	6802      	ldr	r2, [r0, #0]
 8002ee0:	6893      	ldr	r3, [r2, #8]
 8002ee2:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8002ee6:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8002eea:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002eec:	6802      	ldr	r2, [r0, #0]
 8002eee:	6893      	ldr	r3, [r2, #8]
 8002ef0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ef4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ef6:	6802      	ldr	r2, [r0, #0]
 8002ef8:	6893      	ldr	r3, [r2, #8]
 8002efa:	6941      	ldr	r1, [r0, #20]
 8002efc:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002f00:	6093      	str	r3, [r2, #8]
}
 8002f02:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f04:	6802      	ldr	r2, [r0, #0]
 8002f06:	6893      	ldr	r3, [r2, #8]
 8002f08:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8002f0c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f0e:	6802      	ldr	r2, [r0, #0]
 8002f10:	6893      	ldr	r3, [r2, #8]
 8002f12:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002f16:	6093      	str	r3, [r2, #8]
 8002f18:	e7b0      	b.n	8002e7c <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f1a:	6802      	ldr	r2, [r0, #0]
 8002f1c:	6853      	ldr	r3, [r2, #4]
 8002f1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f22:	6053      	str	r3, [r2, #4]
 8002f24:	e7ca      	b.n	8002ebc <ADC_Init+0xc0>
 8002f26:	bf00      	nop
 8002f28:	40012300 	.word	0x40012300
 8002f2c:	0f000001 	.word	0x0f000001

08002f30 <HAL_ADC_Init>:
  if (hadc == NULL)
 8002f30:	b338      	cbz	r0, 8002f82 <HAL_ADC_Init+0x52>
{
 8002f32:	b510      	push	{r4, lr}
 8002f34:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f36:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002f38:	b143      	cbz	r3, 8002f4c <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f3c:	f013 0f10 	tst.w	r3, #16
 8002f40:	d00b      	beq.n	8002f5a <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8002f42:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002f44:	2300      	movs	r3, #0
 8002f46:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002f4a:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8002f4c:	f7fd fe78 	bl	8000c40 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002f50:	2300      	movs	r3, #0
 8002f52:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8002f54:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8002f58:	e7ef      	b.n	8002f3a <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8002f5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f5c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f60:	f023 0302 	bic.w	r3, r3, #2
 8002f64:	f043 0302 	orr.w	r3, r3, #2
 8002f68:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f7ff ff46 	bl	8002dfc <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8002f70:	2000      	movs	r0, #0
 8002f72:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002f74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f76:	f023 0303 	bic.w	r3, r3, #3
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6423      	str	r3, [r4, #64]	@ 0x40
 8002f80:	e7e0      	b.n	8002f44 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8002f82:	2001      	movs	r0, #1
}
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_ADC_Start_DMA>:
{
 8002f88:	b510      	push	{r4, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8002f8e:	2200      	movs	r2, #0
 8002f90:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002f92:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002f96:	2a01      	cmp	r2, #1
 8002f98:	f000 8094 	beq.w	80030c4 <HAL_ADC_Start_DMA+0x13c>
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fa4:	6802      	ldr	r2, [r0, #0]
 8002fa6:	6890      	ldr	r0, [r2, #8]
 8002fa8:	f010 0f01 	tst.w	r0, #1
 8002fac:	d113      	bne.n	8002fd6 <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8002fae:	6890      	ldr	r0, [r2, #8]
 8002fb0:	f040 0001 	orr.w	r0, r0, #1
 8002fb4:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fb6:	4a46      	ldr	r2, [pc, #280]	@ (80030d0 <HAL_ADC_Start_DMA+0x148>)
 8002fb8:	6810      	ldr	r0, [r2, #0]
 8002fba:	4a46      	ldr	r2, [pc, #280]	@ (80030d4 <HAL_ADC_Start_DMA+0x14c>)
 8002fbc:	fba2 2000 	umull	r2, r0, r2, r0
 8002fc0:	0c80      	lsrs	r0, r0, #18
 8002fc2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002fc6:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8002fc8:	e002      	b.n	8002fd0 <HAL_ADC_Start_DMA+0x48>
      counter--;
 8002fca:	9801      	ldr	r0, [sp, #4]
 8002fcc:	3801      	subs	r0, #1
 8002fce:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8002fd0:	9801      	ldr	r0, [sp, #4]
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	d1f9      	bne.n	8002fca <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002fd6:	6822      	ldr	r2, [r4, #0]
 8002fd8:	6890      	ldr	r0, [r2, #8]
 8002fda:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8002fde:	d003      	beq.n	8002fe8 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002fe0:	6890      	ldr	r0, [r2, #8]
 8002fe2:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8002fe6:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fe8:	6822      	ldr	r2, [r4, #0]
 8002fea:	6890      	ldr	r0, [r2, #8]
 8002fec:	f010 0f01 	tst.w	r0, #1
 8002ff0:	d05d      	beq.n	80030ae <HAL_ADC_Start_DMA+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 8002ff2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002ff4:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8002ff8:	f020 0001 	bic.w	r0, r0, #1
 8002ffc:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8003000:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003002:	6852      	ldr	r2, [r2, #4]
 8003004:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8003008:	d005      	beq.n	8003016 <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800300a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800300c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003010:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003014:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003016:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003018:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800301c:	d034      	beq.n	8003088 <HAL_ADC_Start_DMA+0x100>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800301e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003020:	f022 0206 	bic.w	r2, r2, #6
 8003024:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8003026:	2200      	movs	r2, #0
 8003028:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800302c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800302e:	482a      	ldr	r0, [pc, #168]	@ (80030d8 <HAL_ADC_Start_DMA+0x150>)
 8003030:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003032:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003034:	4829      	ldr	r0, [pc, #164]	@ (80030dc <HAL_ADC_Start_DMA+0x154>)
 8003036:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003038:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800303a:	4829      	ldr	r0, [pc, #164]	@ (80030e0 <HAL_ADC_Start_DMA+0x158>)
 800303c:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800303e:	6822      	ldr	r2, [r4, #0]
 8003040:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8003044:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003046:	6820      	ldr	r0, [r4, #0]
 8003048:	6842      	ldr	r2, [r0, #4]
 800304a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800304e:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003050:	6820      	ldr	r0, [r4, #0]
 8003052:	6882      	ldr	r2, [r0, #8]
 8003054:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003058:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800305a:	6820      	ldr	r0, [r4, #0]
 800305c:	460a      	mov	r2, r1
 800305e:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 8003062:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003064:	f000 fab2 	bl	80035cc <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003068:	4b1e      	ldr	r3, [pc, #120]	@ (80030e4 <HAL_ADC_Start_DMA+0x15c>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f013 0f1f 	tst.w	r3, #31
 8003070:	d10d      	bne.n	800308e <HAL_ADC_Start_DMA+0x106>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800307a:	d125      	bne.n	80030c8 <HAL_ADC_Start_DMA+0x140>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003082:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003084:	2000      	movs	r0, #0
 8003086:	e01b      	b.n	80030c0 <HAL_ADC_Start_DMA+0x138>
      ADC_CLEAR_ERRORCODE(hadc);
 8003088:	2200      	movs	r2, #0
 800308a:	6462      	str	r2, [r4, #68]	@ 0x44
 800308c:	e7cb      	b.n	8003026 <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	4a15      	ldr	r2, [pc, #84]	@ (80030e8 <HAL_ADC_Start_DMA+0x160>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d001      	beq.n	800309a <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 8003096:	2000      	movs	r0, #0
 8003098:	e012      	b.n	80030c0 <HAL_ADC_Start_DMA+0x138>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80030a0:	d114      	bne.n	80030cc <HAL_ADC_Start_DMA+0x144>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80030a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030aa:	2000      	movs	r0, #0
 80030ac:	e008      	b.n	80030c0 <HAL_ADC_Start_DMA+0x138>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80030b0:	f043 0310 	orr.w	r3, r3, #16
 80030b4:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 80030be:	2000      	movs	r0, #0
}
 80030c0:	b002      	add	sp, #8
 80030c2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80030c4:	2002      	movs	r0, #2
 80030c6:	e7fb      	b.n	80030c0 <HAL_ADC_Start_DMA+0x138>
  return HAL_OK;
 80030c8:	2000      	movs	r0, #0
 80030ca:	e7f9      	b.n	80030c0 <HAL_ADC_Start_DMA+0x138>
 80030cc:	2000      	movs	r0, #0
 80030ce:	e7f7      	b.n	80030c0 <HAL_ADC_Start_DMA+0x138>
 80030d0:	20000054 	.word	0x20000054
 80030d4:	431bde83 	.word	0x431bde83
 80030d8:	08003111 	.word	0x08003111
 80030dc:	080030ef 	.word	0x080030ef
 80030e0:	080030fb 	.word	0x080030fb
 80030e4:	40012300 	.word	0x40012300
 80030e8:	40012000 	.word	0x40012000

080030ec <HAL_ADC_ConvHalfCpltCallback>:
}
 80030ec:	4770      	bx	lr

080030ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80030ee:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030f0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80030f2:	f7ff fffb 	bl	80030ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030f6:	bd08      	pop	{r3, pc}

080030f8 <HAL_ADC_ErrorCallback>:
}
 80030f8:	4770      	bx	lr

080030fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80030fa:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030fc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80030fe:	2340      	movs	r3, #64	@ 0x40
 8003100:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003102:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800310a:	f7ff fff5 	bl	80030f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800310e:	bd08      	pop	{r3, pc}

08003110 <ADC_DMAConvCplt>:
{
 8003110:	b508      	push	{r3, lr}
 8003112:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003114:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003116:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003118:	f012 0f50 	tst.w	r2, #80	@ 0x50
 800311c:	d125      	bne.n	800316a <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800311e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003120:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003124:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003126:	6803      	ldr	r3, [r0, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800312e:	d119      	bne.n	8003164 <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003130:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003132:	b9ba      	cbnz	r2, 8003164 <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003136:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 800313a:	d003      	beq.n	8003144 <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800313c:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800313e:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8003142:	d10f      	bne.n	8003164 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	f022 0220 	bic.w	r2, r2, #32
 800314a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800314c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800314e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003152:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003154:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003156:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800315a:	d103      	bne.n	8003164 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800315c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8003164:	f7fd fdec 	bl	8000d40 <HAL_ADC_ConvCpltCallback>
}
 8003168:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800316a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800316c:	f012 0f10 	tst.w	r2, #16
 8003170:	d104      	bne.n	800317c <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003172:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8003174:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003176:	4618      	mov	r0, r3
 8003178:	4790      	blx	r2
}
 800317a:	e7f5      	b.n	8003168 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 800317c:	f7ff ffbc 	bl	80030f8 <HAL_ADC_ErrorCallback>
 8003180:	e7f2      	b.n	8003168 <ADC_DMAConvCplt+0x58>
	...

08003184 <HAL_ADC_ConfigChannel>:
{
 8003184:	b430      	push	{r4, r5}
 8003186:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8003188:	2200      	movs	r2, #0
 800318a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800318c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003190:	2a01      	cmp	r2, #1
 8003192:	f000 80b6 	beq.w	8003302 <HAL_ADC_ConfigChannel+0x17e>
 8003196:	4603      	mov	r3, r0
 8003198:	2201      	movs	r2, #1
 800319a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800319e:	680a      	ldr	r2, [r1, #0]
 80031a0:	2a09      	cmp	r2, #9
 80031a2:	d940      	bls.n	8003226 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031a4:	6804      	ldr	r4, [r0, #0]
 80031a6:	68e0      	ldr	r0, [r4, #12]
 80031a8:	b292      	uxth	r2, r2
 80031aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80031ae:	3a1e      	subs	r2, #30
 80031b0:	f04f 0c07 	mov.w	ip, #7
 80031b4:	fa0c f202 	lsl.w	r2, ip, r2
 80031b8:	ea20 0202 	bic.w	r2, r0, r2
 80031bc:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031be:	681c      	ldr	r4, [r3, #0]
 80031c0:	68e0      	ldr	r0, [r4, #12]
 80031c2:	880a      	ldrh	r2, [r1, #0]
 80031c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80031c8:	3a1e      	subs	r2, #30
 80031ca:	688d      	ldr	r5, [r1, #8]
 80031cc:	fa05 f202 	lsl.w	r2, r5, r2
 80031d0:	4302      	orrs	r2, r0
 80031d2:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 80031d4:	684a      	ldr	r2, [r1, #4]
 80031d6:	2a06      	cmp	r2, #6
 80031d8:	d83c      	bhi.n	8003254 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031da:	681c      	ldr	r4, [r3, #0]
 80031dc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80031de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80031e2:	3a05      	subs	r2, #5
 80031e4:	f04f 0c1f 	mov.w	ip, #31
 80031e8:	fa0c f202 	lsl.w	r2, ip, r2
 80031ec:	ea20 0202 	bic.w	r2, r0, r2
 80031f0:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031f2:	681c      	ldr	r4, [r3, #0]
 80031f4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80031f6:	684a      	ldr	r2, [r1, #4]
 80031f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80031fc:	3a05      	subs	r2, #5
 80031fe:	f8b1 c000 	ldrh.w	ip, [r1]
 8003202:	fa0c f202 	lsl.w	r2, ip, r2
 8003206:	4302      	orrs	r2, r0
 8003208:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	4a3e      	ldr	r2, [pc, #248]	@ (8003308 <HAL_ADC_ConfigChannel+0x184>)
 800320e:	4290      	cmp	r0, r2
 8003210:	d050      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	4a3c      	ldr	r2, [pc, #240]	@ (8003308 <HAL_ADC_ConfigChannel+0x184>)
 8003216:	4290      	cmp	r0, r2
 8003218:	d055      	beq.n	80032c6 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 800321a:	2000      	movs	r0, #0
 800321c:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8003220:	b002      	add	sp, #8
 8003222:	bc30      	pop	{r4, r5}
 8003224:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003226:	6804      	ldr	r4, [r0, #0]
 8003228:	6920      	ldr	r0, [r4, #16]
 800322a:	b292      	uxth	r2, r2
 800322c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003230:	f04f 0c07 	mov.w	ip, #7
 8003234:	fa0c f202 	lsl.w	r2, ip, r2
 8003238:	ea20 0202 	bic.w	r2, r0, r2
 800323c:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800323e:	681c      	ldr	r4, [r3, #0]
 8003240:	6920      	ldr	r0, [r4, #16]
 8003242:	880a      	ldrh	r2, [r1, #0]
 8003244:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003248:	688d      	ldr	r5, [r1, #8]
 800324a:	fa05 f202 	lsl.w	r2, r5, r2
 800324e:	4302      	orrs	r2, r0
 8003250:	6122      	str	r2, [r4, #16]
 8003252:	e7bf      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8003254:	2a0c      	cmp	r2, #12
 8003256:	d816      	bhi.n	8003286 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003258:	681d      	ldr	r5, [r3, #0]
 800325a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800325c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003260:	3a23      	subs	r2, #35	@ 0x23
 8003262:	241f      	movs	r4, #31
 8003264:	fa04 f202 	lsl.w	r2, r4, r2
 8003268:	ea20 0202 	bic.w	r2, r0, r2
 800326c:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800326e:	681d      	ldr	r5, [r3, #0]
 8003270:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8003272:	684a      	ldr	r2, [r1, #4]
 8003274:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003278:	3a23      	subs	r2, #35	@ 0x23
 800327a:	880c      	ldrh	r4, [r1, #0]
 800327c:	fa04 f202 	lsl.w	r2, r4, r2
 8003280:	4302      	orrs	r2, r0
 8003282:	632a      	str	r2, [r5, #48]	@ 0x30
 8003284:	e7c1      	b.n	800320a <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003286:	681d      	ldr	r5, [r3, #0]
 8003288:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800328a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800328e:	3a41      	subs	r2, #65	@ 0x41
 8003290:	241f      	movs	r4, #31
 8003292:	fa04 f202 	lsl.w	r2, r4, r2
 8003296:	ea20 0202 	bic.w	r2, r0, r2
 800329a:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800329c:	681d      	ldr	r5, [r3, #0]
 800329e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80032a0:	684a      	ldr	r2, [r1, #4]
 80032a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80032a6:	3a41      	subs	r2, #65	@ 0x41
 80032a8:	880c      	ldrh	r4, [r1, #0]
 80032aa:	fa04 f202 	lsl.w	r2, r4, r2
 80032ae:	4302      	orrs	r2, r0
 80032b0:	62ea      	str	r2, [r5, #44]	@ 0x2c
 80032b2:	e7aa      	b.n	800320a <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032b4:	680a      	ldr	r2, [r1, #0]
 80032b6:	2a12      	cmp	r2, #18
 80032b8:	d1ab      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032ba:	4814      	ldr	r0, [pc, #80]	@ (800330c <HAL_ADC_ConfigChannel+0x188>)
 80032bc:	6842      	ldr	r2, [r0, #4]
 80032be:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80032c2:	6042      	str	r2, [r0, #4]
 80032c4:	e7a5      	b.n	8003212 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032c6:	680a      	ldr	r2, [r1, #0]
 80032c8:	3a10      	subs	r2, #16
 80032ca:	2a01      	cmp	r2, #1
 80032cc:	d8a5      	bhi.n	800321a <HAL_ADC_ConfigChannel+0x96>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032ce:	480f      	ldr	r0, [pc, #60]	@ (800330c <HAL_ADC_ConfigChannel+0x188>)
 80032d0:	6842      	ldr	r2, [r0, #4]
 80032d2:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80032d6:	6042      	str	r2, [r0, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032d8:	680a      	ldr	r2, [r1, #0]
 80032da:	2a10      	cmp	r2, #16
 80032dc:	d19d      	bne.n	800321a <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032de:	4a0c      	ldr	r2, [pc, #48]	@ (8003310 <HAL_ADC_ConfigChannel+0x18c>)
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	490c      	ldr	r1, [pc, #48]	@ (8003314 <HAL_ADC_ConfigChannel+0x190>)
 80032e4:	fba1 1202 	umull	r1, r2, r1, r2
 80032e8:	0c92      	lsrs	r2, r2, #18
 80032ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80032ee:	0052      	lsls	r2, r2, #1
 80032f0:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 80032f2:	e002      	b.n	80032fa <HAL_ADC_ConfigChannel+0x176>
        counter--;
 80032f4:	9a01      	ldr	r2, [sp, #4]
 80032f6:	3a01      	subs	r2, #1
 80032f8:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 80032fa:	9a01      	ldr	r2, [sp, #4]
 80032fc:	2a00      	cmp	r2, #0
 80032fe:	d1f9      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x170>
 8003300:	e78b      	b.n	800321a <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 8003302:	2002      	movs	r0, #2
 8003304:	e78c      	b.n	8003220 <HAL_ADC_ConfigChannel+0x9c>
 8003306:	bf00      	nop
 8003308:	40012000 	.word	0x40012000
 800330c:	40012300 	.word	0x40012300
 8003310:	20000054 	.word	0x20000054
 8003314:	431bde83 	.word	0x431bde83

08003318 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003318:	2800      	cmp	r0, #0
 800331a:	db07      	blt.n	800332c <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331c:	f000 021f 	and.w	r2, r0, #31
 8003320:	0940      	lsrs	r0, r0, #5
 8003322:	2301      	movs	r3, #1
 8003324:	4093      	lsls	r3, r2
 8003326:	4a02      	ldr	r2, [pc, #8]	@ (8003330 <__NVIC_EnableIRQ+0x18>)
 8003328:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000e100 	.word	0xe000e100

08003334 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8003334:	2800      	cmp	r0, #0
 8003336:	db08      	blt.n	800334a <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003338:	0109      	lsls	r1, r1, #4
 800333a:	b2c9      	uxtb	r1, r1
 800333c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003340:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003344:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8003348:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334a:	f000 000f 	and.w	r0, r0, #15
 800334e:	0109      	lsls	r1, r1, #4
 8003350:	b2c9      	uxtb	r1, r1
 8003352:	4b01      	ldr	r3, [pc, #4]	@ (8003358 <__NVIC_SetPriority+0x24>)
 8003354:	5419      	strb	r1, [r3, r0]
  }
}
 8003356:	4770      	bx	lr
 8003358:	e000ed14 	.word	0xe000ed14

0800335c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800335c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800335e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003362:	f1c0 0c07 	rsb	ip, r0, #7
 8003366:	f1bc 0f04 	cmp.w	ip, #4
 800336a:	bf28      	it	cs
 800336c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003370:	1d03      	adds	r3, r0, #4
 8003372:	2b06      	cmp	r3, #6
 8003374:	d90f      	bls.n	8003396 <NVIC_EncodePriority+0x3a>
 8003376:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	f04f 3eff 	mov.w	lr, #4294967295
 800337c:	fa0e f00c 	lsl.w	r0, lr, ip
 8003380:	ea21 0100 	bic.w	r1, r1, r0
 8003384:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003386:	fa0e fe03 	lsl.w	lr, lr, r3
 800338a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800338e:	ea41 0002 	orr.w	r0, r1, r2
 8003392:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003396:	2300      	movs	r3, #0
 8003398:	e7ee      	b.n	8003378 <NVIC_EncodePriority+0x1c>
	...

0800339c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800339c:	4a07      	ldr	r2, [pc, #28]	@ (80033bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800339e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033a0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a8:	0200      	lsls	r0, r0, #8
 80033aa:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033ae:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80033b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80033b8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80033ba:	4770      	bx	lr
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033c0:	b510      	push	{r4, lr}
 80033c2:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c4:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <HAL_NVIC_SetPriority+0x1c>)
 80033c6:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033c8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80033cc:	f7ff ffc6 	bl	800335c <NVIC_EncodePriority>
 80033d0:	4601      	mov	r1, r0
 80033d2:	4620      	mov	r0, r4
 80033d4:	f7ff ffae 	bl	8003334 <__NVIC_SetPriority>
}
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	bf00      	nop
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e2:	f7ff ff99 	bl	8003318 <__NVIC_EnableIRQ>
}
 80033e6:	bd08      	pop	{r3, pc}

080033e8 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033e8:	b158      	cbz	r0, 8003402 <HAL_CRC_Init+0x1a>
{
 80033ea:	b510      	push	{r4, lr}
 80033ec:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033ee:	7943      	ldrb	r3, [r0, #5]
 80033f0:	b11b      	cbz	r3, 80033fa <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80033f2:	2301      	movs	r3, #1
 80033f4:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80033f6:	2000      	movs	r0, #0
}
 80033f8:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80033fa:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 80033fc:	f7fd ffc0 	bl	8001380 <HAL_CRC_MspInit>
 8003400:	e7f7      	b.n	80033f2 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8003402:	2001      	movs	r0, #1
}
 8003404:	4770      	bx	lr

08003406 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003406:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003408:	6805      	ldr	r5, [r0, #0]
 800340a:	682c      	ldr	r4, [r5, #0]
 800340c:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8003410:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003412:	6804      	ldr	r4, [r0, #0]
 8003414:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003416:	6883      	ldr	r3, [r0, #8]
 8003418:	2b40      	cmp	r3, #64	@ 0x40
 800341a:	d005      	beq.n	8003428 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800341c:	6803      	ldr	r3, [r0, #0]
 800341e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8003420:	6803      	ldr	r3, [r0, #0]
 8003422:	60da      	str	r2, [r3, #12]
  }
}
 8003424:	bc30      	pop	{r4, r5}
 8003426:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8003428:	6803      	ldr	r3, [r0, #0]
 800342a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800342c:	6803      	ldr	r3, [r0, #0]
 800342e:	60d9      	str	r1, [r3, #12]
 8003430:	e7f8      	b.n	8003424 <DMA_SetConfig+0x1e>
	...

08003434 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003434:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003436:	6803      	ldr	r3, [r0, #0]
 8003438:	b2d9      	uxtb	r1, r3
 800343a:	3910      	subs	r1, #16
 800343c:	4a0a      	ldr	r2, [pc, #40]	@ (8003468 <DMA_CalcBaseAndBitshift+0x34>)
 800343e:	fba2 4201 	umull	r4, r2, r2, r1
 8003442:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003444:	4c09      	ldr	r4, [pc, #36]	@ (800346c <DMA_CalcBaseAndBitshift+0x38>)
 8003446:	5ca2      	ldrb	r2, [r4, r2]
 8003448:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800344a:	295f      	cmp	r1, #95	@ 0x5f
 800344c:	d907      	bls.n	800345e <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800344e:	f36f 0309 	bfc	r3, #0, #10
 8003452:	3304      	adds	r3, #4
 8003454:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8003456:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8003458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800345c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800345e:	f36f 0309 	bfc	r3, #0, #10
 8003462:	6583      	str	r3, [r0, #88]	@ 0x58
 8003464:	e7f7      	b.n	8003456 <DMA_CalcBaseAndBitshift+0x22>
 8003466:	bf00      	nop
 8003468:	aaaaaaab 	.word	0xaaaaaaab
 800346c:	0800a264 	.word	0x0800a264

08003470 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003470:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003472:	6982      	ldr	r2, [r0, #24]
 8003474:	b992      	cbnz	r2, 800349c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8003476:	2b01      	cmp	r3, #1
 8003478:	d00a      	beq.n	8003490 <DMA_CheckFifoParam+0x20>
 800347a:	2b02      	cmp	r3, #2
 800347c:	d002      	beq.n	8003484 <DMA_CheckFifoParam+0x14>
 800347e:	b10b      	cbz	r3, 8003484 <DMA_CheckFifoParam+0x14>
 8003480:	2000      	movs	r0, #0
 8003482:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003484:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003486:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800348a:	d128      	bne.n	80034de <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 800348c:	2000      	movs	r0, #0
 800348e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003490:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003492:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003496:	d024      	beq.n	80034e2 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8003498:	2000      	movs	r0, #0
 800349a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800349c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80034a0:	d009      	beq.n	80034b6 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d925      	bls.n	80034f2 <DMA_CheckFifoParam+0x82>
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d125      	bne.n	80034f6 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034aa:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80034ac:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80034b0:	d123      	bne.n	80034fa <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80034b2:	2000      	movs	r0, #0
 80034b4:	4770      	bx	lr
    switch (tmp)
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d803      	bhi.n	80034c2 <DMA_CheckFifoParam+0x52>
 80034ba:	e8df f003 	tbb	[pc, r3]
 80034be:	0414      	.short	0x0414
 80034c0:	0a14      	.short	0x0a14
 80034c2:	2000      	movs	r0, #0
 80034c4:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034c6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80034c8:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80034cc:	d10d      	bne.n	80034ea <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80034ce:	2000      	movs	r0, #0
 80034d0:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034d2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80034d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034d8:	d009      	beq.n	80034ee <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80034da:	2000      	movs	r0, #0
 80034dc:	4770      	bx	lr
        status = HAL_ERROR;
 80034de:	2001      	movs	r0, #1
 80034e0:	4770      	bx	lr
        status = HAL_ERROR;
 80034e2:	2001      	movs	r0, #1
 80034e4:	4770      	bx	lr
      status = HAL_ERROR;
 80034e6:	2001      	movs	r0, #1
 80034e8:	4770      	bx	lr
        status = HAL_ERROR;
 80034ea:	2001      	movs	r0, #1
 80034ec:	4770      	bx	lr
        status = HAL_ERROR;
 80034ee:	2001      	movs	r0, #1
 80034f0:	4770      	bx	lr
      status = HAL_ERROR;
 80034f2:	2001      	movs	r0, #1
 80034f4:	4770      	bx	lr
    switch (tmp)
 80034f6:	2000      	movs	r0, #0
 80034f8:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80034fa:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80034fc:	4770      	bx	lr
	...

08003500 <HAL_DMA_Init>:
{
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003504:	f7ff fc60 	bl	8002dc8 <HAL_GetTick>
  if(hdma == NULL)
 8003508:	2c00      	cmp	r4, #0
 800350a:	d05b      	beq.n	80035c4 <HAL_DMA_Init+0xc4>
 800350c:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800350e:	2302      	movs	r3, #2
 8003510:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8003514:	2300      	movs	r3, #0
 8003516:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800351a:	6822      	ldr	r2, [r4, #0]
 800351c:	6813      	ldr	r3, [r2, #0]
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	f012 0f01 	tst.w	r2, #1
 800352c:	d00a      	beq.n	8003544 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800352e:	f7ff fc4b 	bl	8002dc8 <HAL_GetTick>
 8003532:	1b43      	subs	r3, r0, r5
 8003534:	2b05      	cmp	r3, #5
 8003536:	d9f5      	bls.n	8003524 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003538:	2320      	movs	r3, #32
 800353a:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800353c:	2003      	movs	r0, #3
 800353e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8003542:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8003544:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003546:	4920      	ldr	r1, [pc, #128]	@ (80035c8 <HAL_DMA_Init+0xc8>)
 8003548:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800354a:	6862      	ldr	r2, [r4, #4]
 800354c:	68a0      	ldr	r0, [r4, #8]
 800354e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003550:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003552:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003554:	6920      	ldr	r0, [r4, #16]
 8003556:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003558:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800355c:	69a0      	ldr	r0, [r4, #24]
 800355e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003560:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003562:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003564:	6a20      	ldr	r0, [r4, #32]
 8003566:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003568:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800356a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800356c:	2904      	cmp	r1, #4
 800356e:	d01e      	beq.n	80035ae <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8003570:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8003572:	6826      	ldr	r6, [r4, #0]
 8003574:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003576:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800357a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800357c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800357e:	2b04      	cmp	r3, #4
 8003580:	d107      	bne.n	8003592 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8003582:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003584:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003586:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003588:	b11b      	cbz	r3, 8003592 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800358a:	4620      	mov	r0, r4
 800358c:	f7ff ff70 	bl	8003470 <DMA_CheckFifoParam>
 8003590:	b990      	cbnz	r0, 80035b8 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8003592:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003594:	4620      	mov	r0, r4
 8003596:	f7ff ff4d 	bl	8003434 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800359a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800359c:	233f      	movs	r3, #63	@ 0x3f
 800359e:	4093      	lsls	r3, r2
 80035a0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a2:	2000      	movs	r0, #0
 80035a4:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80035ac:	e7c9      	b.n	8003542 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035ae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80035b0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80035b2:	4301      	orrs	r1, r0
 80035b4:	430a      	orrs	r2, r1
 80035b6:	e7db      	b.n	8003570 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035b8:	2340      	movs	r3, #64	@ 0x40
 80035ba:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80035bc:	2001      	movs	r0, #1
 80035be:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 80035c2:	e7be      	b.n	8003542 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80035c4:	2001      	movs	r0, #1
 80035c6:	e7bc      	b.n	8003542 <HAL_DMA_Init+0x42>
 80035c8:	f010803f 	.word	0xf010803f

080035cc <HAL_DMA_Start_IT>:
{
 80035cc:	b538      	push	{r3, r4, r5, lr}
 80035ce:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035d0:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 80035d2:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 80035d6:	2801      	cmp	r0, #1
 80035d8:	d02a      	beq.n	8003630 <HAL_DMA_Start_IT+0x64>
 80035da:	2001      	movs	r0, #1
 80035dc:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80035e0:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 80035e4:	2801      	cmp	r0, #1
 80035e6:	d004      	beq.n	80035f2 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 80035e8:	2300      	movs	r3, #0
 80035ea:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 80035ee:	2002      	movs	r0, #2
}
 80035f0:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80035f2:	2002      	movs	r0, #2
 80035f4:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f8:	2000      	movs	r0, #0
 80035fa:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035fc:	4620      	mov	r0, r4
 80035fe:	f7ff ff02 	bl	8003406 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003602:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003604:	233f      	movs	r3, #63	@ 0x3f
 8003606:	4093      	lsls	r3, r2
 8003608:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800360a:	6822      	ldr	r2, [r4, #0]
 800360c:	6813      	ldr	r3, [r2, #0]
 800360e:	f043 0316 	orr.w	r3, r3, #22
 8003612:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8003614:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003616:	b123      	cbz	r3, 8003622 <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003618:	6822      	ldr	r2, [r4, #0]
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	f043 0308 	orr.w	r3, r3, #8
 8003620:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003622:	6822      	ldr	r2, [r4, #0]
 8003624:	6813      	ldr	r3, [r2, #0]
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	2000      	movs	r0, #0
 800362e:	e7df      	b.n	80035f0 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8003630:	2002      	movs	r0, #2
 8003632:	e7dd      	b.n	80035f0 <HAL_DMA_Start_IT+0x24>

08003634 <HAL_DMA_IRQHandler>:
{
 8003634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003636:	b083      	sub	sp, #12
 8003638:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800363e:	4b72      	ldr	r3, [pc, #456]	@ (8003808 <HAL_DMA_IRQHandler+0x1d4>)
 8003640:	681d      	ldr	r5, [r3, #0]
 8003642:	4b72      	ldr	r3, [pc, #456]	@ (800380c <HAL_DMA_IRQHandler+0x1d8>)
 8003644:	fba3 3505 	umull	r3, r5, r3, r5
 8003648:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800364a:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 800364c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800364e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8003650:	2308      	movs	r3, #8
 8003652:	4093      	lsls	r3, r2
 8003654:	4233      	tst	r3, r6
 8003656:	d010      	beq.n	800367a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003658:	6803      	ldr	r3, [r0, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	f012 0f04 	tst.w	r2, #4
 8003660:	d00b      	beq.n	800367a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	f022 0204 	bic.w	r2, r2, #4
 8003668:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800366a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800366c:	2308      	movs	r3, #8
 800366e:	4093      	lsls	r3, r2
 8003670:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003672:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800367a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800367c:	2301      	movs	r3, #1
 800367e:	4093      	lsls	r3, r2
 8003680:	4233      	tst	r3, r6
 8003682:	d009      	beq.n	8003698 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003684:	6822      	ldr	r2, [r4, #0]
 8003686:	6952      	ldr	r2, [r2, #20]
 8003688:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800368c:	d004      	beq.n	8003698 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800368e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003690:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003698:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800369a:	2304      	movs	r3, #4
 800369c:	4093      	lsls	r3, r2
 800369e:	4233      	tst	r3, r6
 80036a0:	d009      	beq.n	80036b6 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036a2:	6822      	ldr	r2, [r4, #0]
 80036a4:	6812      	ldr	r2, [r2, #0]
 80036a6:	f012 0f02 	tst.w	r2, #2
 80036aa:	d004      	beq.n	80036b6 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036ac:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036ae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80036b0:	f043 0304 	orr.w	r3, r3, #4
 80036b4:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036b6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80036b8:	2310      	movs	r3, #16
 80036ba:	4093      	lsls	r3, r2
 80036bc:	4233      	tst	r3, r6
 80036be:	d024      	beq.n	800370a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036c0:	6822      	ldr	r2, [r4, #0]
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	f012 0f08 	tst.w	r2, #8
 80036c8:	d01f      	beq.n	800370a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036ca:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80036d4:	d00d      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80036dc:	d104      	bne.n	80036e8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80036de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036e0:	b19b      	cbz	r3, 800370a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80036e2:	4620      	mov	r0, r4
 80036e4:	4798      	blx	r3
 80036e6:	e010      	b.n	800370a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036e8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80036ea:	b173      	cbz	r3, 800370a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80036ec:	4620      	mov	r0, r4
 80036ee:	4798      	blx	r3
 80036f0:	e00b      	b.n	800370a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80036f8:	d103      	bne.n	8003702 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	f022 0208 	bic.w	r2, r2, #8
 8003700:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8003702:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003704:	b10b      	cbz	r3, 800370a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8003706:	4620      	mov	r0, r4
 8003708:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800370a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800370c:	2320      	movs	r3, #32
 800370e:	4093      	lsls	r3, r2
 8003710:	4233      	tst	r3, r6
 8003712:	d054      	beq.n	80037be <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003714:	6822      	ldr	r2, [r4, #0]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	f012 0f10 	tst.w	r2, #16
 800371c:	d04f      	beq.n	80037be <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800371e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003720:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8003724:	2b05      	cmp	r3, #5
 8003726:	d00e      	beq.n	8003746 <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8003730:	d033      	beq.n	800379a <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8003738:	d12a      	bne.n	8003790 <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 800373a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800373c:	2b00      	cmp	r3, #0
 800373e:	d03e      	beq.n	80037be <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 8003740:	4620      	mov	r0, r4
 8003742:	4798      	blx	r3
 8003744:	e03b      	b.n	80037be <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003746:	6822      	ldr	r2, [r4, #0]
 8003748:	6813      	ldr	r3, [r2, #0]
 800374a:	f023 0316 	bic.w	r3, r3, #22
 800374e:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003750:	6822      	ldr	r2, [r4, #0]
 8003752:	6953      	ldr	r3, [r2, #20]
 8003754:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003758:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800375a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800375c:	b1a3      	cbz	r3, 8003788 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800375e:	6822      	ldr	r2, [r4, #0]
 8003760:	6813      	ldr	r3, [r2, #0]
 8003762:	f023 0308 	bic.w	r3, r3, #8
 8003766:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003768:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800376a:	233f      	movs	r3, #63	@ 0x3f
 800376c:	4093      	lsls	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8003770:	2301      	movs	r3, #1
 8003772:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8003776:	2300      	movs	r3, #0
 8003778:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800377c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800377e:	2b00      	cmp	r3, #0
 8003780:	d03f      	beq.n	8003802 <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8003782:	4620      	mov	r0, r4
 8003784:	4798      	blx	r3
        return;
 8003786:	e03c      	b.n	8003802 <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003788:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e7      	bne.n	800375e <HAL_DMA_IRQHandler+0x12a>
 800378e:	e7eb      	b.n	8003768 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 8003790:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003792:	b1a3      	cbz	r3, 80037be <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8003794:	4620      	mov	r0, r4
 8003796:	4798      	blx	r3
 8003798:	e011      	b.n	80037be <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80037a0:	d109      	bne.n	80037b6 <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	f022 0210 	bic.w	r2, r2, #16
 80037a8:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80037b0:	2300      	movs	r3, #0
 80037b2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80037b6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80037b8:	b10b      	cbz	r3, 80037be <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 80037ba:	4620      	mov	r0, r4
 80037bc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037be:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80037c0:	b1fb      	cbz	r3, 8003802 <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80037c4:	f013 0f01 	tst.w	r3, #1
 80037c8:	d017      	beq.n	80037fa <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 80037ca:	2305      	movs	r3, #5
 80037cc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80037d0:	6822      	ldr	r2, [r4, #0]
 80037d2:	6813      	ldr	r3, [r2, #0]
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80037da:	9b01      	ldr	r3, [sp, #4]
 80037dc:	3301      	adds	r3, #1
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	42ab      	cmp	r3, r5
 80037e2:	d804      	bhi.n	80037ee <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f013 0f01 	tst.w	r3, #1
 80037ec:	d1f5      	bne.n	80037da <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80037f4:	2300      	movs	r3, #0
 80037f6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80037fa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80037fc:	b10b      	cbz	r3, 8003802 <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 80037fe:	4620      	mov	r0, r4
 8003800:	4798      	blx	r3
}
 8003802:	b003      	add	sp, #12
 8003804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003806:	bf00      	nop
 8003808:	20000054 	.word	0x20000054
 800380c:	1b4e81b5 	.word	0x1b4e81b5

08003810 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003810:	2300      	movs	r3, #0
 8003812:	2b0f      	cmp	r3, #15
 8003814:	f200 80d7 	bhi.w	80039c6 <HAL_GPIO_Init+0x1b6>
{
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	e065      	b.n	80038ea <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800381e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003820:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003824:	2403      	movs	r4, #3
 8003826:	fa04 f40e 	lsl.w	r4, r4, lr
 800382a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800382e:	68cc      	ldr	r4, [r1, #12]
 8003830:	fa04 f40e 	lsl.w	r4, r4, lr
 8003834:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003836:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003838:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800383a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800383e:	684a      	ldr	r2, [r1, #4]
 8003840:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8003844:	409a      	lsls	r2, r3
 8003846:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8003848:	6042      	str	r2, [r0, #4]
 800384a:	e05c      	b.n	8003906 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800384c:	08dc      	lsrs	r4, r3, #3
 800384e:	3408      	adds	r4, #8
 8003850:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003854:	f003 0507 	and.w	r5, r3, #7
 8003858:	00ad      	lsls	r5, r5, #2
 800385a:	f04f 0e0f 	mov.w	lr, #15
 800385e:	fa0e fe05 	lsl.w	lr, lr, r5
 8003862:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003866:	690a      	ldr	r2, [r1, #16]
 8003868:	40aa      	lsls	r2, r5
 800386a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800386e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8003872:	e05c      	b.n	800392e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003874:	2204      	movs	r2, #4
 8003876:	e000      	b.n	800387a <HAL_GPIO_Init+0x6a>
 8003878:	2200      	movs	r2, #0
 800387a:	fa02 f20e 	lsl.w	r2, r2, lr
 800387e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003880:	3402      	adds	r4, #2
 8003882:	4d51      	ldr	r5, [pc, #324]	@ (80039c8 <HAL_GPIO_Init+0x1b8>)
 8003884:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003888:	4a50      	ldr	r2, [pc, #320]	@ (80039cc <HAL_GPIO_Init+0x1bc>)
 800388a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800388c:	ea6f 020c 	mvn.w	r2, ip
 8003890:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003894:	684e      	ldr	r6, [r1, #4]
 8003896:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800389a:	d001      	beq.n	80038a0 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800389c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80038a0:	4c4a      	ldr	r4, [pc, #296]	@ (80039cc <HAL_GPIO_Init+0x1bc>)
 80038a2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80038a4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80038a6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038aa:	684e      	ldr	r6, [r1, #4]
 80038ac:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80038b0:	d001      	beq.n	80038b6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80038b2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80038b6:	4c45      	ldr	r4, [pc, #276]	@ (80039cc <HAL_GPIO_Init+0x1bc>)
 80038b8:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80038ba:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80038bc:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038c0:	684e      	ldr	r6, [r1, #4]
 80038c2:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80038c6:	d001      	beq.n	80038cc <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80038c8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80038cc:	4c3f      	ldr	r4, [pc, #252]	@ (80039cc <HAL_GPIO_Init+0x1bc>)
 80038ce:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038d0:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80038d2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038d4:	684d      	ldr	r5, [r1, #4]
 80038d6:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80038da:	d001      	beq.n	80038e0 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80038dc:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80038e0:	4c3a      	ldr	r4, [pc, #232]	@ (80039cc <HAL_GPIO_Init+0x1bc>)
 80038e2:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038e4:	3301      	adds	r3, #1
 80038e6:	2b0f      	cmp	r3, #15
 80038e8:	d86b      	bhi.n	80039c2 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80038ea:	2201      	movs	r2, #1
 80038ec:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ee:	680c      	ldr	r4, [r1, #0]
 80038f0:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80038f4:	ea32 0404 	bics.w	r4, r2, r4
 80038f8:	d1f4      	bne.n	80038e4 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038fa:	684c      	ldr	r4, [r1, #4]
 80038fc:	f004 0403 	and.w	r4, r4, #3
 8003900:	3c01      	subs	r4, #1
 8003902:	2c01      	cmp	r4, #1
 8003904:	d98b      	bls.n	800381e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003906:	684a      	ldr	r2, [r1, #4]
 8003908:	f002 0203 	and.w	r2, r2, #3
 800390c:	2a03      	cmp	r2, #3
 800390e:	d009      	beq.n	8003924 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8003910:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003912:	005d      	lsls	r5, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	40aa      	lsls	r2, r5
 8003918:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800391c:	688a      	ldr	r2, [r1, #8]
 800391e:	40aa      	lsls	r2, r5
 8003920:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8003922:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003924:	684a      	ldr	r2, [r1, #4]
 8003926:	f002 0203 	and.w	r2, r2, #3
 800392a:	2a02      	cmp	r2, #2
 800392c:	d08e      	beq.n	800384c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 800392e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003930:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003934:	2203      	movs	r2, #3
 8003936:	fa02 f20e 	lsl.w	r2, r2, lr
 800393a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800393e:	684a      	ldr	r2, [r1, #4]
 8003940:	f002 0203 	and.w	r2, r2, #3
 8003944:	fa02 f20e 	lsl.w	r2, r2, lr
 8003948:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800394a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800394c:	684a      	ldr	r2, [r1, #4]
 800394e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8003952:	d0c7      	beq.n	80038e4 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003954:	2200      	movs	r2, #0
 8003956:	9201      	str	r2, [sp, #4]
 8003958:	4a1d      	ldr	r2, [pc, #116]	@ (80039d0 <HAL_GPIO_Init+0x1c0>)
 800395a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800395c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8003960:	6454      	str	r4, [r2, #68]	@ 0x44
 8003962:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003964:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003968:	9201      	str	r2, [sp, #4]
 800396a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800396c:	089c      	lsrs	r4, r3, #2
 800396e:	1ca5      	adds	r5, r4, #2
 8003970:	4a15      	ldr	r2, [pc, #84]	@ (80039c8 <HAL_GPIO_Init+0x1b8>)
 8003972:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003976:	f003 0e03 	and.w	lr, r3, #3
 800397a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800397e:	220f      	movs	r2, #15
 8003980:	fa02 f20e 	lsl.w	r2, r2, lr
 8003984:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003988:	4a12      	ldr	r2, [pc, #72]	@ (80039d4 <HAL_GPIO_Init+0x1c4>)
 800398a:	4290      	cmp	r0, r2
 800398c:	f43f af74 	beq.w	8003878 <HAL_GPIO_Init+0x68>
 8003990:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003994:	4290      	cmp	r0, r2
 8003996:	d00e      	beq.n	80039b6 <HAL_GPIO_Init+0x1a6>
 8003998:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800399c:	4290      	cmp	r0, r2
 800399e:	d00c      	beq.n	80039ba <HAL_GPIO_Init+0x1aa>
 80039a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80039a4:	4290      	cmp	r0, r2
 80039a6:	d00a      	beq.n	80039be <HAL_GPIO_Init+0x1ae>
 80039a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80039ac:	4290      	cmp	r0, r2
 80039ae:	f43f af61 	beq.w	8003874 <HAL_GPIO_Init+0x64>
 80039b2:	2207      	movs	r2, #7
 80039b4:	e761      	b.n	800387a <HAL_GPIO_Init+0x6a>
 80039b6:	2201      	movs	r2, #1
 80039b8:	e75f      	b.n	800387a <HAL_GPIO_Init+0x6a>
 80039ba:	2202      	movs	r2, #2
 80039bc:	e75d      	b.n	800387a <HAL_GPIO_Init+0x6a>
 80039be:	2203      	movs	r2, #3
 80039c0:	e75b      	b.n	800387a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80039c2:	b002      	add	sp, #8
 80039c4:	bd70      	pop	{r4, r5, r6, pc}
 80039c6:	4770      	bx	lr
 80039c8:	40013800 	.word	0x40013800
 80039cc:	40013c00 	.word	0x40013c00
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40020000 	.word	0x40020000

080039d8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039d8:	6903      	ldr	r3, [r0, #16]
 80039da:	4219      	tst	r1, r3
 80039dc:	d001      	beq.n	80039e2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80039de:	2001      	movs	r0, #1
 80039e0:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039e2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80039e4:	4770      	bx	lr

080039e6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039e6:	b10a      	cbz	r2, 80039ec <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039e8:	6181      	str	r1, [r0, #24]
 80039ea:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039ec:	0409      	lsls	r1, r1, #16
 80039ee:	6181      	str	r1, [r0, #24]
  }
}
 80039f0:	4770      	bx	lr

080039f2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039f2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039f4:	ea01 0203 	and.w	r2, r1, r3
 80039f8:	ea21 0103 	bic.w	r1, r1, r3
 80039fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003a00:	6181      	str	r1, [r0, #24]
}
 8003a02:	4770      	bx	lr

08003a04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a04:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a06:	4b05      	ldr	r3, [pc, #20]	@ (8003a1c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	4203      	tst	r3, r0
 8003a0c:	d100      	bne.n	8003a10 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8003a0e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a10:	4b02      	ldr	r3, [pc, #8]	@ (8003a1c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003a12:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a14:	f7fe fb07 	bl	8002026 <HAL_GPIO_EXTI_Callback>
}
 8003a18:	e7f9      	b.n	8003a0e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003a1a:	bf00      	nop
 8003a1c:	40013c00 	.word	0x40013c00

08003a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a20:	b500      	push	{lr}
 8003a22:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a24:	2200      	movs	r2, #0
 8003a26:	9200      	str	r2, [sp, #0]
 8003a28:	4b0d      	ldr	r3, [pc, #52]	@ (8003a60 <HAL_MspInit+0x40>)
 8003a2a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003a2c:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8003a30:	6459      	str	r1, [r3, #68]	@ 0x44
 8003a32:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003a34:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8003a38:	9100      	str	r1, [sp, #0]
 8003a3a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3c:	9201      	str	r2, [sp, #4]
 8003a3e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003a40:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8003a44:	6419      	str	r1, [r3, #64]	@ 0x40
 8003a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a50:	210f      	movs	r1, #15
 8003a52:	f06f 0001 	mvn.w	r0, #1
 8003a56:	f7ff fcb3 	bl	80033c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a5a:	b003      	add	sp, #12
 8003a5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a60:	40023800 	.word	0x40023800

08003a64 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a68:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a6a:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8003a6e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8003a72:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003a76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d854      	bhi.n	8003b28 <PCD_WriteEmptyTxFifo+0xc4>
 8003a7e:	4607      	mov	r7, r0
 8003a80:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a82:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8003a84:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8003a88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003a8c:	69d2      	ldr	r2, [r2, #28]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d300      	bcc.n	8003a94 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8003a92:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8003a94:	f102 0903 	add.w	r9, r2, #3
 8003a98:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a9c:	e015      	b.n	8003aca <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8003a9e:	f106 0903 	add.w	r9, r6, #3
 8003aa2:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 8003aa6:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003aa8:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8003aac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8003ab0:	6a29      	ldr	r1, [r5, #32]
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	b2b3      	uxth	r3, r6
 8003ab6:	b2e2      	uxtb	r2, r4
 8003ab8:	4640      	mov	r0, r8
 8003aba:	f002 fa8a 	bl	8005fd2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003abe:	6a2b      	ldr	r3, [r5, #32]
 8003ac0:	4433      	add	r3, r6
 8003ac2:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8003ac4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003ac6:	4433      	add	r3, r6
 8003ac8:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003aca:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8003ace:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ad6:	454b      	cmp	r3, r9
 8003ad8:	d312      	bcc.n	8003b00 <PCD_WriteEmptyTxFifo+0x9c>
 8003ada:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8003ade:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003ae2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d20a      	bcs.n	8003b00 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003aea:	b14b      	cbz	r3, 8003b00 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8003aec:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8003aee:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8003af2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8003af6:	69d6      	ldr	r6, [r2, #28]
 8003af8:	429e      	cmp	r6, r3
 8003afa:	d3d0      	bcc.n	8003a9e <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8003afc:	461e      	mov	r6, r3
 8003afe:	e7ce      	b.n	8003a9e <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b00:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8003b04:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8003b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d80f      	bhi.n	8003b30 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b10:	f004 040f 	and.w	r4, r4, #15
 8003b14:	2201      	movs	r2, #1
 8003b16:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b18:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 8003b1c:	ea23 0302 	bic.w	r3, r3, r2
 8003b20:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 8003b24:	2000      	movs	r0, #0
 8003b26:	e000      	b.n	8003b2a <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 8003b28:	2001      	movs	r0, #1
}
 8003b2a:	b003      	add	sp, #12
 8003b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8003b30:	2000      	movs	r0, #0
 8003b32:	e7fa      	b.n	8003b2a <PCD_WriteEmptyTxFifo+0xc6>

08003b34 <HAL_PCD_Init>:
{
 8003b34:	b530      	push	{r4, r5, lr}
 8003b36:	b083      	sub	sp, #12
  if (hpcd == NULL)
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d07a      	beq.n	8003c32 <HAL_PCD_Init+0xfe>
 8003b3c:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8003b3e:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b40:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8003b44:	b1c3      	cbz	r3, 8003b78 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b46:	2303      	movs	r3, #3
 8003b48:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 8003b4c:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 8003b50:	d017      	beq.n	8003b82 <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 8003b52:	6820      	ldr	r0, [r4, #0]
 8003b54:	f001 ffee 	bl	8005b34 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b58:	7c23      	ldrb	r3, [r4, #16]
 8003b5a:	f88d 3000 	strb.w	r3, [sp]
 8003b5e:	1d23      	adds	r3, r4, #4
 8003b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b62:	6820      	ldr	r0, [r4, #0]
 8003b64:	f001 ff25 	bl	80059b2 <USB_CoreInit>
 8003b68:	b170      	cbz	r0, 8003b88 <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8003b70:	2501      	movs	r5, #1
}
 8003b72:	4628      	mov	r0, r5
 8003b74:	b003      	add	sp, #12
 8003b76:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8003b78:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8003b7c:	f004 fbd6 	bl	800832c <HAL_PCD_MspInit>
 8003b80:	e7e1      	b.n	8003b46 <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	71a3      	strb	r3, [r4, #6]
 8003b86:	e7e4      	b.n	8003b52 <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003b88:	2100      	movs	r1, #0
 8003b8a:	6820      	ldr	r0, [r4, #0]
 8003b8c:	f002 fc37 	bl	80063fe <USB_SetCurrentMode>
 8003b90:	4602      	mov	r2, r0
 8003b92:	b9b8      	cbnz	r0, 8003bc4 <HAL_PCD_Init+0x90>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b94:	4603      	mov	r3, r0
 8003b96:	7920      	ldrb	r0, [r4, #4]
 8003b98:	4298      	cmp	r0, r3
 8003b9a:	d918      	bls.n	8003bce <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 8003b9c:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8003ba0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8003ba8:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003baa:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bac:	2000      	movs	r0, #0
 8003bae:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bb0:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bb2:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bb4:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8003bb8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003bbc:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	e7e8      	b.n	8003b96 <HAL_PCD_Init+0x62>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8003bca:	2501      	movs	r5, #1
 8003bcc:	e7d1      	b.n	8003b72 <HAL_PCD_Init+0x3e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bce:	4290      	cmp	r0, r2
 8003bd0:	d917      	bls.n	8003c02 <HAL_PCD_Init+0xce>
    hpcd->OUT_ep[i].is_in = 0U;
 8003bd2:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8003bd6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003bda:	2100      	movs	r1, #0
 8003bdc:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8003be0:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003be4:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003be8:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bec:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bf0:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8003bf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003bf8:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bfc:	3201      	adds	r2, #1
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	e7e5      	b.n	8003bce <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c02:	7c23      	ldrb	r3, [r4, #16]
 8003c04:	f88d 3000 	strb.w	r3, [sp]
 8003c08:	1d23      	adds	r3, r4, #4
 8003c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c0c:	6820      	ldr	r0, [r4, #0]
 8003c0e:	f001 ffe7 	bl	8005be0 <USB_DevInit>
 8003c12:	4605      	mov	r5, r0
 8003c14:	b120      	cbz	r0, 8003c20 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c16:	2302      	movs	r3, #2
 8003c18:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8003c1c:	2501      	movs	r5, #1
 8003c1e:	e7a8      	b.n	8003b72 <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c2a:	6820      	ldr	r0, [r4, #0]
 8003c2c:	f002 fba6 	bl	800637c <USB_DevDisconnect>
  return HAL_OK;
 8003c30:	e79f      	b.n	8003b72 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8003c32:	2501      	movs	r5, #1
 8003c34:	e79d      	b.n	8003b72 <HAL_PCD_Init+0x3e>

08003c36 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c36:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 8003c38:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8003c3c:	2a01      	cmp	r2, #1
 8003c3e:	d01a      	beq.n	8003c76 <HAL_PCD_Start+0x40>
{
 8003c40:	b510      	push	{r4, lr}
 8003c42:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003c44:	2201      	movs	r2, #1
 8003c46:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003c50:	d002      	beq.n	8003c58 <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 8003c52:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003c54:	2a01      	cmp	r2, #1
 8003c56:	d009      	beq.n	8003c6c <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 8003c58:	6820      	ldr	r0, [r4, #0]
 8003c5a:	f001 ff65 	bl	8005b28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c5e:	6820      	ldr	r0, [r4, #0]
 8003c60:	f002 fb7e 	bl	8006360 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c64:	2000      	movs	r0, #0
 8003c66:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003c6a:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c6e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003c72:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c74:	e7f0      	b.n	8003c58 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 8003c76:	2002      	movs	r0, #2
}
 8003c78:	4770      	bx	lr
	...

08003c7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	4604      	mov	r4, r0
 8003c80:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c82:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c84:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c86:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c8e:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003c90:	79a1      	ldrb	r1, [r4, #6]
 8003c92:	2901      	cmp	r1, #1
 8003c94:	d011      	beq.n	8003cba <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c96:	4938      	ldr	r1, [pc, #224]	@ (8003d78 <PCD_EP_OutXfrComplete_int+0xfc>)
 8003c98:	428e      	cmp	r6, r1
 8003c9a:	d056      	beq.n	8003d4a <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c9c:	b93d      	cbnz	r5, 8003cae <PCD_EP_OutXfrComplete_int+0x32>
 8003c9e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8003ca2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003ca6:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d05e      	beq.n	8003d6c <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cae:	b2e9      	uxtb	r1, r5
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f004 fb87 	bl	80083c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003cba:	f012 0f08 	tst.w	r2, #8
 8003cbe:	d009      	beq.n	8003cd4 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cc0:	492e      	ldr	r1, [pc, #184]	@ (8003d7c <PCD_EP_OutXfrComplete_int+0x100>)
 8003cc2:	428e      	cmp	r6, r1
 8003cc4:	d9f7      	bls.n	8003cb6 <PCD_EP_OutXfrComplete_int+0x3a>
 8003cc6:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8003cca:	d0f4      	beq.n	8003cb6 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ccc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	e7f0      	b.n	8003cb6 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003cd4:	f012 0f20 	tst.w	r2, #32
 8003cd8:	d002      	beq.n	8003ce0 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cda:	2220      	movs	r2, #32
 8003cdc:	609a      	str	r2, [r3, #8]
 8003cde:	e7ea      	b.n	8003cb6 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ce0:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8003ce4:	d1e7      	bne.n	8003cb6 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ce6:	4925      	ldr	r1, [pc, #148]	@ (8003d7c <PCD_EP_OutXfrComplete_int+0x100>)
 8003ce8:	428e      	cmp	r6, r1
 8003cea:	d906      	bls.n	8003cfa <PCD_EP_OutXfrComplete_int+0x7e>
 8003cec:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8003cf0:	d003      	beq.n	8003cfa <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cf2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	e7dd      	b.n	8003cb6 <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cfa:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8003cfe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003d02:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d0c:	1acb      	subs	r3, r1, r3
 8003d0e:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 8003d12:	b97d      	cbnz	r5, 8003d34 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 8003d14:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8003d18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003d1c:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 8003d20:	b16a      	cbz	r2, 8003d3e <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 8003d22:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8003d26:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003d2a:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 8003d2e:	4419      	add	r1, r3
 8003d30:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d34:	b2e9      	uxtb	r1, r5
 8003d36:	4620      	mov	r0, r4
 8003d38:	f004 fb44 	bl	80083c4 <HAL_PCD_DataOutStageCallback>
 8003d3c:	e7bb      	b.n	8003cb6 <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d3e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003d42:	2101      	movs	r1, #1
 8003d44:	f002 fb9a 	bl	800647c <USB_EP0_OutStart>
 8003d48:	e7f4      	b.n	8003d34 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d4a:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8003d4e:	d003      	beq.n	8003d58 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d50:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003d54:	609a      	str	r2, [r3, #8]
 8003d56:	e7ae      	b.n	8003cb6 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d58:	f012 0f20 	tst.w	r2, #32
 8003d5c:	d001      	beq.n	8003d62 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d5e:	2220      	movs	r2, #32
 8003d60:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d62:	b2e9      	uxtb	r1, r5
 8003d64:	4620      	mov	r0, r4
 8003d66:	f004 fb2d 	bl	80083c4 <HAL_PCD_DataOutStageCallback>
 8003d6a:	e7a4      	b.n	8003cb6 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d6c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003d70:	2100      	movs	r1, #0
 8003d72:	f002 fb83 	bl	800647c <USB_EP0_OutStart>
 8003d76:	e79a      	b.n	8003cae <PCD_EP_OutXfrComplete_int+0x32>
 8003d78:	4f54310a 	.word	0x4f54310a
 8003d7c:	4f54300a 	.word	0x4f54300a

08003d80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d80:	b538      	push	{r3, r4, r5, lr}
 8003d82:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d84:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d86:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d88:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8003d8c:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d90:	4a0e      	ldr	r2, [pc, #56]	@ (8003dcc <PCD_EP_OutSetupPacket_int+0x4c>)
 8003d92:	4295      	cmp	r5, r2
 8003d94:	d907      	bls.n	8003da6 <PCD_EP_OutSetupPacket_int+0x26>
 8003d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d9a:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8003d9e:	d002      	beq.n	8003da6 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003da0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003da4:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003da6:	4620      	mov	r0, r4
 8003da8:	f004 fb04 	bl	80083b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003dac:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <PCD_EP_OutSetupPacket_int+0x4c>)
 8003dae:	429d      	cmp	r5, r3
 8003db0:	d902      	bls.n	8003db8 <PCD_EP_OutSetupPacket_int+0x38>
 8003db2:	79a3      	ldrb	r3, [r4, #6]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d001      	beq.n	8003dbc <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8003db8:	2000      	movs	r0, #0
 8003dba:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dbc:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	6820      	ldr	r0, [r4, #0]
 8003dc4:	f002 fb5a 	bl	800647c <USB_EP0_OutStart>
 8003dc8:	e7f6      	b.n	8003db8 <PCD_EP_OutSetupPacket_int+0x38>
 8003dca:	bf00      	nop
 8003dcc:	4f54300a 	.word	0x4f54300a

08003dd0 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003dd0:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d00c      	beq.n	8003df2 <HAL_PCD_SetAddress+0x22>
{
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003de2:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003de4:	6800      	ldr	r0, [r0, #0]
 8003de6:	f002 faab 	bl	8006340 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003dea:	2000      	movs	r0, #0
 8003dec:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003df0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003df2:	2002      	movs	r0, #2
}
 8003df4:	4770      	bx	lr

08003df6 <HAL_PCD_EP_Open>:
{
 8003df6:	b538      	push	{r3, r4, r5, lr}
 8003df8:	4605      	mov	r5, r0
 8003dfa:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003dfc:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003e00:	d12b      	bne.n	8003e5a <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e02:	f001 0e0f 	and.w	lr, r1, #15
 8003e06:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8003e0a:	00a4      	lsls	r4, r4, #2
 8003e0c:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 8003e10:	4404      	add	r4, r0
 8003e12:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8003e14:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8003e18:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e22:	f00c 0c0f 	and.w	ip, ip, #15
 8003e26:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003e2a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003e2e:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8003e30:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8003e32:	784a      	ldrb	r2, [r1, #1]
 8003e34:	b10a      	cbz	r2, 8003e3a <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 8003e36:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d01c      	beq.n	8003e78 <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 8003e3e:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d01b      	beq.n	8003e7e <HAL_PCD_EP_Open+0x88>
 8003e46:	2301      	movs	r3, #1
 8003e48:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e4c:	6828      	ldr	r0, [r5, #0]
 8003e4e:	f001 ffa4 	bl	8005d9a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e52:	2000      	movs	r0, #0
 8003e54:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 8003e58:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e5a:	f001 000f 	and.w	r0, r1, #15
 8003e5e:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8003e62:	0089      	lsls	r1, r1, #2
 8003e64:	3110      	adds	r1, #16
 8003e66:	4429      	add	r1, r5
 8003e68:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003e6a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8003e6e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8003e72:	2401      	movs	r4, #1
 8003e74:	7544      	strb	r4, [r0, #21]
 8003e76:	e7d4      	b.n	8003e22 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	714b      	strb	r3, [r1, #5]
 8003e7c:	e7df      	b.n	8003e3e <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 8003e7e:	2002      	movs	r0, #2
 8003e80:	e7ea      	b.n	8003e58 <HAL_PCD_EP_Open+0x62>

08003e82 <HAL_PCD_EP_Close>:
{
 8003e82:	b510      	push	{r4, lr}
 8003e84:	4604      	mov	r4, r0
 8003e86:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003e88:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003e8c:	d120      	bne.n	8003ed0 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e8e:	f001 000f 	and.w	r0, r1, #15
 8003e92:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e9c:	4423      	add	r3, r4
 8003e9e:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8003ea0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8003ea4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eae:	f002 020f 	and.w	r2, r2, #15
 8003eb2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003eb4:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d018      	beq.n	8003eee <HAL_PCD_EP_Close+0x6c>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ec2:	6820      	ldr	r0, [r4, #0]
 8003ec4:	f001 ffb6 	bl	8005e34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003ece:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ed0:	f001 000f 	and.w	r0, r1, #15
 8003ed4:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	3310      	adds	r3, #16
 8003edc:	4423      	add	r3, r4
 8003ede:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8003ee0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8003ee4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003ee8:	2301      	movs	r3, #1
 8003eea:	7543      	strb	r3, [r0, #21]
 8003eec:	e7df      	b.n	8003eae <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8003eee:	2002      	movs	r0, #2
 8003ef0:	e7ed      	b.n	8003ece <HAL_PCD_EP_Close+0x4c>

08003ef2 <HAL_PCD_EP_Receive>:
{
 8003ef2:	b510      	push	{r4, lr}
 8003ef4:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ef6:	f001 0c0f 	and.w	ip, r1, #15
 8003efa:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8003efe:	0089      	lsls	r1, r1, #2
 8003f00:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8003f04:	4401      	add	r1, r0
 8003f06:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8003f08:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8003f0c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8003f10:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 8003f14:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 8003f1e:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f22:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 8003f26:	7982      	ldrb	r2, [r0, #6]
 8003f28:	2a01      	cmp	r2, #1
 8003f2a:	d004      	beq.n	8003f36 <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f2c:	6800      	ldr	r0, [r0, #0]
 8003f2e:	f002 f867 	bl	8006000 <USB_EPStartXfer>
}
 8003f32:	2000      	movs	r0, #0
 8003f34:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8003f36:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 8003f3a:	e7f7      	b.n	8003f2c <HAL_PCD_EP_Receive+0x3a>

08003f3c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f3c:	f001 010f 	and.w	r1, r1, #15
 8003f40:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003f44:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8003f48:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 8003f4c:	4770      	bx	lr

08003f4e <HAL_PCD_EP_Transmit>:
{
 8003f4e:	b510      	push	{r4, lr}
 8003f50:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f52:	f001 0c0f 	and.w	ip, r1, #15
 8003f56:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8003f5a:	0089      	lsls	r1, r1, #2
 8003f5c:	3110      	adds	r1, #16
 8003f5e:	4401      	add	r1, r0
 8003f60:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8003f62:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8003f66:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8003f6a:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8003f6e:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f7e:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 8003f82:	7982      	ldrb	r2, [r0, #6]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d004      	beq.n	8003f92 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f88:	6800      	ldr	r0, [r0, #0]
 8003f8a:	f002 f839 	bl	8006000 <USB_EPStartXfer>
}
 8003f8e:	2000      	movs	r0, #0
 8003f90:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8003f92:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 8003f96:	e7f7      	b.n	8003f88 <HAL_PCD_EP_Transmit+0x3a>

08003f98 <HAL_PCD_EP_SetStall>:
{
 8003f98:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f9a:	f001 050f 	and.w	r5, r1, #15
 8003f9e:	7902      	ldrb	r2, [r0, #4]
 8003fa0:	42aa      	cmp	r2, r5
 8003fa2:	d338      	bcc.n	8004016 <HAL_PCD_EP_SetStall+0x7e>
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8003fa8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003fac:	d11f      	bne.n	8003fee <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8003fae:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003fb2:	0089      	lsls	r1, r1, #2
 8003fb4:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8003fb8:	4401      	add	r1, r0
 8003fba:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8003fbc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003fc0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fce:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8003fd0:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d020      	beq.n	800401a <HAL_PCD_EP_SetStall+0x82>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fde:	6820      	ldr	r0, [r4, #0]
 8003fe0:	f002 f953 	bl	800628a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fe4:	b185      	cbz	r5, 8004008 <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003fec:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fee:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8003ff2:	0089      	lsls	r1, r1, #2
 8003ff4:	3110      	adds	r1, #16
 8003ff6:	4401      	add	r1, r0
 8003ff8:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003ffa:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8003ffe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004002:	2201      	movs	r2, #1
 8004004:	755a      	strb	r2, [r3, #21]
 8004006:	e7e0      	b.n	8003fca <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004008:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800400c:	79a1      	ldrb	r1, [r4, #6]
 800400e:	6820      	ldr	r0, [r4, #0]
 8004010:	f002 fa34 	bl	800647c <USB_EP0_OutStart>
 8004014:	e7e7      	b.n	8003fe6 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8004016:	2001      	movs	r0, #1
 8004018:	e7e8      	b.n	8003fec <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 800401a:	2002      	movs	r0, #2
 800401c:	e7e6      	b.n	8003fec <HAL_PCD_EP_SetStall+0x54>

0800401e <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800401e:	f001 030f 	and.w	r3, r1, #15
 8004022:	7902      	ldrb	r2, [r0, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	d330      	bcc.n	800408a <HAL_PCD_EP_ClrStall+0x6c>
{
 8004028:	b510      	push	{r4, lr}
 800402a:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800402c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004030:	d11e      	bne.n	8004070 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004032:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8004036:	0089      	lsls	r1, r1, #2
 8004038:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800403c:	4401      	add	r1, r0
 800403e:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8004040:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8004044:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004048:	2000      	movs	r0, #0
 800404a:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 800404e:	2200      	movs	r2, #0
 8004050:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004052:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8004054:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8004058:	2b01      	cmp	r3, #1
 800405a:	d018      	beq.n	800408e <HAL_PCD_EP_ClrStall+0x70>
 800405c:	2301      	movs	r3, #1
 800405e:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004062:	6820      	ldr	r0, [r4, #0]
 8004064:	f002 f93e 	bl	80062e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004068:	2000      	movs	r0, #0
 800406a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800406e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004070:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8004074:	0089      	lsls	r1, r1, #2
 8004076:	3110      	adds	r1, #16
 8004078:	4401      	add	r1, r0
 800407a:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800407c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8004080:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004084:	2001      	movs	r0, #1
 8004086:	7550      	strb	r0, [r2, #21]
 8004088:	e7e1      	b.n	800404e <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 800408a:	2001      	movs	r0, #1
}
 800408c:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800408e:	2002      	movs	r0, #2
 8004090:	e7ed      	b.n	800406e <HAL_PCD_EP_ClrStall+0x50>

08004092 <HAL_PCD_EP_Abort>:
{
 8004092:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8004094:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004098:	d10c      	bne.n	80040b4 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800409a:	f001 010f 	and.w	r1, r1, #15
 800409e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80040a2:	0089      	lsls	r1, r1, #2
 80040a4:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80040a8:	4401      	add	r1, r0
 80040aa:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040ac:	6800      	ldr	r0, [r0, #0]
 80040ae:	f001 ff31 	bl	8005f14 <USB_EPStopXfer>
}
 80040b2:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040b4:	f001 010f 	and.w	r1, r1, #15
 80040b8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80040bc:	0089      	lsls	r1, r1, #2
 80040be:	3110      	adds	r1, #16
 80040c0:	4401      	add	r1, r0
 80040c2:	3104      	adds	r1, #4
 80040c4:	e7f2      	b.n	80040ac <HAL_PCD_EP_Abort+0x1a>

080040c6 <HAL_PCD_IRQHandler>:
{
 80040c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ca:	b083      	sub	sp, #12
 80040cc:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ce:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80040d0:	4628      	mov	r0, r5
 80040d2:	f002 f990 	bl	80063f6 <USB_GetMode>
 80040d6:	b110      	cbz	r0, 80040de <HAL_PCD_IRQHandler+0x18>
}
 80040d8:	b003      	add	sp, #12
 80040da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040de:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80040e0:	6820      	ldr	r0, [r4, #0]
 80040e2:	f002 f959 	bl	8006398 <USB_ReadInterrupts>
 80040e6:	2800      	cmp	r0, #0
 80040e8:	d0f6      	beq.n	80040d8 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80040ea:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80040f4:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80040f8:	6820      	ldr	r0, [r4, #0]
 80040fa:	f002 f94d 	bl	8006398 <USB_ReadInterrupts>
 80040fe:	f010 0f02 	tst.w	r0, #2
 8004102:	d004      	beq.n	800410e <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004104:	6822      	ldr	r2, [r4, #0]
 8004106:	6953      	ldr	r3, [r2, #20]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800410e:	6820      	ldr	r0, [r4, #0]
 8004110:	f002 f942 	bl	8006398 <USB_ReadInterrupts>
 8004114:	f010 0f10 	tst.w	r0, #16
 8004118:	d015      	beq.n	8004146 <HAL_PCD_IRQHandler+0x80>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800411a:	6822      	ldr	r2, [r4, #0]
 800411c:	6993      	ldr	r3, [r2, #24]
 800411e:	f023 0310 	bic.w	r3, r3, #16
 8004122:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8004124:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004128:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800412c:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 8004130:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004134:	d04c      	beq.n	80041d0 <HAL_PCD_IRQHandler+0x10a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004136:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800413a:	d06f      	beq.n	800421c <HAL_PCD_IRQHandler+0x156>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800413c:	6822      	ldr	r2, [r4, #0]
 800413e:	6993      	ldr	r3, [r2, #24]
 8004140:	f043 0310 	orr.w	r3, r3, #16
 8004144:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004146:	6820      	ldr	r0, [r4, #0]
 8004148:	f002 f926 	bl	8006398 <USB_ReadInterrupts>
 800414c:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8004150:	d176      	bne.n	8004240 <HAL_PCD_IRQHandler+0x17a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004152:	6820      	ldr	r0, [r4, #0]
 8004154:	f002 f920 	bl	8006398 <USB_ReadInterrupts>
 8004158:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 800415c:	f040 80e0 	bne.w	8004320 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004160:	6820      	ldr	r0, [r4, #0]
 8004162:	f002 f919 	bl	8006398 <USB_ReadInterrupts>
 8004166:	2800      	cmp	r0, #0
 8004168:	f2c0 8161 	blt.w	800442e <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800416c:	6820      	ldr	r0, [r4, #0]
 800416e:	f002 f913 	bl	8006398 <USB_ReadInterrupts>
 8004172:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8004176:	d009      	beq.n	800418c <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f013 0f01 	tst.w	r3, #1
 800417e:	f040 816e 	bne.w	800445e <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004182:	6822      	ldr	r2, [r4, #0]
 8004184:	6953      	ldr	r3, [r2, #20]
 8004186:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800418a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800418c:	6820      	ldr	r0, [r4, #0]
 800418e:	f002 f903 	bl	8006398 <USB_ReadInterrupts>
 8004192:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8004196:	f040 8166 	bne.w	8004466 <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800419a:	6820      	ldr	r0, [r4, #0]
 800419c:	f002 f8fc 	bl	8006398 <USB_ReadInterrupts>
 80041a0:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 80041a4:	f040 81b3 	bne.w	800450e <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041a8:	6820      	ldr	r0, [r4, #0]
 80041aa:	f002 f8f5 	bl	8006398 <USB_ReadInterrupts>
 80041ae:	f010 0f08 	tst.w	r0, #8
 80041b2:	f040 81c4 	bne.w	800453e <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80041b6:	6820      	ldr	r0, [r4, #0]
 80041b8:	f002 f8ee 	bl	8006398 <USB_ReadInterrupts>
 80041bc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80041c0:	f000 81d7 	beq.w	8004572 <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80041c4:	69ab      	ldr	r3, [r5, #24]
 80041c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041ca:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041cc:	2601      	movs	r6, #1
 80041ce:	e1c0      	b.n	8004552 <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80041d0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80041d4:	ea18 0f03 	tst.w	r8, r3
 80041d8:	d0b0      	beq.n	800413c <HAL_PCD_IRQHandler+0x76>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80041da:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 80041e8:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 80041ec:	f3c8 120a 	ubfx	r2, r8, #4, #11
 80041f0:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 80041f4:	4628      	mov	r0, r5
 80041f6:	f002 f825 	bl	8006244 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041fa:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 80041fe:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8004202:	4453      	add	r3, sl
 8004204:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004208:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 800420c:	9a01      	ldr	r2, [sp, #4]
 800420e:	444a      	add	r2, r9
 8004210:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004214:	4453      	add	r3, sl
 8004216:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 800421a:	e78f      	b.n	800413c <HAL_PCD_IRQHandler+0x76>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800421c:	2208      	movs	r2, #8
 800421e:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8004222:	4628      	mov	r0, r5
 8004224:	f002 f80e 	bl	8006244 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004228:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800422c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004230:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8004234:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8004238:	4442      	add	r2, r8
 800423a:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 800423e:	e77d      	b.n	800413c <HAL_PCD_IRQHandler+0x76>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004240:	6820      	ldr	r0, [r4, #0]
 8004242:	f002 f8ad 	bl	80063a0 <USB_ReadDevAllOutEpInterrupt>
 8004246:	4680      	mov	r8, r0
      epnum = 0U;
 8004248:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800424a:	e035      	b.n	80042b8 <HAL_PCD_IRQHandler+0x1f2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800424c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8004250:	2201      	movs	r2, #1
 8004252:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004256:	4649      	mov	r1, r9
 8004258:	4620      	mov	r0, r4
 800425a:	f7ff fd0f 	bl	8003c7c <PCD_EP_OutXfrComplete_int>
 800425e:	e03c      	b.n	80042da <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004260:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8004264:	2208      	movs	r2, #8
 8004266:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800426a:	4649      	mov	r1, r9
 800426c:	4620      	mov	r0, r4
 800426e:	f7ff fd87 	bl	8003d80 <PCD_EP_OutSetupPacket_int>
 8004272:	e035      	b.n	80042e0 <HAL_PCD_IRQHandler+0x21a>
            if (ep->is_iso_incomplete == 1U)
 8004274:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8004278:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800427c:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8004280:	2b01      	cmp	r3, #1
 8004282:	d041      	beq.n	8004308 <HAL_PCD_IRQHandler+0x242>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004284:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8004288:	2202      	movs	r2, #2
 800428a:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800428e:	f01a 0f20 	tst.w	sl, #32
 8004292:	d004      	beq.n	800429e <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004294:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8004298:	2220      	movs	r2, #32
 800429a:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800429e:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 80042a2:	d005      	beq.n	80042b0 <HAL_PCD_IRQHandler+0x1ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80042a4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80042a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042ac:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 80042b0:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80042b4:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80042b8:	f1b8 0f00 	cmp.w	r8, #0
 80042bc:	f43f af49 	beq.w	8004152 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 80042c0:	f018 0f01 	tst.w	r8, #1
 80042c4:	d0f4      	beq.n	80042b0 <HAL_PCD_IRQHandler+0x1ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042c6:	fa5f fb89 	uxtb.w	fp, r9
 80042ca:	4659      	mov	r1, fp
 80042cc:	6820      	ldr	r0, [r4, #0]
 80042ce:	f002 f877 	bl	80063c0 <USB_ReadDevOutEPInterrupt>
 80042d2:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80042d4:	f010 0f01 	tst.w	r0, #1
 80042d8:	d1b8      	bne.n	800424c <HAL_PCD_IRQHandler+0x186>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80042da:	f01a 0f08 	tst.w	sl, #8
 80042de:	d1bf      	bne.n	8004260 <HAL_PCD_IRQHandler+0x19a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80042e0:	f01a 0f10 	tst.w	sl, #16
 80042e4:	d004      	beq.n	80042f0 <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80042e6:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80042ea:	2210      	movs	r2, #16
 80042ec:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80042f0:	f01a 0f02 	tst.w	sl, #2
 80042f4:	d0cb      	beq.n	800428e <HAL_PCD_IRQHandler+0x1c8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80042f6:	696b      	ldr	r3, [r5, #20]
 80042f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80042fc:	d0ba      	beq.n	8004274 <HAL_PCD_IRQHandler+0x1ae>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004304:	607b      	str	r3, [r7, #4]
 8004306:	e7b5      	b.n	8004274 <HAL_PCD_IRQHandler+0x1ae>
              ep->is_iso_incomplete = 0U;
 8004308:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800430c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004316:	4659      	mov	r1, fp
 8004318:	4620      	mov	r0, r4
 800431a:	f004 f8a1 	bl	8008460 <HAL_PCD_ISOOUTIncompleteCallback>
 800431e:	e7b1      	b.n	8004284 <HAL_PCD_IRQHandler+0x1be>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004320:	6820      	ldr	r0, [r4, #0]
 8004322:	f002 f845 	bl	80063b0 <USB_ReadDevAllInEpInterrupt>
 8004326:	4680      	mov	r8, r0
      epnum = 0U;
 8004328:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800432a:	e025      	b.n	8004378 <HAL_PCD_IRQHandler+0x2b2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800432c:	4659      	mov	r1, fp
 800432e:	4620      	mov	r0, r4
 8004330:	f004 f854 	bl	80083dc <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004334:	f01a 0f08 	tst.w	sl, #8
 8004338:	d004      	beq.n	8004344 <HAL_PCD_IRQHandler+0x27e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800433a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800433e:	2208      	movs	r2, #8
 8004340:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004344:	f01a 0f10 	tst.w	sl, #16
 8004348:	d004      	beq.n	8004354 <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800434a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800434e:	2210      	movs	r2, #16
 8004350:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004354:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8004358:	d004      	beq.n	8004364 <HAL_PCD_IRQHandler+0x29e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800435a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800435e:	2240      	movs	r2, #64	@ 0x40
 8004360:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004364:	f01a 0f02 	tst.w	sl, #2
 8004368:	d140      	bne.n	80043ec <HAL_PCD_IRQHandler+0x326>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800436a:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 800436e:	d159      	bne.n	8004424 <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 8004370:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8004374:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8004378:	f1b8 0f00 	cmp.w	r8, #0
 800437c:	f43f aef0 	beq.w	8004160 <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004380:	f018 0f01 	tst.w	r8, #1
 8004384:	d0f4      	beq.n	8004370 <HAL_PCD_IRQHandler+0x2aa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004386:	fa5f fb89 	uxtb.w	fp, r9
 800438a:	4659      	mov	r1, fp
 800438c:	6820      	ldr	r0, [r4, #0]
 800438e:	f002 f820 	bl	80063d2 <USB_ReadDevInEPInterrupt>
 8004392:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004394:	f010 0f01 	tst.w	r0, #1
 8004398:	d0cc      	beq.n	8004334 <HAL_PCD_IRQHandler+0x26e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800439a:	f009 020f 	and.w	r2, r9, #15
 800439e:	2101      	movs	r1, #1
 80043a0:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a6:	ea23 0302 	bic.w	r3, r3, r2
 80043aa:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80043ac:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80043b0:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 80043b4:	79a3      	ldrb	r3, [r4, #6]
 80043b6:	428b      	cmp	r3, r1
 80043b8:	d1b8      	bne.n	800432c <HAL_PCD_IRQHandler+0x266>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80043ba:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80043be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80043c2:	6a1a      	ldr	r2, [r3, #32]
 80043c4:	69d9      	ldr	r1, [r3, #28]
 80043c6:	440a      	add	r2, r1
 80043c8:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80043ca:	f1b9 0f00 	cmp.w	r9, #0
 80043ce:	d1ad      	bne.n	800432c <HAL_PCD_IRQHandler+0x266>
 80043d0:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80043d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80043d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1a6      	bne.n	800432c <HAL_PCD_IRQHandler+0x266>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043de:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80043e2:	2101      	movs	r1, #1
 80043e4:	6820      	ldr	r0, [r4, #0]
 80043e6:	f002 f849 	bl	800647c <USB_EP0_OutStart>
 80043ea:	e79f      	b.n	800432c <HAL_PCD_IRQHandler+0x266>
            (void)USB_FlushTxFifo(USBx, epnum);
 80043ec:	4649      	mov	r1, r9
 80043ee:	4628      	mov	r0, r5
 80043f0:	f001 fba6 	bl	8005b40 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 80043f4:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80043f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80043fc:	7ddb      	ldrb	r3, [r3, #23]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d005      	beq.n	800440e <HAL_PCD_IRQHandler+0x348>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004402:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8004406:	2202      	movs	r2, #2
 8004408:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 800440c:	e7ad      	b.n	800436a <HAL_PCD_IRQHandler+0x2a4>
              ep->is_iso_incomplete = 0U;
 800440e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8004412:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004416:	2200      	movs	r2, #0
 8004418:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800441a:	4659      	mov	r1, fp
 800441c:	4620      	mov	r0, r4
 800441e:	f004 f825 	bl	800846c <HAL_PCD_ISOINIncompleteCallback>
 8004422:	e7ee      	b.n	8004402 <HAL_PCD_IRQHandler+0x33c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004424:	4649      	mov	r1, r9
 8004426:	4620      	mov	r0, r4
 8004428:	f7ff fb1c 	bl	8003a64 <PCD_WriteEmptyTxFifo>
 800442c:	e7a0      	b.n	8004370 <HAL_PCD_IRQHandler+0x2aa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8004436:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 800443a:	2b01      	cmp	r3, #1
 800443c:	d008      	beq.n	8004450 <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 800443e:	4620      	mov	r0, r4
 8004440:	f004 f808 	bl	8008454 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004444:	6822      	ldr	r2, [r4, #0]
 8004446:	6953      	ldr	r3, [r2, #20]
 8004448:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800444c:	6153      	str	r3, [r2, #20]
 800444e:	e68d      	b.n	800416c <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 8004450:	2100      	movs	r1, #0
 8004452:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004456:	4620      	mov	r0, r4
 8004458:	f000 f93f 	bl	80046da <HAL_PCDEx_LPM_Callback>
 800445c:	e7f2      	b.n	8004444 <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 800445e:	4620      	mov	r0, r4
 8004460:	f003 ffe0 	bl	8008424 <HAL_PCD_SuspendCallback>
 8004464:	e68d      	b.n	8004182 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800446e:	2110      	movs	r1, #16
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	f001 fb65 	bl	8005b40 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004476:	e01a      	b.n	80044ae <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004478:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 800447c:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8004480:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004484:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004488:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800448c:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004490:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004494:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8004498:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800449c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044a0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80044a4:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80044a8:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044ac:	3601      	adds	r6, #1
 80044ae:	7923      	ldrb	r3, [r4, #4]
 80044b0:	42b3      	cmp	r3, r6
 80044b2:	d8e1      	bhi.n	8004478 <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80044ba:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044bc:	7be3      	ldrb	r3, [r4, #15]
 80044be:	b1db      	cbz	r3, 80044f8 <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80044c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044c4:	f043 030b 	orr.w	r3, r3, #11
 80044c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80044cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ce:	f043 030b 	orr.w	r3, r3, #11
 80044d2:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80044d4:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 80044d8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80044dc:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044e0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80044e4:	79a1      	ldrb	r1, [r4, #6]
 80044e6:	6820      	ldr	r0, [r4, #0]
 80044e8:	f001 ffc8 	bl	800647c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80044ec:	6822      	ldr	r2, [r4, #0]
 80044ee:	6953      	ldr	r3, [r2, #20]
 80044f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044f4:	6153      	str	r3, [r2, #20]
 80044f6:	e650      	b.n	800419a <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044fe:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004502:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f043 030b 	orr.w	r3, r3, #11
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	e7e2      	b.n	80044d4 <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 800450e:	6820      	ldr	r0, [r4, #0]
 8004510:	f001 ffa6 	bl	8006460 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004514:	6820      	ldr	r0, [r4, #0]
 8004516:	f001 fc2f 	bl	8005d78 <USB_GetDevSpeed>
 800451a:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800451c:	6826      	ldr	r6, [r4, #0]
 800451e:	f000 fbdd 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004522:	4601      	mov	r1, r0
 8004524:	79e2      	ldrb	r2, [r4, #7]
 8004526:	4630      	mov	r0, r6
 8004528:	f001 fa8c 	bl	8005a44 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800452c:	4620      	mov	r0, r4
 800452e:	f003 ff66 	bl	80083fe <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004532:	6822      	ldr	r2, [r4, #0]
 8004534:	6953      	ldr	r3, [r2, #20]
 8004536:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800453a:	6153      	str	r3, [r2, #20]
 800453c:	e634      	b.n	80041a8 <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 800453e:	4620      	mov	r0, r4
 8004540:	f003 ff57 	bl	80083f2 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004544:	6822      	ldr	r2, [r4, #0]
 8004546:	6953      	ldr	r3, [r2, #20]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	6153      	str	r3, [r2, #20]
 800454e:	e632      	b.n	80041b6 <HAL_PCD_IRQHandler+0xf0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004550:	3601      	adds	r6, #1
 8004552:	7923      	ldrb	r3, [r4, #4]
 8004554:	42b3      	cmp	r3, r6
 8004556:	d90c      	bls.n	8004572 <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004558:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800455c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004560:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8004564:	2b01      	cmp	r3, #1
 8004566:	d1f3      	bne.n	8004550 <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004568:	b2f1      	uxtb	r1, r6
 800456a:	4620      	mov	r0, r4
 800456c:	f7ff fd91 	bl	8004092 <HAL_PCD_EP_Abort>
 8004570:	e7ee      	b.n	8004550 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004572:	6820      	ldr	r0, [r4, #0]
 8004574:	f001 ff10 	bl	8006398 <USB_ReadInterrupts>
 8004578:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 800457c:	d125      	bne.n	80045ca <HAL_PCD_IRQHandler+0x504>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800457e:	6820      	ldr	r0, [r4, #0]
 8004580:	f001 ff0a 	bl	8006398 <USB_ReadInterrupts>
 8004584:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8004588:	d059      	beq.n	800463e <HAL_PCD_IRQHandler+0x578>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800458a:	2301      	movs	r3, #1
 800458c:	e026      	b.n	80045dc <HAL_PCD_IRQHandler+0x516>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800458e:	3601      	adds	r6, #1
 8004590:	7923      	ldrb	r3, [r4, #4]
 8004592:	42b3      	cmp	r3, r6
 8004594:	d91b      	bls.n	80045ce <HAL_PCD_IRQHandler+0x508>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004596:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 800459a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800459e:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80045a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80045a6:	7e1b      	ldrb	r3, [r3, #24]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d1f0      	bne.n	800458e <HAL_PCD_IRQHandler+0x4c8>
 80045ac:	2a00      	cmp	r2, #0
 80045ae:	daee      	bge.n	800458e <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80045b0:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80045b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80045b8:	2201      	movs	r2, #1
 80045ba:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80045bc:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 80045c0:	b2c9      	uxtb	r1, r1
 80045c2:	4620      	mov	r0, r4
 80045c4:	f7ff fd65 	bl	8004092 <HAL_PCD_EP_Abort>
 80045c8:	e7e1      	b.n	800458e <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045ca:	2601      	movs	r6, #1
 80045cc:	e7e0      	b.n	8004590 <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80045ce:	6822      	ldr	r2, [r4, #0]
 80045d0:	6953      	ldr	r3, [r2, #20]
 80045d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045d6:	6153      	str	r3, [r2, #20]
 80045d8:	e7d1      	b.n	800457e <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045da:	3301      	adds	r3, #1
 80045dc:	7922      	ldrb	r2, [r4, #4]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d928      	bls.n	8004634 <HAL_PCD_IRQHandler+0x56e>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80045e2:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80045e6:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045ea:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80045ee:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80045f2:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 80045f6:	2a01      	cmp	r2, #1
 80045f8:	d1ef      	bne.n	80045da <HAL_PCD_IRQHandler+0x514>
 80045fa:	2900      	cmp	r1, #0
 80045fc:	daed      	bge.n	80045da <HAL_PCD_IRQHandler+0x514>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80045fe:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 8004602:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8004606:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800460a:	4291      	cmp	r1, r2
 800460c:	d1e5      	bne.n	80045da <HAL_PCD_IRQHandler+0x514>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800460e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8004612:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004616:	2101      	movs	r1, #1
 8004618:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800461c:	69aa      	ldr	r2, [r5, #24]
 800461e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004622:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004624:	696a      	ldr	r2, [r5, #20]
 8004626:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800462a:	d1d6      	bne.n	80045da <HAL_PCD_IRQHandler+0x514>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004632:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004634:	6822      	ldr	r2, [r4, #0]
 8004636:	6953      	ldr	r3, [r2, #20]
 8004638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800463c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800463e:	6820      	ldr	r0, [r4, #0]
 8004640:	f001 feaa 	bl	8006398 <USB_ReadInterrupts>
 8004644:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8004648:	d110      	bne.n	800466c <HAL_PCD_IRQHandler+0x5a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800464a:	6820      	ldr	r0, [r4, #0]
 800464c:	f001 fea4 	bl	8006398 <USB_ReadInterrupts>
 8004650:	f010 0f04 	tst.w	r0, #4
 8004654:	f43f ad40 	beq.w	80040d8 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800465c:	f015 0f04 	tst.w	r5, #4
 8004660:	d10d      	bne.n	800467e <HAL_PCD_IRQHandler+0x5b8>
      hpcd->Instance->GOTGINT |= RegVal;
 8004662:	6822      	ldr	r2, [r4, #0]
 8004664:	6853      	ldr	r3, [r2, #4]
 8004666:	432b      	orrs	r3, r5
 8004668:	6053      	str	r3, [r2, #4]
 800466a:	e535      	b.n	80040d8 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 800466c:	4620      	mov	r0, r4
 800466e:	f003 ff03 	bl	8008478 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004672:	6822      	ldr	r2, [r4, #0]
 8004674:	6953      	ldr	r3, [r2, #20]
 8004676:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800467a:	6153      	str	r3, [r2, #20]
 800467c:	e7e5      	b.n	800464a <HAL_PCD_IRQHandler+0x584>
        HAL_PCD_DisconnectCallback(hpcd);
 800467e:	4620      	mov	r0, r4
 8004680:	f003 ff00 	bl	8008484 <HAL_PCD_DisconnectCallback>
 8004684:	e7ed      	b.n	8004662 <HAL_PCD_IRQHandler+0x59c>

08004686 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004686:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004688:	6804      	ldr	r4, [r0, #0]
 800468a:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 800468c:	b931      	cbnz	r1, 800469c <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800468e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8004692:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8004694:	2000      	movs	r0, #0
 8004696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800469e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80046a0:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80046a4:	2300      	movs	r3, #0
 80046a6:	e008      	b.n	80046ba <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80046a8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80046ac:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80046b0:	6849      	ldr	r1, [r1, #4]
 80046b2:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80046b6:	3301      	adds	r3, #1
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f10c 31ff 	add.w	r1, ip, #4294967295
 80046be:	428b      	cmp	r3, r1
 80046c0:	d3f2      	bcc.n	80046a8 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80046c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80046c6:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 80046ca:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80046ce:	6060      	str	r0, [r4, #4]
 80046d0:	e7e0      	b.n	8004694 <HAL_PCDEx_SetTxFiFo+0xe>

080046d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80046d2:	6803      	ldr	r3, [r0, #0]
 80046d4:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 80046d6:	2000      	movs	r0, #0
 80046d8:	4770      	bx	lr

080046da <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046da:	4770      	bx	lr

080046dc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046dc:	2800      	cmp	r0, #0
 80046de:	f000 81e0 	beq.w	8004aa2 <HAL_RCC_OscConfig+0x3c6>
{
 80046e2:	b570      	push	{r4, r5, r6, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e8:	6803      	ldr	r3, [r0, #0]
 80046ea:	f013 0f01 	tst.w	r3, #1
 80046ee:	d03b      	beq.n	8004768 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046f0:	4b9f      	ldr	r3, [pc, #636]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d02c      	beq.n	8004756 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046fc:	4b9c      	ldr	r3, [pc, #624]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004704:	2b08      	cmp	r3, #8
 8004706:	d021      	beq.n	800474c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004708:	6863      	ldr	r3, [r4, #4]
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800470e:	d04f      	beq.n	80047b0 <HAL_RCC_OscConfig+0xd4>
 8004710:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004714:	d052      	beq.n	80047bc <HAL_RCC_OscConfig+0xe0>
 8004716:	4b96      	ldr	r3, [pc, #600]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004726:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004728:	6863      	ldr	r3, [r4, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d050      	beq.n	80047d0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472e:	f7fe fb4b 	bl	8002dc8 <HAL_GetTick>
 8004732:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004734:	4b8e      	ldr	r3, [pc, #568]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800473c:	d114      	bne.n	8004768 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800473e:	f7fe fb43 	bl	8002dc8 <HAL_GetTick>
 8004742:	1b40      	subs	r0, r0, r5
 8004744:	2864      	cmp	r0, #100	@ 0x64
 8004746:	d9f5      	bls.n	8004734 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8004748:	2003      	movs	r0, #3
 800474a:	e1b1      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800474c:	4b88      	ldr	r3, [pc, #544]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8004754:	d0d8      	beq.n	8004708 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004756:	4b86      	ldr	r3, [pc, #536]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800475e:	d003      	beq.n	8004768 <HAL_RCC_OscConfig+0x8c>
 8004760:	6863      	ldr	r3, [r4, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 819f 	beq.w	8004aa6 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	f013 0f02 	tst.w	r3, #2
 800476e:	d054      	beq.n	800481a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004770:	4b7f      	ldr	r3, [pc, #508]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f013 0f0c 	tst.w	r3, #12
 8004778:	d03e      	beq.n	80047f8 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477a:	4b7d      	ldr	r3, [pc, #500]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004782:	2b08      	cmp	r3, #8
 8004784:	d033      	beq.n	80047ee <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004786:	68e3      	ldr	r3, [r4, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d068      	beq.n	800485e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800478c:	4b79      	ldr	r3, [pc, #484]	@ (8004974 <HAL_RCC_OscConfig+0x298>)
 800478e:	2201      	movs	r2, #1
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fe fb19 	bl	8002dc8 <HAL_GetTick>
 8004796:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004798:	4b75      	ldr	r3, [pc, #468]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f013 0f02 	tst.w	r3, #2
 80047a0:	d154      	bne.n	800484c <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a2:	f7fe fb11 	bl	8002dc8 <HAL_GetTick>
 80047a6:	1b40      	subs	r0, r0, r5
 80047a8:	2802      	cmp	r0, #2
 80047aa:	d9f5      	bls.n	8004798 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80047ac:	2003      	movs	r0, #3
 80047ae:	e17f      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b0:	4a6f      	ldr	r2, [pc, #444]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 80047b2:	6813      	ldr	r3, [r2, #0]
 80047b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	e7b5      	b.n	8004728 <HAL_RCC_OscConfig+0x4c>
 80047bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	e7ab      	b.n	8004728 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80047d0:	f7fe fafa 	bl	8002dc8 <HAL_GetTick>
 80047d4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	4b66      	ldr	r3, [pc, #408]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80047de:	d0c3      	beq.n	8004768 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e0:	f7fe faf2 	bl	8002dc8 <HAL_GetTick>
 80047e4:	1b40      	subs	r0, r0, r5
 80047e6:	2864      	cmp	r0, #100	@ 0x64
 80047e8:	d9f5      	bls.n	80047d6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80047ea:	2003      	movs	r0, #3
 80047ec:	e160      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ee:	4b60      	ldr	r3, [pc, #384]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80047f6:	d1c6      	bne.n	8004786 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f8:	4b5d      	ldr	r3, [pc, #372]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f013 0f02 	tst.w	r3, #2
 8004800:	d003      	beq.n	800480a <HAL_RCC_OscConfig+0x12e>
 8004802:	68e3      	ldr	r3, [r4, #12]
 8004804:	2b01      	cmp	r3, #1
 8004806:	f040 8150 	bne.w	8004aaa <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480a:	4a59      	ldr	r2, [pc, #356]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 800480c:	6813      	ldr	r3, [r2, #0]
 800480e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004812:	6921      	ldr	r1, [r4, #16]
 8004814:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004818:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	f013 0f08 	tst.w	r3, #8
 8004820:	d042      	beq.n	80048a8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004822:	6963      	ldr	r3, [r4, #20]
 8004824:	b36b      	cbz	r3, 8004882 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004826:	4b53      	ldr	r3, [pc, #332]	@ (8004974 <HAL_RCC_OscConfig+0x298>)
 8004828:	2201      	movs	r2, #1
 800482a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482e:	f7fe facb 	bl	8002dc8 <HAL_GetTick>
 8004832:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004834:	4b4e      	ldr	r3, [pc, #312]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 8004836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004838:	f013 0f02 	tst.w	r3, #2
 800483c:	d134      	bne.n	80048a8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800483e:	f7fe fac3 	bl	8002dc8 <HAL_GetTick>
 8004842:	1b40      	subs	r0, r0, r5
 8004844:	2802      	cmp	r0, #2
 8004846:	d9f5      	bls.n	8004834 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8004848:	2003      	movs	r0, #3
 800484a:	e131      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484c:	4a48      	ldr	r2, [pc, #288]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 800484e:	6813      	ldr	r3, [r2, #0]
 8004850:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004854:	6921      	ldr	r1, [r4, #16]
 8004856:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	e7dd      	b.n	800481a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800485e:	4b45      	ldr	r3, [pc, #276]	@ (8004974 <HAL_RCC_OscConfig+0x298>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004864:	f7fe fab0 	bl	8002dc8 <HAL_GetTick>
 8004868:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486a:	4b41      	ldr	r3, [pc, #260]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f013 0f02 	tst.w	r3, #2
 8004872:	d0d2      	beq.n	800481a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004874:	f7fe faa8 	bl	8002dc8 <HAL_GetTick>
 8004878:	1b40      	subs	r0, r0, r5
 800487a:	2802      	cmp	r0, #2
 800487c:	d9f5      	bls.n	800486a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800487e:	2003      	movs	r0, #3
 8004880:	e116      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004882:	4b3c      	ldr	r3, [pc, #240]	@ (8004974 <HAL_RCC_OscConfig+0x298>)
 8004884:	2200      	movs	r2, #0
 8004886:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488a:	f7fe fa9d 	bl	8002dc8 <HAL_GetTick>
 800488e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004890:	4b37      	ldr	r3, [pc, #220]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 8004892:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004894:	f013 0f02 	tst.w	r3, #2
 8004898:	d006      	beq.n	80048a8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800489a:	f7fe fa95 	bl	8002dc8 <HAL_GetTick>
 800489e:	1b40      	subs	r0, r0, r5
 80048a0:	2802      	cmp	r0, #2
 80048a2:	d9f5      	bls.n	8004890 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80048a4:	2003      	movs	r0, #3
 80048a6:	e103      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	f013 0f04 	tst.w	r3, #4
 80048ae:	d077      	beq.n	80049a0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 80048b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80048b8:	d133      	bne.n	8004922 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	4b2c      	ldr	r3, [pc, #176]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 80048c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048c2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80048c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80048d2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d4:	4b28      	ldr	r3, [pc, #160]	@ (8004978 <HAL_RCC_OscConfig+0x29c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80048dc:	d023      	beq.n	8004926 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048de:	68a3      	ldr	r3, [r4, #8]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d034      	beq.n	800494e <HAL_RCC_OscConfig+0x272>
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d038      	beq.n	800495a <HAL_RCC_OscConfig+0x27e>
 80048e8:	4b21      	ldr	r3, [pc, #132]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 80048ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80048ec:	f022 0201 	bic.w	r2, r2, #1
 80048f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80048f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80048f4:	f022 0204 	bic.w	r2, r2, #4
 80048f8:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048fa:	68a3      	ldr	r3, [r4, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d03d      	beq.n	800497c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004900:	f7fe fa62 	bl	8002dc8 <HAL_GetTick>
 8004904:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004906:	4b1a      	ldr	r3, [pc, #104]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 8004908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490a:	f013 0f02 	tst.w	r3, #2
 800490e:	d146      	bne.n	800499e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004910:	f7fe fa5a 	bl	8002dc8 <HAL_GetTick>
 8004914:	1b80      	subs	r0, r0, r6
 8004916:	f241 3388 	movw	r3, #5000	@ 0x1388
 800491a:	4298      	cmp	r0, r3
 800491c:	d9f3      	bls.n	8004906 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800491e:	2003      	movs	r0, #3
 8004920:	e0c6      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8004922:	2500      	movs	r5, #0
 8004924:	e7d6      	b.n	80048d4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004926:	4a14      	ldr	r2, [pc, #80]	@ (8004978 <HAL_RCC_OscConfig+0x29c>)
 8004928:	6813      	ldr	r3, [r2, #0]
 800492a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800492e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004930:	f7fe fa4a 	bl	8002dc8 <HAL_GetTick>
 8004934:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004936:	4b10      	ldr	r3, [pc, #64]	@ (8004978 <HAL_RCC_OscConfig+0x29c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800493e:	d1ce      	bne.n	80048de <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004940:	f7fe fa42 	bl	8002dc8 <HAL_GetTick>
 8004944:	1b80      	subs	r0, r0, r6
 8004946:	2802      	cmp	r0, #2
 8004948:	d9f5      	bls.n	8004936 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800494a:	2003      	movs	r0, #3
 800494c:	e0b0      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800494e:	4a08      	ldr	r2, [pc, #32]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 8004950:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6713      	str	r3, [r2, #112]	@ 0x70
 8004958:	e7cf      	b.n	80048fa <HAL_RCC_OscConfig+0x21e>
 800495a:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <HAL_RCC_OscConfig+0x294>)
 800495c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800495e:	f042 0204 	orr.w	r2, r2, #4
 8004962:	671a      	str	r2, [r3, #112]	@ 0x70
 8004964:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	671a      	str	r2, [r3, #112]	@ 0x70
 800496c:	e7c5      	b.n	80048fa <HAL_RCC_OscConfig+0x21e>
 800496e:	bf00      	nop
 8004970:	40023800 	.word	0x40023800
 8004974:	42470000 	.word	0x42470000
 8004978:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497c:	f7fe fa24 	bl	8002dc8 <HAL_GetTick>
 8004980:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004982:	4b52      	ldr	r3, [pc, #328]	@ (8004acc <HAL_RCC_OscConfig+0x3f0>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004986:	f013 0f02 	tst.w	r3, #2
 800498a:	d008      	beq.n	800499e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498c:	f7fe fa1c 	bl	8002dc8 <HAL_GetTick>
 8004990:	1b80      	subs	r0, r0, r6
 8004992:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004996:	4298      	cmp	r0, r3
 8004998:	d9f3      	bls.n	8004982 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800499a:	2003      	movs	r0, #3
 800499c:	e088      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800499e:	b9ed      	cbnz	r5, 80049dc <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a0:	69a3      	ldr	r3, [r4, #24]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 8083 	beq.w	8004aae <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049a8:	4a48      	ldr	r2, [pc, #288]	@ (8004acc <HAL_RCC_OscConfig+0x3f0>)
 80049aa:	6892      	ldr	r2, [r2, #8]
 80049ac:	f002 020c 	and.w	r2, r2, #12
 80049b0:	2a08      	cmp	r2, #8
 80049b2:	d051      	beq.n	8004a58 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d017      	beq.n	80049e8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b8:	4b45      	ldr	r3, [pc, #276]	@ (8004ad0 <HAL_RCC_OscConfig+0x3f4>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049be:	f7fe fa03 	bl	8002dc8 <HAL_GetTick>
 80049c2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c4:	4b41      	ldr	r3, [pc, #260]	@ (8004acc <HAL_RCC_OscConfig+0x3f0>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80049cc:	d042      	beq.n	8004a54 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ce:	f7fe f9fb 	bl	8002dc8 <HAL_GetTick>
 80049d2:	1b00      	subs	r0, r0, r4
 80049d4:	2802      	cmp	r0, #2
 80049d6:	d9f5      	bls.n	80049c4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80049d8:	2003      	movs	r0, #3
 80049da:	e069      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80049dc:	4a3b      	ldr	r2, [pc, #236]	@ (8004acc <HAL_RCC_OscConfig+0x3f0>)
 80049de:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80049e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80049e6:	e7db      	b.n	80049a0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80049e8:	4b39      	ldr	r3, [pc, #228]	@ (8004ad0 <HAL_RCC_OscConfig+0x3f4>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80049ee:	f7fe f9eb 	bl	8002dc8 <HAL_GetTick>
 80049f2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f4:	4b35      	ldr	r3, [pc, #212]	@ (8004acc <HAL_RCC_OscConfig+0x3f0>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80049fc:	d006      	beq.n	8004a0c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049fe:	f7fe f9e3 	bl	8002dc8 <HAL_GetTick>
 8004a02:	1b40      	subs	r0, r0, r5
 8004a04:	2802      	cmp	r0, #2
 8004a06:	d9f5      	bls.n	80049f4 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8004a08:	2003      	movs	r0, #3
 8004a0a:	e051      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a0c:	69e3      	ldr	r3, [r4, #28]
 8004a0e:	6a22      	ldr	r2, [r4, #32]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004a14:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004a18:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004a1a:	0852      	lsrs	r2, r2, #1
 8004a1c:	3a01      	subs	r2, #1
 8004a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a22:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004a24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004a28:	4a28      	ldr	r2, [pc, #160]	@ (8004acc <HAL_RCC_OscConfig+0x3f0>)
 8004a2a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004a2c:	4b28      	ldr	r3, [pc, #160]	@ (8004ad0 <HAL_RCC_OscConfig+0x3f4>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004a32:	f7fe f9c9 	bl	8002dc8 <HAL_GetTick>
 8004a36:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a38:	4b24      	ldr	r3, [pc, #144]	@ (8004acc <HAL_RCC_OscConfig+0x3f0>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004a40:	d106      	bne.n	8004a50 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a42:	f7fe f9c1 	bl	8002dc8 <HAL_GetTick>
 8004a46:	1b00      	subs	r0, r0, r4
 8004a48:	2802      	cmp	r0, #2
 8004a4a:	d9f5      	bls.n	8004a38 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8004a4c:	2003      	movs	r0, #3
 8004a4e:	e02f      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004a50:	2000      	movs	r0, #0
 8004a52:	e02d      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
 8004a54:	2000      	movs	r0, #0
 8004a56:	e02b      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d02b      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004acc <HAL_RCC_OscConfig+0x3f0>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a60:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8004a64:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a66:	4291      	cmp	r1, r2
 8004a68:	d126      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a6e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a70:	428a      	cmp	r2, r1
 8004a72:	d123      	bne.n	8004abc <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a74:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a76:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8004a7a:	401a      	ands	r2, r3
 8004a7c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004a80:	d11e      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a82:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8004a86:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004a88:	0852      	lsrs	r2, r2, #1
 8004a8a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a8c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004a90:	d118      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a92:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8004a96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a98:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8004a9c:	d114      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	e006      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8004aa2:	2001      	movs	r0, #1
}
 8004aa4:	4770      	bx	lr
        return HAL_ERROR;
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	e002      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8004aaa:	2001      	movs	r0, #1
 8004aac:	e000      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8004aae:	2000      	movs	r0, #0
}
 8004ab0:	b002      	add	sp, #8
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004ab4:	2001      	movs	r0, #1
 8004ab6:	e7fb      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8004ab8:	2001      	movs	r0, #1
 8004aba:	e7f9      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
 8004abc:	2001      	movs	r0, #1
 8004abe:	e7f7      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	e7f5      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
 8004ac4:	2001      	movs	r0, #1
 8004ac6:	e7f3      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
 8004ac8:	2001      	movs	r0, #1
 8004aca:	e7f1      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3d4>
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	42470000 	.word	0x42470000

08004ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad4:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ad6:	4b26      	ldr	r3, [pc, #152]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d041      	beq.n	8004b66 <HAL_RCC_GetSysClockFreq+0x92>
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d141      	bne.n	8004b6a <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ae6:	4b22      	ldr	r3, [pc, #136]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8004af4:	d012      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004af8:	6859      	ldr	r1, [r3, #4]
 8004afa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004afe:	481d      	ldr	r0, [pc, #116]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b00:	2300      	movs	r3, #0
 8004b02:	fba1 0100 	umull	r0, r1, r1, r0
 8004b06:	f7fb ff91 	bl	8000a2c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b0a:	4b19      	ldr	r3, [pc, #100]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004b12:	3301      	adds	r3, #1
 8004b14:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8004b16:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004b1a:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b1c:	4b14      	ldr	r3, [pc, #80]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b1e:	6858      	ldr	r0, [r3, #4]
 8004b20:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8004b24:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8004b28:	ebbc 0c00 	subs.w	ip, ip, r0
 8004b2c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8004b30:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8004b34:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8004b38:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8004b3c:	ebb1 010c 	subs.w	r1, r1, ip
 8004b40:	eb63 030e 	sbc.w	r3, r3, lr
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b4a:	00c9      	lsls	r1, r1, #3
 8004b4c:	eb11 0c00 	adds.w	ip, r1, r0
 8004b50:	f143 0300 	adc.w	r3, r3, #0
 8004b54:	0299      	lsls	r1, r3, #10
 8004b56:	2300      	movs	r3, #0
 8004b58:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8004b5c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8004b60:	f7fb ff64 	bl	8000a2c <__aeabi_uldivmod>
 8004b64:	e7d1      	b.n	8004b0a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8004b66:	4803      	ldr	r0, [pc, #12]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b68:	e7d7      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b6a:	4803      	ldr	r0, [pc, #12]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8004b6c:	e7d5      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0x46>
 8004b6e:	bf00      	nop
 8004b70:	40023800 	.word	0x40023800
 8004b74:	017d7840 	.word	0x017d7840
 8004b78:	00f42400 	.word	0x00f42400

08004b7c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	f000 809b 	beq.w	8004cb8 <HAL_RCC_ClockConfig+0x13c>
{
 8004b82:	b570      	push	{r4, r5, r6, lr}
 8004b84:	460d      	mov	r5, r1
 8004b86:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b88:	4b4f      	ldr	r3, [pc, #316]	@ (8004cc8 <HAL_RCC_ClockConfig+0x14c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	428b      	cmp	r3, r1
 8004b92:	d208      	bcs.n	8004ba6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b94:	b2cb      	uxtb	r3, r1
 8004b96:	4a4c      	ldr	r2, [pc, #304]	@ (8004cc8 <HAL_RCC_ClockConfig+0x14c>)
 8004b98:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9a:	6813      	ldr	r3, [r2, #0]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	f040 808b 	bne.w	8004cbc <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	f013 0f02 	tst.w	r3, #2
 8004bac:	d017      	beq.n	8004bde <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bae:	f013 0f04 	tst.w	r3, #4
 8004bb2:	d004      	beq.n	8004bbe <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bb4:	4a45      	ldr	r2, [pc, #276]	@ (8004ccc <HAL_RCC_ClockConfig+0x150>)
 8004bb6:	6893      	ldr	r3, [r2, #8]
 8004bb8:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bbc:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	f013 0f08 	tst.w	r3, #8
 8004bc4:	d004      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bc6:	4a41      	ldr	r2, [pc, #260]	@ (8004ccc <HAL_RCC_ClockConfig+0x150>)
 8004bc8:	6893      	ldr	r3, [r2, #8]
 8004bca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bce:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd0:	4a3e      	ldr	r2, [pc, #248]	@ (8004ccc <HAL_RCC_ClockConfig+0x150>)
 8004bd2:	6893      	ldr	r3, [r2, #8]
 8004bd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bd8:	68a1      	ldr	r1, [r4, #8]
 8004bda:	430b      	orrs	r3, r1
 8004bdc:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	f013 0f01 	tst.w	r3, #1
 8004be4:	d032      	beq.n	8004c4c <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be6:	6863      	ldr	r3, [r4, #4]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d021      	beq.n	8004c30 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bec:	1e9a      	subs	r2, r3, #2
 8004bee:	2a01      	cmp	r2, #1
 8004bf0:	d925      	bls.n	8004c3e <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf2:	4a36      	ldr	r2, [pc, #216]	@ (8004ccc <HAL_RCC_ClockConfig+0x150>)
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	f012 0f02 	tst.w	r2, #2
 8004bfa:	d061      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bfc:	4933      	ldr	r1, [pc, #204]	@ (8004ccc <HAL_RCC_ClockConfig+0x150>)
 8004bfe:	688a      	ldr	r2, [r1, #8]
 8004c00:	f022 0203 	bic.w	r2, r2, #3
 8004c04:	4313      	orrs	r3, r2
 8004c06:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004c08:	f7fe f8de 	bl	8002dc8 <HAL_GetTick>
 8004c0c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004ccc <HAL_RCC_ClockConfig+0x150>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	6862      	ldr	r2, [r4, #4]
 8004c18:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004c1c:	d016      	beq.n	8004c4c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c1e:	f7fe f8d3 	bl	8002dc8 <HAL_GetTick>
 8004c22:	1b80      	subs	r0, r0, r6
 8004c24:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004c28:	4298      	cmp	r0, r3
 8004c2a:	d9f0      	bls.n	8004c0e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8004c2c:	2003      	movs	r0, #3
 8004c2e:	e042      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c30:	4a26      	ldr	r2, [pc, #152]	@ (8004ccc <HAL_RCC_ClockConfig+0x150>)
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8004c38:	d1e0      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8004c3a:	2001      	movs	r0, #1
 8004c3c:	e03b      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3e:	4a23      	ldr	r2, [pc, #140]	@ (8004ccc <HAL_RCC_ClockConfig+0x150>)
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8004c46:	d1d9      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8004c48:	2001      	movs	r0, #1
 8004c4a:	e034      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc8 <HAL_RCC_ClockConfig+0x14c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	42ab      	cmp	r3, r5
 8004c56:	d907      	bls.n	8004c68 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c58:	b2ea      	uxtb	r2, r5
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc8 <HAL_RCC_ClockConfig+0x14c>)
 8004c5c:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	42ab      	cmp	r3, r5
 8004c66:	d12d      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	f013 0f04 	tst.w	r3, #4
 8004c6e:	d006      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c70:	4a16      	ldr	r2, [pc, #88]	@ (8004ccc <HAL_RCC_ClockConfig+0x150>)
 8004c72:	6893      	ldr	r3, [r2, #8]
 8004c74:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8004c78:	68e1      	ldr	r1, [r4, #12]
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	f013 0f08 	tst.w	r3, #8
 8004c84:	d007      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c86:	4a11      	ldr	r2, [pc, #68]	@ (8004ccc <HAL_RCC_ClockConfig+0x150>)
 8004c88:	6893      	ldr	r3, [r2, #8]
 8004c8a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004c8e:	6921      	ldr	r1, [r4, #16]
 8004c90:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004c94:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c96:	f7ff ff1d 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
 8004c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004ccc <HAL_RCC_ClockConfig+0x150>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8004cd0 <HAL_RCC_ClockConfig+0x154>)
 8004ca4:	5cd3      	ldrb	r3, [r2, r3]
 8004ca6:	40d8      	lsrs	r0, r3
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd4 <HAL_RCC_ClockConfig+0x158>)
 8004caa:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004cac:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd8 <HAL_RCC_ClockConfig+0x15c>)
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	f000 fdde 	bl	8005870 <HAL_InitTick>
  return HAL_OK;
 8004cb4:	2000      	movs	r0, #0
}
 8004cb6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004cb8:	2001      	movs	r0, #1
}
 8004cba:	4770      	bx	lr
      return HAL_ERROR;
 8004cbc:	2001      	movs	r0, #1
 8004cbe:	e7fa      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8004cc0:	2001      	movs	r0, #1
 8004cc2:	e7f8      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	e7f6      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x13a>
 8004cc8:	40023c00 	.word	0x40023c00
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	0800a274 	.word	0x0800a274
 8004cd4:	20000054 	.word	0x20000054
 8004cd8:	20000050 	.word	0x20000050

08004cdc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004cdc:	4b01      	ldr	r3, [pc, #4]	@ (8004ce4 <HAL_RCC_GetHCLKFreq+0x8>)
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20000054 	.word	0x20000054

08004ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ce8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cea:	f7ff fff7 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004cee:	4b04      	ldr	r3, [pc, #16]	@ (8004d00 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004cf6:	4a03      	ldr	r2, [pc, #12]	@ (8004d04 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004cf8:	5cd3      	ldrb	r3, [r2, r3]
}
 8004cfa:	40d8      	lsrs	r0, r3
 8004cfc:	bd08      	pop	{r3, pc}
 8004cfe:	bf00      	nop
 8004d00:	40023800 	.word	0x40023800
 8004d04:	0800a26c 	.word	0x0800a26c

08004d08 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d08:	230f      	movs	r3, #15
 8004d0a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <HAL_RCC_GetClockConfig+0x34>)
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	f002 0203 	and.w	r2, r2, #3
 8004d14:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8004d1c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8004d24:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	08db      	lsrs	r3, r3, #3
 8004d2a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004d2e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d30:	4b03      	ldr	r3, [pc, #12]	@ (8004d40 <HAL_RCC_GetClockConfig+0x38>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	600b      	str	r3, [r1, #0]
}
 8004d3a:	4770      	bx	lr
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	40023c00 	.word	0x40023c00

08004d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d44:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d46:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d48:	6a03      	ldr	r3, [r0, #32]
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d50:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d52:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d54:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d58:	680c      	ldr	r4, [r1, #0]
 8004d5a:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d5c:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d60:	688b      	ldr	r3, [r1, #8]
 8004d62:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d64:	4a0b      	ldr	r2, [pc, #44]	@ (8004d94 <TIM_OC1_SetConfig+0x50>)
 8004d66:	4290      	cmp	r0, r2
 8004d68:	d006      	beq.n	8004d78 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6a:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d6c:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d6e:	684a      	ldr	r2, [r1, #4]
 8004d70:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d72:	6203      	str	r3, [r0, #32]
}
 8004d74:	bc30      	pop	{r4, r5}
 8004d76:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d78:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004d7c:	68ca      	ldr	r2, [r1, #12]
 8004d7e:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d80:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d84:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8004d88:	694a      	ldr	r2, [r1, #20]
 8004d8a:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d8c:	698d      	ldr	r5, [r1, #24]
 8004d8e:	4315      	orrs	r5, r2
 8004d90:	e7eb      	b.n	8004d6a <TIM_OC1_SetConfig+0x26>
 8004d92:	bf00      	nop
 8004d94:	40010000 	.word	0x40010000

08004d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d98:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d9c:	6a02      	ldr	r2, [r0, #32]
 8004d9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004da2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004da6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004da8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dac:	680d      	ldr	r5, [r1, #0]
 8004dae:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004db0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004db4:	688a      	ldr	r2, [r1, #8]
 8004db6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dba:	4a0d      	ldr	r2, [pc, #52]	@ (8004df0 <TIM_OC3_SetConfig+0x58>)
 8004dbc:	4290      	cmp	r0, r2
 8004dbe:	d006      	beq.n	8004dce <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc2:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dc4:	684a      	ldr	r2, [r1, #4]
 8004dc6:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc8:	6203      	str	r3, [r0, #32]
}
 8004dca:	bc30      	pop	{r4, r5}
 8004dcc:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dd2:	68ca      	ldr	r2, [r1, #12]
 8004dd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ddc:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004de0:	694a      	ldr	r2, [r1, #20]
 8004de2:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004de6:	698a      	ldr	r2, [r1, #24]
 8004de8:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8004dec:	e7e8      	b.n	8004dc0 <TIM_OC3_SetConfig+0x28>
 8004dee:	bf00      	nop
 8004df0:	40010000 	.word	0x40010000

08004df4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004df8:	6a02      	ldr	r2, [r0, #32]
 8004dfa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004dfe:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e00:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e02:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e04:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e08:	680d      	ldr	r5, [r1, #0]
 8004e0a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e12:	688d      	ldr	r5, [r1, #8]
 8004e14:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e18:	4d07      	ldr	r5, [pc, #28]	@ (8004e38 <TIM_OC4_SetConfig+0x44>)
 8004e1a:	42a8      	cmp	r0, r5
 8004e1c:	d006      	beq.n	8004e2c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e20:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e22:	684a      	ldr	r2, [r1, #4]
 8004e24:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e26:	6203      	str	r3, [r0, #32]
}
 8004e28:	bc30      	pop	{r4, r5}
 8004e2a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e2c:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e30:	694d      	ldr	r5, [r1, #20]
 8004e32:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004e36:	e7f2      	b.n	8004e1e <TIM_OC4_SetConfig+0x2a>
 8004e38:	40010000 	.word	0x40010000

08004e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e3c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e3e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e40:	6a04      	ldr	r4, [r0, #32]
 8004e42:	f024 0401 	bic.w	r4, r4, #1
 8004e46:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e48:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e4a:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e4e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e52:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004e56:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e58:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004e5a:	6203      	str	r3, [r0, #32]
}
 8004e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e62:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e64:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e66:	6a04      	ldr	r4, [r0, #32]
 8004e68:	f024 0410 	bic.w	r4, r4, #16
 8004e6c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e6e:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e70:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e74:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e78:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e7c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e80:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004e82:	6203      	str	r3, [r0, #32]
}
 8004e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e8a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e90:	430b      	orrs	r3, r1
 8004e92:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e96:	6083      	str	r3, [r0, #8]
}
 8004e98:	4770      	bx	lr
	...

08004e9c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004e9c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d12a      	bne.n	8004efa <HAL_TIM_Base_Start+0x5e>
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eaa:	6803      	ldr	r3, [r0, #0]
 8004eac:	4a15      	ldr	r2, [pc, #84]	@ (8004f04 <HAL_TIM_Base_Start+0x68>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d018      	beq.n	8004ee4 <HAL_TIM_Base_Start+0x48>
 8004eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb6:	d015      	beq.n	8004ee4 <HAL_TIM_Base_Start+0x48>
 8004eb8:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d011      	beq.n	8004ee4 <HAL_TIM_Base_Start+0x48>
 8004ec0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00d      	beq.n	8004ee4 <HAL_TIM_Base_Start+0x48>
 8004ec8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d009      	beq.n	8004ee4 <HAL_TIM_Base_Start+0x48>
 8004ed0:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d005      	beq.n	8004ee4 <HAL_TIM_Base_Start+0x48>
    __HAL_TIM_ENABLE(htim);
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eea:	2a06      	cmp	r2, #6
 8004eec:	d007      	beq.n	8004efe <HAL_TIM_Base_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	f042 0201 	orr.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	4770      	bx	lr
    return HAL_ERROR;
 8004efa:	2001      	movs	r0, #1
 8004efc:	4770      	bx	lr
  return HAL_OK;
 8004efe:	2000      	movs	r0, #0
}
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40010000 	.word	0x40010000

08004f08 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004f08:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d12f      	bne.n	8004f70 <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	2302      	movs	r3, #2
 8004f12:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f16:	6802      	ldr	r2, [r0, #0]
 8004f18:	68d3      	ldr	r3, [r2, #12]
 8004f1a:	f043 0301 	orr.w	r3, r3, #1
 8004f1e:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f20:	6803      	ldr	r3, [r0, #0]
 8004f22:	4a15      	ldr	r2, [pc, #84]	@ (8004f78 <HAL_TIM_Base_Start_IT+0x70>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d018      	beq.n	8004f5a <HAL_TIM_Base_Start_IT+0x52>
 8004f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f2c:	d015      	beq.n	8004f5a <HAL_TIM_Base_Start_IT+0x52>
 8004f2e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d011      	beq.n	8004f5a <HAL_TIM_Base_Start_IT+0x52>
 8004f36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00d      	beq.n	8004f5a <HAL_TIM_Base_Start_IT+0x52>
 8004f3e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d009      	beq.n	8004f5a <HAL_TIM_Base_Start_IT+0x52>
 8004f46:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d005      	beq.n	8004f5a <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004f56:	2000      	movs	r0, #0
 8004f58:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f60:	2a06      	cmp	r2, #6
 8004f62:	d007      	beq.n	8004f74 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	4770      	bx	lr
    return HAL_ERROR;
 8004f70:	2001      	movs	r0, #1
 8004f72:	4770      	bx	lr
  return HAL_OK;
 8004f74:	2000      	movs	r0, #0
}
 8004f76:	4770      	bx	lr
 8004f78:	40010000 	.word	0x40010000

08004f7c <HAL_TIM_OC_MspInit>:
}
 8004f7c:	4770      	bx	lr

08004f7e <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_IC_CaptureCallback>:
}
 8004f80:	4770      	bx	lr

08004f82 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004f82:	4770      	bx	lr

08004f84 <HAL_TIM_TriggerCallback>:
}
 8004f84:	4770      	bx	lr

08004f86 <HAL_TIM_IRQHandler>:
{
 8004f86:	b570      	push	{r4, r5, r6, lr}
 8004f88:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8004f8a:	6803      	ldr	r3, [r0, #0]
 8004f8c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f8e:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f90:	f015 0f02 	tst.w	r5, #2
 8004f94:	d010      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f96:	f016 0f02 	tst.w	r6, #2
 8004f9a:	d00d      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f9c:	f06f 0202 	mvn.w	r2, #2
 8004fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fa6:	6803      	ldr	r3, [r0, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f013 0f03 	tst.w	r3, #3
 8004fae:	d05e      	beq.n	800506e <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8004fb0:	f7ff ffe6 	bl	8004f80 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fb8:	f015 0f04 	tst.w	r5, #4
 8004fbc:	d012      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fbe:	f016 0f04 	tst.w	r6, #4
 8004fc2:	d00f      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	f06f 0204 	mvn.w	r2, #4
 8004fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fcc:	2302      	movs	r3, #2
 8004fce:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004fd8:	d04f      	beq.n	800507a <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f7ff ffd0 	bl	8004f80 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fe4:	f015 0f08 	tst.w	r5, #8
 8004fe8:	d012      	beq.n	8005010 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fea:	f016 0f08 	tst.w	r6, #8
 8004fee:	d00f      	beq.n	8005010 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	f06f 0208 	mvn.w	r2, #8
 8004ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f013 0f03 	tst.w	r3, #3
 8005004:	d040      	beq.n	8005088 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8005006:	4620      	mov	r0, r4
 8005008:	f7ff ffba 	bl	8004f80 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500c:	2300      	movs	r3, #0
 800500e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005010:	f015 0f10 	tst.w	r5, #16
 8005014:	d012      	beq.n	800503c <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005016:	f016 0f10 	tst.w	r6, #16
 800501a:	d00f      	beq.n	800503c <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	f06f 0210 	mvn.w	r2, #16
 8005022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005024:	2308      	movs	r3, #8
 8005026:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005030:	d031      	beq.n	8005096 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8005032:	4620      	mov	r0, r4
 8005034:	f7ff ffa4 	bl	8004f80 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005038:	2300      	movs	r3, #0
 800503a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800503c:	f015 0f01 	tst.w	r5, #1
 8005040:	d002      	beq.n	8005048 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005042:	f016 0f01 	tst.w	r6, #1
 8005046:	d12d      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005048:	f015 0f80 	tst.w	r5, #128	@ 0x80
 800504c:	d002      	beq.n	8005054 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800504e:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8005052:	d12f      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005054:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8005058:	d002      	beq.n	8005060 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800505a:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800505e:	d131      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005060:	f015 0f20 	tst.w	r5, #32
 8005064:	d002      	beq.n	800506c <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005066:	f016 0f20 	tst.w	r6, #32
 800506a:	d133      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x14e>
}
 800506c:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	f7ff ff86 	bl	8004f7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005072:	4620      	mov	r0, r4
 8005074:	f7ff ff85 	bl	8004f82 <HAL_TIM_PWM_PulseFinishedCallback>
 8005078:	e79c      	b.n	8004fb4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800507a:	4620      	mov	r0, r4
 800507c:	f7ff ff7f 	bl	8004f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005080:	4620      	mov	r0, r4
 8005082:	f7ff ff7e 	bl	8004f82 <HAL_TIM_PWM_PulseFinishedCallback>
 8005086:	e7ab      	b.n	8004fe0 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005088:	4620      	mov	r0, r4
 800508a:	f7ff ff78 	bl	8004f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800508e:	4620      	mov	r0, r4
 8005090:	f7ff ff77 	bl	8004f82 <HAL_TIM_PWM_PulseFinishedCallback>
 8005094:	e7ba      	b.n	800500c <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005096:	4620      	mov	r0, r4
 8005098:	f7ff ff71 	bl	8004f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509c:	4620      	mov	r0, r4
 800509e:	f7ff ff70 	bl	8004f82 <HAL_TIM_PWM_PulseFinishedCallback>
 80050a2:	e7c9      	b.n	8005038 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	f06f 0201 	mvn.w	r2, #1
 80050aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ac:	4620      	mov	r0, r4
 80050ae:	f7fc ffc3 	bl	8002038 <HAL_TIM_PeriodElapsedCallback>
 80050b2:	e7c9      	b.n	8005048 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80050bc:	4620      	mov	r0, r4
 80050be:	f000 fbd5 	bl	800586c <HAL_TIMEx_BreakCallback>
 80050c2:	e7c7      	b.n	8005054 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050ca:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80050cc:	4620      	mov	r0, r4
 80050ce:	f7ff ff59 	bl	8004f84 <HAL_TIM_TriggerCallback>
 80050d2:	e7c5      	b.n	8005060 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	f06f 0220 	mvn.w	r2, #32
 80050da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80050dc:	4620      	mov	r0, r4
 80050de:	f000 fbc4 	bl	800586a <HAL_TIMEx_CommutCallback>
}
 80050e2:	e7c3      	b.n	800506c <HAL_TIM_IRQHandler+0xe6>

080050e4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80050e4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e6:	4a29      	ldr	r2, [pc, #164]	@ (800518c <TIM_Base_SetConfig+0xa8>)
 80050e8:	4290      	cmp	r0, r2
 80050ea:	d00e      	beq.n	800510a <TIM_Base_SetConfig+0x26>
 80050ec:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80050f0:	d00b      	beq.n	800510a <TIM_Base_SetConfig+0x26>
 80050f2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80050f6:	4290      	cmp	r0, r2
 80050f8:	d007      	beq.n	800510a <TIM_Base_SetConfig+0x26>
 80050fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80050fe:	4290      	cmp	r0, r2
 8005100:	d003      	beq.n	800510a <TIM_Base_SetConfig+0x26>
 8005102:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005106:	4290      	cmp	r0, r2
 8005108:	d103      	bne.n	8005112 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800510a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800510e:	684a      	ldr	r2, [r1, #4]
 8005110:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005112:	4a1e      	ldr	r2, [pc, #120]	@ (800518c <TIM_Base_SetConfig+0xa8>)
 8005114:	4290      	cmp	r0, r2
 8005116:	d01a      	beq.n	800514e <TIM_Base_SetConfig+0x6a>
 8005118:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800511c:	d017      	beq.n	800514e <TIM_Base_SetConfig+0x6a>
 800511e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8005122:	4290      	cmp	r0, r2
 8005124:	d013      	beq.n	800514e <TIM_Base_SetConfig+0x6a>
 8005126:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800512a:	4290      	cmp	r0, r2
 800512c:	d00f      	beq.n	800514e <TIM_Base_SetConfig+0x6a>
 800512e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005132:	4290      	cmp	r0, r2
 8005134:	d00b      	beq.n	800514e <TIM_Base_SetConfig+0x6a>
 8005136:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800513a:	4290      	cmp	r0, r2
 800513c:	d007      	beq.n	800514e <TIM_Base_SetConfig+0x6a>
 800513e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005142:	4290      	cmp	r0, r2
 8005144:	d003      	beq.n	800514e <TIM_Base_SetConfig+0x6a>
 8005146:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800514a:	4290      	cmp	r0, r2
 800514c:	d103      	bne.n	8005156 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800514e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005152:	68ca      	ldr	r2, [r1, #12]
 8005154:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800515a:	694a      	ldr	r2, [r1, #20]
 800515c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800515e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005160:	688b      	ldr	r3, [r1, #8]
 8005162:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005164:	680b      	ldr	r3, [r1, #0]
 8005166:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005168:	4b08      	ldr	r3, [pc, #32]	@ (800518c <TIM_Base_SetConfig+0xa8>)
 800516a:	4298      	cmp	r0, r3
 800516c:	d00a      	beq.n	8005184 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 800516e:	2301      	movs	r3, #1
 8005170:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005172:	6903      	ldr	r3, [r0, #16]
 8005174:	f013 0f01 	tst.w	r3, #1
 8005178:	d003      	beq.n	8005182 <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800517a:	6903      	ldr	r3, [r0, #16]
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	6103      	str	r3, [r0, #16]
}
 8005182:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8005184:	690b      	ldr	r3, [r1, #16]
 8005186:	6303      	str	r3, [r0, #48]	@ 0x30
 8005188:	e7f1      	b.n	800516e <TIM_Base_SetConfig+0x8a>
 800518a:	bf00      	nop
 800518c:	40010000 	.word	0x40010000

08005190 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005190:	b340      	cbz	r0, 80051e4 <HAL_TIM_Base_Init+0x54>
{
 8005192:	b510      	push	{r4, lr}
 8005194:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005196:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800519a:	b1f3      	cbz	r3, 80051da <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800519c:	2302      	movs	r3, #2
 800519e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a2:	4621      	mov	r1, r4
 80051a4:	f851 0b04 	ldr.w	r0, [r1], #4
 80051a8:	f7ff ff9c 	bl	80050e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80051b6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80051ba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80051be:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051ca:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80051ce:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80051d2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80051d6:	2000      	movs	r0, #0
}
 80051d8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80051da:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80051de:	f001 ff21 	bl	8007024 <HAL_TIM_Base_MspInit>
 80051e2:	e7db      	b.n	800519c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80051e4:	2001      	movs	r0, #1
}
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80051e8:	b340      	cbz	r0, 800523c <HAL_TIM_OC_Init+0x54>
{
 80051ea:	b510      	push	{r4, lr}
 80051ec:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80051ee:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80051f2:	b1f3      	cbz	r3, 8005232 <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80051f4:	2302      	movs	r3, #2
 80051f6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80051fa:	4621      	mov	r1, r4
 80051fc:	f851 0b04 	ldr.w	r0, [r1], #4
 8005200:	f7ff ff70 	bl	80050e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005204:	2301      	movs	r3, #1
 8005206:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800520e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005212:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005216:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800521e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005222:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005226:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800522a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800522e:	2000      	movs	r0, #0
}
 8005230:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005232:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8005236:	f7ff fea1 	bl	8004f7c <HAL_TIM_OC_MspInit>
 800523a:	e7db      	b.n	80051f4 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 800523c:	2001      	movs	r0, #1
}
 800523e:	4770      	bx	lr

08005240 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005240:	b340      	cbz	r0, 8005294 <HAL_TIM_PWM_Init+0x54>
{
 8005242:	b510      	push	{r4, lr}
 8005244:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005246:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800524a:	b1f3      	cbz	r3, 800528a <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	2302      	movs	r3, #2
 800524e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005252:	4621      	mov	r1, r4
 8005254:	f851 0b04 	ldr.w	r0, [r1], #4
 8005258:	f7ff ff44 	bl	80050e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800525c:	2301      	movs	r3, #1
 800525e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005262:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005266:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800526a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800526e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005272:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005276:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800527a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800527e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005282:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005286:	2000      	movs	r0, #0
}
 8005288:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800528a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800528e:	f001 fe95 	bl	8006fbc <HAL_TIM_PWM_MspInit>
 8005292:	e7db      	b.n	800524c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005294:	2001      	movs	r0, #1
}
 8005296:	4770      	bx	lr

08005298 <TIM_OC2_SetConfig>:
{
 8005298:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800529a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800529c:	6a02      	ldr	r2, [r0, #32]
 800529e:	f022 0210 	bic.w	r2, r2, #16
 80052a2:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80052a4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80052a6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052a8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ac:	680d      	ldr	r5, [r1, #0]
 80052ae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80052b2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052b6:	688d      	ldr	r5, [r1, #8]
 80052b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052bc:	4d0c      	ldr	r5, [pc, #48]	@ (80052f0 <TIM_OC2_SetConfig+0x58>)
 80052be:	42a8      	cmp	r0, r5
 80052c0:	d006      	beq.n	80052d0 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80052c2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80052c4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80052c6:	684a      	ldr	r2, [r1, #4]
 80052c8:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80052ca:	6203      	str	r3, [r0, #32]
}
 80052cc:	bc30      	pop	{r4, r5}
 80052ce:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80052d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052d4:	68cd      	ldr	r5, [r1, #12]
 80052d6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80052da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052de:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052e2:	694d      	ldr	r5, [r1, #20]
 80052e4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052e8:	698d      	ldr	r5, [r1, #24]
 80052ea:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80052ee:	e7e8      	b.n	80052c2 <TIM_OC2_SetConfig+0x2a>
 80052f0:	40010000 	.word	0x40010000

080052f4 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80052f4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d028      	beq.n	800534e <HAL_TIM_OC_ConfigChannel+0x5a>
{
 80052fc:	b510      	push	{r4, lr}
 80052fe:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005300:	2301      	movs	r3, #1
 8005302:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005306:	2a0c      	cmp	r2, #12
 8005308:	d81c      	bhi.n	8005344 <HAL_TIM_OC_ConfigChannel+0x50>
 800530a:	e8df f002 	tbb	[pc, r2]
 800530e:	1b07      	.short	0x1b07
 8005310:	1b0c1b1b 	.word	0x1b0c1b1b
 8005314:	1b111b1b 	.word	0x1b111b1b
 8005318:	1b1b      	.short	0x1b1b
 800531a:	16          	.byte	0x16
 800531b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800531c:	6800      	ldr	r0, [r0, #0]
 800531e:	f7ff fd11 	bl	8004d44 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005322:	2000      	movs	r0, #0
      break;
 8005324:	e00f      	b.n	8005346 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005326:	6800      	ldr	r0, [r0, #0]
 8005328:	f7ff ffb6 	bl	8005298 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800532c:	2000      	movs	r0, #0
      break;
 800532e:	e00a      	b.n	8005346 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005330:	6800      	ldr	r0, [r0, #0]
 8005332:	f7ff fd31 	bl	8004d98 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005336:	2000      	movs	r0, #0
      break;
 8005338:	e005      	b.n	8005346 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800533a:	6800      	ldr	r0, [r0, #0]
 800533c:	f7ff fd5a 	bl	8004df4 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005340:	2000      	movs	r0, #0
      break;
 8005342:	e000      	b.n	8005346 <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 8005344:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005346:	2300      	movs	r3, #0
 8005348:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800534c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800534e:	2002      	movs	r0, #2
}
 8005350:	4770      	bx	lr

08005352 <HAL_TIM_PWM_ConfigChannel>:
{
 8005352:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005354:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d066      	beq.n	800542a <HAL_TIM_PWM_ConfigChannel+0xd8>
 800535c:	4604      	mov	r4, r0
 800535e:	460d      	mov	r5, r1
 8005360:	2301      	movs	r3, #1
 8005362:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005366:	2a0c      	cmp	r2, #12
 8005368:	d85a      	bhi.n	8005420 <HAL_TIM_PWM_ConfigChannel+0xce>
 800536a:	e8df f002 	tbb	[pc, r2]
 800536e:	5907      	.short	0x5907
 8005370:	591b5959 	.word	0x591b5959
 8005374:	59305959 	.word	0x59305959
 8005378:	5959      	.short	0x5959
 800537a:	44          	.byte	0x44
 800537b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800537c:	6800      	ldr	r0, [r0, #0]
 800537e:	f7ff fce1 	bl	8004d44 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005382:	6822      	ldr	r2, [r4, #0]
 8005384:	6993      	ldr	r3, [r2, #24]
 8005386:	f043 0308 	orr.w	r3, r3, #8
 800538a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800538c:	6822      	ldr	r2, [r4, #0]
 800538e:	6993      	ldr	r3, [r2, #24]
 8005390:	f023 0304 	bic.w	r3, r3, #4
 8005394:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005396:	6822      	ldr	r2, [r4, #0]
 8005398:	6993      	ldr	r3, [r2, #24]
 800539a:	6929      	ldr	r1, [r5, #16]
 800539c:	430b      	orrs	r3, r1
 800539e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80053a0:	2000      	movs	r0, #0
      break;
 80053a2:	e03e      	b.n	8005422 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053a4:	6800      	ldr	r0, [r0, #0]
 80053a6:	f7ff ff77 	bl	8005298 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053aa:	6822      	ldr	r2, [r4, #0]
 80053ac:	6993      	ldr	r3, [r2, #24]
 80053ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80053b2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053b4:	6822      	ldr	r2, [r4, #0]
 80053b6:	6993      	ldr	r3, [r2, #24]
 80053b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053bc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053be:	6822      	ldr	r2, [r4, #0]
 80053c0:	6993      	ldr	r3, [r2, #24]
 80053c2:	6929      	ldr	r1, [r5, #16]
 80053c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80053c8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80053ca:	2000      	movs	r0, #0
      break;
 80053cc:	e029      	b.n	8005422 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053ce:	6800      	ldr	r0, [r0, #0]
 80053d0:	f7ff fce2 	bl	8004d98 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053d4:	6822      	ldr	r2, [r4, #0]
 80053d6:	69d3      	ldr	r3, [r2, #28]
 80053d8:	f043 0308 	orr.w	r3, r3, #8
 80053dc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053de:	6822      	ldr	r2, [r4, #0]
 80053e0:	69d3      	ldr	r3, [r2, #28]
 80053e2:	f023 0304 	bic.w	r3, r3, #4
 80053e6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053e8:	6822      	ldr	r2, [r4, #0]
 80053ea:	69d3      	ldr	r3, [r2, #28]
 80053ec:	6929      	ldr	r1, [r5, #16]
 80053ee:	430b      	orrs	r3, r1
 80053f0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80053f2:	2000      	movs	r0, #0
      break;
 80053f4:	e015      	b.n	8005422 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053f6:	6800      	ldr	r0, [r0, #0]
 80053f8:	f7ff fcfc 	bl	8004df4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053fc:	6822      	ldr	r2, [r4, #0]
 80053fe:	69d3      	ldr	r3, [r2, #28]
 8005400:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005404:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	69d3      	ldr	r3, [r2, #28]
 800540a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800540e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005410:	6822      	ldr	r2, [r4, #0]
 8005412:	69d3      	ldr	r3, [r2, #28]
 8005414:	6929      	ldr	r1, [r5, #16]
 8005416:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800541a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800541c:	2000      	movs	r0, #0
      break;
 800541e:	e000      	b.n	8005422 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8005420:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005422:	2300      	movs	r3, #0
 8005424:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005428:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800542a:	2002      	movs	r0, #2
 800542c:	e7fc      	b.n	8005428 <HAL_TIM_PWM_ConfigChannel+0xd6>

0800542e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800542e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005430:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005432:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005436:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800543a:	430a      	orrs	r2, r1
 800543c:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005440:	6082      	str	r2, [r0, #8]
}
 8005442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005448:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800544c:	2b01      	cmp	r3, #1
 800544e:	d078      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0xfa>
{
 8005450:	b510      	push	{r4, lr}
 8005452:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005454:	2301      	movs	r3, #1
 8005456:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800545a:	2302      	movs	r3, #2
 800545c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005460:	6802      	ldr	r2, [r0, #0]
 8005462:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005464:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005468:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800546c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800546e:	680b      	ldr	r3, [r1, #0]
 8005470:	2b60      	cmp	r3, #96	@ 0x60
 8005472:	d04c      	beq.n	800550e <HAL_TIM_ConfigClockSource+0xc6>
 8005474:	d823      	bhi.n	80054be <HAL_TIM_ConfigClockSource+0x76>
 8005476:	2b40      	cmp	r3, #64	@ 0x40
 8005478:	d054      	beq.n	8005524 <HAL_TIM_ConfigClockSource+0xdc>
 800547a:	d811      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x58>
 800547c:	2b20      	cmp	r3, #32
 800547e:	d003      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0x40>
 8005480:	d80a      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x50>
 8005482:	b10b      	cbz	r3, 8005488 <HAL_TIM_ConfigClockSource+0x40>
 8005484:	2b10      	cmp	r3, #16
 8005486:	d105      	bne.n	8005494 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005488:	4619      	mov	r1, r3
 800548a:	6820      	ldr	r0, [r4, #0]
 800548c:	f7ff fcfd 	bl	8004e8a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005490:	2000      	movs	r0, #0
      break;
 8005492:	e028      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8005494:	2001      	movs	r0, #1
 8005496:	e026      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8005498:	2b30      	cmp	r3, #48	@ 0x30
 800549a:	d0f5      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 800549c:	2001      	movs	r0, #1
 800549e:	e022      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80054a0:	2b50      	cmp	r3, #80	@ 0x50
 80054a2:	d10a      	bne.n	80054ba <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a4:	68ca      	ldr	r2, [r1, #12]
 80054a6:	6849      	ldr	r1, [r1, #4]
 80054a8:	6800      	ldr	r0, [r0, #0]
 80054aa:	f7ff fcc7 	bl	8004e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054ae:	2150      	movs	r1, #80	@ 0x50
 80054b0:	6820      	ldr	r0, [r4, #0]
 80054b2:	f7ff fcea 	bl	8004e8a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80054b6:	2000      	movs	r0, #0
      break;
 80054b8:	e015      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80054ba:	2001      	movs	r0, #1
 80054bc:	e013      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80054be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054c2:	d03a      	beq.n	800553a <HAL_TIM_ConfigClockSource+0xf2>
 80054c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054c8:	d014      	beq.n	80054f4 <HAL_TIM_ConfigClockSource+0xac>
 80054ca:	2b70      	cmp	r3, #112	@ 0x70
 80054cc:	d137      	bne.n	800553e <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80054ce:	68cb      	ldr	r3, [r1, #12]
 80054d0:	684a      	ldr	r2, [r1, #4]
 80054d2:	6889      	ldr	r1, [r1, #8]
 80054d4:	6800      	ldr	r0, [r0, #0]
 80054d6:	f7ff ffaa 	bl	800542e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054da:	6822      	ldr	r2, [r4, #0]
 80054dc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054de:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80054e2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80054e4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80054e6:	2301      	movs	r3, #1
 80054e8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80054ec:	2300      	movs	r3, #0
 80054ee:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80054f2:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80054f4:	68cb      	ldr	r3, [r1, #12]
 80054f6:	684a      	ldr	r2, [r1, #4]
 80054f8:	6889      	ldr	r1, [r1, #8]
 80054fa:	6800      	ldr	r0, [r0, #0]
 80054fc:	f7ff ff97 	bl	800542e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	6893      	ldr	r3, [r2, #8]
 8005504:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005508:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800550a:	2000      	movs	r0, #0
      break;
 800550c:	e7eb      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800550e:	68ca      	ldr	r2, [r1, #12]
 8005510:	6849      	ldr	r1, [r1, #4]
 8005512:	6800      	ldr	r0, [r0, #0]
 8005514:	f7ff fca5 	bl	8004e62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005518:	2160      	movs	r1, #96	@ 0x60
 800551a:	6820      	ldr	r0, [r4, #0]
 800551c:	f7ff fcb5 	bl	8004e8a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005520:	2000      	movs	r0, #0
      break;
 8005522:	e7e0      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005524:	68ca      	ldr	r2, [r1, #12]
 8005526:	6849      	ldr	r1, [r1, #4]
 8005528:	6800      	ldr	r0, [r0, #0]
 800552a:	f7ff fc87 	bl	8004e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800552e:	2140      	movs	r1, #64	@ 0x40
 8005530:	6820      	ldr	r0, [r4, #0]
 8005532:	f7ff fcaa 	bl	8004e8a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005536:	2000      	movs	r0, #0
      break;
 8005538:	e7d5      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800553a:	2000      	movs	r0, #0
 800553c:	e7d3      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800553e:	2001      	movs	r0, #1
 8005540:	e7d1      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8005542:	2002      	movs	r0, #2
}
 8005544:	4770      	bx	lr

08005546 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005546:	f001 011f 	and.w	r1, r1, #31
 800554a:	f04f 0c01 	mov.w	ip, #1
 800554e:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005552:	6a03      	ldr	r3, [r0, #32]
 8005554:	ea23 030c 	bic.w	r3, r3, ip
 8005558:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800555a:	6a03      	ldr	r3, [r0, #32]
 800555c:	408a      	lsls	r2, r1
 800555e:	4313      	orrs	r3, r2
 8005560:	6203      	str	r3, [r0, #32]
}
 8005562:	4770      	bx	lr

08005564 <HAL_TIM_OC_Start_IT>:
{
 8005564:	b510      	push	{r4, lr}
 8005566:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005568:	4608      	mov	r0, r1
 800556a:	2900      	cmp	r1, #0
 800556c:	d137      	bne.n	80055de <HAL_TIM_OC_Start_IT+0x7a>
 800556e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8005572:	3b01      	subs	r3, #1
 8005574:	bf18      	it	ne
 8005576:	2301      	movne	r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	f040 8095 	bne.w	80056a8 <HAL_TIM_OC_Start_IT+0x144>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800557e:	2800      	cmp	r0, #0
 8005580:	d143      	bne.n	800560a <HAL_TIM_OC_Start_IT+0xa6>
 8005582:	2302      	movs	r3, #2
 8005584:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005588:	6822      	ldr	r2, [r4, #0]
 800558a:	68d3      	ldr	r3, [r2, #12]
 800558c:	f043 0302 	orr.w	r3, r3, #2
 8005590:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005592:	2201      	movs	r2, #1
 8005594:	4601      	mov	r1, r0
 8005596:	6820      	ldr	r0, [r4, #0]
 8005598:	f7ff ffd5 	bl	8005546 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	4a45      	ldr	r2, [pc, #276]	@ (80056b4 <HAL_TIM_OC_Start_IT+0x150>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d071      	beq.n	8005688 <HAL_TIM_OC_Start_IT+0x124>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	4a43      	ldr	r2, [pc, #268]	@ (80056b4 <HAL_TIM_OC_Start_IT+0x150>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d072      	beq.n	8005692 <HAL_TIM_OC_Start_IT+0x12e>
 80055ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055b0:	d06f      	beq.n	8005692 <HAL_TIM_OC_Start_IT+0x12e>
 80055b2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d06b      	beq.n	8005692 <HAL_TIM_OC_Start_IT+0x12e>
 80055ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80055be:	4293      	cmp	r3, r2
 80055c0:	d067      	beq.n	8005692 <HAL_TIM_OC_Start_IT+0x12e>
 80055c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d063      	beq.n	8005692 <HAL_TIM_OC_Start_IT+0x12e>
 80055ca:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d05f      	beq.n	8005692 <HAL_TIM_OC_Start_IT+0x12e>
      __HAL_TIM_ENABLE(htim);
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	f042 0201 	orr.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	2000      	movs	r0, #0
 80055dc:	e065      	b.n	80056aa <HAL_TIM_OC_Start_IT+0x146>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055de:	2904      	cmp	r1, #4
 80055e0:	d007      	beq.n	80055f2 <HAL_TIM_OC_Start_IT+0x8e>
 80055e2:	2908      	cmp	r1, #8
 80055e4:	d00b      	beq.n	80055fe <HAL_TIM_OC_Start_IT+0x9a>
 80055e6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80055ea:	3b01      	subs	r3, #1
 80055ec:	bf18      	it	ne
 80055ee:	2301      	movne	r3, #1
 80055f0:	e7c2      	b.n	8005578 <HAL_TIM_OC_Start_IT+0x14>
 80055f2:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80055f6:	3b01      	subs	r3, #1
 80055f8:	bf18      	it	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	e7bc      	b.n	8005578 <HAL_TIM_OC_Start_IT+0x14>
 80055fe:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8005602:	3b01      	subs	r3, #1
 8005604:	bf18      	it	ne
 8005606:	2301      	movne	r3, #1
 8005608:	e7b6      	b.n	8005578 <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800560a:	2804      	cmp	r0, #4
 800560c:	d024      	beq.n	8005658 <HAL_TIM_OC_Start_IT+0xf4>
 800560e:	2808      	cmp	r0, #8
 8005610:	d02b      	beq.n	800566a <HAL_TIM_OC_Start_IT+0x106>
 8005612:	2302      	movs	r3, #2
 8005614:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  switch (Channel)
 8005618:	280c      	cmp	r0, #12
 800561a:	d847      	bhi.n	80056ac <HAL_TIM_OC_Start_IT+0x148>
 800561c:	a301      	add	r3, pc, #4	@ (adr r3, 8005624 <HAL_TIM_OC_Start_IT+0xc0>)
 800561e:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8005622:	bf00      	nop
 8005624:	08005589 	.word	0x08005589
 8005628:	080056ad 	.word	0x080056ad
 800562c:	080056ad 	.word	0x080056ad
 8005630:	080056ad 	.word	0x080056ad
 8005634:	0800565f 	.word	0x0800565f
 8005638:	080056ad 	.word	0x080056ad
 800563c:	080056ad 	.word	0x080056ad
 8005640:	080056ad 	.word	0x080056ad
 8005644:	08005671 	.word	0x08005671
 8005648:	080056ad 	.word	0x080056ad
 800564c:	080056ad 	.word	0x080056ad
 8005650:	080056ad 	.word	0x080056ad
 8005654:	0800567d 	.word	0x0800567d
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005658:	2302      	movs	r3, #2
 800565a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800565e:	6822      	ldr	r2, [r4, #0]
 8005660:	68d3      	ldr	r3, [r2, #12]
 8005662:	f043 0304 	orr.w	r3, r3, #4
 8005666:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8005668:	e793      	b.n	8005592 <HAL_TIM_OC_Start_IT+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800566a:	2302      	movs	r3, #2
 800566c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005670:	6822      	ldr	r2, [r4, #0]
 8005672:	68d3      	ldr	r3, [r2, #12]
 8005674:	f043 0308 	orr.w	r3, r3, #8
 8005678:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800567a:	e78a      	b.n	8005592 <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800567c:	6822      	ldr	r2, [r4, #0]
 800567e:	68d3      	ldr	r3, [r2, #12]
 8005680:	f043 0310 	orr.w	r3, r3, #16
 8005684:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8005686:	e784      	b.n	8005592 <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_MOE_ENABLE(htim);
 8005688:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800568a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800568e:	645a      	str	r2, [r3, #68]	@ 0x44
 8005690:	e788      	b.n	80055a4 <HAL_TIM_OC_Start_IT+0x40>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005698:	2a06      	cmp	r2, #6
 800569a:	d009      	beq.n	80056b0 <HAL_TIM_OC_Start_IT+0x14c>
        __HAL_TIM_ENABLE(htim);
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	f042 0201 	orr.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	2000      	movs	r0, #0
 80056a6:	e000      	b.n	80056aa <HAL_TIM_OC_Start_IT+0x146>
    return HAL_ERROR;
 80056a8:	2001      	movs	r0, #1
}
 80056aa:	bd10      	pop	{r4, pc}
  switch (Channel)
 80056ac:	2001      	movs	r0, #1
 80056ae:	e7fc      	b.n	80056aa <HAL_TIM_OC_Start_IT+0x146>
 80056b0:	2000      	movs	r0, #0
 80056b2:	e7fa      	b.n	80056aa <HAL_TIM_OC_Start_IT+0x146>
 80056b4:	40010000 	.word	0x40010000

080056b8 <HAL_TIM_PWM_Start>:
{
 80056b8:	b510      	push	{r4, lr}
 80056ba:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056bc:	4608      	mov	r0, r1
 80056be:	bb89      	cbnz	r1, 8005724 <HAL_TIM_PWM_Start+0x6c>
 80056c0:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80056c4:	3b01      	subs	r3, #1
 80056c6:	bf18      	it	ne
 80056c8:	2301      	movne	r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d160      	bne.n	8005790 <HAL_TIM_PWM_Start+0xd8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d13e      	bne.n	8005750 <HAL_TIM_PWM_Start+0x98>
 80056d2:	2302      	movs	r3, #2
 80056d4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056d8:	2201      	movs	r2, #1
 80056da:	4601      	mov	r1, r0
 80056dc:	6820      	ldr	r0, [r4, #0]
 80056de:	f7ff ff32 	bl	8005546 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005798 <HAL_TIM_PWM_Start+0xe0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d042      	beq.n	8005770 <HAL_TIM_PWM_Start+0xb8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005798 <HAL_TIM_PWM_Start+0xe0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d043      	beq.n	800577a <HAL_TIM_PWM_Start+0xc2>
 80056f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f6:	d040      	beq.n	800577a <HAL_TIM_PWM_Start+0xc2>
 80056f8:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d03c      	beq.n	800577a <HAL_TIM_PWM_Start+0xc2>
 8005700:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005704:	4293      	cmp	r3, r2
 8005706:	d038      	beq.n	800577a <HAL_TIM_PWM_Start+0xc2>
 8005708:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800570c:	4293      	cmp	r3, r2
 800570e:	d034      	beq.n	800577a <HAL_TIM_PWM_Start+0xc2>
 8005710:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8005714:	4293      	cmp	r3, r2
 8005716:	d030      	beq.n	800577a <HAL_TIM_PWM_Start+0xc2>
    __HAL_TIM_ENABLE(htim);
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005720:	2000      	movs	r0, #0
 8005722:	e034      	b.n	800578e <HAL_TIM_PWM_Start+0xd6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005724:	2904      	cmp	r1, #4
 8005726:	d007      	beq.n	8005738 <HAL_TIM_PWM_Start+0x80>
 8005728:	2908      	cmp	r1, #8
 800572a:	d00b      	beq.n	8005744 <HAL_TIM_PWM_Start+0x8c>
 800572c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005730:	3b01      	subs	r3, #1
 8005732:	bf18      	it	ne
 8005734:	2301      	movne	r3, #1
 8005736:	e7c8      	b.n	80056ca <HAL_TIM_PWM_Start+0x12>
 8005738:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800573c:	3b01      	subs	r3, #1
 800573e:	bf18      	it	ne
 8005740:	2301      	movne	r3, #1
 8005742:	e7c2      	b.n	80056ca <HAL_TIM_PWM_Start+0x12>
 8005744:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8005748:	3b01      	subs	r3, #1
 800574a:	bf18      	it	ne
 800574c:	2301      	movne	r3, #1
 800574e:	e7bc      	b.n	80056ca <HAL_TIM_PWM_Start+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005750:	2804      	cmp	r0, #4
 8005752:	d005      	beq.n	8005760 <HAL_TIM_PWM_Start+0xa8>
 8005754:	2808      	cmp	r0, #8
 8005756:	d007      	beq.n	8005768 <HAL_TIM_PWM_Start+0xb0>
 8005758:	2302      	movs	r3, #2
 800575a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800575e:	e7bb      	b.n	80056d8 <HAL_TIM_PWM_Start+0x20>
 8005760:	2302      	movs	r3, #2
 8005762:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005766:	e7b7      	b.n	80056d8 <HAL_TIM_PWM_Start+0x20>
 8005768:	2302      	movs	r3, #2
 800576a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800576e:	e7b3      	b.n	80056d8 <HAL_TIM_PWM_Start+0x20>
    __HAL_TIM_MOE_ENABLE(htim);
 8005770:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005772:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005776:	645a      	str	r2, [r3, #68]	@ 0x44
 8005778:	e7b7      	b.n	80056ea <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005780:	2a06      	cmp	r2, #6
 8005782:	d007      	beq.n	8005794 <HAL_TIM_PWM_Start+0xdc>
      __HAL_TIM_ENABLE(htim);
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800578c:	2000      	movs	r0, #0
}
 800578e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005790:	2001      	movs	r0, #1
 8005792:	e7fc      	b.n	800578e <HAL_TIM_PWM_Start+0xd6>
  return HAL_OK;
 8005794:	2000      	movs	r0, #0
 8005796:	e7fa      	b.n	800578e <HAL_TIM_PWM_Start+0xd6>
 8005798:	40010000 	.word	0x40010000

0800579c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800579c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80057a0:	2a01      	cmp	r2, #1
 80057a2:	d035      	beq.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 80057a4:	b410      	push	{r4}
 80057a6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80057a8:	2201      	movs	r2, #1
 80057aa:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ae:	2202      	movs	r2, #2
 80057b0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057b4:	6802      	ldr	r2, [r0, #0]
 80057b6:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057b8:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057ba:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057be:	6808      	ldr	r0, [r1, #0]
 80057c0:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057c4:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	4812      	ldr	r0, [pc, #72]	@ (8005814 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80057ca:	4282      	cmp	r2, r0
 80057cc:	d012      	beq.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80057ce:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80057d2:	d00f      	beq.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80057d4:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80057d8:	4282      	cmp	r2, r0
 80057da:	d00b      	beq.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80057dc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80057e0:	4282      	cmp	r2, r0
 80057e2:	d007      	beq.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80057e4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80057e8:	4282      	cmp	r2, r0
 80057ea:	d003      	beq.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80057ec:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 80057f0:	4282      	cmp	r2, r0
 80057f2:	d104      	bne.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057f4:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057f8:	6849      	ldr	r1, [r1, #4]
 80057fa:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057fc:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005804:	2000      	movs	r0, #0
 8005806:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800580a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800580e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005810:	2002      	movs	r0, #2
}
 8005812:	4770      	bx	lr
 8005814:	40010000 	.word	0x40010000

08005818 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005818:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800581a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800581e:	2b01      	cmp	r3, #1
 8005820:	d021      	beq.n	8005866 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8005822:	2301      	movs	r3, #1
 8005824:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005828:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800582a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800582e:	6888      	ldr	r0, [r1, #8]
 8005830:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005832:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005836:	6848      	ldr	r0, [r1, #4]
 8005838:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800583a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800583e:	6808      	ldr	r0, [r1, #0]
 8005840:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005842:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005846:	6908      	ldr	r0, [r1, #16]
 8005848:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800584a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800584e:	6948      	ldr	r0, [r1, #20]
 8005850:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005852:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005856:	69c9      	ldr	r1, [r1, #28]
 8005858:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800585a:	6811      	ldr	r1, [r2, #0]
 800585c:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800585e:	2000      	movs	r0, #0
 8005860:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8005864:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005866:	2002      	movs	r0, #2
}
 8005868:	4770      	bx	lr

0800586a <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800586a:	4770      	bx	lr

0800586c <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800586c:	4770      	bx	lr
	...

08005870 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005870:	b530      	push	{r4, r5, lr}
 8005872:	b089      	sub	sp, #36	@ 0x24
 8005874:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8005876:	2400      	movs	r4, #0
 8005878:	9401      	str	r4, [sp, #4]
 800587a:	4b1d      	ldr	r3, [pc, #116]	@ (80058f0 <HAL_InitTick+0x80>)
 800587c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800587e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005882:	645a      	str	r2, [r3, #68]	@ 0x44
 8005884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005886:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800588a:	9301      	str	r3, [sp, #4]
 800588c:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800588e:	a902      	add	r1, sp, #8
 8005890:	a803      	add	r0, sp, #12
 8005892:	f7ff fa39 	bl	8004d08 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005896:	f7ff fa27 	bl	8004ce8 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800589a:	4a16      	ldr	r2, [pc, #88]	@ (80058f4 <HAL_InitTick+0x84>)
 800589c:	fba2 2300 	umull	r2, r3, r2, r0
 80058a0:	0c9b      	lsrs	r3, r3, #18
 80058a2:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80058a4:	4814      	ldr	r0, [pc, #80]	@ (80058f8 <HAL_InitTick+0x88>)
 80058a6:	4a15      	ldr	r2, [pc, #84]	@ (80058fc <HAL_InitTick+0x8c>)
 80058a8:	6002      	str	r2, [r0, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80058aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80058ae:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80058b0:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 80058b2:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058b4:	6084      	str	r4, [r0, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058b6:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim11);
 80058b8:	f7ff fc6a 	bl	8005190 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80058bc:	4604      	mov	r4, r0
 80058be:	b110      	cbz	r0, 80058c6 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 80058c0:	4620      	mov	r0, r4
 80058c2:	b009      	add	sp, #36	@ 0x24
 80058c4:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim11);
 80058c6:	480c      	ldr	r0, [pc, #48]	@ (80058f8 <HAL_InitTick+0x88>)
 80058c8:	f7ff fb1e 	bl	8004f08 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80058cc:	4604      	mov	r4, r0
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d1f6      	bne.n	80058c0 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80058d2:	201a      	movs	r0, #26
 80058d4:	f7fd fd84 	bl	80033e0 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058d8:	2d0f      	cmp	r5, #15
 80058da:	d901      	bls.n	80058e0 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 80058dc:	2401      	movs	r4, #1
 80058de:	e7ef      	b.n	80058c0 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80058e0:	2200      	movs	r2, #0
 80058e2:	4629      	mov	r1, r5
 80058e4:	201a      	movs	r0, #26
 80058e6:	f7fd fd6b 	bl	80033c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80058ea:	4b05      	ldr	r3, [pc, #20]	@ (8005900 <HAL_InitTick+0x90>)
 80058ec:	601d      	str	r5, [r3, #0]
 80058ee:	e7e7      	b.n	80058c0 <HAL_InitTick+0x50>
 80058f0:	40023800 	.word	0x40023800
 80058f4:	431bde83 	.word	0x431bde83
 80058f8:	20004730 	.word	0x20004730
 80058fc:	40014800 	.word	0x40014800
 8005900:	20000050 	.word	0x20000050

08005904 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005904:	e7fe      	b.n	8005904 <NMI_Handler>

08005906 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005906:	e7fe      	b.n	8005906 <HardFault_Handler>

08005908 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005908:	e7fe      	b.n	8005908 <MemManage_Handler>

0800590a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800590a:	e7fe      	b.n	800590a <BusFault_Handler>

0800590c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800590c:	e7fe      	b.n	800590c <UsageFault_Handler>

0800590e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800590e:	4770      	bx	lr

08005910 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005910:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005912:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005916:	f7fe f875 	bl	8003a04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800591a:	bd08      	pop	{r3, pc}

0800591c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800591c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800591e:	4803      	ldr	r0, [pc, #12]	@ (800592c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8005920:	f7ff fb31 	bl	8004f86 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8005924:	4802      	ldr	r0, [pc, #8]	@ (8005930 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8005926:	f7ff fb2e 	bl	8004f86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800592a:	bd08      	pop	{r3, pc}
 800592c:	20004d0c 	.word	0x20004d0c
 8005930:	20004730 	.word	0x20004730

08005934 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005934:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  scheduler_timer_callback();
 8005936:	f001 ffab 	bl	8007890 <scheduler_timer_callback>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800593a:	4802      	ldr	r0, [pc, #8]	@ (8005944 <TIM2_IRQHandler+0x10>)
 800593c:	f7ff fb23 	bl	8004f86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005940:	bd08      	pop	{r3, pc}
 8005942:	bf00      	nop
 8005944:	20004cc4 	.word	0x20004cc4

08005948 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005948:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800594a:	4802      	ldr	r0, [pc, #8]	@ (8005954 <DMA2_Stream0_IRQHandler+0xc>)
 800594c:	f7fd fe72 	bl	8003634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005950:	bd08      	pop	{r3, pc}
 8005952:	bf00      	nop
 8005954:	200001b0 	.word	0x200001b0

08005958 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005958:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800595a:	4802      	ldr	r0, [pc, #8]	@ (8005964 <OTG_FS_IRQHandler+0xc>)
 800595c:	f7fe fbb3 	bl	80040c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005960:	bd08      	pop	{r3, pc}
 8005962:	bf00      	nop
 8005964:	20005d24 	.word	0x20005d24

08005968 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005968:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800596e:	9b01      	ldr	r3, [sp, #4]
 8005970:	3301      	adds	r3, #1
 8005972:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8005974:	9b01      	ldr	r3, [sp, #4]
 8005976:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800597a:	d815      	bhi.n	80059a8 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800597c:	6903      	ldr	r3, [r0, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	daf5      	bge.n	800596e <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005986:	6903      	ldr	r3, [r0, #16]
 8005988:	f043 0301 	orr.w	r3, r3, #1
 800598c:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 800598e:	9b01      	ldr	r3, [sp, #4]
 8005990:	3301      	adds	r3, #1
 8005992:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8005994:	9b01      	ldr	r3, [sp, #4]
 8005996:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800599a:	d808      	bhi.n	80059ae <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800599c:	6903      	ldr	r3, [r0, #16]
 800599e:	f013 0f01 	tst.w	r3, #1
 80059a2:	d1f4      	bne.n	800598e <USB_CoreReset+0x26>

  return HAL_OK;
 80059a4:	2000      	movs	r0, #0
 80059a6:	e000      	b.n	80059aa <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 80059a8:	2003      	movs	r0, #3
}
 80059aa:	b002      	add	sp, #8
 80059ac:	4770      	bx	lr
      return HAL_TIMEOUT;
 80059ae:	2003      	movs	r0, #3
 80059b0:	e7fb      	b.n	80059aa <USB_CoreReset+0x42>

080059b2 <USB_CoreInit>:
{
 80059b2:	b084      	sub	sp, #16
 80059b4:	b510      	push	{r4, lr}
 80059b6:	4604      	mov	r4, r0
 80059b8:	a803      	add	r0, sp, #12
 80059ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059be:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d121      	bne.n	8005a0a <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80059c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059cc:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059ce:	68e3      	ldr	r3, [r4, #12]
 80059d0:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80059d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059d8:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059da:	68e3      	ldr	r3, [r4, #12]
 80059dc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80059e0:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80059e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d00a      	beq.n	8005a00 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 80059ea:	4620      	mov	r0, r4
 80059ec:	f7ff ffbc 	bl	8005968 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80059f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d01c      	beq.n	8005a32 <USB_CoreInit+0x80>
}
 80059f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059fc:	b004      	add	sp, #16
 80059fe:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a00:	68e3      	ldr	r3, [r4, #12]
 8005a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a06:	60e3      	str	r3, [r4, #12]
 8005a08:	e7ef      	b.n	80059ea <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a0a:	68e3      	ldr	r3, [r4, #12]
 8005a0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a10:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8005a12:	4620      	mov	r0, r4
 8005a14:	f7ff ffa8 	bl	8005968 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8005a18:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8005a1c:	b923      	cbnz	r3, 8005a28 <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a1e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a24:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005a26:	e7e3      	b.n	80059f0 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a2e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005a30:	e7de      	b.n	80059f0 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a32:	68a3      	ldr	r3, [r4, #8]
 8005a34:	f043 0306 	orr.w	r3, r3, #6
 8005a38:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a3a:	68a3      	ldr	r3, [r4, #8]
 8005a3c:	f043 0320 	orr.w	r3, r3, #32
 8005a40:	60a3      	str	r3, [r4, #8]
 8005a42:	e7d9      	b.n	80059f8 <USB_CoreInit+0x46>

08005a44 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8005a44:	2a02      	cmp	r2, #2
 8005a46:	d00a      	beq.n	8005a5e <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005a48:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005a4a:	68c3      	ldr	r3, [r0, #12]
 8005a4c:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8005a50:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005a52:	68c3      	ldr	r3, [r0, #12]
 8005a54:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8005a58:	60c3      	str	r3, [r0, #12]
}
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a5e:	4b23      	ldr	r3, [pc, #140]	@ (8005aec <USB_SetTurnaroundTime+0xa8>)
 8005a60:	440b      	add	r3, r1
 8005a62:	4a23      	ldr	r2, [pc, #140]	@ (8005af0 <USB_SetTurnaroundTime+0xac>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d92f      	bls.n	8005ac8 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a68:	4b22      	ldr	r3, [pc, #136]	@ (8005af4 <USB_SetTurnaroundTime+0xb0>)
 8005a6a:	440b      	add	r3, r1
 8005a6c:	4a22      	ldr	r2, [pc, #136]	@ (8005af8 <USB_SetTurnaroundTime+0xb4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d92c      	bls.n	8005acc <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a72:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 8005a76:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 8005a7a:	4a20      	ldr	r2, [pc, #128]	@ (8005afc <USB_SetTurnaroundTime+0xb8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d927      	bls.n	8005ad0 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a80:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 8005a84:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8005a88:	4a1d      	ldr	r2, [pc, #116]	@ (8005b00 <USB_SetTurnaroundTime+0xbc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d322      	bcc.n	8005ad4 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005b04 <USB_SetTurnaroundTime+0xc0>)
 8005a90:	440b      	add	r3, r1
 8005a92:	4a1d      	ldr	r2, [pc, #116]	@ (8005b08 <USB_SetTurnaroundTime+0xc4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d91f      	bls.n	8005ad8 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a98:	4b1c      	ldr	r3, [pc, #112]	@ (8005b0c <USB_SetTurnaroundTime+0xc8>)
 8005a9a:	440b      	add	r3, r1
 8005a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005b10 <USB_SetTurnaroundTime+0xcc>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d31c      	bcc.n	8005adc <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8005b14 <USB_SetTurnaroundTime+0xd0>)
 8005aa4:	440b      	add	r3, r1
 8005aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b18 <USB_SetTurnaroundTime+0xd4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d319      	bcc.n	8005ae0 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005aac:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8005ab0:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 8005ab4:	4a19      	ldr	r2, [pc, #100]	@ (8005b1c <USB_SetTurnaroundTime+0xd8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d314      	bcc.n	8005ae4 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005aba:	4b19      	ldr	r3, [pc, #100]	@ (8005b20 <USB_SetTurnaroundTime+0xdc>)
 8005abc:	440b      	add	r3, r1
 8005abe:	4a19      	ldr	r2, [pc, #100]	@ (8005b24 <USB_SetTurnaroundTime+0xe0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d211      	bcs.n	8005ae8 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 8005ac4:	2207      	movs	r2, #7
 8005ac6:	e7c0      	b.n	8005a4a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8005ac8:	220f      	movs	r2, #15
 8005aca:	e7be      	b.n	8005a4a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8005acc:	220e      	movs	r2, #14
 8005ace:	e7bc      	b.n	8005a4a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8005ad0:	220d      	movs	r2, #13
 8005ad2:	e7ba      	b.n	8005a4a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8005ad4:	220c      	movs	r2, #12
 8005ad6:	e7b8      	b.n	8005a4a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8005ad8:	220b      	movs	r2, #11
 8005ada:	e7b6      	b.n	8005a4a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8005adc:	220a      	movs	r2, #10
 8005ade:	e7b4      	b.n	8005a4a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8005ae0:	2209      	movs	r2, #9
 8005ae2:	e7b2      	b.n	8005a4a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	e7b0      	b.n	8005a4a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8005ae8:	2206      	movs	r2, #6
 8005aea:	e7ae      	b.n	8005a4a <USB_SetTurnaroundTime+0x6>
 8005aec:	ff275340 	.word	0xff275340
 8005af0:	000c34ff 	.word	0x000c34ff
 8005af4:	ff1b1e40 	.word	0xff1b1e40
 8005af8:	000f423f 	.word	0x000f423f
 8005afc:	00124f7f 	.word	0x00124f7f
 8005b00:	0013d620 	.word	0x0013d620
 8005b04:	fee5b660 	.word	0xfee5b660
 8005b08:	0016e35f 	.word	0x0016e35f
 8005b0c:	feced300 	.word	0xfeced300
 8005b10:	001b7740 	.word	0x001b7740
 8005b14:	feb35bc0 	.word	0xfeb35bc0
 8005b18:	002191c0 	.word	0x002191c0
 8005b1c:	00387520 	.word	0x00387520
 8005b20:	fe5954e0 	.word	0xfe5954e0
 8005b24:	00419ce0 	.word	0x00419ce0

08005b28 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b28:	6883      	ldr	r3, [r0, #8]
 8005b2a:	f043 0301 	orr.w	r3, r3, #1
 8005b2e:	6083      	str	r3, [r0, #8]
}
 8005b30:	2000      	movs	r0, #0
 8005b32:	4770      	bx	lr

08005b34 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b34:	6883      	ldr	r3, [r0, #8]
 8005b36:	f023 0301 	bic.w	r3, r3, #1
 8005b3a:	6083      	str	r3, [r0, #8]
}
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	4770      	bx	lr

08005b40 <USB_FlushTxFifo>:
{
 8005b40:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	9301      	str	r3, [sp, #4]
    count++;
 8005b46:	9b01      	ldr	r3, [sp, #4]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8005b4c:	9b01      	ldr	r3, [sp, #4]
 8005b4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b52:	d815      	bhi.n	8005b80 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b54:	6903      	ldr	r3, [r0, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	daf5      	bge.n	8005b46 <USB_FlushTxFifo+0x6>
  count = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b5e:	0189      	lsls	r1, r1, #6
 8005b60:	f041 0120 	orr.w	r1, r1, #32
 8005b64:	6101      	str	r1, [r0, #16]
    count++;
 8005b66:	9b01      	ldr	r3, [sp, #4]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8005b6c:	9b01      	ldr	r3, [sp, #4]
 8005b6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b72:	d808      	bhi.n	8005b86 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b74:	6903      	ldr	r3, [r0, #16]
 8005b76:	f013 0f20 	tst.w	r3, #32
 8005b7a:	d1f4      	bne.n	8005b66 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	e000      	b.n	8005b82 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8005b80:	2003      	movs	r0, #3
}
 8005b82:	b002      	add	sp, #8
 8005b84:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005b86:	2003      	movs	r0, #3
 8005b88:	e7fb      	b.n	8005b82 <USB_FlushTxFifo+0x42>

08005b8a <USB_FlushRxFifo>:
{
 8005b8a:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9301      	str	r3, [sp, #4]
    count++;
 8005b90:	9b01      	ldr	r3, [sp, #4]
 8005b92:	3301      	adds	r3, #1
 8005b94:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8005b96:	9b01      	ldr	r3, [sp, #4]
 8005b98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b9c:	d813      	bhi.n	8005bc6 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b9e:	6903      	ldr	r3, [r0, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	daf5      	bge.n	8005b90 <USB_FlushRxFifo+0x6>
  count = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ba8:	2310      	movs	r3, #16
 8005baa:	6103      	str	r3, [r0, #16]
    count++;
 8005bac:	9b01      	ldr	r3, [sp, #4]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8005bb2:	9b01      	ldr	r3, [sp, #4]
 8005bb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bb8:	d808      	bhi.n	8005bcc <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bba:	6903      	ldr	r3, [r0, #16]
 8005bbc:	f013 0f10 	tst.w	r3, #16
 8005bc0:	d1f4      	bne.n	8005bac <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	e000      	b.n	8005bc8 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8005bc6:	2003      	movs	r0, #3
}
 8005bc8:	b002      	add	sp, #8
 8005bca:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005bcc:	2003      	movs	r0, #3
 8005bce:	e7fb      	b.n	8005bc8 <USB_FlushRxFifo+0x3e>

08005bd0 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8005bd0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8005bd4:	4319      	orrs	r1, r3
 8005bd6:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8005bda:	2000      	movs	r0, #0
 8005bdc:	4770      	bx	lr
	...

08005be0 <USB_DevInit>:
{
 8005be0:	b084      	sub	sp, #16
 8005be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be4:	4604      	mov	r4, r0
 8005be6:	a807      	add	r0, sp, #28
 8005be8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8005bec:	2300      	movs	r3, #0
 8005bee:	e006      	b.n	8005bfe <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8005bf0:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8005bf4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	2b0e      	cmp	r3, #14
 8005c00:	d9f6      	bls.n	8005bf0 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 8005c02:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 8005c06:	bb06      	cbnz	r6, 8005c4a <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c08:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8005c0c:	f043 0302 	orr.w	r3, r3, #2
 8005c10:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c14:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005c16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005c1a:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c1c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005c1e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005c22:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c24:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c2a:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c32:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d115      	bne.n	8005c66 <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 8005c3a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8005c3e:	b96b      	cbnz	r3, 8005c5c <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c40:	2100      	movs	r1, #0
 8005c42:	4620      	mov	r0, r4
 8005c44:	f7ff ffc4 	bl	8005bd0 <USB_SetDevSpeed>
 8005c48:	e011      	b.n	8005c6e <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c4a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005c4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c50:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c52:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005c54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c58:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005c5a:	e7e7      	b.n	8005c2c <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f7ff ffb6 	bl	8005bd0 <USB_SetDevSpeed>
 8005c64:	e003      	b.n	8005c6e <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c66:	2103      	movs	r1, #3
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f7ff ffb1 	bl	8005bd0 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c6e:	2110      	movs	r1, #16
 8005c70:	4620      	mov	r0, r4
 8005c72:	f7ff ff65 	bl	8005b40 <USB_FlushTxFifo>
 8005c76:	4605      	mov	r5, r0
 8005c78:	b100      	cbz	r0, 8005c7c <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 8005c7a:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f7ff ff84 	bl	8005b8a <USB_FlushRxFifo>
 8005c82:	b100      	cbz	r0, 8005c86 <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 8005c84:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8005c86:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c90:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c94:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c98:	e00d      	b.n	8005cb6 <USB_DevInit+0xd6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005c9e:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8005ca2:	e002      	b.n	8005caa <USB_DevInit+0xca>
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005caa:	2200      	movs	r2, #0
 8005cac:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005cae:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8005cb2:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8005cba:	4299      	cmp	r1, r3
 8005cbc:	d90e      	bls.n	8005cdc <USB_DevInit+0xfc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cbe:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8005cc2:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 8005cc6:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	daea      	bge.n	8005ca4 <USB_DevInit+0xc4>
      if (i == 0U)
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e3      	bne.n	8005c9a <USB_DevInit+0xba>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005cd2:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8005cd6:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8005cda:	e7e6      	b.n	8005caa <USB_DevInit+0xca>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e00a      	b.n	8005cf6 <USB_DevInit+0x116>
      if (i == 0U)
 8005ce0:	b1bb      	cbz	r3, 8005d12 <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ce2:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 8005ce6:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cea:	2200      	movs	r2, #0
 8005cec:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cee:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8005cf2:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	4299      	cmp	r1, r3
 8005cf8:	d910      	bls.n	8005d1c <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cfa:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8005cfe:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8005d02:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 8005d06:	2f00      	cmp	r7, #0
 8005d08:	dbea      	blt.n	8005ce0 <USB_DevInit+0x100>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d0a:	2700      	movs	r7, #0
 8005d0c:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8005d10:	e7eb      	b.n	8005cea <USB_DevInit+0x10a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d12:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 8005d16:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8005d1a:	e7e6      	b.n	8005cea <USB_DevInit+0x10a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d1c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8005d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d24:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d2c:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8005d30:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8005d32:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8005d36:	b91b      	cbnz	r3, 8005d40 <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d38:	69a3      	ldr	r3, [r4, #24]
 8005d3a:	f043 0310 	orr.w	r3, r3, #16
 8005d3e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d40:	69a2      	ldr	r2, [r4, #24]
 8005d42:	4b0c      	ldr	r3, [pc, #48]	@ (8005d74 <USB_DevInit+0x194>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8005d48:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8005d4c:	b11b      	cbz	r3, 8005d56 <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d4e:	69a3      	ldr	r3, [r4, #24]
 8005d50:	f043 0308 	orr.w	r3, r3, #8
 8005d54:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8005d56:	2e01      	cmp	r6, #1
 8005d58:	d004      	beq.n	8005d64 <USB_DevInit+0x184>
}
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d60:	b004      	add	sp, #16
 8005d62:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d64:	69a3      	ldr	r3, [r4, #24]
 8005d66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d6a:	f043 0304 	orr.w	r3, r3, #4
 8005d6e:	61a3      	str	r3, [r4, #24]
 8005d70:	e7f3      	b.n	8005d5a <USB_DevInit+0x17a>
 8005d72:	bf00      	nop
 8005d74:	803c3800 	.word	0x803c3800

08005d78 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d78:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8005d7c:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d004      	beq.n	8005d8e <USB_GetDevSpeed+0x16>
 8005d84:	2b06      	cmp	r3, #6
 8005d86:	d004      	beq.n	8005d92 <USB_GetDevSpeed+0x1a>
 8005d88:	b92b      	cbnz	r3, 8005d96 <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	4770      	bx	lr
 8005d8e:	2002      	movs	r0, #2
 8005d90:	4770      	bx	lr
 8005d92:	2002      	movs	r0, #2
 8005d94:	4770      	bx	lr
 8005d96:	200f      	movs	r0, #15
}
 8005d98:	4770      	bx	lr

08005d9a <USB_ActivateEndpoint>:
{
 8005d9a:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8005d9c:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8005da0:	784b      	ldrb	r3, [r1, #1]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d023      	beq.n	8005dee <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005da6:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 8005daa:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 8005dae:	f00c 040f 	and.w	r4, ip, #15
 8005db2:	2201      	movs	r2, #1
 8005db4:	40a2      	lsls	r2, r4
 8005db6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dba:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005dbe:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8005dc2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005dc6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8005dca:	d10e      	bne.n	8005dea <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005dcc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005dd0:	688a      	ldr	r2, [r1, #8]
 8005dd2:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005dd6:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005dd8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005de6:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8005dea:	2000      	movs	r0, #0
 8005dec:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005dee:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8005df2:	f00c 0e0f 	and.w	lr, ip, #15
 8005df6:	fa03 f30e 	lsl.w	r3, r3, lr
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e02:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8005e06:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005e0a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8005e0e:	d1ec      	bne.n	8005dea <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e10:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005e14:	688a      	ldr	r2, [r1, #8]
 8005e16:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e1a:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e1c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e20:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e2e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8005e32:	e7da      	b.n	8005dea <USB_ActivateEndpoint+0x50>

08005e34 <USB_DeactivateEndpoint>:
{
 8005e34:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8005e36:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005e38:	784a      	ldrb	r2, [r1, #1]
 8005e3a:	2a01      	cmp	r2, #1
 8005e3c:	d026      	beq.n	8005e8c <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e3e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005e42:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8005e46:	2a00      	cmp	r2, #0
 8005e48:	db52      	blt.n	8005ef0 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e4a:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8005e4e:	780a      	ldrb	r2, [r1, #0]
 8005e50:	f002 020f 	and.w	r2, r2, #15
 8005e54:	f04f 0c01 	mov.w	ip, #1
 8005e58:	fa0c f202 	lsl.w	r2, ip, r2
 8005e5c:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8005e60:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e64:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8005e68:	7809      	ldrb	r1, [r1, #0]
 8005e6a:	f001 010f 	and.w	r1, r1, #15
 8005e6e:	fa0c fc01 	lsl.w	ip, ip, r1
 8005e72:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 8005e76:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e7a:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8005e7e:	4a23      	ldr	r2, [pc, #140]	@ (8005f0c <USB_DeactivateEndpoint+0xd8>)
 8005e80:	400a      	ands	r2, r1
 8005e82:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8005e86:	2000      	movs	r0, #0
 8005e88:	bc30      	pop	{r4, r5}
 8005e8a:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e8c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005e90:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8005e94:	2a00      	cmp	r2, #0
 8005e96:	db1e      	blt.n	8005ed6 <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e98:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8005e9c:	780a      	ldrb	r2, [r1, #0]
 8005e9e:	f002 020f 	and.w	r2, r2, #15
 8005ea2:	2401      	movs	r4, #1
 8005ea4:	fa04 f202 	lsl.w	r2, r4, r2
 8005ea8:	b292      	uxth	r2, r2
 8005eaa:	ea25 0202 	bic.w	r2, r5, r2
 8005eae:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005eb2:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8005eb6:	7809      	ldrb	r1, [r1, #0]
 8005eb8:	f001 010f 	and.w	r1, r1, #15
 8005ebc:	408c      	lsls	r4, r1
 8005ebe:	b2a4      	uxth	r4, r4
 8005ec0:	ea22 0204 	bic.w	r2, r2, r4
 8005ec4:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ec8:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8005ecc:	4a10      	ldr	r2, [pc, #64]	@ (8005f10 <USB_DeactivateEndpoint+0xdc>)
 8005ece:	400a      	ands	r2, r1
 8005ed0:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8005ed4:	e7d7      	b.n	8005e86 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ed6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8005eda:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8005ede:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ee2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8005ee6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005eea:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8005eee:	e7d3      	b.n	8005e98 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ef0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8005ef4:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8005ef8:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005efc:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8005f00:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005f04:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8005f08:	e79f      	b.n	8005e4a <USB_DeactivateEndpoint+0x16>
 8005f0a:	bf00      	nop
 8005f0c:	eff37800 	.word	0xeff37800
 8005f10:	ec337800 	.word	0xec337800

08005f14 <USB_EPStopXfer>:
{
 8005f14:	b410      	push	{r4}
 8005f16:	b083      	sub	sp, #12
 8005f18:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8005f1e:	7848      	ldrb	r0, [r1, #1]
 8005f20:	2801      	cmp	r0, #1
 8005f22:	d00b      	beq.n	8005f3c <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f24:	780b      	ldrb	r3, [r1, #0]
 8005f26:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8005f2a:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	db2d      	blt.n	8005f8e <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8005f32:	2000      	movs	r0, #0
}
 8005f34:	b003      	add	sp, #12
 8005f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f3a:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f3c:	780b      	ldrb	r3, [r1, #0]
 8005f3e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8005f42:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8005f46:	2c00      	cmp	r4, #0
 8005f48:	db01      	blt.n	8005f4e <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	e7f2      	b.n	8005f34 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005f4e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8005f52:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8005f56:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f5a:	780b      	ldrb	r3, [r1, #0]
 8005f5c:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8005f60:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8005f64:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8005f68:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8005f6c:	9b01      	ldr	r3, [sp, #4]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8005f72:	9c01      	ldr	r4, [sp, #4]
 8005f74:	f242 7310 	movw	r3, #10000	@ 0x2710
 8005f78:	429c      	cmp	r4, r3
 8005f7a:	d8db      	bhi.n	8005f34 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f7c:	780b      	ldrb	r3, [r1, #0]
 8005f7e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8005f82:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	dbf0      	blt.n	8005f6c <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	e7d2      	b.n	8005f34 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f8e:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8005f92:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 8005f96:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f9a:	780b      	ldrb	r3, [r1, #0]
 8005f9c:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8005fa0:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8005fa4:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8005fa8:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 8005fac:	9b01      	ldr	r3, [sp, #4]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8005fb2:	9801      	ldr	r0, [sp, #4]
 8005fb4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8005fb8:	4298      	cmp	r0, r3
 8005fba:	d808      	bhi.n	8005fce <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005fbc:	780b      	ldrb	r3, [r1, #0]
 8005fbe:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8005fc2:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	dbf0      	blt.n	8005fac <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 8005fca:	2000      	movs	r0, #0
 8005fcc:	e7b2      	b.n	8005f34 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8005fce:	2001      	movs	r0, #1
 8005fd0:	e7b0      	b.n	8005f34 <USB_EPStopXfer+0x20>

08005fd2 <USB_WritePacket>:
{
 8005fd2:	b510      	push	{r4, lr}
 8005fd4:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8005fd8:	b984      	cbnz	r4, 8005ffc <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fda:	3303      	adds	r3, #3
 8005fdc:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8005fe0:	f04f 0c00 	mov.w	ip, #0
 8005fe4:	e008      	b.n	8005ff8 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fe6:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8005fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fee:	f851 4b04 	ldr.w	r4, [r1], #4
 8005ff2:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8005ff4:	f10c 0c01 	add.w	ip, ip, #1
 8005ff8:	45f4      	cmp	ip, lr
 8005ffa:	d3f4      	bcc.n	8005fe6 <USB_WritePacket+0x14>
}
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	bd10      	pop	{r4, pc}

08006000 <USB_EPStartXfer>:
{
 8006000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006002:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8006004:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8006006:	784b      	ldrb	r3, [r1, #1]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d02d      	beq.n	8006068 <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800600c:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8006010:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8006014:	691d      	ldr	r5, [r3, #16]
 8006016:	f36f 0512 	bfc	r5, #0, #19
 800601a:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800601c:	691d      	ldr	r5, [r3, #16]
 800601e:	f36f 45dc 	bfc	r5, #19, #10
 8006022:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8006024:	2c00      	cmp	r4, #0
 8006026:	f040 80ce 	bne.w	80061c6 <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 800602a:	690c      	ldr	r4, [r1, #16]
 800602c:	b10c      	cbz	r4, 8006032 <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 800602e:	688c      	ldr	r4, [r1, #8]
 8006030:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8006032:	688c      	ldr	r4, [r1, #8]
 8006034:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006036:	691d      	ldr	r5, [r3, #16]
 8006038:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800603c:	432c      	orrs	r4, r5
 800603e:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006040:	691c      	ldr	r4, [r3, #16]
 8006042:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8006046:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8006048:	2a01      	cmp	r2, #1
 800604a:	f000 80df 	beq.w	800620c <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 800604e:	790b      	ldrb	r3, [r1, #4]
 8006050:	2b01      	cmp	r3, #1
 8006052:	f000 80e1 	beq.w	8006218 <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006056:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800605a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800605e:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8006062:	2000      	movs	r0, #0
 8006064:	b003      	add	sp, #12
 8006066:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8006068:	690b      	ldr	r3, [r1, #16]
 800606a:	bb73      	cbnz	r3, 80060ca <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800606c:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8006070:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8006074:	f36f 45dc 	bfc	r5, #19, #10
 8006078:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800607c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8006080:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8006084:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006088:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 800608c:	f36f 0512 	bfc	r5, #0, #19
 8006090:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8006094:	2a01      	cmp	r2, #1
 8006096:	d054      	beq.n	8006142 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006098:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800609c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80060a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80060a4:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 80060a8:	790b      	ldrb	r3, [r1, #4]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d072      	beq.n	8006194 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 80060ae:	690b      	ldr	r3, [r1, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0d6      	beq.n	8006062 <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060b4:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 80060b8:	7809      	ldrb	r1, [r1, #0]
 80060ba:	f001 010f 	and.w	r1, r1, #15
 80060be:	2201      	movs	r2, #1
 80060c0:	408a      	lsls	r2, r1
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 80060c8:	e7cb      	b.n	8006062 <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060ca:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80060ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d2:	691d      	ldr	r5, [r3, #16]
 80060d4:	f36f 0512 	bfc	r5, #0, #19
 80060d8:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060da:	691d      	ldr	r5, [r3, #16]
 80060dc:	f36f 45dc 	bfc	r5, #19, #10
 80060e0:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 80060e2:	b984      	cbnz	r4, 8006106 <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 80060e4:	690e      	ldr	r6, [r1, #16]
 80060e6:	688d      	ldr	r5, [r1, #8]
 80060e8:	42ae      	cmp	r6, r5
 80060ea:	d900      	bls.n	80060ee <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 80060ec:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060ee:	691d      	ldr	r5, [r3, #16]
 80060f0:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 80060f4:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060f6:	691d      	ldr	r5, [r3, #16]
 80060f8:	690e      	ldr	r6, [r1, #16]
 80060fa:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 80060fe:	ea45 050c 	orr.w	r5, r5, ip
 8006102:	611d      	str	r5, [r3, #16]
 8006104:	e7c6      	b.n	8006094 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006106:	690d      	ldr	r5, [r1, #16]
 8006108:	688e      	ldr	r6, [r1, #8]
 800610a:	4435      	add	r5, r6
 800610c:	3d01      	subs	r5, #1
 800610e:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006112:	691e      	ldr	r6, [r3, #16]
 8006114:	fa1f fc85 	uxth.w	ip, r5
 8006118:	4f49      	ldr	r7, [pc, #292]	@ (8006240 <USB_EPStartXfer+0x240>)
 800611a:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 800611e:	4335      	orrs	r5, r6
 8006120:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8006122:	790d      	ldrb	r5, [r1, #4]
 8006124:	2d01      	cmp	r5, #1
 8006126:	d1e6      	bne.n	80060f6 <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006128:	691d      	ldr	r5, [r3, #16]
 800612a:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 800612e:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006130:	691d      	ldr	r5, [r3, #16]
 8006132:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8006136:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 800613a:	ea45 050c 	orr.w	r5, r5, ip
 800613e:	611d      	str	r5, [r3, #16]
 8006140:	e7d9      	b.n	80060f6 <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8006142:	69cb      	ldr	r3, [r1, #28]
 8006144:	b11b      	cbz	r3, 800614e <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006146:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800614a:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 800614e:	790b      	ldrb	r3, [r1, #4]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d008      	beq.n	8006166 <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006154:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8006158:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800615c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006160:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8006164:	e77d      	b.n	8006062 <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006166:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800616a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800616e:	d108      	bne.n	8006182 <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006170:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8006174:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8006178:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800617c:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8006180:	e7e8      	b.n	8006154 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006182:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8006186:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 800618a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800618e:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8006192:	e7df      	b.n	8006154 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006194:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8006198:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800619c:	d10c      	bne.n	80061b8 <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800619e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80061a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061a6:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061aa:	9200      	str	r2, [sp, #0]
 80061ac:	8a0b      	ldrh	r3, [r1, #16]
 80061ae:	780a      	ldrb	r2, [r1, #0]
 80061b0:	68c9      	ldr	r1, [r1, #12]
 80061b2:	f7ff ff0e 	bl	8005fd2 <USB_WritePacket>
 80061b6:	e754      	b.n	8006062 <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061b8:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80061bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061c0:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 80061c4:	e7f1      	b.n	80061aa <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 80061c6:	690c      	ldr	r4, [r1, #16]
 80061c8:	b954      	cbnz	r4, 80061e0 <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80061ca:	691c      	ldr	r4, [r3, #16]
 80061cc:	688d      	ldr	r5, [r1, #8]
 80061ce:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80061d2:	432c      	orrs	r4, r5
 80061d4:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061d6:	691c      	ldr	r4, [r3, #16]
 80061d8:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 80061dc:	611c      	str	r4, [r3, #16]
 80061de:	e733      	b.n	8006048 <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061e0:	688d      	ldr	r5, [r1, #8]
 80061e2:	442c      	add	r4, r5
 80061e4:	3c01      	subs	r4, #1
 80061e6:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 80061ea:	b2a4      	uxth	r4, r4
 80061ec:	fb04 f505 	mul.w	r5, r4, r5
 80061f0:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80061f2:	691d      	ldr	r5, [r3, #16]
 80061f4:	4e12      	ldr	r6, [pc, #72]	@ (8006240 <USB_EPStartXfer+0x240>)
 80061f6:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 80061fa:	432c      	orrs	r4, r5
 80061fc:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80061fe:	691c      	ldr	r4, [r3, #16]
 8006200:	6a0d      	ldr	r5, [r1, #32]
 8006202:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8006206:	432c      	orrs	r4, r5
 8006208:	611c      	str	r4, [r3, #16]
 800620a:	e71d      	b.n	8006048 <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 800620c:	68ca      	ldr	r2, [r1, #12]
 800620e:	2a00      	cmp	r2, #0
 8006210:	f43f af1d 	beq.w	800604e <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006214:	615a      	str	r2, [r3, #20]
 8006216:	e71a      	b.n	800604e <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006218:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800621c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006220:	d106      	bne.n	8006230 <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006222:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8006226:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800622a:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 800622e:	e712      	b.n	8006056 <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006230:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8006234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006238:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 800623c:	e70b      	b.n	8006056 <USB_EPStartXfer+0x56>
 800623e:	bf00      	nop
 8006240:	1ff80000 	.word	0x1ff80000

08006244 <USB_ReadPacket>:
{
 8006244:	b510      	push	{r4, lr}
 8006246:	4684      	mov	ip, r0
 8006248:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 800624a:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 800624e:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8006252:	2300      	movs	r3, #0
 8006254:	e005      	b.n	8006262 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006256:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 800625a:	6809      	ldr	r1, [r1, #0]
 800625c:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8006260:	3301      	adds	r3, #1
 8006262:	4573      	cmp	r3, lr
 8006264:	d3f7      	bcc.n	8006256 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8006266:	b17a      	cbz	r2, 8006288 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006268:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 800626c:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8006270:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006272:	b2cb      	uxtb	r3, r1
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	fa24 f303 	lsr.w	r3, r4, r3
 800627a:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 800627e:	3101      	adds	r1, #1
      remaining_bytes--;
 8006280:	3a01      	subs	r2, #1
 8006282:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8006284:	2a00      	cmp	r2, #0
 8006286:	d1f4      	bne.n	8006272 <USB_ReadPacket+0x2e>
}
 8006288:	bd10      	pop	{r4, pc}

0800628a <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800628a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800628c:	784a      	ldrb	r2, [r1, #1]
 800628e:	2a01      	cmp	r2, #1
 8006290:	d014      	beq.n	80062bc <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006292:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006296:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800629a:	2a00      	cmp	r2, #0
 800629c:	db06      	blt.n	80062ac <USB_EPSetStall+0x22>
 800629e:	b12b      	cbz	r3, 80062ac <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80062a0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80062a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80062a8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80062ac:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80062b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80062b4:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 80062b8:	2000      	movs	r0, #0
 80062ba:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062bc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80062c0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 80062c4:	2a00      	cmp	r2, #0
 80062c6:	db06      	blt.n	80062d6 <USB_EPSetStall+0x4c>
 80062c8:	b12b      	cbz	r3, 80062d6 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80062ca:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80062ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80062d2:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80062d6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80062da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80062de:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80062e2:	e7e9      	b.n	80062b8 <USB_EPSetStall+0x2e>

080062e4 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80062e4:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80062e6:	784a      	ldrb	r2, [r1, #1]
 80062e8:	2a01      	cmp	r2, #1
 80062ea:	d00e      	beq.n	800630a <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062ec:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80062f0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80062f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80062f8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062fc:	790b      	ldrb	r3, [r1, #4]
 80062fe:	3b02      	subs	r3, #2
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b01      	cmp	r3, #1
 8006304:	d915      	bls.n	8006332 <USB_EPClearStall+0x4e>
}
 8006306:	2000      	movs	r0, #0
 8006308:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800630a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800630e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8006312:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006316:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800631a:	790b      	ldrb	r3, [r1, #4]
 800631c:	3b02      	subs	r3, #2
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b01      	cmp	r3, #1
 8006322:	d8f0      	bhi.n	8006306 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006324:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8006328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800632c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8006330:	e7e9      	b.n	8006306 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006332:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8006336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800633a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 800633e:	e7e2      	b.n	8006306 <USB_EPClearStall+0x22>

08006340 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006340:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8006344:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006348:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800634c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8006350:	0109      	lsls	r1, r1, #4
 8006352:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8006356:	430b      	orrs	r3, r1
 8006358:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 800635c:	2000      	movs	r0, #0
 800635e:	4770      	bx	lr

08006360 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006360:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8006364:	f023 0303 	bic.w	r3, r3, #3
 8006368:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800636c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8006370:	f023 0302 	bic.w	r3, r3, #2
 8006374:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8006378:	2000      	movs	r0, #0
 800637a:	4770      	bx	lr

0800637c <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800637c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8006380:	f023 0303 	bic.w	r3, r3, #3
 8006384:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006388:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800638c:	f043 0302 	orr.w	r3, r3, #2
 8006390:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8006394:	2000      	movs	r0, #0
 8006396:	4770      	bx	lr

08006398 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8006398:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800639a:	6980      	ldr	r0, [r0, #24]
}
 800639c:	4010      	ands	r0, r2
 800639e:	4770      	bx	lr

080063a0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80063a0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 80063a4:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063a8:	69c0      	ldr	r0, [r0, #28]
 80063aa:	4018      	ands	r0, r3
}
 80063ac:	0c00      	lsrs	r0, r0, #16
 80063ae:	4770      	bx	lr

080063b0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80063b0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 80063b4:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063b8:	69c0      	ldr	r0, [r0, #28]
 80063ba:	4018      	ands	r0, r3
}
 80063bc:	b280      	uxth	r0, r0
 80063be:	4770      	bx	lr

080063c0 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80063c0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80063c4:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80063c8:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 80063cc:	6940      	ldr	r0, [r0, #20]
}
 80063ce:	4010      	ands	r0, r2
 80063d0:	4770      	bx	lr

080063d2 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 80063d2:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80063d6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80063da:	f001 0c0f 	and.w	ip, r1, #15
 80063de:	fa23 f30c 	lsr.w	r3, r3, ip
 80063e2:	01db      	lsls	r3, r3, #7
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063e8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80063ec:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 80063f0:	6880      	ldr	r0, [r0, #8]
}
 80063f2:	4018      	ands	r0, r3
 80063f4:	4770      	bx	lr

080063f6 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80063f6:	6940      	ldr	r0, [r0, #20]
}
 80063f8:	f000 0001 	and.w	r0, r0, #1
 80063fc:	4770      	bx	lr

080063fe <USB_SetCurrentMode>:
{
 80063fe:	b538      	push	{r3, r4, r5, lr}
 8006400:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006402:	68c3      	ldr	r3, [r0, #12]
 8006404:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006408:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800640a:	2901      	cmp	r1, #1
 800640c:	d013      	beq.n	8006436 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 800640e:	bb19      	cbnz	r1, 8006458 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006410:	68c3      	ldr	r3, [r0, #12]
 8006412:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006416:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8006418:	2400      	movs	r4, #0
      HAL_Delay(10U);
 800641a:	200a      	movs	r0, #10
 800641c:	f7fc fcda 	bl	8002dd4 <HAL_Delay>
      ms += 10U;
 8006420:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006422:	4628      	mov	r0, r5
 8006424:	f7ff ffe7 	bl	80063f6 <USB_GetMode>
 8006428:	b108      	cbz	r0, 800642e <USB_SetCurrentMode+0x30>
 800642a:	2cc7      	cmp	r4, #199	@ 0xc7
 800642c:	d9f5      	bls.n	800641a <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800642e:	2cc8      	cmp	r4, #200	@ 0xc8
 8006430:	d014      	beq.n	800645c <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8006432:	2000      	movs	r0, #0
}
 8006434:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006436:	68c3      	ldr	r3, [r0, #12]
 8006438:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800643c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800643e:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8006440:	200a      	movs	r0, #10
 8006442:	f7fc fcc7 	bl	8002dd4 <HAL_Delay>
      ms += 10U;
 8006446:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006448:	4628      	mov	r0, r5
 800644a:	f7ff ffd4 	bl	80063f6 <USB_GetMode>
 800644e:	2801      	cmp	r0, #1
 8006450:	d0ed      	beq.n	800642e <USB_SetCurrentMode+0x30>
 8006452:	2cc7      	cmp	r4, #199	@ 0xc7
 8006454:	d9f4      	bls.n	8006440 <USB_SetCurrentMode+0x42>
 8006456:	e7ea      	b.n	800642e <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8006458:	2001      	movs	r0, #1
 800645a:	e7eb      	b.n	8006434 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 800645c:	2001      	movs	r0, #1
 800645e:	e7e9      	b.n	8006434 <USB_SetCurrentMode+0x36>

08006460 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006460:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8006464:	f36f 030a 	bfc	r3, #0, #11
 8006468:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800646c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8006470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006474:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8006478:	2000      	movs	r0, #0
 800647a:	4770      	bx	lr

0800647c <USB_EP0_OutStart>:
{
 800647c:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800647e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006480:	4b15      	ldr	r3, [pc, #84]	@ (80064d8 <USB_EP0_OutStart+0x5c>)
 8006482:	429c      	cmp	r4, r3
 8006484:	d903      	bls.n	800648e <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006486:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800648a:	2b00      	cmp	r3, #0
 800648c:	db16      	blt.n	80064bc <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800648e:	2400      	movs	r4, #0
 8006490:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006494:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8006498:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800649c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064a0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 80064a4:	f044 0418 	orr.w	r4, r4, #24
 80064a8:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064ac:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 80064b0:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 80064b4:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 80064b8:	2901      	cmp	r1, #1
 80064ba:	d003      	beq.n	80064c4 <USB_EP0_OutStart+0x48>
}
 80064bc:	2000      	movs	r0, #0
 80064be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064c2:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064c4:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064c8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80064cc:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80064d0:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 80064d4:	e7f2      	b.n	80064bc <USB_EP0_OutStart+0x40>
 80064d6:	bf00      	nop
 80064d8:	4f54300a 	.word	0x4f54300a

080064dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80064dc:	b510      	push	{r4, lr}
 80064de:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80064e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006514 <_sbrk+0x38>)
 80064e2:	490d      	ldr	r1, [pc, #52]	@ (8006518 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80064e4:	480d      	ldr	r0, [pc, #52]	@ (800651c <_sbrk+0x40>)
 80064e6:	6800      	ldr	r0, [r0, #0]
 80064e8:	b140      	cbz	r0, 80064fc <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80064ea:	480c      	ldr	r0, [pc, #48]	@ (800651c <_sbrk+0x40>)
 80064ec:	6800      	ldr	r0, [r0, #0]
 80064ee:	4403      	add	r3, r0
 80064f0:	1a52      	subs	r2, r2, r1
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d806      	bhi.n	8006504 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80064f6:	4a09      	ldr	r2, [pc, #36]	@ (800651c <_sbrk+0x40>)
 80064f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80064fa:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80064fc:	4807      	ldr	r0, [pc, #28]	@ (800651c <_sbrk+0x40>)
 80064fe:	4c08      	ldr	r4, [pc, #32]	@ (8006520 <_sbrk+0x44>)
 8006500:	6004      	str	r4, [r0, #0]
 8006502:	e7f2      	b.n	80064ea <_sbrk+0xe>
    errno = ENOMEM;
 8006504:	f002 ff4e 	bl	80093a4 <__errno>
 8006508:	230c      	movs	r3, #12
 800650a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	e7f3      	b.n	80064fa <_sbrk+0x1e>
 8006512:	bf00      	nop
 8006514:	20010000 	.word	0x20010000
 8006518:	00000400 	.word	0x00000400
 800651c:	20004778 	.word	0x20004778
 8006520:	20006558 	.word	0x20006558

08006524 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006524:	4a03      	ldr	r2, [pc, #12]	@ (8006534 <SystemInit+0x10>)
 8006526:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800652a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800652e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006532:	4770      	bx	lr
 8006534:	e000ed00 	.word	0xe000ed00

08006538 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006538:	4b08      	ldr	r3, [pc, #32]	@ (800655c <prvResetNextTaskUnblockTime+0x24>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	b923      	cbnz	r3, 800654a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006540:	4b07      	ldr	r3, [pc, #28]	@ (8006560 <prvResetNextTaskUnblockTime+0x28>)
 8006542:	f04f 32ff 	mov.w	r2, #4294967295
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800654a:	4b04      	ldr	r3, [pc, #16]	@ (800655c <prvResetNextTaskUnblockTime+0x24>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	4b02      	ldr	r3, [pc, #8]	@ (8006560 <prvResetNextTaskUnblockTime+0x28>)
 8006556:	601a      	str	r2, [r3, #0]
	}
}
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	200047ec 	.word	0x200047ec
 8006560:	20004784 	.word	0x20004784

08006564 <prvInitialiseNewTask>:
{
 8006564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006568:	4680      	mov	r8, r0
 800656a:	460d      	mov	r5, r1
 800656c:	4617      	mov	r7, r2
 800656e:	4699      	mov	r9, r3
 8006570:	9e08      	ldr	r6, [sp, #32]
 8006572:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8006576:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006578:	0092      	lsls	r2, r2, #2
 800657a:	21a5      	movs	r1, #165	@ 0xa5
 800657c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800657e:	f002 ff09 	bl	8009394 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006582:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006584:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8006588:	3a01      	subs	r2, #1
 800658a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800658e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8006592:	b3a5      	cbz	r5, 80065fe <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006594:	f04f 0c00 	mov.w	ip, #0
 8006598:	f1bc 0f0f 	cmp.w	ip, #15
 800659c:	d809      	bhi.n	80065b2 <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800659e:	f815 300c 	ldrb.w	r3, [r5, ip]
 80065a2:	eb04 020c 	add.w	r2, r4, ip
 80065a6:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80065aa:	b113      	cbz	r3, 80065b2 <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065ac:	f10c 0c01 	add.w	ip, ip, #1
 80065b0:	e7f2      	b.n	8006598 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065b2:	2300      	movs	r3, #0
 80065b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065b8:	2e37      	cmp	r6, #55	@ 0x37
 80065ba:	d900      	bls.n	80065be <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065bc:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 80065be:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80065c0:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80065c2:	2500      	movs	r5, #0
 80065c4:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065c6:	1d20      	adds	r0, r4, #4
 80065c8:	f7fb fcf3 	bl	8001fb2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065cc:	f104 0018 	add.w	r0, r4, #24
 80065d0:	f7fb fcef 	bl	8001fb2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065d4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065d6:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 80065da:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065dc:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80065de:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065e0:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065e4:	464a      	mov	r2, r9
 80065e6:	4641      	mov	r1, r8
 80065e8:	4638      	mov	r0, r7
 80065ea:	f7fb fe77 	bl	80022dc <pxPortInitialiseStack>
 80065ee:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80065f0:	f1ba 0f00 	cmp.w	sl, #0
 80065f4:	d001      	beq.n	80065fa <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065f6:	f8ca 4000 	str.w	r4, [sl]
}
 80065fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065fe:	2300      	movs	r3, #0
 8006600:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8006604:	e7d8      	b.n	80065b8 <prvInitialiseNewTask+0x54>
	...

08006608 <prvInitialiseTaskLists>:
{
 8006608:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800660a:	2400      	movs	r4, #0
 800660c:	e007      	b.n	800661e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800660e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8006612:	0093      	lsls	r3, r2, #2
 8006614:	480e      	ldr	r0, [pc, #56]	@ (8006650 <prvInitialiseTaskLists+0x48>)
 8006616:	4418      	add	r0, r3
 8006618:	f7fb fcc0 	bl	8001f9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800661c:	3401      	adds	r4, #1
 800661e:	2c37      	cmp	r4, #55	@ 0x37
 8006620:	d9f5      	bls.n	800660e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8006622:	4d0c      	ldr	r5, [pc, #48]	@ (8006654 <prvInitialiseTaskLists+0x4c>)
 8006624:	4628      	mov	r0, r5
 8006626:	f7fb fcb9 	bl	8001f9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800662a:	4c0b      	ldr	r4, [pc, #44]	@ (8006658 <prvInitialiseTaskLists+0x50>)
 800662c:	4620      	mov	r0, r4
 800662e:	f7fb fcb5 	bl	8001f9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006632:	480a      	ldr	r0, [pc, #40]	@ (800665c <prvInitialiseTaskLists+0x54>)
 8006634:	f7fb fcb2 	bl	8001f9c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006638:	4809      	ldr	r0, [pc, #36]	@ (8006660 <prvInitialiseTaskLists+0x58>)
 800663a:	f7fb fcaf 	bl	8001f9c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800663e:	4809      	ldr	r0, [pc, #36]	@ (8006664 <prvInitialiseTaskLists+0x5c>)
 8006640:	f7fb fcac 	bl	8001f9c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006644:	4b08      	ldr	r3, [pc, #32]	@ (8006668 <prvInitialiseTaskLists+0x60>)
 8006646:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006648:	4b08      	ldr	r3, [pc, #32]	@ (800666c <prvInitialiseTaskLists+0x64>)
 800664a:	601c      	str	r4, [r3, #0]
}
 800664c:	bd38      	pop	{r3, r4, r5, pc}
 800664e:	bf00      	nop
 8006650:	20004818 	.word	0x20004818
 8006654:	20004804 	.word	0x20004804
 8006658:	200047f0 	.word	0x200047f0
 800665c:	200047d4 	.word	0x200047d4
 8006660:	200047c0 	.word	0x200047c0
 8006664:	200047a8 	.word	0x200047a8
 8006668:	200047ec 	.word	0x200047ec
 800666c:	200047e8 	.word	0x200047e8

08006670 <prvAddNewTaskToReadyList>:
{
 8006670:	b510      	push	{r4, lr}
 8006672:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006674:	f7fb fe5e 	bl	8002334 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006678:	4a22      	ldr	r2, [pc, #136]	@ (8006704 <prvAddNewTaskToReadyList+0x94>)
 800667a:	6813      	ldr	r3, [r2, #0]
 800667c:	3301      	adds	r3, #1
 800667e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006680:	4b21      	ldr	r3, [pc, #132]	@ (8006708 <prvAddNewTaskToReadyList+0x98>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	b15b      	cbz	r3, 800669e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8006686:	4b21      	ldr	r3, [pc, #132]	@ (800670c <prvAddNewTaskToReadyList+0x9c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	b96b      	cbnz	r3, 80066a8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800668c:	4b1e      	ldr	r3, [pc, #120]	@ (8006708 <prvAddNewTaskToReadyList+0x98>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006692:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006694:	429a      	cmp	r2, r3
 8006696:	d807      	bhi.n	80066a8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8006698:	4b1b      	ldr	r3, [pc, #108]	@ (8006708 <prvAddNewTaskToReadyList+0x98>)
 800669a:	601c      	str	r4, [r3, #0]
 800669c:	e004      	b.n	80066a8 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800669e:	4b1a      	ldr	r3, [pc, #104]	@ (8006708 <prvAddNewTaskToReadyList+0x98>)
 80066a0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066a2:	6813      	ldr	r3, [r2, #0]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d029      	beq.n	80066fc <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 80066a8:	4a19      	ldr	r2, [pc, #100]	@ (8006710 <prvAddNewTaskToReadyList+0xa0>)
 80066aa:	6813      	ldr	r3, [r2, #0]
 80066ac:	3301      	adds	r3, #1
 80066ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066b0:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80066b2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80066b4:	4b17      	ldr	r3, [pc, #92]	@ (8006714 <prvAddNewTaskToReadyList+0xa4>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4298      	cmp	r0, r3
 80066ba:	d901      	bls.n	80066c0 <prvAddNewTaskToReadyList+0x50>
 80066bc:	4b15      	ldr	r3, [pc, #84]	@ (8006714 <prvAddNewTaskToReadyList+0xa4>)
 80066be:	6018      	str	r0, [r3, #0]
 80066c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80066c4:	1d21      	adds	r1, r4, #4
 80066c6:	4b14      	ldr	r3, [pc, #80]	@ (8006718 <prvAddNewTaskToReadyList+0xa8>)
 80066c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80066cc:	f7fb fc74 	bl	8001fb8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80066d0:	f7fb fe52 	bl	8002378 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80066d4:	4b0d      	ldr	r3, [pc, #52]	@ (800670c <prvAddNewTaskToReadyList+0x9c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	b17b      	cbz	r3, 80066fa <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066da:	4b0b      	ldr	r3, [pc, #44]	@ (8006708 <prvAddNewTaskToReadyList+0x98>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d209      	bcs.n	80066fa <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 80066e6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80066ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	f3bf 8f6f 	isb	sy
}
 80066fa:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80066fc:	f7ff ff84 	bl	8006608 <prvInitialiseTaskLists>
 8006700:	e7d2      	b.n	80066a8 <prvAddNewTaskToReadyList+0x38>
 8006702:	bf00      	nop
 8006704:	200047a4 	.word	0x200047a4
 8006708:	20004c78 	.word	0x20004c78
 800670c:	20004798 	.word	0x20004798
 8006710:	20004788 	.word	0x20004788
 8006714:	2000479c 	.word	0x2000479c
 8006718:	20004818 	.word	0x20004818

0800671c <prvDeleteTCB>:
	{
 800671c:	b510      	push	{r4, lr}
 800671e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006720:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 8006724:	b163      	cbz	r3, 8006740 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006726:	2b01      	cmp	r3, #1
 8006728:	d011      	beq.n	800674e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800672a:	2b02      	cmp	r3, #2
 800672c:	d00e      	beq.n	800674c <prvDeleteTCB+0x30>
 800672e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	e7fe      	b.n	800673e <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8006740:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8006742:	f7fb fa5d 	bl	8001c00 <vPortFree>
				vPortFree( pxTCB );
 8006746:	4620      	mov	r0, r4
 8006748:	f7fb fa5a 	bl	8001c00 <vPortFree>
	}
 800674c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800674e:	f7fb fa57 	bl	8001c00 <vPortFree>
 8006752:	e7fb      	b.n	800674c <prvDeleteTCB+0x30>

08006754 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006754:	4b0f      	ldr	r3, [pc, #60]	@ (8006794 <prvCheckTasksWaitingTermination+0x40>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	b1d3      	cbz	r3, 8006790 <prvCheckTasksWaitingTermination+0x3c>
{
 800675a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800675c:	f7fb fdea 	bl	8002334 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006760:	4b0d      	ldr	r3, [pc, #52]	@ (8006798 <prvCheckTasksWaitingTermination+0x44>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006766:	1d20      	adds	r0, r4, #4
 8006768:	f7fb fc4a 	bl	8002000 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800676c:	4a0b      	ldr	r2, [pc, #44]	@ (800679c <prvCheckTasksWaitingTermination+0x48>)
 800676e:	6813      	ldr	r3, [r2, #0]
 8006770:	3b01      	subs	r3, #1
 8006772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006774:	4a07      	ldr	r2, [pc, #28]	@ (8006794 <prvCheckTasksWaitingTermination+0x40>)
 8006776:	6813      	ldr	r3, [r2, #0]
 8006778:	3b01      	subs	r3, #1
 800677a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800677c:	f7fb fdfc 	bl	8002378 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006780:	4620      	mov	r0, r4
 8006782:	f7ff ffcb 	bl	800671c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006786:	4b03      	ldr	r3, [pc, #12]	@ (8006794 <prvCheckTasksWaitingTermination+0x40>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e6      	bne.n	800675c <prvCheckTasksWaitingTermination+0x8>
}
 800678e:	bd10      	pop	{r4, pc}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	200047bc 	.word	0x200047bc
 8006798:	200047c0 	.word	0x200047c0
 800679c:	200047a4 	.word	0x200047a4

080067a0 <prvIdleTask>:
{
 80067a0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80067a2:	f7ff ffd7 	bl	8006754 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067a6:	4b07      	ldr	r3, [pc, #28]	@ (80067c4 <prvIdleTask+0x24>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d9f9      	bls.n	80067a2 <prvIdleTask+0x2>
				taskYIELD();
 80067ae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80067b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	e7ee      	b.n	80067a2 <prvIdleTask+0x2>
 80067c4:	20004818 	.word	0x20004818

080067c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	4604      	mov	r4, r0
 80067cc:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067ce:	4b17      	ldr	r3, [pc, #92]	@ (800682c <prvAddCurrentTaskToDelayedList+0x64>)
 80067d0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067d2:	4b17      	ldr	r3, [pc, #92]	@ (8006830 <prvAddCurrentTaskToDelayedList+0x68>)
 80067d4:	6818      	ldr	r0, [r3, #0]
 80067d6:	3004      	adds	r0, #4
 80067d8:	f7fb fc12 	bl	8002000 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067dc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80067e0:	d00d      	beq.n	80067fe <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067e2:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067e4:	4b12      	ldr	r3, [pc, #72]	@ (8006830 <prvAddCurrentTaskToDelayedList+0x68>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80067ea:	42a6      	cmp	r6, r4
 80067ec:	d910      	bls.n	8006810 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ee:	4b11      	ldr	r3, [pc, #68]	@ (8006834 <prvAddCurrentTaskToDelayedList+0x6c>)
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006830 <prvAddCurrentTaskToDelayedList+0x68>)
 80067f4:	6819      	ldr	r1, [r3, #0]
 80067f6:	3104      	adds	r1, #4
 80067f8:	f7fb fbe9 	bl	8001fce <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067fc:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067fe:	2d00      	cmp	r5, #0
 8006800:	d0ef      	beq.n	80067e2 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006802:	4b0b      	ldr	r3, [pc, #44]	@ (8006830 <prvAddCurrentTaskToDelayedList+0x68>)
 8006804:	6819      	ldr	r1, [r3, #0]
 8006806:	3104      	adds	r1, #4
 8006808:	480b      	ldr	r0, [pc, #44]	@ (8006838 <prvAddCurrentTaskToDelayedList+0x70>)
 800680a:	f7fb fbd5 	bl	8001fb8 <vListInsertEnd>
 800680e:	e7f5      	b.n	80067fc <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006810:	4b0a      	ldr	r3, [pc, #40]	@ (800683c <prvAddCurrentTaskToDelayedList+0x74>)
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	4b06      	ldr	r3, [pc, #24]	@ (8006830 <prvAddCurrentTaskToDelayedList+0x68>)
 8006816:	6819      	ldr	r1, [r3, #0]
 8006818:	3104      	adds	r1, #4
 800681a:	f7fb fbd8 	bl	8001fce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800681e:	4b08      	ldr	r3, [pc, #32]	@ (8006840 <prvAddCurrentTaskToDelayedList+0x78>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	42a3      	cmp	r3, r4
 8006824:	d9ea      	bls.n	80067fc <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8006826:	4b06      	ldr	r3, [pc, #24]	@ (8006840 <prvAddCurrentTaskToDelayedList+0x78>)
 8006828:	601c      	str	r4, [r3, #0]
}
 800682a:	e7e7      	b.n	80067fc <prvAddCurrentTaskToDelayedList+0x34>
 800682c:	200047a0 	.word	0x200047a0
 8006830:	20004c78 	.word	0x20004c78
 8006834:	200047e8 	.word	0x200047e8
 8006838:	200047a8 	.word	0x200047a8
 800683c:	200047ec 	.word	0x200047ec
 8006840:	20004784 	.word	0x20004784

08006844 <xTaskCreateStatic>:
	{
 8006844:	b530      	push	{r4, r5, lr}
 8006846:	b087      	sub	sp, #28
 8006848:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800684a:	b17c      	cbz	r4, 800686c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800684c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800684e:	b1b5      	cbz	r5, 800687e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006850:	255c      	movs	r5, #92	@ 0x5c
 8006852:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006854:	9d04      	ldr	r5, [sp, #16]
 8006856:	2d5c      	cmp	r5, #92	@ 0x5c
 8006858:	d01a      	beq.n	8006890 <xTaskCreateStatic+0x4c>
 800685a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	e7fe      	b.n	800686a <xTaskCreateStatic+0x26>
 800686c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800687c:	e7fe      	b.n	800687c <xTaskCreateStatic+0x38>
 800687e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800688e:	e7fe      	b.n	800688e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006890:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006892:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8006894:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006896:	2402      	movs	r4, #2
 8006898:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800689c:	2400      	movs	r4, #0
 800689e:	9403      	str	r4, [sp, #12]
 80068a0:	9502      	str	r5, [sp, #8]
 80068a2:	ac05      	add	r4, sp, #20
 80068a4:	9401      	str	r4, [sp, #4]
 80068a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068a8:	9400      	str	r4, [sp, #0]
 80068aa:	f7ff fe5b 	bl	8006564 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068ae:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80068b0:	f7ff fede 	bl	8006670 <prvAddNewTaskToReadyList>
	}
 80068b4:	9805      	ldr	r0, [sp, #20]
 80068b6:	b007      	add	sp, #28
 80068b8:	bd30      	pop	{r4, r5, pc}

080068ba <xTaskCreate>:
	{
 80068ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068be:	b085      	sub	sp, #20
 80068c0:	4607      	mov	r7, r0
 80068c2:	4688      	mov	r8, r1
 80068c4:	4614      	mov	r4, r2
 80068c6:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068c8:	0090      	lsls	r0, r2, #2
 80068ca:	f7fb f917 	bl	8001afc <pvPortMalloc>
			if( pxStack != NULL )
 80068ce:	b308      	cbz	r0, 8006914 <xTaskCreate+0x5a>
 80068d0:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068d2:	205c      	movs	r0, #92	@ 0x5c
 80068d4:	f7fb f912 	bl	8001afc <pvPortMalloc>
				if( pxNewTCB != NULL )
 80068d8:	4605      	mov	r5, r0
 80068da:	b1a8      	cbz	r0, 8006908 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80068dc:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068e0:	2300      	movs	r3, #0
 80068e2:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068e6:	9303      	str	r3, [sp, #12]
 80068e8:	9002      	str	r0, [sp, #8]
 80068ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	4633      	mov	r3, r6
 80068f4:	4622      	mov	r2, r4
 80068f6:	4641      	mov	r1, r8
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7ff fe33 	bl	8006564 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068fe:	4628      	mov	r0, r5
 8006900:	f7ff feb6 	bl	8006670 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006904:	2001      	movs	r0, #1
 8006906:	e007      	b.n	8006918 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8006908:	4648      	mov	r0, r9
 800690a:	f7fb f979 	bl	8001c00 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800690e:	f04f 30ff 	mov.w	r0, #4294967295
 8006912:	e001      	b.n	8006918 <xTaskCreate+0x5e>
 8006914:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006918:	b005      	add	sp, #20
 800691a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08006920 <vTaskStartScheduler>:
{
 8006920:	b510      	push	{r4, lr}
 8006922:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006924:	2400      	movs	r4, #0
 8006926:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006928:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800692a:	aa07      	add	r2, sp, #28
 800692c:	a906      	add	r1, sp, #24
 800692e:	a805      	add	r0, sp, #20
 8006930:	f7fa fc28 	bl	8001184 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006934:	9b05      	ldr	r3, [sp, #20]
 8006936:	9302      	str	r3, [sp, #8]
 8006938:	9b06      	ldr	r3, [sp, #24]
 800693a:	9301      	str	r3, [sp, #4]
 800693c:	9400      	str	r4, [sp, #0]
 800693e:	4623      	mov	r3, r4
 8006940:	9a07      	ldr	r2, [sp, #28]
 8006942:	4917      	ldr	r1, [pc, #92]	@ (80069a0 <vTaskStartScheduler+0x80>)
 8006944:	4817      	ldr	r0, [pc, #92]	@ (80069a4 <vTaskStartScheduler+0x84>)
 8006946:	f7ff ff7d 	bl	8006844 <xTaskCreateStatic>
 800694a:	4b17      	ldr	r3, [pc, #92]	@ (80069a8 <vTaskStartScheduler+0x88>)
 800694c:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800694e:	b1c0      	cbz	r0, 8006982 <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 8006950:	f000 fd24 	bl	800739c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006954:	2801      	cmp	r0, #1
 8006956:	d115      	bne.n	8006984 <vTaskStartScheduler+0x64>
 8006958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006968:	4b10      	ldr	r3, [pc, #64]	@ (80069ac <vTaskStartScheduler+0x8c>)
 800696a:	f04f 32ff 	mov.w	r2, #4294967295
 800696e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006970:	4b0f      	ldr	r3, [pc, #60]	@ (80069b0 <vTaskStartScheduler+0x90>)
 8006972:	2201      	movs	r2, #1
 8006974:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006976:	4b0f      	ldr	r3, [pc, #60]	@ (80069b4 <vTaskStartScheduler+0x94>)
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800697c:	f7fb fd74 	bl	8002468 <xPortStartScheduler>
		}
 8006980:	e003      	b.n	800698a <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 8006982:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006984:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006988:	d001      	beq.n	800698e <vTaskStartScheduler+0x6e>
}
 800698a:	b008      	add	sp, #32
 800698c:	bd10      	pop	{r4, pc}
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800699e:	e7fe      	b.n	800699e <vTaskStartScheduler+0x7e>
 80069a0:	0800a190 	.word	0x0800a190
 80069a4:	080067a1 	.word	0x080067a1
 80069a8:	20004780 	.word	0x20004780
 80069ac:	20004784 	.word	0x20004784
 80069b0:	20004798 	.word	0x20004798
 80069b4:	200047a0 	.word	0x200047a0

080069b8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80069b8:	4a02      	ldr	r2, [pc, #8]	@ (80069c4 <vTaskSuspendAll+0xc>)
 80069ba:	6813      	ldr	r3, [r2, #0]
 80069bc:	3301      	adds	r3, #1
 80069be:	6013      	str	r3, [r2, #0]
}
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	2000477c 	.word	0x2000477c

080069c8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80069c8:	4b01      	ldr	r3, [pc, #4]	@ (80069d0 <xTaskGetTickCount+0x8>)
 80069ca:	6818      	ldr	r0, [r3, #0]
}
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	200047a0 	.word	0x200047a0

080069d4 <xTaskIncrementTick>:
{
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069d6:	4b3a      	ldr	r3, [pc, #232]	@ (8006ac0 <xTaskIncrementTick+0xec>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d169      	bne.n	8006ab2 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069de:	4b39      	ldr	r3, [pc, #228]	@ (8006ac4 <xTaskIncrementTick+0xf0>)
 80069e0:	681d      	ldr	r5, [r3, #0]
 80069e2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80069e4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069e6:	b9c5      	cbnz	r5, 8006a1a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80069e8:	4b37      	ldr	r3, [pc, #220]	@ (8006ac8 <xTaskIncrementTick+0xf4>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	b143      	cbz	r3, 8006a02 <xTaskIncrementTick+0x2e>
 80069f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	e7fe      	b.n	8006a00 <xTaskIncrementTick+0x2c>
 8006a02:	4a31      	ldr	r2, [pc, #196]	@ (8006ac8 <xTaskIncrementTick+0xf4>)
 8006a04:	6811      	ldr	r1, [r2, #0]
 8006a06:	4b31      	ldr	r3, [pc, #196]	@ (8006acc <xTaskIncrementTick+0xf8>)
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	6010      	str	r0, [r2, #0]
 8006a0c:	6019      	str	r1, [r3, #0]
 8006a0e:	4a30      	ldr	r2, [pc, #192]	@ (8006ad0 <xTaskIncrementTick+0xfc>)
 8006a10:	6813      	ldr	r3, [r2, #0]
 8006a12:	3301      	adds	r3, #1
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	f7ff fd8f 	bl	8006538 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8006ad4 <xTaskIncrementTick+0x100>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	42ab      	cmp	r3, r5
 8006a20:	d93d      	bls.n	8006a9e <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8006a22:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a24:	4b2c      	ldr	r3, [pc, #176]	@ (8006ad8 <xTaskIncrementTick+0x104>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006a2e:	009a      	lsls	r2, r3, #2
 8006a30:	4b2a      	ldr	r3, [pc, #168]	@ (8006adc <xTaskIncrementTick+0x108>)
 8006a32:	589b      	ldr	r3, [r3, r2]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d900      	bls.n	8006a3a <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8006a38:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8006a3a:	4b29      	ldr	r3, [pc, #164]	@ (8006ae0 <xTaskIncrementTick+0x10c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d03c      	beq.n	8006abc <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8006a42:	2701      	movs	r7, #1
	return xSwitchRequired;
 8006a44:	e03a      	b.n	8006abc <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8006a46:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a48:	4b1f      	ldr	r3, [pc, #124]	@ (8006ac8 <xTaskIncrementTick+0xf4>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	b343      	cbz	r3, 8006aa2 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a50:	4b1d      	ldr	r3, [pc, #116]	@ (8006ac8 <xTaskIncrementTick+0xf4>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a58:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8006a5a:	429d      	cmp	r5, r3
 8006a5c:	d326      	bcc.n	8006aac <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a5e:	1d26      	adds	r6, r4, #4
 8006a60:	4630      	mov	r0, r6
 8006a62:	f7fb facd 	bl	8002000 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a66:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006a68:	b11b      	cbz	r3, 8006a72 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a6a:	f104 0018 	add.w	r0, r4, #24
 8006a6e:	f7fb fac7 	bl	8002000 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a72:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006a74:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae4 <xTaskIncrementTick+0x110>)
 8006a76:	6812      	ldr	r2, [r2, #0]
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d901      	bls.n	8006a80 <xTaskIncrementTick+0xac>
 8006a7c:	4a19      	ldr	r2, [pc, #100]	@ (8006ae4 <xTaskIncrementTick+0x110>)
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006a84:	009a      	lsls	r2, r3, #2
 8006a86:	4631      	mov	r1, r6
 8006a88:	4814      	ldr	r0, [pc, #80]	@ (8006adc <xTaskIncrementTick+0x108>)
 8006a8a:	4410      	add	r0, r2
 8006a8c:	f7fb fa94 	bl	8001fb8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a90:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006a92:	4b11      	ldr	r3, [pc, #68]	@ (8006ad8 <xTaskIncrementTick+0x104>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d2d4      	bcs.n	8006a46 <xTaskIncrementTick+0x72>
 8006a9c:	e7d4      	b.n	8006a48 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8006a9e:	2700      	movs	r7, #0
 8006aa0:	e7d2      	b.n	8006a48 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad4 <xTaskIncrementTick+0x100>)
 8006aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa8:	601a      	str	r2, [r3, #0]
					break;
 8006aaa:	e7bb      	b.n	8006a24 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8006aac:	4a09      	ldr	r2, [pc, #36]	@ (8006ad4 <xTaskIncrementTick+0x100>)
 8006aae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ab0:	e7b8      	b.n	8006a24 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8006ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8006ae8 <xTaskIncrementTick+0x114>)
 8006ab4:	6813      	ldr	r3, [r2, #0]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006aba:	2700      	movs	r7, #0
}
 8006abc:	4638      	mov	r0, r7
 8006abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ac0:	2000477c 	.word	0x2000477c
 8006ac4:	200047a0 	.word	0x200047a0
 8006ac8:	200047ec 	.word	0x200047ec
 8006acc:	200047e8 	.word	0x200047e8
 8006ad0:	2000478c 	.word	0x2000478c
 8006ad4:	20004784 	.word	0x20004784
 8006ad8:	20004c78 	.word	0x20004c78
 8006adc:	20004818 	.word	0x20004818
 8006ae0:	20004790 	.word	0x20004790
 8006ae4:	2000479c 	.word	0x2000479c
 8006ae8:	20004794 	.word	0x20004794

08006aec <xTaskResumeAll>:
{
 8006aec:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8006aee:	4b35      	ldr	r3, [pc, #212]	@ (8006bc4 <xTaskResumeAll+0xd8>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	b943      	cbnz	r3, 8006b06 <xTaskResumeAll+0x1a>
 8006af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	e7fe      	b.n	8006b04 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8006b06:	f7fb fc15 	bl	8002334 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8006bc4 <xTaskResumeAll+0xd8>)
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	3a01      	subs	r2, #1
 8006b10:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d14f      	bne.n	8006bb8 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b18:	4b2b      	ldr	r3, [pc, #172]	@ (8006bc8 <xTaskResumeAll+0xdc>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	b90b      	cbnz	r3, 8006b22 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8006b1e:	2400      	movs	r4, #0
 8006b20:	e04b      	b.n	8006bba <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8006b22:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b24:	4b29      	ldr	r3, [pc, #164]	@ (8006bcc <xTaskResumeAll+0xe0>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	b31b      	cbz	r3, 8006b72 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b2a:	4b28      	ldr	r3, [pc, #160]	@ (8006bcc <xTaskResumeAll+0xe0>)
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b30:	f104 0018 	add.w	r0, r4, #24
 8006b34:	f7fb fa64 	bl	8002000 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b38:	1d25      	adds	r5, r4, #4
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f7fb fa60 	bl	8002000 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b40:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006b42:	4b23      	ldr	r3, [pc, #140]	@ (8006bd0 <xTaskResumeAll+0xe4>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4298      	cmp	r0, r3
 8006b48:	d901      	bls.n	8006b4e <xTaskResumeAll+0x62>
 8006b4a:	4b21      	ldr	r3, [pc, #132]	@ (8006bd0 <xTaskResumeAll+0xe4>)
 8006b4c:	6018      	str	r0, [r3, #0]
 8006b4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006b52:	4629      	mov	r1, r5
 8006b54:	4b1f      	ldr	r3, [pc, #124]	@ (8006bd4 <xTaskResumeAll+0xe8>)
 8006b56:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006b5a:	f7fb fa2d 	bl	8001fb8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b5e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006b60:	4b1d      	ldr	r3, [pc, #116]	@ (8006bd8 <xTaskResumeAll+0xec>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d3dc      	bcc.n	8006b24 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8006b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8006bdc <xTaskResumeAll+0xf0>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	e7d8      	b.n	8006b24 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8006b72:	b10c      	cbz	r4, 8006b78 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8006b74:	f7ff fce0 	bl	8006538 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b78:	4b19      	ldr	r3, [pc, #100]	@ (8006be0 <xTaskResumeAll+0xf4>)
 8006b7a:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8006b7c:	b984      	cbnz	r4, 8006ba0 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8006b7e:	4b17      	ldr	r3, [pc, #92]	@ (8006bdc <xTaskResumeAll+0xf0>)
 8006b80:	681c      	ldr	r4, [r3, #0]
 8006b82:	b1d4      	cbz	r4, 8006bba <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8006b84:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b8c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006b98:	2401      	movs	r4, #1
 8006b9a:	e00e      	b.n	8006bba <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b9c:	3c01      	subs	r4, #1
 8006b9e:	d007      	beq.n	8006bb0 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8006ba0:	f7ff ff18 	bl	80069d4 <xTaskIncrementTick>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d0f9      	beq.n	8006b9c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8006ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8006bdc <xTaskResumeAll+0xf0>)
 8006baa:	2201      	movs	r2, #1
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	e7f5      	b.n	8006b9c <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8006bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006be0 <xTaskResumeAll+0xf4>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	e7e2      	b.n	8006b7e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8006bb8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006bba:	f7fb fbdd 	bl	8002378 <vPortExitCritical>
}
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	bd38      	pop	{r3, r4, r5, pc}
 8006bc2:	bf00      	nop
 8006bc4:	2000477c 	.word	0x2000477c
 8006bc8:	200047a4 	.word	0x200047a4
 8006bcc:	200047d4 	.word	0x200047d4
 8006bd0:	2000479c 	.word	0x2000479c
 8006bd4:	20004818 	.word	0x20004818
 8006bd8:	20004c78 	.word	0x20004c78
 8006bdc:	20004790 	.word	0x20004790
 8006be0:	20004794 	.word	0x20004794

08006be4 <vTaskDelay>:
	{
 8006be4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006be6:	b1a8      	cbz	r0, 8006c14 <vTaskDelay+0x30>
 8006be8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8006bea:	4b10      	ldr	r3, [pc, #64]	@ (8006c2c <vTaskDelay+0x48>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	b143      	cbz	r3, 8006c02 <vTaskDelay+0x1e>
 8006bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	e7fe      	b.n	8006c00 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006c02:	f7ff fed9 	bl	80069b8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c06:	2100      	movs	r1, #0
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f7ff fddd 	bl	80067c8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006c0e:	f7ff ff6d 	bl	8006aec <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006c12:	b948      	cbnz	r0, 8006c28 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8006c14:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c1c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	f3bf 8f6f 	isb	sy
	}
 8006c28:	bd10      	pop	{r4, pc}
 8006c2a:	bf00      	nop
 8006c2c:	2000477c 	.word	0x2000477c

08006c30 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c30:	4b20      	ldr	r3, [pc, #128]	@ (8006cb4 <vTaskSwitchContext+0x84>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	b11b      	cbz	r3, 8006c3e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006c36:	4b20      	ldr	r3, [pc, #128]	@ (8006cb8 <vTaskSwitchContext+0x88>)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8006cb8 <vTaskSwitchContext+0x88>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c44:	4b1d      	ldr	r3, [pc, #116]	@ (8006cbc <vTaskSwitchContext+0x8c>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006c4c:	008a      	lsls	r2, r1, #2
 8006c4e:	491c      	ldr	r1, [pc, #112]	@ (8006cc0 <vTaskSwitchContext+0x90>)
 8006c50:	588a      	ldr	r2, [r1, r2]
 8006c52:	b95a      	cbnz	r2, 8006c6c <vTaskSwitchContext+0x3c>
 8006c54:	b10b      	cbz	r3, 8006c5a <vTaskSwitchContext+0x2a>
 8006c56:	3b01      	subs	r3, #1
 8006c58:	e7f6      	b.n	8006c48 <vTaskSwitchContext+0x18>
 8006c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	e7fe      	b.n	8006c6a <vTaskSwitchContext+0x3a>
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006c72:	008a      	lsls	r2, r1, #2
 8006c74:	4402      	add	r2, r0
 8006c76:	6851      	ldr	r1, [r2, #4]
 8006c78:	6849      	ldr	r1, [r1, #4]
 8006c7a:	6051      	str	r1, [r2, #4]
 8006c7c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8006c80:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8006c84:	3208      	adds	r2, #8
 8006c86:	4402      	add	r2, r0
 8006c88:	4291      	cmp	r1, r2
 8006c8a:	d00b      	beq.n	8006ca4 <vTaskSwitchContext+0x74>
 8006c8c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006c90:	0091      	lsls	r1, r2, #2
 8006c92:	4a0b      	ldr	r2, [pc, #44]	@ (8006cc0 <vTaskSwitchContext+0x90>)
 8006c94:	440a      	add	r2, r1
 8006c96:	6852      	ldr	r2, [r2, #4]
 8006c98:	68d1      	ldr	r1, [r2, #12]
 8006c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8006cc4 <vTaskSwitchContext+0x94>)
 8006c9c:	6011      	str	r1, [r2, #0]
 8006c9e:	4a07      	ldr	r2, [pc, #28]	@ (8006cbc <vTaskSwitchContext+0x8c>)
 8006ca0:	6013      	str	r3, [r2, #0]
}
 8006ca2:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ca4:	6848      	ldr	r0, [r1, #4]
 8006ca6:	4662      	mov	r2, ip
 8006ca8:	0091      	lsls	r1, r2, #2
 8006caa:	4a05      	ldr	r2, [pc, #20]	@ (8006cc0 <vTaskSwitchContext+0x90>)
 8006cac:	440a      	add	r2, r1
 8006cae:	6050      	str	r0, [r2, #4]
 8006cb0:	e7ec      	b.n	8006c8c <vTaskSwitchContext+0x5c>
 8006cb2:	bf00      	nop
 8006cb4:	2000477c 	.word	0x2000477c
 8006cb8:	20004790 	.word	0x20004790
 8006cbc:	2000479c 	.word	0x2000479c
 8006cc0:	20004818 	.word	0x20004818
 8006cc4:	20004c78 	.word	0x20004c78

08006cc8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006cc8:	b158      	cbz	r0, 8006ce2 <vTaskPlaceOnEventList+0x1a>
{
 8006cca:	b510      	push	{r4, lr}
 8006ccc:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cce:	4a09      	ldr	r2, [pc, #36]	@ (8006cf4 <vTaskPlaceOnEventList+0x2c>)
 8006cd0:	6811      	ldr	r1, [r2, #0]
 8006cd2:	3118      	adds	r1, #24
 8006cd4:	f7fb f97b 	bl	8001fce <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cd8:	2101      	movs	r1, #1
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f7ff fd74 	bl	80067c8 <prvAddCurrentTaskToDelayedList>
}
 8006ce0:	bd10      	pop	{r4, pc}
 8006ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006cf2:	e7fe      	b.n	8006cf2 <vTaskPlaceOnEventList+0x2a>
 8006cf4:	20004c78 	.word	0x20004c78

08006cf8 <vTaskPlaceOnEventListRestricted>:
	{
 8006cf8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8006cfa:	b170      	cbz	r0, 8006d1a <vTaskPlaceOnEventListRestricted+0x22>
 8006cfc:	460d      	mov	r5, r1
 8006cfe:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d00:	4a0a      	ldr	r2, [pc, #40]	@ (8006d2c <vTaskPlaceOnEventListRestricted+0x34>)
 8006d02:	6811      	ldr	r1, [r2, #0]
 8006d04:	3118      	adds	r1, #24
 8006d06:	f7fb f957 	bl	8001fb8 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8006d0a:	b10c      	cbz	r4, 8006d10 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8006d0c:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d10:	4621      	mov	r1, r4
 8006d12:	4628      	mov	r0, r5
 8006d14:	f7ff fd58 	bl	80067c8 <prvAddCurrentTaskToDelayedList>
	}
 8006d18:	bd38      	pop	{r3, r4, r5, pc}
 8006d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8006d2a:	e7fe      	b.n	8006d2a <vTaskPlaceOnEventListRestricted+0x32>
 8006d2c:	20004c78 	.word	0x20004c78

08006d30 <xTaskRemoveFromEventList>:
{
 8006d30:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d32:	68c3      	ldr	r3, [r0, #12]
 8006d34:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006d36:	b324      	cbz	r4, 8006d82 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d38:	f104 0518 	add.w	r5, r4, #24
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f7fb f95f 	bl	8002000 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d42:	4b18      	ldr	r3, [pc, #96]	@ (8006da4 <xTaskRemoveFromEventList+0x74>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	bb2b      	cbnz	r3, 8006d94 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d48:	1d25      	adds	r5, r4, #4
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	f7fb f958 	bl	8002000 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d50:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006d52:	4b15      	ldr	r3, [pc, #84]	@ (8006da8 <xTaskRemoveFromEventList+0x78>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4298      	cmp	r0, r3
 8006d58:	d901      	bls.n	8006d5e <xTaskRemoveFromEventList+0x2e>
 8006d5a:	4b13      	ldr	r3, [pc, #76]	@ (8006da8 <xTaskRemoveFromEventList+0x78>)
 8006d5c:	6018      	str	r0, [r3, #0]
 8006d5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006d62:	4629      	mov	r1, r5
 8006d64:	4b11      	ldr	r3, [pc, #68]	@ (8006dac <xTaskRemoveFromEventList+0x7c>)
 8006d66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006d6a:	f7fb f925 	bl	8001fb8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d6e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006d70:	4b0f      	ldr	r3, [pc, #60]	@ (8006db0 <xTaskRemoveFromEventList+0x80>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d911      	bls.n	8006d9e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8006db4 <xTaskRemoveFromEventList+0x84>)
 8006d7e:	6018      	str	r0, [r3, #0]
}
 8006d80:	bd38      	pop	{r3, r4, r5, pc}
 8006d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006d92:	e7fe      	b.n	8006d92 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d94:	4629      	mov	r1, r5
 8006d96:	4808      	ldr	r0, [pc, #32]	@ (8006db8 <xTaskRemoveFromEventList+0x88>)
 8006d98:	f7fb f90e 	bl	8001fb8 <vListInsertEnd>
 8006d9c:	e7e7      	b.n	8006d6e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8006d9e:	2000      	movs	r0, #0
	return xReturn;
 8006da0:	e7ee      	b.n	8006d80 <xTaskRemoveFromEventList+0x50>
 8006da2:	bf00      	nop
 8006da4:	2000477c 	.word	0x2000477c
 8006da8:	2000479c 	.word	0x2000479c
 8006dac:	20004818 	.word	0x20004818
 8006db0:	20004c78 	.word	0x20004c78
 8006db4:	20004790 	.word	0x20004790
 8006db8:	200047d4 	.word	0x200047d4

08006dbc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006dbc:	4b03      	ldr	r3, [pc, #12]	@ (8006dcc <vTaskInternalSetTimeOutState+0x10>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006dc2:	4b03      	ldr	r3, [pc, #12]	@ (8006dd0 <vTaskInternalSetTimeOutState+0x14>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6043      	str	r3, [r0, #4]
}
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	2000478c 	.word	0x2000478c
 8006dd0:	200047a0 	.word	0x200047a0

08006dd4 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8006dd4:	b1e0      	cbz	r0, 8006e10 <xTaskCheckForTimeOut+0x3c>
{
 8006dd6:	b570      	push	{r4, r5, r6, lr}
 8006dd8:	460c      	mov	r4, r1
 8006dda:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006ddc:	b309      	cbz	r1, 8006e22 <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 8006dde:	f7fb faa9 	bl	8002334 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006de2:	4b1c      	ldr	r3, [pc, #112]	@ (8006e54 <xTaskCheckForTimeOut+0x80>)
 8006de4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006de6:	686b      	ldr	r3, [r5, #4]
 8006de8:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8006dea:	6822      	ldr	r2, [r4, #0]
 8006dec:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006df0:	d028      	beq.n	8006e44 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006df2:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8006e58 <xTaskCheckForTimeOut+0x84>
 8006df6:	f8dc c000 	ldr.w	ip, [ip]
 8006dfa:	682e      	ldr	r6, [r5, #0]
 8006dfc:	4566      	cmp	r6, ip
 8006dfe:	d001      	beq.n	8006e04 <xTaskCheckForTimeOut+0x30>
 8006e00:	428b      	cmp	r3, r1
 8006e02:	d924      	bls.n	8006e4e <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e04:	4282      	cmp	r2, r0
 8006e06:	d815      	bhi.n	8006e34 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006e0c:	2401      	movs	r4, #1
 8006e0e:	e01a      	b.n	8006e46 <xTaskCheckForTimeOut+0x72>
 8006e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8006e20:	e7fe      	b.n	8006e20 <xTaskCheckForTimeOut+0x4c>
 8006e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8006e32:	e7fe      	b.n	8006e32 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 8006e34:	1a5b      	subs	r3, r3, r1
 8006e36:	4413      	add	r3, r2
 8006e38:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	f7ff ffbe 	bl	8006dbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e40:	2400      	movs	r4, #0
 8006e42:	e000      	b.n	8006e46 <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 8006e44:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006e46:	f7fb fa97 	bl	8002378 <vPortExitCritical>
}
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8006e4e:	2401      	movs	r4, #1
 8006e50:	e7f9      	b.n	8006e46 <xTaskCheckForTimeOut+0x72>
 8006e52:	bf00      	nop
 8006e54:	200047a0 	.word	0x200047a0
 8006e58:	2000478c 	.word	0x2000478c

08006e5c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006e5c:	4b01      	ldr	r3, [pc, #4]	@ (8006e64 <vTaskMissedYield+0x8>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	601a      	str	r2, [r3, #0]
}
 8006e62:	4770      	bx	lr
 8006e64:	20004790 	.word	0x20004790

08006e68 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006e68:	4b05      	ldr	r3, [pc, #20]	@ (8006e80 <xTaskGetSchedulerState+0x18>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	b133      	cbz	r3, 8006e7c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e6e:	4b05      	ldr	r3, [pc, #20]	@ (8006e84 <xTaskGetSchedulerState+0x1c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	b10b      	cbz	r3, 8006e78 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e74:	2000      	movs	r0, #0
	}
 8006e76:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8006e78:	2002      	movs	r0, #2
 8006e7a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	4770      	bx	lr
 8006e80:	20004798 	.word	0x20004798
 8006e84:	2000477c 	.word	0x2000477c

08006e88 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d03b      	beq.n	8006f04 <xTaskPriorityDisinherit+0x7c>
	{
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8006e90:	4b1e      	ldr	r3, [pc, #120]	@ (8006f0c <xTaskPriorityDisinherit+0x84>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4283      	cmp	r3, r0
 8006e96:	d008      	beq.n	8006eaa <xTaskPriorityDisinherit+0x22>
 8006e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	e7fe      	b.n	8006ea8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006eaa:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006eac:	b943      	cbnz	r3, 8006ec0 <xTaskPriorityDisinherit+0x38>
 8006eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	e7fe      	b.n	8006ebe <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ec4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006ec6:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8006ec8:	4291      	cmp	r1, r2
 8006eca:	d01d      	beq.n	8006f08 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ecc:	b10b      	cbz	r3, 8006ed2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8006ece:	2000      	movs	r0, #0
	}
 8006ed0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ed2:	1d05      	adds	r5, r0, #4
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	f7fb f893 	bl	8002000 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006eda:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8006edc:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ede:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8006ee2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8006f10 <xTaskPriorityDisinherit+0x88>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4298      	cmp	r0, r3
 8006eea:	d901      	bls.n	8006ef0 <xTaskPriorityDisinherit+0x68>
 8006eec:	4b08      	ldr	r3, [pc, #32]	@ (8006f10 <xTaskPriorityDisinherit+0x88>)
 8006eee:	6018      	str	r0, [r3, #0]
 8006ef0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	4b07      	ldr	r3, [pc, #28]	@ (8006f14 <xTaskPriorityDisinherit+0x8c>)
 8006ef8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006efc:	f7fb f85c 	bl	8001fb8 <vListInsertEnd>
					xReturn = pdTRUE;
 8006f00:	2001      	movs	r0, #1
 8006f02:	e7e5      	b.n	8006ed0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8006f04:	2000      	movs	r0, #0
	}
 8006f06:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8006f08:	2000      	movs	r0, #0
 8006f0a:	e7e1      	b.n	8006ed0 <xTaskPriorityDisinherit+0x48>
 8006f0c:	20004c78 	.word	0x20004c78
 8006f10:	2000479c 	.word	0x2000479c
 8006f14:	20004818 	.word	0x20004818

08006f18 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006f18:	b500      	push	{lr}
 8006f1a:	b08f      	sub	sp, #60	@ 0x3c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f22:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f24:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f26:	9308      	str	r3, [sp, #32]
 8006f28:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006f2a:	9301      	str	r3, [sp, #4]
 8006f2c:	9302      	str	r3, [sp, #8]
 8006f2e:	9303      	str	r3, [sp, #12]
 8006f30:	9304      	str	r3, [sp, #16]
 8006f32:	9305      	str	r3, [sp, #20]
 8006f34:	9306      	str	r3, [sp, #24]
 8006f36:	9307      	str	r3, [sp, #28]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006f38:	481f      	ldr	r0, [pc, #124]	@ (8006fb8 <MX_TIM2_Init+0xa0>)
 8006f3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006f3e:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 84-1;
 8006f40:	2253      	movs	r2, #83	@ 0x53
 8006f42:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f44:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8006f46:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f4c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f4e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006f50:	f7fe f91e 	bl	8005190 <HAL_TIM_Base_Init>
 8006f54:	bb00      	cbnz	r0, 8006f98 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006f56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f5a:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006f5c:	a90a      	add	r1, sp, #40	@ 0x28
 8006f5e:	4816      	ldr	r0, [pc, #88]	@ (8006fb8 <MX_TIM2_Init+0xa0>)
 8006f60:	f7fe fa72 	bl	8005448 <HAL_TIM_ConfigClockSource>
 8006f64:	b9d8      	cbnz	r0, 8006f9e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8006f66:	4814      	ldr	r0, [pc, #80]	@ (8006fb8 <MX_TIM2_Init+0xa0>)
 8006f68:	f7fe f93e 	bl	80051e8 <HAL_TIM_OC_Init>
 8006f6c:	b9d0      	cbnz	r0, 8006fa4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f72:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006f74:	a908      	add	r1, sp, #32
 8006f76:	4810      	ldr	r0, [pc, #64]	@ (8006fb8 <MX_TIM2_Init+0xa0>)
 8006f78:	f7fe fc10 	bl	800579c <HAL_TIMEx_MasterConfigSynchronization>
 8006f7c:	b9a8      	cbnz	r0, 8006faa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006f7e:	2200      	movs	r2, #0
 8006f80:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8006f82:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f84:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006f86:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006f88:	a901      	add	r1, sp, #4
 8006f8a:	480b      	ldr	r0, [pc, #44]	@ (8006fb8 <MX_TIM2_Init+0xa0>)
 8006f8c:	f7fe f9b2 	bl	80052f4 <HAL_TIM_OC_ConfigChannel>
 8006f90:	b970      	cbnz	r0, 8006fb0 <MX_TIM2_Init+0x98>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006f92:	b00f      	add	sp, #60	@ 0x3c
 8006f94:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006f98:	f7fb f85a 	bl	8002050 <Error_Handler>
 8006f9c:	e7db      	b.n	8006f56 <MX_TIM2_Init+0x3e>
    Error_Handler();
 8006f9e:	f7fb f857 	bl	8002050 <Error_Handler>
 8006fa2:	e7e0      	b.n	8006f66 <MX_TIM2_Init+0x4e>
    Error_Handler();
 8006fa4:	f7fb f854 	bl	8002050 <Error_Handler>
 8006fa8:	e7e1      	b.n	8006f6e <MX_TIM2_Init+0x56>
    Error_Handler();
 8006faa:	f7fb f851 	bl	8002050 <Error_Handler>
 8006fae:	e7e6      	b.n	8006f7e <MX_TIM2_Init+0x66>
    Error_Handler();
 8006fb0:	f7fb f84e 	bl	8002050 <Error_Handler>
}
 8006fb4:	e7ed      	b.n	8006f92 <MX_TIM2_Init+0x7a>
 8006fb6:	bf00      	nop
 8006fb8:	20004cc4 	.word	0x20004cc4

08006fbc <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006fbc:	b500      	push	{lr}
 8006fbe:	b083      	sub	sp, #12

  if(tim_pwmHandle->Instance==TIM1)
 8006fc0:	6803      	ldr	r3, [r0, #0]
 8006fc2:	4a15      	ldr	r2, [pc, #84]	@ (8007018 <HAL_TIM_PWM_MspInit+0x5c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d005      	beq.n	8006fd4 <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM3)
 8006fc8:	4a14      	ldr	r2, [pc, #80]	@ (800701c <HAL_TIM_PWM_MspInit+0x60>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d016      	beq.n	8006ffc <HAL_TIM_PWM_MspInit+0x40>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006fce:	b003      	add	sp, #12
 8006fd0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	9200      	str	r2, [sp, #0]
 8006fd8:	4b11      	ldr	r3, [pc, #68]	@ (8007020 <HAL_TIM_PWM_MspInit+0x64>)
 8006fda:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8006fdc:	f041 0101 	orr.w	r1, r1, #1
 8006fe0:	6459      	str	r1, [r3, #68]	@ 0x44
 8006fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8006fec:	210f      	movs	r1, #15
 8006fee:	201a      	movs	r0, #26
 8006ff0:	f7fc f9e6 	bl	80033c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006ff4:	201a      	movs	r0, #26
 8006ff6:	f7fc f9f3 	bl	80033e0 <HAL_NVIC_EnableIRQ>
 8006ffa:	e7e8      	b.n	8006fce <HAL_TIM_PWM_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	9301      	str	r3, [sp, #4]
 8007000:	4b07      	ldr	r3, [pc, #28]	@ (8007020 <HAL_TIM_PWM_MspInit+0x64>)
 8007002:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007004:	f042 0202 	orr.w	r2, r2, #2
 8007008:	641a      	str	r2, [r3, #64]	@ 0x40
 800700a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	9301      	str	r3, [sp, #4]
 8007012:	9b01      	ldr	r3, [sp, #4]
}
 8007014:	e7db      	b.n	8006fce <HAL_TIM_PWM_MspInit+0x12>
 8007016:	bf00      	nop
 8007018:	40010000 	.word	0x40010000
 800701c:	40000400 	.word	0x40000400
 8007020:	40023800 	.word	0x40023800

08007024 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8007024:	6803      	ldr	r3, [r0, #0]
 8007026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800702a:	d000      	beq.n	800702e <HAL_TIM_Base_MspInit+0xa>
 800702c:	4770      	bx	lr
{
 800702e:	b500      	push	{lr}
 8007030:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007032:	2200      	movs	r2, #0
 8007034:	9201      	str	r2, [sp, #4]
 8007036:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 800703a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800703c:	f041 0101 	orr.w	r1, r1, #1
 8007040:	6419      	str	r1, [r3, #64]	@ 0x40
 8007042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	9b01      	ldr	r3, [sp, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800704c:	2105      	movs	r1, #5
 800704e:	201c      	movs	r0, #28
 8007050:	f7fc f9b6 	bl	80033c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007054:	201c      	movs	r0, #28
 8007056:	f7fc f9c3 	bl	80033e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800705a:	b003      	add	sp, #12
 800705c:	f85d fb04 	ldr.w	pc, [sp], #4

08007060 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007060:	b500      	push	{lr}
 8007062:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007064:	2300      	movs	r3, #0
 8007066:	9303      	str	r3, [sp, #12]
 8007068:	9304      	str	r3, [sp, #16]
 800706a:	9305      	str	r3, [sp, #20]
 800706c:	9306      	str	r3, [sp, #24]
 800706e:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 8007070:	6803      	ldr	r3, [r0, #0]
 8007072:	4a1c      	ldr	r2, [pc, #112]	@ (80070e4 <HAL_TIM_MspPostInit+0x84>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d005      	beq.n	8007084 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 8007078:	4a1b      	ldr	r2, [pc, #108]	@ (80070e8 <HAL_TIM_MspPostInit+0x88>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d01a      	beq.n	80070b4 <HAL_TIM_MspPostInit+0x54>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800707e:	b009      	add	sp, #36	@ 0x24
 8007080:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007084:	2300      	movs	r3, #0
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	4b18      	ldr	r3, [pc, #96]	@ (80070ec <HAL_TIM_MspPostInit+0x8c>)
 800708a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800708c:	f042 0201 	orr.w	r2, r2, #1
 8007090:	631a      	str	r2, [r3, #48]	@ 0x30
 8007092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ETB1_MOTOR1_Pin|ETB1_MOTOR2_Pin;
 800709c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80070a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070a2:	2302      	movs	r3, #2
 80070a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80070a6:	2301      	movs	r3, #1
 80070a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070aa:	a903      	add	r1, sp, #12
 80070ac:	4810      	ldr	r0, [pc, #64]	@ (80070f0 <HAL_TIM_MspPostInit+0x90>)
 80070ae:	f7fc fbaf 	bl	8003810 <HAL_GPIO_Init>
 80070b2:	e7e4      	b.n	800707e <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070b4:	2300      	movs	r3, #0
 80070b6:	9302      	str	r3, [sp, #8]
 80070b8:	4b0c      	ldr	r3, [pc, #48]	@ (80070ec <HAL_TIM_MspPostInit+0x8c>)
 80070ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070bc:	f042 0204 	orr.w	r2, r2, #4
 80070c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80070c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	9302      	str	r3, [sp, #8]
 80070ca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM_OUT1_Pin|PWM_OUT2_Pin|PWM_OUT3_Pin|PWM_OUT4_Pin;
 80070cc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80070d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070d2:	2302      	movs	r3, #2
 80070d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80070d6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070d8:	a903      	add	r1, sp, #12
 80070da:	4806      	ldr	r0, [pc, #24]	@ (80070f4 <HAL_TIM_MspPostInit+0x94>)
 80070dc:	f7fc fb98 	bl	8003810 <HAL_GPIO_Init>
}
 80070e0:	e7cd      	b.n	800707e <HAL_TIM_MspPostInit+0x1e>
 80070e2:	bf00      	nop
 80070e4:	40010000 	.word	0x40010000
 80070e8:	40000400 	.word	0x40000400
 80070ec:	40023800 	.word	0x40023800
 80070f0:	40020000 	.word	0x40020000
 80070f4:	40020800 	.word	0x40020800

080070f8 <MX_TIM1_Init>:
{
 80070f8:	b510      	push	{r4, lr}
 80070fa:	b092      	sub	sp, #72	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80070fc:	2400      	movs	r4, #0
 80070fe:	9410      	str	r4, [sp, #64]	@ 0x40
 8007100:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007102:	9409      	str	r4, [sp, #36]	@ 0x24
 8007104:	940a      	str	r4, [sp, #40]	@ 0x28
 8007106:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007108:	940c      	str	r4, [sp, #48]	@ 0x30
 800710a:	940d      	str	r4, [sp, #52]	@ 0x34
 800710c:	940e      	str	r4, [sp, #56]	@ 0x38
 800710e:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007110:	2220      	movs	r2, #32
 8007112:	4621      	mov	r1, r4
 8007114:	a801      	add	r0, sp, #4
 8007116:	f002 f93d 	bl	8009394 <memset>
  htim1.Instance = TIM1;
 800711a:	4827      	ldr	r0, [pc, #156]	@ (80071b8 <MX_TIM1_Init+0xc0>)
 800711c:	4b27      	ldr	r3, [pc, #156]	@ (80071bc <MX_TIM1_Init+0xc4>)
 800711e:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8007120:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007122:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 65535;
 8007124:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007128:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800712a:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800712c:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800712e:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007130:	f7fe f886 	bl	8005240 <HAL_TIM_PWM_Init>
 8007134:	2800      	cmp	r0, #0
 8007136:	d130      	bne.n	800719a <MX_TIM1_Init+0xa2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007138:	2300      	movs	r3, #0
 800713a:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800713c:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800713e:	a910      	add	r1, sp, #64	@ 0x40
 8007140:	481d      	ldr	r0, [pc, #116]	@ (80071b8 <MX_TIM1_Init+0xc0>)
 8007142:	f7fe fb2b 	bl	800579c <HAL_TIMEx_MasterConfigSynchronization>
 8007146:	2800      	cmp	r0, #0
 8007148:	d12a      	bne.n	80071a0 <MX_TIM1_Init+0xa8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800714a:	2360      	movs	r3, #96	@ 0x60
 800714c:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800714e:	2200      	movs	r2, #0
 8007150:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007152:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007154:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007156:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007158:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800715a:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800715c:	a909      	add	r1, sp, #36	@ 0x24
 800715e:	4816      	ldr	r0, [pc, #88]	@ (80071b8 <MX_TIM1_Init+0xc0>)
 8007160:	f7fe f8f7 	bl	8005352 <HAL_TIM_PWM_ConfigChannel>
 8007164:	b9f8      	cbnz	r0, 80071a6 <MX_TIM1_Init+0xae>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007166:	2204      	movs	r2, #4
 8007168:	a909      	add	r1, sp, #36	@ 0x24
 800716a:	4813      	ldr	r0, [pc, #76]	@ (80071b8 <MX_TIM1_Init+0xc0>)
 800716c:	f7fe f8f1 	bl	8005352 <HAL_TIM_PWM_ConfigChannel>
 8007170:	b9e0      	cbnz	r0, 80071ac <MX_TIM1_Init+0xb4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007172:	2300      	movs	r3, #0
 8007174:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007176:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007178:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800717a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800717c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800717e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007182:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007184:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007186:	a901      	add	r1, sp, #4
 8007188:	480b      	ldr	r0, [pc, #44]	@ (80071b8 <MX_TIM1_Init+0xc0>)
 800718a:	f7fe fb45 	bl	8005818 <HAL_TIMEx_ConfigBreakDeadTime>
 800718e:	b980      	cbnz	r0, 80071b2 <MX_TIM1_Init+0xba>
  HAL_TIM_MspPostInit(&htim1);
 8007190:	4809      	ldr	r0, [pc, #36]	@ (80071b8 <MX_TIM1_Init+0xc0>)
 8007192:	f7ff ff65 	bl	8007060 <HAL_TIM_MspPostInit>
}
 8007196:	b012      	add	sp, #72	@ 0x48
 8007198:	bd10      	pop	{r4, pc}
    Error_Handler();
 800719a:	f7fa ff59 	bl	8002050 <Error_Handler>
 800719e:	e7cb      	b.n	8007138 <MX_TIM1_Init+0x40>
    Error_Handler();
 80071a0:	f7fa ff56 	bl	8002050 <Error_Handler>
 80071a4:	e7d1      	b.n	800714a <MX_TIM1_Init+0x52>
    Error_Handler();
 80071a6:	f7fa ff53 	bl	8002050 <Error_Handler>
 80071aa:	e7dc      	b.n	8007166 <MX_TIM1_Init+0x6e>
    Error_Handler();
 80071ac:	f7fa ff50 	bl	8002050 <Error_Handler>
 80071b0:	e7df      	b.n	8007172 <MX_TIM1_Init+0x7a>
    Error_Handler();
 80071b2:	f7fa ff4d 	bl	8002050 <Error_Handler>
 80071b6:	e7eb      	b.n	8007190 <MX_TIM1_Init+0x98>
 80071b8:	20004d0c 	.word	0x20004d0c
 80071bc:	40010000 	.word	0x40010000

080071c0 <MX_TIM3_Init>:
{
 80071c0:	b500      	push	{lr}
 80071c2:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80071c4:	2300      	movs	r3, #0
 80071c6:	9308      	str	r3, [sp, #32]
 80071c8:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	9302      	str	r3, [sp, #8]
 80071ce:	9303      	str	r3, [sp, #12]
 80071d0:	9304      	str	r3, [sp, #16]
 80071d2:	9305      	str	r3, [sp, #20]
 80071d4:	9306      	str	r3, [sp, #24]
 80071d6:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 80071d8:	4825      	ldr	r0, [pc, #148]	@ (8007270 <MX_TIM3_Init+0xb0>)
 80071da:	4a26      	ldr	r2, [pc, #152]	@ (8007274 <MX_TIM3_Init+0xb4>)
 80071dc:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 80071de:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071e0:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 80071e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071e6:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80071e8:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80071ea:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80071ec:	f7fe f828 	bl	8005240 <HAL_TIM_PWM_Init>
 80071f0:	bb58      	cbnz	r0, 800724a <MX_TIM3_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80071f2:	2300      	movs	r3, #0
 80071f4:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80071f6:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80071f8:	a908      	add	r1, sp, #32
 80071fa:	481d      	ldr	r0, [pc, #116]	@ (8007270 <MX_TIM3_Init+0xb0>)
 80071fc:	f7fe face 	bl	800579c <HAL_TIMEx_MasterConfigSynchronization>
 8007200:	bb30      	cbnz	r0, 8007250 <MX_TIM3_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007202:	2360      	movs	r3, #96	@ 0x60
 8007204:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8007206:	2200      	movs	r2, #0
 8007208:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800720a:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800720c:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800720e:	a901      	add	r1, sp, #4
 8007210:	4817      	ldr	r0, [pc, #92]	@ (8007270 <MX_TIM3_Init+0xb0>)
 8007212:	f7fe f89e 	bl	8005352 <HAL_TIM_PWM_ConfigChannel>
 8007216:	b9f0      	cbnz	r0, 8007256 <MX_TIM3_Init+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007218:	2204      	movs	r2, #4
 800721a:	eb0d 0102 	add.w	r1, sp, r2
 800721e:	4814      	ldr	r0, [pc, #80]	@ (8007270 <MX_TIM3_Init+0xb0>)
 8007220:	f7fe f897 	bl	8005352 <HAL_TIM_PWM_ConfigChannel>
 8007224:	b9d0      	cbnz	r0, 800725c <MX_TIM3_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007226:	2208      	movs	r2, #8
 8007228:	a901      	add	r1, sp, #4
 800722a:	4811      	ldr	r0, [pc, #68]	@ (8007270 <MX_TIM3_Init+0xb0>)
 800722c:	f7fe f891 	bl	8005352 <HAL_TIM_PWM_ConfigChannel>
 8007230:	b9b8      	cbnz	r0, 8007262 <MX_TIM3_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007232:	220c      	movs	r2, #12
 8007234:	a901      	add	r1, sp, #4
 8007236:	480e      	ldr	r0, [pc, #56]	@ (8007270 <MX_TIM3_Init+0xb0>)
 8007238:	f7fe f88b 	bl	8005352 <HAL_TIM_PWM_ConfigChannel>
 800723c:	b9a0      	cbnz	r0, 8007268 <MX_TIM3_Init+0xa8>
  HAL_TIM_MspPostInit(&htim3);
 800723e:	480c      	ldr	r0, [pc, #48]	@ (8007270 <MX_TIM3_Init+0xb0>)
 8007240:	f7ff ff0e 	bl	8007060 <HAL_TIM_MspPostInit>
}
 8007244:	b00b      	add	sp, #44	@ 0x2c
 8007246:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800724a:	f7fa ff01 	bl	8002050 <Error_Handler>
 800724e:	e7d0      	b.n	80071f2 <MX_TIM3_Init+0x32>
    Error_Handler();
 8007250:	f7fa fefe 	bl	8002050 <Error_Handler>
 8007254:	e7d5      	b.n	8007202 <MX_TIM3_Init+0x42>
    Error_Handler();
 8007256:	f7fa fefb 	bl	8002050 <Error_Handler>
 800725a:	e7dd      	b.n	8007218 <MX_TIM3_Init+0x58>
    Error_Handler();
 800725c:	f7fa fef8 	bl	8002050 <Error_Handler>
 8007260:	e7e1      	b.n	8007226 <MX_TIM3_Init+0x66>
    Error_Handler();
 8007262:	f7fa fef5 	bl	8002050 <Error_Handler>
 8007266:	e7e4      	b.n	8007232 <MX_TIM3_Init+0x72>
    Error_Handler();
 8007268:	f7fa fef2 	bl	8002050 <Error_Handler>
 800726c:	e7e7      	b.n	800723e <MX_TIM3_Init+0x7e>
 800726e:	bf00      	nop
 8007270:	20004c7c 	.word	0x20004c7c
 8007274:	40000400 	.word	0x40000400

08007278 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007278:	4b06      	ldr	r3, [pc, #24]	@ (8007294 <prvGetNextExpireTime+0x1c>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	6813      	ldr	r3, [r2, #0]
 800727e:	b92b      	cbnz	r3, 800728c <prvGetNextExpireTime+0x14>
 8007280:	2301      	movs	r3, #1
 8007282:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007284:	b923      	cbnz	r3, 8007290 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007286:	68d3      	ldr	r3, [r2, #12]
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800728c:	2300      	movs	r3, #0
 800728e:	e7f8      	b.n	8007282 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007290:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8007292:	4770      	bx	lr
 8007294:	20004e54 	.word	0x20004e54

08007298 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007298:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800729a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800729c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800729e:	4291      	cmp	r1, r2
 80072a0:	d80c      	bhi.n	80072bc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a2:	1ad2      	subs	r2, r2, r3
 80072a4:	6983      	ldr	r3, [r0, #24]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d301      	bcc.n	80072ae <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80072aa:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80072ac:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072ae:	1d01      	adds	r1, r0, #4
 80072b0:	4b09      	ldr	r3, [pc, #36]	@ (80072d8 <prvInsertTimerInActiveList+0x40>)
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	f7fa fe8b 	bl	8001fce <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80072b8:	2000      	movs	r0, #0
 80072ba:	e7f7      	b.n	80072ac <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072bc:	429a      	cmp	r2, r3
 80072be:	d201      	bcs.n	80072c4 <prvInsertTimerInActiveList+0x2c>
 80072c0:	4299      	cmp	r1, r3
 80072c2:	d206      	bcs.n	80072d2 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072c4:	1d01      	adds	r1, r0, #4
 80072c6:	4b05      	ldr	r3, [pc, #20]	@ (80072dc <prvInsertTimerInActiveList+0x44>)
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	f7fa fe80 	bl	8001fce <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80072ce:	2000      	movs	r0, #0
 80072d0:	e7ec      	b.n	80072ac <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 80072d2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80072d4:	e7ea      	b.n	80072ac <prvInsertTimerInActiveList+0x14>
 80072d6:	bf00      	nop
 80072d8:	20004e50 	.word	0x20004e50
 80072dc:	20004e54 	.word	0x20004e54

080072e0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072e0:	b530      	push	{r4, r5, lr}
 80072e2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072e4:	f7fb f826 	bl	8002334 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072e8:	4b11      	ldr	r3, [pc, #68]	@ (8007330 <prvCheckForValidListAndQueue+0x50>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	b11b      	cbz	r3, 80072f6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072ee:	f7fb f843 	bl	8002378 <vPortExitCritical>
}
 80072f2:	b003      	add	sp, #12
 80072f4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80072f6:	4d0f      	ldr	r5, [pc, #60]	@ (8007334 <prvCheckForValidListAndQueue+0x54>)
 80072f8:	4628      	mov	r0, r5
 80072fa:	f7fa fe4f 	bl	8001f9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072fe:	4c0e      	ldr	r4, [pc, #56]	@ (8007338 <prvCheckForValidListAndQueue+0x58>)
 8007300:	4620      	mov	r0, r4
 8007302:	f7fa fe4b 	bl	8001f9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007306:	4b0d      	ldr	r3, [pc, #52]	@ (800733c <prvCheckForValidListAndQueue+0x5c>)
 8007308:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800730a:	4b0d      	ldr	r3, [pc, #52]	@ (8007340 <prvCheckForValidListAndQueue+0x60>)
 800730c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800730e:	2300      	movs	r3, #0
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	4b0c      	ldr	r3, [pc, #48]	@ (8007344 <prvCheckForValidListAndQueue+0x64>)
 8007314:	4a0c      	ldr	r2, [pc, #48]	@ (8007348 <prvCheckForValidListAndQueue+0x68>)
 8007316:	2110      	movs	r1, #16
 8007318:	200a      	movs	r0, #10
 800731a:	f7fb fa52 	bl	80027c2 <xQueueGenericCreateStatic>
 800731e:	4b04      	ldr	r3, [pc, #16]	@ (8007330 <prvCheckForValidListAndQueue+0x50>)
 8007320:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8007322:	2800      	cmp	r0, #0
 8007324:	d0e3      	beq.n	80072ee <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007326:	4909      	ldr	r1, [pc, #36]	@ (800734c <prvCheckForValidListAndQueue+0x6c>)
 8007328:	f7fb fcea 	bl	8002d00 <vQueueAddToRegistry>
 800732c:	e7df      	b.n	80072ee <prvCheckForValidListAndQueue+0xe>
 800732e:	bf00      	nop
 8007330:	20004e4c 	.word	0x20004e4c
 8007334:	20004e6c 	.word	0x20004e6c
 8007338:	20004e58 	.word	0x20004e58
 800733c:	20004e54 	.word	0x20004e54
 8007340:	20004e50 	.word	0x20004e50
 8007344:	20004d54 	.word	0x20004d54
 8007348:	20004da4 	.word	0x20004da4
 800734c:	0800a198 	.word	0x0800a198

08007350 <prvInitialiseNewTimer>:
{
 8007350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007354:	9f07      	ldr	r7, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007356:	b941      	cbnz	r1, 800736a <prvInitialiseNewTimer+0x1a>
 8007358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	e7fe      	b.n	8007368 <prvInitialiseNewTimer+0x18>
 800736a:	4606      	mov	r6, r0
 800736c:	4614      	mov	r4, r2
 800736e:	461d      	mov	r5, r3
 8007370:	4688      	mov	r8, r1
	if( pxNewTimer != NULL )
 8007372:	b18f      	cbz	r7, 8007398 <prvInitialiseNewTimer+0x48>
		prvCheckForValidListAndQueue();
 8007374:	f7ff ffb4 	bl	80072e0 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8007378:	603e      	str	r6, [r7, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800737a:	f8c7 8018 	str.w	r8, [r7, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800737e:	61fd      	str	r5, [r7, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007380:	9b06      	ldr	r3, [sp, #24]
 8007382:	623b      	str	r3, [r7, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007384:	1d38      	adds	r0, r7, #4
 8007386:	f7fa fe14 	bl	8001fb2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800738a:	b12c      	cbz	r4, 8007398 <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800738c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007390:	f043 0304 	orr.w	r3, r3, #4
 8007394:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
}
 8007398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800739c <xTimerCreateTimerTask>:
{
 800739c:	b510      	push	{r4, lr}
 800739e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80073a0:	f7ff ff9e 	bl	80072e0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80073a4:	4b12      	ldr	r3, [pc, #72]	@ (80073f0 <xTimerCreateTimerTask+0x54>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	b1cb      	cbz	r3, 80073de <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073aa:	2400      	movs	r4, #0
 80073ac:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073ae:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073b0:	aa07      	add	r2, sp, #28
 80073b2:	a906      	add	r1, sp, #24
 80073b4:	a805      	add	r0, sp, #20
 80073b6:	f7f9 fef1 	bl	800119c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073ba:	9b05      	ldr	r3, [sp, #20]
 80073bc:	9302      	str	r3, [sp, #8]
 80073be:	9b06      	ldr	r3, [sp, #24]
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	2302      	movs	r3, #2
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	4623      	mov	r3, r4
 80073c8:	9a07      	ldr	r2, [sp, #28]
 80073ca:	490a      	ldr	r1, [pc, #40]	@ (80073f4 <xTimerCreateTimerTask+0x58>)
 80073cc:	480a      	ldr	r0, [pc, #40]	@ (80073f8 <xTimerCreateTimerTask+0x5c>)
 80073ce:	f7ff fa39 	bl	8006844 <xTaskCreateStatic>
 80073d2:	4b0a      	ldr	r3, [pc, #40]	@ (80073fc <xTimerCreateTimerTask+0x60>)
 80073d4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80073d6:	b110      	cbz	r0, 80073de <xTimerCreateTimerTask+0x42>
}
 80073d8:	2001      	movs	r0, #1
 80073da:	b008      	add	sp, #32
 80073dc:	bd10      	pop	{r4, pc}
 80073de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80073ee:	e7fe      	b.n	80073ee <xTimerCreateTimerTask+0x52>
 80073f0:	20004e4c 	.word	0x20004e4c
 80073f4:	0800a1a0 	.word	0x0800a1a0
 80073f8:	0800778d 	.word	0x0800778d
 80073fc:	20004e48 	.word	0x20004e48

08007400 <xTimerCreate>:
	{
 8007400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	4604      	mov	r4, r0
 8007408:	4688      	mov	r8, r1
 800740a:	4617      	mov	r7, r2
 800740c:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800740e:	202c      	movs	r0, #44	@ 0x2c
 8007410:	f7fa fb74 	bl	8001afc <pvPortMalloc>
		if( pxNewTimer != NULL )
 8007414:	4606      	mov	r6, r0
 8007416:	b158      	cbz	r0, 8007430 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 8007418:	2300      	movs	r3, #0
 800741a:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800741e:	9001      	str	r0, [sp, #4]
 8007420:	9b08      	ldr	r3, [sp, #32]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	462b      	mov	r3, r5
 8007426:	463a      	mov	r2, r7
 8007428:	4641      	mov	r1, r8
 800742a:	4620      	mov	r0, r4
 800742c:	f7ff ff90 	bl	8007350 <prvInitialiseNewTimer>
	}
 8007430:	4630      	mov	r0, r6
 8007432:	b002      	add	sp, #8
 8007434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007438 <xTimerCreateStatic>:
	{
 8007438:	b510      	push	{r4, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	4684      	mov	ip, r0
			volatile size_t xSize = sizeof( StaticTimer_t );
 800743e:	202c      	movs	r0, #44	@ 0x2c
 8007440:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007442:	9803      	ldr	r0, [sp, #12]
 8007444:	282c      	cmp	r0, #44	@ 0x2c
 8007446:	d008      	beq.n	800745a <xTimerCreateStatic+0x22>
 8007448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	e7fe      	b.n	8007458 <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800745a:	9803      	ldr	r0, [sp, #12]
		configASSERT( pxTimerBuffer );
 800745c:	9807      	ldr	r0, [sp, #28]
 800745e:	b160      	cbz	r0, 800747a <xTimerCreateStatic+0x42>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007460:	2002      	movs	r0, #2
 8007462:	9c07      	ldr	r4, [sp, #28]
 8007464:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007468:	9401      	str	r4, [sp, #4]
 800746a:	9806      	ldr	r0, [sp, #24]
 800746c:	9000      	str	r0, [sp, #0]
 800746e:	4660      	mov	r0, ip
 8007470:	f7ff ff6e 	bl	8007350 <prvInitialiseNewTimer>
	}
 8007474:	9807      	ldr	r0, [sp, #28]
 8007476:	b004      	add	sp, #16
 8007478:	bd10      	pop	{r4, pc}
 800747a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
 800748a:	e7fe      	b.n	800748a <xTimerCreateStatic+0x52>

0800748c <xTimerGenericCommand>:
	configASSERT( xTimer );
 800748c:	b1b8      	cbz	r0, 80074be <xTimerGenericCommand+0x32>
 800748e:	469c      	mov	ip, r3
 8007490:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8007492:	4818      	ldr	r0, [pc, #96]	@ (80074f4 <xTimerGenericCommand+0x68>)
 8007494:	6800      	ldr	r0, [r0, #0]
 8007496:	b358      	cbz	r0, 80074f0 <xTimerGenericCommand+0x64>
{
 8007498:	b500      	push	{lr}
 800749a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800749c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800749e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80074a0:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074a2:	2905      	cmp	r1, #5
 80074a4:	dc1c      	bgt.n	80074e0 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074a6:	f7ff fcdf 	bl	8006e68 <xTaskGetSchedulerState>
 80074aa:	2802      	cmp	r0, #2
 80074ac:	d010      	beq.n	80074d0 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074ae:	2300      	movs	r3, #0
 80074b0:	461a      	mov	r2, r3
 80074b2:	4669      	mov	r1, sp
 80074b4:	480f      	ldr	r0, [pc, #60]	@ (80074f4 <xTimerGenericCommand+0x68>)
 80074b6:	6800      	ldr	r0, [r0, #0]
 80074b8:	f7fb f9f1 	bl	800289e <xQueueGenericSend>
 80074bc:	e015      	b.n	80074ea <xTimerGenericCommand+0x5e>
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80074ce:	e7fe      	b.n	80074ce <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074d0:	2300      	movs	r3, #0
 80074d2:	9a06      	ldr	r2, [sp, #24]
 80074d4:	4669      	mov	r1, sp
 80074d6:	4807      	ldr	r0, [pc, #28]	@ (80074f4 <xTimerGenericCommand+0x68>)
 80074d8:	6800      	ldr	r0, [r0, #0]
 80074da:	f7fb f9e0 	bl	800289e <xQueueGenericSend>
 80074de:	e004      	b.n	80074ea <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074e0:	2300      	movs	r3, #0
 80074e2:	4662      	mov	r2, ip
 80074e4:	4669      	mov	r1, sp
 80074e6:	f7fb fa9e 	bl	8002a26 <xQueueGenericSendFromISR>
}
 80074ea:	b005      	add	sp, #20
 80074ec:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 80074f0:	2000      	movs	r0, #0
}
 80074f2:	4770      	bx	lr
 80074f4:	20004e4c 	.word	0x20004e4c

080074f8 <prvSwitchTimerLists>:
{
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074fc:	4b1b      	ldr	r3, [pc, #108]	@ (800756c <prvSwitchTimerLists+0x74>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	b362      	cbz	r2, 800755e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007508:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800750a:	1d25      	adds	r5, r4, #4
 800750c:	4628      	mov	r0, r5
 800750e:	f7fa fd77 	bl	8002000 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007512:	6a23      	ldr	r3, [r4, #32]
 8007514:	4620      	mov	r0, r4
 8007516:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007518:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800751c:	f013 0f04 	tst.w	r3, #4
 8007520:	d0ec      	beq.n	80074fc <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007522:	69a3      	ldr	r3, [r4, #24]
 8007524:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8007526:	429e      	cmp	r6, r3
 8007528:	d207      	bcs.n	800753a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800752a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800752c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800752e:	4629      	mov	r1, r5
 8007530:	4b0e      	ldr	r3, [pc, #56]	@ (800756c <prvSwitchTimerLists+0x74>)
 8007532:	6818      	ldr	r0, [r3, #0]
 8007534:	f7fa fd4b 	bl	8001fce <vListInsert>
 8007538:	e7e0      	b.n	80074fc <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800753a:	2100      	movs	r1, #0
 800753c:	9100      	str	r1, [sp, #0]
 800753e:	460b      	mov	r3, r1
 8007540:	4632      	mov	r2, r6
 8007542:	4620      	mov	r0, r4
 8007544:	f7ff ffa2 	bl	800748c <xTimerGenericCommand>
				configASSERT( xResult );
 8007548:	2800      	cmp	r0, #0
 800754a:	d1d7      	bne.n	80074fc <prvSwitchTimerLists+0x4>
 800754c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	e7fe      	b.n	800755c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800755e:	4a04      	ldr	r2, [pc, #16]	@ (8007570 <prvSwitchTimerLists+0x78>)
 8007560:	6810      	ldr	r0, [r2, #0]
 8007562:	4902      	ldr	r1, [pc, #8]	@ (800756c <prvSwitchTimerLists+0x74>)
 8007564:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8007566:	6013      	str	r3, [r2, #0]
}
 8007568:	b002      	add	sp, #8
 800756a:	bd70      	pop	{r4, r5, r6, pc}
 800756c:	20004e54 	.word	0x20004e54
 8007570:	20004e50 	.word	0x20004e50

08007574 <prvSampleTimeNow>:
{
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8007578:	f7ff fa26 	bl	80069c8 <xTaskGetTickCount>
 800757c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800757e:	4b07      	ldr	r3, [pc, #28]	@ (800759c <prvSampleTimeNow+0x28>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4283      	cmp	r3, r0
 8007584:	d805      	bhi.n	8007592 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8007586:	2300      	movs	r3, #0
 8007588:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800758a:	4b04      	ldr	r3, [pc, #16]	@ (800759c <prvSampleTimeNow+0x28>)
 800758c:	601c      	str	r4, [r3, #0]
}
 800758e:	4620      	mov	r0, r4
 8007590:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8007592:	f7ff ffb1 	bl	80074f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007596:	2301      	movs	r3, #1
 8007598:	602b      	str	r3, [r5, #0]
 800759a:	e7f6      	b.n	800758a <prvSampleTimeNow+0x16>
 800759c:	20004e44 	.word	0x20004e44

080075a0 <prvProcessExpiredTimer>:
{
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	4606      	mov	r6, r0
 80075a6:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a8:	4917      	ldr	r1, [pc, #92]	@ (8007608 <prvProcessExpiredTimer+0x68>)
 80075aa:	6809      	ldr	r1, [r1, #0]
 80075ac:	68c9      	ldr	r1, [r1, #12]
 80075ae:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075b0:	1d20      	adds	r0, r4, #4
 80075b2:	f7fa fd25 	bl	8002000 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075b6:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 80075ba:	f01c 0f04 	tst.w	ip, #4
 80075be:	d108      	bne.n	80075d2 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075c0:	f02c 0c01 	bic.w	ip, ip, #1
 80075c4:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075c8:	6a23      	ldr	r3, [r4, #32]
 80075ca:	4620      	mov	r0, r4
 80075cc:	4798      	blx	r3
}
 80075ce:	b002      	add	sp, #8
 80075d0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075d2:	69a1      	ldr	r1, [r4, #24]
 80075d4:	4633      	mov	r3, r6
 80075d6:	462a      	mov	r2, r5
 80075d8:	4431      	add	r1, r6
 80075da:	4620      	mov	r0, r4
 80075dc:	f7ff fe5c 	bl	8007298 <prvInsertTimerInActiveList>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d0f1      	beq.n	80075c8 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075e4:	2100      	movs	r1, #0
 80075e6:	9100      	str	r1, [sp, #0]
 80075e8:	460b      	mov	r3, r1
 80075ea:	4632      	mov	r2, r6
 80075ec:	4620      	mov	r0, r4
 80075ee:	f7ff ff4d 	bl	800748c <xTimerGenericCommand>
			configASSERT( xResult );
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d1e8      	bne.n	80075c8 <prvProcessExpiredTimer+0x28>
 80075f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	e7fe      	b.n	8007606 <prvProcessExpiredTimer+0x66>
 8007608:	20004e54 	.word	0x20004e54

0800760c <prvProcessTimerOrBlockTask>:
{
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	4606      	mov	r6, r0
 8007612:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8007614:	f7ff f9d0 	bl	80069b8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007618:	a801      	add	r0, sp, #4
 800761a:	f7ff ffab 	bl	8007574 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800761e:	9b01      	ldr	r3, [sp, #4]
 8007620:	bb33      	cbnz	r3, 8007670 <prvProcessTimerOrBlockTask+0x64>
 8007622:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007624:	b9e4      	cbnz	r4, 8007660 <prvProcessTimerOrBlockTask+0x54>
 8007626:	42b0      	cmp	r0, r6
 8007628:	d213      	bcs.n	8007652 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800762a:	4622      	mov	r2, r4
 800762c:	1b71      	subs	r1, r6, r5
 800762e:	4b12      	ldr	r3, [pc, #72]	@ (8007678 <prvProcessTimerOrBlockTask+0x6c>)
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	f7fb fb79 	bl	8002d28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007636:	f7ff fa59 	bl	8006aec <xTaskResumeAll>
 800763a:	b9d8      	cbnz	r0, 8007674 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 800763c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007644:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	e010      	b.n	8007674 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8007652:	f7ff fa4b 	bl	8006aec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007656:	4629      	mov	r1, r5
 8007658:	4630      	mov	r0, r6
 800765a:	f7ff ffa1 	bl	80075a0 <prvProcessExpiredTimer>
 800765e:	e009      	b.n	8007674 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007660:	4a06      	ldr	r2, [pc, #24]	@ (800767c <prvProcessTimerOrBlockTask+0x70>)
 8007662:	6812      	ldr	r2, [r2, #0]
 8007664:	6812      	ldr	r2, [r2, #0]
 8007666:	b90a      	cbnz	r2, 800766c <prvProcessTimerOrBlockTask+0x60>
 8007668:	2401      	movs	r4, #1
 800766a:	e7de      	b.n	800762a <prvProcessTimerOrBlockTask+0x1e>
 800766c:	461c      	mov	r4, r3
 800766e:	e7dc      	b.n	800762a <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8007670:	f7ff fa3c 	bl	8006aec <xTaskResumeAll>
}
 8007674:	b002      	add	sp, #8
 8007676:	bd70      	pop	{r4, r5, r6, pc}
 8007678:	20004e4c 	.word	0x20004e4c
 800767c:	20004e50 	.word	0x20004e50

08007680 <prvProcessReceivedCommands>:
{
 8007680:	b510      	push	{r4, lr}
 8007682:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007684:	e002      	b.n	800768c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007686:	9b04      	ldr	r3, [sp, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	da0f      	bge.n	80076ac <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800768c:	2200      	movs	r2, #0
 800768e:	a904      	add	r1, sp, #16
 8007690:	4b3d      	ldr	r3, [pc, #244]	@ (8007788 <prvProcessReceivedCommands+0x108>)
 8007692:	6818      	ldr	r0, [r3, #0]
 8007694:	f7fb fa2e 	bl	8002af4 <xQueueReceive>
 8007698:	2800      	cmp	r0, #0
 800769a:	d072      	beq.n	8007782 <prvProcessReceivedCommands+0x102>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800769c:	9b04      	ldr	r3, [sp, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	daf1      	bge.n	8007686 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80076a2:	9907      	ldr	r1, [sp, #28]
 80076a4:	9806      	ldr	r0, [sp, #24]
 80076a6:	9b05      	ldr	r3, [sp, #20]
 80076a8:	4798      	blx	r3
 80076aa:	e7ec      	b.n	8007686 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076ac:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076ae:	6963      	ldr	r3, [r4, #20]
 80076b0:	b113      	cbz	r3, 80076b8 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076b2:	1d20      	adds	r0, r4, #4
 80076b4:	f7fa fca4 	bl	8002000 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076b8:	a803      	add	r0, sp, #12
 80076ba:	f7ff ff5b 	bl	8007574 <prvSampleTimeNow>
 80076be:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80076c0:	9b04      	ldr	r3, [sp, #16]
 80076c2:	2b09      	cmp	r3, #9
 80076c4:	d8e2      	bhi.n	800768c <prvProcessReceivedCommands+0xc>
 80076c6:	e8df f003 	tbb	[pc, r3]
 80076ca:	0505      	.short	0x0505
 80076cc:	4e362f05 	.word	0x4e362f05
 80076d0:	362f0505 	.word	0x362f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076d4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80076d8:	f043 0301 	orr.w	r3, r3, #1
 80076dc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076e0:	9b05      	ldr	r3, [sp, #20]
 80076e2:	69a1      	ldr	r1, [r4, #24]
 80076e4:	4419      	add	r1, r3
 80076e6:	4620      	mov	r0, r4
 80076e8:	f7ff fdd6 	bl	8007298 <prvInsertTimerInActiveList>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d0cd      	beq.n	800768c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076f0:	6a23      	ldr	r3, [r4, #32]
 80076f2:	4620      	mov	r0, r4
 80076f4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076f6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80076fa:	f013 0f04 	tst.w	r3, #4
 80076fe:	d0c5      	beq.n	800768c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007700:	69a2      	ldr	r2, [r4, #24]
 8007702:	2100      	movs	r1, #0
 8007704:	9100      	str	r1, [sp, #0]
 8007706:	460b      	mov	r3, r1
 8007708:	9805      	ldr	r0, [sp, #20]
 800770a:	4402      	add	r2, r0
 800770c:	4620      	mov	r0, r4
 800770e:	f7ff febd 	bl	800748c <xTimerGenericCommand>
							configASSERT( xResult );
 8007712:	2800      	cmp	r0, #0
 8007714:	d1ba      	bne.n	800768c <prvProcessReceivedCommands+0xc>
 8007716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	e7fe      	b.n	8007726 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007728:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800772c:	f023 0301 	bic.w	r3, r3, #1
 8007730:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8007734:	e7aa      	b.n	800768c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007736:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800773a:	f043 0301 	orr.w	r3, r3, #1
 800773e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007742:	9905      	ldr	r1, [sp, #20]
 8007744:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007746:	b129      	cbz	r1, 8007754 <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007748:	4603      	mov	r3, r0
 800774a:	4401      	add	r1, r0
 800774c:	4620      	mov	r0, r4
 800774e:	f7ff fda3 	bl	8007298 <prvInsertTimerInActiveList>
					break;
 8007752:	e79b      	b.n	800768c <prvProcessReceivedCommands+0xc>
 8007754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007764:	e7fe      	b.n	8007764 <prvProcessReceivedCommands+0xe4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007766:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800776a:	f013 0f02 	tst.w	r3, #2
 800776e:	d004      	beq.n	800777a <prvProcessReceivedCommands+0xfa>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007770:	f023 0301 	bic.w	r3, r3, #1
 8007774:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8007778:	e788      	b.n	800768c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800777a:	4620      	mov	r0, r4
 800777c:	f7fa fa40 	bl	8001c00 <vPortFree>
 8007780:	e784      	b.n	800768c <prvProcessReceivedCommands+0xc>
}
 8007782:	b008      	add	sp, #32
 8007784:	bd10      	pop	{r4, pc}
 8007786:	bf00      	nop
 8007788:	20004e4c 	.word	0x20004e4c

0800778c <prvTimerTask>:
{
 800778c:	b500      	push	{lr}
 800778e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007790:	a801      	add	r0, sp, #4
 8007792:	f7ff fd71 	bl	8007278 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007796:	9901      	ldr	r1, [sp, #4]
 8007798:	f7ff ff38 	bl	800760c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800779c:	f7ff ff70 	bl	8007680 <prvProcessReceivedCommands>
	for( ;; )
 80077a0:	e7f6      	b.n	8007790 <prvTimerTask+0x4>

080077a2 <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
 80077a2:	b140      	cbz	r0, 80077b6 <pvTimerGetTimerID+0x14>
{
 80077a4:	b510      	push	{r4, lr}
 80077a6:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
 80077a8:	f7fa fdc4 	bl	8002334 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80077ac:	69e4      	ldr	r4, [r4, #28]
	}
	taskEXIT_CRITICAL();
 80077ae:	f7fa fde3 	bl	8002378 <vPortExitCritical>

	return pvReturn;
}
 80077b2:	4620      	mov	r0, r4
 80077b4:	bd10      	pop	{r4, pc}
 80077b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80077c6:	e7fe      	b.n	80077c6 <pvTimerGetTimerID+0x24>

080077c8 <controller_timing_start>:

void update_next_event(void);

void controller_timing_start(TIM_HandleTypeDef *htim)
{
    if (htim == NULL)
 80077c8:	b320      	cbz	r0, 8007814 <controller_timing_start+0x4c>
{
 80077ca:	b510      	push	{r4, lr}
        /**
         * @todo throw an error
         */
        return;
    }
    timer = htim;
 80077cc:	4c12      	ldr	r4, [pc, #72]	@ (8007818 <controller_timing_start+0x50>)
 80077ce:	6020      	str	r0, [r4, #0]
    
    /**
     * This assumes that sys clock is the same as timer clock
     */
    timer->Instance->PSC = (HAL_RCC_GetSysClockFreq() / 1000000UL) - 1;
 80077d0:	f7fd f980 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
 80077d4:	4b11      	ldr	r3, [pc, #68]	@ (800781c <controller_timing_start+0x54>)
 80077d6:	fba3 2300 	umull	r2, r3, r3, r0
 80077da:	0c9b      	lsrs	r3, r3, #18
 80077dc:	6820      	ldr	r0, [r4, #0]
 80077de:	6802      	ldr	r2, [r0, #0]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	6293      	str	r3, [r2, #40]	@ 0x28
    //timer->Instance->ARR = 100000;
    timer->Instance->EGR |= TIM_EGR_UG;  // Force an update event → immediately reloads PSC
 80077e4:	6802      	ldr	r2, [r0, #0]
 80077e6:	6953      	ldr	r3, [r2, #20]
 80077e8:	f043 0301 	orr.w	r3, r3, #1
 80077ec:	6153      	str	r3, [r2, #20]

    HAL_TIM_Base_Start_IT(timer);
 80077ee:	f7fd fb8b 	bl	8004f08 <HAL_TIM_Base_Start_IT>
    HAL_TIM_OC_Start_IT(timer, TIM_CHANNEL_1);    
 80077f2:	2100      	movs	r1, #0
 80077f4:	6820      	ldr	r0, [r4, #0]
 80077f6:	f7fd feb5 	bl	8005564 <HAL_TIM_OC_Start_IT>

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 80077fa:	2300      	movs	r3, #0
 80077fc:	2b13      	cmp	r3, #19
 80077fe:	d808      	bhi.n	8007812 <controller_timing_start+0x4a>
    {
        event_queue[i].state = EVENT_STATE_INACTIVE;
 8007800:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007804:	4a06      	ldr	r2, [pc, #24]	@ (8007820 <controller_timing_start+0x58>)
 8007806:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800780a:	2100      	movs	r1, #0
 800780c:	7411      	strb	r1, [r2, #16]
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 800780e:	3301      	adds	r3, #1
 8007810:	e7f4      	b.n	80077fc <controller_timing_start+0x34>
    }
    
}
 8007812:	bd10      	pop	{r4, pc}
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	20005010 	.word	0x20005010
 800781c:	431bde83 	.word	0x431bde83
 8007820:	20004e80 	.word	0x20004e80

08007824 <get_time_us>:

time_us_t get_time_us(void)
{
    return timer->Instance->CNT;
 8007824:	4b02      	ldr	r3, [pc, #8]	@ (8007830 <get_time_us+0xc>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	20005010 	.word	0x20005010

08007834 <update_next_event>:
{
    return timer->Instance->CNT / 1000U;
}

void update_next_event(void)
{
 8007834:	b410      	push	{r4}
    time_us_t nearest_time = 0xFFFFFFFF;
    bool found = false;

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8007836:	2300      	movs	r3, #0
    bool found = false;
 8007838:	4618      	mov	r0, r3
    time_us_t nearest_time = 0xFFFFFFFF;
 800783a:	f04f 34ff 	mov.w	r4, #4294967295
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 800783e:	e006      	b.n	800784e <update_next_event+0x1a>
        
        /* This will handle wraparound safely aparantly, but i don't know how it works yet :( */
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
        {
            found = true;
            nearest_time = event_queue[i].timestamp_us;
 8007840:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007844:	008a      	lsls	r2, r1, #2
 8007846:	4910      	ldr	r1, [pc, #64]	@ (8007888 <update_next_event+0x54>)
 8007848:	588c      	ldr	r4, [r1, r2]
            found = true;
 800784a:	2001      	movs	r0, #1
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 800784c:	3301      	adds	r3, #1
 800784e:	2b13      	cmp	r3, #19
 8007850:	d812      	bhi.n	8007878 <update_next_event+0x44>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 8007852:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007856:	0091      	lsls	r1, r2, #2
 8007858:	4a0b      	ldr	r2, [pc, #44]	@ (8007888 <update_next_event+0x54>)
 800785a:	440a      	add	r2, r1
 800785c:	7c12      	ldrb	r2, [r2, #16]
 800785e:	2a01      	cmp	r2, #1
 8007860:	d1f4      	bne.n	800784c <update_next_event+0x18>
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
 8007862:	2800      	cmp	r0, #0
 8007864:	d0ec      	beq.n	8007840 <update_next_event+0xc>
 8007866:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800786a:	008a      	lsls	r2, r1, #2
 800786c:	4906      	ldr	r1, [pc, #24]	@ (8007888 <update_next_event+0x54>)
 800786e:	588a      	ldr	r2, [r1, r2]
 8007870:	1b12      	subs	r2, r2, r4
 8007872:	2a00      	cmp	r2, #0
 8007874:	daea      	bge.n	800784c <update_next_event+0x18>
 8007876:	e7e3      	b.n	8007840 <update_next_event+0xc>
        }        
    }

    if (found) {
 8007878:	b118      	cbz	r0, 8007882 <update_next_event+0x4e>
        // Schedule next interrupt
        timer->Instance->CCR1 = nearest_time;
 800787a:	4b04      	ldr	r3, [pc, #16]	@ (800788c <update_next_event+0x58>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	635c      	str	r4, [r3, #52]	@ 0x34
    } else {
        // No pending events — disable future interrupts or set a dummy compare
        /* Should i set a compare in the near future ?*/
        //timer->Instance->CCR1 = 0xFFFFFFFF;
    }
}
 8007882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	20004e80 	.word	0x20004e80
 800788c:	20005010 	.word	0x20005010

08007890 <scheduler_timer_callback>:

void scheduler_timer_callback()
{
 8007890:	b538      	push	{r3, r4, r5, lr}
    // Exit early if this wasn't a CCR1 match
    if (!(timer->Instance->SR & TIM_SR_CC1IF))
 8007892:	4b23      	ldr	r3, [pc, #140]	@ (8007920 <scheduler_timer_callback+0x90>)
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	6813      	ldr	r3, [r2, #0]
 8007898:	6919      	ldr	r1, [r3, #16]
 800789a:	f011 0f02 	tst.w	r1, #2
 800789e:	d03e      	beq.n	800791e <scheduler_timer_callback+0x8e>
    {
        return;
    }

    timer->Instance->SR &= ~TIM_SR_CC1IF;  // Clear the compare match flag
 80078a0:	6919      	ldr	r1, [r3, #16]
 80078a2:	f021 0102 	bic.w	r1, r1, #2
 80078a6:	6119      	str	r1, [r3, #16]
    time_us_t time_now_us = timer->Instance->CNT; // I have avoided the function call overhead here. might be minimal anyways...
 80078a8:	6813      	ldr	r3, [r2, #0]
 80078aa:	6a5d      	ldr	r5, [r3, #36]	@ 0x24

    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 80078ac:	2400      	movs	r4, #0
 80078ae:	e00e      	b.n	80078ce <scheduler_timer_callback+0x3e>
        {
            event_queue[i].callback_arg(event_queue[i].arg);
        }
        else
        {
            event_queue[i].callback_noarg();
 80078b0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80078b4:	009a      	lsls	r2, r3, #2
 80078b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007924 <scheduler_timer_callback+0x94>)
 80078b8:	4413      	add	r3, r2
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	4798      	blx	r3
        }

        event_queue[i].state = EVENT_STATE_INACTIVE;
 80078be:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80078c2:	009a      	lsls	r2, r3, #2
 80078c4:	4b17      	ldr	r3, [pc, #92]	@ (8007924 <scheduler_timer_callback+0x94>)
 80078c6:	4413      	add	r3, r2
 80078c8:	2200      	movs	r2, #0
 80078ca:	741a      	strb	r2, [r3, #16]
    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 80078cc:	3401      	adds	r4, #1
 80078ce:	2c13      	cmp	r4, #19
 80078d0:	dc23      	bgt.n	800791a <scheduler_timer_callback+0x8a>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 80078d2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80078d6:	009a      	lsls	r2, r3, #2
 80078d8:	4b12      	ldr	r3, [pc, #72]	@ (8007924 <scheduler_timer_callback+0x94>)
 80078da:	4413      	add	r3, r2
 80078dc:	7c1b      	ldrb	r3, [r3, #16]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d1f4      	bne.n	80078cc <scheduler_timer_callback+0x3c>
        if ((int32_t)(time_now_us - event_queue[i].timestamp_us) < 0)
 80078e2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80078e6:	0093      	lsls	r3, r2, #2
 80078e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007924 <scheduler_timer_callback+0x94>)
 80078ea:	58d3      	ldr	r3, [r2, r3]
 80078ec:	1aeb      	subs	r3, r5, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dbec      	blt.n	80078cc <scheduler_timer_callback+0x3c>
        event_queue[i].state = EVENT_STATE_ACTIVE;
 80078f2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80078f6:	009a      	lsls	r2, r3, #2
 80078f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007924 <scheduler_timer_callback+0x94>)
 80078fa:	4413      	add	r3, r2
 80078fc:	2202      	movs	r2, #2
 80078fe:	741a      	strb	r2, [r3, #16]
        if (event_queue[i].uses_arg)
 8007900:	7c5b      	ldrb	r3, [r3, #17]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0d4      	beq.n	80078b0 <scheduler_timer_callback+0x20>
            event_queue[i].callback_arg(event_queue[i].arg);
 8007906:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800790a:	fa03 f202 	lsl.w	r2, r3, r2
 800790e:	4b05      	ldr	r3, [pc, #20]	@ (8007924 <scheduler_timer_callback+0x94>)
 8007910:	4413      	add	r3, r2
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	68d8      	ldr	r0, [r3, #12]
 8007916:	4790      	blx	r2
 8007918:	e7d1      	b.n	80078be <scheduler_timer_callback+0x2e>
    }

    update_next_event();  // Schedule the next event
 800791a:	f7ff ff8b 	bl	8007834 <update_next_event>
}
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	20005010 	.word	0x20005010
 8007924:	20004e80 	.word	0x20004e80

08007928 <scheduler_schedule_event_with_arg>:


bool scheduler_schedule_event_with_arg(time_us_t timestamp_us, void (*callback)(void *), void *arg)
{
    if (callback == NULL) return false;
 8007928:	b311      	cbz	r1, 8007970 <scheduler_schedule_event_with_arg+0x48>
{
 800792a:	b510      	push	{r4, lr}
 800792c:	460c      	mov	r4, r1

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 800792e:	2300      	movs	r3, #0
 8007930:	2b13      	cmp	r3, #19
 8007932:	d81b      	bhi.n	800796c <scheduler_schedule_event_with_arg+0x44>
        if (event_queue[i].state == EVENT_STATE_INACTIVE) {
 8007934:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8007938:	490e      	ldr	r1, [pc, #56]	@ (8007974 <scheduler_schedule_event_with_arg+0x4c>)
 800793a:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 800793e:	7c09      	ldrb	r1, [r1, #16]
 8007940:	b109      	cbz	r1, 8007946 <scheduler_schedule_event_with_arg+0x1e>
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8007942:	3301      	adds	r3, #1
 8007944:	e7f4      	b.n	8007930 <scheduler_schedule_event_with_arg+0x8>
            event_queue[i].timestamp_us = timestamp_us;
 8007946:	490b      	ldr	r1, [pc, #44]	@ (8007974 <scheduler_schedule_event_with_arg+0x4c>)
 8007948:	46e6      	mov	lr, ip
 800794a:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 800794e:	f841 002e 	str.w	r0, [r1, lr, lsl #2]
            event_queue[i].callback_arg = callback;
 8007952:	f8cc 4004 	str.w	r4, [ip, #4]
            event_queue[i].arg = arg;
 8007956:	f8cc 200c 	str.w	r2, [ip, #12]
            event_queue[i].uses_arg = true;
 800795a:	2401      	movs	r4, #1
 800795c:	f88c 4011 	strb.w	r4, [ip, #17]
            event_queue[i].state = EVENT_STATE_PENDING;
 8007960:	f88c 4010 	strb.w	r4, [ip, #16]

            update_next_event();
 8007964:	f7ff ff66 	bl	8007834 <update_next_event>
            return true;
 8007968:	4620      	mov	r0, r4
        }
    }

    return false;
}
 800796a:	bd10      	pop	{r4, pc}
    return false;
 800796c:	2000      	movs	r0, #0
 800796e:	e7fc      	b.n	800796a <scheduler_schedule_event_with_arg+0x42>
    if (callback == NULL) return false;
 8007970:	2000      	movs	r0, #0
}
 8007972:	4770      	bx	lr
 8007974:	20004e80 	.word	0x20004e80

08007978 <sensor_tps_get>:
#include "error_handling.h"
#include <math.h>
#include "utils.h"

percent_t sensor_tps_get(sensor_tps_s *sensor)
{
 8007978:	b510      	push	{r4, lr}
    if (sensor == NULL)
 800797a:	b3a0      	cbz	r0, 80079e6 <sensor_tps_get+0x6e>
 800797c:	4604      	mov	r4, r0
    {
        log_error("tps is null");
        return SENSOR_TPS_FAIL_SAFE;
    }
     if (sensor->wide_open_throttle_adc_value == 0 && sensor->closed_throttle_adc_value == 0)
 800797e:	8803      	ldrh	r3, [r0, #0]
 8007980:	b90b      	cbnz	r3, 8007986 <sensor_tps_get+0xe>
 8007982:	8843      	ldrh	r3, [r0, #2]
 8007984:	b3ab      	cbz	r3, 80079f2 <sensor_tps_get+0x7a>
    {
        log_error("tps wrong sensor calib");
        return SENSOR_TPS_FAIL_SAFE;
    }
    percent_t result = 0;
    uint16_t raw_data = analog_inputs_get_data(sensor->analog_channel);
 8007986:	7920      	ldrb	r0, [r4, #4]
 8007988:	f7f9 fa04 	bl	8000d94 <analog_inputs_get_data>
 800798c:	ee07 0a90 	vmov	s15, r0
    if (sensor->is_inverted)
 8007990:	7963      	ldrb	r3, [r4, #5]
 8007992:	b3a3      	cbz	r3, 80079fe <sensor_tps_get+0x86>
    {
        result = mapf((float)raw_data, (float)sensor->wide_open_throttle_adc_value, (float)sensor->closed_throttle_adc_value, (float)0, (float)100);
 8007994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007998:	8822      	ldrh	r2, [r4, #0]
 800799a:	ee07 2a10 	vmov	s14, r2
 800799e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80079a2:	8863      	ldrh	r3, [r4, #2]
 80079a4:	ee07 3a10 	vmov	s14, r3
 80079a8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (in_max == in_min)
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d043      	beq.n	8007a38 <sensor_tps_get+0xc0>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80079b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80079b4:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8007a50 <sensor_tps_get+0xd8>
 80079b8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80079bc:	ee37 7a66 	vsub.f32	s14, s14, s13
 80079c0:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80079c4:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8007a54 <sensor_tps_get+0xdc>
 80079c8:	ee30 0a27 	vadd.f32	s0, s0, s15
    }
    else
    {
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
    }
    if (!IS_IN_RANGE(result, (percent_t)0, (percent_t)100))
 80079cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80079d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d4:	db36      	blt.n	8007a44 <sensor_tps_get+0xcc>
 80079d6:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8007a50 <sensor_tps_get+0xd8>
 80079da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80079de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e2:	d832      	bhi.n	8007a4a <sensor_tps_get+0xd2>
    {
        return SENSOR_TPS_FAIL_SAFE;
        log_error("tps out of range!");
    }
    return result;
 80079e4:	bd10      	pop	{r4, pc}
        log_error("tps is null");
 80079e6:	481c      	ldr	r0, [pc, #112]	@ (8007a58 <sensor_tps_get+0xe0>)
 80079e8:	f7f9 fece 	bl	8001788 <log_error>
        return SENSOR_TPS_FAIL_SAFE;
 80079ec:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8007a5c <sensor_tps_get+0xe4>
 80079f0:	e7f8      	b.n	80079e4 <sensor_tps_get+0x6c>
        log_error("tps wrong sensor calib");
 80079f2:	481b      	ldr	r0, [pc, #108]	@ (8007a60 <sensor_tps_get+0xe8>)
 80079f4:	f7f9 fec8 	bl	8001788 <log_error>
        return SENSOR_TPS_FAIL_SAFE;
 80079f8:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8007a5c <sensor_tps_get+0xe4>
 80079fc:	e7f2      	b.n	80079e4 <sensor_tps_get+0x6c>
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
 80079fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a02:	8862      	ldrh	r2, [r4, #2]
 8007a04:	ee07 2a10 	vmov	s14, r2
 8007a08:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007a0c:	8823      	ldrh	r3, [r4, #0]
 8007a0e:	ee07 3a10 	vmov	s14, r3
 8007a12:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (in_max == in_min)
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d011      	beq.n	8007a3e <sensor_tps_get+0xc6>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007a1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a1e:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 8007a50 <sensor_tps_get+0xd8>
 8007a22:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007a26:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007a2a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8007a2e:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8007a54 <sensor_tps_get+0xdc>
 8007a32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007a36:	e7c9      	b.n	80079cc <sensor_tps_get+0x54>
        result = mapf((float)raw_data, (float)sensor->wide_open_throttle_adc_value, (float)sensor->closed_throttle_adc_value, (float)0, (float)100);
 8007a38:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8007a54 <sensor_tps_get+0xdc>
 8007a3c:	e7cb      	b.n	80079d6 <sensor_tps_get+0x5e>
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
 8007a3e:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8007a54 <sensor_tps_get+0xdc>
 8007a42:	e7c8      	b.n	80079d6 <sensor_tps_get+0x5e>
        return SENSOR_TPS_FAIL_SAFE;
 8007a44:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8007a5c <sensor_tps_get+0xe4>
 8007a48:	e7cc      	b.n	80079e4 <sensor_tps_get+0x6c>
 8007a4a:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8007a5c <sensor_tps_get+0xe4>
 8007a4e:	e7c9      	b.n	80079e4 <sensor_tps_get+0x6c>
 8007a50:	42c80000 	.word	0x42c80000
 8007a54:	00000000 	.word	0x00000000
 8007a58:	0800a1a8 	.word	0x0800a1a8
 8007a5c:	7fc00000 	.word	0x7fc00000
 8007a60:	0800a1b4 	.word	0x0800a1b4

08007a64 <set_filtering>:

trigger_s *trigger = NULL;

void set_filtering(trigger_s *trigger)
{
  switch (configuration.trigger.filtering)
 8007a64:	4b0d      	ldr	r3, [pc, #52]	@ (8007a9c <set_filtering+0x38>)
 8007a66:	799b      	ldrb	r3, [r3, #6]
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d813      	bhi.n	8007a94 <set_filtering+0x30>
 8007a6c:	e8df f003 	tbb	[pc, r3]
 8007a70:	0c090502 	.word	0x0c090502
  {
    case TF_FILTERING_NONE:
      trigger->_trigger_filter_time_us = 0;
 8007a74:	2300      	movs	r3, #0
 8007a76:	6043      	str	r3, [r0, #4]
        break;
 8007a78:	4770      	bx	lr
    case TF_FILTERING_LITE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 4U; 
 8007a7a:	6943      	ldr	r3, [r0, #20]
 8007a7c:	089b      	lsrs	r3, r3, #2
 8007a7e:	6043      	str	r3, [r0, #4]
        break;
 8007a80:	4770      	bx	lr
    case TF_FILTERING_MEDIUM:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 1U;
 8007a82:	6943      	ldr	r3, [r0, #20]
 8007a84:	6043      	str	r3, [r0, #4]
        break;
 8007a86:	4770      	bx	lr
    case TF_FILTERING_AGGRESSIVE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us * 3 / 4;
 8007a88:	6943      	ldr	r3, [r0, #20]
 8007a8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007a8e:	089b      	lsrs	r3, r3, #2
 8007a90:	6043      	str	r3, [r0, #4]
        break;
 8007a92:	4770      	bx	lr
    default:
        // Handle invalid filtering level
        trigger->_trigger_filter_time_us = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	6043      	str	r3, [r0, #4]
        break;
  }
}
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	200009a4 	.word	0x200009a4

08007aa0 <trigger_init>:

void trigger_init(trigger_s *instance)
{   
  bool temp_status = true;
  if (instance == NULL)
 8007aa0:	b1b8      	cbz	r0, 8007ad2 <trigger_init+0x32>
{   
 8007aa2:	b510      	push	{r4, lr}
    /**
     * @todo and maybe throw an error!
     */
    return;
  }
  trigger = instance;
 8007aa4:	4c0b      	ldr	r4, [pc, #44]	@ (8007ad4 <trigger_init+0x34>)
 8007aa6:	6020      	str	r0, [r4, #0]
  
  trigger->sync_status = TS_NOT_SYNCED;
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	7042      	strb	r2, [r0, #1]
  set_filtering(trigger);
 8007aac:	6820      	ldr	r0, [r4, #0]
 8007aae:	f7ff ffd9 	bl	8007a64 <set_filtering>
  trigger->_trigger_actual_teeth = configuration.trigger.full_teeth - configuration.trigger.missing_teeth;
 8007ab2:	4b09      	ldr	r3, [pc, #36]	@ (8007ad8 <trigger_init+0x38>)
 8007ab4:	79da      	ldrb	r2, [r3, #7]
 8007ab6:	7a19      	ldrb	r1, [r3, #8]
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	1a50      	subs	r0, r2, r1
 8007abc:	f883 0022 	strb.w	r0, [r3, #34]	@ 0x22
    
  if (configuration.trigger.full_teeth == 0 || configuration.trigger.missing_teeth == 0)
 8007ac0:	b112      	cbz	r2, 8007ac8 <trigger_init+0x28>
 8007ac2:	b121      	cbz	r1, 8007ace <trigger_init+0x2e>
  bool temp_status = true;
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	e000      	b.n	8007aca <trigger_init+0x2a>
  {
    temp_status = false;
 8007ac8:	2200      	movs	r2, #0
  }
  trigger->initialized = temp_status;
 8007aca:	701a      	strb	r2, [r3, #0]
    
}
 8007acc:	bd10      	pop	{r4, pc}
    temp_status = false;
 8007ace:	2200      	movs	r2, #0
 8007ad0:	e7fb      	b.n	8007aca <trigger_init+0x2a>
 8007ad2:	4770      	bx	lr
 8007ad4:	20005014 	.word	0x20005014
 8007ad8:	200009a4 	.word	0x200009a4

08007adc <crankshaft_get_rpm>:


rpm_t crankshaft_get_rpm()
{
  return engine.rpm;
}
 8007adc:	4b01      	ldr	r3, [pc, #4]	@ (8007ae4 <crankshaft_get_rpm+0x8>)
 8007ade:	ed93 0a03 	vldr	s0, [r3, #12]
 8007ae2:	4770      	bx	lr
 8007ae4:	20000964 	.word	0x20000964

08007ae8 <crankshaft_get_angle>:
 * @note angle is updated on every trigger event!
 */
angle_t crankshaft_get_angle()
{
  return engine.crankshaft_angle;
}
 8007ae8:	4b01      	ldr	r3, [pc, #4]	@ (8007af0 <crankshaft_get_angle+0x8>)
 8007aea:	ed93 0a01 	vldr	s0, [r3, #4]
 8007aee:	4770      	bx	lr
 8007af0:	20000964 	.word	0x20000964

08007af4 <trigger_tooth_handle>:
{
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	ed2d 8b02 	vpush	{d8}
  if (!trigger->initialized)
 8007afa:	4b5a      	ldr	r3, [pc, #360]	@ (8007c64 <trigger_tooth_handle+0x170>)
 8007afc:	681c      	ldr	r4, [r3, #0]
 8007afe:	7825      	ldrb	r5, [r4, #0]
 8007b00:	b915      	cbnz	r5, 8007b08 <trigger_tooth_handle+0x14>
}
 8007b02:	ecbd 8b02 	vpop	{d8}
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
  trigger->_tooth_time_us[0] = get_time_us();
 8007b08:	f7ff fe8c 	bl	8007824 <get_time_us>
 8007b0c:	60a0      	str	r0, [r4, #8]
  trigger->_current_tooth_gap_us = trigger->_tooth_time_us[0] - trigger->_tooth_time_us[1];
 8007b0e:	4b55      	ldr	r3, [pc, #340]	@ (8007c64 <trigger_tooth_handle+0x170>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	68d8      	ldr	r0, [r3, #12]
 8007b16:	1a12      	subs	r2, r2, r0
 8007b18:	615a      	str	r2, [r3, #20]
  if (trigger->_current_tooth_gap_us < trigger->_trigger_filter_time_us) // Pulses should never be less than _trigger_filter_time_us, so if they are it means a false trigger. (A 36-1 wheel at 8000rpm will have triggers approx. every 200uS)
 8007b1a:	6859      	ldr	r1, [r3, #4]
 8007b1c:	428a      	cmp	r2, r1
 8007b1e:	d3f0      	bcc.n	8007b02 <trigger_tooth_handle+0xe>
  trigger->_counted_tooth++; //Increment the tooth counter
 8007b20:	8c19      	ldrh	r1, [r3, #32]
 8007b22:	3101      	adds	r1, #1
 8007b24:	b289      	uxth	r1, r1
 8007b26:	8419      	strh	r1, [r3, #32]
  previous_tooth_gap = trigger->_tooth_time_us[1] - trigger->_tooth_time_us[2];
 8007b28:	691c      	ldr	r4, [r3, #16]
 8007b2a:	1b00      	subs	r0, r0, r4
  if (previous_tooth_gap < trigger->_current_tooth_gap_us) 
 8007b2c:	4282      	cmp	r2, r0
 8007b2e:	d965      	bls.n	8007bfc <trigger_tooth_handle+0x108>
    trigger->_shorter_tooth_gap = previous_tooth_gap;
 8007b30:	6198      	str	r0, [r3, #24]
  if(configuration.trigger.missing_teeth == 1)
 8007b32:	484d      	ldr	r0, [pc, #308]	@ (8007c68 <trigger_tooth_handle+0x174>)
 8007b34:	7a00      	ldrb	r0, [r0, #8]
 8007b36:	2801      	cmp	r0, #1
 8007b38:	d062      	beq.n	8007c00 <trigger_tooth_handle+0x10c>
    trigger->_target_tooth_gap_us = trigger->_shorter_tooth_gap * configuration.trigger.missing_teeth;
 8007b3a:	699c      	ldr	r4, [r3, #24]
 8007b3c:	fb00 f404 	mul.w	r4, r0, r4
 8007b40:	61dc      	str	r4, [r3, #28]
  if ((trigger->_current_tooth_gap_us > trigger->_target_tooth_gap_us) || (trigger->_counted_tooth > trigger->_trigger_actual_teeth))
 8007b42:	69d8      	ldr	r0, [r3, #28]
 8007b44:	4282      	cmp	r2, r0
 8007b46:	d803      	bhi.n	8007b50 <trigger_tooth_handle+0x5c>
 8007b48:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8007b4c:	4291      	cmp	r1, r2
 8007b4e:	d968      	bls.n	8007c22 <trigger_tooth_handle+0x12e>
    if (trigger->_counted_tooth < trigger->_trigger_actual_teeth)
 8007b50:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8007b54:	4291      	cmp	r1, r2
 8007b56:	d259      	bcs.n	8007c0c <trigger_tooth_handle+0x118>
      trigger->sync_status = TS_NOT_SYNCED;
 8007b58:	2200      	movs	r2, #0
 8007b5a:	705a      	strb	r2, [r3, #1]
      trigger->sync_loss_counter++;
 8007b5c:	4941      	ldr	r1, [pc, #260]	@ (8007c64 <trigger_tooth_handle+0x170>)
 8007b5e:	6808      	ldr	r0, [r1, #0]
 8007b60:	8843      	ldrh	r3, [r0, #2]
 8007b62:	3301      	adds	r3, #1
 8007b64:	8043      	strh	r3, [r0, #2]
      engine.total_revolutions = 0;
 8007b66:	4b41      	ldr	r3, [pc, #260]	@ (8007c6c <trigger_tooth_handle+0x178>)
 8007b68:	601a      	str	r2, [r3, #0]
      engine.rpm = 0;
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	60d8      	str	r0, [r3, #12]
      trigger->_counted_tooth = 0;
 8007b6e:	680b      	ldr	r3, [r1, #0]
 8007b70:	841a      	strh	r2, [r3, #32]
  engine.crankshaft_angle = 360.0f / (angle_t)configuration.trigger.full_teeth * (angle_t)trigger->_counted_tooth;
 8007b72:	4b3d      	ldr	r3, [pc, #244]	@ (8007c68 <trigger_tooth_handle+0x174>)
 8007b74:	79d9      	ldrb	r1, [r3, #7]
 8007b76:	ee07 1a90 	vmov	s15, r1
 8007b7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b7e:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8007c70 <trigger_tooth_handle+0x17c>
 8007b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b86:	4b37      	ldr	r3, [pc, #220]	@ (8007c64 <trigger_tooth_handle+0x170>)
 8007b88:	6818      	ldr	r0, [r3, #0]
 8007b8a:	8c03      	ldrh	r3, [r0, #32]
 8007b8c:	ee07 3a10 	vmov	s14, r3
 8007b90:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b98:	4a34      	ldr	r2, [pc, #208]	@ (8007c6c <trigger_tooth_handle+0x178>)
 8007b9a:	edc2 7a01 	vstr	s15, [r2, #4]
  engine.rpm = (rpm_t)(CONVERSION_FACTOR_SECONDS_TO_MICROSECONDS * CONVERSION_FACTOR_MINUTES_TO_SECONDS / trigger->_shorter_tooth_gap / configuration.trigger.full_teeth);
 8007b9e:	6984      	ldr	r4, [r0, #24]
 8007ba0:	4b34      	ldr	r3, [pc, #208]	@ (8007c74 <trigger_tooth_handle+0x180>)
 8007ba2:	fbb3 f3f4 	udiv	r3, r3, r4
 8007ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007baa:	ee07 3a90 	vmov	s15, r3
 8007bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb2:	edc2 7a03 	vstr	s15, [r2, #12]
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= configuration.cranking_rpm_threshold)
 8007bb6:	7843      	ldrb	r3, [r0, #1]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d034      	beq.n	8007c26 <trigger_tooth_handle+0x132>
  else if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < configuration.cranking_rpm_threshold)
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d03e      	beq.n	8007c3e <trigger_tooth_handle+0x14a>
  else if (trigger->sync_status == TS_NOT_SYNCED)
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d148      	bne.n	8007c56 <trigger_tooth_handle+0x162>
    engine.spinning_state = SS_SPINNING_UP;
 8007bc4:	4b29      	ldr	r3, [pc, #164]	@ (8007c6c <trigger_tooth_handle+0x178>)
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	745a      	strb	r2, [r3, #17]
  if(is_missing_teeth == false)
 8007bca:	2d00      	cmp	r5, #0
 8007bcc:	d047      	beq.n	8007c5e <trigger_tooth_handle+0x16a>
  trigger->_tooth_time_us[2] = trigger->_tooth_time_us[1];
 8007bce:	4b25      	ldr	r3, [pc, #148]	@ (8007c64 <trigger_tooth_handle+0x170>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	611a      	str	r2, [r3, #16]
  trigger->_tooth_time_us[1] = trigger->_tooth_time_us[0];
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	60da      	str	r2, [r3, #12]
  ignition_trigger_event_handle(crankshaft_get_angle(), crankshaft_get_rpm(), get_time_us());
 8007bda:	f7ff ff85 	bl	8007ae8 <crankshaft_get_angle>
 8007bde:	eeb0 8a40 	vmov.f32	s16, s0
 8007be2:	f7ff ff7b 	bl	8007adc <crankshaft_get_rpm>
 8007be6:	eef0 8a40 	vmov.f32	s17, s0
 8007bea:	f7ff fe1b 	bl	8007824 <get_time_us>
 8007bee:	eef0 0a68 	vmov.f32	s1, s17
 8007bf2:	eeb0 0a48 	vmov.f32	s0, s16
 8007bf6:	f7fa f901 	bl	8001dfc <ignition_trigger_event_handle>
 8007bfa:	e782      	b.n	8007b02 <trigger_tooth_handle+0xe>
    trigger->_shorter_tooth_gap = trigger->_current_tooth_gap_us;
 8007bfc:	619a      	str	r2, [r3, #24]
 8007bfe:	e798      	b.n	8007b32 <trigger_tooth_handle+0x3e>
    trigger->_target_tooth_gap_us = (3 * trigger->_shorter_tooth_gap) >> 1; 
 8007c00:	6998      	ldr	r0, [r3, #24]
 8007c02:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007c06:	0840      	lsrs	r0, r0, #1
 8007c08:	61d8      	str	r0, [r3, #28]
 8007c0a:	e79a      	b.n	8007b42 <trigger_tooth_handle+0x4e>
      trigger->sync_status = TS_FULLY_SYNCED;
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	705a      	strb	r2, [r3, #1]
      engine.total_revolutions++;
 8007c10:	4a16      	ldr	r2, [pc, #88]	@ (8007c6c <trigger_tooth_handle+0x178>)
 8007c12:	6813      	ldr	r3, [r2, #0]
 8007c14:	3301      	adds	r3, #1
 8007c16:	6013      	str	r3, [r2, #0]
      trigger->_counted_tooth = 0;
 8007c18:	4b12      	ldr	r3, [pc, #72]	@ (8007c64 <trigger_tooth_handle+0x170>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	841a      	strh	r2, [r3, #32]
 8007c20:	e7a7      	b.n	8007b72 <trigger_tooth_handle+0x7e>
  bool is_missing_teeth = false;
 8007c22:	2500      	movs	r5, #0
 8007c24:	e7a5      	b.n	8007b72 <trigger_tooth_handle+0x7e>
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= configuration.cranking_rpm_threshold)
 8007c26:	4a10      	ldr	r2, [pc, #64]	@ (8007c68 <trigger_tooth_handle+0x174>)
 8007c28:	ed92 7a03 	vldr	s14, [r2, #12]
 8007c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c34:	dbc2      	blt.n	8007bbc <trigger_tooth_handle+0xc8>
    engine.spinning_state = SS_RUNNING;
 8007c36:	4b0d      	ldr	r3, [pc, #52]	@ (8007c6c <trigger_tooth_handle+0x178>)
 8007c38:	2203      	movs	r2, #3
 8007c3a:	745a      	strb	r2, [r3, #17]
 8007c3c:	e7c5      	b.n	8007bca <trigger_tooth_handle+0xd6>
  else if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < configuration.cranking_rpm_threshold)
 8007c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8007c68 <trigger_tooth_handle+0x174>)
 8007c40:	ed92 7a03 	vldr	s14, [r2, #12]
 8007c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c4c:	d5b8      	bpl.n	8007bc0 <trigger_tooth_handle+0xcc>
    engine.spinning_state = SS_CRANKING;
 8007c4e:	4b07      	ldr	r3, [pc, #28]	@ (8007c6c <trigger_tooth_handle+0x178>)
 8007c50:	2202      	movs	r2, #2
 8007c52:	745a      	strb	r2, [r3, #17]
 8007c54:	e7b9      	b.n	8007bca <trigger_tooth_handle+0xd6>
    engine.spinning_state = SS_STOPPED;
 8007c56:	4b05      	ldr	r3, [pc, #20]	@ (8007c6c <trigger_tooth_handle+0x178>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	745a      	strb	r2, [r3, #17]
 8007c5c:	e7b5      	b.n	8007bca <trigger_tooth_handle+0xd6>
    set_filtering(trigger); 
 8007c5e:	f7ff ff01 	bl	8007a64 <set_filtering>
 8007c62:	e7b4      	b.n	8007bce <trigger_tooth_handle+0xda>
 8007c64:	20005014 	.word	0x20005014
 8007c68:	200009a4 	.word	0x200009a4
 8007c6c:	20000964 	.word	0x20000964
 8007c70:	43b40000 	.word	0x43b40000
 8007c74:	03938700 	.word	0x03938700

08007c78 <trigger_simulator_init>:
uint8_t wheel_missing_teeth = 0;
void (*wheel_callback)(void) = NULL;

void trigger_simulator_init(uint8_t full_teeth, uint8_t missing_teeth, void (*callback)(void))
{
    wheel_full_teeth = full_teeth;
 8007c78:	4b03      	ldr	r3, [pc, #12]	@ (8007c88 <trigger_simulator_init+0x10>)
 8007c7a:	7018      	strb	r0, [r3, #0]
    wheel_missing_teeth = missing_teeth;
 8007c7c:	4b03      	ldr	r3, [pc, #12]	@ (8007c8c <trigger_simulator_init+0x14>)
 8007c7e:	7019      	strb	r1, [r3, #0]
    wheel_callback = callback;
 8007c80:	4b03      	ldr	r3, [pc, #12]	@ (8007c90 <trigger_simulator_init+0x18>)
 8007c82:	601a      	str	r2, [r3, #0]
}
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	20005025 	.word	0x20005025
 8007c8c:	20005024 	.word	0x20005024
 8007c90:	20005020 	.word	0x20005020

08007c94 <trigger_simulator_update>:

void trigger_simulator_update(rpm_t rpm)
{
    if (wheel_callback == NULL)
 8007c94:	4b20      	ldr	r3, [pc, #128]	@ (8007d18 <trigger_simulator_update+0x84>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d03c      	beq.n	8007d16 <trigger_simulator_update+0x82>
{
 8007c9c:	b510      	push	{r4, lr}
    if (rpm == 0)
 8007c9e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ca6:	d030      	beq.n	8007d0a <trigger_simulator_update+0x76>
    return (time_us_t) 60.0f * 1e6f / (rpm * 360.0f);
 8007ca8:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8007d1c <trigger_simulator_update+0x88>
 8007cac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007cb0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8007d20 <trigger_simulator_update+0x8c>
 8007cb4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cbc:	ee17 4a90 	vmov	r4, s15
    {
        return;
    }

    time_us_t tooth_interval = microseconds_per_degree(rpm) * 360 / wheel_full_teeth;
 8007cc0:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8007cc4:	fb03 f404 	mul.w	r4, r3, r4
 8007cc8:	4b16      	ldr	r3, [pc, #88]	@ (8007d24 <trigger_simulator_update+0x90>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	fbb4 f4f3 	udiv	r4, r4, r3

    time_us_t current_time = get_time_us();
 8007cd0:	f7ff fda8 	bl	8007824 <get_time_us>
    static time_us_t prev_time = 0;

    if ((int32_t)(current_time - prev_time) < tooth_interval)
 8007cd4:	4b14      	ldr	r3, [pc, #80]	@ (8007d28 <trigger_simulator_update+0x94>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	1ac3      	subs	r3, r0, r3
 8007cda:	42a3      	cmp	r3, r4
 8007cdc:	d314      	bcc.n	8007d08 <trigger_simulator_update+0x74>
    {
        return;
    }
    prev_time = current_time;
 8007cde:	4b12      	ldr	r3, [pc, #72]	@ (8007d28 <trigger_simulator_update+0x94>)
 8007ce0:	6018      	str	r0, [r3, #0]
    
    static uint8_t current_tooth_index = 0;

    if (current_tooth_index < wheel_missing_teeth)
 8007ce2:	4b12      	ldr	r3, [pc, #72]	@ (8007d2c <trigger_simulator_update+0x98>)
 8007ce4:	781a      	ldrb	r2, [r3, #0]
 8007ce6:	4b12      	ldr	r3, [pc, #72]	@ (8007d30 <trigger_simulator_update+0x9c>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d302      	bcc.n	8007cf4 <trigger_simulator_update+0x60>
    {
        // welll do nothing!
    }
    else
    {
        wheel_callback();
 8007cee:	4b0a      	ldr	r3, [pc, #40]	@ (8007d18 <trigger_simulator_update+0x84>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4798      	blx	r3
    }
    

    if (current_tooth_index < (wheel_full_teeth - 1))
 8007cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8007d2c <trigger_simulator_update+0x98>)
 8007cf6:	781a      	ldrb	r2, [r3, #0]
 8007cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8007d24 <trigger_simulator_update+0x90>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	da05      	bge.n	8007d0e <trigger_simulator_update+0x7a>
    {
        current_tooth_index++;
 8007d02:	3201      	adds	r2, #1
 8007d04:	4b09      	ldr	r3, [pc, #36]	@ (8007d2c <trigger_simulator_update+0x98>)
 8007d06:	701a      	strb	r2, [r3, #0]
    {
        current_tooth_index = 0;
    }


}
 8007d08:	bd10      	pop	{r4, pc}
        return 0;
 8007d0a:	2400      	movs	r4, #0
 8007d0c:	e7d8      	b.n	8007cc0 <trigger_simulator_update+0x2c>
        current_tooth_index = 0;
 8007d0e:	4b07      	ldr	r3, [pc, #28]	@ (8007d2c <trigger_simulator_update+0x98>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	701a      	strb	r2, [r3, #0]
 8007d14:	e7f8      	b.n	8007d08 <trigger_simulator_update+0x74>
 8007d16:	4770      	bx	lr
 8007d18:	20005020 	.word	0x20005020
 8007d1c:	43b40000 	.word	0x43b40000
 8007d20:	4c64e1c0 	.word	0x4c64e1c0
 8007d24:	20005025 	.word	0x20005025
 8007d28:	2000501c 	.word	0x2000501c
 8007d2c:	20005018 	.word	0x20005018
 8007d30:	20005024 	.word	0x20005024

08007d34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d36:	2200      	movs	r2, #0
 8007d38:	490f      	ldr	r1, [pc, #60]	@ (8007d78 <MX_USB_DEVICE_Init+0x44>)
 8007d3a:	4810      	ldr	r0, [pc, #64]	@ (8007d7c <MX_USB_DEVICE_Init+0x48>)
 8007d3c:	f000 fc4a 	bl	80085d4 <USBD_Init>
 8007d40:	b970      	cbnz	r0, 8007d60 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d42:	490f      	ldr	r1, [pc, #60]	@ (8007d80 <MX_USB_DEVICE_Init+0x4c>)
 8007d44:	480d      	ldr	r0, [pc, #52]	@ (8007d7c <MX_USB_DEVICE_Init+0x48>)
 8007d46:	f000 fc5c 	bl	8008602 <USBD_RegisterClass>
 8007d4a:	b960      	cbnz	r0, 8007d66 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d4c:	490d      	ldr	r1, [pc, #52]	@ (8007d84 <MX_USB_DEVICE_Init+0x50>)
 8007d4e:	480b      	ldr	r0, [pc, #44]	@ (8007d7c <MX_USB_DEVICE_Init+0x48>)
 8007d50:	f000 fa39 	bl	80081c6 <USBD_CDC_RegisterInterface>
 8007d54:	b950      	cbnz	r0, 8007d6c <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d56:	4809      	ldr	r0, [pc, #36]	@ (8007d7c <MX_USB_DEVICE_Init+0x48>)
 8007d58:	f000 fc73 	bl	8008642 <USBD_Start>
 8007d5c:	b948      	cbnz	r0, 8007d72 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d5e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007d60:	f7fa f976 	bl	8002050 <Error_Handler>
 8007d64:	e7ed      	b.n	8007d42 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8007d66:	f7fa f973 	bl	8002050 <Error_Handler>
 8007d6a:	e7ef      	b.n	8007d4c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8007d6c:	f7fa f970 	bl	8002050 <Error_Handler>
 8007d70:	e7f1      	b.n	8007d56 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8007d72:	f7fa f96d 	bl	8002050 <Error_Handler>
}
 8007d76:	e7f2      	b.n	8007d5e <MX_USB_DEVICE_Init+0x2a>
 8007d78:	20000128 	.word	0x20000128
 8007d7c:	20005028 	.word	0x20005028
 8007d80:	2000009c 	.word	0x2000009c
 8007d84:	200000e0 	.word	0x200000e0

08007d88 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d88:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d8a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007d8e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8007d92:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 8007d96:	b18c      	cbz	r4, 8007dbc <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d98:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007d9c:	6843      	ldr	r3, [r0, #4]
 8007d9e:	b17b      	cbz	r3, 8007dc0 <USBD_CDC_EP0_RxReady+0x38>
 8007da0:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8007da4:	28ff      	cmp	r0, #255	@ 0xff
 8007da6:	d00d      	beq.n	8007dc4 <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8007dae:	4621      	mov	r1, r4
 8007db0:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8007db2:	23ff      	movs	r3, #255	@ 0xff
 8007db4:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007db8:	2000      	movs	r0, #0
}
 8007dba:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8007dbc:	2003      	movs	r0, #3
 8007dbe:	e7fc      	b.n	8007dba <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	e7fa      	b.n	8007dba <USBD_CDC_EP0_RxReady+0x32>
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	e7f8      	b.n	8007dba <USBD_CDC_EP0_RxReady+0x32>

08007dc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007dc8:	230a      	movs	r3, #10
 8007dca:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8007dcc:	4800      	ldr	r0, [pc, #0]	@ (8007dd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8007dce:	4770      	bx	lr
 8007dd0:	200000d4 	.word	0x200000d4

08007dd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 8007dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd6:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007dd8:	4f0f      	ldr	r7, [pc, #60]	@ (8007e18 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8007dda:	2182      	movs	r1, #130	@ 0x82
 8007ddc:	4638      	mov	r0, r7
 8007dde:	f000 fde3 	bl	80089a8 <USBD_GetEpDesc>
 8007de2:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007de4:	2101      	movs	r1, #1
 8007de6:	4638      	mov	r0, r7
 8007de8:	f000 fdde 	bl	80089a8 <USBD_GetEpDesc>
 8007dec:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007dee:	2181      	movs	r1, #129	@ 0x81
 8007df0:	4638      	mov	r0, r7
 8007df2:	f000 fdd9 	bl	80089a8 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8007df6:	b10d      	cbz	r5, 8007dfc <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007df8:	2210      	movs	r2, #16
 8007dfa:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8007dfc:	b11c      	cbz	r4, 8007e06 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007dfe:	2240      	movs	r2, #64	@ 0x40
 8007e00:	7122      	strb	r2, [r4, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8007e06:	b118      	cbz	r0, 8007e10 <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e08:	2240      	movs	r2, #64	@ 0x40
 8007e0a:	7102      	strb	r2, [r0, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e10:	2343      	movs	r3, #67	@ 0x43
 8007e12:	8033      	strh	r3, [r6, #0]
}
 8007e14:	4800      	ldr	r0, [pc, #0]	@ (8007e18 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8007e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e18:	20000058 	.word	0x20000058

08007e1c <USBD_CDC_GetFSCfgDesc>:
{
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e20:	4f0f      	ldr	r7, [pc, #60]	@ (8007e60 <USBD_CDC_GetFSCfgDesc+0x44>)
 8007e22:	2182      	movs	r1, #130	@ 0x82
 8007e24:	4638      	mov	r0, r7
 8007e26:	f000 fdbf 	bl	80089a8 <USBD_GetEpDesc>
 8007e2a:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	4638      	mov	r0, r7
 8007e30:	f000 fdba 	bl	80089a8 <USBD_GetEpDesc>
 8007e34:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e36:	2181      	movs	r1, #129	@ 0x81
 8007e38:	4638      	mov	r0, r7
 8007e3a:	f000 fdb5 	bl	80089a8 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8007e3e:	b10d      	cbz	r5, 8007e44 <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e40:	2210      	movs	r2, #16
 8007e42:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8007e44:	b11c      	cbz	r4, 8007e4e <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e46:	2240      	movs	r2, #64	@ 0x40
 8007e48:	7122      	strb	r2, [r4, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8007e4e:	b118      	cbz	r0, 8007e58 <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e50:	2240      	movs	r2, #64	@ 0x40
 8007e52:	7102      	strb	r2, [r0, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e58:	2343      	movs	r3, #67	@ 0x43
 8007e5a:	8033      	strh	r3, [r6, #0]
}
 8007e5c:	4800      	ldr	r0, [pc, #0]	@ (8007e60 <USBD_CDC_GetFSCfgDesc+0x44>)
 8007e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e60:	20000058 	.word	0x20000058

08007e64 <USBD_CDC_GetHSCfgDesc>:
{
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e68:	4f0f      	ldr	r7, [pc, #60]	@ (8007ea8 <USBD_CDC_GetHSCfgDesc+0x44>)
 8007e6a:	2182      	movs	r1, #130	@ 0x82
 8007e6c:	4638      	mov	r0, r7
 8007e6e:	f000 fd9b 	bl	80089a8 <USBD_GetEpDesc>
 8007e72:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e74:	2101      	movs	r1, #1
 8007e76:	4638      	mov	r0, r7
 8007e78:	f000 fd96 	bl	80089a8 <USBD_GetEpDesc>
 8007e7c:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e7e:	2181      	movs	r1, #129	@ 0x81
 8007e80:	4638      	mov	r0, r7
 8007e82:	f000 fd91 	bl	80089a8 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8007e86:	b10d      	cbz	r5, 8007e8c <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007e88:	2210      	movs	r2, #16
 8007e8a:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8007e8c:	b11c      	cbz	r4, 8007e96 <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e8e:	2200      	movs	r2, #0
 8007e90:	7122      	strb	r2, [r4, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8007e96:	b118      	cbz	r0, 8007ea0 <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e98:	2200      	movs	r2, #0
 8007e9a:	7102      	strb	r2, [r0, #4]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ea0:	2343      	movs	r3, #67	@ 0x43
 8007ea2:	8033      	strh	r3, [r6, #0]
}
 8007ea4:	4800      	ldr	r0, [pc, #0]	@ (8007ea8 <USBD_CDC_GetHSCfgDesc+0x44>)
 8007ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ea8:	20000058 	.word	0x20000058

08007eac <USBD_CDC_DataOut>:
{
 8007eac:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007eae:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007eb2:	33b0      	adds	r3, #176	@ 0xb0
 8007eb4:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007eb8:	b195      	cbz	r5, 8007ee0 <USBD_CDC_DataOut+0x34>
 8007eba:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ebc:	f000 fb32 	bl	8008524 <USBD_LL_GetRxDataSize>
 8007ec0:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ec4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8007ec8:	33b0      	adds	r3, #176	@ 0xb0
 8007eca:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007ece:	6863      	ldr	r3, [r4, #4]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8007ed6:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8007eda:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8007edc:	2000      	movs	r0, #0
}
 8007ede:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8007ee0:	2003      	movs	r0, #3
 8007ee2:	e7fc      	b.n	8007ede <USBD_CDC_DataOut+0x32>

08007ee4 <USBD_CDC_DataIn>:
{
 8007ee4:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007ee6:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007eea:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007eee:	33b0      	adds	r3, #176	@ 0xb0
 8007ef0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8007ef4:	b384      	cbz	r4, 8007f58 <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ef6:	f001 030f 	and.w	r3, r1, #15
 8007efa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007efe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007f02:	6992      	ldr	r2, [r2, #24]
 8007f04:	b14a      	cbz	r2, 8007f1a <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007f06:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 8007f0a:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8007f0e:	69ed      	ldr	r5, [r5, #28]
 8007f10:	fbb2 fcf5 	udiv	ip, r2, r5
 8007f14:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f18:	b192      	cbz	r2, 8007f40 <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007f20:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007f24:	33b0      	adds	r3, #176	@ 0xb0
 8007f26:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007f2a:	6843      	ldr	r3, [r0, #4]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	b1ab      	cbz	r3, 8007f5c <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f30:	460a      	mov	r2, r1
 8007f32:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 8007f36:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 8007f3a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8007f3c:	2000      	movs	r0, #0
}
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007f40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007f44:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007f48:	2400      	movs	r4, #0
 8007f4a:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f4c:	4623      	mov	r3, r4
 8007f4e:	4622      	mov	r2, r4
 8007f50:	f000 fb30 	bl	80085b4 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8007f54:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f56:	e7f2      	b.n	8007f3e <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 8007f58:	2003      	movs	r0, #3
 8007f5a:	e7f0      	b.n	8007f3e <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	e7ee      	b.n	8007f3e <USBD_CDC_DataIn+0x5a>

08007f60 <USBD_CDC_Setup>:
{
 8007f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f62:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f64:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007f68:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8007f6c:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 8007f70:	2200      	movs	r2, #0
 8007f72:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 8007f76:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 8007f7a:	2f00      	cmp	r7, #0
 8007f7c:	d078      	beq.n	8008070 <USBD_CDC_Setup+0x110>
 8007f7e:	4604      	mov	r4, r0
 8007f80:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f82:	7809      	ldrb	r1, [r1, #0]
 8007f84:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 8007f88:	d034      	beq.n	8007ff4 <USBD_CDC_Setup+0x94>
 8007f8a:	2e20      	cmp	r6, #32
 8007f8c:	d169      	bne.n	8008062 <USBD_CDC_Setup+0x102>
      if (req->wLength != 0U)
 8007f8e:	88ea      	ldrh	r2, [r5, #6]
 8007f90:	b32a      	cbz	r2, 8007fde <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 8007f92:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8007f96:	d10e      	bne.n	8007fb6 <USBD_CDC_Setup+0x56>
          hcdc->CmdOpCode = req->bRequest;
 8007f98:	786b      	ldrb	r3, [r5, #1]
 8007f9a:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007f9e:	88ea      	ldrh	r2, [r5, #6]
 8007fa0:	2a3f      	cmp	r2, #63	@ 0x3f
 8007fa2:	d81a      	bhi.n	8007fda <USBD_CDC_Setup+0x7a>
 8007fa4:	b2d2      	uxtb	r2, r2
 8007fa6:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007faa:	4639      	mov	r1, r7
 8007fac:	4620      	mov	r0, r4
 8007fae:	f001 f964 	bl	800927a <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8007fb2:	2600      	movs	r6, #0
 8007fb4:	e059      	b.n	800806a <USBD_CDC_Setup+0x10a>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007fb6:	33b0      	adds	r3, #176	@ 0xb0
 8007fb8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	4639      	mov	r1, r7
 8007fc2:	7868      	ldrb	r0, [r5, #1]
 8007fc4:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007fc6:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007fc8:	2a07      	cmp	r2, #7
 8007fca:	bf28      	it	cs
 8007fcc:	2207      	movcs	r2, #7
 8007fce:	4639      	mov	r1, r7
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f001 f93d 	bl	8009250 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	e047      	b.n	800806a <USBD_CDC_Setup+0x10a>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007fda:	2240      	movs	r2, #64	@ 0x40
 8007fdc:	e7e3      	b.n	8007fa6 <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007fde:	33b0      	adds	r3, #176	@ 0xb0
 8007fe0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	4629      	mov	r1, r5
 8007fec:	7868      	ldrb	r0, [r5, #1]
 8007fee:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff0:	2600      	movs	r6, #0
 8007ff2:	e03a      	b.n	800806a <USBD_CDC_Setup+0x10a>
      switch (req->bRequest)
 8007ff4:	786f      	ldrb	r7, [r5, #1]
 8007ff6:	2f0b      	cmp	r7, #11
 8007ff8:	d82e      	bhi.n	8008058 <USBD_CDC_Setup+0xf8>
 8007ffa:	e8df f007 	tbb	[pc, r7]
 8007ffe:	3606      	.short	0x3606
 8008000:	2d2d2d2d 	.word	0x2d2d2d2d
 8008004:	2d2d2d2d 	.word	0x2d2d2d2d
 8008008:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800800a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800800e:	2b03      	cmp	r3, #3
 8008010:	d004      	beq.n	800801c <USBD_CDC_Setup+0xbc>
            USBD_CtlError(pdev, req);
 8008012:	4629      	mov	r1, r5
 8008014:	f000 fd05 	bl	8008a22 <USBD_CtlError>
            ret = USBD_FAIL;
 8008018:	2603      	movs	r6, #3
 800801a:	e026      	b.n	800806a <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800801c:	2202      	movs	r2, #2
 800801e:	a901      	add	r1, sp, #4
 8008020:	f001 f916 	bl	8009250 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8008024:	463e      	mov	r6, r7
 8008026:	e020      	b.n	800806a <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008028:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800802c:	2b03      	cmp	r3, #3
 800802e:	d004      	beq.n	800803a <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 8008030:	4629      	mov	r1, r5
 8008032:	f000 fcf6 	bl	8008a22 <USBD_CtlError>
            ret = USBD_FAIL;
 8008036:	2603      	movs	r6, #3
 8008038:	e017      	b.n	800806a <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800803a:	2201      	movs	r2, #1
 800803c:	f10d 0107 	add.w	r1, sp, #7
 8008040:	f001 f906 	bl	8009250 <USBD_CtlSendData>
 8008044:	e011      	b.n	800806a <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008046:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800804a:	2b03      	cmp	r3, #3
 800804c:	d00d      	beq.n	800806a <USBD_CDC_Setup+0x10a>
            USBD_CtlError(pdev, req);
 800804e:	4629      	mov	r1, r5
 8008050:	f000 fce7 	bl	8008a22 <USBD_CtlError>
            ret = USBD_FAIL;
 8008054:	2603      	movs	r6, #3
 8008056:	e008      	b.n	800806a <USBD_CDC_Setup+0x10a>
          USBD_CtlError(pdev, req);
 8008058:	4629      	mov	r1, r5
 800805a:	f000 fce2 	bl	8008a22 <USBD_CtlError>
          ret = USBD_FAIL;
 800805e:	2603      	movs	r6, #3
          break;
 8008060:	e003      	b.n	800806a <USBD_CDC_Setup+0x10a>
      USBD_CtlError(pdev, req);
 8008062:	4629      	mov	r1, r5
 8008064:	f000 fcdd 	bl	8008a22 <USBD_CtlError>
      ret = USBD_FAIL;
 8008068:	2603      	movs	r6, #3
}
 800806a:	4630      	mov	r0, r6
 800806c:	b003      	add	sp, #12
 800806e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8008070:	2603      	movs	r6, #3
 8008072:	e7fa      	b.n	800806a <USBD_CDC_Setup+0x10a>

08008074 <USBD_CDC_DeInit>:
{
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008078:	2181      	movs	r1, #129	@ 0x81
 800807a:	f000 fa7b 	bl	8008574 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800807e:	2500      	movs	r5, #0
 8008080:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008082:	2101      	movs	r1, #1
 8008084:	4620      	mov	r0, r4
 8008086:	f000 fa75 	bl	8008574 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800808a:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800808e:	2182      	movs	r1, #130	@ 0x82
 8008090:	4620      	mov	r0, r4
 8008092:	f000 fa6f 	bl	8008574 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008096:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800809a:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800809e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80080a2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80080a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080aa:	b19a      	cbz	r2, 80080d4 <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80080ac:	33b0      	adds	r3, #176	@ 0xb0
 80080ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80080b8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80080bc:	33b0      	adds	r3, #176	@ 0xb0
 80080be:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80080c2:	f000 fa39 	bl	8008538 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80080c6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80080ca:	33b0      	adds	r3, #176	@ 0xb0
 80080cc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 80080d0:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 80080d4:	2000      	movs	r0, #0
 80080d6:	bd38      	pop	{r3, r4, r5, pc}

080080d8 <USBD_CDC_Init>:
{
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80080dc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80080e0:	f000 fa26 	bl	8008530 <USBD_static_malloc>
  if (hcdc == NULL)
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d049      	beq.n	800817c <USBD_CDC_Init+0xa4>
 80080e8:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80080ea:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80080ee:	2100      	movs	r1, #0
 80080f0:	f001 f950 	bl	8009394 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80080f4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80080f8:	33b0      	adds	r3, #176	@ 0xb0
 80080fa:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80080fe:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008102:	7c23      	ldrb	r3, [r4, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d141      	bne.n	800818c <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008108:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800810c:	2202      	movs	r2, #2
 800810e:	2181      	movs	r1, #129	@ 0x81
 8008110:	4620      	mov	r0, r4
 8008112:	f000 fa24 	bl	800855e <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008116:	2601      	movs	r6, #1
 8008118:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800811a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800811e:	2202      	movs	r2, #2
 8008120:	4631      	mov	r1, r6
 8008122:	4620      	mov	r0, r4
 8008124:	f000 fa1b 	bl	800855e <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008128:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800812c:	2310      	movs	r3, #16
 800812e:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008132:	2308      	movs	r3, #8
 8008134:	2203      	movs	r2, #3
 8008136:	2182      	movs	r1, #130	@ 0x82
 8008138:	4620      	mov	r0, r4
 800813a:	f000 fa10 	bl	800855e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800813e:	2301      	movs	r3, #1
 8008140:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
  hcdc->RxBuffer = NULL;
 8008144:	2600      	movs	r6, #0
 8008146:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800814a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800814e:	33b0      	adds	r3, #176	@ 0xb0
 8008150:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4798      	blx	r3
  hcdc->TxState = 0U;
 800815a:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 800815e:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 8008162:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8008166:	b362      	cbz	r2, 80081c2 <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008168:	7c25      	ldrb	r5, [r4, #16]
 800816a:	bb1d      	cbnz	r5, 80081b4 <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800816c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008170:	2101      	movs	r1, #1
 8008172:	4620      	mov	r0, r4
 8008174:	f000 fa26 	bl	80085c4 <USBD_LL_PrepareReceive>
}
 8008178:	4628      	mov	r0, r5
 800817a:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800817c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8008180:	33b0      	adds	r3, #176	@ 0xb0
 8008182:	2200      	movs	r2, #0
 8008184:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008188:	2502      	movs	r5, #2
 800818a:	e7f5      	b.n	8008178 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800818c:	2340      	movs	r3, #64	@ 0x40
 800818e:	2202      	movs	r2, #2
 8008190:	2181      	movs	r1, #129	@ 0x81
 8008192:	4620      	mov	r0, r4
 8008194:	f000 f9e3 	bl	800855e <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008198:	2601      	movs	r6, #1
 800819a:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800819c:	2340      	movs	r3, #64	@ 0x40
 800819e:	2202      	movs	r2, #2
 80081a0:	4631      	mov	r1, r6
 80081a2:	4620      	mov	r0, r4
 80081a4:	f000 f9db 	bl	800855e <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80081a8:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80081ac:	2310      	movs	r3, #16
 80081ae:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 80081b2:	e7be      	b.n	8008132 <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081b4:	2340      	movs	r3, #64	@ 0x40
 80081b6:	2101      	movs	r1, #1
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 fa03 	bl	80085c4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80081be:	2500      	movs	r5, #0
 80081c0:	e7da      	b.n	8008178 <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 80081c2:	2502      	movs	r5, #2
 80081c4:	e7d8      	b.n	8008178 <USBD_CDC_Init+0xa0>

080081c6 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 80081c6:	b139      	cbz	r1, 80081d8 <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 80081c8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80081cc:	33b0      	adds	r3, #176	@ 0xb0
 80081ce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80081d2:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 80081d4:	2000      	movs	r0, #0
 80081d6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80081d8:	2003      	movs	r0, #3
}
 80081da:	4770      	bx	lr

080081dc <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081dc:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80081e0:	33b0      	adds	r3, #176	@ 0xb0
 80081e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80081e6:	b12b      	cbz	r3, 80081f4 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 80081e8:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80081ec:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80081f0:	2000      	movs	r0, #0
 80081f2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80081f4:	2003      	movs	r0, #3
}
 80081f6:	4770      	bx	lr

080081f8 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081f8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80081fc:	33b0      	adds	r3, #176	@ 0xb0
 80081fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8008202:	b11b      	cbz	r3, 800820c <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8008204:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008208:	2000      	movs	r0, #0
 800820a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800820c:	2003      	movs	r0, #3
}
 800820e:	4770      	bx	lr

08008210 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008210:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008212:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008216:	33b0      	adds	r3, #176	@ 0xb0
 8008218:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800821c:	b18a      	cbz	r2, 8008242 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800821e:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 8008222:	b10b      	cbz	r3, 8008228 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008224:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8008226:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8008228:	2301      	movs	r3, #1
 800822a:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800822e:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 8008232:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008234:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8008238:	2181      	movs	r1, #129	@ 0x81
 800823a:	f000 f9bb 	bl	80085b4 <USBD_LL_Transmit>
    ret = USBD_OK;
 800823e:	2000      	movs	r0, #0
 8008240:	e7f1      	b.n	8008226 <USBD_CDC_TransmitPacket+0x16>
    return (uint8_t)USBD_FAIL;
 8008242:	2003      	movs	r0, #3
 8008244:	e7ef      	b.n	8008226 <USBD_CDC_TransmitPacket+0x16>

08008246 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008246:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008248:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800824c:	33b0      	adds	r3, #176	@ 0xb0
 800824e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008252:	b192      	cbz	r2, 800827a <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008254:	7c04      	ldrb	r4, [r0, #16]
 8008256:	b944      	cbnz	r4, 800826a <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008258:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800825c:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8008260:	2101      	movs	r1, #1
 8008262:	f000 f9af 	bl	80085c4 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8008266:	4620      	mov	r0, r4
 8008268:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800826a:	2340      	movs	r3, #64	@ 0x40
 800826c:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8008270:	2101      	movs	r1, #1
 8008272:	f000 f9a7 	bl	80085c4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8008276:	2400      	movs	r4, #0
 8008278:	e7f5      	b.n	8008266 <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 800827a:	2403      	movs	r4, #3
 800827c:	e7f3      	b.n	8008266 <USBD_CDC_ReceivePacket+0x20>

0800827e <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800827e:	2000      	movs	r0, #0
 8008280:	4770      	bx	lr

08008282 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8008282:	2000      	movs	r0, #0
 8008284:	4770      	bx	lr

08008286 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8008286:	2000      	movs	r0, #0
 8008288:	4770      	bx	lr
	...

0800828c <CDC_Receive_FS>:
{
 800828c:	b570      	push	{r4, r5, r6, lr}
 800828e:	b092      	sub	sp, #72	@ 0x48
 8008290:	4605      	mov	r5, r0
 8008292:	460c      	mov	r4, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008294:	4e0e      	ldr	r6, [pc, #56]	@ (80082d0 <CDC_Receive_FS+0x44>)
 8008296:	4601      	mov	r1, r0
 8008298:	4630      	mov	r0, r6
 800829a:	f7ff ffad 	bl	80081f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800829e:	4630      	mov	r0, r6
 80082a0:	f7ff ffd1 	bl	8008246 <USBD_CDC_ReceivePacket>
    if (*Len > 0 && *Len <= USB_RX_PACKET_MAX_SIZE) {
 80082a4:	6822      	ldr	r2, [r4, #0]
 80082a6:	1e53      	subs	r3, r2, #1
 80082a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80082aa:	d902      	bls.n	80082b2 <CDC_Receive_FS+0x26>
}
 80082ac:	2000      	movs	r0, #0
 80082ae:	b012      	add	sp, #72	@ 0x48
 80082b0:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(rx_packet.data, Buf, *Len); // Copy data from USB buffer
 80082b2:	ae01      	add	r6, sp, #4
 80082b4:	4629      	mov	r1, r5
 80082b6:	4630      	mov	r0, r6
 80082b8:	f001 f8a0 	bl	80093fc <memcpy>
        rx_packet.len = *Len;
 80082bc:	6823      	ldr	r3, [r4, #0]
 80082be:	9311      	str	r3, [sp, #68]	@ 0x44
        osMessageQueuePut(usb_rx_queue_handle, &rx_packet, 5, 0);
 80082c0:	2300      	movs	r3, #0
 80082c2:	2205      	movs	r2, #5
 80082c4:	4631      	mov	r1, r6
 80082c6:	4803      	ldr	r0, [pc, #12]	@ (80082d4 <CDC_Receive_FS+0x48>)
 80082c8:	6800      	ldr	r0, [r0, #0]
 80082ca:	f7f8 fed8 	bl	800107e <osMessageQueuePut>
 80082ce:	e7ed      	b.n	80082ac <CDC_Receive_FS+0x20>
 80082d0:	20005028 	.word	0x20005028
 80082d4:	2000093c 	.word	0x2000093c

080082d8 <CDC_Init_FS>:
{
 80082d8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082da:	4c06      	ldr	r4, [pc, #24]	@ (80082f4 <CDC_Init_FS+0x1c>)
 80082dc:	2200      	movs	r2, #0
 80082de:	4906      	ldr	r1, [pc, #24]	@ (80082f8 <CDC_Init_FS+0x20>)
 80082e0:	4620      	mov	r0, r4
 80082e2:	f7ff ff7b 	bl	80081dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80082e6:	4905      	ldr	r1, [pc, #20]	@ (80082fc <CDC_Init_FS+0x24>)
 80082e8:	4620      	mov	r0, r4
 80082ea:	f7ff ff85 	bl	80081f8 <USBD_CDC_SetRxBuffer>
}
 80082ee:	2000      	movs	r0, #0
 80082f0:	bd10      	pop	{r4, pc}
 80082f2:	bf00      	nop
 80082f4:	20005028 	.word	0x20005028
 80082f8:	20005304 	.word	0x20005304
 80082fc:	20005704 	.word	0x20005704

08008300 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008300:	4b09      	ldr	r3, [pc, #36]	@ (8008328 <CDC_Transmit_FS+0x28>)
 8008302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 8008306:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800830a:	b10b      	cbz	r3, 8008310 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 800830c:	2001      	movs	r0, #1
}
 800830e:	4770      	bx	lr
{
 8008310:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008312:	4c05      	ldr	r4, [pc, #20]	@ (8008328 <CDC_Transmit_FS+0x28>)
 8008314:	460a      	mov	r2, r1
 8008316:	4601      	mov	r1, r0
 8008318:	4620      	mov	r0, r4
 800831a:	f7ff ff5f 	bl	80081dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800831e:	4620      	mov	r0, r4
 8008320:	f7ff ff76 	bl	8008210 <USBD_CDC_TransmitPacket>
}
 8008324:	bd10      	pop	{r4, pc}
 8008326:	bf00      	nop
 8008328:	20005028 	.word	0x20005028

0800832c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800832c:	b530      	push	{r4, r5, lr}
 800832e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008330:	2300      	movs	r3, #0
 8008332:	9303      	str	r3, [sp, #12]
 8008334:	9304      	str	r3, [sp, #16]
 8008336:	9305      	str	r3, [sp, #20]
 8008338:	9306      	str	r3, [sp, #24]
 800833a:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800833c:	6803      	ldr	r3, [r0, #0]
 800833e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008342:	d001      	beq.n	8008348 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008344:	b009      	add	sp, #36	@ 0x24
 8008346:	bd30      	pop	{r4, r5, pc}
 8008348:	aa03      	add	r2, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800834a:	2500      	movs	r5, #0
 800834c:	9501      	str	r5, [sp, #4]
 800834e:	4c17      	ldr	r4, [pc, #92]	@ (80083ac <HAL_PCD_MspInit+0x80>)
 8008350:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008352:	f043 0301 	orr.w	r3, r3, #1
 8008356:	6323      	str	r3, [r4, #48]	@ 0x30
 8008358:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008362:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008366:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008368:	2302      	movs	r3, #2
 800836a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800836c:	2303      	movs	r3, #3
 800836e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008370:	230a      	movs	r3, #10
 8008372:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008374:	4611      	mov	r1, r2
 8008376:	480e      	ldr	r0, [pc, #56]	@ (80083b0 <HAL_PCD_MspInit+0x84>)
 8008378:	f7fb fa4a 	bl	8003810 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800837c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800837e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008382:	6363      	str	r3, [r4, #52]	@ 0x34
 8008384:	9502      	str	r5, [sp, #8]
 8008386:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800838c:	6463      	str	r3, [r4, #68]	@ 0x44
 800838e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008394:	9302      	str	r3, [sp, #8]
 8008396:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8008398:	462a      	mov	r2, r5
 800839a:	2105      	movs	r1, #5
 800839c:	2043      	movs	r0, #67	@ 0x43
 800839e:	f7fb f80f 	bl	80033c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083a2:	2043      	movs	r0, #67	@ 0x43
 80083a4:	f7fb f81c 	bl	80033e0 <HAL_NVIC_EnableIRQ>
}
 80083a8:	e7cc      	b.n	8008344 <HAL_PCD_MspInit+0x18>
 80083aa:	bf00      	nop
 80083ac:	40023800 	.word	0x40023800
 80083b0:	40020000 	.word	0x40020000

080083b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b4:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083b6:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 80083ba:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80083be:	f000 f956 	bl	800866e <USBD_LL_SetupStage>
}
 80083c2:	bd08      	pop	{r3, pc}

080083c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c4:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80083c6:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80083ca:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80083ce:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 80083d2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80083d6:	f000 fa17 	bl	8008808 <USBD_LL_DataOutStage>
}
 80083da:	bd08      	pop	{r3, pc}

080083dc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083dc:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083de:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80083e2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80083e6:	6a1a      	ldr	r2, [r3, #32]
 80083e8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80083ec:	f000 fa6c 	bl	80088c8 <USBD_LL_DataInStage>
}
 80083f0:	bd08      	pop	{r3, pc}

080083f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f2:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083f4:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80083f8:	f000 f9b4 	bl	8008764 <USBD_LL_SOF>
}
 80083fc:	bd08      	pop	{r3, pc}

080083fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083fe:	b510      	push	{r4, lr}
 8008400:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008402:	79c3      	ldrb	r3, [r0, #7]
 8008404:	2b02      	cmp	r3, #2
 8008406:	d109      	bne.n	800841c <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008408:	2101      	movs	r1, #1
 800840a:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800840e:	f000 f98c 	bl	800872a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008412:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8008416:	f000 f956 	bl	80086c6 <USBD_LL_Reset>
}
 800841a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800841c:	f7f9 fe18 	bl	8002050 <Error_Handler>
 8008420:	e7f2      	b.n	8008408 <HAL_PCD_ResetCallback+0xa>
	...

08008424 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008424:	b510      	push	{r4, lr}
 8008426:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008428:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800842c:	f000 f980 	bl	8008730 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8008436:	f043 0301 	orr.w	r3, r3, #1
 800843a:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800843e:	7ae3      	ldrb	r3, [r4, #11]
 8008440:	b123      	cbz	r3, 800844c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008442:	4a03      	ldr	r2, [pc, #12]	@ (8008450 <HAL_PCD_SuspendCallback+0x2c>)
 8008444:	6913      	ldr	r3, [r2, #16]
 8008446:	f043 0306 	orr.w	r3, r3, #6
 800844a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800844c:	bd10      	pop	{r4, pc}
 800844e:	bf00      	nop
 8008450:	e000ed00 	.word	0xe000ed00

08008454 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008454:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008456:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800845a:	f000 f977 	bl	800874c <USBD_LL_Resume>
}
 800845e:	bd08      	pop	{r3, pc}

08008460 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008460:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008462:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8008466:	f000 f9a3 	bl	80087b0 <USBD_LL_IsoOUTIncomplete>
}
 800846a:	bd08      	pop	{r3, pc}

0800846c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800846c:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800846e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8008472:	f000 f987 	bl	8008784 <USBD_LL_IsoINIncomplete>
}
 8008476:	bd08      	pop	{r3, pc}

08008478 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008478:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800847a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800847e:	f000 f9ad 	bl	80087dc <USBD_LL_DevConnected>
}
 8008482:	bd08      	pop	{r3, pc}

08008484 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008484:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008486:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800848a:	f000 f9a9 	bl	80087e0 <USBD_LL_DevDisconnected>
}
 800848e:	bd08      	pop	{r3, pc}

08008490 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008490:	7802      	ldrb	r2, [r0, #0]
 8008492:	b10a      	cbz	r2, 8008498 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8008494:	2000      	movs	r0, #0
 8008496:	4770      	bx	lr
{
 8008498:	b510      	push	{r4, lr}
 800849a:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 800849c:	4815      	ldr	r0, [pc, #84]	@ (80084f4 <USBD_LL_Init+0x64>)
 800849e:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80084a2:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80084aa:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80084ac:	2304      	movs	r3, #4
 80084ae:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80084b0:	2202      	movs	r2, #2
 80084b2:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084b4:	2300      	movs	r3, #0
 80084b6:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80084b8:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084ba:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80084bc:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80084be:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80084c0:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80084c2:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80084c4:	f7fb fb36 	bl	8003b34 <HAL_PCD_Init>
 80084c8:	b980      	cbnz	r0, 80084ec <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80084ca:	4c0a      	ldr	r4, [pc, #40]	@ (80084f4 <USBD_LL_Init+0x64>)
 80084cc:	2180      	movs	r1, #128	@ 0x80
 80084ce:	4620      	mov	r0, r4
 80084d0:	f7fc f8ff 	bl	80046d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80084d4:	2240      	movs	r2, #64	@ 0x40
 80084d6:	2100      	movs	r1, #0
 80084d8:	4620      	mov	r0, r4
 80084da:	f7fc f8d4 	bl	8004686 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80084de:	2280      	movs	r2, #128	@ 0x80
 80084e0:	2101      	movs	r1, #1
 80084e2:	4620      	mov	r0, r4
 80084e4:	f7fc f8cf 	bl	8004686 <HAL_PCDEx_SetTxFiFo>
}
 80084e8:	2000      	movs	r0, #0
 80084ea:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80084ec:	f7f9 fdb0 	bl	8002050 <Error_Handler>
 80084f0:	e7eb      	b.n	80084ca <USBD_LL_Init+0x3a>
 80084f2:	bf00      	nop
 80084f4:	20005d24 	.word	0x20005d24

080084f8 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084f8:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 80084fc:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8008500:	d108      	bne.n	8008514 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008502:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8008506:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800850a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800850e:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8008512:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008514:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8008518:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800851c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008520:	7d98      	ldrb	r0, [r3, #22]
 8008522:	4770      	bx	lr

08008524 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008524:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008526:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800852a:	f7fb fd07 	bl	8003f3c <HAL_PCD_EP_GetRxCount>
}
 800852e:	bd08      	pop	{r3, pc}

08008530 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8008530:	4800      	ldr	r0, [pc, #0]	@ (8008534 <USBD_static_malloc+0x4>)
 8008532:	4770      	bx	lr
 8008534:	20005b04 	.word	0x20005b04

08008538 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8008538:	4770      	bx	lr

0800853a <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800853a:	2803      	cmp	r0, #3
 800853c:	d805      	bhi.n	800854a <USBD_Get_USB_Status+0x10>
 800853e:	e8df f000 	tbb	[pc, r0]
 8008542:	0405      	.short	0x0405
 8008544:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008546:	2001      	movs	r0, #1
    break;
 8008548:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800854a:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800854c:	4770      	bx	lr

0800854e <USBD_LL_Start>:
{
 800854e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8008550:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008554:	f7fb fb6f 	bl	8003c36 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008558:	f7ff ffef 	bl	800853a <USBD_Get_USB_Status>
}
 800855c:	bd08      	pop	{r3, pc}

0800855e <USBD_LL_OpenEP>:
{
 800855e:	b508      	push	{r3, lr}
 8008560:	4694      	mov	ip, r2
 8008562:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008564:	4663      	mov	r3, ip
 8008566:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800856a:	f7fb fc44 	bl	8003df6 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800856e:	f7ff ffe4 	bl	800853a <USBD_Get_USB_Status>
}
 8008572:	bd08      	pop	{r3, pc}

08008574 <USBD_LL_CloseEP>:
{
 8008574:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008576:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800857a:	f7fb fc82 	bl	8003e82 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800857e:	f7ff ffdc 	bl	800853a <USBD_Get_USB_Status>
}
 8008582:	bd08      	pop	{r3, pc}

08008584 <USBD_LL_StallEP>:
{
 8008584:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008586:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800858a:	f7fb fd05 	bl	8003f98 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800858e:	f7ff ffd4 	bl	800853a <USBD_Get_USB_Status>
}
 8008592:	bd08      	pop	{r3, pc}

08008594 <USBD_LL_ClearStallEP>:
{
 8008594:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008596:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800859a:	f7fb fd40 	bl	800401e <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800859e:	f7ff ffcc 	bl	800853a <USBD_Get_USB_Status>
}
 80085a2:	bd08      	pop	{r3, pc}

080085a4 <USBD_LL_SetUSBAddress>:
{
 80085a4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085a6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80085aa:	f7fb fc11 	bl	8003dd0 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ae:	f7ff ffc4 	bl	800853a <USBD_Get_USB_Status>
}
 80085b2:	bd08      	pop	{r3, pc}

080085b4 <USBD_LL_Transmit>:
{
 80085b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085b6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80085ba:	f7fb fcc8 	bl	8003f4e <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80085be:	f7ff ffbc 	bl	800853a <USBD_Get_USB_Status>
}
 80085c2:	bd08      	pop	{r3, pc}

080085c4 <USBD_LL_PrepareReceive>:
{
 80085c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085c6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80085ca:	f7fb fc92 	bl	8003ef2 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ce:	f7ff ffb4 	bl	800853a <USBD_Get_USB_Status>
}
 80085d2:	bd08      	pop	{r3, pc}

080085d4 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085d4:	b198      	cbz	r0, 80085fe <USBD_Init+0x2a>
{
 80085d6:	b508      	push	{r3, lr}
 80085d8:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80085da:	2000      	movs	r0, #0
 80085dc:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80085e0:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80085e4:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085e8:	b109      	cbz	r1, 80085ee <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 80085ea:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085ee:	2101      	movs	r1, #1
 80085f0:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 80085f4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff ff4a 	bl	8008490 <USBD_LL_Init>

  return ret;
}
 80085fc:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80085fe:	2003      	movs	r0, #3
}
 8008600:	4770      	bx	lr

08008602 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008602:	b510      	push	{r4, lr}
 8008604:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800860c:	b1b9      	cbz	r1, 800863e <USBD_RegisterClass+0x3c>
 800860e:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008610:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008614:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8008618:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800861a:	b143      	cbz	r3, 800862e <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800861c:	32ae      	adds	r2, #174	@ 0xae
 800861e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8008622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008624:	f10d 0006 	add.w	r0, sp, #6
 8008628:	4798      	blx	r3
 800862a:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800862e:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8008632:	3301      	adds	r3, #1
 8008634:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8008638:	2000      	movs	r0, #0
}
 800863a:	b002      	add	sp, #8
 800863c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800863e:	2003      	movs	r0, #3
 8008640:	e7fb      	b.n	800863a <USBD_RegisterClass+0x38>

08008642 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008642:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008644:	f7ff ff83 	bl	800854e <USBD_LL_Start>
}
 8008648:	bd08      	pop	{r3, pc}

0800864a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800864a:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800864c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008650:	b113      	cbz	r3, 8008658 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8008656:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8008658:	2000      	movs	r0, #0
 800865a:	e7fc      	b.n	8008656 <USBD_SetClassConfig+0xc>

0800865c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800865c:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800865e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	4798      	blx	r3
 8008666:	b900      	cbnz	r0, 800866a <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8008668:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 800866a:	2003      	movs	r0, #3
 800866c:	e7fc      	b.n	8008668 <USBD_ClrClassConfig+0xc>

0800866e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800866e:	b538      	push	{r3, r4, r5, lr}
 8008670:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008672:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8008676:	4628      	mov	r0, r5
 8008678:	f000 f9bf 	bl	80089fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800867c:	2301      	movs	r3, #1
 800867e:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008682:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8008686:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800868a:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 800868e:	f001 031f 	and.w	r3, r1, #31
 8008692:	2b01      	cmp	r3, #1
 8008694:	d007      	beq.n	80086a6 <USBD_LL_SetupStage+0x38>
 8008696:	2b02      	cmp	r3, #2
 8008698:	d00a      	beq.n	80086b0 <USBD_LL_SetupStage+0x42>
 800869a:	b973      	cbnz	r3, 80086ba <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800869c:	4629      	mov	r1, r5
 800869e:	4620      	mov	r0, r4
 80086a0:	f000 fb80 	bl	8008da4 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 80086a4:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80086a6:	4629      	mov	r1, r5
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 fbb6 	bl	8008e1a <USBD_StdItfReq>
      break;
 80086ae:	e7f9      	b.n	80086a4 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80086b0:	4629      	mov	r1, r5
 80086b2:	4620      	mov	r0, r4
 80086b4:	f000 fbf3 	bl	8008e9e <USBD_StdEPReq>
      break;
 80086b8:	e7f4      	b.n	80086a4 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086ba:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80086be:	4620      	mov	r0, r4
 80086c0:	f7ff ff60 	bl	8008584 <USBD_LL_StallEP>
      break;
 80086c4:	e7ee      	b.n	80086a4 <USBD_LL_SetupStage+0x36>

080086c6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c8:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086ca:	2301      	movs	r3, #1
 80086cc:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086d0:	2300      	movs	r3, #0
 80086d2:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 80086d6:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 80086d8:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80086dc:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80086e0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80086e4:	b1db      	cbz	r3, 800871e <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	b1db      	cbz	r3, 8008722 <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80086ea:	2100      	movs	r1, #0
 80086ec:	4798      	blx	r3
 80086ee:	4607      	mov	r7, r0
 80086f0:	b9c8      	cbnz	r0, 8008726 <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086f2:	2340      	movs	r3, #64	@ 0x40
 80086f4:	2200      	movs	r2, #0
 80086f6:	4611      	mov	r1, r2
 80086f8:	4620      	mov	r0, r4
 80086fa:	f7ff ff30 	bl	800855e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086fe:	2601      	movs	r6, #1
 8008700:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008704:	2540      	movs	r5, #64	@ 0x40
 8008706:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800870a:	462b      	mov	r3, r5
 800870c:	2200      	movs	r2, #0
 800870e:	2180      	movs	r1, #128	@ 0x80
 8008710:	4620      	mov	r0, r4
 8008712:	f7ff ff24 	bl	800855e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008716:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008718:	6225      	str	r5, [r4, #32]

  return ret;
}
 800871a:	4638      	mov	r0, r7
 800871c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800871e:	2700      	movs	r7, #0
 8008720:	e7e7      	b.n	80086f2 <USBD_LL_Reset+0x2c>
 8008722:	2700      	movs	r7, #0
 8008724:	e7e5      	b.n	80086f2 <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8008726:	2703      	movs	r7, #3
 8008728:	e7e3      	b.n	80086f2 <USBD_LL_Reset+0x2c>

0800872a <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800872a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800872c:	2000      	movs	r0, #0
 800872e:	4770      	bx	lr

08008730 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008730:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008734:	2b04      	cmp	r3, #4
 8008736:	d004      	beq.n	8008742 <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008738:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800873c:	b2db      	uxtb	r3, r3
 800873e:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008742:	2304      	movs	r3, #4
 8008744:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8008748:	2000      	movs	r0, #0
 800874a:	4770      	bx	lr

0800874c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800874c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008750:	2b04      	cmp	r3, #4
 8008752:	d001      	beq.n	8008758 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8008754:	2000      	movs	r0, #0
 8008756:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8008758:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800875c:	b2db      	uxtb	r3, r3
 800875e:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8008762:	e7f7      	b.n	8008754 <USBD_LL_Resume+0x8>

08008764 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008764:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008766:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800876a:	2b03      	cmp	r3, #3
 800876c:	d001      	beq.n	8008772 <USBD_LL_SOF+0xe>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800876e:	2000      	movs	r0, #0
 8008770:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 8008772:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008776:	2b00      	cmp	r3, #0
 8008778:	d0f9      	beq.n	800876e <USBD_LL_SOF+0xa>
      if (pdev->pClass[0]->SOF != NULL)
 800877a:	69db      	ldr	r3, [r3, #28]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0f6      	beq.n	800876e <USBD_LL_SOF+0xa>
        (void)pdev->pClass[0]->SOF(pdev);
 8008780:	4798      	blx	r3
 8008782:	e7f4      	b.n	800876e <USBD_LL_SOF+0xa>

08008784 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008784:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8008786:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800878a:	33ae      	adds	r3, #174	@ 0xae
 800878c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008790:	b153      	cbz	r3, 80087a8 <USBD_LL_IsoINIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008792:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008796:	2a03      	cmp	r2, #3
 8008798:	d001      	beq.n	800879e <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800879a:	2000      	movs	r0, #0
}
 800879c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	b123      	cbz	r3, 80087ac <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80087a2:	4798      	blx	r3
  return USBD_OK;
 80087a4:	2000      	movs	r0, #0
 80087a6:	e7f9      	b.n	800879c <USBD_LL_IsoINIncomplete+0x18>
    return USBD_FAIL;
 80087a8:	2003      	movs	r0, #3
 80087aa:	e7f7      	b.n	800879c <USBD_LL_IsoINIncomplete+0x18>
  return USBD_OK;
 80087ac:	2000      	movs	r0, #0
 80087ae:	e7f5      	b.n	800879c <USBD_LL_IsoINIncomplete+0x18>

080087b0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80087b0:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 80087b2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80087b6:	33ae      	adds	r3, #174	@ 0xae
 80087b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80087bc:	b153      	cbz	r3, 80087d4 <USBD_LL_IsoOUTIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087be:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80087c2:	2a03      	cmp	r2, #3
 80087c4:	d001      	beq.n	80087ca <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80087c6:	2000      	movs	r0, #0
}
 80087c8:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80087ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087cc:	b123      	cbz	r3, 80087d8 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80087ce:	4798      	blx	r3
  return USBD_OK;
 80087d0:	2000      	movs	r0, #0
 80087d2:	e7f9      	b.n	80087c8 <USBD_LL_IsoOUTIncomplete+0x18>
    return USBD_FAIL;
 80087d4:	2003      	movs	r0, #3
 80087d6:	e7f7      	b.n	80087c8 <USBD_LL_IsoOUTIncomplete+0x18>
  return USBD_OK;
 80087d8:	2000      	movs	r0, #0
 80087da:	e7f5      	b.n	80087c8 <USBD_LL_IsoOUTIncomplete+0x18>

080087dc <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80087dc:	2000      	movs	r0, #0
 80087de:	4770      	bx	lr

080087e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80087e0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087e2:	2301      	movs	r3, #1
 80087e4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80087e8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80087ec:	b123      	cbz	r3, 80087f8 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	7901      	ldrb	r1, [r0, #4]
 80087f2:	4798      	blx	r3
 80087f4:	b910      	cbnz	r0, 80087fc <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80087f6:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 80087f8:	2000      	movs	r0, #0
 80087fa:	e7fc      	b.n	80087f6 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 80087fc:	2003      	movs	r0, #3
 80087fe:	e7fa      	b.n	80087f6 <USBD_LL_DevDisconnected+0x16>

08008800 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8008800:	2000      	movs	r0, #0
 8008802:	4770      	bx	lr

08008804 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8008804:	2000      	movs	r0, #0
 8008806:	4770      	bx	lr

08008808 <USBD_LL_DataOutStage>:
{
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	4604      	mov	r4, r0
  if (epnum == 0U)
 800880c:	460d      	mov	r5, r1
 800880e:	2900      	cmp	r1, #0
 8008810:	d141      	bne.n	8008896 <USBD_LL_DataOutStage+0x8e>
 8008812:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008814:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8008818:	2a03      	cmp	r2, #3
 800881a:	d001      	beq.n	8008820 <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 800881c:	4608      	mov	r0, r1
}
 800881e:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8008820:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 8008824:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 8008828:	4291      	cmp	r1, r2
 800882a:	d809      	bhi.n	8008840 <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 800882c:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 8008830:	f003 031f 	and.w	r3, r3, #31
 8008834:	2b01      	cmp	r3, #1
 8008836:	d00e      	beq.n	8008856 <USBD_LL_DataOutStage+0x4e>
 8008838:	2b02      	cmp	r3, #2
 800883a:	d01a      	beq.n	8008872 <USBD_LL_DataOutStage+0x6a>
 800883c:	4628      	mov	r0, r5
 800883e:	e00f      	b.n	8008860 <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 8008840:	1a89      	subs	r1, r1, r2
 8008842:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008846:	428a      	cmp	r2, r1
 8008848:	bf28      	it	cs
 800884a:	460a      	movcs	r2, r1
 800884c:	4619      	mov	r1, r3
 800884e:	f000 fd23 	bl	8009298 <USBD_CtlContinueRx>
  return USBD_OK;
 8008852:	4628      	mov	r0, r5
 8008854:	e7e3      	b.n	800881e <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008856:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 800885a:	f7ff ffd1 	bl	8008800 <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800885e:	b918      	cbnz	r0, 8008868 <USBD_LL_DataOutStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008860:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008864:	2b03      	cmp	r3, #3
 8008866:	d009      	beq.n	800887c <USBD_LL_DataOutStage+0x74>
        (void)USBD_CtlSendStatus(pdev);
 8008868:	4620      	mov	r0, r4
 800886a:	f000 fd1d 	bl	80092a8 <USBD_CtlSendStatus>
  return USBD_OK;
 800886e:	4628      	mov	r0, r5
 8008870:	e7d5      	b.n	800881e <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008872:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8008876:	f7ff ffc5 	bl	8008804 <USBD_CoreFindEP>
            break;
 800887a:	e7f0      	b.n	800885e <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800887c:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8008880:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008884:	691a      	ldr	r2, [r3, #16]
 8008886:	2a00      	cmp	r2, #0
 8008888:	d0ee      	beq.n	8008868 <USBD_LL_DataOutStage+0x60>
              pdev->classId = idx;
 800888a:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	4620      	mov	r0, r4
 8008892:	4798      	blx	r3
 8008894:	e7e8      	b.n	8008868 <USBD_LL_DataOutStage+0x60>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008896:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800889a:	f7ff ffb3 	bl	8008804 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800889e:	b988      	cbnz	r0, 80088c4 <USBD_LL_DataOutStage+0xbc>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a0:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80088a4:	2b03      	cmp	r3, #3
 80088a6:	d1ba      	bne.n	800881e <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 80088a8:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80088ac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80088b0:	699a      	ldr	r2, [r3, #24]
 80088b2:	2a00      	cmp	r2, #0
 80088b4:	d0b3      	beq.n	800881e <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 80088b6:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	4629      	mov	r1, r5
 80088be:	4620      	mov	r0, r4
 80088c0:	4798      	blx	r3
      if (ret != USBD_OK)
 80088c2:	e7ac      	b.n	800881e <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 80088c4:	2000      	movs	r0, #0
 80088c6:	e7aa      	b.n	800881e <USBD_LL_DataOutStage+0x16>

080088c8 <USBD_LL_DataInStage>:
{
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	4604      	mov	r4, r0
  if (epnum == 0U)
 80088cc:	460d      	mov	r5, r1
 80088ce:	2900      	cmp	r1, #0
 80088d0:	d14a      	bne.n	8008968 <USBD_LL_DataInStage+0xa0>
 80088d2:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088d4:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80088d8:	2a02      	cmp	r2, #2
 80088da:	d007      	beq.n	80088ec <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 80088dc:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 80088e0:	b118      	cbz	r0, 80088ea <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 80088e8:	4628      	mov	r0, r5
}
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80088ec:	69c2      	ldr	r2, [r0, #28]
 80088ee:	6a01      	ldr	r1, [r0, #32]
 80088f0:	428a      	cmp	r2, r1
 80088f2:	d80d      	bhi.n	8008910 <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 80088f4:	428a      	cmp	r2, r1
 80088f6:	d017      	beq.n	8008928 <USBD_LL_DataInStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f8:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d027      	beq.n	8008950 <USBD_LL_DataInStage+0x88>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008900:	2180      	movs	r1, #128	@ 0x80
 8008902:	4620      	mov	r0, r4
 8008904:	f7ff fe3e 	bl	8008584 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fcd8 	bl	80092be <USBD_CtlReceiveStatus>
 800890e:	e7e5      	b.n	80088dc <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8008910:	1a52      	subs	r2, r2, r1
 8008912:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008914:	4619      	mov	r1, r3
 8008916:	f000 fca8 	bl	800926a <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800891a:	2300      	movs	r3, #0
 800891c:	461a      	mov	r2, r3
 800891e:	4619      	mov	r1, r3
 8008920:	4620      	mov	r0, r4
 8008922:	f7ff fe4f 	bl	80085c4 <USBD_LL_PrepareReceive>
 8008926:	e7d9      	b.n	80088dc <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8008928:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800892a:	4299      	cmp	r1, r3
 800892c:	d8e4      	bhi.n	80088f8 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 800892e:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008932:	4293      	cmp	r3, r2
 8008934:	d2e0      	bcs.n	80088f8 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008936:	2200      	movs	r2, #0
 8008938:	4611      	mov	r1, r2
 800893a:	f000 fc96 	bl	800926a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800893e:	2100      	movs	r1, #0
 8008940:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008944:	460b      	mov	r3, r1
 8008946:	460a      	mov	r2, r1
 8008948:	4620      	mov	r0, r4
 800894a:	f7ff fe3b 	bl	80085c4 <USBD_LL_PrepareReceive>
 800894e:	e7c5      	b.n	80088dc <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008950:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	2a00      	cmp	r2, #0
 8008958:	d0d2      	beq.n	8008900 <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 800895a:	2200      	movs	r2, #0
 800895c:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	4620      	mov	r0, r4
 8008964:	4798      	blx	r3
 8008966:	e7cb      	b.n	8008900 <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008968:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800896c:	f7ff ff4a 	bl	8008804 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008970:	b988      	cbnz	r0, 8008996 <USBD_LL_DataInStage+0xce>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008972:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008976:	2b03      	cmp	r3, #3
 8008978:	d1b7      	bne.n	80088ea <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 800897a:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800897e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008982:	695a      	ldr	r2, [r3, #20]
 8008984:	2a00      	cmp	r2, #0
 8008986:	d0b0      	beq.n	80088ea <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 8008988:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	4629      	mov	r1, r5
 8008990:	4620      	mov	r0, r4
 8008992:	4798      	blx	r3
          if (ret != USBD_OK)
 8008994:	e7a9      	b.n	80088ea <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 8008996:	2000      	movs	r0, #0
 8008998:	e7a7      	b.n	80088ea <USBD_LL_DataInStage+0x22>

0800899a <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800899a:	880b      	ldrh	r3, [r1, #0]
 800899c:	7802      	ldrb	r2, [r0, #0]
 800899e:	4413      	add	r3, r2
 80089a0:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80089a2:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 80089a4:	4418      	add	r0, r3
 80089a6:	4770      	bx	lr

080089a8 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 80089a8:	8842      	ldrh	r2, [r0, #2]
 80089aa:	7803      	ldrb	r3, [r0, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d918      	bls.n	80089e2 <USBD_GetEpDesc+0x3a>
{
 80089b0:	b530      	push	{r4, r5, lr}
 80089b2:	b083      	sub	sp, #12
 80089b4:	4604      	mov	r4, r0
 80089b6:	460d      	mov	r5, r1
    ptr = desc->bLength;
 80089b8:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 80089bc:	8863      	ldrh	r3, [r4, #2]
 80089be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d20a      	bcs.n	80089dc <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80089c6:	f10d 0106 	add.w	r1, sp, #6
 80089ca:	f7ff ffe6 	bl	800899a <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80089ce:	7843      	ldrb	r3, [r0, #1]
 80089d0:	2b05      	cmp	r3, #5
 80089d2:	d1f3      	bne.n	80089bc <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 80089d4:	7883      	ldrb	r3, [r0, #2]
 80089d6:	42ab      	cmp	r3, r5
 80089d8:	d1f0      	bne.n	80089bc <USBD_GetEpDesc+0x14>
 80089da:	e000      	b.n	80089de <USBD_GetEpDesc+0x36>
 80089dc:	2000      	movs	r0, #0
}
 80089de:	b003      	add	sp, #12
 80089e0:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80089e2:	2000      	movs	r0, #0
}
 80089e4:	4770      	bx	lr

080089e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089e6:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80089e8:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80089ea:	e002      	b.n	80089f2 <USBD_GetLen+0xc>
  {
    len++;
 80089ec:	3001      	adds	r0, #1
 80089ee:	b2c0      	uxtb	r0, r0
    pbuff++;
 80089f0:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 80089f2:	781a      	ldrb	r2, [r3, #0]
 80089f4:	2a00      	cmp	r2, #0
 80089f6:	d1f9      	bne.n	80089ec <USBD_GetLen+0x6>
  }

  return len;
}
 80089f8:	4770      	bx	lr

080089fa <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80089fa:	780b      	ldrb	r3, [r1, #0]
 80089fc:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80089fe:	784b      	ldrb	r3, [r1, #1]
 8008a00:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8008a02:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8008a04:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8008a0a:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8008a0c:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a0e:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8008a14:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8008a16:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a18:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8008a1e:	80c3      	strh	r3, [r0, #6]
}
 8008a20:	4770      	bx	lr

08008a22 <USBD_CtlError>:
{
 8008a22:	b510      	push	{r4, lr}
 8008a24:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a26:	2180      	movs	r1, #128	@ 0x80
 8008a28:	f7ff fdac 	bl	8008584 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f7ff fda8 	bl	8008584 <USBD_LL_StallEP>
}
 8008a34:	bd10      	pop	{r4, pc}

08008a36 <USBD_GetDescriptor>:
{
 8008a36:	b530      	push	{r4, r5, lr}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8008a44:	884a      	ldrh	r2, [r1, #2]
 8008a46:	0a13      	lsrs	r3, r2, #8
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	2b06      	cmp	r3, #6
 8008a4c:	f200 80aa 	bhi.w	8008ba4 <USBD_GetDescriptor+0x16e>
 8008a50:	e8df f003 	tbb	[pc, r3]
 8008a54:	a8321e04 	.word	0xa8321e04
 8008a58:	8ca8      	.short	0x8ca8
 8008a5a:	99          	.byte	0x99
 8008a5b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a5c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f10d 0106 	add.w	r1, sp, #6
 8008a66:	7c00      	ldrb	r0, [r0, #16]
 8008a68:	4798      	blx	r3
  if (req->wLength != 0U)
 8008a6a:	88ea      	ldrh	r2, [r5, #6]
 8008a6c:	2a00      	cmp	r2, #0
 8008a6e:	f000 80a3 	beq.w	8008bb8 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 8008a72:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 8099 	beq.w	8008bae <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	bf28      	it	cs
 8008a80:	461a      	movcs	r2, r3
 8008a82:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a86:	4601      	mov	r1, r0
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 fbe1 	bl	8009250 <USBD_CtlSendData>
 8008a8e:	e08c      	b.n	8008baa <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a90:	7c03      	ldrb	r3, [r0, #16]
 8008a92:	b943      	cbnz	r3, 8008aa6 <USBD_GetDescriptor+0x70>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008a94:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a9a:	f10d 0006 	add.w	r0, sp, #6
 8008a9e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8008aa4:	e7e1      	b.n	8008a6a <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008aa6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aac:	f10d 0006 	add.w	r0, sp, #6
 8008ab0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8008ab6:	e7d8      	b.n	8008a6a <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8008ab8:	b2d2      	uxtb	r2, r2
 8008aba:	2a05      	cmp	r2, #5
 8008abc:	d852      	bhi.n	8008b64 <USBD_GetDescriptor+0x12e>
 8008abe:	e8df f002 	tbb	[pc, r2]
 8008ac2:	1003      	.short	0x1003
 8008ac4:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ac8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	b123      	cbz	r3, 8008ada <USBD_GetDescriptor+0xa4>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ad0:	f10d 0106 	add.w	r1, sp, #6
 8008ad4:	7c00      	ldrb	r0, [r0, #16]
 8008ad6:	4798      	blx	r3
  if (err != 0U)
 8008ad8:	e7c7      	b.n	8008a6a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8008ada:	4629      	mov	r1, r5
 8008adc:	f7ff ffa1 	bl	8008a22 <USBD_CtlError>
  if (err != 0U)
 8008ae0:	e063      	b.n	8008baa <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ae2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	b123      	cbz	r3, 8008af4 <USBD_GetDescriptor+0xbe>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008aea:	f10d 0106 	add.w	r1, sp, #6
 8008aee:	7c00      	ldrb	r0, [r0, #16]
 8008af0:	4798      	blx	r3
  if (err != 0U)
 8008af2:	e7ba      	b.n	8008a6a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8008af4:	4629      	mov	r1, r5
 8008af6:	f7ff ff94 	bl	8008a22 <USBD_CtlError>
  if (err != 0U)
 8008afa:	e056      	b.n	8008baa <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008afc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	b123      	cbz	r3, 8008b0e <USBD_GetDescriptor+0xd8>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b04:	f10d 0106 	add.w	r1, sp, #6
 8008b08:	7c00      	ldrb	r0, [r0, #16]
 8008b0a:	4798      	blx	r3
  if (err != 0U)
 8008b0c:	e7ad      	b.n	8008a6a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8008b0e:	4629      	mov	r1, r5
 8008b10:	f7ff ff87 	bl	8008a22 <USBD_CtlError>
  if (err != 0U)
 8008b14:	e049      	b.n	8008baa <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b16:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	b123      	cbz	r3, 8008b28 <USBD_GetDescriptor+0xf2>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b1e:	f10d 0106 	add.w	r1, sp, #6
 8008b22:	7c00      	ldrb	r0, [r0, #16]
 8008b24:	4798      	blx	r3
  if (err != 0U)
 8008b26:	e7a0      	b.n	8008a6a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8008b28:	4629      	mov	r1, r5
 8008b2a:	f7ff ff7a 	bl	8008a22 <USBD_CtlError>
  if (err != 0U)
 8008b2e:	e03c      	b.n	8008baa <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b30:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	b123      	cbz	r3, 8008b42 <USBD_GetDescriptor+0x10c>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b38:	f10d 0106 	add.w	r1, sp, #6
 8008b3c:	7c00      	ldrb	r0, [r0, #16]
 8008b3e:	4798      	blx	r3
  if (err != 0U)
 8008b40:	e793      	b.n	8008a6a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8008b42:	4629      	mov	r1, r5
 8008b44:	f7ff ff6d 	bl	8008a22 <USBD_CtlError>
  if (err != 0U)
 8008b48:	e02f      	b.n	8008baa <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b4a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	b123      	cbz	r3, 8008b5c <USBD_GetDescriptor+0x126>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b52:	f10d 0106 	add.w	r1, sp, #6
 8008b56:	7c00      	ldrb	r0, [r0, #16]
 8008b58:	4798      	blx	r3
  if (err != 0U)
 8008b5a:	e786      	b.n	8008a6a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	f7ff ff60 	bl	8008a22 <USBD_CtlError>
  if (err != 0U)
 8008b62:	e022      	b.n	8008baa <USBD_GetDescriptor+0x174>
          USBD_CtlError(pdev, req);
 8008b64:	4629      	mov	r1, r5
 8008b66:	f7ff ff5c 	bl	8008a22 <USBD_CtlError>
  if (err != 0U)
 8008b6a:	e01e      	b.n	8008baa <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b6c:	7c03      	ldrb	r3, [r0, #16]
 8008b6e:	b933      	cbnz	r3, 8008b7e <USBD_GetDescriptor+0x148>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008b70:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b76:	f10d 0006 	add.w	r0, sp, #6
 8008b7a:	4798      	blx	r3
  if (err != 0U)
 8008b7c:	e775      	b.n	8008a6a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8008b7e:	4629      	mov	r1, r5
 8008b80:	f7ff ff4f 	bl	8008a22 <USBD_CtlError>
  if (err != 0U)
 8008b84:	e011      	b.n	8008baa <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b86:	7c03      	ldrb	r3, [r0, #16]
 8008b88:	b943      	cbnz	r3, 8008b9c <USBD_GetDescriptor+0x166>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008b8a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b90:	f10d 0006 	add.w	r0, sp, #6
 8008b94:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b96:	2307      	movs	r3, #7
 8008b98:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8008b9a:	e766      	b.n	8008a6a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	f7ff ff40 	bl	8008a22 <USBD_CtlError>
  if (err != 0U)
 8008ba2:	e002      	b.n	8008baa <USBD_GetDescriptor+0x174>
      USBD_CtlError(pdev, req);
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	f7ff ff3c 	bl	8008a22 <USBD_CtlError>
}
 8008baa:	b003      	add	sp, #12
 8008bac:	bd30      	pop	{r4, r5, pc}
      USBD_CtlError(pdev, req);
 8008bae:	4629      	mov	r1, r5
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f7ff ff36 	bl	8008a22 <USBD_CtlError>
 8008bb6:	e7f8      	b.n	8008baa <USBD_GetDescriptor+0x174>
    (void)USBD_CtlSendStatus(pdev);
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f000 fb75 	bl	80092a8 <USBD_CtlSendStatus>
 8008bbe:	e7f4      	b.n	8008baa <USBD_GetDescriptor+0x174>

08008bc0 <USBD_SetAddress>:
{
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008bc4:	888b      	ldrh	r3, [r1, #4]
 8008bc6:	b9f3      	cbnz	r3, 8008c06 <USBD_SetAddress+0x46>
 8008bc8:	88cb      	ldrh	r3, [r1, #6]
 8008bca:	b9e3      	cbnz	r3, 8008c06 <USBD_SetAddress+0x46>
 8008bcc:	884b      	ldrh	r3, [r1, #2]
 8008bce:	2b7f      	cmp	r3, #127	@ 0x7f
 8008bd0:	d819      	bhi.n	8008c06 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bd2:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008bda:	2b03      	cmp	r3, #3
 8008bdc:	d00c      	beq.n	8008bf8 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8008bde:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008be2:	4629      	mov	r1, r5
 8008be4:	f7ff fcde 	bl	80085a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008be8:	4620      	mov	r0, r4
 8008bea:	f000 fb5d 	bl	80092a8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008bee:	b135      	cbz	r5, 8008bfe <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8008bf6:	e009      	b.n	8008c0c <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8008bf8:	f7ff ff13 	bl	8008a22 <USBD_CtlError>
 8008bfc:	e006      	b.n	8008c0c <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8008c04:	e002      	b.n	8008c0c <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8008c06:	4620      	mov	r0, r4
 8008c08:	f7ff ff0b 	bl	8008a22 <USBD_CtlError>
}
 8008c0c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008c10 <USBD_SetConfig>:
{
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	4604      	mov	r4, r0
 8008c14:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8008c16:	788d      	ldrb	r5, [r1, #2]
 8008c18:	4b2f      	ldr	r3, [pc, #188]	@ (8008cd8 <USBD_SetConfig+0xc8>)
 8008c1a:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c1c:	2d01      	cmp	r5, #1
 8008c1e:	d810      	bhi.n	8008c42 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8008c20:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d00f      	beq.n	8008c4a <USBD_SetConfig+0x3a>
 8008c2a:	2a03      	cmp	r2, #3
 8008c2c:	d026      	beq.n	8008c7c <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 8008c2e:	f7ff fef8 	bl	8008a22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c32:	4b29      	ldr	r3, [pc, #164]	@ (8008cd8 <USBD_SetConfig+0xc8>)
 8008c34:	7819      	ldrb	r1, [r3, #0]
 8008c36:	4620      	mov	r0, r4
 8008c38:	f7ff fd10 	bl	800865c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c3c:	2503      	movs	r5, #3
}
 8008c3e:	4628      	mov	r0, r5
 8008c40:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8008c42:	f7ff feee 	bl	8008a22 <USBD_CtlError>
    return USBD_FAIL;
 8008c46:	2503      	movs	r5, #3
 8008c48:	e7f9      	b.n	8008c3e <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8008c4a:	b1a5      	cbz	r5, 8008c76 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 8008c4c:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c4e:	4629      	mov	r1, r5
 8008c50:	f7ff fcfb 	bl	800864a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8008c54:	4605      	mov	r5, r0
 8008c56:	b138      	cbz	r0, 8008c68 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 8008c58:	4631      	mov	r1, r6
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f7ff fee1 	bl	8008a22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c60:	2302      	movs	r3, #2
 8008c62:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8008c66:	e7ea      	b.n	8008c3e <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 fb1d 	bl	80092a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8008c74:	e7e3      	b.n	8008c3e <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8008c76:	f000 fb17 	bl	80092a8 <USBD_CtlSendStatus>
 8008c7a:	e7e0      	b.n	8008c3e <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8008c7c:	b1cd      	cbz	r5, 8008cb2 <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 8008c7e:	6841      	ldr	r1, [r0, #4]
 8008c80:	428d      	cmp	r5, r1
 8008c82:	d025      	beq.n	8008cd0 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c84:	b2c9      	uxtb	r1, r1
 8008c86:	f7ff fce9 	bl	800865c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c8a:	4b13      	ldr	r3, [pc, #76]	@ (8008cd8 <USBD_SetConfig+0xc8>)
 8008c8c:	7819      	ldrb	r1, [r3, #0]
 8008c8e:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c90:	4620      	mov	r0, r4
 8008c92:	f7ff fcda 	bl	800864a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8008c96:	4605      	mov	r5, r0
 8008c98:	b1b0      	cbz	r0, 8008cc8 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f7ff fec0 	bl	8008a22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ca2:	7921      	ldrb	r1, [r4, #4]
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	f7ff fcd9 	bl	800865c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008caa:	2302      	movs	r3, #2
 8008cac:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8008cb0:	e7c5      	b.n	8008c3e <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008cb8:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cba:	4629      	mov	r1, r5
 8008cbc:	f7ff fcce 	bl	800865c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f000 faf1 	bl	80092a8 <USBD_CtlSendStatus>
 8008cc6:	e7ba      	b.n	8008c3e <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f000 faed 	bl	80092a8 <USBD_CtlSendStatus>
 8008cce:	e7b6      	b.n	8008c3e <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8008cd0:	f000 faea 	bl	80092a8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8008cd4:	2500      	movs	r5, #0
 8008cd6:	e7b2      	b.n	8008c3e <USBD_SetConfig+0x2e>
 8008cd8:	20006208 	.word	0x20006208

08008cdc <USBD_GetConfig>:
{
 8008cdc:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8008cde:	88cb      	ldrh	r3, [r1, #6]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d10b      	bne.n	8008cfc <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8008ce4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d909      	bls.n	8008d02 <USBD_GetConfig+0x26>
 8008cee:	2a03      	cmp	r2, #3
 8008cf0:	d111      	bne.n	8008d16 <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	1d01      	adds	r1, r0, #4
 8008cf6:	f000 faab 	bl	8009250 <USBD_CtlSendData>
        break;
 8008cfa:	e001      	b.n	8008d00 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8008cfc:	f7ff fe91 	bl	8008a22 <USBD_CtlError>
}
 8008d00:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8008d02:	b252      	sxtb	r2, r2
 8008d04:	b13a      	cbz	r2, 8008d16 <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 8008d06:	4601      	mov	r1, r0
 8008d08:	2300      	movs	r3, #0
 8008d0a:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f000 fa9e 	bl	8009250 <USBD_CtlSendData>
        break;
 8008d14:	e7f4      	b.n	8008d00 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 8008d16:	f7ff fe84 	bl	8008a22 <USBD_CtlError>
}
 8008d1a:	e7f1      	b.n	8008d00 <USBD_GetConfig+0x24>

08008d1c <USBD_GetStatus>:
{
 8008d1c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8008d1e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008d22:	3b01      	subs	r3, #1
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d812      	bhi.n	8008d4e <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8008d28:	88cb      	ldrh	r3, [r1, #6]
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d10c      	bne.n	8008d48 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8008d32:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8008d36:	b10b      	cbz	r3, 8008d3c <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	f100 010c 	add.w	r1, r0, #12
 8008d42:	f000 fa85 	bl	8009250 <USBD_CtlSendData>
}
 8008d46:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8008d48:	f7ff fe6b 	bl	8008a22 <USBD_CtlError>
        break;
 8008d4c:	e7fb      	b.n	8008d46 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8008d4e:	f7ff fe68 	bl	8008a22 <USBD_CtlError>
}
 8008d52:	e7f8      	b.n	8008d46 <USBD_GetStatus+0x2a>

08008d54 <USBD_SetFeature>:
{
 8008d54:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d56:	884b      	ldrh	r3, [r1, #2]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d004      	beq.n	8008d66 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d007      	beq.n	8008d70 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 8008d60:	f7ff fe5f 	bl	8008a22 <USBD_CtlError>
}
 8008d64:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8008d66:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d6a:	f000 fa9d 	bl	80092a8 <USBD_CtlSendStatus>
 8008d6e:	e7f9      	b.n	8008d64 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008d70:	888b      	ldrh	r3, [r1, #4]
 8008d72:	0a1b      	lsrs	r3, r3, #8
 8008d74:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d78:	f000 fa96 	bl	80092a8 <USBD_CtlSendStatus>
 8008d7c:	e7f2      	b.n	8008d64 <USBD_SetFeature+0x10>

08008d7e <USBD_ClrFeature>:
{
 8008d7e:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8008d80:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008d84:	3b01      	subs	r3, #1
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d809      	bhi.n	8008d9e <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d8a:	884b      	ldrh	r3, [r1, #2]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d000      	beq.n	8008d92 <USBD_ClrFeature+0x14>
}
 8008d90:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d98:	f000 fa86 	bl	80092a8 <USBD_CtlSendStatus>
 8008d9c:	e7f8      	b.n	8008d90 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8008d9e:	f7ff fe40 	bl	8008a22 <USBD_CtlError>
}
 8008da2:	e7f5      	b.n	8008d90 <USBD_ClrFeature+0x12>

08008da4 <USBD_StdDevReq>:
{
 8008da4:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008da6:	780c      	ldrb	r4, [r1, #0]
 8008da8:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8008dac:	2c20      	cmp	r4, #32
 8008dae:	d006      	beq.n	8008dbe <USBD_StdDevReq+0x1a>
 8008db0:	2c40      	cmp	r4, #64	@ 0x40
 8008db2:	d004      	beq.n	8008dbe <USBD_StdDevReq+0x1a>
 8008db4:	b16c      	cbz	r4, 8008dd2 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8008db6:	f7ff fe34 	bl	8008a22 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008dba:	2400      	movs	r4, #0
      break;
 8008dbc:	e007      	b.n	8008dce <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008dbe:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008dc2:	33ae      	adds	r3, #174	@ 0xae
 8008dc4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	4798      	blx	r3
 8008dcc:	4604      	mov	r4, r0
}
 8008dce:	4620      	mov	r0, r4
 8008dd0:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8008dd2:	784d      	ldrb	r5, [r1, #1]
 8008dd4:	2d09      	cmp	r5, #9
 8008dd6:	d81d      	bhi.n	8008e14 <USBD_StdDevReq+0x70>
 8008dd8:	e8df f005 	tbb	[pc, r5]
 8008ddc:	161c1912 	.word	0x161c1912
 8008de0:	1c05081c 	.word	0x1c05081c
 8008de4:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8008de6:	f7ff fe26 	bl	8008a36 <USBD_GetDescriptor>
          break;
 8008dea:	e7f0      	b.n	8008dce <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 8008dec:	f7ff fee8 	bl	8008bc0 <USBD_SetAddress>
          break;
 8008df0:	e7ed      	b.n	8008dce <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 8008df2:	f7ff ff0d 	bl	8008c10 <USBD_SetConfig>
 8008df6:	4604      	mov	r4, r0
          break;
 8008df8:	e7e9      	b.n	8008dce <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 8008dfa:	f7ff ff6f 	bl	8008cdc <USBD_GetConfig>
          break;
 8008dfe:	e7e6      	b.n	8008dce <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 8008e00:	f7ff ff8c 	bl	8008d1c <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8008e04:	462c      	mov	r4, r5
          break;
 8008e06:	e7e2      	b.n	8008dce <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 8008e08:	f7ff ffa4 	bl	8008d54 <USBD_SetFeature>
          break;
 8008e0c:	e7df      	b.n	8008dce <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 8008e0e:	f7ff ffb6 	bl	8008d7e <USBD_ClrFeature>
          break;
 8008e12:	e7dc      	b.n	8008dce <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8008e14:	f7ff fe05 	bl	8008a22 <USBD_CtlError>
          break;
 8008e18:	e7d9      	b.n	8008dce <USBD_StdDevReq+0x2a>

08008e1a <USBD_StdItfReq>:
{
 8008e1a:	b570      	push	{r4, r5, r6, lr}
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e20:	780b      	ldrb	r3, [r1, #0]
 8008e22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e26:	2b20      	cmp	r3, #32
 8008e28:	d007      	beq.n	8008e3a <USBD_StdItfReq+0x20>
 8008e2a:	2b40      	cmp	r3, #64	@ 0x40
 8008e2c:	d005      	beq.n	8008e3a <USBD_StdItfReq+0x20>
 8008e2e:	b123      	cbz	r3, 8008e3a <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8008e30:	f7ff fdf7 	bl	8008a22 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008e34:	2600      	movs	r6, #0
}
 8008e36:	4630      	mov	r0, r6
 8008e38:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8008e3a:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d826      	bhi.n	8008e92 <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e44:	7921      	ldrb	r1, [r4, #4]
 8008e46:	2901      	cmp	r1, #1
 8008e48:	d905      	bls.n	8008e56 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	f7ff fde8 	bl	8008a22 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008e52:	2600      	movs	r6, #0
 8008e54:	e7ef      	b.n	8008e36 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e56:	4628      	mov	r0, r5
 8008e58:	f7ff fcd2 	bl	8008800 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e5c:	b968      	cbnz	r0, 8008e7a <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 8008e5e:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8008e62:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008e66:	6891      	ldr	r1, [r2, #8]
 8008e68:	b189      	cbz	r1, 8008e8e <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 8008e6a:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e6e:	6893      	ldr	r3, [r2, #8]
 8008e70:	4621      	mov	r1, r4
 8008e72:	4628      	mov	r0, r5
 8008e74:	4798      	blx	r3
 8008e76:	4606      	mov	r6, r0
 8008e78:	e000      	b.n	8008e7c <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 8008e7a:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e7c:	88e3      	ldrh	r3, [r4, #6]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1d9      	bne.n	8008e36 <USBD_StdItfReq+0x1c>
 8008e82:	2e00      	cmp	r6, #0
 8008e84:	d1d7      	bne.n	8008e36 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8008e86:	4628      	mov	r0, r5
 8008e88:	f000 fa0e 	bl	80092a8 <USBD_CtlSendStatus>
 8008e8c:	e7d3      	b.n	8008e36 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 8008e8e:	2603      	movs	r6, #3
 8008e90:	e7f4      	b.n	8008e7c <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 8008e92:	4621      	mov	r1, r4
 8008e94:	4628      	mov	r0, r5
 8008e96:	f7ff fdc4 	bl	8008a22 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008e9a:	2600      	movs	r6, #0
          break;
 8008e9c:	e7cb      	b.n	8008e36 <USBD_StdItfReq+0x1c>

08008e9e <USBD_StdEPReq>:
{
 8008e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8008ea6:	888b      	ldrh	r3, [r1, #4]
 8008ea8:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eaa:	780c      	ldrb	r4, [r1, #0]
 8008eac:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8008eb0:	2c20      	cmp	r4, #32
 8008eb2:	d008      	beq.n	8008ec6 <USBD_StdEPReq+0x28>
 8008eb4:	2c40      	cmp	r4, #64	@ 0x40
 8008eb6:	d006      	beq.n	8008ec6 <USBD_StdEPReq+0x28>
 8008eb8:	b1dc      	cbz	r4, 8008ef2 <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 8008eba:	f7ff fdb2 	bl	8008a22 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008ebe:	2400      	movs	r4, #0
}
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f7ff fc9b 	bl	8008804 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ece:	4604      	mov	r4, r0
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	f040 80fc 	bne.w	80090ce <USBD_StdEPReq+0x230>
        pdev->classId = idx;
 8008ed6:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 8008eda:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8008ede:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d0eb      	beq.n	8008ec0 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008ee8:	4629      	mov	r1, r5
 8008eea:	4630      	mov	r0, r6
 8008eec:	4798      	blx	r3
 8008eee:	4604      	mov	r4, r0
 8008ef0:	e7e6      	b.n	8008ec0 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 8008ef2:	f891 8001 	ldrb.w	r8, [r1, #1]
 8008ef6:	f1b8 0f01 	cmp.w	r8, #1
 8008efa:	d031      	beq.n	8008f60 <USBD_StdEPReq+0xc2>
 8008efc:	f1b8 0f03 	cmp.w	r8, #3
 8008f00:	d005      	beq.n	8008f0e <USBD_StdEPReq+0x70>
 8008f02:	f1b8 0f00 	cmp.w	r8, #0
 8008f06:	d067      	beq.n	8008fd8 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 8008f08:	f7ff fd8b 	bl	8008a22 <USBD_CtlError>
          break;
 8008f0c:	e7d8      	b.n	8008ec0 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 8008f0e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d004      	beq.n	8008f22 <USBD_StdEPReq+0x84>
 8008f18:	2a03      	cmp	r2, #3
 8008f1a:	d012      	beq.n	8008f42 <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 8008f1c:	f7ff fd81 	bl	8008a22 <USBD_CtlError>
              break;
 8008f20:	e7ce      	b.n	8008ec0 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f22:	b10f      	cbz	r7, 8008f28 <USBD_StdEPReq+0x8a>
 8008f24:	2f80      	cmp	r7, #128	@ 0x80
 8008f26:	d104      	bne.n	8008f32 <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 8008f28:	4629      	mov	r1, r5
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f7ff fd79 	bl	8008a22 <USBD_CtlError>
 8008f30:	e7c6      	b.n	8008ec0 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f32:	4639      	mov	r1, r7
 8008f34:	f7ff fb26 	bl	8008584 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f38:	2180      	movs	r1, #128	@ 0x80
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f7ff fb22 	bl	8008584 <USBD_LL_StallEP>
 8008f40:	e7be      	b.n	8008ec0 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f42:	884b      	ldrh	r3, [r1, #2]
 8008f44:	b923      	cbnz	r3, 8008f50 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f46:	b11f      	cbz	r7, 8008f50 <USBD_StdEPReq+0xb2>
 8008f48:	2f80      	cmp	r7, #128	@ 0x80
 8008f4a:	d001      	beq.n	8008f50 <USBD_StdEPReq+0xb2>
 8008f4c:	88cb      	ldrh	r3, [r1, #6]
 8008f4e:	b11b      	cbz	r3, 8008f58 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 8008f50:	4630      	mov	r0, r6
 8008f52:	f000 f9a9 	bl	80092a8 <USBD_CtlSendStatus>
              break;
 8008f56:	e7b3      	b.n	8008ec0 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f58:	4639      	mov	r1, r7
 8008f5a:	f7ff fb13 	bl	8008584 <USBD_LL_StallEP>
 8008f5e:	e7f7      	b.n	8008f50 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 8008f60:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d004      	beq.n	8008f74 <USBD_StdEPReq+0xd6>
 8008f6a:	2a03      	cmp	r2, #3
 8008f6c:	d012      	beq.n	8008f94 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 8008f6e:	f7ff fd58 	bl	8008a22 <USBD_CtlError>
              break;
 8008f72:	e7a5      	b.n	8008ec0 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f74:	b10f      	cbz	r7, 8008f7a <USBD_StdEPReq+0xdc>
 8008f76:	2f80      	cmp	r7, #128	@ 0x80
 8008f78:	d104      	bne.n	8008f84 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f7ff fd50 	bl	8008a22 <USBD_CtlError>
 8008f82:	e79d      	b.n	8008ec0 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f84:	4639      	mov	r1, r7
 8008f86:	f7ff fafd 	bl	8008584 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f8a:	2180      	movs	r1, #128	@ 0x80
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	f7ff faf9 	bl	8008584 <USBD_LL_StallEP>
 8008f92:	e795      	b.n	8008ec0 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f94:	884b      	ldrh	r3, [r1, #2]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d192      	bne.n	8008ec0 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f9a:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 8008f9e:	d117      	bne.n	8008fd0 <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f000 f981 	bl	80092a8 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f7ff fc2b 	bl	8008804 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d186      	bne.n	8008ec0 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 8008fb2:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8008fb6:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8008fba:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8008fbe:	6892      	ldr	r2, [r2, #8]
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	f000 8086 	beq.w	80090d2 <USBD_StdEPReq+0x234>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	4630      	mov	r0, r6
 8008fca:	4790      	blx	r2
 8008fcc:	4604      	mov	r4, r0
 8008fce:	e777      	b.n	8008ec0 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008fd0:	4639      	mov	r1, r7
 8008fd2:	f7ff fadf 	bl	8008594 <USBD_LL_ClearStallEP>
 8008fd6:	e7e3      	b.n	8008fa0 <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 8008fd8:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008fdc:	b2d1      	uxtb	r1, r2
 8008fde:	2a02      	cmp	r2, #2
 8008fe0:	d006      	beq.n	8008ff0 <USBD_StdEPReq+0x152>
 8008fe2:	2903      	cmp	r1, #3
 8008fe4:	d029      	beq.n	800903a <USBD_StdEPReq+0x19c>
              USBD_CtlError(pdev, req);
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	f7ff fd1b 	bl	8008a22 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008fec:	4644      	mov	r4, r8
              break;
 8008fee:	e767      	b.n	8008ec0 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ff0:	b10f      	cbz	r7, 8008ff6 <USBD_StdEPReq+0x158>
 8008ff2:	2f80      	cmp	r7, #128	@ 0x80
 8008ff4:	d113      	bne.n	800901e <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ff6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ffa:	d115      	bne.n	8009028 <USBD_StdEPReq+0x18a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ffc:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009000:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8009004:	00b9      	lsls	r1, r7, #2
 8009006:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 800900a:	4431      	add	r1, r6
 800900c:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800900e:	2300      	movs	r3, #0
 8009010:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009012:	2202      	movs	r2, #2
 8009014:	4630      	mov	r0, r6
 8009016:	f000 f91b 	bl	8009250 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800901a:	4644      	mov	r4, r8
              break;
 800901c:	e750      	b.n	8008ec0 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800901e:	4629      	mov	r1, r5
 8009020:	f7ff fcff 	bl	8008a22 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8009024:	4644      	mov	r4, r8
                break;
 8009026:	e74b      	b.n	8008ec0 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009028:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 800902c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8009030:	00b9      	lsls	r1, r7, #2
 8009032:	3110      	adds	r1, #16
 8009034:	4431      	add	r1, r6
 8009036:	3104      	adds	r1, #4
 8009038:	e7e9      	b.n	800900e <USBD_StdEPReq+0x170>
              if ((ep_addr & 0x80U) == 0x80U)
 800903a:	b25b      	sxtb	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	db1f      	blt.n	8009080 <USBD_StdEPReq+0x1e2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009040:	f007 020f 	and.w	r2, r7, #15
 8009044:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009048:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800904c:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 8009050:	b322      	cbz	r2, 800909c <USBD_StdEPReq+0x1fe>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009052:	2b00      	cmp	r3, #0
 8009054:	db27      	blt.n	80090a6 <USBD_StdEPReq+0x208>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009056:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800905a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800905e:	009c      	lsls	r4, r3, #2
 8009060:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8009064:	4434      	add	r4, r6
 8009066:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009068:	b10f      	cbz	r7, 800906e <USBD_StdEPReq+0x1d0>
 800906a:	2f80      	cmp	r7, #128	@ 0x80
 800906c:	d124      	bne.n	80090b8 <USBD_StdEPReq+0x21a>
                pep->status = 0x0000U;
 800906e:	2300      	movs	r3, #0
 8009070:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009072:	2202      	movs	r2, #2
 8009074:	4621      	mov	r1, r4
 8009076:	4630      	mov	r0, r6
 8009078:	f000 f8ea 	bl	8009250 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800907c:	4644      	mov	r4, r8
              break;
 800907e:	e71f      	b.n	8008ec0 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009080:	f007 020f 	and.w	r2, r7, #15
 8009084:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009088:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800908c:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800908e:	2a00      	cmp	r2, #0
 8009090:	d1df      	bne.n	8009052 <USBD_StdEPReq+0x1b4>
                  USBD_CtlError(pdev, req);
 8009092:	4629      	mov	r1, r5
 8009094:	f7ff fcc5 	bl	8008a22 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8009098:	4644      	mov	r4, r8
                  break;
 800909a:	e711      	b.n	8008ec0 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 800909c:	4629      	mov	r1, r5
 800909e:	f7ff fcc0 	bl	8008a22 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80090a2:	4644      	mov	r4, r8
                  break;
 80090a4:	e70c      	b.n	8008ec0 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090a6:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 80090aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80090ae:	009c      	lsls	r4, r3, #2
 80090b0:	3410      	adds	r4, #16
 80090b2:	4434      	add	r4, r6
 80090b4:	3404      	adds	r4, #4
 80090b6:	e7d7      	b.n	8009068 <USBD_StdEPReq+0x1ca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80090b8:	4639      	mov	r1, r7
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7ff fa1c 	bl	80084f8 <USBD_LL_IsStallEP>
 80090c0:	b110      	cbz	r0, 80090c8 <USBD_StdEPReq+0x22a>
                pep->status = 0x0001U;
 80090c2:	2301      	movs	r3, #1
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	e7d4      	b.n	8009072 <USBD_StdEPReq+0x1d4>
                pep->status = 0x0000U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	6023      	str	r3, [r4, #0]
 80090cc:	e7d1      	b.n	8009072 <USBD_StdEPReq+0x1d4>
  USBD_StatusTypeDef ret = USBD_OK;
 80090ce:	2400      	movs	r4, #0
 80090d0:	e6f6      	b.n	8008ec0 <USBD_StdEPReq+0x22>
 80090d2:	4604      	mov	r4, r0
 80090d4:	e6f4      	b.n	8008ec0 <USBD_StdEPReq+0x22>

080090d6 <USBD_GetString>:
  if (desc == NULL)
 80090d6:	b300      	cbz	r0, 800911a <USBD_GetString+0x44>
{
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	460d      	mov	r5, r1
 80090dc:	4616      	mov	r6, r2
 80090de:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80090e0:	f7ff fc81 	bl	80089e6 <USBD_GetLen>
 80090e4:	3001      	adds	r0, #1
 80090e6:	0043      	lsls	r3, r0, #1
 80090e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090ec:	d806      	bhi.n	80090fc <USBD_GetString+0x26>
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 80090f2:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80090f4:	2303      	movs	r3, #3
 80090f6:	706b      	strb	r3, [r5, #1]
  idx++;
 80090f8:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 80090fa:	e00a      	b.n	8009112 <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80090fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009100:	e7f6      	b.n	80090f0 <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 8009102:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8009104:	3401      	adds	r4, #1
    idx++;
 8009106:	1c5a      	adds	r2, r3, #1
 8009108:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800910a:	2100      	movs	r1, #0
 800910c:	54a9      	strb	r1, [r5, r2]
    idx++;
 800910e:	3302      	adds	r3, #2
 8009110:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8009112:	7822      	ldrb	r2, [r4, #0]
 8009114:	2a00      	cmp	r2, #0
 8009116:	d1f4      	bne.n	8009102 <USBD_GetString+0x2c>
}
 8009118:	bd70      	pop	{r4, r5, r6, pc}
 800911a:	4770      	bx	lr

0800911c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800911c:	2312      	movs	r3, #18
 800911e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8009120:	4800      	ldr	r0, [pc, #0]	@ (8009124 <USBD_FS_DeviceDescriptor+0x8>)
 8009122:	4770      	bx	lr
 8009124:	20000114 	.word	0x20000114

08009128 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009128:	2304      	movs	r3, #4
 800912a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800912c:	4800      	ldr	r0, [pc, #0]	@ (8009130 <USBD_FS_LangIDStrDescriptor+0x8>)
 800912e:	4770      	bx	lr
 8009130:	20000110 	.word	0x20000110

08009134 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8009134:	2300      	movs	r3, #0
 8009136:	4293      	cmp	r3, r2
 8009138:	d21e      	bcs.n	8009178 <IntToUnicode+0x44>
{
 800913a:	b500      	push	{lr}
 800913c:	e010      	b.n	8009160 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800913e:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 8009142:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8009146:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8009148:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800914c:	f10c 0c01 	add.w	ip, ip, #1
 8009150:	f04f 0e00 	mov.w	lr, #0
 8009154:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8009158:	3301      	adds	r3, #1
 800915a:	b2db      	uxtb	r3, r3
 800915c:	4293      	cmp	r3, r2
 800915e:	d209      	bcs.n	8009174 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8009160:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8009164:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8009168:	d2e9      	bcs.n	800913e <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800916a:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 800916e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8009172:	e7e8      	b.n	8009146 <IntToUnicode+0x12>
  }
}
 8009174:	f85d fb04 	ldr.w	pc, [sp], #4
 8009178:	4770      	bx	lr
	...

0800917c <Get_SerialNum>:
{
 800917c:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800917e:	4b0b      	ldr	r3, [pc, #44]	@ (80091ac <Get_SerialNum+0x30>)
 8009180:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009184:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009188:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 800918c:	18c0      	adds	r0, r0, r3
 800918e:	d100      	bne.n	8009192 <Get_SerialNum+0x16>
}
 8009190:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009192:	4d07      	ldr	r5, [pc, #28]	@ (80091b0 <Get_SerialNum+0x34>)
 8009194:	2208      	movs	r2, #8
 8009196:	4629      	mov	r1, r5
 8009198:	f7ff ffcc 	bl	8009134 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800919c:	2204      	movs	r2, #4
 800919e:	f105 0110 	add.w	r1, r5, #16
 80091a2:	4620      	mov	r0, r4
 80091a4:	f7ff ffc6 	bl	8009134 <IntToUnicode>
}
 80091a8:	e7f2      	b.n	8009190 <Get_SerialNum+0x14>
 80091aa:	bf00      	nop
 80091ac:	1fff7000 	.word	0x1fff7000
 80091b0:	200000f6 	.word	0x200000f6

080091b4 <USBD_FS_SerialStrDescriptor>:
{
 80091b4:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80091b6:	231a      	movs	r3, #26
 80091b8:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 80091ba:	f7ff ffdf 	bl	800917c <Get_SerialNum>
}
 80091be:	4801      	ldr	r0, [pc, #4]	@ (80091c4 <USBD_FS_SerialStrDescriptor+0x10>)
 80091c0:	bd08      	pop	{r3, pc}
 80091c2:	bf00      	nop
 80091c4:	200000f4 	.word	0x200000f4

080091c8 <USBD_FS_ProductStrDescriptor>:
{
 80091c8:	b508      	push	{r3, lr}
 80091ca:	460a      	mov	r2, r1
  if(speed == 0)
 80091cc:	b928      	cbnz	r0, 80091da <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091ce:	4905      	ldr	r1, [pc, #20]	@ (80091e4 <USBD_FS_ProductStrDescriptor+0x1c>)
 80091d0:	4805      	ldr	r0, [pc, #20]	@ (80091e8 <USBD_FS_ProductStrDescriptor+0x20>)
 80091d2:	f7ff ff80 	bl	80090d6 <USBD_GetString>
}
 80091d6:	4803      	ldr	r0, [pc, #12]	@ (80091e4 <USBD_FS_ProductStrDescriptor+0x1c>)
 80091d8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091da:	4902      	ldr	r1, [pc, #8]	@ (80091e4 <USBD_FS_ProductStrDescriptor+0x1c>)
 80091dc:	4802      	ldr	r0, [pc, #8]	@ (80091e8 <USBD_FS_ProductStrDescriptor+0x20>)
 80091de:	f7ff ff7a 	bl	80090d6 <USBD_GetString>
 80091e2:	e7f8      	b.n	80091d6 <USBD_FS_ProductStrDescriptor+0xe>
 80091e4:	2000620c 	.word	0x2000620c
 80091e8:	0800a1cc 	.word	0x0800a1cc

080091ec <USBD_FS_ManufacturerStrDescriptor>:
{
 80091ec:	b510      	push	{r4, lr}
 80091ee:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80091f0:	4c03      	ldr	r4, [pc, #12]	@ (8009200 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80091f2:	4621      	mov	r1, r4
 80091f4:	4803      	ldr	r0, [pc, #12]	@ (8009204 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80091f6:	f7ff ff6e 	bl	80090d6 <USBD_GetString>
}
 80091fa:	4620      	mov	r0, r4
 80091fc:	bd10      	pop	{r4, pc}
 80091fe:	bf00      	nop
 8009200:	2000620c 	.word	0x2000620c
 8009204:	0800a1e8 	.word	0x0800a1e8

08009208 <USBD_FS_ConfigStrDescriptor>:
{
 8009208:	b508      	push	{r3, lr}
 800920a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800920c:	b928      	cbnz	r0, 800921a <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800920e:	4905      	ldr	r1, [pc, #20]	@ (8009224 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8009210:	4805      	ldr	r0, [pc, #20]	@ (8009228 <USBD_FS_ConfigStrDescriptor+0x20>)
 8009212:	f7ff ff60 	bl	80090d6 <USBD_GetString>
}
 8009216:	4803      	ldr	r0, [pc, #12]	@ (8009224 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8009218:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800921a:	4902      	ldr	r1, [pc, #8]	@ (8009224 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800921c:	4802      	ldr	r0, [pc, #8]	@ (8009228 <USBD_FS_ConfigStrDescriptor+0x20>)
 800921e:	f7ff ff5a 	bl	80090d6 <USBD_GetString>
 8009222:	e7f8      	b.n	8009216 <USBD_FS_ConfigStrDescriptor+0xe>
 8009224:	2000620c 	.word	0x2000620c
 8009228:	0800a1fc 	.word	0x0800a1fc

0800922c <USBD_FS_InterfaceStrDescriptor>:
{
 800922c:	b508      	push	{r3, lr}
 800922e:	460a      	mov	r2, r1
  if(speed == 0)
 8009230:	b928      	cbnz	r0, 800923e <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009232:	4905      	ldr	r1, [pc, #20]	@ (8009248 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8009234:	4805      	ldr	r0, [pc, #20]	@ (800924c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8009236:	f7ff ff4e 	bl	80090d6 <USBD_GetString>
}
 800923a:	4803      	ldr	r0, [pc, #12]	@ (8009248 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800923c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800923e:	4902      	ldr	r1, [pc, #8]	@ (8009248 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8009240:	4802      	ldr	r0, [pc, #8]	@ (800924c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8009242:	f7ff ff48 	bl	80090d6 <USBD_GetString>
 8009246:	e7f8      	b.n	800923a <USBD_FS_InterfaceStrDescriptor+0xe>
 8009248:	2000620c 	.word	0x2000620c
 800924c:	0800a208 	.word	0x0800a208

08009250 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009250:	b508      	push	{r3, lr}
 8009252:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009254:	2202      	movs	r2, #2
 8009256:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800925a:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800925c:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800925e:	460a      	mov	r2, r1
 8009260:	2100      	movs	r1, #0
 8009262:	f7ff f9a7 	bl	80085b4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009266:	2000      	movs	r0, #0
 8009268:	bd08      	pop	{r3, pc}

0800926a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800926a:	b508      	push	{r3, lr}
 800926c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800926e:	460a      	mov	r2, r1
 8009270:	2100      	movs	r1, #0
 8009272:	f7ff f99f 	bl	80085b4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009276:	2000      	movs	r0, #0
 8009278:	bd08      	pop	{r3, pc}

0800927a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800927a:	b508      	push	{r3, lr}
 800927c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800927e:	2203      	movs	r2, #3
 8009280:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009284:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009288:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800928c:	460a      	mov	r2, r1
 800928e:	2100      	movs	r1, #0
 8009290:	f7ff f998 	bl	80085c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009294:	2000      	movs	r0, #0
 8009296:	bd08      	pop	{r3, pc}

08009298 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009298:	b508      	push	{r3, lr}
 800929a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800929c:	460a      	mov	r2, r1
 800929e:	2100      	movs	r1, #0
 80092a0:	f7ff f990 	bl	80085c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80092a4:	2000      	movs	r0, #0
 80092a6:	bd08      	pop	{r3, pc}

080092a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092a8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092aa:	2204      	movs	r2, #4
 80092ac:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092b0:	2300      	movs	r3, #0
 80092b2:	461a      	mov	r2, r3
 80092b4:	4619      	mov	r1, r3
 80092b6:	f7ff f97d 	bl	80085b4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80092ba:	2000      	movs	r0, #0
 80092bc:	bd08      	pop	{r3, pc}

080092be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80092be:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092c0:	2205      	movs	r2, #5
 80092c2:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092c6:	2300      	movs	r3, #0
 80092c8:	461a      	mov	r2, r3
 80092ca:	4619      	mov	r1, r3
 80092cc:	f7ff f97a 	bl	80085c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80092d0:	2000      	movs	r0, #0
 80092d2:	bd08      	pop	{r3, pc}

080092d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80092d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800930c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80092d8:	f7fd f924 	bl	8006524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80092dc:	480c      	ldr	r0, [pc, #48]	@ (8009310 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80092de:	490d      	ldr	r1, [pc, #52]	@ (8009314 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80092e0:	4a0d      	ldr	r2, [pc, #52]	@ (8009318 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80092e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80092e4:	e002      	b.n	80092ec <LoopCopyDataInit>

080092e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80092e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80092e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80092ea:	3304      	adds	r3, #4

080092ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80092ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80092ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80092f0:	d3f9      	bcc.n	80092e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80092f2:	4a0a      	ldr	r2, [pc, #40]	@ (800931c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80092f4:	4c0a      	ldr	r4, [pc, #40]	@ (8009320 <LoopFillZerobss+0x22>)
  movs r3, #0
 80092f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80092f8:	e001      	b.n	80092fe <LoopFillZerobss>

080092fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80092fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80092fc:	3204      	adds	r2, #4

080092fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80092fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009300:	d3fb      	bcc.n	80092fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009302:	f000 f855 	bl	80093b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009306:	f7f8 fefb 	bl	8002100 <main>
  bx  lr    
 800930a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800930c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8009310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009314:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8009318:	0800a2c8 	.word	0x0800a2c8
  ldr r2, =_sbss
 800931c:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8009320:	20006554 	.word	0x20006554

08009324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009324:	e7fe      	b.n	8009324 <ADC_IRQHandler>
	...

08009328 <sniprintf>:
 8009328:	b40c      	push	{r2, r3}
 800932a:	b530      	push	{r4, r5, lr}
 800932c:	4b18      	ldr	r3, [pc, #96]	@ (8009390 <sniprintf+0x68>)
 800932e:	1e0c      	subs	r4, r1, #0
 8009330:	681d      	ldr	r5, [r3, #0]
 8009332:	b09d      	sub	sp, #116	@ 0x74
 8009334:	da08      	bge.n	8009348 <sniprintf+0x20>
 8009336:	238b      	movs	r3, #139	@ 0x8b
 8009338:	602b      	str	r3, [r5, #0]
 800933a:	f04f 30ff 	mov.w	r0, #4294967295
 800933e:	b01d      	add	sp, #116	@ 0x74
 8009340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009344:	b002      	add	sp, #8
 8009346:	4770      	bx	lr
 8009348:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800934c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009350:	f04f 0300 	mov.w	r3, #0
 8009354:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009356:	bf14      	ite	ne
 8009358:	f104 33ff 	addne.w	r3, r4, #4294967295
 800935c:	4623      	moveq	r3, r4
 800935e:	9304      	str	r3, [sp, #16]
 8009360:	9307      	str	r3, [sp, #28]
 8009362:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009366:	9002      	str	r0, [sp, #8]
 8009368:	9006      	str	r0, [sp, #24]
 800936a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800936e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009370:	ab21      	add	r3, sp, #132	@ 0x84
 8009372:	a902      	add	r1, sp, #8
 8009374:	4628      	mov	r0, r5
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	f000 f9a6 	bl	80096c8 <_svfiprintf_r>
 800937c:	1c43      	adds	r3, r0, #1
 800937e:	bfbc      	itt	lt
 8009380:	238b      	movlt	r3, #139	@ 0x8b
 8009382:	602b      	strlt	r3, [r5, #0]
 8009384:	2c00      	cmp	r4, #0
 8009386:	d0da      	beq.n	800933e <sniprintf+0x16>
 8009388:	9b02      	ldr	r3, [sp, #8]
 800938a:	2200      	movs	r2, #0
 800938c:	701a      	strb	r2, [r3, #0]
 800938e:	e7d6      	b.n	800933e <sniprintf+0x16>
 8009390:	20000144 	.word	0x20000144

08009394 <memset>:
 8009394:	4402      	add	r2, r0
 8009396:	4603      	mov	r3, r0
 8009398:	4293      	cmp	r3, r2
 800939a:	d100      	bne.n	800939e <memset+0xa>
 800939c:	4770      	bx	lr
 800939e:	f803 1b01 	strb.w	r1, [r3], #1
 80093a2:	e7f9      	b.n	8009398 <memset+0x4>

080093a4 <__errno>:
 80093a4:	4b01      	ldr	r3, [pc, #4]	@ (80093ac <__errno+0x8>)
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	20000144 	.word	0x20000144

080093b0 <__libc_init_array>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	4b0d      	ldr	r3, [pc, #52]	@ (80093e8 <__libc_init_array+0x38>)
 80093b4:	4d0d      	ldr	r5, [pc, #52]	@ (80093ec <__libc_init_array+0x3c>)
 80093b6:	1b5b      	subs	r3, r3, r5
 80093b8:	109c      	asrs	r4, r3, #2
 80093ba:	2600      	movs	r6, #0
 80093bc:	42a6      	cmp	r6, r4
 80093be:	d109      	bne.n	80093d4 <__libc_init_array+0x24>
 80093c0:	f000 fde8 	bl	8009f94 <_init>
 80093c4:	4d0a      	ldr	r5, [pc, #40]	@ (80093f0 <__libc_init_array+0x40>)
 80093c6:	4b0b      	ldr	r3, [pc, #44]	@ (80093f4 <__libc_init_array+0x44>)
 80093c8:	1b5b      	subs	r3, r3, r5
 80093ca:	109c      	asrs	r4, r3, #2
 80093cc:	2600      	movs	r6, #0
 80093ce:	42a6      	cmp	r6, r4
 80093d0:	d105      	bne.n	80093de <__libc_init_array+0x2e>
 80093d2:	bd70      	pop	{r4, r5, r6, pc}
 80093d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d8:	4798      	blx	r3
 80093da:	3601      	adds	r6, #1
 80093dc:	e7ee      	b.n	80093bc <__libc_init_array+0xc>
 80093de:	f855 3b04 	ldr.w	r3, [r5], #4
 80093e2:	4798      	blx	r3
 80093e4:	3601      	adds	r6, #1
 80093e6:	e7f2      	b.n	80093ce <__libc_init_array+0x1e>
 80093e8:	0800a2c0 	.word	0x0800a2c0
 80093ec:	0800a2c0 	.word	0x0800a2c0
 80093f0:	0800a2c0 	.word	0x0800a2c0
 80093f4:	0800a2c4 	.word	0x0800a2c4

080093f8 <__retarget_lock_acquire_recursive>:
 80093f8:	4770      	bx	lr

080093fa <__retarget_lock_release_recursive>:
 80093fa:	4770      	bx	lr

080093fc <memcpy>:
 80093fc:	440a      	add	r2, r1
 80093fe:	4291      	cmp	r1, r2
 8009400:	f100 33ff 	add.w	r3, r0, #4294967295
 8009404:	d100      	bne.n	8009408 <memcpy+0xc>
 8009406:	4770      	bx	lr
 8009408:	b510      	push	{r4, lr}
 800940a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800940e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009412:	4291      	cmp	r1, r2
 8009414:	d1f9      	bne.n	800940a <memcpy+0xe>
 8009416:	bd10      	pop	{r4, pc}

08009418 <_free_r>:
 8009418:	b538      	push	{r3, r4, r5, lr}
 800941a:	4605      	mov	r5, r0
 800941c:	2900      	cmp	r1, #0
 800941e:	d041      	beq.n	80094a4 <_free_r+0x8c>
 8009420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009424:	1f0c      	subs	r4, r1, #4
 8009426:	2b00      	cmp	r3, #0
 8009428:	bfb8      	it	lt
 800942a:	18e4      	addlt	r4, r4, r3
 800942c:	f000 f8e0 	bl	80095f0 <__malloc_lock>
 8009430:	4a1d      	ldr	r2, [pc, #116]	@ (80094a8 <_free_r+0x90>)
 8009432:	6813      	ldr	r3, [r2, #0]
 8009434:	b933      	cbnz	r3, 8009444 <_free_r+0x2c>
 8009436:	6063      	str	r3, [r4, #4]
 8009438:	6014      	str	r4, [r2, #0]
 800943a:	4628      	mov	r0, r5
 800943c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009440:	f000 b8dc 	b.w	80095fc <__malloc_unlock>
 8009444:	42a3      	cmp	r3, r4
 8009446:	d908      	bls.n	800945a <_free_r+0x42>
 8009448:	6820      	ldr	r0, [r4, #0]
 800944a:	1821      	adds	r1, r4, r0
 800944c:	428b      	cmp	r3, r1
 800944e:	bf01      	itttt	eq
 8009450:	6819      	ldreq	r1, [r3, #0]
 8009452:	685b      	ldreq	r3, [r3, #4]
 8009454:	1809      	addeq	r1, r1, r0
 8009456:	6021      	streq	r1, [r4, #0]
 8009458:	e7ed      	b.n	8009436 <_free_r+0x1e>
 800945a:	461a      	mov	r2, r3
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	b10b      	cbz	r3, 8009464 <_free_r+0x4c>
 8009460:	42a3      	cmp	r3, r4
 8009462:	d9fa      	bls.n	800945a <_free_r+0x42>
 8009464:	6811      	ldr	r1, [r2, #0]
 8009466:	1850      	adds	r0, r2, r1
 8009468:	42a0      	cmp	r0, r4
 800946a:	d10b      	bne.n	8009484 <_free_r+0x6c>
 800946c:	6820      	ldr	r0, [r4, #0]
 800946e:	4401      	add	r1, r0
 8009470:	1850      	adds	r0, r2, r1
 8009472:	4283      	cmp	r3, r0
 8009474:	6011      	str	r1, [r2, #0]
 8009476:	d1e0      	bne.n	800943a <_free_r+0x22>
 8009478:	6818      	ldr	r0, [r3, #0]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	6053      	str	r3, [r2, #4]
 800947e:	4408      	add	r0, r1
 8009480:	6010      	str	r0, [r2, #0]
 8009482:	e7da      	b.n	800943a <_free_r+0x22>
 8009484:	d902      	bls.n	800948c <_free_r+0x74>
 8009486:	230c      	movs	r3, #12
 8009488:	602b      	str	r3, [r5, #0]
 800948a:	e7d6      	b.n	800943a <_free_r+0x22>
 800948c:	6820      	ldr	r0, [r4, #0]
 800948e:	1821      	adds	r1, r4, r0
 8009490:	428b      	cmp	r3, r1
 8009492:	bf04      	itt	eq
 8009494:	6819      	ldreq	r1, [r3, #0]
 8009496:	685b      	ldreq	r3, [r3, #4]
 8009498:	6063      	str	r3, [r4, #4]
 800949a:	bf04      	itt	eq
 800949c:	1809      	addeq	r1, r1, r0
 800949e:	6021      	streq	r1, [r4, #0]
 80094a0:	6054      	str	r4, [r2, #4]
 80094a2:	e7ca      	b.n	800943a <_free_r+0x22>
 80094a4:	bd38      	pop	{r3, r4, r5, pc}
 80094a6:	bf00      	nop
 80094a8:	20006550 	.word	0x20006550

080094ac <sbrk_aligned>:
 80094ac:	b570      	push	{r4, r5, r6, lr}
 80094ae:	4e0f      	ldr	r6, [pc, #60]	@ (80094ec <sbrk_aligned+0x40>)
 80094b0:	460c      	mov	r4, r1
 80094b2:	6831      	ldr	r1, [r6, #0]
 80094b4:	4605      	mov	r5, r0
 80094b6:	b911      	cbnz	r1, 80094be <sbrk_aligned+0x12>
 80094b8:	f000 fbaa 	bl	8009c10 <_sbrk_r>
 80094bc:	6030      	str	r0, [r6, #0]
 80094be:	4621      	mov	r1, r4
 80094c0:	4628      	mov	r0, r5
 80094c2:	f000 fba5 	bl	8009c10 <_sbrk_r>
 80094c6:	1c43      	adds	r3, r0, #1
 80094c8:	d103      	bne.n	80094d2 <sbrk_aligned+0x26>
 80094ca:	f04f 34ff 	mov.w	r4, #4294967295
 80094ce:	4620      	mov	r0, r4
 80094d0:	bd70      	pop	{r4, r5, r6, pc}
 80094d2:	1cc4      	adds	r4, r0, #3
 80094d4:	f024 0403 	bic.w	r4, r4, #3
 80094d8:	42a0      	cmp	r0, r4
 80094da:	d0f8      	beq.n	80094ce <sbrk_aligned+0x22>
 80094dc:	1a21      	subs	r1, r4, r0
 80094de:	4628      	mov	r0, r5
 80094e0:	f000 fb96 	bl	8009c10 <_sbrk_r>
 80094e4:	3001      	adds	r0, #1
 80094e6:	d1f2      	bne.n	80094ce <sbrk_aligned+0x22>
 80094e8:	e7ef      	b.n	80094ca <sbrk_aligned+0x1e>
 80094ea:	bf00      	nop
 80094ec:	2000654c 	.word	0x2000654c

080094f0 <_malloc_r>:
 80094f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094f4:	1ccd      	adds	r5, r1, #3
 80094f6:	f025 0503 	bic.w	r5, r5, #3
 80094fa:	3508      	adds	r5, #8
 80094fc:	2d0c      	cmp	r5, #12
 80094fe:	bf38      	it	cc
 8009500:	250c      	movcc	r5, #12
 8009502:	2d00      	cmp	r5, #0
 8009504:	4606      	mov	r6, r0
 8009506:	db01      	blt.n	800950c <_malloc_r+0x1c>
 8009508:	42a9      	cmp	r1, r5
 800950a:	d904      	bls.n	8009516 <_malloc_r+0x26>
 800950c:	230c      	movs	r3, #12
 800950e:	6033      	str	r3, [r6, #0]
 8009510:	2000      	movs	r0, #0
 8009512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009516:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095ec <_malloc_r+0xfc>
 800951a:	f000 f869 	bl	80095f0 <__malloc_lock>
 800951e:	f8d8 3000 	ldr.w	r3, [r8]
 8009522:	461c      	mov	r4, r3
 8009524:	bb44      	cbnz	r4, 8009578 <_malloc_r+0x88>
 8009526:	4629      	mov	r1, r5
 8009528:	4630      	mov	r0, r6
 800952a:	f7ff ffbf 	bl	80094ac <sbrk_aligned>
 800952e:	1c43      	adds	r3, r0, #1
 8009530:	4604      	mov	r4, r0
 8009532:	d158      	bne.n	80095e6 <_malloc_r+0xf6>
 8009534:	f8d8 4000 	ldr.w	r4, [r8]
 8009538:	4627      	mov	r7, r4
 800953a:	2f00      	cmp	r7, #0
 800953c:	d143      	bne.n	80095c6 <_malloc_r+0xd6>
 800953e:	2c00      	cmp	r4, #0
 8009540:	d04b      	beq.n	80095da <_malloc_r+0xea>
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	4639      	mov	r1, r7
 8009546:	4630      	mov	r0, r6
 8009548:	eb04 0903 	add.w	r9, r4, r3
 800954c:	f000 fb60 	bl	8009c10 <_sbrk_r>
 8009550:	4581      	cmp	r9, r0
 8009552:	d142      	bne.n	80095da <_malloc_r+0xea>
 8009554:	6821      	ldr	r1, [r4, #0]
 8009556:	1a6d      	subs	r5, r5, r1
 8009558:	4629      	mov	r1, r5
 800955a:	4630      	mov	r0, r6
 800955c:	f7ff ffa6 	bl	80094ac <sbrk_aligned>
 8009560:	3001      	adds	r0, #1
 8009562:	d03a      	beq.n	80095da <_malloc_r+0xea>
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	442b      	add	r3, r5
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	f8d8 3000 	ldr.w	r3, [r8]
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	bb62      	cbnz	r2, 80095cc <_malloc_r+0xdc>
 8009572:	f8c8 7000 	str.w	r7, [r8]
 8009576:	e00f      	b.n	8009598 <_malloc_r+0xa8>
 8009578:	6822      	ldr	r2, [r4, #0]
 800957a:	1b52      	subs	r2, r2, r5
 800957c:	d420      	bmi.n	80095c0 <_malloc_r+0xd0>
 800957e:	2a0b      	cmp	r2, #11
 8009580:	d917      	bls.n	80095b2 <_malloc_r+0xc2>
 8009582:	1961      	adds	r1, r4, r5
 8009584:	42a3      	cmp	r3, r4
 8009586:	6025      	str	r5, [r4, #0]
 8009588:	bf18      	it	ne
 800958a:	6059      	strne	r1, [r3, #4]
 800958c:	6863      	ldr	r3, [r4, #4]
 800958e:	bf08      	it	eq
 8009590:	f8c8 1000 	streq.w	r1, [r8]
 8009594:	5162      	str	r2, [r4, r5]
 8009596:	604b      	str	r3, [r1, #4]
 8009598:	4630      	mov	r0, r6
 800959a:	f000 f82f 	bl	80095fc <__malloc_unlock>
 800959e:	f104 000b 	add.w	r0, r4, #11
 80095a2:	1d23      	adds	r3, r4, #4
 80095a4:	f020 0007 	bic.w	r0, r0, #7
 80095a8:	1ac2      	subs	r2, r0, r3
 80095aa:	bf1c      	itt	ne
 80095ac:	1a1b      	subne	r3, r3, r0
 80095ae:	50a3      	strne	r3, [r4, r2]
 80095b0:	e7af      	b.n	8009512 <_malloc_r+0x22>
 80095b2:	6862      	ldr	r2, [r4, #4]
 80095b4:	42a3      	cmp	r3, r4
 80095b6:	bf0c      	ite	eq
 80095b8:	f8c8 2000 	streq.w	r2, [r8]
 80095bc:	605a      	strne	r2, [r3, #4]
 80095be:	e7eb      	b.n	8009598 <_malloc_r+0xa8>
 80095c0:	4623      	mov	r3, r4
 80095c2:	6864      	ldr	r4, [r4, #4]
 80095c4:	e7ae      	b.n	8009524 <_malloc_r+0x34>
 80095c6:	463c      	mov	r4, r7
 80095c8:	687f      	ldr	r7, [r7, #4]
 80095ca:	e7b6      	b.n	800953a <_malloc_r+0x4a>
 80095cc:	461a      	mov	r2, r3
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	42a3      	cmp	r3, r4
 80095d2:	d1fb      	bne.n	80095cc <_malloc_r+0xdc>
 80095d4:	2300      	movs	r3, #0
 80095d6:	6053      	str	r3, [r2, #4]
 80095d8:	e7de      	b.n	8009598 <_malloc_r+0xa8>
 80095da:	230c      	movs	r3, #12
 80095dc:	6033      	str	r3, [r6, #0]
 80095de:	4630      	mov	r0, r6
 80095e0:	f000 f80c 	bl	80095fc <__malloc_unlock>
 80095e4:	e794      	b.n	8009510 <_malloc_r+0x20>
 80095e6:	6005      	str	r5, [r0, #0]
 80095e8:	e7d6      	b.n	8009598 <_malloc_r+0xa8>
 80095ea:	bf00      	nop
 80095ec:	20006550 	.word	0x20006550

080095f0 <__malloc_lock>:
 80095f0:	4801      	ldr	r0, [pc, #4]	@ (80095f8 <__malloc_lock+0x8>)
 80095f2:	f7ff bf01 	b.w	80093f8 <__retarget_lock_acquire_recursive>
 80095f6:	bf00      	nop
 80095f8:	20006548 	.word	0x20006548

080095fc <__malloc_unlock>:
 80095fc:	4801      	ldr	r0, [pc, #4]	@ (8009604 <__malloc_unlock+0x8>)
 80095fe:	f7ff befc 	b.w	80093fa <__retarget_lock_release_recursive>
 8009602:	bf00      	nop
 8009604:	20006548 	.word	0x20006548

08009608 <__ssputs_r>:
 8009608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800960c:	688e      	ldr	r6, [r1, #8]
 800960e:	461f      	mov	r7, r3
 8009610:	42be      	cmp	r6, r7
 8009612:	4682      	mov	sl, r0
 8009614:	460c      	mov	r4, r1
 8009616:	4690      	mov	r8, r2
 8009618:	4633      	mov	r3, r6
 800961a:	d853      	bhi.n	80096c4 <__ssputs_r+0xbc>
 800961c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8009620:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 8009624:	d02b      	beq.n	800967e <__ssputs_r+0x76>
 8009626:	6965      	ldr	r5, [r4, #20]
 8009628:	6823      	ldr	r3, [r4, #0]
 800962a:	6909      	ldr	r1, [r1, #16]
 800962c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009630:	eba3 0901 	sub.w	r9, r3, r1
 8009634:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009638:	1c7b      	adds	r3, r7, #1
 800963a:	106d      	asrs	r5, r5, #1
 800963c:	444b      	add	r3, r9
 800963e:	42ab      	cmp	r3, r5
 8009640:	462a      	mov	r2, r5
 8009642:	bf84      	itt	hi
 8009644:	461d      	movhi	r5, r3
 8009646:	462a      	movhi	r2, r5
 8009648:	0543      	lsls	r3, r0, #21
 800964a:	d527      	bpl.n	800969c <__ssputs_r+0x94>
 800964c:	4611      	mov	r1, r2
 800964e:	4650      	mov	r0, sl
 8009650:	f7ff ff4e 	bl	80094f0 <_malloc_r>
 8009654:	4606      	mov	r6, r0
 8009656:	b358      	cbz	r0, 80096b0 <__ssputs_r+0xa8>
 8009658:	6921      	ldr	r1, [r4, #16]
 800965a:	464a      	mov	r2, r9
 800965c:	f7ff fece 	bl	80093fc <memcpy>
 8009660:	89a3      	ldrh	r3, [r4, #12]
 8009662:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800966a:	81a3      	strh	r3, [r4, #12]
 800966c:	6126      	str	r6, [r4, #16]
 800966e:	6165      	str	r5, [r4, #20]
 8009670:	444e      	add	r6, r9
 8009672:	eba5 0509 	sub.w	r5, r5, r9
 8009676:	6026      	str	r6, [r4, #0]
 8009678:	60a5      	str	r5, [r4, #8]
 800967a:	463e      	mov	r6, r7
 800967c:	463b      	mov	r3, r7
 800967e:	461f      	mov	r7, r3
 8009680:	6820      	ldr	r0, [r4, #0]
 8009682:	463a      	mov	r2, r7
 8009684:	4641      	mov	r1, r8
 8009686:	f000 faa9 	bl	8009bdc <memmove>
 800968a:	68a3      	ldr	r3, [r4, #8]
 800968c:	1b9b      	subs	r3, r3, r6
 800968e:	60a3      	str	r3, [r4, #8]
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	443b      	add	r3, r7
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	2000      	movs	r0, #0
 8009698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800969c:	4650      	mov	r0, sl
 800969e:	f000 fac7 	bl	8009c30 <_realloc_r>
 80096a2:	4606      	mov	r6, r0
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d1e1      	bne.n	800966c <__ssputs_r+0x64>
 80096a8:	6921      	ldr	r1, [r4, #16]
 80096aa:	4650      	mov	r0, sl
 80096ac:	f7ff feb4 	bl	8009418 <_free_r>
 80096b0:	230c      	movs	r3, #12
 80096b2:	f8ca 3000 	str.w	r3, [sl]
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096bc:	81a3      	strh	r3, [r4, #12]
 80096be:	f04f 30ff 	mov.w	r0, #4294967295
 80096c2:	e7e9      	b.n	8009698 <__ssputs_r+0x90>
 80096c4:	463e      	mov	r6, r7
 80096c6:	e7db      	b.n	8009680 <__ssputs_r+0x78>

080096c8 <_svfiprintf_r>:
 80096c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096cc:	4698      	mov	r8, r3
 80096ce:	898b      	ldrh	r3, [r1, #12]
 80096d0:	061b      	lsls	r3, r3, #24
 80096d2:	b09d      	sub	sp, #116	@ 0x74
 80096d4:	4607      	mov	r7, r0
 80096d6:	460d      	mov	r5, r1
 80096d8:	4614      	mov	r4, r2
 80096da:	d510      	bpl.n	80096fe <_svfiprintf_r+0x36>
 80096dc:	690b      	ldr	r3, [r1, #16]
 80096de:	b973      	cbnz	r3, 80096fe <_svfiprintf_r+0x36>
 80096e0:	2140      	movs	r1, #64	@ 0x40
 80096e2:	f7ff ff05 	bl	80094f0 <_malloc_r>
 80096e6:	6028      	str	r0, [r5, #0]
 80096e8:	6128      	str	r0, [r5, #16]
 80096ea:	b930      	cbnz	r0, 80096fa <_svfiprintf_r+0x32>
 80096ec:	230c      	movs	r3, #12
 80096ee:	603b      	str	r3, [r7, #0]
 80096f0:	f04f 30ff 	mov.w	r0, #4294967295
 80096f4:	b01d      	add	sp, #116	@ 0x74
 80096f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fa:	2340      	movs	r3, #64	@ 0x40
 80096fc:	616b      	str	r3, [r5, #20]
 80096fe:	2300      	movs	r3, #0
 8009700:	9309      	str	r3, [sp, #36]	@ 0x24
 8009702:	2320      	movs	r3, #32
 8009704:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009708:	f8cd 800c 	str.w	r8, [sp, #12]
 800970c:	2330      	movs	r3, #48	@ 0x30
 800970e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80098ac <_svfiprintf_r+0x1e4>
 8009712:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009716:	f04f 0901 	mov.w	r9, #1
 800971a:	4623      	mov	r3, r4
 800971c:	469a      	mov	sl, r3
 800971e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009722:	b10a      	cbz	r2, 8009728 <_svfiprintf_r+0x60>
 8009724:	2a25      	cmp	r2, #37	@ 0x25
 8009726:	d1f9      	bne.n	800971c <_svfiprintf_r+0x54>
 8009728:	ebba 0b04 	subs.w	fp, sl, r4
 800972c:	d00b      	beq.n	8009746 <_svfiprintf_r+0x7e>
 800972e:	465b      	mov	r3, fp
 8009730:	4622      	mov	r2, r4
 8009732:	4629      	mov	r1, r5
 8009734:	4638      	mov	r0, r7
 8009736:	f7ff ff67 	bl	8009608 <__ssputs_r>
 800973a:	3001      	adds	r0, #1
 800973c:	f000 80a7 	beq.w	800988e <_svfiprintf_r+0x1c6>
 8009740:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009742:	445a      	add	r2, fp
 8009744:	9209      	str	r2, [sp, #36]	@ 0x24
 8009746:	f89a 3000 	ldrb.w	r3, [sl]
 800974a:	2b00      	cmp	r3, #0
 800974c:	f000 809f 	beq.w	800988e <_svfiprintf_r+0x1c6>
 8009750:	2300      	movs	r3, #0
 8009752:	f04f 32ff 	mov.w	r2, #4294967295
 8009756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800975a:	f10a 0a01 	add.w	sl, sl, #1
 800975e:	9304      	str	r3, [sp, #16]
 8009760:	9307      	str	r3, [sp, #28]
 8009762:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009766:	931a      	str	r3, [sp, #104]	@ 0x68
 8009768:	4654      	mov	r4, sl
 800976a:	2205      	movs	r2, #5
 800976c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009770:	484e      	ldr	r0, [pc, #312]	@ (80098ac <_svfiprintf_r+0x1e4>)
 8009772:	f7f6 fd1d 	bl	80001b0 <memchr>
 8009776:	9a04      	ldr	r2, [sp, #16]
 8009778:	b9d8      	cbnz	r0, 80097b2 <_svfiprintf_r+0xea>
 800977a:	06d0      	lsls	r0, r2, #27
 800977c:	bf44      	itt	mi
 800977e:	2320      	movmi	r3, #32
 8009780:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009784:	0711      	lsls	r1, r2, #28
 8009786:	bf44      	itt	mi
 8009788:	232b      	movmi	r3, #43	@ 0x2b
 800978a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800978e:	f89a 3000 	ldrb.w	r3, [sl]
 8009792:	2b2a      	cmp	r3, #42	@ 0x2a
 8009794:	d015      	beq.n	80097c2 <_svfiprintf_r+0xfa>
 8009796:	9a07      	ldr	r2, [sp, #28]
 8009798:	4654      	mov	r4, sl
 800979a:	2000      	movs	r0, #0
 800979c:	f04f 0c0a 	mov.w	ip, #10
 80097a0:	4621      	mov	r1, r4
 80097a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097a6:	3b30      	subs	r3, #48	@ 0x30
 80097a8:	2b09      	cmp	r3, #9
 80097aa:	d94b      	bls.n	8009844 <_svfiprintf_r+0x17c>
 80097ac:	b1b0      	cbz	r0, 80097dc <_svfiprintf_r+0x114>
 80097ae:	9207      	str	r2, [sp, #28]
 80097b0:	e014      	b.n	80097dc <_svfiprintf_r+0x114>
 80097b2:	eba0 0308 	sub.w	r3, r0, r8
 80097b6:	fa09 f303 	lsl.w	r3, r9, r3
 80097ba:	4313      	orrs	r3, r2
 80097bc:	9304      	str	r3, [sp, #16]
 80097be:	46a2      	mov	sl, r4
 80097c0:	e7d2      	b.n	8009768 <_svfiprintf_r+0xa0>
 80097c2:	9b03      	ldr	r3, [sp, #12]
 80097c4:	1d19      	adds	r1, r3, #4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	9103      	str	r1, [sp, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	bfbb      	ittet	lt
 80097ce:	425b      	neglt	r3, r3
 80097d0:	f042 0202 	orrlt.w	r2, r2, #2
 80097d4:	9307      	strge	r3, [sp, #28]
 80097d6:	9307      	strlt	r3, [sp, #28]
 80097d8:	bfb8      	it	lt
 80097da:	9204      	strlt	r2, [sp, #16]
 80097dc:	7823      	ldrb	r3, [r4, #0]
 80097de:	2b2e      	cmp	r3, #46	@ 0x2e
 80097e0:	d10a      	bne.n	80097f8 <_svfiprintf_r+0x130>
 80097e2:	7863      	ldrb	r3, [r4, #1]
 80097e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80097e6:	d132      	bne.n	800984e <_svfiprintf_r+0x186>
 80097e8:	9b03      	ldr	r3, [sp, #12]
 80097ea:	1d1a      	adds	r2, r3, #4
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	9203      	str	r2, [sp, #12]
 80097f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097f4:	3402      	adds	r4, #2
 80097f6:	9305      	str	r3, [sp, #20]
 80097f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098bc <_svfiprintf_r+0x1f4>
 80097fc:	7821      	ldrb	r1, [r4, #0]
 80097fe:	2203      	movs	r2, #3
 8009800:	4650      	mov	r0, sl
 8009802:	f7f6 fcd5 	bl	80001b0 <memchr>
 8009806:	b138      	cbz	r0, 8009818 <_svfiprintf_r+0x150>
 8009808:	9b04      	ldr	r3, [sp, #16]
 800980a:	eba0 000a 	sub.w	r0, r0, sl
 800980e:	2240      	movs	r2, #64	@ 0x40
 8009810:	4082      	lsls	r2, r0
 8009812:	4313      	orrs	r3, r2
 8009814:	3401      	adds	r4, #1
 8009816:	9304      	str	r3, [sp, #16]
 8009818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981c:	4824      	ldr	r0, [pc, #144]	@ (80098b0 <_svfiprintf_r+0x1e8>)
 800981e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009822:	2206      	movs	r2, #6
 8009824:	f7f6 fcc4 	bl	80001b0 <memchr>
 8009828:	2800      	cmp	r0, #0
 800982a:	d036      	beq.n	800989a <_svfiprintf_r+0x1d2>
 800982c:	4b21      	ldr	r3, [pc, #132]	@ (80098b4 <_svfiprintf_r+0x1ec>)
 800982e:	bb1b      	cbnz	r3, 8009878 <_svfiprintf_r+0x1b0>
 8009830:	9b03      	ldr	r3, [sp, #12]
 8009832:	3307      	adds	r3, #7
 8009834:	f023 0307 	bic.w	r3, r3, #7
 8009838:	3308      	adds	r3, #8
 800983a:	9303      	str	r3, [sp, #12]
 800983c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800983e:	4433      	add	r3, r6
 8009840:	9309      	str	r3, [sp, #36]	@ 0x24
 8009842:	e76a      	b.n	800971a <_svfiprintf_r+0x52>
 8009844:	fb0c 3202 	mla	r2, ip, r2, r3
 8009848:	460c      	mov	r4, r1
 800984a:	2001      	movs	r0, #1
 800984c:	e7a8      	b.n	80097a0 <_svfiprintf_r+0xd8>
 800984e:	2300      	movs	r3, #0
 8009850:	3401      	adds	r4, #1
 8009852:	9305      	str	r3, [sp, #20]
 8009854:	4619      	mov	r1, r3
 8009856:	f04f 0c0a 	mov.w	ip, #10
 800985a:	4620      	mov	r0, r4
 800985c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009860:	3a30      	subs	r2, #48	@ 0x30
 8009862:	2a09      	cmp	r2, #9
 8009864:	d903      	bls.n	800986e <_svfiprintf_r+0x1a6>
 8009866:	2b00      	cmp	r3, #0
 8009868:	d0c6      	beq.n	80097f8 <_svfiprintf_r+0x130>
 800986a:	9105      	str	r1, [sp, #20]
 800986c:	e7c4      	b.n	80097f8 <_svfiprintf_r+0x130>
 800986e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009872:	4604      	mov	r4, r0
 8009874:	2301      	movs	r3, #1
 8009876:	e7f0      	b.n	800985a <_svfiprintf_r+0x192>
 8009878:	ab03      	add	r3, sp, #12
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	462a      	mov	r2, r5
 800987e:	4b0e      	ldr	r3, [pc, #56]	@ (80098b8 <_svfiprintf_r+0x1f0>)
 8009880:	a904      	add	r1, sp, #16
 8009882:	4638      	mov	r0, r7
 8009884:	f3af 8000 	nop.w
 8009888:	1c42      	adds	r2, r0, #1
 800988a:	4606      	mov	r6, r0
 800988c:	d1d6      	bne.n	800983c <_svfiprintf_r+0x174>
 800988e:	89ab      	ldrh	r3, [r5, #12]
 8009890:	065b      	lsls	r3, r3, #25
 8009892:	f53f af2d 	bmi.w	80096f0 <_svfiprintf_r+0x28>
 8009896:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009898:	e72c      	b.n	80096f4 <_svfiprintf_r+0x2c>
 800989a:	ab03      	add	r3, sp, #12
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	462a      	mov	r2, r5
 80098a0:	4b05      	ldr	r3, [pc, #20]	@ (80098b8 <_svfiprintf_r+0x1f0>)
 80098a2:	a904      	add	r1, sp, #16
 80098a4:	4638      	mov	r0, r7
 80098a6:	f000 f879 	bl	800999c <_printf_i>
 80098aa:	e7ed      	b.n	8009888 <_svfiprintf_r+0x1c0>
 80098ac:	0800a284 	.word	0x0800a284
 80098b0:	0800a28e 	.word	0x0800a28e
 80098b4:	00000000 	.word	0x00000000
 80098b8:	08009609 	.word	0x08009609
 80098bc:	0800a28a 	.word	0x0800a28a

080098c0 <_printf_common>:
 80098c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c4:	4616      	mov	r6, r2
 80098c6:	4698      	mov	r8, r3
 80098c8:	688a      	ldr	r2, [r1, #8]
 80098ca:	690b      	ldr	r3, [r1, #16]
 80098cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098d0:	4293      	cmp	r3, r2
 80098d2:	bfb8      	it	lt
 80098d4:	4613      	movlt	r3, r2
 80098d6:	6033      	str	r3, [r6, #0]
 80098d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098dc:	4607      	mov	r7, r0
 80098de:	460c      	mov	r4, r1
 80098e0:	b10a      	cbz	r2, 80098e6 <_printf_common+0x26>
 80098e2:	3301      	adds	r3, #1
 80098e4:	6033      	str	r3, [r6, #0]
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	0699      	lsls	r1, r3, #26
 80098ea:	bf42      	ittt	mi
 80098ec:	6833      	ldrmi	r3, [r6, #0]
 80098ee:	3302      	addmi	r3, #2
 80098f0:	6033      	strmi	r3, [r6, #0]
 80098f2:	6825      	ldr	r5, [r4, #0]
 80098f4:	f015 0506 	ands.w	r5, r5, #6
 80098f8:	d106      	bne.n	8009908 <_printf_common+0x48>
 80098fa:	f104 0a19 	add.w	sl, r4, #25
 80098fe:	68e3      	ldr	r3, [r4, #12]
 8009900:	6832      	ldr	r2, [r6, #0]
 8009902:	1a9b      	subs	r3, r3, r2
 8009904:	42ab      	cmp	r3, r5
 8009906:	dc26      	bgt.n	8009956 <_printf_common+0x96>
 8009908:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800990c:	6822      	ldr	r2, [r4, #0]
 800990e:	3b00      	subs	r3, #0
 8009910:	bf18      	it	ne
 8009912:	2301      	movne	r3, #1
 8009914:	0692      	lsls	r2, r2, #26
 8009916:	d42b      	bmi.n	8009970 <_printf_common+0xb0>
 8009918:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800991c:	4641      	mov	r1, r8
 800991e:	4638      	mov	r0, r7
 8009920:	47c8      	blx	r9
 8009922:	3001      	adds	r0, #1
 8009924:	d01e      	beq.n	8009964 <_printf_common+0xa4>
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	6922      	ldr	r2, [r4, #16]
 800992a:	f003 0306 	and.w	r3, r3, #6
 800992e:	2b04      	cmp	r3, #4
 8009930:	bf02      	ittt	eq
 8009932:	68e5      	ldreq	r5, [r4, #12]
 8009934:	6833      	ldreq	r3, [r6, #0]
 8009936:	1aed      	subeq	r5, r5, r3
 8009938:	68a3      	ldr	r3, [r4, #8]
 800993a:	bf0c      	ite	eq
 800993c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009940:	2500      	movne	r5, #0
 8009942:	4293      	cmp	r3, r2
 8009944:	bfc4      	itt	gt
 8009946:	1a9b      	subgt	r3, r3, r2
 8009948:	18ed      	addgt	r5, r5, r3
 800994a:	2600      	movs	r6, #0
 800994c:	341a      	adds	r4, #26
 800994e:	42b5      	cmp	r5, r6
 8009950:	d11a      	bne.n	8009988 <_printf_common+0xc8>
 8009952:	2000      	movs	r0, #0
 8009954:	e008      	b.n	8009968 <_printf_common+0xa8>
 8009956:	2301      	movs	r3, #1
 8009958:	4652      	mov	r2, sl
 800995a:	4641      	mov	r1, r8
 800995c:	4638      	mov	r0, r7
 800995e:	47c8      	blx	r9
 8009960:	3001      	adds	r0, #1
 8009962:	d103      	bne.n	800996c <_printf_common+0xac>
 8009964:	f04f 30ff 	mov.w	r0, #4294967295
 8009968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800996c:	3501      	adds	r5, #1
 800996e:	e7c6      	b.n	80098fe <_printf_common+0x3e>
 8009970:	18e1      	adds	r1, r4, r3
 8009972:	1c5a      	adds	r2, r3, #1
 8009974:	2030      	movs	r0, #48	@ 0x30
 8009976:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800997a:	4422      	add	r2, r4
 800997c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009980:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009984:	3302      	adds	r3, #2
 8009986:	e7c7      	b.n	8009918 <_printf_common+0x58>
 8009988:	2301      	movs	r3, #1
 800998a:	4622      	mov	r2, r4
 800998c:	4641      	mov	r1, r8
 800998e:	4638      	mov	r0, r7
 8009990:	47c8      	blx	r9
 8009992:	3001      	adds	r0, #1
 8009994:	d0e6      	beq.n	8009964 <_printf_common+0xa4>
 8009996:	3601      	adds	r6, #1
 8009998:	e7d9      	b.n	800994e <_printf_common+0x8e>
	...

0800999c <_printf_i>:
 800999c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099a0:	7e0f      	ldrb	r7, [r1, #24]
 80099a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099a4:	2f78      	cmp	r7, #120	@ 0x78
 80099a6:	4691      	mov	r9, r2
 80099a8:	4680      	mov	r8, r0
 80099aa:	460c      	mov	r4, r1
 80099ac:	469a      	mov	sl, r3
 80099ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80099b2:	d807      	bhi.n	80099c4 <_printf_i+0x28>
 80099b4:	2f62      	cmp	r7, #98	@ 0x62
 80099b6:	d80a      	bhi.n	80099ce <_printf_i+0x32>
 80099b8:	2f00      	cmp	r7, #0
 80099ba:	f000 80d2 	beq.w	8009b62 <_printf_i+0x1c6>
 80099be:	2f58      	cmp	r7, #88	@ 0x58
 80099c0:	f000 80b7 	beq.w	8009b32 <_printf_i+0x196>
 80099c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80099cc:	e03a      	b.n	8009a44 <_printf_i+0xa8>
 80099ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80099d2:	2b15      	cmp	r3, #21
 80099d4:	d8f6      	bhi.n	80099c4 <_printf_i+0x28>
 80099d6:	a101      	add	r1, pc, #4	@ (adr r1, 80099dc <_printf_i+0x40>)
 80099d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099dc:	08009a35 	.word	0x08009a35
 80099e0:	08009a49 	.word	0x08009a49
 80099e4:	080099c5 	.word	0x080099c5
 80099e8:	080099c5 	.word	0x080099c5
 80099ec:	080099c5 	.word	0x080099c5
 80099f0:	080099c5 	.word	0x080099c5
 80099f4:	08009a49 	.word	0x08009a49
 80099f8:	080099c5 	.word	0x080099c5
 80099fc:	080099c5 	.word	0x080099c5
 8009a00:	080099c5 	.word	0x080099c5
 8009a04:	080099c5 	.word	0x080099c5
 8009a08:	08009b49 	.word	0x08009b49
 8009a0c:	08009a73 	.word	0x08009a73
 8009a10:	08009aff 	.word	0x08009aff
 8009a14:	080099c5 	.word	0x080099c5
 8009a18:	080099c5 	.word	0x080099c5
 8009a1c:	08009b6b 	.word	0x08009b6b
 8009a20:	080099c5 	.word	0x080099c5
 8009a24:	08009a73 	.word	0x08009a73
 8009a28:	080099c5 	.word	0x080099c5
 8009a2c:	080099c5 	.word	0x080099c5
 8009a30:	08009b07 	.word	0x08009b07
 8009a34:	6833      	ldr	r3, [r6, #0]
 8009a36:	1d1a      	adds	r2, r3, #4
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6032      	str	r2, [r6, #0]
 8009a3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a44:	2301      	movs	r3, #1
 8009a46:	e09d      	b.n	8009b84 <_printf_i+0x1e8>
 8009a48:	6833      	ldr	r3, [r6, #0]
 8009a4a:	6820      	ldr	r0, [r4, #0]
 8009a4c:	1d19      	adds	r1, r3, #4
 8009a4e:	6031      	str	r1, [r6, #0]
 8009a50:	0606      	lsls	r6, r0, #24
 8009a52:	d501      	bpl.n	8009a58 <_printf_i+0xbc>
 8009a54:	681d      	ldr	r5, [r3, #0]
 8009a56:	e003      	b.n	8009a60 <_printf_i+0xc4>
 8009a58:	0645      	lsls	r5, r0, #25
 8009a5a:	d5fb      	bpl.n	8009a54 <_printf_i+0xb8>
 8009a5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a60:	2d00      	cmp	r5, #0
 8009a62:	da03      	bge.n	8009a6c <_printf_i+0xd0>
 8009a64:	232d      	movs	r3, #45	@ 0x2d
 8009a66:	426d      	negs	r5, r5
 8009a68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a6c:	4859      	ldr	r0, [pc, #356]	@ (8009bd4 <_printf_i+0x238>)
 8009a6e:	230a      	movs	r3, #10
 8009a70:	e010      	b.n	8009a94 <_printf_i+0xf8>
 8009a72:	6821      	ldr	r1, [r4, #0]
 8009a74:	6833      	ldr	r3, [r6, #0]
 8009a76:	0608      	lsls	r0, r1, #24
 8009a78:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a7c:	d402      	bmi.n	8009a84 <_printf_i+0xe8>
 8009a7e:	0649      	lsls	r1, r1, #25
 8009a80:	bf48      	it	mi
 8009a82:	b2ad      	uxthmi	r5, r5
 8009a84:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a86:	4853      	ldr	r0, [pc, #332]	@ (8009bd4 <_printf_i+0x238>)
 8009a88:	6033      	str	r3, [r6, #0]
 8009a8a:	d159      	bne.n	8009b40 <_printf_i+0x1a4>
 8009a8c:	2308      	movs	r3, #8
 8009a8e:	2100      	movs	r1, #0
 8009a90:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a94:	6866      	ldr	r6, [r4, #4]
 8009a96:	60a6      	str	r6, [r4, #8]
 8009a98:	2e00      	cmp	r6, #0
 8009a9a:	db05      	blt.n	8009aa8 <_printf_i+0x10c>
 8009a9c:	6821      	ldr	r1, [r4, #0]
 8009a9e:	432e      	orrs	r6, r5
 8009aa0:	f021 0104 	bic.w	r1, r1, #4
 8009aa4:	6021      	str	r1, [r4, #0]
 8009aa6:	d04d      	beq.n	8009b44 <_printf_i+0x1a8>
 8009aa8:	4616      	mov	r6, r2
 8009aaa:	fbb5 f1f3 	udiv	r1, r5, r3
 8009aae:	fb03 5711 	mls	r7, r3, r1, r5
 8009ab2:	5dc7      	ldrb	r7, [r0, r7]
 8009ab4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ab8:	462f      	mov	r7, r5
 8009aba:	42bb      	cmp	r3, r7
 8009abc:	460d      	mov	r5, r1
 8009abe:	d9f4      	bls.n	8009aaa <_printf_i+0x10e>
 8009ac0:	2b08      	cmp	r3, #8
 8009ac2:	d10b      	bne.n	8009adc <_printf_i+0x140>
 8009ac4:	6823      	ldr	r3, [r4, #0]
 8009ac6:	07df      	lsls	r7, r3, #31
 8009ac8:	d508      	bpl.n	8009adc <_printf_i+0x140>
 8009aca:	6923      	ldr	r3, [r4, #16]
 8009acc:	6861      	ldr	r1, [r4, #4]
 8009ace:	4299      	cmp	r1, r3
 8009ad0:	bfde      	ittt	le
 8009ad2:	2330      	movle	r3, #48	@ 0x30
 8009ad4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ad8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009adc:	1b92      	subs	r2, r2, r6
 8009ade:	6122      	str	r2, [r4, #16]
 8009ae0:	f8cd a000 	str.w	sl, [sp]
 8009ae4:	464b      	mov	r3, r9
 8009ae6:	aa03      	add	r2, sp, #12
 8009ae8:	4621      	mov	r1, r4
 8009aea:	4640      	mov	r0, r8
 8009aec:	f7ff fee8 	bl	80098c0 <_printf_common>
 8009af0:	3001      	adds	r0, #1
 8009af2:	d14c      	bne.n	8009b8e <_printf_i+0x1f2>
 8009af4:	f04f 30ff 	mov.w	r0, #4294967295
 8009af8:	b004      	add	sp, #16
 8009afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	f043 0320 	orr.w	r3, r3, #32
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	4834      	ldr	r0, [pc, #208]	@ (8009bd8 <_printf_i+0x23c>)
 8009b08:	2778      	movs	r7, #120	@ 0x78
 8009b0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	6831      	ldr	r1, [r6, #0]
 8009b12:	061f      	lsls	r7, r3, #24
 8009b14:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b18:	d402      	bmi.n	8009b20 <_printf_i+0x184>
 8009b1a:	065f      	lsls	r7, r3, #25
 8009b1c:	bf48      	it	mi
 8009b1e:	b2ad      	uxthmi	r5, r5
 8009b20:	6031      	str	r1, [r6, #0]
 8009b22:	07d9      	lsls	r1, r3, #31
 8009b24:	bf44      	itt	mi
 8009b26:	f043 0320 	orrmi.w	r3, r3, #32
 8009b2a:	6023      	strmi	r3, [r4, #0]
 8009b2c:	b11d      	cbz	r5, 8009b36 <_printf_i+0x19a>
 8009b2e:	2310      	movs	r3, #16
 8009b30:	e7ad      	b.n	8009a8e <_printf_i+0xf2>
 8009b32:	4828      	ldr	r0, [pc, #160]	@ (8009bd4 <_printf_i+0x238>)
 8009b34:	e7e9      	b.n	8009b0a <_printf_i+0x16e>
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	f023 0320 	bic.w	r3, r3, #32
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	e7f6      	b.n	8009b2e <_printf_i+0x192>
 8009b40:	230a      	movs	r3, #10
 8009b42:	e7a4      	b.n	8009a8e <_printf_i+0xf2>
 8009b44:	4616      	mov	r6, r2
 8009b46:	e7bb      	b.n	8009ac0 <_printf_i+0x124>
 8009b48:	6833      	ldr	r3, [r6, #0]
 8009b4a:	6825      	ldr	r5, [r4, #0]
 8009b4c:	6961      	ldr	r1, [r4, #20]
 8009b4e:	1d18      	adds	r0, r3, #4
 8009b50:	6030      	str	r0, [r6, #0]
 8009b52:	062e      	lsls	r6, r5, #24
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	d501      	bpl.n	8009b5c <_printf_i+0x1c0>
 8009b58:	6019      	str	r1, [r3, #0]
 8009b5a:	e002      	b.n	8009b62 <_printf_i+0x1c6>
 8009b5c:	0668      	lsls	r0, r5, #25
 8009b5e:	d5fb      	bpl.n	8009b58 <_printf_i+0x1bc>
 8009b60:	8019      	strh	r1, [r3, #0]
 8009b62:	2300      	movs	r3, #0
 8009b64:	6123      	str	r3, [r4, #16]
 8009b66:	4616      	mov	r6, r2
 8009b68:	e7ba      	b.n	8009ae0 <_printf_i+0x144>
 8009b6a:	6833      	ldr	r3, [r6, #0]
 8009b6c:	1d1a      	adds	r2, r3, #4
 8009b6e:	6032      	str	r2, [r6, #0]
 8009b70:	681e      	ldr	r6, [r3, #0]
 8009b72:	6862      	ldr	r2, [r4, #4]
 8009b74:	2100      	movs	r1, #0
 8009b76:	4630      	mov	r0, r6
 8009b78:	f7f6 fb1a 	bl	80001b0 <memchr>
 8009b7c:	b108      	cbz	r0, 8009b82 <_printf_i+0x1e6>
 8009b7e:	1b80      	subs	r0, r0, r6
 8009b80:	6060      	str	r0, [r4, #4]
 8009b82:	6863      	ldr	r3, [r4, #4]
 8009b84:	6123      	str	r3, [r4, #16]
 8009b86:	2300      	movs	r3, #0
 8009b88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b8c:	e7a8      	b.n	8009ae0 <_printf_i+0x144>
 8009b8e:	6923      	ldr	r3, [r4, #16]
 8009b90:	4632      	mov	r2, r6
 8009b92:	4649      	mov	r1, r9
 8009b94:	4640      	mov	r0, r8
 8009b96:	47d0      	blx	sl
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d0ab      	beq.n	8009af4 <_printf_i+0x158>
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	079b      	lsls	r3, r3, #30
 8009ba0:	d413      	bmi.n	8009bca <_printf_i+0x22e>
 8009ba2:	68e0      	ldr	r0, [r4, #12]
 8009ba4:	9b03      	ldr	r3, [sp, #12]
 8009ba6:	4298      	cmp	r0, r3
 8009ba8:	bfb8      	it	lt
 8009baa:	4618      	movlt	r0, r3
 8009bac:	e7a4      	b.n	8009af8 <_printf_i+0x15c>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	4632      	mov	r2, r6
 8009bb2:	4649      	mov	r1, r9
 8009bb4:	4640      	mov	r0, r8
 8009bb6:	47d0      	blx	sl
 8009bb8:	3001      	adds	r0, #1
 8009bba:	d09b      	beq.n	8009af4 <_printf_i+0x158>
 8009bbc:	3501      	adds	r5, #1
 8009bbe:	68e3      	ldr	r3, [r4, #12]
 8009bc0:	9903      	ldr	r1, [sp, #12]
 8009bc2:	1a5b      	subs	r3, r3, r1
 8009bc4:	42ab      	cmp	r3, r5
 8009bc6:	dcf2      	bgt.n	8009bae <_printf_i+0x212>
 8009bc8:	e7eb      	b.n	8009ba2 <_printf_i+0x206>
 8009bca:	2500      	movs	r5, #0
 8009bcc:	f104 0619 	add.w	r6, r4, #25
 8009bd0:	e7f5      	b.n	8009bbe <_printf_i+0x222>
 8009bd2:	bf00      	nop
 8009bd4:	0800a295 	.word	0x0800a295
 8009bd8:	0800a2a6 	.word	0x0800a2a6

08009bdc <memmove>:
 8009bdc:	4288      	cmp	r0, r1
 8009bde:	b510      	push	{r4, lr}
 8009be0:	eb01 0402 	add.w	r4, r1, r2
 8009be4:	d902      	bls.n	8009bec <memmove+0x10>
 8009be6:	4284      	cmp	r4, r0
 8009be8:	4623      	mov	r3, r4
 8009bea:	d807      	bhi.n	8009bfc <memmove+0x20>
 8009bec:	1e43      	subs	r3, r0, #1
 8009bee:	42a1      	cmp	r1, r4
 8009bf0:	d007      	beq.n	8009c02 <memmove+0x26>
 8009bf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bfa:	e7f8      	b.n	8009bee <memmove+0x12>
 8009bfc:	4402      	add	r2, r0
 8009bfe:	4282      	cmp	r2, r0
 8009c00:	d100      	bne.n	8009c04 <memmove+0x28>
 8009c02:	bd10      	pop	{r4, pc}
 8009c04:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8009c08:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8009c0c:	e7f7      	b.n	8009bfe <memmove+0x22>
	...

08009c10 <_sbrk_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4d06      	ldr	r5, [pc, #24]	@ (8009c2c <_sbrk_r+0x1c>)
 8009c14:	2300      	movs	r3, #0
 8009c16:	4604      	mov	r4, r0
 8009c18:	4608      	mov	r0, r1
 8009c1a:	602b      	str	r3, [r5, #0]
 8009c1c:	f7fc fc5e 	bl	80064dc <_sbrk>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d102      	bne.n	8009c2a <_sbrk_r+0x1a>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	b103      	cbz	r3, 8009c2a <_sbrk_r+0x1a>
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}
 8009c2c:	20006544 	.word	0x20006544

08009c30 <_realloc_r>:
 8009c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c34:	4607      	mov	r7, r0
 8009c36:	4614      	mov	r4, r2
 8009c38:	460d      	mov	r5, r1
 8009c3a:	b921      	cbnz	r1, 8009c46 <_realloc_r+0x16>
 8009c3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c40:	4611      	mov	r1, r2
 8009c42:	f7ff bc55 	b.w	80094f0 <_malloc_r>
 8009c46:	b92a      	cbnz	r2, 8009c54 <_realloc_r+0x24>
 8009c48:	f7ff fbe6 	bl	8009418 <_free_r>
 8009c4c:	4625      	mov	r5, r4
 8009c4e:	4628      	mov	r0, r5
 8009c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c54:	f000 f81a 	bl	8009c8c <_malloc_usable_size_r>
 8009c58:	4284      	cmp	r4, r0
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	d802      	bhi.n	8009c64 <_realloc_r+0x34>
 8009c5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c62:	d8f4      	bhi.n	8009c4e <_realloc_r+0x1e>
 8009c64:	4621      	mov	r1, r4
 8009c66:	4638      	mov	r0, r7
 8009c68:	f7ff fc42 	bl	80094f0 <_malloc_r>
 8009c6c:	4680      	mov	r8, r0
 8009c6e:	b908      	cbnz	r0, 8009c74 <_realloc_r+0x44>
 8009c70:	4645      	mov	r5, r8
 8009c72:	e7ec      	b.n	8009c4e <_realloc_r+0x1e>
 8009c74:	42b4      	cmp	r4, r6
 8009c76:	4622      	mov	r2, r4
 8009c78:	4629      	mov	r1, r5
 8009c7a:	bf28      	it	cs
 8009c7c:	4632      	movcs	r2, r6
 8009c7e:	f7ff fbbd 	bl	80093fc <memcpy>
 8009c82:	4629      	mov	r1, r5
 8009c84:	4638      	mov	r0, r7
 8009c86:	f7ff fbc7 	bl	8009418 <_free_r>
 8009c8a:	e7f1      	b.n	8009c70 <_realloc_r+0x40>

08009c8c <_malloc_usable_size_r>:
 8009c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c90:	1f18      	subs	r0, r3, #4
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	bfbc      	itt	lt
 8009c96:	580b      	ldrlt	r3, [r1, r0]
 8009c98:	18c0      	addlt	r0, r0, r3
 8009c9a:	4770      	bx	lr

08009c9c <__udivmoddi4>:
 8009c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca0:	9d08      	ldr	r5, [sp, #32]
 8009ca2:	460f      	mov	r7, r1
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	468c      	mov	ip, r1
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d148      	bne.n	8009d3e <__udivmoddi4+0xa2>
 8009cac:	428a      	cmp	r2, r1
 8009cae:	4616      	mov	r6, r2
 8009cb0:	d961      	bls.n	8009d76 <__udivmoddi4+0xda>
 8009cb2:	fab2 f382 	clz	r3, r2
 8009cb6:	b14b      	cbz	r3, 8009ccc <__udivmoddi4+0x30>
 8009cb8:	f1c3 0220 	rsb	r2, r3, #32
 8009cbc:	fa01 fc03 	lsl.w	ip, r1, r3
 8009cc0:	fa20 f202 	lsr.w	r2, r0, r2
 8009cc4:	409e      	lsls	r6, r3
 8009cc6:	ea42 0c0c 	orr.w	ip, r2, ip
 8009cca:	409c      	lsls	r4, r3
 8009ccc:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8009cd0:	b2b7      	uxth	r7, r6
 8009cd2:	fbbc f1fe 	udiv	r1, ip, lr
 8009cd6:	0c22      	lsrs	r2, r4, #16
 8009cd8:	fb0e cc11 	mls	ip, lr, r1, ip
 8009cdc:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8009ce0:	fb01 f007 	mul.w	r0, r1, r7
 8009ce4:	4290      	cmp	r0, r2
 8009ce6:	d909      	bls.n	8009cfc <__udivmoddi4+0x60>
 8009ce8:	18b2      	adds	r2, r6, r2
 8009cea:	f101 3cff 	add.w	ip, r1, #4294967295
 8009cee:	f080 80ee 	bcs.w	8009ece <__udivmoddi4+0x232>
 8009cf2:	4290      	cmp	r0, r2
 8009cf4:	f240 80eb 	bls.w	8009ece <__udivmoddi4+0x232>
 8009cf8:	3902      	subs	r1, #2
 8009cfa:	4432      	add	r2, r6
 8009cfc:	1a12      	subs	r2, r2, r0
 8009cfe:	b2a4      	uxth	r4, r4
 8009d00:	fbb2 f0fe 	udiv	r0, r2, lr
 8009d04:	fb0e 2210 	mls	r2, lr, r0, r2
 8009d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009d0c:	fb00 f707 	mul.w	r7, r0, r7
 8009d10:	42a7      	cmp	r7, r4
 8009d12:	d909      	bls.n	8009d28 <__udivmoddi4+0x8c>
 8009d14:	1934      	adds	r4, r6, r4
 8009d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8009d1a:	f080 80da 	bcs.w	8009ed2 <__udivmoddi4+0x236>
 8009d1e:	42a7      	cmp	r7, r4
 8009d20:	f240 80d7 	bls.w	8009ed2 <__udivmoddi4+0x236>
 8009d24:	4434      	add	r4, r6
 8009d26:	3802      	subs	r0, #2
 8009d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8009d2c:	1be4      	subs	r4, r4, r7
 8009d2e:	2100      	movs	r1, #0
 8009d30:	b11d      	cbz	r5, 8009d3a <__udivmoddi4+0x9e>
 8009d32:	40dc      	lsrs	r4, r3
 8009d34:	2300      	movs	r3, #0
 8009d36:	e9c5 4300 	strd	r4, r3, [r5]
 8009d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d3e:	428b      	cmp	r3, r1
 8009d40:	d906      	bls.n	8009d50 <__udivmoddi4+0xb4>
 8009d42:	b10d      	cbz	r5, 8009d48 <__udivmoddi4+0xac>
 8009d44:	e9c5 0100 	strd	r0, r1, [r5]
 8009d48:	2100      	movs	r1, #0
 8009d4a:	4608      	mov	r0, r1
 8009d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d50:	fab3 f183 	clz	r1, r3
 8009d54:	2900      	cmp	r1, #0
 8009d56:	d148      	bne.n	8009dea <__udivmoddi4+0x14e>
 8009d58:	42bb      	cmp	r3, r7
 8009d5a:	d302      	bcc.n	8009d62 <__udivmoddi4+0xc6>
 8009d5c:	4282      	cmp	r2, r0
 8009d5e:	f200 8107 	bhi.w	8009f70 <__udivmoddi4+0x2d4>
 8009d62:	1a84      	subs	r4, r0, r2
 8009d64:	eb67 0203 	sbc.w	r2, r7, r3
 8009d68:	2001      	movs	r0, #1
 8009d6a:	4694      	mov	ip, r2
 8009d6c:	2d00      	cmp	r5, #0
 8009d6e:	d0e4      	beq.n	8009d3a <__udivmoddi4+0x9e>
 8009d70:	e9c5 4c00 	strd	r4, ip, [r5]
 8009d74:	e7e1      	b.n	8009d3a <__udivmoddi4+0x9e>
 8009d76:	2a00      	cmp	r2, #0
 8009d78:	f000 8092 	beq.w	8009ea0 <__udivmoddi4+0x204>
 8009d7c:	fab2 f382 	clz	r3, r2
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f040 80a8 	bne.w	8009ed6 <__udivmoddi4+0x23a>
 8009d86:	1a8a      	subs	r2, r1, r2
 8009d88:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8009d8c:	fa1f fc86 	uxth.w	ip, r6
 8009d90:	2101      	movs	r1, #1
 8009d92:	0c20      	lsrs	r0, r4, #16
 8009d94:	fbb2 f7fe 	udiv	r7, r2, lr
 8009d98:	fb0e 2217 	mls	r2, lr, r7, r2
 8009d9c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8009da0:	fb0c f007 	mul.w	r0, ip, r7
 8009da4:	4290      	cmp	r0, r2
 8009da6:	d907      	bls.n	8009db8 <__udivmoddi4+0x11c>
 8009da8:	18b2      	adds	r2, r6, r2
 8009daa:	f107 38ff 	add.w	r8, r7, #4294967295
 8009dae:	d202      	bcs.n	8009db6 <__udivmoddi4+0x11a>
 8009db0:	4290      	cmp	r0, r2
 8009db2:	f200 80e2 	bhi.w	8009f7a <__udivmoddi4+0x2de>
 8009db6:	4647      	mov	r7, r8
 8009db8:	1a12      	subs	r2, r2, r0
 8009dba:	b2a4      	uxth	r4, r4
 8009dbc:	fbb2 f0fe 	udiv	r0, r2, lr
 8009dc0:	fb0e 2210 	mls	r2, lr, r0, r2
 8009dc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009dc8:	fb0c fc00 	mul.w	ip, ip, r0
 8009dcc:	45a4      	cmp	ip, r4
 8009dce:	d907      	bls.n	8009de0 <__udivmoddi4+0x144>
 8009dd0:	1934      	adds	r4, r6, r4
 8009dd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8009dd6:	d202      	bcs.n	8009dde <__udivmoddi4+0x142>
 8009dd8:	45a4      	cmp	ip, r4
 8009dda:	f200 80cb 	bhi.w	8009f74 <__udivmoddi4+0x2d8>
 8009dde:	4610      	mov	r0, r2
 8009de0:	eba4 040c 	sub.w	r4, r4, ip
 8009de4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8009de8:	e7a2      	b.n	8009d30 <__udivmoddi4+0x94>
 8009dea:	f1c1 0620 	rsb	r6, r1, #32
 8009dee:	408b      	lsls	r3, r1
 8009df0:	fa22 fc06 	lsr.w	ip, r2, r6
 8009df4:	ea4c 0c03 	orr.w	ip, ip, r3
 8009df8:	fa07 f401 	lsl.w	r4, r7, r1
 8009dfc:	fa20 f306 	lsr.w	r3, r0, r6
 8009e00:	40f7      	lsrs	r7, r6
 8009e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8009e06:	4323      	orrs	r3, r4
 8009e08:	fa00 f801 	lsl.w	r8, r0, r1
 8009e0c:	fa1f fe8c 	uxth.w	lr, ip
 8009e10:	fbb7 f0f9 	udiv	r0, r7, r9
 8009e14:	0c1c      	lsrs	r4, r3, #16
 8009e16:	fb09 7710 	mls	r7, r9, r0, r7
 8009e1a:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8009e1e:	fb00 f70e 	mul.w	r7, r0, lr
 8009e22:	42a7      	cmp	r7, r4
 8009e24:	fa02 f201 	lsl.w	r2, r2, r1
 8009e28:	d90a      	bls.n	8009e40 <__udivmoddi4+0x1a4>
 8009e2a:	eb1c 0404 	adds.w	r4, ip, r4
 8009e2e:	f100 3aff 	add.w	sl, r0, #4294967295
 8009e32:	f080 809b 	bcs.w	8009f6c <__udivmoddi4+0x2d0>
 8009e36:	42a7      	cmp	r7, r4
 8009e38:	f240 8098 	bls.w	8009f6c <__udivmoddi4+0x2d0>
 8009e3c:	3802      	subs	r0, #2
 8009e3e:	4464      	add	r4, ip
 8009e40:	1be4      	subs	r4, r4, r7
 8009e42:	b29f      	uxth	r7, r3
 8009e44:	fbb4 f3f9 	udiv	r3, r4, r9
 8009e48:	fb09 4413 	mls	r4, r9, r3, r4
 8009e4c:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8009e50:	fb03 fe0e 	mul.w	lr, r3, lr
 8009e54:	45a6      	cmp	lr, r4
 8009e56:	d909      	bls.n	8009e6c <__udivmoddi4+0x1d0>
 8009e58:	eb1c 0404 	adds.w	r4, ip, r4
 8009e5c:	f103 37ff 	add.w	r7, r3, #4294967295
 8009e60:	f080 8082 	bcs.w	8009f68 <__udivmoddi4+0x2cc>
 8009e64:	45a6      	cmp	lr, r4
 8009e66:	d97f      	bls.n	8009f68 <__udivmoddi4+0x2cc>
 8009e68:	3b02      	subs	r3, #2
 8009e6a:	4464      	add	r4, ip
 8009e6c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009e70:	eba4 040e 	sub.w	r4, r4, lr
 8009e74:	fba0 e702 	umull	lr, r7, r0, r2
 8009e78:	42bc      	cmp	r4, r7
 8009e7a:	4673      	mov	r3, lr
 8009e7c:	46b9      	mov	r9, r7
 8009e7e:	d363      	bcc.n	8009f48 <__udivmoddi4+0x2ac>
 8009e80:	d060      	beq.n	8009f44 <__udivmoddi4+0x2a8>
 8009e82:	b15d      	cbz	r5, 8009e9c <__udivmoddi4+0x200>
 8009e84:	ebb8 0203 	subs.w	r2, r8, r3
 8009e88:	eb64 0409 	sbc.w	r4, r4, r9
 8009e8c:	fa04 f606 	lsl.w	r6, r4, r6
 8009e90:	fa22 f301 	lsr.w	r3, r2, r1
 8009e94:	431e      	orrs	r6, r3
 8009e96:	40cc      	lsrs	r4, r1
 8009e98:	e9c5 6400 	strd	r6, r4, [r5]
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	e74c      	b.n	8009d3a <__udivmoddi4+0x9e>
 8009ea0:	0862      	lsrs	r2, r4, #1
 8009ea2:	0848      	lsrs	r0, r1, #1
 8009ea4:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8009ea8:	0c0b      	lsrs	r3, r1, #16
 8009eaa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009eae:	b28a      	uxth	r2, r1
 8009eb0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009eb4:	fbb3 f1f6 	udiv	r1, r3, r6
 8009eb8:	07e4      	lsls	r4, r4, #31
 8009eba:	46b4      	mov	ip, r6
 8009ebc:	4637      	mov	r7, r6
 8009ebe:	46b6      	mov	lr, r6
 8009ec0:	231f      	movs	r3, #31
 8009ec2:	fbb0 f0f6 	udiv	r0, r0, r6
 8009ec6:	1bd2      	subs	r2, r2, r7
 8009ec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ecc:	e761      	b.n	8009d92 <__udivmoddi4+0xf6>
 8009ece:	4661      	mov	r1, ip
 8009ed0:	e714      	b.n	8009cfc <__udivmoddi4+0x60>
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	e728      	b.n	8009d28 <__udivmoddi4+0x8c>
 8009ed6:	f1c3 0120 	rsb	r1, r3, #32
 8009eda:	fa20 f201 	lsr.w	r2, r0, r1
 8009ede:	409e      	lsls	r6, r3
 8009ee0:	fa27 f101 	lsr.w	r1, r7, r1
 8009ee4:	409f      	lsls	r7, r3
 8009ee6:	433a      	orrs	r2, r7
 8009ee8:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8009eec:	fa1f fc86 	uxth.w	ip, r6
 8009ef0:	fbb1 f7fe 	udiv	r7, r1, lr
 8009ef4:	fb0e 1017 	mls	r0, lr, r7, r1
 8009ef8:	0c11      	lsrs	r1, r2, #16
 8009efa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009efe:	fb07 f80c 	mul.w	r8, r7, ip
 8009f02:	4588      	cmp	r8, r1
 8009f04:	fa04 f403 	lsl.w	r4, r4, r3
 8009f08:	d93a      	bls.n	8009f80 <__udivmoddi4+0x2e4>
 8009f0a:	1871      	adds	r1, r6, r1
 8009f0c:	f107 30ff 	add.w	r0, r7, #4294967295
 8009f10:	d201      	bcs.n	8009f16 <__udivmoddi4+0x27a>
 8009f12:	4588      	cmp	r8, r1
 8009f14:	d81f      	bhi.n	8009f56 <__udivmoddi4+0x2ba>
 8009f16:	eba1 0108 	sub.w	r1, r1, r8
 8009f1a:	fbb1 f8fe 	udiv	r8, r1, lr
 8009f1e:	fb08 f70c 	mul.w	r7, r8, ip
 8009f22:	fb0e 1118 	mls	r1, lr, r8, r1
 8009f26:	b292      	uxth	r2, r2
 8009f28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009f2c:	42ba      	cmp	r2, r7
 8009f2e:	d22f      	bcs.n	8009f90 <__udivmoddi4+0x2f4>
 8009f30:	18b2      	adds	r2, r6, r2
 8009f32:	f108 31ff 	add.w	r1, r8, #4294967295
 8009f36:	d2c6      	bcs.n	8009ec6 <__udivmoddi4+0x22a>
 8009f38:	42ba      	cmp	r2, r7
 8009f3a:	d2c4      	bcs.n	8009ec6 <__udivmoddi4+0x22a>
 8009f3c:	f1a8 0102 	sub.w	r1, r8, #2
 8009f40:	4432      	add	r2, r6
 8009f42:	e7c0      	b.n	8009ec6 <__udivmoddi4+0x22a>
 8009f44:	45f0      	cmp	r8, lr
 8009f46:	d29c      	bcs.n	8009e82 <__udivmoddi4+0x1e6>
 8009f48:	ebbe 0302 	subs.w	r3, lr, r2
 8009f4c:	eb67 070c 	sbc.w	r7, r7, ip
 8009f50:	3801      	subs	r0, #1
 8009f52:	46b9      	mov	r9, r7
 8009f54:	e795      	b.n	8009e82 <__udivmoddi4+0x1e6>
 8009f56:	eba6 0808 	sub.w	r8, r6, r8
 8009f5a:	4441      	add	r1, r8
 8009f5c:	1eb8      	subs	r0, r7, #2
 8009f5e:	fbb1 f8fe 	udiv	r8, r1, lr
 8009f62:	fb08 f70c 	mul.w	r7, r8, ip
 8009f66:	e7dc      	b.n	8009f22 <__udivmoddi4+0x286>
 8009f68:	463b      	mov	r3, r7
 8009f6a:	e77f      	b.n	8009e6c <__udivmoddi4+0x1d0>
 8009f6c:	4650      	mov	r0, sl
 8009f6e:	e767      	b.n	8009e40 <__udivmoddi4+0x1a4>
 8009f70:	4608      	mov	r0, r1
 8009f72:	e6fb      	b.n	8009d6c <__udivmoddi4+0xd0>
 8009f74:	4434      	add	r4, r6
 8009f76:	3802      	subs	r0, #2
 8009f78:	e732      	b.n	8009de0 <__udivmoddi4+0x144>
 8009f7a:	3f02      	subs	r7, #2
 8009f7c:	4432      	add	r2, r6
 8009f7e:	e71b      	b.n	8009db8 <__udivmoddi4+0x11c>
 8009f80:	eba1 0108 	sub.w	r1, r1, r8
 8009f84:	4638      	mov	r0, r7
 8009f86:	fbb1 f8fe 	udiv	r8, r1, lr
 8009f8a:	fb08 f70c 	mul.w	r7, r8, ip
 8009f8e:	e7c8      	b.n	8009f22 <__udivmoddi4+0x286>
 8009f90:	4641      	mov	r1, r8
 8009f92:	e798      	b.n	8009ec6 <__udivmoddi4+0x22a>

08009f94 <_init>:
 8009f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f96:	bf00      	nop
 8009f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f9a:	bc08      	pop	{r3}
 8009f9c:	469e      	mov	lr, r3
 8009f9e:	4770      	bx	lr

08009fa0 <_fini>:
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	bf00      	nop
 8009fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa6:	bc08      	pop	{r3}
 8009fa8:	469e      	mov	lr, r3
 8009faa:	4770      	bx	lr
