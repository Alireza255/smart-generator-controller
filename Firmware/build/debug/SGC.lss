
build/debug/SGC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a34  0800b868  0800b868  0000c868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c29c  0800c29c  0000e194  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c29c  0800c29c  0000d29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2a4  0800c2a4  0000e194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2a4  0800c2a4  0000d2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c2a8  0800c2a8  0000d2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  0800c2ac  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000080f0  20000194  0800c440  0000e194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008284  0800c440  0000e284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e194  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000e1c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a621  00000000  00000000  0000e1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008d36  00000000  00000000  0004881e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001a913  00000000  00000000  00051554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002450  00000000  00000000  0006be68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001d2c  00000000  00000000  0006e2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002abdf  00000000  00000000  0006ffe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c7ed  00000000  00000000  0009abc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006378  00000000  00000000  000a73b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000001a1  00000000  00000000  000ad728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__aeabi_d2uiz>:
 80009ec:	004a      	lsls	r2, r1, #1
 80009ee:	d211      	bcs.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009f4:	d211      	bcs.n	8000a1a <__aeabi_d2uiz+0x2e>
 80009f6:	d50d      	bpl.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a00:	d40e      	bmi.n	8000a20 <__aeabi_d2uiz+0x34>
 8000a02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a1e:	d102      	bne.n	8000a26 <__aeabi_d2uiz+0x3a>
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	4770      	bx	lr
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	4770      	bx	lr

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b80c 	b.w	8000a5c <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f00a fd84 	bl	800b558 <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_idiv0>:
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__do_global_dtors_aux>:
 8000a60:	b510      	push	{r4, lr}
 8000a62:	4c05      	ldr	r4, [pc, #20]	@ (8000a78 <__do_global_dtors_aux+0x18>)
 8000a64:	7823      	ldrb	r3, [r4, #0]
 8000a66:	b933      	cbnz	r3, 8000a76 <__do_global_dtors_aux+0x16>
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <__do_global_dtors_aux+0x1c>)
 8000a6a:	b113      	cbz	r3, 8000a72 <__do_global_dtors_aux+0x12>
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <__do_global_dtors_aux+0x20>)
 8000a6e:	f3af 8000 	nop.w
 8000a72:	2301      	movs	r3, #1
 8000a74:	7023      	strb	r3, [r4, #0]
 8000a76:	bd10      	pop	{r4, pc}
 8000a78:	20000194 	.word	0x20000194
 8000a7c:	00000000 	.word	0x00000000
 8000a80:	0800b850 	.word	0x0800b850

08000a84 <frame_dummy>:
 8000a84:	b508      	push	{r3, lr}
 8000a86:	4b03      	ldr	r3, [pc, #12]	@ (8000a94 <frame_dummy+0x10>)
 8000a88:	b11b      	cbz	r3, 8000a92 <frame_dummy+0xe>
 8000a8a:	4903      	ldr	r1, [pc, #12]	@ (8000a98 <frame_dummy+0x14>)
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <frame_dummy+0x18>)
 8000a8e:	f3af 8000 	nop.w
 8000a92:	bd08      	pop	{r3, pc}
 8000a94:	00000000 	.word	0x00000000
 8000a98:	20000198 	.word	0x20000198
 8000a9c:	0800b850 	.word	0x0800b850

08000aa0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000aa0:	b510      	push	{r4, lr}
 8000aa2:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa4:	2400      	movs	r4, #0
 8000aa6:	9408      	str	r4, [sp, #32]
 8000aa8:	9409      	str	r4, [sp, #36]	@ 0x24
 8000aaa:	940a      	str	r4, [sp, #40]	@ 0x28
 8000aac:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000aae:	2220      	movs	r2, #32
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	4668      	mov	r0, sp
 8000ab4:	f009 ff9c 	bl	800a9f0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ab8:	4883      	ldr	r0, [pc, #524]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000aba:	4b84      	ldr	r3, [pc, #528]	@ (8000ccc <MX_ADC1_Init+0x22c>)
 8000abc:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000abe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac2:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac4:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aca:	7604      	strb	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000acc:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad0:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad2:	4a7f      	ldr	r2, [pc, #508]	@ (8000cd0 <MX_ADC1_Init+0x230>)
 8000ad4:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad6:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 13;
 8000ad8:	220d      	movs	r2, #13
 8000ada:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000adc:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae0:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae2:	f003 f9a1 	bl	8003e28 <HAL_ADC_Init>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	f040 80b8 	bne.w	8000c5c <MX_ADC1_Init+0x1bc>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 8000af0:	2201      	movs	r2, #1
 8000af2:	9209      	str	r2, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000af4:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af6:	a908      	add	r1, sp, #32
 8000af8:	4873      	ldr	r0, [pc, #460]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000afa:	f003 fabf 	bl	800407c <HAL_ADC_ConfigChannel>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	f040 80af 	bne.w	8000c62 <MX_ADC1_Init+0x1c2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	a908      	add	r1, sp, #32
 8000b0e:	486e      	ldr	r0, [pc, #440]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b10:	f003 fab4 	bl	800407c <HAL_ADC_ConfigChannel>
 8000b14:	2800      	cmp	r0, #0
 8000b16:	f040 80a7 	bne.w	8000c68 <MX_ADC1_Init+0x1c8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 3;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b22:	a908      	add	r1, sp, #32
 8000b24:	4868      	ldr	r0, [pc, #416]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b26:	f003 faa9 	bl	800407c <HAL_ADC_ConfigChannel>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	f040 809f 	bne.w	8000c6e <MX_ADC1_Init+0x1ce>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b30:	2303      	movs	r3, #3
 8000b32:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 4;
 8000b34:	2304      	movs	r3, #4
 8000b36:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b38:	a908      	add	r1, sp, #32
 8000b3a:	4863      	ldr	r0, [pc, #396]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b3c:	f003 fa9e 	bl	800407c <HAL_ADC_ConfigChannel>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	f040 8097 	bne.w	8000c74 <MX_ADC1_Init+0x1d4>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b46:	2304      	movs	r3, #4
 8000b48:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 5;
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4e:	a908      	add	r1, sp, #32
 8000b50:	485d      	ldr	r0, [pc, #372]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b52:	f003 fa93 	bl	800407c <HAL_ADC_ConfigChannel>
 8000b56:	2800      	cmp	r0, #0
 8000b58:	f040 808f 	bne.w	8000c7a <MX_ADC1_Init+0x1da>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b5c:	2305      	movs	r3, #5
 8000b5e:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 6;
 8000b60:	2306      	movs	r3, #6
 8000b62:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b64:	a908      	add	r1, sp, #32
 8000b66:	4858      	ldr	r0, [pc, #352]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b68:	f003 fa88 	bl	800407c <HAL_ADC_ConfigChannel>
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	f040 8087 	bne.w	8000c80 <MX_ADC1_Init+0x1e0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b72:	2306      	movs	r3, #6
 8000b74:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 7;
 8000b76:	2307      	movs	r3, #7
 8000b78:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7a:	a908      	add	r1, sp, #32
 8000b7c:	4852      	ldr	r0, [pc, #328]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b7e:	f003 fa7d 	bl	800407c <HAL_ADC_ConfigChannel>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	d17f      	bne.n	8000c86 <MX_ADC1_Init+0x1e6>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b86:	2307      	movs	r3, #7
 8000b88:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 8;
 8000b8a:	2308      	movs	r3, #8
 8000b8c:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8e:	a908      	add	r1, sp, #32
 8000b90:	484d      	ldr	r0, [pc, #308]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b92:	f003 fa73 	bl	800407c <HAL_ADC_ConfigChannel>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d178      	bne.n	8000c8c <MX_ADC1_Init+0x1ec>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b9a:	230e      	movs	r3, #14
 8000b9c:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 9;
 8000b9e:	2309      	movs	r3, #9
 8000ba0:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba2:	a908      	add	r1, sp, #32
 8000ba4:	4848      	ldr	r0, [pc, #288]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000ba6:	f003 fa69 	bl	800407c <HAL_ADC_ConfigChannel>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	d171      	bne.n	8000c92 <MX_ADC1_Init+0x1f2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bae:	230a      	movs	r3, #10
 8000bb0:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 10;
 8000bb2:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb4:	a908      	add	r1, sp, #32
 8000bb6:	4844      	ldr	r0, [pc, #272]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bb8:	f003 fa60 	bl	800407c <HAL_ADC_ConfigChannel>
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	d16b      	bne.n	8000c98 <MX_ADC1_Init+0x1f8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 11;
 8000bc4:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc6:	a908      	add	r1, sp, #32
 8000bc8:	483f      	ldr	r0, [pc, #252]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bca:	f003 fa57 	bl	800407c <HAL_ADC_ConfigChannel>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	d165      	bne.n	8000c9e <MX_ADC1_Init+0x1fe>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 12;
 8000bd6:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd8:	a908      	add	r1, sp, #32
 8000bda:	483b      	ldr	r0, [pc, #236]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bdc:	f003 fa4e 	bl	800407c <HAL_ADC_ConfigChannel>
 8000be0:	2800      	cmp	r0, #0
 8000be2:	d15f      	bne.n	8000ca4 <MX_ADC1_Init+0x204>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000be4:	230d      	movs	r3, #13
 8000be6:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 13;
 8000be8:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bea:	a908      	add	r1, sp, #32
 8000bec:	4836      	ldr	r0, [pc, #216]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bee:	f003 fa45 	bl	800407c <HAL_ADC_ConfigChannel>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d159      	bne.n	8000caa <MX_ADC1_Init+0x20a>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	9201      	str	r2, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8000bfe:	2204      	movs	r2, #4
 8000c00:	9204      	str	r2, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c02:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8000c04:	9307      	str	r3, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000c06:	4a33      	ldr	r2, [pc, #204]	@ (8000cd4 <MX_ADC1_Init+0x234>)
 8000c08:	9206      	str	r2, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000c0a:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000c0e:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 8000c12:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c14:	4669      	mov	r1, sp
 8000c16:	482c      	ldr	r0, [pc, #176]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c18:	f003 fafa 	bl	8004210 <HAL_ADCEx_InjectedConfigChannel>
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	d147      	bne.n	8000cb0 <MX_ADC1_Init+0x210>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c28:	4669      	mov	r1, sp
 8000c2a:	4827      	ldr	r0, [pc, #156]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c2c:	f003 faf0 	bl	8004210 <HAL_ADCEx_InjectedConfigChannel>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d140      	bne.n	8000cb6 <MX_ADC1_Init+0x216>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 3;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c3c:	4669      	mov	r1, sp
 8000c3e:	4822      	ldr	r0, [pc, #136]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c40:	f003 fae6 	bl	8004210 <HAL_ADCEx_InjectedConfigChannel>
 8000c44:	bbd0      	cbnz	r0, 8000cbc <MX_ADC1_Init+0x21c>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000c46:	2303      	movs	r3, #3
 8000c48:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 4;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c4e:	4669      	mov	r1, sp
 8000c50:	481d      	ldr	r0, [pc, #116]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c52:	f003 fadd 	bl	8004210 <HAL_ADCEx_InjectedConfigChannel>
 8000c56:	bba0      	cbnz	r0, 8000cc2 <MX_ADC1_Init+0x222>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c58:	b00c      	add	sp, #48	@ 0x30
 8000c5a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000c5c:	f001 ff44 	bl	8002ae8 <Error_Handler>
 8000c60:	e744      	b.n	8000aec <MX_ADC1_Init+0x4c>
    Error_Handler();
 8000c62:	f001 ff41 	bl	8002ae8 <Error_Handler>
 8000c66:	e74d      	b.n	8000b04 <MX_ADC1_Init+0x64>
    Error_Handler();
 8000c68:	f001 ff3e 	bl	8002ae8 <Error_Handler>
 8000c6c:	e755      	b.n	8000b1a <MX_ADC1_Init+0x7a>
    Error_Handler();
 8000c6e:	f001 ff3b 	bl	8002ae8 <Error_Handler>
 8000c72:	e75d      	b.n	8000b30 <MX_ADC1_Init+0x90>
    Error_Handler();
 8000c74:	f001 ff38 	bl	8002ae8 <Error_Handler>
 8000c78:	e765      	b.n	8000b46 <MX_ADC1_Init+0xa6>
    Error_Handler();
 8000c7a:	f001 ff35 	bl	8002ae8 <Error_Handler>
 8000c7e:	e76d      	b.n	8000b5c <MX_ADC1_Init+0xbc>
    Error_Handler();
 8000c80:	f001 ff32 	bl	8002ae8 <Error_Handler>
 8000c84:	e775      	b.n	8000b72 <MX_ADC1_Init+0xd2>
    Error_Handler();
 8000c86:	f001 ff2f 	bl	8002ae8 <Error_Handler>
 8000c8a:	e77c      	b.n	8000b86 <MX_ADC1_Init+0xe6>
    Error_Handler();
 8000c8c:	f001 ff2c 	bl	8002ae8 <Error_Handler>
 8000c90:	e783      	b.n	8000b9a <MX_ADC1_Init+0xfa>
    Error_Handler();
 8000c92:	f001 ff29 	bl	8002ae8 <Error_Handler>
 8000c96:	e78a      	b.n	8000bae <MX_ADC1_Init+0x10e>
    Error_Handler();
 8000c98:	f001 ff26 	bl	8002ae8 <Error_Handler>
 8000c9c:	e790      	b.n	8000bc0 <MX_ADC1_Init+0x120>
    Error_Handler();
 8000c9e:	f001 ff23 	bl	8002ae8 <Error_Handler>
 8000ca2:	e796      	b.n	8000bd2 <MX_ADC1_Init+0x132>
    Error_Handler();
 8000ca4:	f001 ff20 	bl	8002ae8 <Error_Handler>
 8000ca8:	e79c      	b.n	8000be4 <MX_ADC1_Init+0x144>
    Error_Handler();
 8000caa:	f001 ff1d 	bl	8002ae8 <Error_Handler>
 8000cae:	e7a2      	b.n	8000bf6 <MX_ADC1_Init+0x156>
    Error_Handler();
 8000cb0:	f001 ff1a 	bl	8002ae8 <Error_Handler>
 8000cb4:	e7b4      	b.n	8000c20 <MX_ADC1_Init+0x180>
    Error_Handler();
 8000cb6:	f001 ff17 	bl	8002ae8 <Error_Handler>
 8000cba:	e7bb      	b.n	8000c34 <MX_ADC1_Init+0x194>
    Error_Handler();
 8000cbc:	f001 ff14 	bl	8002ae8 <Error_Handler>
 8000cc0:	e7c1      	b.n	8000c46 <MX_ADC1_Init+0x1a6>
    Error_Handler();
 8000cc2:	f001 ff11 	bl	8002ae8 <Error_Handler>
}
 8000cc6:	e7c7      	b.n	8000c58 <MX_ADC1_Init+0x1b8>
 8000cc8:	20000210 	.word	0x20000210
 8000ccc:	40012000 	.word	0x40012000
 8000cd0:	0f000001 	.word	0x0f000001
 8000cd4:	000f0001 	.word	0x000f0001

08000cd8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cda:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	2300      	movs	r3, #0
 8000cde:	9303      	str	r3, [sp, #12]
 8000ce0:	9304      	str	r3, [sp, #16]
 8000ce2:	9305      	str	r3, [sp, #20]
 8000ce4:	9306      	str	r3, [sp, #24]
 8000ce6:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000ce8:	6802      	ldr	r2, [r0, #0]
 8000cea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cee:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d001      	beq.n	8000cfa <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cf6:	b009      	add	sp, #36	@ 0x24
 8000cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cfa:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cfc:	2500      	movs	r5, #0
 8000cfe:	9500      	str	r5, [sp, #0]
 8000d00:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d0a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000d0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d0e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000d12:	9200      	str	r2, [sp, #0]
 8000d14:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	9501      	str	r5, [sp, #4]
 8000d18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d1a:	f042 0204 	orr.w	r2, r2, #4
 8000d1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d22:	f002 0204 	and.w	r2, r2, #4
 8000d26:	9201      	str	r2, [sp, #4]
 8000d28:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	9502      	str	r5, [sp, #8]
 8000d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d2e:	f042 0201 	orr.w	r2, r2, #1
 8000d32:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD_INPUT1_PIN_Pin|AD_INPUT2_PIN_Pin|AD_INPUT3_PIN_Pin|AD_INPUT4_PIN_Pin
 8000d3e:	231f      	movs	r3, #31
 8000d40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d42:	2703      	movs	r7, #3
 8000d44:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	ae03      	add	r6, sp, #12
 8000d48:	4631      	mov	r1, r6
 8000d4a:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <HAL_ADC_MspInit+0xc4>)
 8000d4c:	f003 fddc 	bl	8004908 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ETB1_SENSE1_Pin|ETB1_SENSE2_Pin|ETB2_SENSE1_Pin|ETB2_SENSE2_Pin
 8000d50:	23ff      	movs	r3, #255	@ 0xff
 8000d52:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d54:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	4631      	mov	r1, r6
 8000d5a:	4811      	ldr	r0, [pc, #68]	@ (8000da0 <HAL_ADC_MspInit+0xc8>)
 8000d5c:	f003 fdd4 	bl	8004908 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000d60:	4810      	ldr	r0, [pc, #64]	@ (8000da4 <HAL_ADC_MspInit+0xcc>)
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <HAL_ADC_MspInit+0xd0>)
 8000d64:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d66:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d68:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6a:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d70:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d76:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d7c:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d7e:	61c5      	str	r5, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d84:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d86:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d88:	f003 fc36 	bl	80045f8 <HAL_DMA_Init>
 8000d8c:	b918      	cbnz	r0, 8000d96 <HAL_ADC_MspInit+0xbe>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d8e:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <HAL_ADC_MspInit+0xcc>)
 8000d90:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000d92:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000d94:	e7af      	b.n	8000cf6 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000d96:	f001 fea7 	bl	8002ae8 <Error_Handler>
 8000d9a:	e7f8      	b.n	8000d8e <HAL_ADC_MspInit+0xb6>
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	200001b0 	.word	0x200001b0
 8000da8:	40026410 	.word	0x40026410

08000dac <analog_inputs_start_conversion>:
 * 
 * This function triggers the ADC to begin converting the analog signals
 * to digital values.
 */
void analog_inputs_start_conversion()
{
 8000dac:	b508      	push	{r3, lr}
    if (hadc == NULL)
 8000dae:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <analog_inputs_start_conversion+0x14>)
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	b118      	cbz	r0, 8000dbc <analog_inputs_start_conversion+0x10>
    {
        return;
    }
    
    HAL_ADC_Start_DMA(hadc, (uint32_t*)&analog_data, ANALOG_INPUTS_MAX * ANALOG_INPUTS_NUMBER_OF_SAMPLES);
 8000db4:	2268      	movs	r2, #104	@ 0x68
 8000db6:	4903      	ldr	r1, [pc, #12]	@ (8000dc4 <analog_inputs_start_conversion+0x18>)
 8000db8:	f003 f862 	bl	8003e80 <HAL_ADC_Start_DMA>
}
 8000dbc:	bd08      	pop	{r3, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000328 	.word	0x20000328
 8000dc4:	20000258 	.word	0x20000258

08000dc8 <HAL_ADC_ConvCpltCallback>:
}
 8000dc8:	4770      	bx	lr
	...

08000dcc <analog_inputs_init>:
{
 8000dcc:	b508      	push	{r3, lr}
    if (adc_handle == NULL)
 8000dce:	b158      	cbz	r0, 8000de8 <analog_inputs_init+0x1c>
    hadc = adc_handle;
 8000dd0:	4a07      	ldr	r2, [pc, #28]	@ (8000df0 <analog_inputs_init+0x24>)
 8000dd2:	6010      	str	r0, [r2, #0]
    osTimerId_t timer_id = osTimerNew(
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <analog_inputs_init+0x28>)
 8000ddc:	f000 f8d8 	bl	8000f90 <osTimerNew>
    osTimerStart(timer_id, 1);
 8000de0:	2101      	movs	r1, #1
 8000de2:	f000 f929 	bl	8001038 <osTimerStart>
}
 8000de6:	bd08      	pop	{r3, pc}
        log_error("Analog input init failed! adc handle is null.");
 8000de8:	4803      	ldr	r0, [pc, #12]	@ (8000df8 <analog_inputs_init+0x2c>)
 8000dea:	f001 f8c3 	bl	8001f74 <log_error>
        return;
 8000dee:	e7fa      	b.n	8000de6 <analog_inputs_init+0x1a>
 8000df0:	20000328 	.word	0x20000328
 8000df4:	08000dad 	.word	0x08000dad
 8000df8:	0800b8d0 	.word	0x0800b8d0

08000dfc <analog_inputs_get_data>:
 * @param input_index The index of the analog input to retrieve data from.
 *                    This index corresponds to the specific channel of the ADC.
 * @return The digital value of the specified analog input.
 */
uint16_t analog_inputs_get_data(analog_input_channel_t input_index)
{
 8000dfc:	b510      	push	{r4, lr}
    if (input_index >= ANALOG_INPUTS_MAX)
 8000dfe:	280c      	cmp	r0, #12
 8000e00:	d802      	bhi.n	8000e08 <analog_inputs_get_data+0xc>
    {
        log_error("Invalid index in analog input.");
        return 0;
    }
    uint_fast32_t sum = 0;
    for (uint_fast8_t i = 0; i < ANALOG_INPUTS_NUMBER_OF_SAMPLES; i++)
 8000e02:	2300      	movs	r3, #0
    uint_fast32_t sum = 0;
 8000e04:	4619      	mov	r1, r3
 8000e06:	e00f      	b.n	8000e28 <analog_inputs_get_data+0x2c>
        log_error("Invalid index in analog input.");
 8000e08:	480a      	ldr	r0, [pc, #40]	@ (8000e34 <analog_inputs_get_data+0x38>)
 8000e0a:	f001 f8b3 	bl	8001f74 <log_error>
        return 0;
 8000e0e:	2000      	movs	r0, #0
 8000e10:	e00e      	b.n	8000e30 <analog_inputs_get_data+0x34>
    {
        sum += analog_data[i * ANALOG_INPUTS_MAX + input_index];
 8000e12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000e16:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000e1a:	4402      	add	r2, r0
 8000e1c:	4c06      	ldr	r4, [pc, #24]	@ (8000e38 <analog_inputs_get_data+0x3c>)
 8000e1e:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 8000e22:	fa11 f182 	uxtah	r1, r1, r2
    for (uint_fast8_t i = 0; i < ANALOG_INPUTS_NUMBER_OF_SAMPLES; i++)
 8000e26:	3301      	adds	r3, #1
 8000e28:	2b07      	cmp	r3, #7
 8000e2a:	d9f2      	bls.n	8000e12 <analog_inputs_get_data+0x16>
    }
    
    return sum / ANALOG_INPUTS_NUMBER_OF_SAMPLES;
 8000e2c:	f3c1 00cf 	ubfx	r0, r1, #3, #16
}
 8000e30:	bd10      	pop	{r4, pc}
 8000e32:	bf00      	nop
 8000e34:	0800b900 	.word	0x0800b900
 8000e38:	20000258 	.word	0x20000258

08000e3c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8000e3c:	b508      	push	{r3, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8000e3e:	f007 ffdc 	bl	8008dfa <pvTimerGetTimerID>

  if (callb != NULL) {
 8000e42:	b110      	cbz	r0, 8000e4a <TimerCallback+0xe>
    callb->func (callb->arg);
 8000e44:	6802      	ldr	r2, [r0, #0]
 8000e46:	6840      	ldr	r0, [r0, #4]
 8000e48:	4790      	blx	r2
  }
}
 8000e4a:	bd08      	pop	{r3, pc}

08000e4c <SysTick_Handler>:
void SysTick_Handler (void) {
 8000e4c:	b508      	push	{r3, lr}
  SysTick->CTRL;
 8000e4e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000e52:	691b      	ldr	r3, [r3, #16]
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8000e54:	f007 fa7c 	bl	8008350 <xTaskGetSchedulerState>
 8000e58:	2801      	cmp	r0, #1
 8000e5a:	d100      	bne.n	8000e5e <SysTick_Handler+0x12>
}
 8000e5c:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8000e5e:	f002 f819 	bl	8002e94 <xPortSysTickHandler>
}
 8000e62:	e7fb      	b.n	8000e5c <SysTick_Handler+0x10>

08000e64 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000e64:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000e68:	b92b      	cbnz	r3, 8000e76 <osKernelInitialize+0x12>
    if (KernelState == osKernelInactive) {
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <osKernelInitialize+0x20>)
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	b928      	cbnz	r0, 8000e7c <osKernelInitialize+0x18>
      KernelState = osKernelReady;
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000e74:	4770      	bx	lr
    stat = osErrorISR;
 8000e76:	f06f 0005 	mvn.w	r0, #5
 8000e7a:	4770      	bx	lr
      stat = osError;
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	200009e4 	.word	0x200009e4

08000e88 <osKernelStart>:
 8000e88:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000e8c:	b973      	cbnz	r3, 8000eac <osKernelStart+0x24>
    if (KernelState == osKernelReady) {
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <osKernelStart+0x30>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d10d      	bne.n	8000eb2 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8000e96:	b510      	push	{r4, lr}
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	2400      	movs	r4, #0
 8000e9a:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <osKernelStart+0x34>)
 8000e9c:	77dc      	strb	r4, [r3, #31]
      KernelState = osKernelRunning;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <osKernelStart+0x30>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8000ea4:	f006 ff6c 	bl	8007d80 <vTaskStartScheduler>
      stat = osOK;
 8000ea8:	4620      	mov	r0, r4
}
 8000eaa:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8000eac:	f06f 0005 	mvn.w	r0, #5
 8000eb0:	4770      	bx	lr
      stat = osError;
 8000eb2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000eb6:	4770      	bx	lr
 8000eb8:	200009e4 	.word	0x200009e4
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec2:	b087      	sub	sp, #28
  hTask = NULL;
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	9405      	str	r4, [sp, #20]
 8000ec8:	f3ef 8405 	mrs	r4, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 8000ecc:	bb04      	cbnz	r4, 8000f10 <osThreadNew+0x50>
 8000ece:	b1f8      	cbz	r0, 8000f10 <osThreadNew+0x50>
    if (attr != NULL) {
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	d034      	beq.n	8000f3e <osThreadNew+0x7e>
      if (attr->name != NULL) {
 8000ed4:	6815      	ldr	r5, [r2, #0]
      if (attr->priority != osPriorityNone) {
 8000ed6:	6993      	ldr	r3, [r2, #24]
 8000ed8:	b12b      	cbz	r3, 8000ee6 <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 8000eda:	461e      	mov	r6, r3
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000edc:	3b01      	subs	r3, #1
 8000ede:	2b37      	cmp	r3, #55	@ 0x37
 8000ee0:	d902      	bls.n	8000ee8 <osThreadNew+0x28>
        return (NULL);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	e015      	b.n	8000f12 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;
 8000ee6:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000ee8:	6853      	ldr	r3, [r2, #4]
 8000eea:	f013 0f01 	tst.w	r3, #1
 8000eee:	d13f      	bne.n	8000f70 <osThreadNew+0xb0>
      if (attr->stack_size > 0U) {
 8000ef0:	6954      	ldr	r4, [r2, #20]
 8000ef2:	b184      	cbz	r4, 8000f16 <osThreadNew+0x56>
        stack = attr->stack_size / sizeof(StackType_t);
 8000ef4:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000ef8:	6893      	ldr	r3, [r2, #8]
 8000efa:	b12b      	cbz	r3, 8000f08 <osThreadNew+0x48>
 8000efc:	68d7      	ldr	r7, [r2, #12]
 8000efe:	2f5b      	cmp	r7, #91	@ 0x5b
 8000f00:	d902      	bls.n	8000f08 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000f02:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000f04:	b107      	cbz	r7, 8000f08 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000f06:	b984      	cbnz	r4, 8000f2a <osThreadNew+0x6a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000f08:	b143      	cbz	r3, 8000f1c <osThreadNew+0x5c>
    mem  = -1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
      if (mem == 0) {
 8000f0e:	b30b      	cbz	r3, 8000f54 <osThreadNew+0x94>
  return ((osThreadId_t)hTask);
 8000f10:	9805      	ldr	r0, [sp, #20]
}
 8000f12:	b007      	add	sp, #28
 8000f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8000f16:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000f1a:	e7ed      	b.n	8000ef8 <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000f1c:	68d3      	ldr	r3, [r2, #12]
 8000f1e:	b9a3      	cbnz	r3, 8000f4a <osThreadNew+0x8a>
 8000f20:	6913      	ldr	r3, [r2, #16]
 8000f22:	b1ab      	cbz	r3, 8000f50 <osThreadNew+0x90>
    mem  = -1;
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	e7f1      	b.n	8000f0e <osThreadNew+0x4e>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	9701      	str	r7, [sp, #4]
 8000f2e:	9600      	str	r6, [sp, #0]
 8000f30:	460b      	mov	r3, r1
 8000f32:	4662      	mov	r2, ip
 8000f34:	4629      	mov	r1, r5
 8000f36:	f006 feb5 	bl	8007ca4 <xTaskCreateStatic>
 8000f3a:	9005      	str	r0, [sp, #20]
 8000f3c:	e7e8      	b.n	8000f10 <osThreadNew+0x50>
    name = NULL;
 8000f3e:	4615      	mov	r5, r2
      mem = 0;
 8000f40:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8000f42:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 8000f44:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000f48:	e7e1      	b.n	8000f0e <osThreadNew+0x4e>
    mem  = -1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e7de      	b.n	8000f0e <osThreadNew+0x4e>
          mem = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	e7dc      	b.n	8000f0e <osThreadNew+0x4e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000f54:	ab05      	add	r3, sp, #20
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	9600      	str	r6, [sp, #0]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	fa1f f28c 	uxth.w	r2, ip
 8000f60:	4629      	mov	r1, r5
 8000f62:	f006 feda 	bl	8007d1a <xTaskCreate>
 8000f66:	2801      	cmp	r0, #1
 8000f68:	d0d2      	beq.n	8000f10 <osThreadNew+0x50>
            hTask = NULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9305      	str	r3, [sp, #20]
 8000f6e:	e7cf      	b.n	8000f10 <osThreadNew+0x50>
        return (NULL);
 8000f70:	2000      	movs	r0, #0
 8000f72:	e7ce      	b.n	8000f12 <osThreadNew+0x52>

08000f74 <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
 8000f74:	b508      	push	{r3, lr}
 8000f76:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000f7a:	b933      	cbnz	r3, 8000f8a <osDelay+0x16>
    if (ticks != 0U) {
 8000f7c:	b908      	cbnz	r0, 8000f82 <osDelay+0xe>
    stat = osOK;
 8000f7e:	2000      	movs	r0, #0
}
 8000f80:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8000f82:	f007 f85f 	bl	8008044 <vTaskDelay>
    stat = osOK;
 8000f86:	2000      	movs	r0, #0
 8000f88:	e7fa      	b.n	8000f80 <osDelay+0xc>
    stat = osErrorISR;
 8000f8a:	f06f 0005 	mvn.w	r0, #5
 8000f8e:	e7f7      	b.n	8000f80 <osDelay+0xc>

08000f90 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8000f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f94:	b083      	sub	sp, #12
 8000f96:	f3ef 8705 	mrs	r7, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 8000f9a:	2f00      	cmp	r7, #0
 8000f9c:	d143      	bne.n	8001026 <osTimerNew+0x96>
 8000f9e:	4606      	mov	r6, r0
 8000fa0:	4689      	mov	r9, r1
 8000fa2:	4615      	mov	r5, r2
 8000fa4:	461c      	mov	r4, r3
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d03f      	beq.n	800102a <osTimerNew+0x9a>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8000faa:	2008      	movs	r0, #8
 8000fac:	f001 fa92 	bl	80024d4 <pvPortMalloc>

    if (callb != NULL) {
 8000fb0:	4680      	mov	r8, r0
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d03b      	beq.n	800102e <osTimerNew+0x9e>
      callb->func = func;
 8000fb6:	6006      	str	r6, [r0, #0]
      callb->arg  = argument;
 8000fb8:	6045      	str	r5, [r0, #4]

      if (type == osTimerOnce) {
 8000fba:	f1b9 0f00 	cmp.w	r9, #0
 8000fbe:	d000      	beq.n	8000fc2 <osTimerNew+0x32>
        reload = pdFALSE;
      } else {
        reload = pdTRUE;
 8000fc0:	2701      	movs	r7, #1
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
 8000fc2:	b304      	cbz	r4, 8001006 <osTimerNew+0x76>
        if (attr->name != NULL) {
 8000fc4:	6820      	ldr	r0, [r4, #0]
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8000fc6:	68a3      	ldr	r3, [r4, #8]
 8000fc8:	b113      	cbz	r3, 8000fd0 <osTimerNew+0x40>
 8000fca:	68e2      	ldr	r2, [r4, #12]
 8000fcc:	2a2b      	cmp	r2, #43	@ 0x2b
 8000fce:	d810      	bhi.n	8000ff2 <osTimerNew+0x62>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000fd0:	b153      	cbz	r3, 8000fe8 <osTimerNew+0x58>
      mem  = -1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
        #endif
      }
      else {
        if (mem == 0) {
 8000fd6:	b1db      	cbz	r3, 8001010 <osTimerNew+0x80>
  hTimer = NULL;
 8000fd8:	2400      	movs	r4, #0
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
        vPortFree (callb);
 8000fda:	4640      	mov	r0, r8
 8000fdc:	f001 fafc 	bl	80025d8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	b003      	add	sp, #12
 8000fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000fe8:	68e3      	ldr	r3, [r4, #12]
 8000fea:	b17b      	cbz	r3, 800100c <osTimerNew+0x7c>
      mem  = -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	e7f1      	b.n	8000fd6 <osTimerNew+0x46>
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <osTimerNew+0xa4>)
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	4643      	mov	r3, r8
 8000ffa:	463a      	mov	r2, r7
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	f007 fd47 	bl	8008a90 <xTimerCreateStatic>
 8001002:	4604      	mov	r4, r0
 8001004:	e00c      	b.n	8001020 <osTimerNew+0x90>
      name = NULL;
 8001006:	4620      	mov	r0, r4
        mem = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	e7e4      	b.n	8000fd6 <osTimerNew+0x46>
            mem = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	e7e2      	b.n	8000fd6 <osTimerNew+0x46>
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <osTimerNew+0xa4>)
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	4643      	mov	r3, r8
 8001016:	463a      	mov	r2, r7
 8001018:	2101      	movs	r1, #1
 800101a:	f007 fd1d 	bl	8008a58 <xTimerCreate>
 800101e:	4604      	mov	r4, r0
      if ((hTimer == NULL) && (callb != NULL)) {
 8001020:	2c00      	cmp	r4, #0
 8001022:	d1dd      	bne.n	8000fe0 <osTimerNew+0x50>
 8001024:	e7d9      	b.n	8000fda <osTimerNew+0x4a>
  hTimer = NULL;
 8001026:	2400      	movs	r4, #0
 8001028:	e7da      	b.n	8000fe0 <osTimerNew+0x50>
 800102a:	2400      	movs	r4, #0
 800102c:	e7d8      	b.n	8000fe0 <osTimerNew+0x50>
 800102e:	4604      	mov	r4, r0
  return ((osTimerId_t)hTimer);
 8001030:	e7d6      	b.n	8000fe0 <osTimerNew+0x50>
 8001032:	bf00      	nop
 8001034:	08000e3d 	.word	0x08000e3d

08001038 <osTimerStart>:
 8001038:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 800103c:	b96b      	cbnz	r3, 800105a <osTimerStart+0x22>
 800103e:	460a      	mov	r2, r1
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
 8001040:	b170      	cbz	r0, 8001060 <osTimerStart+0x28>
osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8001042:	b500      	push	{lr}
 8001044:	b083      	sub	sp, #12
    stat = osErrorParameter;
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2104      	movs	r1, #4
 800104a:	f007 fd4b 	bl	8008ae4 <xTimerGenericCommand>
 800104e:	2801      	cmp	r0, #1
 8001050:	d109      	bne.n	8001066 <osTimerStart+0x2e>
      stat = osOK;
 8001052:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8001054:	b003      	add	sp, #12
 8001056:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorISR;
 800105a:	f06f 0005 	mvn.w	r0, #5
 800105e:	4770      	bx	lr
    stat = osErrorParameter;
 8001060:	f06f 0003 	mvn.w	r0, #3
}
 8001064:	4770      	bx	lr
      stat = osErrorResource;
 8001066:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800106a:	e7f3      	b.n	8001054 <osTimerStart+0x1c>

0800106c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800106c:	b508      	push	{r3, lr}
 800106e:	f3ef 8305 	mrs	r3, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8001072:	b9cb      	cbnz	r3, 80010a8 <osEventFlagsNew+0x3c>
    mem = -1;

    if (attr != NULL) {
 8001074:	b1a0      	cbz	r0, 80010a0 <osEventFlagsNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8001076:	6883      	ldr	r3, [r0, #8]
 8001078:	b113      	cbz	r3, 8001080 <osEventFlagsNew+0x14>
 800107a:	68c2      	ldr	r2, [r0, #12]
 800107c:	2a1f      	cmp	r2, #31
 800107e:	d80b      	bhi.n	8001098 <osEventFlagsNew+0x2c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001080:	b12b      	cbz	r3, 800108e <osEventFlagsNew+0x22>
    mem = -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8001086:	b98b      	cbnz	r3, 80010ac <osEventFlagsNew+0x40>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8001088:	f000 ffd5 	bl	8002036 <xEventGroupCreate>
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
}
 800108c:	bd08      	pop	{r3, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800108e:	68c3      	ldr	r3, [r0, #12]
 8001090:	b143      	cbz	r3, 80010a4 <osEventFlagsNew+0x38>
    mem = -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	e7f6      	b.n	8001086 <osEventFlagsNew+0x1a>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8001098:	4618      	mov	r0, r3
 800109a:	f000 ffa7 	bl	8001fec <xEventGroupCreateStatic>
 800109e:	e7f5      	b.n	800108c <osEventFlagsNew+0x20>
      mem = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e7f0      	b.n	8001086 <osEventFlagsNew+0x1a>
          mem = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	e7ee      	b.n	8001086 <osEventFlagsNew+0x1a>
  hEventGroup = NULL;
 80010a8:	2000      	movs	r0, #0
 80010aa:	e7ef      	b.n	800108c <osEventFlagsNew+0x20>
 80010ac:	2000      	movs	r0, #0
  return ((osEventFlagsId_t)hEventGroup);
 80010ae:	e7ed      	b.n	800108c <osEventFlagsNew+0x20>

080010b0 <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80010b0:	b1f8      	cbz	r0, 80010f2 <osEventFlagsSet+0x42>
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80010b2:	b510      	push	{r4, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	460c      	mov	r4, r1
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80010b8:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 80010bc:	d21c      	bcs.n	80010f8 <osEventFlagsSet+0x48>
 80010be:	f3ef 8205 	mrs	r2, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 80010c2:	b19a      	cbz	r2, 80010ec <osEventFlagsSet+0x3c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80010c4:	2200      	movs	r2, #0
 80010c6:	9201      	str	r2, [sp, #4]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80010c8:	aa01      	add	r2, sp, #4
 80010ca:	f001 f80d 	bl	80020e8 <xEventGroupSetBitsFromISR>
 80010ce:	b1b8      	cbz	r0, 8001100 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
    } else {
      rflags = flags;
      portYIELD_FROM_ISR (yield);
 80010d0:	9b01      	ldr	r3, [sp, #4]
 80010d2:	b1c3      	cbz	r3, 8001106 <osEventFlagsSet+0x56>
 80010d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80010d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	f3bf 8f6f 	isb	sy
      rflags = flags;
 80010e8:	4620      	mov	r0, r4
 80010ea:	e007      	b.n	80010fc <osEventFlagsSet+0x4c>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80010ec:	f000 ffb1 	bl	8002052 <xEventGroupSetBits>
 80010f0:	e004      	b.n	80010fc <osEventFlagsSet+0x4c>
    rflags = (uint32_t)osErrorParameter;
 80010f2:	f06f 0003 	mvn.w	r0, #3
  }

  return (rflags);
}
 80010f6:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 80010f8:	f06f 0003 	mvn.w	r0, #3
}
 80010fc:	b002      	add	sp, #8
 80010fe:	bd10      	pop	{r4, pc}
      rflags = (uint32_t)osErrorResource;
 8001100:	f06f 0002 	mvn.w	r0, #2
 8001104:	e7fa      	b.n	80010fc <osEventFlagsSet+0x4c>
      rflags = flags;
 8001106:	4620      	mov	r0, r4
  return (rflags);
 8001108:	e7f8      	b.n	80010fc <osEventFlagsSet+0x4c>

0800110a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800110a:	b570      	push	{r4, r5, r6, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001112:	2b00      	cmp	r3, #0
 8001114:	d13a      	bne.n	800118c <osMessageQueueNew+0x82>
 8001116:	4614      	mov	r4, r2
 8001118:	2800      	cmp	r0, #0
 800111a:	d03b      	beq.n	8001194 <osMessageQueueNew+0x8a>
 800111c:	2900      	cmp	r1, #0
 800111e:	d03b      	beq.n	8001198 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 8001120:	b36a      	cbz	r2, 800117e <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001122:	6893      	ldr	r3, [r2, #8]
 8001124:	b14b      	cbz	r3, 800113a <osMessageQueueNew+0x30>
 8001126:	68d2      	ldr	r2, [r2, #12]
 8001128:	2a4f      	cmp	r2, #79	@ 0x4f
 800112a:	d906      	bls.n	800113a <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800112c:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800112e:	b122      	cbz	r2, 800113a <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001130:	fb01 f500 	mul.w	r5, r1, r0
 8001134:	6966      	ldr	r6, [r4, #20]
 8001136:	42ae      	cmp	r6, r5
 8001138:	d21b      	bcs.n	8001172 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800113a:	b173      	cbz	r3, 800115a <osMessageQueueNew+0x50>
    mem = -1;
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8001140:	bb63      	cbnz	r3, 800119c <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8001142:	2200      	movs	r2, #0
 8001144:	f002 f8c7 	bl	80032d6 <xQueueGenericCreate>
 8001148:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800114a:	b305      	cbz	r5, 800118e <osMessageQueueNew+0x84>
      if (attr != NULL) {
 800114c:	b104      	cbz	r4, 8001150 <osMessageQueueNew+0x46>
        name = attr->name;
 800114e:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8001150:	4621      	mov	r1, r4
 8001152:	4628      	mov	r0, r5
 8001154:	f002 fb14 	bl	8003780 <vQueueAddToRegistry>
 8001158:	e019      	b.n	800118e <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800115a:	68e3      	ldr	r3, [r4, #12]
 800115c:	b98b      	cbnz	r3, 8001182 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800115e:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001160:	b113      	cbz	r3, 8001168 <osMessageQueueNew+0x5e>
    mem = -1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	e7eb      	b.n	8001140 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001168:	6963      	ldr	r3, [r4, #20]
 800116a:	b16b      	cbz	r3, 8001188 <osMessageQueueNew+0x7e>
    mem = -1;
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	e7e6      	b.n	8001140 <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001172:	2500      	movs	r5, #0
 8001174:	9500      	str	r5, [sp, #0]
 8001176:	f002 f864 	bl	8003242 <xQueueGenericCreateStatic>
 800117a:	4605      	mov	r5, r0
 800117c:	e7e5      	b.n	800114a <osMessageQueueNew+0x40>
      mem = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	e7de      	b.n	8001140 <osMessageQueueNew+0x36>
    mem = -1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	e7db      	b.n	8001140 <osMessageQueueNew+0x36>
          mem = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	e7d9      	b.n	8001140 <osMessageQueueNew+0x36>
  hQueue = NULL;
 800118c:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800118e:	4628      	mov	r0, r5
 8001190:	b002      	add	sp, #8
 8001192:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8001194:	2500      	movs	r5, #0
 8001196:	e7fa      	b.n	800118e <osMessageQueueNew+0x84>
 8001198:	2500      	movs	r5, #0
 800119a:	e7f8      	b.n	800118e <osMessageQueueNew+0x84>
 800119c:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800119e:	e7f6      	b.n	800118e <osMessageQueueNew+0x84>

080011a0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80011a0:	b510      	push	{r4, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	461c      	mov	r4, r3
 80011a6:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80011aa:	b1c3      	cbz	r3, 80011de <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80011ac:	b318      	cbz	r0, 80011f6 <osMessageQueuePut+0x56>
 80011ae:	b329      	cbz	r1, 80011fc <osMessageQueuePut+0x5c>
 80011b0:	bb3c      	cbnz	r4, 8001202 <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80011b6:	aa01      	add	r2, sp, #4
 80011b8:	f002 f975 	bl	80034a6 <xQueueGenericSendFromISR>
 80011bc:	2801      	cmp	r0, #1
 80011be:	d123      	bne.n	8001208 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80011c0:	9801      	ldr	r0, [sp, #4]
 80011c2:	b150      	cbz	r0, 80011da <osMessageQueuePut+0x3a>
 80011c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80011c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80011d0:	f3bf 8f4f 	dsb	sy
 80011d4:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80011d8:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80011da:	b002      	add	sp, #8
 80011dc:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80011de:	b1b0      	cbz	r0, 800120e <osMessageQueuePut+0x6e>
 80011e0:	b1c1      	cbz	r1, 8001214 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80011e2:	2300      	movs	r3, #0
 80011e4:	4622      	mov	r2, r4
 80011e6:	f002 f89a 	bl	800331e <xQueueGenericSend>
 80011ea:	2801      	cmp	r0, #1
 80011ec:	d015      	beq.n	800121a <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 80011ee:	b1b4      	cbz	r4, 800121e <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 80011f0:	f06f 0001 	mvn.w	r0, #1
 80011f4:	e7f1      	b.n	80011da <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 80011f6:	f06f 0003 	mvn.w	r0, #3
 80011fa:	e7ee      	b.n	80011da <osMessageQueuePut+0x3a>
 80011fc:	f06f 0003 	mvn.w	r0, #3
 8001200:	e7eb      	b.n	80011da <osMessageQueuePut+0x3a>
 8001202:	f06f 0003 	mvn.w	r0, #3
 8001206:	e7e8      	b.n	80011da <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 8001208:	f06f 0002 	mvn.w	r0, #2
 800120c:	e7e5      	b.n	80011da <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 800120e:	f06f 0003 	mvn.w	r0, #3
 8001212:	e7e2      	b.n	80011da <osMessageQueuePut+0x3a>
 8001214:	f06f 0003 	mvn.w	r0, #3
 8001218:	e7df      	b.n	80011da <osMessageQueuePut+0x3a>
  stat = osOK;
 800121a:	2000      	movs	r0, #0
 800121c:	e7dd      	b.n	80011da <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 800121e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8001222:	e7da      	b.n	80011da <osMessageQueuePut+0x3a>

08001224 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8001224:	b510      	push	{r4, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	461c      	mov	r4, r3
 800122a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800122e:	b1c3      	cbz	r3, 8001262 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001230:	b310      	cbz	r0, 8001278 <osMessageQueueGet+0x54>
 8001232:	b321      	cbz	r1, 800127e <osMessageQueueGet+0x5a>
 8001234:	bb34      	cbnz	r4, 8001284 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8001236:	2300      	movs	r3, #0
 8001238:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800123a:	aa01      	add	r2, sp, #4
 800123c:	f002 fa49 	bl	80036d2 <xQueueReceiveFromISR>
 8001240:	2801      	cmp	r0, #1
 8001242:	d122      	bne.n	800128a <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8001244:	9801      	ldr	r0, [sp, #4]
 8001246:	b150      	cbz	r0, 800125e <osMessageQueueGet+0x3a>
 8001248:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800124c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001250:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001254:	f3bf 8f4f 	dsb	sy
 8001258:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800125c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800125e:	b002      	add	sp, #8
 8001260:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001262:	b1a8      	cbz	r0, 8001290 <osMessageQueueGet+0x6c>
 8001264:	b1b9      	cbz	r1, 8001296 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001266:	4622      	mov	r2, r4
 8001268:	f002 f984 	bl	8003574 <xQueueReceive>
 800126c:	2801      	cmp	r0, #1
 800126e:	d015      	beq.n	800129c <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8001270:	b1b4      	cbz	r4, 80012a0 <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8001272:	f06f 0001 	mvn.w	r0, #1
 8001276:	e7f2      	b.n	800125e <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8001278:	f06f 0003 	mvn.w	r0, #3
 800127c:	e7ef      	b.n	800125e <osMessageQueueGet+0x3a>
 800127e:	f06f 0003 	mvn.w	r0, #3
 8001282:	e7ec      	b.n	800125e <osMessageQueueGet+0x3a>
 8001284:	f06f 0003 	mvn.w	r0, #3
 8001288:	e7e9      	b.n	800125e <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 800128a:	f06f 0002 	mvn.w	r0, #2
 800128e:	e7e6      	b.n	800125e <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8001290:	f06f 0003 	mvn.w	r0, #3
 8001294:	e7e3      	b.n	800125e <osMessageQueueGet+0x3a>
 8001296:	f06f 0003 	mvn.w	r0, #3
 800129a:	e7e0      	b.n	800125e <osMessageQueueGet+0x3a>
  stat = osOK;
 800129c:	2000      	movs	r0, #0
 800129e:	e7de      	b.n	800125e <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 80012a0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80012a4:	e7db      	b.n	800125e <osMessageQueueGet+0x3a>
	...

080012a8 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <vApplicationGetIdleTaskMemory+0x10>)
 80012aa:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <vApplicationGetIdleTaskMemory+0x14>)
 80012ae:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000988 	.word	0x20000988
 80012bc:	20000788 	.word	0x20000788

080012c0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80012c0:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <vApplicationGetTimerTaskMemory+0x10>)
 80012c2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <vApplicationGetTimerTaskMemory+0x14>)
 80012c6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80012c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012cc:	6013      	str	r3, [r2, #0]
}
 80012ce:	4770      	bx	lr
 80012d0:	2000072c 	.word	0x2000072c
 80012d4:	2000032c 	.word	0x2000032c

080012d8 <runtime_update_task>:
	change_bit_uint32(&output_channels.status, index, state);
}

// ==================== Runtime Update Task ====================
void runtime_update_task(void *argument)
{
 80012d8:	b508      	push	{r3, lr}
	for (;;)
	{
		output_channels.sync_loss_count = engine.trigger.sync_loss_counter;
 80012da:	4d1f      	ldr	r5, [pc, #124]	@ (8001358 <runtime_update_task+0x80>)
 80012dc:	8beb      	ldrh	r3, [r5, #30]
 80012de:	4c1f      	ldr	r4, [pc, #124]	@ (800135c <runtime_update_task+0x84>)
 80012e0:	84a3      	strh	r3, [r4, #36]	@ 0x24
		change_bit_uint32(&output_channels.status, STATUS_TRIGGER_SYNCED, engine.trigger.sync_status == TS_FULLY_SYNCED);
 80012e2:	7f6a      	ldrb	r2, [r5, #29]
 80012e4:	2a01      	cmp	r2, #1
 80012e6:	bf14      	ite	ne
 80012e8:	2200      	movne	r2, #0
 80012ea:	2201      	moveq	r2, #1
 80012ec:	211a      	movs	r1, #26
 80012ee:	4620      	mov	r0, r4
 80012f0:	f009 fb0a 	bl	800a908 <change_bit_uint32>
		change_bit_uint32(&output_channels.status, STATUS_TRIGGER_ERROR, engine.trigger.sync_loss_counter > 1000);
 80012f4:	8bea      	ldrh	r2, [r5, #30]
 80012f6:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 80012fa:	bf94      	ite	ls
 80012fc:	2200      	movls	r2, #0
 80012fe:	2201      	movhi	r2, #1
 8001300:	210d      	movs	r1, #13
 8001302:	4620      	mov	r0, r4
 8001304:	f009 fb00 	bl	800a908 <change_bit_uint32>
		change_bit_uint32(&output_channels.status, STATUS_CRANKING, engine.spinning_state == SS_CRANKING);
 8001308:	7c6a      	ldrb	r2, [r5, #17]
 800130a:	2a02      	cmp	r2, #2
 800130c:	bf14      	ite	ne
 800130e:	2200      	movne	r2, #0
 8001310:	2201      	moveq	r2, #1
 8001312:	2118      	movs	r1, #24
 8001314:	4620      	mov	r0, r4
 8001316:	f009 faf7 	bl	800a908 <change_bit_uint32>
		change_bit_uint32(&output_channels.status, STATUS_RUNNING, engine.spinning_state == SS_RUNNING);
 800131a:	7c6a      	ldrb	r2, [r5, #17]
 800131c:	2a03      	cmp	r2, #3
 800131e:	bf14      	ite	ne
 8001320:	2200      	movne	r2, #0
 8001322:	2201      	moveq	r2, #1
 8001324:	2119      	movs	r1, #25
 8001326:	4620      	mov	r0, r4
 8001328:	f009 faee 	bl	800a908 <change_bit_uint32>
		// Replace with actual sensor readings
		output_channels.rpm = engine.rpm;
 800132c:	68eb      	ldr	r3, [r5, #12]
 800132e:	6063      	str	r3, [r4, #4]
		output_channels.map = engine.map;
 8001330:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8001332:	60a3      	str	r3, [r4, #8]
		output_channels.tps = engine.tps1;
 8001334:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8001336:	60e3      	str	r3, [r4, #12]
		output_channels.lambda = 1;
 8001338:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800133c:	6123      	str	r3, [r4, #16]
		output_channels.advance = engine.ignition_advance;
 800133e:	69ab      	ldr	r3, [r5, #24]
 8001340:	6163      	str	r3, [r4, #20]
		output_channels.dwell = configuration.ignition_dwell;
 8001342:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <runtime_update_task+0x88>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	61a3      	str	r3, [r4, #24]
		output_channels.vbatt = 10;
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <runtime_update_task+0x8c>)
 800134a:	61e3      	str	r3, [r4, #28]
		output_channels.clt = engine.clt;
 800134c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800134e:	6223      	str	r3, [r4, #32]
		osDelay(10);
 8001350:	200a      	movs	r0, #10
 8001352:	f7ff fe0f 	bl	8000f74 <osDelay>
	for (;;)
 8001356:	e7c0      	b.n	80012da <runtime_update_task+0x2>
 8001358:	2000186c 	.word	0x2000186c
 800135c:	20001784 	.word	0x20001784
 8001360:	200018cc 	.word	0x200018cc
 8001364:	41200000 	.word	0x41200000

08001368 <transmit_crc_packet>:
{
 8001368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800136c:	b083      	sub	sp, #12
 800136e:	460f      	mov	r7, r1
 8001370:	4615      	mov	r5, r2
 8001372:	f88d 0007 	strb.w	r0, [sp, #7]
	packet_size += size; // payload
 8001376:	b296      	uxth	r6, r2
 8001378:	f106 0807 	add.w	r8, r6, #7
 800137c:	fa1f f888 	uxth.w	r8, r8
	prefix = swap_endian_uint16(sizeof(flag) + size);
 8001380:	3601      	adds	r6, #1
}

// http://en.wikipedia.org/wiki/Endianness
inline uint16_t swap_endian_uint16(uint16_t x)
{
	return ((x << 8) | (x >> 8));
 8001382:	ba76      	rev16	r6, r6
	crc = crc32_inc(0, (void*)&flag, 1); // flag
 8001384:	2201      	movs	r2, #1
 8001386:	f10d 0107 	add.w	r1, sp, #7
 800138a:	2000      	movs	r0, #0
 800138c:	f009 faa0 	bl	800a8d0 <crc32_inc>
	crc = crc32_inc(crc, buf, size); // payload
 8001390:	462a      	mov	r2, r5
 8001392:	4639      	mov	r1, r7
 8001394:	f009 fa9c 	bl	800a8d0 <crc32_inc>
}
inline uint32_t swap_endian_uint32(uint32_t x)
{
	return (((x >> 24) & 0x000000ff) | ((x <<  8) & 0x00ff0000) |
 8001398:	0204      	lsls	r4, r0, #8
 800139a:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 800139e:	ea44 6410 	orr.w	r4, r4, r0, lsr #24
			((x >>  8) & 0x0000ff00) | ((x << 24) & 0xff000000));
 80013a2:	0a03      	lsrs	r3, r0, #8
 80013a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
	return (((x >> 24) & 0x000000ff) | ((x <<  8) & 0x00ff0000) |
 80013a8:	431c      	orrs	r4, r3
			((x >>  8) & 0x0000ff00) | ((x << 24) & 0xff000000));
 80013aa:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
	memcpy(tx_rx_buffer, &prefix, sizeof(prefix)); // prefix to buffer
 80013ae:	f8df 9030 	ldr.w	r9, [pc, #48]	@ 80013e0 <transmit_crc_packet+0x78>
 80013b2:	f8a9 6000 	strh.w	r6, [r9]
	memcpy(tx_rx_buffer + tx_rx_buffer_index, &flag, sizeof(flag)); // flag to buffer
 80013b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80013ba:	f889 3002 	strb.w	r3, [r9, #2]
	memcpy(tx_rx_buffer + tx_rx_buffer_index, buf, size); // payload to buffer
 80013be:	462a      	mov	r2, r5
 80013c0:	4639      	mov	r1, r7
 80013c2:	f109 0003 	add.w	r0, r9, #3
 80013c6:	f009 fb47 	bl	800aa58 <memcpy>
	tx_rx_buffer_index += size;
 80013ca:	3503      	adds	r5, #3
	memcpy(tx_rx_buffer + tx_rx_buffer_index, &suffix, sizeof(suffix)); // suffix to buffer
 80013cc:	f849 4005 	str.w	r4, [r9, r5]
	CDC_Transmit_FS(tx_rx_buffer, packet_size);
 80013d0:	4641      	mov	r1, r8
 80013d2:	4648      	mov	r0, r9
 80013d4:	f008 fa92 	bl	80098fc <CDC_Transmit_FS>
}
 80013d8:	b003      	add	sp, #12
 80013da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013de:	bf00      	nop
 80013e0:	200009e8 	.word	0x200009e8

080013e4 <send_response>:
{
 80013e4:	b538      	push	{r3, r4, r5, lr}
 80013e6:	460c      	mov	r4, r1
    if (mode == TS_CRC)
 80013e8:	2a01      	cmp	r2, #1
 80013ea:	d007      	beq.n	80013fc <send_response+0x18>
        if (size > 0)
 80013ec:	b961      	cbnz	r1, 8001408 <send_response+0x24>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013f4:	480a      	ldr	r0, [pc, #40]	@ (8001420 <send_response+0x3c>)
 80013f6:	f003 fb72 	bl	8004ade <HAL_GPIO_WritePin>
}
 80013fa:	bd38      	pop	{r3, r4, r5, pc}
        transmit_crc_packet(TS_RESPONSE_OK, data, size);
 80013fc:	460a      	mov	r2, r1
 80013fe:	4601      	mov	r1, r0
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff ffb1 	bl	8001368 <transmit_crc_packet>
 8001406:	e7f2      	b.n	80013ee <send_response+0xa>
			memcpy(tx_rx_buffer, data, size);
 8001408:	4d06      	ldr	r5, [pc, #24]	@ (8001424 <send_response+0x40>)
 800140a:	460a      	mov	r2, r1
 800140c:	4601      	mov	r1, r0
 800140e:	4628      	mov	r0, r5
 8001410:	f009 fb22 	bl	800aa58 <memcpy>
            CDC_Transmit_FS(tx_rx_buffer, size);
 8001414:	b2a1      	uxth	r1, r4
 8001416:	4628      	mov	r0, r5
 8001418:	f008 fa70 	bl	80098fc <CDC_Transmit_FS>
 800141c:	e7e7      	b.n	80013ee <send_response+0xa>
 800141e:	bf00      	nop
 8001420:	40020800 	.word	0x40020800
 8001424:	200009e8 	.word	0x200009e8

08001428 <comms_init>:
{
 8001428:	b570      	push	{r4, r5, r6, lr}
 800142a:	b092      	sub	sp, #72	@ 0x48
    usb_rx_queue = osMessageQueueNew(16, sizeof(usb_rx_packet_t), NULL);
 800142c:	2200      	movs	r2, #0
 800142e:	2142      	movs	r1, #66	@ 0x42
 8001430:	2010      	movs	r0, #16
 8001432:	f7ff fe6a 	bl	800110a <osMessageQueueNew>
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <comms_init+0x5c>)
 8001438:	6018      	str	r0, [r3, #0]
    const osThreadAttr_t comms_task_attrs = {
 800143a:	ac09      	add	r4, sp, #36	@ 0x24
 800143c:	2624      	movs	r6, #36	@ 0x24
 800143e:	4632      	mov	r2, r6
 8001440:	2100      	movs	r1, #0
 8001442:	4620      	mov	r0, r4
 8001444:	f009 fad4 	bl	800a9f0 <memset>
 8001448:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <comms_init+0x60>)
 800144a:	9309      	str	r3, [sp, #36]	@ 0x24
 800144c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001450:	930e      	str	r3, [sp, #56]	@ 0x38
 8001452:	2518      	movs	r5, #24
 8001454:	950f      	str	r5, [sp, #60]	@ 0x3c
    osThreadNew(comms_task, NULL, &comms_task_attrs);
 8001456:	4622      	mov	r2, r4
 8001458:	2100      	movs	r1, #0
 800145a:	480c      	ldr	r0, [pc, #48]	@ (800148c <comms_init+0x64>)
 800145c:	f7ff fd30 	bl	8000ec0 <osThreadNew>
	const osThreadAttr_t runtime_update_task_attrs = {
 8001460:	4632      	mov	r2, r6
 8001462:	2100      	movs	r1, #0
 8001464:	4668      	mov	r0, sp
 8001466:	f009 fac3 	bl	800a9f0 <memset>
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <comms_init+0x68>)
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001472:	9305      	str	r3, [sp, #20]
 8001474:	9506      	str	r5, [sp, #24]
	osThreadNew(runtime_update_task, NULL, &runtime_update_task_attrs);
 8001476:	466a      	mov	r2, sp
 8001478:	2100      	movs	r1, #0
 800147a:	4806      	ldr	r0, [pc, #24]	@ (8001494 <comms_init+0x6c>)
 800147c:	f7ff fd20 	bl	8000ec0 <osThreadNew>
}
 8001480:	b012      	add	sp, #72	@ 0x48
 8001482:	bd70      	pop	{r4, r5, r6, pc}
 8001484:	200017ec 	.word	0x200017ec
 8001488:	0800b920 	.word	0x0800b920
 800148c:	08001665 	.word	0x08001665
 8001490:	0800b92c 	.word	0x0800b92c
 8001494:	080012d9 	.word	0x080012d9

08001498 <process_plain_command>:
{
 8001498:	b508      	push	{r3, lr}
    uint8_t first_byte = cmd[0];
 800149a:	7803      	ldrb	r3, [r0, #0]
	switch (first_byte)
 800149c:	3b43      	subs	r3, #67	@ 0x43
 800149e:	2b10      	cmp	r3, #16
 80014a0:	d82d      	bhi.n	80014fe <process_plain_command+0x66>
 80014a2:	e8df f003 	tbb	[pc, r3]
 80014a6:	2c1e      	.short	0x2c1e
 80014a8:	2c2c092c 	.word	0x2c2c092c
 80014ac:	2c2c2c25 	.word	0x2c2c2c25
 80014b0:	2c2c2c2c 	.word	0x2c2c2c2c
 80014b4:	2c17      	.short	0x2c17
 80014b6:	10          	.byte	0x10
 80014b7:	00          	.byte	0x00
		send_response((uint8_t*)TS_PROTOCOL, sizeof(TS_PROTOCOL) - 1, TS_PLAIN);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2103      	movs	r1, #3
 80014bc:	4811      	ldr	r0, [pc, #68]	@ (8001504 <process_plain_command+0x6c>)
 80014be:	f7ff ff91 	bl	80013e4 <send_response>
		return true;
 80014c2:	2001      	movs	r0, #1
 80014c4:	e01c      	b.n	8001500 <process_plain_command+0x68>
		send_response((uint8_t*)TS_SIGNATURE, sizeof(TS_SIGNATURE) - 1, TS_PLAIN);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2113      	movs	r1, #19
 80014ca:	480f      	ldr	r0, [pc, #60]	@ (8001508 <process_plain_command+0x70>)
 80014cc:	f7ff ff8a 	bl	80013e4 <send_response>
		return true;
 80014d0:	2001      	movs	r0, #1
 80014d2:	e015      	b.n	8001500 <process_plain_command+0x68>
		send_response((uint8_t*)TS_SIGNATURE, sizeof(TS_SIGNATURE) - 1, TS_PLAIN);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2113      	movs	r1, #19
 80014d8:	480b      	ldr	r0, [pc, #44]	@ (8001508 <process_plain_command+0x70>)
 80014da:	f7ff ff83 	bl	80013e4 <send_response>
		return true;
 80014de:	2001      	movs	r0, #1
 80014e0:	e00e      	b.n	8001500 <process_plain_command+0x68>
		send_response((uint8_t *)0xFF, 1, TS_PLAIN);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2101      	movs	r1, #1
 80014e6:	20ff      	movs	r0, #255	@ 0xff
 80014e8:	f7ff ff7c 	bl	80013e4 <send_response>
		return true;
 80014ec:	2001      	movs	r0, #1
 80014ee:	e007      	b.n	8001500 <process_plain_command+0x68>
		send_response((uint8_t*)TS_CAN_ID, sizeof(TS_CAN_ID) - 1, TS_PLAIN);
 80014f0:	2200      	movs	r2, #0
 80014f2:	4611      	mov	r1, r2
 80014f4:	4610      	mov	r0, r2
 80014f6:	f7ff ff75 	bl	80013e4 <send_response>
		return true;
 80014fa:	2001      	movs	r0, #1
 80014fc:	e000      	b.n	8001500 <process_plain_command+0x68>
	switch (first_byte)
 80014fe:	2000      	movs	r0, #0
}
 8001500:	bd08      	pop	{r3, pc}
 8001502:	bf00      	nop
 8001504:	0800b938 	.word	0x0800b938
 8001508:	0800b93c 	.word	0x0800b93c

0800150c <handle_page_read_command>:
	if (page > 1)
 800150c:	2801      	cmp	r0, #1
 800150e:	d80e      	bhi.n	800152e <handle_page_read_command+0x22>
{
 8001510:	b508      	push	{r3, lr}
 8001512:	460b      	mov	r3, r1
 8001514:	4611      	mov	r1, r2
	if ((offset + count) > TS_PAGE_SIZE)
 8001516:	1898      	adds	r0, r3, r2
 8001518:	f640 1238 	movw	r2, #2360	@ 0x938
 800151c:	4290      	cmp	r0, r2
 800151e:	dd00      	ble.n	8001522 <handle_page_read_command+0x16>
}
 8001520:	bd08      	pop	{r3, pc}
	send_response((uint8_t*)&calibration_values.data + offset, count, TS_CRC);
 8001522:	2201      	movs	r2, #1
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <handle_page_read_command+0x24>)
 8001526:	4418      	add	r0, r3
 8001528:	f7ff ff5c 	bl	80013e4 <send_response>
 800152c:	e7f8      	b.n	8001520 <handle_page_read_command+0x14>
 800152e:	4770      	bx	lr
 8001530:	20000e4c 	.word	0x20000e4c

08001534 <process_command>:
{
 8001534:	b530      	push	{r4, r5, lr}
 8001536:	b083      	sub	sp, #12
 8001538:	4604      	mov	r4, r0
 800153a:	460d      	mov	r5, r1
    if (process_plain_command(cmd, size))
 800153c:	f7ff ffac 	bl	8001498 <process_plain_command>
 8001540:	2800      	cmp	r0, #0
 8001542:	f040 8082 	bne.w	800164a <process_command+0x116>
	if (size > 5)
 8001546:	2d05      	cmp	r5, #5
 8001548:	d820      	bhi.n	800158c <process_command+0x58>
	uint8_t command = cmd[2];
 800154a:	78a3      	ldrb	r3, [r4, #2]
	switch (command)
 800154c:	3b43      	subs	r3, #67	@ 0x43
 800154e:	2b34      	cmp	r3, #52	@ 0x34
 8001550:	d876      	bhi.n	8001640 <process_command+0x10c>
 8001552:	e8df f003 	tbb	[pc, r3]
 8001556:	7520      	.short	0x7520
 8001558:	75752675 	.word	0x75752675
 800155c:	7575752c 	.word	0x7575752c
 8001560:	754c7575 	.word	0x754c7575
 8001564:	75387532 	.word	0x75387532
 8001568:	75677575 	.word	0x75677575
 800156c:	75757575 	.word	0x75757575
 8001570:	75757575 	.word	0x75757575
 8001574:	75757575 	.word	0x75757575
 8001578:	75753e75 	.word	0x75753e75
 800157c:	755a7575 	.word	0x755a7575
 8001580:	75757575 	.word	0x75757575
 8001584:	75755275 	.word	0x75755275
 8001588:	7575      	.short	0x7575
 800158a:	6e          	.byte	0x6e
 800158b:	00          	.byte	0x00
		calculated_packet_crc = crc32_inc(0, (void*)(cmd + TS_PACKET_PREFIX_SIZE), size - TS_PACKET_PREFIX_SIZE - TS_PACKET_CRC_SIZE );
 800158c:	1faa      	subs	r2, r5, #6
 800158e:	1ca1      	adds	r1, r4, #2
 8001590:	f009 f99e 	bl	800a8d0 <crc32_inc>
 8001594:	e7d9      	b.n	800154a <process_command+0x16>
		send_response((uint8_t *)0xFF, 1, TS_CRC);
 8001596:	2201      	movs	r2, #1
 8001598:	4611      	mov	r1, r2
 800159a:	20ff      	movs	r0, #255	@ 0xff
 800159c:	f7ff ff22 	bl	80013e4 <send_response>
		return;
 80015a0:	e053      	b.n	800164a <process_command+0x116>
		send_response((uint8_t *)TS_PROTOCOL, sizeof(TS_PROTOCOL)  - 1, TS_CRC);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2103      	movs	r1, #3
 80015a6:	482a      	ldr	r0, [pc, #168]	@ (8001650 <process_command+0x11c>)
 80015a8:	f7ff ff1c 	bl	80013e4 <send_response>
		return;
 80015ac:	e04d      	b.n	800164a <process_command+0x116>
		send_response((uint8_t *)TS_CAN_ID, sizeof(TS_CAN_ID), TS_CRC);
 80015ae:	2201      	movs	r2, #1
 80015b0:	4611      	mov	r1, r2
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff ff16 	bl	80013e4 <send_response>
		return;
 80015b8:	e047      	b.n	800164a <process_command+0x116>
		send_response((uint8_t*)TS_SIGNATURE, sizeof(TS_SIGNATURE) - 1, TS_CRC);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2113      	movs	r1, #19
 80015be:	4825      	ldr	r0, [pc, #148]	@ (8001654 <process_command+0x120>)
 80015c0:	f7ff ff10 	bl	80013e4 <send_response>
		return;
 80015c4:	e041      	b.n	800164a <process_command+0x116>
		send_response((uint8_t *)TS_SIGNATURE, sizeof(TS_SIGNATURE), TS_CRC);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2114      	movs	r1, #20
 80015ca:	4822      	ldr	r0, [pc, #136]	@ (8001654 <process_command+0x120>)
 80015cc:	f7ff ff0a 	bl	80013e4 <send_response>
		return;
 80015d0:	e03b      	b.n	800164a <process_command+0x116>
		response[0] = 2; // serial version
 80015d2:	2302      	movs	r3, #2
 80015d4:	f88d 3000 	strb.w	r3, [sp]
		*(uint16_t*)&response[1] = swap_endian_uint16(TS_TABLE_BLOCKING_FACTOR);
 80015d8:	2304      	movs	r3, #4
 80015da:	f8ad 3001 	strh.w	r3, [sp, #1]
		*(uint16_t*)&response[3] = swap_endian_uint16(TS_BLOCKING_FACTOR);
 80015de:	f8ad 3003 	strh.w	r3, [sp, #3]
		send_response((uint8_t*)response, sizeof(response), TS_CRC);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2105      	movs	r1, #5
 80015e6:	4668      	mov	r0, sp
 80015e8:	f7ff fefc 	bl	80013e4 <send_response>
		return;
 80015ec:	e02d      	b.n	800164a <process_command+0x116>
		send_response((uint8_t*)&output_channels, sizeof(output_channels), TS_CRC);
 80015ee:	2201      	movs	r2, #1
 80015f0:	2165      	movs	r1, #101	@ 0x65
 80015f2:	4819      	ldr	r0, [pc, #100]	@ (8001658 <process_command+0x124>)
 80015f4:	f7ff fef6 	bl	80013e4 <send_response>
		return;
 80015f8:	e027      	b.n	800164a <process_command+0x116>
		handle_page_read_command(page, offset, size);
 80015fa:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 80015fe:	f8b4 1003 	ldrh.w	r1, [r4, #3]
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff ff82 	bl	800150c <handle_page_read_command>
		return;
 8001608:	e01f      	b.n	800164a <process_command+0x116>
		uint32_t page_crc = crc32_inc(0, calibration_values.data, sizeof(calibration_values.data));
 800160a:	f640 1238 	movw	r2, #2360	@ 0x938
 800160e:	4913      	ldr	r1, [pc, #76]	@ (800165c <process_command+0x128>)
 8001610:	2000      	movs	r0, #0
 8001612:	f009 f95d 	bl	800a8d0 <crc32_inc>
 8001616:	9000      	str	r0, [sp, #0]
		send_response((uint8_t*)&page_crc, sizeof(page_crc), TS_CRC);
 8001618:	2201      	movs	r2, #1
 800161a:	2104      	movs	r1, #4
 800161c:	4668      	mov	r0, sp
 800161e:	f7ff fee1 	bl	80013e4 <send_response>
		return;
 8001622:	e012      	b.n	800164a <process_command+0x116>
		memcpy(calibration_values.data, cmd + 6, size);
 8001624:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 8001628:	1da1      	adds	r1, r4, #6
 800162a:	480c      	ldr	r0, [pc, #48]	@ (800165c <process_command+0x128>)
 800162c:	f009 fa14 	bl	800aa58 <memcpy>
		return;
 8001630:	e00b      	b.n	800164a <process_command+0x116>
		memcpy(calibration_values.data, cmd + 6, size);
 8001632:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 8001636:	1da1      	adds	r1, r4, #6
 8001638:	4808      	ldr	r0, [pc, #32]	@ (800165c <process_command+0x128>)
 800163a:	f009 fa0d 	bl	800aa58 <memcpy>
		return;
 800163e:	e004      	b.n	800164a <process_command+0x116>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001640:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001644:	4806      	ldr	r0, [pc, #24]	@ (8001660 <process_command+0x12c>)
 8001646:	f003 fa50 	bl	8004aea <HAL_GPIO_TogglePin>
}
 800164a:	b003      	add	sp, #12
 800164c:	bd30      	pop	{r4, r5, pc}
 800164e:	bf00      	nop
 8001650:	0800b938 	.word	0x0800b938
 8001654:	0800b93c 	.word	0x0800b93c
 8001658:	20001784 	.word	0x20001784
 800165c:	20000e4c 	.word	0x20000e4c
 8001660:	40020800 	.word	0x40020800

08001664 <comms_task>:
{
 8001664:	b508      	push	{r3, lr}
        if (osMessageQueueGet(usb_rx_queue, &rx_packet, NULL, osWaitForever) == osOK)
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	2200      	movs	r2, #0
 800166c:	4906      	ldr	r1, [pc, #24]	@ (8001688 <comms_task+0x24>)
 800166e:	4807      	ldr	r0, [pc, #28]	@ (800168c <comms_task+0x28>)
 8001670:	6800      	ldr	r0, [r0, #0]
 8001672:	f7ff fdd7 	bl	8001224 <osMessageQueueGet>
 8001676:	2800      	cmp	r0, #0
 8001678:	d1f5      	bne.n	8001666 <comms_task+0x2>
            process_command(rx_packet.data, rx_packet.len);
 800167a:	4803      	ldr	r0, [pc, #12]	@ (8001688 <comms_task+0x24>)
 800167c:	f8b0 1040 	ldrh.w	r1, [r0, #64]	@ 0x40
 8001680:	f7ff ff58 	bl	8001534 <process_command>
 8001684:	e7ef      	b.n	8001666 <comms_task+0x2>
 8001686:	bf00      	nop
 8001688:	20000e08 	.word	0x20000e08
 800168c:	200017ec 	.word	0x200017ec

08001690 <controller_update_stats>:
void controller_save_configuration()
{
}

void controller_update_stats(void *arg)
{
 8001690:	b508      	push	{r3, lr}
  // this must not run before the controller is initialized
  engine.tps1 = sensor_tps_get(&tps1);
 8001692:	4803      	ldr	r0, [pc, #12]	@ (80016a0 <controller_update_stats+0x10>)
 8001694:	f002 f90a 	bl	80038ac <sensor_tps_get>
 8001698:	4b02      	ldr	r3, [pc, #8]	@ (80016a4 <controller_update_stats+0x14>)
 800169a:	ed83 0a13 	vstr	s0, [r3, #76]	@ 0x4c

}
 800169e:	bd08      	pop	{r3, pc}
 80016a0:	2000003c 	.word	0x2000003c
 80016a4:	2000186c 	.word	0x2000186c

080016a8 <controller_test_task>:

void controller_test_task(void *arg)
{
 80016a8:	b508      	push	{r3, lr}
 80016aa:	ed2d 8b02 	vpush	{d8}
 80016ae:	e01b      	b.n	80016e8 <controller_test_task+0x40>
    const percent_t etb_test_resolution = 0.02;
    const float_time_ms_t etb_test_period = 10000;
    time_ms_t etb_update_period = etb_test_period / ((float)2 * (etb_test_max - etb_test_min)) * etb_test_resolution;
    for (etb_test_target_pos = 20; etb_test_target_pos < 80; etb_test_target_pos += etb_test_resolution)
    {
      osDelay((uint32_t)etb_update_period);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff fc5f 	bl	8000f74 <osDelay>
      electronic_throttle_set(&etb1, etb_test_target_pos);
 80016b6:	eeb0 0a48 	vmov.f32	s0, s16
 80016ba:	4813      	ldr	r0, [pc, #76]	@ (8001708 <controller_test_task+0x60>)
 80016bc:	f000 fc46 	bl	8001f4c <electronic_throttle_set>
    for (etb_test_target_pos = 20; etb_test_target_pos < 80; etb_test_target_pos += etb_test_resolution)
 80016c0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800170c <controller_test_task+0x64>
 80016c4:	ee38 8a27 	vadd.f32	s16, s16, s15
 80016c8:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8001710 <controller_test_task+0x68>
 80016cc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	d4ec      	bmi.n	80016b0 <controller_test_task+0x8>
    }
    for (etb_test_target_pos = 80; etb_test_target_pos > 20; etb_test_target_pos -= etb_test_resolution)
 80016d6:	eeb0 8a67 	vmov.f32	s16, s15
 80016da:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 80016de:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	dc02      	bgt.n	80016ee <controller_test_task+0x46>
    for (etb_test_target_pos = 20; etb_test_target_pos < 80; etb_test_target_pos += etb_test_resolution)
 80016e8:	eeb3 8a04 	vmov.f32	s16, #52	@ 0x41a00000  20.0
 80016ec:	e7ec      	b.n	80016c8 <controller_test_task+0x20>
    {
      osDelay((uint32_t)etb_update_period);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f7ff fc40 	bl	8000f74 <osDelay>
      electronic_throttle_set(&etb1, etb_test_target_pos);
 80016f4:	eeb0 0a48 	vmov.f32	s0, s16
 80016f8:	4803      	ldr	r0, [pc, #12]	@ (8001708 <controller_test_task+0x60>)
 80016fa:	f000 fc27 	bl	8001f4c <electronic_throttle_set>
    for (etb_test_target_pos = 80; etb_test_target_pos > 20; etb_test_target_pos -= etb_test_resolution)
 80016fe:	eddf 7a03 	vldr	s15, [pc, #12]	@ 800170c <controller_test_task+0x64>
 8001702:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001706:	e7e8      	b.n	80016da <controller_test_task+0x32>
 8001708:	20001848 	.word	0x20001848
 800170c:	3ca3d70a 	.word	0x3ca3d70a
 8001710:	42a00000 	.word	0x42a00000

08001714 <controller_init_with_defaults>:
{
 8001714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001718:	b097      	sub	sp, #92	@ 0x5c
  engine.flags = osEventFlagsNew(&engine_flags_attributes);
 800171a:	484a      	ldr	r0, [pc, #296]	@ (8001844 <controller_init_with_defaults+0x130>)
 800171c:	f7ff fca6 	bl	800106c <osEventFlagsNew>
 8001720:	4e49      	ldr	r6, [pc, #292]	@ (8001848 <controller_init_with_defaults+0x134>)
 8001722:	64b0      	str	r0, [r6, #72]	@ 0x48
  engine.total_revolutions = 0;
 8001724:	2400      	movs	r4, #0
 8001726:	6034      	str	r4, [r6, #0]
  engine.crankshaft_angle = 0;
 8001728:	2700      	movs	r7, #0
 800172a:	6077      	str	r7, [r6, #4]
  engine.camshaft_angle = 0;
 800172c:	60b7      	str	r7, [r6, #8]
  engine.rpm = 0;
 800172e:	60f7      	str	r7, [r6, #12]
  engine.cylinder_count = 4;
 8001730:	f04f 0904 	mov.w	r9, #4
 8001734:	f886 9010 	strb.w	r9, [r6, #16]
  engine.spinning_state = SS_STOPPED;
 8001738:	7474      	strb	r4, [r6, #17]
  engine.trigger.initialized = false;
 800173a:	f806 4f1c 	strb.w	r4, [r6, #28]!
  controller_timing_start(&htim2);
 800173e:	4843      	ldr	r0, [pc, #268]	@ (800184c <controller_init_with_defaults+0x138>)
 8001740:	f007 fb82 	bl	8008e48 <controller_timing_start>
  analog_inputs_init(&hadc1);
 8001744:	4842      	ldr	r0, [pc, #264]	@ (8001850 <controller_init_with_defaults+0x13c>)
 8001746:	f7ff fb41 	bl	8000dcc <analog_inputs_init>
  configuration.engine_displacment = 2.4f;
 800174a:	4d42      	ldr	r5, [pc, #264]	@ (8001854 <controller_init_with_defaults+0x140>)
 800174c:	4b42      	ldr	r3, [pc, #264]	@ (8001858 <controller_init_with_defaults+0x144>)
 800174e:	602b      	str	r3, [r5, #0]
  configuration.firing_order = FO_1342;
 8001750:	712c      	strb	r4, [r5, #4]
  configuration.fuel_type = FUEL_TYPE_GAS;
 8001752:	716c      	strb	r4, [r5, #5]
  configuration.cranking_rpm_threshold = 400;
 8001754:	4b41      	ldr	r3, [pc, #260]	@ (800185c <controller_init_with_defaults+0x148>)
 8001756:	60eb      	str	r3, [r5, #12]
  configuration.cranking_advance = 10.0f;
 8001758:	4b41      	ldr	r3, [pc, #260]	@ (8001860 <controller_init_with_defaults+0x14c>)
 800175a:	612b      	str	r3, [r5, #16]
  configuration.cranking_throttle = 10;
 800175c:	616b      	str	r3, [r5, #20]
  configuration.ignition_mode = IM_WASTED_SPARK;
 800175e:	2303      	movs	r3, #3
 8001760:	762b      	strb	r3, [r5, #24]
  configuration.ignition_dwell = 3.0f;
 8001762:	4b40      	ldr	r3, [pc, #256]	@ (8001864 <controller_init_with_defaults+0x150>)
 8001764:	61eb      	str	r3, [r5, #28]
  configuration.ignition_is_multi_spark = false;
 8001766:	f885 4020 	strb.w	r4, [r5, #32]
  configuration.ignition_multi_spark_number_of_sparks = 0;
 800176a:	f885 4021 	strb.w	r4, [r5, #33]	@ 0x21
  configuration.ignition_multi_spark_rpm_threshold = 0;
 800176e:	626f      	str	r7, [r5, #36]	@ 0x24
  configuration.ignition_multi_spark_rest_time = 0;
 8001770:	62af      	str	r7, [r5, #40]	@ 0x28
  configuration.trigger.filtering = TRIGGER_FILTERING_NONE;
 8001772:	71ac      	strb	r4, [r5, #6]
  configuration.trigger.full_teeth = 60;
 8001774:	233c      	movs	r3, #60	@ 0x3c
 8001776:	71eb      	strb	r3, [r5, #7]
  configuration.trigger.missing_teeth = 2;
 8001778:	2302      	movs	r3, #2
 800177a:	722b      	strb	r3, [r5, #8]
  trigger_init(&engine.trigger, &configuration.trigger);
 800177c:	1da9      	adds	r1, r5, #6
 800177e:	4630      	mov	r0, r6
 8001780:	f007 fc68 	bl	8009054 <trigger_init>
  dc_motor_init_simple_Hbridge(&etb1_motor, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4, 25000);
 8001784:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 800189c <controller_init_with_defaults+0x188>
 8001788:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	230c      	movs	r3, #12
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	2308      	movs	r3, #8
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	464b      	mov	r3, r9
 8001798:	4622      	mov	r2, r4
 800179a:	4933      	ldr	r1, [pc, #204]	@ (8001868 <controller_init_with_defaults+0x154>)
 800179c:	4640      	mov	r0, r8
 800179e:	f000 fa45 	bl	8001c2c <dc_motor_init_simple_Hbridge>
  pid_init(&etb1_pid);
 80017a2:	4f32      	ldr	r7, [pc, #200]	@ (800186c <controller_init_with_defaults+0x158>)
 80017a4:	4638      	mov	r0, r7
 80017a6:	f001 fa13 	bl	8002bd0 <pid_init>
  electronic_throttle_init(&etb1, &etb1_pid, &tps1, &etb1_motor);
 80017aa:	4e31      	ldr	r6, [pc, #196]	@ (8001870 <controller_init_with_defaults+0x15c>)
 80017ac:	4643      	mov	r3, r8
 80017ae:	4a31      	ldr	r2, [pc, #196]	@ (8001874 <controller_init_with_defaults+0x160>)
 80017b0:	4639      	mov	r1, r7
 80017b2:	4630      	mov	r0, r6
 80017b4:	f000 fb98 	bl	8001ee8 <electronic_throttle_init>
  electronic_throttle_set(&etb1, 70);
 80017b8:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8001878 <controller_init_with_defaults+0x164>
 80017bc:	4630      	mov	r0, r6
 80017be:	f000 fbc5 	bl	8001f4c <electronic_throttle_set>
  configuration.clt_sensor_type = SENSOR_CLT_TYPE_TEST;
 80017c2:	f885 4940 	strb.w	r4, [r5, #2368]	@ 0x940
  sensor_clt_init(&sensor_clt, configuration.clt_sensor_type);
 80017c6:	4621      	mov	r1, r4
 80017c8:	482c      	ldr	r0, [pc, #176]	@ (800187c <controller_init_with_defaults+0x168>)
 80017ca:	f002 f989 	bl	8003ae0 <sensor_clt_init>
  configuration.iat_sensor_type = SENSOR_IAT_TYPE_TEST;
 80017ce:	f885 4941 	strb.w	r4, [r5, #2369]	@ 0x941
  sensor_iat_init(&sensor_iat, configuration.iat_sensor_type);
 80017d2:	4621      	mov	r1, r4
 80017d4:	482a      	ldr	r0, [pc, #168]	@ (8001880 <controller_init_with_defaults+0x16c>)
 80017d6:	f002 f905 	bl	80039e4 <sensor_iat_init>
  configuration.map_sensor_type = SENSOR_MAP_TYPE_TEST;
 80017da:	f885 4942 	strb.w	r4, [r5, #2370]	@ 0x942
  sensor_map_init(&sensor_map, configuration.map_sensor_type);
 80017de:	4621      	mov	r1, r4
 80017e0:	4828      	ldr	r0, [pc, #160]	@ (8001884 <controller_init_with_defaults+0x170>)
 80017e2:	f002 f8d9 	bl	8003998 <sensor_map_init>
  sensor_ops_init(&sensor_ops);
 80017e6:	4828      	ldr	r0, [pc, #160]	@ (8001888 <controller_init_with_defaults+0x174>)
 80017e8:	f002 f9fc 	bl	8003be4 <sensor_ops_init>
  ignition_output_conf_t ignition_output_conf =
 80017ec:	ad0e      	add	r5, sp, #56	@ 0x38
 80017ee:	4e27      	ldr	r6, [pc, #156]	@ (800188c <controller_init_with_defaults+0x178>)
 80017f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80017f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017f8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  ignition_init(&ignition_output_conf);
 80017fc:	a80e      	add	r0, sp, #56	@ 0x38
 80017fe:	f000 ffdb 	bl	80027b8 <ignition_init>
    osTimerId_t timer_id = osTimerNew(
 8001802:	4623      	mov	r3, r4
 8001804:	4622      	mov	r2, r4
 8001806:	2101      	movs	r1, #1
 8001808:	4821      	ldr	r0, [pc, #132]	@ (8001890 <controller_init_with_defaults+0x17c>)
 800180a:	f7ff fbc1 	bl	8000f90 <osTimerNew>
    osTimerStart(timer_id, 10); // every 10 tick = every 10ms = 100Hz
 800180e:	210a      	movs	r1, #10
 8001810:	f7ff fc12 	bl	8001038 <osTimerStart>
    comms_init();
 8001814:	f7ff fe08 	bl	8001428 <comms_init>
    const osThreadAttr_t controller_test_attr = {
 8001818:	ad05      	add	r5, sp, #20
 800181a:	2224      	movs	r2, #36	@ 0x24
 800181c:	4621      	mov	r1, r4
 800181e:	4628      	mov	r0, r5
 8001820:	f009 f8e6 	bl	800a9f0 <memset>
 8001824:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <controller_init_with_defaults+0x180>)
 8001826:	9305      	str	r3, [sp, #20]
 8001828:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800182c:	930a      	str	r3, [sp, #40]	@ 0x28
 800182e:	2318      	movs	r3, #24
 8001830:	930b      	str	r3, [sp, #44]	@ 0x2c
    osThreadNew(controller_test_task, NULL, &controller_test_attr);
 8001832:	462a      	mov	r2, r5
 8001834:	4621      	mov	r1, r4
 8001836:	4818      	ldr	r0, [pc, #96]	@ (8001898 <controller_init_with_defaults+0x184>)
 8001838:	f7ff fb42 	bl	8000ec0 <osThreadNew>
}
 800183c:	b017      	add	sp, #92	@ 0x5c
 800183e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001842:	bf00      	nop
 8001844:	0800bd74 	.word	0x0800bd74
 8001848:	2000186c 	.word	0x2000186c
 800184c:	200069b0 	.word	0x200069b0
 8001850:	20000210 	.word	0x20000210
 8001854:	200018cc 	.word	0x200018cc
 8001858:	4019999a 	.word	0x4019999a
 800185c:	43c80000 	.word	0x43c80000
 8001860:	41200000 	.word	0x41200000
 8001864:	40400000 	.word	0x40400000
 8001868:	20006968 	.word	0x20006968
 800186c:	20000000 	.word	0x20000000
 8001870:	20001848 	.word	0x20001848
 8001874:	2000003c 	.word	0x2000003c
 8001878:	428c0000 	.word	0x428c0000
 800187c:	20001818 	.word	0x20001818
 8001880:	20001800 	.word	0x20001800
 8001884:	200017f8 	.word	0x200017f8
 8001888:	200017f0 	.word	0x200017f0
 800188c:	0800b868 	.word	0x0800b868
 8001890:	08001691 	.word	0x08001691
 8001894:	0800b950 	.word	0x0800b950
 8001898:	080016a9 	.word	0x080016a9
 800189c:	20001830 	.word	0x20001830

080018a0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80018a0:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */
  
  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_CRC_Init+0x18>)
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <MX_CRC_Init+0x1c>)
 80018a6:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018a8:	f002 fe1a 	bl	80044e0 <HAL_CRC_Init>
 80018ac:	b900      	cbnz	r0, 80018b0 <MX_CRC_Init+0x10>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80018ae:	bd08      	pop	{r3, pc}
    Error_Handler();
 80018b0:	f001 f91a 	bl	8002ae8 <Error_Handler>
}
 80018b4:	e7fb      	b.n	80018ae <MX_CRC_Init+0xe>
 80018b6:	bf00      	nop
 80018b8:	20002268 	.word	0x20002268
 80018bc:	40023000 	.word	0x40023000

080018c0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 80018c0:	6802      	ldr	r2, [r0, #0]
 80018c2:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <HAL_CRC_MspInit+0x28>)
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d000      	beq.n	80018ca <HAL_CRC_MspInit+0xa>
 80018c8:	4770      	bx	lr
{
 80018ca:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80018cc:	2300      	movs	r3, #0
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_CRC_MspInit+0x2c>)
 80018d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80018d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80018da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80018e4:	b002      	add	sp, #8
 80018e6:	4770      	bx	lr
 80018e8:	40023000 	.word	0x40023000
 80018ec:	40023800 	.word	0x40023800

080018f0 <dc_motor_set>:
 * @param dir the desired direction of the motor
 * @param duty_cycle a number between 0 and 255 not a percentage
 */
void dc_motor_set(dc_motor_t *motor, dc_motor_direction_t dir, uint8_t duty_cycle)
{
	if (motor == NULL || motor->timer == NULL)
 80018f0:	2800      	cmp	r0, #0
 80018f2:	f000 8138 	beq.w	8001b66 <dc_motor_set+0x276>
{
 80018f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018fa:	460d      	mov	r5, r1
 80018fc:	4616      	mov	r6, r2
 80018fe:	4604      	mov	r4, r0
	if (motor == NULL || motor->timer == NULL)
 8001900:	6807      	ldr	r7, [r0, #0]
 8001902:	2f00      	cmp	r7, #0
 8001904:	d052      	beq.n	80019ac <dc_motor_set+0xbc>
	if (duty_cycle < 0 || duty_cycle > 255)
	{
		return;
	}
	// Map duty cycle (0-255) to timer compare value
	uint32_t compare_value = (uint32_t)((duty_cycle / 255.0) * __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001906:	4610      	mov	r0, r2
 8001908:	f7fe fdf4 	bl	80004f4 <__aeabi_i2d>
 800190c:	a396      	add	r3, pc, #600	@ (adr r3, 8001b68 <dc_motor_set+0x278>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7fe ff83 	bl	800081c <__aeabi_ddiv>
 8001916:	4680      	mov	r8, r0
 8001918:	4689      	mov	r9, r1
 800191a:	683f      	ldr	r7, [r7, #0]
 800191c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800191e:	f7fe fdd9 	bl	80004d4 <__aeabi_ui2d>
 8001922:	4642      	mov	r2, r8
 8001924:	464b      	mov	r3, r9
 8001926:	f7fe fe4f 	bl	80005c8 <__aeabi_dmul>
 800192a:	f7ff f85f 	bl	80009ec <__aeabi_d2uiz>
	
	switch (dir)
 800192e:	b1fd      	cbz	r5, 8001970 <dc_motor_set+0x80>
 8001930:	2d01      	cmp	r5, #1
 8001932:	d079      	beq.n	8001a28 <dc_motor_set+0x138>
		}
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
		break;
	default:
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001934:	6863      	ldr	r3, [r4, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 80cf 	bne.w	8001ada <dc_motor_set+0x1ea>
 800193c:	637b      	str	r3, [r7, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 800193e:	68a3      	ldr	r3, [r4, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	f040 80d7 	bne.w	8001af4 <dc_motor_set+0x204>
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2200      	movs	r2, #0
 800194c:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 800194e:	68e3      	ldr	r3, [r4, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	f040 80e2 	bne.w	8001b1a <dc_motor_set+0x22a>
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 800195e:	6923      	ldr	r3, [r4, #16]
 8001960:	2b00      	cmp	r3, #0
 8001962:	f040 80ed 	bne.w	8001b40 <dc_motor_set+0x250>
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2200      	movs	r2, #0
 800196c:	635a      	str	r2, [r3, #52]	@ 0x34
 800196e:	e01b      	b.n	80019a8 <dc_motor_set+0xb8>
		if (motor->timer_channel_output_3 != 0 && motor->timer_channel_output_4 != 0)
 8001970:	68e3      	ldr	r3, [r4, #12]
 8001972:	b16b      	cbz	r3, 8001990 <dc_motor_set+0xa0>
 8001974:	6922      	ldr	r2, [r4, #16]
 8001976:	b15a      	cbz	r2, 8001990 <dc_motor_set+0xa0>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001978:	2b04      	cmp	r3, #4
 800197a:	d019      	beq.n	80019b0 <dc_motor_set+0xc0>
 800197c:	2b08      	cmp	r3, #8
 800197e:	d01a      	beq.n	80019b6 <dc_motor_set+0xc6>
 8001980:	2300      	movs	r3, #0
 8001982:	643b      	str	r3, [r7, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001984:	6923      	ldr	r3, [r4, #16]
 8001986:	b9cb      	cbnz	r3, 80019bc <dc_motor_set+0xcc>
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800198e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001990:	68a3      	ldr	r3, [r4, #8]
 8001992:	bb33      	cbnz	r3, 80019e2 <dc_motor_set+0xf2>
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2200      	movs	r2, #0
 800199a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, compare_value);
 800199c:	6863      	ldr	r3, [r4, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d132      	bne.n	8001a08 <dc_motor_set+0x118>
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6358      	str	r0, [r3, #52]	@ 0x34
		/**
		 * @todo throw an error
		 */
		break;
	}
	motor->current_duty_cycle = duty_cycle;
 80019a8:	7566      	strb	r6, [r4, #21]
	motor->current_direction = dir;
 80019aa:	7525      	strb	r5, [r4, #20]
}
 80019ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 80019b0:	2300      	movs	r3, #0
 80019b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019b4:	e7e6      	b.n	8001984 <dc_motor_set+0x94>
 80019b6:	2300      	movs	r3, #0
 80019b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019ba:	e7e3      	b.n	8001984 <dc_motor_set+0x94>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d006      	beq.n	80019ce <dc_motor_set+0xde>
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d009      	beq.n	80019d8 <dc_motor_set+0xe8>
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80019cc:	e7e0      	b.n	8001990 <dc_motor_set+0xa0>
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80019d6:	e7db      	b.n	8001990 <dc_motor_set+0xa0>
 80019d8:	6823      	ldr	r3, [r4, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019e0:	e7d6      	b.n	8001990 <dc_motor_set+0xa0>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d006      	beq.n	80019f4 <dc_motor_set+0x104>
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d009      	beq.n	80019fe <dc_motor_set+0x10e>
 80019ea:	6823      	ldr	r3, [r4, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2200      	movs	r2, #0
 80019f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80019f2:	e7d3      	b.n	800199c <dc_motor_set+0xac>
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2200      	movs	r2, #0
 80019fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80019fc:	e7ce      	b.n	800199c <dc_motor_set+0xac>
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2200      	movs	r2, #0
 8001a04:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a06:	e7c9      	b.n	800199c <dc_motor_set+0xac>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, compare_value);
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d005      	beq.n	8001a18 <dc_motor_set+0x128>
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d007      	beq.n	8001a20 <dc_motor_set+0x130>
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6418      	str	r0, [r3, #64]	@ 0x40
 8001a16:	e7c7      	b.n	80019a8 <dc_motor_set+0xb8>
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6398      	str	r0, [r3, #56]	@ 0x38
 8001a1e:	e7c3      	b.n	80019a8 <dc_motor_set+0xb8>
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8001a26:	e7bf      	b.n	80019a8 <dc_motor_set+0xb8>
		if (motor->timer_channel_output_3 != 0 && motor->timer_channel_output_4 != 0)
 8001a28:	68e3      	ldr	r3, [r4, #12]
 8001a2a:	b16b      	cbz	r3, 8001a48 <dc_motor_set+0x158>
 8001a2c:	6923      	ldr	r3, [r4, #16]
 8001a2e:	b15b      	cbz	r3, 8001a48 <dc_motor_set+0x158>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d016      	beq.n	8001a62 <dc_motor_set+0x172>
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d017      	beq.n	8001a68 <dc_motor_set+0x178>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	643b      	str	r3, [r7, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001a3c:	68e3      	ldr	r3, [r4, #12]
 8001a3e:	b9b3      	cbnz	r3, 8001a6e <dc_motor_set+0x17e>
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a46:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001a48:	6863      	ldr	r3, [r4, #4]
 8001a4a:	bb1b      	cbnz	r3, 8001a94 <dc_motor_set+0x1a4>
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2200      	movs	r2, #0
 8001a52:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
 8001a54:	68a3      	ldr	r3, [r4, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d12f      	bne.n	8001aba <dc_motor_set+0x1ca>
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6358      	str	r0, [r3, #52]	@ 0x34
 8001a60:	e7a2      	b.n	80019a8 <dc_motor_set+0xb8>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001a62:	2300      	movs	r3, #0
 8001a64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a66:	e7e9      	b.n	8001a3c <dc_motor_set+0x14c>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a6c:	e7e6      	b.n	8001a3c <dc_motor_set+0x14c>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d006      	beq.n	8001a80 <dc_motor_set+0x190>
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d009      	beq.n	8001a8a <dc_motor_set+0x19a>
 8001a76:	6823      	ldr	r3, [r4, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a7e:	e7e3      	b.n	8001a48 <dc_motor_set+0x158>
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a86:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a88:	e7de      	b.n	8001a48 <dc_motor_set+0x158>
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a92:	e7d9      	b.n	8001a48 <dc_motor_set+0x158>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d006      	beq.n	8001aa6 <dc_motor_set+0x1b6>
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d009      	beq.n	8001ab0 <dc_motor_set+0x1c0>
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aa4:	e7d6      	b.n	8001a54 <dc_motor_set+0x164>
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	639a      	str	r2, [r3, #56]	@ 0x38
 8001aae:	e7d1      	b.n	8001a54 <dc_motor_set+0x164>
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ab8:	e7cc      	b.n	8001a54 <dc_motor_set+0x164>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d005      	beq.n	8001aca <dc_motor_set+0x1da>
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d007      	beq.n	8001ad2 <dc_motor_set+0x1e2>
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6418      	str	r0, [r3, #64]	@ 0x40
 8001ac8:	e76e      	b.n	80019a8 <dc_motor_set+0xb8>
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6398      	str	r0, [r3, #56]	@ 0x38
 8001ad0:	e76a      	b.n	80019a8 <dc_motor_set+0xb8>
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8001ad8:	e766      	b.n	80019a8 <dc_motor_set+0xb8>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d004      	beq.n	8001ae8 <dc_motor_set+0x1f8>
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d005      	beq.n	8001aee <dc_motor_set+0x1fe>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ae6:	e72a      	b.n	800193e <dc_motor_set+0x4e>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001aec:	e727      	b.n	800193e <dc_motor_set+0x4e>
 8001aee:	2300      	movs	r3, #0
 8001af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001af2:	e724      	b.n	800193e <dc_motor_set+0x4e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d006      	beq.n	8001b06 <dc_motor_set+0x216>
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d009      	beq.n	8001b10 <dc_motor_set+0x220>
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2200      	movs	r2, #0
 8001b02:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b04:	e723      	b.n	800194e <dc_motor_set+0x5e>
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b0e:	e71e      	b.n	800194e <dc_motor_set+0x5e>
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2200      	movs	r2, #0
 8001b16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b18:	e719      	b.n	800194e <dc_motor_set+0x5e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d006      	beq.n	8001b2c <dc_motor_set+0x23c>
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d009      	beq.n	8001b36 <dc_motor_set+0x246>
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b2a:	e718      	b.n	800195e <dc_motor_set+0x6e>
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2200      	movs	r2, #0
 8001b32:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b34:	e713      	b.n	800195e <dc_motor_set+0x6e>
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b3e:	e70e      	b.n	800195e <dc_motor_set+0x6e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d006      	beq.n	8001b52 <dc_motor_set+0x262>
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d009      	beq.n	8001b5c <dc_motor_set+0x26c>
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b50:	e72a      	b.n	80019a8 <dc_motor_set+0xb8>
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2200      	movs	r2, #0
 8001b58:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b5a:	e725      	b.n	80019a8 <dc_motor_set+0xb8>
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2200      	movs	r2, #0
 8001b62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b64:	e720      	b.n	80019a8 <dc_motor_set+0xb8>
 8001b66:	4770      	bx	lr
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	406fe000 	.word	0x406fe000

08001b70 <dc_motor_disable>:
/**
 * @brief disables the motor.
 */
void dc_motor_disable(dc_motor_t *motor)
{
	if (motor == NULL || motor->timer == NULL)
 8001b70:	4603      	mov	r3, r0
 8001b72:	b178      	cbz	r0, 8001b94 <dc_motor_disable+0x24>
 8001b74:	6802      	ldr	r2, [r0, #0]
 8001b76:	b16a      	cbz	r2, 8001b94 <dc_motor_disable+0x24>
		 * @todo throw an error
		 */
	}

	// Set duty cycle to 0 for both channels
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001b78:	6841      	ldr	r1, [r0, #4]
 8001b7a:	b961      	cbnz	r1, 8001b96 <dc_motor_disable+0x26>
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	6351      	str	r1, [r2, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	b9c2      	cbnz	r2, 8001bb6 <dc_motor_disable+0x46>
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	2100      	movs	r1, #0
 8001b8a:	6351      	str	r1, [r2, #52]	@ 0x34
	motor->current_duty_cycle = 0;
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	755a      	strb	r2, [r3, #21]
	motor->status = MOTOR_STATE_DISABLED;
 8001b90:	2202      	movs	r2, #2
 8001b92:	759a      	strb	r2, [r3, #22]
}
 8001b94:	4770      	bx	lr
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001b96:	2904      	cmp	r1, #4
 8001b98:	d005      	beq.n	8001ba6 <dc_motor_disable+0x36>
 8001b9a:	2908      	cmp	r1, #8
 8001b9c:	d007      	beq.n	8001bae <dc_motor_disable+0x3e>
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	6411      	str	r1, [r2, #64]	@ 0x40
 8001ba4:	e7ec      	b.n	8001b80 <dc_motor_disable+0x10>
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	2100      	movs	r1, #0
 8001baa:	6391      	str	r1, [r2, #56]	@ 0x38
 8001bac:	e7e8      	b.n	8001b80 <dc_motor_disable+0x10>
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8001bb4:	e7e4      	b.n	8001b80 <dc_motor_disable+0x10>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001bb6:	2a04      	cmp	r2, #4
 8001bb8:	d006      	beq.n	8001bc8 <dc_motor_disable+0x58>
 8001bba:	2a08      	cmp	r2, #8
 8001bbc:	d009      	beq.n	8001bd2 <dc_motor_disable+0x62>
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	6411      	str	r1, [r2, #64]	@ 0x40
 8001bc6:	e7e1      	b.n	8001b8c <dc_motor_disable+0x1c>
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	2100      	movs	r1, #0
 8001bce:	6391      	str	r1, [r2, #56]	@ 0x38
 8001bd0:	e7dc      	b.n	8001b8c <dc_motor_disable+0x1c>
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8001bda:	e7d7      	b.n	8001b8c <dc_motor_disable+0x1c>

08001bdc <dc_motor_set_timer_freq>:
{
 8001bdc:	b538      	push	{r3, r4, r5, lr}
 8001bde:	4605      	mov	r5, r0
	if (frequency == 0)
 8001be0:	b199      	cbz	r1, 8001c0a <dc_motor_set_timer_freq+0x2e>
 8001be2:	460c      	mov	r4, r1
	if (frequency > DC_MOTOR_MAX_FREQUENCY)
 8001be4:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001be8:	4299      	cmp	r1, r3
 8001bea:	d900      	bls.n	8001bee <dc_motor_set_timer_freq+0x12>
		frequency = DC_MOTOR_MAX_FREQUENCY;
 8001bec:	461c      	mov	r4, r3
	uint32_t timer_clock = HAL_RCC_GetSysClockFreq(); // Get the timer clock frequency
 8001bee:	f004 f8cb 	bl	8005d88 <HAL_RCC_GetSysClockFreq>
	for (prescaler = 0; prescaler <= 0xFFFF; prescaler++)
 8001bf2:	2200      	movs	r2, #0
		auto_reload = (timer_clock / ((prescaler + 1) * frequency)) - 1;
 8001bf4:	fb02 4304 	mla	r3, r2, r4, r4
 8001bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfc:	3b01      	subs	r3, #1
		if (auto_reload <= 0xFFFF)
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c02:	d305      	bcc.n	8001c10 <dc_motor_set_timer_freq+0x34>
	for (prescaler = 0; prescaler <= 0xFFFF; prescaler++)
 8001c04:	3201      	adds	r2, #1
 8001c06:	b292      	uxth	r2, r2
		auto_reload = (timer_clock / ((prescaler + 1) * frequency)) - 1;
 8001c08:	e7f4      	b.n	8001bf4 <dc_motor_set_timer_freq+0x18>
		dc_motor_disable(motor);
 8001c0a:	f7ff ffb1 	bl	8001b70 <dc_motor_disable>
		return;
 8001c0e:	e00c      	b.n	8001c2a <dc_motor_set_timer_freq+0x4e>
	__HAL_TIM_SET_PRESCALER((TIM_HandleTypeDef *)motor->timer, prescaler);
 8001c10:	6829      	ldr	r1, [r5, #0]
 8001c12:	6809      	ldr	r1, [r1, #0]
 8001c14:	628a      	str	r2, [r1, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer, auto_reload);
 8001c16:	682a      	ldr	r2, [r5, #0]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001c1c:	682a      	ldr	r2, [r5, #0]
 8001c1e:	60d3      	str	r3, [r2, #12]
	dc_motor_set(motor, motor->current_direction, motor->current_duty_cycle);
 8001c20:	7d6a      	ldrb	r2, [r5, #21]
 8001c22:	7d29      	ldrb	r1, [r5, #20]
 8001c24:	4628      	mov	r0, r5
 8001c26:	f7ff fe63 	bl	80018f0 <dc_motor_set>
}
 8001c2a:	bd38      	pop	{r3, r4, r5, pc}

08001c2c <dc_motor_init_simple_Hbridge>:
    if (motor == NULL || timer == NULL)
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	f000 8091 	beq.w	8001d54 <dc_motor_init_simple_Hbridge+0x128>
{
 8001c32:	b510      	push	{r4, lr}
 8001c34:	4604      	mov	r4, r0
    if (motor == NULL || timer == NULL)
 8001c36:	2900      	cmp	r1, #0
 8001c38:	d03f      	beq.n	8001cba <dc_motor_init_simple_Hbridge+0x8e>
    motor->timer = timer;
 8001c3a:	6001      	str	r1, [r0, #0]
    motor->timer_channel_output_1 = timer_channel_output_1;
 8001c3c:	6042      	str	r2, [r0, #4]
    motor->timer_channel_output_2 = timer_channel_output_2;
 8001c3e:	6083      	str	r3, [r0, #8]
	motor->timer_channel_output_3 = timer_channel_output_3;
 8001c40:	9b02      	ldr	r3, [sp, #8]
 8001c42:	60c3      	str	r3, [r0, #12]
    motor->timer_channel_output_4 = timer_channel_output_4;
 8001c44:	9b03      	ldr	r3, [sp, #12]
 8001c46:	6103      	str	r3, [r0, #16]
	motor->current_direction = MOTOR_DIRECTION_FORWARD;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	7503      	strb	r3, [r0, #20]
	motor->status = MOTOR_STATE_NORMAL;
 8001c4c:	7583      	strb	r3, [r0, #22]
	HAL_TIM_Base_Start((TIM_HandleTypeDef *)motor->timer);
 8001c4e:	4608      	mov	r0, r1
 8001c50:	f004 fa8e 	bl	8006170 <HAL_TIM_Base_Start>
	dc_motor_set_timer_freq(motor, frequency);
 8001c54:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f7ff ffbf 	bl	8001bdc <dc_motor_set_timer_freq>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001c5e:	6863      	ldr	r3, [r4, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d12b      	bne.n	8001cbc <dc_motor_init_simple_Hbridge+0x90>
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001c6c:	68a3      	ldr	r3, [r4, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d137      	bne.n	8001ce2 <dc_motor_init_simple_Hbridge+0xb6>
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2200      	movs	r2, #0
 8001c78:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001c7a:	68e3      	ldr	r3, [r4, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d143      	bne.n	8001d08 <dc_motor_init_simple_Hbridge+0xdc>
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2200      	movs	r2, #0
 8001c86:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001c88:	6923      	ldr	r3, [r4, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d14f      	bne.n	8001d2e <dc_motor_init_simple_Hbridge+0x102>
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2200      	movs	r2, #0
 8001c94:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1);
 8001c96:	6861      	ldr	r1, [r4, #4]
 8001c98:	6820      	ldr	r0, [r4, #0]
 8001c9a:	f004 fe77 	bl	800698c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2);
 8001c9e:	68a1      	ldr	r1, [r4, #8]
 8001ca0:	6820      	ldr	r0, [r4, #0]
 8001ca2:	f004 fe73 	bl	800698c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3);
 8001ca6:	68e1      	ldr	r1, [r4, #12]
 8001ca8:	6820      	ldr	r0, [r4, #0]
 8001caa:	f004 fe6f 	bl	800698c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4);
 8001cae:	6921      	ldr	r1, [r4, #16]
 8001cb0:	6820      	ldr	r0, [r4, #0]
 8001cb2:	f004 fe6b 	bl	800698c <HAL_TIM_PWM_Start>
	motor->current_duty_cycle = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	7563      	strb	r3, [r4, #21]
}
 8001cba:	bd10      	pop	{r4, pc}
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d006      	beq.n	8001cce <dc_motor_init_simple_Hbridge+0xa2>
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d009      	beq.n	8001cd8 <dc_motor_init_simple_Hbridge+0xac>
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ccc:	e7ce      	b.n	8001c6c <dc_motor_init_simple_Hbridge+0x40>
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cd6:	e7c9      	b.n	8001c6c <dc_motor_init_simple_Hbridge+0x40>
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ce0:	e7c4      	b.n	8001c6c <dc_motor_init_simple_Hbridge+0x40>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d006      	beq.n	8001cf4 <dc_motor_init_simple_Hbridge+0xc8>
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d009      	beq.n	8001cfe <dc_motor_init_simple_Hbridge+0xd2>
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cf2:	e7c2      	b.n	8001c7a <dc_motor_init_simple_Hbridge+0x4e>
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cfc:	e7bd      	b.n	8001c7a <dc_motor_init_simple_Hbridge+0x4e>
 8001cfe:	6823      	ldr	r3, [r4, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d06:	e7b8      	b.n	8001c7a <dc_motor_init_simple_Hbridge+0x4e>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d006      	beq.n	8001d1a <dc_motor_init_simple_Hbridge+0xee>
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d009      	beq.n	8001d24 <dc_motor_init_simple_Hbridge+0xf8>
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2200      	movs	r2, #0
 8001d16:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d18:	e7b6      	b.n	8001c88 <dc_motor_init_simple_Hbridge+0x5c>
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d22:	e7b1      	b.n	8001c88 <dc_motor_init_simple_Hbridge+0x5c>
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d2c:	e7ac      	b.n	8001c88 <dc_motor_init_simple_Hbridge+0x5c>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d006      	beq.n	8001d40 <dc_motor_init_simple_Hbridge+0x114>
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d009      	beq.n	8001d4a <dc_motor_init_simple_Hbridge+0x11e>
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d3e:	e7aa      	b.n	8001c96 <dc_motor_init_simple_Hbridge+0x6a>
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2200      	movs	r2, #0
 8001d46:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d48:	e7a5      	b.n	8001c96 <dc_motor_init_simple_Hbridge+0x6a>
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d52:	e7a0      	b.n	8001c96 <dc_motor_init_simple_Hbridge+0x6a>
 8001d54:	4770      	bx	lr
	...

08001d58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d58:	b500      	push	{lr}
 8001d5a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	9201      	str	r2, [sp, #4]
 8001d60:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <MX_DMA_Init+0x30>)
 8001d62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d64:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8001d68:	6319      	str	r1, [r3, #48]	@ 0x30
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001d74:	2105      	movs	r1, #5
 8001d76:	2038      	movs	r0, #56	@ 0x38
 8001d78:	f002 fb9e 	bl	80044b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d7c:	2038      	movs	r0, #56	@ 0x38
 8001d7e:	f002 fbab 	bl	80044d8 <HAL_NVIC_EnableIRQ>

}
 8001d82:	b003      	add	sp, #12
 8001d84:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d88:	40023800 	.word	0x40023800

08001d8c <electronic_throttle_update>:
    }
    etb->target_position = position;
}

void electronic_throttle_update(void *arg)
{
 8001d8c:	b530      	push	{r4, r5, lr}
 8001d8e:	ed2d 8b02 	vpush	{d8}
 8001d92:	b083      	sub	sp, #12
    
    electronic_throttle_t *etb = (electronic_throttle_t *)arg;
    if (etb == NULL || etb->pid == NULL || etb->sensor == NULL || etb->motor == NULL)
 8001d94:	2800      	cmp	r0, #0
 8001d96:	d04a      	beq.n	8001e2e <electronic_throttle_update+0xa2>
 8001d98:	4604      	mov	r4, r0
 8001d9a:	6883      	ldr	r3, [r0, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d046      	beq.n	8001e2e <electronic_throttle_update+0xa2>
 8001da0:	68c0      	ldr	r0, [r0, #12]
 8001da2:	2800      	cmp	r0, #0
 8001da4:	d043      	beq.n	8001e2e <electronic_throttle_update+0xa2>
 8001da6:	6863      	ldr	r3, [r4, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d040      	beq.n	8001e2e <electronic_throttle_update+0xa2>
    {
        log_error("Electronic throttle not initialized");
        return;
    }
    percent_t position = sensor_tps_get(etb->sensor);
 8001dac:	f001 fd7e 	bl	80038ac <sensor_tps_get>
 8001db0:	eeb0 8a40 	vmov.f32	s16, s0
    etb->current_position = position;
 8001db4:	ed84 0a05 	vstr	s0, [r4, #20]
    pid_set_setpoint(etb->pid, etb->target_position);
 8001db8:	ed94 0a04 	vldr	s0, [r4, #16]
 8001dbc:	68a0      	ldr	r0, [r4, #8]
 8001dbe:	f000 ff10 	bl	8002be2 <pid_set_setpoint>
    percent_t motor_effort = pid_compute(etb->pid, get_time_us(), position);
 8001dc2:	68a5      	ldr	r5, [r4, #8]
 8001dc4:	f007 f86e 	bl	8008ea4 <get_time_us>
 8001dc8:	4601      	mov	r1, r0
 8001dca:	eeb0 0a48 	vmov.f32	s0, s16
 8001dce:	4628      	mov	r0, r5
 8001dd0:	f000 ff0a 	bl	8002be8 <pid_compute>
    dc_motor_direction_t dir = motor_effort > 0 ? MOTOR_DIRECTION_FORWARD : MOTOR_DIRECTION_REVERSE;
 8001dd4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ddc:	bfd4      	ite	le
 8001dde:	2101      	movle	r1, #1
 8001de0:	2100      	movgt	r1, #0
    /* Limiting the end of travel duty cycle for protection */
    if (etb->is_duty_cycle_limiting_enabled)
 8001de2:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d051      	beq.n	8001e8e <electronic_throttle_update+0x102>
    {
        if (ABS(position - 100.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 8001dea:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 8001edc <electronic_throttle_update+0x150>
 8001dee:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001df2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfa:	d41f      	bmi.n	8001e3c <electronic_throttle_update+0xb0>
 8001dfc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001e00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e08:	bf4c      	ite	mi
 8001e0a:	2301      	movmi	r3, #1
 8001e0c:	2300      	movpl	r3, #0
 8001e0e:	b30b      	cbz	r3, 8001e54 <electronic_throttle_update+0xc8>
        {
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_upper);
 8001e10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e18:	d41a      	bmi.n	8001e50 <electronic_throttle_update+0xc4>
 8001e1a:	edd4 7a07 	vldr	s15, [r4, #28]
 8001e1e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8001e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e26:	d515      	bpl.n	8001e54 <electronic_throttle_update+0xc8>
 8001e28:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2c:	e012      	b.n	8001e54 <electronic_throttle_update+0xc8>
        log_error("Electronic throttle not initialized");
 8001e2e:	482c      	ldr	r0, [pc, #176]	@ (8001ee0 <electronic_throttle_update+0x154>)
 8001e30:	f000 f8a0 	bl	8001f74 <log_error>
        {
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_lower);
        }
    }
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
}
 8001e34:	b003      	add	sp, #12
 8001e36:	ecbd 8b02 	vpop	{d8}
 8001e3a:	bd30      	pop	{r4, r5, pc}
        if (ABS(position - 100.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 8001e3c:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	bfcc      	ite	gt
 8001e4a:	2301      	movgt	r3, #1
 8001e4c:	2300      	movle	r3, #0
 8001e4e:	e7de      	b.n	8001e0e <electronic_throttle_update+0x82>
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_upper);
 8001e50:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001ee4 <electronic_throttle_update+0x158>
        if (ABS(position - 0.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 8001e54:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	d426      	bmi.n	8001eac <electronic_throttle_update+0x120>
 8001e5e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8001e62:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6a:	bf4c      	ite	mi
 8001e6c:	2301      	movmi	r3, #1
 8001e6e:	2300      	movpl	r3, #0
 8001e70:	b16b      	cbz	r3, 8001e8e <electronic_throttle_update+0x102>
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_lower);
 8001e72:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7a:	d421      	bmi.n	8001ec0 <electronic_throttle_update+0x134>
 8001e7c:	edd4 7a06 	vldr	s15, [r4, #24]
 8001e80:	eef4 7ac0 	vcmpe.f32	s15, s0
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	d501      	bpl.n	8001e8e <electronic_throttle_update+0x102>
 8001e8a:	eeb0 0a67 	vmov.f32	s0, s15
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 8001e8e:	6860      	ldr	r0, [r4, #4]
 8001e90:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e98:	d416      	bmi.n	8001ec8 <electronic_throttle_update+0x13c>
 8001e9a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8001e9e:	edcd 7a01 	vstr	s15, [sp, #4]
 8001ea2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001ea6:	f7ff fd23 	bl	80018f0 <dc_motor_set>
 8001eaa:	e7c3      	b.n	8001e34 <electronic_throttle_update+0xa8>
        if (ABS(position - 0.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 8001eac:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 8001eb0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb8:	bfcc      	ite	gt
 8001eba:	2301      	movgt	r3, #1
 8001ebc:	2300      	movle	r3, #0
 8001ebe:	e7d7      	b.n	8001e70 <electronic_throttle_update+0xe4>
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 8001ec0:	6860      	ldr	r0, [r4, #4]
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_lower);
 8001ec2:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001ee4 <electronic_throttle_update+0x158>
 8001ec6:	e7e8      	b.n	8001e9a <electronic_throttle_update+0x10e>
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 8001ec8:	eeb1 0a40 	vneg.f32	s0, s0
 8001ecc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8001ed0:	edcd 7a01 	vstr	s15, [sp, #4]
 8001ed4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001ed8:	e7e5      	b.n	8001ea6 <electronic_throttle_update+0x11a>
 8001eda:	bf00      	nop
 8001edc:	42c80000 	.word	0x42c80000
 8001ee0:	0800b96c 	.word	0x0800b96c
 8001ee4:	00000000 	.word	0x00000000

08001ee8 <electronic_throttle_init>:
{
 8001ee8:	b510      	push	{r4, lr}
    if (etb == NULL || sensor == NULL || motor == NULL)
 8001eea:	b1f0      	cbz	r0, 8001f2a <electronic_throttle_init+0x42>
 8001eec:	4604      	mov	r4, r0
 8001eee:	b1e2      	cbz	r2, 8001f2a <electronic_throttle_init+0x42>
 8001ef0:	b1db      	cbz	r3, 8001f2a <electronic_throttle_init+0x42>
    etb->pid = pid;
 8001ef2:	6081      	str	r1, [r0, #8]
    etb->sensor = sensor;
 8001ef4:	60c2      	str	r2, [r0, #12]
    etb->motor = motor;
 8001ef6:	6043      	str	r3, [r0, #4]
    etb->target_position = ELECTRONIC_THROTTLE_FAIL_SAFE_POSITION;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	6103      	str	r3, [r0, #16]
    etb->pid->limit_output_max = (float)255;
 8001efc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <electronic_throttle_init+0x4c>)
 8001efe:	614b      	str	r3, [r1, #20]
    etb->pid->limit_output_min = (float)-255;
 8001f00:	6883      	ldr	r3, [r0, #8]
 8001f02:	4a0d      	ldr	r2, [pc, #52]	@ (8001f38 <electronic_throttle_init+0x50>)
 8001f04:	611a      	str	r2, [r3, #16]
    etb->pid->limit_integrator_max = (float)250;
 8001f06:	6883      	ldr	r3, [r0, #8]
 8001f08:	4a0c      	ldr	r2, [pc, #48]	@ (8001f3c <electronic_throttle_init+0x54>)
 8001f0a:	61da      	str	r2, [r3, #28]
    etb->pid->limit_integrator_min = (float)-250;
 8001f0c:	6883      	ldr	r3, [r0, #8]
 8001f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f40 <electronic_throttle_init+0x58>)
 8001f10:	619a      	str	r2, [r3, #24]
    osTimerId_t timer_id = osTimerNew(
 8001f12:	2300      	movs	r3, #0
 8001f14:	4602      	mov	r2, r0
 8001f16:	2101      	movs	r1, #1
 8001f18:	480a      	ldr	r0, [pc, #40]	@ (8001f44 <electronic_throttle_init+0x5c>)
 8001f1a:	f7ff f839 	bl	8000f90 <osTimerNew>
    osTimerStart(timer_id, 1); // every 1 tick = every 1ms = 1000Hz
 8001f1e:	2101      	movs	r1, #1
 8001f20:	f7ff f88a 	bl	8001038 <osTimerStart>
    etb->state = ETB_STATE_NORMAL;
 8001f24:	2301      	movs	r3, #1
 8001f26:	7023      	strb	r3, [r4, #0]
}
 8001f28:	bd10      	pop	{r4, pc}
        log_error("Electronic throttle init failed");
 8001f2a:	4807      	ldr	r0, [pc, #28]	@ (8001f48 <electronic_throttle_init+0x60>)
 8001f2c:	f000 f822 	bl	8001f74 <log_error>
        return;
 8001f30:	e7fa      	b.n	8001f28 <electronic_throttle_init+0x40>
 8001f32:	bf00      	nop
 8001f34:	437f0000 	.word	0x437f0000
 8001f38:	c37f0000 	.word	0xc37f0000
 8001f3c:	437a0000 	.word	0x437a0000
 8001f40:	c37a0000 	.word	0xc37a0000
 8001f44:	08001d8d 	.word	0x08001d8d
 8001f48:	0800b990 	.word	0x0800b990

08001f4c <electronic_throttle_set>:
    if (!IS_IN_RANGE(position, (percent_t)0, (percent_t)100))
 8001f4c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f54:	db06      	blt.n	8001f64 <electronic_throttle_set+0x18>
 8001f56:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8001f70 <electronic_throttle_set+0x24>
 8001f5a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f62:	d901      	bls.n	8001f68 <electronic_throttle_set+0x1c>
        etb->target_position = ELECTRONIC_THROTTLE_FAIL_SAFE_POSITION;
 8001f64:	2300      	movs	r3, #0
 8001f66:	6103      	str	r3, [r0, #16]
    etb->target_position = position;
 8001f68:	ed80 0a04 	vstr	s0, [r0, #16]
}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	42c80000 	.word	0x42c80000

08001f74 <log_error>:
#include "error_handling.h"


void log_error(const char* message)
{
    if (message == NULL) return;
 8001f74:	b1c0      	cbz	r0, 8001fa8 <log_error+0x34>
{
 8001f76:	b570      	push	{r4, r5, r6, lr}
 8001f78:	b09a      	sub	sp, #104	@ 0x68
 8001f7a:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 8001f7c:	ac01      	add	r4, sp, #4
 8001f7e:	2564      	movs	r5, #100	@ 0x64
 8001f80:	462a      	mov	r2, r5
 8001f82:	2100      	movs	r1, #0
 8001f84:	4620      	mov	r0, r4
 8001f86:	f008 fd33 	bl	800a9f0 <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Error: %s\n", message);
 8001f8a:	4633      	mov	r3, r6
 8001f8c:	4a07      	ldr	r2, [pc, #28]	@ (8001fac <log_error+0x38>)
 8001f8e:	4629      	mov	r1, r5
 8001f90:	4620      	mov	r0, r4
 8001f92:	f008 fcf7 	bl	800a984 <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7fe f902 	bl	80001a0 <strlen>
 8001f9c:	b281      	uxth	r1, r0
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f007 fcac 	bl	80098fc <CDC_Transmit_FS>
}
 8001fa4:	b01a      	add	sp, #104	@ 0x68
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	0800b9b0 	.word	0x0800b9b0

08001fb0 <log_warning>:

void log_warning(const char* message)
{
    if (message == NULL) return;
 8001fb0:	b1c0      	cbz	r0, 8001fe4 <log_warning+0x34>
{
 8001fb2:	b570      	push	{r4, r5, r6, lr}
 8001fb4:	b09a      	sub	sp, #104	@ 0x68
 8001fb6:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 8001fb8:	ac01      	add	r4, sp, #4
 8001fba:	2564      	movs	r5, #100	@ 0x64
 8001fbc:	462a      	mov	r2, r5
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f008 fd15 	bl	800a9f0 <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Warning: %s\n", message);
 8001fc6:	4633      	mov	r3, r6
 8001fc8:	4a07      	ldr	r2, [pc, #28]	@ (8001fe8 <log_warning+0x38>)
 8001fca:	4629      	mov	r1, r5
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f008 fcd9 	bl	800a984 <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f7fe f8e4 	bl	80001a0 <strlen>
 8001fd8:	b281      	uxth	r1, r0
 8001fda:	4620      	mov	r0, r4
 8001fdc:	f007 fc8e 	bl	80098fc <CDC_Transmit_FS>
 8001fe0:	b01a      	add	sp, #104	@ 0x68
 8001fe2:	bd70      	pop	{r4, r5, r6, pc}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	0800b9bc 	.word	0x0800b9bc

08001fec <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8001fec:	b180      	cbz	r0, 8002010 <xEventGroupCreateStatic+0x24>
	{
 8001fee:	b510      	push	{r4, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8001ff8:	9b01      	ldr	r3, [sp, #4]
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	d011      	beq.n	8002022 <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002002:	f383 8811 	msr	BASEPRI, r3
 8002006:	f3bf 8f6f 	isb	sy
 800200a:	f3bf 8f4f 	dsb	sy
 800200e:	e7fe      	b.n	800200e <xEventGroupCreateStatic+0x22>
 8002010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 8002020:	e7fe      	b.n	8002020 <xEventGroupCreateStatic+0x34>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002028:	f000 fd04 	bl	8002a34 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800202c:	2301      	movs	r3, #1
 800202e:	7723      	strb	r3, [r4, #28]
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
	}
 8002030:	4620      	mov	r0, r4
 8002032:	b002      	add	sp, #8
 8002034:	bd10      	pop	{r4, pc}

08002036 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002036:	b538      	push	{r3, r4, r5, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002038:	2020      	movs	r0, #32
 800203a:	f000 fa4b 	bl	80024d4 <pvPortMalloc>

		if( pxEventBits != NULL )
 800203e:	4604      	mov	r4, r0
 8002040:	b128      	cbz	r0, 800204e <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 8002042:	2500      	movs	r5, #0
 8002044:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002048:	f000 fcf4 	bl	8002a34 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800204c:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
 800204e:	4620      	mov	r0, r4
 8002050:	bd38      	pop	{r3, r4, r5, pc}

08002052 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
EventGroup_t *pxEventBits = xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002054:	b168      	cbz	r0, 8002072 <xEventGroupSetBits+0x20>
 8002056:	460d      	mov	r5, r1
 8002058:	4604      	mov	r4, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800205a:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 800205e:	d311      	bcc.n	8002084 <xEventGroupSetBits+0x32>
 8002060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	e7fe      	b.n	8002070 <xEventGroupSetBits+0x1e>
 8002072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002076:	f383 8811 	msr	BASEPRI, r3
 800207a:	f3bf 8f6f 	isb	sy
 800207e:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8002082:	e7fe      	b.n	8002082 <xEventGroupSetBits+0x30>

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002084:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
 8002088:	f005 fec6 	bl	8007e18 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800208c:	6920      	ldr	r0, [r4, #16]

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	432b      	orrs	r3, r5
 8002092:	6023      	str	r3, [r4, #0]
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002094:	2700      	movs	r7, #0

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8002096:	e00a      	b.n	80020ae <xEventGroupSetBits+0x5c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002098:	6821      	ldr	r1, [r4, #0]
 800209a:	ea32 0101 	bics.w	r1, r2, r1
 800209e:	d105      	bne.n	80020ac <xEventGroupSetBits+0x5a>
 80020a0:	e011      	b.n	80020c6 <xEventGroupSetBits+0x74>
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80020a2:	6821      	ldr	r1, [r4, #0]
 80020a4:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 80020a8:	f006 f8b8 	bl	800821c <vTaskRemoveFromUnorderedEventList>
{
 80020ac:	4628      	mov	r0, r5
		while( pxListItem != pxListEnd )
 80020ae:	42b0      	cmp	r0, r6
 80020b0:	d00e      	beq.n	80020d0 <xEventGroupSetBits+0x7e>
			pxNext = listGET_NEXT( pxListItem );
 80020b2:	6845      	ldr	r5, [r0, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80020b4:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80020b6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80020ba:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 80020be:	d1eb      	bne.n	8002098 <xEventGroupSetBits+0x46>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80020c0:	6821      	ldr	r1, [r4, #0]
 80020c2:	4211      	tst	r1, r2
 80020c4:	d0f2      	beq.n	80020ac <xEventGroupSetBits+0x5a>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80020c6:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80020ca:	d0ea      	beq.n	80020a2 <xEventGroupSetBits+0x50>
					uxBitsToClear |= uxBitsWaitedFor;
 80020cc:	4317      	orrs	r7, r2
 80020ce:	e7e8      	b.n	80020a2 <xEventGroupSetBits+0x50>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	ea23 0307 	bic.w	r3, r3, r7
 80020d6:	6023      	str	r3, [r4, #0]
	}
	( void ) xTaskResumeAll();
 80020d8:	f005 ff38 	bl	8007f4c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
}
 80020dc:	6820      	ldr	r0, [r4, #0]
 80020de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080020e0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80020e0:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80020e2:	f7ff ffb6 	bl	8002052 <xEventGroupSetBits>
}
 80020e6:	bd08      	pop	{r3, pc}

080020e8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80020e8:	b508      	push	{r3, lr}
 80020ea:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80020ec:	460a      	mov	r2, r1
 80020ee:	4601      	mov	r1, r0
 80020f0:	4801      	ldr	r0, [pc, #4]	@ (80020f8 <xEventGroupSetBitsFromISR+0x10>)
 80020f2:	f006 fe95 	bl	8008e20 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 80020f6:	bd08      	pop	{r3, pc}
 80020f8:	080020e1 	.word	0x080020e1

080020fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80020fc:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80020fe:	f007 f917 	bl	8009330 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  osDelay(100);
 8002102:	2064      	movs	r0, #100	@ 0x64
 8002104:	f7fe ff36 	bl	8000f74 <osDelay>
  
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8002108:	2001      	movs	r0, #1
 800210a:	f7fe ff33 	bl	8000f74 <osDelay>
  for(;;)
 800210e:	e7fb      	b.n	8002108 <StartDefaultTask+0xc>

08002110 <start_fuel_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_fuel_task */
void start_fuel_task(void *argument)
{
 8002110:	b508      	push	{r3, lr}


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002112:	2001      	movs	r0, #1
 8002114:	f7fe ff2e 	bl	8000f74 <osDelay>
  for(;;)
 8002118:	e7fb      	b.n	8002112 <start_fuel_task+0x2>
	...

0800211c <trigger_simulator_task>:
{
 800211c:	b508      	push	{r3, lr}
  osDelay(100);
 800211e:	2064      	movs	r0, #100	@ 0x64
 8002120:	f7fe ff28 	bl	8000f74 <osDelay>
  trigger_simulator_init(60, 2, trigger_tooth_handle);
 8002124:	4a10      	ldr	r2, [pc, #64]	@ (8002168 <trigger_simulator_task+0x4c>)
 8002126:	2102      	movs	r1, #2
 8002128:	203c      	movs	r0, #60	@ 0x3c
 800212a:	f007 f8a3 	bl	8009274 <trigger_simulator_init>
    simulated_rpm = (rpm_t)mapf((float)analog_inputs_get_data(ANALOG_INPUT_ETB2_SENSE2), 0.0f, 4095.0f, 10.0f, 1000.0f);
 800212e:	2003      	movs	r0, #3
 8002130:	f7fe fe64 	bl	8000dfc <analog_inputs_get_data>
 8002134:	ee07 0a90 	vmov	s15, r0
 8002138:	eef8 7a67 	vcvt.f32.u32	s15, s15
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800213c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800216c <trigger_simulator_task+0x50>
 8002140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002144:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002170 <trigger_simulator_task+0x54>
 8002148:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800214c:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8002150:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002154:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <trigger_simulator_task+0x58>)
 8002156:	ed83 0a00 	vstr	s0, [r3]
    trigger_simulator_update(simulated_rpm);
 800215a:	f007 f899 	bl	8009290 <trigger_simulator_update>
    osDelay(1);
 800215e:	2001      	movs	r0, #1
 8002160:	f7fe ff08 	bl	8000f74 <osDelay>
  for(;;)
 8002164:	e7e3      	b.n	800212e <trigger_simulator_task+0x12>
 8002166:	bf00      	nop
 8002168:	080090d1 	.word	0x080090d1
 800216c:	44778000 	.word	0x44778000
 8002170:	457ff000 	.word	0x457ff000
 8002174:	20000044 	.word	0x20000044

08002178 <controller_init_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controller_init_task */
void controller_init_task(void *argument)
{
 8002178:	b508      	push	{r3, lr}
  /* USER CODE BEGIN controller_init_task */

  controller_init_with_defaults();
 800217a:	f7ff facb 	bl	8001714 <controller_init_with_defaults>


  for (size_t i = 0; i < (sizeof(test_table.x_bins) / sizeof(test_table.x_bins[0])); i++)
 800217e:	2200      	movs	r2, #0
 8002180:	e00e      	b.n	80021a0 <controller_init_task+0x28>
  {
    test_table.x_bins[i] = i * 100;  // Example values
 8002182:	2364      	movs	r3, #100	@ 0x64
 8002184:	fb02 f303 	mul.w	r3, r2, r3
 8002188:	f502 7080 	add.w	r0, r2, #256	@ 0x100
 800218c:	492d      	ldr	r1, [pc, #180]	@ (8002244 <controller_init_task+0xcc>)
 800218e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800219a:	edc1 7a00 	vstr	s15, [r1]
  for (size_t i = 0; i < (sizeof(test_table.x_bins) / sizeof(test_table.x_bins[0])); i++)
 800219e:	3201      	adds	r2, #1
 80021a0:	2a0f      	cmp	r2, #15
 80021a2:	d9ee      	bls.n	8002182 <controller_init_task+0xa>
  }
  for (size_t i = 0; i < (sizeof(test_table.y_bins) / sizeof(test_table.y_bins[0])); i++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	e00e      	b.n	80021c6 <controller_init_task+0x4e>
  {
    test_table.y_bins[i] = i * 10;  // Example values
 80021a8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80021ac:	0052      	lsls	r2, r2, #1
 80021ae:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 80021b2:	4924      	ldr	r1, [pc, #144]	@ (8002244 <controller_init_task+0xcc>)
 80021b4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80021b8:	ee07 2a90 	vmov	s15, r2
 80021bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c0:	edc1 7a00 	vstr	s15, [r1]
  for (size_t i = 0; i < (sizeof(test_table.y_bins) / sizeof(test_table.y_bins[0])); i++)
 80021c4:	3301      	adds	r3, #1
 80021c6:	2b0f      	cmp	r3, #15
 80021c8:	d9ee      	bls.n	80021a8 <controller_init_task+0x30>
  }
  for (size_t i = 0; i < (sizeof(test_table.data) / sizeof(test_table.data[0])); i++)
 80021ca:	2000      	movs	r0, #0
 80021cc:	e011      	b.n	80021f2 <controller_init_task+0x7a>
  {
    for (size_t j = 0; j < (sizeof(test_table.data[0]) / sizeof(test_table.data[0][0])); j++)
    {
      test_table.data[i][j] = (i + 1) * (j + 1);  // Example values
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	fb00 2102 	mla	r1, r0, r2, r2
 80021d4:	ee07 1a90 	vmov	s15, r1
 80021d8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80021dc:	4919      	ldr	r1, [pc, #100]	@ (8002244 <controller_init_task+0xcc>)
 80021de:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80021e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e6:	edc3 7a00 	vstr	s15, [r3]
    for (size_t j = 0; j < (sizeof(test_table.data[0]) / sizeof(test_table.data[0][0])); j++)
 80021ea:	4613      	mov	r3, r2
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	d9ee      	bls.n	80021ce <controller_init_task+0x56>
  for (size_t i = 0; i < (sizeof(test_table.data) / sizeof(test_table.data[0])); i++)
 80021f0:	3001      	adds	r0, #1
 80021f2:	280f      	cmp	r0, #15
 80021f4:	d80c      	bhi.n	8002210 <controller_init_task+0x98>
    for (size_t j = 0; j < (sizeof(test_table.data[0]) / sizeof(test_table.data[0][0])); j++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	e7f8      	b.n	80021ec <controller_init_task+0x74>
    load = 11.25f;  // Simulate load increase
    if (rpm > 5000)
    {
      rpm = -1000;
    }
    table_value = table_2d_get_value(&test_table, rpm, load);
 80021fa:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8002248 <controller_init_task+0xd0>
 80021fe:	4b13      	ldr	r3, [pc, #76]	@ (800224c <controller_init_task+0xd4>)
 8002200:	ed93 0a00 	vldr	s0, [r3]
 8002204:	480f      	ldr	r0, [pc, #60]	@ (8002244 <controller_init_task+0xcc>)
 8002206:	f005 fb01 	bl	800780c <table_2d_get_value>
 800220a:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <controller_init_task+0xd8>)
 800220c:	ed83 0a00 	vstr	s0, [r3]
    osDelay(1);
 8002210:	2001      	movs	r0, #1
 8002212:	f7fe feaf 	bl	8000f74 <osDelay>
    rpm += 10;  // Simulate RPM increase
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <controller_init_task+0xd4>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002220:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002224:	edc3 7a00 	vstr	s15, [r3]
    load = 11.25f;  // Simulate load increase
 8002228:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <controller_init_task+0xdc>)
 800222a:	4a0b      	ldr	r2, [pc, #44]	@ (8002258 <controller_init_task+0xe0>)
 800222c:	601a      	str	r2, [r3, #0]
    if (rpm > 5000)
 800222e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800225c <controller_init_task+0xe4>
 8002232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223a:	ddde      	ble.n	80021fa <controller_init_task+0x82>
      rpm = -1000;
 800223c:	4b03      	ldr	r3, [pc, #12]	@ (800224c <controller_init_task+0xd4>)
 800223e:	4a08      	ldr	r2, [pc, #32]	@ (8002260 <controller_init_task+0xe8>)
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e7da      	b.n	80021fa <controller_init_task+0x82>
 8002244:	20002294 	.word	0x20002294
 8002248:	41340000 	.word	0x41340000
 800224c:	20002274 	.word	0x20002274
 8002250:	20002290 	.word	0x20002290
 8002254:	20002270 	.word	0x20002270
 8002258:	41340000 	.word	0x41340000
 800225c:	459c4000 	.word	0x459c4000
 8002260:	c47a0000 	.word	0xc47a0000

08002264 <sensors_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensors_task */
void sensors_task(void *argument)
{
 8002264:	b508      	push	{r3, lr}
  /* USER CODE BEGIN sensors_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002266:	2001      	movs	r0, #1
 8002268:	f7fe fe84 	bl	8000f74 <osDelay>
    engine.clt = sensor_clt_get();
 800226c:	f001 fc8e 	bl	8003b8c <sensor_clt_get>
 8002270:	4c05      	ldr	r4, [pc, #20]	@ (8002288 <sensors_task+0x24>)
 8002272:	ed84 0a15 	vstr	s0, [r4, #84]	@ 0x54
    engine.iat = sensor_iat_get();
 8002276:	f001 fc05 	bl	8003a84 <sensor_iat_get>
 800227a:	ed84 0a16 	vstr	s0, [r4, #88]	@ 0x58
    engine.oil_pressure = sensor_ops_get();
 800227e:	f001 fcc5 	bl	8003c0c <sensor_ops_get>
 8002282:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  for(;;)
 8002286:	e7ee      	b.n	8002266 <sensors_task+0x2>
 8002288:	2000186c 	.word	0x2000186c

0800228c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800228c:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800228e:	4a14      	ldr	r2, [pc, #80]	@ (80022e0 <MX_FREERTOS_Init+0x54>)
 8002290:	2100      	movs	r1, #0
 8002292:	4814      	ldr	r0, [pc, #80]	@ (80022e4 <MX_FREERTOS_Init+0x58>)
 8002294:	f7fe fe14 	bl	8000ec0 <osThreadNew>
 8002298:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <MX_FREERTOS_Init+0x5c>)
 800229a:	6018      	str	r0, [r3, #0]
  trig_simHandle = osThreadNew(trigger_simulator_task, NULL, &trig_sim_attributes);
 800229c:	4a13      	ldr	r2, [pc, #76]	@ (80022ec <MX_FREERTOS_Init+0x60>)
 800229e:	2100      	movs	r1, #0
 80022a0:	4813      	ldr	r0, [pc, #76]	@ (80022f0 <MX_FREERTOS_Init+0x64>)
 80022a2:	f7fe fe0d 	bl	8000ec0 <osThreadNew>
 80022a6:	4b13      	ldr	r3, [pc, #76]	@ (80022f4 <MX_FREERTOS_Init+0x68>)
 80022a8:	6018      	str	r0, [r3, #0]
  fuel_taskHandle = osThreadNew(start_fuel_task, NULL, &fuel_task_attributes);
 80022aa:	4a13      	ldr	r2, [pc, #76]	@ (80022f8 <MX_FREERTOS_Init+0x6c>)
 80022ac:	2100      	movs	r1, #0
 80022ae:	4813      	ldr	r0, [pc, #76]	@ (80022fc <MX_FREERTOS_Init+0x70>)
 80022b0:	f7fe fe06 	bl	8000ec0 <osThreadNew>
 80022b4:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <MX_FREERTOS_Init+0x74>)
 80022b6:	6018      	str	r0, [r3, #0]
  init_taskHandle = osThreadNew(controller_init_task, NULL, &init_task_attributes);
 80022b8:	4a12      	ldr	r2, [pc, #72]	@ (8002304 <MX_FREERTOS_Init+0x78>)
 80022ba:	2100      	movs	r1, #0
 80022bc:	4812      	ldr	r0, [pc, #72]	@ (8002308 <MX_FREERTOS_Init+0x7c>)
 80022be:	f7fe fdff 	bl	8000ec0 <osThreadNew>
 80022c2:	4b12      	ldr	r3, [pc, #72]	@ (800230c <MX_FREERTOS_Init+0x80>)
 80022c4:	6018      	str	r0, [r3, #0]
  sensor_taskHandle = osThreadNew(sensors_task, NULL, &sensor_task_attributes);
 80022c6:	4a12      	ldr	r2, [pc, #72]	@ (8002310 <MX_FREERTOS_Init+0x84>)
 80022c8:	2100      	movs	r1, #0
 80022ca:	4812      	ldr	r0, [pc, #72]	@ (8002314 <MX_FREERTOS_Init+0x88>)
 80022cc:	f7fe fdf8 	bl	8000ec0 <osThreadNew>
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <MX_FREERTOS_Init+0x8c>)
 80022d2:	6018      	str	r0, [r3, #0]
  engine_flagsHandle = osEventFlagsNew(&engine_flags_attributes);
 80022d4:	4811      	ldr	r0, [pc, #68]	@ (800231c <MX_FREERTOS_Init+0x90>)
 80022d6:	f7fe fec9 	bl	800106c <osEventFlagsNew>
 80022da:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <MX_FREERTOS_Init+0x94>)
 80022dc:	6018      	str	r0, [r3, #0]
}
 80022de:	bd08      	pop	{r3, pc}
 80022e0:	0800be24 	.word	0x0800be24
 80022e4:	080020fd 	.word	0x080020fd
 80022e8:	2000228c 	.word	0x2000228c
 80022ec:	0800be00 	.word	0x0800be00
 80022f0:	0800211d 	.word	0x0800211d
 80022f4:	20002288 	.word	0x20002288
 80022f8:	0800bddc 	.word	0x0800bddc
 80022fc:	08002111 	.word	0x08002111
 8002300:	20002284 	.word	0x20002284
 8002304:	0800bdb8 	.word	0x0800bdb8
 8002308:	08002179 	.word	0x08002179
 800230c:	20002280 	.word	0x20002280
 8002310:	0800bd94 	.word	0x0800bd94
 8002314:	08002265 	.word	0x08002265
 8002318:	2000227c 	.word	0x2000227c
 800231c:	0800bd84 	.word	0x0800bd84
 8002320:	20002278 	.word	0x20002278

08002324 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002328:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232a:	ad05      	add	r5, sp, #20
 800232c:	2400      	movs	r4, #0
 800232e:	9405      	str	r4, [sp, #20]
 8002330:	9406      	str	r4, [sp, #24]
 8002332:	9407      	str	r4, [sp, #28]
 8002334:	9408      	str	r4, [sp, #32]
 8002336:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002338:	9401      	str	r4, [sp, #4]
 800233a:	4b31      	ldr	r3, [pc, #196]	@ (8002400 <MX_GPIO_Init+0xdc>)
 800233c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800233e:	f042 0204 	orr.w	r2, r2, #4
 8002342:	631a      	str	r2, [r3, #48]	@ 0x30
 8002344:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002346:	f002 0204 	and.w	r2, r2, #4
 800234a:	9201      	str	r2, [sp, #4]
 800234c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800234e:	9402      	str	r4, [sp, #8]
 8002350:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002352:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30
 8002358:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800235a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800235e:	9202      	str	r2, [sp, #8]
 8002360:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	9403      	str	r4, [sp, #12]
 8002364:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	631a      	str	r2, [r3, #48]	@ 0x30
 800236c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800236e:	f002 0201 	and.w	r2, r2, #1
 8002372:	9203      	str	r2, [sp, #12]
 8002374:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	9404      	str	r4, [sp, #16]
 8002378:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800237a:	f042 0202 	orr.w	r2, r2, #2
 800237e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	9304      	str	r3, [sp, #16]
 8002388:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800238a:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8002408 <MX_GPIO_Init+0xe4>
 800238e:	4622      	mov	r2, r4
 8002390:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002394:	4640      	mov	r0, r8
 8002396:	f002 fba2 	bl	8004ade <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FAN1_Pin|FAN2_Pin|IGNITION_OUTPUT4_Pin|IGNITION_OUTPUT3_Pin
 800239a:	4e1a      	ldr	r6, [pc, #104]	@ (8002404 <MX_GPIO_Init+0xe0>)
 800239c:	4622      	mov	r2, r4
 800239e:	f24f 4104 	movw	r1, #62468	@ 0xf404
 80023a2:	4630      	mov	r0, r6
 80023a4:	f002 fb9b 	bl	8004ade <HAL_GPIO_WritePin>
                          |IGNITION_OUTPUT2_Pin|IGNITION_OUTPUT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80023a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023ac:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ae:	2701      	movs	r7, #1
 80023b0:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80023b6:	4629      	mov	r1, r5
 80023b8:	4640      	mov	r0, r8
 80023ba:	f002 faa5 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN1_Pin FAN2_Pin IGNITION_OUTPUT4_Pin IGNITION_OUTPUT3_Pin
                           IGNITION_OUTPUT2_Pin IGNITION_OUTPUT1_Pin */
  GPIO_InitStruct.Pin = FAN1_Pin|FAN2_Pin|IGNITION_OUTPUT4_Pin|IGNITION_OUTPUT3_Pin
 80023be:	f24f 4304 	movw	r3, #62468	@ 0xf404
 80023c2:	9305      	str	r3, [sp, #20]
                          |IGNITION_OUTPUT2_Pin|IGNITION_OUTPUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ca:	4629      	mov	r1, r5
 80023cc:	4630      	mov	r0, r6
 80023ce:	f002 fa9b 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023d6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023dc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e0:	4629      	mov	r1, r5
 80023e2:	4630      	mov	r0, r6
 80023e4:	f002 fa90 	bl	8004908 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80023e8:	4622      	mov	r2, r4
 80023ea:	2105      	movs	r1, #5
 80023ec:	2017      	movs	r0, #23
 80023ee:	f002 f863 	bl	80044b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023f2:	2017      	movs	r0, #23
 80023f4:	f002 f870 	bl	80044d8 <HAL_NVIC_EnableIRQ>

}
 80023f8:	b00a      	add	sp, #40	@ 0x28
 80023fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800
 8002404:	40020400 	.word	0x40020400
 8002408:	40020800 	.word	0x40020800

0800240c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800240c:	4a12      	ldr	r2, [pc, #72]	@ (8002458 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800240e:	f012 0f07 	tst.w	r2, #7
 8002412:	d01e      	beq.n	8002452 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002414:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002416:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800241a:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 800241e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002420:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002422:	480e      	ldr	r0, [pc, #56]	@ (800245c <prvHeapInit+0x50>)
 8002424:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002426:	2100      	movs	r1, #0
 8002428:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800242a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800242c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800242e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8002432:	480b      	ldr	r0, [pc, #44]	@ (8002460 <prvHeapInit+0x54>)
 8002434:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8002436:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002438:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800243a:	1a99      	subs	r1, r3, r2
 800243c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800243e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002440:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <prvHeapInit+0x58>)
 8002442:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002444:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <prvHeapInit+0x5c>)
 8002446:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002448:	4b08      	ldr	r3, [pc, #32]	@ (800246c <prvHeapInit+0x60>)
 800244a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800244e:	601a      	str	r2, [r3, #0]
}
 8002450:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002452:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002456:	e7e4      	b.n	8002422 <prvHeapInit+0x16>
 8002458:	20002734 	.word	0x20002734
 800245c:	2000272c 	.word	0x2000272c
 8002460:	20002728 	.word	0x20002728
 8002464:	20002720 	.word	0x20002720
 8002468:	20002724 	.word	0x20002724
 800246c:	20002714 	.word	0x20002714

08002470 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002470:	4b16      	ldr	r3, [pc, #88]	@ (80024cc <prvInsertBlockIntoFreeList+0x5c>)
 8002472:	461a      	mov	r2, r3
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4283      	cmp	r3, r0
 8002478:	d3fb      	bcc.n	8002472 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800247a:	6851      	ldr	r1, [r2, #4]
 800247c:	eb02 0c01 	add.w	ip, r2, r1
 8002480:	4584      	cmp	ip, r0
 8002482:	d009      	beq.n	8002498 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002484:	6841      	ldr	r1, [r0, #4]
 8002486:	eb00 0c01 	add.w	ip, r0, r1
 800248a:	4563      	cmp	r3, ip
 800248c:	d009      	beq.n	80024a2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800248e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002490:	4290      	cmp	r0, r2
 8002492:	d019      	beq.n	80024c8 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002494:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8002496:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002498:	6840      	ldr	r0, [r0, #4]
 800249a:	4401      	add	r1, r0
 800249c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800249e:	4610      	mov	r0, r2
 80024a0:	e7f0      	b.n	8002484 <prvInsertBlockIntoFreeList+0x14>
{
 80024a2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80024a4:	4c0a      	ldr	r4, [pc, #40]	@ (80024d0 <prvInsertBlockIntoFreeList+0x60>)
 80024a6:	6824      	ldr	r4, [r4, #0]
 80024a8:	42a3      	cmp	r3, r4
 80024aa:	d00b      	beq.n	80024c4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4419      	add	r1, r3
 80024b0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80024b2:	6813      	ldr	r3, [r2, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80024b8:	4290      	cmp	r0, r2
 80024ba:	d000      	beq.n	80024be <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80024bc:	6010      	str	r0, [r2, #0]
	}
}
 80024be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024c2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80024c4:	6004      	str	r4, [r0, #0]
 80024c6:	e7f7      	b.n	80024b8 <prvInsertBlockIntoFreeList+0x48>
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	2000272c 	.word	0x2000272c
 80024d0:	20002728 	.word	0x20002728

080024d4 <pvPortMalloc>:
{
 80024d4:	b538      	push	{r3, r4, r5, lr}
 80024d6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80024d8:	f005 fc9e 	bl	8007e18 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80024dc:	4b38      	ldr	r3, [pc, #224]	@ (80025c0 <pvPortMalloc+0xec>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b1b3      	cbz	r3, 8002510 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80024e2:	4b38      	ldr	r3, [pc, #224]	@ (80025c4 <pvPortMalloc+0xf0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	421c      	tst	r4, r3
 80024e8:	d150      	bne.n	800258c <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 80024ea:	2c00      	cmp	r4, #0
 80024ec:	d050      	beq.n	8002590 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 80024ee:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80024f2:	f014 0f07 	tst.w	r4, #7
 80024f6:	d002      	beq.n	80024fe <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80024f8:	f022 0207 	bic.w	r2, r2, #7
 80024fc:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024fe:	2a00      	cmp	r2, #0
 8002500:	d055      	beq.n	80025ae <pvPortMalloc+0xda>
 8002502:	4b31      	ldr	r3, [pc, #196]	@ (80025c8 <pvPortMalloc+0xf4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4293      	cmp	r3, r2
 8002508:	d353      	bcc.n	80025b2 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 800250a:	4930      	ldr	r1, [pc, #192]	@ (80025cc <pvPortMalloc+0xf8>)
 800250c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800250e:	e004      	b.n	800251a <pvPortMalloc+0x46>
			prvHeapInit();
 8002510:	f7ff ff7c 	bl	800240c <prvHeapInit>
 8002514:	e7e5      	b.n	80024e2 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8002516:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8002518:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800251a:	6863      	ldr	r3, [r4, #4]
 800251c:	4293      	cmp	r3, r2
 800251e:	d202      	bcs.n	8002526 <pvPortMalloc+0x52>
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f7      	bne.n	8002516 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8002526:	4b26      	ldr	r3, [pc, #152]	@ (80025c0 <pvPortMalloc+0xec>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	42a3      	cmp	r3, r4
 800252c:	d043      	beq.n	80025b6 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800252e:	680d      	ldr	r5, [r1, #0]
 8002530:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002536:	6863      	ldr	r3, [r4, #4]
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	2b10      	cmp	r3, #16
 800253c:	d910      	bls.n	8002560 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800253e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002540:	f010 0f07 	tst.w	r0, #7
 8002544:	d008      	beq.n	8002558 <pvPortMalloc+0x84>
 8002546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800254a:	f383 8811 	msr	BASEPRI, r3
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f3bf 8f4f 	dsb	sy
 8002556:	e7fe      	b.n	8002556 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002558:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800255a:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800255c:	f7ff ff88 	bl	8002470 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002560:	6862      	ldr	r2, [r4, #4]
 8002562:	4919      	ldr	r1, [pc, #100]	@ (80025c8 <pvPortMalloc+0xf4>)
 8002564:	680b      	ldr	r3, [r1, #0]
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800256a:	4919      	ldr	r1, [pc, #100]	@ (80025d0 <pvPortMalloc+0xfc>)
 800256c:	6809      	ldr	r1, [r1, #0]
 800256e:	428b      	cmp	r3, r1
 8002570:	d201      	bcs.n	8002576 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002572:	4917      	ldr	r1, [pc, #92]	@ (80025d0 <pvPortMalloc+0xfc>)
 8002574:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002576:	4b13      	ldr	r3, [pc, #76]	@ (80025c4 <pvPortMalloc+0xf0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800257e:	2300      	movs	r3, #0
 8002580:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8002582:	4a14      	ldr	r2, [pc, #80]	@ (80025d4 <pvPortMalloc+0x100>)
 8002584:	6813      	ldr	r3, [r2, #0]
 8002586:	3301      	adds	r3, #1
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e002      	b.n	8002592 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 800258c:	2500      	movs	r5, #0
 800258e:	e000      	b.n	8002592 <pvPortMalloc+0xbe>
 8002590:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8002592:	f005 fcdb 	bl	8007f4c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002596:	f015 0f07 	tst.w	r5, #7
 800259a:	d00e      	beq.n	80025ba <pvPortMalloc+0xe6>
 800259c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a0:	f383 8811 	msr	BASEPRI, r3
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	e7fe      	b.n	80025ac <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 80025ae:	2500      	movs	r5, #0
 80025b0:	e7ef      	b.n	8002592 <pvPortMalloc+0xbe>
 80025b2:	2500      	movs	r5, #0
 80025b4:	e7ed      	b.n	8002592 <pvPortMalloc+0xbe>
 80025b6:	2500      	movs	r5, #0
 80025b8:	e7eb      	b.n	8002592 <pvPortMalloc+0xbe>
}
 80025ba:	4628      	mov	r0, r5
 80025bc:	bd38      	pop	{r3, r4, r5, pc}
 80025be:	bf00      	nop
 80025c0:	20002728 	.word	0x20002728
 80025c4:	20002714 	.word	0x20002714
 80025c8:	20002724 	.word	0x20002724
 80025cc:	2000272c 	.word	0x2000272c
 80025d0:	20002720 	.word	0x20002720
 80025d4:	2000271c 	.word	0x2000271c

080025d8 <vPortFree>:
	if( pv != NULL )
 80025d8:	2800      	cmp	r0, #0
 80025da:	d034      	beq.n	8002646 <vPortFree+0x6e>
{
 80025dc:	b538      	push	{r3, r4, r5, lr}
 80025de:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80025e0:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80025e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80025e8:	4a17      	ldr	r2, [pc, #92]	@ (8002648 <vPortFree+0x70>)
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	4213      	tst	r3, r2
 80025ee:	d108      	bne.n	8002602 <vPortFree+0x2a>
 80025f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	e7fe      	b.n	8002600 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002602:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002606:	b141      	cbz	r1, 800261a <vPortFree+0x42>
 8002608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	e7fe      	b.n	8002618 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800261a:	ea23 0302 	bic.w	r3, r3, r2
 800261e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002622:	f005 fbf9 	bl	8007e18 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002626:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800262a:	4a08      	ldr	r2, [pc, #32]	@ (800264c <vPortFree+0x74>)
 800262c:	6813      	ldr	r3, [r2, #0]
 800262e:	440b      	add	r3, r1
 8002630:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002632:	4628      	mov	r0, r5
 8002634:	f7ff ff1c 	bl	8002470 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002638:	4a05      	ldr	r2, [pc, #20]	@ (8002650 <vPortFree+0x78>)
 800263a:	6813      	ldr	r3, [r2, #0]
 800263c:	3301      	adds	r3, #1
 800263e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8002640:	f005 fc84 	bl	8007f4c <xTaskResumeAll>
}
 8002644:	bd38      	pop	{r3, r4, r5, pc}
 8002646:	4770      	bx	lr
 8002648:	20002714 	.word	0x20002714
 800264c:	20002724 	.word	0x20002724
 8002650:	20002718 	.word	0x20002718

08002654 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002654:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002656:	480b      	ldr	r0, [pc, #44]	@ (8002684 <MX_I2C1_Init+0x30>)
 8002658:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <MX_I2C1_Init+0x34>)
 800265a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800265c:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <MX_I2C1_Init+0x38>)
 800265e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002660:	2300      	movs	r3, #0
 8002662:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002664:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002666:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800266a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800266c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800266e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002670:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002672:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002674:	f002 fa50 	bl	8004b18 <HAL_I2C_Init>
 8002678:	b900      	cbnz	r0, 800267c <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800267a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800267c:	f000 fa34 	bl	8002ae8 <Error_Handler>
}
 8002680:	e7fb      	b.n	800267a <MX_I2C1_Init+0x26>
 8002682:	bf00      	nop
 8002684:	20006334 	.word	0x20006334
 8002688:	40005400 	.word	0x40005400
 800268c:	000186a0 	.word	0x000186a0

08002690 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002690:	b530      	push	{r4, r5, lr}
 8002692:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	2300      	movs	r3, #0
 8002696:	9303      	str	r3, [sp, #12]
 8002698:	9304      	str	r3, [sp, #16]
 800269a:	9305      	str	r3, [sp, #20]
 800269c:	9306      	str	r3, [sp, #24]
 800269e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80026a0:	6802      	ldr	r2, [r0, #0]
 80026a2:	4b14      	ldr	r3, [pc, #80]	@ (80026f4 <HAL_I2C_MspInit+0x64>)
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80026a8:	b009      	add	sp, #36	@ 0x24
 80026aa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ac:	2500      	movs	r5, #0
 80026ae:	9501      	str	r5, [sp, #4]
 80026b0:	4c11      	ldr	r4, [pc, #68]	@ (80026f8 <HAL_I2C_MspInit+0x68>)
 80026b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80026ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026c4:	23c0      	movs	r3, #192	@ 0xc0
 80026c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c8:	2312      	movs	r3, #18
 80026ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026cc:	2303      	movs	r3, #3
 80026ce:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026d0:	2304      	movs	r3, #4
 80026d2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d4:	a903      	add	r1, sp, #12
 80026d6:	4809      	ldr	r0, [pc, #36]	@ (80026fc <HAL_I2C_MspInit+0x6c>)
 80026d8:	f002 f916 	bl	8004908 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026dc:	9502      	str	r5, [sp, #8]
 80026de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026e4:	6423      	str	r3, [r4, #64]	@ 0x40
 80026e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ec:	9302      	str	r3, [sp, #8]
 80026ee:	9b02      	ldr	r3, [sp, #8]
}
 80026f0:	e7da      	b.n	80026a8 <HAL_I2C_MspInit+0x18>
 80026f2:	bf00      	nop
 80026f4:	40005400 	.word	0x40005400
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020400 	.word	0x40020400

08002700 <ignition_coil_begin_charge>:
 * 
 * @param coil_index The index of the coil to be charged.
 */
void ignition_coil_begin_charge(void *arg)
{
    if (arg == NULL)
 8002700:	b310      	cbz	r0, 8002748 <ignition_coil_begin_charge+0x48>
{
 8002702:	b570      	push	{r4, r5, r6, lr}
 8002704:	4604      	mov	r4, r0
    {
        return;
    }
    uint8_t *coil_index = (uint8_t*)arg;

    if (coil_index[1] > IGNITION_MAX_OUTPUTS - 1)
 8002706:	7843      	ldrb	r3, [r0, #1]
 8002708:	2b03      	cmp	r3, #3
 800270a:	d819      	bhi.n	8002740 <ignition_coil_begin_charge+0x40>
    {
        log_error("Unkown ignition output");
        return;
    }
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_CHARGING;
 800270c:	7802      	ldrb	r2, [r0, #0]
 800270e:	4b0f      	ldr	r3, [pc, #60]	@ (800274c <ignition_coil_begin_charge+0x4c>)
 8002710:	2601      	movs	r6, #1
 8002712:	549e      	strb	r6, [r3, r2]
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_CHARGING;
 8002714:	7842      	ldrb	r2, [r0, #1]
 8002716:	549e      	strb	r6, [r3, r2]
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_SET);
 8002718:	7803      	ldrb	r3, [r0, #0]
 800271a:	4d0d      	ldr	r5, [pc, #52]	@ (8002750 <ignition_coil_begin_charge+0x50>)
 800271c:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8002720:	4632      	mov	r2, r6
 8002722:	8889      	ldrh	r1, [r1, #4]
 8002724:	f855 0033 	ldr.w	r0, [r5, r3, lsl #3]
 8002728:	f002 f9d9 	bl	8004ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_SET);
 800272c:	7863      	ldrb	r3, [r4, #1]
 800272e:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8002732:	4632      	mov	r2, r6
 8002734:	8889      	ldrh	r1, [r1, #4]
 8002736:	f855 0033 	ldr.w	r0, [r5, r3, lsl #3]
 800273a:	f002 f9d0 	bl	8004ade <HAL_GPIO_WritePin>
}
 800273e:	bd70      	pop	{r4, r5, r6, pc}
        log_error("Unkown ignition output");
 8002740:	4804      	ldr	r0, [pc, #16]	@ (8002754 <ignition_coil_begin_charge+0x54>)
 8002742:	f7ff fc17 	bl	8001f74 <log_error>
        return;
 8002746:	e7fa      	b.n	800273e <ignition_coil_begin_charge+0x3e>
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20006390 	.word	0x20006390
 8002750:	20006394 	.word	0x20006394
 8002754:	0800ba08 	.word	0x0800ba08

08002758 <ignition_coil_fire_spark>:
 * 
 * @param coil_index The index of the coil to fire the spark from.
 */
void ignition_coil_fire_spark(void *arg)
{
    if (arg == NULL)
 8002758:	b320      	cbz	r0, 80027a4 <ignition_coil_fire_spark+0x4c>
{
 800275a:	b570      	push	{r4, r5, r6, lr}
 800275c:	4604      	mov	r4, r0
    {
        return;
    }
    
    uint8_t *coil_index = (uint8_t*)arg;
    if (coil_index[1] > IGNITION_MAX_OUTPUTS - 1)
 800275e:	7843      	ldrb	r3, [r0, #1]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d81b      	bhi.n	800279c <ignition_coil_fire_spark+0x44>
    {
        log_error("Unkown ignition output");
        return;
    }
    
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_NOT_CHARGING;
 8002764:	7802      	ldrb	r2, [r0, #0]
 8002766:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <ignition_coil_fire_spark+0x50>)
 8002768:	2500      	movs	r5, #0
 800276a:	549d      	strb	r5, [r3, r2]
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_NOT_CHARGING;
 800276c:	7842      	ldrb	r2, [r0, #1]
 800276e:	549d      	strb	r5, [r3, r2]
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_RESET);
 8002770:	7803      	ldrb	r3, [r0, #0]
 8002772:	4e0e      	ldr	r6, [pc, #56]	@ (80027ac <ignition_coil_fire_spark+0x54>)
 8002774:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8002778:	462a      	mov	r2, r5
 800277a:	8889      	ldrh	r1, [r1, #4]
 800277c:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
 8002780:	f002 f9ad 	bl	8004ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_RESET);
 8002784:	7863      	ldrb	r3, [r4, #1]
 8002786:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 800278a:	462a      	mov	r2, r5
 800278c:	8889      	ldrh	r1, [r1, #4]
 800278e:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
 8002792:	f002 f9a4 	bl	8004ade <HAL_GPIO_WritePin>
    spark_is_in_progress = false;
 8002796:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <ignition_coil_fire_spark+0x58>)
 8002798:	701d      	strb	r5, [r3, #0]
}
 800279a:	bd70      	pop	{r4, r5, r6, pc}
        log_error("Unkown ignition output");
 800279c:	4805      	ldr	r0, [pc, #20]	@ (80027b4 <ignition_coil_fire_spark+0x5c>)
 800279e:	f7ff fbe9 	bl	8001f74 <log_error>
        return;
 80027a2:	e7fa      	b.n	800279a <ignition_coil_fire_spark+0x42>
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20006390 	.word	0x20006390
 80027ac:	20006394 	.word	0x20006394
 80027b0:	2000638a 	.word	0x2000638a
 80027b4:	0800ba08 	.word	0x0800ba08

080027b8 <ignition_init>:
{
 80027b8:	b510      	push	{r4, lr}
    if (output_conf == NULL)
 80027ba:	b190      	cbz	r0, 80027e2 <ignition_init+0x2a>
 80027bc:	4601      	mov	r1, r0
    switch (configuration.firing_order)
 80027be:	4b27      	ldr	r3, [pc, #156]	@ (800285c <ignition_init+0xa4>)
 80027c0:	791b      	ldrb	r3, [r3, #4]
 80027c2:	b993      	cbnz	r3, 80027ea <ignition_init+0x32>
            engine.cylinder_count = 4;
 80027c4:	4a26      	ldr	r2, [pc, #152]	@ (8002860 <ignition_init+0xa8>)
 80027c6:	2004      	movs	r0, #4
 80027c8:	7410      	strb	r0, [r2, #16]
            ignition_order[0] = 1;
 80027ca:	4b26      	ldr	r3, [pc, #152]	@ (8002864 <ignition_init+0xac>)
 80027cc:	2401      	movs	r4, #1
 80027ce:	701c      	strb	r4, [r3, #0]
            ignition_order[1] = 3;
 80027d0:	2403      	movs	r4, #3
 80027d2:	705c      	strb	r4, [r3, #1]
            ignition_order[2] = 4;
 80027d4:	7098      	strb	r0, [r3, #2]
            ignition_order[3] = 2;
 80027d6:	2002      	movs	r0, #2
 80027d8:	70d8      	strb	r0, [r3, #3]
    engine.firing_interval = (angle_t)720 / engine.cylinder_count;
 80027da:	4b23      	ldr	r3, [pc, #140]	@ (8002868 <ignition_init+0xb0>)
 80027dc:	6153      	str	r3, [r2, #20]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 80027de:	2300      	movs	r3, #0
 80027e0:	e013      	b.n	800280a <ignition_init+0x52>
        log_error("ignition init failed. No output config");
 80027e2:	4822      	ldr	r0, [pc, #136]	@ (800286c <ignition_init+0xb4>)
 80027e4:	f7ff fbc6 	bl	8001f74 <log_error>
        return;
 80027e8:	e002      	b.n	80027f0 <ignition_init+0x38>
            log_error("ignition init failed. unkown firing order.");
 80027ea:	4821      	ldr	r0, [pc, #132]	@ (8002870 <ignition_init+0xb8>)
 80027ec:	f7ff fbc2 	bl	8001f74 <log_error>
}
 80027f0:	bd10      	pop	{r4, pc}
        ignition_outputs[i].gpio = output_conf->output[i].gpio;
 80027f2:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 80027f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002874 <ignition_init+0xbc>)
 80027f8:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
        ignition_outputs[i].pin = output_conf->output[i].pin;
 80027fc:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 8002800:	6840      	ldr	r0, [r0, #4]
 8002802:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002806:	6050      	str	r0, [r2, #4]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8002808:	3301      	adds	r3, #1
 800280a:	2b03      	cmp	r3, #3
 800280c:	d9f1      	bls.n	80027f2 <ignition_init+0x3a>
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 800280e:	2400      	movs	r4, #0
 8002810:	e008      	b.n	8002824 <ignition_init+0x6c>
        ignition_coil_state[i] = HAL_GPIO_ReadPin(ignition_outputs[i].gpio, ignition_outputs->pin);
 8002812:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <ignition_init+0xbc>)
 8002814:	8899      	ldrh	r1, [r3, #4]
 8002816:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800281a:	f002 f959 	bl	8004ad0 <HAL_GPIO_ReadPin>
 800281e:	4b16      	ldr	r3, [pc, #88]	@ (8002878 <ignition_init+0xc0>)
 8002820:	5518      	strb	r0, [r3, r4]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8002822:	3401      	adds	r4, #1
 8002824:	2c03      	cmp	r4, #3
 8002826:	d9f4      	bls.n	8002812 <ignition_init+0x5a>
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8002828:	2400      	movs	r4, #0
 800282a:	e007      	b.n	800283c <ignition_init+0x84>
        HAL_GPIO_WritePin(ignition_outputs[i].gpio, ignition_outputs->pin, GPIO_PIN_RESET);
 800282c:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <ignition_init+0xbc>)
 800282e:	2200      	movs	r2, #0
 8002830:	8899      	ldrh	r1, [r3, #4]
 8002832:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8002836:	f002 f952 	bl	8004ade <HAL_GPIO_WritePin>
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 800283a:	3401      	adds	r4, #1
 800283c:	2c03      	cmp	r4, #3
 800283e:	d9f5      	bls.n	800282c <ignition_init+0x74>
    if (configuration.ignition_is_multi_spark && !IS_IN_RANGE(configuration.ignition_multi_spark_number_of_sparks, 0, IGNITION_MULTI_SPARK_MAX_SPARKS))
 8002840:	4b06      	ldr	r3, [pc, #24]	@ (800285c <ignition_init+0xa4>)
 8002842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0d2      	beq.n	80027f0 <ignition_init+0x38>
 800284a:	4b04      	ldr	r3, [pc, #16]	@ (800285c <ignition_init+0xa4>)
 800284c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002850:	2b08      	cmp	r3, #8
 8002852:	d9cd      	bls.n	80027f0 <ignition_init+0x38>
        log_warning("Multi spark is enabled but number of sparks are 0.");
 8002854:	4809      	ldr	r0, [pc, #36]	@ (800287c <ignition_init+0xc4>)
 8002856:	f7ff fbab 	bl	8001fb0 <log_warning>
 800285a:	e7c9      	b.n	80027f0 <ignition_init+0x38>
 800285c:	200018cc 	.word	0x200018cc
 8002860:	2000186c 	.word	0x2000186c
 8002864:	2000638c 	.word	0x2000638c
 8002868:	43340000 	.word	0x43340000
 800286c:	0800ba20 	.word	0x0800ba20
 8002870:	0800ba48 	.word	0x0800ba48
 8002874:	20006394 	.word	0x20006394
 8002878:	20006390 	.word	0x20006390
 800287c:	0800ba74 	.word	0x0800ba74

08002880 <ignition_trigger_event_handle>:
{
 8002880:	b530      	push	{r4, r5, lr}
 8002882:	b085      	sub	sp, #20
    if (engine.firing_interval == 0)
 8002884:	4b5d      	ldr	r3, [pc, #372]	@ (80029fc <ignition_trigger_event_handle+0x17c>)
 8002886:	edd3 7a05 	vldr	s15, [r3, #20]
 800288a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002892:	f000 80a4 	beq.w	80029de <ignition_trigger_event_handle+0x15e>
    if (configuration.ignition_mode == IM_NO_IGNITION)
 8002896:	4b5a      	ldr	r3, [pc, #360]	@ (8002a00 <ignition_trigger_event_handle+0x180>)
 8002898:	7e1b      	ldrb	r3, [r3, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 80a6 	beq.w	80029ec <ignition_trigger_event_handle+0x16c>
    if (!IS_IN_RANGE(configuration.ignition_dwell, IGNITION_MIN_DWELL_TIME_MS, IGNITION_MAX_DWELL_TIME_MS))
 80028a0:	4b57      	ldr	r3, [pc, #348]	@ (8002a00 <ignition_trigger_event_handle+0x180>)
 80028a2:	ed93 7a07 	vldr	s14, [r3, #28]
 80028a6:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80028aa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	f2c0 8098 	blt.w	80029e6 <ignition_trigger_event_handle+0x166>
 80028b6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80028ba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80028be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c2:	f200 8090 	bhi.w	80029e6 <ignition_trigger_event_handle+0x166>
    uint8_t phase = (uint8_t)(crankshaft_angle / engine.firing_interval);
 80028c6:	eec0 6a27 	vdiv.f32	s13, s0, s15
 80028ca:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80028ce:	edcd 6a01 	vstr	s13, [sp, #4]
 80028d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    volatile angle_t next_spark_angle = phase * engine.firing_interval - spark_advance + engine.firing_interval;
 80028d6:	ee06 3a90 	vmov	s13, r3
 80028da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80028de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028e2:	eeb3 6a0e 	vmov.f32	s12, #62	@ 0x41f00000  30.0
 80028e6:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80028ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ee:	edcd 7a03 	vstr	s15, [sp, #12]
    volatile angle_t next_dwell_angle = next_spark_angle - (float)configuration.ignition_dwell * (float)1000 * degrees_per_microsecond(rpm);
 80028f2:	eddd 7a03 	vldr	s15, [sp, #12]
 80028f6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002a04 <ignition_trigger_event_handle+0x184>
 80028fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 * @brief Function to calculate the degrees the engine turns in one microsecond.
 * @note Returns 0 if rpm is 0.
 */
static inline angle_t degrees_per_microsecond(rpm_t rpm)
{
    if (rpm == 0)
 80028fe:	eef5 0a40 	vcmp.f32	s1, #0.0
 8002902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002906:	d073      	beq.n	80029f0 <ignition_trigger_event_handle+0x170>
    {
        return 0.0f;
    }
    return (angle_t)(rpm * 360.0f) / (60.0f * 1e6f);
 8002908:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002a08 <ignition_trigger_event_handle+0x188>
 800290c:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002910:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002a0c <ignition_trigger_event_handle+0x18c>
 8002914:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 8002918:	ee27 7a06 	vmul.f32	s14, s14, s12
 800291c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002920:	edcd 7a02 	vstr	s15, [sp, #8]
    next_firing_cylinders[0] = ignition_order[phase] - 1;
 8002924:	4c3a      	ldr	r4, [pc, #232]	@ (8002a10 <ignition_trigger_event_handle+0x190>)
 8002926:	5ce2      	ldrb	r2, [r4, r3]
 8002928:	3a01      	subs	r2, #1
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	4939      	ldr	r1, [pc, #228]	@ (8002a14 <ignition_trigger_event_handle+0x194>)
 800292e:	700a      	strb	r2, [r1, #0]
    next_firing_cylinders[1] = ignition_order[phase] - 1;
 8002930:	704a      	strb	r2, [r1, #1]
        next_firing_cylinders[1] = ignition_order[phase + 2] - 1;
 8002932:	3302      	adds	r3, #2
 8002934:	5ce3      	ldrb	r3, [r4, r3]
 8002936:	3b01      	subs	r3, #1
 8002938:	704b      	strb	r3, [r1, #1]
    bool is_synced = engine.trigger.sync_status == TS_FULLY_SYNCED;
 800293a:	4b30      	ldr	r3, [pc, #192]	@ (80029fc <ignition_trigger_event_handle+0x17c>)
 800293c:	7f5b      	ldrb	r3, [r3, #29]
    if (is_synced && (next_dwell_angle - crankshaft_angle) < 10 && !spark_is_in_progress && (next_dwell_angle - crankshaft_angle) > 0)
 800293e:	2b01      	cmp	r3, #1
 8002940:	d154      	bne.n	80029ec <ignition_trigger_event_handle+0x16c>
 8002942:	eddd 7a02 	vldr	s15, [sp, #8]
 8002946:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800294a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800294e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002956:	d549      	bpl.n	80029ec <ignition_trigger_event_handle+0x16c>
 8002958:	4b2f      	ldr	r3, [pc, #188]	@ (8002a18 <ignition_trigger_event_handle+0x198>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d145      	bne.n	80029ec <ignition_trigger_event_handle+0x16c>
 8002960:	eddd 7a02 	vldr	s15, [sp, #8]
 8002964:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002968:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800296c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002970:	dd3c      	ble.n	80029ec <ignition_trigger_event_handle+0x16c>
        spark_is_in_progress = true;
 8002972:	4b29      	ldr	r3, [pc, #164]	@ (8002a18 <ignition_trigger_event_handle+0x198>)
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
        time_us_t dwell_start_time_us = current_time_us + (time_us_t)((next_dwell_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 8002978:	ed9d 7a02 	vldr	s14, [sp, #8]
 800297c:	ee37 7a40 	vsub.f32	s14, s14, s0
    if (rpm == 0)
 8002980:	eef5 0a40 	vcmp.f32	s1, #0.0
 8002984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002988:	d035      	beq.n	80029f6 <ignition_trigger_event_handle+0x176>
    return (time_us_t) 60.0f * 1e6f / (rpm * 360.0f);
 800298a:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8002a08 <ignition_trigger_event_handle+0x188>
 800298e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8002992:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002a0c <ignition_trigger_event_handle+0x18c>
 8002996:	eec6 7aa0 	vdiv.f32	s15, s13, s1
 800299a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800299e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
        time_us_t spark_start_time_us = current_time_us + (time_us_t)((next_spark_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 80029aa:	eddd 6a03 	vldr	s13, [sp, #12]
 80029ae:	ee76 6ac0 	vsub.f32	s13, s13, s0
 80029b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ba:	ee17 4a90 	vmov	r4, s15
 80029be:	4404      	add	r4, r0
        scheduler_schedule_event_with_arg(dwell_start_time_us, ignition_coil_begin_charge, (void*)next_firing_cylinders);
 80029c0:	4d14      	ldr	r5, [pc, #80]	@ (8002a14 <ignition_trigger_event_handle+0x194>)
 80029c2:	462a      	mov	r2, r5
 80029c4:	4915      	ldr	r1, [pc, #84]	@ (8002a1c <ignition_trigger_event_handle+0x19c>)
 80029c6:	ee17 3a10 	vmov	r3, s14
 80029ca:	4403      	add	r3, r0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f006 faf9 	bl	8008fc4 <scheduler_schedule_event_with_arg>
        scheduler_schedule_event_with_arg(spark_start_time_us, ignition_coil_fire_spark, (void*)next_firing_cylinders);
 80029d2:	462a      	mov	r2, r5
 80029d4:	4912      	ldr	r1, [pc, #72]	@ (8002a20 <ignition_trigger_event_handle+0x1a0>)
 80029d6:	4620      	mov	r0, r4
 80029d8:	f006 faf4 	bl	8008fc4 <scheduler_schedule_event_with_arg>
 80029dc:	e006      	b.n	80029ec <ignition_trigger_event_handle+0x16c>
        log_error("ignition not initialized.");
 80029de:	4811      	ldr	r0, [pc, #68]	@ (8002a24 <ignition_trigger_event_handle+0x1a4>)
 80029e0:	f7ff fac8 	bl	8001f74 <log_error>
        return;
 80029e4:	e002      	b.n	80029ec <ignition_trigger_event_handle+0x16c>
        log_error("ignition dwell out of bounds.");
 80029e6:	4810      	ldr	r0, [pc, #64]	@ (8002a28 <ignition_trigger_event_handle+0x1a8>)
 80029e8:	f7ff fac4 	bl	8001f74 <log_error>
}
 80029ec:	b005      	add	sp, #20
 80029ee:	bd30      	pop	{r4, r5, pc}
        return 0.0f;
 80029f0:	ed9f 6a0e 	vldr	s12, [pc, #56]	@ 8002a2c <ignition_trigger_event_handle+0x1ac>
 80029f4:	e790      	b.n	8002918 <ignition_trigger_event_handle+0x98>
        return 0;
 80029f6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8002a30 <ignition_trigger_event_handle+0x1b0>
 80029fa:	e7d0      	b.n	800299e <ignition_trigger_event_handle+0x11e>
 80029fc:	2000186c 	.word	0x2000186c
 8002a00:	200018cc 	.word	0x200018cc
 8002a04:	447a0000 	.word	0x447a0000
 8002a08:	43b40000 	.word	0x43b40000
 8002a0c:	4c64e1c0 	.word	0x4c64e1c0
 8002a10:	2000638c 	.word	0x2000638c
 8002a14:	20006388 	.word	0x20006388
 8002a18:	2000638a 	.word	0x2000638a
 8002a1c:	08002701 	.word	0x08002701
 8002a20:	08002759 	.word	0x08002759
 8002a24:	0800baa8 	.word	0x0800baa8
 8002a28:	0800bac4 	.word	0x0800bac4
	...

08002a34 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a34:	f100 0308 	add.w	r3, r0, #8
 8002a38:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a3e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a40:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a42:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a48:	4770      	bx	lr

08002a4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a4e:	4770      	bx	lr

08002a50 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a50:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a52:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a58:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a5a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a5c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002a5e:	6803      	ldr	r3, [r0, #0]
 8002a60:	3301      	adds	r3, #1
 8002a62:	6003      	str	r3, [r0, #0]
}
 8002a64:	4770      	bx	lr

08002a66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a66:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a68:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a6a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002a6e:	d011      	beq.n	8002a94 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a70:	f100 0308 	add.w	r3, r0, #8
 8002a74:	461c      	mov	r4, r3
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	42aa      	cmp	r2, r5
 8002a7c:	d9fa      	bls.n	8002a74 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a7e:	6863      	ldr	r3, [r4, #4]
 8002a80:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a82:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a84:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a86:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a88:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002a8a:	6803      	ldr	r3, [r0, #0]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	6003      	str	r3, [r0, #0]
}
 8002a90:	bc30      	pop	{r4, r5}
 8002a92:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a94:	6904      	ldr	r4, [r0, #16]
 8002a96:	e7f2      	b.n	8002a7e <vListInsert+0x18>

08002a98 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a98:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a9a:	6841      	ldr	r1, [r0, #4]
 8002a9c:	6882      	ldr	r2, [r0, #8]
 8002a9e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002aa0:	6841      	ldr	r1, [r0, #4]
 8002aa2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	4282      	cmp	r2, r0
 8002aa8:	d006      	beq.n	8002ab8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002aaa:	2200      	movs	r2, #0
 8002aac:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	3a01      	subs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ab4:	6818      	ldr	r0, [r3, #0]
}
 8002ab6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ab8:	6882      	ldr	r2, [r0, #8]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	e7f5      	b.n	8002aaa <uxListRemove+0x12>

08002abe <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  __NOP();
 8002abe:	bf00      	nop
  if (GPIO_Pin == GPIO_PIN_9)
 8002ac0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002ac4:	d000      	beq.n	8002ac8 <HAL_GPIO_EXTI_Callback+0xa>
 8002ac6:	4770      	bx	lr
{
 8002ac8:	b508      	push	{r3, lr}
  {
    trigger_tooth_handle();
 8002aca:	f006 fb01 	bl	80090d0 <trigger_tooth_handle>
  }
}
 8002ace:	bd08      	pop	{r3, pc}

08002ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 8002ad2:	6802      	ldr	r2, [r0, #0]
 8002ad4:	4b03      	ldr	r3, [pc, #12]	@ (8002ae4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d000      	beq.n	8002adc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ada:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002adc:	f001 f8e4 	bl	8003ca8 <HAL_IncTick>
}
 8002ae0:	e7fb      	b.n	8002ada <HAL_TIM_PeriodElapsedCallback+0xa>
 8002ae2:	bf00      	nop
 8002ae4:	40014800 	.word	0x40014800

08002ae8 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002aea:	e7fe      	b.n	8002aea <Error_Handler+0x2>

08002aec <SystemClock_Config>:
{
 8002aec:	b510      	push	{r4, lr}
 8002aee:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002af0:	ac08      	add	r4, sp, #32
 8002af2:	2230      	movs	r2, #48	@ 0x30
 8002af4:	2100      	movs	r1, #0
 8002af6:	4620      	mov	r0, r4
 8002af8:	f007 ff7a 	bl	800a9f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002afc:	2300      	movs	r3, #0
 8002afe:	9303      	str	r3, [sp, #12]
 8002b00:	9304      	str	r3, [sp, #16]
 8002b02:	9305      	str	r3, [sp, #20]
 8002b04:	9306      	str	r3, [sp, #24]
 8002b06:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b08:	9301      	str	r3, [sp, #4]
 8002b0a:	4a21      	ldr	r2, [pc, #132]	@ (8002b90 <SystemClock_Config+0xa4>)
 8002b0c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002b0e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002b12:	6411      	str	r1, [r2, #64]	@ 0x40
 8002b14:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b16:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8002b1a:	9201      	str	r2, [sp, #4]
 8002b1c:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b1e:	9302      	str	r3, [sp, #8]
 8002b20:	4a1c      	ldr	r2, [pc, #112]	@ (8002b94 <SystemClock_Config+0xa8>)
 8002b22:	6813      	ldr	r3, [r2, #0]
 8002b24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	6813      	ldr	r3, [r2, #0]
 8002b30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b34:	9302      	str	r3, [sp, #8]
 8002b36:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b40:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b42:	2302      	movs	r3, #2
 8002b44:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b4a:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002b4c:	2319      	movs	r3, #25
 8002b4e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b50:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002b54:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b56:	2304      	movs	r3, #4
 8002b58:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f002 ff16 	bl	8005990 <HAL_RCC_OscConfig>
 8002b64:	b978      	cbnz	r0, 8002b86 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b66:	230f      	movs	r3, #15
 8002b68:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b72:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b76:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b78:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b7a:	a803      	add	r0, sp, #12
 8002b7c:	f003 f958 	bl	8005e30 <HAL_RCC_ClockConfig>
 8002b80:	b918      	cbnz	r0, 8002b8a <SystemClock_Config+0x9e>
}
 8002b82:	b014      	add	sp, #80	@ 0x50
 8002b84:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002b86:	f7ff ffaf 	bl	8002ae8 <Error_Handler>
    Error_Handler();
 8002b8a:	f7ff ffad 	bl	8002ae8 <Error_Handler>
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40007000 	.word	0x40007000

08002b98 <main>:
{
 8002b98:	b508      	push	{r3, lr}
  HAL_Init();
 8002b9a:	f001 f86b 	bl	8003c74 <HAL_Init>
  SystemClock_Config();
 8002b9e:	f7ff ffa5 	bl	8002aec <SystemClock_Config>
  MX_GPIO_Init();
 8002ba2:	f7ff fbbf 	bl	8002324 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ba6:	f7ff f8d7 	bl	8001d58 <MX_DMA_Init>
  MX_TIM3_Init();
 8002baa:	f005 fe35 	bl	8008818 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002bae:	f7fd ff77 	bl	8000aa0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002bb2:	f005 fdcd 	bl	8008750 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002bb6:	f005 fcdd 	bl	8008574 <MX_TIM2_Init>
  MX_CRC_Init();
 8002bba:	f7fe fe71 	bl	80018a0 <MX_CRC_Init>
  MX_I2C1_Init();
 8002bbe:	f7ff fd49 	bl	8002654 <MX_I2C1_Init>
  osKernelInitialize();
 8002bc2:	f7fe f94f 	bl	8000e64 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002bc6:	f7ff fb61 	bl	800228c <MX_FREERTOS_Init>
  osKernelStart();
 8002bca:	f7fe f95d 	bl	8000e88 <osKernelStart>
  while (1)
 8002bce:	e7fe      	b.n	8002bce <main+0x36>

08002bd0 <pid_init>:
#include "pid.h"

void pid_init(pid_t *pid)
{
    /* Clearing controller variables */
    pid->integrator = 0.0f;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	6203      	str	r3, [r0, #32]
    pid->differentiator = 0.0f;
 8002bd4:	6243      	str	r3, [r0, #36]	@ 0x24
    pid->prev_error = 0.0f;
 8002bd6:	6283      	str	r3, [r0, #40]	@ 0x28
    pid->prev_input = 0.0f;
 8002bd8:	62c3      	str	r3, [r0, #44]	@ 0x2c

    pid->prev_controller_time_us = 0;
 8002bda:	2200      	movs	r2, #0
 8002bdc:	6302      	str	r2, [r0, #48]	@ 0x30
    pid->output = 0.0f;
 8002bde:	6383      	str	r3, [r0, #56]	@ 0x38

    /**
     * @todo implement checks for the parameters
     */
    
}
 8002be0:	4770      	bx	lr

08002be2 <pid_set_setpoint>:

void pid_set_setpoint(pid_t *pid, float setpoint)
{
    pid->setpoint = setpoint;
 8002be2:	ed80 0a0d 	vstr	s0, [r0, #52]	@ 0x34
}
 8002be6:	4770      	bx	lr

08002be8 <pid_compute>:

float pid_compute(pid_t *pid, time_us_t current_time_us, float input)
{
    /* Compute the time between the function calls to determine T */
    time_us_t T_us = current_time_us - pid->prev_controller_time_us;
 8002be8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002bea:	1acb      	subs	r3, r1, r3
    float T_sec = (float)T_us / (float)1e6f;
 8002bec:	ee07 3a90 	vmov	s15, r3
 8002bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf4:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002cdc <pid_compute+0xf4>
 8002bf8:	eec7 6a87 	vdiv.f32	s13, s15, s14

    /* Finding the error */
    float error = pid->setpoint - input;
 8002bfc:	ed90 6a0d 	vldr	s12, [r0, #52]	@ 0x34
 8002c00:	ee36 6a40 	vsub.f32	s12, s12, s0

    /* Finding the P-term */
    float proportional = pid->Kp * error;
 8002c04:	edd0 5a00 	vldr	s11, [r0]
 8002c08:	ee65 5a86 	vmul.f32	s11, s11, s12

    /* Finding the integral term*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * T_sec *(error + pid->prev_error);
 8002c0c:	ed90 7a08 	vldr	s14, [r0, #32]
 8002c10:	edd0 7a01 	vldr	s15, [r0, #4]
 8002c14:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8002c18:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002c1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c20:	ed90 5a0a 	vldr	s10, [r0, #40]	@ 0x28
 8002c24:	ee35 5a06 	vadd.f32	s10, s10, s12
 8002c28:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c30:	edc0 7a08 	vstr	s15, [r0, #32]

    /* Anti-windup - works by clamping the integrator */
    if (pid->integrator > pid->limit_integrator_max)
 8002c34:	ed90 7a07 	vldr	s14, [r0, #28]
 8002c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c40:	dd38      	ble.n	8002cb4 <pid_compute+0xcc>
    {
        pid->integrator = pid->limit_integrator_max;
 8002c42:	ed80 7a08 	vstr	s14, [r0, #32]

    /* Finding the derivative term @note has a low pass filter */
    /**
     * @note only derivative on input has been implemented for now
     */
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 8002c46:	edd0 7a02 	vldr	s15, [r0, #8]
 8002c4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c4e:	ed90 7a0b 	vldr	s14, [r0, #44]	@ 0x2c
 8002c52:	ee30 7a47 	vsub.f32	s14, s0, s14
 8002c56:	ee67 7a87 	vmul.f32	s15, s15, s14
                          +(2.0f * pid->derivative_filter_tau - T_sec) * pid->differentiator)
 8002c5a:	ed90 7a03 	vldr	s14, [r0, #12]
 8002c5e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8002c62:	ee37 5a66 	vsub.f32	s10, s14, s13
 8002c66:	edd0 4a09 	vldr	s9, [r0, #36]	@ 0x24
 8002c6a:	ee25 5a24 	vmul.f32	s10, s10, s9
 8002c6e:	ee77 7a85 	vadd.f32	s15, s15, s10
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 8002c72:	eef1 7a67 	vneg.f32	s15, s15
                          / (2.0f * pid->derivative_filter_tau + T_sec);
 8002c76:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002c7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 8002c7e:	edc0 6a09 	vstr	s13, [r0, #36]	@ 0x24

    /* Summing the terms to make the output */
    pid->output = proportional + pid->integrator + pid->differentiator;
 8002c82:	edd0 7a08 	vldr	s15, [r0, #32]
 8002c86:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c8e:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38

    /* Clamp the output the the output bounds */
    if (pid->output > pid->limit_output_max)
 8002c92:	ed90 7a05 	vldr	s14, [r0, #20]
 8002c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9e:	dd13      	ble.n	8002cc8 <pid_compute+0xe0>
    {
        pid->output = pid->limit_output_max;
 8002ca0:	ed80 7a0e 	vstr	s14, [r0, #56]	@ 0x38
    {
        pid->output = pid->limit_output_min;
    }

    /* Save the variables for the next function call */
    pid->prev_error = error;
 8002ca4:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
    pid->prev_input = input;
 8002ca8:	ed80 0a0b 	vstr	s0, [r0, #44]	@ 0x2c
    pid->prev_controller_time_us = current_time_us;
 8002cac:	6301      	str	r1, [r0, #48]	@ 0x30
    
    return pid->output;
}
 8002cae:	ed90 0a0e 	vldr	s0, [r0, #56]	@ 0x38
 8002cb2:	4770      	bx	lr
    else if (pid->integrator < pid->limit_integrator_min)
 8002cb4:	ed90 7a06 	vldr	s14, [r0, #24]
 8002cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc0:	d5c1      	bpl.n	8002c46 <pid_compute+0x5e>
        pid->integrator = pid->limit_integrator_min;
 8002cc2:	ed80 7a08 	vstr	s14, [r0, #32]
 8002cc6:	e7be      	b.n	8002c46 <pid_compute+0x5e>
    else if (pid->output < pid->limit_output_min)
 8002cc8:	ed90 7a04 	vldr	s14, [r0, #16]
 8002ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd4:	d5e6      	bpl.n	8002ca4 <pid_compute+0xbc>
        pid->output = pid->limit_output_min;
 8002cd6:	ed80 7a0e 	vstr	s14, [r0, #56]	@ 0x38
 8002cda:	e7e3      	b.n	8002ca4 <pid_compute+0xbc>
 8002cdc:	49742400 	.word	0x49742400

08002ce0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ce0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d1c <prvTaskExitError+0x3c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cee:	d008      	beq.n	8002d02 <prvTaskExitError+0x22>
 8002cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	e7fe      	b.n	8002d00 <prvTaskExitError+0x20>
 8002d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d06:	f383 8811 	msr	BASEPRI, r3
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002d12:	9b01      	ldr	r3, [sp, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0fc      	beq.n	8002d12 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002d18:	b002      	add	sp, #8
 8002d1a:	4770      	bx	lr
 8002d1c:	20000048 	.word	0x20000048

08002d20 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002d20:	4808      	ldr	r0, [pc, #32]	@ (8002d44 <prvPortStartFirstTask+0x24>)
 8002d22:	6800      	ldr	r0, [r0, #0]
 8002d24:	6800      	ldr	r0, [r0, #0]
 8002d26:	f380 8808 	msr	MSP, r0
 8002d2a:	f04f 0000 	mov.w	r0, #0
 8002d2e:	f380 8814 	msr	CONTROL, r0
 8002d32:	b662      	cpsie	i
 8002d34:	b661      	cpsie	f
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	df00      	svc	0
 8002d40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002d42:	0000      	.short	0x0000
 8002d44:	e000ed08 	.word	0xe000ed08

08002d48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002d48:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002d58 <vPortEnableVFP+0x10>
 8002d4c:	6801      	ldr	r1, [r0, #0]
 8002d4e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002d52:	6001      	str	r1, [r0, #0]
 8002d54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002d56:	0000      	.short	0x0000
 8002d58:	e000ed88 	.word	0xe000ed88

08002d5c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d60:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d64:	f021 0101 	bic.w	r1, r1, #1
 8002d68:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d6c:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <pxPortInitialiseStack+0x28>)
 8002d6e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d72:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d76:	f06f 0302 	mvn.w	r3, #2
 8002d7a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002d7e:	3844      	subs	r0, #68	@ 0x44
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	08002ce1 	.word	0x08002ce1
	...

08002d90 <SVC_Handler>:
	__asm volatile (
 8002d90:	4b07      	ldr	r3, [pc, #28]	@ (8002db0 <pxCurrentTCBConst2>)
 8002d92:	6819      	ldr	r1, [r3, #0]
 8002d94:	6808      	ldr	r0, [r1, #0]
 8002d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d9a:	f380 8809 	msr	PSP, r0
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f04f 0000 	mov.w	r0, #0
 8002da6:	f380 8811 	msr	BASEPRI, r0
 8002daa:	4770      	bx	lr
 8002dac:	f3af 8000 	nop.w

08002db0 <pxCurrentTCBConst2>:
 8002db0:	20006964 	.word	0x20006964

08002db4 <vPortEnterCritical>:
 8002db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002dc4:	4a0b      	ldr	r2, [pc, #44]	@ (8002df4 <vPortEnterCritical+0x40>)
 8002dc6:	6813      	ldr	r3, [r2, #0]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d000      	beq.n	8002dd2 <vPortEnterCritical+0x1e>
}
 8002dd0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002dd2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002dd6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8002dda:	f013 0fff 	tst.w	r3, #255	@ 0xff
 8002dde:	d0f7      	beq.n	8002dd0 <vPortEnterCritical+0x1c>
 8002de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	e7fe      	b.n	8002df0 <vPortEnterCritical+0x3c>
 8002df2:	bf00      	nop
 8002df4:	20000048 	.word	0x20000048

08002df8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002df8:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <vPortExitCritical+0x28>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	b943      	cbnz	r3, 8002e10 <vPortExitCritical+0x18>
 8002dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	e7fe      	b.n	8002e0e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002e10:	3b01      	subs	r3, #1
 8002e12:	4a03      	ldr	r2, [pc, #12]	@ (8002e20 <vPortExitCritical+0x28>)
 8002e14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002e16:	b90b      	cbnz	r3, 8002e1c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e18:	f383 8811 	msr	BASEPRI, r3
}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000048 	.word	0x20000048
	...

08002e30 <PendSV_Handler>:
	__asm volatile
 8002e30:	f3ef 8009 	mrs	r0, PSP
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <pxCurrentTCBConst>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	f01e 0f10 	tst.w	lr, #16
 8002e40:	bf08      	it	eq
 8002e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e4a:	6010      	str	r0, [r2, #0]
 8002e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002e54:	f380 8811 	msr	BASEPRI, r0
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f005 f916 	bl	8008090 <vTaskSwitchContext>
 8002e64:	f04f 0000 	mov.w	r0, #0
 8002e68:	f380 8811 	msr	BASEPRI, r0
 8002e6c:	bc09      	pop	{r0, r3}
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	6808      	ldr	r0, [r1, #0]
 8002e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e76:	f01e 0f10 	tst.w	lr, #16
 8002e7a:	bf08      	it	eq
 8002e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e80:	f380 8809 	msr	PSP, r0
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	f3af 8000 	nop.w

08002e90 <pxCurrentTCBConst>:
 8002e90:	20006964 	.word	0x20006964

08002e94 <xPortSysTickHandler>:
{
 8002e94:	b508      	push	{r3, lr}
	__asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002ea6:	f004 ffc5 	bl	8007e34 <xTaskIncrementTick>
 8002eaa:	b128      	cbz	r0, 8002eb8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002eac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f383 8811 	msr	BASEPRI, r3
}
 8002ebe:	bd08      	pop	{r3, pc}

08002ec0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ec0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ec8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002eca:	4b05      	ldr	r3, [pc, #20]	@ (8002ee0 <vPortSetupTimerInterrupt+0x20>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4905      	ldr	r1, [pc, #20]	@ (8002ee4 <vPortSetupTimerInterrupt+0x24>)
 8002ed0:	fba1 1303 	umull	r1, r3, r1, r3
 8002ed4:	099b      	lsrs	r3, r3, #6
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002eda:	2307      	movs	r3, #7
 8002edc:	6113      	str	r3, [r2, #16]
}
 8002ede:	4770      	bx	lr
 8002ee0:	20000054 	.word	0x20000054
 8002ee4:	10624dd3 	.word	0x10624dd3

08002ee8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ee8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002eec:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002ef0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe8 <xPortStartScheduler+0x100>)
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d01c      	beq.n	8002f30 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002ef6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002efa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002efe:	4b3b      	ldr	r3, [pc, #236]	@ (8002fec <xPortStartScheduler+0x104>)
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d01e      	beq.n	8002f42 <xPortStartScheduler+0x5a>
{
 8002f04:	b530      	push	{r4, r5, lr}
 8002f06:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f08:	4b39      	ldr	r3, [pc, #228]	@ (8002ff0 <xPortStartScheduler+0x108>)
 8002f0a:	781a      	ldrb	r2, [r3, #0]
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f10:	22ff      	movs	r2, #255	@ 0xff
 8002f12:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002f20:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f24:	4a33      	ldr	r2, [pc, #204]	@ (8002ff4 <xPortStartScheduler+0x10c>)
 8002f26:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f28:	4b33      	ldr	r3, [pc, #204]	@ (8002ff8 <xPortStartScheduler+0x110>)
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f2e:	e01b      	b.n	8002f68 <xPortStartScheduler+0x80>
	__asm volatile
 8002f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f40:	e7fe      	b.n	8002f40 <xPortStartScheduler+0x58>
 8002f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f52:	e7fe      	b.n	8002f52 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8002f54:	4a28      	ldr	r2, [pc, #160]	@ (8002ff8 <xPortStartScheduler+0x110>)
 8002f56:	6813      	ldr	r3, [r2, #0]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f5c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f68:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002f6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002f70:	d1f0      	bne.n	8002f54 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f72:	4b21      	ldr	r3, [pc, #132]	@ (8002ff8 <xPortStartScheduler+0x110>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d008      	beq.n	8002f8c <xPortStartScheduler+0xa4>
 8002f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	e7fe      	b.n	8002f8a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff8 <xPortStartScheduler+0x110>)
 8002f90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f92:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f96:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f98:	9b01      	ldr	r3, [sp, #4]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	4a14      	ldr	r2, [pc, #80]	@ (8002ff0 <xPortStartScheduler+0x108>)
 8002f9e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002fa0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8002fa4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8002fa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fac:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002fb0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8002fb4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002fb8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8002fbc:	f7ff ff80 	bl	8002ec0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002fc0:	2500      	movs	r5, #0
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ffc <xPortStartScheduler+0x114>)
 8002fc4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8002fc6:	f7ff febf 	bl	8002d48 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002fca:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8002fce:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002fd2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8002fd6:	f7ff fea3 	bl	8002d20 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002fda:	f005 f859 	bl	8008090 <vTaskSwitchContext>
	prvTaskExitError();
 8002fde:	f7ff fe7f 	bl	8002ce0 <prvTaskExitError>
}
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	b003      	add	sp, #12
 8002fe6:	bd30      	pop	{r4, r5, pc}
 8002fe8:	410fc271 	.word	0x410fc271
 8002fec:	410fc270 	.word	0x410fc270
 8002ff0:	e000e400 	.word	0xe000e400
 8002ff4:	200063b8 	.word	0x200063b8
 8002ff8:	200063b4 	.word	0x200063b4
 8002ffc:	20000048 	.word	0x20000048

08003000 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003000:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003004:	2b0f      	cmp	r3, #15
 8003006:	d90e      	bls.n	8003026 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003008:	4a11      	ldr	r2, [pc, #68]	@ (8003050 <vPortValidateInterruptPriority+0x50>)
 800300a:	5c9a      	ldrb	r2, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800300c:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <vPortValidateInterruptPriority+0x54>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d208      	bcs.n	8003026 <vPortValidateInterruptPriority+0x26>
 8003014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	e7fe      	b.n	8003024 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003026:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800302a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800302e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003032:	4a09      	ldr	r2, [pc, #36]	@ (8003058 <vPortValidateInterruptPriority+0x58>)
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	4293      	cmp	r3, r2
 8003038:	d908      	bls.n	800304c <vPortValidateInterruptPriority+0x4c>
 800303a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	e7fe      	b.n	800304a <vPortValidateInterruptPriority+0x4a>
	}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000e3f0 	.word	0xe000e3f0
 8003054:	200063b8 	.word	0x200063b8
 8003058:	200063b4 	.word	0x200063b4

0800305c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800305c:	b510      	push	{r4, lr}
 800305e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003060:	f7ff fea8 	bl	8002db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003064:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003066:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003068:	429a      	cmp	r2, r3
 800306a:	d004      	beq.n	8003076 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800306c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800306e:	f7ff fec3 	bl	8002df8 <vPortExitCritical>

	return xReturn;
}
 8003072:	4620      	mov	r0, r4
 8003074:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8003076:	2401      	movs	r4, #1
 8003078:	e7f9      	b.n	800306e <prvIsQueueFull+0x12>

0800307a <prvIsQueueEmpty>:
{
 800307a:	b510      	push	{r4, lr}
 800307c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800307e:	f7ff fe99 	bl	8002db4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003082:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003084:	b923      	cbnz	r3, 8003090 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8003086:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8003088:	f7ff feb6 	bl	8002df8 <vPortExitCritical>
}
 800308c:	4620      	mov	r0, r4
 800308e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8003090:	2400      	movs	r4, #0
 8003092:	e7f9      	b.n	8003088 <prvIsQueueEmpty+0xe>

08003094 <prvCopyDataToQueue>:
{
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	4604      	mov	r4, r0
 8003098:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800309a:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800309c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800309e:	b95a      	cbnz	r2, 80030b8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030a0:	6803      	ldr	r3, [r0, #0]
 80030a2:	b11b      	cbz	r3, 80030ac <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80030a4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030a6:	3601      	adds	r6, #1
 80030a8:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030ac:	6880      	ldr	r0, [r0, #8]
 80030ae:	f005 f95f 	bl	8008370 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60a3      	str	r3, [r4, #8]
 80030b6:	e7f6      	b.n	80030a6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80030b8:	b96d      	cbnz	r5, 80030d6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030ba:	6840      	ldr	r0, [r0, #4]
 80030bc:	f007 fccc 	bl	800aa58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030c0:	6863      	ldr	r3, [r4, #4]
 80030c2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80030c4:	4413      	add	r3, r2
 80030c6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030c8:	68a2      	ldr	r2, [r4, #8]
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d319      	bcc.n	8003102 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80030d2:	4628      	mov	r0, r5
 80030d4:	e7e7      	b.n	80030a6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80030d6:	68c0      	ldr	r0, [r0, #12]
 80030d8:	f007 fcbe 	bl	800aa58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030dc:	68e3      	ldr	r3, [r4, #12]
 80030de:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80030e0:	4251      	negs	r1, r2
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030e6:	6822      	ldr	r2, [r4, #0]
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d202      	bcs.n	80030f2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030ec:	68a3      	ldr	r3, [r4, #8]
 80030ee:	440b      	add	r3, r1
 80030f0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80030f2:	2d02      	cmp	r5, #2
 80030f4:	d001      	beq.n	80030fa <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80030f6:	2000      	movs	r0, #0
 80030f8:	e7d5      	b.n	80030a6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030fa:	b126      	cbz	r6, 8003106 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80030fc:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80030fe:	2000      	movs	r0, #0
 8003100:	e7d1      	b.n	80030a6 <prvCopyDataToQueue+0x12>
 8003102:	4628      	mov	r0, r5
 8003104:	e7cf      	b.n	80030a6 <prvCopyDataToQueue+0x12>
 8003106:	2000      	movs	r0, #0
 8003108:	e7cd      	b.n	80030a6 <prvCopyDataToQueue+0x12>

0800310a <prvCopyDataFromQueue>:
{
 800310a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800310c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800310e:	b16a      	cbz	r2, 800312c <prvCopyDataFromQueue+0x22>
{
 8003110:	b510      	push	{r4, lr}
 8003112:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003114:	68d9      	ldr	r1, [r3, #12]
 8003116:	4411      	add	r1, r2
 8003118:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800311a:	689c      	ldr	r4, [r3, #8]
 800311c:	42a1      	cmp	r1, r4
 800311e:	d301      	bcc.n	8003124 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003124:	68d9      	ldr	r1, [r3, #12]
 8003126:	f007 fc97 	bl	800aa58 <memcpy>
}
 800312a:	bd10      	pop	{r4, pc}
 800312c:	4770      	bx	lr

0800312e <prvUnlockQueue>:
{
 800312e:	b538      	push	{r3, r4, r5, lr}
 8003130:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8003132:	f7ff fe3f 	bl	8002db4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003136:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800313a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800313c:	e001      	b.n	8003142 <prvUnlockQueue+0x14>
			--cTxLock;
 800313e:	3c01      	subs	r4, #1
 8003140:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003142:	2c00      	cmp	r4, #0
 8003144:	dd0a      	ble.n	800315c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003146:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003148:	b143      	cbz	r3, 800315c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800314a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800314e:	f005 f81f 	bl	8008190 <xTaskRemoveFromEventList>
 8003152:	2800      	cmp	r0, #0
 8003154:	d0f3      	beq.n	800313e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8003156:	f005 f8f5 	bl	8008344 <vTaskMissedYield>
 800315a:	e7f0      	b.n	800313e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800315c:	23ff      	movs	r3, #255	@ 0xff
 800315e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8003162:	f7ff fe49 	bl	8002df8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003166:	f7ff fe25 	bl	8002db4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800316a:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 800316e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003170:	e001      	b.n	8003176 <prvUnlockQueue+0x48>
				--cRxLock;
 8003172:	3c01      	subs	r4, #1
 8003174:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003176:	2c00      	cmp	r4, #0
 8003178:	dd0a      	ble.n	8003190 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800317a:	692b      	ldr	r3, [r5, #16]
 800317c:	b143      	cbz	r3, 8003190 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800317e:	f105 0010 	add.w	r0, r5, #16
 8003182:	f005 f805 	bl	8008190 <xTaskRemoveFromEventList>
 8003186:	2800      	cmp	r0, #0
 8003188:	d0f3      	beq.n	8003172 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800318a:	f005 f8db 	bl	8008344 <vTaskMissedYield>
 800318e:	e7f0      	b.n	8003172 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8003190:	23ff      	movs	r3, #255	@ 0xff
 8003192:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8003196:	f7ff fe2f 	bl	8002df8 <vPortExitCritical>
}
 800319a:	bd38      	pop	{r3, r4, r5, pc}

0800319c <xQueueGenericReset>:
{
 800319c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800319e:	b1e0      	cbz	r0, 80031da <xQueueGenericReset+0x3e>
 80031a0:	460d      	mov	r5, r1
 80031a2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80031a4:	f7ff fe06 	bl	8002db4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80031ac:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80031ae:	fb01 3002 	mla	r0, r1, r2, r3
 80031b2:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031b4:	2000      	movs	r0, #0
 80031b6:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031b8:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031ba:	3a01      	subs	r2, #1
 80031bc:	fb02 3301 	mla	r3, r2, r1, r3
 80031c0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031c2:	23ff      	movs	r3, #255	@ 0xff
 80031c4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031c8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80031cc:	b9fd      	cbnz	r5, 800320e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ce:	6923      	ldr	r3, [r4, #16]
 80031d0:	b963      	cbnz	r3, 80031ec <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80031d2:	f7ff fe11 	bl	8002df8 <vPortExitCritical>
}
 80031d6:	2001      	movs	r0, #1
 80031d8:	bd38      	pop	{r3, r4, r5, pc}
 80031da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80031ea:	e7fe      	b.n	80031ea <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031ec:	f104 0010 	add.w	r0, r4, #16
 80031f0:	f004 ffce 	bl	8008190 <xTaskRemoveFromEventList>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d0ec      	beq.n	80031d2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80031f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80031fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003200:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	e7e1      	b.n	80031d2 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800320e:	f104 0010 	add.w	r0, r4, #16
 8003212:	f7ff fc0f 	bl	8002a34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003216:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800321a:	f7ff fc0b 	bl	8002a34 <vListInitialise>
 800321e:	e7d8      	b.n	80031d2 <xQueueGenericReset+0x36>

08003220 <prvInitialiseNewQueue>:
{
 8003220:	b538      	push	{r3, r4, r5, lr}
 8003222:	461d      	mov	r5, r3
 8003224:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003226:	460b      	mov	r3, r1
 8003228:	b949      	cbnz	r1, 800323e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800322a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800322c:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800322e:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003230:	2101      	movs	r1, #1
 8003232:	4620      	mov	r0, r4
 8003234:	f7ff ffb2 	bl	800319c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003238:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800323c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800323e:	6022      	str	r2, [r4, #0]
 8003240:	e7f4      	b.n	800322c <prvInitialiseNewQueue+0xc>

08003242 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003242:	b940      	cbnz	r0, 8003256 <xQueueGenericCreateStatic+0x14>
 8003244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	e7fe      	b.n	8003254 <xQueueGenericCreateStatic+0x12>
	{
 8003256:	b510      	push	{r4, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	461c      	mov	r4, r3
 800325c:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800325e:	b153      	cbz	r3, 8003276 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003260:	b192      	cbz	r2, 8003288 <xQueueGenericCreateStatic+0x46>
 8003262:	b989      	cbnz	r1, 8003288 <xQueueGenericCreateStatic+0x46>
 8003264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	e7fe      	b.n	8003274 <xQueueGenericCreateStatic+0x32>
 8003276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8003286:	e7fe      	b.n	8003286 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003288:	b16a      	cbz	r2, 80032a6 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800328a:	2350      	movs	r3, #80	@ 0x50
 800328c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800328e:	9b03      	ldr	r3, [sp, #12]
 8003290:	2b50      	cmp	r3, #80	@ 0x50
 8003292:	d013      	beq.n	80032bc <xQueueGenericCreateStatic+0x7a>
 8003294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	e7fe      	b.n	80032a4 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032a6:	2900      	cmp	r1, #0
 80032a8:	d0ef      	beq.n	800328a <xQueueGenericCreateStatic+0x48>
 80032aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	e7fe      	b.n	80032ba <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80032bc:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032be:	2301      	movs	r3, #1
 80032c0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032c4:	9400      	str	r4, [sp, #0]
 80032c6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80032ca:	4660      	mov	r0, ip
 80032cc:	f7ff ffa8 	bl	8003220 <prvInitialiseNewQueue>
	}
 80032d0:	4620      	mov	r0, r4
 80032d2:	b004      	add	sp, #16
 80032d4:	bd10      	pop	{r4, pc}

080032d6 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032d6:	b940      	cbnz	r0, 80032ea <xQueueGenericCreate+0x14>
 80032d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	e7fe      	b.n	80032e8 <xQueueGenericCreate+0x12>
	{
 80032ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ec:	b083      	sub	sp, #12
 80032ee:	460d      	mov	r5, r1
 80032f0:	4614      	mov	r4, r2
 80032f2:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032f4:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80032f8:	3050      	adds	r0, #80	@ 0x50
 80032fa:	f7ff f8eb 	bl	80024d4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80032fe:	4607      	mov	r7, r0
 8003300:	b150      	cbz	r0, 8003318 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003302:	2300      	movs	r3, #0
 8003304:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003308:	9000      	str	r0, [sp, #0]
 800330a:	4623      	mov	r3, r4
 800330c:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8003310:	4629      	mov	r1, r5
 8003312:	4630      	mov	r0, r6
 8003314:	f7ff ff84 	bl	8003220 <prvInitialiseNewQueue>
	}
 8003318:	4638      	mov	r0, r7
 800331a:	b003      	add	sp, #12
 800331c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800331e <xQueueGenericSend>:
{
 800331e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003320:	b085      	sub	sp, #20
 8003322:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8003324:	b188      	cbz	r0, 800334a <xQueueGenericSend+0x2c>
 8003326:	460f      	mov	r7, r1
 8003328:	461d      	mov	r5, r3
 800332a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800332c:	b1b1      	cbz	r1, 800335c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800332e:	2d02      	cmp	r5, #2
 8003330:	d120      	bne.n	8003374 <xQueueGenericSend+0x56>
 8003332:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003334:	2b01      	cmp	r3, #1
 8003336:	d01d      	beq.n	8003374 <xQueueGenericSend+0x56>
 8003338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	e7fe      	b.n	8003348 <xQueueGenericSend+0x2a>
 800334a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800335a:	e7fe      	b.n	800335a <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800335c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0e5      	beq.n	800332e <xQueueGenericSend+0x10>
 8003362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	e7fe      	b.n	8003372 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003374:	f004 ffec 	bl	8008350 <xTaskGetSchedulerState>
 8003378:	4606      	mov	r6, r0
 800337a:	b958      	cbnz	r0, 8003394 <xQueueGenericSend+0x76>
 800337c:	9b01      	ldr	r3, [sp, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d048      	beq.n	8003414 <xQueueGenericSend+0xf6>
 8003382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	e7fe      	b.n	8003392 <xQueueGenericSend+0x74>
 8003394:	2600      	movs	r6, #0
 8003396:	e03d      	b.n	8003414 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003398:	462a      	mov	r2, r5
 800339a:	4639      	mov	r1, r7
 800339c:	4620      	mov	r0, r4
 800339e:	f7ff fe79 	bl	8003094 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80033a4:	b97b      	cbnz	r3, 80033c6 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 80033a6:	b148      	cbz	r0, 80033bc <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80033a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80033ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80033bc:	f7ff fd1c 	bl	8002df8 <vPortExitCritical>
				return pdPASS;
 80033c0:	2001      	movs	r0, #1
}
 80033c2:	b005      	add	sp, #20
 80033c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033c6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80033ca:	f004 fee1 	bl	8008190 <xTaskRemoveFromEventList>
 80033ce:	2800      	cmp	r0, #0
 80033d0:	d0f4      	beq.n	80033bc <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 80033d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80033d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033da:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	e7e9      	b.n	80033bc <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 80033e8:	f7ff fd06 	bl	8002df8 <vPortExitCritical>
					return errQUEUE_FULL;
 80033ec:	2000      	movs	r0, #0
 80033ee:	e7e8      	b.n	80033c2 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033f0:	a802      	add	r0, sp, #8
 80033f2:	f004 ff57 	bl	80082a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033f6:	2601      	movs	r6, #1
 80033f8:	e019      	b.n	800342e <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 80033fa:	2300      	movs	r3, #0
 80033fc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003400:	e021      	b.n	8003446 <xQueueGenericSend+0x128>
 8003402:	2300      	movs	r3, #0
 8003404:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003408:	e023      	b.n	8003452 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800340a:	4620      	mov	r0, r4
 800340c:	f7ff fe8f 	bl	800312e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003410:	f004 fd9c 	bl	8007f4c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8003414:	f7ff fcce 	bl	8002db4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003418:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800341a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800341c:	429a      	cmp	r2, r3
 800341e:	d3bb      	bcc.n	8003398 <xQueueGenericSend+0x7a>
 8003420:	2d02      	cmp	r5, #2
 8003422:	d0b9      	beq.n	8003398 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003424:	9b01      	ldr	r3, [sp, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0de      	beq.n	80033e8 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800342a:	2e00      	cmp	r6, #0
 800342c:	d0e0      	beq.n	80033f0 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800342e:	f7ff fce3 	bl	8002df8 <vPortExitCritical>
		vTaskSuspendAll();
 8003432:	f004 fcf1 	bl	8007e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003436:	f7ff fcbd 	bl	8002db4 <vPortEnterCritical>
 800343a:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800343e:	b252      	sxtb	r2, r2
 8003440:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003444:	d0d9      	beq.n	80033fa <xQueueGenericSend+0xdc>
 8003446:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800344a:	b252      	sxtb	r2, r2
 800344c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003450:	d0d7      	beq.n	8003402 <xQueueGenericSend+0xe4>
 8003452:	f7ff fcd1 	bl	8002df8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003456:	a901      	add	r1, sp, #4
 8003458:	a802      	add	r0, sp, #8
 800345a:	f004 ff2f 	bl	80082bc <xTaskCheckForTimeOut>
 800345e:	b9d8      	cbnz	r0, 8003498 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003460:	4620      	mov	r0, r4
 8003462:	f7ff fdfb 	bl	800305c <prvIsQueueFull>
 8003466:	2800      	cmp	r0, #0
 8003468:	d0cf      	beq.n	800340a <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800346a:	9901      	ldr	r1, [sp, #4]
 800346c:	f104 0010 	add.w	r0, r4, #16
 8003470:	f004 fe5a 	bl	8008128 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003474:	4620      	mov	r0, r4
 8003476:	f7ff fe5a 	bl	800312e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800347a:	f004 fd67 	bl	8007f4c <xTaskResumeAll>
 800347e:	2800      	cmp	r0, #0
 8003480:	d1c8      	bne.n	8003414 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8003482:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800348a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	e7bd      	b.n	8003414 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8003498:	4620      	mov	r0, r4
 800349a:	f7ff fe48 	bl	800312e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800349e:	f004 fd55 	bl	8007f4c <xTaskResumeAll>
			return errQUEUE_FULL;
 80034a2:	2000      	movs	r0, #0
 80034a4:	e78d      	b.n	80033c2 <xQueueGenericSend+0xa4>

080034a6 <xQueueGenericSendFromISR>:
{
 80034a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80034aa:	b190      	cbz	r0, 80034d2 <xQueueGenericSendFromISR+0x2c>
 80034ac:	460f      	mov	r7, r1
 80034ae:	4616      	mov	r6, r2
 80034b0:	461c      	mov	r4, r3
 80034b2:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034b4:	b1b1      	cbz	r1, 80034e4 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034b6:	2c02      	cmp	r4, #2
 80034b8:	d120      	bne.n	80034fc <xQueueGenericSendFromISR+0x56>
 80034ba:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d01d      	beq.n	80034fc <xQueueGenericSendFromISR+0x56>
 80034c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	e7fe      	b.n	80034d0 <xQueueGenericSendFromISR+0x2a>
 80034d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d6:	f383 8811 	msr	BASEPRI, r3
 80034da:	f3bf 8f6f 	isb	sy
 80034de:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80034e2:	e7fe      	b.n	80034e2 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034e4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0e5      	beq.n	80034b6 <xQueueGenericSendFromISR+0x10>
 80034ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	e7fe      	b.n	80034fa <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034fc:	f7ff fd80 	bl	8003000 <vPortValidateInterruptPriority>
	__asm volatile
 8003500:	f3ef 8811 	mrs	r8, BASEPRI
 8003504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003514:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8003516:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003518:	429a      	cmp	r2, r3
 800351a:	d306      	bcc.n	800352a <xQueueGenericSendFromISR+0x84>
 800351c:	2c02      	cmp	r4, #2
 800351e:	d004      	beq.n	800352a <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8003520:	2000      	movs	r0, #0
	__asm volatile
 8003522:	f388 8811 	msr	BASEPRI, r8
}
 8003526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800352a:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 800352e:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003532:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003534:	4622      	mov	r2, r4
 8003536:	4639      	mov	r1, r7
 8003538:	4628      	mov	r0, r5
 800353a:	f7ff fdab 	bl	8003094 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800353e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003542:	d006      	beq.n	8003552 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003544:	f109 0301 	add.w	r3, r9, #1
 8003548:	b25b      	sxtb	r3, r3
 800354a:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800354e:	2001      	movs	r0, #1
 8003550:	e7e7      	b.n	8003522 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003552:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003554:	b90b      	cbnz	r3, 800355a <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8003556:	2001      	movs	r0, #1
 8003558:	e7e3      	b.n	8003522 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800355a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800355e:	f004 fe17 	bl	8008190 <xTaskRemoveFromEventList>
 8003562:	b118      	cbz	r0, 800356c <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8003564:	b126      	cbz	r6, 8003570 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003566:	2001      	movs	r0, #1
 8003568:	6030      	str	r0, [r6, #0]
 800356a:	e7da      	b.n	8003522 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800356c:	2001      	movs	r0, #1
 800356e:	e7d8      	b.n	8003522 <xQueueGenericSendFromISR+0x7c>
 8003570:	2001      	movs	r0, #1
 8003572:	e7d6      	b.n	8003522 <xQueueGenericSendFromISR+0x7c>

08003574 <xQueueReceive>:
{
 8003574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003576:	b085      	sub	sp, #20
 8003578:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800357a:	b190      	cbz	r0, 80035a2 <xQueueReceive+0x2e>
 800357c:	460f      	mov	r7, r1
 800357e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003580:	b1c1      	cbz	r1, 80035b4 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003582:	f004 fee5 	bl	8008350 <xTaskGetSchedulerState>
 8003586:	4606      	mov	r6, r0
 8003588:	bb00      	cbnz	r0, 80035cc <xQueueReceive+0x58>
 800358a:	9b01      	ldr	r3, [sp, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d05e      	beq.n	800364e <xQueueReceive+0xda>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	e7fe      	b.n	80035a0 <xQueueReceive+0x2c>
 80035a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80035b2:	e7fe      	b.n	80035b2 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035b4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0e3      	beq.n	8003582 <xQueueReceive+0xe>
 80035ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	e7fe      	b.n	80035ca <xQueueReceive+0x56>
 80035cc:	2600      	movs	r6, #0
 80035ce:	e03e      	b.n	800364e <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035d0:	4639      	mov	r1, r7
 80035d2:	4620      	mov	r0, r4
 80035d4:	f7ff fd99 	bl	800310a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035d8:	3d01      	subs	r5, #1
 80035da:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035dc:	6923      	ldr	r3, [r4, #16]
 80035de:	b923      	cbnz	r3, 80035ea <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80035e0:	f7ff fc0a 	bl	8002df8 <vPortExitCritical>
				return pdPASS;
 80035e4:	2001      	movs	r0, #1
}
 80035e6:	b005      	add	sp, #20
 80035e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035ea:	f104 0010 	add.w	r0, r4, #16
 80035ee:	f004 fdcf 	bl	8008190 <xTaskRemoveFromEventList>
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d0f4      	beq.n	80035e0 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80035f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80035fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	e7e9      	b.n	80035e0 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800360c:	f7ff fbf4 	bl	8002df8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003610:	2000      	movs	r0, #0
 8003612:	e7e8      	b.n	80035e6 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003614:	a802      	add	r0, sp, #8
 8003616:	f004 fe45 	bl	80082a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800361a:	2601      	movs	r6, #1
 800361c:	e021      	b.n	8003662 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800361e:	2300      	movs	r3, #0
 8003620:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003624:	e029      	b.n	800367a <xQueueReceive+0x106>
 8003626:	2300      	movs	r3, #0
 8003628:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800362c:	e02b      	b.n	8003686 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800362e:	4620      	mov	r0, r4
 8003630:	f7ff fd7d 	bl	800312e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003634:	f004 fc8a 	bl	8007f4c <xTaskResumeAll>
 8003638:	e009      	b.n	800364e <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800363a:	4620      	mov	r0, r4
 800363c:	f7ff fd77 	bl	800312e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003640:	f004 fc84 	bl	8007f4c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003644:	4620      	mov	r0, r4
 8003646:	f7ff fd18 	bl	800307a <prvIsQueueEmpty>
 800364a:	2800      	cmp	r0, #0
 800364c:	d13f      	bne.n	80036ce <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800364e:	f7ff fbb1 	bl	8002db4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003652:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003654:	2d00      	cmp	r5, #0
 8003656:	d1bb      	bne.n	80035d0 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003658:	9b01      	ldr	r3, [sp, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0d6      	beq.n	800360c <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800365e:	2e00      	cmp	r6, #0
 8003660:	d0d8      	beq.n	8003614 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8003662:	f7ff fbc9 	bl	8002df8 <vPortExitCritical>
		vTaskSuspendAll();
 8003666:	f004 fbd7 	bl	8007e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800366a:	f7ff fba3 	bl	8002db4 <vPortEnterCritical>
 800366e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003672:	b25b      	sxtb	r3, r3
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d0d1      	beq.n	800361e <xQueueReceive+0xaa>
 800367a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800367e:	b25b      	sxtb	r3, r3
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003684:	d0cf      	beq.n	8003626 <xQueueReceive+0xb2>
 8003686:	f7ff fbb7 	bl	8002df8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800368a:	a901      	add	r1, sp, #4
 800368c:	a802      	add	r0, sp, #8
 800368e:	f004 fe15 	bl	80082bc <xTaskCheckForTimeOut>
 8003692:	2800      	cmp	r0, #0
 8003694:	d1d1      	bne.n	800363a <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003696:	4620      	mov	r0, r4
 8003698:	f7ff fcef 	bl	800307a <prvIsQueueEmpty>
 800369c:	2800      	cmp	r0, #0
 800369e:	d0c6      	beq.n	800362e <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036a0:	9901      	ldr	r1, [sp, #4]
 80036a2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80036a6:	f004 fd3f 	bl	8008128 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036aa:	4620      	mov	r0, r4
 80036ac:	f7ff fd3f 	bl	800312e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036b0:	f004 fc4c 	bl	8007f4c <xTaskResumeAll>
 80036b4:	2800      	cmp	r0, #0
 80036b6:	d1ca      	bne.n	800364e <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80036b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80036bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	e7bf      	b.n	800364e <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80036ce:	2000      	movs	r0, #0
 80036d0:	e789      	b.n	80035e6 <xQueueReceive+0x72>

080036d2 <xQueueReceiveFromISR>:
{
 80036d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80036d6:	b1b0      	cbz	r0, 8003706 <xQueueReceiveFromISR+0x34>
 80036d8:	460d      	mov	r5, r1
 80036da:	4690      	mov	r8, r2
 80036dc:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036de:	b1d9      	cbz	r1, 8003718 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036e0:	f7ff fc8e 	bl	8003000 <vPortValidateInterruptPriority>
	__asm volatile
 80036e4:	f3ef 8711 	mrs	r7, BASEPRI
 80036e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036f8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036fa:	b9ce      	cbnz	r6, 8003730 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80036fc:	2000      	movs	r0, #0
	__asm volatile
 80036fe:	f387 8811 	msr	BASEPRI, r7
}
 8003702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8003706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370a:	f383 8811 	msr	BASEPRI, r3
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003716:	e7fe      	b.n	8003716 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003718:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0e0      	beq.n	80036e0 <xQueueReceiveFromISR+0xe>
 800371e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	e7fe      	b.n	800372e <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8003730:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8003734:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003738:	4629      	mov	r1, r5
 800373a:	4620      	mov	r0, r4
 800373c:	f7ff fce5 	bl	800310a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003740:	1e73      	subs	r3, r6, #1
 8003742:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8003744:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003748:	d006      	beq.n	8003758 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800374a:	f109 0301 	add.w	r3, r9, #1
 800374e:	b25b      	sxtb	r3, r3
 8003750:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8003754:	2001      	movs	r0, #1
 8003756:	e7d2      	b.n	80036fe <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003758:	6923      	ldr	r3, [r4, #16]
 800375a:	b90b      	cbnz	r3, 8003760 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800375c:	2001      	movs	r0, #1
 800375e:	e7ce      	b.n	80036fe <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003760:	f104 0010 	add.w	r0, r4, #16
 8003764:	f004 fd14 	bl	8008190 <xTaskRemoveFromEventList>
 8003768:	b130      	cbz	r0, 8003778 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 800376a:	f1b8 0f00 	cmp.w	r8, #0
 800376e:	d005      	beq.n	800377c <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003770:	2001      	movs	r0, #1
 8003772:	f8c8 0000 	str.w	r0, [r8]
 8003776:	e7c2      	b.n	80036fe <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8003778:	2001      	movs	r0, #1
 800377a:	e7c0      	b.n	80036fe <xQueueReceiveFromISR+0x2c>
 800377c:	2001      	movs	r0, #1
 800377e:	e7be      	b.n	80036fe <xQueueReceiveFromISR+0x2c>

08003780 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003780:	2300      	movs	r3, #0
 8003782:	2b07      	cmp	r3, #7
 8003784:	d80c      	bhi.n	80037a0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003786:	4a07      	ldr	r2, [pc, #28]	@ (80037a4 <vQueueAddToRegistry+0x24>)
 8003788:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800378c:	b10a      	cbz	r2, 8003792 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800378e:	3301      	adds	r3, #1
 8003790:	e7f7      	b.n	8003782 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003792:	4a04      	ldr	r2, [pc, #16]	@ (80037a4 <vQueueAddToRegistry+0x24>)
 8003794:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003798:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800379c:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800379e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	200063bc 	.word	0x200063bc

080037a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037a8:	b570      	push	{r4, r5, r6, lr}
 80037aa:	4604      	mov	r4, r0
 80037ac:	460d      	mov	r5, r1
 80037ae:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037b0:	f7ff fb00 	bl	8002db4 <vPortEnterCritical>
 80037b4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80037b8:	b25b      	sxtb	r3, r3
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d00d      	beq.n	80037dc <vQueueWaitForMessageRestricted+0x34>
 80037c0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	d00b      	beq.n	80037e4 <vQueueWaitForMessageRestricted+0x3c>
 80037cc:	f7ff fb14 	bl	8002df8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80037d2:	b15b      	cbz	r3, 80037ec <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7ff fcaa 	bl	800312e <prvUnlockQueue>
	}
 80037da:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80037dc:	2300      	movs	r3, #0
 80037de:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80037e2:	e7ed      	b.n	80037c0 <vQueueWaitForMessageRestricted+0x18>
 80037e4:	2300      	movs	r3, #0
 80037e6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80037ea:	e7ef      	b.n	80037cc <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037ec:	4632      	mov	r2, r6
 80037ee:	4629      	mov	r1, r5
 80037f0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80037f4:	f004 fcb0 	bl	8008158 <vTaskPlaceOnEventListRestricted>
 80037f8:	e7ec      	b.n	80037d4 <vQueueWaitForMessageRestricted+0x2c>
	...

080037fc <resistor_init>:
#include "resistor.h"

void resistor_init(resistor_t* resistor, float pull_resistor, resistor_pull_type_t pull_type, analog_input_channel_t analog_input)
{
 80037fc:	b508      	push	{r3, lr}
    if (resistor == NULL)
 80037fe:	b120      	cbz	r0, 800380a <resistor_init+0xe>
    {
        log_error("Resistor init failed!");
        return;
    }
    resistor->pull_resistor = pull_resistor;
 8003800:	ed80 0a01 	vstr	s0, [r0, #4]
    resistor->pull_type = pull_type;
 8003804:	7001      	strb	r1, [r0, #0]
    resistor->analog_input = analog_input;
 8003806:	7202      	strb	r2, [r0, #8]
}
 8003808:	bd08      	pop	{r3, pc}
        log_error("Resistor init failed!");
 800380a:	4802      	ldr	r0, [pc, #8]	@ (8003814 <resistor_init+0x18>)
 800380c:	f7fe fbb2 	bl	8001f74 <log_error>
        return;
 8003810:	e7fa      	b.n	8003808 <resistor_init+0xc>
 8003812:	bf00      	nop
 8003814:	0800bae4 	.word	0x0800bae4

08003818 <resistor_get_resistance>:

/**
 * @todo div by zero will break this!
 */
float resistor_get_resistance(const resistor_t *resistor)
{
 8003818:	b510      	push	{r4, lr}
 800381a:	4604      	mov	r4, r0
    uint16_t adc_value = analog_inputs_get_data(resistor->analog_input);
 800381c:	7a00      	ldrb	r0, [r0, #8]
 800381e:	f7fd faed 	bl	8000dfc <analog_inputs_get_data>
 8003822:	ee07 0a10 	vmov	s14, r0
    float voltage = ((float)adc_value / (float)ADC_MAX_VALUE) * (float)ADC_REF_VOLTAGE;
 8003826:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800382a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8003894 <resistor_get_resistance+0x7c>
 800382e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003832:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003898 <resistor_get_resistance+0x80>
 8003836:	ee67 7a87 	vmul.f32	s15, s15, s14
    // simple check to see if the sensor is open circuit or not
    if (!IS_IN_RANGE(voltage, 0.05f * ADC_REF_VOLTAGE, 0.95f * ADC_REF_VOLTAGE))
 800383a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800389c <resistor_get_resistance+0x84>
 800383e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003846:	db13      	blt.n	8003870 <resistor_get_resistance+0x58>
 8003848:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80038a0 <resistor_get_resistance+0x88>
 800384c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003854:	d80c      	bhi.n	8003870 <resistor_get_resistance+0x58>
    {
        log_error("Resistor open circuit.");
        return NAN;
    }
    if (resistor->pull_type == RESISTOR_PULL_UP) {
 8003856:	7823      	ldrb	r3, [r4, #0]
 8003858:	b983      	cbnz	r3, 800387c <resistor_get_resistance+0x64>
        return (voltage * (float)resistor->pull_resistor) / ((float)ADC_REF_VOLTAGE - voltage);
 800385a:	edd4 6a01 	vldr	s13, [r4, #4]
 800385e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003862:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003898 <resistor_get_resistance+0x80>
 8003866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800386a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 800386e:	e004      	b.n	800387a <resistor_get_resistance+0x62>
        log_error("Resistor open circuit.");
 8003870:	480c      	ldr	r0, [pc, #48]	@ (80038a4 <resistor_get_resistance+0x8c>)
 8003872:	f7fe fb7f 	bl	8001f74 <log_error>
        return NAN;
 8003876:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80038a8 <resistor_get_resistance+0x90>
    } else { // PULL_DOWN
        return ((ADC_REF_VOLTAGE - voltage) * (float)resistor->pull_resistor) / voltage;
    }
}
 800387a:	bd10      	pop	{r4, pc}
        return ((ADC_REF_VOLTAGE - voltage) * (float)resistor->pull_resistor) / voltage;
 800387c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8003898 <resistor_get_resistance+0x80>
 8003880:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003884:	edd4 6a01 	vldr	s13, [r4, #4]
 8003888:	ee27 7a26 	vmul.f32	s14, s14, s13
 800388c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8003890:	e7f3      	b.n	800387a <resistor_get_resistance+0x62>
 8003892:	bf00      	nop
 8003894:	457ff000 	.word	0x457ff000
 8003898:	40533333 	.word	0x40533333
 800389c:	3e28f5c3 	.word	0x3e28f5c3
 80038a0:	4048a3d7 	.word	0x4048a3d7
 80038a4:	0800bafc 	.word	0x0800bafc
 80038a8:	7fc00000 	.word	0x7fc00000

080038ac <sensor_tps_get>:
static thermistor_t *sensor_iat = NULL;
static thermistor_t *sensor_clt = NULL;
static sensor_ops_t *sensor_ops = NULL;

percent_t sensor_tps_get(sensor_tps_t *sensor)
{
 80038ac:	b510      	push	{r4, lr}
    if (sensor == NULL)
 80038ae:	b3b0      	cbz	r0, 800391e <sensor_tps_get+0x72>
 80038b0:	4604      	mov	r4, r0
    {
        log_error("tps is null");
        return SENSOR_TPS_FAIL_SAFE;
    }
     if (sensor->wide_open_throttle_adc_value == 0 && sensor->closed_throttle_adc_value == 0)
 80038b2:	8803      	ldrh	r3, [r0, #0]
 80038b4:	b90b      	cbnz	r3, 80038ba <sensor_tps_get+0xe>
 80038b6:	8843      	ldrh	r3, [r0, #2]
 80038b8:	b3bb      	cbz	r3, 800392a <sensor_tps_get+0x7e>
    {
        log_error("tps wrong sensor calib");
        return SENSOR_TPS_FAIL_SAFE;
    }
    percent_t result = 0;
    uint16_t raw_data = analog_inputs_get_data(sensor->analog_channel);
 80038ba:	7920      	ldrb	r0, [r4, #4]
 80038bc:	f7fd fa9e 	bl	8000dfc <analog_inputs_get_data>
 80038c0:	ee07 0a90 	vmov	s15, r0
    if (sensor->is_inverted)
 80038c4:	7963      	ldrb	r3, [r4, #5]
 80038c6:	b3b3      	cbz	r3, 8003936 <sensor_tps_get+0x8a>
    {
        result = mapf((float)raw_data, (float)sensor->wide_open_throttle_adc_value, (float)sensor->closed_throttle_adc_value, (float)0, (float)100);
 80038c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038cc:	8822      	ldrh	r2, [r4, #0]
 80038ce:	ee07 2a10 	vmov	s14, r2
 80038d2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80038d6:	8863      	ldrh	r3, [r4, #2]
 80038d8:	ee07 3a10 	vmov	s14, r3
 80038dc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (in_max == in_min)
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d045      	beq.n	8003970 <sensor_tps_get+0xc4>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80038e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80038e8:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8003984 <sensor_tps_get+0xd8>
 80038ec:	ee67 7a86 	vmul.f32	s15, s15, s12
 80038f0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80038f4:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80038f8:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8003988 <sensor_tps_get+0xdc>
 80038fc:	ee30 0a27 	vadd.f32	s0, s0, s15
    }
    else
    {
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
    }
    result = CLAMP(result, (percent_t)0, (percent_t)100);
 8003900:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003908:	d438      	bmi.n	800397c <sensor_tps_get+0xd0>
 800390a:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8003984 <sensor_tps_get+0xd8>
 800390e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003916:	dd01      	ble.n	800391c <sensor_tps_get+0x70>
 8003918:	eeb0 0a67 	vmov.f32	s0, s15
    return result;
}
 800391c:	bd10      	pop	{r4, pc}
        log_error("tps is null");
 800391e:	481b      	ldr	r0, [pc, #108]	@ (800398c <sensor_tps_get+0xe0>)
 8003920:	f7fe fb28 	bl	8001f74 <log_error>
        return SENSOR_TPS_FAIL_SAFE;
 8003924:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8003990 <sensor_tps_get+0xe4>
 8003928:	e7f8      	b.n	800391c <sensor_tps_get+0x70>
        log_error("tps wrong sensor calib");
 800392a:	481a      	ldr	r0, [pc, #104]	@ (8003994 <sensor_tps_get+0xe8>)
 800392c:	f7fe fb22 	bl	8001f74 <log_error>
        return SENSOR_TPS_FAIL_SAFE;
 8003930:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8003990 <sensor_tps_get+0xe4>
 8003934:	e7f2      	b.n	800391c <sensor_tps_get+0x70>
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393a:	8862      	ldrh	r2, [r4, #2]
 800393c:	ee07 2a10 	vmov	s14, r2
 8003940:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003944:	8823      	ldrh	r3, [r4, #0]
 8003946:	ee07 3a10 	vmov	s14, r3
 800394a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (in_max == in_min)
 800394e:	429a      	cmp	r2, r3
 8003950:	d011      	beq.n	8003976 <sensor_tps_get+0xca>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003952:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003956:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8003984 <sensor_tps_get+0xd8>
 800395a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800395e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003962:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8003966:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8003988 <sensor_tps_get+0xdc>
 800396a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800396e:	e7c7      	b.n	8003900 <sensor_tps_get+0x54>
        result = mapf((float)raw_data, (float)sensor->wide_open_throttle_adc_value, (float)sensor->closed_throttle_adc_value, (float)0, (float)100);
 8003970:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8003988 <sensor_tps_get+0xdc>
 8003974:	e7c9      	b.n	800390a <sensor_tps_get+0x5e>
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
 8003976:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8003988 <sensor_tps_get+0xdc>
 800397a:	e7c6      	b.n	800390a <sensor_tps_get+0x5e>
    result = CLAMP(result, (percent_t)0, (percent_t)100);
 800397c:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8003988 <sensor_tps_get+0xdc>
 8003980:	e7cc      	b.n	800391c <sensor_tps_get+0x70>
 8003982:	bf00      	nop
 8003984:	42c80000 	.word	0x42c80000
 8003988:	00000000 	.word	0x00000000
 800398c:	0800bb14 	.word	0x0800bb14
 8003990:	7fc00000 	.word	0x7fc00000
 8003994:	0800bb20 	.word	0x0800bb20

08003998 <sensor_map_init>:

void sensor_map_init(sensor_map_t *sensor, sensor_map_type_t type)
{
 8003998:	b510      	push	{r4, lr}
    if (sensor == NULL)
 800399a:	b168      	cbz	r0, 80039b8 <sensor_map_init+0x20>
 800399c:	4604      	mov	r4, r0
    {
        log_error("map sensor is null");
        return;
    }
    switch (type)
 800399e:	b179      	cbz	r1, 80039c0 <sensor_map_init+0x28>
 80039a0:	2901      	cmp	r1, #1
 80039a2:	d115      	bne.n	80039d0 <sensor_map_init+0x38>
         * a simple linear sensor
         */
        /**
         * @todo actually calculate these values!
         */
        sensor->adc_value_0_bar = 100;
 80039a4:	2364      	movs	r3, #100	@ 0x64
 80039a6:	8003      	strh	r3, [r0, #0]
        sensor->adc_value_1_bar = 3000;
 80039a8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80039ac:	8043      	strh	r3, [r0, #2]
        sensor->analog_channel = ANALOG_INPUT_SENSOR_MAP_PIN;
 80039ae:	2304      	movs	r3, #4
 80039b0:	7103      	strb	r3, [r0, #4]
    
    default:
        log_error("map sensor type not configured!");
        break;
    }
    map_sensor = sensor;
 80039b2:	4b09      	ldr	r3, [pc, #36]	@ (80039d8 <sensor_map_init+0x40>)
 80039b4:	601c      	str	r4, [r3, #0]
}
 80039b6:	bd10      	pop	{r4, pc}
        log_error("map sensor is null");
 80039b8:	4808      	ldr	r0, [pc, #32]	@ (80039dc <sensor_map_init+0x44>)
 80039ba:	f7fe fadb 	bl	8001f74 <log_error>
        return;
 80039be:	e7fa      	b.n	80039b6 <sensor_map_init+0x1e>
        sensor->adc_value_0_bar = 100;
 80039c0:	2364      	movs	r3, #100	@ 0x64
 80039c2:	8003      	strh	r3, [r0, #0]
        sensor->adc_value_1_bar = 3000;
 80039c4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80039c8:	8043      	strh	r3, [r0, #2]
        sensor->analog_channel = ANALOG_INPUT_SENSOR_MAP_PIN;
 80039ca:	2304      	movs	r3, #4
 80039cc:	7103      	strb	r3, [r0, #4]
        break;
 80039ce:	e7f0      	b.n	80039b2 <sensor_map_init+0x1a>
        log_error("map sensor type not configured!");
 80039d0:	4803      	ldr	r0, [pc, #12]	@ (80039e0 <sensor_map_init+0x48>)
 80039d2:	f7fe facf 	bl	8001f74 <log_error>
        break;
 80039d6:	e7ec      	b.n	80039b2 <sensor_map_init+0x1a>
 80039d8:	20006414 	.word	0x20006414
 80039dc:	0800bb38 	.word	0x0800bb38
 80039e0:	0800bb4c 	.word	0x0800bb4c

080039e4 <sensor_iat_init>:
    }
    return result;
}

void sensor_iat_init(thermistor_t *sensor, sensor_iat_type_t type)
{
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	b08a      	sub	sp, #40	@ 0x28
 80039e8:	4604      	mov	r4, r0
    switch (type)
 80039ea:	b1e9      	cbz	r1, 8003a28 <sensor_iat_init+0x44>
 80039ec:	2901      	cmp	r1, #1
 80039ee:	d138      	bne.n	8003a62 <sensor_iat_init+0x7e>
    {
        case SENSOR_IAT_TYPE_BOSCH_816:
            resistor_init(&sensor->resistor, 10000, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_IAT_PIN);
 80039f0:	2205      	movs	r2, #5
 80039f2:	2100      	movs	r1, #0
 80039f4:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8003a6c <sensor_iat_init+0x88>
 80039f8:	f7ff ff00 	bl	80037fc <resistor_init>
            thermistor_conf_t bosch_816_iat_conf = 
 80039fc:	ad04      	add	r5, sp, #16
 80039fe:	4e1c      	ldr	r6, [pc, #112]	@ (8003a70 <sensor_iat_init+0x8c>)
 8003a00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a04:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003a08:	e885 0003 	stmia.w	r5, {r0, r1}
                .resistance_3 = 322.5f,
                .tempC_1 = -10.0f,
                .tempC_2 = 25.0f,
                .tempC_3 = 80.0f
            };
            thermistor_init(sensor, bosch_816_iat_conf);
 8003a0c:	ab0a      	add	r3, sp, #40	@ 0x28
 8003a0e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003a12:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003a16:	ab04      	add	r3, sp, #16
 8003a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f004 fcf0 	bl	8008400 <thermistor_init>
            sensor_iat = sensor;
 8003a20:	4b14      	ldr	r3, [pc, #80]	@ (8003a74 <sensor_iat_init+0x90>)
 8003a22:	601c      	str	r4, [r3, #0]
            break;
    default:
        log_error("iat sensor type not configured!");
        break;
    }
}
 8003a24:	b00a      	add	sp, #40	@ 0x28
 8003a26:	bd70      	pop	{r4, r5, r6, pc}
            resistor_init(&sensor->resistor, 4700, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_IAT_PIN);
 8003a28:	2205      	movs	r2, #5
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8003a78 <sensor_iat_init+0x94>
 8003a30:	f7ff fee4 	bl	80037fc <resistor_init>
            thermistor_conf_t genric_5k =
 8003a34:	f10d 0c10 	add.w	ip, sp, #16
 8003a38:	4d10      	ldr	r5, [pc, #64]	@ (8003a7c <sensor_iat_init+0x98>)
 8003a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003a44:	e88c 0003 	stmia.w	ip, {r0, r1}
            thermistor_init(sensor, genric_5k);
 8003a48:	ab0a      	add	r3, sp, #40	@ 0x28
 8003a4a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003a4e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003a52:	ab04      	add	r3, sp, #16
 8003a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a56:	4620      	mov	r0, r4
 8003a58:	f004 fcd2 	bl	8008400 <thermistor_init>
            sensor_iat = sensor;
 8003a5c:	4b05      	ldr	r3, [pc, #20]	@ (8003a74 <sensor_iat_init+0x90>)
 8003a5e:	601c      	str	r4, [r3, #0]
            break;
 8003a60:	e7e0      	b.n	8003a24 <sensor_iat_init+0x40>
        log_error("iat sensor type not configured!");
 8003a62:	4807      	ldr	r0, [pc, #28]	@ (8003a80 <sensor_iat_init+0x9c>)
 8003a64:	f7fe fa86 	bl	8001f74 <log_error>
}
 8003a68:	e7dc      	b.n	8003a24 <sensor_iat_init+0x40>
 8003a6a:	bf00      	nop
 8003a6c:	461c4000 	.word	0x461c4000
 8003a70:	0800b888 	.word	0x0800b888
 8003a74:	20006410 	.word	0x20006410
 8003a78:	4592e000 	.word	0x4592e000
 8003a7c:	0800b8a0 	.word	0x0800b8a0
 8003a80:	0800bb6c 	.word	0x0800bb6c

08003a84 <sensor_iat_get>:

temperature_t sensor_iat_get()
{
 8003a84:	b508      	push	{r3, lr}
    if (sensor_iat == NULL)
 8003a86:	4b10      	ldr	r3, [pc, #64]	@ (8003ac8 <sensor_iat_get+0x44>)
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	b180      	cbz	r0, 8003aae <sensor_iat_get+0x2a>
    {
        log_error("iat sensor is null");
        return SENSOR_IAT_FAIL_SAFE;
    }
    temperature_t temperature = thermistor_get_temp(sensor_iat);
 8003a8c:	f004 fd2c 	bl	80084e8 <thermistor_get_temp>
    if (!IS_IN_RANGE(temperature, FIRMWARE_LIMIT_MIN_TEMP, FIRMWARE_LIMIT_MAX_TEMP))
 8003a90:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003acc <sensor_iat_get+0x48>
 8003a94:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9c:	db0d      	blt.n	8003aba <sensor_iat_get+0x36>
 8003a9e:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003ad0 <sensor_iat_get+0x4c>
 8003aa2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aaa:	d806      	bhi.n	8003aba <sensor_iat_get+0x36>
    {
        log_error("iat sensor out of range!");
        return SENSOR_IAT_FAIL_SAFE;
    }
    return temperature;
}
 8003aac:	bd08      	pop	{r3, pc}
        log_error("iat sensor is null");
 8003aae:	4809      	ldr	r0, [pc, #36]	@ (8003ad4 <sensor_iat_get+0x50>)
 8003ab0:	f7fe fa60 	bl	8001f74 <log_error>
        return SENSOR_IAT_FAIL_SAFE;
 8003ab4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003ad8 <sensor_iat_get+0x54>
 8003ab8:	e7f8      	b.n	8003aac <sensor_iat_get+0x28>
        log_error("iat sensor out of range!");
 8003aba:	4808      	ldr	r0, [pc, #32]	@ (8003adc <sensor_iat_get+0x58>)
 8003abc:	f7fe fa5a 	bl	8001f74 <log_error>
        return SENSOR_IAT_FAIL_SAFE;
 8003ac0:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8003ad8 <sensor_iat_get+0x54>
 8003ac4:	e7f2      	b.n	8003aac <sensor_iat_get+0x28>
 8003ac6:	bf00      	nop
 8003ac8:	20006410 	.word	0x20006410
 8003acc:	c2480000 	.word	0xc2480000
 8003ad0:	43160000 	.word	0x43160000
 8003ad4:	0800bb8c 	.word	0x0800bb8c
 8003ad8:	42200000 	.word	0x42200000
 8003adc:	0800bba0 	.word	0x0800bba0

08003ae0 <sensor_clt_init>:

void sensor_clt_init(thermistor_t *sensor, sensor_clt_type_t type)
{
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	b08a      	sub	sp, #40	@ 0x28
    if (sensor == NULL)
 8003ae4:	b1f8      	cbz	r0, 8003b26 <sensor_clt_init+0x46>
 8003ae6:	4604      	mov	r4, r0
    {
        log_error("clt sensor is null");
        return;
    }
    switch (type)
 8003ae8:	b309      	cbz	r1, 8003b2e <sensor_clt_init+0x4e>
 8003aea:	2901      	cmp	r1, #1
 8003aec:	d13c      	bne.n	8003b68 <sensor_clt_init+0x88>
    {
    /* Actually make this a proper thing */
    case SENSOR_CLT_TYPE_NISSAN:
        resistor_init(&sensor->resistor, 10000, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_CLT_PIN);
 8003aee:	2206      	movs	r2, #6
 8003af0:	2100      	movs	r1, #0
 8003af2:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8003b70 <sensor_clt_init+0x90>
 8003af6:	f7ff fe81 	bl	80037fc <resistor_init>
        thermistor_conf_t nissan_clt_conf =
 8003afa:	ad04      	add	r5, sp, #16
 8003afc:	4e1d      	ldr	r6, [pc, #116]	@ (8003b74 <sensor_clt_init+0x94>)
 8003afe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003b00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b02:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003b06:	e885 0003 	stmia.w	r5, {r0, r1}
            .resistance_3 = 230.0f,
            .tempC_1 = -20.0f,
            .tempC_2 = 25.0f,
            .tempC_3 = 90.0f
        };
        thermistor_init(sensor, nissan_clt_conf);
 8003b0a:	ab0a      	add	r3, sp, #40	@ 0x28
 8003b0c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003b10:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003b14:	ab04      	add	r3, sp, #16
 8003b16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f004 fc71 	bl	8008400 <thermistor_init>
        sensor_clt = sensor;
 8003b1e:	4b16      	ldr	r3, [pc, #88]	@ (8003b78 <sensor_clt_init+0x98>)
 8003b20:	601c      	str	r4, [r3, #0]
        break;
    default:
        log_error("clt sensor type not configured!");
        break;
    }
}
 8003b22:	b00a      	add	sp, #40	@ 0x28
 8003b24:	bd70      	pop	{r4, r5, r6, pc}
        log_error("clt sensor is null");
 8003b26:	4815      	ldr	r0, [pc, #84]	@ (8003b7c <sensor_clt_init+0x9c>)
 8003b28:	f7fe fa24 	bl	8001f74 <log_error>
        return;
 8003b2c:	e7f9      	b.n	8003b22 <sensor_clt_init+0x42>
        resistor_init(&sensor->resistor, 4700, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_CLT_PIN);
 8003b2e:	2206      	movs	r2, #6
 8003b30:	2100      	movs	r1, #0
 8003b32:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8003b80 <sensor_clt_init+0xa0>
 8003b36:	f7ff fe61 	bl	80037fc <resistor_init>
        thermistor_conf_t genric_5k =
 8003b3a:	f10d 0c10 	add.w	ip, sp, #16
 8003b3e:	4d11      	ldr	r5, [pc, #68]	@ (8003b84 <sensor_clt_init+0xa4>)
 8003b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003b46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003b4a:	e88c 0003 	stmia.w	ip, {r0, r1}
        thermistor_init(sensor, genric_5k);
 8003b4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003b50:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003b54:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003b58:	ab04      	add	r3, sp, #16
 8003b5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f004 fc4f 	bl	8008400 <thermistor_init>
        sensor_clt = sensor;
 8003b62:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <sensor_clt_init+0x98>)
 8003b64:	601c      	str	r4, [r3, #0]
        break;
 8003b66:	e7dc      	b.n	8003b22 <sensor_clt_init+0x42>
        log_error("clt sensor type not configured!");
 8003b68:	4807      	ldr	r0, [pc, #28]	@ (8003b88 <sensor_clt_init+0xa8>)
 8003b6a:	f7fe fa03 	bl	8001f74 <log_error>
        break;
 8003b6e:	e7d8      	b.n	8003b22 <sensor_clt_init+0x42>
 8003b70:	461c4000 	.word	0x461c4000
 8003b74:	0800b8b8 	.word	0x0800b8b8
 8003b78:	2000640c 	.word	0x2000640c
 8003b7c:	0800bbbc 	.word	0x0800bbbc
 8003b80:	4592e000 	.word	0x4592e000
 8003b84:	0800b8a0 	.word	0x0800b8a0
 8003b88:	0800bbd0 	.word	0x0800bbd0

08003b8c <sensor_clt_get>:

temperature_t sensor_clt_get()
{
 8003b8c:	b508      	push	{r3, lr}
    if (sensor_clt == NULL)
 8003b8e:	4b10      	ldr	r3, [pc, #64]	@ (8003bd0 <sensor_clt_get+0x44>)
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	b180      	cbz	r0, 8003bb6 <sensor_clt_get+0x2a>
    {
        log_error("clt sensor is null");
        return SENSOR_CLT_FAIL_SAFE;
    }
    temperature_t temperature = thermistor_get_temp(sensor_clt);
 8003b94:	f004 fca8 	bl	80084e8 <thermistor_get_temp>
    if (!IS_IN_RANGE(temperature, FIRMWARE_LIMIT_MIN_TEMP, FIRMWARE_LIMIT_MAX_TEMP))
 8003b98:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003bd4 <sensor_clt_get+0x48>
 8003b9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba4:	db0d      	blt.n	8003bc2 <sensor_clt_get+0x36>
 8003ba6:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003bd8 <sensor_clt_get+0x4c>
 8003baa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb2:	d806      	bhi.n	8003bc2 <sensor_clt_get+0x36>
    {
        log_error("clt sensor out of range!");
        return SENSOR_CLT_FAIL_SAFE;
    }
    return temperature;
}
 8003bb4:	bd08      	pop	{r3, pc}
        log_error("clt sensor is null");
 8003bb6:	4809      	ldr	r0, [pc, #36]	@ (8003bdc <sensor_clt_get+0x50>)
 8003bb8:	f7fe f9dc 	bl	8001f74 <log_error>
        return SENSOR_CLT_FAIL_SAFE;
 8003bbc:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8003bc0:	e7f8      	b.n	8003bb4 <sensor_clt_get+0x28>
        log_error("clt sensor out of range!");
 8003bc2:	4807      	ldr	r0, [pc, #28]	@ (8003be0 <sensor_clt_get+0x54>)
 8003bc4:	f7fe f9d6 	bl	8001f74 <log_error>
        return SENSOR_CLT_FAIL_SAFE;
 8003bc8:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8003bcc:	e7f2      	b.n	8003bb4 <sensor_clt_get+0x28>
 8003bce:	bf00      	nop
 8003bd0:	2000640c 	.word	0x2000640c
 8003bd4:	c2480000 	.word	0xc2480000
 8003bd8:	43160000 	.word	0x43160000
 8003bdc:	0800bbbc 	.word	0x0800bbbc
 8003be0:	0800bbf0 	.word	0x0800bbf0

08003be4 <sensor_ops_init>:

void sensor_ops_init(sensor_ops_t *sensor)
{
 8003be4:	b508      	push	{r3, lr}
    if (sensor == NULL)
 8003be6:	b148      	cbz	r0, 8003bfc <sensor_ops_init+0x18>
    {
        log_error("ops sensor is null");
        return;
    }
    sensor->adc_value_threshold = 4095 / 2;
 8003be8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003bec:	8002      	strh	r2, [r0, #0]
    sensor->debounce_time_ms = 200;
 8003bee:	22c8      	movs	r2, #200	@ 0xc8
 8003bf0:	8042      	strh	r2, [r0, #2]
    sensor->analog_channel = ANALOG_INPUT_SENSOR_OIL_PIN;
 8003bf2:	2207      	movs	r2, #7
 8003bf4:	7102      	strb	r2, [r0, #4]
    sensor_ops = sensor;
 8003bf6:	4a03      	ldr	r2, [pc, #12]	@ (8003c04 <sensor_ops_init+0x20>)
 8003bf8:	6010      	str	r0, [r2, #0]
}
 8003bfa:	bd08      	pop	{r3, pc}
        log_error("ops sensor is null");
 8003bfc:	4802      	ldr	r0, [pc, #8]	@ (8003c08 <sensor_ops_init+0x24>)
 8003bfe:	f7fe f9b9 	bl	8001f74 <log_error>
        return;
 8003c02:	e7fa      	b.n	8003bfa <sensor_ops_init+0x16>
 8003c04:	20006408 	.word	0x20006408
 8003c08:	0800bc0c 	.word	0x0800bc0c

08003c0c <sensor_ops_get>:

bool sensor_ops_get()
{
 8003c0c:	b510      	push	{r4, lr}
    static uint32_t last_change_time = 0;
    static bool last_state = false;
    static bool debounced_state = false;

    if (sensor_ops == NULL)
 8003c0e:	4b14      	ldr	r3, [pc, #80]	@ (8003c60 <sensor_ops_get+0x54>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	b303      	cbz	r3, 8003c56 <sensor_ops_get+0x4a>
    {
        log_error("ops sensor is null");
        return false;
    }

    uint16_t adc_value = analog_inputs_get_data(sensor_ops->analog_channel);
 8003c14:	7918      	ldrb	r0, [r3, #4]
 8003c16:	f7fd f8f1 	bl	8000dfc <analog_inputs_get_data>
    bool current_state = adc_value > sensor_ops->adc_value_threshold;
 8003c1a:	4b11      	ldr	r3, [pc, #68]	@ (8003c60 <sensor_ops_get+0x54>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	881c      	ldrh	r4, [r3, #0]
 8003c20:	4284      	cmp	r4, r0
 8003c22:	bf2c      	ite	cs
 8003c24:	2400      	movcs	r4, #0
 8003c26:	2401      	movcc	r4, #1

    uint32_t now = get_time_ms();
 8003c28:	f005 f944 	bl	8008eb4 <get_time_ms>

    if (current_state != last_state)
 8003c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c64 <sensor_ops_get+0x58>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	42a3      	cmp	r3, r4
 8003c32:	d003      	beq.n	8003c3c <sensor_ops_get+0x30>
    {
        /* State changed, reset debounce timer */
        last_change_time = now;
 8003c34:	4b0c      	ldr	r3, [pc, #48]	@ (8003c68 <sensor_ops_get+0x5c>)
 8003c36:	6018      	str	r0, [r3, #0]
        last_state = current_state;
 8003c38:	4b0a      	ldr	r3, [pc, #40]	@ (8003c64 <sensor_ops_get+0x58>)
 8003c3a:	701c      	strb	r4, [r3, #0]
    }

    if ((now - last_change_time) >= sensor_ops->debounce_time_ms)
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c68 <sensor_ops_get+0x5c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	1ac0      	subs	r0, r0, r3
 8003c42:	4b07      	ldr	r3, [pc, #28]	@ (8003c60 <sensor_ops_get+0x54>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	885b      	ldrh	r3, [r3, #2]
 8003c48:	4298      	cmp	r0, r3
 8003c4a:	d301      	bcc.n	8003c50 <sensor_ops_get+0x44>
    {
        /* Debounce period passed, accept new state */
        debounced_state = current_state;
 8003c4c:	4b07      	ldr	r3, [pc, #28]	@ (8003c6c <sensor_ops_get+0x60>)
 8003c4e:	701c      	strb	r4, [r3, #0]
    }

    return debounced_state;
 8003c50:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <sensor_ops_get+0x60>)
 8003c52:	7818      	ldrb	r0, [r3, #0]
}
 8003c54:	bd10      	pop	{r4, pc}
        log_error("ops sensor is null");
 8003c56:	4806      	ldr	r0, [pc, #24]	@ (8003c70 <sensor_ops_get+0x64>)
 8003c58:	f7fe f98c 	bl	8001f74 <log_error>
        return false;
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	e7f9      	b.n	8003c54 <sensor_ops_get+0x48>
 8003c60:	20006408 	.word	0x20006408
 8003c64:	20006404 	.word	0x20006404
 8003c68:	20006400 	.word	0x20006400
 8003c6c:	200063fc 	.word	0x200063fc
 8003c70:	0800bc0c 	.word	0x0800bc0c

08003c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c74:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c76:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <HAL_Init+0x30>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c86:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c8e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c90:	2003      	movs	r0, #3
 8003c92:	f000 fbff 	bl	8004494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c96:	200f      	movs	r0, #15
 8003c98:	f002 ff54 	bl	8006b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c9c:	f001 f81a 	bl	8004cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	bd08      	pop	{r3, pc}
 8003ca4:	40023c00 	.word	0x40023c00

08003ca8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003ca8:	4a03      	ldr	r2, [pc, #12]	@ (8003cb8 <HAL_IncTick+0x10>)
 8003caa:	6811      	ldr	r1, [r2, #0]
 8003cac:	4b03      	ldr	r3, [pc, #12]	@ (8003cbc <HAL_IncTick+0x14>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	440b      	add	r3, r1
 8003cb2:	6013      	str	r3, [r2, #0]
}
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20006418 	.word	0x20006418
 8003cbc:	2000004c 	.word	0x2000004c

08003cc0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003cc0:	4b01      	ldr	r3, [pc, #4]	@ (8003cc8 <HAL_GetTick+0x8>)
 8003cc2:	6818      	ldr	r0, [r3, #0]
}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20006418 	.word	0x20006418

08003ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003cd0:	f7ff fff6 	bl	8003cc0 <HAL_GetTick>
 8003cd4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cd6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003cda:	d002      	beq.n	8003ce2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cdc:	4b04      	ldr	r3, [pc, #16]	@ (8003cf0 <HAL_Delay+0x24>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ce2:	f7ff ffed 	bl	8003cc0 <HAL_GetTick>
 8003ce6:	1b40      	subs	r0, r0, r5
 8003ce8:	42a0      	cmp	r0, r4
 8003cea:	d3fa      	bcc.n	8003ce2 <HAL_Delay+0x16>
  {
  }
}
 8003cec:	bd38      	pop	{r3, r4, r5, pc}
 8003cee:	bf00      	nop
 8003cf0:	2000004c 	.word	0x2000004c

08003cf4 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003cf4:	4b4a      	ldr	r3, [pc, #296]	@ (8003e20 <ADC_Init+0x12c>)
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003cfc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	6841      	ldr	r1, [r0, #4]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d06:	6802      	ldr	r2, [r0, #0]
 8003d08:	6853      	ldr	r3, [r2, #4]
 8003d0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d0e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d10:	6802      	ldr	r2, [r0, #0]
 8003d12:	6853      	ldr	r3, [r2, #4]
 8003d14:	6901      	ldr	r1, [r0, #16]
 8003d16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d1a:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d1c:	6802      	ldr	r2, [r0, #0]
 8003d1e:	6853      	ldr	r3, [r2, #4]
 8003d20:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8003d24:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d26:	6802      	ldr	r2, [r0, #0]
 8003d28:	6853      	ldr	r3, [r2, #4]
 8003d2a:	6881      	ldr	r1, [r0, #8]
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d30:	6802      	ldr	r2, [r0, #0]
 8003d32:	6893      	ldr	r3, [r2, #8]
 8003d34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d38:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d3a:	6802      	ldr	r2, [r0, #0]
 8003d3c:	6893      	ldr	r3, [r2, #8]
 8003d3e:	68c1      	ldr	r1, [r0, #12]
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d44:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003d46:	4b37      	ldr	r3, [pc, #220]	@ (8003e24 <ADC_Init+0x130>)
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d057      	beq.n	8003dfc <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d4c:	6802      	ldr	r2, [r0, #0]
 8003d4e:	6893      	ldr	r3, [r2, #8]
 8003d50:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8003d54:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d56:	6802      	ldr	r2, [r0, #0]
 8003d58:	6893      	ldr	r3, [r2, #8]
 8003d5a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d60:	6802      	ldr	r2, [r0, #0]
 8003d62:	6893      	ldr	r3, [r2, #8]
 8003d64:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8003d68:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d6a:	6802      	ldr	r2, [r0, #0]
 8003d6c:	6893      	ldr	r3, [r2, #8]
 8003d6e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003d70:	430b      	orrs	r3, r1
 8003d72:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d74:	6802      	ldr	r2, [r0, #0]
 8003d76:	6893      	ldr	r3, [r2, #8]
 8003d78:	f023 0302 	bic.w	r3, r3, #2
 8003d7c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d7e:	6802      	ldr	r2, [r0, #0]
 8003d80:	6893      	ldr	r3, [r2, #8]
 8003d82:	7e01      	ldrb	r1, [r0, #24]
 8003d84:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8003d88:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d8a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d03f      	beq.n	8003e12 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d92:	6802      	ldr	r2, [r0, #0]
 8003d94:	6853      	ldr	r3, [r2, #4]
 8003d96:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d9a:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d9c:	6802      	ldr	r2, [r0, #0]
 8003d9e:	6853      	ldr	r3, [r2, #4]
 8003da0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003da4:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003da6:	6801      	ldr	r1, [r0, #0]
 8003da8:	684b      	ldr	r3, [r1, #4]
 8003daa:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8003dac:	3a01      	subs	r2, #1
 8003dae:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8003db2:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003db4:	6802      	ldr	r2, [r0, #0]
 8003db6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003db8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003dbe:	6801      	ldr	r1, [r0, #0]
 8003dc0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8003dc2:	69c2      	ldr	r2, [r0, #28]
 8003dc4:	3a01      	subs	r2, #1
 8003dc6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003dca:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003dcc:	6802      	ldr	r2, [r0, #0]
 8003dce:	6893      	ldr	r3, [r2, #8]
 8003dd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dd4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003dd6:	6802      	ldr	r2, [r0, #0]
 8003dd8:	6893      	ldr	r3, [r2, #8]
 8003dda:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8003dde:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8003de2:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003de4:	6802      	ldr	r2, [r0, #0]
 8003de6:	6893      	ldr	r3, [r2, #8]
 8003de8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dec:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003dee:	6802      	ldr	r2, [r0, #0]
 8003df0:	6893      	ldr	r3, [r2, #8]
 8003df2:	6941      	ldr	r1, [r0, #20]
 8003df4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003df8:	6093      	str	r3, [r2, #8]
}
 8003dfa:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dfc:	6802      	ldr	r2, [r0, #0]
 8003dfe:	6893      	ldr	r3, [r2, #8]
 8003e00:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8003e04:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e06:	6802      	ldr	r2, [r0, #0]
 8003e08:	6893      	ldr	r3, [r2, #8]
 8003e0a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8003e0e:	6093      	str	r3, [r2, #8]
 8003e10:	e7b0      	b.n	8003d74 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e12:	6802      	ldr	r2, [r0, #0]
 8003e14:	6853      	ldr	r3, [r2, #4]
 8003e16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e1a:	6053      	str	r3, [r2, #4]
 8003e1c:	e7ca      	b.n	8003db4 <ADC_Init+0xc0>
 8003e1e:	bf00      	nop
 8003e20:	40012300 	.word	0x40012300
 8003e24:	0f000001 	.word	0x0f000001

08003e28 <HAL_ADC_Init>:
  if (hadc == NULL)
 8003e28:	b338      	cbz	r0, 8003e7a <HAL_ADC_Init+0x52>
{
 8003e2a:	b510      	push	{r4, lr}
 8003e2c:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e2e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003e30:	b143      	cbz	r3, 8003e44 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e34:	f013 0f10 	tst.w	r3, #16
 8003e38:	d00b      	beq.n	8003e52 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8003e3a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003e42:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8003e44:	f7fc ff48 	bl	8000cd8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8003e4c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8003e50:	e7ef      	b.n	8003e32 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8003e52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e54:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e58:	f023 0302 	bic.w	r3, r3, #2
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8003e62:	4620      	mov	r0, r4
 8003e64:	f7ff ff46 	bl	8003cf4 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8003e68:	2000      	movs	r0, #0
 8003e6a:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003e6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e6e:	f023 0303 	bic.w	r3, r3, #3
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6423      	str	r3, [r4, #64]	@ 0x40
 8003e78:	e7e0      	b.n	8003e3c <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8003e7a:	2001      	movs	r0, #1
}
 8003e7c:	4770      	bx	lr
	...

08003e80 <HAL_ADC_Start_DMA>:
{
 8003e80:	b510      	push	{r4, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8003e86:	2200      	movs	r2, #0
 8003e88:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003e8a:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003e8e:	2a01      	cmp	r2, #1
 8003e90:	f000 8094 	beq.w	8003fbc <HAL_ADC_Start_DMA+0x13c>
 8003e94:	4604      	mov	r4, r0
 8003e96:	2201      	movs	r2, #1
 8003e98:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e9c:	6802      	ldr	r2, [r0, #0]
 8003e9e:	6890      	ldr	r0, [r2, #8]
 8003ea0:	f010 0f01 	tst.w	r0, #1
 8003ea4:	d113      	bne.n	8003ece <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8003ea6:	6890      	ldr	r0, [r2, #8]
 8003ea8:	f040 0001 	orr.w	r0, r0, #1
 8003eac:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003eae:	4a46      	ldr	r2, [pc, #280]	@ (8003fc8 <HAL_ADC_Start_DMA+0x148>)
 8003eb0:	6810      	ldr	r0, [r2, #0]
 8003eb2:	4a46      	ldr	r2, [pc, #280]	@ (8003fcc <HAL_ADC_Start_DMA+0x14c>)
 8003eb4:	fba2 2000 	umull	r2, r0, r2, r0
 8003eb8:	0c80      	lsrs	r0, r0, #18
 8003eba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003ebe:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8003ec0:	e002      	b.n	8003ec8 <HAL_ADC_Start_DMA+0x48>
      counter--;
 8003ec2:	9801      	ldr	r0, [sp, #4]
 8003ec4:	3801      	subs	r0, #1
 8003ec6:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8003ec8:	9801      	ldr	r0, [sp, #4]
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d1f9      	bne.n	8003ec2 <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003ece:	6822      	ldr	r2, [r4, #0]
 8003ed0:	6890      	ldr	r0, [r2, #8]
 8003ed2:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8003ed6:	d003      	beq.n	8003ee0 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003ed8:	6890      	ldr	r0, [r2, #8]
 8003eda:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8003ede:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ee0:	6822      	ldr	r2, [r4, #0]
 8003ee2:	6890      	ldr	r0, [r2, #8]
 8003ee4:	f010 0f01 	tst.w	r0, #1
 8003ee8:	d05d      	beq.n	8003fa6 <HAL_ADC_Start_DMA+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 8003eea:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003eec:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8003ef0:	f020 0001 	bic.w	r0, r0, #1
 8003ef4:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8003ef8:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003efa:	6852      	ldr	r2, [r2, #4]
 8003efc:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8003f00:	d005      	beq.n	8003f0e <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f02:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003f04:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003f08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f0c:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f0e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003f10:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8003f14:	d034      	beq.n	8003f80 <HAL_ADC_Start_DMA+0x100>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f16:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003f18:	f022 0206 	bic.w	r2, r2, #6
 8003f1c:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f24:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003f26:	482a      	ldr	r0, [pc, #168]	@ (8003fd0 <HAL_ADC_Start_DMA+0x150>)
 8003f28:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f2a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003f2c:	4829      	ldr	r0, [pc, #164]	@ (8003fd4 <HAL_ADC_Start_DMA+0x154>)
 8003f2e:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f30:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003f32:	4829      	ldr	r0, [pc, #164]	@ (8003fd8 <HAL_ADC_Start_DMA+0x158>)
 8003f34:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f36:	6822      	ldr	r2, [r4, #0]
 8003f38:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8003f3c:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f3e:	6820      	ldr	r0, [r4, #0]
 8003f40:	6842      	ldr	r2, [r0, #4]
 8003f42:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003f46:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f48:	6820      	ldr	r0, [r4, #0]
 8003f4a:	6882      	ldr	r2, [r0, #8]
 8003f4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f50:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f52:	6820      	ldr	r0, [r4, #0]
 8003f54:	460a      	mov	r2, r1
 8003f56:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 8003f5a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003f5c:	f000 fbb2 	bl	80046c4 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f60:	4b1e      	ldr	r3, [pc, #120]	@ (8003fdc <HAL_ADC_Start_DMA+0x15c>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f013 0f1f 	tst.w	r3, #31
 8003f68:	d10d      	bne.n	8003f86 <HAL_ADC_Start_DMA+0x106>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8003f72:	d125      	bne.n	8003fc0 <HAL_ADC_Start_DMA+0x140>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003f7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	e01b      	b.n	8003fb8 <HAL_ADC_Start_DMA+0x138>
      ADC_CLEAR_ERRORCODE(hadc);
 8003f80:	2200      	movs	r2, #0
 8003f82:	6462      	str	r2, [r4, #68]	@ 0x44
 8003f84:	e7cb      	b.n	8003f1e <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	4a15      	ldr	r2, [pc, #84]	@ (8003fe0 <HAL_ADC_Start_DMA+0x160>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d001      	beq.n	8003f92 <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 8003f8e:	2000      	movs	r0, #0
 8003f90:	e012      	b.n	8003fb8 <HAL_ADC_Start_DMA+0x138>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8003f98:	d114      	bne.n	8003fc4 <HAL_ADC_Start_DMA+0x144>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003fa0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	e008      	b.n	8003fb8 <HAL_ADC_Start_DMA+0x138>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003fa8:	f043 0310 	orr.w	r3, r3, #16
 8003fac:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 8003fb6:	2000      	movs	r0, #0
}
 8003fb8:	b002      	add	sp, #8
 8003fba:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003fbc:	2002      	movs	r0, #2
 8003fbe:	e7fb      	b.n	8003fb8 <HAL_ADC_Start_DMA+0x138>
  return HAL_OK;
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	e7f9      	b.n	8003fb8 <HAL_ADC_Start_DMA+0x138>
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	e7f7      	b.n	8003fb8 <HAL_ADC_Start_DMA+0x138>
 8003fc8:	20000054 	.word	0x20000054
 8003fcc:	431bde83 	.word	0x431bde83
 8003fd0:	08004009 	.word	0x08004009
 8003fd4:	08003fe7 	.word	0x08003fe7
 8003fd8:	08003ff3 	.word	0x08003ff3
 8003fdc:	40012300 	.word	0x40012300
 8003fe0:	40012000 	.word	0x40012000

08003fe4 <HAL_ADC_ConvHalfCpltCallback>:
}
 8003fe4:	4770      	bx	lr

08003fe6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fe6:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fe8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8003fea:	f7ff fffb 	bl	8003fe4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fee:	bd08      	pop	{r3, pc}

08003ff0 <HAL_ADC_ErrorCallback>:
}
 8003ff0:	4770      	bx	lr

08003ff2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ff2:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003ff6:	2340      	movs	r3, #64	@ 0x40
 8003ff8:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003ffa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003ffc:	f043 0304 	orr.w	r3, r3, #4
 8004000:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004002:	f7ff fff5 	bl	8003ff0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004006:	bd08      	pop	{r3, pc}

08004008 <ADC_DMAConvCplt>:
{
 8004008:	b508      	push	{r3, lr}
 800400a:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800400e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004010:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8004014:	d125      	bne.n	8004062 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004016:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004018:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800401c:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800401e:	6803      	ldr	r3, [r0, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8004026:	d119      	bne.n	800405c <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004028:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800402a:	b9ba      	cbnz	r2, 800405c <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800402c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800402e:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8004032:	d003      	beq.n	800403c <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004034:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004036:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800403a:	d10f      	bne.n	800405c <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	f022 0220 	bic.w	r2, r2, #32
 8004042:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004044:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004046:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800404a:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800404c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800404e:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8004052:	d103      	bne.n	800405c <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004054:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800405c:	f7fc feb4 	bl	8000dc8 <HAL_ADC_ConvCpltCallback>
}
 8004060:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004062:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004064:	f012 0f10 	tst.w	r2, #16
 8004068:	d104      	bne.n	8004074 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800406a:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800406c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800406e:	4618      	mov	r0, r3
 8004070:	4790      	blx	r2
}
 8004072:	e7f5      	b.n	8004060 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8004074:	f7ff ffbc 	bl	8003ff0 <HAL_ADC_ErrorCallback>
 8004078:	e7f2      	b.n	8004060 <ADC_DMAConvCplt+0x58>
	...

0800407c <HAL_ADC_ConfigChannel>:
{
 800407c:	b430      	push	{r4, r5}
 800407e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8004080:	2200      	movs	r2, #0
 8004082:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004084:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004088:	2a01      	cmp	r2, #1
 800408a:	f000 80b6 	beq.w	80041fa <HAL_ADC_ConfigChannel+0x17e>
 800408e:	4603      	mov	r3, r0
 8004090:	2201      	movs	r2, #1
 8004092:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004096:	680a      	ldr	r2, [r1, #0]
 8004098:	2a09      	cmp	r2, #9
 800409a:	d940      	bls.n	800411e <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800409c:	6804      	ldr	r4, [r0, #0]
 800409e:	68e0      	ldr	r0, [r4, #12]
 80040a0:	b292      	uxth	r2, r2
 80040a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80040a6:	3a1e      	subs	r2, #30
 80040a8:	f04f 0c07 	mov.w	ip, #7
 80040ac:	fa0c f202 	lsl.w	r2, ip, r2
 80040b0:	ea20 0202 	bic.w	r2, r0, r2
 80040b4:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040b6:	681c      	ldr	r4, [r3, #0]
 80040b8:	68e0      	ldr	r0, [r4, #12]
 80040ba:	880a      	ldrh	r2, [r1, #0]
 80040bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80040c0:	3a1e      	subs	r2, #30
 80040c2:	688d      	ldr	r5, [r1, #8]
 80040c4:	fa05 f202 	lsl.w	r2, r5, r2
 80040c8:	4302      	orrs	r2, r0
 80040ca:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 80040cc:	684a      	ldr	r2, [r1, #4]
 80040ce:	2a06      	cmp	r2, #6
 80040d0:	d83c      	bhi.n	800414c <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040d2:	681c      	ldr	r4, [r3, #0]
 80040d4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80040d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80040da:	3a05      	subs	r2, #5
 80040dc:	f04f 0c1f 	mov.w	ip, #31
 80040e0:	fa0c f202 	lsl.w	r2, ip, r2
 80040e4:	ea20 0202 	bic.w	r2, r0, r2
 80040e8:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040ea:	681c      	ldr	r4, [r3, #0]
 80040ec:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80040ee:	684a      	ldr	r2, [r1, #4]
 80040f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80040f4:	3a05      	subs	r2, #5
 80040f6:	f8b1 c000 	ldrh.w	ip, [r1]
 80040fa:	fa0c f202 	lsl.w	r2, ip, r2
 80040fe:	4302      	orrs	r2, r0
 8004100:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	4a3e      	ldr	r2, [pc, #248]	@ (8004200 <HAL_ADC_ConfigChannel+0x184>)
 8004106:	4290      	cmp	r0, r2
 8004108:	d050      	beq.n	80041ac <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	4a3c      	ldr	r2, [pc, #240]	@ (8004200 <HAL_ADC_ConfigChannel+0x184>)
 800410e:	4290      	cmp	r0, r2
 8004110:	d055      	beq.n	80041be <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8004112:	2000      	movs	r0, #0
 8004114:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8004118:	b002      	add	sp, #8
 800411a:	bc30      	pop	{r4, r5}
 800411c:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800411e:	6804      	ldr	r4, [r0, #0]
 8004120:	6920      	ldr	r0, [r4, #16]
 8004122:	b292      	uxth	r2, r2
 8004124:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004128:	f04f 0c07 	mov.w	ip, #7
 800412c:	fa0c f202 	lsl.w	r2, ip, r2
 8004130:	ea20 0202 	bic.w	r2, r0, r2
 8004134:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004136:	681c      	ldr	r4, [r3, #0]
 8004138:	6920      	ldr	r0, [r4, #16]
 800413a:	880a      	ldrh	r2, [r1, #0]
 800413c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004140:	688d      	ldr	r5, [r1, #8]
 8004142:	fa05 f202 	lsl.w	r2, r5, r2
 8004146:	4302      	orrs	r2, r0
 8004148:	6122      	str	r2, [r4, #16]
 800414a:	e7bf      	b.n	80040cc <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 800414c:	2a0c      	cmp	r2, #12
 800414e:	d816      	bhi.n	800417e <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004150:	681d      	ldr	r5, [r3, #0]
 8004152:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8004154:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004158:	3a23      	subs	r2, #35	@ 0x23
 800415a:	241f      	movs	r4, #31
 800415c:	fa04 f202 	lsl.w	r2, r4, r2
 8004160:	ea20 0202 	bic.w	r2, r0, r2
 8004164:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004166:	681d      	ldr	r5, [r3, #0]
 8004168:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800416a:	684a      	ldr	r2, [r1, #4]
 800416c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004170:	3a23      	subs	r2, #35	@ 0x23
 8004172:	880c      	ldrh	r4, [r1, #0]
 8004174:	fa04 f202 	lsl.w	r2, r4, r2
 8004178:	4302      	orrs	r2, r0
 800417a:	632a      	str	r2, [r5, #48]	@ 0x30
 800417c:	e7c1      	b.n	8004102 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800417e:	681d      	ldr	r5, [r3, #0]
 8004180:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8004182:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004186:	3a41      	subs	r2, #65	@ 0x41
 8004188:	241f      	movs	r4, #31
 800418a:	fa04 f202 	lsl.w	r2, r4, r2
 800418e:	ea20 0202 	bic.w	r2, r0, r2
 8004192:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004194:	681d      	ldr	r5, [r3, #0]
 8004196:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8004198:	684a      	ldr	r2, [r1, #4]
 800419a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800419e:	3a41      	subs	r2, #65	@ 0x41
 80041a0:	880c      	ldrh	r4, [r1, #0]
 80041a2:	fa04 f202 	lsl.w	r2, r4, r2
 80041a6:	4302      	orrs	r2, r0
 80041a8:	62ea      	str	r2, [r5, #44]	@ 0x2c
 80041aa:	e7aa      	b.n	8004102 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041ac:	680a      	ldr	r2, [r1, #0]
 80041ae:	2a12      	cmp	r2, #18
 80041b0:	d1ab      	bne.n	800410a <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041b2:	4814      	ldr	r0, [pc, #80]	@ (8004204 <HAL_ADC_ConfigChannel+0x188>)
 80041b4:	6842      	ldr	r2, [r0, #4]
 80041b6:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80041ba:	6042      	str	r2, [r0, #4]
 80041bc:	e7a5      	b.n	800410a <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041be:	680a      	ldr	r2, [r1, #0]
 80041c0:	3a10      	subs	r2, #16
 80041c2:	2a01      	cmp	r2, #1
 80041c4:	d8a5      	bhi.n	8004112 <HAL_ADC_ConfigChannel+0x96>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041c6:	480f      	ldr	r0, [pc, #60]	@ (8004204 <HAL_ADC_ConfigChannel+0x188>)
 80041c8:	6842      	ldr	r2, [r0, #4]
 80041ca:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80041ce:	6042      	str	r2, [r0, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041d0:	680a      	ldr	r2, [r1, #0]
 80041d2:	2a10      	cmp	r2, #16
 80041d4:	d19d      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004208 <HAL_ADC_ConfigChannel+0x18c>)
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	490c      	ldr	r1, [pc, #48]	@ (800420c <HAL_ADC_ConfigChannel+0x190>)
 80041dc:	fba1 1202 	umull	r1, r2, r1, r2
 80041e0:	0c92      	lsrs	r2, r2, #18
 80041e2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80041e6:	0052      	lsls	r2, r2, #1
 80041e8:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 80041ea:	e002      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x176>
        counter--;
 80041ec:	9a01      	ldr	r2, [sp, #4]
 80041ee:	3a01      	subs	r2, #1
 80041f0:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 80041f2:	9a01      	ldr	r2, [sp, #4]
 80041f4:	2a00      	cmp	r2, #0
 80041f6:	d1f9      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x170>
 80041f8:	e78b      	b.n	8004112 <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 80041fa:	2002      	movs	r0, #2
 80041fc:	e78c      	b.n	8004118 <HAL_ADC_ConfigChannel+0x9c>
 80041fe:	bf00      	nop
 8004200:	40012000 	.word	0x40012000
 8004204:	40012300 	.word	0x40012300
 8004208:	20000054 	.word	0x20000054
 800420c:	431bde83 	.word	0x431bde83

08004210 <HAL_ADCEx_InjectedConfigChannel>:
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004210:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004214:	2a01      	cmp	r2, #1
 8004216:	f000 80f2 	beq.w	80043fe <HAL_ADCEx_InjectedConfigChannel+0x1ee>
{
 800421a:	b430      	push	{r4, r5}
 800421c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800421e:	2201      	movs	r2, #1
 8004220:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004224:	680a      	ldr	r2, [r1, #0]
 8004226:	2a09      	cmp	r2, #9
 8004228:	f240 8089 	bls.w	800433e <HAL_ADCEx_InjectedConfigChannel+0x12e>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800422c:	6805      	ldr	r5, [r0, #0]
 800422e:	68e8      	ldr	r0, [r5, #12]
 8004230:	b292      	uxth	r2, r2
 8004232:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004236:	3a1e      	subs	r2, #30
 8004238:	2407      	movs	r4, #7
 800423a:	fa04 f202 	lsl.w	r2, r4, r2
 800423e:	ea20 0202 	bic.w	r2, r0, r2
 8004242:	60ea      	str	r2, [r5, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004244:	681d      	ldr	r5, [r3, #0]
 8004246:	68e8      	ldr	r0, [r5, #12]
 8004248:	688c      	ldr	r4, [r1, #8]
 800424a:	880a      	ldrh	r2, [r1, #0]
 800424c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004250:	3a1e      	subs	r2, #30
 8004252:	4094      	lsls	r4, r2
 8004254:	4320      	orrs	r0, r4
 8004256:	60e8      	str	r0, [r5, #12]
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800425c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004260:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004262:	681c      	ldr	r4, [r3, #0]
 8004264:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004266:	6908      	ldr	r0, [r1, #16]
 8004268:	3801      	subs	r0, #1
 800426a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 800426e:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004270:	681c      	ldr	r4, [r3, #0]
 8004272:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004274:	684a      	ldr	r2, [r1, #4]
 8004276:	690d      	ldr	r5, [r1, #16]
 8004278:	1b52      	subs	r2, r2, r5
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	3203      	adds	r2, #3
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004284:	f04f 0c1f 	mov.w	ip, #31
 8004288:	fa0c f202 	lsl.w	r2, ip, r2
 800428c:	ea20 0202 	bic.w	r2, r0, r2
 8004290:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004292:	681c      	ldr	r4, [r3, #0]
 8004294:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004296:	684a      	ldr	r2, [r1, #4]
 8004298:	690d      	ldr	r5, [r1, #16]
 800429a:	1b52      	subs	r2, r2, r5
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	3203      	adds	r2, #3
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80042a6:	f8b1 c000 	ldrh.w	ip, [r1]
 80042aa:	fa0c f202 	lsl.w	r2, ip, r2
 80042ae:	4302      	orrs	r2, r0
 80042b0:	63a2      	str	r2, [r4, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80042b2:	6988      	ldr	r0, [r1, #24]
 80042b4:	4a53      	ldr	r2, [pc, #332]	@ (8004404 <HAL_ADCEx_InjectedConfigChannel+0x1f4>)
 80042b6:	4290      	cmp	r0, r2
 80042b8:	d056      	beq.n	8004368 <HAL_ADCEx_InjectedConfigChannel+0x158>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	6882      	ldr	r2, [r0, #8]
 80042be:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80042c2:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	6882      	ldr	r2, [r0, #8]
 80042c8:	698c      	ldr	r4, [r1, #24]
 80042ca:	4322      	orrs	r2, r4
 80042cc:	6082      	str	r2, [r0, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	6882      	ldr	r2, [r0, #8]
 80042d2:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80042d6:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	6882      	ldr	r2, [r0, #8]
 80042dc:	69cc      	ldr	r4, [r1, #28]
 80042de:	4322      	orrs	r2, r4
 80042e0:	6082      	str	r2, [r0, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80042e2:	7d4a      	ldrb	r2, [r1, #21]
 80042e4:	2a00      	cmp	r2, #0
 80042e6:	d04a      	beq.n	800437e <HAL_ADCEx_InjectedConfigChannel+0x16e>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	6842      	ldr	r2, [r0, #4]
 80042ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042f0:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80042f2:	7d0a      	ldrb	r2, [r1, #20]
 80042f4:	2a00      	cmp	r2, #0
 80042f6:	d048      	beq.n	800438a <HAL_ADCEx_InjectedConfigChannel+0x17a>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	6842      	ldr	r2, [r0, #4]
 80042fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004300:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }

  switch (sConfigInjected->InjectedRank)
 8004302:	684a      	ldr	r2, [r1, #4]
 8004304:	2a02      	cmp	r2, #2
 8004306:	d046      	beq.n	8004396 <HAL_ADCEx_InjectedConfigChannel+0x186>
 8004308:	2a03      	cmp	r2, #3
 800430a:	d04f      	beq.n	80043ac <HAL_ADCEx_InjectedConfigChannel+0x19c>
 800430c:	2a01      	cmp	r2, #1
 800430e:	d158      	bne.n	80043c2 <HAL_ADCEx_InjectedConfigChannel+0x1b2>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	6942      	ldr	r2, [r0, #20]
 8004314:	f36f 020b 	bfc	r2, #0, #12
 8004318:	6142      	str	r2, [r0, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	6942      	ldr	r2, [r0, #20]
 800431e:	68cc      	ldr	r4, [r1, #12]
 8004320:	4322      	orrs	r2, r4
 8004322:	6142      	str	r2, [r0, #20]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	4a38      	ldr	r2, [pc, #224]	@ (8004408 <HAL_ADCEx_InjectedConfigChannel+0x1f8>)
 8004328:	4290      	cmp	r0, r2
 800432a:	d055      	beq.n	80043d8 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	4a36      	ldr	r2, [pc, #216]	@ (8004408 <HAL_ADCEx_InjectedConfigChannel+0x1f8>)
 8004330:	4290      	cmp	r0, r2
 8004332:	d05a      	beq.n	80043ea <HAL_ADCEx_InjectedConfigChannel+0x1da>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004334:	2000      	movs	r0, #0
 8004336:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
}
 800433a:	bc30      	pop	{r4, r5}
 800433c:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800433e:	6805      	ldr	r5, [r0, #0]
 8004340:	6928      	ldr	r0, [r5, #16]
 8004342:	b292      	uxth	r2, r2
 8004344:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004348:	2407      	movs	r4, #7
 800434a:	fa04 f202 	lsl.w	r2, r4, r2
 800434e:	ea20 0202 	bic.w	r2, r0, r2
 8004352:	612a      	str	r2, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004354:	681d      	ldr	r5, [r3, #0]
 8004356:	6928      	ldr	r0, [r5, #16]
 8004358:	688c      	ldr	r4, [r1, #8]
 800435a:	880a      	ldrh	r2, [r1, #0]
 800435c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004360:	4094      	lsls	r4, r2
 8004362:	4320      	orrs	r0, r4
 8004364:	6128      	str	r0, [r5, #16]
 8004366:	e777      	b.n	8004258 <HAL_ADCEx_InjectedConfigChannel+0x48>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	6882      	ldr	r2, [r0, #8]
 800436c:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004370:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	6882      	ldr	r2, [r0, #8]
 8004376:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800437a:	6082      	str	r2, [r0, #8]
 800437c:	e7b1      	b.n	80042e2 <HAL_ADCEx_InjectedConfigChannel+0xd2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	6842      	ldr	r2, [r0, #4]
 8004382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004386:	6042      	str	r2, [r0, #4]
 8004388:	e7b3      	b.n	80042f2 <HAL_ADCEx_InjectedConfigChannel+0xe2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	6842      	ldr	r2, [r0, #4]
 800438e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004392:	6042      	str	r2, [r0, #4]
 8004394:	e7b5      	b.n	8004302 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	6982      	ldr	r2, [r0, #24]
 800439a:	f36f 020b 	bfc	r2, #0, #12
 800439e:	6182      	str	r2, [r0, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	6982      	ldr	r2, [r0, #24]
 80043a4:	68cc      	ldr	r4, [r1, #12]
 80043a6:	4322      	orrs	r2, r4
 80043a8:	6182      	str	r2, [r0, #24]
      break;
 80043aa:	e7bb      	b.n	8004324 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	69c2      	ldr	r2, [r0, #28]
 80043b0:	f36f 020b 	bfc	r2, #0, #12
 80043b4:	61c2      	str	r2, [r0, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	69c2      	ldr	r2, [r0, #28]
 80043ba:	68cc      	ldr	r4, [r1, #12]
 80043bc:	4322      	orrs	r2, r4
 80043be:	61c2      	str	r2, [r0, #28]
      break;
 80043c0:	e7b0      	b.n	8004324 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	6a02      	ldr	r2, [r0, #32]
 80043c6:	f36f 020b 	bfc	r2, #0, #12
 80043ca:	6202      	str	r2, [r0, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	6a02      	ldr	r2, [r0, #32]
 80043d0:	68cc      	ldr	r4, [r1, #12]
 80043d2:	4322      	orrs	r2, r4
 80043d4:	6202      	str	r2, [r0, #32]
      break;
 80043d6:	e7a5      	b.n	8004324 <HAL_ADCEx_InjectedConfigChannel+0x114>
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80043d8:	680a      	ldr	r2, [r1, #0]
 80043da:	2a12      	cmp	r2, #18
 80043dc:	d1a6      	bne.n	800432c <HAL_ADCEx_InjectedConfigChannel+0x11c>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80043de:	480b      	ldr	r0, [pc, #44]	@ (800440c <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 80043e0:	6842      	ldr	r2, [r0, #4]
 80043e2:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80043e6:	6042      	str	r2, [r0, #4]
 80043e8:	e7a0      	b.n	800432c <HAL_ADCEx_InjectedConfigChannel+0x11c>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80043ea:	680a      	ldr	r2, [r1, #0]
 80043ec:	3a10      	subs	r2, #16
 80043ee:	2a01      	cmp	r2, #1
 80043f0:	d8a0      	bhi.n	8004334 <HAL_ADCEx_InjectedConfigChannel+0x124>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043f2:	4906      	ldr	r1, [pc, #24]	@ (800440c <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 80043f4:	684a      	ldr	r2, [r1, #4]
 80043f6:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80043fa:	604a      	str	r2, [r1, #4]
 80043fc:	e79a      	b.n	8004334 <HAL_ADCEx_InjectedConfigChannel+0x124>
  __HAL_LOCK(hadc);
 80043fe:	2002      	movs	r0, #2
}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	000f0001 	.word	0x000f0001
 8004408:	40012000 	.word	0x40012000
 800440c:	40012300 	.word	0x40012300

08004410 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004410:	2800      	cmp	r0, #0
 8004412:	db07      	blt.n	8004424 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004414:	f000 021f 	and.w	r2, r0, #31
 8004418:	0940      	lsrs	r0, r0, #5
 800441a:	2301      	movs	r3, #1
 800441c:	4093      	lsls	r3, r2
 800441e:	4a02      	ldr	r2, [pc, #8]	@ (8004428 <__NVIC_EnableIRQ+0x18>)
 8004420:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	e000e100 	.word	0xe000e100

0800442c <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 800442c:	2800      	cmp	r0, #0
 800442e:	db08      	blt.n	8004442 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004430:	0109      	lsls	r1, r1, #4
 8004432:	b2c9      	uxtb	r1, r1
 8004434:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004438:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800443c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8004440:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004442:	f000 000f 	and.w	r0, r0, #15
 8004446:	0109      	lsls	r1, r1, #4
 8004448:	b2c9      	uxtb	r1, r1
 800444a:	4b01      	ldr	r3, [pc, #4]	@ (8004450 <__NVIC_SetPriority+0x24>)
 800444c:	5419      	strb	r1, [r3, r0]
  }
}
 800444e:	4770      	bx	lr
 8004450:	e000ed14 	.word	0xe000ed14

08004454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004454:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004456:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800445a:	f1c0 0c07 	rsb	ip, r0, #7
 800445e:	f1bc 0f04 	cmp.w	ip, #4
 8004462:	bf28      	it	cs
 8004464:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004468:	1d03      	adds	r3, r0, #4
 800446a:	2b06      	cmp	r3, #6
 800446c:	d90f      	bls.n	800448e <NVIC_EncodePriority+0x3a>
 800446e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004470:	f04f 3eff 	mov.w	lr, #4294967295
 8004474:	fa0e f00c 	lsl.w	r0, lr, ip
 8004478:	ea21 0100 	bic.w	r1, r1, r0
 800447c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800447e:	fa0e fe03 	lsl.w	lr, lr, r3
 8004482:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8004486:	ea41 0002 	orr.w	r0, r1, r2
 800448a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800448e:	2300      	movs	r3, #0
 8004490:	e7ee      	b.n	8004470 <NVIC_EncodePriority+0x1c>
	...

08004494 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004494:	4a07      	ldr	r2, [pc, #28]	@ (80044b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004496:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004498:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800449c:	041b      	lsls	r3, r3, #16
 800449e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044a0:	0200      	lsls	r0, r0, #8
 80044a2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044a6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80044a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80044b0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80044b2:	4770      	bx	lr
 80044b4:	e000ed00 	.word	0xe000ed00

080044b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044bc:	4b05      	ldr	r3, [pc, #20]	@ (80044d4 <HAL_NVIC_SetPriority+0x1c>)
 80044be:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044c0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80044c4:	f7ff ffc6 	bl	8004454 <NVIC_EncodePriority>
 80044c8:	4601      	mov	r1, r0
 80044ca:	4620      	mov	r0, r4
 80044cc:	f7ff ffae 	bl	800442c <__NVIC_SetPriority>
}
 80044d0:	bd10      	pop	{r4, pc}
 80044d2:	bf00      	nop
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044da:	f7ff ff99 	bl	8004410 <__NVIC_EnableIRQ>
}
 80044de:	bd08      	pop	{r3, pc}

080044e0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80044e0:	b158      	cbz	r0, 80044fa <HAL_CRC_Init+0x1a>
{
 80044e2:	b510      	push	{r4, lr}
 80044e4:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80044e6:	7943      	ldrb	r3, [r0, #5]
 80044e8:	b11b      	cbz	r3, 80044f2 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80044ea:	2301      	movs	r3, #1
 80044ec:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80044ee:	2000      	movs	r0, #0
}
 80044f0:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80044f2:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 80044f4:	f7fd f9e4 	bl	80018c0 <HAL_CRC_MspInit>
 80044f8:	e7f7      	b.n	80044ea <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 80044fa:	2001      	movs	r0, #1
}
 80044fc:	4770      	bx	lr

080044fe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044fe:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004500:	6805      	ldr	r5, [r0, #0]
 8004502:	682c      	ldr	r4, [r5, #0]
 8004504:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8004508:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800450a:	6804      	ldr	r4, [r0, #0]
 800450c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800450e:	6883      	ldr	r3, [r0, #8]
 8004510:	2b40      	cmp	r3, #64	@ 0x40
 8004512:	d005      	beq.n	8004520 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8004514:	6803      	ldr	r3, [r0, #0]
 8004516:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8004518:	6803      	ldr	r3, [r0, #0]
 800451a:	60da      	str	r2, [r3, #12]
  }
}
 800451c:	bc30      	pop	{r4, r5}
 800451e:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8004520:	6803      	ldr	r3, [r0, #0]
 8004522:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8004524:	6803      	ldr	r3, [r0, #0]
 8004526:	60d9      	str	r1, [r3, #12]
 8004528:	e7f8      	b.n	800451c <DMA_SetConfig+0x1e>
	...

0800452c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800452c:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800452e:	6803      	ldr	r3, [r0, #0]
 8004530:	b2d9      	uxtb	r1, r3
 8004532:	3910      	subs	r1, #16
 8004534:	4a0a      	ldr	r2, [pc, #40]	@ (8004560 <DMA_CalcBaseAndBitshift+0x34>)
 8004536:	fba2 4201 	umull	r4, r2, r2, r1
 800453a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800453c:	4c09      	ldr	r4, [pc, #36]	@ (8004564 <DMA_CalcBaseAndBitshift+0x38>)
 800453e:	5ca2      	ldrb	r2, [r4, r2]
 8004540:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004542:	295f      	cmp	r1, #95	@ 0x5f
 8004544:	d907      	bls.n	8004556 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004546:	f36f 0309 	bfc	r3, #0, #10
 800454a:	3304      	adds	r3, #4
 800454c:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800454e:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8004550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004554:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004556:	f36f 0309 	bfc	r3, #0, #10
 800455a:	6583      	str	r3, [r0, #88]	@ 0x58
 800455c:	e7f7      	b.n	800454e <DMA_CalcBaseAndBitshift+0x22>
 800455e:	bf00      	nop
 8004560:	aaaaaaab 	.word	0xaaaaaaab
 8004564:	0800be48 	.word	0x0800be48

08004568 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004568:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800456a:	6982      	ldr	r2, [r0, #24]
 800456c:	b992      	cbnz	r2, 8004594 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800456e:	2b01      	cmp	r3, #1
 8004570:	d00a      	beq.n	8004588 <DMA_CheckFifoParam+0x20>
 8004572:	2b02      	cmp	r3, #2
 8004574:	d002      	beq.n	800457c <DMA_CheckFifoParam+0x14>
 8004576:	b10b      	cbz	r3, 800457c <DMA_CheckFifoParam+0x14>
 8004578:	2000      	movs	r0, #0
 800457a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800457c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800457e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004582:	d128      	bne.n	80045d6 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8004584:	2000      	movs	r0, #0
 8004586:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004588:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800458a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800458e:	d024      	beq.n	80045da <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8004590:	2000      	movs	r0, #0
 8004592:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004594:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004598:	d009      	beq.n	80045ae <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800459a:	2b02      	cmp	r3, #2
 800459c:	d925      	bls.n	80045ea <DMA_CheckFifoParam+0x82>
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d125      	bne.n	80045ee <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80045a4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80045a8:	d123      	bne.n	80045f2 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80045aa:	2000      	movs	r0, #0
 80045ac:	4770      	bx	lr
    switch (tmp)
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d803      	bhi.n	80045ba <DMA_CheckFifoParam+0x52>
 80045b2:	e8df f003 	tbb	[pc, r3]
 80045b6:	0414      	.short	0x0414
 80045b8:	0a14      	.short	0x0a14
 80045ba:	2000      	movs	r0, #0
 80045bc:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045be:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80045c0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80045c4:	d10d      	bne.n	80045e2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80045c6:	2000      	movs	r0, #0
 80045c8:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ca:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80045cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045d0:	d009      	beq.n	80045e6 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80045d2:	2000      	movs	r0, #0
 80045d4:	4770      	bx	lr
        status = HAL_ERROR;
 80045d6:	2001      	movs	r0, #1
 80045d8:	4770      	bx	lr
        status = HAL_ERROR;
 80045da:	2001      	movs	r0, #1
 80045dc:	4770      	bx	lr
      status = HAL_ERROR;
 80045de:	2001      	movs	r0, #1
 80045e0:	4770      	bx	lr
        status = HAL_ERROR;
 80045e2:	2001      	movs	r0, #1
 80045e4:	4770      	bx	lr
        status = HAL_ERROR;
 80045e6:	2001      	movs	r0, #1
 80045e8:	4770      	bx	lr
      status = HAL_ERROR;
 80045ea:	2001      	movs	r0, #1
 80045ec:	4770      	bx	lr
    switch (tmp)
 80045ee:	2000      	movs	r0, #0
 80045f0:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80045f2:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80045f4:	4770      	bx	lr
	...

080045f8 <HAL_DMA_Init>:
{
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80045fc:	f7ff fb60 	bl	8003cc0 <HAL_GetTick>
  if(hdma == NULL)
 8004600:	2c00      	cmp	r4, #0
 8004602:	d05b      	beq.n	80046bc <HAL_DMA_Init+0xc4>
 8004604:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8004606:	2302      	movs	r3, #2
 8004608:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800460c:	2300      	movs	r3, #0
 800460e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8004612:	6822      	ldr	r2, [r4, #0]
 8004614:	6813      	ldr	r3, [r2, #0]
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	f012 0f01 	tst.w	r2, #1
 8004624:	d00a      	beq.n	800463c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004626:	f7ff fb4b 	bl	8003cc0 <HAL_GetTick>
 800462a:	1b43      	subs	r3, r0, r5
 800462c:	2b05      	cmp	r3, #5
 800462e:	d9f5      	bls.n	800461c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004630:	2320      	movs	r3, #32
 8004632:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004634:	2003      	movs	r0, #3
 8004636:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800463a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 800463c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800463e:	4920      	ldr	r1, [pc, #128]	@ (80046c0 <HAL_DMA_Init+0xc8>)
 8004640:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004642:	6862      	ldr	r2, [r4, #4]
 8004644:	68a0      	ldr	r0, [r4, #8]
 8004646:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004648:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800464a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800464c:	6920      	ldr	r0, [r4, #16]
 800464e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004650:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004652:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004654:	69a0      	ldr	r0, [r4, #24]
 8004656:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004658:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800465a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800465c:	6a20      	ldr	r0, [r4, #32]
 800465e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004660:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004662:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004664:	2904      	cmp	r1, #4
 8004666:	d01e      	beq.n	80046a6 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8004668:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800466a:	6826      	ldr	r6, [r4, #0]
 800466c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800466e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8004672:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004674:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004676:	2b04      	cmp	r3, #4
 8004678:	d107      	bne.n	800468a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800467a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800467c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800467e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004680:	b11b      	cbz	r3, 800468a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004682:	4620      	mov	r0, r4
 8004684:	f7ff ff70 	bl	8004568 <DMA_CheckFifoParam>
 8004688:	b990      	cbnz	r0, 80046b0 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800468a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800468c:	4620      	mov	r0, r4
 800468e:	f7ff ff4d 	bl	800452c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004692:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004694:	233f      	movs	r3, #63	@ 0x3f
 8004696:	4093      	lsls	r3, r2
 8004698:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800469a:	2000      	movs	r0, #0
 800469c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800469e:	2301      	movs	r3, #1
 80046a0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80046a4:	e7c9      	b.n	800463a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80046a8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80046aa:	4301      	orrs	r1, r0
 80046ac:	430a      	orrs	r2, r1
 80046ae:	e7db      	b.n	8004668 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046b0:	2340      	movs	r3, #64	@ 0x40
 80046b2:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80046b4:	2001      	movs	r0, #1
 80046b6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 80046ba:	e7be      	b.n	800463a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80046bc:	2001      	movs	r0, #1
 80046be:	e7bc      	b.n	800463a <HAL_DMA_Init+0x42>
 80046c0:	f010803f 	.word	0xf010803f

080046c4 <HAL_DMA_Start_IT>:
{
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046c8:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 80046ca:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 80046ce:	2801      	cmp	r0, #1
 80046d0:	d02a      	beq.n	8004728 <HAL_DMA_Start_IT+0x64>
 80046d2:	2001      	movs	r0, #1
 80046d4:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80046d8:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 80046dc:	2801      	cmp	r0, #1
 80046de:	d004      	beq.n	80046ea <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 80046e0:	2300      	movs	r3, #0
 80046e2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 80046e6:	2002      	movs	r0, #2
}
 80046e8:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80046ea:	2002      	movs	r0, #2
 80046ec:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f0:	2000      	movs	r0, #0
 80046f2:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046f4:	4620      	mov	r0, r4
 80046f6:	f7ff ff02 	bl	80044fe <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046fa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80046fc:	233f      	movs	r3, #63	@ 0x3f
 80046fe:	4093      	lsls	r3, r2
 8004700:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004702:	6822      	ldr	r2, [r4, #0]
 8004704:	6813      	ldr	r3, [r2, #0]
 8004706:	f043 0316 	orr.w	r3, r3, #22
 800470a:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800470c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800470e:	b123      	cbz	r3, 800471a <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004710:	6822      	ldr	r2, [r4, #0]
 8004712:	6813      	ldr	r3, [r2, #0]
 8004714:	f043 0308 	orr.w	r3, r3, #8
 8004718:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	6813      	ldr	r3, [r2, #0]
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004724:	2000      	movs	r0, #0
 8004726:	e7df      	b.n	80046e8 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8004728:	2002      	movs	r0, #2
 800472a:	e7dd      	b.n	80046e8 <HAL_DMA_Start_IT+0x24>

0800472c <HAL_DMA_IRQHandler>:
{
 800472c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800472e:	b083      	sub	sp, #12
 8004730:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004736:	4b72      	ldr	r3, [pc, #456]	@ (8004900 <HAL_DMA_IRQHandler+0x1d4>)
 8004738:	681d      	ldr	r5, [r3, #0]
 800473a:	4b72      	ldr	r3, [pc, #456]	@ (8004904 <HAL_DMA_IRQHandler+0x1d8>)
 800473c:	fba3 3505 	umull	r3, r5, r3, r5
 8004740:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004742:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8004744:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004746:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8004748:	2308      	movs	r3, #8
 800474a:	4093      	lsls	r3, r2
 800474c:	4233      	tst	r3, r6
 800474e:	d010      	beq.n	8004772 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004750:	6803      	ldr	r3, [r0, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	f012 0f04 	tst.w	r2, #4
 8004758:	d00b      	beq.n	8004772 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	f022 0204 	bic.w	r2, r2, #4
 8004760:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004762:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8004764:	2308      	movs	r3, #8
 8004766:	4093      	lsls	r3, r2
 8004768:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800476a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004772:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004774:	2301      	movs	r3, #1
 8004776:	4093      	lsls	r3, r2
 8004778:	4233      	tst	r3, r6
 800477a:	d009      	beq.n	8004790 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800477c:	6822      	ldr	r2, [r4, #0]
 800477e:	6952      	ldr	r2, [r2, #20]
 8004780:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8004784:	d004      	beq.n	8004790 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004786:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004788:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800478a:	f043 0302 	orr.w	r3, r3, #2
 800478e:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004790:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004792:	2304      	movs	r3, #4
 8004794:	4093      	lsls	r3, r2
 8004796:	4233      	tst	r3, r6
 8004798:	d009      	beq.n	80047ae <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800479a:	6822      	ldr	r2, [r4, #0]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	f012 0f02 	tst.w	r2, #2
 80047a2:	d004      	beq.n	80047ae <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047a4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80047a8:	f043 0304 	orr.w	r3, r3, #4
 80047ac:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047ae:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80047b0:	2310      	movs	r3, #16
 80047b2:	4093      	lsls	r3, r2
 80047b4:	4233      	tst	r3, r6
 80047b6:	d024      	beq.n	8004802 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047b8:	6822      	ldr	r2, [r4, #0]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	f012 0f08 	tst.w	r2, #8
 80047c0:	d01f      	beq.n	8004802 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047c2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80047cc:	d00d      	beq.n	80047ea <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80047d4:	d104      	bne.n	80047e0 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80047d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047d8:	b19b      	cbz	r3, 8004802 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80047da:	4620      	mov	r0, r4
 80047dc:	4798      	blx	r3
 80047de:	e010      	b.n	8004802 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047e0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80047e2:	b173      	cbz	r3, 8004802 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80047e4:	4620      	mov	r0, r4
 80047e6:	4798      	blx	r3
 80047e8:	e00b      	b.n	8004802 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80047f0:	d103      	bne.n	80047fa <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	f022 0208 	bic.w	r2, r2, #8
 80047f8:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80047fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047fc:	b10b      	cbz	r3, 8004802 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80047fe:	4620      	mov	r0, r4
 8004800:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004802:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004804:	2320      	movs	r3, #32
 8004806:	4093      	lsls	r3, r2
 8004808:	4233      	tst	r3, r6
 800480a:	d054      	beq.n	80048b6 <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800480c:	6822      	ldr	r2, [r4, #0]
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	f012 0f10 	tst.w	r2, #16
 8004814:	d04f      	beq.n	80048b6 <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004816:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004818:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800481c:	2b05      	cmp	r3, #5
 800481e:	d00e      	beq.n	800483e <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8004828:	d033      	beq.n	8004892 <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8004830:	d12a      	bne.n	8004888 <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 8004832:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004834:	2b00      	cmp	r3, #0
 8004836:	d03e      	beq.n	80048b6 <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 8004838:	4620      	mov	r0, r4
 800483a:	4798      	blx	r3
 800483c:	e03b      	b.n	80048b6 <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800483e:	6822      	ldr	r2, [r4, #0]
 8004840:	6813      	ldr	r3, [r2, #0]
 8004842:	f023 0316 	bic.w	r3, r3, #22
 8004846:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004848:	6822      	ldr	r2, [r4, #0]
 800484a:	6953      	ldr	r3, [r2, #20]
 800484c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004850:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004852:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004854:	b1a3      	cbz	r3, 8004880 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004856:	6822      	ldr	r2, [r4, #0]
 8004858:	6813      	ldr	r3, [r2, #0]
 800485a:	f023 0308 	bic.w	r3, r3, #8
 800485e:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004860:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004862:	233f      	movs	r3, #63	@ 0x3f
 8004864:	4093      	lsls	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8004868:	2301      	movs	r3, #1
 800486a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 800486e:	2300      	movs	r3, #0
 8004870:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8004874:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004876:	2b00      	cmp	r3, #0
 8004878:	d03f      	beq.n	80048fa <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 800487a:	4620      	mov	r0, r4
 800487c:	4798      	blx	r3
        return;
 800487e:	e03c      	b.n	80048fa <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004880:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1e7      	bne.n	8004856 <HAL_DMA_IRQHandler+0x12a>
 8004886:	e7eb      	b.n	8004860 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 8004888:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800488a:	b1a3      	cbz	r3, 80048b6 <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 800488c:	4620      	mov	r0, r4
 800488e:	4798      	blx	r3
 8004890:	e011      	b.n	80048b6 <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8004898:	d109      	bne.n	80048ae <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	f022 0210 	bic.w	r2, r2, #16
 80048a0:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80048a2:	2301      	movs	r3, #1
 80048a4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80048a8:	2300      	movs	r3, #0
 80048aa:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80048ae:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80048b0:	b10b      	cbz	r3, 80048b6 <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 80048b2:	4620      	mov	r0, r4
 80048b4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048b6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80048b8:	b1fb      	cbz	r3, 80048fa <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048ba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80048bc:	f013 0f01 	tst.w	r3, #1
 80048c0:	d017      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 80048c2:	2305      	movs	r3, #5
 80048c4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80048c8:	6822      	ldr	r2, [r4, #0]
 80048ca:	6813      	ldr	r3, [r2, #0]
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80048d2:	9b01      	ldr	r3, [sp, #4]
 80048d4:	3301      	adds	r3, #1
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	42ab      	cmp	r3, r5
 80048da:	d804      	bhi.n	80048e6 <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f013 0f01 	tst.w	r3, #1
 80048e4:	d1f5      	bne.n	80048d2 <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80048ec:	2300      	movs	r3, #0
 80048ee:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80048f2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80048f4:	b10b      	cbz	r3, 80048fa <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 80048f6:	4620      	mov	r0, r4
 80048f8:	4798      	blx	r3
}
 80048fa:	b003      	add	sp, #12
 80048fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048fe:	bf00      	nop
 8004900:	20000054 	.word	0x20000054
 8004904:	1b4e81b5 	.word	0x1b4e81b5

08004908 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004908:	2300      	movs	r3, #0
 800490a:	2b0f      	cmp	r3, #15
 800490c:	f200 80d7 	bhi.w	8004abe <HAL_GPIO_Init+0x1b6>
{
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	e065      	b.n	80049e2 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004916:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004918:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800491c:	2403      	movs	r4, #3
 800491e:	fa04 f40e 	lsl.w	r4, r4, lr
 8004922:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004926:	68cc      	ldr	r4, [r1, #12]
 8004928:	fa04 f40e 	lsl.w	r4, r4, lr
 800492c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800492e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004930:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004932:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004936:	684a      	ldr	r2, [r1, #4]
 8004938:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800493c:	409a      	lsls	r2, r3
 800493e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8004940:	6042      	str	r2, [r0, #4]
 8004942:	e05c      	b.n	80049fe <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004944:	08dc      	lsrs	r4, r3, #3
 8004946:	3408      	adds	r4, #8
 8004948:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800494c:	f003 0507 	and.w	r5, r3, #7
 8004950:	00ad      	lsls	r5, r5, #2
 8004952:	f04f 0e0f 	mov.w	lr, #15
 8004956:	fa0e fe05 	lsl.w	lr, lr, r5
 800495a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800495e:	690a      	ldr	r2, [r1, #16]
 8004960:	40aa      	lsls	r2, r5
 8004962:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004966:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800496a:	e05c      	b.n	8004a26 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800496c:	2204      	movs	r2, #4
 800496e:	e000      	b.n	8004972 <HAL_GPIO_Init+0x6a>
 8004970:	2200      	movs	r2, #0
 8004972:	fa02 f20e 	lsl.w	r2, r2, lr
 8004976:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004978:	3402      	adds	r4, #2
 800497a:	4d51      	ldr	r5, [pc, #324]	@ (8004ac0 <HAL_GPIO_Init+0x1b8>)
 800497c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004980:	4a50      	ldr	r2, [pc, #320]	@ (8004ac4 <HAL_GPIO_Init+0x1bc>)
 8004982:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004984:	ea6f 020c 	mvn.w	r2, ip
 8004988:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800498c:	684e      	ldr	r6, [r1, #4]
 800498e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8004992:	d001      	beq.n	8004998 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8004994:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8004998:	4c4a      	ldr	r4, [pc, #296]	@ (8004ac4 <HAL_GPIO_Init+0x1bc>)
 800499a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800499c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800499e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049a2:	684e      	ldr	r6, [r1, #4]
 80049a4:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80049a8:	d001      	beq.n	80049ae <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80049aa:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80049ae:	4c45      	ldr	r4, [pc, #276]	@ (8004ac4 <HAL_GPIO_Init+0x1bc>)
 80049b0:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80049b2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80049b4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049b8:	684e      	ldr	r6, [r1, #4]
 80049ba:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80049be:	d001      	beq.n	80049c4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80049c0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80049c4:	4c3f      	ldr	r4, [pc, #252]	@ (8004ac4 <HAL_GPIO_Init+0x1bc>)
 80049c6:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049c8:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80049ca:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049cc:	684d      	ldr	r5, [r1, #4]
 80049ce:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80049d2:	d001      	beq.n	80049d8 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80049d4:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80049d8:	4c3a      	ldr	r4, [pc, #232]	@ (8004ac4 <HAL_GPIO_Init+0x1bc>)
 80049da:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049dc:	3301      	adds	r3, #1
 80049de:	2b0f      	cmp	r3, #15
 80049e0:	d86b      	bhi.n	8004aba <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80049e2:	2201      	movs	r2, #1
 80049e4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049e6:	680c      	ldr	r4, [r1, #0]
 80049e8:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80049ec:	ea32 0404 	bics.w	r4, r2, r4
 80049f0:	d1f4      	bne.n	80049dc <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049f2:	684c      	ldr	r4, [r1, #4]
 80049f4:	f004 0403 	and.w	r4, r4, #3
 80049f8:	3c01      	subs	r4, #1
 80049fa:	2c01      	cmp	r4, #1
 80049fc:	d98b      	bls.n	8004916 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049fe:	684a      	ldr	r2, [r1, #4]
 8004a00:	f002 0203 	and.w	r2, r2, #3
 8004a04:	2a03      	cmp	r2, #3
 8004a06:	d009      	beq.n	8004a1c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8004a08:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a0a:	005d      	lsls	r5, r3, #1
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	40aa      	lsls	r2, r5
 8004a10:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a14:	688a      	ldr	r2, [r1, #8]
 8004a16:	40aa      	lsls	r2, r5
 8004a18:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8004a1a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a1c:	684a      	ldr	r2, [r1, #4]
 8004a1e:	f002 0203 	and.w	r2, r2, #3
 8004a22:	2a02      	cmp	r2, #2
 8004a24:	d08e      	beq.n	8004944 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8004a26:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a28:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	fa02 f20e 	lsl.w	r2, r2, lr
 8004a32:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a36:	684a      	ldr	r2, [r1, #4]
 8004a38:	f002 0203 	and.w	r2, r2, #3
 8004a3c:	fa02 f20e 	lsl.w	r2, r2, lr
 8004a40:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8004a42:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a44:	684a      	ldr	r2, [r1, #4]
 8004a46:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8004a4a:	d0c7      	beq.n	80049dc <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	9201      	str	r2, [sp, #4]
 8004a50:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac8 <HAL_GPIO_Init+0x1c0>)
 8004a52:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8004a54:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8004a58:	6454      	str	r4, [r2, #68]	@ 0x44
 8004a5a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004a5c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004a60:	9201      	str	r2, [sp, #4]
 8004a62:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004a64:	089c      	lsrs	r4, r3, #2
 8004a66:	1ca5      	adds	r5, r4, #2
 8004a68:	4a15      	ldr	r2, [pc, #84]	@ (8004ac0 <HAL_GPIO_Init+0x1b8>)
 8004a6a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a6e:	f003 0e03 	and.w	lr, r3, #3
 8004a72:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004a76:	220f      	movs	r2, #15
 8004a78:	fa02 f20e 	lsl.w	r2, r2, lr
 8004a7c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a80:	4a12      	ldr	r2, [pc, #72]	@ (8004acc <HAL_GPIO_Init+0x1c4>)
 8004a82:	4290      	cmp	r0, r2
 8004a84:	f43f af74 	beq.w	8004970 <HAL_GPIO_Init+0x68>
 8004a88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004a8c:	4290      	cmp	r0, r2
 8004a8e:	d00e      	beq.n	8004aae <HAL_GPIO_Init+0x1a6>
 8004a90:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004a94:	4290      	cmp	r0, r2
 8004a96:	d00c      	beq.n	8004ab2 <HAL_GPIO_Init+0x1aa>
 8004a98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004a9c:	4290      	cmp	r0, r2
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_GPIO_Init+0x1ae>
 8004aa0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004aa4:	4290      	cmp	r0, r2
 8004aa6:	f43f af61 	beq.w	800496c <HAL_GPIO_Init+0x64>
 8004aaa:	2207      	movs	r2, #7
 8004aac:	e761      	b.n	8004972 <HAL_GPIO_Init+0x6a>
 8004aae:	2201      	movs	r2, #1
 8004ab0:	e75f      	b.n	8004972 <HAL_GPIO_Init+0x6a>
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	e75d      	b.n	8004972 <HAL_GPIO_Init+0x6a>
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	e75b      	b.n	8004972 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8004aba:	b002      	add	sp, #8
 8004abc:	bd70      	pop	{r4, r5, r6, pc}
 8004abe:	4770      	bx	lr
 8004ac0:	40013800 	.word	0x40013800
 8004ac4:	40013c00 	.word	0x40013c00
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40020000 	.word	0x40020000

08004ad0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ad0:	6903      	ldr	r3, [r0, #16]
 8004ad2:	4219      	tst	r1, r3
 8004ad4:	d001      	beq.n	8004ada <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ada:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8004adc:	4770      	bx	lr

08004ade <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ade:	b10a      	cbz	r2, 8004ae4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ae0:	6181      	str	r1, [r0, #24]
 8004ae2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ae4:	0409      	lsls	r1, r1, #16
 8004ae6:	6181      	str	r1, [r0, #24]
  }
}
 8004ae8:	4770      	bx	lr

08004aea <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004aea:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004aec:	ea01 0203 	and.w	r2, r1, r3
 8004af0:	ea21 0103 	bic.w	r1, r1, r3
 8004af4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004af8:	6181      	str	r1, [r0, #24]
}
 8004afa:	4770      	bx	lr

08004afc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004afc:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004afe:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	4203      	tst	r3, r0
 8004b04:	d100      	bne.n	8004b08 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004b06:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b08:	4b02      	ldr	r3, [pc, #8]	@ (8004b14 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004b0a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b0c:	f7fd ffd7 	bl	8002abe <HAL_GPIO_EXTI_Callback>
}
 8004b10:	e7f9      	b.n	8004b06 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004b12:	bf00      	nop
 8004b14:	40013c00 	.word	0x40013c00

08004b18 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	f000 80cc 	beq.w	8004cb6 <HAL_I2C_Init+0x19e>
{
 8004b1e:	b570      	push	{r4, r5, r6, lr}
 8004b20:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b22:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d077      	beq.n	8004c1a <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b2a:	2324      	movs	r3, #36	@ 0x24
 8004b2c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b30:	6822      	ldr	r2, [r4, #0]
 8004b32:	6813      	ldr	r3, [r2, #0]
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b3a:	6822      	ldr	r2, [r4, #0]
 8004b3c:	6813      	ldr	r3, [r2, #0]
 8004b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b42:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b4c:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b4e:	f001 fa25 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b52:	6862      	ldr	r2, [r4, #4]
 8004b54:	4b5a      	ldr	r3, [pc, #360]	@ (8004cc0 <HAL_I2C_Init+0x1a8>)
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d864      	bhi.n	8004c24 <HAL_I2C_Init+0x10c>
 8004b5a:	4b5a      	ldr	r3, [pc, #360]	@ (8004cc4 <HAL_I2C_Init+0x1ac>)
 8004b5c:	4298      	cmp	r0, r3
 8004b5e:	bf8c      	ite	hi
 8004b60:	2300      	movhi	r3, #0
 8004b62:	2301      	movls	r3, #1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f040 80a8 	bne.w	8004cba <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b6a:	4957      	ldr	r1, [pc, #348]	@ (8004cc8 <HAL_I2C_Init+0x1b0>)
 8004b6c:	fba1 3100 	umull	r3, r1, r1, r0
 8004b70:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b72:	6825      	ldr	r5, [r4, #0]
 8004b74:	686a      	ldr	r2, [r5, #4]
 8004b76:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004b7a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8004b7e:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b80:	6821      	ldr	r1, [r4, #0]
 8004b82:	6a0a      	ldr	r2, [r1, #32]
 8004b84:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004b88:	6866      	ldr	r6, [r4, #4]
 8004b8a:	4d4d      	ldr	r5, [pc, #308]	@ (8004cc0 <HAL_I2C_Init+0x1a8>)
 8004b8c:	42ae      	cmp	r6, r5
 8004b8e:	d84f      	bhi.n	8004c30 <HAL_I2C_Init+0x118>
 8004b90:	3301      	adds	r3, #1
 8004b92:	4313      	orrs	r3, r2
 8004b94:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b96:	6821      	ldr	r1, [r4, #0]
 8004b98:	69ca      	ldr	r2, [r1, #28]
 8004b9a:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8004b9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004ba2:	6865      	ldr	r5, [r4, #4]
 8004ba4:	4b46      	ldr	r3, [pc, #280]	@ (8004cc0 <HAL_I2C_Init+0x1a8>)
 8004ba6:	429d      	cmp	r5, r3
 8004ba8:	d84c      	bhi.n	8004c44 <HAL_I2C_Init+0x12c>
 8004baa:	1e43      	subs	r3, r0, #1
 8004bac:	006d      	lsls	r5, r5, #1
 8004bae:	fbb3 f3f5 	udiv	r3, r3, r5
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8004bb8:	4203      	tst	r3, r0
 8004bba:	d078      	beq.n	8004cae <HAL_I2C_Init+0x196>
 8004bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bc4:	6821      	ldr	r1, [r4, #0]
 8004bc6:	680b      	ldr	r3, [r1, #0]
 8004bc8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004bcc:	69e2      	ldr	r2, [r4, #28]
 8004bce:	6a20      	ldr	r0, [r4, #32]
 8004bd0:	4302      	orrs	r2, r0
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bd6:	6821      	ldr	r1, [r4, #0]
 8004bd8:	688b      	ldr	r3, [r1, #8]
 8004bda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004bde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004be2:	6922      	ldr	r2, [r4, #16]
 8004be4:	68e0      	ldr	r0, [r4, #12]
 8004be6:	4302      	orrs	r2, r0
 8004be8:	4313      	orrs	r3, r2
 8004bea:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bec:	6821      	ldr	r1, [r4, #0]
 8004bee:	68cb      	ldr	r3, [r1, #12]
 8004bf0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004bf4:	6962      	ldr	r2, [r4, #20]
 8004bf6:	69a0      	ldr	r0, [r4, #24]
 8004bf8:	4302      	orrs	r2, r0
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bfe:	6822      	ldr	r2, [r4, #0]
 8004c00:	6813      	ldr	r3, [r2, #0]
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c08:	2000      	movs	r0, #0
 8004c0a:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c0c:	2320      	movs	r3, #32
 8004c0e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c12:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c14:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 8004c18:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004c1a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8004c1e:	f7fd fd37 	bl	8002690 <HAL_I2C_MspInit>
 8004c22:	e782      	b.n	8004b2a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c24:	4b29      	ldr	r3, [pc, #164]	@ (8004ccc <HAL_I2C_Init+0x1b4>)
 8004c26:	4298      	cmp	r0, r3
 8004c28:	bf8c      	ite	hi
 8004c2a:	2300      	movhi	r3, #0
 8004c2c:	2301      	movls	r3, #1
 8004c2e:	e799      	b.n	8004b64 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c30:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8004c34:	fb05 f303 	mul.w	r3, r5, r3
 8004c38:	4d25      	ldr	r5, [pc, #148]	@ (8004cd0 <HAL_I2C_Init+0x1b8>)
 8004c3a:	fba5 5303 	umull	r5, r3, r5, r3
 8004c3e:	099b      	lsrs	r3, r3, #6
 8004c40:	3301      	adds	r3, #1
 8004c42:	e7a6      	b.n	8004b92 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c44:	68a6      	ldr	r6, [r4, #8]
 8004c46:	b9be      	cbnz	r6, 8004c78 <HAL_I2C_Init+0x160>
 8004c48:	1e43      	subs	r3, r0, #1
 8004c4a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8004c4e:	fbb3 f3fc 	udiv	r3, r3, ip
 8004c52:	3301      	adds	r3, #1
 8004c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c58:	fab3 f383 	clz	r3, r3
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	bb43      	cbnz	r3, 8004cb2 <HAL_I2C_Init+0x19a>
 8004c60:	b9c6      	cbnz	r6, 8004c94 <HAL_I2C_Init+0x17c>
 8004c62:	1e43      	subs	r3, r0, #1
 8004c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c68:	fbb3 f3f5 	udiv	r3, r3, r5
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c76:	e7a3      	b.n	8004bc0 <HAL_I2C_Init+0xa8>
 8004c78:	1e43      	subs	r3, r0, #1
 8004c7a:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8004c7e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8004c82:	fbb3 f3fc 	udiv	r3, r3, ip
 8004c86:	3301      	adds	r3, #1
 8004c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c8c:	fab3 f383 	clz	r3, r3
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	e7e4      	b.n	8004c5e <HAL_I2C_Init+0x146>
 8004c94:	1e43      	subs	r3, r0, #1
 8004c96:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004c9a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004c9e:	fbb3 f3f5 	udiv	r3, r3, r5
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cac:	e788      	b.n	8004bc0 <HAL_I2C_Init+0xa8>
 8004cae:	2304      	movs	r3, #4
 8004cb0:	e786      	b.n	8004bc0 <HAL_I2C_Init+0xa8>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e784      	b.n	8004bc0 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8004cb6:	2001      	movs	r0, #1
}
 8004cb8:	4770      	bx	lr
    return HAL_ERROR;
 8004cba:	2001      	movs	r0, #1
 8004cbc:	e7ac      	b.n	8004c18 <HAL_I2C_Init+0x100>
 8004cbe:	bf00      	nop
 8004cc0:	000186a0 	.word	0x000186a0
 8004cc4:	001e847f 	.word	0x001e847f
 8004cc8:	431bde83 	.word	0x431bde83
 8004ccc:	003d08ff 	.word	0x003d08ff
 8004cd0:	10624dd3 	.word	0x10624dd3

08004cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cd4:	b500      	push	{lr}
 8004cd6:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cd8:	2200      	movs	r2, #0
 8004cda:	9200      	str	r2, [sp, #0]
 8004cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8004d14 <HAL_MspInit+0x40>)
 8004cde:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004ce0:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8004ce4:	6459      	str	r1, [r3, #68]	@ 0x44
 8004ce6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004ce8:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8004cec:	9100      	str	r1, [sp, #0]
 8004cee:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cf0:	9201      	str	r2, [sp, #4]
 8004cf2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004cf4:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8004cf8:	6419      	str	r1, [r3, #64]	@ 0x40
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004d04:	210f      	movs	r1, #15
 8004d06:	f06f 0001 	mvn.w	r0, #1
 8004d0a:	f7ff fbd5 	bl	80044b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d0e:	b003      	add	sp, #12
 8004d10:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d14:	40023800 	.word	0x40023800

08004d18 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d1c:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d1e:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8004d22:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004d26:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004d2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d854      	bhi.n	8004ddc <PCD_WriteEmptyTxFifo+0xc4>
 8004d32:	4607      	mov	r7, r0
 8004d34:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d36:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8004d38:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8004d3c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004d40:	69d2      	ldr	r2, [r2, #28]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d300      	bcc.n	8004d48 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8004d46:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8004d48:	f102 0903 	add.w	r9, r2, #3
 8004d4c:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d50:	e015      	b.n	8004d7e <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8004d52:	f106 0903 	add.w	r9, r6, #3
 8004d56:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 8004d5a:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d5c:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8004d60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8004d64:	6a29      	ldr	r1, [r5, #32]
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	b2b3      	uxth	r3, r6
 8004d6a:	b2e2      	uxtb	r2, r4
 8004d6c:	4640      	mov	r0, r8
 8004d6e:	f002 fa9a 	bl	80072a6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004d72:	6a2b      	ldr	r3, [r5, #32]
 8004d74:	4433      	add	r3, r6
 8004d76:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8004d78:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8004d7a:	4433      	add	r3, r6
 8004d7c:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d7e:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8004d82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d8a:	454b      	cmp	r3, r9
 8004d8c:	d312      	bcc.n	8004db4 <PCD_WriteEmptyTxFifo+0x9c>
 8004d8e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004d92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004d96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d20a      	bcs.n	8004db4 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d9e:	b14b      	cbz	r3, 8004db4 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8004da0:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8004da2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8004da6:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8004daa:	69d6      	ldr	r6, [r2, #28]
 8004dac:	429e      	cmp	r6, r3
 8004dae:	d3d0      	bcc.n	8004d52 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8004db0:	461e      	mov	r6, r3
 8004db2:	e7ce      	b.n	8004d52 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004db4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004db8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8004dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d80f      	bhi.n	8004de4 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004dc4:	f004 040f 	and.w	r4, r4, #15
 8004dc8:	2201      	movs	r2, #1
 8004dca:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004dcc:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 8004dd0:	ea23 0302 	bic.w	r3, r3, r2
 8004dd4:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 8004dd8:	2000      	movs	r0, #0
 8004dda:	e000      	b.n	8004dde <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 8004ddc:	2001      	movs	r0, #1
}
 8004dde:	b003      	add	sp, #12
 8004de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8004de4:	2000      	movs	r0, #0
 8004de6:	e7fa      	b.n	8004dde <PCD_WriteEmptyTxFifo+0xc6>

08004de8 <HAL_PCD_Init>:
{
 8004de8:	b530      	push	{r4, r5, lr}
 8004dea:	b083      	sub	sp, #12
  if (hpcd == NULL)
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d07a      	beq.n	8004ee6 <HAL_PCD_Init+0xfe>
 8004df0:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8004df2:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004df4:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8004df8:	b1c3      	cbz	r3, 8004e2c <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 8004e00:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 8004e04:	d017      	beq.n	8004e36 <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 8004e06:	6820      	ldr	r0, [r4, #0]
 8004e08:	f001 fffe 	bl	8006e08 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e0c:	7c23      	ldrb	r3, [r4, #16]
 8004e0e:	f88d 3000 	strb.w	r3, [sp]
 8004e12:	1d23      	adds	r3, r4, #4
 8004e14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e16:	6820      	ldr	r0, [r4, #0]
 8004e18:	f001 ff35 	bl	8006c86 <USB_CoreInit>
 8004e1c:	b170      	cbz	r0, 8004e3c <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e1e:	2302      	movs	r3, #2
 8004e20:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8004e24:	2501      	movs	r5, #1
}
 8004e26:	4628      	mov	r0, r5
 8004e28:	b003      	add	sp, #12
 8004e2a:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8004e2c:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8004e30:	f004 fd7a 	bl	8009928 <HAL_PCD_MspInit>
 8004e34:	e7e1      	b.n	8004dfa <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	71a3      	strb	r3, [r4, #6]
 8004e3a:	e7e4      	b.n	8004e06 <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	6820      	ldr	r0, [r4, #0]
 8004e40:	f002 fc47 	bl	80076d2 <USB_SetCurrentMode>
 8004e44:	4602      	mov	r2, r0
 8004e46:	b9b8      	cbnz	r0, 8004e78 <HAL_PCD_Init+0x90>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e48:	4603      	mov	r3, r0
 8004e4a:	7920      	ldrb	r0, [r4, #4]
 8004e4c:	4298      	cmp	r0, r3
 8004e4e:	d918      	bls.n	8004e82 <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 8004e50:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8004e54:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004e58:	2001      	movs	r0, #1
 8004e5a:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8004e5c:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e5e:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e60:	2000      	movs	r0, #0
 8004e62:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e64:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e66:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e68:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8004e6c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004e70:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e72:	3301      	adds	r3, #1
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	e7e8      	b.n	8004e4a <HAL_PCD_Init+0x62>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8004e7e:	2501      	movs	r5, #1
 8004e80:	e7d1      	b.n	8004e26 <HAL_PCD_Init+0x3e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e82:	4290      	cmp	r0, r2
 8004e84:	d917      	bls.n	8004eb6 <HAL_PCD_Init+0xce>
    hpcd->OUT_ep[i].is_in = 0U;
 8004e86:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8004e8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e8e:	2100      	movs	r1, #0
 8004e90:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8004e94:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e98:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e9c:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ea0:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ea4:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8004ea8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004eac:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eb0:	3201      	adds	r2, #1
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	e7e5      	b.n	8004e82 <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004eb6:	7c23      	ldrb	r3, [r4, #16]
 8004eb8:	f88d 3000 	strb.w	r3, [sp]
 8004ebc:	1d23      	adds	r3, r4, #4
 8004ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ec0:	6820      	ldr	r0, [r4, #0]
 8004ec2:	f001 fff7 	bl	8006eb4 <USB_DevInit>
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	b120      	cbz	r0, 8004ed4 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8004ed0:	2501      	movs	r5, #1
 8004ed2:	e7a8      	b.n	8004e26 <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ede:	6820      	ldr	r0, [r4, #0]
 8004ee0:	f002 fbb6 	bl	8007650 <USB_DevDisconnect>
  return HAL_OK;
 8004ee4:	e79f      	b.n	8004e26 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8004ee6:	2501      	movs	r5, #1
 8004ee8:	e79d      	b.n	8004e26 <HAL_PCD_Init+0x3e>

08004eea <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eea:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 8004eec:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8004ef0:	2a01      	cmp	r2, #1
 8004ef2:	d01a      	beq.n	8004f2a <HAL_PCD_Start+0x40>
{
 8004ef4:	b510      	push	{r4, lr}
 8004ef6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004f04:	d002      	beq.n	8004f0c <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 8004f06:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f08:	2a01      	cmp	r2, #1
 8004f0a:	d009      	beq.n	8004f20 <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 8004f0c:	6820      	ldr	r0, [r4, #0]
 8004f0e:	f001 ff75 	bl	8006dfc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f12:	6820      	ldr	r0, [r4, #0]
 8004f14:	f002 fb8e 	bl	8007634 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f18:	2000      	movs	r0, #0
 8004f1a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8004f1e:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f22:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004f26:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f28:	e7f0      	b.n	8004f0c <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 8004f2a:	2002      	movs	r0, #2
}
 8004f2c:	4770      	bx	lr
	...

08004f30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	4604      	mov	r4, r0
 8004f34:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f36:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004f38:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f3a:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f42:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004f44:	79a1      	ldrb	r1, [r4, #6]
 8004f46:	2901      	cmp	r1, #1
 8004f48:	d011      	beq.n	8004f6e <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004f4a:	4938      	ldr	r1, [pc, #224]	@ (800502c <PCD_EP_OutXfrComplete_int+0xfc>)
 8004f4c:	428e      	cmp	r6, r1
 8004f4e:	d056      	beq.n	8004ffe <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004f50:	b93d      	cbnz	r5, 8004f62 <PCD_EP_OutXfrComplete_int+0x32>
 8004f52:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8004f56:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f5a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d05e      	beq.n	8005020 <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f62:	b2e9      	uxtb	r1, r5
 8004f64:	4620      	mov	r0, r4
 8004f66:	f004 fd2b 	bl	80099c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004f6e:	f012 0f08 	tst.w	r2, #8
 8004f72:	d009      	beq.n	8004f88 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f74:	492e      	ldr	r1, [pc, #184]	@ (8005030 <PCD_EP_OutXfrComplete_int+0x100>)
 8004f76:	428e      	cmp	r6, r1
 8004f78:	d9f7      	bls.n	8004f6a <PCD_EP_OutXfrComplete_int+0x3a>
 8004f7a:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8004f7e:	d0f4      	beq.n	8004f6a <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004f84:	609a      	str	r2, [r3, #8]
 8004f86:	e7f0      	b.n	8004f6a <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004f88:	f012 0f20 	tst.w	r2, #32
 8004f8c:	d002      	beq.n	8004f94 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f8e:	2220      	movs	r2, #32
 8004f90:	609a      	str	r2, [r3, #8]
 8004f92:	e7ea      	b.n	8004f6a <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004f94:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8004f98:	d1e7      	bne.n	8004f6a <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f9a:	4925      	ldr	r1, [pc, #148]	@ (8005030 <PCD_EP_OutXfrComplete_int+0x100>)
 8004f9c:	428e      	cmp	r6, r1
 8004f9e:	d906      	bls.n	8004fae <PCD_EP_OutXfrComplete_int+0x7e>
 8004fa0:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8004fa4:	d003      	beq.n	8004fae <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fa6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	e7dd      	b.n	8004f6a <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fae:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8004fb2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004fb6:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc0:	1acb      	subs	r3, r1, r3
 8004fc2:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 8004fc6:	b97d      	cbnz	r5, 8004fe8 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 8004fc8:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8004fcc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004fd0:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 8004fd4:	b16a      	cbz	r2, 8004ff2 <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 8004fd6:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8004fda:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004fde:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 8004fe2:	4419      	add	r1, r3
 8004fe4:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fe8:	b2e9      	uxtb	r1, r5
 8004fea:	4620      	mov	r0, r4
 8004fec:	f004 fce8 	bl	80099c0 <HAL_PCD_DataOutStageCallback>
 8004ff0:	e7bb      	b.n	8004f6a <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ff2:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	f002 fbaa 	bl	8007750 <USB_EP0_OutStart>
 8004ffc:	e7f4      	b.n	8004fe8 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ffe:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8005002:	d003      	beq.n	800500c <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005004:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005008:	609a      	str	r2, [r3, #8]
 800500a:	e7ae      	b.n	8004f6a <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800500c:	f012 0f20 	tst.w	r2, #32
 8005010:	d001      	beq.n	8005016 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005012:	2220      	movs	r2, #32
 8005014:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005016:	b2e9      	uxtb	r1, r5
 8005018:	4620      	mov	r0, r4
 800501a:	f004 fcd1 	bl	80099c0 <HAL_PCD_DataOutStageCallback>
 800501e:	e7a4      	b.n	8004f6a <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005020:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005024:	2100      	movs	r1, #0
 8005026:	f002 fb93 	bl	8007750 <USB_EP0_OutStart>
 800502a:	e79a      	b.n	8004f62 <PCD_EP_OutXfrComplete_int+0x32>
 800502c:	4f54310a 	.word	0x4f54310a
 8005030:	4f54300a 	.word	0x4f54300a

08005034 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005038:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800503a:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800503c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005040:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005044:	4a0e      	ldr	r2, [pc, #56]	@ (8005080 <PCD_EP_OutSetupPacket_int+0x4c>)
 8005046:	4295      	cmp	r5, r2
 8005048:	d907      	bls.n	800505a <PCD_EP_OutSetupPacket_int+0x26>
 800504a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800504e:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8005052:	d002      	beq.n	800505a <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005054:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005058:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800505a:	4620      	mov	r0, r4
 800505c:	f004 fca8 	bl	80099b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005060:	4b07      	ldr	r3, [pc, #28]	@ (8005080 <PCD_EP_OutSetupPacket_int+0x4c>)
 8005062:	429d      	cmp	r5, r3
 8005064:	d902      	bls.n	800506c <PCD_EP_OutSetupPacket_int+0x38>
 8005066:	79a3      	ldrb	r3, [r4, #6]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d001      	beq.n	8005070 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 800506c:	2000      	movs	r0, #0
 800506e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005070:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005074:	2101      	movs	r1, #1
 8005076:	6820      	ldr	r0, [r4, #0]
 8005078:	f002 fb6a 	bl	8007750 <USB_EP0_OutStart>
 800507c:	e7f6      	b.n	800506c <PCD_EP_OutSetupPacket_int+0x38>
 800507e:	bf00      	nop
 8005080:	4f54300a 	.word	0x4f54300a

08005084 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8005084:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8005088:	2b01      	cmp	r3, #1
 800508a:	d00c      	beq.n	80050a6 <HAL_PCD_SetAddress+0x22>
{
 800508c:	b510      	push	{r4, lr}
 800508e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005090:	2301      	movs	r3, #1
 8005092:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005096:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005098:	6800      	ldr	r0, [r0, #0]
 800509a:	f002 fabb 	bl	8007614 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800509e:	2000      	movs	r0, #0
 80050a0:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80050a4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80050a6:	2002      	movs	r0, #2
}
 80050a8:	4770      	bx	lr

080050aa <HAL_PCD_EP_Open>:
{
 80050aa:	b538      	push	{r3, r4, r5, lr}
 80050ac:	4605      	mov	r5, r0
 80050ae:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80050b0:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80050b4:	d12b      	bne.n	800510e <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050b6:	f001 0e0f 	and.w	lr, r1, #15
 80050ba:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 80050be:	00a4      	lsls	r4, r4, #2
 80050c0:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 80050c4:	4404      	add	r4, r0
 80050c6:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 80050c8:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80050cc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80050d0:	2000      	movs	r0, #0
 80050d2:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80050d6:	f00c 0c0f 	and.w	ip, ip, #15
 80050da:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80050de:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80050e2:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80050e4:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 80050e6:	784a      	ldrb	r2, [r1, #1]
 80050e8:	b10a      	cbz	r2, 80050ee <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 80050ea:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d01c      	beq.n	800512c <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 80050f2:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d01b      	beq.n	8005132 <HAL_PCD_EP_Open+0x88>
 80050fa:	2301      	movs	r3, #1
 80050fc:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005100:	6828      	ldr	r0, [r5, #0]
 8005102:	f001 ffb4 	bl	800706e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005106:	2000      	movs	r0, #0
 8005108:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 800510c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800510e:	f001 000f 	and.w	r0, r1, #15
 8005112:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8005116:	0089      	lsls	r1, r1, #2
 8005118:	3110      	adds	r1, #16
 800511a:	4429      	add	r1, r5
 800511c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800511e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8005122:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005126:	2401      	movs	r4, #1
 8005128:	7544      	strb	r4, [r0, #21]
 800512a:	e7d4      	b.n	80050d6 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	714b      	strb	r3, [r1, #5]
 8005130:	e7df      	b.n	80050f2 <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 8005132:	2002      	movs	r0, #2
 8005134:	e7ea      	b.n	800510c <HAL_PCD_EP_Open+0x62>

08005136 <HAL_PCD_EP_Close>:
{
 8005136:	b510      	push	{r4, lr}
 8005138:	4604      	mov	r4, r0
 800513a:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800513c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005140:	d120      	bne.n	8005184 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005142:	f001 000f 	and.w	r0, r1, #15
 8005146:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005150:	4423      	add	r3, r4
 8005152:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8005154:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8005158:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800515c:	2300      	movs	r3, #0
 800515e:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8005162:	f002 020f 	and.w	r2, r2, #15
 8005166:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005168:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800516c:	2b01      	cmp	r3, #1
 800516e:	d018      	beq.n	80051a2 <HAL_PCD_EP_Close+0x6c>
 8005170:	2301      	movs	r3, #1
 8005172:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005176:	6820      	ldr	r0, [r4, #0]
 8005178:	f001 ffc6 	bl	8007108 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800517c:	2000      	movs	r0, #0
 800517e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8005182:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005184:	f001 000f 	and.w	r0, r1, #15
 8005188:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	3310      	adds	r3, #16
 8005190:	4423      	add	r3, r4
 8005192:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8005194:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8005198:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800519c:	2301      	movs	r3, #1
 800519e:	7543      	strb	r3, [r0, #21]
 80051a0:	e7df      	b.n	8005162 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 80051a2:	2002      	movs	r0, #2
 80051a4:	e7ed      	b.n	8005182 <HAL_PCD_EP_Close+0x4c>

080051a6 <HAL_PCD_EP_Receive>:
{
 80051a6:	b510      	push	{r4, lr}
 80051a8:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051aa:	f001 0c0f 	and.w	ip, r1, #15
 80051ae:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80051b2:	0089      	lsls	r1, r1, #2
 80051b4:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80051b8:	4401      	add	r1, r0
 80051ba:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80051bc:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80051c0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80051c4:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 80051c8:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 80051d2:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80051d6:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 80051da:	7982      	ldrb	r2, [r0, #6]
 80051dc:	2a01      	cmp	r2, #1
 80051de:	d004      	beq.n	80051ea <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051e0:	6800      	ldr	r0, [r0, #0]
 80051e2:	f002 f877 	bl	80072d4 <USB_EPStartXfer>
}
 80051e6:	2000      	movs	r0, #0
 80051e8:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80051ea:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 80051ee:	e7f7      	b.n	80051e0 <HAL_PCD_EP_Receive+0x3a>

080051f0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80051f0:	f001 010f 	and.w	r1, r1, #15
 80051f4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80051f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80051fc:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 8005200:	4770      	bx	lr

08005202 <HAL_PCD_EP_Transmit>:
{
 8005202:	b510      	push	{r4, lr}
 8005204:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005206:	f001 0c0f 	and.w	ip, r1, #15
 800520a:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 800520e:	0089      	lsls	r1, r1, #2
 8005210:	3110      	adds	r1, #16
 8005212:	4401      	add	r1, r0
 8005214:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8005216:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 800521a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800521e:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8005222:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 800522c:	2301      	movs	r3, #1
 800522e:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005232:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 8005236:	7982      	ldrb	r2, [r0, #6]
 8005238:	429a      	cmp	r2, r3
 800523a:	d004      	beq.n	8005246 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800523c:	6800      	ldr	r0, [r0, #0]
 800523e:	f002 f849 	bl	80072d4 <USB_EPStartXfer>
}
 8005242:	2000      	movs	r0, #0
 8005244:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8005246:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 800524a:	e7f7      	b.n	800523c <HAL_PCD_EP_Transmit+0x3a>

0800524c <HAL_PCD_EP_SetStall>:
{
 800524c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800524e:	f001 050f 	and.w	r5, r1, #15
 8005252:	7902      	ldrb	r2, [r0, #4]
 8005254:	42aa      	cmp	r2, r5
 8005256:	d338      	bcc.n	80052ca <HAL_PCD_EP_SetStall+0x7e>
 8005258:	4604      	mov	r4, r0
 800525a:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 800525c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005260:	d11f      	bne.n	80052a2 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8005262:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005266:	0089      	lsls	r1, r1, #2
 8005268:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800526c:	4401      	add	r1, r0
 800526e:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8005270:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005274:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 800527e:	2301      	movs	r3, #1
 8005280:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005282:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8005284:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8005288:	2b01      	cmp	r3, #1
 800528a:	d020      	beq.n	80052ce <HAL_PCD_EP_SetStall+0x82>
 800528c:	2301      	movs	r3, #1
 800528e:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005292:	6820      	ldr	r0, [r4, #0]
 8005294:	f002 f963 	bl	800755e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005298:	b185      	cbz	r5, 80052bc <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 800529a:	2000      	movs	r0, #0
 800529c:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80052a0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052a2:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 80052a6:	0089      	lsls	r1, r1, #2
 80052a8:	3110      	adds	r1, #16
 80052aa:	4401      	add	r1, r0
 80052ac:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80052ae:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80052b2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80052b6:	2201      	movs	r2, #1
 80052b8:	755a      	strb	r2, [r3, #21]
 80052ba:	e7e0      	b.n	800527e <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80052bc:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80052c0:	79a1      	ldrb	r1, [r4, #6]
 80052c2:	6820      	ldr	r0, [r4, #0]
 80052c4:	f002 fa44 	bl	8007750 <USB_EP0_OutStart>
 80052c8:	e7e7      	b.n	800529a <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 80052ca:	2001      	movs	r0, #1
 80052cc:	e7e8      	b.n	80052a0 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80052ce:	2002      	movs	r0, #2
 80052d0:	e7e6      	b.n	80052a0 <HAL_PCD_EP_SetStall+0x54>

080052d2 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80052d2:	f001 030f 	and.w	r3, r1, #15
 80052d6:	7902      	ldrb	r2, [r0, #4]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d330      	bcc.n	800533e <HAL_PCD_EP_ClrStall+0x6c>
{
 80052dc:	b510      	push	{r4, lr}
 80052de:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80052e0:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80052e4:	d11e      	bne.n	8005324 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052e6:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80052ea:	0089      	lsls	r1, r1, #2
 80052ec:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80052f0:	4401      	add	r1, r0
 80052f2:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80052f4:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80052f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80052fc:	2000      	movs	r0, #0
 80052fe:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 8005302:	2200      	movs	r2, #0
 8005304:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005306:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8005308:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800530c:	2b01      	cmp	r3, #1
 800530e:	d018      	beq.n	8005342 <HAL_PCD_EP_ClrStall+0x70>
 8005310:	2301      	movs	r3, #1
 8005312:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005316:	6820      	ldr	r0, [r4, #0]
 8005318:	f002 f94e 	bl	80075b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800531c:	2000      	movs	r0, #0
 800531e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8005322:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005324:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8005328:	0089      	lsls	r1, r1, #2
 800532a:	3110      	adds	r1, #16
 800532c:	4401      	add	r1, r0
 800532e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8005330:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8005334:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005338:	2001      	movs	r0, #1
 800533a:	7550      	strb	r0, [r2, #21]
 800533c:	e7e1      	b.n	8005302 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 800533e:	2001      	movs	r0, #1
}
 8005340:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8005342:	2002      	movs	r0, #2
 8005344:	e7ed      	b.n	8005322 <HAL_PCD_EP_ClrStall+0x50>

08005346 <HAL_PCD_EP_Abort>:
{
 8005346:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8005348:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800534c:	d10c      	bne.n	8005368 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800534e:	f001 010f 	and.w	r1, r1, #15
 8005352:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005356:	0089      	lsls	r1, r1, #2
 8005358:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800535c:	4401      	add	r1, r0
 800535e:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005360:	6800      	ldr	r0, [r0, #0]
 8005362:	f001 ff41 	bl	80071e8 <USB_EPStopXfer>
}
 8005366:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005368:	f001 010f 	and.w	r1, r1, #15
 800536c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005370:	0089      	lsls	r1, r1, #2
 8005372:	3110      	adds	r1, #16
 8005374:	4401      	add	r1, r0
 8005376:	3104      	adds	r1, #4
 8005378:	e7f2      	b.n	8005360 <HAL_PCD_EP_Abort+0x1a>

0800537a <HAL_PCD_IRQHandler>:
{
 800537a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537e:	b083      	sub	sp, #12
 8005380:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005382:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005384:	4628      	mov	r0, r5
 8005386:	f002 f9a0 	bl	80076ca <USB_GetMode>
 800538a:	b110      	cbz	r0, 8005392 <HAL_PCD_IRQHandler+0x18>
}
 800538c:	b003      	add	sp, #12
 800538e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005392:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005394:	6820      	ldr	r0, [r4, #0]
 8005396:	f002 f969 	bl	800766c <USB_ReadInterrupts>
 800539a:	2800      	cmp	r0, #0
 800539c:	d0f6      	beq.n	800538c <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800539e:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80053a8:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80053ac:	6820      	ldr	r0, [r4, #0]
 80053ae:	f002 f95d 	bl	800766c <USB_ReadInterrupts>
 80053b2:	f010 0f02 	tst.w	r0, #2
 80053b6:	d004      	beq.n	80053c2 <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80053b8:	6822      	ldr	r2, [r4, #0]
 80053ba:	6953      	ldr	r3, [r2, #20]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80053c2:	6820      	ldr	r0, [r4, #0]
 80053c4:	f002 f952 	bl	800766c <USB_ReadInterrupts>
 80053c8:	f010 0f10 	tst.w	r0, #16
 80053cc:	d015      	beq.n	80053fa <HAL_PCD_IRQHandler+0x80>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	6993      	ldr	r3, [r2, #24]
 80053d2:	f023 0310 	bic.w	r3, r3, #16
 80053d6:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 80053d8:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80053dc:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80053e0:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 80053e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053e8:	d04c      	beq.n	8005484 <HAL_PCD_IRQHandler+0x10a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80053ea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80053ee:	d06f      	beq.n	80054d0 <HAL_PCD_IRQHandler+0x156>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053f0:	6822      	ldr	r2, [r4, #0]
 80053f2:	6993      	ldr	r3, [r2, #24]
 80053f4:	f043 0310 	orr.w	r3, r3, #16
 80053f8:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80053fa:	6820      	ldr	r0, [r4, #0]
 80053fc:	f002 f936 	bl	800766c <USB_ReadInterrupts>
 8005400:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8005404:	d176      	bne.n	80054f4 <HAL_PCD_IRQHandler+0x17a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005406:	6820      	ldr	r0, [r4, #0]
 8005408:	f002 f930 	bl	800766c <USB_ReadInterrupts>
 800540c:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8005410:	f040 80e0 	bne.w	80055d4 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	f002 f929 	bl	800766c <USB_ReadInterrupts>
 800541a:	2800      	cmp	r0, #0
 800541c:	f2c0 8161 	blt.w	80056e2 <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005420:	6820      	ldr	r0, [r4, #0]
 8005422:	f002 f923 	bl	800766c <USB_ReadInterrupts>
 8005426:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 800542a:	d009      	beq.n	8005440 <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f013 0f01 	tst.w	r3, #1
 8005432:	f040 816e 	bne.w	8005712 <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005436:	6822      	ldr	r2, [r4, #0]
 8005438:	6953      	ldr	r3, [r2, #20]
 800543a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800543e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005440:	6820      	ldr	r0, [r4, #0]
 8005442:	f002 f913 	bl	800766c <USB_ReadInterrupts>
 8005446:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 800544a:	f040 8166 	bne.w	800571a <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800544e:	6820      	ldr	r0, [r4, #0]
 8005450:	f002 f90c 	bl	800766c <USB_ReadInterrupts>
 8005454:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8005458:	f040 81b3 	bne.w	80057c2 <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800545c:	6820      	ldr	r0, [r4, #0]
 800545e:	f002 f905 	bl	800766c <USB_ReadInterrupts>
 8005462:	f010 0f08 	tst.w	r0, #8
 8005466:	f040 81c4 	bne.w	80057f2 <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800546a:	6820      	ldr	r0, [r4, #0]
 800546c:	f002 f8fe 	bl	800766c <USB_ReadInterrupts>
 8005470:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8005474:	f000 81d7 	beq.w	8005826 <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005478:	69ab      	ldr	r3, [r5, #24]
 800547a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800547e:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005480:	2601      	movs	r6, #1
 8005482:	e1c0      	b.n	8005806 <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005484:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005488:	ea18 0f03 	tst.w	r8, r3
 800548c:	d0b0      	beq.n	80053f0 <HAL_PCD_IRQHandler+0x76>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800548e:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005496:	9301      	str	r3, [sp, #4]
 8005498:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 800549c:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 80054a0:	f3c8 120a 	ubfx	r2, r8, #4, #11
 80054a4:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 80054a8:	4628      	mov	r0, r5
 80054aa:	f002 f835 	bl	8007518 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054ae:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 80054b2:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 80054b6:	4453      	add	r3, sl
 80054b8:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054bc:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 80054c0:	9a01      	ldr	r2, [sp, #4]
 80054c2:	444a      	add	r2, r9
 80054c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80054c8:	4453      	add	r3, sl
 80054ca:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 80054ce:	e78f      	b.n	80053f0 <HAL_PCD_IRQHandler+0x76>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80054d0:	2208      	movs	r2, #8
 80054d2:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 80054d6:	4628      	mov	r0, r5
 80054d8:	f002 f81e 	bl	8007518 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054dc:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80054e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80054e4:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80054e8:	f3c8 180a 	ubfx	r8, r8, #4, #11
 80054ec:	4442      	add	r2, r8
 80054ee:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 80054f2:	e77d      	b.n	80053f0 <HAL_PCD_IRQHandler+0x76>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80054f4:	6820      	ldr	r0, [r4, #0]
 80054f6:	f002 f8bd 	bl	8007674 <USB_ReadDevAllOutEpInterrupt>
 80054fa:	4680      	mov	r8, r0
      epnum = 0U;
 80054fc:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80054fe:	e035      	b.n	800556c <HAL_PCD_IRQHandler+0x1f2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005500:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005504:	2201      	movs	r2, #1
 8005506:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800550a:	4649      	mov	r1, r9
 800550c:	4620      	mov	r0, r4
 800550e:	f7ff fd0f 	bl	8004f30 <PCD_EP_OutXfrComplete_int>
 8005512:	e03c      	b.n	800558e <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005514:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005518:	2208      	movs	r2, #8
 800551a:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800551e:	4649      	mov	r1, r9
 8005520:	4620      	mov	r0, r4
 8005522:	f7ff fd87 	bl	8005034 <PCD_EP_OutSetupPacket_int>
 8005526:	e035      	b.n	8005594 <HAL_PCD_IRQHandler+0x21a>
            if (ep->is_iso_incomplete == 1U)
 8005528:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800552c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005530:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8005534:	2b01      	cmp	r3, #1
 8005536:	d041      	beq.n	80055bc <HAL_PCD_IRQHandler+0x242>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005538:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800553c:	2202      	movs	r2, #2
 800553e:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005542:	f01a 0f20 	tst.w	sl, #32
 8005546:	d004      	beq.n	8005552 <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005548:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800554c:	2220      	movs	r2, #32
 800554e:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005552:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8005556:	d005      	beq.n	8005564 <HAL_PCD_IRQHandler+0x1ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005558:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800555c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005560:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8005564:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8005568:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800556c:	f1b8 0f00 	cmp.w	r8, #0
 8005570:	f43f af49 	beq.w	8005406 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 8005574:	f018 0f01 	tst.w	r8, #1
 8005578:	d0f4      	beq.n	8005564 <HAL_PCD_IRQHandler+0x1ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800557a:	fa5f fb89 	uxtb.w	fp, r9
 800557e:	4659      	mov	r1, fp
 8005580:	6820      	ldr	r0, [r4, #0]
 8005582:	f002 f887 	bl	8007694 <USB_ReadDevOutEPInterrupt>
 8005586:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005588:	f010 0f01 	tst.w	r0, #1
 800558c:	d1b8      	bne.n	8005500 <HAL_PCD_IRQHandler+0x186>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800558e:	f01a 0f08 	tst.w	sl, #8
 8005592:	d1bf      	bne.n	8005514 <HAL_PCD_IRQHandler+0x19a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005594:	f01a 0f10 	tst.w	sl, #16
 8005598:	d004      	beq.n	80055a4 <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800559a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800559e:	2210      	movs	r2, #16
 80055a0:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80055a4:	f01a 0f02 	tst.w	sl, #2
 80055a8:	d0cb      	beq.n	8005542 <HAL_PCD_IRQHandler+0x1c8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80055aa:	696b      	ldr	r3, [r5, #20]
 80055ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055b0:	d0ba      	beq.n	8005528 <HAL_PCD_IRQHandler+0x1ae>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055b8:	607b      	str	r3, [r7, #4]
 80055ba:	e7b5      	b.n	8005528 <HAL_PCD_IRQHandler+0x1ae>
              ep->is_iso_incomplete = 0U;
 80055bc:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80055c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80055ca:	4659      	mov	r1, fp
 80055cc:	4620      	mov	r0, r4
 80055ce:	f004 fa45 	bl	8009a5c <HAL_PCD_ISOOUTIncompleteCallback>
 80055d2:	e7b1      	b.n	8005538 <HAL_PCD_IRQHandler+0x1be>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80055d4:	6820      	ldr	r0, [r4, #0]
 80055d6:	f002 f855 	bl	8007684 <USB_ReadDevAllInEpInterrupt>
 80055da:	4680      	mov	r8, r0
      epnum = 0U;
 80055dc:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80055de:	e025      	b.n	800562c <HAL_PCD_IRQHandler+0x2b2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80055e0:	4659      	mov	r1, fp
 80055e2:	4620      	mov	r0, r4
 80055e4:	f004 f9f8 	bl	80099d8 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80055e8:	f01a 0f08 	tst.w	sl, #8
 80055ec:	d004      	beq.n	80055f8 <HAL_PCD_IRQHandler+0x27e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80055ee:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80055f2:	2208      	movs	r2, #8
 80055f4:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80055f8:	f01a 0f10 	tst.w	sl, #16
 80055fc:	d004      	beq.n	8005608 <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80055fe:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005602:	2210      	movs	r2, #16
 8005604:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005608:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800560c:	d004      	beq.n	8005618 <HAL_PCD_IRQHandler+0x29e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800560e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005612:	2240      	movs	r2, #64	@ 0x40
 8005614:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005618:	f01a 0f02 	tst.w	sl, #2
 800561c:	d140      	bne.n	80056a0 <HAL_PCD_IRQHandler+0x326>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800561e:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8005622:	d159      	bne.n	80056d8 <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 8005624:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8005628:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800562c:	f1b8 0f00 	cmp.w	r8, #0
 8005630:	f43f aef0 	beq.w	8005414 <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005634:	f018 0f01 	tst.w	r8, #1
 8005638:	d0f4      	beq.n	8005624 <HAL_PCD_IRQHandler+0x2aa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800563a:	fa5f fb89 	uxtb.w	fp, r9
 800563e:	4659      	mov	r1, fp
 8005640:	6820      	ldr	r0, [r4, #0]
 8005642:	f002 f830 	bl	80076a6 <USB_ReadDevInEPInterrupt>
 8005646:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005648:	f010 0f01 	tst.w	r0, #1
 800564c:	d0cc      	beq.n	80055e8 <HAL_PCD_IRQHandler+0x26e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800564e:	f009 020f 	and.w	r2, r9, #15
 8005652:	2101      	movs	r1, #1
 8005654:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565a:	ea23 0302 	bic.w	r3, r3, r2
 800565e:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005660:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005664:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8005668:	79a3      	ldrb	r3, [r4, #6]
 800566a:	428b      	cmp	r3, r1
 800566c:	d1b8      	bne.n	80055e0 <HAL_PCD_IRQHandler+0x266>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800566e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005672:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005676:	6a1a      	ldr	r2, [r3, #32]
 8005678:	69d9      	ldr	r1, [r3, #28]
 800567a:	440a      	add	r2, r1
 800567c:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800567e:	f1b9 0f00 	cmp.w	r9, #0
 8005682:	d1ad      	bne.n	80055e0 <HAL_PCD_IRQHandler+0x266>
 8005684:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005688:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800568c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1a6      	bne.n	80055e0 <HAL_PCD_IRQHandler+0x266>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005692:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005696:	2101      	movs	r1, #1
 8005698:	6820      	ldr	r0, [r4, #0]
 800569a:	f002 f859 	bl	8007750 <USB_EP0_OutStart>
 800569e:	e79f      	b.n	80055e0 <HAL_PCD_IRQHandler+0x266>
            (void)USB_FlushTxFifo(USBx, epnum);
 80056a0:	4649      	mov	r1, r9
 80056a2:	4628      	mov	r0, r5
 80056a4:	f001 fbb6 	bl	8006e14 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 80056a8:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80056ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056b0:	7ddb      	ldrb	r3, [r3, #23]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d005      	beq.n	80056c2 <HAL_PCD_IRQHandler+0x348>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80056b6:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80056ba:	2202      	movs	r2, #2
 80056bc:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 80056c0:	e7ad      	b.n	800561e <HAL_PCD_IRQHandler+0x2a4>
              ep->is_iso_incomplete = 0U;
 80056c2:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80056c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056ca:	2200      	movs	r2, #0
 80056cc:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80056ce:	4659      	mov	r1, fp
 80056d0:	4620      	mov	r0, r4
 80056d2:	f004 f9c9 	bl	8009a68 <HAL_PCD_ISOINIncompleteCallback>
 80056d6:	e7ee      	b.n	80056b6 <HAL_PCD_IRQHandler+0x33c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80056d8:	4649      	mov	r1, r9
 80056da:	4620      	mov	r0, r4
 80056dc:	f7ff fb1c 	bl	8004d18 <PCD_WriteEmptyTxFifo>
 80056e0:	e7a0      	b.n	8005624 <HAL_PCD_IRQHandler+0x2aa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 80056ea:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d008      	beq.n	8005704 <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 80056f2:	4620      	mov	r0, r4
 80056f4:	f004 f9ac 	bl	8009a50 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80056f8:	6822      	ldr	r2, [r4, #0]
 80056fa:	6953      	ldr	r3, [r2, #20]
 80056fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005700:	6153      	str	r3, [r2, #20]
 8005702:	e68d      	b.n	8005420 <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 8005704:	2100      	movs	r1, #0
 8005706:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800570a:	4620      	mov	r0, r4
 800570c:	f000 f93f 	bl	800598e <HAL_PCDEx_LPM_Callback>
 8005710:	e7f2      	b.n	80056f8 <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 8005712:	4620      	mov	r0, r4
 8005714:	f004 f984 	bl	8009a20 <HAL_PCD_SuspendCallback>
 8005718:	e68d      	b.n	8005436 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f023 0301 	bic.w	r3, r3, #1
 8005720:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005722:	2110      	movs	r1, #16
 8005724:	6820      	ldr	r0, [r4, #0]
 8005726:	f001 fb75 	bl	8006e14 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800572a:	e01a      	b.n	8005762 <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800572c:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8005730:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8005734:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005738:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800573c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8005740:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005744:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005748:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800574c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8005750:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005754:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8005758:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800575c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005760:	3601      	adds	r6, #1
 8005762:	7923      	ldrb	r3, [r4, #4]
 8005764:	42b3      	cmp	r3, r6
 8005766:	d8e1      	bhi.n	800572c <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800576e:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005770:	7be3      	ldrb	r3, [r4, #15]
 8005772:	b1db      	cbz	r3, 80057ac <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005774:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005778:	f043 030b 	orr.w	r3, r3, #11
 800577c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005782:	f043 030b 	orr.w	r3, r3, #11
 8005786:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005788:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 800578c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005790:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005794:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005798:	79a1      	ldrb	r1, [r4, #6]
 800579a:	6820      	ldr	r0, [r4, #0]
 800579c:	f001 ffd8 	bl	8007750 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80057a0:	6822      	ldr	r2, [r4, #0]
 80057a2:	6953      	ldr	r3, [r2, #20]
 80057a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057a8:	6153      	str	r3, [r2, #20]
 80057aa:	e650      	b.n	800544e <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80057b2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80057b6:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f043 030b 	orr.w	r3, r3, #11
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	e7e2      	b.n	8005788 <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 80057c2:	6820      	ldr	r0, [r4, #0]
 80057c4:	f001 ffb6 	bl	8007734 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80057c8:	6820      	ldr	r0, [r4, #0]
 80057ca:	f001 fc3f 	bl	800704c <USB_GetDevSpeed>
 80057ce:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80057d0:	6826      	ldr	r6, [r4, #0]
 80057d2:	f000 fbdd 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 80057d6:	4601      	mov	r1, r0
 80057d8:	79e2      	ldrb	r2, [r4, #7]
 80057da:	4630      	mov	r0, r6
 80057dc:	f001 fa9c 	bl	8006d18 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80057e0:	4620      	mov	r0, r4
 80057e2:	f004 f90a 	bl	80099fa <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80057e6:	6822      	ldr	r2, [r4, #0]
 80057e8:	6953      	ldr	r3, [r2, #20]
 80057ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057ee:	6153      	str	r3, [r2, #20]
 80057f0:	e634      	b.n	800545c <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 80057f2:	4620      	mov	r0, r4
 80057f4:	f004 f8fb 	bl	80099ee <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80057f8:	6822      	ldr	r2, [r4, #0]
 80057fa:	6953      	ldr	r3, [r2, #20]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	6153      	str	r3, [r2, #20]
 8005802:	e632      	b.n	800546a <HAL_PCD_IRQHandler+0xf0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005804:	3601      	adds	r6, #1
 8005806:	7923      	ldrb	r3, [r4, #4]
 8005808:	42b3      	cmp	r3, r6
 800580a:	d90c      	bls.n	8005826 <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800580c:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8005810:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005814:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8005818:	2b01      	cmp	r3, #1
 800581a:	d1f3      	bne.n	8005804 <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800581c:	b2f1      	uxtb	r1, r6
 800581e:	4620      	mov	r0, r4
 8005820:	f7ff fd91 	bl	8005346 <HAL_PCD_EP_Abort>
 8005824:	e7ee      	b.n	8005804 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005826:	6820      	ldr	r0, [r4, #0]
 8005828:	f001 ff20 	bl	800766c <USB_ReadInterrupts>
 800582c:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8005830:	d125      	bne.n	800587e <HAL_PCD_IRQHandler+0x504>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005832:	6820      	ldr	r0, [r4, #0]
 8005834:	f001 ff1a 	bl	800766c <USB_ReadInterrupts>
 8005838:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 800583c:	d059      	beq.n	80058f2 <HAL_PCD_IRQHandler+0x578>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800583e:	2301      	movs	r3, #1
 8005840:	e026      	b.n	8005890 <HAL_PCD_IRQHandler+0x516>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005842:	3601      	adds	r6, #1
 8005844:	7923      	ldrb	r3, [r4, #4]
 8005846:	42b3      	cmp	r3, r6
 8005848:	d91b      	bls.n	8005882 <HAL_PCD_IRQHandler+0x508>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800584a:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 800584e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005852:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8005856:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800585a:	7e1b      	ldrb	r3, [r3, #24]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d1f0      	bne.n	8005842 <HAL_PCD_IRQHandler+0x4c8>
 8005860:	2a00      	cmp	r2, #0
 8005862:	daee      	bge.n	8005842 <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005864:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8005868:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800586c:	2201      	movs	r2, #1
 800586e:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005870:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8005874:	b2c9      	uxtb	r1, r1
 8005876:	4620      	mov	r0, r4
 8005878:	f7ff fd65 	bl	8005346 <HAL_PCD_EP_Abort>
 800587c:	e7e1      	b.n	8005842 <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800587e:	2601      	movs	r6, #1
 8005880:	e7e0      	b.n	8005844 <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005882:	6822      	ldr	r2, [r4, #0]
 8005884:	6953      	ldr	r3, [r2, #20]
 8005886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800588a:	6153      	str	r3, [r2, #20]
 800588c:	e7d1      	b.n	8005832 <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800588e:	3301      	adds	r3, #1
 8005890:	7922      	ldrb	r2, [r4, #4]
 8005892:	429a      	cmp	r2, r3
 8005894:	d928      	bls.n	80058e8 <HAL_PCD_IRQHandler+0x56e>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005896:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800589a:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800589e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80058a2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80058a6:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 80058aa:	2a01      	cmp	r2, #1
 80058ac:	d1ef      	bne.n	800588e <HAL_PCD_IRQHandler+0x514>
 80058ae:	2900      	cmp	r1, #0
 80058b0:	daed      	bge.n	800588e <HAL_PCD_IRQHandler+0x514>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80058b2:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 80058b6:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 80058ba:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058be:	4291      	cmp	r1, r2
 80058c0:	d1e5      	bne.n	800588e <HAL_PCD_IRQHandler+0x514>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80058c2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80058c6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80058ca:	2101      	movs	r1, #1
 80058cc:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80058d0:	69aa      	ldr	r2, [r5, #24]
 80058d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058d6:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80058d8:	696a      	ldr	r2, [r5, #20]
 80058da:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80058de:	d1d6      	bne.n	800588e <HAL_PCD_IRQHandler+0x514>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058e6:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058e8:	6822      	ldr	r2, [r4, #0]
 80058ea:	6953      	ldr	r3, [r2, #20]
 80058ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058f0:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058f2:	6820      	ldr	r0, [r4, #0]
 80058f4:	f001 feba 	bl	800766c <USB_ReadInterrupts>
 80058f8:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 80058fc:	d110      	bne.n	8005920 <HAL_PCD_IRQHandler+0x5a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80058fe:	6820      	ldr	r0, [r4, #0]
 8005900:	f001 feb4 	bl	800766c <USB_ReadInterrupts>
 8005904:	f010 0f04 	tst.w	r0, #4
 8005908:	f43f ad40 	beq.w	800538c <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005910:	f015 0f04 	tst.w	r5, #4
 8005914:	d10d      	bne.n	8005932 <HAL_PCD_IRQHandler+0x5b8>
      hpcd->Instance->GOTGINT |= RegVal;
 8005916:	6822      	ldr	r2, [r4, #0]
 8005918:	6853      	ldr	r3, [r2, #4]
 800591a:	432b      	orrs	r3, r5
 800591c:	6053      	str	r3, [r2, #4]
 800591e:	e535      	b.n	800538c <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8005920:	4620      	mov	r0, r4
 8005922:	f004 f8a7 	bl	8009a74 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005926:	6822      	ldr	r2, [r4, #0]
 8005928:	6953      	ldr	r3, [r2, #20]
 800592a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800592e:	6153      	str	r3, [r2, #20]
 8005930:	e7e5      	b.n	80058fe <HAL_PCD_IRQHandler+0x584>
        HAL_PCD_DisconnectCallback(hpcd);
 8005932:	4620      	mov	r0, r4
 8005934:	f004 f8a4 	bl	8009a80 <HAL_PCD_DisconnectCallback>
 8005938:	e7ed      	b.n	8005916 <HAL_PCD_IRQHandler+0x59c>

0800593a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800593a:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800593c:	6804      	ldr	r4, [r0, #0]
 800593e:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8005940:	b931      	cbnz	r1, 8005950 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005942:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8005946:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8005948:	2000      	movs	r0, #0
 800594a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005952:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005954:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8005958:	2300      	movs	r3, #0
 800595a:	e008      	b.n	800596e <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800595c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8005960:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005964:	6849      	ldr	r1, [r1, #4]
 8005966:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800596a:	3301      	adds	r3, #1
 800596c:	b2db      	uxtb	r3, r3
 800596e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005972:	428b      	cmp	r3, r1
 8005974:	d3f2      	bcc.n	800595c <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005976:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800597a:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 800597e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8005982:	6060      	str	r0, [r4, #4]
 8005984:	e7e0      	b.n	8005948 <HAL_PCDEx_SetTxFiFo+0xe>

08005986 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8005986:	6803      	ldr	r3, [r0, #0]
 8005988:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 800598a:	2000      	movs	r0, #0
 800598c:	4770      	bx	lr

0800598e <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800598e:	4770      	bx	lr

08005990 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005990:	2800      	cmp	r0, #0
 8005992:	f000 81e0 	beq.w	8005d56 <HAL_RCC_OscConfig+0x3c6>
{
 8005996:	b570      	push	{r4, r5, r6, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800599c:	6803      	ldr	r3, [r0, #0]
 800599e:	f013 0f01 	tst.w	r3, #1
 80059a2:	d03b      	beq.n	8005a1c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80059a4:	4b9f      	ldr	r3, [pc, #636]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f003 030c 	and.w	r3, r3, #12
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d02c      	beq.n	8005a0a <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059b0:	4b9c      	ldr	r3, [pc, #624]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d021      	beq.n	8005a00 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059bc:	6863      	ldr	r3, [r4, #4]
 80059be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059c2:	d04f      	beq.n	8005a64 <HAL_RCC_OscConfig+0xd4>
 80059c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059c8:	d052      	beq.n	8005a70 <HAL_RCC_OscConfig+0xe0>
 80059ca:	4b96      	ldr	r3, [pc, #600]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80059da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059dc:	6863      	ldr	r3, [r4, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d050      	beq.n	8005a84 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e2:	f7fe f96d 	bl	8003cc0 <HAL_GetTick>
 80059e6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e8:	4b8e      	ldr	r3, [pc, #568]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80059f0:	d114      	bne.n	8005a1c <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f2:	f7fe f965 	bl	8003cc0 <HAL_GetTick>
 80059f6:	1b40      	subs	r0, r0, r5
 80059f8:	2864      	cmp	r0, #100	@ 0x64
 80059fa:	d9f5      	bls.n	80059e8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80059fc:	2003      	movs	r0, #3
 80059fe:	e1b1      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a00:	4b88      	ldr	r3, [pc, #544]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8005a08:	d0d8      	beq.n	80059bc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a0a:	4b86      	ldr	r3, [pc, #536]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005a12:	d003      	beq.n	8005a1c <HAL_RCC_OscConfig+0x8c>
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 819f 	beq.w	8005d5a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	f013 0f02 	tst.w	r3, #2
 8005a22:	d054      	beq.n	8005ace <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a24:	4b7f      	ldr	r3, [pc, #508]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f013 0f0c 	tst.w	r3, #12
 8005a2c:	d03e      	beq.n	8005aac <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a2e:	4b7d      	ldr	r3, [pc, #500]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d033      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a3a:	68e3      	ldr	r3, [r4, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d068      	beq.n	8005b12 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a40:	4b79      	ldr	r3, [pc, #484]	@ (8005c28 <HAL_RCC_OscConfig+0x298>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a46:	f7fe f93b 	bl	8003cc0 <HAL_GetTick>
 8005a4a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4c:	4b75      	ldr	r3, [pc, #468]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f013 0f02 	tst.w	r3, #2
 8005a54:	d154      	bne.n	8005b00 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a56:	f7fe f933 	bl	8003cc0 <HAL_GetTick>
 8005a5a:	1b40      	subs	r0, r0, r5
 8005a5c:	2802      	cmp	r0, #2
 8005a5e:	d9f5      	bls.n	8005a4c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8005a60:	2003      	movs	r0, #3
 8005a62:	e17f      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a64:	4a6f      	ldr	r2, [pc, #444]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005a66:	6813      	ldr	r3, [r2, #0]
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	e7b5      	b.n	80059dc <HAL_RCC_OscConfig+0x4c>
 8005a70:	4b6c      	ldr	r3, [pc, #432]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	e7ab      	b.n	80059dc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8005a84:	f7fe f91c 	bl	8003cc0 <HAL_GetTick>
 8005a88:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a8a:	4b66      	ldr	r3, [pc, #408]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005a92:	d0c3      	beq.n	8005a1c <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a94:	f7fe f914 	bl	8003cc0 <HAL_GetTick>
 8005a98:	1b40      	subs	r0, r0, r5
 8005a9a:	2864      	cmp	r0, #100	@ 0x64
 8005a9c:	d9f5      	bls.n	8005a8a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8005a9e:	2003      	movs	r0, #3
 8005aa0:	e160      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aa2:	4b60      	ldr	r3, [pc, #384]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8005aaa:	d1c6      	bne.n	8005a3a <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aac:	4b5d      	ldr	r3, [pc, #372]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f013 0f02 	tst.w	r3, #2
 8005ab4:	d003      	beq.n	8005abe <HAL_RCC_OscConfig+0x12e>
 8005ab6:	68e3      	ldr	r3, [r4, #12]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	f040 8150 	bne.w	8005d5e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005abe:	4a59      	ldr	r2, [pc, #356]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005ac0:	6813      	ldr	r3, [r2, #0]
 8005ac2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005ac6:	6921      	ldr	r1, [r4, #16]
 8005ac8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005acc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	f013 0f08 	tst.w	r3, #8
 8005ad4:	d042      	beq.n	8005b5c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ad6:	6963      	ldr	r3, [r4, #20]
 8005ad8:	b36b      	cbz	r3, 8005b36 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ada:	4b53      	ldr	r3, [pc, #332]	@ (8005c28 <HAL_RCC_OscConfig+0x298>)
 8005adc:	2201      	movs	r2, #1
 8005ade:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae2:	f7fe f8ed 	bl	8003cc0 <HAL_GetTick>
 8005ae6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aec:	f013 0f02 	tst.w	r3, #2
 8005af0:	d134      	bne.n	8005b5c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005af2:	f7fe f8e5 	bl	8003cc0 <HAL_GetTick>
 8005af6:	1b40      	subs	r0, r0, r5
 8005af8:	2802      	cmp	r0, #2
 8005afa:	d9f5      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8005afc:	2003      	movs	r0, #3
 8005afe:	e131      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b00:	4a48      	ldr	r2, [pc, #288]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005b02:	6813      	ldr	r3, [r2, #0]
 8005b04:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b08:	6921      	ldr	r1, [r4, #16]
 8005b0a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	e7dd      	b.n	8005ace <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8005b12:	4b45      	ldr	r3, [pc, #276]	@ (8005c28 <HAL_RCC_OscConfig+0x298>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005b18:	f7fe f8d2 	bl	8003cc0 <HAL_GetTick>
 8005b1c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b1e:	4b41      	ldr	r3, [pc, #260]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f013 0f02 	tst.w	r3, #2
 8005b26:	d0d2      	beq.n	8005ace <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b28:	f7fe f8ca 	bl	8003cc0 <HAL_GetTick>
 8005b2c:	1b40      	subs	r0, r0, r5
 8005b2e:	2802      	cmp	r0, #2
 8005b30:	d9f5      	bls.n	8005b1e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8005b32:	2003      	movs	r0, #3
 8005b34:	e116      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b36:	4b3c      	ldr	r3, [pc, #240]	@ (8005c28 <HAL_RCC_OscConfig+0x298>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b3e:	f7fe f8bf 	bl	8003cc0 <HAL_GetTick>
 8005b42:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b44:	4b37      	ldr	r3, [pc, #220]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b48:	f013 0f02 	tst.w	r3, #2
 8005b4c:	d006      	beq.n	8005b5c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b4e:	f7fe f8b7 	bl	8003cc0 <HAL_GetTick>
 8005b52:	1b40      	subs	r0, r0, r5
 8005b54:	2802      	cmp	r0, #2
 8005b56:	d9f5      	bls.n	8005b44 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8005b58:	2003      	movs	r0, #3
 8005b5a:	e103      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	f013 0f04 	tst.w	r3, #4
 8005b62:	d077      	beq.n	8005c54 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b64:	4b2f      	ldr	r3, [pc, #188]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b68:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8005b6c:	d133      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b6e:	2300      	movs	r3, #0
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	4b2c      	ldr	r3, [pc, #176]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005b74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b76:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005b7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b82:	9301      	str	r3, [sp, #4]
 8005b84:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005b86:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b88:	4b28      	ldr	r3, [pc, #160]	@ (8005c2c <HAL_RCC_OscConfig+0x29c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005b90:	d023      	beq.n	8005bda <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b92:	68a3      	ldr	r3, [r4, #8]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d034      	beq.n	8005c02 <HAL_RCC_OscConfig+0x272>
 8005b98:	2b05      	cmp	r3, #5
 8005b9a:	d038      	beq.n	8005c0e <HAL_RCC_OscConfig+0x27e>
 8005b9c:	4b21      	ldr	r3, [pc, #132]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005b9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ba0:	f022 0201 	bic.w	r2, r2, #1
 8005ba4:	671a      	str	r2, [r3, #112]	@ 0x70
 8005ba6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ba8:	f022 0204 	bic.w	r2, r2, #4
 8005bac:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bae:	68a3      	ldr	r3, [r4, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d03d      	beq.n	8005c30 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb4:	f7fe f884 	bl	8003cc0 <HAL_GetTick>
 8005bb8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bba:	4b1a      	ldr	r3, [pc, #104]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bbe:	f013 0f02 	tst.w	r3, #2
 8005bc2:	d146      	bne.n	8005c52 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc4:	f7fe f87c 	bl	8003cc0 <HAL_GetTick>
 8005bc8:	1b80      	subs	r0, r0, r6
 8005bca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005bce:	4298      	cmp	r0, r3
 8005bd0:	d9f3      	bls.n	8005bba <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8005bd2:	2003      	movs	r0, #3
 8005bd4:	e0c6      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8005bd6:	2500      	movs	r5, #0
 8005bd8:	e7d6      	b.n	8005b88 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bda:	4a14      	ldr	r2, [pc, #80]	@ (8005c2c <HAL_RCC_OscConfig+0x29c>)
 8005bdc:	6813      	ldr	r3, [r2, #0]
 8005bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005be2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005be4:	f7fe f86c 	bl	8003cc0 <HAL_GetTick>
 8005be8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bea:	4b10      	ldr	r3, [pc, #64]	@ (8005c2c <HAL_RCC_OscConfig+0x29c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005bf2:	d1ce      	bne.n	8005b92 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf4:	f7fe f864 	bl	8003cc0 <HAL_GetTick>
 8005bf8:	1b80      	subs	r0, r0, r6
 8005bfa:	2802      	cmp	r0, #2
 8005bfc:	d9f5      	bls.n	8005bea <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8005bfe:	2003      	movs	r0, #3
 8005c00:	e0b0      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c02:	4a08      	ldr	r2, [pc, #32]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005c04:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8005c06:	f043 0301 	orr.w	r3, r3, #1
 8005c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c0c:	e7cf      	b.n	8005bae <HAL_RCC_OscConfig+0x21e>
 8005c0e:	4b05      	ldr	r3, [pc, #20]	@ (8005c24 <HAL_RCC_OscConfig+0x294>)
 8005c10:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c12:	f042 0204 	orr.w	r2, r2, #4
 8005c16:	671a      	str	r2, [r3, #112]	@ 0x70
 8005c18:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c1a:	f042 0201 	orr.w	r2, r2, #1
 8005c1e:	671a      	str	r2, [r3, #112]	@ 0x70
 8005c20:	e7c5      	b.n	8005bae <HAL_RCC_OscConfig+0x21e>
 8005c22:	bf00      	nop
 8005c24:	40023800 	.word	0x40023800
 8005c28:	42470000 	.word	0x42470000
 8005c2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c30:	f7fe f846 	bl	8003cc0 <HAL_GetTick>
 8005c34:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c36:	4b52      	ldr	r3, [pc, #328]	@ (8005d80 <HAL_RCC_OscConfig+0x3f0>)
 8005c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3a:	f013 0f02 	tst.w	r3, #2
 8005c3e:	d008      	beq.n	8005c52 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c40:	f7fe f83e 	bl	8003cc0 <HAL_GetTick>
 8005c44:	1b80      	subs	r0, r0, r6
 8005c46:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005c4a:	4298      	cmp	r0, r3
 8005c4c:	d9f3      	bls.n	8005c36 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8005c4e:	2003      	movs	r0, #3
 8005c50:	e088      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c52:	b9ed      	cbnz	r5, 8005c90 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c54:	69a3      	ldr	r3, [r4, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 8083 	beq.w	8005d62 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c5c:	4a48      	ldr	r2, [pc, #288]	@ (8005d80 <HAL_RCC_OscConfig+0x3f0>)
 8005c5e:	6892      	ldr	r2, [r2, #8]
 8005c60:	f002 020c 	and.w	r2, r2, #12
 8005c64:	2a08      	cmp	r2, #8
 8005c66:	d051      	beq.n	8005d0c <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d017      	beq.n	8005c9c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6c:	4b45      	ldr	r3, [pc, #276]	@ (8005d84 <HAL_RCC_OscConfig+0x3f4>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c72:	f7fe f825 	bl	8003cc0 <HAL_GetTick>
 8005c76:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c78:	4b41      	ldr	r3, [pc, #260]	@ (8005d80 <HAL_RCC_OscConfig+0x3f0>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005c80:	d042      	beq.n	8005d08 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c82:	f7fe f81d 	bl	8003cc0 <HAL_GetTick>
 8005c86:	1b00      	subs	r0, r0, r4
 8005c88:	2802      	cmp	r0, #2
 8005c8a:	d9f5      	bls.n	8005c78 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005c8c:	2003      	movs	r0, #3
 8005c8e:	e069      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c90:	4a3b      	ldr	r2, [pc, #236]	@ (8005d80 <HAL_RCC_OscConfig+0x3f0>)
 8005c92:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005c94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c9a:	e7db      	b.n	8005c54 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8005c9c:	4b39      	ldr	r3, [pc, #228]	@ (8005d84 <HAL_RCC_OscConfig+0x3f4>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005ca2:	f7fe f80d 	bl	8003cc0 <HAL_GetTick>
 8005ca6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ca8:	4b35      	ldr	r3, [pc, #212]	@ (8005d80 <HAL_RCC_OscConfig+0x3f0>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005cb0:	d006      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb2:	f7fe f805 	bl	8003cc0 <HAL_GetTick>
 8005cb6:	1b40      	subs	r0, r0, r5
 8005cb8:	2802      	cmp	r0, #2
 8005cba:	d9f5      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8005cbc:	2003      	movs	r0, #3
 8005cbe:	e051      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cc0:	69e3      	ldr	r3, [r4, #28]
 8005cc2:	6a22      	ldr	r2, [r4, #32]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005cc8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005ccc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005cce:	0852      	lsrs	r2, r2, #1
 8005cd0:	3a01      	subs	r2, #1
 8005cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cd6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005cd8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005cdc:	4a28      	ldr	r2, [pc, #160]	@ (8005d80 <HAL_RCC_OscConfig+0x3f0>)
 8005cde:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8005ce0:	4b28      	ldr	r3, [pc, #160]	@ (8005d84 <HAL_RCC_OscConfig+0x3f4>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005ce6:	f7fd ffeb 	bl	8003cc0 <HAL_GetTick>
 8005cea:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cec:	4b24      	ldr	r3, [pc, #144]	@ (8005d80 <HAL_RCC_OscConfig+0x3f0>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005cf4:	d106      	bne.n	8005d04 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf6:	f7fd ffe3 	bl	8003cc0 <HAL_GetTick>
 8005cfa:	1b00      	subs	r0, r0, r4
 8005cfc:	2802      	cmp	r0, #2
 8005cfe:	d9f5      	bls.n	8005cec <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8005d00:	2003      	movs	r0, #3
 8005d02:	e02f      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005d04:	2000      	movs	r0, #0
 8005d06:	e02d      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
 8005d08:	2000      	movs	r0, #0
 8005d0a:	e02b      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d02b      	beq.n	8005d68 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8005d10:	4b1b      	ldr	r3, [pc, #108]	@ (8005d80 <HAL_RCC_OscConfig+0x3f0>)
 8005d12:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d14:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8005d18:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d1a:	4291      	cmp	r1, r2
 8005d1c:	d126      	bne.n	8005d6c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d22:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d24:	428a      	cmp	r2, r1
 8005d26:	d123      	bne.n	8005d70 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d28:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d2a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005d2e:	401a      	ands	r2, r3
 8005d30:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005d34:	d11e      	bne.n	8005d74 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d36:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8005d3a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005d3c:	0852      	lsrs	r2, r2, #1
 8005d3e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d40:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005d44:	d118      	bne.n	8005d78 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d46:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8005d4a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d4c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005d50:	d114      	bne.n	8005d7c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8005d52:	2000      	movs	r0, #0
 8005d54:	e006      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8005d56:	2001      	movs	r0, #1
}
 8005d58:	4770      	bx	lr
        return HAL_ERROR;
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	e002      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8005d5e:	2001      	movs	r0, #1
 8005d60:	e000      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8005d62:	2000      	movs	r0, #0
}
 8005d64:	b002      	add	sp, #8
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005d68:	2001      	movs	r0, #1
 8005d6a:	e7fb      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	e7f9      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
 8005d70:	2001      	movs	r0, #1
 8005d72:	e7f7      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
 8005d74:	2001      	movs	r0, #1
 8005d76:	e7f5      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
 8005d78:	2001      	movs	r0, #1
 8005d7a:	e7f3      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	e7f1      	b.n	8005d64 <HAL_RCC_OscConfig+0x3d4>
 8005d80:	40023800 	.word	0x40023800
 8005d84:	42470000 	.word	0x42470000

08005d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d88:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d8a:	4b26      	ldr	r3, [pc, #152]	@ (8005e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 030c 	and.w	r3, r3, #12
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d041      	beq.n	8005e1a <HAL_RCC_GetSysClockFreq+0x92>
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d141      	bne.n	8005e1e <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d9a:	4b22      	ldr	r3, [pc, #136]	@ (8005e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8005da8:	d012      	beq.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005daa:	4b1e      	ldr	r3, [pc, #120]	@ (8005e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005dac:	6859      	ldr	r1, [r3, #4]
 8005dae:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005db2:	481d      	ldr	r0, [pc, #116]	@ (8005e28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005db4:	2300      	movs	r3, #0
 8005db6:	fba1 0100 	umull	r0, r1, r1, r0
 8005dba:	f7fa fe37 	bl	8000a2c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005dbe:	4b19      	ldr	r3, [pc, #100]	@ (8005e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8005dca:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005dce:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dd0:	4b14      	ldr	r3, [pc, #80]	@ (8005e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005dd2:	6858      	ldr	r0, [r3, #4]
 8005dd4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005dd8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8005ddc:	ebbc 0c00 	subs.w	ip, ip, r0
 8005de0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8005de4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8005de8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8005dec:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8005df0:	ebb1 010c 	subs.w	r1, r1, ip
 8005df4:	eb63 030e 	sbc.w	r3, r3, lr
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dfe:	00c9      	lsls	r1, r1, #3
 8005e00:	eb11 0c00 	adds.w	ip, r1, r0
 8005e04:	f143 0300 	adc.w	r3, r3, #0
 8005e08:	0299      	lsls	r1, r3, #10
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8005e10:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8005e14:	f7fa fe0a 	bl	8000a2c <__aeabi_uldivmod>
 8005e18:	e7d1      	b.n	8005dbe <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8005e1a:	4803      	ldr	r0, [pc, #12]	@ (8005e28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e1c:	e7d7      	b.n	8005dce <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e1e:	4803      	ldr	r0, [pc, #12]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8005e20:	e7d5      	b.n	8005dce <HAL_RCC_GetSysClockFreq+0x46>
 8005e22:	bf00      	nop
 8005e24:	40023800 	.word	0x40023800
 8005e28:	017d7840 	.word	0x017d7840
 8005e2c:	00f42400 	.word	0x00f42400

08005e30 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005e30:	2800      	cmp	r0, #0
 8005e32:	f000 809b 	beq.w	8005f6c <HAL_RCC_ClockConfig+0x13c>
{
 8005e36:	b570      	push	{r4, r5, r6, lr}
 8005e38:	460d      	mov	r5, r1
 8005e3a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8005f7c <HAL_RCC_ClockConfig+0x14c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	428b      	cmp	r3, r1
 8005e46:	d208      	bcs.n	8005e5a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e48:	b2cb      	uxtb	r3, r1
 8005e4a:	4a4c      	ldr	r2, [pc, #304]	@ (8005f7c <HAL_RCC_ClockConfig+0x14c>)
 8005e4c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e4e:	6813      	ldr	r3, [r2, #0]
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	428b      	cmp	r3, r1
 8005e56:	f040 808b 	bne.w	8005f70 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	f013 0f02 	tst.w	r3, #2
 8005e60:	d017      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e62:	f013 0f04 	tst.w	r3, #4
 8005e66:	d004      	beq.n	8005e72 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e68:	4a45      	ldr	r2, [pc, #276]	@ (8005f80 <HAL_RCC_ClockConfig+0x150>)
 8005e6a:	6893      	ldr	r3, [r2, #8]
 8005e6c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e70:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	f013 0f08 	tst.w	r3, #8
 8005e78:	d004      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e7a:	4a41      	ldr	r2, [pc, #260]	@ (8005f80 <HAL_RCC_ClockConfig+0x150>)
 8005e7c:	6893      	ldr	r3, [r2, #8]
 8005e7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e82:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e84:	4a3e      	ldr	r2, [pc, #248]	@ (8005f80 <HAL_RCC_ClockConfig+0x150>)
 8005e86:	6893      	ldr	r3, [r2, #8]
 8005e88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e8c:	68a1      	ldr	r1, [r4, #8]
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	f013 0f01 	tst.w	r3, #1
 8005e98:	d032      	beq.n	8005f00 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e9a:	6863      	ldr	r3, [r4, #4]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d021      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ea0:	1e9a      	subs	r2, r3, #2
 8005ea2:	2a01      	cmp	r2, #1
 8005ea4:	d925      	bls.n	8005ef2 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ea6:	4a36      	ldr	r2, [pc, #216]	@ (8005f80 <HAL_RCC_ClockConfig+0x150>)
 8005ea8:	6812      	ldr	r2, [r2, #0]
 8005eaa:	f012 0f02 	tst.w	r2, #2
 8005eae:	d061      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eb0:	4933      	ldr	r1, [pc, #204]	@ (8005f80 <HAL_RCC_ClockConfig+0x150>)
 8005eb2:	688a      	ldr	r2, [r1, #8]
 8005eb4:	f022 0203 	bic.w	r2, r2, #3
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005ebc:	f7fd ff00 	bl	8003cc0 <HAL_GetTick>
 8005ec0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8005f80 <HAL_RCC_ClockConfig+0x150>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f003 030c 	and.w	r3, r3, #12
 8005eca:	6862      	ldr	r2, [r4, #4]
 8005ecc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005ed0:	d016      	beq.n	8005f00 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed2:	f7fd fef5 	bl	8003cc0 <HAL_GetTick>
 8005ed6:	1b80      	subs	r0, r0, r6
 8005ed8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005edc:	4298      	cmp	r0, r3
 8005ede:	d9f0      	bls.n	8005ec2 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8005ee0:	2003      	movs	r0, #3
 8005ee2:	e042      	b.n	8005f6a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee4:	4a26      	ldr	r2, [pc, #152]	@ (8005f80 <HAL_RCC_ClockConfig+0x150>)
 8005ee6:	6812      	ldr	r2, [r2, #0]
 8005ee8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8005eec:	d1e0      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8005eee:	2001      	movs	r0, #1
 8005ef0:	e03b      	b.n	8005f6a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ef2:	4a23      	ldr	r2, [pc, #140]	@ (8005f80 <HAL_RCC_ClockConfig+0x150>)
 8005ef4:	6812      	ldr	r2, [r2, #0]
 8005ef6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8005efa:	d1d9      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8005efc:	2001      	movs	r0, #1
 8005efe:	e034      	b.n	8005f6a <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f00:	4b1e      	ldr	r3, [pc, #120]	@ (8005f7c <HAL_RCC_ClockConfig+0x14c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	42ab      	cmp	r3, r5
 8005f0a:	d907      	bls.n	8005f1c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f0c:	b2ea      	uxtb	r2, r5
 8005f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8005f7c <HAL_RCC_ClockConfig+0x14c>)
 8005f10:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	42ab      	cmp	r3, r5
 8005f1a:	d12d      	bne.n	8005f78 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	f013 0f04 	tst.w	r3, #4
 8005f22:	d006      	beq.n	8005f32 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f24:	4a16      	ldr	r2, [pc, #88]	@ (8005f80 <HAL_RCC_ClockConfig+0x150>)
 8005f26:	6893      	ldr	r3, [r2, #8]
 8005f28:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005f2c:	68e1      	ldr	r1, [r4, #12]
 8005f2e:	430b      	orrs	r3, r1
 8005f30:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	f013 0f08 	tst.w	r3, #8
 8005f38:	d007      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f3a:	4a11      	ldr	r2, [pc, #68]	@ (8005f80 <HAL_RCC_ClockConfig+0x150>)
 8005f3c:	6893      	ldr	r3, [r2, #8]
 8005f3e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005f42:	6921      	ldr	r1, [r4, #16]
 8005f44:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005f48:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f4a:	f7ff ff1d 	bl	8005d88 <HAL_RCC_GetSysClockFreq>
 8005f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f80 <HAL_RCC_ClockConfig+0x150>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005f56:	4a0b      	ldr	r2, [pc, #44]	@ (8005f84 <HAL_RCC_ClockConfig+0x154>)
 8005f58:	5cd3      	ldrb	r3, [r2, r3]
 8005f5a:	40d8      	lsrs	r0, r3
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f88 <HAL_RCC_ClockConfig+0x158>)
 8005f5e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005f60:	4b0a      	ldr	r3, [pc, #40]	@ (8005f8c <HAL_RCC_ClockConfig+0x15c>)
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	f000 fdee 	bl	8006b44 <HAL_InitTick>
  return HAL_OK;
 8005f68:	2000      	movs	r0, #0
}
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005f6c:	2001      	movs	r0, #1
}
 8005f6e:	4770      	bx	lr
      return HAL_ERROR;
 8005f70:	2001      	movs	r0, #1
 8005f72:	e7fa      	b.n	8005f6a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8005f74:	2001      	movs	r0, #1
 8005f76:	e7f8      	b.n	8005f6a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8005f78:	2001      	movs	r0, #1
 8005f7a:	e7f6      	b.n	8005f6a <HAL_RCC_ClockConfig+0x13a>
 8005f7c:	40023c00 	.word	0x40023c00
 8005f80:	40023800 	.word	0x40023800
 8005f84:	0800be58 	.word	0x0800be58
 8005f88:	20000054 	.word	0x20000054
 8005f8c:	20000050 	.word	0x20000050

08005f90 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005f90:	4b01      	ldr	r3, [pc, #4]	@ (8005f98 <HAL_RCC_GetHCLKFreq+0x8>)
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	20000054 	.word	0x20000054

08005f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f9c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f9e:	f7ff fff7 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 8005fa2:	4b04      	ldr	r3, [pc, #16]	@ (8005fb4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005faa:	4a03      	ldr	r2, [pc, #12]	@ (8005fb8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005fac:	5cd3      	ldrb	r3, [r2, r3]
}
 8005fae:	40d8      	lsrs	r0, r3
 8005fb0:	bd08      	pop	{r3, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	0800be50 	.word	0x0800be50

08005fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fbc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fbe:	f7ff ffe7 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 8005fc2:	4b04      	ldr	r3, [pc, #16]	@ (8005fd4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005fca:	4a03      	ldr	r2, [pc, #12]	@ (8005fd8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005fcc:	5cd3      	ldrb	r3, [r2, r3]
}
 8005fce:	40d8      	lsrs	r0, r3
 8005fd0:	bd08      	pop	{r3, pc}
 8005fd2:	bf00      	nop
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	0800be50 	.word	0x0800be50

08005fdc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005fdc:	230f      	movs	r3, #15
 8005fde:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8006010 <HAL_RCC_GetClockConfig+0x34>)
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	f002 0203 	and.w	r2, r2, #3
 8005fe8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005ff0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8005ff8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	08db      	lsrs	r3, r3, #3
 8005ffe:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8006002:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006004:	4b03      	ldr	r3, [pc, #12]	@ (8006014 <HAL_RCC_GetClockConfig+0x38>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	600b      	str	r3, [r1, #0]
}
 800600e:	4770      	bx	lr
 8006010:	40023800 	.word	0x40023800
 8006014:	40023c00 	.word	0x40023c00

08006018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006018:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601a:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800601c:	6a03      	ldr	r3, [r0, #32]
 800601e:	f023 0301 	bic.w	r3, r3, #1
 8006022:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006024:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006026:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006028:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800602c:	680c      	ldr	r4, [r1, #0]
 800602e:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006030:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006034:	688b      	ldr	r3, [r1, #8]
 8006036:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006038:	4a0b      	ldr	r2, [pc, #44]	@ (8006068 <TIM_OC1_SetConfig+0x50>)
 800603a:	4290      	cmp	r0, r2
 800603c:	d006      	beq.n	800604c <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800603e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006040:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006042:	684a      	ldr	r2, [r1, #4]
 8006044:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006046:	6203      	str	r3, [r0, #32]
}
 8006048:	bc30      	pop	{r4, r5}
 800604a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 800604c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006050:	68ca      	ldr	r2, [r1, #12]
 8006052:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8006054:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006058:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 800605c:	694a      	ldr	r2, [r1, #20]
 800605e:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8006060:	698d      	ldr	r5, [r1, #24]
 8006062:	4315      	orrs	r5, r2
 8006064:	e7eb      	b.n	800603e <TIM_OC1_SetConfig+0x26>
 8006066:	bf00      	nop
 8006068:	40010000 	.word	0x40010000

0800606c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800606c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006070:	6a02      	ldr	r2, [r0, #32]
 8006072:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006076:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006078:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800607a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800607c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006080:	680d      	ldr	r5, [r1, #0]
 8006082:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006084:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006088:	688a      	ldr	r2, [r1, #8]
 800608a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800608e:	4a0d      	ldr	r2, [pc, #52]	@ (80060c4 <TIM_OC3_SetConfig+0x58>)
 8006090:	4290      	cmp	r0, r2
 8006092:	d006      	beq.n	80060a2 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006094:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006096:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006098:	684a      	ldr	r2, [r1, #4]
 800609a:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800609c:	6203      	str	r3, [r0, #32]
}
 800609e:	bc30      	pop	{r4, r5}
 80060a0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80060a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060a6:	68ca      	ldr	r2, [r1, #12]
 80060a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80060ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060b0:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060b4:	694a      	ldr	r2, [r1, #20]
 80060b6:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ba:	698a      	ldr	r2, [r1, #24]
 80060bc:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 80060c0:	e7e8      	b.n	8006094 <TIM_OC3_SetConfig+0x28>
 80060c2:	bf00      	nop
 80060c4:	40010000 	.word	0x40010000

080060c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060c8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ca:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060cc:	6a02      	ldr	r2, [r0, #32]
 80060ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060d2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060d6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060d8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060dc:	680d      	ldr	r5, [r1, #0]
 80060de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060e6:	688d      	ldr	r5, [r1, #8]
 80060e8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ec:	4d07      	ldr	r5, [pc, #28]	@ (800610c <TIM_OC4_SetConfig+0x44>)
 80060ee:	42a8      	cmp	r0, r5
 80060f0:	d006      	beq.n	8006100 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060f4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060f6:	684a      	ldr	r2, [r1, #4]
 80060f8:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fa:	6203      	str	r3, [r0, #32]
}
 80060fc:	bc30      	pop	{r4, r5}
 80060fe:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006100:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006104:	694d      	ldr	r5, [r1, #20]
 8006106:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800610a:	e7f2      	b.n	80060f2 <TIM_OC4_SetConfig+0x2a>
 800610c:	40010000 	.word	0x40010000

08006110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006110:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006112:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006114:	6a04      	ldr	r4, [r0, #32]
 8006116:	f024 0401 	bic.w	r4, r4, #1
 800611a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800611e:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006122:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006126:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800612a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800612c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800612e:	6203      	str	r3, [r0, #32]
}
 8006130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006134:	4770      	bx	lr

08006136 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006136:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006138:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800613a:	6a04      	ldr	r4, [r0, #32]
 800613c:	f024 0410 	bic.w	r4, r4, #16
 8006140:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006142:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006144:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006148:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800614c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006150:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006154:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006156:	6203      	str	r3, [r0, #32]
}
 8006158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800615c:	4770      	bx	lr

0800615e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800615e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006160:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006164:	430b      	orrs	r3, r1
 8006166:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800616a:	6083      	str	r3, [r0, #8]
}
 800616c:	4770      	bx	lr
	...

08006170 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006170:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006174:	2b01      	cmp	r3, #1
 8006176:	d12a      	bne.n	80061ce <HAL_TIM_Base_Start+0x5e>
  htim->State = HAL_TIM_STATE_BUSY;
 8006178:	2302      	movs	r3, #2
 800617a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800617e:	6803      	ldr	r3, [r0, #0]
 8006180:	4a15      	ldr	r2, [pc, #84]	@ (80061d8 <HAL_TIM_Base_Start+0x68>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d018      	beq.n	80061b8 <HAL_TIM_Base_Start+0x48>
 8006186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800618a:	d015      	beq.n	80061b8 <HAL_TIM_Base_Start+0x48>
 800618c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006190:	4293      	cmp	r3, r2
 8006192:	d011      	beq.n	80061b8 <HAL_TIM_Base_Start+0x48>
 8006194:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006198:	4293      	cmp	r3, r2
 800619a:	d00d      	beq.n	80061b8 <HAL_TIM_Base_Start+0x48>
 800619c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d009      	beq.n	80061b8 <HAL_TIM_Base_Start+0x48>
 80061a4:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d005      	beq.n	80061b8 <HAL_TIM_Base_Start+0x48>
    __HAL_TIM_ENABLE(htim);
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	f042 0201 	orr.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80061b4:	2000      	movs	r0, #0
 80061b6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061be:	2a06      	cmp	r2, #6
 80061c0:	d007      	beq.n	80061d2 <HAL_TIM_Base_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	f042 0201 	orr.w	r2, r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80061ca:	2000      	movs	r0, #0
 80061cc:	4770      	bx	lr
    return HAL_ERROR;
 80061ce:	2001      	movs	r0, #1
 80061d0:	4770      	bx	lr
  return HAL_OK;
 80061d2:	2000      	movs	r0, #0
}
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	40010000 	.word	0x40010000

080061dc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80061dc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d12f      	bne.n	8006244 <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 80061e4:	2302      	movs	r3, #2
 80061e6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061ea:	6802      	ldr	r2, [r0, #0]
 80061ec:	68d3      	ldr	r3, [r2, #12]
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f4:	6803      	ldr	r3, [r0, #0]
 80061f6:	4a15      	ldr	r2, [pc, #84]	@ (800624c <HAL_TIM_Base_Start_IT+0x70>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d018      	beq.n	800622e <HAL_TIM_Base_Start_IT+0x52>
 80061fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006200:	d015      	beq.n	800622e <HAL_TIM_Base_Start_IT+0x52>
 8006202:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006206:	4293      	cmp	r3, r2
 8006208:	d011      	beq.n	800622e <HAL_TIM_Base_Start_IT+0x52>
 800620a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800620e:	4293      	cmp	r3, r2
 8006210:	d00d      	beq.n	800622e <HAL_TIM_Base_Start_IT+0x52>
 8006212:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006216:	4293      	cmp	r3, r2
 8006218:	d009      	beq.n	800622e <HAL_TIM_Base_Start_IT+0x52>
 800621a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800621e:	4293      	cmp	r3, r2
 8006220:	d005      	beq.n	800622e <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	f042 0201 	orr.w	r2, r2, #1
 8006228:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800622a:	2000      	movs	r0, #0
 800622c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006234:	2a06      	cmp	r2, #6
 8006236:	d007      	beq.n	8006248 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006240:	2000      	movs	r0, #0
 8006242:	4770      	bx	lr
    return HAL_ERROR;
 8006244:	2001      	movs	r0, #1
 8006246:	4770      	bx	lr
  return HAL_OK;
 8006248:	2000      	movs	r0, #0
}
 800624a:	4770      	bx	lr
 800624c:	40010000 	.word	0x40010000

08006250 <HAL_TIM_OC_MspInit>:
}
 8006250:	4770      	bx	lr

08006252 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006252:	4770      	bx	lr

08006254 <HAL_TIM_IC_CaptureCallback>:
}
 8006254:	4770      	bx	lr

08006256 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006256:	4770      	bx	lr

08006258 <HAL_TIM_TriggerCallback>:
}
 8006258:	4770      	bx	lr

0800625a <HAL_TIM_IRQHandler>:
{
 800625a:	b570      	push	{r4, r5, r6, lr}
 800625c:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800625e:	6803      	ldr	r3, [r0, #0]
 8006260:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006262:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006264:	f015 0f02 	tst.w	r5, #2
 8006268:	d010      	beq.n	800628c <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800626a:	f016 0f02 	tst.w	r6, #2
 800626e:	d00d      	beq.n	800628c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006270:	f06f 0202 	mvn.w	r2, #2
 8006274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006276:	2301      	movs	r3, #1
 8006278:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800627a:	6803      	ldr	r3, [r0, #0]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f013 0f03 	tst.w	r3, #3
 8006282:	d05e      	beq.n	8006342 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8006284:	f7ff ffe6 	bl	8006254 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006288:	2300      	movs	r3, #0
 800628a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800628c:	f015 0f04 	tst.w	r5, #4
 8006290:	d012      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006292:	f016 0f04 	tst.w	r6, #4
 8006296:	d00f      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	f06f 0204 	mvn.w	r2, #4
 800629e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062a0:	2302      	movs	r3, #2
 80062a2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80062ac:	d04f      	beq.n	800634e <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80062ae:	4620      	mov	r0, r4
 80062b0:	f7ff ffd0 	bl	8006254 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b4:	2300      	movs	r3, #0
 80062b6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062b8:	f015 0f08 	tst.w	r5, #8
 80062bc:	d012      	beq.n	80062e4 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062be:	f016 0f08 	tst.w	r6, #8
 80062c2:	d00f      	beq.n	80062e4 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	f06f 0208 	mvn.w	r2, #8
 80062ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062cc:	2304      	movs	r3, #4
 80062ce:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	f013 0f03 	tst.w	r3, #3
 80062d8:	d040      	beq.n	800635c <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80062da:	4620      	mov	r0, r4
 80062dc:	f7ff ffba 	bl	8006254 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e0:	2300      	movs	r3, #0
 80062e2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062e4:	f015 0f10 	tst.w	r5, #16
 80062e8:	d012      	beq.n	8006310 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062ea:	f016 0f10 	tst.w	r6, #16
 80062ee:	d00f      	beq.n	8006310 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	f06f 0210 	mvn.w	r2, #16
 80062f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062f8:	2308      	movs	r3, #8
 80062fa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	69db      	ldr	r3, [r3, #28]
 8006300:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006304:	d031      	beq.n	800636a <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8006306:	4620      	mov	r0, r4
 8006308:	f7ff ffa4 	bl	8006254 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630c:	2300      	movs	r3, #0
 800630e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006310:	f015 0f01 	tst.w	r5, #1
 8006314:	d002      	beq.n	800631c <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006316:	f016 0f01 	tst.w	r6, #1
 800631a:	d12d      	bne.n	8006378 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800631c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8006320:	d002      	beq.n	8006328 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006322:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8006326:	d12f      	bne.n	8006388 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006328:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800632c:	d002      	beq.n	8006334 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800632e:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8006332:	d131      	bne.n	8006398 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006334:	f015 0f20 	tst.w	r5, #32
 8006338:	d002      	beq.n	8006340 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800633a:	f016 0f20 	tst.w	r6, #32
 800633e:	d133      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x14e>
}
 8006340:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006342:	f7ff ff86 	bl	8006252 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006346:	4620      	mov	r0, r4
 8006348:	f7ff ff85 	bl	8006256 <HAL_TIM_PWM_PulseFinishedCallback>
 800634c:	e79c      	b.n	8006288 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634e:	4620      	mov	r0, r4
 8006350:	f7ff ff7f 	bl	8006252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006354:	4620      	mov	r0, r4
 8006356:	f7ff ff7e 	bl	8006256 <HAL_TIM_PWM_PulseFinishedCallback>
 800635a:	e7ab      	b.n	80062b4 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800635c:	4620      	mov	r0, r4
 800635e:	f7ff ff78 	bl	8006252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006362:	4620      	mov	r0, r4
 8006364:	f7ff ff77 	bl	8006256 <HAL_TIM_PWM_PulseFinishedCallback>
 8006368:	e7ba      	b.n	80062e0 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800636a:	4620      	mov	r0, r4
 800636c:	f7ff ff71 	bl	8006252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006370:	4620      	mov	r0, r4
 8006372:	f7ff ff70 	bl	8006256 <HAL_TIM_PWM_PulseFinishedCallback>
 8006376:	e7c9      	b.n	800630c <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	f06f 0201 	mvn.w	r2, #1
 800637e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006380:	4620      	mov	r0, r4
 8006382:	f7fc fba5 	bl	8002ad0 <HAL_TIM_PeriodElapsedCallback>
 8006386:	e7c9      	b.n	800631c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800638e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006390:	4620      	mov	r0, r4
 8006392:	f000 fbd5 	bl	8006b40 <HAL_TIMEx_BreakCallback>
 8006396:	e7c7      	b.n	8006328 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800639e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80063a0:	4620      	mov	r0, r4
 80063a2:	f7ff ff59 	bl	8006258 <HAL_TIM_TriggerCallback>
 80063a6:	e7c5      	b.n	8006334 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	f06f 0220 	mvn.w	r2, #32
 80063ae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fbc4 	bl	8006b3e <HAL_TIMEx_CommutCallback>
}
 80063b6:	e7c3      	b.n	8006340 <HAL_TIM_IRQHandler+0xe6>

080063b8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80063b8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ba:	4a29      	ldr	r2, [pc, #164]	@ (8006460 <TIM_Base_SetConfig+0xa8>)
 80063bc:	4290      	cmp	r0, r2
 80063be:	d00e      	beq.n	80063de <TIM_Base_SetConfig+0x26>
 80063c0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80063c4:	d00b      	beq.n	80063de <TIM_Base_SetConfig+0x26>
 80063c6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80063ca:	4290      	cmp	r0, r2
 80063cc:	d007      	beq.n	80063de <TIM_Base_SetConfig+0x26>
 80063ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80063d2:	4290      	cmp	r0, r2
 80063d4:	d003      	beq.n	80063de <TIM_Base_SetConfig+0x26>
 80063d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80063da:	4290      	cmp	r0, r2
 80063dc:	d103      	bne.n	80063e6 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80063e2:	684a      	ldr	r2, [r1, #4]
 80063e4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006460 <TIM_Base_SetConfig+0xa8>)
 80063e8:	4290      	cmp	r0, r2
 80063ea:	d01a      	beq.n	8006422 <TIM_Base_SetConfig+0x6a>
 80063ec:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80063f0:	d017      	beq.n	8006422 <TIM_Base_SetConfig+0x6a>
 80063f2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80063f6:	4290      	cmp	r0, r2
 80063f8:	d013      	beq.n	8006422 <TIM_Base_SetConfig+0x6a>
 80063fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80063fe:	4290      	cmp	r0, r2
 8006400:	d00f      	beq.n	8006422 <TIM_Base_SetConfig+0x6a>
 8006402:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006406:	4290      	cmp	r0, r2
 8006408:	d00b      	beq.n	8006422 <TIM_Base_SetConfig+0x6a>
 800640a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800640e:	4290      	cmp	r0, r2
 8006410:	d007      	beq.n	8006422 <TIM_Base_SetConfig+0x6a>
 8006412:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006416:	4290      	cmp	r0, r2
 8006418:	d003      	beq.n	8006422 <TIM_Base_SetConfig+0x6a>
 800641a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800641e:	4290      	cmp	r0, r2
 8006420:	d103      	bne.n	800642a <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006426:	68ca      	ldr	r2, [r1, #12]
 8006428:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800642a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800642e:	694a      	ldr	r2, [r1, #20]
 8006430:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006432:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006434:	688b      	ldr	r3, [r1, #8]
 8006436:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006438:	680b      	ldr	r3, [r1, #0]
 800643a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800643c:	4b08      	ldr	r3, [pc, #32]	@ (8006460 <TIM_Base_SetConfig+0xa8>)
 800643e:	4298      	cmp	r0, r3
 8006440:	d00a      	beq.n	8006458 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8006442:	2301      	movs	r3, #1
 8006444:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006446:	6903      	ldr	r3, [r0, #16]
 8006448:	f013 0f01 	tst.w	r3, #1
 800644c:	d003      	beq.n	8006456 <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800644e:	6903      	ldr	r3, [r0, #16]
 8006450:	f023 0301 	bic.w	r3, r3, #1
 8006454:	6103      	str	r3, [r0, #16]
}
 8006456:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8006458:	690b      	ldr	r3, [r1, #16]
 800645a:	6303      	str	r3, [r0, #48]	@ 0x30
 800645c:	e7f1      	b.n	8006442 <TIM_Base_SetConfig+0x8a>
 800645e:	bf00      	nop
 8006460:	40010000 	.word	0x40010000

08006464 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006464:	b340      	cbz	r0, 80064b8 <HAL_TIM_Base_Init+0x54>
{
 8006466:	b510      	push	{r4, lr}
 8006468:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800646a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800646e:	b1f3      	cbz	r3, 80064ae <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006470:	2302      	movs	r3, #2
 8006472:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006476:	4621      	mov	r1, r4
 8006478:	f851 0b04 	ldr.w	r0, [r1], #4
 800647c:	f7ff ff9c 	bl	80063b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006480:	2301      	movs	r3, #1
 8006482:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006486:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800648a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800648e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006492:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006496:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800649a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800649e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80064a2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80064a6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80064aa:	2000      	movs	r0, #0
}
 80064ac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80064ae:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80064b2:	f002 f8e5 	bl	8008680 <HAL_TIM_Base_MspInit>
 80064b6:	e7db      	b.n	8006470 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80064b8:	2001      	movs	r0, #1
}
 80064ba:	4770      	bx	lr

080064bc <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80064bc:	b340      	cbz	r0, 8006510 <HAL_TIM_OC_Init+0x54>
{
 80064be:	b510      	push	{r4, lr}
 80064c0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80064c2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80064c6:	b1f3      	cbz	r3, 8006506 <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80064c8:	2302      	movs	r3, #2
 80064ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80064ce:	4621      	mov	r1, r4
 80064d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80064d4:	f7ff ff70 	bl	80063b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064d8:	2301      	movs	r3, #1
 80064da:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064de:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80064e2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80064e6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80064ea:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064f6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80064fa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80064fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006502:	2000      	movs	r0, #0
}
 8006504:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006506:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 800650a:	f7ff fea1 	bl	8006250 <HAL_TIM_OC_MspInit>
 800650e:	e7db      	b.n	80064c8 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8006510:	2001      	movs	r0, #1
}
 8006512:	4770      	bx	lr

08006514 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006514:	b340      	cbz	r0, 8006568 <HAL_TIM_PWM_Init+0x54>
{
 8006516:	b510      	push	{r4, lr}
 8006518:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800651a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800651e:	b1f3      	cbz	r3, 800655e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006520:	2302      	movs	r3, #2
 8006522:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006526:	4621      	mov	r1, r4
 8006528:	f851 0b04 	ldr.w	r0, [r1], #4
 800652c:	f7ff ff44 	bl	80063b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006530:	2301      	movs	r3, #1
 8006532:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006536:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800653a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800653e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006542:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006546:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800654a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800654e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006552:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006556:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800655a:	2000      	movs	r0, #0
}
 800655c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800655e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006562:	f002 f859 	bl	8008618 <HAL_TIM_PWM_MspInit>
 8006566:	e7db      	b.n	8006520 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8006568:	2001      	movs	r0, #1
}
 800656a:	4770      	bx	lr

0800656c <TIM_OC2_SetConfig>:
{
 800656c:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800656e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006570:	6a02      	ldr	r2, [r0, #32]
 8006572:	f022 0210 	bic.w	r2, r2, #16
 8006576:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006578:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800657a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800657c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006580:	680d      	ldr	r5, [r1, #0]
 8006582:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006586:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800658a:	688d      	ldr	r5, [r1, #8]
 800658c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006590:	4d0c      	ldr	r5, [pc, #48]	@ (80065c4 <TIM_OC2_SetConfig+0x58>)
 8006592:	42a8      	cmp	r0, r5
 8006594:	d006      	beq.n	80065a4 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8006596:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006598:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800659a:	684a      	ldr	r2, [r1, #4]
 800659c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800659e:	6203      	str	r3, [r0, #32]
}
 80065a0:	bc30      	pop	{r4, r5}
 80065a2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80065a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065a8:	68cd      	ldr	r5, [r1, #12]
 80065aa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80065ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065b2:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065b6:	694d      	ldr	r5, [r1, #20]
 80065b8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065bc:	698d      	ldr	r5, [r1, #24]
 80065be:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80065c2:	e7e8      	b.n	8006596 <TIM_OC2_SetConfig+0x2a>
 80065c4:	40010000 	.word	0x40010000

080065c8 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80065c8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d028      	beq.n	8006622 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 80065d0:	b510      	push	{r4, lr}
 80065d2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80065d4:	2301      	movs	r3, #1
 80065d6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80065da:	2a0c      	cmp	r2, #12
 80065dc:	d81c      	bhi.n	8006618 <HAL_TIM_OC_ConfigChannel+0x50>
 80065de:	e8df f002 	tbb	[pc, r2]
 80065e2:	1b07      	.short	0x1b07
 80065e4:	1b0c1b1b 	.word	0x1b0c1b1b
 80065e8:	1b111b1b 	.word	0x1b111b1b
 80065ec:	1b1b      	.short	0x1b1b
 80065ee:	16          	.byte	0x16
 80065ef:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065f0:	6800      	ldr	r0, [r0, #0]
 80065f2:	f7ff fd11 	bl	8006018 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80065f6:	2000      	movs	r0, #0
      break;
 80065f8:	e00f      	b.n	800661a <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065fa:	6800      	ldr	r0, [r0, #0]
 80065fc:	f7ff ffb6 	bl	800656c <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006600:	2000      	movs	r0, #0
      break;
 8006602:	e00a      	b.n	800661a <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006604:	6800      	ldr	r0, [r0, #0]
 8006606:	f7ff fd31 	bl	800606c <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800660a:	2000      	movs	r0, #0
      break;
 800660c:	e005      	b.n	800661a <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800660e:	6800      	ldr	r0, [r0, #0]
 8006610:	f7ff fd5a 	bl	80060c8 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006614:	2000      	movs	r0, #0
      break;
 8006616:	e000      	b.n	800661a <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 8006618:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800661a:	2300      	movs	r3, #0
 800661c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006620:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8006622:	2002      	movs	r0, #2
}
 8006624:	4770      	bx	lr

08006626 <HAL_TIM_PWM_ConfigChannel>:
{
 8006626:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006628:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d066      	beq.n	80066fe <HAL_TIM_PWM_ConfigChannel+0xd8>
 8006630:	4604      	mov	r4, r0
 8006632:	460d      	mov	r5, r1
 8006634:	2301      	movs	r3, #1
 8006636:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800663a:	2a0c      	cmp	r2, #12
 800663c:	d85a      	bhi.n	80066f4 <HAL_TIM_PWM_ConfigChannel+0xce>
 800663e:	e8df f002 	tbb	[pc, r2]
 8006642:	5907      	.short	0x5907
 8006644:	591b5959 	.word	0x591b5959
 8006648:	59305959 	.word	0x59305959
 800664c:	5959      	.short	0x5959
 800664e:	44          	.byte	0x44
 800664f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006650:	6800      	ldr	r0, [r0, #0]
 8006652:	f7ff fce1 	bl	8006018 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006656:	6822      	ldr	r2, [r4, #0]
 8006658:	6993      	ldr	r3, [r2, #24]
 800665a:	f043 0308 	orr.w	r3, r3, #8
 800665e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006660:	6822      	ldr	r2, [r4, #0]
 8006662:	6993      	ldr	r3, [r2, #24]
 8006664:	f023 0304 	bic.w	r3, r3, #4
 8006668:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800666a:	6822      	ldr	r2, [r4, #0]
 800666c:	6993      	ldr	r3, [r2, #24]
 800666e:	6929      	ldr	r1, [r5, #16]
 8006670:	430b      	orrs	r3, r1
 8006672:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006674:	2000      	movs	r0, #0
      break;
 8006676:	e03e      	b.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006678:	6800      	ldr	r0, [r0, #0]
 800667a:	f7ff ff77 	bl	800656c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800667e:	6822      	ldr	r2, [r4, #0]
 8006680:	6993      	ldr	r3, [r2, #24]
 8006682:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006686:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006688:	6822      	ldr	r2, [r4, #0]
 800668a:	6993      	ldr	r3, [r2, #24]
 800668c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006690:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	6993      	ldr	r3, [r2, #24]
 8006696:	6929      	ldr	r1, [r5, #16]
 8006698:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800669c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800669e:	2000      	movs	r0, #0
      break;
 80066a0:	e029      	b.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066a2:	6800      	ldr	r0, [r0, #0]
 80066a4:	f7ff fce2 	bl	800606c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	69d3      	ldr	r3, [r2, #28]
 80066ac:	f043 0308 	orr.w	r3, r3, #8
 80066b0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066b2:	6822      	ldr	r2, [r4, #0]
 80066b4:	69d3      	ldr	r3, [r2, #28]
 80066b6:	f023 0304 	bic.w	r3, r3, #4
 80066ba:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066bc:	6822      	ldr	r2, [r4, #0]
 80066be:	69d3      	ldr	r3, [r2, #28]
 80066c0:	6929      	ldr	r1, [r5, #16]
 80066c2:	430b      	orrs	r3, r1
 80066c4:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80066c6:	2000      	movs	r0, #0
      break;
 80066c8:	e015      	b.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066ca:	6800      	ldr	r0, [r0, #0]
 80066cc:	f7ff fcfc 	bl	80060c8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066d0:	6822      	ldr	r2, [r4, #0]
 80066d2:	69d3      	ldr	r3, [r2, #28]
 80066d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80066d8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066da:	6822      	ldr	r2, [r4, #0]
 80066dc:	69d3      	ldr	r3, [r2, #28]
 80066de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066e2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066e4:	6822      	ldr	r2, [r4, #0]
 80066e6:	69d3      	ldr	r3, [r2, #28]
 80066e8:	6929      	ldr	r1, [r5, #16]
 80066ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80066ee:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80066f0:	2000      	movs	r0, #0
      break;
 80066f2:	e000      	b.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80066f4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80066f6:	2300      	movs	r3, #0
 80066f8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80066fc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80066fe:	2002      	movs	r0, #2
 8006700:	e7fc      	b.n	80066fc <HAL_TIM_PWM_ConfigChannel+0xd6>

08006702 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006702:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006704:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006706:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800670a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800670e:	430a      	orrs	r2, r1
 8006710:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006714:	6082      	str	r2, [r0, #8]
}
 8006716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800671c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006720:	2b01      	cmp	r3, #1
 8006722:	d078      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0xfa>
{
 8006724:	b510      	push	{r4, lr}
 8006726:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006728:	2301      	movs	r3, #1
 800672a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800672e:	2302      	movs	r3, #2
 8006730:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006734:	6802      	ldr	r2, [r0, #0]
 8006736:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006738:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800673c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8006740:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006742:	680b      	ldr	r3, [r1, #0]
 8006744:	2b60      	cmp	r3, #96	@ 0x60
 8006746:	d04c      	beq.n	80067e2 <HAL_TIM_ConfigClockSource+0xc6>
 8006748:	d823      	bhi.n	8006792 <HAL_TIM_ConfigClockSource+0x76>
 800674a:	2b40      	cmp	r3, #64	@ 0x40
 800674c:	d054      	beq.n	80067f8 <HAL_TIM_ConfigClockSource+0xdc>
 800674e:	d811      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x58>
 8006750:	2b20      	cmp	r3, #32
 8006752:	d003      	beq.n	800675c <HAL_TIM_ConfigClockSource+0x40>
 8006754:	d80a      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x50>
 8006756:	b10b      	cbz	r3, 800675c <HAL_TIM_ConfigClockSource+0x40>
 8006758:	2b10      	cmp	r3, #16
 800675a:	d105      	bne.n	8006768 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800675c:	4619      	mov	r1, r3
 800675e:	6820      	ldr	r0, [r4, #0]
 8006760:	f7ff fcfd 	bl	800615e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006764:	2000      	movs	r0, #0
      break;
 8006766:	e028      	b.n	80067ba <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8006768:	2001      	movs	r0, #1
 800676a:	e026      	b.n	80067ba <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800676c:	2b30      	cmp	r3, #48	@ 0x30
 800676e:	d0f5      	beq.n	800675c <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8006770:	2001      	movs	r0, #1
 8006772:	e022      	b.n	80067ba <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8006774:	2b50      	cmp	r3, #80	@ 0x50
 8006776:	d10a      	bne.n	800678e <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006778:	68ca      	ldr	r2, [r1, #12]
 800677a:	6849      	ldr	r1, [r1, #4]
 800677c:	6800      	ldr	r0, [r0, #0]
 800677e:	f7ff fcc7 	bl	8006110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006782:	2150      	movs	r1, #80	@ 0x50
 8006784:	6820      	ldr	r0, [r4, #0]
 8006786:	f7ff fcea 	bl	800615e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800678a:	2000      	movs	r0, #0
      break;
 800678c:	e015      	b.n	80067ba <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800678e:	2001      	movs	r0, #1
 8006790:	e013      	b.n	80067ba <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006796:	d03a      	beq.n	800680e <HAL_TIM_ConfigClockSource+0xf2>
 8006798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800679c:	d014      	beq.n	80067c8 <HAL_TIM_ConfigClockSource+0xac>
 800679e:	2b70      	cmp	r3, #112	@ 0x70
 80067a0:	d137      	bne.n	8006812 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80067a2:	68cb      	ldr	r3, [r1, #12]
 80067a4:	684a      	ldr	r2, [r1, #4]
 80067a6:	6889      	ldr	r1, [r1, #8]
 80067a8:	6800      	ldr	r0, [r0, #0]
 80067aa:	f7ff ffaa 	bl	8006702 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067ae:	6822      	ldr	r2, [r4, #0]
 80067b0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067b2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80067b6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80067b8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80067ba:	2301      	movs	r3, #1
 80067bc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80067c0:	2300      	movs	r3, #0
 80067c2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80067c6:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80067c8:	68cb      	ldr	r3, [r1, #12]
 80067ca:	684a      	ldr	r2, [r1, #4]
 80067cc:	6889      	ldr	r1, [r1, #8]
 80067ce:	6800      	ldr	r0, [r0, #0]
 80067d0:	f7ff ff97 	bl	8006702 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067d4:	6822      	ldr	r2, [r4, #0]
 80067d6:	6893      	ldr	r3, [r2, #8]
 80067d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067dc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80067de:	2000      	movs	r0, #0
      break;
 80067e0:	e7eb      	b.n	80067ba <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067e2:	68ca      	ldr	r2, [r1, #12]
 80067e4:	6849      	ldr	r1, [r1, #4]
 80067e6:	6800      	ldr	r0, [r0, #0]
 80067e8:	f7ff fca5 	bl	8006136 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067ec:	2160      	movs	r1, #96	@ 0x60
 80067ee:	6820      	ldr	r0, [r4, #0]
 80067f0:	f7ff fcb5 	bl	800615e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80067f4:	2000      	movs	r0, #0
      break;
 80067f6:	e7e0      	b.n	80067ba <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f8:	68ca      	ldr	r2, [r1, #12]
 80067fa:	6849      	ldr	r1, [r1, #4]
 80067fc:	6800      	ldr	r0, [r0, #0]
 80067fe:	f7ff fc87 	bl	8006110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006802:	2140      	movs	r1, #64	@ 0x40
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	f7ff fcaa 	bl	800615e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800680a:	2000      	movs	r0, #0
      break;
 800680c:	e7d5      	b.n	80067ba <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800680e:	2000      	movs	r0, #0
 8006810:	e7d3      	b.n	80067ba <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8006812:	2001      	movs	r0, #1
 8006814:	e7d1      	b.n	80067ba <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8006816:	2002      	movs	r0, #2
}
 8006818:	4770      	bx	lr

0800681a <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800681a:	f001 011f 	and.w	r1, r1, #31
 800681e:	f04f 0c01 	mov.w	ip, #1
 8006822:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006826:	6a03      	ldr	r3, [r0, #32]
 8006828:	ea23 030c 	bic.w	r3, r3, ip
 800682c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800682e:	6a03      	ldr	r3, [r0, #32]
 8006830:	408a      	lsls	r2, r1
 8006832:	4313      	orrs	r3, r2
 8006834:	6203      	str	r3, [r0, #32]
}
 8006836:	4770      	bx	lr

08006838 <HAL_TIM_OC_Start_IT>:
{
 8006838:	b510      	push	{r4, lr}
 800683a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800683c:	4608      	mov	r0, r1
 800683e:	2900      	cmp	r1, #0
 8006840:	d137      	bne.n	80068b2 <HAL_TIM_OC_Start_IT+0x7a>
 8006842:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8006846:	3b01      	subs	r3, #1
 8006848:	bf18      	it	ne
 800684a:	2301      	movne	r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	f040 8095 	bne.w	800697c <HAL_TIM_OC_Start_IT+0x144>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006852:	2800      	cmp	r0, #0
 8006854:	d143      	bne.n	80068de <HAL_TIM_OC_Start_IT+0xa6>
 8006856:	2302      	movs	r3, #2
 8006858:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800685c:	6822      	ldr	r2, [r4, #0]
 800685e:	68d3      	ldr	r3, [r2, #12]
 8006860:	f043 0302 	orr.w	r3, r3, #2
 8006864:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006866:	2201      	movs	r2, #1
 8006868:	4601      	mov	r1, r0
 800686a:	6820      	ldr	r0, [r4, #0]
 800686c:	f7ff ffd5 	bl	800681a <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	4a45      	ldr	r2, [pc, #276]	@ (8006988 <HAL_TIM_OC_Start_IT+0x150>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d071      	beq.n	800695c <HAL_TIM_OC_Start_IT+0x124>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	4a43      	ldr	r2, [pc, #268]	@ (8006988 <HAL_TIM_OC_Start_IT+0x150>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d072      	beq.n	8006966 <HAL_TIM_OC_Start_IT+0x12e>
 8006880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006884:	d06f      	beq.n	8006966 <HAL_TIM_OC_Start_IT+0x12e>
 8006886:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800688a:	4293      	cmp	r3, r2
 800688c:	d06b      	beq.n	8006966 <HAL_TIM_OC_Start_IT+0x12e>
 800688e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006892:	4293      	cmp	r3, r2
 8006894:	d067      	beq.n	8006966 <HAL_TIM_OC_Start_IT+0x12e>
 8006896:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800689a:	4293      	cmp	r3, r2
 800689c:	d063      	beq.n	8006966 <HAL_TIM_OC_Start_IT+0x12e>
 800689e:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d05f      	beq.n	8006966 <HAL_TIM_OC_Start_IT+0x12e>
      __HAL_TIM_ENABLE(htim);
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	f042 0201 	orr.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	2000      	movs	r0, #0
 80068b0:	e065      	b.n	800697e <HAL_TIM_OC_Start_IT+0x146>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068b2:	2904      	cmp	r1, #4
 80068b4:	d007      	beq.n	80068c6 <HAL_TIM_OC_Start_IT+0x8e>
 80068b6:	2908      	cmp	r1, #8
 80068b8:	d00b      	beq.n	80068d2 <HAL_TIM_OC_Start_IT+0x9a>
 80068ba:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80068be:	3b01      	subs	r3, #1
 80068c0:	bf18      	it	ne
 80068c2:	2301      	movne	r3, #1
 80068c4:	e7c2      	b.n	800684c <HAL_TIM_OC_Start_IT+0x14>
 80068c6:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80068ca:	3b01      	subs	r3, #1
 80068cc:	bf18      	it	ne
 80068ce:	2301      	movne	r3, #1
 80068d0:	e7bc      	b.n	800684c <HAL_TIM_OC_Start_IT+0x14>
 80068d2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80068d6:	3b01      	subs	r3, #1
 80068d8:	bf18      	it	ne
 80068da:	2301      	movne	r3, #1
 80068dc:	e7b6      	b.n	800684c <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068de:	2804      	cmp	r0, #4
 80068e0:	d024      	beq.n	800692c <HAL_TIM_OC_Start_IT+0xf4>
 80068e2:	2808      	cmp	r0, #8
 80068e4:	d02b      	beq.n	800693e <HAL_TIM_OC_Start_IT+0x106>
 80068e6:	2302      	movs	r3, #2
 80068e8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  switch (Channel)
 80068ec:	280c      	cmp	r0, #12
 80068ee:	d847      	bhi.n	8006980 <HAL_TIM_OC_Start_IT+0x148>
 80068f0:	a301      	add	r3, pc, #4	@ (adr r3, 80068f8 <HAL_TIM_OC_Start_IT+0xc0>)
 80068f2:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	0800685d 	.word	0x0800685d
 80068fc:	08006981 	.word	0x08006981
 8006900:	08006981 	.word	0x08006981
 8006904:	08006981 	.word	0x08006981
 8006908:	08006933 	.word	0x08006933
 800690c:	08006981 	.word	0x08006981
 8006910:	08006981 	.word	0x08006981
 8006914:	08006981 	.word	0x08006981
 8006918:	08006945 	.word	0x08006945
 800691c:	08006981 	.word	0x08006981
 8006920:	08006981 	.word	0x08006981
 8006924:	08006981 	.word	0x08006981
 8006928:	08006951 	.word	0x08006951
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800692c:	2302      	movs	r3, #2
 800692e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006932:	6822      	ldr	r2, [r4, #0]
 8006934:	68d3      	ldr	r3, [r2, #12]
 8006936:	f043 0304 	orr.w	r3, r3, #4
 800693a:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800693c:	e793      	b.n	8006866 <HAL_TIM_OC_Start_IT+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800693e:	2302      	movs	r3, #2
 8006940:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006944:	6822      	ldr	r2, [r4, #0]
 8006946:	68d3      	ldr	r3, [r2, #12]
 8006948:	f043 0308 	orr.w	r3, r3, #8
 800694c:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800694e:	e78a      	b.n	8006866 <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006950:	6822      	ldr	r2, [r4, #0]
 8006952:	68d3      	ldr	r3, [r2, #12]
 8006954:	f043 0310 	orr.w	r3, r3, #16
 8006958:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800695a:	e784      	b.n	8006866 <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_MOE_ENABLE(htim);
 800695c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800695e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006962:	645a      	str	r2, [r3, #68]	@ 0x44
 8006964:	e788      	b.n	8006878 <HAL_TIM_OC_Start_IT+0x40>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696c:	2a06      	cmp	r2, #6
 800696e:	d009      	beq.n	8006984 <HAL_TIM_OC_Start_IT+0x14c>
        __HAL_TIM_ENABLE(htim);
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	f042 0201 	orr.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]
 8006978:	2000      	movs	r0, #0
 800697a:	e000      	b.n	800697e <HAL_TIM_OC_Start_IT+0x146>
    return HAL_ERROR;
 800697c:	2001      	movs	r0, #1
}
 800697e:	bd10      	pop	{r4, pc}
  switch (Channel)
 8006980:	2001      	movs	r0, #1
 8006982:	e7fc      	b.n	800697e <HAL_TIM_OC_Start_IT+0x146>
 8006984:	2000      	movs	r0, #0
 8006986:	e7fa      	b.n	800697e <HAL_TIM_OC_Start_IT+0x146>
 8006988:	40010000 	.word	0x40010000

0800698c <HAL_TIM_PWM_Start>:
{
 800698c:	b510      	push	{r4, lr}
 800698e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006990:	4608      	mov	r0, r1
 8006992:	bb89      	cbnz	r1, 80069f8 <HAL_TIM_PWM_Start+0x6c>
 8006994:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8006998:	3b01      	subs	r3, #1
 800699a:	bf18      	it	ne
 800699c:	2301      	movne	r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d160      	bne.n	8006a64 <HAL_TIM_PWM_Start+0xd8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d13e      	bne.n	8006a24 <HAL_TIM_PWM_Start+0x98>
 80069a6:	2302      	movs	r3, #2
 80069a8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069ac:	2201      	movs	r2, #1
 80069ae:	4601      	mov	r1, r0
 80069b0:	6820      	ldr	r0, [r4, #0]
 80069b2:	f7ff ff32 	bl	800681a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	4a2c      	ldr	r2, [pc, #176]	@ (8006a6c <HAL_TIM_PWM_Start+0xe0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d042      	beq.n	8006a44 <HAL_TIM_PWM_Start+0xb8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	4a2a      	ldr	r2, [pc, #168]	@ (8006a6c <HAL_TIM_PWM_Start+0xe0>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d043      	beq.n	8006a4e <HAL_TIM_PWM_Start+0xc2>
 80069c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ca:	d040      	beq.n	8006a4e <HAL_TIM_PWM_Start+0xc2>
 80069cc:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d03c      	beq.n	8006a4e <HAL_TIM_PWM_Start+0xc2>
 80069d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80069d8:	4293      	cmp	r3, r2
 80069da:	d038      	beq.n	8006a4e <HAL_TIM_PWM_Start+0xc2>
 80069dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d034      	beq.n	8006a4e <HAL_TIM_PWM_Start+0xc2>
 80069e4:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d030      	beq.n	8006a4e <HAL_TIM_PWM_Start+0xc2>
    __HAL_TIM_ENABLE(htim);
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	f042 0201 	orr.w	r2, r2, #1
 80069f2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80069f4:	2000      	movs	r0, #0
 80069f6:	e034      	b.n	8006a62 <HAL_TIM_PWM_Start+0xd6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069f8:	2904      	cmp	r1, #4
 80069fa:	d007      	beq.n	8006a0c <HAL_TIM_PWM_Start+0x80>
 80069fc:	2908      	cmp	r1, #8
 80069fe:	d00b      	beq.n	8006a18 <HAL_TIM_PWM_Start+0x8c>
 8006a00:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8006a04:	3b01      	subs	r3, #1
 8006a06:	bf18      	it	ne
 8006a08:	2301      	movne	r3, #1
 8006a0a:	e7c8      	b.n	800699e <HAL_TIM_PWM_Start+0x12>
 8006a0c:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8006a10:	3b01      	subs	r3, #1
 8006a12:	bf18      	it	ne
 8006a14:	2301      	movne	r3, #1
 8006a16:	e7c2      	b.n	800699e <HAL_TIM_PWM_Start+0x12>
 8006a18:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	bf18      	it	ne
 8006a20:	2301      	movne	r3, #1
 8006a22:	e7bc      	b.n	800699e <HAL_TIM_PWM_Start+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a24:	2804      	cmp	r0, #4
 8006a26:	d005      	beq.n	8006a34 <HAL_TIM_PWM_Start+0xa8>
 8006a28:	2808      	cmp	r0, #8
 8006a2a:	d007      	beq.n	8006a3c <HAL_TIM_PWM_Start+0xb0>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006a32:	e7bb      	b.n	80069ac <HAL_TIM_PWM_Start+0x20>
 8006a34:	2302      	movs	r3, #2
 8006a36:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006a3a:	e7b7      	b.n	80069ac <HAL_TIM_PWM_Start+0x20>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006a42:	e7b3      	b.n	80069ac <HAL_TIM_PWM_Start+0x20>
    __HAL_TIM_MOE_ENABLE(htim);
 8006a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a4a:	645a      	str	r2, [r3, #68]	@ 0x44
 8006a4c:	e7b7      	b.n	80069be <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a54:	2a06      	cmp	r2, #6
 8006a56:	d007      	beq.n	8006a68 <HAL_TIM_PWM_Start+0xdc>
      __HAL_TIM_ENABLE(htim);
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	f042 0201 	orr.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006a60:	2000      	movs	r0, #0
}
 8006a62:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006a64:	2001      	movs	r0, #1
 8006a66:	e7fc      	b.n	8006a62 <HAL_TIM_PWM_Start+0xd6>
  return HAL_OK;
 8006a68:	2000      	movs	r0, #0
 8006a6a:	e7fa      	b.n	8006a62 <HAL_TIM_PWM_Start+0xd6>
 8006a6c:	40010000 	.word	0x40010000

08006a70 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a70:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8006a74:	2a01      	cmp	r2, #1
 8006a76:	d035      	beq.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8006a78:	b410      	push	{r4}
 8006a7a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a82:	2202      	movs	r2, #2
 8006a84:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a88:	6802      	ldr	r2, [r0, #0]
 8006a8a:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a8c:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a8e:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a92:	6808      	ldr	r0, [r1, #0]
 8006a94:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a98:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	4812      	ldr	r0, [pc, #72]	@ (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8006a9e:	4282      	cmp	r2, r0
 8006aa0:	d012      	beq.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006aa2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006aa6:	d00f      	beq.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006aa8:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8006aac:	4282      	cmp	r2, r0
 8006aae:	d00b      	beq.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006ab0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8006ab4:	4282      	cmp	r2, r0
 8006ab6:	d007      	beq.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006ab8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8006abc:	4282      	cmp	r2, r0
 8006abe:	d003      	beq.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006ac0:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8006ac4:	4282      	cmp	r2, r0
 8006ac6:	d104      	bne.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ac8:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006acc:	6849      	ldr	r1, [r1, #4]
 8006ace:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ad0:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ad8:	2000      	movs	r0, #0
 8006ada:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8006ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ae2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006ae4:	2002      	movs	r0, #2
}
 8006ae6:	4770      	bx	lr
 8006ae8:	40010000 	.word	0x40010000

08006aec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006aec:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aee:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d021      	beq.n	8006b3a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8006af6:	2301      	movs	r3, #1
 8006af8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006afc:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006afe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b02:	6888      	ldr	r0, [r1, #8]
 8006b04:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b0a:	6848      	ldr	r0, [r1, #4]
 8006b0c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b12:	6808      	ldr	r0, [r1, #0]
 8006b14:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b1a:	6908      	ldr	r0, [r1, #16]
 8006b1c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b22:	6948      	ldr	r0, [r1, #20]
 8006b24:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b2a:	69c9      	ldr	r1, [r1, #28]
 8006b2c:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b2e:	6811      	ldr	r1, [r2, #0]
 8006b30:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b32:	2000      	movs	r0, #0
 8006b34:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8006b38:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006b3a:	2002      	movs	r0, #2
}
 8006b3c:	4770      	bx	lr

08006b3e <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b3e:	4770      	bx	lr

08006b40 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b40:	4770      	bx	lr
	...

08006b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b44:	b530      	push	{r4, r5, lr}
 8006b46:	b089      	sub	sp, #36	@ 0x24
 8006b48:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8006b4a:	2400      	movs	r4, #0
 8006b4c:	9401      	str	r4, [sp, #4]
 8006b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc4 <HAL_InitTick+0x80>)
 8006b50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b52:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006b56:	645a      	str	r2, [r3, #68]	@ 0x44
 8006b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b5e:	9301      	str	r3, [sp, #4]
 8006b60:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006b62:	a902      	add	r1, sp, #8
 8006b64:	a803      	add	r0, sp, #12
 8006b66:	f7ff fa39 	bl	8005fdc <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006b6a:	f7ff fa27 	bl	8005fbc <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006b6e:	4a16      	ldr	r2, [pc, #88]	@ (8006bc8 <HAL_InitTick+0x84>)
 8006b70:	fba2 2300 	umull	r2, r3, r2, r0
 8006b74:	0c9b      	lsrs	r3, r3, #18
 8006b76:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8006b78:	4814      	ldr	r0, [pc, #80]	@ (8006bcc <HAL_InitTick+0x88>)
 8006b7a:	4a15      	ldr	r2, [pc, #84]	@ (8006bd0 <HAL_InitTick+0x8c>)
 8006b7c:	6002      	str	r2, [r0, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8006b7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006b82:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8006b84:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 8006b86:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b88:	6084      	str	r4, [r0, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b8a:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8006b8c:	f7ff fc6a 	bl	8006464 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8006b90:	4604      	mov	r4, r0
 8006b92:	b110      	cbz	r0, 8006b9a <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8006b94:	4620      	mov	r0, r4
 8006b96:	b009      	add	sp, #36	@ 0x24
 8006b98:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim11);
 8006b9a:	480c      	ldr	r0, [pc, #48]	@ (8006bcc <HAL_InitTick+0x88>)
 8006b9c:	f7ff fb1e 	bl	80061dc <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d1f6      	bne.n	8006b94 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006ba6:	201a      	movs	r0, #26
 8006ba8:	f7fd fc96 	bl	80044d8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bac:	2d0f      	cmp	r5, #15
 8006bae:	d901      	bls.n	8006bb4 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8006bb0:	2401      	movs	r4, #1
 8006bb2:	e7ef      	b.n	8006b94 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	201a      	movs	r0, #26
 8006bba:	f7fd fc7d 	bl	80044b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006bbe:	4b05      	ldr	r3, [pc, #20]	@ (8006bd4 <HAL_InitTick+0x90>)
 8006bc0:	601d      	str	r5, [r3, #0]
 8006bc2:	e7e7      	b.n	8006b94 <HAL_InitTick+0x50>
 8006bc4:	40023800 	.word	0x40023800
 8006bc8:	431bde83 	.word	0x431bde83
 8006bcc:	2000641c 	.word	0x2000641c
 8006bd0:	40014800 	.word	0x40014800
 8006bd4:	20000050 	.word	0x20000050

08006bd8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006bd8:	e7fe      	b.n	8006bd8 <NMI_Handler>

08006bda <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006bda:	e7fe      	b.n	8006bda <HardFault_Handler>

08006bdc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006bdc:	e7fe      	b.n	8006bdc <MemManage_Handler>

08006bde <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006bde:	e7fe      	b.n	8006bde <BusFault_Handler>

08006be0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006be0:	e7fe      	b.n	8006be0 <UsageFault_Handler>

08006be2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006be2:	4770      	bx	lr

08006be4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006be4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8006be6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006bea:	f7fd ff87 	bl	8004afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006bee:	bd08      	pop	{r3, pc}

08006bf0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006bf0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006bf2:	4803      	ldr	r0, [pc, #12]	@ (8006c00 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8006bf4:	f7ff fb31 	bl	800625a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8006bf8:	4802      	ldr	r0, [pc, #8]	@ (8006c04 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8006bfa:	f7ff fb2e 	bl	800625a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006bfe:	bd08      	pop	{r3, pc}
 8006c00:	200069f8 	.word	0x200069f8
 8006c04:	2000641c 	.word	0x2000641c

08006c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006c08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  scheduler_timer_callback();
 8006c0a:	f002 f98f 	bl	8008f2c <scheduler_timer_callback>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006c0e:	4802      	ldr	r0, [pc, #8]	@ (8006c18 <TIM2_IRQHandler+0x10>)
 8006c10:	f7ff fb23 	bl	800625a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006c14:	bd08      	pop	{r3, pc}
 8006c16:	bf00      	nop
 8006c18:	200069b0 	.word	0x200069b0

08006c1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006c1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006c1e:	4802      	ldr	r0, [pc, #8]	@ (8006c28 <DMA2_Stream0_IRQHandler+0xc>)
 8006c20:	f7fd fd84 	bl	800472c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006c24:	bd08      	pop	{r3, pc}
 8006c26:	bf00      	nop
 8006c28:	200001b0 	.word	0x200001b0

08006c2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006c2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006c2e:	4802      	ldr	r0, [pc, #8]	@ (8006c38 <OTG_FS_IRQHandler+0xc>)
 8006c30:	f7fe fba3 	bl	800537a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006c34:	bd08      	pop	{r3, pc}
 8006c36:	bf00      	nop
 8006c38:	20007a54 	.word	0x20007a54

08006c3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c3c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c42:	9b01      	ldr	r3, [sp, #4]
 8006c44:	3301      	adds	r3, #1
 8006c46:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8006c48:	9b01      	ldr	r3, [sp, #4]
 8006c4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c4e:	d815      	bhi.n	8006c7c <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c50:	6903      	ldr	r3, [r0, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	daf5      	bge.n	8006c42 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c5a:	6903      	ldr	r3, [r0, #16]
 8006c5c:	f043 0301 	orr.w	r3, r3, #1
 8006c60:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8006c62:	9b01      	ldr	r3, [sp, #4]
 8006c64:	3301      	adds	r3, #1
 8006c66:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8006c68:	9b01      	ldr	r3, [sp, #4]
 8006c6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c6e:	d808      	bhi.n	8006c82 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c70:	6903      	ldr	r3, [r0, #16]
 8006c72:	f013 0f01 	tst.w	r3, #1
 8006c76:	d1f4      	bne.n	8006c62 <USB_CoreReset+0x26>

  return HAL_OK;
 8006c78:	2000      	movs	r0, #0
 8006c7a:	e000      	b.n	8006c7e <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8006c7c:	2003      	movs	r0, #3
}
 8006c7e:	b002      	add	sp, #8
 8006c80:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006c82:	2003      	movs	r0, #3
 8006c84:	e7fb      	b.n	8006c7e <USB_CoreReset+0x42>

08006c86 <USB_CoreInit>:
{
 8006c86:	b084      	sub	sp, #16
 8006c88:	b510      	push	{r4, lr}
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	a803      	add	r0, sp, #12
 8006c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c92:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d121      	bne.n	8006cde <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c9a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ca0:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ca2:	68e3      	ldr	r3, [r4, #12]
 8006ca4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006ca8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cac:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cae:	68e3      	ldr	r3, [r4, #12]
 8006cb0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006cb4:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8006cb6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d00a      	beq.n	8006cd4 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f7ff ffbc 	bl	8006c3c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8006cc4:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d01c      	beq.n	8006d06 <USB_CoreInit+0x80>
}
 8006ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd0:	b004      	add	sp, #16
 8006cd2:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006cd4:	68e3      	ldr	r3, [r4, #12]
 8006cd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cda:	60e3      	str	r3, [r4, #12]
 8006cdc:	e7ef      	b.n	8006cbe <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cde:	68e3      	ldr	r3, [r4, #12]
 8006ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ce4:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f7ff ffa8 	bl	8006c3c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8006cec:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8006cf0:	b923      	cbnz	r3, 8006cfc <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cf2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cf8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006cfa:	e7e3      	b.n	8006cc4 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cfc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d02:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006d04:	e7de      	b.n	8006cc4 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d06:	68a3      	ldr	r3, [r4, #8]
 8006d08:	f043 0306 	orr.w	r3, r3, #6
 8006d0c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d0e:	68a3      	ldr	r3, [r4, #8]
 8006d10:	f043 0320 	orr.w	r3, r3, #32
 8006d14:	60a3      	str	r3, [r4, #8]
 8006d16:	e7d9      	b.n	8006ccc <USB_CoreInit+0x46>

08006d18 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8006d18:	2a02      	cmp	r2, #2
 8006d1a:	d00a      	beq.n	8006d32 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d1c:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d1e:	68c3      	ldr	r3, [r0, #12]
 8006d20:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8006d24:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006d26:	68c3      	ldr	r3, [r0, #12]
 8006d28:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8006d2c:	60c3      	str	r3, [r0, #12]
}
 8006d2e:	2000      	movs	r0, #0
 8006d30:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d32:	4b23      	ldr	r3, [pc, #140]	@ (8006dc0 <USB_SetTurnaroundTime+0xa8>)
 8006d34:	440b      	add	r3, r1
 8006d36:	4a23      	ldr	r2, [pc, #140]	@ (8006dc4 <USB_SetTurnaroundTime+0xac>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d92f      	bls.n	8006d9c <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d3c:	4b22      	ldr	r3, [pc, #136]	@ (8006dc8 <USB_SetTurnaroundTime+0xb0>)
 8006d3e:	440b      	add	r3, r1
 8006d40:	4a22      	ldr	r2, [pc, #136]	@ (8006dcc <USB_SetTurnaroundTime+0xb4>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d92c      	bls.n	8006da0 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006d46:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 8006d4a:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 8006d4e:	4a20      	ldr	r2, [pc, #128]	@ (8006dd0 <USB_SetTurnaroundTime+0xb8>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d927      	bls.n	8006da4 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d54:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 8006d58:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8006d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd4 <USB_SetTurnaroundTime+0xbc>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d322      	bcc.n	8006da8 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d62:	4b1d      	ldr	r3, [pc, #116]	@ (8006dd8 <USB_SetTurnaroundTime+0xc0>)
 8006d64:	440b      	add	r3, r1
 8006d66:	4a1d      	ldr	r2, [pc, #116]	@ (8006ddc <USB_SetTurnaroundTime+0xc4>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d91f      	bls.n	8006dac <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8006de0 <USB_SetTurnaroundTime+0xc8>)
 8006d6e:	440b      	add	r3, r1
 8006d70:	4a1c      	ldr	r2, [pc, #112]	@ (8006de4 <USB_SetTurnaroundTime+0xcc>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d31c      	bcc.n	8006db0 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d76:	4b1c      	ldr	r3, [pc, #112]	@ (8006de8 <USB_SetTurnaroundTime+0xd0>)
 8006d78:	440b      	add	r3, r1
 8006d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dec <USB_SetTurnaroundTime+0xd4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d319      	bcc.n	8006db4 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d80:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8006d84:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 8006d88:	4a19      	ldr	r2, [pc, #100]	@ (8006df0 <USB_SetTurnaroundTime+0xd8>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d314      	bcc.n	8006db8 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d8e:	4b19      	ldr	r3, [pc, #100]	@ (8006df4 <USB_SetTurnaroundTime+0xdc>)
 8006d90:	440b      	add	r3, r1
 8006d92:	4a19      	ldr	r2, [pc, #100]	@ (8006df8 <USB_SetTurnaroundTime+0xe0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d211      	bcs.n	8006dbc <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 8006d98:	2207      	movs	r2, #7
 8006d9a:	e7c0      	b.n	8006d1e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8006d9c:	220f      	movs	r2, #15
 8006d9e:	e7be      	b.n	8006d1e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8006da0:	220e      	movs	r2, #14
 8006da2:	e7bc      	b.n	8006d1e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8006da4:	220d      	movs	r2, #13
 8006da6:	e7ba      	b.n	8006d1e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8006da8:	220c      	movs	r2, #12
 8006daa:	e7b8      	b.n	8006d1e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8006dac:	220b      	movs	r2, #11
 8006dae:	e7b6      	b.n	8006d1e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8006db0:	220a      	movs	r2, #10
 8006db2:	e7b4      	b.n	8006d1e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8006db4:	2209      	movs	r2, #9
 8006db6:	e7b2      	b.n	8006d1e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8006db8:	2208      	movs	r2, #8
 8006dba:	e7b0      	b.n	8006d1e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8006dbc:	2206      	movs	r2, #6
 8006dbe:	e7ae      	b.n	8006d1e <USB_SetTurnaroundTime+0x6>
 8006dc0:	ff275340 	.word	0xff275340
 8006dc4:	000c34ff 	.word	0x000c34ff
 8006dc8:	ff1b1e40 	.word	0xff1b1e40
 8006dcc:	000f423f 	.word	0x000f423f
 8006dd0:	00124f7f 	.word	0x00124f7f
 8006dd4:	0013d620 	.word	0x0013d620
 8006dd8:	fee5b660 	.word	0xfee5b660
 8006ddc:	0016e35f 	.word	0x0016e35f
 8006de0:	feced300 	.word	0xfeced300
 8006de4:	001b7740 	.word	0x001b7740
 8006de8:	feb35bc0 	.word	0xfeb35bc0
 8006dec:	002191c0 	.word	0x002191c0
 8006df0:	00387520 	.word	0x00387520
 8006df4:	fe5954e0 	.word	0xfe5954e0
 8006df8:	00419ce0 	.word	0x00419ce0

08006dfc <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006dfc:	6883      	ldr	r3, [r0, #8]
 8006dfe:	f043 0301 	orr.w	r3, r3, #1
 8006e02:	6083      	str	r3, [r0, #8]
}
 8006e04:	2000      	movs	r0, #0
 8006e06:	4770      	bx	lr

08006e08 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e08:	6883      	ldr	r3, [r0, #8]
 8006e0a:	f023 0301 	bic.w	r3, r3, #1
 8006e0e:	6083      	str	r3, [r0, #8]
}
 8006e10:	2000      	movs	r0, #0
 8006e12:	4770      	bx	lr

08006e14 <USB_FlushTxFifo>:
{
 8006e14:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	9301      	str	r3, [sp, #4]
    count++;
 8006e1a:	9b01      	ldr	r3, [sp, #4]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8006e20:	9b01      	ldr	r3, [sp, #4]
 8006e22:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e26:	d815      	bhi.n	8006e54 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e28:	6903      	ldr	r3, [r0, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	daf5      	bge.n	8006e1a <USB_FlushTxFifo+0x6>
  count = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e32:	0189      	lsls	r1, r1, #6
 8006e34:	f041 0120 	orr.w	r1, r1, #32
 8006e38:	6101      	str	r1, [r0, #16]
    count++;
 8006e3a:	9b01      	ldr	r3, [sp, #4]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8006e40:	9b01      	ldr	r3, [sp, #4]
 8006e42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e46:	d808      	bhi.n	8006e5a <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e48:	6903      	ldr	r3, [r0, #16]
 8006e4a:	f013 0f20 	tst.w	r3, #32
 8006e4e:	d1f4      	bne.n	8006e3a <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8006e50:	2000      	movs	r0, #0
 8006e52:	e000      	b.n	8006e56 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8006e54:	2003      	movs	r0, #3
}
 8006e56:	b002      	add	sp, #8
 8006e58:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006e5a:	2003      	movs	r0, #3
 8006e5c:	e7fb      	b.n	8006e56 <USB_FlushTxFifo+0x42>

08006e5e <USB_FlushRxFifo>:
{
 8006e5e:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	9301      	str	r3, [sp, #4]
    count++;
 8006e64:	9b01      	ldr	r3, [sp, #4]
 8006e66:	3301      	adds	r3, #1
 8006e68:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8006e6a:	9b01      	ldr	r3, [sp, #4]
 8006e6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e70:	d813      	bhi.n	8006e9a <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e72:	6903      	ldr	r3, [r0, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	daf5      	bge.n	8006e64 <USB_FlushRxFifo+0x6>
  count = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	6103      	str	r3, [r0, #16]
    count++;
 8006e80:	9b01      	ldr	r3, [sp, #4]
 8006e82:	3301      	adds	r3, #1
 8006e84:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8006e86:	9b01      	ldr	r3, [sp, #4]
 8006e88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e8c:	d808      	bhi.n	8006ea0 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e8e:	6903      	ldr	r3, [r0, #16]
 8006e90:	f013 0f10 	tst.w	r3, #16
 8006e94:	d1f4      	bne.n	8006e80 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8006e96:	2000      	movs	r0, #0
 8006e98:	e000      	b.n	8006e9c <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8006e9a:	2003      	movs	r0, #3
}
 8006e9c:	b002      	add	sp, #8
 8006e9e:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006ea0:	2003      	movs	r0, #3
 8006ea2:	e7fb      	b.n	8006e9c <USB_FlushRxFifo+0x3e>

08006ea4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8006ea4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8006ea8:	4319      	orrs	r1, r3
 8006eaa:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8006eae:	2000      	movs	r0, #0
 8006eb0:	4770      	bx	lr
	...

08006eb4 <USB_DevInit>:
{
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb8:	4604      	mov	r4, r0
 8006eba:	a807      	add	r0, sp, #28
 8006ebc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	e006      	b.n	8006ed2 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8006ec4:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006ec8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006ecc:	2100      	movs	r1, #0
 8006ece:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	2b0e      	cmp	r3, #14
 8006ed4:	d9f6      	bls.n	8006ec4 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 8006ed6:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 8006eda:	bb06      	cbnz	r6, 8006f1e <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006edc:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8006ee0:	f043 0302 	orr.w	r3, r3, #2
 8006ee4:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ee8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006eea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006eee:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ef0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006ef2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006ef6:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ef8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006efe:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f06:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d115      	bne.n	8006f3a <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 8006f0e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8006f12:	b96b      	cbnz	r3, 8006f30 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f14:	2100      	movs	r1, #0
 8006f16:	4620      	mov	r0, r4
 8006f18:	f7ff ffc4 	bl	8006ea4 <USB_SetDevSpeed>
 8006f1c:	e011      	b.n	8006f42 <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006f1e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f20:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f24:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006f26:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f2c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006f2e:	e7e7      	b.n	8006f00 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f30:	2101      	movs	r1, #1
 8006f32:	4620      	mov	r0, r4
 8006f34:	f7ff ffb6 	bl	8006ea4 <USB_SetDevSpeed>
 8006f38:	e003      	b.n	8006f42 <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f3a:	2103      	movs	r1, #3
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f7ff ffb1 	bl	8006ea4 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f42:	2110      	movs	r1, #16
 8006f44:	4620      	mov	r0, r4
 8006f46:	f7ff ff65 	bl	8006e14 <USB_FlushTxFifo>
 8006f4a:	4605      	mov	r5, r0
 8006f4c:	b100      	cbz	r0, 8006f50 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 8006f4e:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f50:	4620      	mov	r0, r4
 8006f52:	f7ff ff84 	bl	8006e5e <USB_FlushRxFifo>
 8006f56:	b100      	cbz	r0, 8006f5a <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 8006f58:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8006f5a:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f64:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f68:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f6c:	e00d      	b.n	8006f8a <USB_DevInit+0xd6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f72:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8006f76:	e002      	b.n	8006f7e <USB_DevInit+0xca>
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f78:	2000      	movs	r0, #0
 8006f7a:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f7e:	2200      	movs	r2, #0
 8006f80:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f82:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8006f86:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f88:	3301      	adds	r3, #1
 8006f8a:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8006f8e:	4299      	cmp	r1, r3
 8006f90:	d90e      	bls.n	8006fb0 <USB_DevInit+0xfc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f92:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8006f96:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 8006f9a:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	daea      	bge.n	8006f78 <USB_DevInit+0xc4>
      if (i == 0U)
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1e3      	bne.n	8006f6e <USB_DevInit+0xba>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fa6:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8006faa:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8006fae:	e7e6      	b.n	8006f7e <USB_DevInit+0xca>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e00a      	b.n	8006fca <USB_DevInit+0x116>
      if (i == 0U)
 8006fb4:	b1bb      	cbz	r3, 8006fe6 <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006fb6:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 8006fba:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006fc2:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8006fc6:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fc8:	3301      	adds	r3, #1
 8006fca:	4299      	cmp	r1, r3
 8006fcc:	d910      	bls.n	8006ff0 <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fce:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8006fd2:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8006fd6:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 8006fda:	2f00      	cmp	r7, #0
 8006fdc:	dbea      	blt.n	8006fb4 <USB_DevInit+0x100>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006fde:	2700      	movs	r7, #0
 8006fe0:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8006fe4:	e7eb      	b.n	8006fbe <USB_DevInit+0x10a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006fe6:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 8006fea:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8006fee:	e7e6      	b.n	8006fbe <USB_DevInit+0x10a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ff0:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8006ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ff8:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007000:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8007004:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8007006:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800700a:	b91b      	cbnz	r3, 8007014 <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800700c:	69a3      	ldr	r3, [r4, #24]
 800700e:	f043 0310 	orr.w	r3, r3, #16
 8007012:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007014:	69a2      	ldr	r2, [r4, #24]
 8007016:	4b0c      	ldr	r3, [pc, #48]	@ (8007048 <USB_DevInit+0x194>)
 8007018:	4313      	orrs	r3, r2
 800701a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800701c:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8007020:	b11b      	cbz	r3, 800702a <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007022:	69a3      	ldr	r3, [r4, #24]
 8007024:	f043 0308 	orr.w	r3, r3, #8
 8007028:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800702a:	2e01      	cmp	r6, #1
 800702c:	d004      	beq.n	8007038 <USB_DevInit+0x184>
}
 800702e:	4628      	mov	r0, r5
 8007030:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007034:	b004      	add	sp, #16
 8007036:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007038:	69a3      	ldr	r3, [r4, #24]
 800703a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800703e:	f043 0304 	orr.w	r3, r3, #4
 8007042:	61a3      	str	r3, [r4, #24]
 8007044:	e7f3      	b.n	800702e <USB_DevInit+0x17a>
 8007046:	bf00      	nop
 8007048:	803c3800 	.word	0x803c3800

0800704c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800704c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8007050:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007054:	2b02      	cmp	r3, #2
 8007056:	d004      	beq.n	8007062 <USB_GetDevSpeed+0x16>
 8007058:	2b06      	cmp	r3, #6
 800705a:	d004      	beq.n	8007066 <USB_GetDevSpeed+0x1a>
 800705c:	b92b      	cbnz	r3, 800706a <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800705e:	2000      	movs	r0, #0
 8007060:	4770      	bx	lr
 8007062:	2002      	movs	r0, #2
 8007064:	4770      	bx	lr
 8007066:	2002      	movs	r0, #2
 8007068:	4770      	bx	lr
 800706a:	200f      	movs	r0, #15
}
 800706c:	4770      	bx	lr

0800706e <USB_ActivateEndpoint>:
{
 800706e:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8007070:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8007074:	784b      	ldrb	r3, [r1, #1]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d023      	beq.n	80070c2 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800707a:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 800707e:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 8007082:	f00c 040f 	and.w	r4, ip, #15
 8007086:	2201      	movs	r2, #1
 8007088:	40a2      	lsls	r2, r4
 800708a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800708e:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007092:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8007096:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800709a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800709e:	d10e      	bne.n	80070be <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80070a0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80070a4:	688a      	ldr	r2, [r1, #8]
 80070a6:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80070aa:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80070ac:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80070b0:	4313      	orrs	r3, r2
 80070b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ba:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 80070be:	2000      	movs	r0, #0
 80070c0:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80070c2:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80070c6:	f00c 0e0f 	and.w	lr, ip, #15
 80070ca:	fa03 f30e 	lsl.w	r3, r3, lr
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	4313      	orrs	r3, r2
 80070d2:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80070d6:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80070da:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80070de:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80070e2:	d1ec      	bne.n	80070be <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070e4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80070e8:	688a      	ldr	r2, [r1, #8]
 80070ea:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070ee:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070f0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070f4:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070f8:	4313      	orrs	r3, r2
 80070fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007102:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8007106:	e7da      	b.n	80070be <USB_ActivateEndpoint+0x50>

08007108 <USB_DeactivateEndpoint>:
{
 8007108:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800710a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800710c:	784a      	ldrb	r2, [r1, #1]
 800710e:	2a01      	cmp	r2, #1
 8007110:	d026      	beq.n	8007160 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007112:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8007116:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800711a:	2a00      	cmp	r2, #0
 800711c:	db52      	blt.n	80071c4 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800711e:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8007122:	780a      	ldrb	r2, [r1, #0]
 8007124:	f002 020f 	and.w	r2, r2, #15
 8007128:	f04f 0c01 	mov.w	ip, #1
 800712c:	fa0c f202 	lsl.w	r2, ip, r2
 8007130:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8007134:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007138:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800713c:	7809      	ldrb	r1, [r1, #0]
 800713e:	f001 010f 	and.w	r1, r1, #15
 8007142:	fa0c fc01 	lsl.w	ip, ip, r1
 8007146:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 800714a:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800714e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8007152:	4a23      	ldr	r2, [pc, #140]	@ (80071e0 <USB_DeactivateEndpoint+0xd8>)
 8007154:	400a      	ands	r2, r1
 8007156:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 800715a:	2000      	movs	r0, #0
 800715c:	bc30      	pop	{r4, r5}
 800715e:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007160:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8007164:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8007168:	2a00      	cmp	r2, #0
 800716a:	db1e      	blt.n	80071aa <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800716c:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8007170:	780a      	ldrb	r2, [r1, #0]
 8007172:	f002 020f 	and.w	r2, r2, #15
 8007176:	2401      	movs	r4, #1
 8007178:	fa04 f202 	lsl.w	r2, r4, r2
 800717c:	b292      	uxth	r2, r2
 800717e:	ea25 0202 	bic.w	r2, r5, r2
 8007182:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007186:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800718a:	7809      	ldrb	r1, [r1, #0]
 800718c:	f001 010f 	and.w	r1, r1, #15
 8007190:	408c      	lsls	r4, r1
 8007192:	b2a4      	uxth	r4, r4
 8007194:	ea22 0204 	bic.w	r2, r2, r4
 8007198:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800719c:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80071a0:	4a10      	ldr	r2, [pc, #64]	@ (80071e4 <USB_DeactivateEndpoint+0xdc>)
 80071a2:	400a      	ands	r2, r1
 80071a4:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 80071a8:	e7d7      	b.n	800715a <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80071aa:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80071ae:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80071b2:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80071b6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80071ba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80071be:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 80071c2:	e7d3      	b.n	800716c <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80071c4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80071c8:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80071cc:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80071d0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80071d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80071d8:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 80071dc:	e79f      	b.n	800711e <USB_DeactivateEndpoint+0x16>
 80071de:	bf00      	nop
 80071e0:	eff37800 	.word	0xeff37800
 80071e4:	ec337800 	.word	0xec337800

080071e8 <USB_EPStopXfer>:
{
 80071e8:	b410      	push	{r4}
 80071ea:	b083      	sub	sp, #12
 80071ec:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 80071ee:	2300      	movs	r3, #0
 80071f0:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 80071f2:	7848      	ldrb	r0, [r1, #1]
 80071f4:	2801      	cmp	r0, #1
 80071f6:	d00b      	beq.n	8007210 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071f8:	780b      	ldrb	r3, [r1, #0]
 80071fa:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80071fe:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8007202:	2800      	cmp	r0, #0
 8007204:	db2d      	blt.n	8007262 <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8007206:	2000      	movs	r0, #0
}
 8007208:	b003      	add	sp, #12
 800720a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800720e:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007210:	780b      	ldrb	r3, [r1, #0]
 8007212:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007216:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800721a:	2c00      	cmp	r4, #0
 800721c:	db01      	blt.n	8007222 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 800721e:	2000      	movs	r0, #0
 8007220:	e7f2      	b.n	8007208 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007222:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8007226:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 800722a:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800722e:	780b      	ldrb	r3, [r1, #0]
 8007230:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007234:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8007238:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 800723c:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8007240:	9b01      	ldr	r3, [sp, #4]
 8007242:	3301      	adds	r3, #1
 8007244:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8007246:	9c01      	ldr	r4, [sp, #4]
 8007248:	f242 7310 	movw	r3, #10000	@ 0x2710
 800724c:	429c      	cmp	r4, r3
 800724e:	d8db      	bhi.n	8007208 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007250:	780b      	ldrb	r3, [r1, #0]
 8007252:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007256:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800725a:	2b00      	cmp	r3, #0
 800725c:	dbf0      	blt.n	8007240 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 800725e:	2000      	movs	r0, #0
 8007260:	e7d2      	b.n	8007208 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007262:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8007266:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 800726a:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800726e:	780b      	ldrb	r3, [r1, #0]
 8007270:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007274:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8007278:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 800727c:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 8007280:	9b01      	ldr	r3, [sp, #4]
 8007282:	3301      	adds	r3, #1
 8007284:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8007286:	9801      	ldr	r0, [sp, #4]
 8007288:	f242 7310 	movw	r3, #10000	@ 0x2710
 800728c:	4298      	cmp	r0, r3
 800728e:	d808      	bhi.n	80072a2 <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007290:	780b      	ldrb	r3, [r1, #0]
 8007292:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007296:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800729a:	2b00      	cmp	r3, #0
 800729c:	dbf0      	blt.n	8007280 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 800729e:	2000      	movs	r0, #0
 80072a0:	e7b2      	b.n	8007208 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 80072a2:	2001      	movs	r0, #1
 80072a4:	e7b0      	b.n	8007208 <USB_EPStopXfer+0x20>

080072a6 <USB_WritePacket>:
{
 80072a6:	b510      	push	{r4, lr}
 80072a8:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 80072ac:	b984      	cbnz	r4, 80072d0 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 80072ae:	3303      	adds	r3, #3
 80072b0:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 80072b4:	f04f 0c00 	mov.w	ip, #0
 80072b8:	e008      	b.n	80072cc <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072ba:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 80072be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072c2:	f851 4b04 	ldr.w	r4, [r1], #4
 80072c6:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 80072c8:	f10c 0c01 	add.w	ip, ip, #1
 80072cc:	45f4      	cmp	ip, lr
 80072ce:	d3f4      	bcc.n	80072ba <USB_WritePacket+0x14>
}
 80072d0:	2000      	movs	r0, #0
 80072d2:	bd10      	pop	{r4, pc}

080072d4 <USB_EPStartXfer>:
{
 80072d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072d6:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 80072d8:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80072da:	784b      	ldrb	r3, [r1, #1]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d02d      	beq.n	800733c <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80072e0:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 80072e4:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 80072e8:	691d      	ldr	r5, [r3, #16]
 80072ea:	f36f 0512 	bfc	r5, #0, #19
 80072ee:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072f0:	691d      	ldr	r5, [r3, #16]
 80072f2:	f36f 45dc 	bfc	r5, #19, #10
 80072f6:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 80072f8:	2c00      	cmp	r4, #0
 80072fa:	f040 80ce 	bne.w	800749a <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 80072fe:	690c      	ldr	r4, [r1, #16]
 8007300:	b10c      	cbz	r4, 8007306 <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8007302:	688c      	ldr	r4, [r1, #8]
 8007304:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8007306:	688c      	ldr	r4, [r1, #8]
 8007308:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800730a:	691d      	ldr	r5, [r3, #16]
 800730c:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007310:	432c      	orrs	r4, r5
 8007312:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007314:	691c      	ldr	r4, [r3, #16]
 8007316:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800731a:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800731c:	2a01      	cmp	r2, #1
 800731e:	f000 80df 	beq.w	80074e0 <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 8007322:	790b      	ldrb	r3, [r1, #4]
 8007324:	2b01      	cmp	r3, #1
 8007326:	f000 80e1 	beq.w	80074ec <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800732a:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800732e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007332:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8007336:	2000      	movs	r0, #0
 8007338:	b003      	add	sp, #12
 800733a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 800733c:	690b      	ldr	r3, [r1, #16]
 800733e:	bb73      	cbnz	r3, 800739e <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007340:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8007344:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8007348:	f36f 45dc 	bfc	r5, #19, #10
 800734c:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007350:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8007354:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8007358:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800735c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8007360:	f36f 0512 	bfc	r5, #0, #19
 8007364:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8007368:	2a01      	cmp	r2, #1
 800736a:	d054      	beq.n	8007416 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800736c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8007370:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007374:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007378:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 800737c:	790b      	ldrb	r3, [r1, #4]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d072      	beq.n	8007468 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 8007382:	690b      	ldr	r3, [r1, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0d6      	beq.n	8007336 <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007388:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 800738c:	7809      	ldrb	r1, [r1, #0]
 800738e:	f001 010f 	and.w	r1, r1, #15
 8007392:	2201      	movs	r2, #1
 8007394:	408a      	lsls	r2, r1
 8007396:	4313      	orrs	r3, r2
 8007398:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 800739c:	e7cb      	b.n	8007336 <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800739e:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80073a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a6:	691d      	ldr	r5, [r3, #16]
 80073a8:	f36f 0512 	bfc	r5, #0, #19
 80073ac:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073ae:	691d      	ldr	r5, [r3, #16]
 80073b0:	f36f 45dc 	bfc	r5, #19, #10
 80073b4:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 80073b6:	b984      	cbnz	r4, 80073da <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 80073b8:	690e      	ldr	r6, [r1, #16]
 80073ba:	688d      	ldr	r5, [r1, #8]
 80073bc:	42ae      	cmp	r6, r5
 80073be:	d900      	bls.n	80073c2 <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 80073c0:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073c2:	691d      	ldr	r5, [r3, #16]
 80073c4:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 80073c8:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80073ca:	691d      	ldr	r5, [r3, #16]
 80073cc:	690e      	ldr	r6, [r1, #16]
 80073ce:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 80073d2:	ea45 050c 	orr.w	r5, r5, ip
 80073d6:	611d      	str	r5, [r3, #16]
 80073d8:	e7c6      	b.n	8007368 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80073da:	690d      	ldr	r5, [r1, #16]
 80073dc:	688e      	ldr	r6, [r1, #8]
 80073de:	4435      	add	r5, r6
 80073e0:	3d01      	subs	r5, #1
 80073e2:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80073e6:	691e      	ldr	r6, [r3, #16]
 80073e8:	fa1f fc85 	uxth.w	ip, r5
 80073ec:	4f49      	ldr	r7, [pc, #292]	@ (8007514 <USB_EPStartXfer+0x240>)
 80073ee:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 80073f2:	4335      	orrs	r5, r6
 80073f4:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 80073f6:	790d      	ldrb	r5, [r1, #4]
 80073f8:	2d01      	cmp	r5, #1
 80073fa:	d1e6      	bne.n	80073ca <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80073fc:	691d      	ldr	r5, [r3, #16]
 80073fe:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8007402:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007404:	691d      	ldr	r5, [r3, #16]
 8007406:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 800740a:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 800740e:	ea45 050c 	orr.w	r5, r5, ip
 8007412:	611d      	str	r5, [r3, #16]
 8007414:	e7d9      	b.n	80073ca <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8007416:	69cb      	ldr	r3, [r1, #28]
 8007418:	b11b      	cbz	r3, 8007422 <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800741a:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800741e:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8007422:	790b      	ldrb	r3, [r1, #4]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d008      	beq.n	800743a <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007428:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800742c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007430:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007434:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8007438:	e77d      	b.n	8007336 <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800743a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800743e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007442:	d108      	bne.n	8007456 <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007444:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8007448:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 800744c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007450:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8007454:	e7e8      	b.n	8007428 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007456:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800745a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 800745e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007462:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8007466:	e7df      	b.n	8007428 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007468:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800746c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007470:	d10c      	bne.n	800748c <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007472:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007476:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800747a:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800747e:	9200      	str	r2, [sp, #0]
 8007480:	8a0b      	ldrh	r3, [r1, #16]
 8007482:	780a      	ldrb	r2, [r1, #0]
 8007484:	68c9      	ldr	r1, [r1, #12]
 8007486:	f7ff ff0e 	bl	80072a6 <USB_WritePacket>
 800748a:	e754      	b.n	8007336 <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800748c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007494:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8007498:	e7f1      	b.n	800747e <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 800749a:	690c      	ldr	r4, [r1, #16]
 800749c:	b954      	cbnz	r4, 80074b4 <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800749e:	691c      	ldr	r4, [r3, #16]
 80074a0:	688d      	ldr	r5, [r1, #8]
 80074a2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80074a6:	432c      	orrs	r4, r5
 80074a8:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074aa:	691c      	ldr	r4, [r3, #16]
 80074ac:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 80074b0:	611c      	str	r4, [r3, #16]
 80074b2:	e733      	b.n	800731c <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80074b4:	688d      	ldr	r5, [r1, #8]
 80074b6:	442c      	add	r4, r5
 80074b8:	3c01      	subs	r4, #1
 80074ba:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 80074be:	b2a4      	uxth	r4, r4
 80074c0:	fb04 f505 	mul.w	r5, r4, r5
 80074c4:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80074c6:	691d      	ldr	r5, [r3, #16]
 80074c8:	4e12      	ldr	r6, [pc, #72]	@ (8007514 <USB_EPStartXfer+0x240>)
 80074ca:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 80074ce:	432c      	orrs	r4, r5
 80074d0:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80074d2:	691c      	ldr	r4, [r3, #16]
 80074d4:	6a0d      	ldr	r5, [r1, #32]
 80074d6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80074da:	432c      	orrs	r4, r5
 80074dc:	611c      	str	r4, [r3, #16]
 80074de:	e71d      	b.n	800731c <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 80074e0:	68ca      	ldr	r2, [r1, #12]
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	f43f af1d 	beq.w	8007322 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80074e8:	615a      	str	r2, [r3, #20]
 80074ea:	e71a      	b.n	8007322 <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074ec:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80074f0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80074f4:	d106      	bne.n	8007504 <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80074f6:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 80074fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80074fe:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8007502:	e712      	b.n	800732a <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007504:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8007508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800750c:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8007510:	e70b      	b.n	800732a <USB_EPStartXfer+0x56>
 8007512:	bf00      	nop
 8007514:	1ff80000 	.word	0x1ff80000

08007518 <USB_ReadPacket>:
{
 8007518:	b510      	push	{r4, lr}
 800751a:	4684      	mov	ip, r0
 800751c:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 800751e:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8007522:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8007526:	2300      	movs	r3, #0
 8007528:	e005      	b.n	8007536 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800752a:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 800752e:	6809      	ldr	r1, [r1, #0]
 8007530:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8007534:	3301      	adds	r3, #1
 8007536:	4573      	cmp	r3, lr
 8007538:	d3f7      	bcc.n	800752a <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 800753a:	b17a      	cbz	r2, 800755c <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800753c:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8007540:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8007544:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007546:	b2cb      	uxtb	r3, r1
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	fa24 f303 	lsr.w	r3, r4, r3
 800754e:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8007552:	3101      	adds	r1, #1
      remaining_bytes--;
 8007554:	3a01      	subs	r2, #1
 8007556:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8007558:	2a00      	cmp	r2, #0
 800755a:	d1f4      	bne.n	8007546 <USB_ReadPacket+0x2e>
}
 800755c:	bd10      	pop	{r4, pc}

0800755e <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800755e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8007560:	784a      	ldrb	r2, [r1, #1]
 8007562:	2a01      	cmp	r2, #1
 8007564:	d014      	beq.n	8007590 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007566:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800756a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800756e:	2a00      	cmp	r2, #0
 8007570:	db06      	blt.n	8007580 <USB_EPSetStall+0x22>
 8007572:	b12b      	cbz	r3, 8007580 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007574:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007578:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800757c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007580:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007584:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007588:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800758c:	2000      	movs	r0, #0
 800758e:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007590:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007594:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8007598:	2a00      	cmp	r2, #0
 800759a:	db06      	blt.n	80075aa <USB_EPSetStall+0x4c>
 800759c:	b12b      	cbz	r3, 80075aa <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800759e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80075a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80075a6:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80075aa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80075ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075b2:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80075b6:	e7e9      	b.n	800758c <USB_EPSetStall+0x2e>

080075b8 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80075b8:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80075ba:	784a      	ldrb	r2, [r1, #1]
 80075bc:	2a01      	cmp	r2, #1
 80075be:	d00e      	beq.n	80075de <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075c0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80075c4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80075c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075cc:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075d0:	790b      	ldrb	r3, [r1, #4]
 80075d2:	3b02      	subs	r3, #2
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d915      	bls.n	8007606 <USB_EPClearStall+0x4e>
}
 80075da:	2000      	movs	r0, #0
 80075dc:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075de:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80075e2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80075e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075ea:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075ee:	790b      	ldrb	r3, [r1, #4]
 80075f0:	3b02      	subs	r3, #2
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d8f0      	bhi.n	80075da <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075f8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80075fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007600:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8007604:	e7e9      	b.n	80075da <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007606:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800760a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800760e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8007612:	e7e2      	b.n	80075da <USB_EPClearStall+0x22>

08007614 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007614:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8007618:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800761c:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007620:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8007624:	0109      	lsls	r1, r1, #4
 8007626:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 800762a:	430b      	orrs	r3, r1
 800762c:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8007630:	2000      	movs	r0, #0
 8007632:	4770      	bx	lr

08007634 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007634:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8007638:	f023 0303 	bic.w	r3, r3, #3
 800763c:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007640:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8007644:	f023 0302 	bic.w	r3, r3, #2
 8007648:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800764c:	2000      	movs	r0, #0
 800764e:	4770      	bx	lr

08007650 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007650:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8007654:	f023 0303 	bic.w	r3, r3, #3
 8007658:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800765c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8007660:	f043 0302 	orr.w	r3, r3, #2
 8007664:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8007668:	2000      	movs	r0, #0
 800766a:	4770      	bx	lr

0800766c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800766c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800766e:	6980      	ldr	r0, [r0, #24]
}
 8007670:	4010      	ands	r0, r2
 8007672:	4770      	bx	lr

08007674 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007674:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8007678:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800767c:	69c0      	ldr	r0, [r0, #28]
 800767e:	4018      	ands	r0, r3
}
 8007680:	0c00      	lsrs	r0, r0, #16
 8007682:	4770      	bx	lr

08007684 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007684:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8007688:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800768c:	69c0      	ldr	r0, [r0, #28]
 800768e:	4018      	ands	r0, r3
}
 8007690:	b280      	uxth	r0, r0
 8007692:	4770      	bx	lr

08007694 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007694:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8007698:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800769c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 80076a0:	6940      	ldr	r0, [r0, #20]
}
 80076a2:	4010      	ands	r0, r2
 80076a4:	4770      	bx	lr

080076a6 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 80076a6:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80076aa:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80076ae:	f001 0c0f 	and.w	ip, r1, #15
 80076b2:	fa23 f30c 	lsr.w	r3, r3, ip
 80076b6:	01db      	lsls	r3, r3, #7
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80076bc:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80076c0:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 80076c4:	6880      	ldr	r0, [r0, #8]
}
 80076c6:	4018      	ands	r0, r3
 80076c8:	4770      	bx	lr

080076ca <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80076ca:	6940      	ldr	r0, [r0, #20]
}
 80076cc:	f000 0001 	and.w	r0, r0, #1
 80076d0:	4770      	bx	lr

080076d2 <USB_SetCurrentMode>:
{
 80076d2:	b538      	push	{r3, r4, r5, lr}
 80076d4:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076d6:	68c3      	ldr	r3, [r0, #12]
 80076d8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80076dc:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80076de:	2901      	cmp	r1, #1
 80076e0:	d013      	beq.n	800770a <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 80076e2:	bb19      	cbnz	r1, 800772c <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076e4:	68c3      	ldr	r3, [r0, #12]
 80076e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076ea:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80076ec:	2400      	movs	r4, #0
      HAL_Delay(10U);
 80076ee:	200a      	movs	r0, #10
 80076f0:	f7fc faec 	bl	8003ccc <HAL_Delay>
      ms += 10U;
 80076f4:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80076f6:	4628      	mov	r0, r5
 80076f8:	f7ff ffe7 	bl	80076ca <USB_GetMode>
 80076fc:	b108      	cbz	r0, 8007702 <USB_SetCurrentMode+0x30>
 80076fe:	2cc7      	cmp	r4, #199	@ 0xc7
 8007700:	d9f5      	bls.n	80076ee <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007702:	2cc8      	cmp	r4, #200	@ 0xc8
 8007704:	d014      	beq.n	8007730 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8007706:	2000      	movs	r0, #0
}
 8007708:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800770a:	68c3      	ldr	r3, [r0, #12]
 800770c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007710:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8007712:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8007714:	200a      	movs	r0, #10
 8007716:	f7fc fad9 	bl	8003ccc <HAL_Delay>
      ms += 10U;
 800771a:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800771c:	4628      	mov	r0, r5
 800771e:	f7ff ffd4 	bl	80076ca <USB_GetMode>
 8007722:	2801      	cmp	r0, #1
 8007724:	d0ed      	beq.n	8007702 <USB_SetCurrentMode+0x30>
 8007726:	2cc7      	cmp	r4, #199	@ 0xc7
 8007728:	d9f4      	bls.n	8007714 <USB_SetCurrentMode+0x42>
 800772a:	e7ea      	b.n	8007702 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 800772c:	2001      	movs	r0, #1
 800772e:	e7eb      	b.n	8007708 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8007730:	2001      	movs	r0, #1
 8007732:	e7e9      	b.n	8007708 <USB_SetCurrentMode+0x36>

08007734 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007734:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007738:	f36f 030a 	bfc	r3, #0, #11
 800773c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007740:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8007744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007748:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800774c:	2000      	movs	r0, #0
 800774e:	4770      	bx	lr

08007750 <USB_EP0_OutStart>:
{
 8007750:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007752:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007754:	4b15      	ldr	r3, [pc, #84]	@ (80077ac <USB_EP0_OutStart+0x5c>)
 8007756:	429c      	cmp	r4, r3
 8007758:	d903      	bls.n	8007762 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800775a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800775e:	2b00      	cmp	r3, #0
 8007760:	db16      	blt.n	8007790 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007762:	2400      	movs	r4, #0
 8007764:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007768:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 800776c:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8007770:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007774:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8007778:	f044 0418 	orr.w	r4, r4, #24
 800777c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007780:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8007784:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8007788:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 800778c:	2901      	cmp	r1, #1
 800778e:	d003      	beq.n	8007798 <USB_EP0_OutStart+0x48>
}
 8007790:	2000      	movs	r0, #0
 8007792:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007796:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007798:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800779c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80077a0:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80077a4:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 80077a8:	e7f2      	b.n	8007790 <USB_EP0_OutStart+0x40>
 80077aa:	bf00      	nop
 80077ac:	4f54300a 	.word	0x4f54300a

080077b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80077b0:	b510      	push	{r4, lr}
 80077b2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80077b4:	4a0c      	ldr	r2, [pc, #48]	@ (80077e8 <_sbrk+0x38>)
 80077b6:	490d      	ldr	r1, [pc, #52]	@ (80077ec <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80077b8:	480d      	ldr	r0, [pc, #52]	@ (80077f0 <_sbrk+0x40>)
 80077ba:	6800      	ldr	r0, [r0, #0]
 80077bc:	b140      	cbz	r0, 80077d0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80077be:	480c      	ldr	r0, [pc, #48]	@ (80077f0 <_sbrk+0x40>)
 80077c0:	6800      	ldr	r0, [r0, #0]
 80077c2:	4403      	add	r3, r0
 80077c4:	1a52      	subs	r2, r2, r1
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d806      	bhi.n	80077d8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80077ca:	4a09      	ldr	r2, [pc, #36]	@ (80077f0 <_sbrk+0x40>)
 80077cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80077ce:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80077d0:	4807      	ldr	r0, [pc, #28]	@ (80077f0 <_sbrk+0x40>)
 80077d2:	4c08      	ldr	r4, [pc, #32]	@ (80077f4 <_sbrk+0x44>)
 80077d4:	6004      	str	r4, [r0, #0]
 80077d6:	e7f2      	b.n	80077be <_sbrk+0xe>
    errno = ENOMEM;
 80077d8:	f003 f912 	bl	800aa00 <__errno>
 80077dc:	230c      	movs	r3, #12
 80077de:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80077e0:	f04f 30ff 	mov.w	r0, #4294967295
 80077e4:	e7f3      	b.n	80077ce <_sbrk+0x1e>
 80077e6:	bf00      	nop
 80077e8:	20010000 	.word	0x20010000
 80077ec:	00000400 	.word	0x00000400
 80077f0:	20006464 	.word	0x20006464
 80077f4:	20008288 	.word	0x20008288

080077f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80077f8:	4a03      	ldr	r2, [pc, #12]	@ (8007808 <SystemInit+0x10>)
 80077fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80077fe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007802:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007806:	4770      	bx	lr
 8007808:	e000ed00 	.word	0xe000ed00

0800780c <table_2d_get_value>:
#include "tables.h"
#include "error_handling.h"
#include "utils.h"

float table_2d_get_value(table_2d_t *table, float x, float y)
{
 800780c:	b500      	push	{lr}
    uint8_t num_x_bins = sizeof(table->x_bins) / sizeof(table->x_bins[0]);
    uint8_t num_y_bins = sizeof(table->y_bins) / sizeof(table->y_bins[0]);
    x = CLAMP(x, table->x_bins[0], table->x_bins[num_x_bins - 1]);
 800780e:	f500 6380 	add.w	r3, r0, #1024	@ 0x400
 8007812:	edd3 6a00 	vldr	s13, [r3]
 8007816:	eef4 6ac0 	vcmpe.f32	s13, s0
 800781a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781e:	dc0a      	bgt.n	8007836 <table_2d_get_value+0x2a>
 8007820:	f200 433c 	addw	r3, r0, #1084	@ 0x43c
 8007824:	edd3 6a00 	vldr	s13, [r3]
 8007828:	eef4 6ac0 	vcmpe.f32	s13, s0
 800782c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007830:	d401      	bmi.n	8007836 <table_2d_get_value+0x2a>
 8007832:	eef0 6a40 	vmov.f32	s13, s0
    y = CLAMP(y, table->y_bins[0], table->y_bins[num_y_bins - 1]);
 8007836:	f500 6388 	add.w	r3, r0, #1088	@ 0x440
 800783a:	ed93 7a00 	vldr	s14, [r3]
 800783e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007846:	dc0a      	bgt.n	800785e <table_2d_get_value+0x52>
 8007848:	f200 437c 	addw	r3, r0, #1148	@ 0x47c
 800784c:	ed93 7a00 	vldr	s14, [r3]
 8007850:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007858:	d401      	bmi.n	800785e <table_2d_get_value+0x52>
 800785a:	eeb0 7a60 	vmov.f32	s14, s1

    // Find x_bin (lower index)
    uint8_t x_bin = 0;
 800785e:	2300      	movs	r3, #0
    while (x_bin < num_x_bins - 1 && x >= table->x_bins[x_bin + 1])
 8007860:	e001      	b.n	8007866 <table_2d_get_value+0x5a>
    {
        x_bin++;
 8007862:	3301      	adds	r3, #1
 8007864:	b2db      	uxtb	r3, r3
    while (x_bin < num_x_bins - 1 && x >= table->x_bins[x_bin + 1])
 8007866:	2b0e      	cmp	r3, #14
 8007868:	d80a      	bhi.n	8007880 <table_2d_get_value+0x74>
 800786a:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800786e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007872:	edd2 7a00 	vldr	s15, [r2]
 8007876:	eef4 7ae6 	vcmpe.f32	s15, s13
 800787a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800787e:	d9f0      	bls.n	8007862 <table_2d_get_value+0x56>
    }
    uint8_t x_bin_next = (x_bin < num_x_bins - 1) ? x_bin + 1 : x_bin;
 8007880:	2b0e      	cmp	r3, #14
 8007882:	d814      	bhi.n	80078ae <table_2d_get_value+0xa2>
 8007884:	f103 0c01 	add.w	ip, r3, #1
 8007888:	fa5f fc8c 	uxtb.w	ip, ip

    // Find y_bin (lower index)
    uint8_t y_bin = 0;
 800788c:	2200      	movs	r2, #0
    while (y_bin < num_y_bins - 1 && y >= table->y_bins[y_bin + 1])
 800788e:	2a0e      	cmp	r2, #14
 8007890:	d80f      	bhi.n	80078b2 <table_2d_get_value+0xa6>
 8007892:	f202 1111 	addw	r1, r2, #273	@ 0x111
 8007896:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800789a:	edd1 7a00 	vldr	s15, [r1]
 800789e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a6:	d804      	bhi.n	80078b2 <table_2d_get_value+0xa6>
    {
        y_bin++;
 80078a8:	3201      	adds	r2, #1
 80078aa:	b2d2      	uxtb	r2, r2
 80078ac:	e7ef      	b.n	800788e <table_2d_get_value+0x82>
    uint8_t x_bin_next = (x_bin < num_x_bins - 1) ? x_bin + 1 : x_bin;
 80078ae:	469c      	mov	ip, r3
 80078b0:	e7ec      	b.n	800788c <table_2d_get_value+0x80>
    }
    uint8_t y_bin_next = (y_bin < num_y_bins - 1) ? y_bin + 1 : y_bin;
 80078b2:	2a0e      	cmp	r2, #14
 80078b4:	d802      	bhi.n	80078bc <table_2d_get_value+0xb0>
 80078b6:	1c51      	adds	r1, r2, #1
 80078b8:	b2c9      	uxtb	r1, r1
 80078ba:	e000      	b.n	80078be <table_2d_get_value+0xb2>
 80078bc:	4611      	mov	r1, r2

    // Get bin edges
    float x0 = table->x_bins[x_bin];
 80078be:	f503 7e80 	add.w	lr, r3, #256	@ 0x100
 80078c2:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80078c6:	ed9e 4a00 	vldr	s8, [lr]
    float x1 = table->x_bins[x_bin_next];
 80078ca:	f50c 7e80 	add.w	lr, ip, #256	@ 0x100
 80078ce:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80078d2:	ed9e 5a00 	vldr	s10, [lr]
    float y0 = table->y_bins[y_bin];
 80078d6:	f502 7e88 	add.w	lr, r2, #272	@ 0x110
 80078da:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80078de:	edde 4a00 	vldr	s9, [lr]
    float y1 = table->y_bins[y_bin_next];
 80078e2:	f501 7e88 	add.w	lr, r1, #272	@ 0x110
 80078e6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80078ea:	ed9e 6a00 	vldr	s12, [lr]

    // Get table values at corners
    float q11 = table->data[x_bin][y_bin];
 80078ee:	eb02 1e03 	add.w	lr, r2, r3, lsl #4
 80078f2:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80078f6:	edde 7a00 	vldr	s15, [lr]
    float q21 = table->data[x_bin_next][y_bin];
 80078fa:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 80078fe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007902:	edd2 5a00 	vldr	s11, [r2]
    float q12 = table->data[x_bin][y_bin_next];
 8007906:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800790a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800790e:	ed93 3a00 	vldr	s6, [r3]
    float q22 = table->data[x_bin_next][y_bin_next];
 8007912:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8007916:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800791a:	edd0 3a00 	vldr	s7, [r0]

    // Handle edge cases (avoid division by zero)
    float x_frac = (x1 != x0) ? (x - x0) / (x1 - x0) : 0.0f;
 800791e:	eeb4 4a45 	vcmp.f32	s8, s10
 8007922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007926:	d006      	beq.n	8007936 <table_2d_get_value+0x12a>
 8007928:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800792c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007930:	ee86 0a85 	vdiv.f32	s0, s13, s10
 8007934:	e001      	b.n	800793a <table_2d_get_value+0x12e>
 8007936:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8007994 <table_2d_get_value+0x188>
    float y_frac = (y1 != y0) ? (y - y0) / (y1 - y0) : 0.0f;
 800793a:	eef4 4a46 	vcmp.f32	s9, s12
 800793e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007942:	d006      	beq.n	8007952 <table_2d_get_value+0x146>
 8007944:	ee37 7a64 	vsub.f32	s14, s14, s9
 8007948:	ee76 6a64 	vsub.f32	s13, s12, s9
 800794c:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8007950:	e001      	b.n	8007956 <table_2d_get_value+0x14a>
 8007952:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8007994 <table_2d_get_value+0x188>

    // Bilinear interpolation
    float interp =
        q11 * (1 - x_frac) * (1 - y_frac) +
 8007956:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800795a:	ee77 6a40 	vsub.f32	s13, s14, s0
 800795e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007962:	ee37 7a46 	vsub.f32	s14, s14, s12
 8007966:	ee67 7a87 	vmul.f32	s15, s15, s14
        q21 * x_frac * (1 - y_frac) +
 800796a:	ee60 5a25 	vmul.f32	s11, s0, s11
 800796e:	ee27 7a25 	vmul.f32	s14, s14, s11
        q11 * (1 - x_frac) * (1 - y_frac) +
 8007972:	ee77 7a87 	vadd.f32	s15, s15, s14
        q12 * (1 - x_frac) * y_frac +
 8007976:	ee66 6a83 	vmul.f32	s13, s13, s6
 800797a:	ee66 6a86 	vmul.f32	s13, s13, s12
        q21 * x_frac * (1 - y_frac) +
 800797e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        q22 * x_frac * y_frac;
 8007982:	ee20 0a23 	vmul.f32	s0, s0, s7
 8007986:	ee20 0a06 	vmul.f32	s0, s0, s12

    return interp;
}
 800798a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800798e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007992:	bf00      	nop
 8007994:	00000000 	.word	0x00000000

08007998 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007998:	4b08      	ldr	r3, [pc, #32]	@ (80079bc <prvResetNextTaskUnblockTime+0x24>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	b923      	cbnz	r3, 80079aa <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079a0:	4b07      	ldr	r3, [pc, #28]	@ (80079c0 <prvResetNextTaskUnblockTime+0x28>)
 80079a2:	f04f 32ff 	mov.w	r2, #4294967295
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079aa:	4b04      	ldr	r3, [pc, #16]	@ (80079bc <prvResetNextTaskUnblockTime+0x24>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	4b02      	ldr	r3, [pc, #8]	@ (80079c0 <prvResetNextTaskUnblockTime+0x28>)
 80079b6:	601a      	str	r2, [r3, #0]
	}
}
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	200064d8 	.word	0x200064d8
 80079c0:	20006470 	.word	0x20006470

080079c4 <prvInitialiseNewTask>:
{
 80079c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c8:	4680      	mov	r8, r0
 80079ca:	460d      	mov	r5, r1
 80079cc:	4617      	mov	r7, r2
 80079ce:	4699      	mov	r9, r3
 80079d0:	9e08      	ldr	r6, [sp, #32]
 80079d2:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80079d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079d8:	0092      	lsls	r2, r2, #2
 80079da:	21a5      	movs	r1, #165	@ 0xa5
 80079dc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80079de:	f003 f807 	bl	800a9f0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80079e4:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 80079e8:	3a01      	subs	r2, #1
 80079ea:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079ee:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 80079f2:	b3a5      	cbz	r5, 8007a5e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079f4:	f04f 0c00 	mov.w	ip, #0
 80079f8:	f1bc 0f0f 	cmp.w	ip, #15
 80079fc:	d809      	bhi.n	8007a12 <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079fe:	f815 300c 	ldrb.w	r3, [r5, ip]
 8007a02:	eb04 020c 	add.w	r2, r4, ip
 8007a06:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8007a0a:	b113      	cbz	r3, 8007a12 <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a0c:	f10c 0c01 	add.w	ip, ip, #1
 8007a10:	e7f2      	b.n	80079f8 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a12:	2300      	movs	r3, #0
 8007a14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a18:	2e37      	cmp	r6, #55	@ 0x37
 8007a1a:	d900      	bls.n	8007a1e <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a1c:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8007a1e:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007a20:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a22:	2500      	movs	r5, #0
 8007a24:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a26:	1d20      	adds	r0, r4, #4
 8007a28:	f7fb f80f 	bl	8002a4a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a2c:	f104 0018 	add.w	r0, r4, #24
 8007a30:	f7fb f80b 	bl	8002a4a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a34:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a36:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8007a3a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a3c:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8007a3e:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a40:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a44:	464a      	mov	r2, r9
 8007a46:	4641      	mov	r1, r8
 8007a48:	4638      	mov	r0, r7
 8007a4a:	f7fb f987 	bl	8002d5c <pxPortInitialiseStack>
 8007a4e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007a50:	f1ba 0f00 	cmp.w	sl, #0
 8007a54:	d001      	beq.n	8007a5a <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a56:	f8ca 4000 	str.w	r4, [sl]
}
 8007a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8007a64:	e7d8      	b.n	8007a18 <prvInitialiseNewTask+0x54>
	...

08007a68 <prvInitialiseTaskLists>:
{
 8007a68:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a6a:	2400      	movs	r4, #0
 8007a6c:	e007      	b.n	8007a7e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a6e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8007a72:	0093      	lsls	r3, r2, #2
 8007a74:	480e      	ldr	r0, [pc, #56]	@ (8007ab0 <prvInitialiseTaskLists+0x48>)
 8007a76:	4418      	add	r0, r3
 8007a78:	f7fa ffdc 	bl	8002a34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a7c:	3401      	adds	r4, #1
 8007a7e:	2c37      	cmp	r4, #55	@ 0x37
 8007a80:	d9f5      	bls.n	8007a6e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8007a82:	4d0c      	ldr	r5, [pc, #48]	@ (8007ab4 <prvInitialiseTaskLists+0x4c>)
 8007a84:	4628      	mov	r0, r5
 8007a86:	f7fa ffd5 	bl	8002a34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a8a:	4c0b      	ldr	r4, [pc, #44]	@ (8007ab8 <prvInitialiseTaskLists+0x50>)
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f7fa ffd1 	bl	8002a34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a92:	480a      	ldr	r0, [pc, #40]	@ (8007abc <prvInitialiseTaskLists+0x54>)
 8007a94:	f7fa ffce 	bl	8002a34 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007a98:	4809      	ldr	r0, [pc, #36]	@ (8007ac0 <prvInitialiseTaskLists+0x58>)
 8007a9a:	f7fa ffcb 	bl	8002a34 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8007a9e:	4809      	ldr	r0, [pc, #36]	@ (8007ac4 <prvInitialiseTaskLists+0x5c>)
 8007aa0:	f7fa ffc8 	bl	8002a34 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8007aa4:	4b08      	ldr	r3, [pc, #32]	@ (8007ac8 <prvInitialiseTaskLists+0x60>)
 8007aa6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007aa8:	4b08      	ldr	r3, [pc, #32]	@ (8007acc <prvInitialiseTaskLists+0x64>)
 8007aaa:	601c      	str	r4, [r3, #0]
}
 8007aac:	bd38      	pop	{r3, r4, r5, pc}
 8007aae:	bf00      	nop
 8007ab0:	20006504 	.word	0x20006504
 8007ab4:	200064f0 	.word	0x200064f0
 8007ab8:	200064dc 	.word	0x200064dc
 8007abc:	200064c0 	.word	0x200064c0
 8007ac0:	200064ac 	.word	0x200064ac
 8007ac4:	20006494 	.word	0x20006494
 8007ac8:	200064d8 	.word	0x200064d8
 8007acc:	200064d4 	.word	0x200064d4

08007ad0 <prvAddNewTaskToReadyList>:
{
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007ad4:	f7fb f96e 	bl	8002db4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8007ad8:	4a22      	ldr	r2, [pc, #136]	@ (8007b64 <prvAddNewTaskToReadyList+0x94>)
 8007ada:	6813      	ldr	r3, [r2, #0]
 8007adc:	3301      	adds	r3, #1
 8007ade:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ae0:	4b21      	ldr	r3, [pc, #132]	@ (8007b68 <prvAddNewTaskToReadyList+0x98>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	b15b      	cbz	r3, 8007afe <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8007ae6:	4b21      	ldr	r3, [pc, #132]	@ (8007b6c <prvAddNewTaskToReadyList+0x9c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	b96b      	cbnz	r3, 8007b08 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007aec:	4b1e      	ldr	r3, [pc, #120]	@ (8007b68 <prvAddNewTaskToReadyList+0x98>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d807      	bhi.n	8007b08 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8007af8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b68 <prvAddNewTaskToReadyList+0x98>)
 8007afa:	601c      	str	r4, [r3, #0]
 8007afc:	e004      	b.n	8007b08 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8007afe:	4b1a      	ldr	r3, [pc, #104]	@ (8007b68 <prvAddNewTaskToReadyList+0x98>)
 8007b00:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b02:	6813      	ldr	r3, [r2, #0]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d029      	beq.n	8007b5c <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8007b08:	4a19      	ldr	r2, [pc, #100]	@ (8007b70 <prvAddNewTaskToReadyList+0xa0>)
 8007b0a:	6813      	ldr	r3, [r2, #0]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b10:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007b12:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007b14:	4b17      	ldr	r3, [pc, #92]	@ (8007b74 <prvAddNewTaskToReadyList+0xa4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4298      	cmp	r0, r3
 8007b1a:	d901      	bls.n	8007b20 <prvAddNewTaskToReadyList+0x50>
 8007b1c:	4b15      	ldr	r3, [pc, #84]	@ (8007b74 <prvAddNewTaskToReadyList+0xa4>)
 8007b1e:	6018      	str	r0, [r3, #0]
 8007b20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007b24:	1d21      	adds	r1, r4, #4
 8007b26:	4b14      	ldr	r3, [pc, #80]	@ (8007b78 <prvAddNewTaskToReadyList+0xa8>)
 8007b28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007b2c:	f7fa ff90 	bl	8002a50 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007b30:	f7fb f962 	bl	8002df8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007b34:	4b0d      	ldr	r3, [pc, #52]	@ (8007b6c <prvAddNewTaskToReadyList+0x9c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	b17b      	cbz	r3, 8007b5a <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b68 <prvAddNewTaskToReadyList+0x98>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d209      	bcs.n	8007b5a <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8007b46:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007b4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b4e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	f3bf 8f6f 	isb	sy
}
 8007b5a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8007b5c:	f7ff ff84 	bl	8007a68 <prvInitialiseTaskLists>
 8007b60:	e7d2      	b.n	8007b08 <prvAddNewTaskToReadyList+0x38>
 8007b62:	bf00      	nop
 8007b64:	20006490 	.word	0x20006490
 8007b68:	20006964 	.word	0x20006964
 8007b6c:	20006484 	.word	0x20006484
 8007b70:	20006474 	.word	0x20006474
 8007b74:	20006488 	.word	0x20006488
 8007b78:	20006504 	.word	0x20006504

08007b7c <prvDeleteTCB>:
	{
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b80:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 8007b84:	b163      	cbz	r3, 8007ba0 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d011      	beq.n	8007bae <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d00e      	beq.n	8007bac <prvDeleteTCB+0x30>
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	e7fe      	b.n	8007b9e <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8007ba0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8007ba2:	f7fa fd19 	bl	80025d8 <vPortFree>
				vPortFree( pxTCB );
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f7fa fd16 	bl	80025d8 <vPortFree>
	}
 8007bac:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8007bae:	f7fa fd13 	bl	80025d8 <vPortFree>
 8007bb2:	e7fb      	b.n	8007bac <prvDeleteTCB+0x30>

08007bb4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8007bf4 <prvCheckTasksWaitingTermination+0x40>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	b1d3      	cbz	r3, 8007bf0 <prvCheckTasksWaitingTermination+0x3c>
{
 8007bba:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8007bbc:	f7fb f8fa 	bl	8002db4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf8 <prvCheckTasksWaitingTermination+0x44>)
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bc6:	1d20      	adds	r0, r4, #4
 8007bc8:	f7fa ff66 	bl	8002a98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8007bfc <prvCheckTasksWaitingTermination+0x48>)
 8007bce:	6813      	ldr	r3, [r2, #0]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007bd4:	4a07      	ldr	r2, [pc, #28]	@ (8007bf4 <prvCheckTasksWaitingTermination+0x40>)
 8007bd6:	6813      	ldr	r3, [r2, #0]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8007bdc:	f7fb f90c 	bl	8002df8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007be0:	4620      	mov	r0, r4
 8007be2:	f7ff ffcb 	bl	8007b7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007be6:	4b03      	ldr	r3, [pc, #12]	@ (8007bf4 <prvCheckTasksWaitingTermination+0x40>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1e6      	bne.n	8007bbc <prvCheckTasksWaitingTermination+0x8>
}
 8007bee:	bd10      	pop	{r4, pc}
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	200064a8 	.word	0x200064a8
 8007bf8:	200064ac 	.word	0x200064ac
 8007bfc:	20006490 	.word	0x20006490

08007c00 <prvIdleTask>:
{
 8007c00:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8007c02:	f7ff ffd7 	bl	8007bb4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c06:	4b07      	ldr	r3, [pc, #28]	@ (8007c24 <prvIdleTask+0x24>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d9f9      	bls.n	8007c02 <prvIdleTask+0x2>
				taskYIELD();
 8007c0e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c16:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	e7ee      	b.n	8007c02 <prvIdleTask+0x2>
 8007c24:	20006504 	.word	0x20006504

08007c28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c2e:	4b17      	ldr	r3, [pc, #92]	@ (8007c8c <prvAddCurrentTaskToDelayedList+0x64>)
 8007c30:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c32:	4b17      	ldr	r3, [pc, #92]	@ (8007c90 <prvAddCurrentTaskToDelayedList+0x68>)
 8007c34:	6818      	ldr	r0, [r3, #0]
 8007c36:	3004      	adds	r0, #4
 8007c38:	f7fa ff2e 	bl	8002a98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c3c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007c40:	d00d      	beq.n	8007c5e <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c42:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c44:	4b12      	ldr	r3, [pc, #72]	@ (8007c90 <prvAddCurrentTaskToDelayedList+0x68>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8007c4a:	42a6      	cmp	r6, r4
 8007c4c:	d910      	bls.n	8007c70 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c4e:	4b11      	ldr	r3, [pc, #68]	@ (8007c94 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	4b0f      	ldr	r3, [pc, #60]	@ (8007c90 <prvAddCurrentTaskToDelayedList+0x68>)
 8007c54:	6819      	ldr	r1, [r3, #0]
 8007c56:	3104      	adds	r1, #4
 8007c58:	f7fa ff05 	bl	8002a66 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c5c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c5e:	2d00      	cmp	r5, #0
 8007c60:	d0ef      	beq.n	8007c42 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c62:	4b0b      	ldr	r3, [pc, #44]	@ (8007c90 <prvAddCurrentTaskToDelayedList+0x68>)
 8007c64:	6819      	ldr	r1, [r3, #0]
 8007c66:	3104      	adds	r1, #4
 8007c68:	480b      	ldr	r0, [pc, #44]	@ (8007c98 <prvAddCurrentTaskToDelayedList+0x70>)
 8007c6a:	f7fa fef1 	bl	8002a50 <vListInsertEnd>
 8007c6e:	e7f5      	b.n	8007c5c <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c70:	4b0a      	ldr	r3, [pc, #40]	@ (8007c9c <prvAddCurrentTaskToDelayedList+0x74>)
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	4b06      	ldr	r3, [pc, #24]	@ (8007c90 <prvAddCurrentTaskToDelayedList+0x68>)
 8007c76:	6819      	ldr	r1, [r3, #0]
 8007c78:	3104      	adds	r1, #4
 8007c7a:	f7fa fef4 	bl	8002a66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c7e:	4b08      	ldr	r3, [pc, #32]	@ (8007ca0 <prvAddCurrentTaskToDelayedList+0x78>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	42a3      	cmp	r3, r4
 8007c84:	d9ea      	bls.n	8007c5c <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8007c86:	4b06      	ldr	r3, [pc, #24]	@ (8007ca0 <prvAddCurrentTaskToDelayedList+0x78>)
 8007c88:	601c      	str	r4, [r3, #0]
}
 8007c8a:	e7e7      	b.n	8007c5c <prvAddCurrentTaskToDelayedList+0x34>
 8007c8c:	2000648c 	.word	0x2000648c
 8007c90:	20006964 	.word	0x20006964
 8007c94:	200064d4 	.word	0x200064d4
 8007c98:	20006494 	.word	0x20006494
 8007c9c:	200064d8 	.word	0x200064d8
 8007ca0:	20006470 	.word	0x20006470

08007ca4 <xTaskCreateStatic>:
	{
 8007ca4:	b530      	push	{r4, r5, lr}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007caa:	b17c      	cbz	r4, 8007ccc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007cac:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007cae:	b1b5      	cbz	r5, 8007cde <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cb0:	255c      	movs	r5, #92	@ 0x5c
 8007cb2:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007cb4:	9d04      	ldr	r5, [sp, #16]
 8007cb6:	2d5c      	cmp	r5, #92	@ 0x5c
 8007cb8:	d01a      	beq.n	8007cf0 <xTaskCreateStatic+0x4c>
 8007cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	e7fe      	b.n	8007cca <xTaskCreateStatic+0x26>
 8007ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8007cdc:	e7fe      	b.n	8007cdc <xTaskCreateStatic+0x38>
 8007cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8007cee:	e7fe      	b.n	8007cee <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007cf0:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cf2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007cf4:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cf6:	2402      	movs	r4, #2
 8007cf8:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007cfc:	2400      	movs	r4, #0
 8007cfe:	9403      	str	r4, [sp, #12]
 8007d00:	9502      	str	r5, [sp, #8]
 8007d02:	ac05      	add	r4, sp, #20
 8007d04:	9401      	str	r4, [sp, #4]
 8007d06:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007d08:	9400      	str	r4, [sp, #0]
 8007d0a:	f7ff fe5b 	bl	80079c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d0e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007d10:	f7ff fede 	bl	8007ad0 <prvAddNewTaskToReadyList>
	}
 8007d14:	9805      	ldr	r0, [sp, #20]
 8007d16:	b007      	add	sp, #28
 8007d18:	bd30      	pop	{r4, r5, pc}

08007d1a <xTaskCreate>:
	{
 8007d1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	4607      	mov	r7, r0
 8007d22:	4688      	mov	r8, r1
 8007d24:	4614      	mov	r4, r2
 8007d26:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d28:	0090      	lsls	r0, r2, #2
 8007d2a:	f7fa fbd3 	bl	80024d4 <pvPortMalloc>
			if( pxStack != NULL )
 8007d2e:	b308      	cbz	r0, 8007d74 <xTaskCreate+0x5a>
 8007d30:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d32:	205c      	movs	r0, #92	@ 0x5c
 8007d34:	f7fa fbce 	bl	80024d4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007d38:	4605      	mov	r5, r0
 8007d3a:	b1a8      	cbz	r0, 8007d68 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8007d3c:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d40:	2300      	movs	r3, #0
 8007d42:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d46:	9303      	str	r3, [sp, #12]
 8007d48:	9002      	str	r0, [sp, #8]
 8007d4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d4c:	9301      	str	r3, [sp, #4]
 8007d4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	4633      	mov	r3, r6
 8007d54:	4622      	mov	r2, r4
 8007d56:	4641      	mov	r1, r8
 8007d58:	4638      	mov	r0, r7
 8007d5a:	f7ff fe33 	bl	80079c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f7ff feb6 	bl	8007ad0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d64:	2001      	movs	r0, #1
 8007d66:	e007      	b.n	8007d78 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8007d68:	4648      	mov	r0, r9
 8007d6a:	f7fa fc35 	bl	80025d8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d72:	e001      	b.n	8007d78 <xTaskCreate+0x5e>
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8007d78:	b005      	add	sp, #20
 8007d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08007d80 <vTaskStartScheduler>:
{
 8007d80:	b510      	push	{r4, lr}
 8007d82:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d84:	2400      	movs	r4, #0
 8007d86:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d88:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d8a:	aa07      	add	r2, sp, #28
 8007d8c:	a906      	add	r1, sp, #24
 8007d8e:	a805      	add	r0, sp, #20
 8007d90:	f7f9 fa8a 	bl	80012a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d94:	9b05      	ldr	r3, [sp, #20]
 8007d96:	9302      	str	r3, [sp, #8]
 8007d98:	9b06      	ldr	r3, [sp, #24]
 8007d9a:	9301      	str	r3, [sp, #4]
 8007d9c:	9400      	str	r4, [sp, #0]
 8007d9e:	4623      	mov	r3, r4
 8007da0:	9a07      	ldr	r2, [sp, #28]
 8007da2:	4917      	ldr	r1, [pc, #92]	@ (8007e00 <vTaskStartScheduler+0x80>)
 8007da4:	4817      	ldr	r0, [pc, #92]	@ (8007e04 <vTaskStartScheduler+0x84>)
 8007da6:	f7ff ff7d 	bl	8007ca4 <xTaskCreateStatic>
 8007daa:	4b17      	ldr	r3, [pc, #92]	@ (8007e08 <vTaskStartScheduler+0x88>)
 8007dac:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8007dae:	b1c0      	cbz	r0, 8007de2 <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 8007db0:	f000 fe20 	bl	80089f4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8007db4:	2801      	cmp	r0, #1
 8007db6:	d115      	bne.n	8007de4 <vTaskStartScheduler+0x64>
 8007db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8007dc8:	4b10      	ldr	r3, [pc, #64]	@ (8007e0c <vTaskStartScheduler+0x8c>)
 8007dca:	f04f 32ff 	mov.w	r2, #4294967295
 8007dce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8007e10 <vTaskStartScheduler+0x90>)
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8007e14 <vTaskStartScheduler+0x94>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007ddc:	f7fb f884 	bl	8002ee8 <xPortStartScheduler>
		}
 8007de0:	e003      	b.n	8007dea <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 8007de2:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007de4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007de8:	d001      	beq.n	8007dee <vTaskStartScheduler+0x6e>
}
 8007dea:	b008      	add	sp, #32
 8007dec:	bd10      	pop	{r4, pc}
 8007dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007dfe:	e7fe      	b.n	8007dfe <vTaskStartScheduler+0x7e>
 8007e00:	0800bc20 	.word	0x0800bc20
 8007e04:	08007c01 	.word	0x08007c01
 8007e08:	2000646c 	.word	0x2000646c
 8007e0c:	20006470 	.word	0x20006470
 8007e10:	20006484 	.word	0x20006484
 8007e14:	2000648c 	.word	0x2000648c

08007e18 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007e18:	4a02      	ldr	r2, [pc, #8]	@ (8007e24 <vTaskSuspendAll+0xc>)
 8007e1a:	6813      	ldr	r3, [r2, #0]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	6013      	str	r3, [r2, #0]
}
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	20006468 	.word	0x20006468

08007e28 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007e28:	4b01      	ldr	r3, [pc, #4]	@ (8007e30 <xTaskGetTickCount+0x8>)
 8007e2a:	6818      	ldr	r0, [r3, #0]
}
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	2000648c 	.word	0x2000648c

08007e34 <xTaskIncrementTick>:
{
 8007e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e36:	4b3a      	ldr	r3, [pc, #232]	@ (8007f20 <xTaskIncrementTick+0xec>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d169      	bne.n	8007f12 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e3e:	4b39      	ldr	r3, [pc, #228]	@ (8007f24 <xTaskIncrementTick+0xf0>)
 8007e40:	681d      	ldr	r5, [r3, #0]
 8007e42:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8007e44:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e46:	b9c5      	cbnz	r5, 8007e7a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8007e48:	4b37      	ldr	r3, [pc, #220]	@ (8007f28 <xTaskIncrementTick+0xf4>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	b143      	cbz	r3, 8007e62 <xTaskIncrementTick+0x2e>
 8007e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	e7fe      	b.n	8007e60 <xTaskIncrementTick+0x2c>
 8007e62:	4a31      	ldr	r2, [pc, #196]	@ (8007f28 <xTaskIncrementTick+0xf4>)
 8007e64:	6811      	ldr	r1, [r2, #0]
 8007e66:	4b31      	ldr	r3, [pc, #196]	@ (8007f2c <xTaskIncrementTick+0xf8>)
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	6010      	str	r0, [r2, #0]
 8007e6c:	6019      	str	r1, [r3, #0]
 8007e6e:	4a30      	ldr	r2, [pc, #192]	@ (8007f30 <xTaskIncrementTick+0xfc>)
 8007e70:	6813      	ldr	r3, [r2, #0]
 8007e72:	3301      	adds	r3, #1
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	f7ff fd8f 	bl	8007998 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e7a:	4b2e      	ldr	r3, [pc, #184]	@ (8007f34 <xTaskIncrementTick+0x100>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	42ab      	cmp	r3, r5
 8007e80:	d93d      	bls.n	8007efe <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8007e82:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e84:	4b2c      	ldr	r3, [pc, #176]	@ (8007f38 <xTaskIncrementTick+0x104>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007e8e:	009a      	lsls	r2, r3, #2
 8007e90:	4b2a      	ldr	r3, [pc, #168]	@ (8007f3c <xTaskIncrementTick+0x108>)
 8007e92:	589b      	ldr	r3, [r3, r2]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d900      	bls.n	8007e9a <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8007e98:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8007e9a:	4b29      	ldr	r3, [pc, #164]	@ (8007f40 <xTaskIncrementTick+0x10c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d03c      	beq.n	8007f1c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8007ea2:	2701      	movs	r7, #1
	return xSwitchRequired;
 8007ea4:	e03a      	b.n	8007f1c <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8007ea6:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8007f28 <xTaskIncrementTick+0xf4>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	b343      	cbz	r3, 8007f02 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8007f28 <xTaskIncrementTick+0xf4>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007eb8:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8007eba:	429d      	cmp	r5, r3
 8007ebc:	d326      	bcc.n	8007f0c <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ebe:	1d26      	adds	r6, r4, #4
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	f7fa fde9 	bl	8002a98 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ec6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007ec8:	b11b      	cbz	r3, 8007ed2 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007eca:	f104 0018 	add.w	r0, r4, #24
 8007ece:	f7fa fde3 	bl	8002a98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ed2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8007f44 <xTaskIncrementTick+0x110>)
 8007ed6:	6812      	ldr	r2, [r2, #0]
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d901      	bls.n	8007ee0 <xTaskIncrementTick+0xac>
 8007edc:	4a19      	ldr	r2, [pc, #100]	@ (8007f44 <xTaskIncrementTick+0x110>)
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007ee4:	009a      	lsls	r2, r3, #2
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4814      	ldr	r0, [pc, #80]	@ (8007f3c <xTaskIncrementTick+0x108>)
 8007eea:	4410      	add	r0, r2
 8007eec:	f7fa fdb0 	bl	8002a50 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ef0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007ef2:	4b11      	ldr	r3, [pc, #68]	@ (8007f38 <xTaskIncrementTick+0x104>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d2d4      	bcs.n	8007ea6 <xTaskIncrementTick+0x72>
 8007efc:	e7d4      	b.n	8007ea8 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8007efe:	2700      	movs	r7, #0
 8007f00:	e7d2      	b.n	8007ea8 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f02:	4b0c      	ldr	r3, [pc, #48]	@ (8007f34 <xTaskIncrementTick+0x100>)
 8007f04:	f04f 32ff 	mov.w	r2, #4294967295
 8007f08:	601a      	str	r2, [r3, #0]
					break;
 8007f0a:	e7bb      	b.n	8007e84 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8007f0c:	4a09      	ldr	r2, [pc, #36]	@ (8007f34 <xTaskIncrementTick+0x100>)
 8007f0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f10:	e7b8      	b.n	8007e84 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8007f12:	4a0d      	ldr	r2, [pc, #52]	@ (8007f48 <xTaskIncrementTick+0x114>)
 8007f14:	6813      	ldr	r3, [r2, #0]
 8007f16:	3301      	adds	r3, #1
 8007f18:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007f1a:	2700      	movs	r7, #0
}
 8007f1c:	4638      	mov	r0, r7
 8007f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f20:	20006468 	.word	0x20006468
 8007f24:	2000648c 	.word	0x2000648c
 8007f28:	200064d8 	.word	0x200064d8
 8007f2c:	200064d4 	.word	0x200064d4
 8007f30:	20006478 	.word	0x20006478
 8007f34:	20006470 	.word	0x20006470
 8007f38:	20006964 	.word	0x20006964
 8007f3c:	20006504 	.word	0x20006504
 8007f40:	2000647c 	.word	0x2000647c
 8007f44:	20006488 	.word	0x20006488
 8007f48:	20006480 	.word	0x20006480

08007f4c <xTaskResumeAll>:
{
 8007f4c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8007f4e:	4b35      	ldr	r3, [pc, #212]	@ (8008024 <xTaskResumeAll+0xd8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	b943      	cbnz	r3, 8007f66 <xTaskResumeAll+0x1a>
 8007f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	e7fe      	b.n	8007f64 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8007f66:	f7fa ff25 	bl	8002db4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8008024 <xTaskResumeAll+0xd8>)
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	3a01      	subs	r2, #1
 8007f70:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d14f      	bne.n	8008018 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f78:	4b2b      	ldr	r3, [pc, #172]	@ (8008028 <xTaskResumeAll+0xdc>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	b90b      	cbnz	r3, 8007f82 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8007f7e:	2400      	movs	r4, #0
 8007f80:	e04b      	b.n	800801a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8007f82:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f84:	4b29      	ldr	r3, [pc, #164]	@ (800802c <xTaskResumeAll+0xe0>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	b31b      	cbz	r3, 8007fd2 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f8a:	4b28      	ldr	r3, [pc, #160]	@ (800802c <xTaskResumeAll+0xe0>)
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f90:	f104 0018 	add.w	r0, r4, #24
 8007f94:	f7fa fd80 	bl	8002a98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f98:	1d25      	adds	r5, r4, #4
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f7fa fd7c 	bl	8002a98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fa0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007fa2:	4b23      	ldr	r3, [pc, #140]	@ (8008030 <xTaskResumeAll+0xe4>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4298      	cmp	r0, r3
 8007fa8:	d901      	bls.n	8007fae <xTaskResumeAll+0x62>
 8007faa:	4b21      	ldr	r3, [pc, #132]	@ (8008030 <xTaskResumeAll+0xe4>)
 8007fac:	6018      	str	r0, [r3, #0]
 8007fae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8008034 <xTaskResumeAll+0xe8>)
 8007fb6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007fba:	f7fa fd49 	bl	8002a50 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fbe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8008038 <xTaskResumeAll+0xec>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d3dc      	bcc.n	8007f84 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8007fca:	4b1c      	ldr	r3, [pc, #112]	@ (800803c <xTaskResumeAll+0xf0>)
 8007fcc:	2201      	movs	r2, #1
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	e7d8      	b.n	8007f84 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8007fd2:	b10c      	cbz	r4, 8007fd8 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8007fd4:	f7ff fce0 	bl	8007998 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007fd8:	4b19      	ldr	r3, [pc, #100]	@ (8008040 <xTaskResumeAll+0xf4>)
 8007fda:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8007fdc:	b984      	cbnz	r4, 8008000 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8007fde:	4b17      	ldr	r3, [pc, #92]	@ (800803c <xTaskResumeAll+0xf0>)
 8007fe0:	681c      	ldr	r4, [r3, #0]
 8007fe2:	b1d4      	cbz	r4, 800801a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8007fe4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007fe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007ff8:	2401      	movs	r4, #1
 8007ffa:	e00e      	b.n	800801a <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ffc:	3c01      	subs	r4, #1
 8007ffe:	d007      	beq.n	8008010 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8008000:	f7ff ff18 	bl	8007e34 <xTaskIncrementTick>
 8008004:	2800      	cmp	r0, #0
 8008006:	d0f9      	beq.n	8007ffc <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8008008:	4b0c      	ldr	r3, [pc, #48]	@ (800803c <xTaskResumeAll+0xf0>)
 800800a:	2201      	movs	r2, #1
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	e7f5      	b.n	8007ffc <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8008010:	4b0b      	ldr	r3, [pc, #44]	@ (8008040 <xTaskResumeAll+0xf4>)
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	e7e2      	b.n	8007fde <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8008018:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800801a:	f7fa feed 	bl	8002df8 <vPortExitCritical>
}
 800801e:	4620      	mov	r0, r4
 8008020:	bd38      	pop	{r3, r4, r5, pc}
 8008022:	bf00      	nop
 8008024:	20006468 	.word	0x20006468
 8008028:	20006490 	.word	0x20006490
 800802c:	200064c0 	.word	0x200064c0
 8008030:	20006488 	.word	0x20006488
 8008034:	20006504 	.word	0x20006504
 8008038:	20006964 	.word	0x20006964
 800803c:	2000647c 	.word	0x2000647c
 8008040:	20006480 	.word	0x20006480

08008044 <vTaskDelay>:
	{
 8008044:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008046:	b1a8      	cbz	r0, 8008074 <vTaskDelay+0x30>
 8008048:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800804a:	4b10      	ldr	r3, [pc, #64]	@ (800808c <vTaskDelay+0x48>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	b143      	cbz	r3, 8008062 <vTaskDelay+0x1e>
 8008050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	e7fe      	b.n	8008060 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8008062:	f7ff fed9 	bl	8007e18 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008066:	2100      	movs	r1, #0
 8008068:	4620      	mov	r0, r4
 800806a:	f7ff fddd 	bl	8007c28 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800806e:	f7ff ff6d 	bl	8007f4c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008072:	b948      	cbnz	r0, 8008088 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8008074:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800807c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	f3bf 8f6f 	isb	sy
	}
 8008088:	bd10      	pop	{r4, pc}
 800808a:	bf00      	nop
 800808c:	20006468 	.word	0x20006468

08008090 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008090:	4b20      	ldr	r3, [pc, #128]	@ (8008114 <vTaskSwitchContext+0x84>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	b11b      	cbz	r3, 800809e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8008096:	4b20      	ldr	r3, [pc, #128]	@ (8008118 <vTaskSwitchContext+0x88>)
 8008098:	2201      	movs	r2, #1
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800809e:	4b1e      	ldr	r3, [pc, #120]	@ (8008118 <vTaskSwitchContext+0x88>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a4:	4b1d      	ldr	r3, [pc, #116]	@ (800811c <vTaskSwitchContext+0x8c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80080ac:	008a      	lsls	r2, r1, #2
 80080ae:	491c      	ldr	r1, [pc, #112]	@ (8008120 <vTaskSwitchContext+0x90>)
 80080b0:	588a      	ldr	r2, [r1, r2]
 80080b2:	b95a      	cbnz	r2, 80080cc <vTaskSwitchContext+0x3c>
 80080b4:	b10b      	cbz	r3, 80080ba <vTaskSwitchContext+0x2a>
 80080b6:	3b01      	subs	r3, #1
 80080b8:	e7f6      	b.n	80080a8 <vTaskSwitchContext+0x18>
 80080ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	e7fe      	b.n	80080ca <vTaskSwitchContext+0x3a>
 80080cc:	4608      	mov	r0, r1
 80080ce:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80080d2:	008a      	lsls	r2, r1, #2
 80080d4:	4402      	add	r2, r0
 80080d6:	6851      	ldr	r1, [r2, #4]
 80080d8:	6849      	ldr	r1, [r1, #4]
 80080da:	6051      	str	r1, [r2, #4]
 80080dc:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80080e0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80080e4:	3208      	adds	r2, #8
 80080e6:	4402      	add	r2, r0
 80080e8:	4291      	cmp	r1, r2
 80080ea:	d00b      	beq.n	8008104 <vTaskSwitchContext+0x74>
 80080ec:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80080f0:	0091      	lsls	r1, r2, #2
 80080f2:	4a0b      	ldr	r2, [pc, #44]	@ (8008120 <vTaskSwitchContext+0x90>)
 80080f4:	440a      	add	r2, r1
 80080f6:	6852      	ldr	r2, [r2, #4]
 80080f8:	68d1      	ldr	r1, [r2, #12]
 80080fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008124 <vTaskSwitchContext+0x94>)
 80080fc:	6011      	str	r1, [r2, #0]
 80080fe:	4a07      	ldr	r2, [pc, #28]	@ (800811c <vTaskSwitchContext+0x8c>)
 8008100:	6013      	str	r3, [r2, #0]
}
 8008102:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008104:	6848      	ldr	r0, [r1, #4]
 8008106:	4662      	mov	r2, ip
 8008108:	0091      	lsls	r1, r2, #2
 800810a:	4a05      	ldr	r2, [pc, #20]	@ (8008120 <vTaskSwitchContext+0x90>)
 800810c:	440a      	add	r2, r1
 800810e:	6050      	str	r0, [r2, #4]
 8008110:	e7ec      	b.n	80080ec <vTaskSwitchContext+0x5c>
 8008112:	bf00      	nop
 8008114:	20006468 	.word	0x20006468
 8008118:	2000647c 	.word	0x2000647c
 800811c:	20006488 	.word	0x20006488
 8008120:	20006504 	.word	0x20006504
 8008124:	20006964 	.word	0x20006964

08008128 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8008128:	b158      	cbz	r0, 8008142 <vTaskPlaceOnEventList+0x1a>
{
 800812a:	b510      	push	{r4, lr}
 800812c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800812e:	4a09      	ldr	r2, [pc, #36]	@ (8008154 <vTaskPlaceOnEventList+0x2c>)
 8008130:	6811      	ldr	r1, [r2, #0]
 8008132:	3118      	adds	r1, #24
 8008134:	f7fa fc97 	bl	8002a66 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008138:	2101      	movs	r1, #1
 800813a:	4620      	mov	r0, r4
 800813c:	f7ff fd74 	bl	8007c28 <prvAddCurrentTaskToDelayedList>
}
 8008140:	bd10      	pop	{r4, pc}
 8008142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8008152:	e7fe      	b.n	8008152 <vTaskPlaceOnEventList+0x2a>
 8008154:	20006964 	.word	0x20006964

08008158 <vTaskPlaceOnEventListRestricted>:
	{
 8008158:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800815a:	b170      	cbz	r0, 800817a <vTaskPlaceOnEventListRestricted+0x22>
 800815c:	460d      	mov	r5, r1
 800815e:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008160:	4a0a      	ldr	r2, [pc, #40]	@ (800818c <vTaskPlaceOnEventListRestricted+0x34>)
 8008162:	6811      	ldr	r1, [r2, #0]
 8008164:	3118      	adds	r1, #24
 8008166:	f7fa fc73 	bl	8002a50 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800816a:	b10c      	cbz	r4, 8008170 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800816c:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008170:	4621      	mov	r1, r4
 8008172:	4628      	mov	r0, r5
 8008174:	f7ff fd58 	bl	8007c28 <prvAddCurrentTaskToDelayedList>
	}
 8008178:	bd38      	pop	{r3, r4, r5, pc}
 800817a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800818a:	e7fe      	b.n	800818a <vTaskPlaceOnEventListRestricted+0x32>
 800818c:	20006964 	.word	0x20006964

08008190 <xTaskRemoveFromEventList>:
{
 8008190:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008192:	68c3      	ldr	r3, [r0, #12]
 8008194:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008196:	b324      	cbz	r4, 80081e2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008198:	f104 0518 	add.w	r5, r4, #24
 800819c:	4628      	mov	r0, r5
 800819e:	f7fa fc7b 	bl	8002a98 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081a2:	4b18      	ldr	r3, [pc, #96]	@ (8008204 <xTaskRemoveFromEventList+0x74>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	bb2b      	cbnz	r3, 80081f4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081a8:	1d25      	adds	r5, r4, #4
 80081aa:	4628      	mov	r0, r5
 80081ac:	f7fa fc74 	bl	8002a98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081b0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80081b2:	4b15      	ldr	r3, [pc, #84]	@ (8008208 <xTaskRemoveFromEventList+0x78>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4298      	cmp	r0, r3
 80081b8:	d901      	bls.n	80081be <xTaskRemoveFromEventList+0x2e>
 80081ba:	4b13      	ldr	r3, [pc, #76]	@ (8008208 <xTaskRemoveFromEventList+0x78>)
 80081bc:	6018      	str	r0, [r3, #0]
 80081be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80081c2:	4629      	mov	r1, r5
 80081c4:	4b11      	ldr	r3, [pc, #68]	@ (800820c <xTaskRemoveFromEventList+0x7c>)
 80081c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80081ca:	f7fa fc41 	bl	8002a50 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80081d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008210 <xTaskRemoveFromEventList+0x80>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d911      	bls.n	80081fe <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80081da:	2001      	movs	r0, #1
 80081dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008214 <xTaskRemoveFromEventList+0x84>)
 80081de:	6018      	str	r0, [r3, #0]
}
 80081e0:	bd38      	pop	{r3, r4, r5, pc}
 80081e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80081f2:	e7fe      	b.n	80081f2 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081f4:	4629      	mov	r1, r5
 80081f6:	4808      	ldr	r0, [pc, #32]	@ (8008218 <xTaskRemoveFromEventList+0x88>)
 80081f8:	f7fa fc2a 	bl	8002a50 <vListInsertEnd>
 80081fc:	e7e7      	b.n	80081ce <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 80081fe:	2000      	movs	r0, #0
	return xReturn;
 8008200:	e7ee      	b.n	80081e0 <xTaskRemoveFromEventList+0x50>
 8008202:	bf00      	nop
 8008204:	20006468 	.word	0x20006468
 8008208:	20006488 	.word	0x20006488
 800820c:	20006504 	.word	0x20006504
 8008210:	20006964 	.word	0x20006964
 8008214:	2000647c 	.word	0x2000647c
 8008218:	200064c0 	.word	0x200064c0

0800821c <vTaskRemoveFromUnorderedEventList>:
{
 800821c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800821e:	4b1c      	ldr	r3, [pc, #112]	@ (8008290 <vTaskRemoveFromUnorderedEventList+0x74>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	b943      	cbnz	r3, 8008236 <vTaskRemoveFromUnorderedEventList+0x1a>
 8008224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	e7fe      	b.n	8008234 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008236:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 800823a:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800823c:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 800823e:	b1f4      	cbz	r4, 800827e <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 8008240:	f7fa fc2a 	bl	8002a98 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008244:	1d25      	adds	r5, r4, #4
 8008246:	4628      	mov	r0, r5
 8008248:	f7fa fc26 	bl	8002a98 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800824c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800824e:	4b11      	ldr	r3, [pc, #68]	@ (8008294 <vTaskRemoveFromUnorderedEventList+0x78>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4298      	cmp	r0, r3
 8008254:	d901      	bls.n	800825a <vTaskRemoveFromUnorderedEventList+0x3e>
 8008256:	4b0f      	ldr	r3, [pc, #60]	@ (8008294 <vTaskRemoveFromUnorderedEventList+0x78>)
 8008258:	6018      	str	r0, [r3, #0]
 800825a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800825e:	4629      	mov	r1, r5
 8008260:	4b0d      	ldr	r3, [pc, #52]	@ (8008298 <vTaskRemoveFromUnorderedEventList+0x7c>)
 8008262:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008266:	f7fa fbf3 	bl	8002a50 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800826a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800826c:	4b0b      	ldr	r3, [pc, #44]	@ (800829c <vTaskRemoveFromUnorderedEventList+0x80>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008272:	429a      	cmp	r2, r3
 8008274:	d902      	bls.n	800827c <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 8008276:	4b0a      	ldr	r3, [pc, #40]	@ (80082a0 <vTaskRemoveFromUnorderedEventList+0x84>)
 8008278:	2201      	movs	r2, #1
 800827a:	601a      	str	r2, [r3, #0]
}
 800827c:	bd38      	pop	{r3, r4, r5, pc}
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800828e:	e7fe      	b.n	800828e <vTaskRemoveFromUnorderedEventList+0x72>
 8008290:	20006468 	.word	0x20006468
 8008294:	20006488 	.word	0x20006488
 8008298:	20006504 	.word	0x20006504
 800829c:	20006964 	.word	0x20006964
 80082a0:	2000647c 	.word	0x2000647c

080082a4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082a4:	4b03      	ldr	r3, [pc, #12]	@ (80082b4 <vTaskInternalSetTimeOutState+0x10>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082aa:	4b03      	ldr	r3, [pc, #12]	@ (80082b8 <vTaskInternalSetTimeOutState+0x14>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6043      	str	r3, [r0, #4]
}
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	20006478 	.word	0x20006478
 80082b8:	2000648c 	.word	0x2000648c

080082bc <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 80082bc:	b1e0      	cbz	r0, 80082f8 <xTaskCheckForTimeOut+0x3c>
{
 80082be:	b570      	push	{r4, r5, r6, lr}
 80082c0:	460c      	mov	r4, r1
 80082c2:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80082c4:	b309      	cbz	r1, 800830a <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 80082c6:	f7fa fd75 	bl	8002db4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80082ca:	4b1c      	ldr	r3, [pc, #112]	@ (800833c <xTaskCheckForTimeOut+0x80>)
 80082cc:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082ce:	686b      	ldr	r3, [r5, #4]
 80082d0:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80082d2:	6822      	ldr	r2, [r4, #0]
 80082d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80082d8:	d028      	beq.n	800832c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082da:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8008340 <xTaskCheckForTimeOut+0x84>
 80082de:	f8dc c000 	ldr.w	ip, [ip]
 80082e2:	682e      	ldr	r6, [r5, #0]
 80082e4:	4566      	cmp	r6, ip
 80082e6:	d001      	beq.n	80082ec <xTaskCheckForTimeOut+0x30>
 80082e8:	428b      	cmp	r3, r1
 80082ea:	d924      	bls.n	8008336 <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082ec:	4282      	cmp	r2, r0
 80082ee:	d815      	bhi.n	800831c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80082f4:	2401      	movs	r4, #1
 80082f6:	e01a      	b.n	800832e <xTaskCheckForTimeOut+0x72>
 80082f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8008308:	e7fe      	b.n	8008308 <xTaskCheckForTimeOut+0x4c>
 800830a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800831a:	e7fe      	b.n	800831a <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 800831c:	1a5b      	subs	r3, r3, r1
 800831e:	4413      	add	r3, r2
 8008320:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008322:	4628      	mov	r0, r5
 8008324:	f7ff ffbe 	bl	80082a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008328:	2400      	movs	r4, #0
 800832a:	e000      	b.n	800832e <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 800832c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800832e:	f7fa fd63 	bl	8002df8 <vPortExitCritical>
}
 8008332:	4620      	mov	r0, r4
 8008334:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8008336:	2401      	movs	r4, #1
 8008338:	e7f9      	b.n	800832e <xTaskCheckForTimeOut+0x72>
 800833a:	bf00      	nop
 800833c:	2000648c 	.word	0x2000648c
 8008340:	20006478 	.word	0x20006478

08008344 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008344:	4b01      	ldr	r3, [pc, #4]	@ (800834c <vTaskMissedYield+0x8>)
 8008346:	2201      	movs	r2, #1
 8008348:	601a      	str	r2, [r3, #0]
}
 800834a:	4770      	bx	lr
 800834c:	2000647c 	.word	0x2000647c

08008350 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008350:	4b05      	ldr	r3, [pc, #20]	@ (8008368 <xTaskGetSchedulerState+0x18>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	b133      	cbz	r3, 8008364 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008356:	4b05      	ldr	r3, [pc, #20]	@ (800836c <xTaskGetSchedulerState+0x1c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	b10b      	cbz	r3, 8008360 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800835c:	2000      	movs	r0, #0
	}
 800835e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8008360:	2002      	movs	r0, #2
 8008362:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008364:	2001      	movs	r0, #1
 8008366:	4770      	bx	lr
 8008368:	20006484 	.word	0x20006484
 800836c:	20006468 	.word	0x20006468

08008370 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8008370:	2800      	cmp	r0, #0
 8008372:	d03b      	beq.n	80083ec <xTaskPriorityDisinherit+0x7c>
	{
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8008378:	4b1e      	ldr	r3, [pc, #120]	@ (80083f4 <xTaskPriorityDisinherit+0x84>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4283      	cmp	r3, r0
 800837e:	d008      	beq.n	8008392 <xTaskPriorityDisinherit+0x22>
 8008380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	e7fe      	b.n	8008390 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8008392:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008394:	b943      	cbnz	r3, 80083a8 <xTaskPriorityDisinherit+0x38>
 8008396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839a:	f383 8811 	msr	BASEPRI, r3
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f3bf 8f4f 	dsb	sy
 80083a6:	e7fe      	b.n	80083a6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80083a8:	3b01      	subs	r3, #1
 80083aa:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083ac:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80083ae:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80083b0:	4291      	cmp	r1, r2
 80083b2:	d01d      	beq.n	80083f0 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083b4:	b10b      	cbz	r3, 80083ba <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80083b6:	2000      	movs	r0, #0
	}
 80083b8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083ba:	1d05      	adds	r5, r0, #4
 80083bc:	4628      	mov	r0, r5
 80083be:	f7fa fb6b 	bl	8002a98 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083c2:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80083c4:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083c6:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 80083ca:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80083cc:	4b0a      	ldr	r3, [pc, #40]	@ (80083f8 <xTaskPriorityDisinherit+0x88>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4298      	cmp	r0, r3
 80083d2:	d901      	bls.n	80083d8 <xTaskPriorityDisinherit+0x68>
 80083d4:	4b08      	ldr	r3, [pc, #32]	@ (80083f8 <xTaskPriorityDisinherit+0x88>)
 80083d6:	6018      	str	r0, [r3, #0]
 80083d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80083dc:	4629      	mov	r1, r5
 80083de:	4b07      	ldr	r3, [pc, #28]	@ (80083fc <xTaskPriorityDisinherit+0x8c>)
 80083e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80083e4:	f7fa fb34 	bl	8002a50 <vListInsertEnd>
					xReturn = pdTRUE;
 80083e8:	2001      	movs	r0, #1
 80083ea:	e7e5      	b.n	80083b8 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80083ec:	2000      	movs	r0, #0
	}
 80083ee:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80083f0:	2000      	movs	r0, #0
 80083f2:	e7e1      	b.n	80083b8 <xTaskPriorityDisinherit+0x48>
 80083f4:	20006964 	.word	0x20006964
 80083f8:	20006488 	.word	0x20006488
 80083fc:	20006504 	.word	0x20006504

08008400 <thermistor_init>:
#include "thermistor.h"
#include "utils.h"


void thermistor_init(thermistor_t *thermistor, thermistor_conf_t cfg)
{
 8008400:	b084      	sub	sp, #16
 8008402:	b510      	push	{r4, lr}
 8008404:	ed2d 8b02 	vpush	{d8}
 8008408:	f10d 0c14 	add.w	ip, sp, #20
 800840c:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
    if (thermistor == NULL)
 8008410:	2800      	cmp	r0, #0
 8008412:	d060      	beq.n	80084d6 <thermistor_init+0xd6>
 8008414:	4604      	mov	r4, r0
        log_error("Thermistor init failed!");
        return;
    }

    // https://en.wikipedia.org/wiki/Steinhart%E2%80%93Hart_equation
	float l1 = logf(cfg.resistance_1);
 8008416:	ed9d 0a08 	vldr	s0, [sp, #32]
 800841a:	f002 ff6d 	bl	800b2f8 <logf>
 800841e:	eef0 8a40 	vmov.f32	s17, s0
	float l2 = logf(cfg.resistance_2);
 8008422:	ed9d 0a09 	vldr	s0, [sp, #36]	@ 0x24
 8008426:	f002 ff67 	bl	800b2f8 <logf>
 800842a:	eeb0 8a40 	vmov.f32	s16, s0
	float l3 = logf(cfg.resistance_3);
 800842e:	ed9d 0a0a 	vldr	s0, [sp, #40]	@ 0x28
 8008432:	f002 ff61 	bl	800b2f8 <logf>

	float y1 = 1 / CELSIUS_TO_KELVIN(cfg.tempC_1);
 8008436:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 80084e0 <thermistor_init+0xe0>
 800843a:	eddd 7a05 	vldr	s15, [sp, #20]
 800843e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008442:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8008446:	eec5 6aa7 	vdiv.f32	s13, s11, s15
	float y2 = 1 / CELSIUS_TO_KELVIN(cfg.tempC_2);
 800844a:	eddd 7a06 	vldr	s15, [sp, #24]
 800844e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008452:	ee85 7aa7 	vdiv.f32	s14, s11, s15
	float y3 = 1 / CELSIUS_TO_KELVIN(cfg.tempC_3);
 8008456:	eddd 7a07 	vldr	s15, [sp, #28]
 800845a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800845e:	ee85 6aa7 	vdiv.f32	s12, s11, s15

	float u2 = (y2 - y1) / (l2 - l1);
 8008462:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008466:	ee78 5a68 	vsub.f32	s11, s16, s17
 800846a:	eec7 7a25 	vdiv.f32	s15, s14, s11
	float u3 = (y3 - y1) / (l3 - l1);
 800846e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8008472:	ee70 5a68 	vsub.f32	s11, s0, s17
 8008476:	ee86 7a25 	vdiv.f32	s14, s12, s11

	thermistor->m_c = ((u3 - u2) / (l3 - l2)) / (l1 + l2 + l3);
 800847a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800847e:	ee30 6a48 	vsub.f32	s12, s0, s16
 8008482:	eec7 5a06 	vdiv.f32	s11, s14, s12
 8008486:	ee38 7a88 	vadd.f32	s14, s17, s16
 800848a:	ee37 7a00 	vadd.f32	s14, s14, s0
 800848e:	ee85 6a87 	vdiv.f32	s12, s11, s14
 8008492:	ed84 6a05 	vstr	s12, [r4, #20]
	thermistor->m_b = u2 - thermistor->m_c * (l1 * l1 + l1 * l2 + l2 * l2);
 8008496:	ee68 5aa8 	vmul.f32	s11, s17, s17
 800849a:	ee28 7a88 	vmul.f32	s14, s17, s16
 800849e:	ee35 7a87 	vadd.f32	s14, s11, s14
 80084a2:	ee28 8a08 	vmul.f32	s16, s16, s16
 80084a6:	ee37 7a08 	vadd.f32	s14, s14, s16
 80084aa:	ee26 7a07 	vmul.f32	s14, s12, s14
 80084ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084b2:	edc4 7a04 	vstr	s15, [r4, #16]
	thermistor->m_a = y1 - (thermistor->m_b + l1 * l1 * thermistor->m_c) * l1;
 80084b6:	ee26 6a25 	vmul.f32	s12, s12, s11
 80084ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 80084be:	ee27 0aa8 	vmul.f32	s0, s15, s17
 80084c2:	ee76 6ac0 	vsub.f32	s13, s13, s0
 80084c6:	edc4 6a03 	vstr	s13, [r4, #12]
	if (tempAt90percentPoint > cfg.tempC_3)
    {
        log_error("Thermistor configuration has failed 90% test");
	}
    */
}
 80084ca:	ecbd 8b02 	vpop	{d8}
 80084ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084d2:	b004      	add	sp, #16
 80084d4:	4770      	bx	lr
        log_error("Thermistor init failed!");
 80084d6:	4803      	ldr	r0, [pc, #12]	@ (80084e4 <thermistor_init+0xe4>)
 80084d8:	f7f9 fd4c 	bl	8001f74 <log_error>
        return;
 80084dc:	e7f5      	b.n	80084ca <thermistor_init+0xca>
 80084de:	bf00      	nop
 80084e0:	43889333 	.word	0x43889333
 80084e4:	0800bc28 	.word	0x0800bc28

080084e8 <thermistor_get_temp>:

temperature_t thermistor_get_temp(thermistor_t *thermistor)
{
 80084e8:	b510      	push	{r4, lr}
 80084ea:	4604      	mov	r4, r0
    // This resistance should have already been validated - only
	// thing we can check is that it's non-negative
    float ohms = resistor_get_resistance(&thermistor->resistor);
 80084ec:	f7fb f994 	bl	8003818 <resistor_get_resistance>
    {
        log_error("Thermistor invalid resistance!");
        return NAN;
    }

	float lnR = logf(ohms);
 80084f0:	f002 ff02 	bl	800b2f8 <logf>

	float lnR3 = lnR * lnR * lnR;
 80084f4:	ee60 6a00 	vmul.f32	s13, s0, s0
 80084f8:	ee66 6a80 	vmul.f32	s13, s13, s0

	float recip = thermistor->m_a + thermistor->m_b * lnR + thermistor->m_c * lnR3;
 80084fc:	edd4 7a03 	vldr	s15, [r4, #12]
 8008500:	ed94 7a04 	vldr	s14, [r4, #16]
 8008504:	ee27 7a00 	vmul.f32	s14, s14, s0
 8008508:	ee77 7a87 	vadd.f32	s15, s15, s14
 800850c:	ed94 7a05 	vldr	s14, [r4, #20]
 8008510:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008514:	ee77 7a87 	vadd.f32	s15, s15, s14

	float kelvin = 1 / recip;
 8008518:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800851c:	ee87 0a27 	vdiv.f32	s0, s14, s15

	float celsius = KELVIN_TO_CELSIUS(kelvin);
 8008520:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8008560 <thermistor_get_temp+0x78>
 8008524:	ee30 0a67 	vsub.f32	s0, s0, s15

	// bounds check result - please don't try to run this SGC when it is colder than -50C :)
	if (celsius < -50) {
 8008528:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8008564 <thermistor_get_temp+0x7c>
 800852c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008534:	d407      	bmi.n	8008546 <thermistor_get_temp+0x5e>
		log_error("Thermistor temp bound check failed!");
        return NAN;
	}

	if (celsius > 250) {
 8008536:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8008568 <thermistor_get_temp+0x80>
 800853a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800853e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008542:	dc06      	bgt.n	8008552 <thermistor_get_temp+0x6a>
		log_error("Thermistor temp bound check failed!");
        return NAN;
	}

	return celsius;
 8008544:	bd10      	pop	{r4, pc}
		log_error("Thermistor temp bound check failed!");
 8008546:	4809      	ldr	r0, [pc, #36]	@ (800856c <thermistor_get_temp+0x84>)
 8008548:	f7f9 fd14 	bl	8001f74 <log_error>
        return NAN;
 800854c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008570 <thermistor_get_temp+0x88>
 8008550:	e7f8      	b.n	8008544 <thermistor_get_temp+0x5c>
		log_error("Thermistor temp bound check failed!");
 8008552:	4806      	ldr	r0, [pc, #24]	@ (800856c <thermistor_get_temp+0x84>)
 8008554:	f7f9 fd0e 	bl	8001f74 <log_error>
        return NAN;
 8008558:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8008570 <thermistor_get_temp+0x88>
 800855c:	e7f2      	b.n	8008544 <thermistor_get_temp+0x5c>
 800855e:	bf00      	nop
 8008560:	43889333 	.word	0x43889333
 8008564:	c2480000 	.word	0xc2480000
 8008568:	437a0000 	.word	0x437a0000
 800856c:	0800bc40 	.word	0x0800bc40
 8008570:	7fc00000 	.word	0x7fc00000

08008574 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008574:	b500      	push	{lr}
 8008576:	b08f      	sub	sp, #60	@ 0x3c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008578:	2300      	movs	r3, #0
 800857a:	930a      	str	r3, [sp, #40]	@ 0x28
 800857c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800857e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008580:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008582:	9308      	str	r3, [sp, #32]
 8008584:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008586:	9301      	str	r3, [sp, #4]
 8008588:	9302      	str	r3, [sp, #8]
 800858a:	9303      	str	r3, [sp, #12]
 800858c:	9304      	str	r3, [sp, #16]
 800858e:	9305      	str	r3, [sp, #20]
 8008590:	9306      	str	r3, [sp, #24]
 8008592:	9307      	str	r3, [sp, #28]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008594:	481f      	ldr	r0, [pc, #124]	@ (8008614 <MX_TIM2_Init+0xa0>)
 8008596:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800859a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 84-1;
 800859c:	2253      	movs	r2, #83	@ 0x53
 800859e:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085a0:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 80085a2:	f04f 32ff 	mov.w	r2, #4294967295
 80085a6:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085a8:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085aa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80085ac:	f7fd ff5a 	bl	8006464 <HAL_TIM_Base_Init>
 80085b0:	bb00      	cbnz	r0, 80085f4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80085b6:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80085b8:	a90a      	add	r1, sp, #40	@ 0x28
 80085ba:	4816      	ldr	r0, [pc, #88]	@ (8008614 <MX_TIM2_Init+0xa0>)
 80085bc:	f7fe f8ae 	bl	800671c <HAL_TIM_ConfigClockSource>
 80085c0:	b9d8      	cbnz	r0, 80085fa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80085c2:	4814      	ldr	r0, [pc, #80]	@ (8008614 <MX_TIM2_Init+0xa0>)
 80085c4:	f7fd ff7a 	bl	80064bc <HAL_TIM_OC_Init>
 80085c8:	b9d0      	cbnz	r0, 8008600 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80085ca:	2300      	movs	r3, #0
 80085cc:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085ce:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80085d0:	a908      	add	r1, sp, #32
 80085d2:	4810      	ldr	r0, [pc, #64]	@ (8008614 <MX_TIM2_Init+0xa0>)
 80085d4:	f7fe fa4c 	bl	8006a70 <HAL_TIMEx_MasterConfigSynchronization>
 80085d8:	b9a8      	cbnz	r0, 8008606 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80085da:	2200      	movs	r2, #0
 80085dc:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 80085de:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80085e0:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80085e2:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80085e4:	a901      	add	r1, sp, #4
 80085e6:	480b      	ldr	r0, [pc, #44]	@ (8008614 <MX_TIM2_Init+0xa0>)
 80085e8:	f7fd ffee 	bl	80065c8 <HAL_TIM_OC_ConfigChannel>
 80085ec:	b970      	cbnz	r0, 800860c <MX_TIM2_Init+0x98>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80085ee:	b00f      	add	sp, #60	@ 0x3c
 80085f0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80085f4:	f7fa fa78 	bl	8002ae8 <Error_Handler>
 80085f8:	e7db      	b.n	80085b2 <MX_TIM2_Init+0x3e>
    Error_Handler();
 80085fa:	f7fa fa75 	bl	8002ae8 <Error_Handler>
 80085fe:	e7e0      	b.n	80085c2 <MX_TIM2_Init+0x4e>
    Error_Handler();
 8008600:	f7fa fa72 	bl	8002ae8 <Error_Handler>
 8008604:	e7e1      	b.n	80085ca <MX_TIM2_Init+0x56>
    Error_Handler();
 8008606:	f7fa fa6f 	bl	8002ae8 <Error_Handler>
 800860a:	e7e6      	b.n	80085da <MX_TIM2_Init+0x66>
    Error_Handler();
 800860c:	f7fa fa6c 	bl	8002ae8 <Error_Handler>
}
 8008610:	e7ed      	b.n	80085ee <MX_TIM2_Init+0x7a>
 8008612:	bf00      	nop
 8008614:	200069b0 	.word	0x200069b0

08008618 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008618:	b500      	push	{lr}
 800861a:	b083      	sub	sp, #12

  if(tim_pwmHandle->Instance==TIM1)
 800861c:	6803      	ldr	r3, [r0, #0]
 800861e:	4a15      	ldr	r2, [pc, #84]	@ (8008674 <HAL_TIM_PWM_MspInit+0x5c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d005      	beq.n	8008630 <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM3)
 8008624:	4a14      	ldr	r2, [pc, #80]	@ (8008678 <HAL_TIM_PWM_MspInit+0x60>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d016      	beq.n	8008658 <HAL_TIM_PWM_MspInit+0x40>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800862a:	b003      	add	sp, #12
 800862c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008630:	2200      	movs	r2, #0
 8008632:	9200      	str	r2, [sp, #0]
 8008634:	4b11      	ldr	r3, [pc, #68]	@ (800867c <HAL_TIM_PWM_MspInit+0x64>)
 8008636:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008638:	f041 0101 	orr.w	r1, r1, #1
 800863c:	6459      	str	r1, [r3, #68]	@ 0x44
 800863e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8008648:	210f      	movs	r1, #15
 800864a:	201a      	movs	r0, #26
 800864c:	f7fb ff34 	bl	80044b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8008650:	201a      	movs	r0, #26
 8008652:	f7fb ff41 	bl	80044d8 <HAL_NVIC_EnableIRQ>
 8008656:	e7e8      	b.n	800862a <HAL_TIM_PWM_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008658:	2300      	movs	r3, #0
 800865a:	9301      	str	r3, [sp, #4]
 800865c:	4b07      	ldr	r3, [pc, #28]	@ (800867c <HAL_TIM_PWM_MspInit+0x64>)
 800865e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008660:	f042 0202 	orr.w	r2, r2, #2
 8008664:	641a      	str	r2, [r3, #64]	@ 0x40
 8008666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	9301      	str	r3, [sp, #4]
 800866e:	9b01      	ldr	r3, [sp, #4]
}
 8008670:	e7db      	b.n	800862a <HAL_TIM_PWM_MspInit+0x12>
 8008672:	bf00      	nop
 8008674:	40010000 	.word	0x40010000
 8008678:	40000400 	.word	0x40000400
 800867c:	40023800 	.word	0x40023800

08008680 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8008680:	6803      	ldr	r3, [r0, #0]
 8008682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008686:	d000      	beq.n	800868a <HAL_TIM_Base_MspInit+0xa>
 8008688:	4770      	bx	lr
{
 800868a:	b500      	push	{lr}
 800868c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800868e:	2200      	movs	r2, #0
 8008690:	9201      	str	r2, [sp, #4]
 8008692:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8008696:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008698:	f041 0101 	orr.w	r1, r1, #1
 800869c:	6419      	str	r1, [r3, #64]	@ 0x40
 800869e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	9b01      	ldr	r3, [sp, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80086a8:	2105      	movs	r1, #5
 80086aa:	201c      	movs	r0, #28
 80086ac:	f7fb ff04 	bl	80044b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80086b0:	201c      	movs	r0, #28
 80086b2:	f7fb ff11 	bl	80044d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80086b6:	b003      	add	sp, #12
 80086b8:	f85d fb04 	ldr.w	pc, [sp], #4

080086bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80086bc:	b500      	push	{lr}
 80086be:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086c0:	2300      	movs	r3, #0
 80086c2:	9303      	str	r3, [sp, #12]
 80086c4:	9304      	str	r3, [sp, #16]
 80086c6:	9305      	str	r3, [sp, #20]
 80086c8:	9306      	str	r3, [sp, #24]
 80086ca:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 80086cc:	6803      	ldr	r3, [r0, #0]
 80086ce:	4a1b      	ldr	r2, [pc, #108]	@ (800873c <HAL_TIM_MspPostInit+0x80>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d005      	beq.n	80086e0 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 80086d4:	4a1a      	ldr	r2, [pc, #104]	@ (8008740 <HAL_TIM_MspPostInit+0x84>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d01a      	beq.n	8008710 <HAL_TIM_MspPostInit+0x54>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80086da:	b009      	add	sp, #36	@ 0x24
 80086dc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086e0:	2300      	movs	r3, #0
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	4b17      	ldr	r3, [pc, #92]	@ (8008744 <HAL_TIM_MspPostInit+0x88>)
 80086e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086e8:	f042 0201 	orr.w	r2, r2, #1
 80086ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80086ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	9301      	str	r3, [sp, #4]
 80086f6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ETB1_MOTOR1_Pin|ETB1_MOTOR2_Pin;
 80086f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80086fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086fe:	2302      	movs	r3, #2
 8008700:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008702:	2301      	movs	r3, #1
 8008704:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008706:	a903      	add	r1, sp, #12
 8008708:	480f      	ldr	r0, [pc, #60]	@ (8008748 <HAL_TIM_MspPostInit+0x8c>)
 800870a:	f7fc f8fd 	bl	8004908 <HAL_GPIO_Init>
 800870e:	e7e4      	b.n	80086da <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008710:	2300      	movs	r3, #0
 8008712:	9302      	str	r3, [sp, #8]
 8008714:	4b0b      	ldr	r3, [pc, #44]	@ (8008744 <HAL_TIM_MspPostInit+0x88>)
 8008716:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008718:	f042 0202 	orr.w	r2, r2, #2
 800871c:	631a      	str	r2, [r3, #48]	@ 0x30
 800871e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008720:	f003 0302 	and.w	r3, r3, #2
 8008724:	9302      	str	r3, [sp, #8]
 8008726:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM_OUT3_Pin|PWM_OUT4_Pin|PWM_OUT1_Pin|PWM_OUT2_Pin;
 8008728:	2333      	movs	r3, #51	@ 0x33
 800872a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800872c:	2302      	movs	r3, #2
 800872e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008730:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008732:	a903      	add	r1, sp, #12
 8008734:	4805      	ldr	r0, [pc, #20]	@ (800874c <HAL_TIM_MspPostInit+0x90>)
 8008736:	f7fc f8e7 	bl	8004908 <HAL_GPIO_Init>
}
 800873a:	e7ce      	b.n	80086da <HAL_TIM_MspPostInit+0x1e>
 800873c:	40010000 	.word	0x40010000
 8008740:	40000400 	.word	0x40000400
 8008744:	40023800 	.word	0x40023800
 8008748:	40020000 	.word	0x40020000
 800874c:	40020400 	.word	0x40020400

08008750 <MX_TIM1_Init>:
{
 8008750:	b510      	push	{r4, lr}
 8008752:	b092      	sub	sp, #72	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008754:	2400      	movs	r4, #0
 8008756:	9410      	str	r4, [sp, #64]	@ 0x40
 8008758:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 800875a:	9409      	str	r4, [sp, #36]	@ 0x24
 800875c:	940a      	str	r4, [sp, #40]	@ 0x28
 800875e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008760:	940c      	str	r4, [sp, #48]	@ 0x30
 8008762:	940d      	str	r4, [sp, #52]	@ 0x34
 8008764:	940e      	str	r4, [sp, #56]	@ 0x38
 8008766:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008768:	2220      	movs	r2, #32
 800876a:	4621      	mov	r1, r4
 800876c:	a801      	add	r0, sp, #4
 800876e:	f002 f93f 	bl	800a9f0 <memset>
  htim1.Instance = TIM1;
 8008772:	4827      	ldr	r0, [pc, #156]	@ (8008810 <MX_TIM1_Init+0xc0>)
 8008774:	4b27      	ldr	r3, [pc, #156]	@ (8008814 <MX_TIM1_Init+0xc4>)
 8008776:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8008778:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800877a:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 65535;
 800877c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008780:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008782:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8008784:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008786:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008788:	f7fd fec4 	bl	8006514 <HAL_TIM_PWM_Init>
 800878c:	2800      	cmp	r0, #0
 800878e:	d130      	bne.n	80087f2 <MX_TIM1_Init+0xa2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008790:	2300      	movs	r3, #0
 8008792:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008794:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008796:	a910      	add	r1, sp, #64	@ 0x40
 8008798:	481d      	ldr	r0, [pc, #116]	@ (8008810 <MX_TIM1_Init+0xc0>)
 800879a:	f7fe f969 	bl	8006a70 <HAL_TIMEx_MasterConfigSynchronization>
 800879e:	2800      	cmp	r0, #0
 80087a0:	d12a      	bne.n	80087f8 <MX_TIM1_Init+0xa8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80087a2:	2360      	movs	r3, #96	@ 0x60
 80087a4:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80087a6:	2200      	movs	r2, #0
 80087a8:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80087aa:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80087ac:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80087ae:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80087b0:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80087b2:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80087b4:	a909      	add	r1, sp, #36	@ 0x24
 80087b6:	4816      	ldr	r0, [pc, #88]	@ (8008810 <MX_TIM1_Init+0xc0>)
 80087b8:	f7fd ff35 	bl	8006626 <HAL_TIM_PWM_ConfigChannel>
 80087bc:	b9f8      	cbnz	r0, 80087fe <MX_TIM1_Init+0xae>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80087be:	2204      	movs	r2, #4
 80087c0:	a909      	add	r1, sp, #36	@ 0x24
 80087c2:	4813      	ldr	r0, [pc, #76]	@ (8008810 <MX_TIM1_Init+0xc0>)
 80087c4:	f7fd ff2f 	bl	8006626 <HAL_TIM_PWM_ConfigChannel>
 80087c8:	b9e0      	cbnz	r0, 8008804 <MX_TIM1_Init+0xb4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80087ca:	2300      	movs	r3, #0
 80087cc:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80087ce:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80087d0:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80087d2:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80087d4:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80087d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80087da:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80087dc:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80087de:	a901      	add	r1, sp, #4
 80087e0:	480b      	ldr	r0, [pc, #44]	@ (8008810 <MX_TIM1_Init+0xc0>)
 80087e2:	f7fe f983 	bl	8006aec <HAL_TIMEx_ConfigBreakDeadTime>
 80087e6:	b980      	cbnz	r0, 800880a <MX_TIM1_Init+0xba>
  HAL_TIM_MspPostInit(&htim1);
 80087e8:	4809      	ldr	r0, [pc, #36]	@ (8008810 <MX_TIM1_Init+0xc0>)
 80087ea:	f7ff ff67 	bl	80086bc <HAL_TIM_MspPostInit>
}
 80087ee:	b012      	add	sp, #72	@ 0x48
 80087f0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80087f2:	f7fa f979 	bl	8002ae8 <Error_Handler>
 80087f6:	e7cb      	b.n	8008790 <MX_TIM1_Init+0x40>
    Error_Handler();
 80087f8:	f7fa f976 	bl	8002ae8 <Error_Handler>
 80087fc:	e7d1      	b.n	80087a2 <MX_TIM1_Init+0x52>
    Error_Handler();
 80087fe:	f7fa f973 	bl	8002ae8 <Error_Handler>
 8008802:	e7dc      	b.n	80087be <MX_TIM1_Init+0x6e>
    Error_Handler();
 8008804:	f7fa f970 	bl	8002ae8 <Error_Handler>
 8008808:	e7df      	b.n	80087ca <MX_TIM1_Init+0x7a>
    Error_Handler();
 800880a:	f7fa f96d 	bl	8002ae8 <Error_Handler>
 800880e:	e7eb      	b.n	80087e8 <MX_TIM1_Init+0x98>
 8008810:	200069f8 	.word	0x200069f8
 8008814:	40010000 	.word	0x40010000

08008818 <MX_TIM3_Init>:
{
 8008818:	b500      	push	{lr}
 800881a:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800881c:	2300      	movs	r3, #0
 800881e:	9308      	str	r3, [sp, #32]
 8008820:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008822:	9301      	str	r3, [sp, #4]
 8008824:	9302      	str	r3, [sp, #8]
 8008826:	9303      	str	r3, [sp, #12]
 8008828:	9304      	str	r3, [sp, #16]
 800882a:	9305      	str	r3, [sp, #20]
 800882c:	9306      	str	r3, [sp, #24]
 800882e:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8008830:	4825      	ldr	r0, [pc, #148]	@ (80088c8 <MX_TIM3_Init+0xb0>)
 8008832:	4a26      	ldr	r2, [pc, #152]	@ (80088cc <MX_TIM3_Init+0xb4>)
 8008834:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8008836:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008838:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 800883a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800883e:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008840:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008842:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008844:	f7fd fe66 	bl	8006514 <HAL_TIM_PWM_Init>
 8008848:	bb58      	cbnz	r0, 80088a2 <MX_TIM3_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800884a:	2300      	movs	r3, #0
 800884c:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800884e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008850:	a908      	add	r1, sp, #32
 8008852:	481d      	ldr	r0, [pc, #116]	@ (80088c8 <MX_TIM3_Init+0xb0>)
 8008854:	f7fe f90c 	bl	8006a70 <HAL_TIMEx_MasterConfigSynchronization>
 8008858:	bb30      	cbnz	r0, 80088a8 <MX_TIM3_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800885a:	2360      	movs	r3, #96	@ 0x60
 800885c:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800885e:	2200      	movs	r2, #0
 8008860:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008862:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008864:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008866:	a901      	add	r1, sp, #4
 8008868:	4817      	ldr	r0, [pc, #92]	@ (80088c8 <MX_TIM3_Init+0xb0>)
 800886a:	f7fd fedc 	bl	8006626 <HAL_TIM_PWM_ConfigChannel>
 800886e:	b9f0      	cbnz	r0, 80088ae <MX_TIM3_Init+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008870:	2204      	movs	r2, #4
 8008872:	eb0d 0102 	add.w	r1, sp, r2
 8008876:	4814      	ldr	r0, [pc, #80]	@ (80088c8 <MX_TIM3_Init+0xb0>)
 8008878:	f7fd fed5 	bl	8006626 <HAL_TIM_PWM_ConfigChannel>
 800887c:	b9d0      	cbnz	r0, 80088b4 <MX_TIM3_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800887e:	2208      	movs	r2, #8
 8008880:	a901      	add	r1, sp, #4
 8008882:	4811      	ldr	r0, [pc, #68]	@ (80088c8 <MX_TIM3_Init+0xb0>)
 8008884:	f7fd fecf 	bl	8006626 <HAL_TIM_PWM_ConfigChannel>
 8008888:	b9b8      	cbnz	r0, 80088ba <MX_TIM3_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800888a:	220c      	movs	r2, #12
 800888c:	a901      	add	r1, sp, #4
 800888e:	480e      	ldr	r0, [pc, #56]	@ (80088c8 <MX_TIM3_Init+0xb0>)
 8008890:	f7fd fec9 	bl	8006626 <HAL_TIM_PWM_ConfigChannel>
 8008894:	b9a0      	cbnz	r0, 80088c0 <MX_TIM3_Init+0xa8>
  HAL_TIM_MspPostInit(&htim3);
 8008896:	480c      	ldr	r0, [pc, #48]	@ (80088c8 <MX_TIM3_Init+0xb0>)
 8008898:	f7ff ff10 	bl	80086bc <HAL_TIM_MspPostInit>
}
 800889c:	b00b      	add	sp, #44	@ 0x2c
 800889e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80088a2:	f7fa f921 	bl	8002ae8 <Error_Handler>
 80088a6:	e7d0      	b.n	800884a <MX_TIM3_Init+0x32>
    Error_Handler();
 80088a8:	f7fa f91e 	bl	8002ae8 <Error_Handler>
 80088ac:	e7d5      	b.n	800885a <MX_TIM3_Init+0x42>
    Error_Handler();
 80088ae:	f7fa f91b 	bl	8002ae8 <Error_Handler>
 80088b2:	e7dd      	b.n	8008870 <MX_TIM3_Init+0x58>
    Error_Handler();
 80088b4:	f7fa f918 	bl	8002ae8 <Error_Handler>
 80088b8:	e7e1      	b.n	800887e <MX_TIM3_Init+0x66>
    Error_Handler();
 80088ba:	f7fa f915 	bl	8002ae8 <Error_Handler>
 80088be:	e7e4      	b.n	800888a <MX_TIM3_Init+0x72>
    Error_Handler();
 80088c0:	f7fa f912 	bl	8002ae8 <Error_Handler>
 80088c4:	e7e7      	b.n	8008896 <MX_TIM3_Init+0x7e>
 80088c6:	bf00      	nop
 80088c8:	20006968 	.word	0x20006968
 80088cc:	40000400 	.word	0x40000400

080088d0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088d0:	4b06      	ldr	r3, [pc, #24]	@ (80088ec <prvGetNextExpireTime+0x1c>)
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	6813      	ldr	r3, [r2, #0]
 80088d6:	b92b      	cbnz	r3, 80088e4 <prvGetNextExpireTime+0x14>
 80088d8:	2301      	movs	r3, #1
 80088da:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 80088dc:	b923      	cbnz	r3, 80088e8 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088de:	68d3      	ldr	r3, [r2, #12]
 80088e0:	6818      	ldr	r0, [r3, #0]
 80088e2:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088e4:	2300      	movs	r3, #0
 80088e6:	e7f8      	b.n	80088da <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80088e8:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80088ea:	4770      	bx	lr
 80088ec:	20006b40 	.word	0x20006b40

080088f0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80088f0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80088f2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088f4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80088f6:	4291      	cmp	r1, r2
 80088f8:	d80c      	bhi.n	8008914 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088fa:	1ad2      	subs	r2, r2, r3
 80088fc:	6983      	ldr	r3, [r0, #24]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d301      	bcc.n	8008906 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008902:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8008904:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008906:	1d01      	adds	r1, r0, #4
 8008908:	4b09      	ldr	r3, [pc, #36]	@ (8008930 <prvInsertTimerInActiveList+0x40>)
 800890a:	6818      	ldr	r0, [r3, #0]
 800890c:	f7fa f8ab 	bl	8002a66 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008910:	2000      	movs	r0, #0
 8008912:	e7f7      	b.n	8008904 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008914:	429a      	cmp	r2, r3
 8008916:	d201      	bcs.n	800891c <prvInsertTimerInActiveList+0x2c>
 8008918:	4299      	cmp	r1, r3
 800891a:	d206      	bcs.n	800892a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800891c:	1d01      	adds	r1, r0, #4
 800891e:	4b05      	ldr	r3, [pc, #20]	@ (8008934 <prvInsertTimerInActiveList+0x44>)
 8008920:	6818      	ldr	r0, [r3, #0]
 8008922:	f7fa f8a0 	bl	8002a66 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008926:	2000      	movs	r0, #0
 8008928:	e7ec      	b.n	8008904 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800892a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800892c:	e7ea      	b.n	8008904 <prvInsertTimerInActiveList+0x14>
 800892e:	bf00      	nop
 8008930:	20006b3c 	.word	0x20006b3c
 8008934:	20006b40 	.word	0x20006b40

08008938 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008938:	b530      	push	{r4, r5, lr}
 800893a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800893c:	f7fa fa3a 	bl	8002db4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008940:	4b11      	ldr	r3, [pc, #68]	@ (8008988 <prvCheckForValidListAndQueue+0x50>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	b11b      	cbz	r3, 800894e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008946:	f7fa fa57 	bl	8002df8 <vPortExitCritical>
}
 800894a:	b003      	add	sp, #12
 800894c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800894e:	4d0f      	ldr	r5, [pc, #60]	@ (800898c <prvCheckForValidListAndQueue+0x54>)
 8008950:	4628      	mov	r0, r5
 8008952:	f7fa f86f 	bl	8002a34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008956:	4c0e      	ldr	r4, [pc, #56]	@ (8008990 <prvCheckForValidListAndQueue+0x58>)
 8008958:	4620      	mov	r0, r4
 800895a:	f7fa f86b 	bl	8002a34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800895e:	4b0d      	ldr	r3, [pc, #52]	@ (8008994 <prvCheckForValidListAndQueue+0x5c>)
 8008960:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008962:	4b0d      	ldr	r3, [pc, #52]	@ (8008998 <prvCheckForValidListAndQueue+0x60>)
 8008964:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008966:	2300      	movs	r3, #0
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	4b0c      	ldr	r3, [pc, #48]	@ (800899c <prvCheckForValidListAndQueue+0x64>)
 800896c:	4a0c      	ldr	r2, [pc, #48]	@ (80089a0 <prvCheckForValidListAndQueue+0x68>)
 800896e:	2110      	movs	r1, #16
 8008970:	200a      	movs	r0, #10
 8008972:	f7fa fc66 	bl	8003242 <xQueueGenericCreateStatic>
 8008976:	4b04      	ldr	r3, [pc, #16]	@ (8008988 <prvCheckForValidListAndQueue+0x50>)
 8008978:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800897a:	2800      	cmp	r0, #0
 800897c:	d0e3      	beq.n	8008946 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800897e:	4909      	ldr	r1, [pc, #36]	@ (80089a4 <prvCheckForValidListAndQueue+0x6c>)
 8008980:	f7fa fefe 	bl	8003780 <vQueueAddToRegistry>
 8008984:	e7df      	b.n	8008946 <prvCheckForValidListAndQueue+0xe>
 8008986:	bf00      	nop
 8008988:	20006b38 	.word	0x20006b38
 800898c:	20006b58 	.word	0x20006b58
 8008990:	20006b44 	.word	0x20006b44
 8008994:	20006b40 	.word	0x20006b40
 8008998:	20006b3c 	.word	0x20006b3c
 800899c:	20006a40 	.word	0x20006a40
 80089a0:	20006a90 	.word	0x20006a90
 80089a4:	0800bc64 	.word	0x0800bc64

080089a8 <prvInitialiseNewTimer>:
{
 80089a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ac:	9f07      	ldr	r7, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80089ae:	b941      	cbnz	r1, 80089c2 <prvInitialiseNewTimer+0x1a>
 80089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	e7fe      	b.n	80089c0 <prvInitialiseNewTimer+0x18>
 80089c2:	4606      	mov	r6, r0
 80089c4:	4614      	mov	r4, r2
 80089c6:	461d      	mov	r5, r3
 80089c8:	4688      	mov	r8, r1
	if( pxNewTimer != NULL )
 80089ca:	b18f      	cbz	r7, 80089f0 <prvInitialiseNewTimer+0x48>
		prvCheckForValidListAndQueue();
 80089cc:	f7ff ffb4 	bl	8008938 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 80089d0:	603e      	str	r6, [r7, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80089d2:	f8c7 8018 	str.w	r8, [r7, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80089d6:	61fd      	str	r5, [r7, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80089d8:	9b06      	ldr	r3, [sp, #24]
 80089da:	623b      	str	r3, [r7, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80089dc:	1d38      	adds	r0, r7, #4
 80089de:	f7fa f834 	bl	8002a4a <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80089e2:	b12c      	cbz	r4, 80089f0 <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80089e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80089e8:	f043 0304 	orr.w	r3, r3, #4
 80089ec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
}
 80089f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080089f4 <xTimerCreateTimerTask>:
{
 80089f4:	b510      	push	{r4, lr}
 80089f6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80089f8:	f7ff ff9e 	bl	8008938 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80089fc:	4b12      	ldr	r3, [pc, #72]	@ (8008a48 <xTimerCreateTimerTask+0x54>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	b1cb      	cbz	r3, 8008a36 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a02:	2400      	movs	r4, #0
 8008a04:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a06:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a08:	aa07      	add	r2, sp, #28
 8008a0a:	a906      	add	r1, sp, #24
 8008a0c:	a805      	add	r0, sp, #20
 8008a0e:	f7f8 fc57 	bl	80012c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a12:	9b05      	ldr	r3, [sp, #20]
 8008a14:	9302      	str	r3, [sp, #8]
 8008a16:	9b06      	ldr	r3, [sp, #24]
 8008a18:	9301      	str	r3, [sp, #4]
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	4623      	mov	r3, r4
 8008a20:	9a07      	ldr	r2, [sp, #28]
 8008a22:	490a      	ldr	r1, [pc, #40]	@ (8008a4c <xTimerCreateTimerTask+0x58>)
 8008a24:	480a      	ldr	r0, [pc, #40]	@ (8008a50 <xTimerCreateTimerTask+0x5c>)
 8008a26:	f7ff f93d 	bl	8007ca4 <xTaskCreateStatic>
 8008a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a54 <xTimerCreateTimerTask+0x60>)
 8008a2c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008a2e:	b110      	cbz	r0, 8008a36 <xTimerCreateTimerTask+0x42>
}
 8008a30:	2001      	movs	r0, #1
 8008a32:	b008      	add	sp, #32
 8008a34:	bd10      	pop	{r4, pc}
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8008a46:	e7fe      	b.n	8008a46 <xTimerCreateTimerTask+0x52>
 8008a48:	20006b38 	.word	0x20006b38
 8008a4c:	0800bc6c 	.word	0x0800bc6c
 8008a50:	08008de5 	.word	0x08008de5
 8008a54:	20006b34 	.word	0x20006b34

08008a58 <xTimerCreate>:
	{
 8008a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4688      	mov	r8, r1
 8008a62:	4617      	mov	r7, r2
 8008a64:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008a66:	202c      	movs	r0, #44	@ 0x2c
 8008a68:	f7f9 fd34 	bl	80024d4 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8008a6c:	4606      	mov	r6, r0
 8008a6e:	b158      	cbz	r0, 8008a88 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 8008a70:	2300      	movs	r3, #0
 8008a72:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008a76:	9001      	str	r0, [sp, #4]
 8008a78:	9b08      	ldr	r3, [sp, #32]
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	462b      	mov	r3, r5
 8008a7e:	463a      	mov	r2, r7
 8008a80:	4641      	mov	r1, r8
 8008a82:	4620      	mov	r0, r4
 8008a84:	f7ff ff90 	bl	80089a8 <prvInitialiseNewTimer>
	}
 8008a88:	4630      	mov	r0, r6
 8008a8a:	b002      	add	sp, #8
 8008a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008a90 <xTimerCreateStatic>:
	{
 8008a90:	b510      	push	{r4, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	4684      	mov	ip, r0
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008a96:	202c      	movs	r0, #44	@ 0x2c
 8008a98:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008a9a:	9803      	ldr	r0, [sp, #12]
 8008a9c:	282c      	cmp	r0, #44	@ 0x2c
 8008a9e:	d008      	beq.n	8008ab2 <xTimerCreateStatic+0x22>
 8008aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	e7fe      	b.n	8008ab0 <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ab2:	9803      	ldr	r0, [sp, #12]
		configASSERT( pxTimerBuffer );
 8008ab4:	9807      	ldr	r0, [sp, #28]
 8008ab6:	b160      	cbz	r0, 8008ad2 <xTimerCreateStatic+0x42>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008ab8:	2002      	movs	r0, #2
 8008aba:	9c07      	ldr	r4, [sp, #28]
 8008abc:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008ac0:	9401      	str	r4, [sp, #4]
 8008ac2:	9806      	ldr	r0, [sp, #24]
 8008ac4:	9000      	str	r0, [sp, #0]
 8008ac6:	4660      	mov	r0, ip
 8008ac8:	f7ff ff6e 	bl	80089a8 <prvInitialiseNewTimer>
	}
 8008acc:	9807      	ldr	r0, [sp, #28]
 8008ace:	b004      	add	sp, #16
 8008ad0:	bd10      	pop	{r4, pc}
 8008ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
 8008ae2:	e7fe      	b.n	8008ae2 <xTimerCreateStatic+0x52>

08008ae4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8008ae4:	b1b8      	cbz	r0, 8008b16 <xTimerGenericCommand+0x32>
 8008ae6:	469c      	mov	ip, r3
 8008ae8:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8008aea:	4818      	ldr	r0, [pc, #96]	@ (8008b4c <xTimerGenericCommand+0x68>)
 8008aec:	6800      	ldr	r0, [r0, #0]
 8008aee:	b358      	cbz	r0, 8008b48 <xTimerGenericCommand+0x64>
{
 8008af0:	b500      	push	{lr}
 8008af2:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8008af4:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008af6:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008af8:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008afa:	2905      	cmp	r1, #5
 8008afc:	dc1c      	bgt.n	8008b38 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008afe:	f7ff fc27 	bl	8008350 <xTaskGetSchedulerState>
 8008b02:	2802      	cmp	r0, #2
 8008b04:	d010      	beq.n	8008b28 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b06:	2300      	movs	r3, #0
 8008b08:	461a      	mov	r2, r3
 8008b0a:	4669      	mov	r1, sp
 8008b0c:	480f      	ldr	r0, [pc, #60]	@ (8008b4c <xTimerGenericCommand+0x68>)
 8008b0e:	6800      	ldr	r0, [r0, #0]
 8008b10:	f7fa fc05 	bl	800331e <xQueueGenericSend>
 8008b14:	e015      	b.n	8008b42 <xTimerGenericCommand+0x5e>
 8008b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8008b26:	e7fe      	b.n	8008b26 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9a06      	ldr	r2, [sp, #24]
 8008b2c:	4669      	mov	r1, sp
 8008b2e:	4807      	ldr	r0, [pc, #28]	@ (8008b4c <xTimerGenericCommand+0x68>)
 8008b30:	6800      	ldr	r0, [r0, #0]
 8008b32:	f7fa fbf4 	bl	800331e <xQueueGenericSend>
 8008b36:	e004      	b.n	8008b42 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b38:	2300      	movs	r3, #0
 8008b3a:	4662      	mov	r2, ip
 8008b3c:	4669      	mov	r1, sp
 8008b3e:	f7fa fcb2 	bl	80034a6 <xQueueGenericSendFromISR>
}
 8008b42:	b005      	add	sp, #20
 8008b44:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8008b48:	2000      	movs	r0, #0
}
 8008b4a:	4770      	bx	lr
 8008b4c:	20006b38 	.word	0x20006b38

08008b50 <prvSwitchTimerLists>:
{
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b54:	4b1b      	ldr	r3, [pc, #108]	@ (8008bc4 <prvSwitchTimerLists+0x74>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	b362      	cbz	r2, 8008bb6 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b60:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b62:	1d25      	adds	r5, r4, #4
 8008b64:	4628      	mov	r0, r5
 8008b66:	f7f9 ff97 	bl	8002a98 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b6a:	6a23      	ldr	r3, [r4, #32]
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b70:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008b74:	f013 0f04 	tst.w	r3, #4
 8008b78:	d0ec      	beq.n	8008b54 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b7a:	69a3      	ldr	r3, [r4, #24]
 8008b7c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8008b7e:	429e      	cmp	r6, r3
 8008b80:	d207      	bcs.n	8008b92 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b82:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b84:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b86:	4629      	mov	r1, r5
 8008b88:	4b0e      	ldr	r3, [pc, #56]	@ (8008bc4 <prvSwitchTimerLists+0x74>)
 8008b8a:	6818      	ldr	r0, [r3, #0]
 8008b8c:	f7f9 ff6b 	bl	8002a66 <vListInsert>
 8008b90:	e7e0      	b.n	8008b54 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b92:	2100      	movs	r1, #0
 8008b94:	9100      	str	r1, [sp, #0]
 8008b96:	460b      	mov	r3, r1
 8008b98:	4632      	mov	r2, r6
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f7ff ffa2 	bl	8008ae4 <xTimerGenericCommand>
				configASSERT( xResult );
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d1d7      	bne.n	8008b54 <prvSwitchTimerLists+0x4>
 8008ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	e7fe      	b.n	8008bb4 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8008bb6:	4a04      	ldr	r2, [pc, #16]	@ (8008bc8 <prvSwitchTimerLists+0x78>)
 8008bb8:	6810      	ldr	r0, [r2, #0]
 8008bba:	4902      	ldr	r1, [pc, #8]	@ (8008bc4 <prvSwitchTimerLists+0x74>)
 8008bbc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8008bbe:	6013      	str	r3, [r2, #0]
}
 8008bc0:	b002      	add	sp, #8
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}
 8008bc4:	20006b40 	.word	0x20006b40
 8008bc8:	20006b3c 	.word	0x20006b3c

08008bcc <prvSampleTimeNow>:
{
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8008bd0:	f7ff f92a 	bl	8007e28 <xTaskGetTickCount>
 8008bd4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8008bd6:	4b07      	ldr	r3, [pc, #28]	@ (8008bf4 <prvSampleTimeNow+0x28>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4283      	cmp	r3, r0
 8008bdc:	d805      	bhi.n	8008bea <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8008bde:	2300      	movs	r3, #0
 8008be0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8008be2:	4b04      	ldr	r3, [pc, #16]	@ (8008bf4 <prvSampleTimeNow+0x28>)
 8008be4:	601c      	str	r4, [r3, #0]
}
 8008be6:	4620      	mov	r0, r4
 8008be8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8008bea:	f7ff ffb1 	bl	8008b50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	602b      	str	r3, [r5, #0]
 8008bf2:	e7f6      	b.n	8008be2 <prvSampleTimeNow+0x16>
 8008bf4:	20006b30 	.word	0x20006b30

08008bf8 <prvProcessExpiredTimer>:
{
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c00:	4917      	ldr	r1, [pc, #92]	@ (8008c60 <prvProcessExpiredTimer+0x68>)
 8008c02:	6809      	ldr	r1, [r1, #0]
 8008c04:	68c9      	ldr	r1, [r1, #12]
 8008c06:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c08:	1d20      	adds	r0, r4, #4
 8008c0a:	f7f9 ff45 	bl	8002a98 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c0e:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8008c12:	f01c 0f04 	tst.w	ip, #4
 8008c16:	d108      	bne.n	8008c2a <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c18:	f02c 0c01 	bic.w	ip, ip, #1
 8008c1c:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c20:	6a23      	ldr	r3, [r4, #32]
 8008c22:	4620      	mov	r0, r4
 8008c24:	4798      	blx	r3
}
 8008c26:	b002      	add	sp, #8
 8008c28:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c2a:	69a1      	ldr	r1, [r4, #24]
 8008c2c:	4633      	mov	r3, r6
 8008c2e:	462a      	mov	r2, r5
 8008c30:	4431      	add	r1, r6
 8008c32:	4620      	mov	r0, r4
 8008c34:	f7ff fe5c 	bl	80088f0 <prvInsertTimerInActiveList>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d0f1      	beq.n	8008c20 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	9100      	str	r1, [sp, #0]
 8008c40:	460b      	mov	r3, r1
 8008c42:	4632      	mov	r2, r6
 8008c44:	4620      	mov	r0, r4
 8008c46:	f7ff ff4d 	bl	8008ae4 <xTimerGenericCommand>
			configASSERT( xResult );
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d1e8      	bne.n	8008c20 <prvProcessExpiredTimer+0x28>
 8008c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	e7fe      	b.n	8008c5e <prvProcessExpiredTimer+0x66>
 8008c60:	20006b40 	.word	0x20006b40

08008c64 <prvProcessTimerOrBlockTask>:
{
 8008c64:	b570      	push	{r4, r5, r6, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	4606      	mov	r6, r0
 8008c6a:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8008c6c:	f7ff f8d4 	bl	8007e18 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c70:	a801      	add	r0, sp, #4
 8008c72:	f7ff ffab 	bl	8008bcc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8008c76:	9b01      	ldr	r3, [sp, #4]
 8008c78:	bb33      	cbnz	r3, 8008cc8 <prvProcessTimerOrBlockTask+0x64>
 8008c7a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c7c:	b9e4      	cbnz	r4, 8008cb8 <prvProcessTimerOrBlockTask+0x54>
 8008c7e:	42b0      	cmp	r0, r6
 8008c80:	d213      	bcs.n	8008caa <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c82:	4622      	mov	r2, r4
 8008c84:	1b71      	subs	r1, r6, r5
 8008c86:	4b12      	ldr	r3, [pc, #72]	@ (8008cd0 <prvProcessTimerOrBlockTask+0x6c>)
 8008c88:	6818      	ldr	r0, [r3, #0]
 8008c8a:	f7fa fd8d 	bl	80037a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c8e:	f7ff f95d 	bl	8007f4c <xTaskResumeAll>
 8008c92:	b9d8      	cbnz	r0, 8008ccc <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8008c94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	e010      	b.n	8008ccc <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8008caa:	f7ff f94f 	bl	8007f4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008cae:	4629      	mov	r1, r5
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f7ff ffa1 	bl	8008bf8 <prvProcessExpiredTimer>
 8008cb6:	e009      	b.n	8008ccc <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008cb8:	4a06      	ldr	r2, [pc, #24]	@ (8008cd4 <prvProcessTimerOrBlockTask+0x70>)
 8008cba:	6812      	ldr	r2, [r2, #0]
 8008cbc:	6812      	ldr	r2, [r2, #0]
 8008cbe:	b90a      	cbnz	r2, 8008cc4 <prvProcessTimerOrBlockTask+0x60>
 8008cc0:	2401      	movs	r4, #1
 8008cc2:	e7de      	b.n	8008c82 <prvProcessTimerOrBlockTask+0x1e>
 8008cc4:	461c      	mov	r4, r3
 8008cc6:	e7dc      	b.n	8008c82 <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8008cc8:	f7ff f940 	bl	8007f4c <xTaskResumeAll>
}
 8008ccc:	b002      	add	sp, #8
 8008cce:	bd70      	pop	{r4, r5, r6, pc}
 8008cd0:	20006b38 	.word	0x20006b38
 8008cd4:	20006b3c 	.word	0x20006b3c

08008cd8 <prvProcessReceivedCommands>:
{
 8008cd8:	b510      	push	{r4, lr}
 8008cda:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cdc:	e002      	b.n	8008ce4 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008cde:	9b04      	ldr	r3, [sp, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	da0f      	bge.n	8008d04 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	a904      	add	r1, sp, #16
 8008ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8008de0 <prvProcessReceivedCommands+0x108>)
 8008cea:	6818      	ldr	r0, [r3, #0]
 8008cec:	f7fa fc42 	bl	8003574 <xQueueReceive>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d072      	beq.n	8008dda <prvProcessReceivedCommands+0x102>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008cf4:	9b04      	ldr	r3, [sp, #16]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	daf1      	bge.n	8008cde <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008cfa:	9907      	ldr	r1, [sp, #28]
 8008cfc:	9806      	ldr	r0, [sp, #24]
 8008cfe:	9b05      	ldr	r3, [sp, #20]
 8008d00:	4798      	blx	r3
 8008d02:	e7ec      	b.n	8008cde <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d04:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d06:	6963      	ldr	r3, [r4, #20]
 8008d08:	b113      	cbz	r3, 8008d10 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d0a:	1d20      	adds	r0, r4, #4
 8008d0c:	f7f9 fec4 	bl	8002a98 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d10:	a803      	add	r0, sp, #12
 8008d12:	f7ff ff5b 	bl	8008bcc <prvSampleTimeNow>
 8008d16:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8008d18:	9b04      	ldr	r3, [sp, #16]
 8008d1a:	2b09      	cmp	r3, #9
 8008d1c:	d8e2      	bhi.n	8008ce4 <prvProcessReceivedCommands+0xc>
 8008d1e:	e8df f003 	tbb	[pc, r3]
 8008d22:	0505      	.short	0x0505
 8008d24:	4e362f05 	.word	0x4e362f05
 8008d28:	362f0505 	.word	0x362f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d2c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008d30:	f043 0301 	orr.w	r3, r3, #1
 8008d34:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d38:	9b05      	ldr	r3, [sp, #20]
 8008d3a:	69a1      	ldr	r1, [r4, #24]
 8008d3c:	4419      	add	r1, r3
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f7ff fdd6 	bl	80088f0 <prvInsertTimerInActiveList>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	d0cd      	beq.n	8008ce4 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d48:	6a23      	ldr	r3, [r4, #32]
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d4e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008d52:	f013 0f04 	tst.w	r3, #4
 8008d56:	d0c5      	beq.n	8008ce4 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d58:	69a2      	ldr	r2, [r4, #24]
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	9100      	str	r1, [sp, #0]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	9805      	ldr	r0, [sp, #20]
 8008d62:	4402      	add	r2, r0
 8008d64:	4620      	mov	r0, r4
 8008d66:	f7ff febd 	bl	8008ae4 <xTimerGenericCommand>
							configASSERT( xResult );
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d1ba      	bne.n	8008ce4 <prvProcessReceivedCommands+0xc>
 8008d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	e7fe      	b.n	8008d7e <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d80:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008d84:	f023 0301 	bic.w	r3, r3, #1
 8008d88:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8008d8c:	e7aa      	b.n	8008ce4 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d8e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008d92:	f043 0301 	orr.w	r3, r3, #1
 8008d96:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008d9a:	9905      	ldr	r1, [sp, #20]
 8008d9c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008d9e:	b129      	cbz	r1, 8008dac <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008da0:	4603      	mov	r3, r0
 8008da2:	4401      	add	r1, r0
 8008da4:	4620      	mov	r0, r4
 8008da6:	f7ff fda3 	bl	80088f0 <prvInsertTimerInActiveList>
					break;
 8008daa:	e79b      	b.n	8008ce4 <prvProcessReceivedCommands+0xc>
 8008dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008dbc:	e7fe      	b.n	8008dbc <prvProcessReceivedCommands+0xe4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008dbe:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008dc2:	f013 0f02 	tst.w	r3, #2
 8008dc6:	d004      	beq.n	8008dd2 <prvProcessReceivedCommands+0xfa>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dc8:	f023 0301 	bic.w	r3, r3, #1
 8008dcc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8008dd0:	e788      	b.n	8008ce4 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f7f9 fc00 	bl	80025d8 <vPortFree>
 8008dd8:	e784      	b.n	8008ce4 <prvProcessReceivedCommands+0xc>
}
 8008dda:	b008      	add	sp, #32
 8008ddc:	bd10      	pop	{r4, pc}
 8008dde:	bf00      	nop
 8008de0:	20006b38 	.word	0x20006b38

08008de4 <prvTimerTask>:
{
 8008de4:	b500      	push	{lr}
 8008de6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008de8:	a801      	add	r0, sp, #4
 8008dea:	f7ff fd71 	bl	80088d0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008dee:	9901      	ldr	r1, [sp, #4]
 8008df0:	f7ff ff38 	bl	8008c64 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8008df4:	f7ff ff70 	bl	8008cd8 <prvProcessReceivedCommands>
	for( ;; )
 8008df8:	e7f6      	b.n	8008de8 <prvTimerTask+0x4>

08008dfa <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8008dfa:	b140      	cbz	r0, 8008e0e <pvTimerGetTimerID+0x14>
{
 8008dfc:	b510      	push	{r4, lr}
 8008dfe:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
 8008e00:	f7f9 ffd8 	bl	8002db4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008e04:	69e4      	ldr	r4, [r4, #28]
	}
	taskEXIT_CRITICAL();
 8008e06:	f7f9 fff7 	bl	8002df8 <vPortExitCritical>

	return pvReturn;
}
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	bd10      	pop	{r4, pc}
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8008e1e:	e7fe      	b.n	8008e1e <pvTimerGetTimerID+0x24>

08008e20 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008e20:	b510      	push	{r4, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	4614      	mov	r4, r2
 8008e26:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008e28:	f06f 0301 	mvn.w	r3, #1
 8008e2c:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008e2e:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008e30:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008e32:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e34:	2300      	movs	r3, #0
 8008e36:	4669      	mov	r1, sp
 8008e38:	4802      	ldr	r0, [pc, #8]	@ (8008e44 <xTimerPendFunctionCallFromISR+0x24>)
 8008e3a:	6800      	ldr	r0, [r0, #0]
 8008e3c:	f7fa fb33 	bl	80034a6 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8008e40:	b004      	add	sp, #16
 8008e42:	bd10      	pop	{r4, pc}
 8008e44:	20006b38 	.word	0x20006b38

08008e48 <controller_timing_start>:

void update_next_event(void);

void controller_timing_start(TIM_HandleTypeDef *htim)
{
    if (htim == NULL)
 8008e48:	b320      	cbz	r0, 8008e94 <controller_timing_start+0x4c>
{
 8008e4a:	b510      	push	{r4, lr}
        /**
         * @todo throw an error
         */
        return;
    }
    timer = htim;
 8008e4c:	4c12      	ldr	r4, [pc, #72]	@ (8008e98 <controller_timing_start+0x50>)
 8008e4e:	6020      	str	r0, [r4, #0]
    
    /**
     * This assumes that sys clock is the same as timer clock
     */
    timer->Instance->PSC = (HAL_RCC_GetSysClockFreq() / 1000000UL) - 1;
 8008e50:	f7fc ff9a 	bl	8005d88 <HAL_RCC_GetSysClockFreq>
 8008e54:	4b11      	ldr	r3, [pc, #68]	@ (8008e9c <controller_timing_start+0x54>)
 8008e56:	fba3 2300 	umull	r2, r3, r3, r0
 8008e5a:	0c9b      	lsrs	r3, r3, #18
 8008e5c:	6820      	ldr	r0, [r4, #0]
 8008e5e:	6802      	ldr	r2, [r0, #0]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	6293      	str	r3, [r2, #40]	@ 0x28
    //timer->Instance->ARR = 100000;
    timer->Instance->EGR |= TIM_EGR_UG;  // Force an update event → immediately reloads PSC
 8008e64:	6802      	ldr	r2, [r0, #0]
 8008e66:	6953      	ldr	r3, [r2, #20]
 8008e68:	f043 0301 	orr.w	r3, r3, #1
 8008e6c:	6153      	str	r3, [r2, #20]

    HAL_TIM_Base_Start_IT(timer);
 8008e6e:	f7fd f9b5 	bl	80061dc <HAL_TIM_Base_Start_IT>
    HAL_TIM_OC_Start_IT(timer, TIM_CHANNEL_1);    
 8008e72:	2100      	movs	r1, #0
 8008e74:	6820      	ldr	r0, [r4, #0]
 8008e76:	f7fd fcdf 	bl	8006838 <HAL_TIM_OC_Start_IT>

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	2b13      	cmp	r3, #19
 8008e7e:	d808      	bhi.n	8008e92 <controller_timing_start+0x4a>
    {
        event_queue[i].state = EVENT_STATE_INACTIVE;
 8008e80:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008e84:	4a06      	ldr	r2, [pc, #24]	@ (8008ea0 <controller_timing_start+0x58>)
 8008e86:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	7411      	strb	r1, [r2, #16]
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8008e8e:	3301      	adds	r3, #1
 8008e90:	e7f4      	b.n	8008e7c <controller_timing_start+0x34>
    }
    
}
 8008e92:	bd10      	pop	{r4, pc}
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	20006cfc 	.word	0x20006cfc
 8008e9c:	431bde83 	.word	0x431bde83
 8008ea0:	20006b6c 	.word	0x20006b6c

08008ea4 <get_time_us>:

time_us_t get_time_us(void)
{
    return timer->Instance->CNT;
 8008ea4:	4b02      	ldr	r3, [pc, #8]	@ (8008eb0 <get_time_us+0xc>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	20006cfc 	.word	0x20006cfc

08008eb4 <get_time_ms>:

time_ms_t get_time_ms(void)
{
    return timer->Instance->CNT / 1000U;
 8008eb4:	4b04      	ldr	r3, [pc, #16]	@ (8008ec8 <get_time_ms+0x14>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008ebc:	4b03      	ldr	r3, [pc, #12]	@ (8008ecc <get_time_ms+0x18>)
 8008ebe:	fba3 3000 	umull	r3, r0, r3, r0
}
 8008ec2:	0980      	lsrs	r0, r0, #6
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	20006cfc 	.word	0x20006cfc
 8008ecc:	10624dd3 	.word	0x10624dd3

08008ed0 <update_next_event>:

void update_next_event(void)
{
 8008ed0:	b410      	push	{r4}
    time_us_t nearest_time = 0xFFFFFFFF;
    bool found = false;

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8008ed2:	2300      	movs	r3, #0
    bool found = false;
 8008ed4:	4618      	mov	r0, r3
    time_us_t nearest_time = 0xFFFFFFFF;
 8008ed6:	f04f 34ff 	mov.w	r4, #4294967295
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8008eda:	e006      	b.n	8008eea <update_next_event+0x1a>
        
        /* This will handle wraparound safely aparantly, but i don't know how it works yet :( */
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
        {
            found = true;
            nearest_time = event_queue[i].timestamp_us;
 8008edc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008ee0:	008a      	lsls	r2, r1, #2
 8008ee2:	4910      	ldr	r1, [pc, #64]	@ (8008f24 <update_next_event+0x54>)
 8008ee4:	588c      	ldr	r4, [r1, r2]
            found = true;
 8008ee6:	2001      	movs	r0, #1
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8008ee8:	3301      	adds	r3, #1
 8008eea:	2b13      	cmp	r3, #19
 8008eec:	d812      	bhi.n	8008f14 <update_next_event+0x44>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 8008eee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008ef2:	0091      	lsls	r1, r2, #2
 8008ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8008f24 <update_next_event+0x54>)
 8008ef6:	440a      	add	r2, r1
 8008ef8:	7c12      	ldrb	r2, [r2, #16]
 8008efa:	2a01      	cmp	r2, #1
 8008efc:	d1f4      	bne.n	8008ee8 <update_next_event+0x18>
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
 8008efe:	2800      	cmp	r0, #0
 8008f00:	d0ec      	beq.n	8008edc <update_next_event+0xc>
 8008f02:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008f06:	008a      	lsls	r2, r1, #2
 8008f08:	4906      	ldr	r1, [pc, #24]	@ (8008f24 <update_next_event+0x54>)
 8008f0a:	588a      	ldr	r2, [r1, r2]
 8008f0c:	1b12      	subs	r2, r2, r4
 8008f0e:	2a00      	cmp	r2, #0
 8008f10:	daea      	bge.n	8008ee8 <update_next_event+0x18>
 8008f12:	e7e3      	b.n	8008edc <update_next_event+0xc>
        }        
    }

    if (found) {
 8008f14:	b118      	cbz	r0, 8008f1e <update_next_event+0x4e>
        // Schedule next interrupt
        timer->Instance->CCR1 = nearest_time;
 8008f16:	4b04      	ldr	r3, [pc, #16]	@ (8008f28 <update_next_event+0x58>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	635c      	str	r4, [r3, #52]	@ 0x34
    } else {
        // No pending events — disable future interrupts or set a dummy compare
        /* Should i set a compare in the near future ?*/
        //timer->Instance->CCR1 = 0xFFFFFFFF;
    }
}
 8008f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	20006b6c 	.word	0x20006b6c
 8008f28:	20006cfc 	.word	0x20006cfc

08008f2c <scheduler_timer_callback>:

void scheduler_timer_callback()
{
 8008f2c:	b538      	push	{r3, r4, r5, lr}
    // Exit early if this wasn't a CCR1 match
    if (!(timer->Instance->SR & TIM_SR_CC1IF))
 8008f2e:	4b23      	ldr	r3, [pc, #140]	@ (8008fbc <scheduler_timer_callback+0x90>)
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	6813      	ldr	r3, [r2, #0]
 8008f34:	6919      	ldr	r1, [r3, #16]
 8008f36:	f011 0f02 	tst.w	r1, #2
 8008f3a:	d03e      	beq.n	8008fba <scheduler_timer_callback+0x8e>
    {
        return;
    }

    timer->Instance->SR &= ~TIM_SR_CC1IF;  // Clear the compare match flag
 8008f3c:	6919      	ldr	r1, [r3, #16]
 8008f3e:	f021 0102 	bic.w	r1, r1, #2
 8008f42:	6119      	str	r1, [r3, #16]
    time_us_t time_now_us = timer->Instance->CNT; // I have avoided the function call overhead here. might be minimal anyways...
 8008f44:	6813      	ldr	r3, [r2, #0]
 8008f46:	6a5d      	ldr	r5, [r3, #36]	@ 0x24

    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8008f48:	2400      	movs	r4, #0
 8008f4a:	e00e      	b.n	8008f6a <scheduler_timer_callback+0x3e>
        {
            event_queue[i].callback_arg(event_queue[i].arg);
        }
        else
        {
            event_queue[i].callback_noarg();
 8008f4c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008f50:	009a      	lsls	r2, r3, #2
 8008f52:	4b1b      	ldr	r3, [pc, #108]	@ (8008fc0 <scheduler_timer_callback+0x94>)
 8008f54:	4413      	add	r3, r2
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	4798      	blx	r3
        }

        event_queue[i].state = EVENT_STATE_INACTIVE;
 8008f5a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008f5e:	009a      	lsls	r2, r3, #2
 8008f60:	4b17      	ldr	r3, [pc, #92]	@ (8008fc0 <scheduler_timer_callback+0x94>)
 8008f62:	4413      	add	r3, r2
 8008f64:	2200      	movs	r2, #0
 8008f66:	741a      	strb	r2, [r3, #16]
    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8008f68:	3401      	adds	r4, #1
 8008f6a:	2c13      	cmp	r4, #19
 8008f6c:	dc23      	bgt.n	8008fb6 <scheduler_timer_callback+0x8a>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 8008f6e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008f72:	009a      	lsls	r2, r3, #2
 8008f74:	4b12      	ldr	r3, [pc, #72]	@ (8008fc0 <scheduler_timer_callback+0x94>)
 8008f76:	4413      	add	r3, r2
 8008f78:	7c1b      	ldrb	r3, [r3, #16]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d1f4      	bne.n	8008f68 <scheduler_timer_callback+0x3c>
        if ((int32_t)(time_now_us - event_queue[i].timestamp_us) < 0)
 8008f7e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008f82:	0093      	lsls	r3, r2, #2
 8008f84:	4a0e      	ldr	r2, [pc, #56]	@ (8008fc0 <scheduler_timer_callback+0x94>)
 8008f86:	58d3      	ldr	r3, [r2, r3]
 8008f88:	1aeb      	subs	r3, r5, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	dbec      	blt.n	8008f68 <scheduler_timer_callback+0x3c>
        event_queue[i].state = EVENT_STATE_ACTIVE;
 8008f8e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008f92:	009a      	lsls	r2, r3, #2
 8008f94:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc0 <scheduler_timer_callback+0x94>)
 8008f96:	4413      	add	r3, r2
 8008f98:	2202      	movs	r2, #2
 8008f9a:	741a      	strb	r2, [r3, #16]
        if (event_queue[i].uses_arg)
 8008f9c:	7c5b      	ldrb	r3, [r3, #17]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d0d4      	beq.n	8008f4c <scheduler_timer_callback+0x20>
            event_queue[i].callback_arg(event_queue[i].arg);
 8008fa2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008fa6:	fa03 f202 	lsl.w	r2, r3, r2
 8008faa:	4b05      	ldr	r3, [pc, #20]	@ (8008fc0 <scheduler_timer_callback+0x94>)
 8008fac:	4413      	add	r3, r2
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	68d8      	ldr	r0, [r3, #12]
 8008fb2:	4790      	blx	r2
 8008fb4:	e7d1      	b.n	8008f5a <scheduler_timer_callback+0x2e>
    }

    update_next_event();  // Schedule the next event
 8008fb6:	f7ff ff8b 	bl	8008ed0 <update_next_event>
}
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
 8008fbc:	20006cfc 	.word	0x20006cfc
 8008fc0:	20006b6c 	.word	0x20006b6c

08008fc4 <scheduler_schedule_event_with_arg>:


bool scheduler_schedule_event_with_arg(time_us_t timestamp_us, void (*callback)(void *), void *arg)
{
    if (callback == NULL) return false;
 8008fc4:	b311      	cbz	r1, 800900c <scheduler_schedule_event_with_arg+0x48>
{
 8008fc6:	b510      	push	{r4, lr}
 8008fc8:	460c      	mov	r4, r1

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8008fca:	2300      	movs	r3, #0
 8008fcc:	2b13      	cmp	r3, #19
 8008fce:	d81b      	bhi.n	8009008 <scheduler_schedule_event_with_arg+0x44>
        if (event_queue[i].state == EVENT_STATE_INACTIVE) {
 8008fd0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8008fd4:	490e      	ldr	r1, [pc, #56]	@ (8009010 <scheduler_schedule_event_with_arg+0x4c>)
 8008fd6:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8008fda:	7c09      	ldrb	r1, [r1, #16]
 8008fdc:	b109      	cbz	r1, 8008fe2 <scheduler_schedule_event_with_arg+0x1e>
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8008fde:	3301      	adds	r3, #1
 8008fe0:	e7f4      	b.n	8008fcc <scheduler_schedule_event_with_arg+0x8>
            event_queue[i].timestamp_us = timestamp_us;
 8008fe2:	490b      	ldr	r1, [pc, #44]	@ (8009010 <scheduler_schedule_event_with_arg+0x4c>)
 8008fe4:	46e6      	mov	lr, ip
 8008fe6:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8008fea:	f841 002e 	str.w	r0, [r1, lr, lsl #2]
            event_queue[i].callback_arg = callback;
 8008fee:	f8cc 4004 	str.w	r4, [ip, #4]
            event_queue[i].arg = arg;
 8008ff2:	f8cc 200c 	str.w	r2, [ip, #12]
            event_queue[i].uses_arg = true;
 8008ff6:	2401      	movs	r4, #1
 8008ff8:	f88c 4011 	strb.w	r4, [ip, #17]
            event_queue[i].state = EVENT_STATE_PENDING;
 8008ffc:	f88c 4010 	strb.w	r4, [ip, #16]

            update_next_event();
 8009000:	f7ff ff66 	bl	8008ed0 <update_next_event>
            return true;
 8009004:	4620      	mov	r0, r4
        }
    }

    return false;
}
 8009006:	bd10      	pop	{r4, pc}
    return false;
 8009008:	2000      	movs	r0, #0
 800900a:	e7fc      	b.n	8009006 <scheduler_schedule_event_with_arg+0x42>
    if (callback == NULL) return false;
 800900c:	2000      	movs	r0, #0
}
 800900e:	4770      	bx	lr
 8009010:	20006b6c 	.word	0x20006b6c

08009014 <set_filtering>:
/* just a temporary fix */
trigger_t *trigger = NULL;

void set_filtering()
{
  switch (trigger->settings->filtering)
 8009014:	4b0e      	ldr	r3, [pc, #56]	@ (8009050 <set_filtering+0x3c>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800901a:	7812      	ldrb	r2, [r2, #0]
 800901c:	2a03      	cmp	r2, #3
 800901e:	d813      	bhi.n	8009048 <set_filtering+0x34>
 8009020:	e8df f002 	tbb	[pc, r2]
 8009024:	0c090502 	.word	0x0c090502
  {
    case TRIGGER_FILTERING_NONE:
      trigger->_trigger_filter_time_us = 0;
 8009028:	2200      	movs	r2, #0
 800902a:	605a      	str	r2, [r3, #4]
        break;
 800902c:	4770      	bx	lr
    case TRIGGER_FILTERING_LITE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 4U;
 800902e:	695a      	ldr	r2, [r3, #20]
 8009030:	0892      	lsrs	r2, r2, #2
 8009032:	605a      	str	r2, [r3, #4]
        break;
 8009034:	4770      	bx	lr
    case TRIGGER_FILTERING_MEDIUM:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 1U;
 8009036:	695a      	ldr	r2, [r3, #20]
 8009038:	605a      	str	r2, [r3, #4]
        break;
 800903a:	4770      	bx	lr
    case TRIGGER_FILTERING_AGGRESSIVE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us * 3 / 4;
 800903c:	695a      	ldr	r2, [r3, #20]
 800903e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009042:	0892      	lsrs	r2, r2, #2
 8009044:	605a      	str	r2, [r3, #4]
        break;
 8009046:	4770      	bx	lr
    default:
        // Handle invalid filtering level
        trigger->_trigger_filter_time_us = 0;
 8009048:	2200      	movs	r2, #0
 800904a:	605a      	str	r2, [r3, #4]
        break;
  }
}
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	20006d00 	.word	0x20006d00

08009054 <trigger_init>:

void trigger_init(trigger_t *trigger_ptr, trigger_settings_t *settings)
{   
 8009054:	b538      	push	{r3, r4, r5, lr}
  bool temp_status = true;
  if (trigger_ptr == NULL)
 8009056:	b170      	cbz	r0, 8009076 <trigger_init+0x22>
 8009058:	460c      	mov	r4, r1
 800905a:	4603      	mov	r3, r0
  {
    log_error("Trigger initialization failed. Trigger is NULL.");
    return;
  }
  trigger = trigger_ptr;
 800905c:	4a12      	ldr	r2, [pc, #72]	@ (80090a8 <trigger_init+0x54>)
 800905e:	6010      	str	r0, [r2, #0]

  if (settings == NULL)
 8009060:	b169      	cbz	r1, 800907e <trigger_init+0x2a>
  {
    log_error("Trigger initialization failed. Settings are NULL.");
    return;
  }
  
  if (settings->full_teeth == 0 || settings->missing_teeth == 0)
 8009062:	784a      	ldrb	r2, [r1, #1]
 8009064:	b10a      	cbz	r2, 800906a <trigger_init+0x16>
 8009066:	788a      	ldrb	r2, [r1, #2]
 8009068:	b96a      	cbnz	r2, 8009086 <trigger_init+0x32>
  {
    temp_status = false;
    trigger->initialized = temp_status;
 800906a:	2200      	movs	r2, #0
 800906c:	701a      	strb	r2, [r3, #0]
    log_error("Trigger initialization failed. Teeth misconfigured.");
 800906e:	480f      	ldr	r0, [pc, #60]	@ (80090ac <trigger_init+0x58>)
 8009070:	f7f8 ff80 	bl	8001f74 <log_error>
  trigger->settings = settings;
  trigger->sync_status = TS_NOT_SYNCED;
  set_filtering(trigger);
  trigger->_trigger_actual_teeth = settings->full_teeth - settings->missing_teeth;
  trigger->initialized = true;
}
 8009074:	bd38      	pop	{r3, r4, r5, pc}
    log_error("Trigger initialization failed. Trigger is NULL.");
 8009076:	480e      	ldr	r0, [pc, #56]	@ (80090b0 <trigger_init+0x5c>)
 8009078:	f7f8 ff7c 	bl	8001f74 <log_error>
    return;
 800907c:	e7fa      	b.n	8009074 <trigger_init+0x20>
    log_error("Trigger initialization failed. Settings are NULL.");
 800907e:	480d      	ldr	r0, [pc, #52]	@ (80090b4 <trigger_init+0x60>)
 8009080:	f7f8 ff78 	bl	8001f74 <log_error>
    return;
 8009084:	e7f6      	b.n	8009074 <trigger_init+0x20>
  trigger->settings = settings;
 8009086:	6241      	str	r1, [r0, #36]	@ 0x24
  trigger->sync_status = TS_NOT_SYNCED;
 8009088:	2200      	movs	r2, #0
 800908a:	7042      	strb	r2, [r0, #1]
  set_filtering(trigger);
 800908c:	4d06      	ldr	r5, [pc, #24]	@ (80090a8 <trigger_init+0x54>)
 800908e:	6828      	ldr	r0, [r5, #0]
 8009090:	f7ff ffc0 	bl	8009014 <set_filtering>
  trigger->_trigger_actual_teeth = settings->full_teeth - settings->missing_teeth;
 8009094:	7863      	ldrb	r3, [r4, #1]
 8009096:	78a1      	ldrb	r1, [r4, #2]
 8009098:	682a      	ldr	r2, [r5, #0]
 800909a:	1a5b      	subs	r3, r3, r1
 800909c:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22
  trigger->initialized = true;
 80090a0:	2301      	movs	r3, #1
 80090a2:	7013      	strb	r3, [r2, #0]
 80090a4:	e7e6      	b.n	8009074 <trigger_init+0x20>
 80090a6:	bf00      	nop
 80090a8:	20006d00 	.word	0x20006d00
 80090ac:	0800bcd8 	.word	0x0800bcd8
 80090b0:	0800bc74 	.word	0x0800bc74
 80090b4:	0800bca4 	.word	0x0800bca4

080090b8 <crankshaft_get_rpm>:


rpm_t crankshaft_get_rpm()
{
  return engine.rpm;
}
 80090b8:	4b01      	ldr	r3, [pc, #4]	@ (80090c0 <crankshaft_get_rpm+0x8>)
 80090ba:	ed93 0a03 	vldr	s0, [r3, #12]
 80090be:	4770      	bx	lr
 80090c0:	2000186c 	.word	0x2000186c

080090c4 <crankshaft_get_angle>:
 * @note angle is updated on every trigger event!
 */
angle_t crankshaft_get_angle()
{
  return engine.crankshaft_angle;
}
 80090c4:	4b01      	ldr	r3, [pc, #4]	@ (80090cc <crankshaft_get_angle+0x8>)
 80090c6:	ed93 0a01 	vldr	s0, [r3, #4]
 80090ca:	4770      	bx	lr
 80090cc:	2000186c 	.word	0x2000186c

080090d0 <trigger_tooth_handle>:
{
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	ed2d 8b02 	vpush	{d8}
  if (!trigger->initialized)
 80090d6:	4b61      	ldr	r3, [pc, #388]	@ (800925c <trigger_tooth_handle+0x18c>)
 80090d8:	681d      	ldr	r5, [r3, #0]
 80090da:	782c      	ldrb	r4, [r5, #0]
 80090dc:	2c00      	cmp	r4, #0
 80090de:	f000 8081 	beq.w	80091e4 <trigger_tooth_handle+0x114>
  trigger->_tooth_time_us[0] = get_time_us();
 80090e2:	f7ff fedf 	bl	8008ea4 <get_time_us>
 80090e6:	60a8      	str	r0, [r5, #8]
  trigger->_current_tooth_gap_us = trigger->_tooth_time_us[0] - trigger->_tooth_time_us[1];
 80090e8:	4b5c      	ldr	r3, [pc, #368]	@ (800925c <trigger_tooth_handle+0x18c>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	689a      	ldr	r2, [r3, #8]
 80090ee:	68d8      	ldr	r0, [r3, #12]
 80090f0:	1a12      	subs	r2, r2, r0
 80090f2:	615a      	str	r2, [r3, #20]
  if (trigger->_current_tooth_gap_us < trigger->_trigger_filter_time_us) // Pulses should never be less than _trigger_filter_time_us, so if they are it means a false trigger. (A 36-1 wheel at 8000rpm will have triggers approx. every 200uS)
 80090f4:	6859      	ldr	r1, [r3, #4]
 80090f6:	428a      	cmp	r2, r1
 80090f8:	d371      	bcc.n	80091de <trigger_tooth_handle+0x10e>
  trigger->_counted_tooth++; //Increment the tooth counter
 80090fa:	8c19      	ldrh	r1, [r3, #32]
 80090fc:	3101      	adds	r1, #1
 80090fe:	b289      	uxth	r1, r1
 8009100:	8419      	strh	r1, [r3, #32]
  previous_tooth_gap = trigger->_tooth_time_us[1] - trigger->_tooth_time_us[2];
 8009102:	691d      	ldr	r5, [r3, #16]
 8009104:	1b40      	subs	r0, r0, r5
  if (previous_tooth_gap < trigger->_current_tooth_gap_us) 
 8009106:	4282      	cmp	r2, r0
 8009108:	d970      	bls.n	80091ec <trigger_tooth_handle+0x11c>
    trigger->_shorter_tooth_gap = previous_tooth_gap;
 800910a:	6198      	str	r0, [r3, #24]
  if(trigger->settings->missing_teeth == 1)
 800910c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800910e:	7880      	ldrb	r0, [r0, #2]
 8009110:	2801      	cmp	r0, #1
 8009112:	d06d      	beq.n	80091f0 <trigger_tooth_handle+0x120>
    trigger->_target_tooth_gap_us = trigger->_shorter_tooth_gap * trigger->settings->missing_teeth;
 8009114:	699d      	ldr	r5, [r3, #24]
 8009116:	fb00 f505 	mul.w	r5, r0, r5
 800911a:	61dd      	str	r5, [r3, #28]
  if ((trigger->_current_tooth_gap_us > trigger->_target_tooth_gap_us) || (trigger->_counted_tooth > trigger->_trigger_actual_teeth))
 800911c:	69d8      	ldr	r0, [r3, #28]
 800911e:	4282      	cmp	r2, r0
 8009120:	d803      	bhi.n	800912a <trigger_tooth_handle+0x5a>
 8009122:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8009126:	4291      	cmp	r1, r2
 8009128:	d977      	bls.n	800921a <trigger_tooth_handle+0x14a>
    if (trigger->_counted_tooth < trigger->_trigger_actual_teeth)
 800912a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800912e:	4291      	cmp	r1, r2
 8009130:	d264      	bcs.n	80091fc <trigger_tooth_handle+0x12c>
      trigger->sync_status = TS_NOT_SYNCED;
 8009132:	2200      	movs	r2, #0
 8009134:	705a      	strb	r2, [r3, #1]
      trigger->sync_loss_counter++;
 8009136:	4949      	ldr	r1, [pc, #292]	@ (800925c <trigger_tooth_handle+0x18c>)
 8009138:	6808      	ldr	r0, [r1, #0]
 800913a:	8843      	ldrh	r3, [r0, #2]
 800913c:	3301      	adds	r3, #1
 800913e:	8043      	strh	r3, [r0, #2]
      engine.total_revolutions = 0;
 8009140:	4b47      	ldr	r3, [pc, #284]	@ (8009260 <trigger_tooth_handle+0x190>)
 8009142:	601a      	str	r2, [r3, #0]
      engine.rpm = 0;
 8009144:	2000      	movs	r0, #0
 8009146:	60d8      	str	r0, [r3, #12]
      trigger->_counted_tooth = 0;
 8009148:	680b      	ldr	r3, [r1, #0]
 800914a:	841a      	strh	r2, [r3, #32]
  engine.crankshaft_angle = 360.0f / (angle_t)configuration.trigger.full_teeth * (angle_t)trigger->_counted_tooth;
 800914c:	4b45      	ldr	r3, [pc, #276]	@ (8009264 <trigger_tooth_handle+0x194>)
 800914e:	79d9      	ldrb	r1, [r3, #7]
 8009150:	ee07 1a90 	vmov	s15, r1
 8009154:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009158:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8009268 <trigger_tooth_handle+0x198>
 800915c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009160:	4b3e      	ldr	r3, [pc, #248]	@ (800925c <trigger_tooth_handle+0x18c>)
 8009162:	6818      	ldr	r0, [r3, #0]
 8009164:	8c03      	ldrh	r3, [r0, #32]
 8009166:	ee07 3a10 	vmov	s14, r3
 800916a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800916e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009172:	4a3b      	ldr	r2, [pc, #236]	@ (8009260 <trigger_tooth_handle+0x190>)
 8009174:	edc2 7a01 	vstr	s15, [r2, #4]
  engine.rpm = (rpm_t)(CONVERSION_FACTOR_SECONDS_TO_MICROSECONDS * CONVERSION_FACTOR_MINUTES_TO_SECONDS / trigger->_shorter_tooth_gap / configuration.trigger.full_teeth);
 8009178:	6985      	ldr	r5, [r0, #24]
 800917a:	4b3c      	ldr	r3, [pc, #240]	@ (800926c <trigger_tooth_handle+0x19c>)
 800917c:	fbb3 f3f5 	udiv	r3, r3, r5
 8009180:	fbb3 f3f1 	udiv	r3, r3, r1
 8009184:	ee07 3a90 	vmov	s15, r3
 8009188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918c:	edc2 7a03 	vstr	s15, [r2, #12]
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= configuration.cranking_rpm_threshold)
 8009190:	7843      	ldrb	r3, [r0, #1]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d043      	beq.n	800921e <trigger_tooth_handle+0x14e>
  else if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < configuration.cranking_rpm_threshold)
 8009196:	2b01      	cmp	r3, #1
 8009198:	d04d      	beq.n	8009236 <trigger_tooth_handle+0x166>
  else if (trigger->sync_status == TS_NOT_SYNCED)
 800919a:	2b00      	cmp	r3, #0
 800919c:	d157      	bne.n	800924e <trigger_tooth_handle+0x17e>
    engine.spinning_state = SS_SPINNING_UP;
 800919e:	4b30      	ldr	r3, [pc, #192]	@ (8009260 <trigger_tooth_handle+0x190>)
 80091a0:	2201      	movs	r2, #1
 80091a2:	745a      	strb	r2, [r3, #17]
  if(is_missing_teeth == false)
 80091a4:	2c00      	cmp	r4, #0
 80091a6:	d056      	beq.n	8009256 <trigger_tooth_handle+0x186>
  trigger->_tooth_time_us[2] = trigger->_tooth_time_us[1];
 80091a8:	4b2c      	ldr	r3, [pc, #176]	@ (800925c <trigger_tooth_handle+0x18c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68da      	ldr	r2, [r3, #12]
 80091ae:	611a      	str	r2, [r3, #16]
  trigger->_tooth_time_us[1] = trigger->_tooth_time_us[0];
 80091b0:	689a      	ldr	r2, [r3, #8]
 80091b2:	60da      	str	r2, [r3, #12]
  ignition_trigger_event_handle(crankshaft_get_angle(), crankshaft_get_rpm(), get_time_us());
 80091b4:	f7ff ff86 	bl	80090c4 <crankshaft_get_angle>
 80091b8:	eeb0 8a40 	vmov.f32	s16, s0
 80091bc:	f7ff ff7c 	bl	80090b8 <crankshaft_get_rpm>
 80091c0:	eef0 8a40 	vmov.f32	s17, s0
 80091c4:	f7ff fe6e 	bl	8008ea4 <get_time_us>
 80091c8:	eef0 0a68 	vmov.f32	s1, s17
 80091cc:	eeb0 0a48 	vmov.f32	s0, s16
 80091d0:	f7f9 fb56 	bl	8002880 <ignition_trigger_event_handle>
  osEventFlagsSet(engine.flags, ENGINE_FLAG_TRIGGER_EVENT);
 80091d4:	2101      	movs	r1, #1
 80091d6:	4b22      	ldr	r3, [pc, #136]	@ (8009260 <trigger_tooth_handle+0x190>)
 80091d8:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80091da:	f7f7 ff69 	bl	80010b0 <osEventFlagsSet>
}
 80091de:	ecbd 8b02 	vpop	{d8}
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
    log_error("Trigger is not initialized.");
 80091e4:	4822      	ldr	r0, [pc, #136]	@ (8009270 <trigger_tooth_handle+0x1a0>)
 80091e6:	f7f8 fec5 	bl	8001f74 <log_error>
    return;
 80091ea:	e7f8      	b.n	80091de <trigger_tooth_handle+0x10e>
    trigger->_shorter_tooth_gap = trigger->_current_tooth_gap_us;
 80091ec:	619a      	str	r2, [r3, #24]
 80091ee:	e78d      	b.n	800910c <trigger_tooth_handle+0x3c>
    trigger->_target_tooth_gap_us = (3 * trigger->_shorter_tooth_gap) >> 1; 
 80091f0:	6998      	ldr	r0, [r3, #24]
 80091f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80091f6:	0840      	lsrs	r0, r0, #1
 80091f8:	61d8      	str	r0, [r3, #28]
 80091fa:	e78f      	b.n	800911c <trigger_tooth_handle+0x4c>
      trigger->sync_status = TS_FULLY_SYNCED;
 80091fc:	2201      	movs	r2, #1
 80091fe:	705a      	strb	r2, [r3, #1]
      engine.total_revolutions++;
 8009200:	4b17      	ldr	r3, [pc, #92]	@ (8009260 <trigger_tooth_handle+0x190>)
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	3201      	adds	r2, #1
 8009206:	601a      	str	r2, [r3, #0]
      trigger->_counted_tooth = 0;
 8009208:	4a14      	ldr	r2, [pc, #80]	@ (800925c <trigger_tooth_handle+0x18c>)
 800920a:	6812      	ldr	r2, [r2, #0]
 800920c:	2100      	movs	r1, #0
 800920e:	8411      	strh	r1, [r2, #32]
      osEventFlagsSet(engine.flags, ENGINE_FLAG_ROTATION_EVENT);
 8009210:	2102      	movs	r1, #2
 8009212:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8009214:	f7f7 ff4c 	bl	80010b0 <osEventFlagsSet>
 8009218:	e798      	b.n	800914c <trigger_tooth_handle+0x7c>
  bool is_missing_teeth = false;
 800921a:	2400      	movs	r4, #0
 800921c:	e796      	b.n	800914c <trigger_tooth_handle+0x7c>
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= configuration.cranking_rpm_threshold)
 800921e:	4a11      	ldr	r2, [pc, #68]	@ (8009264 <trigger_tooth_handle+0x194>)
 8009220:	ed92 7a03 	vldr	s14, [r2, #12]
 8009224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800922c:	dbb3      	blt.n	8009196 <trigger_tooth_handle+0xc6>
    engine.spinning_state = SS_RUNNING;
 800922e:	4b0c      	ldr	r3, [pc, #48]	@ (8009260 <trigger_tooth_handle+0x190>)
 8009230:	2203      	movs	r2, #3
 8009232:	745a      	strb	r2, [r3, #17]
 8009234:	e7b6      	b.n	80091a4 <trigger_tooth_handle+0xd4>
  else if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < configuration.cranking_rpm_threshold)
 8009236:	4a0b      	ldr	r2, [pc, #44]	@ (8009264 <trigger_tooth_handle+0x194>)
 8009238:	ed92 7a03 	vldr	s14, [r2, #12]
 800923c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009244:	d5a9      	bpl.n	800919a <trigger_tooth_handle+0xca>
    engine.spinning_state = SS_CRANKING;
 8009246:	4b06      	ldr	r3, [pc, #24]	@ (8009260 <trigger_tooth_handle+0x190>)
 8009248:	2202      	movs	r2, #2
 800924a:	745a      	strb	r2, [r3, #17]
 800924c:	e7aa      	b.n	80091a4 <trigger_tooth_handle+0xd4>
    engine.spinning_state = SS_STOPPED;
 800924e:	4b04      	ldr	r3, [pc, #16]	@ (8009260 <trigger_tooth_handle+0x190>)
 8009250:	2200      	movs	r2, #0
 8009252:	745a      	strb	r2, [r3, #17]
 8009254:	e7a6      	b.n	80091a4 <trigger_tooth_handle+0xd4>
    set_filtering(trigger); 
 8009256:	f7ff fedd 	bl	8009014 <set_filtering>
 800925a:	e7a5      	b.n	80091a8 <trigger_tooth_handle+0xd8>
 800925c:	20006d00 	.word	0x20006d00
 8009260:	2000186c 	.word	0x2000186c
 8009264:	200018cc 	.word	0x200018cc
 8009268:	43b40000 	.word	0x43b40000
 800926c:	03938700 	.word	0x03938700
 8009270:	0800bd0c 	.word	0x0800bd0c

08009274 <trigger_simulator_init>:
uint8_t wheel_missing_teeth = 0;
void (*wheel_callback)(void) = NULL;

void trigger_simulator_init(uint8_t full_teeth, uint8_t missing_teeth, void (*callback)(void))
{
    wheel_full_teeth = full_teeth;
 8009274:	4b03      	ldr	r3, [pc, #12]	@ (8009284 <trigger_simulator_init+0x10>)
 8009276:	7018      	strb	r0, [r3, #0]
    wheel_missing_teeth = missing_teeth;
 8009278:	4b03      	ldr	r3, [pc, #12]	@ (8009288 <trigger_simulator_init+0x14>)
 800927a:	7019      	strb	r1, [r3, #0]
    wheel_callback = callback;
 800927c:	4b03      	ldr	r3, [pc, #12]	@ (800928c <trigger_simulator_init+0x18>)
 800927e:	601a      	str	r2, [r3, #0]
}
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	20006d11 	.word	0x20006d11
 8009288:	20006d10 	.word	0x20006d10
 800928c:	20006d0c 	.word	0x20006d0c

08009290 <trigger_simulator_update>:

void trigger_simulator_update(rpm_t rpm)
{
    if (wheel_callback == NULL)
 8009290:	4b20      	ldr	r3, [pc, #128]	@ (8009314 <trigger_simulator_update+0x84>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d03c      	beq.n	8009312 <trigger_simulator_update+0x82>
{
 8009298:	b510      	push	{r4, lr}
    if (rpm == 0)
 800929a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800929e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092a2:	d030      	beq.n	8009306 <trigger_simulator_update+0x76>
    return (time_us_t) 60.0f * 1e6f / (rpm * 360.0f);
 80092a4:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8009318 <trigger_simulator_update+0x88>
 80092a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80092ac:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800931c <trigger_simulator_update+0x8c>
 80092b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80092b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092b8:	ee17 4a90 	vmov	r4, s15
    {
        return;
    }

    time_us_t tooth_interval = microseconds_per_degree(rpm) * 360 / wheel_full_teeth;
 80092bc:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80092c0:	fb03 f404 	mul.w	r4, r3, r4
 80092c4:	4b16      	ldr	r3, [pc, #88]	@ (8009320 <trigger_simulator_update+0x90>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	fbb4 f4f3 	udiv	r4, r4, r3

    time_us_t current_time = get_time_us();
 80092cc:	f7ff fdea 	bl	8008ea4 <get_time_us>
    static time_us_t prev_time = 0;

    if ((int32_t)(current_time - prev_time) < tooth_interval)
 80092d0:	4b14      	ldr	r3, [pc, #80]	@ (8009324 <trigger_simulator_update+0x94>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	1ac3      	subs	r3, r0, r3
 80092d6:	42a3      	cmp	r3, r4
 80092d8:	d314      	bcc.n	8009304 <trigger_simulator_update+0x74>
    {
        return;
    }
    prev_time = current_time;
 80092da:	4b12      	ldr	r3, [pc, #72]	@ (8009324 <trigger_simulator_update+0x94>)
 80092dc:	6018      	str	r0, [r3, #0]
    
    static uint8_t current_tooth_index = 0;

    if (current_tooth_index < wheel_missing_teeth)
 80092de:	4b12      	ldr	r3, [pc, #72]	@ (8009328 <trigger_simulator_update+0x98>)
 80092e0:	781a      	ldrb	r2, [r3, #0]
 80092e2:	4b12      	ldr	r3, [pc, #72]	@ (800932c <trigger_simulator_update+0x9c>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d302      	bcc.n	80092f0 <trigger_simulator_update+0x60>
    {
        // welll do nothing!
    }
    else
    {
        wheel_callback();
 80092ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009314 <trigger_simulator_update+0x84>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4798      	blx	r3
    }
    

    if (current_tooth_index < (wheel_full_teeth - 1))
 80092f0:	4b0d      	ldr	r3, [pc, #52]	@ (8009328 <trigger_simulator_update+0x98>)
 80092f2:	781a      	ldrb	r2, [r3, #0]
 80092f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009320 <trigger_simulator_update+0x90>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	429a      	cmp	r2, r3
 80092fc:	da05      	bge.n	800930a <trigger_simulator_update+0x7a>
    {
        current_tooth_index++;
 80092fe:	3201      	adds	r2, #1
 8009300:	4b09      	ldr	r3, [pc, #36]	@ (8009328 <trigger_simulator_update+0x98>)
 8009302:	701a      	strb	r2, [r3, #0]
    {
        current_tooth_index = 0;
    }


}
 8009304:	bd10      	pop	{r4, pc}
        return 0;
 8009306:	2400      	movs	r4, #0
 8009308:	e7d8      	b.n	80092bc <trigger_simulator_update+0x2c>
        current_tooth_index = 0;
 800930a:	4b07      	ldr	r3, [pc, #28]	@ (8009328 <trigger_simulator_update+0x98>)
 800930c:	2200      	movs	r2, #0
 800930e:	701a      	strb	r2, [r3, #0]
 8009310:	e7f8      	b.n	8009304 <trigger_simulator_update+0x74>
 8009312:	4770      	bx	lr
 8009314:	20006d0c 	.word	0x20006d0c
 8009318:	43b40000 	.word	0x43b40000
 800931c:	4c64e1c0 	.word	0x4c64e1c0
 8009320:	20006d11 	.word	0x20006d11
 8009324:	20006d08 	.word	0x20006d08
 8009328:	20006d04 	.word	0x20006d04
 800932c:	20006d10 	.word	0x20006d10

08009330 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009330:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009332:	2200      	movs	r2, #0
 8009334:	490f      	ldr	r1, [pc, #60]	@ (8009374 <MX_USB_DEVICE_Init+0x44>)
 8009336:	4810      	ldr	r0, [pc, #64]	@ (8009378 <MX_USB_DEVICE_Init+0x48>)
 8009338:	f000 fc4a 	bl	8009bd0 <USBD_Init>
 800933c:	b970      	cbnz	r0, 800935c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800933e:	490f      	ldr	r1, [pc, #60]	@ (800937c <MX_USB_DEVICE_Init+0x4c>)
 8009340:	480d      	ldr	r0, [pc, #52]	@ (8009378 <MX_USB_DEVICE_Init+0x48>)
 8009342:	f000 fc5c 	bl	8009bfe <USBD_RegisterClass>
 8009346:	b960      	cbnz	r0, 8009362 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009348:	490d      	ldr	r1, [pc, #52]	@ (8009380 <MX_USB_DEVICE_Init+0x50>)
 800934a:	480b      	ldr	r0, [pc, #44]	@ (8009378 <MX_USB_DEVICE_Init+0x48>)
 800934c:	f000 fa39 	bl	80097c2 <USBD_CDC_RegisterInterface>
 8009350:	b950      	cbnz	r0, 8009368 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009352:	4809      	ldr	r0, [pc, #36]	@ (8009378 <MX_USB_DEVICE_Init+0x48>)
 8009354:	f000 fc73 	bl	8009c3e <USBD_Start>
 8009358:	b948      	cbnz	r0, 800936e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800935a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800935c:	f7f9 fbc4 	bl	8002ae8 <Error_Handler>
 8009360:	e7ed      	b.n	800933e <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8009362:	f7f9 fbc1 	bl	8002ae8 <Error_Handler>
 8009366:	e7ef      	b.n	8009348 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8009368:	f7f9 fbbe 	bl	8002ae8 <Error_Handler>
 800936c:	e7f1      	b.n	8009352 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800936e:	f7f9 fbbb 	bl	8002ae8 <Error_Handler>
}
 8009372:	e7f2      	b.n	800935a <MX_USB_DEVICE_Init+0x2a>
 8009374:	20000128 	.word	0x20000128
 8009378:	20006d14 	.word	0x20006d14
 800937c:	2000009c 	.word	0x2000009c
 8009380:	200000e0 	.word	0x200000e0

08009384 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009384:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009386:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800938a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800938e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 8009392:	b18c      	cbz	r4, 80093b8 <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009394:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8009398:	6843      	ldr	r3, [r0, #4]
 800939a:	b17b      	cbz	r3, 80093bc <USBD_CDC_EP0_RxReady+0x38>
 800939c:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 80093a0:	28ff      	cmp	r0, #255	@ 0xff
 80093a2:	d00d      	beq.n	80093c0 <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 80093aa:	4621      	mov	r1, r4
 80093ac:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80093ae:	23ff      	movs	r3, #255	@ 0xff
 80093b0:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80093b4:	2000      	movs	r0, #0
}
 80093b6:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80093b8:	2003      	movs	r0, #3
 80093ba:	e7fc      	b.n	80093b6 <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 80093bc:	2000      	movs	r0, #0
 80093be:	e7fa      	b.n	80093b6 <USBD_CDC_EP0_RxReady+0x32>
 80093c0:	2000      	movs	r0, #0
 80093c2:	e7f8      	b.n	80093b6 <USBD_CDC_EP0_RxReady+0x32>

080093c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80093c4:	230a      	movs	r3, #10
 80093c6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80093c8:	4800      	ldr	r0, [pc, #0]	@ (80093cc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80093ca:	4770      	bx	lr
 80093cc:	200000d4 	.word	0x200000d4

080093d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80093d4:	4f0f      	ldr	r7, [pc, #60]	@ (8009414 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80093d6:	2182      	movs	r1, #130	@ 0x82
 80093d8:	4638      	mov	r0, r7
 80093da:	f000 fde3 	bl	8009fa4 <USBD_GetEpDesc>
 80093de:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80093e0:	2101      	movs	r1, #1
 80093e2:	4638      	mov	r0, r7
 80093e4:	f000 fdde 	bl	8009fa4 <USBD_GetEpDesc>
 80093e8:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80093ea:	2181      	movs	r1, #129	@ 0x81
 80093ec:	4638      	mov	r0, r7
 80093ee:	f000 fdd9 	bl	8009fa4 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80093f2:	b10d      	cbz	r5, 80093f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80093f4:	2210      	movs	r2, #16
 80093f6:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80093f8:	b11c      	cbz	r4, 8009402 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093fa:	2240      	movs	r2, #64	@ 0x40
 80093fc:	7122      	strb	r2, [r4, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8009402:	b118      	cbz	r0, 800940c <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009404:	2240      	movs	r2, #64	@ 0x40
 8009406:	7102      	strb	r2, [r0, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800940c:	2343      	movs	r3, #67	@ 0x43
 800940e:	8033      	strh	r3, [r6, #0]
}
 8009410:	4800      	ldr	r0, [pc, #0]	@ (8009414 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8009412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009414:	20000058 	.word	0x20000058

08009418 <USBD_CDC_GetFSCfgDesc>:
{
 8009418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941a:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800941c:	4f0f      	ldr	r7, [pc, #60]	@ (800945c <USBD_CDC_GetFSCfgDesc+0x44>)
 800941e:	2182      	movs	r1, #130	@ 0x82
 8009420:	4638      	mov	r0, r7
 8009422:	f000 fdbf 	bl	8009fa4 <USBD_GetEpDesc>
 8009426:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009428:	2101      	movs	r1, #1
 800942a:	4638      	mov	r0, r7
 800942c:	f000 fdba 	bl	8009fa4 <USBD_GetEpDesc>
 8009430:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009432:	2181      	movs	r1, #129	@ 0x81
 8009434:	4638      	mov	r0, r7
 8009436:	f000 fdb5 	bl	8009fa4 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800943a:	b10d      	cbz	r5, 8009440 <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800943c:	2210      	movs	r2, #16
 800943e:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8009440:	b11c      	cbz	r4, 800944a <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009442:	2240      	movs	r2, #64	@ 0x40
 8009444:	7122      	strb	r2, [r4, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800944a:	b118      	cbz	r0, 8009454 <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800944c:	2240      	movs	r2, #64	@ 0x40
 800944e:	7102      	strb	r2, [r0, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009454:	2343      	movs	r3, #67	@ 0x43
 8009456:	8033      	strh	r3, [r6, #0]
}
 8009458:	4800      	ldr	r0, [pc, #0]	@ (800945c <USBD_CDC_GetFSCfgDesc+0x44>)
 800945a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800945c:	20000058 	.word	0x20000058

08009460 <USBD_CDC_GetHSCfgDesc>:
{
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009464:	4f0f      	ldr	r7, [pc, #60]	@ (80094a4 <USBD_CDC_GetHSCfgDesc+0x44>)
 8009466:	2182      	movs	r1, #130	@ 0x82
 8009468:	4638      	mov	r0, r7
 800946a:	f000 fd9b 	bl	8009fa4 <USBD_GetEpDesc>
 800946e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009470:	2101      	movs	r1, #1
 8009472:	4638      	mov	r0, r7
 8009474:	f000 fd96 	bl	8009fa4 <USBD_GetEpDesc>
 8009478:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800947a:	2181      	movs	r1, #129	@ 0x81
 800947c:	4638      	mov	r0, r7
 800947e:	f000 fd91 	bl	8009fa4 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8009482:	b10d      	cbz	r5, 8009488 <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009484:	2210      	movs	r2, #16
 8009486:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8009488:	b11c      	cbz	r4, 8009492 <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800948a:	2200      	movs	r2, #0
 800948c:	7122      	strb	r2, [r4, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8009492:	b118      	cbz	r0, 800949c <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009494:	2200      	movs	r2, #0
 8009496:	7102      	strb	r2, [r0, #4]
 8009498:	2202      	movs	r2, #2
 800949a:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800949c:	2343      	movs	r3, #67	@ 0x43
 800949e:	8033      	strh	r3, [r6, #0]
}
 80094a0:	4800      	ldr	r0, [pc, #0]	@ (80094a4 <USBD_CDC_GetHSCfgDesc+0x44>)
 80094a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094a4:	20000058 	.word	0x20000058

080094a8 <USBD_CDC_DataOut>:
{
 80094a8:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094aa:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80094ae:	33b0      	adds	r3, #176	@ 0xb0
 80094b0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094b4:	b195      	cbz	r5, 80094dc <USBD_CDC_DataOut+0x34>
 80094b6:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094b8:	f000 fb32 	bl	8009b20 <USBD_LL_GetRxDataSize>
 80094bc:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094c0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80094c4:	33b0      	adds	r3, #176	@ 0xb0
 80094c6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80094ca:	6863      	ldr	r3, [r4, #4]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 80094d2:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 80094d6:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80094d8:	2000      	movs	r0, #0
}
 80094da:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80094dc:	2003      	movs	r0, #3
 80094de:	e7fc      	b.n	80094da <USBD_CDC_DataOut+0x32>

080094e0 <USBD_CDC_DataIn>:
{
 80094e0:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80094e2:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094e6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80094ea:	33b0      	adds	r3, #176	@ 0xb0
 80094ec:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80094f0:	b384      	cbz	r4, 8009554 <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80094f2:	f001 030f 	and.w	r3, r1, #15
 80094f6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80094fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80094fe:	6992      	ldr	r2, [r2, #24]
 8009500:	b14a      	cbz	r2, 8009516 <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009502:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 8009506:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 800950a:	69ed      	ldr	r5, [r5, #28]
 800950c:	fbb2 fcf5 	udiv	ip, r2, r5
 8009510:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009514:	b192      	cbz	r2, 800953c <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 8009516:	2300      	movs	r3, #0
 8009518:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800951c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009520:	33b0      	adds	r3, #176	@ 0xb0
 8009522:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009526:	6843      	ldr	r3, [r0, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	b1ab      	cbz	r3, 8009558 <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800952c:	460a      	mov	r2, r1
 800952e:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 8009532:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 8009536:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8009538:	2000      	movs	r0, #0
}
 800953a:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800953c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009540:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009544:	2400      	movs	r4, #0
 8009546:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009548:	4623      	mov	r3, r4
 800954a:	4622      	mov	r2, r4
 800954c:	f000 fb30 	bl	8009bb0 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8009550:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009552:	e7f2      	b.n	800953a <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 8009554:	2003      	movs	r0, #3
 8009556:	e7f0      	b.n	800953a <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 8009558:	2000      	movs	r0, #0
 800955a:	e7ee      	b.n	800953a <USBD_CDC_DataIn+0x5a>

0800955c <USBD_CDC_Setup>:
{
 800955c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800955e:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009560:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009564:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8009568:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 800956c:	2200      	movs	r2, #0
 800956e:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 8009572:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 8009576:	2f00      	cmp	r7, #0
 8009578:	d078      	beq.n	800966c <USBD_CDC_Setup+0x110>
 800957a:	4604      	mov	r4, r0
 800957c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800957e:	7809      	ldrb	r1, [r1, #0]
 8009580:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 8009584:	d034      	beq.n	80095f0 <USBD_CDC_Setup+0x94>
 8009586:	2e20      	cmp	r6, #32
 8009588:	d169      	bne.n	800965e <USBD_CDC_Setup+0x102>
      if (req->wLength != 0U)
 800958a:	88ea      	ldrh	r2, [r5, #6]
 800958c:	b32a      	cbz	r2, 80095da <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 800958e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8009592:	d10e      	bne.n	80095b2 <USBD_CDC_Setup+0x56>
          hcdc->CmdOpCode = req->bRequest;
 8009594:	786b      	ldrb	r3, [r5, #1]
 8009596:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800959a:	88ea      	ldrh	r2, [r5, #6]
 800959c:	2a3f      	cmp	r2, #63	@ 0x3f
 800959e:	d81a      	bhi.n	80095d6 <USBD_CDC_Setup+0x7a>
 80095a0:	b2d2      	uxtb	r2, r2
 80095a2:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80095a6:	4639      	mov	r1, r7
 80095a8:	4620      	mov	r0, r4
 80095aa:	f001 f964 	bl	800a876 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 80095ae:	2600      	movs	r6, #0
 80095b0:	e059      	b.n	8009666 <USBD_CDC_Setup+0x10a>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095b2:	33b0      	adds	r3, #176	@ 0xb0
 80095b4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	4639      	mov	r1, r7
 80095be:	7868      	ldrb	r0, [r5, #1]
 80095c0:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80095c2:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80095c4:	2a07      	cmp	r2, #7
 80095c6:	bf28      	it	cs
 80095c8:	2207      	movcs	r2, #7
 80095ca:	4639      	mov	r1, r7
 80095cc:	4620      	mov	r0, r4
 80095ce:	f001 f93d 	bl	800a84c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80095d2:	2600      	movs	r6, #0
 80095d4:	e047      	b.n	8009666 <USBD_CDC_Setup+0x10a>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80095d6:	2240      	movs	r2, #64	@ 0x40
 80095d8:	e7e3      	b.n	80095a2 <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095da:	33b0      	adds	r3, #176	@ 0xb0
 80095dc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	2200      	movs	r2, #0
 80095e6:	4629      	mov	r1, r5
 80095e8:	7868      	ldrb	r0, [r5, #1]
 80095ea:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 80095ec:	2600      	movs	r6, #0
 80095ee:	e03a      	b.n	8009666 <USBD_CDC_Setup+0x10a>
      switch (req->bRequest)
 80095f0:	786f      	ldrb	r7, [r5, #1]
 80095f2:	2f0b      	cmp	r7, #11
 80095f4:	d82e      	bhi.n	8009654 <USBD_CDC_Setup+0xf8>
 80095f6:	e8df f007 	tbb	[pc, r7]
 80095fa:	3606      	.short	0x3606
 80095fc:	2d2d2d2d 	.word	0x2d2d2d2d
 8009600:	2d2d2d2d 	.word	0x2d2d2d2d
 8009604:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009606:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800960a:	2b03      	cmp	r3, #3
 800960c:	d004      	beq.n	8009618 <USBD_CDC_Setup+0xbc>
            USBD_CtlError(pdev, req);
 800960e:	4629      	mov	r1, r5
 8009610:	f000 fd05 	bl	800a01e <USBD_CtlError>
            ret = USBD_FAIL;
 8009614:	2603      	movs	r6, #3
 8009616:	e026      	b.n	8009666 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009618:	2202      	movs	r2, #2
 800961a:	a901      	add	r1, sp, #4
 800961c:	f001 f916 	bl	800a84c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009620:	463e      	mov	r6, r7
 8009622:	e020      	b.n	8009666 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009624:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009628:	2b03      	cmp	r3, #3
 800962a:	d004      	beq.n	8009636 <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 800962c:	4629      	mov	r1, r5
 800962e:	f000 fcf6 	bl	800a01e <USBD_CtlError>
            ret = USBD_FAIL;
 8009632:	2603      	movs	r6, #3
 8009634:	e017      	b.n	8009666 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009636:	2201      	movs	r2, #1
 8009638:	f10d 0107 	add.w	r1, sp, #7
 800963c:	f001 f906 	bl	800a84c <USBD_CtlSendData>
 8009640:	e011      	b.n	8009666 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009642:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009646:	2b03      	cmp	r3, #3
 8009648:	d00d      	beq.n	8009666 <USBD_CDC_Setup+0x10a>
            USBD_CtlError(pdev, req);
 800964a:	4629      	mov	r1, r5
 800964c:	f000 fce7 	bl	800a01e <USBD_CtlError>
            ret = USBD_FAIL;
 8009650:	2603      	movs	r6, #3
 8009652:	e008      	b.n	8009666 <USBD_CDC_Setup+0x10a>
          USBD_CtlError(pdev, req);
 8009654:	4629      	mov	r1, r5
 8009656:	f000 fce2 	bl	800a01e <USBD_CtlError>
          ret = USBD_FAIL;
 800965a:	2603      	movs	r6, #3
          break;
 800965c:	e003      	b.n	8009666 <USBD_CDC_Setup+0x10a>
      USBD_CtlError(pdev, req);
 800965e:	4629      	mov	r1, r5
 8009660:	f000 fcdd 	bl	800a01e <USBD_CtlError>
      ret = USBD_FAIL;
 8009664:	2603      	movs	r6, #3
}
 8009666:	4630      	mov	r0, r6
 8009668:	b003      	add	sp, #12
 800966a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800966c:	2603      	movs	r6, #3
 800966e:	e7fa      	b.n	8009666 <USBD_CDC_Setup+0x10a>

08009670 <USBD_CDC_DeInit>:
{
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009674:	2181      	movs	r1, #129	@ 0x81
 8009676:	f000 fa7b 	bl	8009b70 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800967a:	2500      	movs	r5, #0
 800967c:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800967e:	2101      	movs	r1, #1
 8009680:	4620      	mov	r0, r4
 8009682:	f000 fa75 	bl	8009b70 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009686:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800968a:	2182      	movs	r1, #130	@ 0x82
 800968c:	4620      	mov	r0, r4
 800968e:	f000 fa6f 	bl	8009b70 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009692:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009696:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800969a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800969e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80096a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096a6:	b19a      	cbz	r2, 80096d0 <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80096a8:	33b0      	adds	r3, #176	@ 0xb0
 80096aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80096b4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80096b8:	33b0      	adds	r3, #176	@ 0xb0
 80096ba:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80096be:	f000 fa39 	bl	8009b34 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80096c2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80096c6:	33b0      	adds	r3, #176	@ 0xb0
 80096c8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 80096cc:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 80096d0:	2000      	movs	r0, #0
 80096d2:	bd38      	pop	{r3, r4, r5, pc}

080096d4 <USBD_CDC_Init>:
{
 80096d4:	b570      	push	{r4, r5, r6, lr}
 80096d6:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80096d8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80096dc:	f000 fa26 	bl	8009b2c <USBD_static_malloc>
  if (hcdc == NULL)
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d049      	beq.n	8009778 <USBD_CDC_Init+0xa4>
 80096e4:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80096e6:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80096ea:	2100      	movs	r1, #0
 80096ec:	f001 f980 	bl	800a9f0 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80096f0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80096f4:	33b0      	adds	r3, #176	@ 0xb0
 80096f6:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80096fa:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096fe:	7c23      	ldrb	r3, [r4, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d141      	bne.n	8009788 <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009704:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009708:	2202      	movs	r2, #2
 800970a:	2181      	movs	r1, #129	@ 0x81
 800970c:	4620      	mov	r0, r4
 800970e:	f000 fa24 	bl	8009b5a <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009712:	2601      	movs	r6, #1
 8009714:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009716:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800971a:	2202      	movs	r2, #2
 800971c:	4631      	mov	r1, r6
 800971e:	4620      	mov	r0, r4
 8009720:	f000 fa1b 	bl	8009b5a <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009724:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009728:	2310      	movs	r3, #16
 800972a:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800972e:	2308      	movs	r3, #8
 8009730:	2203      	movs	r2, #3
 8009732:	2182      	movs	r1, #130	@ 0x82
 8009734:	4620      	mov	r0, r4
 8009736:	f000 fa10 	bl	8009b5a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800973a:	2301      	movs	r3, #1
 800973c:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
  hcdc->RxBuffer = NULL;
 8009740:	2600      	movs	r6, #0
 8009742:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009746:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800974a:	33b0      	adds	r3, #176	@ 0xb0
 800974c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4798      	blx	r3
  hcdc->TxState = 0U;
 8009756:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 800975a:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 800975e:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8009762:	b362      	cbz	r2, 80097be <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009764:	7c25      	ldrb	r5, [r4, #16]
 8009766:	bb1d      	cbnz	r5, 80097b0 <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009768:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800976c:	2101      	movs	r1, #1
 800976e:	4620      	mov	r0, r4
 8009770:	f000 fa26 	bl	8009bc0 <USBD_LL_PrepareReceive>
}
 8009774:	4628      	mov	r0, r5
 8009776:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009778:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800977c:	33b0      	adds	r3, #176	@ 0xb0
 800977e:	2200      	movs	r2, #0
 8009780:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009784:	2502      	movs	r5, #2
 8009786:	e7f5      	b.n	8009774 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009788:	2340      	movs	r3, #64	@ 0x40
 800978a:	2202      	movs	r2, #2
 800978c:	2181      	movs	r1, #129	@ 0x81
 800978e:	4620      	mov	r0, r4
 8009790:	f000 f9e3 	bl	8009b5a <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009794:	2601      	movs	r6, #1
 8009796:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009798:	2340      	movs	r3, #64	@ 0x40
 800979a:	2202      	movs	r2, #2
 800979c:	4631      	mov	r1, r6
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 f9db 	bl	8009b5a <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80097a4:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80097a8:	2310      	movs	r3, #16
 80097aa:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 80097ae:	e7be      	b.n	800972e <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097b0:	2340      	movs	r3, #64	@ 0x40
 80097b2:	2101      	movs	r1, #1
 80097b4:	4620      	mov	r0, r4
 80097b6:	f000 fa03 	bl	8009bc0 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80097ba:	2500      	movs	r5, #0
 80097bc:	e7da      	b.n	8009774 <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 80097be:	2502      	movs	r5, #2
 80097c0:	e7d8      	b.n	8009774 <USBD_CDC_Init+0xa0>

080097c2 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 80097c2:	b139      	cbz	r1, 80097d4 <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 80097c4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80097c8:	33b0      	adds	r3, #176	@ 0xb0
 80097ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80097ce:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 80097d0:	2000      	movs	r0, #0
 80097d2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80097d4:	2003      	movs	r0, #3
}
 80097d6:	4770      	bx	lr

080097d8 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097d8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80097dc:	33b0      	adds	r3, #176	@ 0xb0
 80097de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80097e2:	b12b      	cbz	r3, 80097f0 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 80097e4:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80097e8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80097ec:	2000      	movs	r0, #0
 80097ee:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80097f0:	2003      	movs	r0, #3
}
 80097f2:	4770      	bx	lr

080097f4 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097f4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80097f8:	33b0      	adds	r3, #176	@ 0xb0
 80097fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 80097fe:	b11b      	cbz	r3, 8009808 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8009800:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009804:	2000      	movs	r0, #0
 8009806:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009808:	2003      	movs	r0, #3
}
 800980a:	4770      	bx	lr

0800980c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800980c:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800980e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009812:	33b0      	adds	r3, #176	@ 0xb0
 8009814:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009818:	b18a      	cbz	r2, 800983e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800981a:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 800981e:	b10b      	cbz	r3, 8009824 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009820:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8009822:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8009824:	2301      	movs	r3, #1
 8009826:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800982a:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 800982e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009830:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8009834:	2181      	movs	r1, #129	@ 0x81
 8009836:	f000 f9bb 	bl	8009bb0 <USBD_LL_Transmit>
    ret = USBD_OK;
 800983a:	2000      	movs	r0, #0
 800983c:	e7f1      	b.n	8009822 <USBD_CDC_TransmitPacket+0x16>
    return (uint8_t)USBD_FAIL;
 800983e:	2003      	movs	r0, #3
 8009840:	e7ef      	b.n	8009822 <USBD_CDC_TransmitPacket+0x16>

08009842 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009842:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009844:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009848:	33b0      	adds	r3, #176	@ 0xb0
 800984a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800984e:	b192      	cbz	r2, 8009876 <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009850:	7c04      	ldrb	r4, [r0, #16]
 8009852:	b944      	cbnz	r4, 8009866 <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009854:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009858:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 800985c:	2101      	movs	r1, #1
 800985e:	f000 f9af 	bl	8009bc0 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8009862:	4620      	mov	r0, r4
 8009864:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009866:	2340      	movs	r3, #64	@ 0x40
 8009868:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 800986c:	2101      	movs	r1, #1
 800986e:	f000 f9a7 	bl	8009bc0 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8009872:	2400      	movs	r4, #0
 8009874:	e7f5      	b.n	8009862 <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 8009876:	2403      	movs	r4, #3
 8009878:	e7f3      	b.n	8009862 <USBD_CDC_ReceivePacket+0x20>

0800987a <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800987a:	2000      	movs	r0, #0
 800987c:	4770      	bx	lr

0800987e <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800987e:	2000      	movs	r0, #0
 8009880:	4770      	bx	lr

08009882 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8009882:	2000      	movs	r0, #0
 8009884:	4770      	bx	lr
	...

08009888 <CDC_Receive_FS>:
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 8009888:	b538      	push	{r3, r4, r5, lr}
 800988a:	4604      	mov	r4, r0
    isr_packet.len = (*Len > USB_MAX_PACKET_SIZE) ? USB_MAX_PACKET_SIZE : *Len;
 800988c:	680a      	ldr	r2, [r1, #0]
 800988e:	2a40      	cmp	r2, #64	@ 0x40
 8009890:	bf28      	it	cs
 8009892:	2240      	movcs	r2, #64	@ 0x40
 8009894:	4d0c      	ldr	r5, [pc, #48]	@ (80098c8 <CDC_Receive_FS+0x40>)
 8009896:	f8a5 2040 	strh.w	r2, [r5, #64]	@ 0x40
    memcpy(isr_packet.data, Buf, isr_packet.len);
 800989a:	b292      	uxth	r2, r2
 800989c:	4601      	mov	r1, r0
 800989e:	4628      	mov	r0, r5
 80098a0:	f001 f8da 	bl	800aa58 <memcpy>
    osMessageQueuePut(usb_rx_queue, &isr_packet, 0, 0);
 80098a4:	2300      	movs	r3, #0
 80098a6:	461a      	mov	r2, r3
 80098a8:	4629      	mov	r1, r5
 80098aa:	4808      	ldr	r0, [pc, #32]	@ (80098cc <CDC_Receive_FS+0x44>)
 80098ac:	6800      	ldr	r0, [r0, #0]
 80098ae:	f7f7 fc77 	bl	80011a0 <osMessageQueuePut>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80098b2:	4d07      	ldr	r5, [pc, #28]	@ (80098d0 <CDC_Receive_FS+0x48>)
 80098b4:	4621      	mov	r1, r4
 80098b6:	4628      	mov	r0, r5
 80098b8:	f7ff ff9c 	bl	80097f4 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80098bc:	4628      	mov	r0, r5
 80098be:	f7ff ffc0 	bl	8009842 <USBD_CDC_ReceivePacket>
}
 80098c2:	2000      	movs	r0, #0
 80098c4:	bd38      	pop	{r3, r4, r5, pc}
 80098c6:	bf00      	nop
 80098c8:	20006ff0 	.word	0x20006ff0
 80098cc:	200017ec 	.word	0x200017ec
 80098d0:	20006d14 	.word	0x20006d14

080098d4 <CDC_Init_FS>:
{
 80098d4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80098d6:	4c06      	ldr	r4, [pc, #24]	@ (80098f0 <CDC_Init_FS+0x1c>)
 80098d8:	2200      	movs	r2, #0
 80098da:	4906      	ldr	r1, [pc, #24]	@ (80098f4 <CDC_Init_FS+0x20>)
 80098dc:	4620      	mov	r0, r4
 80098de:	f7ff ff7b 	bl	80097d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80098e2:	4905      	ldr	r1, [pc, #20]	@ (80098f8 <CDC_Init_FS+0x24>)
 80098e4:	4620      	mov	r0, r4
 80098e6:	f7ff ff85 	bl	80097f4 <USBD_CDC_SetRxBuffer>
}
 80098ea:	2000      	movs	r0, #0
 80098ec:	bd10      	pop	{r4, pc}
 80098ee:	bf00      	nop
 80098f0:	20006d14 	.word	0x20006d14
 80098f4:	20007034 	.word	0x20007034
 80098f8:	20007434 	.word	0x20007434

080098fc <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80098fc:	4b09      	ldr	r3, [pc, #36]	@ (8009924 <CDC_Transmit_FS+0x28>)
 80098fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 8009902:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009906:	b10b      	cbz	r3, 800990c <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8009908:	2001      	movs	r0, #1
}
 800990a:	4770      	bx	lr
{
 800990c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800990e:	4c05      	ldr	r4, [pc, #20]	@ (8009924 <CDC_Transmit_FS+0x28>)
 8009910:	460a      	mov	r2, r1
 8009912:	4601      	mov	r1, r0
 8009914:	4620      	mov	r0, r4
 8009916:	f7ff ff5f 	bl	80097d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800991a:	4620      	mov	r0, r4
 800991c:	f7ff ff76 	bl	800980c <USBD_CDC_TransmitPacket>
}
 8009920:	bd10      	pop	{r4, pc}
 8009922:	bf00      	nop
 8009924:	20006d14 	.word	0x20006d14

08009928 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009928:	b530      	push	{r4, r5, lr}
 800992a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800992c:	2300      	movs	r3, #0
 800992e:	9303      	str	r3, [sp, #12]
 8009930:	9304      	str	r3, [sp, #16]
 8009932:	9305      	str	r3, [sp, #20]
 8009934:	9306      	str	r3, [sp, #24]
 8009936:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009938:	6803      	ldr	r3, [r0, #0]
 800993a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800993e:	d001      	beq.n	8009944 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009940:	b009      	add	sp, #36	@ 0x24
 8009942:	bd30      	pop	{r4, r5, pc}
 8009944:	aa03      	add	r2, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009946:	2500      	movs	r5, #0
 8009948:	9501      	str	r5, [sp, #4]
 800994a:	4c17      	ldr	r4, [pc, #92]	@ (80099a8 <HAL_PCD_MspInit+0x80>)
 800994c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800994e:	f043 0301 	orr.w	r3, r3, #1
 8009952:	6323      	str	r3, [r4, #48]	@ 0x30
 8009954:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	9301      	str	r3, [sp, #4]
 800995c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800995e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009962:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009964:	2302      	movs	r3, #2
 8009966:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009968:	2303      	movs	r3, #3
 800996a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800996c:	230a      	movs	r3, #10
 800996e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009970:	4611      	mov	r1, r2
 8009972:	480e      	ldr	r0, [pc, #56]	@ (80099ac <HAL_PCD_MspInit+0x84>)
 8009974:	f7fa ffc8 	bl	8004908 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009978:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800997a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800997e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009980:	9502      	str	r5, [sp, #8]
 8009982:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009988:	6463      	str	r3, [r4, #68]	@ 0x44
 800998a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800998c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009990:	9302      	str	r3, [sp, #8]
 8009992:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009994:	462a      	mov	r2, r5
 8009996:	2105      	movs	r1, #5
 8009998:	2043      	movs	r0, #67	@ 0x43
 800999a:	f7fa fd8d 	bl	80044b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800999e:	2043      	movs	r0, #67	@ 0x43
 80099a0:	f7fa fd9a 	bl	80044d8 <HAL_NVIC_EnableIRQ>
}
 80099a4:	e7cc      	b.n	8009940 <HAL_PCD_MspInit+0x18>
 80099a6:	bf00      	nop
 80099a8:	40023800 	.word	0x40023800
 80099ac:	40020000 	.word	0x40020000

080099b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b0:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099b2:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 80099b6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80099ba:	f000 f956 	bl	8009c6a <USBD_LL_SetupStage>
}
 80099be:	bd08      	pop	{r3, pc}

080099c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c0:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099c2:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80099c6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80099ca:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 80099ce:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80099d2:	f000 fa17 	bl	8009e04 <USBD_LL_DataOutStage>
}
 80099d6:	bd08      	pop	{r3, pc}

080099d8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099d8:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099da:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80099de:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80099e2:	6a1a      	ldr	r2, [r3, #32]
 80099e4:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80099e8:	f000 fa6c 	bl	8009ec4 <USBD_LL_DataInStage>
}
 80099ec:	bd08      	pop	{r3, pc}

080099ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ee:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099f0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80099f4:	f000 f9b4 	bl	8009d60 <USBD_LL_SOF>
}
 80099f8:	bd08      	pop	{r3, pc}

080099fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099fa:	b510      	push	{r4, lr}
 80099fc:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80099fe:	79c3      	ldrb	r3, [r0, #7]
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d109      	bne.n	8009a18 <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a04:	2101      	movs	r1, #1
 8009a06:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8009a0a:	f000 f98c 	bl	8009d26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a0e:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8009a12:	f000 f956 	bl	8009cc2 <USBD_LL_Reset>
}
 8009a16:	bd10      	pop	{r4, pc}
    Error_Handler();
 8009a18:	f7f9 f866 	bl	8002ae8 <Error_Handler>
 8009a1c:	e7f2      	b.n	8009a04 <HAL_PCD_ResetCallback+0xa>
	...

08009a20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a20:	b510      	push	{r4, lr}
 8009a22:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a24:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009a28:	f000 f980 	bl	8009d2c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a2c:	6822      	ldr	r2, [r4, #0]
 8009a2e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8009a32:	f043 0301 	orr.w	r3, r3, #1
 8009a36:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a3a:	7ae3      	ldrb	r3, [r4, #11]
 8009a3c:	b123      	cbz	r3, 8009a48 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a3e:	4a03      	ldr	r2, [pc, #12]	@ (8009a4c <HAL_PCD_SuspendCallback+0x2c>)
 8009a40:	6913      	ldr	r3, [r2, #16]
 8009a42:	f043 0306 	orr.w	r3, r3, #6
 8009a46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a48:	bd10      	pop	{r4, pc}
 8009a4a:	bf00      	nop
 8009a4c:	e000ed00 	.word	0xe000ed00

08009a50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a52:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009a56:	f000 f977 	bl	8009d48 <USBD_LL_Resume>
}
 8009a5a:	bd08      	pop	{r3, pc}

08009a5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a5c:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a5e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009a62:	f000 f9a3 	bl	8009dac <USBD_LL_IsoOUTIncomplete>
}
 8009a66:	bd08      	pop	{r3, pc}

08009a68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a68:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a6a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009a6e:	f000 f987 	bl	8009d80 <USBD_LL_IsoINIncomplete>
}
 8009a72:	bd08      	pop	{r3, pc}

08009a74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a74:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a76:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009a7a:	f000 f9ad 	bl	8009dd8 <USBD_LL_DevConnected>
}
 8009a7e:	bd08      	pop	{r3, pc}

08009a80 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a80:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a82:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009a86:	f000 f9a9 	bl	8009ddc <USBD_LL_DevDisconnected>
}
 8009a8a:	bd08      	pop	{r3, pc}

08009a8c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009a8c:	7802      	ldrb	r2, [r0, #0]
 8009a8e:	b10a      	cbz	r2, 8009a94 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8009a90:	2000      	movs	r0, #0
 8009a92:	4770      	bx	lr
{
 8009a94:	b510      	push	{r4, lr}
 8009a96:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8009a98:	4815      	ldr	r0, [pc, #84]	@ (8009af0 <USBD_LL_Init+0x64>)
 8009a9a:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a9e:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009aa2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8009aa6:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009aa8:	2304      	movs	r3, #4
 8009aaa:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009aac:	2202      	movs	r2, #2
 8009aae:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ab4:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ab6:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009ab8:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009aba:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009abc:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009abe:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009ac0:	f7fb f992 	bl	8004de8 <HAL_PCD_Init>
 8009ac4:	b980      	cbnz	r0, 8009ae8 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009ac6:	4c0a      	ldr	r4, [pc, #40]	@ (8009af0 <USBD_LL_Init+0x64>)
 8009ac8:	2180      	movs	r1, #128	@ 0x80
 8009aca:	4620      	mov	r0, r4
 8009acc:	f7fb ff5b 	bl	8005986 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009ad0:	2240      	movs	r2, #64	@ 0x40
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f7fb ff30 	bl	800593a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009ada:	2280      	movs	r2, #128	@ 0x80
 8009adc:	2101      	movs	r1, #1
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f7fb ff2b 	bl	800593a <HAL_PCDEx_SetTxFiFo>
}
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8009ae8:	f7f8 fffe 	bl	8002ae8 <Error_Handler>
 8009aec:	e7eb      	b.n	8009ac6 <USBD_LL_Init+0x3a>
 8009aee:	bf00      	nop
 8009af0:	20007a54 	.word	0x20007a54

08009af4 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009af4:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8009af8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8009afc:	d108      	bne.n	8009b10 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009afe:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8009b02:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8009b06:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009b0a:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8009b0e:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b10:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8009b14:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8009b18:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009b1c:	7d98      	ldrb	r0, [r3, #22]
 8009b1e:	4770      	bx	lr

08009b20 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b20:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b22:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009b26:	f7fb fb63 	bl	80051f0 <HAL_PCD_EP_GetRxCount>
}
 8009b2a:	bd08      	pop	{r3, pc}

08009b2c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8009b2c:	4800      	ldr	r0, [pc, #0]	@ (8009b30 <USBD_static_malloc+0x4>)
 8009b2e:	4770      	bx	lr
 8009b30:	20007834 	.word	0x20007834

08009b34 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8009b34:	4770      	bx	lr

08009b36 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8009b36:	2803      	cmp	r0, #3
 8009b38:	d805      	bhi.n	8009b46 <USBD_Get_USB_Status+0x10>
 8009b3a:	e8df f000 	tbb	[pc, r0]
 8009b3e:	0405      	.short	0x0405
 8009b40:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b42:	2001      	movs	r0, #1
    break;
 8009b44:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8009b46:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8009b48:	4770      	bx	lr

08009b4a <USBD_LL_Start>:
{
 8009b4a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8009b4c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009b50:	f7fb f9cb 	bl	8004eea <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b54:	f7ff ffef 	bl	8009b36 <USBD_Get_USB_Status>
}
 8009b58:	bd08      	pop	{r3, pc}

08009b5a <USBD_LL_OpenEP>:
{
 8009b5a:	b508      	push	{r3, lr}
 8009b5c:	4694      	mov	ip, r2
 8009b5e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b60:	4663      	mov	r3, ip
 8009b62:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009b66:	f7fb faa0 	bl	80050aa <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b6a:	f7ff ffe4 	bl	8009b36 <USBD_Get_USB_Status>
}
 8009b6e:	bd08      	pop	{r3, pc}

08009b70 <USBD_LL_CloseEP>:
{
 8009b70:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b72:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009b76:	f7fb fade 	bl	8005136 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b7a:	f7ff ffdc 	bl	8009b36 <USBD_Get_USB_Status>
}
 8009b7e:	bd08      	pop	{r3, pc}

08009b80 <USBD_LL_StallEP>:
{
 8009b80:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b82:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009b86:	f7fb fb61 	bl	800524c <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b8a:	f7ff ffd4 	bl	8009b36 <USBD_Get_USB_Status>
}
 8009b8e:	bd08      	pop	{r3, pc}

08009b90 <USBD_LL_ClearStallEP>:
{
 8009b90:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b92:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009b96:	f7fb fb9c 	bl	80052d2 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b9a:	f7ff ffcc 	bl	8009b36 <USBD_Get_USB_Status>
}
 8009b9e:	bd08      	pop	{r3, pc}

08009ba0 <USBD_LL_SetUSBAddress>:
{
 8009ba0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ba2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009ba6:	f7fb fa6d 	bl	8005084 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009baa:	f7ff ffc4 	bl	8009b36 <USBD_Get_USB_Status>
}
 8009bae:	bd08      	pop	{r3, pc}

08009bb0 <USBD_LL_Transmit>:
{
 8009bb0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009bb2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009bb6:	f7fb fb24 	bl	8005202 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bba:	f7ff ffbc 	bl	8009b36 <USBD_Get_USB_Status>
}
 8009bbe:	bd08      	pop	{r3, pc}

08009bc0 <USBD_LL_PrepareReceive>:
{
 8009bc0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009bc2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009bc6:	f7fb faee 	bl	80051a6 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bca:	f7ff ffb4 	bl	8009b36 <USBD_Get_USB_Status>
}
 8009bce:	bd08      	pop	{r3, pc}

08009bd0 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009bd0:	b198      	cbz	r0, 8009bfa <USBD_Init+0x2a>
{
 8009bd2:	b508      	push	{r3, lr}
 8009bd4:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009bdc:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009be0:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009be4:	b109      	cbz	r1, 8009bea <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8009be6:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009bea:	2101      	movs	r1, #1
 8009bec:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009bf0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7ff ff4a 	bl	8009a8c <USBD_LL_Init>

  return ret;
}
 8009bf8:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8009bfa:	2003      	movs	r0, #3
}
 8009bfc:	4770      	bx	lr

08009bfe <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009bfe:	b510      	push	{r4, lr}
 8009c00:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8009c02:	2300      	movs	r3, #0
 8009c04:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8009c08:	b1b9      	cbz	r1, 8009c3a <USBD_RegisterClass+0x3c>
 8009c0a:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009c0c:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009c10:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8009c14:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8009c16:	b143      	cbz	r3, 8009c2a <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009c18:	32ae      	adds	r2, #174	@ 0xae
 8009c1a:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8009c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c20:	f10d 0006 	add.w	r0, sp, #6
 8009c24:	4798      	blx	r3
 8009c26:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009c2a:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8009c2e:	3301      	adds	r3, #1
 8009c30:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8009c34:	2000      	movs	r0, #0
}
 8009c36:	b002      	add	sp, #8
 8009c38:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8009c3a:	2003      	movs	r0, #3
 8009c3c:	e7fb      	b.n	8009c36 <USBD_RegisterClass+0x38>

08009c3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c3e:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009c40:	f7ff ff83 	bl	8009b4a <USBD_LL_Start>
}
 8009c44:	bd08      	pop	{r3, pc}

08009c46 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c46:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c48:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009c4c:	b113      	cbz	r3, 8009c54 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8009c52:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8009c54:	2000      	movs	r0, #0
 8009c56:	e7fc      	b.n	8009c52 <USBD_SetClassConfig+0xc>

08009c58 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c58:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009c5a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	4798      	blx	r3
 8009c62:	b900      	cbnz	r0, 8009c66 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8009c64:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 8009c66:	2003      	movs	r0, #3
 8009c68:	e7fc      	b.n	8009c64 <USBD_ClrClassConfig+0xc>

08009c6a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009c6a:	b538      	push	{r3, r4, r5, lr}
 8009c6c:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009c6e:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8009c72:	4628      	mov	r0, r5
 8009c74:	f000 f9bf 	bl	8009ff6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009c7e:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8009c82:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c86:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8009c8a:	f001 031f 	and.w	r3, r1, #31
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d007      	beq.n	8009ca2 <USBD_LL_SetupStage+0x38>
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	d00a      	beq.n	8009cac <USBD_LL_SetupStage+0x42>
 8009c96:	b973      	cbnz	r3, 8009cb6 <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f000 fb80 	bl	800a3a0 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8009ca0:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f000 fbb6 	bl	800a416 <USBD_StdItfReq>
      break;
 8009caa:	e7f9      	b.n	8009ca0 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009cac:	4629      	mov	r1, r5
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f000 fbf3 	bl	800a49a <USBD_StdEPReq>
      break;
 8009cb4:	e7f4      	b.n	8009ca0 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009cb6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f7ff ff60 	bl	8009b80 <USBD_LL_StallEP>
      break;
 8009cc0:	e7ee      	b.n	8009ca0 <USBD_LL_SetupStage+0x36>

08009cc2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc4:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009cd2:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8009cd4:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009cd8:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009cdc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009ce0:	b1db      	cbz	r3, 8009d1a <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	b1db      	cbz	r3, 8009d1e <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	4798      	blx	r3
 8009cea:	4607      	mov	r7, r0
 8009cec:	b9c8      	cbnz	r0, 8009d22 <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cee:	2340      	movs	r3, #64	@ 0x40
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f7ff ff30 	bl	8009b5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009cfa:	2601      	movs	r6, #1
 8009cfc:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d00:	2540      	movs	r5, #64	@ 0x40
 8009d02:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d06:	462b      	mov	r3, r5
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2180      	movs	r1, #128	@ 0x80
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f7ff ff24 	bl	8009b5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d12:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d14:	6225      	str	r5, [r4, #32]

  return ret;
}
 8009d16:	4638      	mov	r0, r7
 8009d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8009d1a:	2700      	movs	r7, #0
 8009d1c:	e7e7      	b.n	8009cee <USBD_LL_Reset+0x2c>
 8009d1e:	2700      	movs	r7, #0
 8009d20:	e7e5      	b.n	8009cee <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8009d22:	2703      	movs	r7, #3
 8009d24:	e7e3      	b.n	8009cee <USBD_LL_Reset+0x2c>

08009d26 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8009d26:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8009d28:	2000      	movs	r0, #0
 8009d2a:	4770      	bx	lr

08009d2c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009d2c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009d30:	2b04      	cmp	r3, #4
 8009d32:	d004      	beq.n	8009d3e <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009d34:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009d3e:	2304      	movs	r3, #4
 8009d40:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8009d44:	2000      	movs	r0, #0
 8009d46:	4770      	bx	lr

08009d48 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d48:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009d4c:	2b04      	cmp	r3, #4
 8009d4e:	d001      	beq.n	8009d54 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8009d50:	2000      	movs	r0, #0
 8009d52:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8009d54:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8009d5e:	e7f7      	b.n	8009d50 <USBD_LL_Resume+0x8>

08009d60 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d60:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d62:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	d001      	beq.n	8009d6e <USBD_LL_SOF+0xe>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 8009d6e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0f9      	beq.n	8009d6a <USBD_LL_SOF+0xa>
      if (pdev->pClass[0]->SOF != NULL)
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d0f6      	beq.n	8009d6a <USBD_LL_SOF+0xa>
        (void)pdev->pClass[0]->SOF(pdev);
 8009d7c:	4798      	blx	r3
 8009d7e:	e7f4      	b.n	8009d6a <USBD_LL_SOF+0xa>

08009d80 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009d80:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8009d82:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009d86:	33ae      	adds	r3, #174	@ 0xae
 8009d88:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009d8c:	b153      	cbz	r3, 8009da4 <USBD_LL_IsoINIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d8e:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8009d92:	2a03      	cmp	r2, #3
 8009d94:	d001      	beq.n	8009d9a <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8009d96:	2000      	movs	r0, #0
}
 8009d98:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009d9a:	6a1b      	ldr	r3, [r3, #32]
 8009d9c:	b123      	cbz	r3, 8009da8 <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009d9e:	4798      	blx	r3
  return USBD_OK;
 8009da0:	2000      	movs	r0, #0
 8009da2:	e7f9      	b.n	8009d98 <USBD_LL_IsoINIncomplete+0x18>
    return USBD_FAIL;
 8009da4:	2003      	movs	r0, #3
 8009da6:	e7f7      	b.n	8009d98 <USBD_LL_IsoINIncomplete+0x18>
  return USBD_OK;
 8009da8:	2000      	movs	r0, #0
 8009daa:	e7f5      	b.n	8009d98 <USBD_LL_IsoINIncomplete+0x18>

08009dac <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009dac:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8009dae:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009db2:	33ae      	adds	r3, #174	@ 0xae
 8009db4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009db8:	b153      	cbz	r3, 8009dd0 <USBD_LL_IsoOUTIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dba:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8009dbe:	2a03      	cmp	r2, #3
 8009dc0:	d001      	beq.n	8009dc6 <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8009dc2:	2000      	movs	r0, #0
}
 8009dc4:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc8:	b123      	cbz	r3, 8009dd4 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009dca:	4798      	blx	r3
  return USBD_OK;
 8009dcc:	2000      	movs	r0, #0
 8009dce:	e7f9      	b.n	8009dc4 <USBD_LL_IsoOUTIncomplete+0x18>
    return USBD_FAIL;
 8009dd0:	2003      	movs	r0, #3
 8009dd2:	e7f7      	b.n	8009dc4 <USBD_LL_IsoOUTIncomplete+0x18>
  return USBD_OK;
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	e7f5      	b.n	8009dc4 <USBD_LL_IsoOUTIncomplete+0x18>

08009dd8 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8009dd8:	2000      	movs	r0, #0
 8009dda:	4770      	bx	lr

08009ddc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009ddc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009dde:	2301      	movs	r3, #1
 8009de0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009de4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009de8:	b123      	cbz	r3, 8009df4 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	7901      	ldrb	r1, [r0, #4]
 8009dee:	4798      	blx	r3
 8009df0:	b910      	cbnz	r0, 8009df8 <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8009df2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8009df4:	2000      	movs	r0, #0
 8009df6:	e7fc      	b.n	8009df2 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 8009df8:	2003      	movs	r0, #3
 8009dfa:	e7fa      	b.n	8009df2 <USBD_LL_DevDisconnected+0x16>

08009dfc <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	4770      	bx	lr

08009e00 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8009e00:	2000      	movs	r0, #0
 8009e02:	4770      	bx	lr

08009e04 <USBD_LL_DataOutStage>:
{
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4604      	mov	r4, r0
  if (epnum == 0U)
 8009e08:	460d      	mov	r5, r1
 8009e0a:	2900      	cmp	r1, #0
 8009e0c:	d141      	bne.n	8009e92 <USBD_LL_DataOutStage+0x8e>
 8009e0e:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e10:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8009e14:	2a03      	cmp	r2, #3
 8009e16:	d001      	beq.n	8009e1c <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 8009e18:	4608      	mov	r0, r1
}
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8009e1c:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 8009e20:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 8009e24:	4291      	cmp	r1, r2
 8009e26:	d809      	bhi.n	8009e3c <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 8009e28:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 8009e2c:	f003 031f 	and.w	r3, r3, #31
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d00e      	beq.n	8009e52 <USBD_LL_DataOutStage+0x4e>
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d01a      	beq.n	8009e6e <USBD_LL_DataOutStage+0x6a>
 8009e38:	4628      	mov	r0, r5
 8009e3a:	e00f      	b.n	8009e5c <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 8009e3c:	1a89      	subs	r1, r1, r2
 8009e3e:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009e42:	428a      	cmp	r2, r1
 8009e44:	bf28      	it	cs
 8009e46:	460a      	movcs	r2, r1
 8009e48:	4619      	mov	r1, r3
 8009e4a:	f000 fd23 	bl	800a894 <USBD_CtlContinueRx>
  return USBD_OK;
 8009e4e:	4628      	mov	r0, r5
 8009e50:	e7e3      	b.n	8009e1a <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009e52:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8009e56:	f7ff ffd1 	bl	8009dfc <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009e5a:	b918      	cbnz	r0, 8009e64 <USBD_LL_DataOutStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e5c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8009e60:	2b03      	cmp	r3, #3
 8009e62:	d009      	beq.n	8009e78 <USBD_LL_DataOutStage+0x74>
        (void)USBD_CtlSendStatus(pdev);
 8009e64:	4620      	mov	r0, r4
 8009e66:	f000 fd1d 	bl	800a8a4 <USBD_CtlSendStatus>
  return USBD_OK;
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	e7d5      	b.n	8009e1a <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009e6e:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8009e72:	f7ff ffc5 	bl	8009e00 <USBD_CoreFindEP>
            break;
 8009e76:	e7f0      	b.n	8009e5a <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009e78:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8009e7c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8009e80:	691a      	ldr	r2, [r3, #16]
 8009e82:	2a00      	cmp	r2, #0
 8009e84:	d0ee      	beq.n	8009e64 <USBD_LL_DataOutStage+0x60>
              pdev->classId = idx;
 8009e86:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	4798      	blx	r3
 8009e90:	e7e8      	b.n	8009e64 <USBD_LL_DataOutStage+0x60>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009e92:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8009e96:	f7ff ffb3 	bl	8009e00 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e9a:	b988      	cbnz	r0, 8009ec0 <USBD_LL_DataOutStage+0xbc>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e9c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d1ba      	bne.n	8009e1a <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 8009ea4:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8009ea8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8009eac:	699a      	ldr	r2, [r3, #24]
 8009eae:	2a00      	cmp	r2, #0
 8009eb0:	d0b3      	beq.n	8009e1a <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 8009eb2:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009eb6:	699b      	ldr	r3, [r3, #24]
 8009eb8:	4629      	mov	r1, r5
 8009eba:	4620      	mov	r0, r4
 8009ebc:	4798      	blx	r3
      if (ret != USBD_OK)
 8009ebe:	e7ac      	b.n	8009e1a <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	e7aa      	b.n	8009e1a <USBD_LL_DataOutStage+0x16>

08009ec4 <USBD_LL_DataInStage>:
{
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	4604      	mov	r4, r0
  if (epnum == 0U)
 8009ec8:	460d      	mov	r5, r1
 8009eca:	2900      	cmp	r1, #0
 8009ecc:	d14a      	bne.n	8009f64 <USBD_LL_DataInStage+0xa0>
 8009ece:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ed0:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8009ed4:	2a02      	cmp	r2, #2
 8009ed6:	d007      	beq.n	8009ee8 <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 8009ed8:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 8009edc:	b118      	cbz	r0, 8009ee6 <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8009ee4:	4628      	mov	r0, r5
}
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8009ee8:	69c2      	ldr	r2, [r0, #28]
 8009eea:	6a01      	ldr	r1, [r0, #32]
 8009eec:	428a      	cmp	r2, r1
 8009eee:	d80d      	bhi.n	8009f0c <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 8009ef0:	428a      	cmp	r2, r1
 8009ef2:	d017      	beq.n	8009f24 <USBD_LL_DataInStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ef4:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d027      	beq.n	8009f4c <USBD_LL_DataInStage+0x88>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009efc:	2180      	movs	r1, #128	@ 0x80
 8009efe:	4620      	mov	r0, r4
 8009f00:	f7ff fe3e 	bl	8009b80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009f04:	4620      	mov	r0, r4
 8009f06:	f000 fcd8 	bl	800a8ba <USBD_CtlReceiveStatus>
 8009f0a:	e7e5      	b.n	8009ed8 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8009f0c:	1a52      	subs	r2, r2, r1
 8009f0e:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009f10:	4619      	mov	r1, r3
 8009f12:	f000 fca8 	bl	800a866 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f16:	2300      	movs	r3, #0
 8009f18:	461a      	mov	r2, r3
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f7ff fe4f 	bl	8009bc0 <USBD_LL_PrepareReceive>
 8009f22:	e7d9      	b.n	8009ed8 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8009f24:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8009f26:	4299      	cmp	r1, r3
 8009f28:	d8e4      	bhi.n	8009ef4 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 8009f2a:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d2e0      	bcs.n	8009ef4 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009f32:	2200      	movs	r2, #0
 8009f34:	4611      	mov	r1, r2
 8009f36:	f000 fc96 	bl	800a866 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f40:	460b      	mov	r3, r1
 8009f42:	460a      	mov	r2, r1
 8009f44:	4620      	mov	r0, r4
 8009f46:	f7ff fe3b 	bl	8009bc0 <USBD_LL_PrepareReceive>
 8009f4a:	e7c5      	b.n	8009ed8 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009f4c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8009f50:	68da      	ldr	r2, [r3, #12]
 8009f52:	2a00      	cmp	r2, #0
 8009f54:	d0d2      	beq.n	8009efc <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	4620      	mov	r0, r4
 8009f60:	4798      	blx	r3
 8009f62:	e7cb      	b.n	8009efc <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009f64:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009f68:	f7ff ff4a 	bl	8009e00 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f6c:	b988      	cbnz	r0, 8009f92 <USBD_LL_DataInStage+0xce>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f6e:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8009f72:	2b03      	cmp	r3, #3
 8009f74:	d1b7      	bne.n	8009ee6 <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 8009f76:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8009f7a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8009f7e:	695a      	ldr	r2, [r3, #20]
 8009f80:	2a00      	cmp	r2, #0
 8009f82:	d0b0      	beq.n	8009ee6 <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 8009f84:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009f88:	695b      	ldr	r3, [r3, #20]
 8009f8a:	4629      	mov	r1, r5
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	4798      	blx	r3
          if (ret != USBD_OK)
 8009f90:	e7a9      	b.n	8009ee6 <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 8009f92:	2000      	movs	r0, #0
 8009f94:	e7a7      	b.n	8009ee6 <USBD_LL_DataInStage+0x22>

08009f96 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8009f96:	880b      	ldrh	r3, [r1, #0]
 8009f98:	7802      	ldrb	r2, [r0, #0]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009f9e:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 8009fa0:	4418      	add	r0, r3
 8009fa2:	4770      	bx	lr

08009fa4 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 8009fa4:	8842      	ldrh	r2, [r0, #2]
 8009fa6:	7803      	ldrb	r3, [r0, #0]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d918      	bls.n	8009fde <USBD_GetEpDesc+0x3a>
{
 8009fac:	b530      	push	{r4, r5, lr}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	460d      	mov	r5, r1
    ptr = desc->bLength;
 8009fb4:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 8009fb8:	8863      	ldrh	r3, [r4, #2]
 8009fba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d20a      	bcs.n	8009fd8 <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009fc2:	f10d 0106 	add.w	r1, sp, #6
 8009fc6:	f7ff ffe6 	bl	8009f96 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009fca:	7843      	ldrb	r3, [r0, #1]
 8009fcc:	2b05      	cmp	r3, #5
 8009fce:	d1f3      	bne.n	8009fb8 <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8009fd0:	7883      	ldrb	r3, [r0, #2]
 8009fd2:	42ab      	cmp	r3, r5
 8009fd4:	d1f0      	bne.n	8009fb8 <USBD_GetEpDesc+0x14>
 8009fd6:	e000      	b.n	8009fda <USBD_GetEpDesc+0x36>
 8009fd8:	2000      	movs	r0, #0
}
 8009fda:	b003      	add	sp, #12
 8009fdc:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009fde:	2000      	movs	r0, #0
}
 8009fe0:	4770      	bx	lr

08009fe2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009fe2:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8009fe4:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8009fe6:	e002      	b.n	8009fee <USBD_GetLen+0xc>
  {
    len++;
 8009fe8:	3001      	adds	r0, #1
 8009fea:	b2c0      	uxtb	r0, r0
    pbuff++;
 8009fec:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8009fee:	781a      	ldrb	r2, [r3, #0]
 8009ff0:	2a00      	cmp	r2, #0
 8009ff2:	d1f9      	bne.n	8009fe8 <USBD_GetLen+0x6>
  }

  return len;
}
 8009ff4:	4770      	bx	lr

08009ff6 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8009ff6:	780b      	ldrb	r3, [r1, #0]
 8009ff8:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8009ffa:	784b      	ldrb	r3, [r1, #1]
 8009ffc:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8009ffe:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800a000:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a002:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800a006:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800a008:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800a00a:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a00c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800a010:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800a012:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800a014:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a016:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800a01a:	80c3      	strh	r3, [r0, #6]
}
 800a01c:	4770      	bx	lr

0800a01e <USBD_CtlError>:
{
 800a01e:	b510      	push	{r4, lr}
 800a020:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a022:	2180      	movs	r1, #128	@ 0x80
 800a024:	f7ff fdac 	bl	8009b80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a028:	2100      	movs	r1, #0
 800a02a:	4620      	mov	r0, r4
 800a02c:	f7ff fda8 	bl	8009b80 <USBD_LL_StallEP>
}
 800a030:	bd10      	pop	{r4, pc}

0800a032 <USBD_GetDescriptor>:
{
 800a032:	b530      	push	{r4, r5, lr}
 800a034:	b083      	sub	sp, #12
 800a036:	4604      	mov	r4, r0
 800a038:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800a03a:	2300      	movs	r3, #0
 800a03c:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800a040:	884a      	ldrh	r2, [r1, #2]
 800a042:	0a13      	lsrs	r3, r2, #8
 800a044:	3b01      	subs	r3, #1
 800a046:	2b06      	cmp	r3, #6
 800a048:	f200 80aa 	bhi.w	800a1a0 <USBD_GetDescriptor+0x16e>
 800a04c:	e8df f003 	tbb	[pc, r3]
 800a050:	a8321e04 	.word	0xa8321e04
 800a054:	8ca8      	.short	0x8ca8
 800a056:	99          	.byte	0x99
 800a057:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a058:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f10d 0106 	add.w	r1, sp, #6
 800a062:	7c00      	ldrb	r0, [r0, #16]
 800a064:	4798      	blx	r3
  if (req->wLength != 0U)
 800a066:	88ea      	ldrh	r2, [r5, #6]
 800a068:	2a00      	cmp	r2, #0
 800a06a:	f000 80a3 	beq.w	800a1b4 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 800a06e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a072:	2b00      	cmp	r3, #0
 800a074:	f000 8099 	beq.w	800a1aa <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 800a078:	429a      	cmp	r2, r3
 800a07a:	bf28      	it	cs
 800a07c:	461a      	movcs	r2, r3
 800a07e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a082:	4601      	mov	r1, r0
 800a084:	4620      	mov	r0, r4
 800a086:	f000 fbe1 	bl	800a84c <USBD_CtlSendData>
 800a08a:	e08c      	b.n	800a1a6 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a08c:	7c03      	ldrb	r3, [r0, #16]
 800a08e:	b943      	cbnz	r3, 800a0a2 <USBD_GetDescriptor+0x70>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a090:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a096:	f10d 0006 	add.w	r0, sp, #6
 800a09a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a09c:	2302      	movs	r3, #2
 800a09e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a0a0:	e7e1      	b.n	800a066 <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a0a2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a0a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a8:	f10d 0006 	add.w	r0, sp, #6
 800a0ac:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a0b2:	e7d8      	b.n	800a066 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800a0b4:	b2d2      	uxtb	r2, r2
 800a0b6:	2a05      	cmp	r2, #5
 800a0b8:	d852      	bhi.n	800a160 <USBD_GetDescriptor+0x12e>
 800a0ba:	e8df f002 	tbb	[pc, r2]
 800a0be:	1003      	.short	0x1003
 800a0c0:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a0c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	b123      	cbz	r3, 800a0d6 <USBD_GetDescriptor+0xa4>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a0cc:	f10d 0106 	add.w	r1, sp, #6
 800a0d0:	7c00      	ldrb	r0, [r0, #16]
 800a0d2:	4798      	blx	r3
  if (err != 0U)
 800a0d4:	e7c7      	b.n	800a066 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	f7ff ffa1 	bl	800a01e <USBD_CtlError>
  if (err != 0U)
 800a0dc:	e063      	b.n	800a1a6 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	b123      	cbz	r3, 800a0f0 <USBD_GetDescriptor+0xbe>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a0e6:	f10d 0106 	add.w	r1, sp, #6
 800a0ea:	7c00      	ldrb	r0, [r0, #16]
 800a0ec:	4798      	blx	r3
  if (err != 0U)
 800a0ee:	e7ba      	b.n	800a066 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	f7ff ff94 	bl	800a01e <USBD_CtlError>
  if (err != 0U)
 800a0f6:	e056      	b.n	800a1a6 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a0f8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	b123      	cbz	r3, 800a10a <USBD_GetDescriptor+0xd8>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a100:	f10d 0106 	add.w	r1, sp, #6
 800a104:	7c00      	ldrb	r0, [r0, #16]
 800a106:	4798      	blx	r3
  if (err != 0U)
 800a108:	e7ad      	b.n	800a066 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a10a:	4629      	mov	r1, r5
 800a10c:	f7ff ff87 	bl	800a01e <USBD_CtlError>
  if (err != 0U)
 800a110:	e049      	b.n	800a1a6 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a112:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	b123      	cbz	r3, 800a124 <USBD_GetDescriptor+0xf2>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a11a:	f10d 0106 	add.w	r1, sp, #6
 800a11e:	7c00      	ldrb	r0, [r0, #16]
 800a120:	4798      	blx	r3
  if (err != 0U)
 800a122:	e7a0      	b.n	800a066 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a124:	4629      	mov	r1, r5
 800a126:	f7ff ff7a 	bl	800a01e <USBD_CtlError>
  if (err != 0U)
 800a12a:	e03c      	b.n	800a1a6 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a12c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a130:	695b      	ldr	r3, [r3, #20]
 800a132:	b123      	cbz	r3, 800a13e <USBD_GetDescriptor+0x10c>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a134:	f10d 0106 	add.w	r1, sp, #6
 800a138:	7c00      	ldrb	r0, [r0, #16]
 800a13a:	4798      	blx	r3
  if (err != 0U)
 800a13c:	e793      	b.n	800a066 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a13e:	4629      	mov	r1, r5
 800a140:	f7ff ff6d 	bl	800a01e <USBD_CtlError>
  if (err != 0U)
 800a144:	e02f      	b.n	800a1a6 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a146:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	b123      	cbz	r3, 800a158 <USBD_GetDescriptor+0x126>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a14e:	f10d 0106 	add.w	r1, sp, #6
 800a152:	7c00      	ldrb	r0, [r0, #16]
 800a154:	4798      	blx	r3
  if (err != 0U)
 800a156:	e786      	b.n	800a066 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a158:	4629      	mov	r1, r5
 800a15a:	f7ff ff60 	bl	800a01e <USBD_CtlError>
  if (err != 0U)
 800a15e:	e022      	b.n	800a1a6 <USBD_GetDescriptor+0x174>
          USBD_CtlError(pdev, req);
 800a160:	4629      	mov	r1, r5
 800a162:	f7ff ff5c 	bl	800a01e <USBD_CtlError>
  if (err != 0U)
 800a166:	e01e      	b.n	800a1a6 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a168:	7c03      	ldrb	r3, [r0, #16]
 800a16a:	b933      	cbnz	r3, 800a17a <USBD_GetDescriptor+0x148>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a16c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a172:	f10d 0006 	add.w	r0, sp, #6
 800a176:	4798      	blx	r3
  if (err != 0U)
 800a178:	e775      	b.n	800a066 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800a17a:	4629      	mov	r1, r5
 800a17c:	f7ff ff4f 	bl	800a01e <USBD_CtlError>
  if (err != 0U)
 800a180:	e011      	b.n	800a1a6 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a182:	7c03      	ldrb	r3, [r0, #16]
 800a184:	b943      	cbnz	r3, 800a198 <USBD_GetDescriptor+0x166>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a186:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a18a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a18c:	f10d 0006 	add.w	r0, sp, #6
 800a190:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a192:	2307      	movs	r3, #7
 800a194:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a196:	e766      	b.n	800a066 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800a198:	4629      	mov	r1, r5
 800a19a:	f7ff ff40 	bl	800a01e <USBD_CtlError>
  if (err != 0U)
 800a19e:	e002      	b.n	800a1a6 <USBD_GetDescriptor+0x174>
      USBD_CtlError(pdev, req);
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	f7ff ff3c 	bl	800a01e <USBD_CtlError>
}
 800a1a6:	b003      	add	sp, #12
 800a1a8:	bd30      	pop	{r4, r5, pc}
      USBD_CtlError(pdev, req);
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f7ff ff36 	bl	800a01e <USBD_CtlError>
 800a1b2:	e7f8      	b.n	800a1a6 <USBD_GetDescriptor+0x174>
    (void)USBD_CtlSendStatus(pdev);
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f000 fb75 	bl	800a8a4 <USBD_CtlSendStatus>
 800a1ba:	e7f4      	b.n	800a1a6 <USBD_GetDescriptor+0x174>

0800a1bc <USBD_SetAddress>:
{
 800a1bc:	b538      	push	{r3, r4, r5, lr}
 800a1be:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1c0:	888b      	ldrh	r3, [r1, #4]
 800a1c2:	b9f3      	cbnz	r3, 800a202 <USBD_SetAddress+0x46>
 800a1c4:	88cb      	ldrh	r3, [r1, #6]
 800a1c6:	b9e3      	cbnz	r3, 800a202 <USBD_SetAddress+0x46>
 800a1c8:	884b      	ldrh	r3, [r1, #2]
 800a1ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800a1cc:	d819      	bhi.n	800a202 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1ce:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1d2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d00c      	beq.n	800a1f4 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 800a1da:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a1de:	4629      	mov	r1, r5
 800a1e0:	f7ff fcde 	bl	8009ba0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f000 fb5d 	bl	800a8a4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800a1ea:	b135      	cbz	r5, 800a1fa <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a1f2:	e009      	b.n	800a208 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 800a1f4:	f7ff ff13 	bl	800a01e <USBD_CtlError>
 800a1f8:	e006      	b.n	800a208 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a200:	e002      	b.n	800a208 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 800a202:	4620      	mov	r0, r4
 800a204:	f7ff ff0b 	bl	800a01e <USBD_CtlError>
}
 800a208:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a20c <USBD_SetConfig>:
{
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	4604      	mov	r4, r0
 800a210:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800a212:	788d      	ldrb	r5, [r1, #2]
 800a214:	4b2f      	ldr	r3, [pc, #188]	@ (800a2d4 <USBD_SetConfig+0xc8>)
 800a216:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a218:	2d01      	cmp	r5, #1
 800a21a:	d810      	bhi.n	800a23e <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800a21c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a220:	b2da      	uxtb	r2, r3
 800a222:	2b02      	cmp	r3, #2
 800a224:	d00f      	beq.n	800a246 <USBD_SetConfig+0x3a>
 800a226:	2a03      	cmp	r2, #3
 800a228:	d026      	beq.n	800a278 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 800a22a:	f7ff fef8 	bl	800a01e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a22e:	4b29      	ldr	r3, [pc, #164]	@ (800a2d4 <USBD_SetConfig+0xc8>)
 800a230:	7819      	ldrb	r1, [r3, #0]
 800a232:	4620      	mov	r0, r4
 800a234:	f7ff fd10 	bl	8009c58 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a238:	2503      	movs	r5, #3
}
 800a23a:	4628      	mov	r0, r5
 800a23c:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800a23e:	f7ff feee 	bl	800a01e <USBD_CtlError>
    return USBD_FAIL;
 800a242:	2503      	movs	r5, #3
 800a244:	e7f9      	b.n	800a23a <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800a246:	b1a5      	cbz	r5, 800a272 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 800a248:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a24a:	4629      	mov	r1, r5
 800a24c:	f7ff fcfb 	bl	8009c46 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a250:	4605      	mov	r5, r0
 800a252:	b138      	cbz	r0, 800a264 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 800a254:	4631      	mov	r1, r6
 800a256:	4620      	mov	r0, r4
 800a258:	f7ff fee1 	bl	800a01e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a25c:	2302      	movs	r3, #2
 800a25e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a262:	e7ea      	b.n	800a23a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a264:	4620      	mov	r0, r4
 800a266:	f000 fb1d 	bl	800a8a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a26a:	2303      	movs	r3, #3
 800a26c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a270:	e7e3      	b.n	800a23a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a272:	f000 fb17 	bl	800a8a4 <USBD_CtlSendStatus>
 800a276:	e7e0      	b.n	800a23a <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800a278:	b1cd      	cbz	r5, 800a2ae <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 800a27a:	6841      	ldr	r1, [r0, #4]
 800a27c:	428d      	cmp	r5, r1
 800a27e:	d025      	beq.n	800a2cc <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a280:	b2c9      	uxtb	r1, r1
 800a282:	f7ff fce9 	bl	8009c58 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a286:	4b13      	ldr	r3, [pc, #76]	@ (800a2d4 <USBD_SetConfig+0xc8>)
 800a288:	7819      	ldrb	r1, [r3, #0]
 800a28a:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a28c:	4620      	mov	r0, r4
 800a28e:	f7ff fcda 	bl	8009c46 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a292:	4605      	mov	r5, r0
 800a294:	b1b0      	cbz	r0, 800a2c4 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 800a296:	4631      	mov	r1, r6
 800a298:	4620      	mov	r0, r4
 800a29a:	f7ff fec0 	bl	800a01e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a29e:	7921      	ldrb	r1, [r4, #4]
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f7ff fcd9 	bl	8009c58 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a2ac:	e7c5      	b.n	800a23a <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a2b4:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	f7ff fcce 	bl	8009c58 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f000 faf1 	bl	800a8a4 <USBD_CtlSendStatus>
 800a2c2:	e7ba      	b.n	800a23a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f000 faed 	bl	800a8a4 <USBD_CtlSendStatus>
 800a2ca:	e7b6      	b.n	800a23a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a2cc:	f000 faea 	bl	800a8a4 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a2d0:	2500      	movs	r5, #0
 800a2d2:	e7b2      	b.n	800a23a <USBD_SetConfig+0x2e>
 800a2d4:	20007f38 	.word	0x20007f38

0800a2d8 <USBD_GetConfig>:
{
 800a2d8:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800a2da:	88cb      	ldrh	r3, [r1, #6]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d10b      	bne.n	800a2f8 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800a2e0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d909      	bls.n	800a2fe <USBD_GetConfig+0x26>
 800a2ea:	2a03      	cmp	r2, #3
 800a2ec:	d111      	bne.n	800a312 <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	1d01      	adds	r1, r0, #4
 800a2f2:	f000 faab 	bl	800a84c <USBD_CtlSendData>
        break;
 800a2f6:	e001      	b.n	800a2fc <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800a2f8:	f7ff fe91 	bl	800a01e <USBD_CtlError>
}
 800a2fc:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800a2fe:	b252      	sxtb	r2, r2
 800a300:	b13a      	cbz	r2, 800a312 <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 800a302:	4601      	mov	r1, r0
 800a304:	2300      	movs	r3, #0
 800a306:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a30a:	2201      	movs	r2, #1
 800a30c:	f000 fa9e 	bl	800a84c <USBD_CtlSendData>
        break;
 800a310:	e7f4      	b.n	800a2fc <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 800a312:	f7ff fe84 	bl	800a01e <USBD_CtlError>
}
 800a316:	e7f1      	b.n	800a2fc <USBD_GetConfig+0x24>

0800a318 <USBD_GetStatus>:
{
 800a318:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a31a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a31e:	3b01      	subs	r3, #1
 800a320:	2b02      	cmp	r3, #2
 800a322:	d812      	bhi.n	800a34a <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800a324:	88cb      	ldrh	r3, [r1, #6]
 800a326:	2b02      	cmp	r3, #2
 800a328:	d10c      	bne.n	800a344 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a32a:	2301      	movs	r3, #1
 800a32c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800a32e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800a332:	b10b      	cbz	r3, 800a338 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a334:	2303      	movs	r3, #3
 800a336:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a338:	2202      	movs	r2, #2
 800a33a:	f100 010c 	add.w	r1, r0, #12
 800a33e:	f000 fa85 	bl	800a84c <USBD_CtlSendData>
}
 800a342:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800a344:	f7ff fe6b 	bl	800a01e <USBD_CtlError>
        break;
 800a348:	e7fb      	b.n	800a342 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800a34a:	f7ff fe68 	bl	800a01e <USBD_CtlError>
}
 800a34e:	e7f8      	b.n	800a342 <USBD_GetStatus+0x2a>

0800a350 <USBD_SetFeature>:
{
 800a350:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a352:	884b      	ldrh	r3, [r1, #2]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d004      	beq.n	800a362 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d007      	beq.n	800a36c <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 800a35c:	f7ff fe5f 	bl	800a01e <USBD_CtlError>
}
 800a360:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800a362:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a366:	f000 fa9d 	bl	800a8a4 <USBD_CtlSendStatus>
 800a36a:	e7f9      	b.n	800a360 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a36c:	888b      	ldrh	r3, [r1, #4]
 800a36e:	0a1b      	lsrs	r3, r3, #8
 800a370:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a374:	f000 fa96 	bl	800a8a4 <USBD_CtlSendStatus>
 800a378:	e7f2      	b.n	800a360 <USBD_SetFeature+0x10>

0800a37a <USBD_ClrFeature>:
{
 800a37a:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a37c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a380:	3b01      	subs	r3, #1
 800a382:	2b02      	cmp	r3, #2
 800a384:	d809      	bhi.n	800a39a <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a386:	884b      	ldrh	r3, [r1, #2]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d000      	beq.n	800a38e <USBD_ClrFeature+0x14>
}
 800a38c:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800a38e:	2300      	movs	r3, #0
 800a390:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a394:	f000 fa86 	bl	800a8a4 <USBD_CtlSendStatus>
 800a398:	e7f8      	b.n	800a38c <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800a39a:	f7ff fe40 	bl	800a01e <USBD_CtlError>
}
 800a39e:	e7f5      	b.n	800a38c <USBD_ClrFeature+0x12>

0800a3a0 <USBD_StdDevReq>:
{
 800a3a0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3a2:	780c      	ldrb	r4, [r1, #0]
 800a3a4:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800a3a8:	2c20      	cmp	r4, #32
 800a3aa:	d006      	beq.n	800a3ba <USBD_StdDevReq+0x1a>
 800a3ac:	2c40      	cmp	r4, #64	@ 0x40
 800a3ae:	d004      	beq.n	800a3ba <USBD_StdDevReq+0x1a>
 800a3b0:	b16c      	cbz	r4, 800a3ce <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 800a3b2:	f7ff fe34 	bl	800a01e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a3b6:	2400      	movs	r4, #0
      break;
 800a3b8:	e007      	b.n	800a3ca <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a3ba:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a3be:	33ae      	adds	r3, #174	@ 0xae
 800a3c0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	4798      	blx	r3
 800a3c8:	4604      	mov	r4, r0
}
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800a3ce:	784d      	ldrb	r5, [r1, #1]
 800a3d0:	2d09      	cmp	r5, #9
 800a3d2:	d81d      	bhi.n	800a410 <USBD_StdDevReq+0x70>
 800a3d4:	e8df f005 	tbb	[pc, r5]
 800a3d8:	161c1912 	.word	0x161c1912
 800a3dc:	1c05081c 	.word	0x1c05081c
 800a3e0:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800a3e2:	f7ff fe26 	bl	800a032 <USBD_GetDescriptor>
          break;
 800a3e6:	e7f0      	b.n	800a3ca <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 800a3e8:	f7ff fee8 	bl	800a1bc <USBD_SetAddress>
          break;
 800a3ec:	e7ed      	b.n	800a3ca <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 800a3ee:	f7ff ff0d 	bl	800a20c <USBD_SetConfig>
 800a3f2:	4604      	mov	r4, r0
          break;
 800a3f4:	e7e9      	b.n	800a3ca <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 800a3f6:	f7ff ff6f 	bl	800a2d8 <USBD_GetConfig>
          break;
 800a3fa:	e7e6      	b.n	800a3ca <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 800a3fc:	f7ff ff8c 	bl	800a318 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a400:	462c      	mov	r4, r5
          break;
 800a402:	e7e2      	b.n	800a3ca <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 800a404:	f7ff ffa4 	bl	800a350 <USBD_SetFeature>
          break;
 800a408:	e7df      	b.n	800a3ca <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 800a40a:	f7ff ffb6 	bl	800a37a <USBD_ClrFeature>
          break;
 800a40e:	e7dc      	b.n	800a3ca <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 800a410:	f7ff fe05 	bl	800a01e <USBD_CtlError>
          break;
 800a414:	e7d9      	b.n	800a3ca <USBD_StdDevReq+0x2a>

0800a416 <USBD_StdItfReq>:
{
 800a416:	b570      	push	{r4, r5, r6, lr}
 800a418:	4605      	mov	r5, r0
 800a41a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a41c:	780b      	ldrb	r3, [r1, #0]
 800a41e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a422:	2b20      	cmp	r3, #32
 800a424:	d007      	beq.n	800a436 <USBD_StdItfReq+0x20>
 800a426:	2b40      	cmp	r3, #64	@ 0x40
 800a428:	d005      	beq.n	800a436 <USBD_StdItfReq+0x20>
 800a42a:	b123      	cbz	r3, 800a436 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800a42c:	f7ff fdf7 	bl	800a01e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a430:	2600      	movs	r6, #0
}
 800a432:	4630      	mov	r0, r6
 800a434:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800a436:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 800a43a:	3b01      	subs	r3, #1
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d826      	bhi.n	800a48e <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a440:	7921      	ldrb	r1, [r4, #4]
 800a442:	2901      	cmp	r1, #1
 800a444:	d905      	bls.n	800a452 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 800a446:	4621      	mov	r1, r4
 800a448:	4628      	mov	r0, r5
 800a44a:	f7ff fde8 	bl	800a01e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a44e:	2600      	movs	r6, #0
 800a450:	e7ef      	b.n	800a432 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a452:	4628      	mov	r0, r5
 800a454:	f7ff fcd2 	bl	8009dfc <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a458:	b968      	cbnz	r0, 800a476 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 800a45a:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 800a45e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a462:	6891      	ldr	r1, [r2, #8]
 800a464:	b189      	cbz	r1, 800a48a <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 800a466:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a46a:	6893      	ldr	r3, [r2, #8]
 800a46c:	4621      	mov	r1, r4
 800a46e:	4628      	mov	r0, r5
 800a470:	4798      	blx	r3
 800a472:	4606      	mov	r6, r0
 800a474:	e000      	b.n	800a478 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 800a476:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a478:	88e3      	ldrh	r3, [r4, #6]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1d9      	bne.n	800a432 <USBD_StdItfReq+0x1c>
 800a47e:	2e00      	cmp	r6, #0
 800a480:	d1d7      	bne.n	800a432 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800a482:	4628      	mov	r0, r5
 800a484:	f000 fa0e 	bl	800a8a4 <USBD_CtlSendStatus>
 800a488:	e7d3      	b.n	800a432 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 800a48a:	2603      	movs	r6, #3
 800a48c:	e7f4      	b.n	800a478 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 800a48e:	4621      	mov	r1, r4
 800a490:	4628      	mov	r0, r5
 800a492:	f7ff fdc4 	bl	800a01e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a496:	2600      	movs	r6, #0
          break;
 800a498:	e7cb      	b.n	800a432 <USBD_StdItfReq+0x1c>

0800a49a <USBD_StdEPReq>:
{
 800a49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a49e:	4606      	mov	r6, r0
 800a4a0:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800a4a2:	888b      	ldrh	r3, [r1, #4]
 800a4a4:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4a6:	780c      	ldrb	r4, [r1, #0]
 800a4a8:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800a4ac:	2c20      	cmp	r4, #32
 800a4ae:	d008      	beq.n	800a4c2 <USBD_StdEPReq+0x28>
 800a4b0:	2c40      	cmp	r4, #64	@ 0x40
 800a4b2:	d006      	beq.n	800a4c2 <USBD_StdEPReq+0x28>
 800a4b4:	b1dc      	cbz	r4, 800a4ee <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 800a4b6:	f7ff fdb2 	bl	800a01e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ba:	2400      	movs	r4, #0
}
 800a4bc:	4620      	mov	r0, r4
 800a4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f7ff fc9b 	bl	8009e00 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	f040 80fc 	bne.w	800a6ca <USBD_StdEPReq+0x230>
        pdev->classId = idx;
 800a4d2:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 800a4d6:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800a4da:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d0eb      	beq.n	800a4bc <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	4630      	mov	r0, r6
 800a4e8:	4798      	blx	r3
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	e7e6      	b.n	800a4bc <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800a4ee:	f891 8001 	ldrb.w	r8, [r1, #1]
 800a4f2:	f1b8 0f01 	cmp.w	r8, #1
 800a4f6:	d031      	beq.n	800a55c <USBD_StdEPReq+0xc2>
 800a4f8:	f1b8 0f03 	cmp.w	r8, #3
 800a4fc:	d005      	beq.n	800a50a <USBD_StdEPReq+0x70>
 800a4fe:	f1b8 0f00 	cmp.w	r8, #0
 800a502:	d067      	beq.n	800a5d4 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 800a504:	f7ff fd8b 	bl	800a01e <USBD_CtlError>
          break;
 800a508:	e7d8      	b.n	800a4bc <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800a50a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	2b02      	cmp	r3, #2
 800a512:	d004      	beq.n	800a51e <USBD_StdEPReq+0x84>
 800a514:	2a03      	cmp	r2, #3
 800a516:	d012      	beq.n	800a53e <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 800a518:	f7ff fd81 	bl	800a01e <USBD_CtlError>
              break;
 800a51c:	e7ce      	b.n	800a4bc <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a51e:	b10f      	cbz	r7, 800a524 <USBD_StdEPReq+0x8a>
 800a520:	2f80      	cmp	r7, #128	@ 0x80
 800a522:	d104      	bne.n	800a52e <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 800a524:	4629      	mov	r1, r5
 800a526:	4630      	mov	r0, r6
 800a528:	f7ff fd79 	bl	800a01e <USBD_CtlError>
 800a52c:	e7c6      	b.n	800a4bc <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a52e:	4639      	mov	r1, r7
 800a530:	f7ff fb26 	bl	8009b80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a534:	2180      	movs	r1, #128	@ 0x80
 800a536:	4630      	mov	r0, r6
 800a538:	f7ff fb22 	bl	8009b80 <USBD_LL_StallEP>
 800a53c:	e7be      	b.n	800a4bc <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a53e:	884b      	ldrh	r3, [r1, #2]
 800a540:	b923      	cbnz	r3, 800a54c <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a542:	b11f      	cbz	r7, 800a54c <USBD_StdEPReq+0xb2>
 800a544:	2f80      	cmp	r7, #128	@ 0x80
 800a546:	d001      	beq.n	800a54c <USBD_StdEPReq+0xb2>
 800a548:	88cb      	ldrh	r3, [r1, #6]
 800a54a:	b11b      	cbz	r3, 800a554 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 800a54c:	4630      	mov	r0, r6
 800a54e:	f000 f9a9 	bl	800a8a4 <USBD_CtlSendStatus>
              break;
 800a552:	e7b3      	b.n	800a4bc <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a554:	4639      	mov	r1, r7
 800a556:	f7ff fb13 	bl	8009b80 <USBD_LL_StallEP>
 800a55a:	e7f7      	b.n	800a54c <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 800a55c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a560:	b2da      	uxtb	r2, r3
 800a562:	2b02      	cmp	r3, #2
 800a564:	d004      	beq.n	800a570 <USBD_StdEPReq+0xd6>
 800a566:	2a03      	cmp	r2, #3
 800a568:	d012      	beq.n	800a590 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 800a56a:	f7ff fd58 	bl	800a01e <USBD_CtlError>
              break;
 800a56e:	e7a5      	b.n	800a4bc <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a570:	b10f      	cbz	r7, 800a576 <USBD_StdEPReq+0xdc>
 800a572:	2f80      	cmp	r7, #128	@ 0x80
 800a574:	d104      	bne.n	800a580 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 800a576:	4629      	mov	r1, r5
 800a578:	4630      	mov	r0, r6
 800a57a:	f7ff fd50 	bl	800a01e <USBD_CtlError>
 800a57e:	e79d      	b.n	800a4bc <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a580:	4639      	mov	r1, r7
 800a582:	f7ff fafd 	bl	8009b80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a586:	2180      	movs	r1, #128	@ 0x80
 800a588:	4630      	mov	r0, r6
 800a58a:	f7ff faf9 	bl	8009b80 <USBD_LL_StallEP>
 800a58e:	e795      	b.n	800a4bc <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a590:	884b      	ldrh	r3, [r1, #2]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d192      	bne.n	800a4bc <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 800a596:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800a59a:	d117      	bne.n	800a5cc <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 800a59c:	4630      	mov	r0, r6
 800a59e:	f000 f981 	bl	800a8a4 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	f7ff fc2b 	bl	8009e00 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d186      	bne.n	800a4bc <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 800a5ae:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800a5b2:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 800a5b6:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a5ba:	6892      	ldr	r2, [r2, #8]
 800a5bc:	2a00      	cmp	r2, #0
 800a5be:	f000 8086 	beq.w	800a6ce <USBD_StdEPReq+0x234>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	4790      	blx	r2
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	e777      	b.n	800a4bc <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	f7ff fadf 	bl	8009b90 <USBD_LL_ClearStallEP>
 800a5d2:	e7e3      	b.n	800a59c <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 800a5d4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a5d8:	b2d1      	uxtb	r1, r2
 800a5da:	2a02      	cmp	r2, #2
 800a5dc:	d006      	beq.n	800a5ec <USBD_StdEPReq+0x152>
 800a5de:	2903      	cmp	r1, #3
 800a5e0:	d029      	beq.n	800a636 <USBD_StdEPReq+0x19c>
              USBD_CtlError(pdev, req);
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	f7ff fd1b 	bl	800a01e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a5e8:	4644      	mov	r4, r8
              break;
 800a5ea:	e767      	b.n	800a4bc <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5ec:	b10f      	cbz	r7, 800a5f2 <USBD_StdEPReq+0x158>
 800a5ee:	2f80      	cmp	r7, #128	@ 0x80
 800a5f0:	d113      	bne.n	800a61a <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5f6:	d115      	bne.n	800a624 <USBD_StdEPReq+0x18a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5f8:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5fc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800a600:	00b9      	lsls	r1, r7, #2
 800a602:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 800a606:	4431      	add	r1, r6
 800a608:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800a60a:	2300      	movs	r3, #0
 800a60c:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a60e:	2202      	movs	r2, #2
 800a610:	4630      	mov	r0, r6
 800a612:	f000 f91b 	bl	800a84c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a616:	4644      	mov	r4, r8
              break;
 800a618:	e750      	b.n	800a4bc <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800a61a:	4629      	mov	r1, r5
 800a61c:	f7ff fcff 	bl	800a01e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a620:	4644      	mov	r4, r8
                break;
 800a622:	e74b      	b.n	800a4bc <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a624:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 800a628:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800a62c:	00b9      	lsls	r1, r7, #2
 800a62e:	3110      	adds	r1, #16
 800a630:	4431      	add	r1, r6
 800a632:	3104      	adds	r1, #4
 800a634:	e7e9      	b.n	800a60a <USBD_StdEPReq+0x170>
              if ((ep_addr & 0x80U) == 0x80U)
 800a636:	b25b      	sxtb	r3, r3
 800a638:	2b00      	cmp	r3, #0
 800a63a:	db1f      	blt.n	800a67c <USBD_StdEPReq+0x1e2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a63c:	f007 020f 	and.w	r2, r7, #15
 800a640:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a644:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a648:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 800a64c:	b322      	cbz	r2, 800a698 <USBD_StdEPReq+0x1fe>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a64e:	2b00      	cmp	r3, #0
 800a650:	db27      	blt.n	800a6a2 <USBD_StdEPReq+0x208>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a652:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a656:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a65a:	009c      	lsls	r4, r3, #2
 800a65c:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 800a660:	4434      	add	r4, r6
 800a662:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a664:	b10f      	cbz	r7, 800a66a <USBD_StdEPReq+0x1d0>
 800a666:	2f80      	cmp	r7, #128	@ 0x80
 800a668:	d124      	bne.n	800a6b4 <USBD_StdEPReq+0x21a>
                pep->status = 0x0000U;
 800a66a:	2300      	movs	r3, #0
 800a66c:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a66e:	2202      	movs	r2, #2
 800a670:	4621      	mov	r1, r4
 800a672:	4630      	mov	r0, r6
 800a674:	f000 f8ea 	bl	800a84c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a678:	4644      	mov	r4, r8
              break;
 800a67a:	e71f      	b.n	800a4bc <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a67c:	f007 020f 	and.w	r2, r7, #15
 800a680:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a684:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a688:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800a68a:	2a00      	cmp	r2, #0
 800a68c:	d1df      	bne.n	800a64e <USBD_StdEPReq+0x1b4>
                  USBD_CtlError(pdev, req);
 800a68e:	4629      	mov	r1, r5
 800a690:	f7ff fcc5 	bl	800a01e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a694:	4644      	mov	r4, r8
                  break;
 800a696:	e711      	b.n	800a4bc <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 800a698:	4629      	mov	r1, r5
 800a69a:	f7ff fcc0 	bl	800a01e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a69e:	4644      	mov	r4, r8
                  break;
 800a6a0:	e70c      	b.n	800a4bc <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6a2:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 800a6a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a6aa:	009c      	lsls	r4, r3, #2
 800a6ac:	3410      	adds	r4, #16
 800a6ae:	4434      	add	r4, r6
 800a6b0:	3404      	adds	r4, #4
 800a6b2:	e7d7      	b.n	800a664 <USBD_StdEPReq+0x1ca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	f7ff fa1c 	bl	8009af4 <USBD_LL_IsStallEP>
 800a6bc:	b110      	cbz	r0, 800a6c4 <USBD_StdEPReq+0x22a>
                pep->status = 0x0001U;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	e7d4      	b.n	800a66e <USBD_StdEPReq+0x1d4>
                pep->status = 0x0000U;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	6023      	str	r3, [r4, #0]
 800a6c8:	e7d1      	b.n	800a66e <USBD_StdEPReq+0x1d4>
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ca:	2400      	movs	r4, #0
 800a6cc:	e6f6      	b.n	800a4bc <USBD_StdEPReq+0x22>
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	e6f4      	b.n	800a4bc <USBD_StdEPReq+0x22>

0800a6d2 <USBD_GetString>:
  if (desc == NULL)
 800a6d2:	b300      	cbz	r0, 800a716 <USBD_GetString+0x44>
{
 800a6d4:	b570      	push	{r4, r5, r6, lr}
 800a6d6:	460d      	mov	r5, r1
 800a6d8:	4616      	mov	r6, r2
 800a6da:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a6dc:	f7ff fc81 	bl	8009fe2 <USBD_GetLen>
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	0043      	lsls	r3, r0, #1
 800a6e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6e8:	d806      	bhi.n	800a6f8 <USBD_GetString+0x26>
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800a6ee:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	706b      	strb	r3, [r5, #1]
  idx++;
 800a6f4:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800a6f6:	e00a      	b.n	800a70e <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a6f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6fc:	e7f6      	b.n	800a6ec <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 800a6fe:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800a700:	3401      	adds	r4, #1
    idx++;
 800a702:	1c5a      	adds	r2, r3, #1
 800a704:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800a706:	2100      	movs	r1, #0
 800a708:	54a9      	strb	r1, [r5, r2]
    idx++;
 800a70a:	3302      	adds	r3, #2
 800a70c:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800a70e:	7822      	ldrb	r2, [r4, #0]
 800a710:	2a00      	cmp	r2, #0
 800a712:	d1f4      	bne.n	800a6fe <USBD_GetString+0x2c>
}
 800a714:	bd70      	pop	{r4, r5, r6, pc}
 800a716:	4770      	bx	lr

0800a718 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a718:	2312      	movs	r3, #18
 800a71a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800a71c:	4800      	ldr	r0, [pc, #0]	@ (800a720 <USBD_FS_DeviceDescriptor+0x8>)
 800a71e:	4770      	bx	lr
 800a720:	20000114 	.word	0x20000114

0800a724 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a724:	2304      	movs	r3, #4
 800a726:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800a728:	4800      	ldr	r0, [pc, #0]	@ (800a72c <USBD_FS_LangIDStrDescriptor+0x8>)
 800a72a:	4770      	bx	lr
 800a72c:	20000110 	.word	0x20000110

0800a730 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800a730:	2300      	movs	r3, #0
 800a732:	4293      	cmp	r3, r2
 800a734:	d21e      	bcs.n	800a774 <IntToUnicode+0x44>
{
 800a736:	b500      	push	{lr}
 800a738:	e010      	b.n	800a75c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a73a:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 800a73e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800a742:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800a744:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800a748:	f10c 0c01 	add.w	ip, ip, #1
 800a74c:	f04f 0e00 	mov.w	lr, #0
 800a750:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 800a754:	3301      	adds	r3, #1
 800a756:	b2db      	uxtb	r3, r3
 800a758:	4293      	cmp	r3, r2
 800a75a:	d209      	bcs.n	800a770 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800a75c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800a760:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 800a764:	d2e9      	bcs.n	800a73a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800a766:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 800a76a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800a76e:	e7e8      	b.n	800a742 <IntToUnicode+0x12>
  }
}
 800a770:	f85d fb04 	ldr.w	pc, [sp], #4
 800a774:	4770      	bx	lr
	...

0800a778 <Get_SerialNum>:
{
 800a778:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a77a:	4b0b      	ldr	r3, [pc, #44]	@ (800a7a8 <Get_SerialNum+0x30>)
 800a77c:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a780:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a784:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 800a788:	18c0      	adds	r0, r0, r3
 800a78a:	d100      	bne.n	800a78e <Get_SerialNum+0x16>
}
 800a78c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a78e:	4d07      	ldr	r5, [pc, #28]	@ (800a7ac <Get_SerialNum+0x34>)
 800a790:	2208      	movs	r2, #8
 800a792:	4629      	mov	r1, r5
 800a794:	f7ff ffcc 	bl	800a730 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a798:	2204      	movs	r2, #4
 800a79a:	f105 0110 	add.w	r1, r5, #16
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f7ff ffc6 	bl	800a730 <IntToUnicode>
}
 800a7a4:	e7f2      	b.n	800a78c <Get_SerialNum+0x14>
 800a7a6:	bf00      	nop
 800a7a8:	1fff7000 	.word	0x1fff7000
 800a7ac:	200000f6 	.word	0x200000f6

0800a7b0 <USBD_FS_SerialStrDescriptor>:
{
 800a7b0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800a7b2:	231a      	movs	r3, #26
 800a7b4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800a7b6:	f7ff ffdf 	bl	800a778 <Get_SerialNum>
}
 800a7ba:	4801      	ldr	r0, [pc, #4]	@ (800a7c0 <USBD_FS_SerialStrDescriptor+0x10>)
 800a7bc:	bd08      	pop	{r3, pc}
 800a7be:	bf00      	nop
 800a7c0:	200000f4 	.word	0x200000f4

0800a7c4 <USBD_FS_ProductStrDescriptor>:
{
 800a7c4:	b508      	push	{r3, lr}
 800a7c6:	460a      	mov	r2, r1
  if(speed == 0)
 800a7c8:	b928      	cbnz	r0, 800a7d6 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7ca:	4905      	ldr	r1, [pc, #20]	@ (800a7e0 <USBD_FS_ProductStrDescriptor+0x1c>)
 800a7cc:	4805      	ldr	r0, [pc, #20]	@ (800a7e4 <USBD_FS_ProductStrDescriptor+0x20>)
 800a7ce:	f7ff ff80 	bl	800a6d2 <USBD_GetString>
}
 800a7d2:	4803      	ldr	r0, [pc, #12]	@ (800a7e0 <USBD_FS_ProductStrDescriptor+0x1c>)
 800a7d4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7d6:	4902      	ldr	r1, [pc, #8]	@ (800a7e0 <USBD_FS_ProductStrDescriptor+0x1c>)
 800a7d8:	4802      	ldr	r0, [pc, #8]	@ (800a7e4 <USBD_FS_ProductStrDescriptor+0x20>)
 800a7da:	f7ff ff7a 	bl	800a6d2 <USBD_GetString>
 800a7de:	e7f8      	b.n	800a7d2 <USBD_FS_ProductStrDescriptor+0xe>
 800a7e0:	20007f3c 	.word	0x20007f3c
 800a7e4:	0800bd28 	.word	0x0800bd28

0800a7e8 <USBD_FS_ManufacturerStrDescriptor>:
{
 800a7e8:	b510      	push	{r4, lr}
 800a7ea:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a7ec:	4c03      	ldr	r4, [pc, #12]	@ (800a7fc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	4803      	ldr	r0, [pc, #12]	@ (800a800 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800a7f2:	f7ff ff6e 	bl	800a6d2 <USBD_GetString>
}
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	bd10      	pop	{r4, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20007f3c 	.word	0x20007f3c
 800a800:	0800bd44 	.word	0x0800bd44

0800a804 <USBD_FS_ConfigStrDescriptor>:
{
 800a804:	b508      	push	{r3, lr}
 800a806:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800a808:	b928      	cbnz	r0, 800a816 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a80a:	4905      	ldr	r1, [pc, #20]	@ (800a820 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800a80c:	4805      	ldr	r0, [pc, #20]	@ (800a824 <USBD_FS_ConfigStrDescriptor+0x20>)
 800a80e:	f7ff ff60 	bl	800a6d2 <USBD_GetString>
}
 800a812:	4803      	ldr	r0, [pc, #12]	@ (800a820 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800a814:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a816:	4902      	ldr	r1, [pc, #8]	@ (800a820 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800a818:	4802      	ldr	r0, [pc, #8]	@ (800a824 <USBD_FS_ConfigStrDescriptor+0x20>)
 800a81a:	f7ff ff5a 	bl	800a6d2 <USBD_GetString>
 800a81e:	e7f8      	b.n	800a812 <USBD_FS_ConfigStrDescriptor+0xe>
 800a820:	20007f3c 	.word	0x20007f3c
 800a824:	0800bd58 	.word	0x0800bd58

0800a828 <USBD_FS_InterfaceStrDescriptor>:
{
 800a828:	b508      	push	{r3, lr}
 800a82a:	460a      	mov	r2, r1
  if(speed == 0)
 800a82c:	b928      	cbnz	r0, 800a83a <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a82e:	4905      	ldr	r1, [pc, #20]	@ (800a844 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800a830:	4805      	ldr	r0, [pc, #20]	@ (800a848 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800a832:	f7ff ff4e 	bl	800a6d2 <USBD_GetString>
}
 800a836:	4803      	ldr	r0, [pc, #12]	@ (800a844 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800a838:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a83a:	4902      	ldr	r1, [pc, #8]	@ (800a844 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800a83c:	4802      	ldr	r0, [pc, #8]	@ (800a848 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800a83e:	f7ff ff48 	bl	800a6d2 <USBD_GetString>
 800a842:	e7f8      	b.n	800a836 <USBD_FS_InterfaceStrDescriptor+0xe>
 800a844:	20007f3c 	.word	0x20007f3c
 800a848:	0800bd64 	.word	0x0800bd64

0800a84c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a84c:	b508      	push	{r3, lr}
 800a84e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a850:	2202      	movs	r2, #2
 800a852:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a856:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a858:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a85a:	460a      	mov	r2, r1
 800a85c:	2100      	movs	r1, #0
 800a85e:	f7ff f9a7 	bl	8009bb0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a862:	2000      	movs	r0, #0
 800a864:	bd08      	pop	{r3, pc}

0800a866 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a866:	b508      	push	{r3, lr}
 800a868:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a86a:	460a      	mov	r2, r1
 800a86c:	2100      	movs	r1, #0
 800a86e:	f7ff f99f 	bl	8009bb0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a872:	2000      	movs	r0, #0
 800a874:	bd08      	pop	{r3, pc}

0800a876 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a876:	b508      	push	{r3, lr}
 800a878:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a87a:	2203      	movs	r2, #3
 800a87c:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a880:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a884:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a888:	460a      	mov	r2, r1
 800a88a:	2100      	movs	r1, #0
 800a88c:	f7ff f998 	bl	8009bc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a890:	2000      	movs	r0, #0
 800a892:	bd08      	pop	{r3, pc}

0800a894 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a894:	b508      	push	{r3, lr}
 800a896:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a898:	460a      	mov	r2, r1
 800a89a:	2100      	movs	r1, #0
 800a89c:	f7ff f990 	bl	8009bc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	bd08      	pop	{r3, pc}

0800a8a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a8a4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a8a6:	2204      	movs	r2, #4
 800a8a8:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	f7ff f97d 	bl	8009bb0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	bd08      	pop	{r3, pc}

0800a8ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a8ba:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a8bc:	2205      	movs	r2, #5
 800a8be:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	f7ff f97a 	bl	8009bc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	bd08      	pop	{r3, pc}

0800a8d0 <crc32_inc>:
    unsigned long crc32;
    unsigned char *byte_buf;
    size_t i;

    /** accumulate crc32 for buffer **/
    crc32 = in_crc32 ^ 0xFFFFFFFF;
 800a8d0:	43c0      	mvns	r0, r0
    byte_buf = (unsigned char *)buf;
    for (i = 0; i < size; i++)
 800a8d2:	f04f 0c00 	mov.w	ip, #0
 800a8d6:	4594      	cmp	ip, r2
 800a8d8:	d211      	bcs.n	800a8fe <crc32_inc+0x2e>
{
 800a8da:	b410      	push	{r4}
    {
        crc32 = (crc32 >> 8) ^ crcTable[(crc32 ^ byte_buf[i]) & 0xFF];
 800a8dc:	f811 300c 	ldrb.w	r3, [r1, ip]
 800a8e0:	4043      	eors	r3, r0
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	4c07      	ldr	r4, [pc, #28]	@ (800a904 <crc32_inc+0x34>)
 800a8e6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a8ea:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
    for (i = 0; i < size; i++)
 800a8ee:	f10c 0c01 	add.w	ip, ip, #1
 800a8f2:	4594      	cmp	ip, r2
 800a8f4:	d3f2      	bcc.n	800a8dc <crc32_inc+0xc>
    }
    return (crc32 ^ 0xFFFFFFFF);
}
 800a8f6:	43c0      	mvns	r0, r0
 800a8f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	43c0      	mvns	r0, r0
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	0800be68 	.word	0x0800be68

0800a908 <change_bit_uint32>:
    }
}

void change_bit_uint32(uint32_t *var, uint8_t bit_index, bool state)
{
    if (var == NULL)
 800a908:	4603      	mov	r3, r0
 800a90a:	b180      	cbz	r0, 800a92e <change_bit_uint32+0x26>
    {
        return;
    }
    // Check if bit_index is within valid range (0-31)
    if (bit_index > 31)
 800a90c:	291f      	cmp	r1, #31
 800a90e:	d80e      	bhi.n	800a92e <change_bit_uint32+0x26>
    {
        return;
    }
    if (state)
 800a910:	b132      	cbz	r2, 800a920 <change_bit_uint32+0x18>
    {
        *var |= (1UL << bit_index); // Set bit
 800a912:	6802      	ldr	r2, [r0, #0]
 800a914:	2001      	movs	r0, #1
 800a916:	fa00 f101 	lsl.w	r1, r0, r1
 800a91a:	430a      	orrs	r2, r1
 800a91c:	601a      	str	r2, [r3, #0]
 800a91e:	4770      	bx	lr
    }
    else
    {
        *var &= ~(1UL << bit_index); // Reset bit
 800a920:	6802      	ldr	r2, [r0, #0]
 800a922:	2001      	movs	r0, #1
 800a924:	fa00 f101 	lsl.w	r1, r0, r1
 800a928:	ea22 0201 	bic.w	r2, r2, r1
 800a92c:	601a      	str	r2, [r3, #0]
    }
 800a92e:	4770      	bx	lr

0800a930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a968 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800a934:	f7fc ff60 	bl	80077f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a938:	480c      	ldr	r0, [pc, #48]	@ (800a96c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a93a:	490d      	ldr	r1, [pc, #52]	@ (800a970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a93c:	4a0d      	ldr	r2, [pc, #52]	@ (800a974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a93e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a940:	e002      	b.n	800a948 <LoopCopyDataInit>

0800a942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a946:	3304      	adds	r3, #4

0800a948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a94a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a94c:	d3f9      	bcc.n	800a942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a94e:	4a0a      	ldr	r2, [pc, #40]	@ (800a978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a950:	4c0a      	ldr	r4, [pc, #40]	@ (800a97c <LoopFillZerobss+0x22>)
  movs r3, #0
 800a952:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a954:	e001      	b.n	800a95a <LoopFillZerobss>

0800a956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a958:	3204      	adds	r2, #4

0800a95a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a95a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a95c:	d3fb      	bcc.n	800a956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a95e:	f000 f855 	bl	800aa0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a962:	f7f8 f919 	bl	8002b98 <main>
  bx  lr    
 800a966:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a968:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800a96c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a970:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 800a974:	0800c2ac 	.word	0x0800c2ac
  ldr r2, =_sbss
 800a978:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 800a97c:	20008284 	.word	0x20008284

0800a980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a980:	e7fe      	b.n	800a980 <ADC_IRQHandler>
	...

0800a984 <sniprintf>:
 800a984:	b40c      	push	{r2, r3}
 800a986:	b530      	push	{r4, r5, lr}
 800a988:	4b18      	ldr	r3, [pc, #96]	@ (800a9ec <sniprintf+0x68>)
 800a98a:	1e0c      	subs	r4, r1, #0
 800a98c:	681d      	ldr	r5, [r3, #0]
 800a98e:	b09d      	sub	sp, #116	@ 0x74
 800a990:	da08      	bge.n	800a9a4 <sniprintf+0x20>
 800a992:	238b      	movs	r3, #139	@ 0x8b
 800a994:	602b      	str	r3, [r5, #0]
 800a996:	f04f 30ff 	mov.w	r0, #4294967295
 800a99a:	b01d      	add	sp, #116	@ 0x74
 800a99c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9a0:	b002      	add	sp, #8
 800a9a2:	4770      	bx	lr
 800a9a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a9a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a9ac:	f04f 0300 	mov.w	r3, #0
 800a9b0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a9b2:	bf14      	ite	ne
 800a9b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a9b8:	4623      	moveq	r3, r4
 800a9ba:	9304      	str	r3, [sp, #16]
 800a9bc:	9307      	str	r3, [sp, #28]
 800a9be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a9c2:	9002      	str	r0, [sp, #8]
 800a9c4:	9006      	str	r0, [sp, #24]
 800a9c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a9ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a9cc:	ab21      	add	r3, sp, #132	@ 0x84
 800a9ce:	a902      	add	r1, sp, #8
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	9301      	str	r3, [sp, #4]
 800a9d4:	f000 f9a6 	bl	800ad24 <_svfiprintf_r>
 800a9d8:	1c43      	adds	r3, r0, #1
 800a9da:	bfbc      	itt	lt
 800a9dc:	238b      	movlt	r3, #139	@ 0x8b
 800a9de:	602b      	strlt	r3, [r5, #0]
 800a9e0:	2c00      	cmp	r4, #0
 800a9e2:	d0da      	beq.n	800a99a <sniprintf+0x16>
 800a9e4:	9b02      	ldr	r3, [sp, #8]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	701a      	strb	r2, [r3, #0]
 800a9ea:	e7d6      	b.n	800a99a <sniprintf+0x16>
 800a9ec:	20000144 	.word	0x20000144

0800a9f0 <memset>:
 800a9f0:	4402      	add	r2, r0
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d100      	bne.n	800a9fa <memset+0xa>
 800a9f8:	4770      	bx	lr
 800a9fa:	f803 1b01 	strb.w	r1, [r3], #1
 800a9fe:	e7f9      	b.n	800a9f4 <memset+0x4>

0800aa00 <__errno>:
 800aa00:	4b01      	ldr	r3, [pc, #4]	@ (800aa08 <__errno+0x8>)
 800aa02:	6818      	ldr	r0, [r3, #0]
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	20000144 	.word	0x20000144

0800aa0c <__libc_init_array>:
 800aa0c:	b570      	push	{r4, r5, r6, lr}
 800aa0e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa44 <__libc_init_array+0x38>)
 800aa10:	4d0d      	ldr	r5, [pc, #52]	@ (800aa48 <__libc_init_array+0x3c>)
 800aa12:	1b5b      	subs	r3, r3, r5
 800aa14:	109c      	asrs	r4, r3, #2
 800aa16:	2600      	movs	r6, #0
 800aa18:	42a6      	cmp	r6, r4
 800aa1a:	d109      	bne.n	800aa30 <__libc_init_array+0x24>
 800aa1c:	f000 ff18 	bl	800b850 <_init>
 800aa20:	4d0a      	ldr	r5, [pc, #40]	@ (800aa4c <__libc_init_array+0x40>)
 800aa22:	4b0b      	ldr	r3, [pc, #44]	@ (800aa50 <__libc_init_array+0x44>)
 800aa24:	1b5b      	subs	r3, r3, r5
 800aa26:	109c      	asrs	r4, r3, #2
 800aa28:	2600      	movs	r6, #0
 800aa2a:	42a6      	cmp	r6, r4
 800aa2c:	d105      	bne.n	800aa3a <__libc_init_array+0x2e>
 800aa2e:	bd70      	pop	{r4, r5, r6, pc}
 800aa30:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa34:	4798      	blx	r3
 800aa36:	3601      	adds	r6, #1
 800aa38:	e7ee      	b.n	800aa18 <__libc_init_array+0xc>
 800aa3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa3e:	4798      	blx	r3
 800aa40:	3601      	adds	r6, #1
 800aa42:	e7f2      	b.n	800aa2a <__libc_init_array+0x1e>
 800aa44:	0800c2a4 	.word	0x0800c2a4
 800aa48:	0800c2a4 	.word	0x0800c2a4
 800aa4c:	0800c2a4 	.word	0x0800c2a4
 800aa50:	0800c2a8 	.word	0x0800c2a8

0800aa54 <__retarget_lock_acquire_recursive>:
 800aa54:	4770      	bx	lr

0800aa56 <__retarget_lock_release_recursive>:
 800aa56:	4770      	bx	lr

0800aa58 <memcpy>:
 800aa58:	440a      	add	r2, r1
 800aa5a:	4291      	cmp	r1, r2
 800aa5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa60:	d100      	bne.n	800aa64 <memcpy+0xc>
 800aa62:	4770      	bx	lr
 800aa64:	b510      	push	{r4, lr}
 800aa66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa6e:	4291      	cmp	r1, r2
 800aa70:	d1f9      	bne.n	800aa66 <memcpy+0xe>
 800aa72:	bd10      	pop	{r4, pc}

0800aa74 <_free_r>:
 800aa74:	b538      	push	{r3, r4, r5, lr}
 800aa76:	4605      	mov	r5, r0
 800aa78:	2900      	cmp	r1, #0
 800aa7a:	d041      	beq.n	800ab00 <_free_r+0x8c>
 800aa7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa80:	1f0c      	subs	r4, r1, #4
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	bfb8      	it	lt
 800aa86:	18e4      	addlt	r4, r4, r3
 800aa88:	f000 f8e0 	bl	800ac4c <__malloc_lock>
 800aa8c:	4a1d      	ldr	r2, [pc, #116]	@ (800ab04 <_free_r+0x90>)
 800aa8e:	6813      	ldr	r3, [r2, #0]
 800aa90:	b933      	cbnz	r3, 800aaa0 <_free_r+0x2c>
 800aa92:	6063      	str	r3, [r4, #4]
 800aa94:	6014      	str	r4, [r2, #0]
 800aa96:	4628      	mov	r0, r5
 800aa98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa9c:	f000 b8dc 	b.w	800ac58 <__malloc_unlock>
 800aaa0:	42a3      	cmp	r3, r4
 800aaa2:	d908      	bls.n	800aab6 <_free_r+0x42>
 800aaa4:	6820      	ldr	r0, [r4, #0]
 800aaa6:	1821      	adds	r1, r4, r0
 800aaa8:	428b      	cmp	r3, r1
 800aaaa:	bf01      	itttt	eq
 800aaac:	6819      	ldreq	r1, [r3, #0]
 800aaae:	685b      	ldreq	r3, [r3, #4]
 800aab0:	1809      	addeq	r1, r1, r0
 800aab2:	6021      	streq	r1, [r4, #0]
 800aab4:	e7ed      	b.n	800aa92 <_free_r+0x1e>
 800aab6:	461a      	mov	r2, r3
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	b10b      	cbz	r3, 800aac0 <_free_r+0x4c>
 800aabc:	42a3      	cmp	r3, r4
 800aabe:	d9fa      	bls.n	800aab6 <_free_r+0x42>
 800aac0:	6811      	ldr	r1, [r2, #0]
 800aac2:	1850      	adds	r0, r2, r1
 800aac4:	42a0      	cmp	r0, r4
 800aac6:	d10b      	bne.n	800aae0 <_free_r+0x6c>
 800aac8:	6820      	ldr	r0, [r4, #0]
 800aaca:	4401      	add	r1, r0
 800aacc:	1850      	adds	r0, r2, r1
 800aace:	4283      	cmp	r3, r0
 800aad0:	6011      	str	r1, [r2, #0]
 800aad2:	d1e0      	bne.n	800aa96 <_free_r+0x22>
 800aad4:	6818      	ldr	r0, [r3, #0]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	6053      	str	r3, [r2, #4]
 800aada:	4408      	add	r0, r1
 800aadc:	6010      	str	r0, [r2, #0]
 800aade:	e7da      	b.n	800aa96 <_free_r+0x22>
 800aae0:	d902      	bls.n	800aae8 <_free_r+0x74>
 800aae2:	230c      	movs	r3, #12
 800aae4:	602b      	str	r3, [r5, #0]
 800aae6:	e7d6      	b.n	800aa96 <_free_r+0x22>
 800aae8:	6820      	ldr	r0, [r4, #0]
 800aaea:	1821      	adds	r1, r4, r0
 800aaec:	428b      	cmp	r3, r1
 800aaee:	bf04      	itt	eq
 800aaf0:	6819      	ldreq	r1, [r3, #0]
 800aaf2:	685b      	ldreq	r3, [r3, #4]
 800aaf4:	6063      	str	r3, [r4, #4]
 800aaf6:	bf04      	itt	eq
 800aaf8:	1809      	addeq	r1, r1, r0
 800aafa:	6021      	streq	r1, [r4, #0]
 800aafc:	6054      	str	r4, [r2, #4]
 800aafe:	e7ca      	b.n	800aa96 <_free_r+0x22>
 800ab00:	bd38      	pop	{r3, r4, r5, pc}
 800ab02:	bf00      	nop
 800ab04:	20008280 	.word	0x20008280

0800ab08 <sbrk_aligned>:
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	4e0f      	ldr	r6, [pc, #60]	@ (800ab48 <sbrk_aligned+0x40>)
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	6831      	ldr	r1, [r6, #0]
 800ab10:	4605      	mov	r5, r0
 800ab12:	b911      	cbnz	r1, 800ab1a <sbrk_aligned+0x12>
 800ab14:	f000 fbaa 	bl	800b26c <_sbrk_r>
 800ab18:	6030      	str	r0, [r6, #0]
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	f000 fba5 	bl	800b26c <_sbrk_r>
 800ab22:	1c43      	adds	r3, r0, #1
 800ab24:	d103      	bne.n	800ab2e <sbrk_aligned+0x26>
 800ab26:	f04f 34ff 	mov.w	r4, #4294967295
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	bd70      	pop	{r4, r5, r6, pc}
 800ab2e:	1cc4      	adds	r4, r0, #3
 800ab30:	f024 0403 	bic.w	r4, r4, #3
 800ab34:	42a0      	cmp	r0, r4
 800ab36:	d0f8      	beq.n	800ab2a <sbrk_aligned+0x22>
 800ab38:	1a21      	subs	r1, r4, r0
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	f000 fb96 	bl	800b26c <_sbrk_r>
 800ab40:	3001      	adds	r0, #1
 800ab42:	d1f2      	bne.n	800ab2a <sbrk_aligned+0x22>
 800ab44:	e7ef      	b.n	800ab26 <sbrk_aligned+0x1e>
 800ab46:	bf00      	nop
 800ab48:	2000827c 	.word	0x2000827c

0800ab4c <_malloc_r>:
 800ab4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab50:	1ccd      	adds	r5, r1, #3
 800ab52:	f025 0503 	bic.w	r5, r5, #3
 800ab56:	3508      	adds	r5, #8
 800ab58:	2d0c      	cmp	r5, #12
 800ab5a:	bf38      	it	cc
 800ab5c:	250c      	movcc	r5, #12
 800ab5e:	2d00      	cmp	r5, #0
 800ab60:	4606      	mov	r6, r0
 800ab62:	db01      	blt.n	800ab68 <_malloc_r+0x1c>
 800ab64:	42a9      	cmp	r1, r5
 800ab66:	d904      	bls.n	800ab72 <_malloc_r+0x26>
 800ab68:	230c      	movs	r3, #12
 800ab6a:	6033      	str	r3, [r6, #0]
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac48 <_malloc_r+0xfc>
 800ab76:	f000 f869 	bl	800ac4c <__malloc_lock>
 800ab7a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab7e:	461c      	mov	r4, r3
 800ab80:	bb44      	cbnz	r4, 800abd4 <_malloc_r+0x88>
 800ab82:	4629      	mov	r1, r5
 800ab84:	4630      	mov	r0, r6
 800ab86:	f7ff ffbf 	bl	800ab08 <sbrk_aligned>
 800ab8a:	1c43      	adds	r3, r0, #1
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	d158      	bne.n	800ac42 <_malloc_r+0xf6>
 800ab90:	f8d8 4000 	ldr.w	r4, [r8]
 800ab94:	4627      	mov	r7, r4
 800ab96:	2f00      	cmp	r7, #0
 800ab98:	d143      	bne.n	800ac22 <_malloc_r+0xd6>
 800ab9a:	2c00      	cmp	r4, #0
 800ab9c:	d04b      	beq.n	800ac36 <_malloc_r+0xea>
 800ab9e:	6823      	ldr	r3, [r4, #0]
 800aba0:	4639      	mov	r1, r7
 800aba2:	4630      	mov	r0, r6
 800aba4:	eb04 0903 	add.w	r9, r4, r3
 800aba8:	f000 fb60 	bl	800b26c <_sbrk_r>
 800abac:	4581      	cmp	r9, r0
 800abae:	d142      	bne.n	800ac36 <_malloc_r+0xea>
 800abb0:	6821      	ldr	r1, [r4, #0]
 800abb2:	1a6d      	subs	r5, r5, r1
 800abb4:	4629      	mov	r1, r5
 800abb6:	4630      	mov	r0, r6
 800abb8:	f7ff ffa6 	bl	800ab08 <sbrk_aligned>
 800abbc:	3001      	adds	r0, #1
 800abbe:	d03a      	beq.n	800ac36 <_malloc_r+0xea>
 800abc0:	6823      	ldr	r3, [r4, #0]
 800abc2:	442b      	add	r3, r5
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	f8d8 3000 	ldr.w	r3, [r8]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	bb62      	cbnz	r2, 800ac28 <_malloc_r+0xdc>
 800abce:	f8c8 7000 	str.w	r7, [r8]
 800abd2:	e00f      	b.n	800abf4 <_malloc_r+0xa8>
 800abd4:	6822      	ldr	r2, [r4, #0]
 800abd6:	1b52      	subs	r2, r2, r5
 800abd8:	d420      	bmi.n	800ac1c <_malloc_r+0xd0>
 800abda:	2a0b      	cmp	r2, #11
 800abdc:	d917      	bls.n	800ac0e <_malloc_r+0xc2>
 800abde:	1961      	adds	r1, r4, r5
 800abe0:	42a3      	cmp	r3, r4
 800abe2:	6025      	str	r5, [r4, #0]
 800abe4:	bf18      	it	ne
 800abe6:	6059      	strne	r1, [r3, #4]
 800abe8:	6863      	ldr	r3, [r4, #4]
 800abea:	bf08      	it	eq
 800abec:	f8c8 1000 	streq.w	r1, [r8]
 800abf0:	5162      	str	r2, [r4, r5]
 800abf2:	604b      	str	r3, [r1, #4]
 800abf4:	4630      	mov	r0, r6
 800abf6:	f000 f82f 	bl	800ac58 <__malloc_unlock>
 800abfa:	f104 000b 	add.w	r0, r4, #11
 800abfe:	1d23      	adds	r3, r4, #4
 800ac00:	f020 0007 	bic.w	r0, r0, #7
 800ac04:	1ac2      	subs	r2, r0, r3
 800ac06:	bf1c      	itt	ne
 800ac08:	1a1b      	subne	r3, r3, r0
 800ac0a:	50a3      	strne	r3, [r4, r2]
 800ac0c:	e7af      	b.n	800ab6e <_malloc_r+0x22>
 800ac0e:	6862      	ldr	r2, [r4, #4]
 800ac10:	42a3      	cmp	r3, r4
 800ac12:	bf0c      	ite	eq
 800ac14:	f8c8 2000 	streq.w	r2, [r8]
 800ac18:	605a      	strne	r2, [r3, #4]
 800ac1a:	e7eb      	b.n	800abf4 <_malloc_r+0xa8>
 800ac1c:	4623      	mov	r3, r4
 800ac1e:	6864      	ldr	r4, [r4, #4]
 800ac20:	e7ae      	b.n	800ab80 <_malloc_r+0x34>
 800ac22:	463c      	mov	r4, r7
 800ac24:	687f      	ldr	r7, [r7, #4]
 800ac26:	e7b6      	b.n	800ab96 <_malloc_r+0x4a>
 800ac28:	461a      	mov	r2, r3
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	42a3      	cmp	r3, r4
 800ac2e:	d1fb      	bne.n	800ac28 <_malloc_r+0xdc>
 800ac30:	2300      	movs	r3, #0
 800ac32:	6053      	str	r3, [r2, #4]
 800ac34:	e7de      	b.n	800abf4 <_malloc_r+0xa8>
 800ac36:	230c      	movs	r3, #12
 800ac38:	6033      	str	r3, [r6, #0]
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	f000 f80c 	bl	800ac58 <__malloc_unlock>
 800ac40:	e794      	b.n	800ab6c <_malloc_r+0x20>
 800ac42:	6005      	str	r5, [r0, #0]
 800ac44:	e7d6      	b.n	800abf4 <_malloc_r+0xa8>
 800ac46:	bf00      	nop
 800ac48:	20008280 	.word	0x20008280

0800ac4c <__malloc_lock>:
 800ac4c:	4801      	ldr	r0, [pc, #4]	@ (800ac54 <__malloc_lock+0x8>)
 800ac4e:	f7ff bf01 	b.w	800aa54 <__retarget_lock_acquire_recursive>
 800ac52:	bf00      	nop
 800ac54:	20008278 	.word	0x20008278

0800ac58 <__malloc_unlock>:
 800ac58:	4801      	ldr	r0, [pc, #4]	@ (800ac60 <__malloc_unlock+0x8>)
 800ac5a:	f7ff befc 	b.w	800aa56 <__retarget_lock_release_recursive>
 800ac5e:	bf00      	nop
 800ac60:	20008278 	.word	0x20008278

0800ac64 <__ssputs_r>:
 800ac64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac68:	688e      	ldr	r6, [r1, #8]
 800ac6a:	461f      	mov	r7, r3
 800ac6c:	42be      	cmp	r6, r7
 800ac6e:	4682      	mov	sl, r0
 800ac70:	460c      	mov	r4, r1
 800ac72:	4690      	mov	r8, r2
 800ac74:	4633      	mov	r3, r6
 800ac76:	d853      	bhi.n	800ad20 <__ssputs_r+0xbc>
 800ac78:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800ac7c:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 800ac80:	d02b      	beq.n	800acda <__ssputs_r+0x76>
 800ac82:	6965      	ldr	r5, [r4, #20]
 800ac84:	6823      	ldr	r3, [r4, #0]
 800ac86:	6909      	ldr	r1, [r1, #16]
 800ac88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac8c:	eba3 0901 	sub.w	r9, r3, r1
 800ac90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac94:	1c7b      	adds	r3, r7, #1
 800ac96:	106d      	asrs	r5, r5, #1
 800ac98:	444b      	add	r3, r9
 800ac9a:	42ab      	cmp	r3, r5
 800ac9c:	462a      	mov	r2, r5
 800ac9e:	bf84      	itt	hi
 800aca0:	461d      	movhi	r5, r3
 800aca2:	462a      	movhi	r2, r5
 800aca4:	0543      	lsls	r3, r0, #21
 800aca6:	d527      	bpl.n	800acf8 <__ssputs_r+0x94>
 800aca8:	4611      	mov	r1, r2
 800acaa:	4650      	mov	r0, sl
 800acac:	f7ff ff4e 	bl	800ab4c <_malloc_r>
 800acb0:	4606      	mov	r6, r0
 800acb2:	b358      	cbz	r0, 800ad0c <__ssputs_r+0xa8>
 800acb4:	6921      	ldr	r1, [r4, #16]
 800acb6:	464a      	mov	r2, r9
 800acb8:	f7ff fece 	bl	800aa58 <memcpy>
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800acc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acc6:	81a3      	strh	r3, [r4, #12]
 800acc8:	6126      	str	r6, [r4, #16]
 800acca:	6165      	str	r5, [r4, #20]
 800accc:	444e      	add	r6, r9
 800acce:	eba5 0509 	sub.w	r5, r5, r9
 800acd2:	6026      	str	r6, [r4, #0]
 800acd4:	60a5      	str	r5, [r4, #8]
 800acd6:	463e      	mov	r6, r7
 800acd8:	463b      	mov	r3, r7
 800acda:	461f      	mov	r7, r3
 800acdc:	6820      	ldr	r0, [r4, #0]
 800acde:	463a      	mov	r2, r7
 800ace0:	4641      	mov	r1, r8
 800ace2:	f000 faa9 	bl	800b238 <memmove>
 800ace6:	68a3      	ldr	r3, [r4, #8]
 800ace8:	1b9b      	subs	r3, r3, r6
 800acea:	60a3      	str	r3, [r4, #8]
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	443b      	add	r3, r7
 800acf0:	6023      	str	r3, [r4, #0]
 800acf2:	2000      	movs	r0, #0
 800acf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acf8:	4650      	mov	r0, sl
 800acfa:	f000 fac7 	bl	800b28c <_realloc_r>
 800acfe:	4606      	mov	r6, r0
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d1e1      	bne.n	800acc8 <__ssputs_r+0x64>
 800ad04:	6921      	ldr	r1, [r4, #16]
 800ad06:	4650      	mov	r0, sl
 800ad08:	f7ff feb4 	bl	800aa74 <_free_r>
 800ad0c:	230c      	movs	r3, #12
 800ad0e:	f8ca 3000 	str.w	r3, [sl]
 800ad12:	89a3      	ldrh	r3, [r4, #12]
 800ad14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad18:	81a3      	strh	r3, [r4, #12]
 800ad1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1e:	e7e9      	b.n	800acf4 <__ssputs_r+0x90>
 800ad20:	463e      	mov	r6, r7
 800ad22:	e7db      	b.n	800acdc <__ssputs_r+0x78>

0800ad24 <_svfiprintf_r>:
 800ad24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad28:	4698      	mov	r8, r3
 800ad2a:	898b      	ldrh	r3, [r1, #12]
 800ad2c:	061b      	lsls	r3, r3, #24
 800ad2e:	b09d      	sub	sp, #116	@ 0x74
 800ad30:	4607      	mov	r7, r0
 800ad32:	460d      	mov	r5, r1
 800ad34:	4614      	mov	r4, r2
 800ad36:	d510      	bpl.n	800ad5a <_svfiprintf_r+0x36>
 800ad38:	690b      	ldr	r3, [r1, #16]
 800ad3a:	b973      	cbnz	r3, 800ad5a <_svfiprintf_r+0x36>
 800ad3c:	2140      	movs	r1, #64	@ 0x40
 800ad3e:	f7ff ff05 	bl	800ab4c <_malloc_r>
 800ad42:	6028      	str	r0, [r5, #0]
 800ad44:	6128      	str	r0, [r5, #16]
 800ad46:	b930      	cbnz	r0, 800ad56 <_svfiprintf_r+0x32>
 800ad48:	230c      	movs	r3, #12
 800ad4a:	603b      	str	r3, [r7, #0]
 800ad4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad50:	b01d      	add	sp, #116	@ 0x74
 800ad52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad56:	2340      	movs	r3, #64	@ 0x40
 800ad58:	616b      	str	r3, [r5, #20]
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad5e:	2320      	movs	r3, #32
 800ad60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad68:	2330      	movs	r3, #48	@ 0x30
 800ad6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af08 <_svfiprintf_r+0x1e4>
 800ad6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad72:	f04f 0901 	mov.w	r9, #1
 800ad76:	4623      	mov	r3, r4
 800ad78:	469a      	mov	sl, r3
 800ad7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad7e:	b10a      	cbz	r2, 800ad84 <_svfiprintf_r+0x60>
 800ad80:	2a25      	cmp	r2, #37	@ 0x25
 800ad82:	d1f9      	bne.n	800ad78 <_svfiprintf_r+0x54>
 800ad84:	ebba 0b04 	subs.w	fp, sl, r4
 800ad88:	d00b      	beq.n	800ada2 <_svfiprintf_r+0x7e>
 800ad8a:	465b      	mov	r3, fp
 800ad8c:	4622      	mov	r2, r4
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4638      	mov	r0, r7
 800ad92:	f7ff ff67 	bl	800ac64 <__ssputs_r>
 800ad96:	3001      	adds	r0, #1
 800ad98:	f000 80a7 	beq.w	800aeea <_svfiprintf_r+0x1c6>
 800ad9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad9e:	445a      	add	r2, fp
 800ada0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ada2:	f89a 3000 	ldrb.w	r3, [sl]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 809f 	beq.w	800aeea <_svfiprintf_r+0x1c6>
 800adac:	2300      	movs	r3, #0
 800adae:	f04f 32ff 	mov.w	r2, #4294967295
 800adb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adb6:	f10a 0a01 	add.w	sl, sl, #1
 800adba:	9304      	str	r3, [sp, #16]
 800adbc:	9307      	str	r3, [sp, #28]
 800adbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800adc2:	931a      	str	r3, [sp, #104]	@ 0x68
 800adc4:	4654      	mov	r4, sl
 800adc6:	2205      	movs	r2, #5
 800adc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adcc:	484e      	ldr	r0, [pc, #312]	@ (800af08 <_svfiprintf_r+0x1e4>)
 800adce:	f7f5 f9ef 	bl	80001b0 <memchr>
 800add2:	9a04      	ldr	r2, [sp, #16]
 800add4:	b9d8      	cbnz	r0, 800ae0e <_svfiprintf_r+0xea>
 800add6:	06d0      	lsls	r0, r2, #27
 800add8:	bf44      	itt	mi
 800adda:	2320      	movmi	r3, #32
 800addc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ade0:	0711      	lsls	r1, r2, #28
 800ade2:	bf44      	itt	mi
 800ade4:	232b      	movmi	r3, #43	@ 0x2b
 800ade6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adea:	f89a 3000 	ldrb.w	r3, [sl]
 800adee:	2b2a      	cmp	r3, #42	@ 0x2a
 800adf0:	d015      	beq.n	800ae1e <_svfiprintf_r+0xfa>
 800adf2:	9a07      	ldr	r2, [sp, #28]
 800adf4:	4654      	mov	r4, sl
 800adf6:	2000      	movs	r0, #0
 800adf8:	f04f 0c0a 	mov.w	ip, #10
 800adfc:	4621      	mov	r1, r4
 800adfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae02:	3b30      	subs	r3, #48	@ 0x30
 800ae04:	2b09      	cmp	r3, #9
 800ae06:	d94b      	bls.n	800aea0 <_svfiprintf_r+0x17c>
 800ae08:	b1b0      	cbz	r0, 800ae38 <_svfiprintf_r+0x114>
 800ae0a:	9207      	str	r2, [sp, #28]
 800ae0c:	e014      	b.n	800ae38 <_svfiprintf_r+0x114>
 800ae0e:	eba0 0308 	sub.w	r3, r0, r8
 800ae12:	fa09 f303 	lsl.w	r3, r9, r3
 800ae16:	4313      	orrs	r3, r2
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	46a2      	mov	sl, r4
 800ae1c:	e7d2      	b.n	800adc4 <_svfiprintf_r+0xa0>
 800ae1e:	9b03      	ldr	r3, [sp, #12]
 800ae20:	1d19      	adds	r1, r3, #4
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	9103      	str	r1, [sp, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	bfbb      	ittet	lt
 800ae2a:	425b      	neglt	r3, r3
 800ae2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae30:	9307      	strge	r3, [sp, #28]
 800ae32:	9307      	strlt	r3, [sp, #28]
 800ae34:	bfb8      	it	lt
 800ae36:	9204      	strlt	r2, [sp, #16]
 800ae38:	7823      	ldrb	r3, [r4, #0]
 800ae3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae3c:	d10a      	bne.n	800ae54 <_svfiprintf_r+0x130>
 800ae3e:	7863      	ldrb	r3, [r4, #1]
 800ae40:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae42:	d132      	bne.n	800aeaa <_svfiprintf_r+0x186>
 800ae44:	9b03      	ldr	r3, [sp, #12]
 800ae46:	1d1a      	adds	r2, r3, #4
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	9203      	str	r2, [sp, #12]
 800ae4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae50:	3402      	adds	r4, #2
 800ae52:	9305      	str	r3, [sp, #20]
 800ae54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af18 <_svfiprintf_r+0x1f4>
 800ae58:	7821      	ldrb	r1, [r4, #0]
 800ae5a:	2203      	movs	r2, #3
 800ae5c:	4650      	mov	r0, sl
 800ae5e:	f7f5 f9a7 	bl	80001b0 <memchr>
 800ae62:	b138      	cbz	r0, 800ae74 <_svfiprintf_r+0x150>
 800ae64:	9b04      	ldr	r3, [sp, #16]
 800ae66:	eba0 000a 	sub.w	r0, r0, sl
 800ae6a:	2240      	movs	r2, #64	@ 0x40
 800ae6c:	4082      	lsls	r2, r0
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	3401      	adds	r4, #1
 800ae72:	9304      	str	r3, [sp, #16]
 800ae74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae78:	4824      	ldr	r0, [pc, #144]	@ (800af0c <_svfiprintf_r+0x1e8>)
 800ae7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae7e:	2206      	movs	r2, #6
 800ae80:	f7f5 f996 	bl	80001b0 <memchr>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d036      	beq.n	800aef6 <_svfiprintf_r+0x1d2>
 800ae88:	4b21      	ldr	r3, [pc, #132]	@ (800af10 <_svfiprintf_r+0x1ec>)
 800ae8a:	bb1b      	cbnz	r3, 800aed4 <_svfiprintf_r+0x1b0>
 800ae8c:	9b03      	ldr	r3, [sp, #12]
 800ae8e:	3307      	adds	r3, #7
 800ae90:	f023 0307 	bic.w	r3, r3, #7
 800ae94:	3308      	adds	r3, #8
 800ae96:	9303      	str	r3, [sp, #12]
 800ae98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae9a:	4433      	add	r3, r6
 800ae9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae9e:	e76a      	b.n	800ad76 <_svfiprintf_r+0x52>
 800aea0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aea4:	460c      	mov	r4, r1
 800aea6:	2001      	movs	r0, #1
 800aea8:	e7a8      	b.n	800adfc <_svfiprintf_r+0xd8>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	3401      	adds	r4, #1
 800aeae:	9305      	str	r3, [sp, #20]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	f04f 0c0a 	mov.w	ip, #10
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aebc:	3a30      	subs	r2, #48	@ 0x30
 800aebe:	2a09      	cmp	r2, #9
 800aec0:	d903      	bls.n	800aeca <_svfiprintf_r+0x1a6>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d0c6      	beq.n	800ae54 <_svfiprintf_r+0x130>
 800aec6:	9105      	str	r1, [sp, #20]
 800aec8:	e7c4      	b.n	800ae54 <_svfiprintf_r+0x130>
 800aeca:	fb0c 2101 	mla	r1, ip, r1, r2
 800aece:	4604      	mov	r4, r0
 800aed0:	2301      	movs	r3, #1
 800aed2:	e7f0      	b.n	800aeb6 <_svfiprintf_r+0x192>
 800aed4:	ab03      	add	r3, sp, #12
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	462a      	mov	r2, r5
 800aeda:	4b0e      	ldr	r3, [pc, #56]	@ (800af14 <_svfiprintf_r+0x1f0>)
 800aedc:	a904      	add	r1, sp, #16
 800aede:	4638      	mov	r0, r7
 800aee0:	f3af 8000 	nop.w
 800aee4:	1c42      	adds	r2, r0, #1
 800aee6:	4606      	mov	r6, r0
 800aee8:	d1d6      	bne.n	800ae98 <_svfiprintf_r+0x174>
 800aeea:	89ab      	ldrh	r3, [r5, #12]
 800aeec:	065b      	lsls	r3, r3, #25
 800aeee:	f53f af2d 	bmi.w	800ad4c <_svfiprintf_r+0x28>
 800aef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aef4:	e72c      	b.n	800ad50 <_svfiprintf_r+0x2c>
 800aef6:	ab03      	add	r3, sp, #12
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	462a      	mov	r2, r5
 800aefc:	4b05      	ldr	r3, [pc, #20]	@ (800af14 <_svfiprintf_r+0x1f0>)
 800aefe:	a904      	add	r1, sp, #16
 800af00:	4638      	mov	r0, r7
 800af02:	f000 f879 	bl	800aff8 <_printf_i>
 800af06:	e7ed      	b.n	800aee4 <_svfiprintf_r+0x1c0>
 800af08:	0800c268 	.word	0x0800c268
 800af0c:	0800c272 	.word	0x0800c272
 800af10:	00000000 	.word	0x00000000
 800af14:	0800ac65 	.word	0x0800ac65
 800af18:	0800c26e 	.word	0x0800c26e

0800af1c <_printf_common>:
 800af1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af20:	4616      	mov	r6, r2
 800af22:	4698      	mov	r8, r3
 800af24:	688a      	ldr	r2, [r1, #8]
 800af26:	690b      	ldr	r3, [r1, #16]
 800af28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af2c:	4293      	cmp	r3, r2
 800af2e:	bfb8      	it	lt
 800af30:	4613      	movlt	r3, r2
 800af32:	6033      	str	r3, [r6, #0]
 800af34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af38:	4607      	mov	r7, r0
 800af3a:	460c      	mov	r4, r1
 800af3c:	b10a      	cbz	r2, 800af42 <_printf_common+0x26>
 800af3e:	3301      	adds	r3, #1
 800af40:	6033      	str	r3, [r6, #0]
 800af42:	6823      	ldr	r3, [r4, #0]
 800af44:	0699      	lsls	r1, r3, #26
 800af46:	bf42      	ittt	mi
 800af48:	6833      	ldrmi	r3, [r6, #0]
 800af4a:	3302      	addmi	r3, #2
 800af4c:	6033      	strmi	r3, [r6, #0]
 800af4e:	6825      	ldr	r5, [r4, #0]
 800af50:	f015 0506 	ands.w	r5, r5, #6
 800af54:	d106      	bne.n	800af64 <_printf_common+0x48>
 800af56:	f104 0a19 	add.w	sl, r4, #25
 800af5a:	68e3      	ldr	r3, [r4, #12]
 800af5c:	6832      	ldr	r2, [r6, #0]
 800af5e:	1a9b      	subs	r3, r3, r2
 800af60:	42ab      	cmp	r3, r5
 800af62:	dc26      	bgt.n	800afb2 <_printf_common+0x96>
 800af64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af68:	6822      	ldr	r2, [r4, #0]
 800af6a:	3b00      	subs	r3, #0
 800af6c:	bf18      	it	ne
 800af6e:	2301      	movne	r3, #1
 800af70:	0692      	lsls	r2, r2, #26
 800af72:	d42b      	bmi.n	800afcc <_printf_common+0xb0>
 800af74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af78:	4641      	mov	r1, r8
 800af7a:	4638      	mov	r0, r7
 800af7c:	47c8      	blx	r9
 800af7e:	3001      	adds	r0, #1
 800af80:	d01e      	beq.n	800afc0 <_printf_common+0xa4>
 800af82:	6823      	ldr	r3, [r4, #0]
 800af84:	6922      	ldr	r2, [r4, #16]
 800af86:	f003 0306 	and.w	r3, r3, #6
 800af8a:	2b04      	cmp	r3, #4
 800af8c:	bf02      	ittt	eq
 800af8e:	68e5      	ldreq	r5, [r4, #12]
 800af90:	6833      	ldreq	r3, [r6, #0]
 800af92:	1aed      	subeq	r5, r5, r3
 800af94:	68a3      	ldr	r3, [r4, #8]
 800af96:	bf0c      	ite	eq
 800af98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af9c:	2500      	movne	r5, #0
 800af9e:	4293      	cmp	r3, r2
 800afa0:	bfc4      	itt	gt
 800afa2:	1a9b      	subgt	r3, r3, r2
 800afa4:	18ed      	addgt	r5, r5, r3
 800afa6:	2600      	movs	r6, #0
 800afa8:	341a      	adds	r4, #26
 800afaa:	42b5      	cmp	r5, r6
 800afac:	d11a      	bne.n	800afe4 <_printf_common+0xc8>
 800afae:	2000      	movs	r0, #0
 800afb0:	e008      	b.n	800afc4 <_printf_common+0xa8>
 800afb2:	2301      	movs	r3, #1
 800afb4:	4652      	mov	r2, sl
 800afb6:	4641      	mov	r1, r8
 800afb8:	4638      	mov	r0, r7
 800afba:	47c8      	blx	r9
 800afbc:	3001      	adds	r0, #1
 800afbe:	d103      	bne.n	800afc8 <_printf_common+0xac>
 800afc0:	f04f 30ff 	mov.w	r0, #4294967295
 800afc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc8:	3501      	adds	r5, #1
 800afca:	e7c6      	b.n	800af5a <_printf_common+0x3e>
 800afcc:	18e1      	adds	r1, r4, r3
 800afce:	1c5a      	adds	r2, r3, #1
 800afd0:	2030      	movs	r0, #48	@ 0x30
 800afd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800afd6:	4422      	add	r2, r4
 800afd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800afdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800afe0:	3302      	adds	r3, #2
 800afe2:	e7c7      	b.n	800af74 <_printf_common+0x58>
 800afe4:	2301      	movs	r3, #1
 800afe6:	4622      	mov	r2, r4
 800afe8:	4641      	mov	r1, r8
 800afea:	4638      	mov	r0, r7
 800afec:	47c8      	blx	r9
 800afee:	3001      	adds	r0, #1
 800aff0:	d0e6      	beq.n	800afc0 <_printf_common+0xa4>
 800aff2:	3601      	adds	r6, #1
 800aff4:	e7d9      	b.n	800afaa <_printf_common+0x8e>
	...

0800aff8 <_printf_i>:
 800aff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800affc:	7e0f      	ldrb	r7, [r1, #24]
 800affe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b000:	2f78      	cmp	r7, #120	@ 0x78
 800b002:	4691      	mov	r9, r2
 800b004:	4680      	mov	r8, r0
 800b006:	460c      	mov	r4, r1
 800b008:	469a      	mov	sl, r3
 800b00a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b00e:	d807      	bhi.n	800b020 <_printf_i+0x28>
 800b010:	2f62      	cmp	r7, #98	@ 0x62
 800b012:	d80a      	bhi.n	800b02a <_printf_i+0x32>
 800b014:	2f00      	cmp	r7, #0
 800b016:	f000 80d2 	beq.w	800b1be <_printf_i+0x1c6>
 800b01a:	2f58      	cmp	r7, #88	@ 0x58
 800b01c:	f000 80b7 	beq.w	800b18e <_printf_i+0x196>
 800b020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b024:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b028:	e03a      	b.n	800b0a0 <_printf_i+0xa8>
 800b02a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b02e:	2b15      	cmp	r3, #21
 800b030:	d8f6      	bhi.n	800b020 <_printf_i+0x28>
 800b032:	a101      	add	r1, pc, #4	@ (adr r1, 800b038 <_printf_i+0x40>)
 800b034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b038:	0800b091 	.word	0x0800b091
 800b03c:	0800b0a5 	.word	0x0800b0a5
 800b040:	0800b021 	.word	0x0800b021
 800b044:	0800b021 	.word	0x0800b021
 800b048:	0800b021 	.word	0x0800b021
 800b04c:	0800b021 	.word	0x0800b021
 800b050:	0800b0a5 	.word	0x0800b0a5
 800b054:	0800b021 	.word	0x0800b021
 800b058:	0800b021 	.word	0x0800b021
 800b05c:	0800b021 	.word	0x0800b021
 800b060:	0800b021 	.word	0x0800b021
 800b064:	0800b1a5 	.word	0x0800b1a5
 800b068:	0800b0cf 	.word	0x0800b0cf
 800b06c:	0800b15b 	.word	0x0800b15b
 800b070:	0800b021 	.word	0x0800b021
 800b074:	0800b021 	.word	0x0800b021
 800b078:	0800b1c7 	.word	0x0800b1c7
 800b07c:	0800b021 	.word	0x0800b021
 800b080:	0800b0cf 	.word	0x0800b0cf
 800b084:	0800b021 	.word	0x0800b021
 800b088:	0800b021 	.word	0x0800b021
 800b08c:	0800b163 	.word	0x0800b163
 800b090:	6833      	ldr	r3, [r6, #0]
 800b092:	1d1a      	adds	r2, r3, #4
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	6032      	str	r2, [r6, #0]
 800b098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b09c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e09d      	b.n	800b1e0 <_printf_i+0x1e8>
 800b0a4:	6833      	ldr	r3, [r6, #0]
 800b0a6:	6820      	ldr	r0, [r4, #0]
 800b0a8:	1d19      	adds	r1, r3, #4
 800b0aa:	6031      	str	r1, [r6, #0]
 800b0ac:	0606      	lsls	r6, r0, #24
 800b0ae:	d501      	bpl.n	800b0b4 <_printf_i+0xbc>
 800b0b0:	681d      	ldr	r5, [r3, #0]
 800b0b2:	e003      	b.n	800b0bc <_printf_i+0xc4>
 800b0b4:	0645      	lsls	r5, r0, #25
 800b0b6:	d5fb      	bpl.n	800b0b0 <_printf_i+0xb8>
 800b0b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b0bc:	2d00      	cmp	r5, #0
 800b0be:	da03      	bge.n	800b0c8 <_printf_i+0xd0>
 800b0c0:	232d      	movs	r3, #45	@ 0x2d
 800b0c2:	426d      	negs	r5, r5
 800b0c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0c8:	4859      	ldr	r0, [pc, #356]	@ (800b230 <_printf_i+0x238>)
 800b0ca:	230a      	movs	r3, #10
 800b0cc:	e010      	b.n	800b0f0 <_printf_i+0xf8>
 800b0ce:	6821      	ldr	r1, [r4, #0]
 800b0d0:	6833      	ldr	r3, [r6, #0]
 800b0d2:	0608      	lsls	r0, r1, #24
 800b0d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b0d8:	d402      	bmi.n	800b0e0 <_printf_i+0xe8>
 800b0da:	0649      	lsls	r1, r1, #25
 800b0dc:	bf48      	it	mi
 800b0de:	b2ad      	uxthmi	r5, r5
 800b0e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b0e2:	4853      	ldr	r0, [pc, #332]	@ (800b230 <_printf_i+0x238>)
 800b0e4:	6033      	str	r3, [r6, #0]
 800b0e6:	d159      	bne.n	800b19c <_printf_i+0x1a4>
 800b0e8:	2308      	movs	r3, #8
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b0f0:	6866      	ldr	r6, [r4, #4]
 800b0f2:	60a6      	str	r6, [r4, #8]
 800b0f4:	2e00      	cmp	r6, #0
 800b0f6:	db05      	blt.n	800b104 <_printf_i+0x10c>
 800b0f8:	6821      	ldr	r1, [r4, #0]
 800b0fa:	432e      	orrs	r6, r5
 800b0fc:	f021 0104 	bic.w	r1, r1, #4
 800b100:	6021      	str	r1, [r4, #0]
 800b102:	d04d      	beq.n	800b1a0 <_printf_i+0x1a8>
 800b104:	4616      	mov	r6, r2
 800b106:	fbb5 f1f3 	udiv	r1, r5, r3
 800b10a:	fb03 5711 	mls	r7, r3, r1, r5
 800b10e:	5dc7      	ldrb	r7, [r0, r7]
 800b110:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b114:	462f      	mov	r7, r5
 800b116:	42bb      	cmp	r3, r7
 800b118:	460d      	mov	r5, r1
 800b11a:	d9f4      	bls.n	800b106 <_printf_i+0x10e>
 800b11c:	2b08      	cmp	r3, #8
 800b11e:	d10b      	bne.n	800b138 <_printf_i+0x140>
 800b120:	6823      	ldr	r3, [r4, #0]
 800b122:	07df      	lsls	r7, r3, #31
 800b124:	d508      	bpl.n	800b138 <_printf_i+0x140>
 800b126:	6923      	ldr	r3, [r4, #16]
 800b128:	6861      	ldr	r1, [r4, #4]
 800b12a:	4299      	cmp	r1, r3
 800b12c:	bfde      	ittt	le
 800b12e:	2330      	movle	r3, #48	@ 0x30
 800b130:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b134:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b138:	1b92      	subs	r2, r2, r6
 800b13a:	6122      	str	r2, [r4, #16]
 800b13c:	f8cd a000 	str.w	sl, [sp]
 800b140:	464b      	mov	r3, r9
 800b142:	aa03      	add	r2, sp, #12
 800b144:	4621      	mov	r1, r4
 800b146:	4640      	mov	r0, r8
 800b148:	f7ff fee8 	bl	800af1c <_printf_common>
 800b14c:	3001      	adds	r0, #1
 800b14e:	d14c      	bne.n	800b1ea <_printf_i+0x1f2>
 800b150:	f04f 30ff 	mov.w	r0, #4294967295
 800b154:	b004      	add	sp, #16
 800b156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	f043 0320 	orr.w	r3, r3, #32
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	4834      	ldr	r0, [pc, #208]	@ (800b234 <_printf_i+0x23c>)
 800b164:	2778      	movs	r7, #120	@ 0x78
 800b166:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b16a:	6823      	ldr	r3, [r4, #0]
 800b16c:	6831      	ldr	r1, [r6, #0]
 800b16e:	061f      	lsls	r7, r3, #24
 800b170:	f851 5b04 	ldr.w	r5, [r1], #4
 800b174:	d402      	bmi.n	800b17c <_printf_i+0x184>
 800b176:	065f      	lsls	r7, r3, #25
 800b178:	bf48      	it	mi
 800b17a:	b2ad      	uxthmi	r5, r5
 800b17c:	6031      	str	r1, [r6, #0]
 800b17e:	07d9      	lsls	r1, r3, #31
 800b180:	bf44      	itt	mi
 800b182:	f043 0320 	orrmi.w	r3, r3, #32
 800b186:	6023      	strmi	r3, [r4, #0]
 800b188:	b11d      	cbz	r5, 800b192 <_printf_i+0x19a>
 800b18a:	2310      	movs	r3, #16
 800b18c:	e7ad      	b.n	800b0ea <_printf_i+0xf2>
 800b18e:	4828      	ldr	r0, [pc, #160]	@ (800b230 <_printf_i+0x238>)
 800b190:	e7e9      	b.n	800b166 <_printf_i+0x16e>
 800b192:	6823      	ldr	r3, [r4, #0]
 800b194:	f023 0320 	bic.w	r3, r3, #32
 800b198:	6023      	str	r3, [r4, #0]
 800b19a:	e7f6      	b.n	800b18a <_printf_i+0x192>
 800b19c:	230a      	movs	r3, #10
 800b19e:	e7a4      	b.n	800b0ea <_printf_i+0xf2>
 800b1a0:	4616      	mov	r6, r2
 800b1a2:	e7bb      	b.n	800b11c <_printf_i+0x124>
 800b1a4:	6833      	ldr	r3, [r6, #0]
 800b1a6:	6825      	ldr	r5, [r4, #0]
 800b1a8:	6961      	ldr	r1, [r4, #20]
 800b1aa:	1d18      	adds	r0, r3, #4
 800b1ac:	6030      	str	r0, [r6, #0]
 800b1ae:	062e      	lsls	r6, r5, #24
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	d501      	bpl.n	800b1b8 <_printf_i+0x1c0>
 800b1b4:	6019      	str	r1, [r3, #0]
 800b1b6:	e002      	b.n	800b1be <_printf_i+0x1c6>
 800b1b8:	0668      	lsls	r0, r5, #25
 800b1ba:	d5fb      	bpl.n	800b1b4 <_printf_i+0x1bc>
 800b1bc:	8019      	strh	r1, [r3, #0]
 800b1be:	2300      	movs	r3, #0
 800b1c0:	6123      	str	r3, [r4, #16]
 800b1c2:	4616      	mov	r6, r2
 800b1c4:	e7ba      	b.n	800b13c <_printf_i+0x144>
 800b1c6:	6833      	ldr	r3, [r6, #0]
 800b1c8:	1d1a      	adds	r2, r3, #4
 800b1ca:	6032      	str	r2, [r6, #0]
 800b1cc:	681e      	ldr	r6, [r3, #0]
 800b1ce:	6862      	ldr	r2, [r4, #4]
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	f7f4 ffec 	bl	80001b0 <memchr>
 800b1d8:	b108      	cbz	r0, 800b1de <_printf_i+0x1e6>
 800b1da:	1b80      	subs	r0, r0, r6
 800b1dc:	6060      	str	r0, [r4, #4]
 800b1de:	6863      	ldr	r3, [r4, #4]
 800b1e0:	6123      	str	r3, [r4, #16]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1e8:	e7a8      	b.n	800b13c <_printf_i+0x144>
 800b1ea:	6923      	ldr	r3, [r4, #16]
 800b1ec:	4632      	mov	r2, r6
 800b1ee:	4649      	mov	r1, r9
 800b1f0:	4640      	mov	r0, r8
 800b1f2:	47d0      	blx	sl
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	d0ab      	beq.n	800b150 <_printf_i+0x158>
 800b1f8:	6823      	ldr	r3, [r4, #0]
 800b1fa:	079b      	lsls	r3, r3, #30
 800b1fc:	d413      	bmi.n	800b226 <_printf_i+0x22e>
 800b1fe:	68e0      	ldr	r0, [r4, #12]
 800b200:	9b03      	ldr	r3, [sp, #12]
 800b202:	4298      	cmp	r0, r3
 800b204:	bfb8      	it	lt
 800b206:	4618      	movlt	r0, r3
 800b208:	e7a4      	b.n	800b154 <_printf_i+0x15c>
 800b20a:	2301      	movs	r3, #1
 800b20c:	4632      	mov	r2, r6
 800b20e:	4649      	mov	r1, r9
 800b210:	4640      	mov	r0, r8
 800b212:	47d0      	blx	sl
 800b214:	3001      	adds	r0, #1
 800b216:	d09b      	beq.n	800b150 <_printf_i+0x158>
 800b218:	3501      	adds	r5, #1
 800b21a:	68e3      	ldr	r3, [r4, #12]
 800b21c:	9903      	ldr	r1, [sp, #12]
 800b21e:	1a5b      	subs	r3, r3, r1
 800b220:	42ab      	cmp	r3, r5
 800b222:	dcf2      	bgt.n	800b20a <_printf_i+0x212>
 800b224:	e7eb      	b.n	800b1fe <_printf_i+0x206>
 800b226:	2500      	movs	r5, #0
 800b228:	f104 0619 	add.w	r6, r4, #25
 800b22c:	e7f5      	b.n	800b21a <_printf_i+0x222>
 800b22e:	bf00      	nop
 800b230:	0800c279 	.word	0x0800c279
 800b234:	0800c28a 	.word	0x0800c28a

0800b238 <memmove>:
 800b238:	4288      	cmp	r0, r1
 800b23a:	b510      	push	{r4, lr}
 800b23c:	eb01 0402 	add.w	r4, r1, r2
 800b240:	d902      	bls.n	800b248 <memmove+0x10>
 800b242:	4284      	cmp	r4, r0
 800b244:	4623      	mov	r3, r4
 800b246:	d807      	bhi.n	800b258 <memmove+0x20>
 800b248:	1e43      	subs	r3, r0, #1
 800b24a:	42a1      	cmp	r1, r4
 800b24c:	d007      	beq.n	800b25e <memmove+0x26>
 800b24e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b252:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b256:	e7f8      	b.n	800b24a <memmove+0x12>
 800b258:	4402      	add	r2, r0
 800b25a:	4282      	cmp	r2, r0
 800b25c:	d100      	bne.n	800b260 <memmove+0x28>
 800b25e:	bd10      	pop	{r4, pc}
 800b260:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b264:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800b268:	e7f7      	b.n	800b25a <memmove+0x22>
	...

0800b26c <_sbrk_r>:
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	4d06      	ldr	r5, [pc, #24]	@ (800b288 <_sbrk_r+0x1c>)
 800b270:	2300      	movs	r3, #0
 800b272:	4604      	mov	r4, r0
 800b274:	4608      	mov	r0, r1
 800b276:	602b      	str	r3, [r5, #0]
 800b278:	f7fc fa9a 	bl	80077b0 <_sbrk>
 800b27c:	1c43      	adds	r3, r0, #1
 800b27e:	d102      	bne.n	800b286 <_sbrk_r+0x1a>
 800b280:	682b      	ldr	r3, [r5, #0]
 800b282:	b103      	cbz	r3, 800b286 <_sbrk_r+0x1a>
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	bd38      	pop	{r3, r4, r5, pc}
 800b288:	20008274 	.word	0x20008274

0800b28c <_realloc_r>:
 800b28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b290:	4607      	mov	r7, r0
 800b292:	4614      	mov	r4, r2
 800b294:	460d      	mov	r5, r1
 800b296:	b921      	cbnz	r1, 800b2a2 <_realloc_r+0x16>
 800b298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b29c:	4611      	mov	r1, r2
 800b29e:	f7ff bc55 	b.w	800ab4c <_malloc_r>
 800b2a2:	b92a      	cbnz	r2, 800b2b0 <_realloc_r+0x24>
 800b2a4:	f7ff fbe6 	bl	800aa74 <_free_r>
 800b2a8:	4625      	mov	r5, r4
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b0:	f000 f81a 	bl	800b2e8 <_malloc_usable_size_r>
 800b2b4:	4284      	cmp	r4, r0
 800b2b6:	4606      	mov	r6, r0
 800b2b8:	d802      	bhi.n	800b2c0 <_realloc_r+0x34>
 800b2ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2be:	d8f4      	bhi.n	800b2aa <_realloc_r+0x1e>
 800b2c0:	4621      	mov	r1, r4
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	f7ff fc42 	bl	800ab4c <_malloc_r>
 800b2c8:	4680      	mov	r8, r0
 800b2ca:	b908      	cbnz	r0, 800b2d0 <_realloc_r+0x44>
 800b2cc:	4645      	mov	r5, r8
 800b2ce:	e7ec      	b.n	800b2aa <_realloc_r+0x1e>
 800b2d0:	42b4      	cmp	r4, r6
 800b2d2:	4622      	mov	r2, r4
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	bf28      	it	cs
 800b2d8:	4632      	movcs	r2, r6
 800b2da:	f7ff fbbd 	bl	800aa58 <memcpy>
 800b2de:	4629      	mov	r1, r5
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	f7ff fbc7 	bl	800aa74 <_free_r>
 800b2e6:	e7f1      	b.n	800b2cc <_realloc_r+0x40>

0800b2e8 <_malloc_usable_size_r>:
 800b2e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2ec:	1f18      	subs	r0, r3, #4
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	bfbc      	itt	lt
 800b2f2:	580b      	ldrlt	r3, [r1, r0]
 800b2f4:	18c0      	addlt	r0, r0, r3
 800b2f6:	4770      	bx	lr

0800b2f8 <logf>:
 800b2f8:	b508      	push	{r3, lr}
 800b2fa:	ed2d 8b02 	vpush	{d8}
 800b2fe:	eeb0 8a40 	vmov.f32	s16, s0
 800b302:	f000 f82f 	bl	800b364 <__ieee754_logf>
 800b306:	eeb4 8a48 	vcmp.f32	s16, s16
 800b30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b30e:	d60f      	bvs.n	800b330 <logf+0x38>
 800b310:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b318:	dc0a      	bgt.n	800b330 <logf+0x38>
 800b31a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b322:	d108      	bne.n	800b336 <logf+0x3e>
 800b324:	f7ff fb6c 	bl	800aa00 <__errno>
 800b328:	2322      	movs	r3, #34	@ 0x22
 800b32a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800b350 <logf+0x58>
 800b32e:	6003      	str	r3, [r0, #0]
 800b330:	ecbd 8b02 	vpop	{d8}
 800b334:	bd08      	pop	{r3, pc}
 800b336:	f7ff fb63 	bl	800aa00 <__errno>
 800b33a:	ecbd 8b02 	vpop	{d8}
 800b33e:	4603      	mov	r3, r0
 800b340:	2221      	movs	r2, #33	@ 0x21
 800b342:	601a      	str	r2, [r3, #0]
 800b344:	4803      	ldr	r0, [pc, #12]	@ (800b354 <logf+0x5c>)
 800b346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b34a:	f000 b805 	b.w	800b358 <nanf>
 800b34e:	bf00      	nop
 800b350:	ff800000 	.word	0xff800000
 800b354:	0800b9c8 	.word	0x0800b9c8

0800b358 <nanf>:
 800b358:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b360 <nanf+0x8>
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	7fc00000 	.word	0x7fc00000

0800b364 <__ieee754_logf>:
 800b364:	ee10 2a10 	vmov	r2, s0
 800b368:	f032 4300 	bics.w	r3, r2, #2147483648	@ 0x80000000
 800b36c:	d02f      	beq.n	800b3ce <__ieee754_logf+0x6a>
 800b36e:	2a00      	cmp	r2, #0
 800b370:	4613      	mov	r3, r2
 800b372:	db33      	blt.n	800b3dc <__ieee754_logf+0x78>
 800b374:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b378:	da40      	bge.n	800b3fc <__ieee754_logf+0x98>
 800b37a:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800b37e:	db34      	blt.n	800b3ea <__ieee754_logf+0x86>
 800b380:	f04f 0c00 	mov.w	ip, #0
 800b384:	4864      	ldr	r0, [pc, #400]	@ (800b518 <__ieee754_logf+0x1b4>)
 800b386:	f3c3 0116 	ubfx	r1, r3, #0, #23
 800b38a:	4408      	add	r0, r1
 800b38c:	f400 0200 	and.w	r2, r0, #8388608	@ 0x800000
 800b390:	f082 527e 	eor.w	r2, r2, #1065353216	@ 0x3f800000
 800b394:	430a      	orrs	r2, r1
 800b396:	15db      	asrs	r3, r3, #23
 800b398:	ee00 2a10 	vmov	s0, r2
 800b39c:	3b7f      	subs	r3, #127	@ 0x7f
 800b39e:	4a5f      	ldr	r2, [pc, #380]	@ (800b51c <__ieee754_logf+0x1b8>)
 800b3a0:	4463      	add	r3, ip
 800b3a2:	f101 0c0f 	add.w	ip, r1, #15
 800b3a6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b3aa:	ea0c 0202 	and.w	r2, ip, r2
 800b3ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b3b2:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800b3b6:	bb22      	cbnz	r2, 800b402 <__ieee754_logf+0x9e>
 800b3b8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3c0:	d162      	bne.n	800b488 <__ieee754_logf+0x124>
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f040 8090 	bne.w	800b4e8 <__ieee754_logf+0x184>
 800b3c8:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 800b520 <__ieee754_logf+0x1bc>
 800b3cc:	4770      	bx	lr
 800b3ce:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800b524 <__ieee754_logf+0x1c0>
 800b3d2:	eddf 7a53 	vldr	s15, [pc, #332]	@ 800b520 <__ieee754_logf+0x1bc>
 800b3d6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b3da:	4770      	bx	lr
 800b3dc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b3e0:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800b520 <__ieee754_logf+0x1bc>
 800b3e4:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800b3e8:	4770      	bx	lr
 800b3ea:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 800b528 <__ieee754_logf+0x1c4>
 800b3ee:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b3f2:	f06f 0c18 	mvn.w	ip, #24
 800b3f6:	ee17 3a90 	vmov	r3, s15
 800b3fa:	e7c3      	b.n	800b384 <__ieee754_logf+0x20>
 800b3fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b400:	4770      	bx	lr
 800b402:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800b406:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b40a:	ee07 3a10 	vmov	s14, r3
 800b40e:	ee80 4a27 	vdiv.f32	s8, s0, s15
 800b412:	4846      	ldr	r0, [pc, #280]	@ (800b52c <__ieee754_logf+0x1c8>)
 800b414:	f5c1 1257 	rsb	r2, r1, #3522560	@ 0x35c000
 800b418:	4408      	add	r0, r1
 800b41a:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800b41e:	4302      	orrs	r2, r0
 800b420:	2a00      	cmp	r2, #0
 800b422:	ed9f 3a43 	vldr	s6, [pc, #268]	@ 800b530 <__ieee754_logf+0x1cc>
 800b426:	eddf 4a43 	vldr	s9, [pc, #268]	@ 800b534 <__ieee754_logf+0x1d0>
 800b42a:	eddf 5a43 	vldr	s11, [pc, #268]	@ 800b538 <__ieee754_logf+0x1d4>
 800b42e:	eddf 3a43 	vldr	s7, [pc, #268]	@ 800b53c <__ieee754_logf+0x1d8>
 800b432:	ed9f 5a43 	vldr	s10, [pc, #268]	@ 800b540 <__ieee754_logf+0x1dc>
 800b436:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800b544 <__ieee754_logf+0x1e0>
 800b43a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800b548 <__ieee754_logf+0x1e4>
 800b43e:	ee24 6a04 	vmul.f32	s12, s8, s8
 800b442:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 800b446:	ee26 7a06 	vmul.f32	s14, s12, s12
 800b44a:	eee7 4a03 	vfma.f32	s9, s14, s6
 800b44e:	eea7 5a23 	vfma.f32	s10, s14, s7
 800b452:	eee4 5a87 	vfma.f32	s11, s9, s14
 800b456:	eee5 6a07 	vfma.f32	s13, s10, s14
 800b45a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b45e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b462:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b466:	dd2a      	ble.n	800b4be <__ieee754_logf+0x15a>
 800b468:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b46c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b470:	ee27 7a00 	vmul.f32	s14, s14, s0
 800b474:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b478:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b47c:	bb3b      	cbnz	r3, 800b4ce <__ieee754_logf+0x16a>
 800b47e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b482:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b486:	4770      	bx	lr
 800b488:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800b54c <__ieee754_logf+0x1e8>
 800b48c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b490:	eee0 7a47 	vfms.f32	s15, s0, s14
 800b494:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d0f0      	beq.n	800b482 <__ieee754_logf+0x11e>
 800b4a0:	ee07 3a90 	vmov	s15, r3
 800b4a4:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 800b550 <__ieee754_logf+0x1ec>
 800b4a8:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b554 <__ieee754_logf+0x1f0>
 800b4ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4b0:	eea7 7ac6 	vfms.f32	s14, s15, s12
 800b4b4:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b4b8:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 800b4bc:	4770      	bx	lr
 800b4be:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b4c2:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b4c6:	b9e3      	cbnz	r3, 800b502 <__ieee754_logf+0x19e>
 800b4c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b4cc:	4770      	bx	lr
 800b4ce:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 800b550 <__ieee754_logf+0x1ec>
 800b4d2:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800b554 <__ieee754_logf+0x1f0>
 800b4d6:	eee2 7a86 	vfma.f32	s15, s5, s12
 800b4da:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b4de:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b4e2:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 800b4e6:	4770      	bx	lr
 800b4e8:	ee07 3a90 	vmov	s15, r3
 800b4ec:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800b550 <__ieee754_logf+0x1ec>
 800b4f0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800b554 <__ieee754_logf+0x1f0>
 800b4f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4f8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b4fc:	eea7 0a87 	vfma.f32	s0, s15, s14
 800b500:	4770      	bx	lr
 800b502:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800b550 <__ieee754_logf+0x1ec>
 800b506:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800b554 <__ieee754_logf+0x1f0>
 800b50a:	eee2 7ae6 	vfms.f32	s15, s5, s13
 800b50e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b512:	ee92 0a87 	vfnms.f32	s0, s5, s14
 800b516:	4770      	bx	lr
 800b518:	004afb20 	.word	0x004afb20
 800b51c:	007ffff0 	.word	0x007ffff0
 800b520:	00000000 	.word	0x00000000
 800b524:	cc000000 	.word	0xcc000000
 800b528:	4c000000 	.word	0x4c000000
 800b52c:	ffcf5c30 	.word	0xffcf5c30
 800b530:	3e178897 	.word	0x3e178897
 800b534:	3e3a3325 	.word	0x3e3a3325
 800b538:	3e924925 	.word	0x3e924925
 800b53c:	3e1cd04f 	.word	0x3e1cd04f
 800b540:	3e638e29 	.word	0x3e638e29
 800b544:	3f2aaaab 	.word	0x3f2aaaab
 800b548:	3ecccccd 	.word	0x3ecccccd
 800b54c:	3eaaaaab 	.word	0x3eaaaaab
 800b550:	3717f7d1 	.word	0x3717f7d1
 800b554:	3f317180 	.word	0x3f317180

0800b558 <__udivmoddi4>:
 800b558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b55c:	9d08      	ldr	r5, [sp, #32]
 800b55e:	460f      	mov	r7, r1
 800b560:	4604      	mov	r4, r0
 800b562:	468c      	mov	ip, r1
 800b564:	2b00      	cmp	r3, #0
 800b566:	d148      	bne.n	800b5fa <__udivmoddi4+0xa2>
 800b568:	428a      	cmp	r2, r1
 800b56a:	4616      	mov	r6, r2
 800b56c:	d961      	bls.n	800b632 <__udivmoddi4+0xda>
 800b56e:	fab2 f382 	clz	r3, r2
 800b572:	b14b      	cbz	r3, 800b588 <__udivmoddi4+0x30>
 800b574:	f1c3 0220 	rsb	r2, r3, #32
 800b578:	fa01 fc03 	lsl.w	ip, r1, r3
 800b57c:	fa20 f202 	lsr.w	r2, r0, r2
 800b580:	409e      	lsls	r6, r3
 800b582:	ea42 0c0c 	orr.w	ip, r2, ip
 800b586:	409c      	lsls	r4, r3
 800b588:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800b58c:	b2b7      	uxth	r7, r6
 800b58e:	fbbc f1fe 	udiv	r1, ip, lr
 800b592:	0c22      	lsrs	r2, r4, #16
 800b594:	fb0e cc11 	mls	ip, lr, r1, ip
 800b598:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800b59c:	fb01 f007 	mul.w	r0, r1, r7
 800b5a0:	4290      	cmp	r0, r2
 800b5a2:	d909      	bls.n	800b5b8 <__udivmoddi4+0x60>
 800b5a4:	18b2      	adds	r2, r6, r2
 800b5a6:	f101 3cff 	add.w	ip, r1, #4294967295
 800b5aa:	f080 80ee 	bcs.w	800b78a <__udivmoddi4+0x232>
 800b5ae:	4290      	cmp	r0, r2
 800b5b0:	f240 80eb 	bls.w	800b78a <__udivmoddi4+0x232>
 800b5b4:	3902      	subs	r1, #2
 800b5b6:	4432      	add	r2, r6
 800b5b8:	1a12      	subs	r2, r2, r0
 800b5ba:	b2a4      	uxth	r4, r4
 800b5bc:	fbb2 f0fe 	udiv	r0, r2, lr
 800b5c0:	fb0e 2210 	mls	r2, lr, r0, r2
 800b5c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b5c8:	fb00 f707 	mul.w	r7, r0, r7
 800b5cc:	42a7      	cmp	r7, r4
 800b5ce:	d909      	bls.n	800b5e4 <__udivmoddi4+0x8c>
 800b5d0:	1934      	adds	r4, r6, r4
 800b5d2:	f100 32ff 	add.w	r2, r0, #4294967295
 800b5d6:	f080 80da 	bcs.w	800b78e <__udivmoddi4+0x236>
 800b5da:	42a7      	cmp	r7, r4
 800b5dc:	f240 80d7 	bls.w	800b78e <__udivmoddi4+0x236>
 800b5e0:	4434      	add	r4, r6
 800b5e2:	3802      	subs	r0, #2
 800b5e4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800b5e8:	1be4      	subs	r4, r4, r7
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	b11d      	cbz	r5, 800b5f6 <__udivmoddi4+0x9e>
 800b5ee:	40dc      	lsrs	r4, r3
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	e9c5 4300 	strd	r4, r3, [r5]
 800b5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5fa:	428b      	cmp	r3, r1
 800b5fc:	d906      	bls.n	800b60c <__udivmoddi4+0xb4>
 800b5fe:	b10d      	cbz	r5, 800b604 <__udivmoddi4+0xac>
 800b600:	e9c5 0100 	strd	r0, r1, [r5]
 800b604:	2100      	movs	r1, #0
 800b606:	4608      	mov	r0, r1
 800b608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b60c:	fab3 f183 	clz	r1, r3
 800b610:	2900      	cmp	r1, #0
 800b612:	d148      	bne.n	800b6a6 <__udivmoddi4+0x14e>
 800b614:	42bb      	cmp	r3, r7
 800b616:	d302      	bcc.n	800b61e <__udivmoddi4+0xc6>
 800b618:	4282      	cmp	r2, r0
 800b61a:	f200 8107 	bhi.w	800b82c <__udivmoddi4+0x2d4>
 800b61e:	1a84      	subs	r4, r0, r2
 800b620:	eb67 0203 	sbc.w	r2, r7, r3
 800b624:	2001      	movs	r0, #1
 800b626:	4694      	mov	ip, r2
 800b628:	2d00      	cmp	r5, #0
 800b62a:	d0e4      	beq.n	800b5f6 <__udivmoddi4+0x9e>
 800b62c:	e9c5 4c00 	strd	r4, ip, [r5]
 800b630:	e7e1      	b.n	800b5f6 <__udivmoddi4+0x9e>
 800b632:	2a00      	cmp	r2, #0
 800b634:	f000 8092 	beq.w	800b75c <__udivmoddi4+0x204>
 800b638:	fab2 f382 	clz	r3, r2
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f040 80a8 	bne.w	800b792 <__udivmoddi4+0x23a>
 800b642:	1a8a      	subs	r2, r1, r2
 800b644:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800b648:	fa1f fc86 	uxth.w	ip, r6
 800b64c:	2101      	movs	r1, #1
 800b64e:	0c20      	lsrs	r0, r4, #16
 800b650:	fbb2 f7fe 	udiv	r7, r2, lr
 800b654:	fb0e 2217 	mls	r2, lr, r7, r2
 800b658:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800b65c:	fb0c f007 	mul.w	r0, ip, r7
 800b660:	4290      	cmp	r0, r2
 800b662:	d907      	bls.n	800b674 <__udivmoddi4+0x11c>
 800b664:	18b2      	adds	r2, r6, r2
 800b666:	f107 38ff 	add.w	r8, r7, #4294967295
 800b66a:	d202      	bcs.n	800b672 <__udivmoddi4+0x11a>
 800b66c:	4290      	cmp	r0, r2
 800b66e:	f200 80e2 	bhi.w	800b836 <__udivmoddi4+0x2de>
 800b672:	4647      	mov	r7, r8
 800b674:	1a12      	subs	r2, r2, r0
 800b676:	b2a4      	uxth	r4, r4
 800b678:	fbb2 f0fe 	udiv	r0, r2, lr
 800b67c:	fb0e 2210 	mls	r2, lr, r0, r2
 800b680:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b684:	fb0c fc00 	mul.w	ip, ip, r0
 800b688:	45a4      	cmp	ip, r4
 800b68a:	d907      	bls.n	800b69c <__udivmoddi4+0x144>
 800b68c:	1934      	adds	r4, r6, r4
 800b68e:	f100 32ff 	add.w	r2, r0, #4294967295
 800b692:	d202      	bcs.n	800b69a <__udivmoddi4+0x142>
 800b694:	45a4      	cmp	ip, r4
 800b696:	f200 80cb 	bhi.w	800b830 <__udivmoddi4+0x2d8>
 800b69a:	4610      	mov	r0, r2
 800b69c:	eba4 040c 	sub.w	r4, r4, ip
 800b6a0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800b6a4:	e7a2      	b.n	800b5ec <__udivmoddi4+0x94>
 800b6a6:	f1c1 0620 	rsb	r6, r1, #32
 800b6aa:	408b      	lsls	r3, r1
 800b6ac:	fa22 fc06 	lsr.w	ip, r2, r6
 800b6b0:	ea4c 0c03 	orr.w	ip, ip, r3
 800b6b4:	fa07 f401 	lsl.w	r4, r7, r1
 800b6b8:	fa20 f306 	lsr.w	r3, r0, r6
 800b6bc:	40f7      	lsrs	r7, r6
 800b6be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800b6c2:	4323      	orrs	r3, r4
 800b6c4:	fa00 f801 	lsl.w	r8, r0, r1
 800b6c8:	fa1f fe8c 	uxth.w	lr, ip
 800b6cc:	fbb7 f0f9 	udiv	r0, r7, r9
 800b6d0:	0c1c      	lsrs	r4, r3, #16
 800b6d2:	fb09 7710 	mls	r7, r9, r0, r7
 800b6d6:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800b6da:	fb00 f70e 	mul.w	r7, r0, lr
 800b6de:	42a7      	cmp	r7, r4
 800b6e0:	fa02 f201 	lsl.w	r2, r2, r1
 800b6e4:	d90a      	bls.n	800b6fc <__udivmoddi4+0x1a4>
 800b6e6:	eb1c 0404 	adds.w	r4, ip, r4
 800b6ea:	f100 3aff 	add.w	sl, r0, #4294967295
 800b6ee:	f080 809b 	bcs.w	800b828 <__udivmoddi4+0x2d0>
 800b6f2:	42a7      	cmp	r7, r4
 800b6f4:	f240 8098 	bls.w	800b828 <__udivmoddi4+0x2d0>
 800b6f8:	3802      	subs	r0, #2
 800b6fa:	4464      	add	r4, ip
 800b6fc:	1be4      	subs	r4, r4, r7
 800b6fe:	b29f      	uxth	r7, r3
 800b700:	fbb4 f3f9 	udiv	r3, r4, r9
 800b704:	fb09 4413 	mls	r4, r9, r3, r4
 800b708:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 800b70c:	fb03 fe0e 	mul.w	lr, r3, lr
 800b710:	45a6      	cmp	lr, r4
 800b712:	d909      	bls.n	800b728 <__udivmoddi4+0x1d0>
 800b714:	eb1c 0404 	adds.w	r4, ip, r4
 800b718:	f103 37ff 	add.w	r7, r3, #4294967295
 800b71c:	f080 8082 	bcs.w	800b824 <__udivmoddi4+0x2cc>
 800b720:	45a6      	cmp	lr, r4
 800b722:	d97f      	bls.n	800b824 <__udivmoddi4+0x2cc>
 800b724:	3b02      	subs	r3, #2
 800b726:	4464      	add	r4, ip
 800b728:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800b72c:	eba4 040e 	sub.w	r4, r4, lr
 800b730:	fba0 e702 	umull	lr, r7, r0, r2
 800b734:	42bc      	cmp	r4, r7
 800b736:	4673      	mov	r3, lr
 800b738:	46b9      	mov	r9, r7
 800b73a:	d363      	bcc.n	800b804 <__udivmoddi4+0x2ac>
 800b73c:	d060      	beq.n	800b800 <__udivmoddi4+0x2a8>
 800b73e:	b15d      	cbz	r5, 800b758 <__udivmoddi4+0x200>
 800b740:	ebb8 0203 	subs.w	r2, r8, r3
 800b744:	eb64 0409 	sbc.w	r4, r4, r9
 800b748:	fa04 f606 	lsl.w	r6, r4, r6
 800b74c:	fa22 f301 	lsr.w	r3, r2, r1
 800b750:	431e      	orrs	r6, r3
 800b752:	40cc      	lsrs	r4, r1
 800b754:	e9c5 6400 	strd	r6, r4, [r5]
 800b758:	2100      	movs	r1, #0
 800b75a:	e74c      	b.n	800b5f6 <__udivmoddi4+0x9e>
 800b75c:	0862      	lsrs	r2, r4, #1
 800b75e:	0848      	lsrs	r0, r1, #1
 800b760:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 800b764:	0c0b      	lsrs	r3, r1, #16
 800b766:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b76a:	b28a      	uxth	r2, r1
 800b76c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b770:	fbb3 f1f6 	udiv	r1, r3, r6
 800b774:	07e4      	lsls	r4, r4, #31
 800b776:	46b4      	mov	ip, r6
 800b778:	4637      	mov	r7, r6
 800b77a:	46b6      	mov	lr, r6
 800b77c:	231f      	movs	r3, #31
 800b77e:	fbb0 f0f6 	udiv	r0, r0, r6
 800b782:	1bd2      	subs	r2, r2, r7
 800b784:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b788:	e761      	b.n	800b64e <__udivmoddi4+0xf6>
 800b78a:	4661      	mov	r1, ip
 800b78c:	e714      	b.n	800b5b8 <__udivmoddi4+0x60>
 800b78e:	4610      	mov	r0, r2
 800b790:	e728      	b.n	800b5e4 <__udivmoddi4+0x8c>
 800b792:	f1c3 0120 	rsb	r1, r3, #32
 800b796:	fa20 f201 	lsr.w	r2, r0, r1
 800b79a:	409e      	lsls	r6, r3
 800b79c:	fa27 f101 	lsr.w	r1, r7, r1
 800b7a0:	409f      	lsls	r7, r3
 800b7a2:	433a      	orrs	r2, r7
 800b7a4:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800b7a8:	fa1f fc86 	uxth.w	ip, r6
 800b7ac:	fbb1 f7fe 	udiv	r7, r1, lr
 800b7b0:	fb0e 1017 	mls	r0, lr, r7, r1
 800b7b4:	0c11      	lsrs	r1, r2, #16
 800b7b6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b7ba:	fb07 f80c 	mul.w	r8, r7, ip
 800b7be:	4588      	cmp	r8, r1
 800b7c0:	fa04 f403 	lsl.w	r4, r4, r3
 800b7c4:	d93a      	bls.n	800b83c <__udivmoddi4+0x2e4>
 800b7c6:	1871      	adds	r1, r6, r1
 800b7c8:	f107 30ff 	add.w	r0, r7, #4294967295
 800b7cc:	d201      	bcs.n	800b7d2 <__udivmoddi4+0x27a>
 800b7ce:	4588      	cmp	r8, r1
 800b7d0:	d81f      	bhi.n	800b812 <__udivmoddi4+0x2ba>
 800b7d2:	eba1 0108 	sub.w	r1, r1, r8
 800b7d6:	fbb1 f8fe 	udiv	r8, r1, lr
 800b7da:	fb08 f70c 	mul.w	r7, r8, ip
 800b7de:	fb0e 1118 	mls	r1, lr, r8, r1
 800b7e2:	b292      	uxth	r2, r2
 800b7e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b7e8:	42ba      	cmp	r2, r7
 800b7ea:	d22f      	bcs.n	800b84c <__udivmoddi4+0x2f4>
 800b7ec:	18b2      	adds	r2, r6, r2
 800b7ee:	f108 31ff 	add.w	r1, r8, #4294967295
 800b7f2:	d2c6      	bcs.n	800b782 <__udivmoddi4+0x22a>
 800b7f4:	42ba      	cmp	r2, r7
 800b7f6:	d2c4      	bcs.n	800b782 <__udivmoddi4+0x22a>
 800b7f8:	f1a8 0102 	sub.w	r1, r8, #2
 800b7fc:	4432      	add	r2, r6
 800b7fe:	e7c0      	b.n	800b782 <__udivmoddi4+0x22a>
 800b800:	45f0      	cmp	r8, lr
 800b802:	d29c      	bcs.n	800b73e <__udivmoddi4+0x1e6>
 800b804:	ebbe 0302 	subs.w	r3, lr, r2
 800b808:	eb67 070c 	sbc.w	r7, r7, ip
 800b80c:	3801      	subs	r0, #1
 800b80e:	46b9      	mov	r9, r7
 800b810:	e795      	b.n	800b73e <__udivmoddi4+0x1e6>
 800b812:	eba6 0808 	sub.w	r8, r6, r8
 800b816:	4441      	add	r1, r8
 800b818:	1eb8      	subs	r0, r7, #2
 800b81a:	fbb1 f8fe 	udiv	r8, r1, lr
 800b81e:	fb08 f70c 	mul.w	r7, r8, ip
 800b822:	e7dc      	b.n	800b7de <__udivmoddi4+0x286>
 800b824:	463b      	mov	r3, r7
 800b826:	e77f      	b.n	800b728 <__udivmoddi4+0x1d0>
 800b828:	4650      	mov	r0, sl
 800b82a:	e767      	b.n	800b6fc <__udivmoddi4+0x1a4>
 800b82c:	4608      	mov	r0, r1
 800b82e:	e6fb      	b.n	800b628 <__udivmoddi4+0xd0>
 800b830:	4434      	add	r4, r6
 800b832:	3802      	subs	r0, #2
 800b834:	e732      	b.n	800b69c <__udivmoddi4+0x144>
 800b836:	3f02      	subs	r7, #2
 800b838:	4432      	add	r2, r6
 800b83a:	e71b      	b.n	800b674 <__udivmoddi4+0x11c>
 800b83c:	eba1 0108 	sub.w	r1, r1, r8
 800b840:	4638      	mov	r0, r7
 800b842:	fbb1 f8fe 	udiv	r8, r1, lr
 800b846:	fb08 f70c 	mul.w	r7, r8, ip
 800b84a:	e7c8      	b.n	800b7de <__udivmoddi4+0x286>
 800b84c:	4641      	mov	r1, r8
 800b84e:	e798      	b.n	800b782 <__udivmoddi4+0x22a>

0800b850 <_init>:
 800b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b852:	bf00      	nop
 800b854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b856:	bc08      	pop	{r3}
 800b858:	469e      	mov	lr, r3
 800b85a:	4770      	bx	lr

0800b85c <_fini>:
 800b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85e:	bf00      	nop
 800b860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b862:	bc08      	pop	{r3}
 800b864:	469e      	mov	lr, r3
 800b866:	4770      	bx	lr
