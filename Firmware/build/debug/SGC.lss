
build/debug/SGC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  08009a80  08009a80  0000aa80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a010  0800a010  0000c150  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a010  0800a010  0000b010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a018  0800a018  0000c150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a018  0800a018  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a01c  0800a01c  0000b01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800a020  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007164  20000150  0800a170  0000c150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200072b4  0800a170  0000c2b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c150  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000c180  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031ee2  00000000  00000000  0000c1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007de0  00000000  00000000  0003e09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00015fb1  00000000  00000000  00045e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f58  00000000  00000000  0005be30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000196f  00000000  00000000  0005dd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000229b3  00000000  00000000  0005f6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000af75  00000000  00000000  000820aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005408  00000000  00000000  0008d020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000194  00000000  00000000  00092428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b80c 	b.w	8000280 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f009 fa7e 	bl	8009770 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__aeabi_idiv0>:
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop

08000284 <__do_global_dtors_aux>:
 8000284:	b510      	push	{r4, lr}
 8000286:	4c05      	ldr	r4, [pc, #20]	@ (800029c <__do_global_dtors_aux+0x18>)
 8000288:	7823      	ldrb	r3, [r4, #0]
 800028a:	b933      	cbnz	r3, 800029a <__do_global_dtors_aux+0x16>
 800028c:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x1c>)
 800028e:	b113      	cbz	r3, 8000296 <__do_global_dtors_aux+0x12>
 8000290:	4804      	ldr	r0, [pc, #16]	@ (80002a4 <__do_global_dtors_aux+0x20>)
 8000292:	f3af 8000 	nop.w
 8000296:	2301      	movs	r3, #1
 8000298:	7023      	strb	r3, [r4, #0]
 800029a:	bd10      	pop	{r4, pc}
 800029c:	20000150 	.word	0x20000150
 80002a0:	00000000 	.word	0x00000000
 80002a4:	08009a68 	.word	0x08009a68

080002a8 <frame_dummy>:
 80002a8:	b508      	push	{r3, lr}
 80002aa:	4b03      	ldr	r3, [pc, #12]	@ (80002b8 <frame_dummy+0x10>)
 80002ac:	b11b      	cbz	r3, 80002b6 <frame_dummy+0xe>
 80002ae:	4903      	ldr	r1, [pc, #12]	@ (80002bc <frame_dummy+0x14>)
 80002b0:	4803      	ldr	r0, [pc, #12]	@ (80002c0 <frame_dummy+0x18>)
 80002b2:	f3af 8000 	nop.w
 80002b6:	bd08      	pop	{r3, pc}
 80002b8:	00000000 	.word	0x00000000
 80002bc:	20000154 	.word	0x20000154
 80002c0:	08009a68 	.word	0x08009a68

080002c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002c4:	b500      	push	{lr}
 80002c6:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002c8:	2300      	movs	r3, #0
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	9302      	str	r3, [sp, #8]
 80002d0:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80002d2:	4861      	ldr	r0, [pc, #388]	@ (8000458 <MX_ADC1_Init+0x194>)
 80002d4:	4a61      	ldr	r2, [pc, #388]	@ (800045c <MX_ADC1_Init+0x198>)
 80002d6:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002d8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80002dc:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002de:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80002e0:	2201      	movs	r2, #1
 80002e2:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002e4:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002ea:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ec:	495c      	ldr	r1, [pc, #368]	@ (8000460 <MX_ADC1_Init+0x19c>)
 80002ee:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f0:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 13;
 80002f2:	210d      	movs	r1, #13
 80002f4:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002f6:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002fa:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002fc:	f002 f96c 	bl	80025d8 <HAL_ADC_Init>
 8000300:	2800      	cmp	r0, #0
 8000302:	d17e      	bne.n	8000402 <MX_ADC1_Init+0x13e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000304:	2300      	movs	r3, #0
 8000306:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000308:	2201      	movs	r2, #1
 800030a:	9201      	str	r2, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800030c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800030e:	4669      	mov	r1, sp
 8000310:	4851      	ldr	r0, [pc, #324]	@ (8000458 <MX_ADC1_Init+0x194>)
 8000312:	f002 fa8b 	bl	800282c <HAL_ADC_ConfigChannel>
 8000316:	2800      	cmp	r0, #0
 8000318:	d176      	bne.n	8000408 <MX_ADC1_Init+0x144>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800031a:	2301      	movs	r3, #1
 800031c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 800031e:	2302      	movs	r3, #2
 8000320:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000322:	4669      	mov	r1, sp
 8000324:	484c      	ldr	r0, [pc, #304]	@ (8000458 <MX_ADC1_Init+0x194>)
 8000326:	f002 fa81 	bl	800282c <HAL_ADC_ConfigChannel>
 800032a:	2800      	cmp	r0, #0
 800032c:	d16f      	bne.n	800040e <MX_ADC1_Init+0x14a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800032e:	2302      	movs	r3, #2
 8000330:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000332:	2303      	movs	r3, #3
 8000334:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000336:	4669      	mov	r1, sp
 8000338:	4847      	ldr	r0, [pc, #284]	@ (8000458 <MX_ADC1_Init+0x194>)
 800033a:	f002 fa77 	bl	800282c <HAL_ADC_ConfigChannel>
 800033e:	2800      	cmp	r0, #0
 8000340:	d168      	bne.n	8000414 <MX_ADC1_Init+0x150>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000342:	2303      	movs	r3, #3
 8000344:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8000346:	2304      	movs	r3, #4
 8000348:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034a:	4669      	mov	r1, sp
 800034c:	4842      	ldr	r0, [pc, #264]	@ (8000458 <MX_ADC1_Init+0x194>)
 800034e:	f002 fa6d 	bl	800282c <HAL_ADC_ConfigChannel>
 8000352:	2800      	cmp	r0, #0
 8000354:	d161      	bne.n	800041a <MX_ADC1_Init+0x156>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000356:	2304      	movs	r3, #4
 8000358:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 5;
 800035a:	2305      	movs	r3, #5
 800035c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800035e:	4669      	mov	r1, sp
 8000360:	483d      	ldr	r0, [pc, #244]	@ (8000458 <MX_ADC1_Init+0x194>)
 8000362:	f002 fa63 	bl	800282c <HAL_ADC_ConfigChannel>
 8000366:	2800      	cmp	r0, #0
 8000368:	d15a      	bne.n	8000420 <MX_ADC1_Init+0x15c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800036a:	2305      	movs	r3, #5
 800036c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 6;
 800036e:	2306      	movs	r3, #6
 8000370:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000372:	4669      	mov	r1, sp
 8000374:	4838      	ldr	r0, [pc, #224]	@ (8000458 <MX_ADC1_Init+0x194>)
 8000376:	f002 fa59 	bl	800282c <HAL_ADC_ConfigChannel>
 800037a:	2800      	cmp	r0, #0
 800037c:	d153      	bne.n	8000426 <MX_ADC1_Init+0x162>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800037e:	2306      	movs	r3, #6
 8000380:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 7;
 8000382:	2307      	movs	r3, #7
 8000384:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000386:	4669      	mov	r1, sp
 8000388:	4833      	ldr	r0, [pc, #204]	@ (8000458 <MX_ADC1_Init+0x194>)
 800038a:	f002 fa4f 	bl	800282c <HAL_ADC_ConfigChannel>
 800038e:	2800      	cmp	r0, #0
 8000390:	d14c      	bne.n	800042c <MX_ADC1_Init+0x168>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000392:	2307      	movs	r3, #7
 8000394:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 8;
 8000396:	2308      	movs	r3, #8
 8000398:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039a:	4669      	mov	r1, sp
 800039c:	482e      	ldr	r0, [pc, #184]	@ (8000458 <MX_ADC1_Init+0x194>)
 800039e:	f002 fa45 	bl	800282c <HAL_ADC_ConfigChannel>
 80003a2:	2800      	cmp	r0, #0
 80003a4:	d145      	bne.n	8000432 <MX_ADC1_Init+0x16e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80003a6:	230e      	movs	r3, #14
 80003a8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 9;
 80003aa:	2309      	movs	r3, #9
 80003ac:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ae:	4669      	mov	r1, sp
 80003b0:	4829      	ldr	r0, [pc, #164]	@ (8000458 <MX_ADC1_Init+0x194>)
 80003b2:	f002 fa3b 	bl	800282c <HAL_ADC_ConfigChannel>
 80003b6:	2800      	cmp	r0, #0
 80003b8:	d13e      	bne.n	8000438 <MX_ADC1_Init+0x174>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80003ba:	230a      	movs	r3, #10
 80003bc:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 10;
 80003be:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c0:	4669      	mov	r1, sp
 80003c2:	4825      	ldr	r0, [pc, #148]	@ (8000458 <MX_ADC1_Init+0x194>)
 80003c4:	f002 fa32 	bl	800282c <HAL_ADC_ConfigChannel>
 80003c8:	2800      	cmp	r0, #0
 80003ca:	d138      	bne.n	800043e <MX_ADC1_Init+0x17a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80003cc:	230b      	movs	r3, #11
 80003ce:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 11;
 80003d0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d2:	4669      	mov	r1, sp
 80003d4:	4820      	ldr	r0, [pc, #128]	@ (8000458 <MX_ADC1_Init+0x194>)
 80003d6:	f002 fa29 	bl	800282c <HAL_ADC_ConfigChannel>
 80003da:	bb98      	cbnz	r0, 8000444 <MX_ADC1_Init+0x180>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80003dc:	230c      	movs	r3, #12
 80003de:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 12;
 80003e0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e2:	4669      	mov	r1, sp
 80003e4:	481c      	ldr	r0, [pc, #112]	@ (8000458 <MX_ADC1_Init+0x194>)
 80003e6:	f002 fa21 	bl	800282c <HAL_ADC_ConfigChannel>
 80003ea:	bb70      	cbnz	r0, 800044a <MX_ADC1_Init+0x186>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80003ec:	230d      	movs	r3, #13
 80003ee:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 13;
 80003f0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f2:	4669      	mov	r1, sp
 80003f4:	4818      	ldr	r0, [pc, #96]	@ (8000458 <MX_ADC1_Init+0x194>)
 80003f6:	f002 fa19 	bl	800282c <HAL_ADC_ConfigChannel>
 80003fa:	bb48      	cbnz	r0, 8000450 <MX_ADC1_Init+0x18c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003fc:	b005      	add	sp, #20
 80003fe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000402:	f001 f8c7 	bl	8001594 <Error_Handler>
 8000406:	e77d      	b.n	8000304 <MX_ADC1_Init+0x40>
    Error_Handler();
 8000408:	f001 f8c4 	bl	8001594 <Error_Handler>
 800040c:	e785      	b.n	800031a <MX_ADC1_Init+0x56>
    Error_Handler();
 800040e:	f001 f8c1 	bl	8001594 <Error_Handler>
 8000412:	e78c      	b.n	800032e <MX_ADC1_Init+0x6a>
    Error_Handler();
 8000414:	f001 f8be 	bl	8001594 <Error_Handler>
 8000418:	e793      	b.n	8000342 <MX_ADC1_Init+0x7e>
    Error_Handler();
 800041a:	f001 f8bb 	bl	8001594 <Error_Handler>
 800041e:	e79a      	b.n	8000356 <MX_ADC1_Init+0x92>
    Error_Handler();
 8000420:	f001 f8b8 	bl	8001594 <Error_Handler>
 8000424:	e7a1      	b.n	800036a <MX_ADC1_Init+0xa6>
    Error_Handler();
 8000426:	f001 f8b5 	bl	8001594 <Error_Handler>
 800042a:	e7a8      	b.n	800037e <MX_ADC1_Init+0xba>
    Error_Handler();
 800042c:	f001 f8b2 	bl	8001594 <Error_Handler>
 8000430:	e7af      	b.n	8000392 <MX_ADC1_Init+0xce>
    Error_Handler();
 8000432:	f001 f8af 	bl	8001594 <Error_Handler>
 8000436:	e7b6      	b.n	80003a6 <MX_ADC1_Init+0xe2>
    Error_Handler();
 8000438:	f001 f8ac 	bl	8001594 <Error_Handler>
 800043c:	e7bd      	b.n	80003ba <MX_ADC1_Init+0xf6>
    Error_Handler();
 800043e:	f001 f8a9 	bl	8001594 <Error_Handler>
 8000442:	e7c3      	b.n	80003cc <MX_ADC1_Init+0x108>
    Error_Handler();
 8000444:	f001 f8a6 	bl	8001594 <Error_Handler>
 8000448:	e7c8      	b.n	80003dc <MX_ADC1_Init+0x118>
    Error_Handler();
 800044a:	f001 f8a3 	bl	8001594 <Error_Handler>
 800044e:	e7cd      	b.n	80003ec <MX_ADC1_Init+0x128>
    Error_Handler();
 8000450:	f001 f8a0 	bl	8001594 <Error_Handler>
}
 8000454:	e7d2      	b.n	80003fc <MX_ADC1_Init+0x138>
 8000456:	bf00      	nop
 8000458:	200001cc 	.word	0x200001cc
 800045c:	40012000 	.word	0x40012000
 8000460:	0f000001 	.word	0x0f000001

08000464 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000466:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	2300      	movs	r3, #0
 800046a:	9303      	str	r3, [sp, #12]
 800046c:	9304      	str	r3, [sp, #16]
 800046e:	9305      	str	r3, [sp, #20]
 8000470:	9306      	str	r3, [sp, #24]
 8000472:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000474:	6802      	ldr	r2, [r0, #0]
 8000476:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800047a:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 800047e:	429a      	cmp	r2, r3
 8000480:	d001      	beq.n	8000486 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000482:	b009      	add	sp, #36	@ 0x24
 8000484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000486:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000488:	2500      	movs	r5, #0
 800048a:	9500      	str	r5, [sp, #0]
 800048c:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000490:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000492:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000496:	645a      	str	r2, [r3, #68]	@ 0x44
 8000498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800049a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800049e:	9200      	str	r2, [sp, #0]
 80004a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a2:	9501      	str	r5, [sp, #4]
 80004a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004a6:	f042 0204 	orr.w	r2, r2, #4
 80004aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80004ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004ae:	f002 0204 	and.w	r2, r2, #4
 80004b2:	9201      	str	r2, [sp, #4]
 80004b4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	9502      	str	r5, [sp, #8]
 80004b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004ba:	f042 0201 	orr.w	r2, r2, #1
 80004be:	631a      	str	r2, [r3, #48]	@ 0x30
 80004c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	9302      	str	r3, [sp, #8]
 80004c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD_INPUT1_PIN_Pin|AD_INPUT2_PIN_Pin|AD_INPUT3_PIN_Pin|AD_INPUT4_PIN_Pin
 80004ca:	231f      	movs	r3, #31
 80004cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ce:	2703      	movs	r7, #3
 80004d0:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d2:	ae03      	add	r6, sp, #12
 80004d4:	4631      	mov	r1, r6
 80004d6:	4814      	ldr	r0, [pc, #80]	@ (8000528 <HAL_ADC_MspInit+0xc4>)
 80004d8:	f002 fcee 	bl	8002eb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ETB1_SENSE1_Pin|ETB1_SENSE2_Pin|ETB2_SENSE1_Pin|ETB2_SENSE2_Pin
 80004dc:	23ff      	movs	r3, #255	@ 0xff
 80004de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e4:	4631      	mov	r1, r6
 80004e6:	4811      	ldr	r0, [pc, #68]	@ (800052c <HAL_ADC_MspInit+0xc8>)
 80004e8:	f002 fce6 	bl	8002eb8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80004ec:	4810      	ldr	r0, [pc, #64]	@ (8000530 <HAL_ADC_MspInit+0xcc>)
 80004ee:	4b11      	ldr	r3, [pc, #68]	@ (8000534 <HAL_ADC_MspInit+0xd0>)
 80004f0:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80004f2:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004f4:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004f6:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80004f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004fc:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000502:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000504:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000508:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800050a:	61c5      	str	r5, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800050c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000510:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000512:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000514:	f002 fb48 	bl	8002ba8 <HAL_DMA_Init>
 8000518:	b918      	cbnz	r0, 8000522 <HAL_ADC_MspInit+0xbe>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800051a:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <HAL_ADC_MspInit+0xcc>)
 800051c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800051e:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000520:	e7af      	b.n	8000482 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000522:	f001 f837 	bl	8001594 <Error_Handler>
 8000526:	e7f8      	b.n	800051a <HAL_ADC_MspInit+0xb6>
 8000528:	40020800 	.word	0x40020800
 800052c:	40020000 	.word	0x40020000
 8000530:	2000016c 	.word	0x2000016c
 8000534:	40026410 	.word	0x40026410

08000538 <analog_inputs_start_conversion>:
 * 
 * This function triggers the ADC to begin converting the analog signals
 * to digital values.
 */
void analog_inputs_start_conversion()
{
 8000538:	b508      	push	{r3, lr}
    if (hadc == NULL)
 800053a:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <analog_inputs_start_conversion+0x20>)
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	b110      	cbz	r0, 8000546 <analog_inputs_start_conversion+0xe>
    {
        return;
    }
    if (conversion_is_happening)
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <analog_inputs_start_conversion+0x24>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	b103      	cbz	r3, 8000548 <analog_inputs_start_conversion+0x10>
        return;
    }
    
    conversion_is_happening = true;
    HAL_ADC_Start_DMA(hadc, (uint32_t*)&analog_data.raw_values, ANALOG_INPUTS_MAX);
}
 8000546:	bd08      	pop	{r3, pc}
    conversion_is_happening = true;
 8000548:	4b04      	ldr	r3, [pc, #16]	@ (800055c <analog_inputs_start_conversion+0x24>)
 800054a:	2201      	movs	r2, #1
 800054c:	701a      	strb	r2, [r3, #0]
    HAL_ADC_Start_DMA(hadc, (uint32_t*)&analog_data.raw_values, ANALOG_INPUTS_MAX);
 800054e:	220d      	movs	r2, #13
 8000550:	4903      	ldr	r1, [pc, #12]	@ (8000560 <analog_inputs_start_conversion+0x28>)
 8000552:	f002 f86d 	bl	8002630 <HAL_ADC_Start_DMA>
 8000556:	e7f6      	b.n	8000546 <analog_inputs_start_conversion+0xe>
 8000558:	20000234 	.word	0x20000234
 800055c:	20000214 	.word	0x20000214
 8000560:	20000218 	.word	0x20000218

08000564 <HAL_ADC_ConvCpltCallback>:
    conversion_is_happening = false;
 8000564:	4b01      	ldr	r3, [pc, #4]	@ (800056c <HAL_ADC_ConvCpltCallback+0x8>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
}
 800056a:	4770      	bx	lr
 800056c:	20000214 	.word	0x20000214

08000570 <analog_inputs_init>:
{
 8000570:	b510      	push	{r4, lr}
    if (adc_handle == NULL)
 8000572:	b190      	cbz	r0, 800059a <analog_inputs_init+0x2a>
    hadc = adc_handle;
 8000574:	4a0b      	ldr	r2, [pc, #44]	@ (80005a4 <analog_inputs_init+0x34>)
 8000576:	6010      	str	r0, [r2, #0]
    conversion_is_happening = true;
 8000578:	2401      	movs	r4, #1
 800057a:	4a0b      	ldr	r2, [pc, #44]	@ (80005a8 <analog_inputs_init+0x38>)
 800057c:	7014      	strb	r4, [r2, #0]
    HAL_ADC_Start_DMA(hadc, (uint32_t*)&analog_data.raw_values, ANALOG_INPUTS_MAX);
 800057e:	220d      	movs	r2, #13
 8000580:	490a      	ldr	r1, [pc, #40]	@ (80005ac <analog_inputs_init+0x3c>)
 8000582:	f002 f855 	bl	8002630 <HAL_ADC_Start_DMA>
    osTimerId_t timer_id = osTimerNew(
 8000586:	2300      	movs	r3, #0
 8000588:	461a      	mov	r2, r3
 800058a:	4621      	mov	r1, r4
 800058c:	4808      	ldr	r0, [pc, #32]	@ (80005b0 <analog_inputs_init+0x40>)
 800058e:	f000 f8cf 	bl	8000730 <osTimerNew>
    osTimerStart(timer_id, 1);
 8000592:	4621      	mov	r1, r4
 8000594:	f000 f920 	bl	80007d8 <osTimerStart>
}
 8000598:	bd10      	pop	{r4, pc}
        log_error("Analog input init failed! adc handle is null.");
 800059a:	4806      	ldr	r0, [pc, #24]	@ (80005b4 <analog_inputs_init+0x44>)
 800059c:	f000 fa96 	bl	8000acc <log_error>
        return;
 80005a0:	e7fa      	b.n	8000598 <analog_inputs_init+0x28>
 80005a2:	bf00      	nop
 80005a4:	20000234 	.word	0x20000234
 80005a8:	20000214 	.word	0x20000214
 80005ac:	20000218 	.word	0x20000218
 80005b0:	08000539 	.word	0x08000539
 80005b4:	08009ae8 	.word	0x08009ae8

080005b8 <analog_inputs_get_data>:
#if ANALOG_INPUTS_ADC_BITS == 12
uint16_t analog_inputs_get_data(analog_input_channel_t input_index)
#elif ANALOG_INPUTS_ADC_BITS == 24
uint32_t analog_inputs_get_data(analog_input_channel_t input_index)
#endif
{
 80005b8:	b508      	push	{r3, lr}
    if (input_index > (ANALOG_INPUTS_MAX - 1))
 80005ba:	280c      	cmp	r0, #12
 80005bc:	d804      	bhi.n	80005c8 <analog_inputs_get_data+0x10>
    {
        log_error("Invalid index in analog input.");
        return 0;
    }
    return analog_data.raw_values[input_index];
 80005be:	4b05      	ldr	r3, [pc, #20]	@ (80005d4 <analog_inputs_get_data+0x1c>)
 80005c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80005c4:	b280      	uxth	r0, r0

}
 80005c6:	bd08      	pop	{r3, pc}
        log_error("Invalid index in analog input.");
 80005c8:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <analog_inputs_get_data+0x20>)
 80005ca:	f000 fa7f 	bl	8000acc <log_error>
        return 0;
 80005ce:	2000      	movs	r0, #0
 80005d0:	e7f9      	b.n	80005c6 <analog_inputs_get_data+0xe>
 80005d2:	bf00      	nop
 80005d4:	20000218 	.word	0x20000218
 80005d8:	08009b18 	.word	0x08009b18

080005dc <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80005dc:	b508      	push	{r3, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80005de:	f006 fd48 	bl	8007072 <pvTimerGetTimerID>

  if (callb != NULL) {
 80005e2:	b110      	cbz	r0, 80005ea <TimerCallback+0xe>
    callb->func (callb->arg);
 80005e4:	6802      	ldr	r2, [r0, #0]
 80005e6:	6840      	ldr	r0, [r0, #4]
 80005e8:	4790      	blx	r2
  }
}
 80005ea:	bd08      	pop	{r3, pc}

080005ec <SysTick_Handler>:
void SysTick_Handler (void) {
 80005ec:	b508      	push	{r3, lr}
  SysTick->CTRL;
 80005ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80005f2:	691b      	ldr	r3, [r3, #16]
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80005f4:	f005 ffe6 	bl	80065c4 <xTaskGetSchedulerState>
 80005f8:	2801      	cmp	r0, #1
 80005fa:	d100      	bne.n	80005fe <SysTick_Handler+0x12>
}
 80005fc:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 80005fe:	f001 f911 	bl	8001824 <xPortSysTickHandler>
}
 8000602:	e7fb      	b.n	80005fc <SysTick_Handler+0x10>

08000604 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000604:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000608:	b92b      	cbnz	r3, 8000616 <osKernelInitialize+0x12>
    if (KernelState == osKernelInactive) {
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <osKernelInitialize+0x20>)
 800060c:	6818      	ldr	r0, [r3, #0]
 800060e:	b928      	cbnz	r0, 800061c <osKernelInitialize+0x18>
      KernelState = osKernelReady;
 8000610:	2201      	movs	r2, #1
 8000612:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000614:	4770      	bx	lr
    stat = osErrorISR;
 8000616:	f06f 0005 	mvn.w	r0, #5
 800061a:	4770      	bx	lr
      stat = osError;
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	200008f0 	.word	0x200008f0

08000628 <osKernelStart>:
 8000628:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 800062c:	b973      	cbnz	r3, 800064c <osKernelStart+0x24>
    if (KernelState == osKernelReady) {
 800062e:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <osKernelStart+0x30>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d10d      	bne.n	8000652 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8000636:	b510      	push	{r4, lr}
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	2400      	movs	r4, #0
 800063a:	4b08      	ldr	r3, [pc, #32]	@ (800065c <osKernelStart+0x34>)
 800063c:	77dc      	strb	r4, [r3, #31]
      KernelState = osKernelRunning;
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <osKernelStart+0x30>)
 8000640:	2202      	movs	r2, #2
 8000642:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8000644:	f005 fcd6 	bl	8005ff4 <vTaskStartScheduler>
      stat = osOK;
 8000648:	4620      	mov	r0, r4
}
 800064a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800064c:	f06f 0005 	mvn.w	r0, #5
 8000650:	4770      	bx	lr
      stat = osError;
 8000652:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000656:	4770      	bx	lr
 8000658:	200008f0 	.word	0x200008f0
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000662:	b087      	sub	sp, #28
  hTask = NULL;
 8000664:	2400      	movs	r4, #0
 8000666:	9405      	str	r4, [sp, #20]
 8000668:	f3ef 8405 	mrs	r4, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 800066c:	bb04      	cbnz	r4, 80006b0 <osThreadNew+0x50>
 800066e:	b1f8      	cbz	r0, 80006b0 <osThreadNew+0x50>
    if (attr != NULL) {
 8000670:	2a00      	cmp	r2, #0
 8000672:	d034      	beq.n	80006de <osThreadNew+0x7e>
      if (attr->name != NULL) {
 8000674:	6815      	ldr	r5, [r2, #0]
      if (attr->priority != osPriorityNone) {
 8000676:	6993      	ldr	r3, [r2, #24]
 8000678:	b12b      	cbz	r3, 8000686 <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 800067a:	461e      	mov	r6, r3
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800067c:	3b01      	subs	r3, #1
 800067e:	2b37      	cmp	r3, #55	@ 0x37
 8000680:	d902      	bls.n	8000688 <osThreadNew+0x28>
        return (NULL);
 8000682:	2000      	movs	r0, #0
 8000684:	e015      	b.n	80006b2 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;
 8000686:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000688:	6853      	ldr	r3, [r2, #4]
 800068a:	f013 0f01 	tst.w	r3, #1
 800068e:	d13f      	bne.n	8000710 <osThreadNew+0xb0>
      if (attr->stack_size > 0U) {
 8000690:	6954      	ldr	r4, [r2, #20]
 8000692:	b184      	cbz	r4, 80006b6 <osThreadNew+0x56>
        stack = attr->stack_size / sizeof(StackType_t);
 8000694:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000698:	6893      	ldr	r3, [r2, #8]
 800069a:	b12b      	cbz	r3, 80006a8 <osThreadNew+0x48>
 800069c:	68d7      	ldr	r7, [r2, #12]
 800069e:	2f5b      	cmp	r7, #91	@ 0x5b
 80006a0:	d902      	bls.n	80006a8 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80006a2:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80006a4:	b107      	cbz	r7, 80006a8 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80006a6:	b984      	cbnz	r4, 80006ca <osThreadNew+0x6a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80006a8:	b143      	cbz	r3, 80006bc <osThreadNew+0x5c>
    mem  = -1;
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
      if (mem == 0) {
 80006ae:	b30b      	cbz	r3, 80006f4 <osThreadNew+0x94>
  return ((osThreadId_t)hTask);
 80006b0:	9805      	ldr	r0, [sp, #20]
}
 80006b2:	b007      	add	sp, #28
 80006b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80006b6:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 80006ba:	e7ed      	b.n	8000698 <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80006bc:	68d3      	ldr	r3, [r2, #12]
 80006be:	b9a3      	cbnz	r3, 80006ea <osThreadNew+0x8a>
 80006c0:	6913      	ldr	r3, [r2, #16]
 80006c2:	b1ab      	cbz	r3, 80006f0 <osThreadNew+0x90>
    mem  = -1;
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	e7f1      	b.n	80006ae <osThreadNew+0x4e>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80006ca:	9302      	str	r3, [sp, #8]
 80006cc:	9701      	str	r7, [sp, #4]
 80006ce:	9600      	str	r6, [sp, #0]
 80006d0:	460b      	mov	r3, r1
 80006d2:	4662      	mov	r2, ip
 80006d4:	4629      	mov	r1, r5
 80006d6:	f005 fc1f 	bl	8005f18 <xTaskCreateStatic>
 80006da:	9005      	str	r0, [sp, #20]
 80006dc:	e7e8      	b.n	80006b0 <osThreadNew+0x50>
    name = NULL;
 80006de:	4615      	mov	r5, r2
      mem = 0;
 80006e0:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 80006e2:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 80006e4:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 80006e8:	e7e1      	b.n	80006ae <osThreadNew+0x4e>
    mem  = -1;
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	e7de      	b.n	80006ae <osThreadNew+0x4e>
          mem = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	e7dc      	b.n	80006ae <osThreadNew+0x4e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80006f4:	ab05      	add	r3, sp, #20
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	9600      	str	r6, [sp, #0]
 80006fa:	460b      	mov	r3, r1
 80006fc:	fa1f f28c 	uxth.w	r2, ip
 8000700:	4629      	mov	r1, r5
 8000702:	f005 fc44 	bl	8005f8e <xTaskCreate>
 8000706:	2801      	cmp	r0, #1
 8000708:	d0d2      	beq.n	80006b0 <osThreadNew+0x50>
            hTask = NULL;
 800070a:	2300      	movs	r3, #0
 800070c:	9305      	str	r3, [sp, #20]
 800070e:	e7cf      	b.n	80006b0 <osThreadNew+0x50>
        return (NULL);
 8000710:	2000      	movs	r0, #0
 8000712:	e7ce      	b.n	80006b2 <osThreadNew+0x52>

08000714 <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
 8000714:	b508      	push	{r3, lr}
 8000716:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 800071a:	b933      	cbnz	r3, 800072a <osDelay+0x16>
    if (ticks != 0U) {
 800071c:	b908      	cbnz	r0, 8000722 <osDelay+0xe>
    stat = osOK;
 800071e:	2000      	movs	r0, #0
}
 8000720:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8000722:	f005 fdc9 	bl	80062b8 <vTaskDelay>
    stat = osOK;
 8000726:	2000      	movs	r0, #0
 8000728:	e7fa      	b.n	8000720 <osDelay+0xc>
    stat = osErrorISR;
 800072a:	f06f 0005 	mvn.w	r0, #5
 800072e:	e7f7      	b.n	8000720 <osDelay+0xc>

08000730 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8000730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000734:	b083      	sub	sp, #12
 8000736:	f3ef 8705 	mrs	r7, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 800073a:	2f00      	cmp	r7, #0
 800073c:	d143      	bne.n	80007c6 <osTimerNew+0x96>
 800073e:	4606      	mov	r6, r0
 8000740:	4689      	mov	r9, r1
 8000742:	4615      	mov	r5, r2
 8000744:	461c      	mov	r4, r3
 8000746:	2800      	cmp	r0, #0
 8000748:	d03f      	beq.n	80007ca <osTimerNew+0x9a>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800074a:	2008      	movs	r0, #8
 800074c:	f000 fc6e 	bl	800102c <pvPortMalloc>

    if (callb != NULL) {
 8000750:	4680      	mov	r8, r0
 8000752:	2800      	cmp	r0, #0
 8000754:	d03b      	beq.n	80007ce <osTimerNew+0x9e>
      callb->func = func;
 8000756:	6006      	str	r6, [r0, #0]
      callb->arg  = argument;
 8000758:	6045      	str	r5, [r0, #4]

      if (type == osTimerOnce) {
 800075a:	f1b9 0f00 	cmp.w	r9, #0
 800075e:	d000      	beq.n	8000762 <osTimerNew+0x32>
        reload = pdFALSE;
      } else {
        reload = pdTRUE;
 8000760:	2701      	movs	r7, #1
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
 8000762:	b304      	cbz	r4, 80007a6 <osTimerNew+0x76>
        if (attr->name != NULL) {
 8000764:	6820      	ldr	r0, [r4, #0]
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8000766:	68a3      	ldr	r3, [r4, #8]
 8000768:	b113      	cbz	r3, 8000770 <osTimerNew+0x40>
 800076a:	68e2      	ldr	r2, [r4, #12]
 800076c:	2a2b      	cmp	r2, #43	@ 0x2b
 800076e:	d810      	bhi.n	8000792 <osTimerNew+0x62>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000770:	b153      	cbz	r3, 8000788 <osTimerNew+0x58>
      mem  = -1;
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
        #endif
      }
      else {
        if (mem == 0) {
 8000776:	b1db      	cbz	r3, 80007b0 <osTimerNew+0x80>
  hTimer = NULL;
 8000778:	2400      	movs	r4, #0
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
        vPortFree (callb);
 800077a:	4640      	mov	r0, r8
 800077c:	f000 fcd8 	bl	8001130 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 8000780:	4620      	mov	r0, r4
 8000782:	b003      	add	sp, #12
 8000784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000788:	68e3      	ldr	r3, [r4, #12]
 800078a:	b17b      	cbz	r3, 80007ac <osTimerNew+0x7c>
      mem  = -1;
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	e7f1      	b.n	8000776 <osTimerNew+0x46>
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <osTimerNew+0xa4>)
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	4643      	mov	r3, r8
 800079a:	463a      	mov	r2, r7
 800079c:	2101      	movs	r1, #1
 800079e:	f006 fab3 	bl	8006d08 <xTimerCreateStatic>
 80007a2:	4604      	mov	r4, r0
 80007a4:	e00c      	b.n	80007c0 <osTimerNew+0x90>
      name = NULL;
 80007a6:	4620      	mov	r0, r4
        mem = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	e7e4      	b.n	8000776 <osTimerNew+0x46>
            mem = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	e7e2      	b.n	8000776 <osTimerNew+0x46>
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80007b0:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <osTimerNew+0xa4>)
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	4643      	mov	r3, r8
 80007b6:	463a      	mov	r2, r7
 80007b8:	2101      	movs	r1, #1
 80007ba:	f006 fa89 	bl	8006cd0 <xTimerCreate>
 80007be:	4604      	mov	r4, r0
      if ((hTimer == NULL) && (callb != NULL)) {
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	d1dd      	bne.n	8000780 <osTimerNew+0x50>
 80007c4:	e7d9      	b.n	800077a <osTimerNew+0x4a>
  hTimer = NULL;
 80007c6:	2400      	movs	r4, #0
 80007c8:	e7da      	b.n	8000780 <osTimerNew+0x50>
 80007ca:	2400      	movs	r4, #0
 80007cc:	e7d8      	b.n	8000780 <osTimerNew+0x50>
 80007ce:	4604      	mov	r4, r0
  return ((osTimerId_t)hTimer);
 80007d0:	e7d6      	b.n	8000780 <osTimerNew+0x50>
 80007d2:	bf00      	nop
 80007d4:	080005dd 	.word	0x080005dd

080007d8 <osTimerStart>:
 80007d8:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 80007dc:	b96b      	cbnz	r3, 80007fa <osTimerStart+0x22>
 80007de:	460a      	mov	r2, r1
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
 80007e0:	b170      	cbz	r0, 8000800 <osTimerStart+0x28>
osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80007e2:	b500      	push	{lr}
 80007e4:	b083      	sub	sp, #12
    stat = osErrorParameter;
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2104      	movs	r1, #4
 80007ea:	f006 fab7 	bl	8006d5c <xTimerGenericCommand>
 80007ee:	2801      	cmp	r0, #1
 80007f0:	d109      	bne.n	8000806 <osTimerStart+0x2e>
      stat = osOK;
 80007f2:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80007f4:	b003      	add	sp, #12
 80007f6:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorISR;
 80007fa:	f06f 0005 	mvn.w	r0, #5
 80007fe:	4770      	bx	lr
    stat = osErrorParameter;
 8000800:	f06f 0003 	mvn.w	r0, #3
}
 8000804:	4770      	bx	lr
      stat = osErrorResource;
 8000806:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800080a:	e7f3      	b.n	80007f4 <osTimerStart+0x1c>

0800080c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800080c:	b508      	push	{r3, lr}
 800080e:	f3ef 8305 	mrs	r3, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8000812:	b9cb      	cbnz	r3, 8000848 <osEventFlagsNew+0x3c>
    mem = -1;

    if (attr != NULL) {
 8000814:	b1a0      	cbz	r0, 8000840 <osEventFlagsNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8000816:	6883      	ldr	r3, [r0, #8]
 8000818:	b113      	cbz	r3, 8000820 <osEventFlagsNew+0x14>
 800081a:	68c2      	ldr	r2, [r0, #12]
 800081c:	2a1f      	cmp	r2, #31
 800081e:	d80b      	bhi.n	8000838 <osEventFlagsNew+0x2c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000820:	b12b      	cbz	r3, 800082e <osEventFlagsNew+0x22>
    mem = -1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8000826:	b98b      	cbnz	r3, 800084c <osEventFlagsNew+0x40>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8000828:	f000 f9b1 	bl	8000b8e <xEventGroupCreate>
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
}
 800082c:	bd08      	pop	{r3, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800082e:	68c3      	ldr	r3, [r0, #12]
 8000830:	b143      	cbz	r3, 8000844 <osEventFlagsNew+0x38>
    mem = -1;
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	e7f6      	b.n	8000826 <osEventFlagsNew+0x1a>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f983 	bl	8000b44 <xEventGroupCreateStatic>
 800083e:	e7f5      	b.n	800082c <osEventFlagsNew+0x20>
      mem = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	e7f0      	b.n	8000826 <osEventFlagsNew+0x1a>
          mem = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	e7ee      	b.n	8000826 <osEventFlagsNew+0x1a>
  hEventGroup = NULL;
 8000848:	2000      	movs	r0, #0
 800084a:	e7ef      	b.n	800082c <osEventFlagsNew+0x20>
 800084c:	2000      	movs	r0, #0
  return ((osEventFlagsId_t)hEventGroup);
 800084e:	e7ed      	b.n	800082c <osEventFlagsNew+0x20>

08000850 <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8000850:	b1f8      	cbz	r0, 8000892 <osEventFlagsSet+0x42>
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8000852:	b510      	push	{r4, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	460c      	mov	r4, r1
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8000858:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 800085c:	d21c      	bcs.n	8000898 <osEventFlagsSet+0x48>
 800085e:	f3ef 8205 	mrs	r2, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 8000862:	b19a      	cbz	r2, 800088c <osEventFlagsSet+0x3c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8000864:	2200      	movs	r2, #0
 8000866:	9201      	str	r2, [sp, #4]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8000868:	aa01      	add	r2, sp, #4
 800086a:	f000 f9e9 	bl	8000c40 <xEventGroupSetBitsFromISR>
 800086e:	b1b8      	cbz	r0, 80008a0 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
    } else {
      rflags = flags;
      portYIELD_FROM_ISR (yield);
 8000870:	9b01      	ldr	r3, [sp, #4]
 8000872:	b1c3      	cbz	r3, 80008a6 <osEventFlagsSet+0x56>
 8000874:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800087c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8000880:	f3bf 8f4f 	dsb	sy
 8000884:	f3bf 8f6f 	isb	sy
      rflags = flags;
 8000888:	4620      	mov	r0, r4
 800088a:	e007      	b.n	800089c <osEventFlagsSet+0x4c>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800088c:	f000 f98d 	bl	8000baa <xEventGroupSetBits>
 8000890:	e004      	b.n	800089c <osEventFlagsSet+0x4c>
    rflags = (uint32_t)osErrorParameter;
 8000892:	f06f 0003 	mvn.w	r0, #3
  }

  return (rflags);
}
 8000896:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 8000898:	f06f 0003 	mvn.w	r0, #3
}
 800089c:	b002      	add	sp, #8
 800089e:	bd10      	pop	{r4, pc}
      rflags = (uint32_t)osErrorResource;
 80008a0:	f06f 0002 	mvn.w	r0, #2
 80008a4:	e7fa      	b.n	800089c <osEventFlagsSet+0x4c>
      rflags = flags;
 80008a6:	4620      	mov	r0, r4
  return (rflags);
 80008a8:	e7f8      	b.n	800089c <osEventFlagsSet+0x4c>

080008aa <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80008aa:	b510      	push	{r4, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	461c      	mov	r4, r3
 80008b0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80008b4:	b1c3      	cbz	r3, 80008e8 <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80008b6:	b318      	cbz	r0, 8000900 <osMessageQueuePut+0x56>
 80008b8:	b329      	cbz	r1, 8000906 <osMessageQueuePut+0x5c>
 80008ba:	bb3c      	cbnz	r4, 800090c <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80008bc:	2300      	movs	r3, #0
 80008be:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80008c0:	aa01      	add	r2, sp, #4
 80008c2:	f001 fa94 	bl	8001dee <xQueueGenericSendFromISR>
 80008c6:	2801      	cmp	r0, #1
 80008c8:	d123      	bne.n	8000912 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80008ca:	9801      	ldr	r0, [sp, #4]
 80008cc:	b150      	cbz	r0, 80008e4 <osMessageQueuePut+0x3a>
 80008ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80008d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80008d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80008da:	f3bf 8f4f 	dsb	sy
 80008de:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80008e2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80008e4:	b002      	add	sp, #8
 80008e6:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80008e8:	b1b0      	cbz	r0, 8000918 <osMessageQueuePut+0x6e>
 80008ea:	b1c1      	cbz	r1, 800091e <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80008ec:	2300      	movs	r3, #0
 80008ee:	4622      	mov	r2, r4
 80008f0:	f001 f9b9 	bl	8001c66 <xQueueGenericSend>
 80008f4:	2801      	cmp	r0, #1
 80008f6:	d015      	beq.n	8000924 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 80008f8:	b1b4      	cbz	r4, 8000928 <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 80008fa:	f06f 0001 	mvn.w	r0, #1
 80008fe:	e7f1      	b.n	80008e4 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8000900:	f06f 0003 	mvn.w	r0, #3
 8000904:	e7ee      	b.n	80008e4 <osMessageQueuePut+0x3a>
 8000906:	f06f 0003 	mvn.w	r0, #3
 800090a:	e7eb      	b.n	80008e4 <osMessageQueuePut+0x3a>
 800090c:	f06f 0003 	mvn.w	r0, #3
 8000910:	e7e8      	b.n	80008e4 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 8000912:	f06f 0002 	mvn.w	r0, #2
 8000916:	e7e5      	b.n	80008e4 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8000918:	f06f 0003 	mvn.w	r0, #3
 800091c:	e7e2      	b.n	80008e4 <osMessageQueuePut+0x3a>
 800091e:	f06f 0003 	mvn.w	r0, #3
 8000922:	e7df      	b.n	80008e4 <osMessageQueuePut+0x3a>
  stat = osOK;
 8000924:	2000      	movs	r0, #0
 8000926:	e7dd      	b.n	80008e4 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 8000928:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800092c:	e7da      	b.n	80008e4 <osMessageQueuePut+0x3a>
	...

08000930 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000930:	4b03      	ldr	r3, [pc, #12]	@ (8000940 <vApplicationGetIdleTaskMemory+0x10>)
 8000932:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000934:	4b03      	ldr	r3, [pc, #12]	@ (8000944 <vApplicationGetIdleTaskMemory+0x14>)
 8000936:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000938:	2380      	movs	r3, #128	@ 0x80
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000894 	.word	0x20000894
 8000944:	20000694 	.word	0x20000694

08000948 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000948:	4b03      	ldr	r3, [pc, #12]	@ (8000958 <vApplicationGetTimerTaskMemory+0x10>)
 800094a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800094c:	4b03      	ldr	r3, [pc, #12]	@ (800095c <vApplicationGetTimerTaskMemory+0x14>)
 800094e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000950:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000954:	6013      	str	r3, [r2, #0]
}
 8000956:	4770      	bx	lr
 8000958:	20000638 	.word	0x20000638
 800095c:	20000238 	.word	0x20000238

08000960 <controller_init_with_defaults>:
									' ', 'm', 's', 'a', 'l', 'a', 'm', 'o', 'n', '.', 'p', 'l'};
uint16_t VarDataTabRead[NB_OF_VAR];
uint16_t VarIndex,VarDataTmp = 0;

void controller_init_with_defaults()
{   
 8000960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000962:	b089      	sub	sp, #36	@ 0x24
    /* Initialize engine flags */
    static const osEventFlagsAttr_t engine_flags_attributes =
    {
        .name = "engine_flags"
    };
    engine.flags = osEventFlagsNew(&engine_flags_attributes);
 8000964:	482a      	ldr	r0, [pc, #168]	@ (8000a10 <controller_init_with_defaults+0xb0>)
 8000966:	f7ff ff51 	bl	800080c <osEventFlagsNew>
 800096a:	4e2a      	ldr	r6, [pc, #168]	@ (8000a14 <controller_init_with_defaults+0xb4>)
 800096c:	64b0      	str	r0, [r6, #72]	@ 0x48

    /* Initialize engine stats to 0 */
    engine.total_revolutions = 0;
 800096e:	2500      	movs	r5, #0
 8000970:	6035      	str	r5, [r6, #0]
    engine.crankshaft_angle = 0;
 8000972:	2700      	movs	r7, #0
 8000974:	6077      	str	r7, [r6, #4]
    engine.camshaft_angle = 0;
 8000976:	60b7      	str	r7, [r6, #8]
    engine.rpm = 0;
 8000978:	60f7      	str	r7, [r6, #12]
    engine.cylinder_count = 4;
 800097a:	2204      	movs	r2, #4
 800097c:	7432      	strb	r2, [r6, #16]
    engine.spinning_state = SS_STOPPED;
 800097e:	7475      	strb	r5, [r6, #17]
    engine.trigger.initialized = false;
 8000980:	f806 5f1c 	strb.w	r5, [r6, #28]!

    /* Start controller timing */
    controller_timing_start(&htim2);
 8000984:	4824      	ldr	r0, [pc, #144]	@ (8000a18 <controller_init_with_defaults+0xb8>)
 8000986:	f006 fb9b 	bl	80070c0 <controller_timing_start>

    /* Init analog inputs*/
    analog_inputs_init(&hadc1);
 800098a:	4824      	ldr	r0, [pc, #144]	@ (8000a1c <controller_init_with_defaults+0xbc>)
 800098c:	f7ff fdf0 	bl	8000570 <analog_inputs_init>

    
    configuration.engine_displacment = 2.4f;
 8000990:	4c23      	ldr	r4, [pc, #140]	@ (8000a20 <controller_init_with_defaults+0xc0>)
 8000992:	4b24      	ldr	r3, [pc, #144]	@ (8000a24 <controller_init_with_defaults+0xc4>)
 8000994:	6023      	str	r3, [r4, #0]
    configuration.firing_order = FO_1342;
 8000996:	7125      	strb	r5, [r4, #4]
    configuration.fuel_type = FUEL_TYPE_GAS;
 8000998:	7165      	strb	r5, [r4, #5]
    
    
    configuration.cranking_rpm_threshold = 400;
 800099a:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <controller_init_with_defaults+0xc8>)
 800099c:	60e3      	str	r3, [r4, #12]
    configuration.cranking_advance = 10.0f;
 800099e:	4b23      	ldr	r3, [pc, #140]	@ (8000a2c <controller_init_with_defaults+0xcc>)
 80009a0:	6123      	str	r3, [r4, #16]
    configuration.cranking_throttle = 10;
 80009a2:	6163      	str	r3, [r4, #20]
    
    configuration.ignition_mode = IM_WASTED_SPARK;
 80009a4:	2303      	movs	r3, #3
 80009a6:	7623      	strb	r3, [r4, #24]
    configuration.ignition_dwell = 3.0f;
 80009a8:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <controller_init_with_defaults+0xd0>)
 80009aa:	61e3      	str	r3, [r4, #28]
    configuration.ignition_is_multi_spark = false;
 80009ac:	f884 5020 	strb.w	r5, [r4, #32]
    configuration.ignition_multi_spark_number_of_sparks = 0;
 80009b0:	f884 5021 	strb.w	r5, [r4, #33]	@ 0x21
    configuration.ignition_multi_spark_rpm_threshold = 0;
 80009b4:	6267      	str	r7, [r4, #36]	@ 0x24
    configuration.ignition_multi_spark_rest_time = 0;
 80009b6:	62a7      	str	r7, [r4, #40]	@ 0x28
    
    
    /* Initialize trigger */
    configuration.trigger.filtering = TRIGGER_FILTERING_NONE;
 80009b8:	71a5      	strb	r5, [r4, #6]
    configuration.trigger.full_teeth = 60;
 80009ba:	233c      	movs	r3, #60	@ 0x3c
 80009bc:	71e3      	strb	r3, [r4, #7]
    configuration.trigger.missing_teeth = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	7223      	strb	r3, [r4, #8]
    trigger_init(&engine.trigger, &configuration.trigger);
 80009c2:	1da1      	adds	r1, r4, #6
 80009c4:	4630      	mov	r0, r6
 80009c6:	f006 fc81 	bl	80072cc <trigger_init>
        .wide_open_throttle_adc_value = 4095,
        .is_inverted = false
    };
    
    /* CLT */
    configuration.clt_sensor_type = SENSOR_CLT_TYPE_TEST;
 80009ca:	f884 5940 	strb.w	r5, [r4, #2368]	@ 0x940
    static thermistor_t sensor_clt = {0};
    sensor_clt_init(&sensor_clt, configuration.clt_sensor_type);
 80009ce:	4629      	mov	r1, r5
 80009d0:	4818      	ldr	r0, [pc, #96]	@ (8000a34 <controller_init_with_defaults+0xd4>)
 80009d2:	f001 fc5d 	bl	8002290 <sensor_clt_init>

    /* IAT */
    configuration.iat_sensor_type = SENSOR_IAT_TYPE_TEST;
 80009d6:	f884 5941 	strb.w	r5, [r4, #2369]	@ 0x941
    static thermistor_t sensor_iat = {0};
    sensor_iat_init(&sensor_iat, configuration.iat_sensor_type);
 80009da:	4629      	mov	r1, r5
 80009dc:	4816      	ldr	r0, [pc, #88]	@ (8000a38 <controller_init_with_defaults+0xd8>)
 80009de:	f001 fbd9 	bl	8002194 <sensor_iat_init>

    /* MAP */
    configuration.map_sensor_type = SENSOR_MAP_TYPE_TEST;
 80009e2:	f884 5942 	strb.w	r5, [r4, #2370]	@ 0x942
    static sensor_map_t sensor_map = {0};
    sensor_map_init(&sensor_map, configuration.map_sensor_type);
 80009e6:	4629      	mov	r1, r5
 80009e8:	4814      	ldr	r0, [pc, #80]	@ (8000a3c <controller_init_with_defaults+0xdc>)
 80009ea:	f001 fbad 	bl	8002148 <sensor_map_init>

    /* OPS */
    static sensor_ops_t sensor_ops = {0};
    sensor_ops_init(&sensor_ops);
 80009ee:	4814      	ldr	r0, [pc, #80]	@ (8000a40 <controller_init_with_defaults+0xe0>)
 80009f0:	f001 fcd0 	bl	8002394 <sensor_ops_init>
    //static fan_control_t fan1 = {.on_flag = ENGINE_FLAG_FAN_ON, .pin = {FAN1_GPIO_Port, FAN1_Pin}, .temp_off = 80.0f, .temp_on = 85.0f};
    //fan_control_update(&fan1);


    /* Initialize ignition */
    ignition_output_conf_t ignition_output_conf =
 80009f4:	466c      	mov	r4, sp
 80009f6:	4d13      	ldr	r5, [pc, #76]	@ (8000a44 <controller_init_with_defaults+0xe4>)
 80009f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .output[0] = {.gpio = IGNITION_OUTPUT1_GPIO_Port, .pin = IGNITION_OUTPUT1_Pin},
        .output[1] = {.gpio = IGNITION_OUTPUT2_GPIO_Port, .pin = IGNITION_OUTPUT2_Pin},
        .output[2] = {.gpio = IGNITION_OUTPUT3_GPIO_Port, .pin = IGNITION_OUTPUT3_Pin},
        .output[3] = {.gpio = IGNITION_OUTPUT4_GPIO_Port, .pin = IGNITION_OUTPUT4_Pin}
    };
    ignition_init(&ignition_output_conf);
 8000a04:	4668      	mov	r0, sp
 8000a06:	f000 fc2d 	bl	8001264 <ignition_init>

}
 8000a0a:	b009      	add	sp, #36	@ 0x24
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	08009ee8 	.word	0x08009ee8
 8000a14:	20000938 	.word	0x20000938
 8000a18:	20005a24 	.word	0x20005a24
 8000a1c:	200001cc 	.word	0x200001cc
 8000a20:	20000994 	.word	0x20000994
 8000a24:	4019999a 	.word	0x4019999a
 8000a28:	43c80000 	.word	0x43c80000
 8000a2c:	41200000 	.word	0x41200000
 8000a30:	40400000 	.word	0x40400000
 8000a34:	20000920 	.word	0x20000920
 8000a38:	20000908 	.word	0x20000908
 8000a3c:	20000900 	.word	0x20000900
 8000a40:	200008f8 	.word	0x200008f8
 8000a44:	08009a80 	.word	0x08009a80

08000a48 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000a48:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <MX_CRC_Init+0x18>)
 8000a4c:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <MX_CRC_Init+0x1c>)
 8000a4e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a50:	f002 f81e 	bl	8002a90 <HAL_CRC_Init>
 8000a54:	b900      	cbnz	r0, 8000a58 <MX_CRC_Init+0x10>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a56:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a58:	f000 fd9c 	bl	8001594 <Error_Handler>
}
 8000a5c:	e7fb      	b.n	8000a56 <MX_CRC_Init+0xe>
 8000a5e:	bf00      	nop
 8000a60:	20001330 	.word	0x20001330
 8000a64:	40023000 	.word	0x40023000

08000a68 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000a68:	6802      	ldr	r2, [r0, #0]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <HAL_CRC_MspInit+0x28>)
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d000      	beq.n	8000a72 <HAL_CRC_MspInit+0xa>
 8000a70:	4770      	bx	lr
{
 8000a72:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	9301      	str	r3, [sp, #4]
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_CRC_MspInit+0x2c>)
 8000a7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a7c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000a80:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000a8c:	b002      	add	sp, #8
 8000a8e:	4770      	bx	lr
 8000a90:	40023000 	.word	0x40023000
 8000a94:	40023800 	.word	0x40023800

08000a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a98:	b500      	push	{lr}
 8000a9a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	9201      	str	r2, [sp, #4]
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <MX_DMA_Init+0x30>)
 8000aa2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000aa4:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8000aa8:	6319      	str	r1, [r3, #48]	@ 0x30
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000ab4:	2105      	movs	r1, #5
 8000ab6:	2038      	movs	r0, #56	@ 0x38
 8000ab8:	f001 ffd6 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000abc:	2038      	movs	r0, #56	@ 0x38
 8000abe:	f001 ffe3 	bl	8002a88 <HAL_NVIC_EnableIRQ>

}
 8000ac2:	b003      	add	sp, #12
 8000ac4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ac8:	40023800 	.word	0x40023800

08000acc <log_error>:
#include "error_handling.h"


void log_error(const char* message)
{
    if (message == NULL) return;
 8000acc:	b1c0      	cbz	r0, 8000b00 <log_error+0x34>
{
 8000ace:	b570      	push	{r4, r5, r6, lr}
 8000ad0:	b09a      	sub	sp, #104	@ 0x68
 8000ad2:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 8000ad4:	ac01      	add	r4, sp, #4
 8000ad6:	2564      	movs	r5, #100	@ 0x64
 8000ad8:	462a      	mov	r2, r5
 8000ada:	2100      	movs	r1, #0
 8000adc:	4620      	mov	r0, r4
 8000ade:	f008 f893 	bl	8008c08 <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Error: %s\n", message);
 8000ae2:	4633      	mov	r3, r6
 8000ae4:	4a07      	ldr	r2, [pc, #28]	@ (8000b04 <log_error+0x38>)
 8000ae6:	4629      	mov	r1, r5
 8000ae8:	4620      	mov	r0, r4
 8000aea:	f008 f857 	bl	8008b9c <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 8000aee:	4620      	mov	r0, r4
 8000af0:	f7ff fb56 	bl	80001a0 <strlen>
 8000af4:	b281      	uxth	r1, r0
 8000af6:	4620      	mov	r0, r4
 8000af8:	f007 f83c 	bl	8007b74 <CDC_Transmit_FS>
}
 8000afc:	b01a      	add	sp, #104	@ 0x68
 8000afe:	bd70      	pop	{r4, r5, r6, pc}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	08009b48 	.word	0x08009b48

08000b08 <log_warning>:

void log_warning(const char* message)
{
    if (message == NULL) return;
 8000b08:	b1c0      	cbz	r0, 8000b3c <log_warning+0x34>
{
 8000b0a:	b570      	push	{r4, r5, r6, lr}
 8000b0c:	b09a      	sub	sp, #104	@ 0x68
 8000b0e:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 8000b10:	ac01      	add	r4, sp, #4
 8000b12:	2564      	movs	r5, #100	@ 0x64
 8000b14:	462a      	mov	r2, r5
 8000b16:	2100      	movs	r1, #0
 8000b18:	4620      	mov	r0, r4
 8000b1a:	f008 f875 	bl	8008c08 <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Warning: %s\n", message);
 8000b1e:	4633      	mov	r3, r6
 8000b20:	4a07      	ldr	r2, [pc, #28]	@ (8000b40 <log_warning+0x38>)
 8000b22:	4629      	mov	r1, r5
 8000b24:	4620      	mov	r0, r4
 8000b26:	f008 f839 	bl	8008b9c <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f7ff fb38 	bl	80001a0 <strlen>
 8000b30:	b281      	uxth	r1, r0
 8000b32:	4620      	mov	r0, r4
 8000b34:	f007 f81e 	bl	8007b74 <CDC_Transmit_FS>
 8000b38:	b01a      	add	sp, #104	@ 0x68
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	08009b54 	.word	0x08009b54

08000b44 <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8000b44:	b180      	cbz	r0, 8000b68 <xEventGroupCreateStatic+0x24>
	{
 8000b46:	b510      	push	{r4, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8000b50:	9b01      	ldr	r3, [sp, #4]
 8000b52:	2b20      	cmp	r3, #32
 8000b54:	d011      	beq.n	8000b7a <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b5a:	f383 8811 	msr	BASEPRI, r3
 8000b5e:	f3bf 8f6f 	isb	sy
 8000b62:	f3bf 8f4f 	dsb	sy
 8000b66:	e7fe      	b.n	8000b66 <xEventGroupCreateStatic+0x22>
 8000b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b6c:	f383 8811 	msr	BASEPRI, r3
 8000b70:	f3bf 8f6f 	isb	sy
 8000b74:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 8000b78:	e7fe      	b.n	8000b78 <xEventGroupCreateStatic+0x34>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8000b80:	f000 fcae 	bl	80014e0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8000b84:	2301      	movs	r3, #1
 8000b86:	7723      	strb	r3, [r4, #28]
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
	}
 8000b88:	4620      	mov	r0, r4
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd10      	pop	{r4, pc}

08000b8e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8000b8e:	b538      	push	{r3, r4, r5, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8000b90:	2020      	movs	r0, #32
 8000b92:	f000 fa4b 	bl	800102c <pvPortMalloc>

		if( pxEventBits != NULL )
 8000b96:	4604      	mov	r4, r0
 8000b98:	b128      	cbz	r0, 8000ba6 <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 8000b9a:	2500      	movs	r5, #0
 8000b9c:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8000ba0:	f000 fc9e 	bl	80014e0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8000ba4:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	bd38      	pop	{r3, r4, r5, pc}

08000baa <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8000baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
EventGroup_t *pxEventBits = xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8000bac:	b168      	cbz	r0, 8000bca <xEventGroupSetBits+0x20>
 8000bae:	460d      	mov	r5, r1
 8000bb0:	4604      	mov	r4, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000bb2:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8000bb6:	d311      	bcc.n	8000bdc <xEventGroupSetBits+0x32>
 8000bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bbc:	f383 8811 	msr	BASEPRI, r3
 8000bc0:	f3bf 8f6f 	isb	sy
 8000bc4:	f3bf 8f4f 	dsb	sy
 8000bc8:	e7fe      	b.n	8000bc8 <xEventGroupSetBits+0x1e>
 8000bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bce:	f383 8811 	msr	BASEPRI, r3
 8000bd2:	f3bf 8f6f 	isb	sy
 8000bd6:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8000bda:	e7fe      	b.n	8000bda <xEventGroupSetBits+0x30>

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bdc:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
 8000be0:	f005 fa54 	bl	800608c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8000be4:	6920      	ldr	r0, [r4, #16]

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	432b      	orrs	r3, r5
 8000bea:	6023      	str	r3, [r4, #0]
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8000bec:	2700      	movs	r7, #0

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000bee:	e00a      	b.n	8000c06 <xEventGroupSetBits+0x5c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8000bf0:	6821      	ldr	r1, [r4, #0]
 8000bf2:	ea32 0101 	bics.w	r1, r2, r1
 8000bf6:	d105      	bne.n	8000c04 <xEventGroupSetBits+0x5a>
 8000bf8:	e011      	b.n	8000c1e <xEventGroupSetBits+0x74>
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8000bfa:	6821      	ldr	r1, [r4, #0]
 8000bfc:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8000c00:	f005 fc46 	bl	8006490 <vTaskRemoveFromUnorderedEventList>
{
 8000c04:	4628      	mov	r0, r5
		while( pxListItem != pxListEnd )
 8000c06:	42b0      	cmp	r0, r6
 8000c08:	d00e      	beq.n	8000c28 <xEventGroupSetBits+0x7e>
			pxNext = listGET_NEXT( pxListItem );
 8000c0a:	6845      	ldr	r5, [r0, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8000c0c:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000c0e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000c12:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8000c16:	d1eb      	bne.n	8000bf0 <xEventGroupSetBits+0x46>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000c18:	6821      	ldr	r1, [r4, #0]
 8000c1a:	4211      	tst	r1, r2
 8000c1c:	d0f2      	beq.n	8000c04 <xEventGroupSetBits+0x5a>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8000c1e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000c22:	d0ea      	beq.n	8000bfa <xEventGroupSetBits+0x50>
					uxBitsToClear |= uxBitsWaitedFor;
 8000c24:	4317      	orrs	r7, r2
 8000c26:	e7e8      	b.n	8000bfa <xEventGroupSetBits+0x50>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000c28:	6823      	ldr	r3, [r4, #0]
 8000c2a:	ea23 0307 	bic.w	r3, r3, r7
 8000c2e:	6023      	str	r3, [r4, #0]
	}
	( void ) xTaskResumeAll();
 8000c30:	f005 fac6 	bl	80061c0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
}
 8000c34:	6820      	ldr	r0, [r4, #0]
 8000c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c38 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8000c38:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8000c3a:	f7ff ffb6 	bl	8000baa <xEventGroupSetBits>
}
 8000c3e:	bd08      	pop	{r3, pc}

08000c40 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8000c40:	b508      	push	{r3, lr}
 8000c42:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8000c44:	460a      	mov	r2, r1
 8000c46:	4601      	mov	r1, r0
 8000c48:	4801      	ldr	r0, [pc, #4]	@ (8000c50 <xEventGroupSetBitsFromISR+0x10>)
 8000c4a:	f006 fa25 	bl	8007098 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 8000c4e:	bd08      	pop	{r3, pc}
 8000c50:	08000c39 	.word	0x08000c39

08000c54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c54:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c56:	f006 fca7 	bl	80075a8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  osDelay(100);
 8000c5a:	2064      	movs	r0, #100	@ 0x64
 8000c5c:	f7ff fd5a 	bl	8000714 <osDelay>
  
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f7ff fd57 	bl	8000714 <osDelay>
  for(;;)
 8000c66:	e7fb      	b.n	8000c60 <StartDefaultTask+0xc>

08000c68 <start_fuel_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_fuel_task */
void start_fuel_task(void *argument)
{
 8000c68:	b508      	push	{r3, lr}


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff fd52 	bl	8000714 <osDelay>
  for(;;)
 8000c70:	e7fb      	b.n	8000c6a <start_fuel_task+0x2>
	...

08000c74 <trigger_simulator_task>:
{
 8000c74:	b508      	push	{r3, lr}
  osDelay(100);
 8000c76:	2064      	movs	r0, #100	@ 0x64
 8000c78:	f7ff fd4c 	bl	8000714 <osDelay>
  trigger_simulator_init(60, 2, trigger_tooth_handle);
 8000c7c:	4a10      	ldr	r2, [pc, #64]	@ (8000cc0 <trigger_simulator_task+0x4c>)
 8000c7e:	2102      	movs	r1, #2
 8000c80:	203c      	movs	r0, #60	@ 0x3c
 8000c82:	f006 fc33 	bl	80074ec <trigger_simulator_init>
    simulated_rpm = (rpm_t)mapf((float)analog_inputs_get_data(ANALOG_INPUT_ETB2_SENSE2), 0.0f, 4095.0f, 10.0f, 1000.0f);
 8000c86:	2003      	movs	r0, #3
 8000c88:	f7ff fc96 	bl	80005b8 <analog_inputs_get_data>
 8000c8c:	ee07 0a90 	vmov	s15, r0
 8000c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
    if (in_max == in_min)
    {
        return 0.0f; // Avoid division by zero
    }
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000c94:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000cc4 <trigger_simulator_task+0x50>
 8000c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c9c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000cc8 <trigger_simulator_task+0x54>
 8000ca0:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8000ca4:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8000ca8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000cac:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <trigger_simulator_task+0x58>)
 8000cae:	ed83 0a00 	vstr	s0, [r3]
    trigger_simulator_update(simulated_rpm);
 8000cb2:	f006 fc29 	bl	8007508 <trigger_simulator_update>
    osDelay(1);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f7ff fd2c 	bl	8000714 <osDelay>
  for(;;)
 8000cbc:	e7e3      	b.n	8000c86 <trigger_simulator_task+0x12>
 8000cbe:	bf00      	nop
 8000cc0:	08007349 	.word	0x08007349
 8000cc4:	44778000 	.word	0x44778000
 8000cc8:	457ff000 	.word	0x457ff000
 8000ccc:	20000000 	.word	0x20000000

08000cd0 <controller_init_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controller_init_task */
void controller_init_task(void *argument)
{
 8000cd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN controller_init_task */

  controller_init_with_defaults();
 8000cd2:	f7ff fe45 	bl	8000960 <controller_init_with_defaults>


  for (size_t i = 0; i < (sizeof(test_table.x_bins) / sizeof(test_table.x_bins[0])); i++)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	e00e      	b.n	8000cf8 <controller_init_task+0x28>
  {
    test_table.x_bins[i] = i * 100;  // Example values
 8000cda:	2364      	movs	r3, #100	@ 0x64
 8000cdc:	fb02 f303 	mul.w	r3, r2, r3
 8000ce0:	f502 7080 	add.w	r0, r2, #256	@ 0x100
 8000ce4:	492d      	ldr	r1, [pc, #180]	@ (8000d9c <controller_init_task+0xcc>)
 8000ce6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cf2:	edc1 7a00 	vstr	s15, [r1]
  for (size_t i = 0; i < (sizeof(test_table.x_bins) / sizeof(test_table.x_bins[0])); i++)
 8000cf6:	3201      	adds	r2, #1
 8000cf8:	2a0f      	cmp	r2, #15
 8000cfa:	d9ee      	bls.n	8000cda <controller_init_task+0xa>
  }
  for (size_t i = 0; i < (sizeof(test_table.y_bins) / sizeof(test_table.y_bins[0])); i++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e00e      	b.n	8000d1e <controller_init_task+0x4e>
  {
    test_table.y_bins[i] = i * 10;  // Example values
 8000d00:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000d04:	0052      	lsls	r2, r2, #1
 8000d06:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8000d0a:	4924      	ldr	r1, [pc, #144]	@ (8000d9c <controller_init_task+0xcc>)
 8000d0c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8000d10:	ee07 2a90 	vmov	s15, r2
 8000d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d18:	edc1 7a00 	vstr	s15, [r1]
  for (size_t i = 0; i < (sizeof(test_table.y_bins) / sizeof(test_table.y_bins[0])); i++)
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	2b0f      	cmp	r3, #15
 8000d20:	d9ee      	bls.n	8000d00 <controller_init_task+0x30>
  }
  for (size_t i = 0; i < (sizeof(test_table.data) / sizeof(test_table.data[0])); i++)
 8000d22:	2000      	movs	r0, #0
 8000d24:	e011      	b.n	8000d4a <controller_init_task+0x7a>
  {
    for (size_t j = 0; j < (sizeof(test_table.data[0]) / sizeof(test_table.data[0][0])); j++)
    {
      test_table.data[i][j] = (i + 1) * (j + 1);  // Example values
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	fb00 2102 	mla	r1, r0, r2, r2
 8000d2c:	ee07 1a90 	vmov	s15, r1
 8000d30:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000d34:	4919      	ldr	r1, [pc, #100]	@ (8000d9c <controller_init_task+0xcc>)
 8000d36:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d3e:	edc3 7a00 	vstr	s15, [r3]
    for (size_t j = 0; j < (sizeof(test_table.data[0]) / sizeof(test_table.data[0][0])); j++)
 8000d42:	4613      	mov	r3, r2
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d9ee      	bls.n	8000d26 <controller_init_task+0x56>
  for (size_t i = 0; i < (sizeof(test_table.data) / sizeof(test_table.data[0])); i++)
 8000d48:	3001      	adds	r0, #1
 8000d4a:	280f      	cmp	r0, #15
 8000d4c:	d80c      	bhi.n	8000d68 <controller_init_task+0x98>
    for (size_t j = 0; j < (sizeof(test_table.data[0]) / sizeof(test_table.data[0][0])); j++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e7f8      	b.n	8000d44 <controller_init_task+0x74>
    load = 11.25f;  // Simulate load increase
    if (rpm > 5000)
    {
      rpm = -1000;
    }
    table_value = table_2d_get_value(&test_table, rpm, load);
 8000d52:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8000da0 <controller_init_task+0xd0>
 8000d56:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <controller_init_task+0xd4>)
 8000d58:	ed93 0a00 	vldr	s0, [r3]
 8000d5c:	480f      	ldr	r0, [pc, #60]	@ (8000d9c <controller_init_task+0xcc>)
 8000d5e:	f004 fe8f 	bl	8005a80 <table_2d_get_value>
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <controller_init_task+0xd8>)
 8000d64:	ed83 0a00 	vstr	s0, [r3]
    osDelay(100);
 8000d68:	2064      	movs	r0, #100	@ 0x64
 8000d6a:	f7ff fcd3 	bl	8000714 <osDelay>
    rpm += 10;  // Simulate RPM increase
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <controller_init_task+0xd4>)
 8000d70:	edd3 7a00 	vldr	s15, [r3]
 8000d74:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d7c:	edc3 7a00 	vstr	s15, [r3]
    load = 11.25f;  // Simulate load increase
 8000d80:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <controller_init_task+0xdc>)
 8000d82:	4a0b      	ldr	r2, [pc, #44]	@ (8000db0 <controller_init_task+0xe0>)
 8000d84:	601a      	str	r2, [r3, #0]
    if (rpm > 5000)
 8000d86:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000db4 <controller_init_task+0xe4>
 8000d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d92:	ddde      	ble.n	8000d52 <controller_init_task+0x82>
      rpm = -1000;
 8000d94:	4b03      	ldr	r3, [pc, #12]	@ (8000da4 <controller_init_task+0xd4>)
 8000d96:	4a08      	ldr	r2, [pc, #32]	@ (8000db8 <controller_init_task+0xe8>)
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	e7da      	b.n	8000d52 <controller_init_task+0x82>
 8000d9c:	2000135c 	.word	0x2000135c
 8000da0:	41340000 	.word	0x41340000
 8000da4:	2000133c 	.word	0x2000133c
 8000da8:	20001358 	.word	0x20001358
 8000dac:	20001338 	.word	0x20001338
 8000db0:	41340000 	.word	0x41340000
 8000db4:	459c4000 	.word	0x459c4000
 8000db8:	c47a0000 	.word	0xc47a0000

08000dbc <sensors_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensors_task */
void sensors_task(void *argument)
{
 8000dbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN sensors_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff fca8 	bl	8000714 <osDelay>
    engine.clt = sensor_clt_get();
 8000dc4:	f001 faba 	bl	800233c <sensor_clt_get>
 8000dc8:	4c05      	ldr	r4, [pc, #20]	@ (8000de0 <sensors_task+0x24>)
 8000dca:	ed84 0a14 	vstr	s0, [r4, #80]	@ 0x50
    engine.iat = sensor_iat_get();
 8000dce:	f001 fa31 	bl	8002234 <sensor_iat_get>
 8000dd2:	ed84 0a15 	vstr	s0, [r4, #84]	@ 0x54
    engine.oil_pressure = sensor_ops_get();
 8000dd6:	f001 faf1 	bl	80023bc <sensor_ops_get>
 8000dda:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
  for(;;)
 8000dde:	e7ee      	b.n	8000dbe <sensors_task+0x2>
 8000de0:	20000938 	.word	0x20000938

08000de4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000de4:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000de6:	4a14      	ldr	r2, [pc, #80]	@ (8000e38 <MX_FREERTOS_Init+0x54>)
 8000de8:	2100      	movs	r1, #0
 8000dea:	4814      	ldr	r0, [pc, #80]	@ (8000e3c <MX_FREERTOS_Init+0x58>)
 8000dec:	f7ff fc38 	bl	8000660 <osThreadNew>
 8000df0:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <MX_FREERTOS_Init+0x5c>)
 8000df2:	6018      	str	r0, [r3, #0]
  trig_simHandle = osThreadNew(trigger_simulator_task, NULL, &trig_sim_attributes);
 8000df4:	4a13      	ldr	r2, [pc, #76]	@ (8000e44 <MX_FREERTOS_Init+0x60>)
 8000df6:	2100      	movs	r1, #0
 8000df8:	4813      	ldr	r0, [pc, #76]	@ (8000e48 <MX_FREERTOS_Init+0x64>)
 8000dfa:	f7ff fc31 	bl	8000660 <osThreadNew>
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <MX_FREERTOS_Init+0x68>)
 8000e00:	6018      	str	r0, [r3, #0]
  fuel_taskHandle = osThreadNew(start_fuel_task, NULL, &fuel_task_attributes);
 8000e02:	4a13      	ldr	r2, [pc, #76]	@ (8000e50 <MX_FREERTOS_Init+0x6c>)
 8000e04:	2100      	movs	r1, #0
 8000e06:	4813      	ldr	r0, [pc, #76]	@ (8000e54 <MX_FREERTOS_Init+0x70>)
 8000e08:	f7ff fc2a 	bl	8000660 <osThreadNew>
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <MX_FREERTOS_Init+0x74>)
 8000e0e:	6018      	str	r0, [r3, #0]
  init_taskHandle = osThreadNew(controller_init_task, NULL, &init_task_attributes);
 8000e10:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <MX_FREERTOS_Init+0x78>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	4812      	ldr	r0, [pc, #72]	@ (8000e60 <MX_FREERTOS_Init+0x7c>)
 8000e16:	f7ff fc23 	bl	8000660 <osThreadNew>
 8000e1a:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <MX_FREERTOS_Init+0x80>)
 8000e1c:	6018      	str	r0, [r3, #0]
  sensor_taskHandle = osThreadNew(sensors_task, NULL, &sensor_task_attributes);
 8000e1e:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <MX_FREERTOS_Init+0x84>)
 8000e20:	2100      	movs	r1, #0
 8000e22:	4812      	ldr	r0, [pc, #72]	@ (8000e6c <MX_FREERTOS_Init+0x88>)
 8000e24:	f7ff fc1c 	bl	8000660 <osThreadNew>
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <MX_FREERTOS_Init+0x8c>)
 8000e2a:	6018      	str	r0, [r3, #0]
  engine_flagsHandle = osEventFlagsNew(&engine_flags_attributes);
 8000e2c:	4811      	ldr	r0, [pc, #68]	@ (8000e74 <MX_FREERTOS_Init+0x90>)
 8000e2e:	f7ff fced 	bl	800080c <osEventFlagsNew>
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <MX_FREERTOS_Init+0x94>)
 8000e34:	6018      	str	r0, [r3, #0]
}
 8000e36:	bd08      	pop	{r3, pc}
 8000e38:	08009f98 	.word	0x08009f98
 8000e3c:	08000c55 	.word	0x08000c55
 8000e40:	20001354 	.word	0x20001354
 8000e44:	08009f74 	.word	0x08009f74
 8000e48:	08000c75 	.word	0x08000c75
 8000e4c:	20001350 	.word	0x20001350
 8000e50:	08009f50 	.word	0x08009f50
 8000e54:	08000c69 	.word	0x08000c69
 8000e58:	2000134c 	.word	0x2000134c
 8000e5c:	08009f2c 	.word	0x08009f2c
 8000e60:	08000cd1 	.word	0x08000cd1
 8000e64:	20001348 	.word	0x20001348
 8000e68:	08009f08 	.word	0x08009f08
 8000e6c:	08000dbd 	.word	0x08000dbd
 8000e70:	20001344 	.word	0x20001344
 8000e74:	08009ef8 	.word	0x08009ef8
 8000e78:	20001340 	.word	0x20001340

08000e7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e80:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	ad05      	add	r5, sp, #20
 8000e84:	2400      	movs	r4, #0
 8000e86:	9405      	str	r4, [sp, #20]
 8000e88:	9406      	str	r4, [sp, #24]
 8000e8a:	9407      	str	r4, [sp, #28]
 8000e8c:	9408      	str	r4, [sp, #32]
 8000e8e:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	9401      	str	r4, [sp, #4]
 8000e92:	4b31      	ldr	r3, [pc, #196]	@ (8000f58 <MX_GPIO_Init+0xdc>)
 8000e94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e96:	f042 0204 	orr.w	r2, r2, #4
 8000e9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e9e:	f002 0204 	and.w	r2, r2, #4
 8000ea2:	9201      	str	r2, [sp, #4]
 8000ea4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea6:	9402      	str	r4, [sp, #8]
 8000ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eaa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000eae:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eb2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000eb6:	9202      	str	r2, [sp, #8]
 8000eb8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	9403      	str	r4, [sp, #12]
 8000ebc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ebe:	f042 0201 	orr.w	r2, r2, #1
 8000ec2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ec4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ec6:	f002 0201 	and.w	r2, r2, #1
 8000eca:	9203      	str	r2, [sp, #12]
 8000ecc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	9404      	str	r4, [sp, #16]
 8000ed0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ed2:	f042 0202 	orr.w	r2, r2, #2
 8000ed6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	9304      	str	r3, [sp, #16]
 8000ee0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ee2:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8000f60 <MX_GPIO_Init+0xe4>
 8000ee6:	4622      	mov	r2, r4
 8000ee8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eec:	4640      	mov	r0, r8
 8000eee:	f002 f8ce 	bl	800308e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FAN1_Pin|FAN2_Pin|IGNITION_OUTPUT4_Pin|IGNITION_OUTPUT3_Pin
 8000ef2:	4e1a      	ldr	r6, [pc, #104]	@ (8000f5c <MX_GPIO_Init+0xe0>)
 8000ef4:	4622      	mov	r2, r4
 8000ef6:	f24f 4104 	movw	r1, #62468	@ 0xf404
 8000efa:	4630      	mov	r0, r6
 8000efc:	f002 f8c7 	bl	800308e <HAL_GPIO_WritePin>
                          |IGNITION_OUTPUT2_Pin|IGNITION_OUTPUT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f04:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2701      	movs	r7, #1
 8000f08:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	4629      	mov	r1, r5
 8000f10:	4640      	mov	r0, r8
 8000f12:	f001 ffd1 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN1_Pin FAN2_Pin IGNITION_OUTPUT4_Pin IGNITION_OUTPUT3_Pin
                           IGNITION_OUTPUT2_Pin IGNITION_OUTPUT1_Pin */
  GPIO_InitStruct.Pin = FAN1_Pin|FAN2_Pin|IGNITION_OUTPUT4_Pin|IGNITION_OUTPUT3_Pin
 8000f16:	f24f 4304 	movw	r3, #62468	@ 0xf404
 8000f1a:	9305      	str	r3, [sp, #20]
                          |IGNITION_OUTPUT2_Pin|IGNITION_OUTPUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	4629      	mov	r1, r5
 8000f24:	4630      	mov	r0, r6
 8000f26:	f001 ffc7 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f2e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f34:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	4629      	mov	r1, r5
 8000f3a:	4630      	mov	r0, r6
 8000f3c:	f001 ffbc 	bl	8002eb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f40:	4622      	mov	r2, r4
 8000f42:	2105      	movs	r1, #5
 8000f44:	2017      	movs	r0, #23
 8000f46:	f001 fd8f 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f4a:	2017      	movs	r0, #23
 8000f4c:	f001 fd9c 	bl	8002a88 <HAL_NVIC_EnableIRQ>

}
 8000f50:	b00a      	add	sp, #40	@ 0x28
 8000f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	40020800 	.word	0x40020800

08000f64 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000f64:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000f66:	f012 0f07 	tst.w	r2, #7
 8000f6a:	d01e      	beq.n	8000faa <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000f6c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000f6e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000f72:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 8000f76:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000f78:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000f7a:	480e      	ldr	r0, [pc, #56]	@ (8000fb4 <prvHeapInit+0x50>)
 8000f7c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000f7e:	2100      	movs	r1, #0
 8000f80:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000f82:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8000f84:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000f86:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8000f8a:	480b      	ldr	r0, [pc, #44]	@ (8000fb8 <prvHeapInit+0x54>)
 8000f8c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8000f8e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000f90:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000f92:	1a99      	subs	r1, r3, r2
 8000f94:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000f96:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <prvHeapInit+0x58>)
 8000f9a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <prvHeapInit+0x5c>)
 8000f9e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000fa0:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <prvHeapInit+0x60>)
 8000fa2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000faa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000fae:	e7e4      	b.n	8000f7a <prvHeapInit+0x16>
 8000fb0:	200017fc 	.word	0x200017fc
 8000fb4:	200017f4 	.word	0x200017f4
 8000fb8:	200017f0 	.word	0x200017f0
 8000fbc:	200017e8 	.word	0x200017e8
 8000fc0:	200017ec 	.word	0x200017ec
 8000fc4:	200017dc 	.word	0x200017dc

08000fc8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000fc8:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <prvInsertBlockIntoFreeList+0x5c>)
 8000fca:	461a      	mov	r2, r3
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4283      	cmp	r3, r0
 8000fd0:	d3fb      	bcc.n	8000fca <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000fd2:	6851      	ldr	r1, [r2, #4]
 8000fd4:	eb02 0c01 	add.w	ip, r2, r1
 8000fd8:	4584      	cmp	ip, r0
 8000fda:	d009      	beq.n	8000ff0 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000fdc:	6841      	ldr	r1, [r0, #4]
 8000fde:	eb00 0c01 	add.w	ip, r0, r1
 8000fe2:	4563      	cmp	r3, ip
 8000fe4:	d009      	beq.n	8000ffa <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000fe6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000fe8:	4290      	cmp	r0, r2
 8000fea:	d019      	beq.n	8001020 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000fec:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8000fee:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ff0:	6840      	ldr	r0, [r0, #4]
 8000ff2:	4401      	add	r1, r0
 8000ff4:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	e7f0      	b.n	8000fdc <prvInsertBlockIntoFreeList+0x14>
{
 8000ffa:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8001028 <prvInsertBlockIntoFreeList+0x60>)
 8000ffe:	6824      	ldr	r4, [r4, #0]
 8001000:	42a3      	cmp	r3, r4
 8001002:	d00b      	beq.n	800101c <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	4419      	add	r1, r3
 8001008:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800100a:	6813      	ldr	r3, [r2, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8001010:	4290      	cmp	r0, r2
 8001012:	d000      	beq.n	8001016 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001014:	6010      	str	r0, [r2, #0]
	}
}
 8001016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800101a:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800101c:	6004      	str	r4, [r0, #0]
 800101e:	e7f7      	b.n	8001010 <prvInsertBlockIntoFreeList+0x48>
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200017f4 	.word	0x200017f4
 8001028:	200017f0 	.word	0x200017f0

0800102c <pvPortMalloc>:
{
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001030:	f005 f82c 	bl	800608c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001034:	4b38      	ldr	r3, [pc, #224]	@ (8001118 <pvPortMalloc+0xec>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	b1b3      	cbz	r3, 8001068 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800103a:	4b38      	ldr	r3, [pc, #224]	@ (800111c <pvPortMalloc+0xf0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	421c      	tst	r4, r3
 8001040:	d150      	bne.n	80010e4 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8001042:	2c00      	cmp	r4, #0
 8001044:	d050      	beq.n	80010e8 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8001046:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800104a:	f014 0f07 	tst.w	r4, #7
 800104e:	d002      	beq.n	8001056 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001050:	f022 0207 	bic.w	r2, r2, #7
 8001054:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001056:	2a00      	cmp	r2, #0
 8001058:	d055      	beq.n	8001106 <pvPortMalloc+0xda>
 800105a:	4b31      	ldr	r3, [pc, #196]	@ (8001120 <pvPortMalloc+0xf4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4293      	cmp	r3, r2
 8001060:	d353      	bcc.n	800110a <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8001062:	4930      	ldr	r1, [pc, #192]	@ (8001124 <pvPortMalloc+0xf8>)
 8001064:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001066:	e004      	b.n	8001072 <pvPortMalloc+0x46>
			prvHeapInit();
 8001068:	f7ff ff7c 	bl	8000f64 <prvHeapInit>
 800106c:	e7e5      	b.n	800103a <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800106e:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8001070:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001072:	6863      	ldr	r3, [r4, #4]
 8001074:	4293      	cmp	r3, r2
 8001076:	d202      	bcs.n	800107e <pvPortMalloc+0x52>
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f7      	bne.n	800106e <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800107e:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <pvPortMalloc+0xec>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	42a3      	cmp	r3, r4
 8001084:	d043      	beq.n	800110e <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001086:	680d      	ldr	r5, [r1, #0]
 8001088:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800108e:	6863      	ldr	r3, [r4, #4]
 8001090:	1a9b      	subs	r3, r3, r2
 8001092:	2b10      	cmp	r3, #16
 8001094:	d910      	bls.n	80010b8 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001096:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001098:	f010 0f07 	tst.w	r0, #7
 800109c:	d008      	beq.n	80010b0 <pvPortMalloc+0x84>
 800109e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010a2:	f383 8811 	msr	BASEPRI, r3
 80010a6:	f3bf 8f6f 	isb	sy
 80010aa:	f3bf 8f4f 	dsb	sy
 80010ae:	e7fe      	b.n	80010ae <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010b0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010b2:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010b4:	f7ff ff88 	bl	8000fc8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010b8:	6862      	ldr	r2, [r4, #4]
 80010ba:	4919      	ldr	r1, [pc, #100]	@ (8001120 <pvPortMalloc+0xf4>)
 80010bc:	680b      	ldr	r3, [r1, #0]
 80010be:	1a9b      	subs	r3, r3, r2
 80010c0:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010c2:	4919      	ldr	r1, [pc, #100]	@ (8001128 <pvPortMalloc+0xfc>)
 80010c4:	6809      	ldr	r1, [r1, #0]
 80010c6:	428b      	cmp	r3, r1
 80010c8:	d201      	bcs.n	80010ce <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010ca:	4917      	ldr	r1, [pc, #92]	@ (8001128 <pvPortMalloc+0xfc>)
 80010cc:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <pvPortMalloc+0xf0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 80010da:	4a14      	ldr	r2, [pc, #80]	@ (800112c <pvPortMalloc+0x100>)
 80010dc:	6813      	ldr	r3, [r2, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e002      	b.n	80010ea <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 80010e4:	2500      	movs	r5, #0
 80010e6:	e000      	b.n	80010ea <pvPortMalloc+0xbe>
 80010e8:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 80010ea:	f005 f869 	bl	80061c0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010ee:	f015 0f07 	tst.w	r5, #7
 80010f2:	d00e      	beq.n	8001112 <pvPortMalloc+0xe6>
 80010f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010f8:	f383 8811 	msr	BASEPRI, r3
 80010fc:	f3bf 8f6f 	isb	sy
 8001100:	f3bf 8f4f 	dsb	sy
 8001104:	e7fe      	b.n	8001104 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8001106:	2500      	movs	r5, #0
 8001108:	e7ef      	b.n	80010ea <pvPortMalloc+0xbe>
 800110a:	2500      	movs	r5, #0
 800110c:	e7ed      	b.n	80010ea <pvPortMalloc+0xbe>
 800110e:	2500      	movs	r5, #0
 8001110:	e7eb      	b.n	80010ea <pvPortMalloc+0xbe>
}
 8001112:	4628      	mov	r0, r5
 8001114:	bd38      	pop	{r3, r4, r5, pc}
 8001116:	bf00      	nop
 8001118:	200017f0 	.word	0x200017f0
 800111c:	200017dc 	.word	0x200017dc
 8001120:	200017ec 	.word	0x200017ec
 8001124:	200017f4 	.word	0x200017f4
 8001128:	200017e8 	.word	0x200017e8
 800112c:	200017e4 	.word	0x200017e4

08001130 <vPortFree>:
	if( pv != NULL )
 8001130:	2800      	cmp	r0, #0
 8001132:	d034      	beq.n	800119e <vPortFree+0x6e>
{
 8001134:	b538      	push	{r3, r4, r5, lr}
 8001136:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8001138:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800113c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001140:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <vPortFree+0x70>)
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	4213      	tst	r3, r2
 8001146:	d108      	bne.n	800115a <vPortFree+0x2a>
 8001148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800114c:	f383 8811 	msr	BASEPRI, r3
 8001150:	f3bf 8f6f 	isb	sy
 8001154:	f3bf 8f4f 	dsb	sy
 8001158:	e7fe      	b.n	8001158 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800115a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800115e:	b141      	cbz	r1, 8001172 <vPortFree+0x42>
 8001160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001164:	f383 8811 	msr	BASEPRI, r3
 8001168:	f3bf 8f6f 	isb	sy
 800116c:	f3bf 8f4f 	dsb	sy
 8001170:	e7fe      	b.n	8001170 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001172:	ea23 0302 	bic.w	r3, r3, r2
 8001176:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800117a:	f004 ff87 	bl	800608c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800117e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001182:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <vPortFree+0x74>)
 8001184:	6813      	ldr	r3, [r2, #0]
 8001186:	440b      	add	r3, r1
 8001188:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800118a:	4628      	mov	r0, r5
 800118c:	f7ff ff1c 	bl	8000fc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001190:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <vPortFree+0x78>)
 8001192:	6813      	ldr	r3, [r2, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8001198:	f005 f812 	bl	80061c0 <xTaskResumeAll>
}
 800119c:	bd38      	pop	{r3, r4, r5, pc}
 800119e:	4770      	bx	lr
 80011a0:	200017dc 	.word	0x200017dc
 80011a4:	200017ec 	.word	0x200017ec
 80011a8:	200017e0 	.word	0x200017e0

080011ac <ignition_coil_begin_charge>:
 * 
 * @param coil_index The index of the coil to be charged.
 */
void ignition_coil_begin_charge(void *arg)
{
    if (arg == NULL)
 80011ac:	b310      	cbz	r0, 80011f4 <ignition_coil_begin_charge+0x48>
{
 80011ae:	b570      	push	{r4, r5, r6, lr}
 80011b0:	4604      	mov	r4, r0
    {
        return;
    }
    uint8_t *coil_index = (uint8_t*)arg;

    if (coil_index[1] > IGNITION_MAX_OUTPUTS - 1)
 80011b2:	7843      	ldrb	r3, [r0, #1]
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d819      	bhi.n	80011ec <ignition_coil_begin_charge+0x40>
    {
        log_error("Unkown ignition output");
        return;
    }
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_CHARGING;
 80011b8:	7802      	ldrb	r2, [r0, #0]
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <ignition_coil_begin_charge+0x4c>)
 80011bc:	2601      	movs	r6, #1
 80011be:	549e      	strb	r6, [r3, r2]
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_CHARGING;
 80011c0:	7842      	ldrb	r2, [r0, #1]
 80011c2:	549e      	strb	r6, [r3, r2]
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_SET);
 80011c4:	7803      	ldrb	r3, [r0, #0]
 80011c6:	4d0d      	ldr	r5, [pc, #52]	@ (80011fc <ignition_coil_begin_charge+0x50>)
 80011c8:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 80011cc:	4632      	mov	r2, r6
 80011ce:	8889      	ldrh	r1, [r1, #4]
 80011d0:	f855 0033 	ldr.w	r0, [r5, r3, lsl #3]
 80011d4:	f001 ff5b 	bl	800308e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_SET);
 80011d8:	7863      	ldrb	r3, [r4, #1]
 80011da:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 80011de:	4632      	mov	r2, r6
 80011e0:	8889      	ldrh	r1, [r1, #4]
 80011e2:	f855 0033 	ldr.w	r0, [r5, r3, lsl #3]
 80011e6:	f001 ff52 	bl	800308e <HAL_GPIO_WritePin>
}
 80011ea:	bd70      	pop	{r4, r5, r6, pc}
        log_error("Unkown ignition output");
 80011ec:	4804      	ldr	r0, [pc, #16]	@ (8001200 <ignition_coil_begin_charge+0x54>)
 80011ee:	f7ff fc6d 	bl	8000acc <log_error>
        return;
 80011f2:	e7fa      	b.n	80011ea <ignition_coil_begin_charge+0x3e>
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20005404 	.word	0x20005404
 80011fc:	20005408 	.word	0x20005408
 8001200:	08009ba0 	.word	0x08009ba0

08001204 <ignition_coil_fire_spark>:
 * 
 * @param coil_index The index of the coil to fire the spark from.
 */
void ignition_coil_fire_spark(void *arg)
{
    if (arg == NULL)
 8001204:	b320      	cbz	r0, 8001250 <ignition_coil_fire_spark+0x4c>
{
 8001206:	b570      	push	{r4, r5, r6, lr}
 8001208:	4604      	mov	r4, r0
    {
        return;
    }
    
    uint8_t *coil_index = (uint8_t*)arg;
    if (coil_index[1] > IGNITION_MAX_OUTPUTS - 1)
 800120a:	7843      	ldrb	r3, [r0, #1]
 800120c:	2b03      	cmp	r3, #3
 800120e:	d81b      	bhi.n	8001248 <ignition_coil_fire_spark+0x44>
    {
        log_error("Unkown ignition output");
        return;
    }
    
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_NOT_CHARGING;
 8001210:	7802      	ldrb	r2, [r0, #0]
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <ignition_coil_fire_spark+0x50>)
 8001214:	2500      	movs	r5, #0
 8001216:	549d      	strb	r5, [r3, r2]
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_NOT_CHARGING;
 8001218:	7842      	ldrb	r2, [r0, #1]
 800121a:	549d      	strb	r5, [r3, r2]
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_RESET);
 800121c:	7803      	ldrb	r3, [r0, #0]
 800121e:	4e0e      	ldr	r6, [pc, #56]	@ (8001258 <ignition_coil_fire_spark+0x54>)
 8001220:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8001224:	462a      	mov	r2, r5
 8001226:	8889      	ldrh	r1, [r1, #4]
 8001228:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
 800122c:	f001 ff2f 	bl	800308e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_RESET);
 8001230:	7863      	ldrb	r3, [r4, #1]
 8001232:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8001236:	462a      	mov	r2, r5
 8001238:	8889      	ldrh	r1, [r1, #4]
 800123a:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
 800123e:	f001 ff26 	bl	800308e <HAL_GPIO_WritePin>
    spark_is_in_progress = false;
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <ignition_coil_fire_spark+0x58>)
 8001244:	701d      	strb	r5, [r3, #0]
}
 8001246:	bd70      	pop	{r4, r5, r6, pc}
        log_error("Unkown ignition output");
 8001248:	4805      	ldr	r0, [pc, #20]	@ (8001260 <ignition_coil_fire_spark+0x5c>)
 800124a:	f7ff fc3f 	bl	8000acc <log_error>
        return;
 800124e:	e7fa      	b.n	8001246 <ignition_coil_fire_spark+0x42>
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20005404 	.word	0x20005404
 8001258:	20005408 	.word	0x20005408
 800125c:	200053fe 	.word	0x200053fe
 8001260:	08009ba0 	.word	0x08009ba0

08001264 <ignition_init>:
{
 8001264:	b510      	push	{r4, lr}
    if (output_conf == NULL)
 8001266:	b190      	cbz	r0, 800128e <ignition_init+0x2a>
 8001268:	4601      	mov	r1, r0
    switch (configuration.firing_order)
 800126a:	4b27      	ldr	r3, [pc, #156]	@ (8001308 <ignition_init+0xa4>)
 800126c:	791b      	ldrb	r3, [r3, #4]
 800126e:	b993      	cbnz	r3, 8001296 <ignition_init+0x32>
            engine.cylinder_count = 4;
 8001270:	4a26      	ldr	r2, [pc, #152]	@ (800130c <ignition_init+0xa8>)
 8001272:	2004      	movs	r0, #4
 8001274:	7410      	strb	r0, [r2, #16]
            ignition_order[0] = 1;
 8001276:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <ignition_init+0xac>)
 8001278:	2401      	movs	r4, #1
 800127a:	701c      	strb	r4, [r3, #0]
            ignition_order[1] = 3;
 800127c:	2403      	movs	r4, #3
 800127e:	705c      	strb	r4, [r3, #1]
            ignition_order[2] = 4;
 8001280:	7098      	strb	r0, [r3, #2]
            ignition_order[3] = 2;
 8001282:	2002      	movs	r0, #2
 8001284:	70d8      	strb	r0, [r3, #3]
    engine.firing_interval = (angle_t)720 / engine.cylinder_count;
 8001286:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <ignition_init+0xb0>)
 8001288:	6153      	str	r3, [r2, #20]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 800128a:	2300      	movs	r3, #0
 800128c:	e013      	b.n	80012b6 <ignition_init+0x52>
        log_error("ignition init failed. No output config");
 800128e:	4822      	ldr	r0, [pc, #136]	@ (8001318 <ignition_init+0xb4>)
 8001290:	f7ff fc1c 	bl	8000acc <log_error>
        return;
 8001294:	e002      	b.n	800129c <ignition_init+0x38>
            log_error("ignition init failed. unkown firing order.");
 8001296:	4821      	ldr	r0, [pc, #132]	@ (800131c <ignition_init+0xb8>)
 8001298:	f7ff fc18 	bl	8000acc <log_error>
}
 800129c:	bd10      	pop	{r4, pc}
        ignition_outputs[i].gpio = output_conf->output[i].gpio;
 800129e:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 80012a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001320 <ignition_init+0xbc>)
 80012a4:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
        ignition_outputs[i].pin = output_conf->output[i].pin;
 80012a8:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 80012ac:	6840      	ldr	r0, [r0, #4]
 80012ae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80012b2:	6050      	str	r0, [r2, #4]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 80012b4:	3301      	adds	r3, #1
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d9f1      	bls.n	800129e <ignition_init+0x3a>
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 80012ba:	2400      	movs	r4, #0
 80012bc:	e008      	b.n	80012d0 <ignition_init+0x6c>
        ignition_coil_state[i] = HAL_GPIO_ReadPin(ignition_outputs[i].gpio, ignition_outputs->pin);
 80012be:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <ignition_init+0xbc>)
 80012c0:	8899      	ldrh	r1, [r3, #4]
 80012c2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 80012c6:	f001 fedb 	bl	8003080 <HAL_GPIO_ReadPin>
 80012ca:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <ignition_init+0xc0>)
 80012cc:	5518      	strb	r0, [r3, r4]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 80012ce:	3401      	adds	r4, #1
 80012d0:	2c03      	cmp	r4, #3
 80012d2:	d9f4      	bls.n	80012be <ignition_init+0x5a>
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 80012d4:	2400      	movs	r4, #0
 80012d6:	e007      	b.n	80012e8 <ignition_init+0x84>
        HAL_GPIO_WritePin(ignition_outputs[i].gpio, ignition_outputs->pin, GPIO_PIN_RESET);
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <ignition_init+0xbc>)
 80012da:	2200      	movs	r2, #0
 80012dc:	8899      	ldrh	r1, [r3, #4]
 80012de:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 80012e2:	f001 fed4 	bl	800308e <HAL_GPIO_WritePin>
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 80012e6:	3401      	adds	r4, #1
 80012e8:	2c03      	cmp	r4, #3
 80012ea:	d9f5      	bls.n	80012d8 <ignition_init+0x74>
    if (configuration.ignition_is_multi_spark && !IS_IN_RANGE(configuration.ignition_multi_spark_number_of_sparks, 0, IGNITION_MULTI_SPARK_MAX_SPARKS))
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <ignition_init+0xa4>)
 80012ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0d2      	beq.n	800129c <ignition_init+0x38>
 80012f6:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <ignition_init+0xa4>)
 80012f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d9cd      	bls.n	800129c <ignition_init+0x38>
        log_warning("Multi spark is enabled but number of sparks are 0.");
 8001300:	4809      	ldr	r0, [pc, #36]	@ (8001328 <ignition_init+0xc4>)
 8001302:	f7ff fc01 	bl	8000b08 <log_warning>
 8001306:	e7c9      	b.n	800129c <ignition_init+0x38>
 8001308:	20000994 	.word	0x20000994
 800130c:	20000938 	.word	0x20000938
 8001310:	20005400 	.word	0x20005400
 8001314:	43340000 	.word	0x43340000
 8001318:	08009bb8 	.word	0x08009bb8
 800131c:	08009be0 	.word	0x08009be0
 8001320:	20005408 	.word	0x20005408
 8001324:	20005404 	.word	0x20005404
 8001328:	08009c0c 	.word	0x08009c0c

0800132c <ignition_trigger_event_handle>:
{
 800132c:	b530      	push	{r4, r5, lr}
 800132e:	b085      	sub	sp, #20
    if (engine.firing_interval == 0)
 8001330:	4b5d      	ldr	r3, [pc, #372]	@ (80014a8 <ignition_trigger_event_handle+0x17c>)
 8001332:	edd3 7a05 	vldr	s15, [r3, #20]
 8001336:	eef5 7a40 	vcmp.f32	s15, #0.0
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	f000 80a4 	beq.w	800148a <ignition_trigger_event_handle+0x15e>
    if (configuration.ignition_mode == IM_NO_IGNITION)
 8001342:	4b5a      	ldr	r3, [pc, #360]	@ (80014ac <ignition_trigger_event_handle+0x180>)
 8001344:	7e1b      	ldrb	r3, [r3, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 80a6 	beq.w	8001498 <ignition_trigger_event_handle+0x16c>
    if (!IS_IN_RANGE(configuration.ignition_dwell, IGNITION_MIN_DWELL_TIME_MS, IGNITION_MAX_DWELL_TIME_MS))
 800134c:	4b57      	ldr	r3, [pc, #348]	@ (80014ac <ignition_trigger_event_handle+0x180>)
 800134e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001352:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001356:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135e:	f2c0 8098 	blt.w	8001492 <ignition_trigger_event_handle+0x166>
 8001362:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001366:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136e:	f200 8090 	bhi.w	8001492 <ignition_trigger_event_handle+0x166>
    uint8_t phase = (uint8_t)(crankshaft_angle / engine.firing_interval);
 8001372:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8001376:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800137a:	edcd 6a01 	vstr	s13, [sp, #4]
 800137e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    volatile angle_t next_spark_angle = phase * engine.firing_interval - spark_advance + engine.firing_interval;
 8001382:	ee06 3a90 	vmov	s13, r3
 8001386:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800138a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800138e:	eeb3 6a0e 	vmov.f32	s12, #62	@ 0x41f00000  30.0
 8001392:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8001396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800139a:	edcd 7a03 	vstr	s15, [sp, #12]
    volatile angle_t next_dwell_angle = next_spark_angle - (float)configuration.ignition_dwell * (float)1000 * degrees_per_microsecond(rpm);
 800139e:	eddd 7a03 	vldr	s15, [sp, #12]
 80013a2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80014b0 <ignition_trigger_event_handle+0x184>
 80013a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 * @brief Function to calculate the degrees the engine turns in one microsecond.
 * @note Returns 0 if rpm is 0.
 */
static inline angle_t degrees_per_microsecond(rpm_t rpm)
{
    if (rpm == 0)
 80013aa:	eef5 0a40 	vcmp.f32	s1, #0.0
 80013ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b2:	d073      	beq.n	800149c <ignition_trigger_event_handle+0x170>
    {
        return 0.0f;
    }
    return (angle_t)(rpm * 360.0f) / (60.0f * 1e6f);
 80013b4:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80014b4 <ignition_trigger_event_handle+0x188>
 80013b8:	ee60 6aa6 	vmul.f32	s13, s1, s13
 80013bc:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80014b8 <ignition_trigger_event_handle+0x18c>
 80013c0:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 80013c4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80013c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013cc:	edcd 7a02 	vstr	s15, [sp, #8]
    next_firing_cylinders[0] = ignition_order[phase] - 1;
 80013d0:	4c3a      	ldr	r4, [pc, #232]	@ (80014bc <ignition_trigger_event_handle+0x190>)
 80013d2:	5ce2      	ldrb	r2, [r4, r3]
 80013d4:	3a01      	subs	r2, #1
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	4939      	ldr	r1, [pc, #228]	@ (80014c0 <ignition_trigger_event_handle+0x194>)
 80013da:	700a      	strb	r2, [r1, #0]
    next_firing_cylinders[1] = ignition_order[phase] - 1;
 80013dc:	704a      	strb	r2, [r1, #1]
        next_firing_cylinders[1] = ignition_order[phase + 2] - 1;
 80013de:	3302      	adds	r3, #2
 80013e0:	5ce3      	ldrb	r3, [r4, r3]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	704b      	strb	r3, [r1, #1]
    bool is_synced = engine.trigger.sync_status == TS_FULLY_SYNCED;
 80013e6:	4b30      	ldr	r3, [pc, #192]	@ (80014a8 <ignition_trigger_event_handle+0x17c>)
 80013e8:	7f5b      	ldrb	r3, [r3, #29]
    if (is_synced && (next_dwell_angle - crankshaft_angle) < 10 && !spark_is_in_progress && (next_dwell_angle - crankshaft_angle) > 0)
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d154      	bne.n	8001498 <ignition_trigger_event_handle+0x16c>
 80013ee:	eddd 7a02 	vldr	s15, [sp, #8]
 80013f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80013f6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	d549      	bpl.n	8001498 <ignition_trigger_event_handle+0x16c>
 8001404:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <ignition_trigger_event_handle+0x198>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d145      	bne.n	8001498 <ignition_trigger_event_handle+0x16c>
 800140c:	eddd 7a02 	vldr	s15, [sp, #8]
 8001410:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8001414:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141c:	dd3c      	ble.n	8001498 <ignition_trigger_event_handle+0x16c>
        spark_is_in_progress = true;
 800141e:	4b29      	ldr	r3, [pc, #164]	@ (80014c4 <ignition_trigger_event_handle+0x198>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
        time_us_t dwell_start_time_us = current_time_us + (time_us_t)((next_dwell_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 8001424:	ed9d 7a02 	vldr	s14, [sp, #8]
 8001428:	ee37 7a40 	vsub.f32	s14, s14, s0
    if (rpm == 0)
 800142c:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001434:	d035      	beq.n	80014a2 <ignition_trigger_event_handle+0x176>
    return (time_us_t) 60.0f * 1e6f / (rpm * 360.0f);
 8001436:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80014b4 <ignition_trigger_event_handle+0x188>
 800143a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800143e:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80014b8 <ignition_trigger_event_handle+0x18c>
 8001442:	eec6 7aa0 	vdiv.f32	s15, s13, s1
 8001446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800144e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001452:	eebc 7ac7 	vcvt.u32.f32	s14, s14
        time_us_t spark_start_time_us = current_time_us + (time_us_t)((next_spark_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 8001456:	eddd 6a03 	vldr	s13, [sp, #12]
 800145a:	ee76 6ac0 	vsub.f32	s13, s13, s0
 800145e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001466:	ee17 4a90 	vmov	r4, s15
 800146a:	4404      	add	r4, r0
        scheduler_schedule_event_with_arg(dwell_start_time_us, ignition_coil_begin_charge, (void*)next_firing_cylinders);
 800146c:	4d14      	ldr	r5, [pc, #80]	@ (80014c0 <ignition_trigger_event_handle+0x194>)
 800146e:	462a      	mov	r2, r5
 8001470:	4915      	ldr	r1, [pc, #84]	@ (80014c8 <ignition_trigger_event_handle+0x19c>)
 8001472:	ee17 3a10 	vmov	r3, s14
 8001476:	4403      	add	r3, r0
 8001478:	4618      	mov	r0, r3
 800147a:	f005 fedf 	bl	800723c <scheduler_schedule_event_with_arg>
        scheduler_schedule_event_with_arg(spark_start_time_us, ignition_coil_fire_spark, (void*)next_firing_cylinders);
 800147e:	462a      	mov	r2, r5
 8001480:	4912      	ldr	r1, [pc, #72]	@ (80014cc <ignition_trigger_event_handle+0x1a0>)
 8001482:	4620      	mov	r0, r4
 8001484:	f005 feda 	bl	800723c <scheduler_schedule_event_with_arg>
 8001488:	e006      	b.n	8001498 <ignition_trigger_event_handle+0x16c>
        log_error("ignition not initialized.");
 800148a:	4811      	ldr	r0, [pc, #68]	@ (80014d0 <ignition_trigger_event_handle+0x1a4>)
 800148c:	f7ff fb1e 	bl	8000acc <log_error>
        return;
 8001490:	e002      	b.n	8001498 <ignition_trigger_event_handle+0x16c>
        log_error("ignition dwell out of bounds.");
 8001492:	4810      	ldr	r0, [pc, #64]	@ (80014d4 <ignition_trigger_event_handle+0x1a8>)
 8001494:	f7ff fb1a 	bl	8000acc <log_error>
}
 8001498:	b005      	add	sp, #20
 800149a:	bd30      	pop	{r4, r5, pc}
        return 0.0f;
 800149c:	ed9f 6a0e 	vldr	s12, [pc, #56]	@ 80014d8 <ignition_trigger_event_handle+0x1ac>
 80014a0:	e790      	b.n	80013c4 <ignition_trigger_event_handle+0x98>
        return 0;
 80014a2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80014dc <ignition_trigger_event_handle+0x1b0>
 80014a6:	e7d0      	b.n	800144a <ignition_trigger_event_handle+0x11e>
 80014a8:	20000938 	.word	0x20000938
 80014ac:	20000994 	.word	0x20000994
 80014b0:	447a0000 	.word	0x447a0000
 80014b4:	43b40000 	.word	0x43b40000
 80014b8:	4c64e1c0 	.word	0x4c64e1c0
 80014bc:	20005400 	.word	0x20005400
 80014c0:	200053fc 	.word	0x200053fc
 80014c4:	200053fe 	.word	0x200053fe
 80014c8:	080011ad 	.word	0x080011ad
 80014cc:	08001205 	.word	0x08001205
 80014d0:	08009c40 	.word	0x08009c40
 80014d4:	08009c5c 	.word	0x08009c5c
	...

080014e0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014e0:	f100 0308 	add.w	r3, r0, #8
 80014e4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80014e6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ea:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014ec:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014ee:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80014f4:	4770      	bx	lr

080014f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80014fa:	4770      	bx	lr

080014fc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80014fc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80014fe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001504:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001506:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001508:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800150a:	6803      	ldr	r3, [r0, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	6003      	str	r3, [r0, #0]
}
 8001510:	4770      	bx	lr

08001512 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001512:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001514:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001516:	f1b5 3fff 	cmp.w	r5, #4294967295
 800151a:	d011      	beq.n	8001540 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800151c:	f100 0308 	add.w	r3, r0, #8
 8001520:	461c      	mov	r4, r3
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	42aa      	cmp	r2, r5
 8001528:	d9fa      	bls.n	8001520 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800152a:	6863      	ldr	r3, [r4, #4]
 800152c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800152e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001530:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001532:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001534:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001536:	6803      	ldr	r3, [r0, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	6003      	str	r3, [r0, #0]
}
 800153c:	bc30      	pop	{r4, r5}
 800153e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8001540:	6904      	ldr	r4, [r0, #16]
 8001542:	e7f2      	b.n	800152a <vListInsert+0x18>

08001544 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001544:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001546:	6841      	ldr	r1, [r0, #4]
 8001548:	6882      	ldr	r2, [r0, #8]
 800154a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800154c:	6841      	ldr	r1, [r0, #4]
 800154e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	4282      	cmp	r2, r0
 8001554:	d006      	beq.n	8001564 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001556:	2200      	movs	r2, #0
 8001558:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	3a01      	subs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001560:	6818      	ldr	r0, [r3, #0]
}
 8001562:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001564:	6882      	ldr	r2, [r0, #8]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	e7f5      	b.n	8001556 <uxListRemove+0x12>

0800156a <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  __NOP();
 800156a:	bf00      	nop
  if (GPIO_Pin == GPIO_PIN_9)
 800156c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001570:	d000      	beq.n	8001574 <HAL_GPIO_EXTI_Callback+0xa>
 8001572:	4770      	bx	lr
{
 8001574:	b508      	push	{r3, lr}
  {
    trigger_tooth_handle();
 8001576:	f005 fee7 	bl	8007348 <trigger_tooth_handle>
  }
}
 800157a:	bd08      	pop	{r3, pc}

0800157c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800157c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 800157e:	6802      	ldr	r2, [r0, #0]
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001582:	429a      	cmp	r2, r3
 8001584:	d000      	beq.n	8001588 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001586:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001588:	f000 ff66 	bl	8002458 <HAL_IncTick>
}
 800158c:	e7fb      	b.n	8001586 <HAL_TIM_PeriodElapsedCallback+0xa>
 800158e:	bf00      	nop
 8001590:	40014800 	.word	0x40014800

08001594 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001596:	e7fe      	b.n	8001596 <Error_Handler+0x2>

08001598 <SystemClock_Config>:
{
 8001598:	b510      	push	{r4, lr}
 800159a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159c:	ac08      	add	r4, sp, #32
 800159e:	2230      	movs	r2, #48	@ 0x30
 80015a0:	2100      	movs	r1, #0
 80015a2:	4620      	mov	r0, r4
 80015a4:	f007 fb30 	bl	8008c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	2300      	movs	r3, #0
 80015aa:	9303      	str	r3, [sp, #12]
 80015ac:	9304      	str	r3, [sp, #16]
 80015ae:	9305      	str	r3, [sp, #20]
 80015b0:	9306      	str	r3, [sp, #24]
 80015b2:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	4a21      	ldr	r2, [pc, #132]	@ (800163c <SystemClock_Config+0xa4>)
 80015b8:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80015ba:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80015be:	6411      	str	r1, [r2, #64]	@ 0x40
 80015c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015c2:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80015c6:	9201      	str	r2, [sp, #4]
 80015c8:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001640 <SystemClock_Config+0xa8>)
 80015ce:	6813      	ldr	r3, [r2, #0]
 80015d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	6813      	ldr	r3, [r2, #0]
 80015dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e4:	2301      	movs	r3, #1
 80015e6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ec:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ee:	2302      	movs	r3, #2
 80015f0:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015f6:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80015f8:	2319      	movs	r3, #25
 80015fa:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001600:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001602:	2304      	movs	r3, #4
 8001604:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001606:	2307      	movs	r3, #7
 8001608:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800160a:	4620      	mov	r0, r4
 800160c:	f002 fbb2 	bl	8003d74 <HAL_RCC_OscConfig>
 8001610:	b978      	cbnz	r0, 8001632 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001612:	230f      	movs	r3, #15
 8001614:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001616:	2102      	movs	r1, #2
 8001618:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800161e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001622:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001624:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001626:	a803      	add	r0, sp, #12
 8001628:	f002 fdf4 	bl	8004214 <HAL_RCC_ClockConfig>
 800162c:	b918      	cbnz	r0, 8001636 <SystemClock_Config+0x9e>
}
 800162e:	b014      	add	sp, #80	@ 0x50
 8001630:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001632:	f7ff ffaf 	bl	8001594 <Error_Handler>
    Error_Handler();
 8001636:	f7ff ffad 	bl	8001594 <Error_Handler>
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	40007000 	.word	0x40007000

08001644 <main>:
{
 8001644:	b508      	push	{r3, lr}
  HAL_Init();
 8001646:	f000 feed 	bl	8002424 <HAL_Init>
  SystemClock_Config();
 800164a:	f7ff ffa5 	bl	8001598 <SystemClock_Config>
  MX_GPIO_Init();
 800164e:	f7ff fc15 	bl	8000e7c <MX_GPIO_Init>
  MX_DMA_Init();
 8001652:	f7ff fa21 	bl	8000a98 <MX_DMA_Init>
  MX_TIM3_Init();
 8001656:	f005 fa1b 	bl	8006a90 <MX_TIM3_Init>
  MX_ADC1_Init();
 800165a:	f7fe fe33 	bl	80002c4 <MX_ADC1_Init>
  MX_TIM1_Init();
 800165e:	f005 f9b3 	bl	80069c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001662:	f005 f8c1 	bl	80067e8 <MX_TIM2_Init>
  MX_CRC_Init();
 8001666:	f7ff f9ef 	bl	8000a48 <MX_CRC_Init>
  osKernelInitialize();
 800166a:	f7fe ffcb 	bl	8000604 <osKernelInitialize>
  MX_FREERTOS_Init();
 800166e:	f7ff fbb9 	bl	8000de4 <MX_FREERTOS_Init>
  osKernelStart();
 8001672:	f7fe ffd9 	bl	8000628 <osKernelStart>
  while (1)
 8001676:	e7fe      	b.n	8001676 <main+0x32>

08001678 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001678:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <prvTaskExitError+0x3c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001686:	d008      	beq.n	800169a <prvTaskExitError+0x22>
 8001688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800168c:	f383 8811 	msr	BASEPRI, r3
 8001690:	f3bf 8f6f 	isb	sy
 8001694:	f3bf 8f4f 	dsb	sy
 8001698:	e7fe      	b.n	8001698 <prvTaskExitError+0x20>
 800169a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800169e:	f383 8811 	msr	BASEPRI, r3
 80016a2:	f3bf 8f6f 	isb	sy
 80016a6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80016aa:	9b01      	ldr	r3, [sp, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0fc      	beq.n	80016aa <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80016b0:	b002      	add	sp, #8
 80016b2:	4770      	bx	lr
 80016b4:	20000004 	.word	0x20000004

080016b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80016b8:	4808      	ldr	r0, [pc, #32]	@ (80016dc <prvPortStartFirstTask+0x24>)
 80016ba:	6800      	ldr	r0, [r0, #0]
 80016bc:	6800      	ldr	r0, [r0, #0]
 80016be:	f380 8808 	msr	MSP, r0
 80016c2:	f04f 0000 	mov.w	r0, #0
 80016c6:	f380 8814 	msr	CONTROL, r0
 80016ca:	b662      	cpsie	i
 80016cc:	b661      	cpsie	f
 80016ce:	f3bf 8f4f 	dsb	sy
 80016d2:	f3bf 8f6f 	isb	sy
 80016d6:	df00      	svc	0
 80016d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80016da:	0000      	.short	0x0000
 80016dc:	e000ed08 	.word	0xe000ed08

080016e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80016e0:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80016f0 <vPortEnableVFP+0x10>
 80016e4:	6801      	ldr	r1, [r0, #0]
 80016e6:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80016ea:	6001      	str	r1, [r0, #0]
 80016ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80016ee:	0000      	.short	0x0000
 80016f0:	e000ed88 	.word	0xe000ed88

080016f4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80016f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016f8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80016fc:	f021 0101 	bic.w	r1, r1, #1
 8001700:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001704:	4b05      	ldr	r3, [pc, #20]	@ (800171c <pxPortInitialiseStack+0x28>)
 8001706:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800170a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800170e:	f06f 0302 	mvn.w	r3, #2
 8001712:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001716:	3844      	subs	r0, #68	@ 0x44
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	08001679 	.word	0x08001679

08001720 <SVC_Handler>:
	__asm volatile (
 8001720:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <pxCurrentTCBConst2>)
 8001722:	6819      	ldr	r1, [r3, #0]
 8001724:	6808      	ldr	r0, [r1, #0]
 8001726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800172a:	f380 8809 	msr	PSP, r0
 800172e:	f3bf 8f6f 	isb	sy
 8001732:	f04f 0000 	mov.w	r0, #0
 8001736:	f380 8811 	msr	BASEPRI, r0
 800173a:	4770      	bx	lr
 800173c:	f3af 8000 	nop.w

08001740 <pxCurrentTCBConst2>:
 8001740:	200059d8 	.word	0x200059d8

08001744 <vPortEnterCritical>:
 8001744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001748:	f383 8811 	msr	BASEPRI, r3
 800174c:	f3bf 8f6f 	isb	sy
 8001750:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001754:	4a0b      	ldr	r2, [pc, #44]	@ (8001784 <vPortEnterCritical+0x40>)
 8001756:	6813      	ldr	r3, [r2, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800175c:	2b01      	cmp	r3, #1
 800175e:	d000      	beq.n	8001762 <vPortEnterCritical+0x1e>
}
 8001760:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001762:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001766:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800176a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800176e:	d0f7      	beq.n	8001760 <vPortEnterCritical+0x1c>
 8001770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001774:	f383 8811 	msr	BASEPRI, r3
 8001778:	f3bf 8f6f 	isb	sy
 800177c:	f3bf 8f4f 	dsb	sy
 8001780:	e7fe      	b.n	8001780 <vPortEnterCritical+0x3c>
 8001782:	bf00      	nop
 8001784:	20000004 	.word	0x20000004

08001788 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001788:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <vPortExitCritical+0x28>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	b943      	cbnz	r3, 80017a0 <vPortExitCritical+0x18>
 800178e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001792:	f383 8811 	msr	BASEPRI, r3
 8001796:	f3bf 8f6f 	isb	sy
 800179a:	f3bf 8f4f 	dsb	sy
 800179e:	e7fe      	b.n	800179e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80017a0:	3b01      	subs	r3, #1
 80017a2:	4a03      	ldr	r2, [pc, #12]	@ (80017b0 <vPortExitCritical+0x28>)
 80017a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80017a6:	b90b      	cbnz	r3, 80017ac <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80017a8:	f383 8811 	msr	BASEPRI, r3
}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000004 	.word	0x20000004
	...

080017c0 <PendSV_Handler>:
	__asm volatile
 80017c0:	f3ef 8009 	mrs	r0, PSP
 80017c4:	f3bf 8f6f 	isb	sy
 80017c8:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <pxCurrentTCBConst>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	f01e 0f10 	tst.w	lr, #16
 80017d0:	bf08      	it	eq
 80017d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80017d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017da:	6010      	str	r0, [r2, #0]
 80017dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80017e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80017e4:	f380 8811 	msr	BASEPRI, r0
 80017e8:	f3bf 8f4f 	dsb	sy
 80017ec:	f3bf 8f6f 	isb	sy
 80017f0:	f004 fd88 	bl	8006304 <vTaskSwitchContext>
 80017f4:	f04f 0000 	mov.w	r0, #0
 80017f8:	f380 8811 	msr	BASEPRI, r0
 80017fc:	bc09      	pop	{r0, r3}
 80017fe:	6819      	ldr	r1, [r3, #0]
 8001800:	6808      	ldr	r0, [r1, #0]
 8001802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001806:	f01e 0f10 	tst.w	lr, #16
 800180a:	bf08      	it	eq
 800180c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001810:	f380 8809 	msr	PSP, r0
 8001814:	f3bf 8f6f 	isb	sy
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	f3af 8000 	nop.w

08001820 <pxCurrentTCBConst>:
 8001820:	200059d8 	.word	0x200059d8

08001824 <xPortSysTickHandler>:
{
 8001824:	b508      	push	{r3, lr}
	__asm volatile
 8001826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800182a:	f383 8811 	msr	BASEPRI, r3
 800182e:	f3bf 8f6f 	isb	sy
 8001832:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001836:	f004 fc37 	bl	80060a8 <xTaskIncrementTick>
 800183a:	b128      	cbz	r0, 8001848 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800183c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001844:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8001848:	2300      	movs	r3, #0
 800184a:	f383 8811 	msr	BASEPRI, r3
}
 800184e:	bd08      	pop	{r3, pc}

08001850 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001850:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8001854:	2300      	movs	r3, #0
 8001856:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001858:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800185a:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <vPortSetupTimerInterrupt+0x20>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4905      	ldr	r1, [pc, #20]	@ (8001874 <vPortSetupTimerInterrupt+0x24>)
 8001860:	fba1 1303 	umull	r1, r3, r1, r3
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	3b01      	subs	r3, #1
 8001868:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800186a:	2307      	movs	r3, #7
 800186c:	6113      	str	r3, [r2, #16]
}
 800186e:	4770      	bx	lr
 8001870:	20000010 	.word	0x20000010
 8001874:	10624dd3 	.word	0x10624dd3

08001878 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001878:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800187c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001880:	4b3d      	ldr	r3, [pc, #244]	@ (8001978 <xPortStartScheduler+0x100>)
 8001882:	429a      	cmp	r2, r3
 8001884:	d01c      	beq.n	80018c0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001886:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800188a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800188e:	4b3b      	ldr	r3, [pc, #236]	@ (800197c <xPortStartScheduler+0x104>)
 8001890:	429a      	cmp	r2, r3
 8001892:	d01e      	beq.n	80018d2 <xPortStartScheduler+0x5a>
{
 8001894:	b530      	push	{r4, r5, lr}
 8001896:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001898:	4b39      	ldr	r3, [pc, #228]	@ (8001980 <xPortStartScheduler+0x108>)
 800189a:	781a      	ldrb	r2, [r3, #0]
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80018a0:	22ff      	movs	r2, #255	@ 0xff
 80018a2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80018ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80018b0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80018b4:	4a33      	ldr	r2, [pc, #204]	@ (8001984 <xPortStartScheduler+0x10c>)
 80018b6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80018b8:	4b33      	ldr	r3, [pc, #204]	@ (8001988 <xPortStartScheduler+0x110>)
 80018ba:	2207      	movs	r2, #7
 80018bc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80018be:	e01b      	b.n	80018f8 <xPortStartScheduler+0x80>
	__asm volatile
 80018c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018c4:	f383 8811 	msr	BASEPRI, r3
 80018c8:	f3bf 8f6f 	isb	sy
 80018cc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80018d0:	e7fe      	b.n	80018d0 <xPortStartScheduler+0x58>
 80018d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018d6:	f383 8811 	msr	BASEPRI, r3
 80018da:	f3bf 8f6f 	isb	sy
 80018de:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80018e2:	e7fe      	b.n	80018e2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 80018e4:	4a28      	ldr	r2, [pc, #160]	@ (8001988 <xPortStartScheduler+0x110>)
 80018e6:	6813      	ldr	r3, [r2, #0]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80018ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80018f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80018fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001900:	d1f0      	bne.n	80018e4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001902:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <xPortStartScheduler+0x110>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b03      	cmp	r3, #3
 8001908:	d008      	beq.n	800191c <xPortStartScheduler+0xa4>
 800190a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800190e:	f383 8811 	msr	BASEPRI, r3
 8001912:	f3bf 8f6f 	isb	sy
 8001916:	f3bf 8f4f 	dsb	sy
 800191a:	e7fe      	b.n	800191a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	4a1a      	ldr	r2, [pc, #104]	@ (8001988 <xPortStartScheduler+0x110>)
 8001920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001922:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001926:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001928:	9b01      	ldr	r3, [sp, #4]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4a14      	ldr	r2, [pc, #80]	@ (8001980 <xPortStartScheduler+0x108>)
 800192e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001930:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8001934:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8001938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800193c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001940:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8001944:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8001948:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800194c:	f7ff ff80 	bl	8001850 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001950:	2500      	movs	r5, #0
 8001952:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <xPortStartScheduler+0x114>)
 8001954:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8001956:	f7ff fec3 	bl	80016e0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800195a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800195e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001962:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8001966:	f7ff fea7 	bl	80016b8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800196a:	f004 fccb 	bl	8006304 <vTaskSwitchContext>
	prvTaskExitError();
 800196e:	f7ff fe83 	bl	8001678 <prvTaskExitError>
}
 8001972:	4628      	mov	r0, r5
 8001974:	b003      	add	sp, #12
 8001976:	bd30      	pop	{r4, r5, pc}
 8001978:	410fc271 	.word	0x410fc271
 800197c:	410fc270 	.word	0x410fc270
 8001980:	e000e400 	.word	0xe000e400
 8001984:	2000542c 	.word	0x2000542c
 8001988:	20005428 	.word	0x20005428
 800198c:	20000004 	.word	0x20000004

08001990 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001990:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d90e      	bls.n	80019b6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001998:	4a11      	ldr	r2, [pc, #68]	@ (80019e0 <vPortValidateInterruptPriority+0x50>)
 800199a:	5c9a      	ldrb	r2, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800199c:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <vPortValidateInterruptPriority+0x54>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d208      	bcs.n	80019b6 <vPortValidateInterruptPriority+0x26>
 80019a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019a8:	f383 8811 	msr	BASEPRI, r3
 80019ac:	f3bf 8f6f 	isb	sy
 80019b0:	f3bf 8f4f 	dsb	sy
 80019b4:	e7fe      	b.n	80019b4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80019b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80019ba:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80019be:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80019c2:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <vPortValidateInterruptPriority+0x58>)
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d908      	bls.n	80019dc <vPortValidateInterruptPriority+0x4c>
 80019ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019ce:	f383 8811 	msr	BASEPRI, r3
 80019d2:	f3bf 8f6f 	isb	sy
 80019d6:	f3bf 8f4f 	dsb	sy
 80019da:	e7fe      	b.n	80019da <vPortValidateInterruptPriority+0x4a>
	}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e3f0 	.word	0xe000e3f0
 80019e4:	2000542c 	.word	0x2000542c
 80019e8:	20005428 	.word	0x20005428

080019ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80019ec:	b510      	push	{r4, lr}
 80019ee:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80019f0:	f7ff fea8 	bl	8001744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80019f4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80019f6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d004      	beq.n	8001a06 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80019fc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80019fe:	f7ff fec3 	bl	8001788 <vPortExitCritical>

	return xReturn;
}
 8001a02:	4620      	mov	r0, r4
 8001a04:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8001a06:	2401      	movs	r4, #1
 8001a08:	e7f9      	b.n	80019fe <prvIsQueueFull+0x12>

08001a0a <prvIsQueueEmpty>:
{
 8001a0a:	b510      	push	{r4, lr}
 8001a0c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001a0e:	f7ff fe99 	bl	8001744 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001a12:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001a14:	b923      	cbnz	r3, 8001a20 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8001a16:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8001a18:	f7ff feb6 	bl	8001788 <vPortExitCritical>
}
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8001a20:	2400      	movs	r4, #0
 8001a22:	e7f9      	b.n	8001a18 <prvIsQueueEmpty+0xe>

08001a24 <prvCopyDataToQueue>:
{
 8001a24:	b570      	push	{r4, r5, r6, lr}
 8001a26:	4604      	mov	r4, r0
 8001a28:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a2a:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001a2c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001a2e:	b95a      	cbnz	r2, 8001a48 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a30:	6803      	ldr	r3, [r0, #0]
 8001a32:	b11b      	cbz	r3, 8001a3c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8001a34:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001a36:	3601      	adds	r6, #1
 8001a38:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8001a3a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001a3c:	6880      	ldr	r0, [r0, #8]
 8001a3e:	f004 fdd1 	bl	80065e4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60a3      	str	r3, [r4, #8]
 8001a46:	e7f6      	b.n	8001a36 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8001a48:	b96d      	cbnz	r5, 8001a66 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001a4a:	6840      	ldr	r0, [r0, #4]
 8001a4c:	f007 f910 	bl	8008c70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001a50:	6863      	ldr	r3, [r4, #4]
 8001a52:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001a54:	4413      	add	r3, r2
 8001a56:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001a58:	68a2      	ldr	r2, [r4, #8]
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d319      	bcc.n	8001a92 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8001a62:	4628      	mov	r0, r5
 8001a64:	e7e7      	b.n	8001a36 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001a66:	68c0      	ldr	r0, [r0, #12]
 8001a68:	f007 f902 	bl	8008c70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001a6c:	68e3      	ldr	r3, [r4, #12]
 8001a6e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001a70:	4251      	negs	r1, r2
 8001a72:	1a9b      	subs	r3, r3, r2
 8001a74:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001a76:	6822      	ldr	r2, [r4, #0]
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d202      	bcs.n	8001a82 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001a7c:	68a3      	ldr	r3, [r4, #8]
 8001a7e:	440b      	add	r3, r1
 8001a80:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001a82:	2d02      	cmp	r5, #2
 8001a84:	d001      	beq.n	8001a8a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8001a86:	2000      	movs	r0, #0
 8001a88:	e7d5      	b.n	8001a36 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001a8a:	b126      	cbz	r6, 8001a96 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8001a8c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8001a8e:	2000      	movs	r0, #0
 8001a90:	e7d1      	b.n	8001a36 <prvCopyDataToQueue+0x12>
 8001a92:	4628      	mov	r0, r5
 8001a94:	e7cf      	b.n	8001a36 <prvCopyDataToQueue+0x12>
 8001a96:	2000      	movs	r0, #0
 8001a98:	e7cd      	b.n	8001a36 <prvCopyDataToQueue+0x12>

08001a9a <prvCopyDataFromQueue>:
{
 8001a9a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001a9c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001a9e:	b16a      	cbz	r2, 8001abc <prvCopyDataFromQueue+0x22>
{
 8001aa0:	b510      	push	{r4, lr}
 8001aa2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001aa4:	68d9      	ldr	r1, [r3, #12]
 8001aa6:	4411      	add	r1, r2
 8001aa8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001aaa:	689c      	ldr	r4, [r3, #8]
 8001aac:	42a1      	cmp	r1, r4
 8001aae:	d301      	bcc.n	8001ab4 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001ab0:	6819      	ldr	r1, [r3, #0]
 8001ab2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ab4:	68d9      	ldr	r1, [r3, #12]
 8001ab6:	f007 f8db 	bl	8008c70 <memcpy>
}
 8001aba:	bd10      	pop	{r4, pc}
 8001abc:	4770      	bx	lr

08001abe <prvUnlockQueue>:
{
 8001abe:	b538      	push	{r3, r4, r5, lr}
 8001ac0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8001ac2:	f7ff fe3f 	bl	8001744 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001ac6:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8001aca:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001acc:	e001      	b.n	8001ad2 <prvUnlockQueue+0x14>
			--cTxLock;
 8001ace:	3c01      	subs	r4, #1
 8001ad0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ad2:	2c00      	cmp	r4, #0
 8001ad4:	dd0a      	ble.n	8001aec <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ad6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001ad8:	b143      	cbz	r3, 8001aec <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ada:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8001ade:	f004 fc91 	bl	8006404 <xTaskRemoveFromEventList>
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	d0f3      	beq.n	8001ace <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8001ae6:	f004 fd67 	bl	80065b8 <vTaskMissedYield>
 8001aea:	e7f0      	b.n	8001ace <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8001aec:	23ff      	movs	r3, #255	@ 0xff
 8001aee:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8001af2:	f7ff fe49 	bl	8001788 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001af6:	f7ff fe25 	bl	8001744 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001afa:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8001afe:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b00:	e001      	b.n	8001b06 <prvUnlockQueue+0x48>
				--cRxLock;
 8001b02:	3c01      	subs	r4, #1
 8001b04:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b06:	2c00      	cmp	r4, #0
 8001b08:	dd0a      	ble.n	8001b20 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b0a:	692b      	ldr	r3, [r5, #16]
 8001b0c:	b143      	cbz	r3, 8001b20 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b0e:	f105 0010 	add.w	r0, r5, #16
 8001b12:	f004 fc77 	bl	8006404 <xTaskRemoveFromEventList>
 8001b16:	2800      	cmp	r0, #0
 8001b18:	d0f3      	beq.n	8001b02 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8001b1a:	f004 fd4d 	bl	80065b8 <vTaskMissedYield>
 8001b1e:	e7f0      	b.n	8001b02 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8001b20:	23ff      	movs	r3, #255	@ 0xff
 8001b22:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8001b26:	f7ff fe2f 	bl	8001788 <vPortExitCritical>
}
 8001b2a:	bd38      	pop	{r3, r4, r5, pc}

08001b2c <xQueueGenericReset>:
{
 8001b2c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8001b2e:	b1e0      	cbz	r0, 8001b6a <xQueueGenericReset+0x3e>
 8001b30:	460d      	mov	r5, r1
 8001b32:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001b34:	f7ff fe06 	bl	8001744 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001b3c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001b3e:	fb01 3002 	mla	r0, r1, r2, r3
 8001b42:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b44:	2000      	movs	r0, #0
 8001b46:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b48:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b4a:	3a01      	subs	r2, #1
 8001b4c:	fb02 3301 	mla	r3, r2, r1, r3
 8001b50:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001b52:	23ff      	movs	r3, #255	@ 0xff
 8001b54:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001b58:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8001b5c:	b9fd      	cbnz	r5, 8001b9e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b5e:	6923      	ldr	r3, [r4, #16]
 8001b60:	b963      	cbnz	r3, 8001b7c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8001b62:	f7ff fe11 	bl	8001788 <vPortExitCritical>
}
 8001b66:	2001      	movs	r0, #1
 8001b68:	bd38      	pop	{r3, r4, r5, pc}
 8001b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b6e:	f383 8811 	msr	BASEPRI, r3
 8001b72:	f3bf 8f6f 	isb	sy
 8001b76:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001b7a:	e7fe      	b.n	8001b7a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b7c:	f104 0010 	add.w	r0, r4, #16
 8001b80:	f004 fc40 	bl	8006404 <xTaskRemoveFromEventList>
 8001b84:	2800      	cmp	r0, #0
 8001b86:	d0ec      	beq.n	8001b62 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8001b88:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b90:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001b94:	f3bf 8f4f 	dsb	sy
 8001b98:	f3bf 8f6f 	isb	sy
 8001b9c:	e7e1      	b.n	8001b62 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b9e:	f104 0010 	add.w	r0, r4, #16
 8001ba2:	f7ff fc9d 	bl	80014e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ba6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001baa:	f7ff fc99 	bl	80014e0 <vListInitialise>
 8001bae:	e7d8      	b.n	8001b62 <xQueueGenericReset+0x36>

08001bb0 <prvInitialiseNewQueue>:
{
 8001bb0:	b538      	push	{r3, r4, r5, lr}
 8001bb2:	461d      	mov	r5, r3
 8001bb4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	b949      	cbnz	r1, 8001bce <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001bba:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8001bbc:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001bbe:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f7ff ffb2 	bl	8001b2c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8001bc8:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8001bcc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001bce:	6022      	str	r2, [r4, #0]
 8001bd0:	e7f4      	b.n	8001bbc <prvInitialiseNewQueue+0xc>

08001bd2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001bd2:	b940      	cbnz	r0, 8001be6 <xQueueGenericCreateStatic+0x14>
 8001bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bd8:	f383 8811 	msr	BASEPRI, r3
 8001bdc:	f3bf 8f6f 	isb	sy
 8001be0:	f3bf 8f4f 	dsb	sy
 8001be4:	e7fe      	b.n	8001be4 <xQueueGenericCreateStatic+0x12>
	{
 8001be6:	b510      	push	{r4, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	461c      	mov	r4, r3
 8001bec:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8001bee:	b153      	cbz	r3, 8001c06 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001bf0:	b192      	cbz	r2, 8001c18 <xQueueGenericCreateStatic+0x46>
 8001bf2:	b989      	cbnz	r1, 8001c18 <xQueueGenericCreateStatic+0x46>
 8001bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bf8:	f383 8811 	msr	BASEPRI, r3
 8001bfc:	f3bf 8f6f 	isb	sy
 8001c00:	f3bf 8f4f 	dsb	sy
 8001c04:	e7fe      	b.n	8001c04 <xQueueGenericCreateStatic+0x32>
 8001c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c0a:	f383 8811 	msr	BASEPRI, r3
 8001c0e:	f3bf 8f6f 	isb	sy
 8001c12:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8001c16:	e7fe      	b.n	8001c16 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001c18:	b16a      	cbz	r2, 8001c36 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001c1a:	2350      	movs	r3, #80	@ 0x50
 8001c1c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001c1e:	9b03      	ldr	r3, [sp, #12]
 8001c20:	2b50      	cmp	r3, #80	@ 0x50
 8001c22:	d013      	beq.n	8001c4c <xQueueGenericCreateStatic+0x7a>
 8001c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c28:	f383 8811 	msr	BASEPRI, r3
 8001c2c:	f3bf 8f6f 	isb	sy
 8001c30:	f3bf 8f4f 	dsb	sy
 8001c34:	e7fe      	b.n	8001c34 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001c36:	2900      	cmp	r1, #0
 8001c38:	d0ef      	beq.n	8001c1a <xQueueGenericCreateStatic+0x48>
 8001c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c3e:	f383 8811 	msr	BASEPRI, r3
 8001c42:	f3bf 8f6f 	isb	sy
 8001c46:	f3bf 8f4f 	dsb	sy
 8001c4a:	e7fe      	b.n	8001c4a <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001c4c:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c54:	9400      	str	r4, [sp, #0]
 8001c56:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001c5a:	4660      	mov	r0, ip
 8001c5c:	f7ff ffa8 	bl	8001bb0 <prvInitialiseNewQueue>
	}
 8001c60:	4620      	mov	r0, r4
 8001c62:	b004      	add	sp, #16
 8001c64:	bd10      	pop	{r4, pc}

08001c66 <xQueueGenericSend>:
{
 8001c66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8001c6c:	b188      	cbz	r0, 8001c92 <xQueueGenericSend+0x2c>
 8001c6e:	460f      	mov	r7, r1
 8001c70:	461d      	mov	r5, r3
 8001c72:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c74:	b1b1      	cbz	r1, 8001ca4 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c76:	2d02      	cmp	r5, #2
 8001c78:	d120      	bne.n	8001cbc <xQueueGenericSend+0x56>
 8001c7a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d01d      	beq.n	8001cbc <xQueueGenericSend+0x56>
 8001c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c84:	f383 8811 	msr	BASEPRI, r3
 8001c88:	f3bf 8f6f 	isb	sy
 8001c8c:	f3bf 8f4f 	dsb	sy
 8001c90:	e7fe      	b.n	8001c90 <xQueueGenericSend+0x2a>
 8001c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c96:	f383 8811 	msr	BASEPRI, r3
 8001c9a:	f3bf 8f6f 	isb	sy
 8001c9e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001ca2:	e7fe      	b.n	8001ca2 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ca4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0e5      	beq.n	8001c76 <xQueueGenericSend+0x10>
 8001caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cae:	f383 8811 	msr	BASEPRI, r3
 8001cb2:	f3bf 8f6f 	isb	sy
 8001cb6:	f3bf 8f4f 	dsb	sy
 8001cba:	e7fe      	b.n	8001cba <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cbc:	f004 fc82 	bl	80065c4 <xTaskGetSchedulerState>
 8001cc0:	4606      	mov	r6, r0
 8001cc2:	b958      	cbnz	r0, 8001cdc <xQueueGenericSend+0x76>
 8001cc4:	9b01      	ldr	r3, [sp, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d048      	beq.n	8001d5c <xQueueGenericSend+0xf6>
 8001cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cce:	f383 8811 	msr	BASEPRI, r3
 8001cd2:	f3bf 8f6f 	isb	sy
 8001cd6:	f3bf 8f4f 	dsb	sy
 8001cda:	e7fe      	b.n	8001cda <xQueueGenericSend+0x74>
 8001cdc:	2600      	movs	r6, #0
 8001cde:	e03d      	b.n	8001d5c <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ce0:	462a      	mov	r2, r5
 8001ce2:	4639      	mov	r1, r7
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff fe9d 	bl	8001a24 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001cec:	b97b      	cbnz	r3, 8001d0e <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8001cee:	b148      	cbz	r0, 8001d04 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8001cf0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cf8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001cfc:	f3bf 8f4f 	dsb	sy
 8001d00:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001d04:	f7ff fd40 	bl	8001788 <vPortExitCritical>
				return pdPASS;
 8001d08:	2001      	movs	r0, #1
}
 8001d0a:	b005      	add	sp, #20
 8001d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d0e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001d12:	f004 fb77 	bl	8006404 <xTaskRemoveFromEventList>
 8001d16:	2800      	cmp	r0, #0
 8001d18:	d0f4      	beq.n	8001d04 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8001d1a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d22:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001d26:	f3bf 8f4f 	dsb	sy
 8001d2a:	f3bf 8f6f 	isb	sy
 8001d2e:	e7e9      	b.n	8001d04 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8001d30:	f7ff fd2a 	bl	8001788 <vPortExitCritical>
					return errQUEUE_FULL;
 8001d34:	2000      	movs	r0, #0
 8001d36:	e7e8      	b.n	8001d0a <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d38:	a802      	add	r0, sp, #8
 8001d3a:	f004 fbed 	bl	8006518 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d3e:	2601      	movs	r6, #1
 8001d40:	e019      	b.n	8001d76 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8001d42:	2300      	movs	r3, #0
 8001d44:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001d48:	e021      	b.n	8001d8e <xQueueGenericSend+0x128>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8001d50:	e023      	b.n	8001d9a <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8001d52:	4620      	mov	r0, r4
 8001d54:	f7ff feb3 	bl	8001abe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d58:	f004 fa32 	bl	80061c0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8001d5c:	f7ff fcf2 	bl	8001744 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d60:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001d62:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d3bb      	bcc.n	8001ce0 <xQueueGenericSend+0x7a>
 8001d68:	2d02      	cmp	r5, #2
 8001d6a:	d0b9      	beq.n	8001ce0 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001d6c:	9b01      	ldr	r3, [sp, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0de      	beq.n	8001d30 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8001d72:	2e00      	cmp	r6, #0
 8001d74:	d0e0      	beq.n	8001d38 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8001d76:	f7ff fd07 	bl	8001788 <vPortExitCritical>
		vTaskSuspendAll();
 8001d7a:	f004 f987 	bl	800608c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d7e:	f7ff fce1 	bl	8001744 <vPortEnterCritical>
 8001d82:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8001d86:	b252      	sxtb	r2, r2
 8001d88:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001d8c:	d0d9      	beq.n	8001d42 <xQueueGenericSend+0xdc>
 8001d8e:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8001d92:	b252      	sxtb	r2, r2
 8001d94:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001d98:	d0d7      	beq.n	8001d4a <xQueueGenericSend+0xe4>
 8001d9a:	f7ff fcf5 	bl	8001788 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d9e:	a901      	add	r1, sp, #4
 8001da0:	a802      	add	r0, sp, #8
 8001da2:	f004 fbc5 	bl	8006530 <xTaskCheckForTimeOut>
 8001da6:	b9d8      	cbnz	r0, 8001de0 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff fe1f 	bl	80019ec <prvIsQueueFull>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d0cf      	beq.n	8001d52 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001db2:	9901      	ldr	r1, [sp, #4]
 8001db4:	f104 0010 	add.w	r0, r4, #16
 8001db8:	f004 faf0 	bl	800639c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	f7ff fe7e 	bl	8001abe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001dc2:	f004 f9fd 	bl	80061c0 <xTaskResumeAll>
 8001dc6:	2800      	cmp	r0, #0
 8001dc8:	d1c8      	bne.n	8001d5c <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8001dca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dd2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001dd6:	f3bf 8f4f 	dsb	sy
 8001dda:	f3bf 8f6f 	isb	sy
 8001dde:	e7bd      	b.n	8001d5c <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8001de0:	4620      	mov	r0, r4
 8001de2:	f7ff fe6c 	bl	8001abe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001de6:	f004 f9eb 	bl	80061c0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8001dea:	2000      	movs	r0, #0
 8001dec:	e78d      	b.n	8001d0a <xQueueGenericSend+0xa4>

08001dee <xQueueGenericSendFromISR>:
{
 8001dee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8001df2:	b190      	cbz	r0, 8001e1a <xQueueGenericSendFromISR+0x2c>
 8001df4:	460f      	mov	r7, r1
 8001df6:	4616      	mov	r6, r2
 8001df8:	461c      	mov	r4, r3
 8001dfa:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dfc:	b1b1      	cbz	r1, 8001e2c <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001dfe:	2c02      	cmp	r4, #2
 8001e00:	d120      	bne.n	8001e44 <xQueueGenericSendFromISR+0x56>
 8001e02:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d01d      	beq.n	8001e44 <xQueueGenericSendFromISR+0x56>
 8001e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e0c:	f383 8811 	msr	BASEPRI, r3
 8001e10:	f3bf 8f6f 	isb	sy
 8001e14:	f3bf 8f4f 	dsb	sy
 8001e18:	e7fe      	b.n	8001e18 <xQueueGenericSendFromISR+0x2a>
 8001e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e1e:	f383 8811 	msr	BASEPRI, r3
 8001e22:	f3bf 8f6f 	isb	sy
 8001e26:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001e2a:	e7fe      	b.n	8001e2a <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e2c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0e5      	beq.n	8001dfe <xQueueGenericSendFromISR+0x10>
 8001e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e36:	f383 8811 	msr	BASEPRI, r3
 8001e3a:	f3bf 8f6f 	isb	sy
 8001e3e:	f3bf 8f4f 	dsb	sy
 8001e42:	e7fe      	b.n	8001e42 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e44:	f7ff fda4 	bl	8001990 <vPortValidateInterruptPriority>
	__asm volatile
 8001e48:	f3ef 8811 	mrs	r8, BASEPRI
 8001e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e50:	f383 8811 	msr	BASEPRI, r3
 8001e54:	f3bf 8f6f 	isb	sy
 8001e58:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e5c:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8001e5e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d306      	bcc.n	8001e72 <xQueueGenericSendFromISR+0x84>
 8001e64:	2c02      	cmp	r4, #2
 8001e66:	d004      	beq.n	8001e72 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8001e68:	2000      	movs	r0, #0
	__asm volatile
 8001e6a:	f388 8811 	msr	BASEPRI, r8
}
 8001e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8001e72:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8001e76:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e7a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e7c:	4622      	mov	r2, r4
 8001e7e:	4639      	mov	r1, r7
 8001e80:	4628      	mov	r0, r5
 8001e82:	f7ff fdcf 	bl	8001a24 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001e86:	f1b9 3fff 	cmp.w	r9, #4294967295
 8001e8a:	d006      	beq.n	8001e9a <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001e8c:	f109 0301 	add.w	r3, r9, #1
 8001e90:	b25b      	sxtb	r3, r3
 8001e92:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8001e96:	2001      	movs	r0, #1
 8001e98:	e7e7      	b.n	8001e6a <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e9a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001e9c:	b90b      	cbnz	r3, 8001ea2 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	e7e3      	b.n	8001e6a <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ea2:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8001ea6:	f004 faad 	bl	8006404 <xTaskRemoveFromEventList>
 8001eaa:	b118      	cbz	r0, 8001eb4 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8001eac:	b126      	cbz	r6, 8001eb8 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001eae:	2001      	movs	r0, #1
 8001eb0:	6030      	str	r0, [r6, #0]
 8001eb2:	e7da      	b.n	8001e6a <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	e7d8      	b.n	8001e6a <xQueueGenericSendFromISR+0x7c>
 8001eb8:	2001      	movs	r0, #1
 8001eba:	e7d6      	b.n	8001e6a <xQueueGenericSendFromISR+0x7c>

08001ebc <xQueueReceive>:
{
 8001ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001ec2:	b190      	cbz	r0, 8001eea <xQueueReceive+0x2e>
 8001ec4:	460f      	mov	r7, r1
 8001ec6:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ec8:	b1c1      	cbz	r1, 8001efc <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001eca:	f004 fb7b 	bl	80065c4 <xTaskGetSchedulerState>
 8001ece:	4606      	mov	r6, r0
 8001ed0:	bb00      	cbnz	r0, 8001f14 <xQueueReceive+0x58>
 8001ed2:	9b01      	ldr	r3, [sp, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d05e      	beq.n	8001f96 <xQueueReceive+0xda>
	__asm volatile
 8001ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001edc:	f383 8811 	msr	BASEPRI, r3
 8001ee0:	f3bf 8f6f 	isb	sy
 8001ee4:	f3bf 8f4f 	dsb	sy
 8001ee8:	e7fe      	b.n	8001ee8 <xQueueReceive+0x2c>
 8001eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eee:	f383 8811 	msr	BASEPRI, r3
 8001ef2:	f3bf 8f6f 	isb	sy
 8001ef6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8001efa:	e7fe      	b.n	8001efa <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001efc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0e3      	beq.n	8001eca <xQueueReceive+0xe>
 8001f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f06:	f383 8811 	msr	BASEPRI, r3
 8001f0a:	f3bf 8f6f 	isb	sy
 8001f0e:	f3bf 8f4f 	dsb	sy
 8001f12:	e7fe      	b.n	8001f12 <xQueueReceive+0x56>
 8001f14:	2600      	movs	r6, #0
 8001f16:	e03e      	b.n	8001f96 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f18:	4639      	mov	r1, r7
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7ff fdbd 	bl	8001a9a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001f20:	3d01      	subs	r5, #1
 8001f22:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f24:	6923      	ldr	r3, [r4, #16]
 8001f26:	b923      	cbnz	r3, 8001f32 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8001f28:	f7ff fc2e 	bl	8001788 <vPortExitCritical>
				return pdPASS;
 8001f2c:	2001      	movs	r0, #1
}
 8001f2e:	b005      	add	sp, #20
 8001f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f32:	f104 0010 	add.w	r0, r4, #16
 8001f36:	f004 fa65 	bl	8006404 <xTaskRemoveFromEventList>
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d0f4      	beq.n	8001f28 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8001f3e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001f42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f46:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001f4a:	f3bf 8f4f 	dsb	sy
 8001f4e:	f3bf 8f6f 	isb	sy
 8001f52:	e7e9      	b.n	8001f28 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8001f54:	f7ff fc18 	bl	8001788 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001f58:	2000      	movs	r0, #0
 8001f5a:	e7e8      	b.n	8001f2e <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f5c:	a802      	add	r0, sp, #8
 8001f5e:	f004 fadb 	bl	8006518 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f62:	2601      	movs	r6, #1
 8001f64:	e021      	b.n	8001faa <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8001f66:	2300      	movs	r3, #0
 8001f68:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001f6c:	e029      	b.n	8001fc2 <xQueueReceive+0x106>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8001f74:	e02b      	b.n	8001fce <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8001f76:	4620      	mov	r0, r4
 8001f78:	f7ff fda1 	bl	8001abe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f7c:	f004 f920 	bl	80061c0 <xTaskResumeAll>
 8001f80:	e009      	b.n	8001f96 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7ff fd9b 	bl	8001abe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f88:	f004 f91a 	bl	80061c0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f7ff fd3c 	bl	8001a0a <prvIsQueueEmpty>
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d13f      	bne.n	8002016 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8001f96:	f7ff fbd5 	bl	8001744 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f9a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f9c:	2d00      	cmp	r5, #0
 8001f9e:	d1bb      	bne.n	8001f18 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fa0:	9b01      	ldr	r3, [sp, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0d6      	beq.n	8001f54 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8001fa6:	2e00      	cmp	r6, #0
 8001fa8:	d0d8      	beq.n	8001f5c <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8001faa:	f7ff fbed 	bl	8001788 <vPortExitCritical>
		vTaskSuspendAll();
 8001fae:	f004 f86d 	bl	800608c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001fb2:	f7ff fbc7 	bl	8001744 <vPortEnterCritical>
 8001fb6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001fba:	b25b      	sxtb	r3, r3
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d0d1      	beq.n	8001f66 <xQueueReceive+0xaa>
 8001fc2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fcc:	d0cf      	beq.n	8001f6e <xQueueReceive+0xb2>
 8001fce:	f7ff fbdb 	bl	8001788 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fd2:	a901      	add	r1, sp, #4
 8001fd4:	a802      	add	r0, sp, #8
 8001fd6:	f004 faab 	bl	8006530 <xTaskCheckForTimeOut>
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	d1d1      	bne.n	8001f82 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f7ff fd13 	bl	8001a0a <prvIsQueueEmpty>
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d0c6      	beq.n	8001f76 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001fe8:	9901      	ldr	r1, [sp, #4]
 8001fea:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001fee:	f004 f9d5 	bl	800639c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f7ff fd63 	bl	8001abe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001ff8:	f004 f8e2 	bl	80061c0 <xTaskResumeAll>
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d1ca      	bne.n	8001f96 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8002000:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002008:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800200c:	f3bf 8f4f 	dsb	sy
 8002010:	f3bf 8f6f 	isb	sy
 8002014:	e7bf      	b.n	8001f96 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8002016:	2000      	movs	r0, #0
 8002018:	e789      	b.n	8001f2e <xQueueReceive+0x72>
	...

0800201c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800201c:	2300      	movs	r3, #0
 800201e:	2b07      	cmp	r3, #7
 8002020:	d80c      	bhi.n	800203c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002022:	4a07      	ldr	r2, [pc, #28]	@ (8002040 <vQueueAddToRegistry+0x24>)
 8002024:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002028:	b10a      	cbz	r2, 800202e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800202a:	3301      	adds	r3, #1
 800202c:	e7f7      	b.n	800201e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800202e:	4a04      	ldr	r2, [pc, #16]	@ (8002040 <vQueueAddToRegistry+0x24>)
 8002030:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002034:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002038:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800203a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20005430 	.word	0x20005430

08002044 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002044:	b570      	push	{r4, r5, r6, lr}
 8002046:	4604      	mov	r4, r0
 8002048:	460d      	mov	r5, r1
 800204a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800204c:	f7ff fb7a 	bl	8001744 <vPortEnterCritical>
 8002050:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002054:	b25b      	sxtb	r3, r3
 8002056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205a:	d00d      	beq.n	8002078 <vQueueWaitForMessageRestricted+0x34>
 800205c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002060:	b25b      	sxtb	r3, r3
 8002062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002066:	d00b      	beq.n	8002080 <vQueueWaitForMessageRestricted+0x3c>
 8002068:	f7ff fb8e 	bl	8001788 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800206c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800206e:	b15b      	cbz	r3, 8002088 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002070:	4620      	mov	r0, r4
 8002072:	f7ff fd24 	bl	8001abe <prvUnlockQueue>
	}
 8002076:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8002078:	2300      	movs	r3, #0
 800207a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800207e:	e7ed      	b.n	800205c <vQueueWaitForMessageRestricted+0x18>
 8002080:	2300      	movs	r3, #0
 8002082:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002086:	e7ef      	b.n	8002068 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002088:	4632      	mov	r2, r6
 800208a:	4629      	mov	r1, r5
 800208c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002090:	f004 f99c 	bl	80063cc <vTaskPlaceOnEventListRestricted>
 8002094:	e7ec      	b.n	8002070 <vQueueWaitForMessageRestricted+0x2c>
	...

08002098 <resistor_init>:
#include "resistor.h"

void resistor_init(resistor_t* resistor, float pull_resistor, resistor_pull_type_t pull_type, analog_input_channel_t analog_input)
{
 8002098:	b508      	push	{r3, lr}
    if (resistor == NULL)
 800209a:	b120      	cbz	r0, 80020a6 <resistor_init+0xe>
    {
        log_error("Resistor init failed!");
        return;
    }
    resistor->pull_resistor = pull_resistor;
 800209c:	ed80 0a01 	vstr	s0, [r0, #4]
    resistor->pull_type = pull_type;
 80020a0:	7001      	strb	r1, [r0, #0]
    resistor->analog_input = analog_input;
 80020a2:	7202      	strb	r2, [r0, #8]
}
 80020a4:	bd08      	pop	{r3, pc}
        log_error("Resistor init failed!");
 80020a6:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <resistor_init+0x18>)
 80020a8:	f7fe fd10 	bl	8000acc <log_error>
        return;
 80020ac:	e7fa      	b.n	80020a4 <resistor_init+0xc>
 80020ae:	bf00      	nop
 80020b0:	08009c7c 	.word	0x08009c7c

080020b4 <resistor_get_resistance>:

/**
 * @todo div by zero will break this!
 */
float resistor_get_resistance(const resistor_t *resistor)
{
 80020b4:	b510      	push	{r4, lr}
 80020b6:	4604      	mov	r4, r0
    uint16_t adc_value = analog_inputs_get_data(resistor->analog_input);
 80020b8:	7a00      	ldrb	r0, [r0, #8]
 80020ba:	f7fe fa7d 	bl	80005b8 <analog_inputs_get_data>
 80020be:	ee07 0a10 	vmov	s14, r0
    float voltage = ((float)adc_value / (float)ADC_MAX_VALUE) * (float)ADC_REF_VOLTAGE;
 80020c2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80020c6:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002130 <resistor_get_resistance+0x7c>
 80020ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ce:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002134 <resistor_get_resistance+0x80>
 80020d2:	ee67 7a87 	vmul.f32	s15, s15, s14
    // simple check to see if the sensor is open circuit or not
    if (!IS_IN_RANGE(voltage, 0.05f * ADC_REF_VOLTAGE, 0.95f * ADC_REF_VOLTAGE))
 80020d6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002138 <resistor_get_resistance+0x84>
 80020da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e2:	db13      	blt.n	800210c <resistor_get_resistance+0x58>
 80020e4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800213c <resistor_get_resistance+0x88>
 80020e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f0:	d80c      	bhi.n	800210c <resistor_get_resistance+0x58>
    {
        log_error("Resistor open circuit.");
        return NAN;
    }
    if (resistor->pull_type == RESISTOR_PULL_UP) {
 80020f2:	7823      	ldrb	r3, [r4, #0]
 80020f4:	b983      	cbnz	r3, 8002118 <resistor_get_resistance+0x64>
        return (voltage * (float)resistor->pull_resistor) / ((float)ADC_REF_VOLTAGE - voltage);
 80020f6:	edd4 6a01 	vldr	s13, [r4, #4]
 80020fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020fe:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002134 <resistor_get_resistance+0x80>
 8002102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002106:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 800210a:	e004      	b.n	8002116 <resistor_get_resistance+0x62>
        log_error("Resistor open circuit.");
 800210c:	480c      	ldr	r0, [pc, #48]	@ (8002140 <resistor_get_resistance+0x8c>)
 800210e:	f7fe fcdd 	bl	8000acc <log_error>
        return NAN;
 8002112:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002144 <resistor_get_resistance+0x90>
    } else { // PULL_DOWN
        return ((ADC_REF_VOLTAGE - voltage) * (float)resistor->pull_resistor) / voltage;
    }
}
 8002116:	bd10      	pop	{r4, pc}
        return ((ADC_REF_VOLTAGE - voltage) * (float)resistor->pull_resistor) / voltage;
 8002118:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002134 <resistor_get_resistance+0x80>
 800211c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002120:	edd4 6a01 	vldr	s13, [r4, #4]
 8002124:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002128:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800212c:	e7f3      	b.n	8002116 <resistor_get_resistance+0x62>
 800212e:	bf00      	nop
 8002130:	457ff000 	.word	0x457ff000
 8002134:	40533333 	.word	0x40533333
 8002138:	3e28f5c3 	.word	0x3e28f5c3
 800213c:	4048a3d7 	.word	0x4048a3d7
 8002140:	08009c94 	.word	0x08009c94
 8002144:	7fc00000 	.word	0x7fc00000

08002148 <sensor_map_init>:
    }
    return result;
}

void sensor_map_init(sensor_map_t *sensor, sensor_map_type_t type)
{
 8002148:	b510      	push	{r4, lr}
    if (sensor == NULL)
 800214a:	b168      	cbz	r0, 8002168 <sensor_map_init+0x20>
 800214c:	4604      	mov	r4, r0
    {
        log_error("map sensor is null");
        return;
    }
    switch (type)
 800214e:	b179      	cbz	r1, 8002170 <sensor_map_init+0x28>
 8002150:	2901      	cmp	r1, #1
 8002152:	d115      	bne.n	8002180 <sensor_map_init+0x38>
         * a simple linear sensor
         */
        /**
         * @todo actually calculate these values!
         */
        sensor->adc_value_0_bar = 100;
 8002154:	2364      	movs	r3, #100	@ 0x64
 8002156:	8003      	strh	r3, [r0, #0]
        sensor->adc_value_1_bar = 3000;
 8002158:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800215c:	8043      	strh	r3, [r0, #2]
        sensor->analog_channel = ANALOG_INPUT_SENSOR_MAP_PIN;
 800215e:	2304      	movs	r3, #4
 8002160:	7103      	strb	r3, [r0, #4]
    
    default:
        log_error("map sensor type not configured!");
        break;
    }
    map_sensor = sensor;
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <sensor_map_init+0x40>)
 8002164:	601c      	str	r4, [r3, #0]
}
 8002166:	bd10      	pop	{r4, pc}
        log_error("map sensor is null");
 8002168:	4808      	ldr	r0, [pc, #32]	@ (800218c <sensor_map_init+0x44>)
 800216a:	f7fe fcaf 	bl	8000acc <log_error>
        return;
 800216e:	e7fa      	b.n	8002166 <sensor_map_init+0x1e>
        sensor->adc_value_0_bar = 100;
 8002170:	2364      	movs	r3, #100	@ 0x64
 8002172:	8003      	strh	r3, [r0, #0]
        sensor->adc_value_1_bar = 3000;
 8002174:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002178:	8043      	strh	r3, [r0, #2]
        sensor->analog_channel = ANALOG_INPUT_SENSOR_MAP_PIN;
 800217a:	2304      	movs	r3, #4
 800217c:	7103      	strb	r3, [r0, #4]
        break;
 800217e:	e7f0      	b.n	8002162 <sensor_map_init+0x1a>
        log_error("map sensor type not configured!");
 8002180:	4803      	ldr	r0, [pc, #12]	@ (8002190 <sensor_map_init+0x48>)
 8002182:	f7fe fca3 	bl	8000acc <log_error>
        break;
 8002186:	e7ec      	b.n	8002162 <sensor_map_init+0x1a>
 8002188:	20005488 	.word	0x20005488
 800218c:	08009cac 	.word	0x08009cac
 8002190:	08009cc0 	.word	0x08009cc0

08002194 <sensor_iat_init>:
    }
    return result;
}

void sensor_iat_init(thermistor_t *sensor, sensor_iat_type_t type)
{
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	b08a      	sub	sp, #40	@ 0x28
 8002198:	4604      	mov	r4, r0
    switch (type)
 800219a:	b1e9      	cbz	r1, 80021d8 <sensor_iat_init+0x44>
 800219c:	2901      	cmp	r1, #1
 800219e:	d138      	bne.n	8002212 <sensor_iat_init+0x7e>
    {
        case SENSOR_IAT_TYPE_BOSCH_816:
            resistor_init(&sensor->resistor, 10000, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_IAT_PIN);
 80021a0:	2205      	movs	r2, #5
 80021a2:	2100      	movs	r1, #0
 80021a4:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800221c <sensor_iat_init+0x88>
 80021a8:	f7ff ff76 	bl	8002098 <resistor_init>
            thermistor_conf_t bosch_816_iat_conf = 
 80021ac:	ad04      	add	r5, sp, #16
 80021ae:	4e1c      	ldr	r6, [pc, #112]	@ (8002220 <sensor_iat_init+0x8c>)
 80021b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80021b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80021b8:	e885 0003 	stmia.w	r5, {r0, r1}
                .resistance_3 = 322.5f,
                .tempC_1 = -10.0f,
                .tempC_2 = 25.0f,
                .tempC_3 = 80.0f
            };
            thermistor_init(sensor, bosch_816_iat_conf);
 80021bc:	ab0a      	add	r3, sp, #40	@ 0x28
 80021be:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80021c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80021c6:	ab04      	add	r3, sp, #16
 80021c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ca:	4620      	mov	r0, r4
 80021cc:	f004 fa52 	bl	8006674 <thermistor_init>
            sensor_iat = sensor;
 80021d0:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <sensor_iat_init+0x90>)
 80021d2:	601c      	str	r4, [r3, #0]
            break;
    default:
        log_error("iat sensor type not configured!");
        break;
    }
}
 80021d4:	b00a      	add	sp, #40	@ 0x28
 80021d6:	bd70      	pop	{r4, r5, r6, pc}
            resistor_init(&sensor->resistor, 4700, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_IAT_PIN);
 80021d8:	2205      	movs	r2, #5
 80021da:	2100      	movs	r1, #0
 80021dc:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8002228 <sensor_iat_init+0x94>
 80021e0:	f7ff ff5a 	bl	8002098 <resistor_init>
            thermistor_conf_t genric_5k =
 80021e4:	f10d 0c10 	add.w	ip, sp, #16
 80021e8:	4d10      	ldr	r5, [pc, #64]	@ (800222c <sensor_iat_init+0x98>)
 80021ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80021f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021f4:	e88c 0003 	stmia.w	ip, {r0, r1}
            thermistor_init(sensor, genric_5k);
 80021f8:	ab0a      	add	r3, sp, #40	@ 0x28
 80021fa:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80021fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002202:	ab04      	add	r3, sp, #16
 8002204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002206:	4620      	mov	r0, r4
 8002208:	f004 fa34 	bl	8006674 <thermistor_init>
            sensor_iat = sensor;
 800220c:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <sensor_iat_init+0x90>)
 800220e:	601c      	str	r4, [r3, #0]
            break;
 8002210:	e7e0      	b.n	80021d4 <sensor_iat_init+0x40>
        log_error("iat sensor type not configured!");
 8002212:	4807      	ldr	r0, [pc, #28]	@ (8002230 <sensor_iat_init+0x9c>)
 8002214:	f7fe fc5a 	bl	8000acc <log_error>
}
 8002218:	e7dc      	b.n	80021d4 <sensor_iat_init+0x40>
 800221a:	bf00      	nop
 800221c:	461c4000 	.word	0x461c4000
 8002220:	08009aa0 	.word	0x08009aa0
 8002224:	20005484 	.word	0x20005484
 8002228:	4592e000 	.word	0x4592e000
 800222c:	08009ab8 	.word	0x08009ab8
 8002230:	08009ce0 	.word	0x08009ce0

08002234 <sensor_iat_get>:

temperature_t sensor_iat_get()
{
 8002234:	b508      	push	{r3, lr}
    if (sensor_iat == NULL)
 8002236:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <sensor_iat_get+0x44>)
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	b180      	cbz	r0, 800225e <sensor_iat_get+0x2a>
    {
        log_error("iat sensor is null");
        return SENSOR_IAT_FAIL_SAFE;
    }
    temperature_t temperature = thermistor_get_temp(sensor_iat);
 800223c:	f004 fa8e 	bl	800675c <thermistor_get_temp>
    if (!IS_IN_RANGE(temperature, FIRMWARE_LIMIT_MIN_TEMP, FIRMWARE_LIMIT_MAX_TEMP))
 8002240:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800227c <sensor_iat_get+0x48>
 8002244:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224c:	db0d      	blt.n	800226a <sensor_iat_get+0x36>
 800224e:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8002280 <sensor_iat_get+0x4c>
 8002252:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225a:	d806      	bhi.n	800226a <sensor_iat_get+0x36>
    {
        log_error("iat sensor out of range!");
        return SENSOR_IAT_FAIL_SAFE;
    }
    return temperature;
}
 800225c:	bd08      	pop	{r3, pc}
        log_error("iat sensor is null");
 800225e:	4809      	ldr	r0, [pc, #36]	@ (8002284 <sensor_iat_get+0x50>)
 8002260:	f7fe fc34 	bl	8000acc <log_error>
        return SENSOR_IAT_FAIL_SAFE;
 8002264:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002288 <sensor_iat_get+0x54>
 8002268:	e7f8      	b.n	800225c <sensor_iat_get+0x28>
        log_error("iat sensor out of range!");
 800226a:	4808      	ldr	r0, [pc, #32]	@ (800228c <sensor_iat_get+0x58>)
 800226c:	f7fe fc2e 	bl	8000acc <log_error>
        return SENSOR_IAT_FAIL_SAFE;
 8002270:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8002288 <sensor_iat_get+0x54>
 8002274:	e7f2      	b.n	800225c <sensor_iat_get+0x28>
 8002276:	bf00      	nop
 8002278:	20005484 	.word	0x20005484
 800227c:	c2480000 	.word	0xc2480000
 8002280:	43160000 	.word	0x43160000
 8002284:	08009d00 	.word	0x08009d00
 8002288:	42200000 	.word	0x42200000
 800228c:	08009d14 	.word	0x08009d14

08002290 <sensor_clt_init>:

void sensor_clt_init(thermistor_t *sensor, sensor_clt_type_t type)
{
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	b08a      	sub	sp, #40	@ 0x28
    if (sensor == NULL)
 8002294:	b1f8      	cbz	r0, 80022d6 <sensor_clt_init+0x46>
 8002296:	4604      	mov	r4, r0
    {
        log_error("clt sensor is null");
        return;
    }
    switch (type)
 8002298:	b309      	cbz	r1, 80022de <sensor_clt_init+0x4e>
 800229a:	2901      	cmp	r1, #1
 800229c:	d13c      	bne.n	8002318 <sensor_clt_init+0x88>
    {
    /* Actually make this a proper thing */
    case SENSOR_CLT_TYPE_NISSAN:
        resistor_init(&sensor->resistor, 10000, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_CLT_PIN);
 800229e:	2206      	movs	r2, #6
 80022a0:	2100      	movs	r1, #0
 80022a2:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8002320 <sensor_clt_init+0x90>
 80022a6:	f7ff fef7 	bl	8002098 <resistor_init>
        thermistor_conf_t nissan_clt_conf =
 80022aa:	ad04      	add	r5, sp, #16
 80022ac:	4e1d      	ldr	r6, [pc, #116]	@ (8002324 <sensor_clt_init+0x94>)
 80022ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80022b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80022b6:	e885 0003 	stmia.w	r5, {r0, r1}
            .resistance_3 = 230.0f,
            .tempC_1 = -20.0f,
            .tempC_2 = 25.0f,
            .tempC_3 = 90.0f
        };
        thermistor_init(sensor, nissan_clt_conf);
 80022ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80022bc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80022c0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80022c4:	ab04      	add	r3, sp, #16
 80022c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c8:	4620      	mov	r0, r4
 80022ca:	f004 f9d3 	bl	8006674 <thermistor_init>
        sensor_clt = sensor;
 80022ce:	4b16      	ldr	r3, [pc, #88]	@ (8002328 <sensor_clt_init+0x98>)
 80022d0:	601c      	str	r4, [r3, #0]
        break;
    default:
        log_error("clt sensor type not configured!");
        break;
    }
}
 80022d2:	b00a      	add	sp, #40	@ 0x28
 80022d4:	bd70      	pop	{r4, r5, r6, pc}
        log_error("clt sensor is null");
 80022d6:	4815      	ldr	r0, [pc, #84]	@ (800232c <sensor_clt_init+0x9c>)
 80022d8:	f7fe fbf8 	bl	8000acc <log_error>
        return;
 80022dc:	e7f9      	b.n	80022d2 <sensor_clt_init+0x42>
        resistor_init(&sensor->resistor, 4700, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_CLT_PIN);
 80022de:	2206      	movs	r2, #6
 80022e0:	2100      	movs	r1, #0
 80022e2:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002330 <sensor_clt_init+0xa0>
 80022e6:	f7ff fed7 	bl	8002098 <resistor_init>
        thermistor_conf_t genric_5k =
 80022ea:	f10d 0c10 	add.w	ip, sp, #16
 80022ee:	4d11      	ldr	r5, [pc, #68]	@ (8002334 <sensor_clt_init+0xa4>)
 80022f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80022f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022fa:	e88c 0003 	stmia.w	ip, {r0, r1}
        thermistor_init(sensor, genric_5k);
 80022fe:	ab0a      	add	r3, sp, #40	@ 0x28
 8002300:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002304:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002308:	ab04      	add	r3, sp, #16
 800230a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800230c:	4620      	mov	r0, r4
 800230e:	f004 f9b1 	bl	8006674 <thermistor_init>
        sensor_clt = sensor;
 8002312:	4b05      	ldr	r3, [pc, #20]	@ (8002328 <sensor_clt_init+0x98>)
 8002314:	601c      	str	r4, [r3, #0]
        break;
 8002316:	e7dc      	b.n	80022d2 <sensor_clt_init+0x42>
        log_error("clt sensor type not configured!");
 8002318:	4807      	ldr	r0, [pc, #28]	@ (8002338 <sensor_clt_init+0xa8>)
 800231a:	f7fe fbd7 	bl	8000acc <log_error>
        break;
 800231e:	e7d8      	b.n	80022d2 <sensor_clt_init+0x42>
 8002320:	461c4000 	.word	0x461c4000
 8002324:	08009ad0 	.word	0x08009ad0
 8002328:	20005480 	.word	0x20005480
 800232c:	08009d30 	.word	0x08009d30
 8002330:	4592e000 	.word	0x4592e000
 8002334:	08009ab8 	.word	0x08009ab8
 8002338:	08009d44 	.word	0x08009d44

0800233c <sensor_clt_get>:

temperature_t sensor_clt_get()
{
 800233c:	b508      	push	{r3, lr}
    if (sensor_clt == NULL)
 800233e:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <sensor_clt_get+0x44>)
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	b180      	cbz	r0, 8002366 <sensor_clt_get+0x2a>
    {
        log_error("clt sensor is null");
        return SENSOR_CLT_FAIL_SAFE;
    }
    temperature_t temperature = thermistor_get_temp(sensor_clt);
 8002344:	f004 fa0a 	bl	800675c <thermistor_get_temp>
    if (!IS_IN_RANGE(temperature, FIRMWARE_LIMIT_MIN_TEMP, FIRMWARE_LIMIT_MAX_TEMP))
 8002348:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8002384 <sensor_clt_get+0x48>
 800234c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002354:	db0d      	blt.n	8002372 <sensor_clt_get+0x36>
 8002356:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8002388 <sensor_clt_get+0x4c>
 800235a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800235e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002362:	d806      	bhi.n	8002372 <sensor_clt_get+0x36>
    {
        log_error("clt sensor out of range!");
        return SENSOR_CLT_FAIL_SAFE;
    }
    return temperature;
}
 8002364:	bd08      	pop	{r3, pc}
        log_error("clt sensor is null");
 8002366:	4809      	ldr	r0, [pc, #36]	@ (800238c <sensor_clt_get+0x50>)
 8002368:	f7fe fbb0 	bl	8000acc <log_error>
        return SENSOR_CLT_FAIL_SAFE;
 800236c:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002370:	e7f8      	b.n	8002364 <sensor_clt_get+0x28>
        log_error("clt sensor out of range!");
 8002372:	4807      	ldr	r0, [pc, #28]	@ (8002390 <sensor_clt_get+0x54>)
 8002374:	f7fe fbaa 	bl	8000acc <log_error>
        return SENSOR_CLT_FAIL_SAFE;
 8002378:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800237c:	e7f2      	b.n	8002364 <sensor_clt_get+0x28>
 800237e:	bf00      	nop
 8002380:	20005480 	.word	0x20005480
 8002384:	c2480000 	.word	0xc2480000
 8002388:	43160000 	.word	0x43160000
 800238c:	08009d30 	.word	0x08009d30
 8002390:	08009d64 	.word	0x08009d64

08002394 <sensor_ops_init>:

void sensor_ops_init(sensor_ops_t *sensor)
{
 8002394:	b508      	push	{r3, lr}
    if (sensor == NULL)
 8002396:	b148      	cbz	r0, 80023ac <sensor_ops_init+0x18>
    {
        log_error("ops sensor is null");
        return;
    }
    sensor->adc_value_threshold = 4095 / 2;
 8002398:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800239c:	8002      	strh	r2, [r0, #0]
    sensor->debounce_time_ms = 200;
 800239e:	22c8      	movs	r2, #200	@ 0xc8
 80023a0:	8042      	strh	r2, [r0, #2]
    sensor->analog_channel = ANALOG_INPUT_SENSOR_OIL_PIN;
 80023a2:	2207      	movs	r2, #7
 80023a4:	7102      	strb	r2, [r0, #4]
    sensor_ops = sensor;
 80023a6:	4a03      	ldr	r2, [pc, #12]	@ (80023b4 <sensor_ops_init+0x20>)
 80023a8:	6010      	str	r0, [r2, #0]
}
 80023aa:	bd08      	pop	{r3, pc}
        log_error("ops sensor is null");
 80023ac:	4802      	ldr	r0, [pc, #8]	@ (80023b8 <sensor_ops_init+0x24>)
 80023ae:	f7fe fb8d 	bl	8000acc <log_error>
        return;
 80023b2:	e7fa      	b.n	80023aa <sensor_ops_init+0x16>
 80023b4:	2000547c 	.word	0x2000547c
 80023b8:	08009d80 	.word	0x08009d80

080023bc <sensor_ops_get>:

bool sensor_ops_get()
{
 80023bc:	b510      	push	{r4, lr}
    static uint32_t last_change_time = 0;
    static bool last_state = false;
    static bool debounced_state = false;

    if (sensor_ops == NULL)
 80023be:	4b14      	ldr	r3, [pc, #80]	@ (8002410 <sensor_ops_get+0x54>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	b303      	cbz	r3, 8002406 <sensor_ops_get+0x4a>
    {
        log_error("ops sensor is null");
        return false;
    }

    uint16_t adc_value = analog_inputs_get_data(sensor_ops->analog_channel);
 80023c4:	7918      	ldrb	r0, [r3, #4]
 80023c6:	f7fe f8f7 	bl	80005b8 <analog_inputs_get_data>
    bool current_state = adc_value > sensor_ops->adc_value_threshold;
 80023ca:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <sensor_ops_get+0x54>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	881c      	ldrh	r4, [r3, #0]
 80023d0:	4284      	cmp	r4, r0
 80023d2:	bf2c      	ite	cs
 80023d4:	2400      	movcs	r4, #0
 80023d6:	2401      	movcc	r4, #1

    uint32_t now = get_time_ms();
 80023d8:	f004 fea8 	bl	800712c <get_time_ms>

    if (current_state != last_state)
 80023dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <sensor_ops_get+0x58>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	42a3      	cmp	r3, r4
 80023e2:	d003      	beq.n	80023ec <sensor_ops_get+0x30>
    {
        /* State changed, reset debounce timer */
        last_change_time = now;
 80023e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <sensor_ops_get+0x5c>)
 80023e6:	6018      	str	r0, [r3, #0]
        last_state = current_state;
 80023e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <sensor_ops_get+0x58>)
 80023ea:	701c      	strb	r4, [r3, #0]
    }

    if ((now - last_change_time) >= sensor_ops->debounce_time_ms)
 80023ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <sensor_ops_get+0x5c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	1ac0      	subs	r0, r0, r3
 80023f2:	4b07      	ldr	r3, [pc, #28]	@ (8002410 <sensor_ops_get+0x54>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	885b      	ldrh	r3, [r3, #2]
 80023f8:	4298      	cmp	r0, r3
 80023fa:	d301      	bcc.n	8002400 <sensor_ops_get+0x44>
    {
        /* Debounce period passed, accept new state */
        debounced_state = current_state;
 80023fc:	4b07      	ldr	r3, [pc, #28]	@ (800241c <sensor_ops_get+0x60>)
 80023fe:	701c      	strb	r4, [r3, #0]
    }

    return debounced_state;
 8002400:	4b06      	ldr	r3, [pc, #24]	@ (800241c <sensor_ops_get+0x60>)
 8002402:	7818      	ldrb	r0, [r3, #0]
}
 8002404:	bd10      	pop	{r4, pc}
        log_error("ops sensor is null");
 8002406:	4806      	ldr	r0, [pc, #24]	@ (8002420 <sensor_ops_get+0x64>)
 8002408:	f7fe fb60 	bl	8000acc <log_error>
        return false;
 800240c:	2000      	movs	r0, #0
 800240e:	e7f9      	b.n	8002404 <sensor_ops_get+0x48>
 8002410:	2000547c 	.word	0x2000547c
 8002414:	20005478 	.word	0x20005478
 8002418:	20005474 	.word	0x20005474
 800241c:	20005470 	.word	0x20005470
 8002420:	08009d80 	.word	0x08009d80

08002424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002424:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002426:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <HAL_Init+0x30>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800242e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002436:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800243e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002440:	2003      	movs	r0, #3
 8002442:	f000 faff 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002446:	200f      	movs	r0, #15
 8002448:	f002 fcb6 	bl	8004db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800244c:	f000 fe34 	bl	80030b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002450:	2000      	movs	r0, #0
 8002452:	bd08      	pop	{r3, pc}
 8002454:	40023c00 	.word	0x40023c00

08002458 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002458:	4a03      	ldr	r2, [pc, #12]	@ (8002468 <HAL_IncTick+0x10>)
 800245a:	6811      	ldr	r1, [r2, #0]
 800245c:	4b03      	ldr	r3, [pc, #12]	@ (800246c <HAL_IncTick+0x14>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	440b      	add	r3, r1
 8002462:	6013      	str	r3, [r2, #0]
}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	2000548c 	.word	0x2000548c
 800246c:	20000008 	.word	0x20000008

08002470 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002470:	4b01      	ldr	r3, [pc, #4]	@ (8002478 <HAL_GetTick+0x8>)
 8002472:	6818      	ldr	r0, [r3, #0]
}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	2000548c 	.word	0x2000548c

0800247c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800247c:	b538      	push	{r3, r4, r5, lr}
 800247e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002480:	f7ff fff6 	bl	8002470 <HAL_GetTick>
 8002484:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002486:	f1b4 3fff 	cmp.w	r4, #4294967295
 800248a:	d002      	beq.n	8002492 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800248c:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <HAL_Delay+0x24>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002492:	f7ff ffed 	bl	8002470 <HAL_GetTick>
 8002496:	1b40      	subs	r0, r0, r5
 8002498:	42a0      	cmp	r0, r4
 800249a:	d3fa      	bcc.n	8002492 <HAL_Delay+0x16>
  {
  }
}
 800249c:	bd38      	pop	{r3, r4, r5, pc}
 800249e:	bf00      	nop
 80024a0:	20000008 	.word	0x20000008

080024a4 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024a4:	4b4a      	ldr	r3, [pc, #296]	@ (80025d0 <ADC_Init+0x12c>)
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80024ac:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	6841      	ldr	r1, [r0, #4]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024b6:	6802      	ldr	r2, [r0, #0]
 80024b8:	6853      	ldr	r3, [r2, #4]
 80024ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024be:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024c0:	6802      	ldr	r2, [r0, #0]
 80024c2:	6853      	ldr	r3, [r2, #4]
 80024c4:	6901      	ldr	r1, [r0, #16]
 80024c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80024ca:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024cc:	6802      	ldr	r2, [r0, #0]
 80024ce:	6853      	ldr	r3, [r2, #4]
 80024d0:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80024d4:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024d6:	6802      	ldr	r2, [r0, #0]
 80024d8:	6853      	ldr	r3, [r2, #4]
 80024da:	6881      	ldr	r1, [r0, #8]
 80024dc:	430b      	orrs	r3, r1
 80024de:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024e0:	6802      	ldr	r2, [r0, #0]
 80024e2:	6893      	ldr	r3, [r2, #8]
 80024e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024e8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024ea:	6802      	ldr	r2, [r0, #0]
 80024ec:	6893      	ldr	r3, [r2, #8]
 80024ee:	68c1      	ldr	r1, [r0, #12]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80024f6:	4b37      	ldr	r3, [pc, #220]	@ (80025d4 <ADC_Init+0x130>)
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d057      	beq.n	80025ac <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024fc:	6802      	ldr	r2, [r0, #0]
 80024fe:	6893      	ldr	r3, [r2, #8]
 8002500:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8002504:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002506:	6802      	ldr	r2, [r0, #0]
 8002508:	6893      	ldr	r3, [r2, #8]
 800250a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800250c:	430b      	orrs	r3, r1
 800250e:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002510:	6802      	ldr	r2, [r0, #0]
 8002512:	6893      	ldr	r3, [r2, #8]
 8002514:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002518:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800251a:	6802      	ldr	r2, [r0, #0]
 800251c:	6893      	ldr	r3, [r2, #8]
 800251e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002520:	430b      	orrs	r3, r1
 8002522:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002524:	6802      	ldr	r2, [r0, #0]
 8002526:	6893      	ldr	r3, [r2, #8]
 8002528:	f023 0302 	bic.w	r3, r3, #2
 800252c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800252e:	6802      	ldr	r2, [r0, #0]
 8002530:	6893      	ldr	r3, [r2, #8]
 8002532:	7e01      	ldrb	r1, [r0, #24]
 8002534:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002538:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800253a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d03f      	beq.n	80025c2 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002542:	6802      	ldr	r2, [r0, #0]
 8002544:	6853      	ldr	r3, [r2, #4]
 8002546:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800254a:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800254c:	6802      	ldr	r2, [r0, #0]
 800254e:	6853      	ldr	r3, [r2, #4]
 8002550:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002554:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002556:	6801      	ldr	r1, [r0, #0]
 8002558:	684b      	ldr	r3, [r1, #4]
 800255a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800255c:	3a01      	subs	r2, #1
 800255e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002562:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002564:	6802      	ldr	r2, [r0, #0]
 8002566:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002568:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800256c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800256e:	6801      	ldr	r1, [r0, #0]
 8002570:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8002572:	69c2      	ldr	r2, [r0, #28]
 8002574:	3a01      	subs	r2, #1
 8002576:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800257a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800257c:	6802      	ldr	r2, [r0, #0]
 800257e:	6893      	ldr	r3, [r2, #8]
 8002580:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002584:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002586:	6802      	ldr	r2, [r0, #0]
 8002588:	6893      	ldr	r3, [r2, #8]
 800258a:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 800258e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8002592:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002594:	6802      	ldr	r2, [r0, #0]
 8002596:	6893      	ldr	r3, [r2, #8]
 8002598:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800259c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800259e:	6802      	ldr	r2, [r0, #0]
 80025a0:	6893      	ldr	r3, [r2, #8]
 80025a2:	6941      	ldr	r1, [r0, #20]
 80025a4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80025a8:	6093      	str	r3, [r2, #8]
}
 80025aa:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025ac:	6802      	ldr	r2, [r0, #0]
 80025ae:	6893      	ldr	r3, [r2, #8]
 80025b0:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80025b4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025b6:	6802      	ldr	r2, [r0, #0]
 80025b8:	6893      	ldr	r3, [r2, #8]
 80025ba:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80025be:	6093      	str	r3, [r2, #8]
 80025c0:	e7b0      	b.n	8002524 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025c2:	6802      	ldr	r2, [r0, #0]
 80025c4:	6853      	ldr	r3, [r2, #4]
 80025c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80025ca:	6053      	str	r3, [r2, #4]
 80025cc:	e7ca      	b.n	8002564 <ADC_Init+0xc0>
 80025ce:	bf00      	nop
 80025d0:	40012300 	.word	0x40012300
 80025d4:	0f000001 	.word	0x0f000001

080025d8 <HAL_ADC_Init>:
  if (hadc == NULL)
 80025d8:	b338      	cbz	r0, 800262a <HAL_ADC_Init+0x52>
{
 80025da:	b510      	push	{r4, lr}
 80025dc:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025de:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80025e0:	b143      	cbz	r3, 80025f4 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80025e4:	f013 0f10 	tst.w	r3, #16
 80025e8:	d00b      	beq.n	8002602 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80025ea:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80025ec:	2300      	movs	r3, #0
 80025ee:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80025f2:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80025f4:	f7fd ff36 	bl	8000464 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80025f8:	2300      	movs	r3, #0
 80025fa:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 80025fc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8002600:	e7ef      	b.n	80025e2 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8002602:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002604:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002608:	f023 0302 	bic.w	r3, r3, #2
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8002612:	4620      	mov	r0, r4
 8002614:	f7ff ff46 	bl	80024a4 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8002618:	2000      	movs	r0, #0
 800261a:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800261c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800261e:	f023 0303 	bic.w	r3, r3, #3
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6423      	str	r3, [r4, #64]	@ 0x40
 8002628:	e7e0      	b.n	80025ec <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800262a:	2001      	movs	r0, #1
}
 800262c:	4770      	bx	lr
	...

08002630 <HAL_ADC_Start_DMA>:
{
 8002630:	b510      	push	{r4, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8002636:	2200      	movs	r2, #0
 8002638:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800263a:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800263e:	2a01      	cmp	r2, #1
 8002640:	f000 8094 	beq.w	800276c <HAL_ADC_Start_DMA+0x13c>
 8002644:	4604      	mov	r4, r0
 8002646:	2201      	movs	r2, #1
 8002648:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800264c:	6802      	ldr	r2, [r0, #0]
 800264e:	6890      	ldr	r0, [r2, #8]
 8002650:	f010 0f01 	tst.w	r0, #1
 8002654:	d113      	bne.n	800267e <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8002656:	6890      	ldr	r0, [r2, #8]
 8002658:	f040 0001 	orr.w	r0, r0, #1
 800265c:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800265e:	4a46      	ldr	r2, [pc, #280]	@ (8002778 <HAL_ADC_Start_DMA+0x148>)
 8002660:	6810      	ldr	r0, [r2, #0]
 8002662:	4a46      	ldr	r2, [pc, #280]	@ (800277c <HAL_ADC_Start_DMA+0x14c>)
 8002664:	fba2 2000 	umull	r2, r0, r2, r0
 8002668:	0c80      	lsrs	r0, r0, #18
 800266a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800266e:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8002670:	e002      	b.n	8002678 <HAL_ADC_Start_DMA+0x48>
      counter--;
 8002672:	9801      	ldr	r0, [sp, #4]
 8002674:	3801      	subs	r0, #1
 8002676:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8002678:	9801      	ldr	r0, [sp, #4]
 800267a:	2800      	cmp	r0, #0
 800267c:	d1f9      	bne.n	8002672 <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800267e:	6822      	ldr	r2, [r4, #0]
 8002680:	6890      	ldr	r0, [r2, #8]
 8002682:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8002686:	d003      	beq.n	8002690 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002688:	6890      	ldr	r0, [r2, #8]
 800268a:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 800268e:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002690:	6822      	ldr	r2, [r4, #0]
 8002692:	6890      	ldr	r0, [r2, #8]
 8002694:	f010 0f01 	tst.w	r0, #1
 8002698:	d05d      	beq.n	8002756 <HAL_ADC_Start_DMA+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 800269a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800269c:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 80026a0:	f020 0001 	bic.w	r0, r0, #1
 80026a4:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 80026a8:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026aa:	6852      	ldr	r2, [r2, #4]
 80026ac:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80026b0:	d005      	beq.n	80026be <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026b2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80026b4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80026b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80026bc:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026be:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80026c0:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 80026c4:	d034      	beq.n	8002730 <HAL_ADC_Start_DMA+0x100>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026c6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80026c8:	f022 0206 	bic.w	r2, r2, #6
 80026cc:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 80026ce:	2200      	movs	r2, #0
 80026d0:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80026d6:	482a      	ldr	r0, [pc, #168]	@ (8002780 <HAL_ADC_Start_DMA+0x150>)
 80026d8:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026da:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80026dc:	4829      	ldr	r0, [pc, #164]	@ (8002784 <HAL_ADC_Start_DMA+0x154>)
 80026de:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026e0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80026e2:	4829      	ldr	r0, [pc, #164]	@ (8002788 <HAL_ADC_Start_DMA+0x158>)
 80026e4:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026e6:	6822      	ldr	r2, [r4, #0]
 80026e8:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 80026ec:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026ee:	6820      	ldr	r0, [r4, #0]
 80026f0:	6842      	ldr	r2, [r0, #4]
 80026f2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80026f6:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026f8:	6820      	ldr	r0, [r4, #0]
 80026fa:	6882      	ldr	r2, [r0, #8]
 80026fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002700:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002702:	6820      	ldr	r0, [r4, #0]
 8002704:	460a      	mov	r2, r1
 8002706:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 800270a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800270c:	f000 fab2 	bl	8002c74 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002710:	4b1e      	ldr	r3, [pc, #120]	@ (800278c <HAL_ADC_Start_DMA+0x15c>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f013 0f1f 	tst.w	r3, #31
 8002718:	d10d      	bne.n	8002736 <HAL_ADC_Start_DMA+0x106>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800271a:	6823      	ldr	r3, [r4, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002722:	d125      	bne.n	8002770 <HAL_ADC_Start_DMA+0x140>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800272a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800272c:	2000      	movs	r0, #0
 800272e:	e01b      	b.n	8002768 <HAL_ADC_Start_DMA+0x138>
      ADC_CLEAR_ERRORCODE(hadc);
 8002730:	2200      	movs	r2, #0
 8002732:	6462      	str	r2, [r4, #68]	@ 0x44
 8002734:	e7cb      	b.n	80026ce <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002736:	6823      	ldr	r3, [r4, #0]
 8002738:	4a15      	ldr	r2, [pc, #84]	@ (8002790 <HAL_ADC_Start_DMA+0x160>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d001      	beq.n	8002742 <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 800273e:	2000      	movs	r0, #0
 8002740:	e012      	b.n	8002768 <HAL_ADC_Start_DMA+0x138>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002748:	d114      	bne.n	8002774 <HAL_ADC_Start_DMA+0x144>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002750:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002752:	2000      	movs	r0, #0
 8002754:	e008      	b.n	8002768 <HAL_ADC_Start_DMA+0x138>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002756:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002758:	f043 0310 	orr.w	r3, r3, #16
 800275c:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 8002766:	2000      	movs	r0, #0
}
 8002768:	b002      	add	sp, #8
 800276a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800276c:	2002      	movs	r0, #2
 800276e:	e7fb      	b.n	8002768 <HAL_ADC_Start_DMA+0x138>
  return HAL_OK;
 8002770:	2000      	movs	r0, #0
 8002772:	e7f9      	b.n	8002768 <HAL_ADC_Start_DMA+0x138>
 8002774:	2000      	movs	r0, #0
 8002776:	e7f7      	b.n	8002768 <HAL_ADC_Start_DMA+0x138>
 8002778:	20000010 	.word	0x20000010
 800277c:	431bde83 	.word	0x431bde83
 8002780:	080027b9 	.word	0x080027b9
 8002784:	08002797 	.word	0x08002797
 8002788:	080027a3 	.word	0x080027a3
 800278c:	40012300 	.word	0x40012300
 8002790:	40012000 	.word	0x40012000

08002794 <HAL_ADC_ConvHalfCpltCallback>:
}
 8002794:	4770      	bx	lr

08002796 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002796:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002798:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800279a:	f7ff fffb 	bl	8002794 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800279e:	bd08      	pop	{r3, pc}

080027a0 <HAL_ADC_ErrorCallback>:
}
 80027a0:	4770      	bx	lr

080027a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027a2:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027a4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80027a6:	2340      	movs	r3, #64	@ 0x40
 80027a8:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027aa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027b2:	f7ff fff5 	bl	80027a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b6:	bd08      	pop	{r3, pc}

080027b8 <ADC_DMAConvCplt>:
{
 80027b8:	b508      	push	{r3, lr}
 80027ba:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027bc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027be:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80027c0:	f012 0f50 	tst.w	r2, #80	@ 0x50
 80027c4:	d125      	bne.n	8002812 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027c6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80027c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027cc:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027ce:	6803      	ldr	r3, [r0, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80027d6:	d119      	bne.n	800280c <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027d8:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027da:	b9ba      	cbnz	r2, 800280c <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027de:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 80027e2:	d003      	beq.n	80027ec <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80027e4:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027e6:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80027ea:	d10f      	bne.n	800280c <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	f022 0220 	bic.w	r2, r2, #32
 80027f2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027f4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80027f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027fa:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027fc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80027fe:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002802:	d103      	bne.n	800280c <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002804:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800280c:	f7fd feaa 	bl	8000564 <HAL_ADC_ConvCpltCallback>
}
 8002810:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002812:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002814:	f012 0f10 	tst.w	r2, #16
 8002818:	d104      	bne.n	8002824 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800281a:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800281c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800281e:	4618      	mov	r0, r3
 8002820:	4790      	blx	r2
}
 8002822:	e7f5      	b.n	8002810 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8002824:	f7ff ffbc 	bl	80027a0 <HAL_ADC_ErrorCallback>
 8002828:	e7f2      	b.n	8002810 <ADC_DMAConvCplt+0x58>
	...

0800282c <HAL_ADC_ConfigChannel>:
{
 800282c:	b430      	push	{r4, r5}
 800282e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8002830:	2200      	movs	r2, #0
 8002832:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002834:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002838:	2a01      	cmp	r2, #1
 800283a:	f000 80b6 	beq.w	80029aa <HAL_ADC_ConfigChannel+0x17e>
 800283e:	4603      	mov	r3, r0
 8002840:	2201      	movs	r2, #1
 8002842:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002846:	680a      	ldr	r2, [r1, #0]
 8002848:	2a09      	cmp	r2, #9
 800284a:	d940      	bls.n	80028ce <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800284c:	6804      	ldr	r4, [r0, #0]
 800284e:	68e0      	ldr	r0, [r4, #12]
 8002850:	b292      	uxth	r2, r2
 8002852:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002856:	3a1e      	subs	r2, #30
 8002858:	f04f 0c07 	mov.w	ip, #7
 800285c:	fa0c f202 	lsl.w	r2, ip, r2
 8002860:	ea20 0202 	bic.w	r2, r0, r2
 8002864:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002866:	681c      	ldr	r4, [r3, #0]
 8002868:	68e0      	ldr	r0, [r4, #12]
 800286a:	880a      	ldrh	r2, [r1, #0]
 800286c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002870:	3a1e      	subs	r2, #30
 8002872:	688d      	ldr	r5, [r1, #8]
 8002874:	fa05 f202 	lsl.w	r2, r5, r2
 8002878:	4302      	orrs	r2, r0
 800287a:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 800287c:	684a      	ldr	r2, [r1, #4]
 800287e:	2a06      	cmp	r2, #6
 8002880:	d83c      	bhi.n	80028fc <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002882:	681c      	ldr	r4, [r3, #0]
 8002884:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002886:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800288a:	3a05      	subs	r2, #5
 800288c:	f04f 0c1f 	mov.w	ip, #31
 8002890:	fa0c f202 	lsl.w	r2, ip, r2
 8002894:	ea20 0202 	bic.w	r2, r0, r2
 8002898:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800289a:	681c      	ldr	r4, [r3, #0]
 800289c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800289e:	684a      	ldr	r2, [r1, #4]
 80028a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80028a4:	3a05      	subs	r2, #5
 80028a6:	f8b1 c000 	ldrh.w	ip, [r1]
 80028aa:	fa0c f202 	lsl.w	r2, ip, r2
 80028ae:	4302      	orrs	r2, r0
 80028b0:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	4a3e      	ldr	r2, [pc, #248]	@ (80029b0 <HAL_ADC_ConfigChannel+0x184>)
 80028b6:	4290      	cmp	r0, r2
 80028b8:	d050      	beq.n	800295c <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	4a3c      	ldr	r2, [pc, #240]	@ (80029b0 <HAL_ADC_ConfigChannel+0x184>)
 80028be:	4290      	cmp	r0, r2
 80028c0:	d055      	beq.n	800296e <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 80028c8:	b002      	add	sp, #8
 80028ca:	bc30      	pop	{r4, r5}
 80028cc:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028ce:	6804      	ldr	r4, [r0, #0]
 80028d0:	6920      	ldr	r0, [r4, #16]
 80028d2:	b292      	uxth	r2, r2
 80028d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80028d8:	f04f 0c07 	mov.w	ip, #7
 80028dc:	fa0c f202 	lsl.w	r2, ip, r2
 80028e0:	ea20 0202 	bic.w	r2, r0, r2
 80028e4:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028e6:	681c      	ldr	r4, [r3, #0]
 80028e8:	6920      	ldr	r0, [r4, #16]
 80028ea:	880a      	ldrh	r2, [r1, #0]
 80028ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80028f0:	688d      	ldr	r5, [r1, #8]
 80028f2:	fa05 f202 	lsl.w	r2, r5, r2
 80028f6:	4302      	orrs	r2, r0
 80028f8:	6122      	str	r2, [r4, #16]
 80028fa:	e7bf      	b.n	800287c <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 80028fc:	2a0c      	cmp	r2, #12
 80028fe:	d816      	bhi.n	800292e <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002900:	681d      	ldr	r5, [r3, #0]
 8002902:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8002904:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002908:	3a23      	subs	r2, #35	@ 0x23
 800290a:	241f      	movs	r4, #31
 800290c:	fa04 f202 	lsl.w	r2, r4, r2
 8002910:	ea20 0202 	bic.w	r2, r0, r2
 8002914:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002916:	681d      	ldr	r5, [r3, #0]
 8002918:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800291a:	684a      	ldr	r2, [r1, #4]
 800291c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002920:	3a23      	subs	r2, #35	@ 0x23
 8002922:	880c      	ldrh	r4, [r1, #0]
 8002924:	fa04 f202 	lsl.w	r2, r4, r2
 8002928:	4302      	orrs	r2, r0
 800292a:	632a      	str	r2, [r5, #48]	@ 0x30
 800292c:	e7c1      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800292e:	681d      	ldr	r5, [r3, #0]
 8002930:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002932:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002936:	3a41      	subs	r2, #65	@ 0x41
 8002938:	241f      	movs	r4, #31
 800293a:	fa04 f202 	lsl.w	r2, r4, r2
 800293e:	ea20 0202 	bic.w	r2, r0, r2
 8002942:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002944:	681d      	ldr	r5, [r3, #0]
 8002946:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002948:	684a      	ldr	r2, [r1, #4]
 800294a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800294e:	3a41      	subs	r2, #65	@ 0x41
 8002950:	880c      	ldrh	r4, [r1, #0]
 8002952:	fa04 f202 	lsl.w	r2, r4, r2
 8002956:	4302      	orrs	r2, r0
 8002958:	62ea      	str	r2, [r5, #44]	@ 0x2c
 800295a:	e7aa      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800295c:	680a      	ldr	r2, [r1, #0]
 800295e:	2a12      	cmp	r2, #18
 8002960:	d1ab      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002962:	4814      	ldr	r0, [pc, #80]	@ (80029b4 <HAL_ADC_ConfigChannel+0x188>)
 8002964:	6842      	ldr	r2, [r0, #4]
 8002966:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800296a:	6042      	str	r2, [r0, #4]
 800296c:	e7a5      	b.n	80028ba <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800296e:	680a      	ldr	r2, [r1, #0]
 8002970:	3a10      	subs	r2, #16
 8002972:	2a01      	cmp	r2, #1
 8002974:	d8a5      	bhi.n	80028c2 <HAL_ADC_ConfigChannel+0x96>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002976:	480f      	ldr	r0, [pc, #60]	@ (80029b4 <HAL_ADC_ConfigChannel+0x188>)
 8002978:	6842      	ldr	r2, [r0, #4]
 800297a:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800297e:	6042      	str	r2, [r0, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002980:	680a      	ldr	r2, [r1, #0]
 8002982:	2a10      	cmp	r2, #16
 8002984:	d19d      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002986:	4a0c      	ldr	r2, [pc, #48]	@ (80029b8 <HAL_ADC_ConfigChannel+0x18c>)
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	490c      	ldr	r1, [pc, #48]	@ (80029bc <HAL_ADC_ConfigChannel+0x190>)
 800298c:	fba1 1202 	umull	r1, r2, r1, r2
 8002990:	0c92      	lsrs	r2, r2, #18
 8002992:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002996:	0052      	lsls	r2, r2, #1
 8002998:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 800299a:	e002      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x176>
        counter--;
 800299c:	9a01      	ldr	r2, [sp, #4]
 800299e:	3a01      	subs	r2, #1
 80029a0:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 80029a2:	9a01      	ldr	r2, [sp, #4]
 80029a4:	2a00      	cmp	r2, #0
 80029a6:	d1f9      	bne.n	800299c <HAL_ADC_ConfigChannel+0x170>
 80029a8:	e78b      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 80029aa:	2002      	movs	r0, #2
 80029ac:	e78c      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x9c>
 80029ae:	bf00      	nop
 80029b0:	40012000 	.word	0x40012000
 80029b4:	40012300 	.word	0x40012300
 80029b8:	20000010 	.word	0x20000010
 80029bc:	431bde83 	.word	0x431bde83

080029c0 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80029c0:	2800      	cmp	r0, #0
 80029c2:	db07      	blt.n	80029d4 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c4:	f000 021f 	and.w	r2, r0, #31
 80029c8:	0940      	lsrs	r0, r0, #5
 80029ca:	2301      	movs	r3, #1
 80029cc:	4093      	lsls	r3, r2
 80029ce:	4a02      	ldr	r2, [pc, #8]	@ (80029d8 <__NVIC_EnableIRQ+0x18>)
 80029d0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000e100 	.word	0xe000e100

080029dc <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 80029dc:	2800      	cmp	r0, #0
 80029de:	db08      	blt.n	80029f2 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	0109      	lsls	r1, r1, #4
 80029e2:	b2c9      	uxtb	r1, r1
 80029e4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80029e8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80029ec:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80029f0:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f2:	f000 000f 	and.w	r0, r0, #15
 80029f6:	0109      	lsls	r1, r1, #4
 80029f8:	b2c9      	uxtb	r1, r1
 80029fa:	4b01      	ldr	r3, [pc, #4]	@ (8002a00 <__NVIC_SetPriority+0x24>)
 80029fc:	5419      	strb	r1, [r3, r0]
  }
}
 80029fe:	4770      	bx	lr
 8002a00:	e000ed14 	.word	0xe000ed14

08002a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a04:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a06:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0a:	f1c0 0c07 	rsb	ip, r0, #7
 8002a0e:	f1bc 0f04 	cmp.w	ip, #4
 8002a12:	bf28      	it	cs
 8002a14:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a18:	1d03      	adds	r3, r0, #4
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d90f      	bls.n	8002a3e <NVIC_EncodePriority+0x3a>
 8002a1e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	f04f 3eff 	mov.w	lr, #4294967295
 8002a24:	fa0e f00c 	lsl.w	r0, lr, ip
 8002a28:	ea21 0100 	bic.w	r1, r1, r0
 8002a2c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a2e:	fa0e fe03 	lsl.w	lr, lr, r3
 8002a32:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8002a36:	ea41 0002 	orr.w	r0, r1, r2
 8002a3a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e7ee      	b.n	8002a20 <NVIC_EncodePriority+0x1c>
	...

08002a44 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a44:	4a07      	ldr	r2, [pc, #28]	@ (8002a64 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002a46:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a48:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002a4c:	041b      	lsls	r3, r3, #16
 8002a4e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	0200      	lsls	r0, r0, #8
 8002a52:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a56:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002a60:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a68:	b510      	push	{r4, lr}
 8002a6a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a6c:	4b05      	ldr	r3, [pc, #20]	@ (8002a84 <HAL_NVIC_SetPriority+0x1c>)
 8002a6e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a70:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002a74:	f7ff ffc6 	bl	8002a04 <NVIC_EncodePriority>
 8002a78:	4601      	mov	r1, r0
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f7ff ffae 	bl	80029dc <__NVIC_SetPriority>
}
 8002a80:	bd10      	pop	{r4, pc}
 8002a82:	bf00      	nop
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a88:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a8a:	f7ff ff99 	bl	80029c0 <__NVIC_EnableIRQ>
}
 8002a8e:	bd08      	pop	{r3, pc}

08002a90 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a90:	b158      	cbz	r0, 8002aaa <HAL_CRC_Init+0x1a>
{
 8002a92:	b510      	push	{r4, lr}
 8002a94:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a96:	7943      	ldrb	r3, [r0, #5]
 8002a98:	b11b      	cbz	r3, 8002aa2 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8002a9e:	2000      	movs	r0, #0
}
 8002aa0:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8002aa2:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8002aa4:	f7fd ffe0 	bl	8000a68 <HAL_CRC_MspInit>
 8002aa8:	e7f7      	b.n	8002a9a <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8002aaa:	2001      	movs	r0, #1
}
 8002aac:	4770      	bx	lr

08002aae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aae:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ab0:	6805      	ldr	r5, [r0, #0]
 8002ab2:	682c      	ldr	r4, [r5, #0]
 8002ab4:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8002ab8:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002aba:	6804      	ldr	r4, [r0, #0]
 8002abc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002abe:	6883      	ldr	r3, [r0, #8]
 8002ac0:	2b40      	cmp	r3, #64	@ 0x40
 8002ac2:	d005      	beq.n	8002ad0 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8002ac4:	6803      	ldr	r3, [r0, #0]
 8002ac6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8002ac8:	6803      	ldr	r3, [r0, #0]
 8002aca:	60da      	str	r2, [r3, #12]
  }
}
 8002acc:	bc30      	pop	{r4, r5}
 8002ace:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8002ad0:	6803      	ldr	r3, [r0, #0]
 8002ad2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002ad4:	6803      	ldr	r3, [r0, #0]
 8002ad6:	60d9      	str	r1, [r3, #12]
 8002ad8:	e7f8      	b.n	8002acc <DMA_SetConfig+0x1e>
	...

08002adc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002adc:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ade:	6803      	ldr	r3, [r0, #0]
 8002ae0:	b2d9      	uxtb	r1, r3
 8002ae2:	3910      	subs	r1, #16
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8002b10 <DMA_CalcBaseAndBitshift+0x34>)
 8002ae6:	fba2 4201 	umull	r4, r2, r2, r1
 8002aea:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002aec:	4c09      	ldr	r4, [pc, #36]	@ (8002b14 <DMA_CalcBaseAndBitshift+0x38>)
 8002aee:	5ca2      	ldrb	r2, [r4, r2]
 8002af0:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002af2:	295f      	cmp	r1, #95	@ 0x5f
 8002af4:	d907      	bls.n	8002b06 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002af6:	f36f 0309 	bfc	r3, #0, #10
 8002afa:	3304      	adds	r3, #4
 8002afc:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002afe:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8002b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b04:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b06:	f36f 0309 	bfc	r3, #0, #10
 8002b0a:	6583      	str	r3, [r0, #88]	@ 0x58
 8002b0c:	e7f7      	b.n	8002afe <DMA_CalcBaseAndBitshift+0x22>
 8002b0e:	bf00      	nop
 8002b10:	aaaaaaab 	.word	0xaaaaaaab
 8002b14:	08009fbc 	.word	0x08009fbc

08002b18 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b18:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b1a:	6982      	ldr	r2, [r0, #24]
 8002b1c:	b992      	cbnz	r2, 8002b44 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d00a      	beq.n	8002b38 <DMA_CheckFifoParam+0x20>
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d002      	beq.n	8002b2c <DMA_CheckFifoParam+0x14>
 8002b26:	b10b      	cbz	r3, 8002b2c <DMA_CheckFifoParam+0x14>
 8002b28:	2000      	movs	r0, #0
 8002b2a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b2c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002b2e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002b32:	d128      	bne.n	8002b86 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8002b34:	2000      	movs	r0, #0
 8002b36:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b38:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002b3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b3e:	d024      	beq.n	8002b8a <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8002b40:	2000      	movs	r0, #0
 8002b42:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b44:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002b48:	d009      	beq.n	8002b5e <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d925      	bls.n	8002b9a <DMA_CheckFifoParam+0x82>
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d125      	bne.n	8002b9e <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b52:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002b54:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002b58:	d123      	bne.n	8002ba2 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	4770      	bx	lr
    switch (tmp)
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d803      	bhi.n	8002b6a <DMA_CheckFifoParam+0x52>
 8002b62:	e8df f003 	tbb	[pc, r3]
 8002b66:	0414      	.short	0x0414
 8002b68:	0a14      	.short	0x0a14
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b6e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002b70:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002b74:	d10d      	bne.n	8002b92 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002b76:	2000      	movs	r0, #0
 8002b78:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b7a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002b7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b80:	d009      	beq.n	8002b96 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8002b82:	2000      	movs	r0, #0
 8002b84:	4770      	bx	lr
        status = HAL_ERROR;
 8002b86:	2001      	movs	r0, #1
 8002b88:	4770      	bx	lr
        status = HAL_ERROR;
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	4770      	bx	lr
      status = HAL_ERROR;
 8002b8e:	2001      	movs	r0, #1
 8002b90:	4770      	bx	lr
        status = HAL_ERROR;
 8002b92:	2001      	movs	r0, #1
 8002b94:	4770      	bx	lr
        status = HAL_ERROR;
 8002b96:	2001      	movs	r0, #1
 8002b98:	4770      	bx	lr
      status = HAL_ERROR;
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	4770      	bx	lr
    switch (tmp)
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8002ba2:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_DMA_Init>:
{
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002bac:	f7ff fc60 	bl	8002470 <HAL_GetTick>
  if(hdma == NULL)
 8002bb0:	2c00      	cmp	r4, #0
 8002bb2:	d05b      	beq.n	8002c6c <HAL_DMA_Init+0xc4>
 8002bb4:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8002bc2:	6822      	ldr	r2, [r4, #0]
 8002bc4:	6813      	ldr	r3, [r2, #0]
 8002bc6:	f023 0301 	bic.w	r3, r3, #1
 8002bca:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bcc:	6823      	ldr	r3, [r4, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	f012 0f01 	tst.w	r2, #1
 8002bd4:	d00a      	beq.n	8002bec <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bd6:	f7ff fc4b 	bl	8002470 <HAL_GetTick>
 8002bda:	1b43      	subs	r3, r0, r5
 8002bdc:	2b05      	cmp	r3, #5
 8002bde:	d9f5      	bls.n	8002bcc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002be0:	2320      	movs	r3, #32
 8002be2:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002be4:	2003      	movs	r0, #3
 8002be6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002bec:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bee:	4920      	ldr	r1, [pc, #128]	@ (8002c70 <HAL_DMA_Init+0xc8>)
 8002bf0:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bf2:	6862      	ldr	r2, [r4, #4]
 8002bf4:	68a0      	ldr	r0, [r4, #8]
 8002bf6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf8:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bfa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bfc:	6920      	ldr	r0, [r4, #16]
 8002bfe:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c00:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c02:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c04:	69a0      	ldr	r0, [r4, #24]
 8002c06:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c08:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c0a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c0c:	6a20      	ldr	r0, [r4, #32]
 8002c0e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c10:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c12:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002c14:	2904      	cmp	r1, #4
 8002c16:	d01e      	beq.n	8002c56 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002c18:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002c1a:	6826      	ldr	r6, [r4, #0]
 8002c1c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c1e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002c22:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c24:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d107      	bne.n	8002c3a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002c2a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002c2c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c2e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002c30:	b11b      	cbz	r3, 8002c3a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c32:	4620      	mov	r0, r4
 8002c34:	f7ff ff70 	bl	8002b18 <DMA_CheckFifoParam>
 8002c38:	b990      	cbnz	r0, 8002c60 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002c3a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f7ff ff4d 	bl	8002adc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c42:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002c44:	233f      	movs	r3, #63	@ 0x3f
 8002c46:	4093      	lsls	r3, r2
 8002c48:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8002c54:	e7c9      	b.n	8002bea <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c56:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002c58:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002c5a:	4301      	orrs	r1, r0
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	e7db      	b.n	8002c18 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c60:	2340      	movs	r3, #64	@ 0x40
 8002c62:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002c64:	2001      	movs	r0, #1
 8002c66:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8002c6a:	e7be      	b.n	8002bea <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	e7bc      	b.n	8002bea <HAL_DMA_Init+0x42>
 8002c70:	f010803f 	.word	0xf010803f

08002c74 <HAL_DMA_Start_IT>:
{
 8002c74:	b538      	push	{r3, r4, r5, lr}
 8002c76:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c78:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8002c7a:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8002c7e:	2801      	cmp	r0, #1
 8002c80:	d02a      	beq.n	8002cd8 <HAL_DMA_Start_IT+0x64>
 8002c82:	2001      	movs	r0, #1
 8002c84:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c88:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8002c8c:	2801      	cmp	r0, #1
 8002c8e:	d004      	beq.n	8002c9a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002c90:	2300      	movs	r3, #0
 8002c92:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8002c96:	2002      	movs	r0, #2
}
 8002c98:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f7ff ff02 	bl	8002aae <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002caa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002cac:	233f      	movs	r3, #63	@ 0x3f
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cb2:	6822      	ldr	r2, [r4, #0]
 8002cb4:	6813      	ldr	r3, [r2, #0]
 8002cb6:	f043 0316 	orr.w	r3, r3, #22
 8002cba:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002cbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002cbe:	b123      	cbz	r3, 8002cca <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cc0:	6822      	ldr	r2, [r4, #0]
 8002cc2:	6813      	ldr	r3, [r2, #0]
 8002cc4:	f043 0308 	orr.w	r3, r3, #8
 8002cc8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002cca:	6822      	ldr	r2, [r4, #0]
 8002ccc:	6813      	ldr	r3, [r2, #0]
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	e7df      	b.n	8002c98 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8002cd8:	2002      	movs	r0, #2
 8002cda:	e7dd      	b.n	8002c98 <HAL_DMA_Start_IT+0x24>

08002cdc <HAL_DMA_IRQHandler>:
{
 8002cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ce6:	4b72      	ldr	r3, [pc, #456]	@ (8002eb0 <HAL_DMA_IRQHandler+0x1d4>)
 8002ce8:	681d      	ldr	r5, [r3, #0]
 8002cea:	4b72      	ldr	r3, [pc, #456]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1d8>)
 8002cec:	fba3 3505 	umull	r3, r5, r3, r5
 8002cf0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf2:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8002cf4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002cf8:	2308      	movs	r3, #8
 8002cfa:	4093      	lsls	r3, r2
 8002cfc:	4233      	tst	r3, r6
 8002cfe:	d010      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d00:	6803      	ldr	r3, [r0, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	f012 0f04 	tst.w	r2, #4
 8002d08:	d00b      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	f022 0204 	bic.w	r2, r2, #4
 8002d10:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d12:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002d14:	2308      	movs	r3, #8
 8002d16:	4093      	lsls	r3, r2
 8002d18:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d1a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d22:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002d24:	2301      	movs	r3, #1
 8002d26:	4093      	lsls	r3, r2
 8002d28:	4233      	tst	r3, r6
 8002d2a:	d009      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d2c:	6822      	ldr	r2, [r4, #0]
 8002d2e:	6952      	ldr	r2, [r2, #20]
 8002d30:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002d34:	d004      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d36:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d38:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002d3a:	f043 0302 	orr.w	r3, r3, #2
 8002d3e:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d40:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002d42:	2304      	movs	r3, #4
 8002d44:	4093      	lsls	r3, r2
 8002d46:	4233      	tst	r3, r6
 8002d48:	d009      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d4a:	6822      	ldr	r2, [r4, #0]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	f012 0f02 	tst.w	r2, #2
 8002d52:	d004      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d54:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d56:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002d58:	f043 0304 	orr.w	r3, r3, #4
 8002d5c:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d5e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002d60:	2310      	movs	r3, #16
 8002d62:	4093      	lsls	r3, r2
 8002d64:	4233      	tst	r3, r6
 8002d66:	d024      	beq.n	8002db2 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d68:	6822      	ldr	r2, [r4, #0]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	f012 0f08 	tst.w	r2, #8
 8002d70:	d01f      	beq.n	8002db2 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d72:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002d7c:	d00d      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002d84:	d104      	bne.n	8002d90 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8002d86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d88:	b19b      	cbz	r3, 8002db2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	4798      	blx	r3
 8002d8e:	e010      	b.n	8002db2 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d90:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002d92:	b173      	cbz	r3, 8002db2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002d94:	4620      	mov	r0, r4
 8002d96:	4798      	blx	r3
 8002d98:	e00b      	b.n	8002db2 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8002da0:	d103      	bne.n	8002daa <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	f022 0208 	bic.w	r2, r2, #8
 8002da8:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002daa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002dac:	b10b      	cbz	r3, 8002db2 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8002dae:	4620      	mov	r0, r4
 8002db0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002db2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002db4:	2320      	movs	r3, #32
 8002db6:	4093      	lsls	r3, r2
 8002db8:	4233      	tst	r3, r6
 8002dba:	d054      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dbc:	6822      	ldr	r2, [r4, #0]
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	f012 0f10 	tst.w	r2, #16
 8002dc4:	d04f      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dc6:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dc8:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d00e      	beq.n	8002dee <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002dd8:	d033      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002de0:	d12a      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 8002de2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d03e      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 8002de8:	4620      	mov	r0, r4
 8002dea:	4798      	blx	r3
 8002dec:	e03b      	b.n	8002e66 <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dee:	6822      	ldr	r2, [r4, #0]
 8002df0:	6813      	ldr	r3, [r2, #0]
 8002df2:	f023 0316 	bic.w	r3, r3, #22
 8002df6:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002df8:	6822      	ldr	r2, [r4, #0]
 8002dfa:	6953      	ldr	r3, [r2, #20]
 8002dfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e00:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e04:	b1a3      	cbz	r3, 8002e30 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e06:	6822      	ldr	r2, [r4, #0]
 8002e08:	6813      	ldr	r3, [r2, #0]
 8002e0a:	f023 0308 	bic.w	r3, r3, #8
 8002e0e:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e10:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002e12:	233f      	movs	r3, #63	@ 0x3f
 8002e14:	4093      	lsls	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8002e24:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d03f      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	4798      	blx	r3
        return;
 8002e2e:	e03c      	b.n	8002eaa <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e30:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1e7      	bne.n	8002e06 <HAL_DMA_IRQHandler+0x12a>
 8002e36:	e7eb      	b.n	8002e10 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 8002e38:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002e3a:	b1a3      	cbz	r3, 8002e66 <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	4798      	blx	r3
 8002e40:	e011      	b.n	8002e66 <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8002e48:	d109      	bne.n	8002e5e <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	f022 0210 	bic.w	r2, r2, #16
 8002e50:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8002e5e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002e60:	b10b      	cbz	r3, 8002e66 <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 8002e62:	4620      	mov	r0, r4
 8002e64:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e66:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002e68:	b1fb      	cbz	r3, 8002eaa <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e6a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002e6c:	f013 0f01 	tst.w	r3, #1
 8002e70:	d017      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e72:	2305      	movs	r3, #5
 8002e74:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8002e78:	6822      	ldr	r2, [r4, #0]
 8002e7a:	6813      	ldr	r3, [r2, #0]
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002e82:	9b01      	ldr	r3, [sp, #4]
 8002e84:	3301      	adds	r3, #1
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	42ab      	cmp	r3, r5
 8002e8a:	d804      	bhi.n	8002e96 <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f013 0f01 	tst.w	r3, #1
 8002e94:	d1f5      	bne.n	8002e82 <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 8002e96:	2301      	movs	r3, #1
 8002e98:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8002ea2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002ea4:	b10b      	cbz	r3, 8002eaa <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	4798      	blx	r3
}
 8002eaa:	b003      	add	sp, #12
 8002eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000010 	.word	0x20000010
 8002eb4:	1b4e81b5 	.word	0x1b4e81b5

08002eb8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	2b0f      	cmp	r3, #15
 8002ebc:	f200 80d7 	bhi.w	800306e <HAL_GPIO_Init+0x1b6>
{
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	e065      	b.n	8002f92 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ec6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ec8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002ecc:	2403      	movs	r4, #3
 8002ece:	fa04 f40e 	lsl.w	r4, r4, lr
 8002ed2:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ed6:	68cc      	ldr	r4, [r1, #12]
 8002ed8:	fa04 f40e 	lsl.w	r4, r4, lr
 8002edc:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002ede:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ee0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ee2:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee6:	684a      	ldr	r2, [r1, #4]
 8002ee8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002eec:	409a      	lsls	r2, r3
 8002eee:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002ef0:	6042      	str	r2, [r0, #4]
 8002ef2:	e05c      	b.n	8002fae <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ef4:	08dc      	lsrs	r4, r3, #3
 8002ef6:	3408      	adds	r4, #8
 8002ef8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002efc:	f003 0507 	and.w	r5, r3, #7
 8002f00:	00ad      	lsls	r5, r5, #2
 8002f02:	f04f 0e0f 	mov.w	lr, #15
 8002f06:	fa0e fe05 	lsl.w	lr, lr, r5
 8002f0a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f0e:	690a      	ldr	r2, [r1, #16]
 8002f10:	40aa      	lsls	r2, r5
 8002f12:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002f16:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8002f1a:	e05c      	b.n	8002fd6 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	e000      	b.n	8002f22 <HAL_GPIO_Init+0x6a>
 8002f20:	2200      	movs	r2, #0
 8002f22:	fa02 f20e 	lsl.w	r2, r2, lr
 8002f26:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f28:	3402      	adds	r4, #2
 8002f2a:	4d51      	ldr	r5, [pc, #324]	@ (8003070 <HAL_GPIO_Init+0x1b8>)
 8002f2c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f30:	4a50      	ldr	r2, [pc, #320]	@ (8003074 <HAL_GPIO_Init+0x1bc>)
 8002f32:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002f34:	ea6f 020c 	mvn.w	r2, ip
 8002f38:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f3c:	684e      	ldr	r6, [r1, #4]
 8002f3e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8002f42:	d001      	beq.n	8002f48 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8002f44:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8002f48:	4c4a      	ldr	r4, [pc, #296]	@ (8003074 <HAL_GPIO_Init+0x1bc>)
 8002f4a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8002f4c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002f4e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f52:	684e      	ldr	r6, [r1, #4]
 8002f54:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8002f58:	d001      	beq.n	8002f5e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8002f5a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8002f5e:	4c45      	ldr	r4, [pc, #276]	@ (8003074 <HAL_GPIO_Init+0x1bc>)
 8002f60:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8002f62:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002f64:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f68:	684e      	ldr	r6, [r1, #4]
 8002f6a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8002f6e:	d001      	beq.n	8002f74 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8002f70:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8002f74:	4c3f      	ldr	r4, [pc, #252]	@ (8003074 <HAL_GPIO_Init+0x1bc>)
 8002f76:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f78:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8002f7a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f7c:	684d      	ldr	r5, [r1, #4]
 8002f7e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8002f82:	d001      	beq.n	8002f88 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8002f84:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8002f88:	4c3a      	ldr	r4, [pc, #232]	@ (8003074 <HAL_GPIO_Init+0x1bc>)
 8002f8a:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	2b0f      	cmp	r3, #15
 8002f90:	d86b      	bhi.n	800306a <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8002f92:	2201      	movs	r2, #1
 8002f94:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f96:	680c      	ldr	r4, [r1, #0]
 8002f98:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8002f9c:	ea32 0404 	bics.w	r4, r2, r4
 8002fa0:	d1f4      	bne.n	8002f8c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fa2:	684c      	ldr	r4, [r1, #4]
 8002fa4:	f004 0403 	and.w	r4, r4, #3
 8002fa8:	3c01      	subs	r4, #1
 8002faa:	2c01      	cmp	r4, #1
 8002fac:	d98b      	bls.n	8002ec6 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fae:	684a      	ldr	r2, [r1, #4]
 8002fb0:	f002 0203 	and.w	r2, r2, #3
 8002fb4:	2a03      	cmp	r2, #3
 8002fb6:	d009      	beq.n	8002fcc <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8002fb8:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fba:	005d      	lsls	r5, r3, #1
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	40aa      	lsls	r2, r5
 8002fc0:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc4:	688a      	ldr	r2, [r1, #8]
 8002fc6:	40aa      	lsls	r2, r5
 8002fc8:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002fca:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fcc:	684a      	ldr	r2, [r1, #4]
 8002fce:	f002 0203 	and.w	r2, r2, #3
 8002fd2:	2a02      	cmp	r2, #2
 8002fd4:	d08e      	beq.n	8002ef4 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8002fd6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fd8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002fdc:	2203      	movs	r2, #3
 8002fde:	fa02 f20e 	lsl.w	r2, r2, lr
 8002fe2:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fe6:	684a      	ldr	r2, [r1, #4]
 8002fe8:	f002 0203 	and.w	r2, r2, #3
 8002fec:	fa02 f20e 	lsl.w	r2, r2, lr
 8002ff0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002ff2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ff4:	684a      	ldr	r2, [r1, #4]
 8002ff6:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8002ffa:	d0c7      	beq.n	8002f8c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	9201      	str	r2, [sp, #4]
 8003000:	4a1d      	ldr	r2, [pc, #116]	@ (8003078 <HAL_GPIO_Init+0x1c0>)
 8003002:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8003004:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8003008:	6454      	str	r4, [r2, #68]	@ 0x44
 800300a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800300c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003010:	9201      	str	r2, [sp, #4]
 8003012:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003014:	089c      	lsrs	r4, r3, #2
 8003016:	1ca5      	adds	r5, r4, #2
 8003018:	4a15      	ldr	r2, [pc, #84]	@ (8003070 <HAL_GPIO_Init+0x1b8>)
 800301a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800301e:	f003 0e03 	and.w	lr, r3, #3
 8003022:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003026:	220f      	movs	r2, #15
 8003028:	fa02 f20e 	lsl.w	r2, r2, lr
 800302c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003030:	4a12      	ldr	r2, [pc, #72]	@ (800307c <HAL_GPIO_Init+0x1c4>)
 8003032:	4290      	cmp	r0, r2
 8003034:	f43f af74 	beq.w	8002f20 <HAL_GPIO_Init+0x68>
 8003038:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800303c:	4290      	cmp	r0, r2
 800303e:	d00e      	beq.n	800305e <HAL_GPIO_Init+0x1a6>
 8003040:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003044:	4290      	cmp	r0, r2
 8003046:	d00c      	beq.n	8003062 <HAL_GPIO_Init+0x1aa>
 8003048:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800304c:	4290      	cmp	r0, r2
 800304e:	d00a      	beq.n	8003066 <HAL_GPIO_Init+0x1ae>
 8003050:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003054:	4290      	cmp	r0, r2
 8003056:	f43f af61 	beq.w	8002f1c <HAL_GPIO_Init+0x64>
 800305a:	2207      	movs	r2, #7
 800305c:	e761      	b.n	8002f22 <HAL_GPIO_Init+0x6a>
 800305e:	2201      	movs	r2, #1
 8003060:	e75f      	b.n	8002f22 <HAL_GPIO_Init+0x6a>
 8003062:	2202      	movs	r2, #2
 8003064:	e75d      	b.n	8002f22 <HAL_GPIO_Init+0x6a>
 8003066:	2203      	movs	r2, #3
 8003068:	e75b      	b.n	8002f22 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800306a:	b002      	add	sp, #8
 800306c:	bd70      	pop	{r4, r5, r6, pc}
 800306e:	4770      	bx	lr
 8003070:	40013800 	.word	0x40013800
 8003074:	40013c00 	.word	0x40013c00
 8003078:	40023800 	.word	0x40023800
 800307c:	40020000 	.word	0x40020000

08003080 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003080:	6903      	ldr	r3, [r0, #16]
 8003082:	4219      	tst	r1, r3
 8003084:	d001      	beq.n	800308a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8003086:	2001      	movs	r0, #1
 8003088:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800308a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800308c:	4770      	bx	lr

0800308e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800308e:	b10a      	cbz	r2, 8003094 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003090:	6181      	str	r1, [r0, #24]
 8003092:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003094:	0409      	lsls	r1, r1, #16
 8003096:	6181      	str	r1, [r0, #24]
  }
}
 8003098:	4770      	bx	lr
	...

0800309c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800309c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800309e:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	4203      	tst	r3, r0
 80030a4:	d100      	bne.n	80030a8 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80030a6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030a8:	4b02      	ldr	r3, [pc, #8]	@ (80030b4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80030aa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030ac:	f7fe fa5d 	bl	800156a <HAL_GPIO_EXTI_Callback>
}
 80030b0:	e7f9      	b.n	80030a6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80030b2:	bf00      	nop
 80030b4:	40013c00 	.word	0x40013c00

080030b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030b8:	b500      	push	{lr}
 80030ba:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030bc:	2200      	movs	r2, #0
 80030be:	9200      	str	r2, [sp, #0]
 80030c0:	4b0d      	ldr	r3, [pc, #52]	@ (80030f8 <HAL_MspInit+0x40>)
 80030c2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80030c4:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80030c8:	6459      	str	r1, [r3, #68]	@ 0x44
 80030ca:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80030cc:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80030d0:	9100      	str	r1, [sp, #0]
 80030d2:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030d4:	9201      	str	r2, [sp, #4]
 80030d6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80030d8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80030dc:	6419      	str	r1, [r3, #64]	@ 0x40
 80030de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030e8:	210f      	movs	r1, #15
 80030ea:	f06f 0001 	mvn.w	r0, #1
 80030ee:	f7ff fcbb 	bl	8002a68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030f2:	b003      	add	sp, #12
 80030f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80030f8:	40023800 	.word	0x40023800

080030fc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003100:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003102:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8003106:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800310a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800310e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003112:	429a      	cmp	r2, r3
 8003114:	d854      	bhi.n	80031c0 <PCD_WriteEmptyTxFifo+0xc4>
 8003116:	4607      	mov	r7, r0
 8003118:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800311a:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 800311c:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8003120:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003124:	69d2      	ldr	r2, [r2, #28]
 8003126:	429a      	cmp	r2, r3
 8003128:	d300      	bcc.n	800312c <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 800312a:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 800312c:	f102 0903 	add.w	r9, r2, #3
 8003130:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003134:	e015      	b.n	8003162 <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8003136:	f106 0903 	add.w	r9, r6, #3
 800313a:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 800313e:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003140:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8003144:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8003148:	6a29      	ldr	r1, [r5, #32]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	b2b3      	uxth	r3, r6
 800314e:	b2e2      	uxtb	r2, r4
 8003150:	4640      	mov	r0, r8
 8003152:	f002 f9e2 	bl	800551a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003156:	6a2b      	ldr	r3, [r5, #32]
 8003158:	4433      	add	r3, r6
 800315a:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 800315c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800315e:	4433      	add	r3, r6
 8003160:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003162:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8003166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800316e:	454b      	cmp	r3, r9
 8003170:	d312      	bcc.n	8003198 <PCD_WriteEmptyTxFifo+0x9c>
 8003172:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8003176:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800317a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800317e:	429a      	cmp	r2, r3
 8003180:	d20a      	bcs.n	8003198 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003182:	b14b      	cbz	r3, 8003198 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8003184:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8003186:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800318a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800318e:	69d6      	ldr	r6, [r2, #28]
 8003190:	429e      	cmp	r6, r3
 8003192:	d3d0      	bcc.n	8003136 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8003194:	461e      	mov	r6, r3
 8003196:	e7ce      	b.n	8003136 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003198:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800319c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80031a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d80f      	bhi.n	80031c8 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031a8:	f004 040f 	and.w	r4, r4, #15
 80031ac:	2201      	movs	r2, #1
 80031ae:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031b0:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 80031b4:	ea23 0302 	bic.w	r3, r3, r2
 80031b8:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 80031bc:	2000      	movs	r0, #0
 80031be:	e000      	b.n	80031c2 <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 80031c0:	2001      	movs	r0, #1
}
 80031c2:	b003      	add	sp, #12
 80031c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 80031c8:	2000      	movs	r0, #0
 80031ca:	e7fa      	b.n	80031c2 <PCD_WriteEmptyTxFifo+0xc6>

080031cc <HAL_PCD_Init>:
{
 80031cc:	b530      	push	{r4, r5, lr}
 80031ce:	b083      	sub	sp, #12
  if (hpcd == NULL)
 80031d0:	2800      	cmp	r0, #0
 80031d2:	d07a      	beq.n	80032ca <HAL_PCD_Init+0xfe>
 80031d4:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 80031d6:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031d8:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 80031dc:	b1c3      	cbz	r3, 8003210 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80031de:	2303      	movs	r3, #3
 80031e0:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 80031e4:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 80031e8:	d017      	beq.n	800321a <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 80031ea:	6820      	ldr	r0, [r4, #0]
 80031ec:	f001 ff46 	bl	800507c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031f0:	7c23      	ldrb	r3, [r4, #16]
 80031f2:	f88d 3000 	strb.w	r3, [sp]
 80031f6:	1d23      	adds	r3, r4, #4
 80031f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031fa:	6820      	ldr	r0, [r4, #0]
 80031fc:	f001 fe7d 	bl	8004efa <USB_CoreInit>
 8003200:	b170      	cbz	r0, 8003220 <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003202:	2302      	movs	r3, #2
 8003204:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8003208:	2501      	movs	r5, #1
}
 800320a:	4628      	mov	r0, r5
 800320c:	b003      	add	sp, #12
 800320e:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8003210:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8003214:	f004 fcc4 	bl	8007ba0 <HAL_PCD_MspInit>
 8003218:	e7e1      	b.n	80031de <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	71a3      	strb	r3, [r4, #6]
 800321e:	e7e4      	b.n	80031ea <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003220:	2100      	movs	r1, #0
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	f002 fb8f 	bl	8005946 <USB_SetCurrentMode>
 8003228:	4602      	mov	r2, r0
 800322a:	b9b8      	cbnz	r0, 800325c <HAL_PCD_Init+0x90>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322c:	4603      	mov	r3, r0
 800322e:	7920      	ldrb	r0, [r4, #4]
 8003230:	4298      	cmp	r0, r3
 8003232:	d918      	bls.n	8003266 <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 8003234:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8003238:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800323c:	2001      	movs	r0, #1
 800323e:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8003240:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003242:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003244:	2000      	movs	r0, #0
 8003246:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003248:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800324a:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 800324c:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8003250:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003254:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003256:	3301      	adds	r3, #1
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e7e8      	b.n	800322e <HAL_PCD_Init+0x62>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800325c:	2302      	movs	r3, #2
 800325e:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8003262:	2501      	movs	r5, #1
 8003264:	e7d1      	b.n	800320a <HAL_PCD_Init+0x3e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003266:	4290      	cmp	r0, r2
 8003268:	d917      	bls.n	800329a <HAL_PCD_Init+0xce>
    hpcd->OUT_ep[i].is_in = 0U;
 800326a:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 800326e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003272:	2100      	movs	r1, #0
 8003274:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8003278:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800327c:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003280:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003284:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003288:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 800328c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003290:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003294:	3201      	adds	r2, #1
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	e7e5      	b.n	8003266 <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800329a:	7c23      	ldrb	r3, [r4, #16]
 800329c:	f88d 3000 	strb.w	r3, [sp]
 80032a0:	1d23      	adds	r3, r4, #4
 80032a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032a4:	6820      	ldr	r0, [r4, #0]
 80032a6:	f001 ff3f 	bl	8005128 <USB_DevInit>
 80032aa:	4605      	mov	r5, r0
 80032ac:	b120      	cbz	r0, 80032b8 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032ae:	2302      	movs	r3, #2
 80032b0:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80032b4:	2501      	movs	r5, #1
 80032b6:	e7a8      	b.n	800320a <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80032bc:	2301      	movs	r3, #1
 80032be:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 80032c2:	6820      	ldr	r0, [r4, #0]
 80032c4:	f002 fafe 	bl	80058c4 <USB_DevDisconnect>
  return HAL_OK;
 80032c8:	e79f      	b.n	800320a <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 80032ca:	2501      	movs	r5, #1
 80032cc:	e79d      	b.n	800320a <HAL_PCD_Init+0x3e>

080032ce <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ce:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 80032d0:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 80032d4:	2a01      	cmp	r2, #1
 80032d6:	d01a      	beq.n	800330e <HAL_PCD_Start+0x40>
{
 80032d8:	b510      	push	{r4, lr}
 80032da:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80032dc:	2201      	movs	r2, #1
 80032de:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80032e8:	d002      	beq.n	80032f0 <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 80032ea:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80032ec:	2a01      	cmp	r2, #1
 80032ee:	d009      	beq.n	8003304 <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 80032f0:	6820      	ldr	r0, [r4, #0]
 80032f2:	f001 febd 	bl	8005070 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032f6:	6820      	ldr	r0, [r4, #0]
 80032f8:	f002 fad6 	bl	80058a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032fc:	2000      	movs	r0, #0
 80032fe:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003302:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003306:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800330a:	639a      	str	r2, [r3, #56]	@ 0x38
 800330c:	e7f0      	b.n	80032f0 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 800330e:	2002      	movs	r0, #2
}
 8003310:	4770      	bx	lr
	...

08003314 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	4604      	mov	r4, r0
 8003318:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800331a:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800331c:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800331e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003326:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003328:	79a1      	ldrb	r1, [r4, #6]
 800332a:	2901      	cmp	r1, #1
 800332c:	d011      	beq.n	8003352 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800332e:	4938      	ldr	r1, [pc, #224]	@ (8003410 <PCD_EP_OutXfrComplete_int+0xfc>)
 8003330:	428e      	cmp	r6, r1
 8003332:	d056      	beq.n	80033e2 <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003334:	b93d      	cbnz	r5, 8003346 <PCD_EP_OutXfrComplete_int+0x32>
 8003336:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800333a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800333e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8003342:	2b00      	cmp	r3, #0
 8003344:	d05e      	beq.n	8003404 <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003346:	b2e9      	uxtb	r1, r5
 8003348:	4620      	mov	r0, r4
 800334a:	f004 fc75 	bl	8007c38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 800334e:	2000      	movs	r0, #0
 8003350:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003352:	f012 0f08 	tst.w	r2, #8
 8003356:	d009      	beq.n	800336c <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003358:	492e      	ldr	r1, [pc, #184]	@ (8003414 <PCD_EP_OutXfrComplete_int+0x100>)
 800335a:	428e      	cmp	r6, r1
 800335c:	d9f7      	bls.n	800334e <PCD_EP_OutXfrComplete_int+0x3a>
 800335e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8003362:	d0f4      	beq.n	800334e <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003364:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003368:	609a      	str	r2, [r3, #8]
 800336a:	e7f0      	b.n	800334e <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800336c:	f012 0f20 	tst.w	r2, #32
 8003370:	d002      	beq.n	8003378 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003372:	2220      	movs	r2, #32
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	e7ea      	b.n	800334e <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003378:	f012 0f28 	tst.w	r2, #40	@ 0x28
 800337c:	d1e7      	bne.n	800334e <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800337e:	4925      	ldr	r1, [pc, #148]	@ (8003414 <PCD_EP_OutXfrComplete_int+0x100>)
 8003380:	428e      	cmp	r6, r1
 8003382:	d906      	bls.n	8003392 <PCD_EP_OutXfrComplete_int+0x7e>
 8003384:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8003388:	d003      	beq.n	8003392 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800338a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	e7dd      	b.n	800334e <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003392:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8003396:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800339a:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a4:	1acb      	subs	r3, r1, r3
 80033a6:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 80033aa:	b97d      	cbnz	r5, 80033cc <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 80033ac:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80033b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80033b4:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 80033b8:	b16a      	cbz	r2, 80033d6 <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 80033ba:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80033be:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80033c2:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 80033c6:	4419      	add	r1, r3
 80033c8:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033cc:	b2e9      	uxtb	r1, r5
 80033ce:	4620      	mov	r0, r4
 80033d0:	f004 fc32 	bl	8007c38 <HAL_PCD_DataOutStageCallback>
 80033d4:	e7bb      	b.n	800334e <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033d6:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80033da:	2101      	movs	r1, #1
 80033dc:	f002 faf2 	bl	80059c4 <USB_EP0_OutStart>
 80033e0:	e7f4      	b.n	80033cc <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033e2:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80033e6:	d003      	beq.n	80033f0 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	e7ae      	b.n	800334e <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033f0:	f012 0f20 	tst.w	r2, #32
 80033f4:	d001      	beq.n	80033fa <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033f6:	2220      	movs	r2, #32
 80033f8:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033fa:	b2e9      	uxtb	r1, r5
 80033fc:	4620      	mov	r0, r4
 80033fe:	f004 fc1b 	bl	8007c38 <HAL_PCD_DataOutStageCallback>
 8003402:	e7a4      	b.n	800334e <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003404:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003408:	2100      	movs	r1, #0
 800340a:	f002 fadb 	bl	80059c4 <USB_EP0_OutStart>
 800340e:	e79a      	b.n	8003346 <PCD_EP_OutXfrComplete_int+0x32>
 8003410:	4f54310a 	.word	0x4f54310a
 8003414:	4f54300a 	.word	0x4f54300a

08003418 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003418:	b538      	push	{r3, r4, r5, lr}
 800341a:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800341c:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800341e:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003420:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8003424:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003428:	4a0e      	ldr	r2, [pc, #56]	@ (8003464 <PCD_EP_OutSetupPacket_int+0x4c>)
 800342a:	4295      	cmp	r5, r2
 800342c:	d907      	bls.n	800343e <PCD_EP_OutSetupPacket_int+0x26>
 800342e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003432:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8003436:	d002      	beq.n	800343e <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003438:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800343c:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800343e:	4620      	mov	r0, r4
 8003440:	f004 fbf2 	bl	8007c28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003444:	4b07      	ldr	r3, [pc, #28]	@ (8003464 <PCD_EP_OutSetupPacket_int+0x4c>)
 8003446:	429d      	cmp	r5, r3
 8003448:	d902      	bls.n	8003450 <PCD_EP_OutSetupPacket_int+0x38>
 800344a:	79a3      	ldrb	r3, [r4, #6]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d001      	beq.n	8003454 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8003450:	2000      	movs	r0, #0
 8003452:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003454:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003458:	2101      	movs	r1, #1
 800345a:	6820      	ldr	r0, [r4, #0]
 800345c:	f002 fab2 	bl	80059c4 <USB_EP0_OutStart>
 8003460:	e7f6      	b.n	8003450 <PCD_EP_OutSetupPacket_int+0x38>
 8003462:	bf00      	nop
 8003464:	4f54300a 	.word	0x4f54300a

08003468 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003468:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 800346c:	2b01      	cmp	r3, #1
 800346e:	d00c      	beq.n	800348a <HAL_PCD_SetAddress+0x22>
{
 8003470:	b510      	push	{r4, lr}
 8003472:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003474:	2301      	movs	r3, #1
 8003476:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800347a:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800347c:	6800      	ldr	r0, [r0, #0]
 800347e:	f002 fa03 	bl	8005888 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003482:	2000      	movs	r0, #0
 8003484:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003488:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800348a:	2002      	movs	r0, #2
}
 800348c:	4770      	bx	lr

0800348e <HAL_PCD_EP_Open>:
{
 800348e:	b538      	push	{r3, r4, r5, lr}
 8003490:	4605      	mov	r5, r0
 8003492:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003494:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003498:	d12b      	bne.n	80034f2 <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800349a:	f001 0e0f 	and.w	lr, r1, #15
 800349e:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 80034a2:	00a4      	lsls	r4, r4, #2
 80034a4:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 80034a8:	4404      	add	r4, r0
 80034aa:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 80034ac:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80034b0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80034b4:	2000      	movs	r0, #0
 80034b6:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ba:	f00c 0c0f 	and.w	ip, ip, #15
 80034be:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80034c2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80034c6:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80034c8:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 80034ca:	784a      	ldrb	r2, [r1, #1]
 80034cc:	b10a      	cbz	r2, 80034d2 <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 80034ce:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d01c      	beq.n	8003510 <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 80034d6:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d01b      	beq.n	8003516 <HAL_PCD_EP_Open+0x88>
 80034de:	2301      	movs	r3, #1
 80034e0:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034e4:	6828      	ldr	r0, [r5, #0]
 80034e6:	f001 fefc 	bl	80052e2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 80034f0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f2:	f001 000f 	and.w	r0, r1, #15
 80034f6:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 80034fa:	0089      	lsls	r1, r1, #2
 80034fc:	3110      	adds	r1, #16
 80034fe:	4429      	add	r1, r5
 8003500:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003502:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8003506:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800350a:	2401      	movs	r4, #1
 800350c:	7544      	strb	r4, [r0, #21]
 800350e:	e7d4      	b.n	80034ba <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	714b      	strb	r3, [r1, #5]
 8003514:	e7df      	b.n	80034d6 <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 8003516:	2002      	movs	r0, #2
 8003518:	e7ea      	b.n	80034f0 <HAL_PCD_EP_Open+0x62>

0800351a <HAL_PCD_EP_Close>:
{
 800351a:	b510      	push	{r4, lr}
 800351c:	4604      	mov	r4, r0
 800351e:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003520:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003524:	d120      	bne.n	8003568 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003526:	f001 000f 	and.w	r0, r1, #15
 800352a:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003534:	4423      	add	r3, r4
 8003536:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8003538:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800353c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003540:	2300      	movs	r3, #0
 8003542:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8003546:	f002 020f 	and.w	r2, r2, #15
 800354a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800354c:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8003550:	2b01      	cmp	r3, #1
 8003552:	d018      	beq.n	8003586 <HAL_PCD_EP_Close+0x6c>
 8003554:	2301      	movs	r3, #1
 8003556:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800355a:	6820      	ldr	r0, [r4, #0]
 800355c:	f001 ff0e 	bl	800537c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003560:	2000      	movs	r0, #0
 8003562:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003566:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003568:	f001 000f 	and.w	r0, r1, #15
 800356c:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	3310      	adds	r3, #16
 8003574:	4423      	add	r3, r4
 8003576:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8003578:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800357c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003580:	2301      	movs	r3, #1
 8003582:	7543      	strb	r3, [r0, #21]
 8003584:	e7df      	b.n	8003546 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8003586:	2002      	movs	r0, #2
 8003588:	e7ed      	b.n	8003566 <HAL_PCD_EP_Close+0x4c>

0800358a <HAL_PCD_EP_Receive>:
{
 800358a:	b510      	push	{r4, lr}
 800358c:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800358e:	f001 0c0f 	and.w	ip, r1, #15
 8003592:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8003596:	0089      	lsls	r1, r1, #2
 8003598:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800359c:	4401      	add	r1, r0
 800359e:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80035a0:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80035a4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80035a8:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 80035ac:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 80035b6:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ba:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 80035be:	7982      	ldrb	r2, [r0, #6]
 80035c0:	2a01      	cmp	r2, #1
 80035c2:	d004      	beq.n	80035ce <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035c4:	6800      	ldr	r0, [r0, #0]
 80035c6:	f001 ffbf 	bl	8005548 <USB_EPStartXfer>
}
 80035ca:	2000      	movs	r0, #0
 80035cc:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80035ce:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 80035d2:	e7f7      	b.n	80035c4 <HAL_PCD_EP_Receive+0x3a>

080035d4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035d4:	f001 010f 	and.w	r1, r1, #15
 80035d8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80035dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80035e0:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 80035e4:	4770      	bx	lr

080035e6 <HAL_PCD_EP_Transmit>:
{
 80035e6:	b510      	push	{r4, lr}
 80035e8:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ea:	f001 0c0f 	and.w	ip, r1, #15
 80035ee:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80035f2:	0089      	lsls	r1, r1, #2
 80035f4:	3110      	adds	r1, #16
 80035f6:	4401      	add	r1, r0
 80035f8:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80035fa:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80035fe:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8003602:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8003606:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 8003610:	2301      	movs	r3, #1
 8003612:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003616:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 800361a:	7982      	ldrb	r2, [r0, #6]
 800361c:	429a      	cmp	r2, r3
 800361e:	d004      	beq.n	800362a <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003620:	6800      	ldr	r0, [r0, #0]
 8003622:	f001 ff91 	bl	8005548 <USB_EPStartXfer>
}
 8003626:	2000      	movs	r0, #0
 8003628:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800362a:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 800362e:	e7f7      	b.n	8003620 <HAL_PCD_EP_Transmit+0x3a>

08003630 <HAL_PCD_EP_SetStall>:
{
 8003630:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003632:	f001 050f 	and.w	r5, r1, #15
 8003636:	7902      	ldrb	r2, [r0, #4]
 8003638:	42aa      	cmp	r2, r5
 800363a:	d338      	bcc.n	80036ae <HAL_PCD_EP_SetStall+0x7e>
 800363c:	4604      	mov	r4, r0
 800363e:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8003640:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003644:	d11f      	bne.n	8003686 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8003646:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800364a:	0089      	lsls	r1, r1, #2
 800364c:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8003650:	4401      	add	r1, r0
 8003652:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8003654:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003658:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 8003662:	2301      	movs	r3, #1
 8003664:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003666:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8003668:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800366c:	2b01      	cmp	r3, #1
 800366e:	d020      	beq.n	80036b2 <HAL_PCD_EP_SetStall+0x82>
 8003670:	2301      	movs	r3, #1
 8003672:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003676:	6820      	ldr	r0, [r4, #0]
 8003678:	f002 f8ab 	bl	80057d2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800367c:	b185      	cbz	r5, 80036a0 <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 800367e:	2000      	movs	r0, #0
 8003680:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003684:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003686:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800368a:	0089      	lsls	r1, r1, #2
 800368c:	3110      	adds	r1, #16
 800368e:	4401      	add	r1, r0
 8003690:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003692:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8003696:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800369a:	2201      	movs	r2, #1
 800369c:	755a      	strb	r2, [r3, #21]
 800369e:	e7e0      	b.n	8003662 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80036a0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80036a4:	79a1      	ldrb	r1, [r4, #6]
 80036a6:	6820      	ldr	r0, [r4, #0]
 80036a8:	f002 f98c 	bl	80059c4 <USB_EP0_OutStart>
 80036ac:	e7e7      	b.n	800367e <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 80036ae:	2001      	movs	r0, #1
 80036b0:	e7e8      	b.n	8003684 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80036b2:	2002      	movs	r0, #2
 80036b4:	e7e6      	b.n	8003684 <HAL_PCD_EP_SetStall+0x54>

080036b6 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036b6:	f001 030f 	and.w	r3, r1, #15
 80036ba:	7902      	ldrb	r2, [r0, #4]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d330      	bcc.n	8003722 <HAL_PCD_EP_ClrStall+0x6c>
{
 80036c0:	b510      	push	{r4, lr}
 80036c2:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80036c4:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80036c8:	d11e      	bne.n	8003708 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036ca:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80036ce:	0089      	lsls	r1, r1, #2
 80036d0:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80036d4:	4401      	add	r1, r0
 80036d6:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80036d8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80036dc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80036e0:	2000      	movs	r0, #0
 80036e2:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 80036e6:	2200      	movs	r2, #0
 80036e8:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ea:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80036ec:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d018      	beq.n	8003726 <HAL_PCD_EP_ClrStall+0x70>
 80036f4:	2301      	movs	r3, #1
 80036f6:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036fa:	6820      	ldr	r0, [r4, #0]
 80036fc:	f002 f896 	bl	800582c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003700:	2000      	movs	r0, #0
 8003702:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003706:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003708:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800370c:	0089      	lsls	r1, r1, #2
 800370e:	3110      	adds	r1, #16
 8003710:	4401      	add	r1, r0
 8003712:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003714:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8003718:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800371c:	2001      	movs	r0, #1
 800371e:	7550      	strb	r0, [r2, #21]
 8003720:	e7e1      	b.n	80036e6 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8003722:	2001      	movs	r0, #1
}
 8003724:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8003726:	2002      	movs	r0, #2
 8003728:	e7ed      	b.n	8003706 <HAL_PCD_EP_ClrStall+0x50>

0800372a <HAL_PCD_EP_Abort>:
{
 800372a:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 800372c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003730:	d10c      	bne.n	800374c <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003732:	f001 010f 	and.w	r1, r1, #15
 8003736:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800373a:	0089      	lsls	r1, r1, #2
 800373c:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8003740:	4401      	add	r1, r0
 8003742:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003744:	6800      	ldr	r0, [r0, #0]
 8003746:	f001 fe89 	bl	800545c <USB_EPStopXfer>
}
 800374a:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800374c:	f001 010f 	and.w	r1, r1, #15
 8003750:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003754:	0089      	lsls	r1, r1, #2
 8003756:	3110      	adds	r1, #16
 8003758:	4401      	add	r1, r0
 800375a:	3104      	adds	r1, #4
 800375c:	e7f2      	b.n	8003744 <HAL_PCD_EP_Abort+0x1a>

0800375e <HAL_PCD_IRQHandler>:
{
 800375e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003762:	b083      	sub	sp, #12
 8003764:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003766:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003768:	4628      	mov	r0, r5
 800376a:	f002 f8e8 	bl	800593e <USB_GetMode>
 800376e:	b110      	cbz	r0, 8003776 <HAL_PCD_IRQHandler+0x18>
}
 8003770:	b003      	add	sp, #12
 8003772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003776:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003778:	6820      	ldr	r0, [r4, #0]
 800377a:	f002 f8b1 	bl	80058e0 <USB_ReadInterrupts>
 800377e:	2800      	cmp	r0, #0
 8003780:	d0f6      	beq.n	8003770 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003782:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800378c:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003790:	6820      	ldr	r0, [r4, #0]
 8003792:	f002 f8a5 	bl	80058e0 <USB_ReadInterrupts>
 8003796:	f010 0f02 	tst.w	r0, #2
 800379a:	d004      	beq.n	80037a6 <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800379c:	6822      	ldr	r2, [r4, #0]
 800379e:	6953      	ldr	r3, [r2, #20]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037a6:	6820      	ldr	r0, [r4, #0]
 80037a8:	f002 f89a 	bl	80058e0 <USB_ReadInterrupts>
 80037ac:	f010 0f10 	tst.w	r0, #16
 80037b0:	d015      	beq.n	80037de <HAL_PCD_IRQHandler+0x80>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037b2:	6822      	ldr	r2, [r4, #0]
 80037b4:	6993      	ldr	r3, [r2, #24]
 80037b6:	f023 0310 	bic.w	r3, r3, #16
 80037ba:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 80037bc:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80037c0:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037c4:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 80037c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037cc:	d04c      	beq.n	8003868 <HAL_PCD_IRQHandler+0x10a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80037d2:	d06f      	beq.n	80038b4 <HAL_PCD_IRQHandler+0x156>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037d4:	6822      	ldr	r2, [r4, #0]
 80037d6:	6993      	ldr	r3, [r2, #24]
 80037d8:	f043 0310 	orr.w	r3, r3, #16
 80037dc:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	f002 f87e 	bl	80058e0 <USB_ReadInterrupts>
 80037e4:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 80037e8:	d176      	bne.n	80038d8 <HAL_PCD_IRQHandler+0x17a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80037ea:	6820      	ldr	r0, [r4, #0]
 80037ec:	f002 f878 	bl	80058e0 <USB_ReadInterrupts>
 80037f0:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 80037f4:	f040 80e0 	bne.w	80039b8 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037f8:	6820      	ldr	r0, [r4, #0]
 80037fa:	f002 f871 	bl	80058e0 <USB_ReadInterrupts>
 80037fe:	2800      	cmp	r0, #0
 8003800:	f2c0 8161 	blt.w	8003ac6 <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003804:	6820      	ldr	r0, [r4, #0]
 8003806:	f002 f86b 	bl	80058e0 <USB_ReadInterrupts>
 800380a:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 800380e:	d009      	beq.n	8003824 <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f013 0f01 	tst.w	r3, #1
 8003816:	f040 816e 	bne.w	8003af6 <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800381a:	6822      	ldr	r2, [r4, #0]
 800381c:	6953      	ldr	r3, [r2, #20]
 800381e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003822:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003824:	6820      	ldr	r0, [r4, #0]
 8003826:	f002 f85b 	bl	80058e0 <USB_ReadInterrupts>
 800382a:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 800382e:	f040 8166 	bne.w	8003afe <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003832:	6820      	ldr	r0, [r4, #0]
 8003834:	f002 f854 	bl	80058e0 <USB_ReadInterrupts>
 8003838:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 800383c:	f040 81b3 	bne.w	8003ba6 <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003840:	6820      	ldr	r0, [r4, #0]
 8003842:	f002 f84d 	bl	80058e0 <USB_ReadInterrupts>
 8003846:	f010 0f08 	tst.w	r0, #8
 800384a:	f040 81c4 	bne.w	8003bd6 <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800384e:	6820      	ldr	r0, [r4, #0]
 8003850:	f002 f846 	bl	80058e0 <USB_ReadInterrupts>
 8003854:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8003858:	f000 81d7 	beq.w	8003c0a <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800385c:	69ab      	ldr	r3, [r5, #24]
 800385e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003862:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003864:	2601      	movs	r6, #1
 8003866:	e1c0      	b.n	8003bea <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003868:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800386c:	ea18 0f03 	tst.w	r8, r3
 8003870:	d0b0      	beq.n	80037d4 <HAL_PCD_IRQHandler+0x76>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003872:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800387a:	9301      	str	r3, [sp, #4]
 800387c:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 8003880:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8003884:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8003888:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 800388c:	4628      	mov	r0, r5
 800388e:	f001 ff7d 	bl	800578c <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003892:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8003896:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 800389a:	4453      	add	r3, sl
 800389c:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038a0:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 80038a4:	9a01      	ldr	r2, [sp, #4]
 80038a6:	444a      	add	r2, r9
 80038a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80038ac:	4453      	add	r3, sl
 80038ae:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 80038b2:	e78f      	b.n	80037d4 <HAL_PCD_IRQHandler+0x76>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038b4:	2208      	movs	r2, #8
 80038b6:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 80038ba:	4628      	mov	r0, r5
 80038bc:	f001 ff66 	bl	800578c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038c0:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80038c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80038c8:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80038cc:	f3c8 180a 	ubfx	r8, r8, #4, #11
 80038d0:	4442      	add	r2, r8
 80038d2:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 80038d6:	e77d      	b.n	80037d4 <HAL_PCD_IRQHandler+0x76>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038d8:	6820      	ldr	r0, [r4, #0]
 80038da:	f002 f805 	bl	80058e8 <USB_ReadDevAllOutEpInterrupt>
 80038de:	4680      	mov	r8, r0
      epnum = 0U;
 80038e0:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80038e2:	e035      	b.n	8003950 <HAL_PCD_IRQHandler+0x1f2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038e4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80038e8:	2201      	movs	r2, #1
 80038ea:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038ee:	4649      	mov	r1, r9
 80038f0:	4620      	mov	r0, r4
 80038f2:	f7ff fd0f 	bl	8003314 <PCD_EP_OutXfrComplete_int>
 80038f6:	e03c      	b.n	8003972 <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038f8:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80038fc:	2208      	movs	r2, #8
 80038fe:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003902:	4649      	mov	r1, r9
 8003904:	4620      	mov	r0, r4
 8003906:	f7ff fd87 	bl	8003418 <PCD_EP_OutSetupPacket_int>
 800390a:	e035      	b.n	8003978 <HAL_PCD_IRQHandler+0x21a>
            if (ep->is_iso_incomplete == 1U)
 800390c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8003910:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003914:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8003918:	2b01      	cmp	r3, #1
 800391a:	d041      	beq.n	80039a0 <HAL_PCD_IRQHandler+0x242>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800391c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003920:	2202      	movs	r2, #2
 8003922:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003926:	f01a 0f20 	tst.w	sl, #32
 800392a:	d004      	beq.n	8003936 <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800392c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003930:	2220      	movs	r2, #32
 8003932:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003936:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 800393a:	d005      	beq.n	8003948 <HAL_PCD_IRQHandler+0x1ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800393c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003940:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003944:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8003948:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 800394c:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8003950:	f1b8 0f00 	cmp.w	r8, #0
 8003954:	f43f af49 	beq.w	80037ea <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 8003958:	f018 0f01 	tst.w	r8, #1
 800395c:	d0f4      	beq.n	8003948 <HAL_PCD_IRQHandler+0x1ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800395e:	fa5f fb89 	uxtb.w	fp, r9
 8003962:	4659      	mov	r1, fp
 8003964:	6820      	ldr	r0, [r4, #0]
 8003966:	f001 ffcf 	bl	8005908 <USB_ReadDevOutEPInterrupt>
 800396a:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800396c:	f010 0f01 	tst.w	r0, #1
 8003970:	d1b8      	bne.n	80038e4 <HAL_PCD_IRQHandler+0x186>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003972:	f01a 0f08 	tst.w	sl, #8
 8003976:	d1bf      	bne.n	80038f8 <HAL_PCD_IRQHandler+0x19a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003978:	f01a 0f10 	tst.w	sl, #16
 800397c:	d004      	beq.n	8003988 <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800397e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003982:	2210      	movs	r2, #16
 8003984:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003988:	f01a 0f02 	tst.w	sl, #2
 800398c:	d0cb      	beq.n	8003926 <HAL_PCD_IRQHandler+0x1c8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800398e:	696b      	ldr	r3, [r5, #20]
 8003990:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003994:	d0ba      	beq.n	800390c <HAL_PCD_IRQHandler+0x1ae>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	e7b5      	b.n	800390c <HAL_PCD_IRQHandler+0x1ae>
              ep->is_iso_incomplete = 0U;
 80039a0:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80039a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039ae:	4659      	mov	r1, fp
 80039b0:	4620      	mov	r0, r4
 80039b2:	f004 f98f 	bl	8007cd4 <HAL_PCD_ISOOUTIncompleteCallback>
 80039b6:	e7b1      	b.n	800391c <HAL_PCD_IRQHandler+0x1be>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039b8:	6820      	ldr	r0, [r4, #0]
 80039ba:	f001 ff9d 	bl	80058f8 <USB_ReadDevAllInEpInterrupt>
 80039be:	4680      	mov	r8, r0
      epnum = 0U;
 80039c0:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80039c2:	e025      	b.n	8003a10 <HAL_PCD_IRQHandler+0x2b2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80039c4:	4659      	mov	r1, fp
 80039c6:	4620      	mov	r0, r4
 80039c8:	f004 f942 	bl	8007c50 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80039cc:	f01a 0f08 	tst.w	sl, #8
 80039d0:	d004      	beq.n	80039dc <HAL_PCD_IRQHandler+0x27e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80039d2:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80039d6:	2208      	movs	r2, #8
 80039d8:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039dc:	f01a 0f10 	tst.w	sl, #16
 80039e0:	d004      	beq.n	80039ec <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039e2:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80039e6:	2210      	movs	r2, #16
 80039e8:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039ec:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80039f0:	d004      	beq.n	80039fc <HAL_PCD_IRQHandler+0x29e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039f2:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80039f6:	2240      	movs	r2, #64	@ 0x40
 80039f8:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039fc:	f01a 0f02 	tst.w	sl, #2
 8003a00:	d140      	bne.n	8003a84 <HAL_PCD_IRQHandler+0x326>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a02:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8003a06:	d159      	bne.n	8003abc <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 8003a08:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8003a0c:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8003a10:	f1b8 0f00 	cmp.w	r8, #0
 8003a14:	f43f aef0 	beq.w	80037f8 <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a18:	f018 0f01 	tst.w	r8, #1
 8003a1c:	d0f4      	beq.n	8003a08 <HAL_PCD_IRQHandler+0x2aa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a1e:	fa5f fb89 	uxtb.w	fp, r9
 8003a22:	4659      	mov	r1, fp
 8003a24:	6820      	ldr	r0, [r4, #0]
 8003a26:	f001 ff78 	bl	800591a <USB_ReadDevInEPInterrupt>
 8003a2a:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a2c:	f010 0f01 	tst.w	r0, #1
 8003a30:	d0cc      	beq.n	80039cc <HAL_PCD_IRQHandler+0x26e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a32:	f009 020f 	and.w	r2, r9, #15
 8003a36:	2101      	movs	r1, #1
 8003a38:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3e:	ea23 0302 	bic.w	r3, r3, r2
 8003a42:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a44:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003a48:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8003a4c:	79a3      	ldrb	r3, [r4, #6]
 8003a4e:	428b      	cmp	r3, r1
 8003a50:	d1b8      	bne.n	80039c4 <HAL_PCD_IRQHandler+0x266>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a52:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8003a56:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003a5a:	6a1a      	ldr	r2, [r3, #32]
 8003a5c:	69d9      	ldr	r1, [r3, #28]
 8003a5e:	440a      	add	r2, r1
 8003a60:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a62:	f1b9 0f00 	cmp.w	r9, #0
 8003a66:	d1ad      	bne.n	80039c4 <HAL_PCD_IRQHandler+0x266>
 8003a68:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8003a6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1a6      	bne.n	80039c4 <HAL_PCD_IRQHandler+0x266>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a76:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	f001 ffa1 	bl	80059c4 <USB_EP0_OutStart>
 8003a82:	e79f      	b.n	80039c4 <HAL_PCD_IRQHandler+0x266>
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a84:	4649      	mov	r1, r9
 8003a86:	4628      	mov	r0, r5
 8003a88:	f001 fafe 	bl	8005088 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8003a8c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8003a90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003a94:	7ddb      	ldrb	r3, [r3, #23]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d005      	beq.n	8003aa6 <HAL_PCD_IRQHandler+0x348>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a9a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8003aa4:	e7ad      	b.n	8003a02 <HAL_PCD_IRQHandler+0x2a4>
              ep->is_iso_incomplete = 0U;
 8003aa6:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8003aaa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003aae:	2200      	movs	r2, #0
 8003ab0:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ab2:	4659      	mov	r1, fp
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f004 f913 	bl	8007ce0 <HAL_PCD_ISOINIncompleteCallback>
 8003aba:	e7ee      	b.n	8003a9a <HAL_PCD_IRQHandler+0x33c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003abc:	4649      	mov	r1, r9
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f7ff fb1c 	bl	80030fc <PCD_WriteEmptyTxFifo>
 8003ac4:	e7a0      	b.n	8003a08 <HAL_PCD_IRQHandler+0x2aa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8003ace:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d008      	beq.n	8003ae8 <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f004 f8f6 	bl	8007cc8 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003adc:	6822      	ldr	r2, [r4, #0]
 8003ade:	6953      	ldr	r3, [r2, #20]
 8003ae0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ae4:	6153      	str	r3, [r2, #20]
 8003ae6:	e68d      	b.n	8003804 <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 8003ae8:	2100      	movs	r1, #0
 8003aea:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003aee:	4620      	mov	r0, r4
 8003af0:	f000 f93f 	bl	8003d72 <HAL_PCDEx_LPM_Callback>
 8003af4:	e7f2      	b.n	8003adc <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 8003af6:	4620      	mov	r0, r4
 8003af8:	f004 f8ce 	bl	8007c98 <HAL_PCD_SuspendCallback>
 8003afc:	e68d      	b.n	800381a <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b06:	2110      	movs	r1, #16
 8003b08:	6820      	ldr	r0, [r4, #0]
 8003b0a:	f001 fabd 	bl	8005088 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b0e:	e01a      	b.n	8003b46 <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b10:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8003b14:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8003b18:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b1c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8003b20:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8003b24:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b28:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b2c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8003b30:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8003b34:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b38:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8003b3c:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8003b40:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b44:	3601      	adds	r6, #1
 8003b46:	7923      	ldrb	r3, [r4, #4]
 8003b48:	42b3      	cmp	r3, r6
 8003b4a:	d8e1      	bhi.n	8003b10 <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003b52:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b54:	7be3      	ldrb	r3, [r4, #15]
 8003b56:	b1db      	cbz	r3, 8003b90 <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b5c:	f043 030b 	orr.w	r3, r3, #11
 8003b60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b66:	f043 030b 	orr.w	r3, r3, #11
 8003b6a:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b6c:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 8003b70:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003b74:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b78:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003b7c:	79a1      	ldrb	r1, [r4, #6]
 8003b7e:	6820      	ldr	r0, [r4, #0]
 8003b80:	f001 ff20 	bl	80059c4 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b84:	6822      	ldr	r2, [r4, #0]
 8003b86:	6953      	ldr	r3, [r2, #20]
 8003b88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b8c:	6153      	str	r3, [r2, #20]
 8003b8e:	e650      	b.n	8003832 <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b96:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003b9a:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f043 030b 	orr.w	r3, r3, #11
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	e7e2      	b.n	8003b6c <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ba6:	6820      	ldr	r0, [r4, #0]
 8003ba8:	f001 fefe 	bl	80059a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003bac:	6820      	ldr	r0, [r4, #0]
 8003bae:	f001 fb87 	bl	80052c0 <USB_GetDevSpeed>
 8003bb2:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bb4:	6826      	ldr	r6, [r4, #0]
 8003bb6:	f000 fbdd 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 8003bba:	4601      	mov	r1, r0
 8003bbc:	79e2      	ldrb	r2, [r4, #7]
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f001 f9e4 	bl	8004f8c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	f004 f854 	bl	8007c72 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003bca:	6822      	ldr	r2, [r4, #0]
 8003bcc:	6953      	ldr	r3, [r2, #20]
 8003bce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bd2:	6153      	str	r3, [r2, #20]
 8003bd4:	e634      	b.n	8003840 <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f004 f845 	bl	8007c66 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003bdc:	6822      	ldr	r2, [r4, #0]
 8003bde:	6953      	ldr	r3, [r2, #20]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	6153      	str	r3, [r2, #20]
 8003be6:	e632      	b.n	800384e <HAL_PCD_IRQHandler+0xf0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003be8:	3601      	adds	r6, #1
 8003bea:	7923      	ldrb	r3, [r4, #4]
 8003bec:	42b3      	cmp	r3, r6
 8003bee:	d90c      	bls.n	8003c0a <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003bf0:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8003bf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003bf8:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d1f3      	bne.n	8003be8 <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c00:	b2f1      	uxtb	r1, r6
 8003c02:	4620      	mov	r0, r4
 8003c04:	f7ff fd91 	bl	800372a <HAL_PCD_EP_Abort>
 8003c08:	e7ee      	b.n	8003be8 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c0a:	6820      	ldr	r0, [r4, #0]
 8003c0c:	f001 fe68 	bl	80058e0 <USB_ReadInterrupts>
 8003c10:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8003c14:	d125      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x504>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c16:	6820      	ldr	r0, [r4, #0]
 8003c18:	f001 fe62 	bl	80058e0 <USB_ReadInterrupts>
 8003c1c:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8003c20:	d059      	beq.n	8003cd6 <HAL_PCD_IRQHandler+0x578>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c22:	2301      	movs	r3, #1
 8003c24:	e026      	b.n	8003c74 <HAL_PCD_IRQHandler+0x516>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c26:	3601      	adds	r6, #1
 8003c28:	7923      	ldrb	r3, [r4, #4]
 8003c2a:	42b3      	cmp	r3, r6
 8003c2c:	d91b      	bls.n	8003c66 <HAL_PCD_IRQHandler+0x508>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c2e:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8003c32:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c36:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8003c3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003c3e:	7e1b      	ldrb	r3, [r3, #24]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d1f0      	bne.n	8003c26 <HAL_PCD_IRQHandler+0x4c8>
 8003c44:	2a00      	cmp	r2, #0
 8003c46:	daee      	bge.n	8003c26 <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c48:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8003c4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003c50:	2201      	movs	r2, #1
 8003c52:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c54:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8003c58:	b2c9      	uxtb	r1, r1
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f7ff fd65 	bl	800372a <HAL_PCD_EP_Abort>
 8003c60:	e7e1      	b.n	8003c26 <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c62:	2601      	movs	r6, #1
 8003c64:	e7e0      	b.n	8003c28 <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c66:	6822      	ldr	r2, [r4, #0]
 8003c68:	6953      	ldr	r3, [r2, #20]
 8003c6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c6e:	6153      	str	r3, [r2, #20]
 8003c70:	e7d1      	b.n	8003c16 <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c72:	3301      	adds	r3, #1
 8003c74:	7922      	ldrb	r2, [r4, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d928      	bls.n	8003ccc <HAL_PCD_IRQHandler+0x56e>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c7a:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8003c7e:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c82:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8003c86:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003c8a:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 8003c8e:	2a01      	cmp	r2, #1
 8003c90:	d1ef      	bne.n	8003c72 <HAL_PCD_IRQHandler+0x514>
 8003c92:	2900      	cmp	r1, #0
 8003c94:	daed      	bge.n	8003c72 <HAL_PCD_IRQHandler+0x514>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c96:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 8003c9a:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8003c9e:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ca2:	4291      	cmp	r1, r2
 8003ca4:	d1e5      	bne.n	8003c72 <HAL_PCD_IRQHandler+0x514>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ca6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8003caa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003cae:	2101      	movs	r1, #1
 8003cb0:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003cb4:	69aa      	ldr	r2, [r5, #24]
 8003cb6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cba:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003cbc:	696a      	ldr	r2, [r5, #20]
 8003cbe:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8003cc2:	d1d6      	bne.n	8003c72 <HAL_PCD_IRQHandler+0x514>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cca:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ccc:	6822      	ldr	r2, [r4, #0]
 8003cce:	6953      	ldr	r3, [r2, #20]
 8003cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cd4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cd6:	6820      	ldr	r0, [r4, #0]
 8003cd8:	f001 fe02 	bl	80058e0 <USB_ReadInterrupts>
 8003cdc:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8003ce0:	d110      	bne.n	8003d04 <HAL_PCD_IRQHandler+0x5a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ce2:	6820      	ldr	r0, [r4, #0]
 8003ce4:	f001 fdfc 	bl	80058e0 <USB_ReadInterrupts>
 8003ce8:	f010 0f04 	tst.w	r0, #4
 8003cec:	f43f ad40 	beq.w	8003770 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003cf4:	f015 0f04 	tst.w	r5, #4
 8003cf8:	d10d      	bne.n	8003d16 <HAL_PCD_IRQHandler+0x5b8>
      hpcd->Instance->GOTGINT |= RegVal;
 8003cfa:	6822      	ldr	r2, [r4, #0]
 8003cfc:	6853      	ldr	r3, [r2, #4]
 8003cfe:	432b      	orrs	r3, r5
 8003d00:	6053      	str	r3, [r2, #4]
 8003d02:	e535      	b.n	8003770 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8003d04:	4620      	mov	r0, r4
 8003d06:	f003 fff1 	bl	8007cec <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d0a:	6822      	ldr	r2, [r4, #0]
 8003d0c:	6953      	ldr	r3, [r2, #20]
 8003d0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003d12:	6153      	str	r3, [r2, #20]
 8003d14:	e7e5      	b.n	8003ce2 <HAL_PCD_IRQHandler+0x584>
        HAL_PCD_DisconnectCallback(hpcd);
 8003d16:	4620      	mov	r0, r4
 8003d18:	f003 ffee 	bl	8007cf8 <HAL_PCD_DisconnectCallback>
 8003d1c:	e7ed      	b.n	8003cfa <HAL_PCD_IRQHandler+0x59c>

08003d1e <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d1e:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d20:	6804      	ldr	r4, [r0, #0]
 8003d22:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8003d24:	b931      	cbnz	r1, 8003d34 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d26:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003d2a:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d36:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003d38:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e008      	b.n	8003d52 <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d40:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8003d44:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003d48:	6849      	ldr	r1, [r1, #4]
 8003d4a:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003d4e:	3301      	adds	r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f10c 31ff 	add.w	r1, ip, #4294967295
 8003d56:	428b      	cmp	r3, r1
 8003d58:	d3f2      	bcc.n	8003d40 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d5a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003d5e:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 8003d62:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003d66:	6060      	str	r0, [r4, #4]
 8003d68:	e7e0      	b.n	8003d2c <HAL_PCDEx_SetTxFiFo+0xe>

08003d6a <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003d6a:	6803      	ldr	r3, [r0, #0]
 8003d6c:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8003d6e:	2000      	movs	r0, #0
 8003d70:	4770      	bx	lr

08003d72 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d72:	4770      	bx	lr

08003d74 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d74:	2800      	cmp	r0, #0
 8003d76:	f000 81e0 	beq.w	800413a <HAL_RCC_OscConfig+0x3c6>
{
 8003d7a:	b570      	push	{r4, r5, r6, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d80:	6803      	ldr	r3, [r0, #0]
 8003d82:	f013 0f01 	tst.w	r3, #1
 8003d86:	d03b      	beq.n	8003e00 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d88:	4b9f      	ldr	r3, [pc, #636]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 030c 	and.w	r3, r3, #12
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d02c      	beq.n	8003dee <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d94:	4b9c      	ldr	r3, [pc, #624]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d021      	beq.n	8003de4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da0:	6863      	ldr	r3, [r4, #4]
 8003da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da6:	d04f      	beq.n	8003e48 <HAL_RCC_OscConfig+0xd4>
 8003da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dac:	d052      	beq.n	8003e54 <HAL_RCC_OscConfig+0xe0>
 8003dae:	4b96      	ldr	r3, [pc, #600]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dc0:	6863      	ldr	r3, [r4, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d050      	beq.n	8003e68 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc6:	f7fe fb53 	bl	8002470 <HAL_GetTick>
 8003dca:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dcc:	4b8e      	ldr	r3, [pc, #568]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003dd4:	d114      	bne.n	8003e00 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd6:	f7fe fb4b 	bl	8002470 <HAL_GetTick>
 8003dda:	1b40      	subs	r0, r0, r5
 8003ddc:	2864      	cmp	r0, #100	@ 0x64
 8003dde:	d9f5      	bls.n	8003dcc <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8003de0:	2003      	movs	r0, #3
 8003de2:	e1b1      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de4:	4b88      	ldr	r3, [pc, #544]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003dec:	d0d8      	beq.n	8003da0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dee:	4b86      	ldr	r3, [pc, #536]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003df6:	d003      	beq.n	8003e00 <HAL_RCC_OscConfig+0x8c>
 8003df8:	6863      	ldr	r3, [r4, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 819f 	beq.w	800413e <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	f013 0f02 	tst.w	r3, #2
 8003e06:	d054      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e08:	4b7f      	ldr	r3, [pc, #508]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f013 0f0c 	tst.w	r3, #12
 8003e10:	d03e      	beq.n	8003e90 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e12:	4b7d      	ldr	r3, [pc, #500]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d033      	beq.n	8003e86 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e1e:	68e3      	ldr	r3, [r4, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d068      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e24:	4b79      	ldr	r3, [pc, #484]	@ (800400c <HAL_RCC_OscConfig+0x298>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2a:	f7fe fb21 	bl	8002470 <HAL_GetTick>
 8003e2e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e30:	4b75      	ldr	r3, [pc, #468]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f013 0f02 	tst.w	r3, #2
 8003e38:	d154      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e3a:	f7fe fb19 	bl	8002470 <HAL_GetTick>
 8003e3e:	1b40      	subs	r0, r0, r5
 8003e40:	2802      	cmp	r0, #2
 8003e42:	d9f5      	bls.n	8003e30 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003e44:	2003      	movs	r0, #3
 8003e46:	e17f      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e48:	4a6f      	ldr	r2, [pc, #444]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003e4a:	6813      	ldr	r3, [r2, #0]
 8003e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	e7b5      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4c>
 8003e54:	4b6c      	ldr	r3, [pc, #432]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e7ab      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8003e68:	f7fe fb02 	bl	8002470 <HAL_GetTick>
 8003e6c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6e:	4b66      	ldr	r3, [pc, #408]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003e76:	d0c3      	beq.n	8003e00 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e78:	f7fe fafa 	bl	8002470 <HAL_GetTick>
 8003e7c:	1b40      	subs	r0, r0, r5
 8003e7e:	2864      	cmp	r0, #100	@ 0x64
 8003e80:	d9f5      	bls.n	8003e6e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8003e82:	2003      	movs	r0, #3
 8003e84:	e160      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e86:	4b60      	ldr	r3, [pc, #384]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003e8e:	d1c6      	bne.n	8003e1e <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e90:	4b5d      	ldr	r3, [pc, #372]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f013 0f02 	tst.w	r3, #2
 8003e98:	d003      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x12e>
 8003e9a:	68e3      	ldr	r3, [r4, #12]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	f040 8150 	bne.w	8004142 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea2:	4a59      	ldr	r2, [pc, #356]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003ea4:	6813      	ldr	r3, [r2, #0]
 8003ea6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003eaa:	6921      	ldr	r1, [r4, #16]
 8003eac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003eb0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	f013 0f08 	tst.w	r3, #8
 8003eb8:	d042      	beq.n	8003f40 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eba:	6963      	ldr	r3, [r4, #20]
 8003ebc:	b36b      	cbz	r3, 8003f1a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ebe:	4b53      	ldr	r3, [pc, #332]	@ (800400c <HAL_RCC_OscConfig+0x298>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fad3 	bl	8002470 <HAL_GetTick>
 8003eca:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ecc:	4b4e      	ldr	r3, [pc, #312]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003ece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed0:	f013 0f02 	tst.w	r3, #2
 8003ed4:	d134      	bne.n	8003f40 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed6:	f7fe facb 	bl	8002470 <HAL_GetTick>
 8003eda:	1b40      	subs	r0, r0, r5
 8003edc:	2802      	cmp	r0, #2
 8003ede:	d9f5      	bls.n	8003ecc <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003ee0:	2003      	movs	r0, #3
 8003ee2:	e131      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee4:	4a48      	ldr	r2, [pc, #288]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003ee6:	6813      	ldr	r3, [r2, #0]
 8003ee8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003eec:	6921      	ldr	r1, [r4, #16]
 8003eee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	e7dd      	b.n	8003eb2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8003ef6:	4b45      	ldr	r3, [pc, #276]	@ (800400c <HAL_RCC_OscConfig+0x298>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003efc:	f7fe fab8 	bl	8002470 <HAL_GetTick>
 8003f00:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f02:	4b41      	ldr	r3, [pc, #260]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f013 0f02 	tst.w	r3, #2
 8003f0a:	d0d2      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f0c:	f7fe fab0 	bl	8002470 <HAL_GetTick>
 8003f10:	1b40      	subs	r0, r0, r5
 8003f12:	2802      	cmp	r0, #2
 8003f14:	d9f5      	bls.n	8003f02 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8003f16:	2003      	movs	r0, #3
 8003f18:	e116      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f1a:	4b3c      	ldr	r3, [pc, #240]	@ (800400c <HAL_RCC_OscConfig+0x298>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f22:	f7fe faa5 	bl	8002470 <HAL_GetTick>
 8003f26:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f28:	4b37      	ldr	r3, [pc, #220]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f2c:	f013 0f02 	tst.w	r3, #2
 8003f30:	d006      	beq.n	8003f40 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f32:	f7fe fa9d 	bl	8002470 <HAL_GetTick>
 8003f36:	1b40      	subs	r0, r0, r5
 8003f38:	2802      	cmp	r0, #2
 8003f3a:	d9f5      	bls.n	8003f28 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8003f3c:	2003      	movs	r0, #3
 8003f3e:	e103      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	f013 0f04 	tst.w	r3, #4
 8003f46:	d077      	beq.n	8004038 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f48:	4b2f      	ldr	r3, [pc, #188]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003f50:	d133      	bne.n	8003fba <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	4b2c      	ldr	r3, [pc, #176]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003f58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f5a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003f5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003f6a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6c:	4b28      	ldr	r3, [pc, #160]	@ (8004010 <HAL_RCC_OscConfig+0x29c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003f74:	d023      	beq.n	8003fbe <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f76:	68a3      	ldr	r3, [r4, #8]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d034      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x272>
 8003f7c:	2b05      	cmp	r3, #5
 8003f7e:	d038      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x27e>
 8003f80:	4b21      	ldr	r3, [pc, #132]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003f82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	671a      	str	r2, [r3, #112]	@ 0x70
 8003f8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f8c:	f022 0204 	bic.w	r2, r2, #4
 8003f90:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f92:	68a3      	ldr	r3, [r4, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d03d      	beq.n	8004014 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f98:	f7fe fa6a 	bl	8002470 <HAL_GetTick>
 8003f9c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa2:	f013 0f02 	tst.w	r3, #2
 8003fa6:	d146      	bne.n	8004036 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa8:	f7fe fa62 	bl	8002470 <HAL_GetTick>
 8003fac:	1b80      	subs	r0, r0, r6
 8003fae:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003fb2:	4298      	cmp	r0, r3
 8003fb4:	d9f3      	bls.n	8003f9e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8003fb6:	2003      	movs	r0, #3
 8003fb8:	e0c6      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8003fba:	2500      	movs	r5, #0
 8003fbc:	e7d6      	b.n	8003f6c <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fbe:	4a14      	ldr	r2, [pc, #80]	@ (8004010 <HAL_RCC_OscConfig+0x29c>)
 8003fc0:	6813      	ldr	r3, [r2, #0]
 8003fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003fc8:	f7fe fa52 	bl	8002470 <HAL_GetTick>
 8003fcc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fce:	4b10      	ldr	r3, [pc, #64]	@ (8004010 <HAL_RCC_OscConfig+0x29c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003fd6:	d1ce      	bne.n	8003f76 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd8:	f7fe fa4a 	bl	8002470 <HAL_GetTick>
 8003fdc:	1b80      	subs	r0, r0, r6
 8003fde:	2802      	cmp	r0, #2
 8003fe0:	d9f5      	bls.n	8003fce <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8003fe2:	2003      	movs	r0, #3
 8003fe4:	e0b0      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe6:	4a08      	ldr	r2, [pc, #32]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003fe8:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff0:	e7cf      	b.n	8003f92 <HAL_RCC_OscConfig+0x21e>
 8003ff2:	4b05      	ldr	r3, [pc, #20]	@ (8004008 <HAL_RCC_OscConfig+0x294>)
 8003ff4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ff6:	f042 0204 	orr.w	r2, r2, #4
 8003ffa:	671a      	str	r2, [r3, #112]	@ 0x70
 8003ffc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	671a      	str	r2, [r3, #112]	@ 0x70
 8004004:	e7c5      	b.n	8003f92 <HAL_RCC_OscConfig+0x21e>
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	42470000 	.word	0x42470000
 8004010:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004014:	f7fe fa2c 	bl	8002470 <HAL_GetTick>
 8004018:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401a:	4b52      	ldr	r3, [pc, #328]	@ (8004164 <HAL_RCC_OscConfig+0x3f0>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401e:	f013 0f02 	tst.w	r3, #2
 8004022:	d008      	beq.n	8004036 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004024:	f7fe fa24 	bl	8002470 <HAL_GetTick>
 8004028:	1b80      	subs	r0, r0, r6
 800402a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800402e:	4298      	cmp	r0, r3
 8004030:	d9f3      	bls.n	800401a <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8004032:	2003      	movs	r0, #3
 8004034:	e088      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004036:	b9ed      	cbnz	r5, 8004074 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004038:	69a3      	ldr	r3, [r4, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8083 	beq.w	8004146 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004040:	4a48      	ldr	r2, [pc, #288]	@ (8004164 <HAL_RCC_OscConfig+0x3f0>)
 8004042:	6892      	ldr	r2, [r2, #8]
 8004044:	f002 020c 	and.w	r2, r2, #12
 8004048:	2a08      	cmp	r2, #8
 800404a:	d051      	beq.n	80040f0 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800404c:	2b02      	cmp	r3, #2
 800404e:	d017      	beq.n	8004080 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004050:	4b45      	ldr	r3, [pc, #276]	@ (8004168 <HAL_RCC_OscConfig+0x3f4>)
 8004052:	2200      	movs	r2, #0
 8004054:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004056:	f7fe fa0b 	bl	8002470 <HAL_GetTick>
 800405a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405c:	4b41      	ldr	r3, [pc, #260]	@ (8004164 <HAL_RCC_OscConfig+0x3f0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004064:	d042      	beq.n	80040ec <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004066:	f7fe fa03 	bl	8002470 <HAL_GetTick>
 800406a:	1b00      	subs	r0, r0, r4
 800406c:	2802      	cmp	r0, #2
 800406e:	d9f5      	bls.n	800405c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004070:	2003      	movs	r0, #3
 8004072:	e069      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004074:	4a3b      	ldr	r2, [pc, #236]	@ (8004164 <HAL_RCC_OscConfig+0x3f0>)
 8004076:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800407c:	6413      	str	r3, [r2, #64]	@ 0x40
 800407e:	e7db      	b.n	8004038 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8004080:	4b39      	ldr	r3, [pc, #228]	@ (8004168 <HAL_RCC_OscConfig+0x3f4>)
 8004082:	2200      	movs	r2, #0
 8004084:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004086:	f7fe f9f3 	bl	8002470 <HAL_GetTick>
 800408a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408c:	4b35      	ldr	r3, [pc, #212]	@ (8004164 <HAL_RCC_OscConfig+0x3f0>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004094:	d006      	beq.n	80040a4 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004096:	f7fe f9eb 	bl	8002470 <HAL_GetTick>
 800409a:	1b40      	subs	r0, r0, r5
 800409c:	2802      	cmp	r0, #2
 800409e:	d9f5      	bls.n	800408c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80040a0:	2003      	movs	r0, #3
 80040a2:	e051      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040a4:	69e3      	ldr	r3, [r4, #28]
 80040a6:	6a22      	ldr	r2, [r4, #32]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80040ac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80040b0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80040b2:	0852      	lsrs	r2, r2, #1
 80040b4:	3a01      	subs	r2, #1
 80040b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80040bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80040c0:	4a28      	ldr	r2, [pc, #160]	@ (8004164 <HAL_RCC_OscConfig+0x3f0>)
 80040c2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80040c4:	4b28      	ldr	r3, [pc, #160]	@ (8004168 <HAL_RCC_OscConfig+0x3f4>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80040ca:	f7fe f9d1 	bl	8002470 <HAL_GetTick>
 80040ce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d0:	4b24      	ldr	r3, [pc, #144]	@ (8004164 <HAL_RCC_OscConfig+0x3f0>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80040d8:	d106      	bne.n	80040e8 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040da:	f7fe f9c9 	bl	8002470 <HAL_GetTick>
 80040de:	1b00      	subs	r0, r0, r4
 80040e0:	2802      	cmp	r0, #2
 80040e2:	d9f5      	bls.n	80040d0 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80040e4:	2003      	movs	r0, #3
 80040e6:	e02f      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80040e8:	2000      	movs	r0, #0
 80040ea:	e02d      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
 80040ec:	2000      	movs	r0, #0
 80040ee:	e02b      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d02b      	beq.n	800414c <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80040f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004164 <HAL_RCC_OscConfig+0x3f0>)
 80040f6:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f8:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80040fc:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040fe:	4291      	cmp	r1, r2
 8004100:	d126      	bne.n	8004150 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004102:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004106:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004108:	428a      	cmp	r2, r1
 800410a:	d123      	bne.n	8004154 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800410c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800410e:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8004112:	401a      	ands	r2, r3
 8004114:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004118:	d11e      	bne.n	8004158 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800411a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800411e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004120:	0852      	lsrs	r2, r2, #1
 8004122:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004124:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004128:	d118      	bne.n	800415c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800412a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800412e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004130:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8004134:	d114      	bne.n	8004160 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8004136:	2000      	movs	r0, #0
 8004138:	e006      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800413a:	2001      	movs	r0, #1
}
 800413c:	4770      	bx	lr
        return HAL_ERROR;
 800413e:	2001      	movs	r0, #1
 8004140:	e002      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8004142:	2001      	movs	r0, #1
 8004144:	e000      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8004146:	2000      	movs	r0, #0
}
 8004148:	b002      	add	sp, #8
 800414a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800414c:	2001      	movs	r0, #1
 800414e:	e7fb      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8004150:	2001      	movs	r0, #1
 8004152:	e7f9      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
 8004154:	2001      	movs	r0, #1
 8004156:	e7f7      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
 8004158:	2001      	movs	r0, #1
 800415a:	e7f5      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
 800415c:	2001      	movs	r0, #1
 800415e:	e7f3      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
 8004160:	2001      	movs	r0, #1
 8004162:	e7f1      	b.n	8004148 <HAL_RCC_OscConfig+0x3d4>
 8004164:	40023800 	.word	0x40023800
 8004168:	42470000 	.word	0x42470000

0800416c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800416c:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800416e:	4b26      	ldr	r3, [pc, #152]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b04      	cmp	r3, #4
 8004178:	d041      	beq.n	80041fe <HAL_RCC_GetSysClockFreq+0x92>
 800417a:	2b08      	cmp	r3, #8
 800417c:	d141      	bne.n	8004202 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800417e:	4b22      	ldr	r3, [pc, #136]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800418c:	d012      	beq.n	80041b4 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800418e:	4b1e      	ldr	r3, [pc, #120]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004190:	6859      	ldr	r1, [r3, #4]
 8004192:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004196:	481d      	ldr	r0, [pc, #116]	@ (800420c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004198:	2300      	movs	r3, #0
 800419a:	fba1 0100 	umull	r0, r1, r1, r0
 800419e:	f7fc f857 	bl	8000250 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80041a2:	4b19      	ldr	r3, [pc, #100]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80041aa:	3301      	adds	r3, #1
 80041ac:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80041ae:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80041b2:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b4:	4b14      	ldr	r3, [pc, #80]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041b6:	6858      	ldr	r0, [r3, #4]
 80041b8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80041bc:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80041c0:	ebbc 0c00 	subs.w	ip, ip, r0
 80041c4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80041c8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80041cc:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80041d0:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80041d4:	ebb1 010c 	subs.w	r1, r1, ip
 80041d8:	eb63 030e 	sbc.w	r3, r3, lr
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e2:	00c9      	lsls	r1, r1, #3
 80041e4:	eb11 0c00 	adds.w	ip, r1, r0
 80041e8:	f143 0300 	adc.w	r3, r3, #0
 80041ec:	0299      	lsls	r1, r3, #10
 80041ee:	2300      	movs	r3, #0
 80041f0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80041f4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80041f8:	f7fc f82a 	bl	8000250 <__aeabi_uldivmod>
 80041fc:	e7d1      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80041fe:	4803      	ldr	r0, [pc, #12]	@ (800420c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004200:	e7d7      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004202:	4803      	ldr	r0, [pc, #12]	@ (8004210 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8004204:	e7d5      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x46>
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800
 800420c:	017d7840 	.word	0x017d7840
 8004210:	00f42400 	.word	0x00f42400

08004214 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004214:	2800      	cmp	r0, #0
 8004216:	f000 809b 	beq.w	8004350 <HAL_RCC_ClockConfig+0x13c>
{
 800421a:	b570      	push	{r4, r5, r6, lr}
 800421c:	460d      	mov	r5, r1
 800421e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004220:	4b4f      	ldr	r3, [pc, #316]	@ (8004360 <HAL_RCC_ClockConfig+0x14c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	428b      	cmp	r3, r1
 800422a:	d208      	bcs.n	800423e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422c:	b2cb      	uxtb	r3, r1
 800422e:	4a4c      	ldr	r2, [pc, #304]	@ (8004360 <HAL_RCC_ClockConfig+0x14c>)
 8004230:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	6813      	ldr	r3, [r2, #0]
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	428b      	cmp	r3, r1
 800423a:	f040 808b 	bne.w	8004354 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	f013 0f02 	tst.w	r3, #2
 8004244:	d017      	beq.n	8004276 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004246:	f013 0f04 	tst.w	r3, #4
 800424a:	d004      	beq.n	8004256 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800424c:	4a45      	ldr	r2, [pc, #276]	@ (8004364 <HAL_RCC_ClockConfig+0x150>)
 800424e:	6893      	ldr	r3, [r2, #8]
 8004250:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004254:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	f013 0f08 	tst.w	r3, #8
 800425c:	d004      	beq.n	8004268 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800425e:	4a41      	ldr	r2, [pc, #260]	@ (8004364 <HAL_RCC_ClockConfig+0x150>)
 8004260:	6893      	ldr	r3, [r2, #8]
 8004262:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004266:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004268:	4a3e      	ldr	r2, [pc, #248]	@ (8004364 <HAL_RCC_ClockConfig+0x150>)
 800426a:	6893      	ldr	r3, [r2, #8]
 800426c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004270:	68a1      	ldr	r1, [r4, #8]
 8004272:	430b      	orrs	r3, r1
 8004274:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	f013 0f01 	tst.w	r3, #1
 800427c:	d032      	beq.n	80042e4 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427e:	6863      	ldr	r3, [r4, #4]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d021      	beq.n	80042c8 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004284:	1e9a      	subs	r2, r3, #2
 8004286:	2a01      	cmp	r2, #1
 8004288:	d925      	bls.n	80042d6 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428a:	4a36      	ldr	r2, [pc, #216]	@ (8004364 <HAL_RCC_ClockConfig+0x150>)
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	f012 0f02 	tst.w	r2, #2
 8004292:	d061      	beq.n	8004358 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004294:	4933      	ldr	r1, [pc, #204]	@ (8004364 <HAL_RCC_ClockConfig+0x150>)
 8004296:	688a      	ldr	r2, [r1, #8]
 8004298:	f022 0203 	bic.w	r2, r2, #3
 800429c:	4313      	orrs	r3, r2
 800429e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80042a0:	f7fe f8e6 	bl	8002470 <HAL_GetTick>
 80042a4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004364 <HAL_RCC_ClockConfig+0x150>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	6862      	ldr	r2, [r4, #4]
 80042b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80042b4:	d016      	beq.n	80042e4 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b6:	f7fe f8db 	bl	8002470 <HAL_GetTick>
 80042ba:	1b80      	subs	r0, r0, r6
 80042bc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80042c0:	4298      	cmp	r0, r3
 80042c2:	d9f0      	bls.n	80042a6 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80042c4:	2003      	movs	r0, #3
 80042c6:	e042      	b.n	800434e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c8:	4a26      	ldr	r2, [pc, #152]	@ (8004364 <HAL_RCC_ClockConfig+0x150>)
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80042d0:	d1e0      	bne.n	8004294 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80042d2:	2001      	movs	r0, #1
 80042d4:	e03b      	b.n	800434e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d6:	4a23      	ldr	r2, [pc, #140]	@ (8004364 <HAL_RCC_ClockConfig+0x150>)
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80042de:	d1d9      	bne.n	8004294 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80042e0:	2001      	movs	r0, #1
 80042e2:	e034      	b.n	800434e <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004360 <HAL_RCC_ClockConfig+0x14c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	42ab      	cmp	r3, r5
 80042ee:	d907      	bls.n	8004300 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f0:	b2ea      	uxtb	r2, r5
 80042f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004360 <HAL_RCC_ClockConfig+0x14c>)
 80042f4:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	42ab      	cmp	r3, r5
 80042fe:	d12d      	bne.n	800435c <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	f013 0f04 	tst.w	r3, #4
 8004306:	d006      	beq.n	8004316 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004308:	4a16      	ldr	r2, [pc, #88]	@ (8004364 <HAL_RCC_ClockConfig+0x150>)
 800430a:	6893      	ldr	r3, [r2, #8]
 800430c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8004310:	68e1      	ldr	r1, [r4, #12]
 8004312:	430b      	orrs	r3, r1
 8004314:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	f013 0f08 	tst.w	r3, #8
 800431c:	d007      	beq.n	800432e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800431e:	4a11      	ldr	r2, [pc, #68]	@ (8004364 <HAL_RCC_ClockConfig+0x150>)
 8004320:	6893      	ldr	r3, [r2, #8]
 8004322:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004326:	6921      	ldr	r1, [r4, #16]
 8004328:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800432c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800432e:	f7ff ff1d 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8004332:	4b0c      	ldr	r3, [pc, #48]	@ (8004364 <HAL_RCC_ClockConfig+0x150>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800433a:	4a0b      	ldr	r2, [pc, #44]	@ (8004368 <HAL_RCC_ClockConfig+0x154>)
 800433c:	5cd3      	ldrb	r3, [r2, r3]
 800433e:	40d8      	lsrs	r0, r3
 8004340:	4b0a      	ldr	r3, [pc, #40]	@ (800436c <HAL_RCC_ClockConfig+0x158>)
 8004342:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004344:	4b0a      	ldr	r3, [pc, #40]	@ (8004370 <HAL_RCC_ClockConfig+0x15c>)
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	f000 fd36 	bl	8004db8 <HAL_InitTick>
  return HAL_OK;
 800434c:	2000      	movs	r0, #0
}
 800434e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004350:	2001      	movs	r0, #1
}
 8004352:	4770      	bx	lr
      return HAL_ERROR;
 8004354:	2001      	movs	r0, #1
 8004356:	e7fa      	b.n	800434e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8004358:	2001      	movs	r0, #1
 800435a:	e7f8      	b.n	800434e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800435c:	2001      	movs	r0, #1
 800435e:	e7f6      	b.n	800434e <HAL_RCC_ClockConfig+0x13a>
 8004360:	40023c00 	.word	0x40023c00
 8004364:	40023800 	.word	0x40023800
 8004368:	08009fcc 	.word	0x08009fcc
 800436c:	20000010 	.word	0x20000010
 8004370:	2000000c 	.word	0x2000000c

08004374 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004374:	4b01      	ldr	r3, [pc, #4]	@ (800437c <HAL_RCC_GetHCLKFreq+0x8>)
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20000010 	.word	0x20000010

08004380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004380:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004382:	f7ff fff7 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 8004386:	4b04      	ldr	r3, [pc, #16]	@ (8004398 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800438e:	4a03      	ldr	r2, [pc, #12]	@ (800439c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004390:	5cd3      	ldrb	r3, [r2, r3]
}
 8004392:	40d8      	lsrs	r0, r3
 8004394:	bd08      	pop	{r3, pc}
 8004396:	bf00      	nop
 8004398:	40023800 	.word	0x40023800
 800439c:	08009fc4 	.word	0x08009fc4

080043a0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043a0:	230f      	movs	r3, #15
 80043a2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043a4:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <HAL_RCC_GetClockConfig+0x34>)
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	f002 0203 	and.w	r2, r2, #3
 80043ac:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80043b4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80043bc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	08db      	lsrs	r3, r3, #3
 80043c2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80043c6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043c8:	4b03      	ldr	r3, [pc, #12]	@ (80043d8 <HAL_RCC_GetClockConfig+0x38>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	600b      	str	r3, [r1, #0]
}
 80043d2:	4770      	bx	lr
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40023c00 	.word	0x40023c00

080043dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043dc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043de:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e0:	6a03      	ldr	r3, [r0, #32]
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ea:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043ec:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f0:	680c      	ldr	r4, [r1, #0]
 80043f2:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043f4:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043f8:	688b      	ldr	r3, [r1, #8]
 80043fa:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043fc:	4a0b      	ldr	r2, [pc, #44]	@ (800442c <TIM_OC1_SetConfig+0x50>)
 80043fe:	4290      	cmp	r0, r2
 8004400:	d006      	beq.n	8004410 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004402:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004404:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004406:	684a      	ldr	r2, [r1, #4]
 8004408:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440a:	6203      	str	r3, [r0, #32]
}
 800440c:	bc30      	pop	{r4, r5}
 800440e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8004410:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004414:	68ca      	ldr	r2, [r1, #12]
 8004416:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8004418:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800441c:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8004420:	694a      	ldr	r2, [r1, #20]
 8004422:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004424:	698d      	ldr	r5, [r1, #24]
 8004426:	4315      	orrs	r5, r2
 8004428:	e7eb      	b.n	8004402 <TIM_OC1_SetConfig+0x26>
 800442a:	bf00      	nop
 800442c:	40010000 	.word	0x40010000

08004430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004430:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004432:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004434:	6a02      	ldr	r2, [r0, #32]
 8004436:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800443a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800443c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800443e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004440:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004444:	680d      	ldr	r5, [r1, #0]
 8004446:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004448:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800444c:	688a      	ldr	r2, [r1, #8]
 800444e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004452:	4a0d      	ldr	r2, [pc, #52]	@ (8004488 <TIM_OC3_SetConfig+0x58>)
 8004454:	4290      	cmp	r0, r2
 8004456:	d006      	beq.n	8004466 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004458:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800445a:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800445c:	684a      	ldr	r2, [r1, #4]
 800445e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004460:	6203      	str	r3, [r0, #32]
}
 8004462:	bc30      	pop	{r4, r5}
 8004464:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004466:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800446a:	68ca      	ldr	r2, [r1, #12]
 800446c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004470:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004474:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004478:	694a      	ldr	r2, [r1, #20]
 800447a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800447e:	698a      	ldr	r2, [r1, #24]
 8004480:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8004484:	e7e8      	b.n	8004458 <TIM_OC3_SetConfig+0x28>
 8004486:	bf00      	nop
 8004488:	40010000 	.word	0x40010000

0800448c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800448c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004490:	6a02      	ldr	r2, [r0, #32]
 8004492:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004496:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004498:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800449a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800449c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a0:	680d      	ldr	r5, [r1, #0]
 80044a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044aa:	688d      	ldr	r5, [r1, #8]
 80044ac:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b0:	4d07      	ldr	r5, [pc, #28]	@ (80044d0 <TIM_OC4_SetConfig+0x44>)
 80044b2:	42a8      	cmp	r0, r5
 80044b4:	d006      	beq.n	80044c4 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044b8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044ba:	684a      	ldr	r2, [r1, #4]
 80044bc:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044be:	6203      	str	r3, [r0, #32]
}
 80044c0:	bc30      	pop	{r4, r5}
 80044c2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044c4:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044c8:	694d      	ldr	r5, [r1, #20]
 80044ca:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80044ce:	e7f2      	b.n	80044b6 <TIM_OC4_SetConfig+0x2a>
 80044d0:	40010000 	.word	0x40010000

080044d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044d6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d8:	6a04      	ldr	r4, [r0, #32]
 80044da:	f024 0401 	bic.w	r4, r4, #1
 80044de:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044e0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e2:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ea:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80044ee:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044f0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80044f2:	6203      	str	r3, [r0, #32]
}
 80044f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044fa:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044fc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044fe:	6a04      	ldr	r4, [r0, #32]
 8004500:	f024 0410 	bic.w	r4, r4, #16
 8004504:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004506:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004508:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800450c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004510:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004514:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004518:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800451a:	6203      	str	r3, [r0, #32]
}
 800451c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004520:	4770      	bx	lr

08004522 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004522:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004528:	430b      	orrs	r3, r1
 800452a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800452e:	6083      	str	r3, [r0, #8]
}
 8004530:	4770      	bx	lr
	...

08004534 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004534:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004538:	2b01      	cmp	r3, #1
 800453a:	d12f      	bne.n	800459c <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	2302      	movs	r3, #2
 800453e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004542:	6802      	ldr	r2, [r0, #0]
 8004544:	68d3      	ldr	r3, [r2, #12]
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454c:	6803      	ldr	r3, [r0, #0]
 800454e:	4a15      	ldr	r2, [pc, #84]	@ (80045a4 <HAL_TIM_Base_Start_IT+0x70>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d018      	beq.n	8004586 <HAL_TIM_Base_Start_IT+0x52>
 8004554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004558:	d015      	beq.n	8004586 <HAL_TIM_Base_Start_IT+0x52>
 800455a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800455e:	4293      	cmp	r3, r2
 8004560:	d011      	beq.n	8004586 <HAL_TIM_Base_Start_IT+0x52>
 8004562:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004566:	4293      	cmp	r3, r2
 8004568:	d00d      	beq.n	8004586 <HAL_TIM_Base_Start_IT+0x52>
 800456a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800456e:	4293      	cmp	r3, r2
 8004570:	d009      	beq.n	8004586 <HAL_TIM_Base_Start_IT+0x52>
 8004572:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8004576:	4293      	cmp	r3, r2
 8004578:	d005      	beq.n	8004586 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	f042 0201 	orr.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004582:	2000      	movs	r0, #0
 8004584:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458c:	2a06      	cmp	r2, #6
 800458e:	d007      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004598:	2000      	movs	r0, #0
 800459a:	4770      	bx	lr
    return HAL_ERROR;
 800459c:	2001      	movs	r0, #1
 800459e:	4770      	bx	lr
  return HAL_OK;
 80045a0:	2000      	movs	r0, #0
}
 80045a2:	4770      	bx	lr
 80045a4:	40010000 	.word	0x40010000

080045a8 <HAL_TIM_OC_MspInit>:
}
 80045a8:	4770      	bx	lr

080045aa <HAL_TIM_OC_DelayElapsedCallback>:
}
 80045aa:	4770      	bx	lr

080045ac <HAL_TIM_IC_CaptureCallback>:
}
 80045ac:	4770      	bx	lr

080045ae <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80045ae:	4770      	bx	lr

080045b0 <HAL_TIM_TriggerCallback>:
}
 80045b0:	4770      	bx	lr

080045b2 <HAL_TIM_IRQHandler>:
{
 80045b2:	b570      	push	{r4, r5, r6, lr}
 80045b4:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80045b6:	6803      	ldr	r3, [r0, #0]
 80045b8:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045ba:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045bc:	f015 0f02 	tst.w	r5, #2
 80045c0:	d010      	beq.n	80045e4 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045c2:	f016 0f02 	tst.w	r6, #2
 80045c6:	d00d      	beq.n	80045e4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045c8:	f06f 0202 	mvn.w	r2, #2
 80045cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ce:	2301      	movs	r3, #1
 80045d0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045d2:	6803      	ldr	r3, [r0, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f013 0f03 	tst.w	r3, #3
 80045da:	d05e      	beq.n	800469a <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80045dc:	f7ff ffe6 	bl	80045ac <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e0:	2300      	movs	r3, #0
 80045e2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045e4:	f015 0f04 	tst.w	r5, #4
 80045e8:	d012      	beq.n	8004610 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045ea:	f016 0f04 	tst.w	r6, #4
 80045ee:	d00f      	beq.n	8004610 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	f06f 0204 	mvn.w	r2, #4
 80045f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045f8:	2302      	movs	r3, #2
 80045fa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004604:	d04f      	beq.n	80046a6 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8004606:	4620      	mov	r0, r4
 8004608:	f7ff ffd0 	bl	80045ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460c:	2300      	movs	r3, #0
 800460e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004610:	f015 0f08 	tst.w	r5, #8
 8004614:	d012      	beq.n	800463c <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004616:	f016 0f08 	tst.w	r6, #8
 800461a:	d00f      	beq.n	800463c <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	f06f 0208 	mvn.w	r2, #8
 8004622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004624:	2304      	movs	r3, #4
 8004626:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	f013 0f03 	tst.w	r3, #3
 8004630:	d040      	beq.n	80046b4 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8004632:	4620      	mov	r0, r4
 8004634:	f7ff ffba 	bl	80045ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004638:	2300      	movs	r3, #0
 800463a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800463c:	f015 0f10 	tst.w	r5, #16
 8004640:	d012      	beq.n	8004668 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004642:	f016 0f10 	tst.w	r6, #16
 8004646:	d00f      	beq.n	8004668 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	f06f 0210 	mvn.w	r2, #16
 800464e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004650:	2308      	movs	r3, #8
 8004652:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800465c:	d031      	beq.n	80046c2 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 800465e:	4620      	mov	r0, r4
 8004660:	f7ff ffa4 	bl	80045ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004664:	2300      	movs	r3, #0
 8004666:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004668:	f015 0f01 	tst.w	r5, #1
 800466c:	d002      	beq.n	8004674 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800466e:	f016 0f01 	tst.w	r6, #1
 8004672:	d12d      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004674:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8004678:	d002      	beq.n	8004680 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800467a:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800467e:	d12f      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004680:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8004684:	d002      	beq.n	800468c <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004686:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800468a:	d131      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800468c:	f015 0f20 	tst.w	r5, #32
 8004690:	d002      	beq.n	8004698 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004692:	f016 0f20 	tst.w	r6, #32
 8004696:	d133      	bne.n	8004700 <HAL_TIM_IRQHandler+0x14e>
}
 8004698:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800469a:	f7ff ff86 	bl	80045aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469e:	4620      	mov	r0, r4
 80046a0:	f7ff ff85 	bl	80045ae <HAL_TIM_PWM_PulseFinishedCallback>
 80046a4:	e79c      	b.n	80045e0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a6:	4620      	mov	r0, r4
 80046a8:	f7ff ff7f 	bl	80045aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ac:	4620      	mov	r0, r4
 80046ae:	f7ff ff7e 	bl	80045ae <HAL_TIM_PWM_PulseFinishedCallback>
 80046b2:	e7ab      	b.n	800460c <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b4:	4620      	mov	r0, r4
 80046b6:	f7ff ff78 	bl	80045aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ba:	4620      	mov	r0, r4
 80046bc:	f7ff ff77 	bl	80045ae <HAL_TIM_PWM_PulseFinishedCallback>
 80046c0:	e7ba      	b.n	8004638 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c2:	4620      	mov	r0, r4
 80046c4:	f7ff ff71 	bl	80045aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c8:	4620      	mov	r0, r4
 80046ca:	f7ff ff70 	bl	80045ae <HAL_TIM_PWM_PulseFinishedCallback>
 80046ce:	e7c9      	b.n	8004664 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	f06f 0201 	mvn.w	r2, #1
 80046d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80046d8:	4620      	mov	r0, r4
 80046da:	f7fc ff4f 	bl	800157c <HAL_TIM_PeriodElapsedCallback>
 80046de:	e7c9      	b.n	8004674 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80046e8:	4620      	mov	r0, r4
 80046ea:	f000 fb63 	bl	8004db4 <HAL_TIMEx_BreakCallback>
 80046ee:	e7c7      	b.n	8004680 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80046f8:	4620      	mov	r0, r4
 80046fa:	f7ff ff59 	bl	80045b0 <HAL_TIM_TriggerCallback>
 80046fe:	e7c5      	b.n	800468c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	f06f 0220 	mvn.w	r2, #32
 8004706:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004708:	4620      	mov	r0, r4
 800470a:	f000 fb52 	bl	8004db2 <HAL_TIMEx_CommutCallback>
}
 800470e:	e7c3      	b.n	8004698 <HAL_TIM_IRQHandler+0xe6>

08004710 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004710:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004712:	4a29      	ldr	r2, [pc, #164]	@ (80047b8 <TIM_Base_SetConfig+0xa8>)
 8004714:	4290      	cmp	r0, r2
 8004716:	d00e      	beq.n	8004736 <TIM_Base_SetConfig+0x26>
 8004718:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800471c:	d00b      	beq.n	8004736 <TIM_Base_SetConfig+0x26>
 800471e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004722:	4290      	cmp	r0, r2
 8004724:	d007      	beq.n	8004736 <TIM_Base_SetConfig+0x26>
 8004726:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800472a:	4290      	cmp	r0, r2
 800472c:	d003      	beq.n	8004736 <TIM_Base_SetConfig+0x26>
 800472e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004732:	4290      	cmp	r0, r2
 8004734:	d103      	bne.n	800473e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800473a:	684a      	ldr	r2, [r1, #4]
 800473c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800473e:	4a1e      	ldr	r2, [pc, #120]	@ (80047b8 <TIM_Base_SetConfig+0xa8>)
 8004740:	4290      	cmp	r0, r2
 8004742:	d01a      	beq.n	800477a <TIM_Base_SetConfig+0x6a>
 8004744:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004748:	d017      	beq.n	800477a <TIM_Base_SetConfig+0x6a>
 800474a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800474e:	4290      	cmp	r0, r2
 8004750:	d013      	beq.n	800477a <TIM_Base_SetConfig+0x6a>
 8004752:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004756:	4290      	cmp	r0, r2
 8004758:	d00f      	beq.n	800477a <TIM_Base_SetConfig+0x6a>
 800475a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800475e:	4290      	cmp	r0, r2
 8004760:	d00b      	beq.n	800477a <TIM_Base_SetConfig+0x6a>
 8004762:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8004766:	4290      	cmp	r0, r2
 8004768:	d007      	beq.n	800477a <TIM_Base_SetConfig+0x6a>
 800476a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800476e:	4290      	cmp	r0, r2
 8004770:	d003      	beq.n	800477a <TIM_Base_SetConfig+0x6a>
 8004772:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004776:	4290      	cmp	r0, r2
 8004778:	d103      	bne.n	8004782 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800477a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800477e:	68ca      	ldr	r2, [r1, #12]
 8004780:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004782:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004786:	694a      	ldr	r2, [r1, #20]
 8004788:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800478a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800478c:	688b      	ldr	r3, [r1, #8]
 800478e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004790:	680b      	ldr	r3, [r1, #0]
 8004792:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004794:	4b08      	ldr	r3, [pc, #32]	@ (80047b8 <TIM_Base_SetConfig+0xa8>)
 8004796:	4298      	cmp	r0, r3
 8004798:	d00a      	beq.n	80047b0 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 800479a:	2301      	movs	r3, #1
 800479c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800479e:	6903      	ldr	r3, [r0, #16]
 80047a0:	f013 0f01 	tst.w	r3, #1
 80047a4:	d003      	beq.n	80047ae <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047a6:	6903      	ldr	r3, [r0, #16]
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	6103      	str	r3, [r0, #16]
}
 80047ae:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80047b0:	690b      	ldr	r3, [r1, #16]
 80047b2:	6303      	str	r3, [r0, #48]	@ 0x30
 80047b4:	e7f1      	b.n	800479a <TIM_Base_SetConfig+0x8a>
 80047b6:	bf00      	nop
 80047b8:	40010000 	.word	0x40010000

080047bc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80047bc:	b340      	cbz	r0, 8004810 <HAL_TIM_Base_Init+0x54>
{
 80047be:	b510      	push	{r4, lr}
 80047c0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80047c2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80047c6:	b1f3      	cbz	r3, 8004806 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	2302      	movs	r3, #2
 80047ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ce:	4621      	mov	r1, r4
 80047d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80047d4:	f7ff ff9c 	bl	8004710 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d8:	2301      	movs	r3, #1
 80047da:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047de:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80047e2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80047e6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80047ea:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047f6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80047fa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80047fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004802:	2000      	movs	r0, #0
}
 8004804:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004806:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800480a:	f002 f873 	bl	80068f4 <HAL_TIM_Base_MspInit>
 800480e:	e7db      	b.n	80047c8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004810:	2001      	movs	r0, #1
}
 8004812:	4770      	bx	lr

08004814 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8004814:	b340      	cbz	r0, 8004868 <HAL_TIM_OC_Init+0x54>
{
 8004816:	b510      	push	{r4, lr}
 8004818:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800481a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800481e:	b1f3      	cbz	r3, 800485e <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	2302      	movs	r3, #2
 8004822:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004826:	4621      	mov	r1, r4
 8004828:	f851 0b04 	ldr.w	r0, [r1], #4
 800482c:	f7ff ff70 	bl	8004710 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004830:	2301      	movs	r3, #1
 8004832:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004836:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800483a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800483e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004842:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004846:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800484a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800484e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004852:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004856:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800485a:	2000      	movs	r0, #0
}
 800485c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800485e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8004862:	f7ff fea1 	bl	80045a8 <HAL_TIM_OC_MspInit>
 8004866:	e7db      	b.n	8004820 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8004868:	2001      	movs	r0, #1
}
 800486a:	4770      	bx	lr

0800486c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800486c:	b340      	cbz	r0, 80048c0 <HAL_TIM_PWM_Init+0x54>
{
 800486e:	b510      	push	{r4, lr}
 8004870:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004872:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004876:	b1f3      	cbz	r3, 80048b6 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	2302      	movs	r3, #2
 800487a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800487e:	4621      	mov	r1, r4
 8004880:	f851 0b04 	ldr.w	r0, [r1], #4
 8004884:	f7ff ff44 	bl	8004710 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004888:	2301      	movs	r3, #1
 800488a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004892:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004896:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800489a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048a6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80048aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80048ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80048b2:	2000      	movs	r0, #0
}
 80048b4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80048b6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80048ba:	f001 ffe7 	bl	800688c <HAL_TIM_PWM_MspInit>
 80048be:	e7db      	b.n	8004878 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80048c0:	2001      	movs	r0, #1
}
 80048c2:	4770      	bx	lr

080048c4 <TIM_OC2_SetConfig>:
{
 80048c4:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80048c6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c8:	6a02      	ldr	r2, [r0, #32]
 80048ca:	f022 0210 	bic.w	r2, r2, #16
 80048ce:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80048d0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80048d2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048d4:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d8:	680d      	ldr	r5, [r1, #0]
 80048da:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80048de:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048e2:	688d      	ldr	r5, [r1, #8]
 80048e4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048e8:	4d0c      	ldr	r5, [pc, #48]	@ (800491c <TIM_OC2_SetConfig+0x58>)
 80048ea:	42a8      	cmp	r0, r5
 80048ec:	d006      	beq.n	80048fc <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80048ee:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80048f0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80048f2:	684a      	ldr	r2, [r1, #4]
 80048f4:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80048f6:	6203      	str	r3, [r0, #32]
}
 80048f8:	bc30      	pop	{r4, r5}
 80048fa:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80048fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004900:	68cd      	ldr	r5, [r1, #12]
 8004902:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800490a:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800490e:	694d      	ldr	r5, [r1, #20]
 8004910:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004914:	698d      	ldr	r5, [r1, #24]
 8004916:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800491a:	e7e8      	b.n	80048ee <TIM_OC2_SetConfig+0x2a>
 800491c:	40010000 	.word	0x40010000

08004920 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8004920:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d028      	beq.n	800497a <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8004928:	b510      	push	{r4, lr}
 800492a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800492c:	2301      	movs	r3, #1
 800492e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8004932:	2a0c      	cmp	r2, #12
 8004934:	d81c      	bhi.n	8004970 <HAL_TIM_OC_ConfigChannel+0x50>
 8004936:	e8df f002 	tbb	[pc, r2]
 800493a:	1b07      	.short	0x1b07
 800493c:	1b0c1b1b 	.word	0x1b0c1b1b
 8004940:	1b111b1b 	.word	0x1b111b1b
 8004944:	1b1b      	.short	0x1b1b
 8004946:	16          	.byte	0x16
 8004947:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004948:	6800      	ldr	r0, [r0, #0]
 800494a:	f7ff fd47 	bl	80043dc <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800494e:	2000      	movs	r0, #0
      break;
 8004950:	e00f      	b.n	8004972 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004952:	6800      	ldr	r0, [r0, #0]
 8004954:	f7ff ffb6 	bl	80048c4 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004958:	2000      	movs	r0, #0
      break;
 800495a:	e00a      	b.n	8004972 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800495c:	6800      	ldr	r0, [r0, #0]
 800495e:	f7ff fd67 	bl	8004430 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004962:	2000      	movs	r0, #0
      break;
 8004964:	e005      	b.n	8004972 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004966:	6800      	ldr	r0, [r0, #0]
 8004968:	f7ff fd90 	bl	800448c <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800496c:	2000      	movs	r0, #0
      break;
 800496e:	e000      	b.n	8004972 <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 8004970:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004972:	2300      	movs	r3, #0
 8004974:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004978:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800497a:	2002      	movs	r0, #2
}
 800497c:	4770      	bx	lr

0800497e <HAL_TIM_PWM_ConfigChannel>:
{
 800497e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004980:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d066      	beq.n	8004a56 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8004988:	4604      	mov	r4, r0
 800498a:	460d      	mov	r5, r1
 800498c:	2301      	movs	r3, #1
 800498e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8004992:	2a0c      	cmp	r2, #12
 8004994:	d85a      	bhi.n	8004a4c <HAL_TIM_PWM_ConfigChannel+0xce>
 8004996:	e8df f002 	tbb	[pc, r2]
 800499a:	5907      	.short	0x5907
 800499c:	591b5959 	.word	0x591b5959
 80049a0:	59305959 	.word	0x59305959
 80049a4:	5959      	.short	0x5959
 80049a6:	44          	.byte	0x44
 80049a7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049a8:	6800      	ldr	r0, [r0, #0]
 80049aa:	f7ff fd17 	bl	80043dc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049ae:	6822      	ldr	r2, [r4, #0]
 80049b0:	6993      	ldr	r3, [r2, #24]
 80049b2:	f043 0308 	orr.w	r3, r3, #8
 80049b6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049b8:	6822      	ldr	r2, [r4, #0]
 80049ba:	6993      	ldr	r3, [r2, #24]
 80049bc:	f023 0304 	bic.w	r3, r3, #4
 80049c0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049c2:	6822      	ldr	r2, [r4, #0]
 80049c4:	6993      	ldr	r3, [r2, #24]
 80049c6:	6929      	ldr	r1, [r5, #16]
 80049c8:	430b      	orrs	r3, r1
 80049ca:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80049cc:	2000      	movs	r0, #0
      break;
 80049ce:	e03e      	b.n	8004a4e <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049d0:	6800      	ldr	r0, [r0, #0]
 80049d2:	f7ff ff77 	bl	80048c4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049d6:	6822      	ldr	r2, [r4, #0]
 80049d8:	6993      	ldr	r3, [r2, #24]
 80049da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80049de:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049e0:	6822      	ldr	r2, [r4, #0]
 80049e2:	6993      	ldr	r3, [r2, #24]
 80049e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049e8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049ea:	6822      	ldr	r2, [r4, #0]
 80049ec:	6993      	ldr	r3, [r2, #24]
 80049ee:	6929      	ldr	r1, [r5, #16]
 80049f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80049f4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80049f6:	2000      	movs	r0, #0
      break;
 80049f8:	e029      	b.n	8004a4e <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049fa:	6800      	ldr	r0, [r0, #0]
 80049fc:	f7ff fd18 	bl	8004430 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a00:	6822      	ldr	r2, [r4, #0]
 8004a02:	69d3      	ldr	r3, [r2, #28]
 8004a04:	f043 0308 	orr.w	r3, r3, #8
 8004a08:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a0a:	6822      	ldr	r2, [r4, #0]
 8004a0c:	69d3      	ldr	r3, [r2, #28]
 8004a0e:	f023 0304 	bic.w	r3, r3, #4
 8004a12:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a14:	6822      	ldr	r2, [r4, #0]
 8004a16:	69d3      	ldr	r3, [r2, #28]
 8004a18:	6929      	ldr	r1, [r5, #16]
 8004a1a:	430b      	orrs	r3, r1
 8004a1c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1e:	2000      	movs	r0, #0
      break;
 8004a20:	e015      	b.n	8004a4e <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a22:	6800      	ldr	r0, [r0, #0]
 8004a24:	f7ff fd32 	bl	800448c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a28:	6822      	ldr	r2, [r4, #0]
 8004a2a:	69d3      	ldr	r3, [r2, #28]
 8004a2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004a30:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	69d3      	ldr	r3, [r2, #28]
 8004a36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a3a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a3c:	6822      	ldr	r2, [r4, #0]
 8004a3e:	69d3      	ldr	r3, [r2, #28]
 8004a40:	6929      	ldr	r1, [r5, #16]
 8004a42:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004a46:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004a48:	2000      	movs	r0, #0
      break;
 8004a4a:	e000      	b.n	8004a4e <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8004a4c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004a54:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004a56:	2002      	movs	r0, #2
 8004a58:	e7fc      	b.n	8004a54 <HAL_TIM_PWM_ConfigChannel+0xd6>

08004a5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a5a:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a5c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a5e:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a62:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004a66:	430a      	orrs	r2, r1
 8004a68:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a6c:	6082      	str	r2, [r0, #8]
}
 8004a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004a74:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d078      	beq.n	8004b6e <HAL_TIM_ConfigClockSource+0xfa>
{
 8004a7c:	b510      	push	{r4, lr}
 8004a7e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004a80:	2301      	movs	r3, #1
 8004a82:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004a86:	2302      	movs	r3, #2
 8004a88:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004a8c:	6802      	ldr	r2, [r0, #0]
 8004a8e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a94:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004a98:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004a9a:	680b      	ldr	r3, [r1, #0]
 8004a9c:	2b60      	cmp	r3, #96	@ 0x60
 8004a9e:	d04c      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0xc6>
 8004aa0:	d823      	bhi.n	8004aea <HAL_TIM_ConfigClockSource+0x76>
 8004aa2:	2b40      	cmp	r3, #64	@ 0x40
 8004aa4:	d054      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0xdc>
 8004aa6:	d811      	bhi.n	8004acc <HAL_TIM_ConfigClockSource+0x58>
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d003      	beq.n	8004ab4 <HAL_TIM_ConfigClockSource+0x40>
 8004aac:	d80a      	bhi.n	8004ac4 <HAL_TIM_ConfigClockSource+0x50>
 8004aae:	b10b      	cbz	r3, 8004ab4 <HAL_TIM_ConfigClockSource+0x40>
 8004ab0:	2b10      	cmp	r3, #16
 8004ab2:	d105      	bne.n	8004ac0 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6820      	ldr	r0, [r4, #0]
 8004ab8:	f7ff fd33 	bl	8004522 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004abc:	2000      	movs	r0, #0
      break;
 8004abe:	e028      	b.n	8004b12 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	e026      	b.n	8004b12 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8004ac4:	2b30      	cmp	r3, #48	@ 0x30
 8004ac6:	d0f5      	beq.n	8004ab4 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8004ac8:	2001      	movs	r0, #1
 8004aca:	e022      	b.n	8004b12 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8004acc:	2b50      	cmp	r3, #80	@ 0x50
 8004ace:	d10a      	bne.n	8004ae6 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad0:	68ca      	ldr	r2, [r1, #12]
 8004ad2:	6849      	ldr	r1, [r1, #4]
 8004ad4:	6800      	ldr	r0, [r0, #0]
 8004ad6:	f7ff fcfd 	bl	80044d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ada:	2150      	movs	r1, #80	@ 0x50
 8004adc:	6820      	ldr	r0, [r4, #0]
 8004ade:	f7ff fd20 	bl	8004522 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004ae2:	2000      	movs	r0, #0
      break;
 8004ae4:	e015      	b.n	8004b12 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	e013      	b.n	8004b12 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8004aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aee:	d03a      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0xf2>
 8004af0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004af4:	d014      	beq.n	8004b20 <HAL_TIM_ConfigClockSource+0xac>
 8004af6:	2b70      	cmp	r3, #112	@ 0x70
 8004af8:	d137      	bne.n	8004b6a <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8004afa:	68cb      	ldr	r3, [r1, #12]
 8004afc:	684a      	ldr	r2, [r1, #4]
 8004afe:	6889      	ldr	r1, [r1, #8]
 8004b00:	6800      	ldr	r0, [r0, #0]
 8004b02:	f7ff ffaa 	bl	8004a5a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b06:	6822      	ldr	r2, [r4, #0]
 8004b08:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b0a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004b0e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004b10:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004b1e:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8004b20:	68cb      	ldr	r3, [r1, #12]
 8004b22:	684a      	ldr	r2, [r1, #4]
 8004b24:	6889      	ldr	r1, [r1, #8]
 8004b26:	6800      	ldr	r0, [r0, #0]
 8004b28:	f7ff ff97 	bl	8004a5a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b2c:	6822      	ldr	r2, [r4, #0]
 8004b2e:	6893      	ldr	r3, [r2, #8]
 8004b30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b34:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004b36:	2000      	movs	r0, #0
      break;
 8004b38:	e7eb      	b.n	8004b12 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b3a:	68ca      	ldr	r2, [r1, #12]
 8004b3c:	6849      	ldr	r1, [r1, #4]
 8004b3e:	6800      	ldr	r0, [r0, #0]
 8004b40:	f7ff fcdb 	bl	80044fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b44:	2160      	movs	r1, #96	@ 0x60
 8004b46:	6820      	ldr	r0, [r4, #0]
 8004b48:	f7ff fceb 	bl	8004522 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004b4c:	2000      	movs	r0, #0
      break;
 8004b4e:	e7e0      	b.n	8004b12 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b50:	68ca      	ldr	r2, [r1, #12]
 8004b52:	6849      	ldr	r1, [r1, #4]
 8004b54:	6800      	ldr	r0, [r0, #0]
 8004b56:	f7ff fcbd 	bl	80044d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b5a:	2140      	movs	r1, #64	@ 0x40
 8004b5c:	6820      	ldr	r0, [r4, #0]
 8004b5e:	f7ff fce0 	bl	8004522 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004b62:	2000      	movs	r0, #0
      break;
 8004b64:	e7d5      	b.n	8004b12 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8004b66:	2000      	movs	r0, #0
 8004b68:	e7d3      	b.n	8004b12 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	e7d1      	b.n	8004b12 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8004b6e:	2002      	movs	r0, #2
}
 8004b70:	4770      	bx	lr

08004b72 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b72:	f001 011f 	and.w	r1, r1, #31
 8004b76:	f04f 0c01 	mov.w	ip, #1
 8004b7a:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b7e:	6a03      	ldr	r3, [r0, #32]
 8004b80:	ea23 030c 	bic.w	r3, r3, ip
 8004b84:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b86:	6a03      	ldr	r3, [r0, #32]
 8004b88:	408a      	lsls	r2, r1
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	6203      	str	r3, [r0, #32]
}
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIM_OC_Start_IT>:
{
 8004b90:	b510      	push	{r4, lr}
 8004b92:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b94:	4608      	mov	r0, r1
 8004b96:	2900      	cmp	r1, #0
 8004b98:	d137      	bne.n	8004c0a <HAL_TIM_OC_Start_IT+0x7a>
 8004b9a:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	bf18      	it	ne
 8004ba2:	2301      	movne	r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f040 8095 	bne.w	8004cd4 <HAL_TIM_OC_Start_IT+0x144>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d143      	bne.n	8004c36 <HAL_TIM_OC_Start_IT+0xa6>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bb4:	6822      	ldr	r2, [r4, #0]
 8004bb6:	68d3      	ldr	r3, [r2, #12]
 8004bb8:	f043 0302 	orr.w	r3, r3, #2
 8004bbc:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	4601      	mov	r1, r0
 8004bc2:	6820      	ldr	r0, [r4, #0]
 8004bc4:	f7ff ffd5 	bl	8004b72 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	4a45      	ldr	r2, [pc, #276]	@ (8004ce0 <HAL_TIM_OC_Start_IT+0x150>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d071      	beq.n	8004cb4 <HAL_TIM_OC_Start_IT+0x124>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	4a43      	ldr	r2, [pc, #268]	@ (8004ce0 <HAL_TIM_OC_Start_IT+0x150>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d072      	beq.n	8004cbe <HAL_TIM_OC_Start_IT+0x12e>
 8004bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bdc:	d06f      	beq.n	8004cbe <HAL_TIM_OC_Start_IT+0x12e>
 8004bde:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d06b      	beq.n	8004cbe <HAL_TIM_OC_Start_IT+0x12e>
 8004be6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d067      	beq.n	8004cbe <HAL_TIM_OC_Start_IT+0x12e>
 8004bee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d063      	beq.n	8004cbe <HAL_TIM_OC_Start_IT+0x12e>
 8004bf6:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d05f      	beq.n	8004cbe <HAL_TIM_OC_Start_IT+0x12e>
      __HAL_TIM_ENABLE(htim);
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	f042 0201 	orr.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	2000      	movs	r0, #0
 8004c08:	e065      	b.n	8004cd6 <HAL_TIM_OC_Start_IT+0x146>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c0a:	2904      	cmp	r1, #4
 8004c0c:	d007      	beq.n	8004c1e <HAL_TIM_OC_Start_IT+0x8e>
 8004c0e:	2908      	cmp	r1, #8
 8004c10:	d00b      	beq.n	8004c2a <HAL_TIM_OC_Start_IT+0x9a>
 8004c12:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004c16:	3b01      	subs	r3, #1
 8004c18:	bf18      	it	ne
 8004c1a:	2301      	movne	r3, #1
 8004c1c:	e7c2      	b.n	8004ba4 <HAL_TIM_OC_Start_IT+0x14>
 8004c1e:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8004c22:	3b01      	subs	r3, #1
 8004c24:	bf18      	it	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	e7bc      	b.n	8004ba4 <HAL_TIM_OC_Start_IT+0x14>
 8004c2a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	bf18      	it	ne
 8004c32:	2301      	movne	r3, #1
 8004c34:	e7b6      	b.n	8004ba4 <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c36:	2804      	cmp	r0, #4
 8004c38:	d024      	beq.n	8004c84 <HAL_TIM_OC_Start_IT+0xf4>
 8004c3a:	2808      	cmp	r0, #8
 8004c3c:	d02b      	beq.n	8004c96 <HAL_TIM_OC_Start_IT+0x106>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  switch (Channel)
 8004c44:	280c      	cmp	r0, #12
 8004c46:	d847      	bhi.n	8004cd8 <HAL_TIM_OC_Start_IT+0x148>
 8004c48:	a301      	add	r3, pc, #4	@ (adr r3, 8004c50 <HAL_TIM_OC_Start_IT+0xc0>)
 8004c4a:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004bb5 	.word	0x08004bb5
 8004c54:	08004cd9 	.word	0x08004cd9
 8004c58:	08004cd9 	.word	0x08004cd9
 8004c5c:	08004cd9 	.word	0x08004cd9
 8004c60:	08004c8b 	.word	0x08004c8b
 8004c64:	08004cd9 	.word	0x08004cd9
 8004c68:	08004cd9 	.word	0x08004cd9
 8004c6c:	08004cd9 	.word	0x08004cd9
 8004c70:	08004c9d 	.word	0x08004c9d
 8004c74:	08004cd9 	.word	0x08004cd9
 8004c78:	08004cd9 	.word	0x08004cd9
 8004c7c:	08004cd9 	.word	0x08004cd9
 8004c80:	08004ca9 	.word	0x08004ca9
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c84:	2302      	movs	r3, #2
 8004c86:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c8a:	6822      	ldr	r2, [r4, #0]
 8004c8c:	68d3      	ldr	r3, [r2, #12]
 8004c8e:	f043 0304 	orr.w	r3, r3, #4
 8004c92:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004c94:	e793      	b.n	8004bbe <HAL_TIM_OC_Start_IT+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c96:	2302      	movs	r3, #2
 8004c98:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c9c:	6822      	ldr	r2, [r4, #0]
 8004c9e:	68d3      	ldr	r3, [r2, #12]
 8004ca0:	f043 0308 	orr.w	r3, r3, #8
 8004ca4:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004ca6:	e78a      	b.n	8004bbe <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004ca8:	6822      	ldr	r2, [r4, #0]
 8004caa:	68d3      	ldr	r3, [r2, #12]
 8004cac:	f043 0310 	orr.w	r3, r3, #16
 8004cb0:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004cb2:	e784      	b.n	8004bbe <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_MOE_ENABLE(htim);
 8004cb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cba:	645a      	str	r2, [r3, #68]	@ 0x44
 8004cbc:	e788      	b.n	8004bd0 <HAL_TIM_OC_Start_IT+0x40>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc4:	2a06      	cmp	r2, #6
 8004cc6:	d009      	beq.n	8004cdc <HAL_TIM_OC_Start_IT+0x14c>
        __HAL_TIM_ENABLE(htim);
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	e000      	b.n	8004cd6 <HAL_TIM_OC_Start_IT+0x146>
    return HAL_ERROR;
 8004cd4:	2001      	movs	r0, #1
}
 8004cd6:	bd10      	pop	{r4, pc}
  switch (Channel)
 8004cd8:	2001      	movs	r0, #1
 8004cda:	e7fc      	b.n	8004cd6 <HAL_TIM_OC_Start_IT+0x146>
 8004cdc:	2000      	movs	r0, #0
 8004cde:	e7fa      	b.n	8004cd6 <HAL_TIM_OC_Start_IT+0x146>
 8004ce0:	40010000 	.word	0x40010000

08004ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ce4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004ce8:	2a01      	cmp	r2, #1
 8004cea:	d035      	beq.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8004cec:	b410      	push	{r4}
 8004cee:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cfc:	6802      	ldr	r2, [r0, #0]
 8004cfe:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d00:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d02:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d06:	6808      	ldr	r0, [r1, #0]
 8004d08:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d0c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	4812      	ldr	r0, [pc, #72]	@ (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8004d12:	4282      	cmp	r2, r0
 8004d14:	d012      	beq.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004d16:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004d1a:	d00f      	beq.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004d1c:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8004d20:	4282      	cmp	r2, r0
 8004d22:	d00b      	beq.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004d24:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004d28:	4282      	cmp	r2, r0
 8004d2a:	d007      	beq.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004d2c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004d30:	4282      	cmp	r2, r0
 8004d32:	d003      	beq.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004d34:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8004d38:	4282      	cmp	r2, r0
 8004d3a:	d104      	bne.n	8004d46 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d3c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d40:	6849      	ldr	r1, [r1, #4]
 8004d42:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d44:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8004d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d56:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004d58:	2002      	movs	r0, #2
}
 8004d5a:	4770      	bx	lr
 8004d5c:	40010000 	.word	0x40010000

08004d60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d60:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d62:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d021      	beq.n	8004dae <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d70:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d76:	6888      	ldr	r0, [r1, #8]
 8004d78:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d7e:	6848      	ldr	r0, [r1, #4]
 8004d80:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d86:	6808      	ldr	r0, [r1, #0]
 8004d88:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d8e:	6908      	ldr	r0, [r1, #16]
 8004d90:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d96:	6948      	ldr	r0, [r1, #20]
 8004d98:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d9e:	69c9      	ldr	r1, [r1, #28]
 8004da0:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004da2:	6811      	ldr	r1, [r2, #0]
 8004da4:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004da6:	2000      	movs	r0, #0
 8004da8:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8004dac:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004dae:	2002      	movs	r0, #2
}
 8004db0:	4770      	bx	lr

08004db2 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004db4:	4770      	bx	lr
	...

08004db8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004db8:	b530      	push	{r4, r5, lr}
 8004dba:	b089      	sub	sp, #36	@ 0x24
 8004dbc:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8004dbe:	2400      	movs	r4, #0
 8004dc0:	9401      	str	r4, [sp, #4]
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e38 <HAL_InitTick+0x80>)
 8004dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dc6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004dca:	645a      	str	r2, [r3, #68]	@ 0x44
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004dd6:	a902      	add	r1, sp, #8
 8004dd8:	a803      	add	r0, sp, #12
 8004dda:	f7ff fae1 	bl	80043a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004dde:	f7ff facf 	bl	8004380 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004de2:	4a16      	ldr	r2, [pc, #88]	@ (8004e3c <HAL_InitTick+0x84>)
 8004de4:	fba2 2300 	umull	r2, r3, r2, r0
 8004de8:	0c9b      	lsrs	r3, r3, #18
 8004dea:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8004dec:	4814      	ldr	r0, [pc, #80]	@ (8004e40 <HAL_InitTick+0x88>)
 8004dee:	4a15      	ldr	r2, [pc, #84]	@ (8004e44 <HAL_InitTick+0x8c>)
 8004df0:	6002      	str	r2, [r0, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8004df2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004df6:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8004df8:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 8004dfa:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dfc:	6084      	str	r4, [r0, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dfe:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8004e00:	f7ff fcdc 	bl	80047bc <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8004e04:	4604      	mov	r4, r0
 8004e06:	b110      	cbz	r0, 8004e0e <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8004e08:	4620      	mov	r0, r4
 8004e0a:	b009      	add	sp, #36	@ 0x24
 8004e0c:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim11);
 8004e0e:	480c      	ldr	r0, [pc, #48]	@ (8004e40 <HAL_InitTick+0x88>)
 8004e10:	f7ff fb90 	bl	8004534 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8004e14:	4604      	mov	r4, r0
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d1f6      	bne.n	8004e08 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004e1a:	201a      	movs	r0, #26
 8004e1c:	f7fd fe34 	bl	8002a88 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e20:	2d0f      	cmp	r5, #15
 8004e22:	d901      	bls.n	8004e28 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8004e24:	2401      	movs	r4, #1
 8004e26:	e7ef      	b.n	8004e08 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8004e28:	2200      	movs	r2, #0
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	201a      	movs	r0, #26
 8004e2e:	f7fd fe1b 	bl	8002a68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e32:	4b05      	ldr	r3, [pc, #20]	@ (8004e48 <HAL_InitTick+0x90>)
 8004e34:	601d      	str	r5, [r3, #0]
 8004e36:	e7e7      	b.n	8004e08 <HAL_InitTick+0x50>
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	431bde83 	.word	0x431bde83
 8004e40:	20005490 	.word	0x20005490
 8004e44:	40014800 	.word	0x40014800
 8004e48:	2000000c 	.word	0x2000000c

08004e4c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004e4c:	e7fe      	b.n	8004e4c <NMI_Handler>

08004e4e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e4e:	e7fe      	b.n	8004e4e <HardFault_Handler>

08004e50 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e50:	e7fe      	b.n	8004e50 <MemManage_Handler>

08004e52 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e52:	e7fe      	b.n	8004e52 <BusFault_Handler>

08004e54 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e54:	e7fe      	b.n	8004e54 <UsageFault_Handler>

08004e56 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e56:	4770      	bx	lr

08004e58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004e58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004e5a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004e5e:	f7fe f91d 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004e62:	bd08      	pop	{r3, pc}

08004e64 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004e64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e66:	4803      	ldr	r0, [pc, #12]	@ (8004e74 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004e68:	f7ff fba3 	bl	80045b2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004e6c:	4802      	ldr	r0, [pc, #8]	@ (8004e78 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004e6e:	f7ff fba0 	bl	80045b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004e72:	bd08      	pop	{r3, pc}
 8004e74:	20005a6c 	.word	0x20005a6c
 8004e78:	20005490 	.word	0x20005490

08004e7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004e7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  scheduler_timer_callback();
 8004e7e:	f002 f991 	bl	80071a4 <scheduler_timer_callback>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004e82:	4802      	ldr	r0, [pc, #8]	@ (8004e8c <TIM2_IRQHandler+0x10>)
 8004e84:	f7ff fb95 	bl	80045b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004e88:	bd08      	pop	{r3, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20005a24 	.word	0x20005a24

08004e90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004e90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e92:	4802      	ldr	r0, [pc, #8]	@ (8004e9c <DMA2_Stream0_IRQHandler+0xc>)
 8004e94:	f7fd ff22 	bl	8002cdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004e98:	bd08      	pop	{r3, pc}
 8004e9a:	bf00      	nop
 8004e9c:	2000016c 	.word	0x2000016c

08004ea0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004ea0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004ea2:	4802      	ldr	r0, [pc, #8]	@ (8004eac <OTG_FS_IRQHandler+0xc>)
 8004ea4:	f7fe fc5b 	bl	800375e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004ea8:	bd08      	pop	{r3, pc}
 8004eaa:	bf00      	nop
 8004eac:	20006a84 	.word	0x20006a84

08004eb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eb6:	9b01      	ldr	r3, [sp, #4]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8004ebc:	9b01      	ldr	r3, [sp, #4]
 8004ebe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ec2:	d815      	bhi.n	8004ef0 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ec4:	6903      	ldr	r3, [r0, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	daf5      	bge.n	8004eb6 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ece:	6903      	ldr	r3, [r0, #16]
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8004ed6:	9b01      	ldr	r3, [sp, #4]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8004edc:	9b01      	ldr	r3, [sp, #4]
 8004ede:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ee2:	d808      	bhi.n	8004ef6 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ee4:	6903      	ldr	r3, [r0, #16]
 8004ee6:	f013 0f01 	tst.w	r3, #1
 8004eea:	d1f4      	bne.n	8004ed6 <USB_CoreReset+0x26>

  return HAL_OK;
 8004eec:	2000      	movs	r0, #0
 8004eee:	e000      	b.n	8004ef2 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8004ef0:	2003      	movs	r0, #3
}
 8004ef2:	b002      	add	sp, #8
 8004ef4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004ef6:	2003      	movs	r0, #3
 8004ef8:	e7fb      	b.n	8004ef2 <USB_CoreReset+0x42>

08004efa <USB_CoreInit>:
{
 8004efa:	b084      	sub	sp, #16
 8004efc:	b510      	push	{r4, lr}
 8004efe:	4604      	mov	r4, r0
 8004f00:	a803      	add	r0, sp, #12
 8004f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f06:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d121      	bne.n	8004f52 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004f10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f14:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f16:	68e3      	ldr	r3, [r4, #12]
 8004f18:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f20:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f22:	68e3      	ldr	r3, [r4, #12]
 8004f24:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004f28:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8004f2a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d00a      	beq.n	8004f48 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 8004f32:	4620      	mov	r0, r4
 8004f34:	f7ff ffbc 	bl	8004eb0 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004f38:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d01c      	beq.n	8004f7a <USB_CoreInit+0x80>
}
 8004f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f44:	b004      	add	sp, #16
 8004f46:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f48:	68e3      	ldr	r3, [r4, #12]
 8004f4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f4e:	60e3      	str	r3, [r4, #12]
 8004f50:	e7ef      	b.n	8004f32 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f52:	68e3      	ldr	r3, [r4, #12]
 8004f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f58:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f7ff ffa8 	bl	8004eb0 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8004f60:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8004f64:	b923      	cbnz	r3, 8004f70 <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f66:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f6c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004f6e:	e7e3      	b.n	8004f38 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f70:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f76:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004f78:	e7de      	b.n	8004f38 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f7a:	68a3      	ldr	r3, [r4, #8]
 8004f7c:	f043 0306 	orr.w	r3, r3, #6
 8004f80:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f82:	68a3      	ldr	r3, [r4, #8]
 8004f84:	f043 0320 	orr.w	r3, r3, #32
 8004f88:	60a3      	str	r3, [r4, #8]
 8004f8a:	e7d9      	b.n	8004f40 <USB_CoreInit+0x46>

08004f8c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8004f8c:	2a02      	cmp	r2, #2
 8004f8e:	d00a      	beq.n	8004fa6 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f90:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f92:	68c3      	ldr	r3, [r0, #12]
 8004f94:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8004f98:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f9a:	68c3      	ldr	r3, [r0, #12]
 8004f9c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8004fa0:	60c3      	str	r3, [r0, #12]
}
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004fa6:	4b23      	ldr	r3, [pc, #140]	@ (8005034 <USB_SetTurnaroundTime+0xa8>)
 8004fa8:	440b      	add	r3, r1
 8004faa:	4a23      	ldr	r2, [pc, #140]	@ (8005038 <USB_SetTurnaroundTime+0xac>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d92f      	bls.n	8005010 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004fb0:	4b22      	ldr	r3, [pc, #136]	@ (800503c <USB_SetTurnaroundTime+0xb0>)
 8004fb2:	440b      	add	r3, r1
 8004fb4:	4a22      	ldr	r2, [pc, #136]	@ (8005040 <USB_SetTurnaroundTime+0xb4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d92c      	bls.n	8005014 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004fba:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 8004fbe:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 8004fc2:	4a20      	ldr	r2, [pc, #128]	@ (8005044 <USB_SetTurnaroundTime+0xb8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d927      	bls.n	8005018 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004fc8:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 8004fcc:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8004fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8005048 <USB_SetTurnaroundTime+0xbc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d322      	bcc.n	800501c <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800504c <USB_SetTurnaroundTime+0xc0>)
 8004fd8:	440b      	add	r3, r1
 8004fda:	4a1d      	ldr	r2, [pc, #116]	@ (8005050 <USB_SetTurnaroundTime+0xc4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d91f      	bls.n	8005020 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8005054 <USB_SetTurnaroundTime+0xc8>)
 8004fe2:	440b      	add	r3, r1
 8004fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8005058 <USB_SetTurnaroundTime+0xcc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d31c      	bcc.n	8005024 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004fea:	4b1c      	ldr	r3, [pc, #112]	@ (800505c <USB_SetTurnaroundTime+0xd0>)
 8004fec:	440b      	add	r3, r1
 8004fee:	4a1c      	ldr	r2, [pc, #112]	@ (8005060 <USB_SetTurnaroundTime+0xd4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d319      	bcc.n	8005028 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ff4:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8004ff8:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 8004ffc:	4a19      	ldr	r2, [pc, #100]	@ (8005064 <USB_SetTurnaroundTime+0xd8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d314      	bcc.n	800502c <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005002:	4b19      	ldr	r3, [pc, #100]	@ (8005068 <USB_SetTurnaroundTime+0xdc>)
 8005004:	440b      	add	r3, r1
 8005006:	4a19      	ldr	r2, [pc, #100]	@ (800506c <USB_SetTurnaroundTime+0xe0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d211      	bcs.n	8005030 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 800500c:	2207      	movs	r2, #7
 800500e:	e7c0      	b.n	8004f92 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8005010:	220f      	movs	r2, #15
 8005012:	e7be      	b.n	8004f92 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8005014:	220e      	movs	r2, #14
 8005016:	e7bc      	b.n	8004f92 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8005018:	220d      	movs	r2, #13
 800501a:	e7ba      	b.n	8004f92 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800501c:	220c      	movs	r2, #12
 800501e:	e7b8      	b.n	8004f92 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8005020:	220b      	movs	r2, #11
 8005022:	e7b6      	b.n	8004f92 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8005024:	220a      	movs	r2, #10
 8005026:	e7b4      	b.n	8004f92 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8005028:	2209      	movs	r2, #9
 800502a:	e7b2      	b.n	8004f92 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800502c:	2208      	movs	r2, #8
 800502e:	e7b0      	b.n	8004f92 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8005030:	2206      	movs	r2, #6
 8005032:	e7ae      	b.n	8004f92 <USB_SetTurnaroundTime+0x6>
 8005034:	ff275340 	.word	0xff275340
 8005038:	000c34ff 	.word	0x000c34ff
 800503c:	ff1b1e40 	.word	0xff1b1e40
 8005040:	000f423f 	.word	0x000f423f
 8005044:	00124f7f 	.word	0x00124f7f
 8005048:	0013d620 	.word	0x0013d620
 800504c:	fee5b660 	.word	0xfee5b660
 8005050:	0016e35f 	.word	0x0016e35f
 8005054:	feced300 	.word	0xfeced300
 8005058:	001b7740 	.word	0x001b7740
 800505c:	feb35bc0 	.word	0xfeb35bc0
 8005060:	002191c0 	.word	0x002191c0
 8005064:	00387520 	.word	0x00387520
 8005068:	fe5954e0 	.word	0xfe5954e0
 800506c:	00419ce0 	.word	0x00419ce0

08005070 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005070:	6883      	ldr	r3, [r0, #8]
 8005072:	f043 0301 	orr.w	r3, r3, #1
 8005076:	6083      	str	r3, [r0, #8]
}
 8005078:	2000      	movs	r0, #0
 800507a:	4770      	bx	lr

0800507c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800507c:	6883      	ldr	r3, [r0, #8]
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	6083      	str	r3, [r0, #8]
}
 8005084:	2000      	movs	r0, #0
 8005086:	4770      	bx	lr

08005088 <USB_FlushTxFifo>:
{
 8005088:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	9301      	str	r3, [sp, #4]
    count++;
 800508e:	9b01      	ldr	r3, [sp, #4]
 8005090:	3301      	adds	r3, #1
 8005092:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8005094:	9b01      	ldr	r3, [sp, #4]
 8005096:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800509a:	d815      	bhi.n	80050c8 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800509c:	6903      	ldr	r3, [r0, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	daf5      	bge.n	800508e <USB_FlushTxFifo+0x6>
  count = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050a6:	0189      	lsls	r1, r1, #6
 80050a8:	f041 0120 	orr.w	r1, r1, #32
 80050ac:	6101      	str	r1, [r0, #16]
    count++;
 80050ae:	9b01      	ldr	r3, [sp, #4]
 80050b0:	3301      	adds	r3, #1
 80050b2:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80050b4:	9b01      	ldr	r3, [sp, #4]
 80050b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050ba:	d808      	bhi.n	80050ce <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050bc:	6903      	ldr	r3, [r0, #16]
 80050be:	f013 0f20 	tst.w	r3, #32
 80050c2:	d1f4      	bne.n	80050ae <USB_FlushTxFifo+0x26>
  return HAL_OK;
 80050c4:	2000      	movs	r0, #0
 80050c6:	e000      	b.n	80050ca <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 80050c8:	2003      	movs	r0, #3
}
 80050ca:	b002      	add	sp, #8
 80050cc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80050ce:	2003      	movs	r0, #3
 80050d0:	e7fb      	b.n	80050ca <USB_FlushTxFifo+0x42>

080050d2 <USB_FlushRxFifo>:
{
 80050d2:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	9301      	str	r3, [sp, #4]
    count++;
 80050d8:	9b01      	ldr	r3, [sp, #4]
 80050da:	3301      	adds	r3, #1
 80050dc:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80050de:	9b01      	ldr	r3, [sp, #4]
 80050e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050e4:	d813      	bhi.n	800510e <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050e6:	6903      	ldr	r3, [r0, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	daf5      	bge.n	80050d8 <USB_FlushRxFifo+0x6>
  count = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050f0:	2310      	movs	r3, #16
 80050f2:	6103      	str	r3, [r0, #16]
    count++;
 80050f4:	9b01      	ldr	r3, [sp, #4]
 80050f6:	3301      	adds	r3, #1
 80050f8:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80050fa:	9b01      	ldr	r3, [sp, #4]
 80050fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005100:	d808      	bhi.n	8005114 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005102:	6903      	ldr	r3, [r0, #16]
 8005104:	f013 0f10 	tst.w	r3, #16
 8005108:	d1f4      	bne.n	80050f4 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 800510a:	2000      	movs	r0, #0
 800510c:	e000      	b.n	8005110 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 800510e:	2003      	movs	r0, #3
}
 8005110:	b002      	add	sp, #8
 8005112:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005114:	2003      	movs	r0, #3
 8005116:	e7fb      	b.n	8005110 <USB_FlushRxFifo+0x3e>

08005118 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8005118:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800511c:	4319      	orrs	r1, r3
 800511e:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8005122:	2000      	movs	r0, #0
 8005124:	4770      	bx	lr
	...

08005128 <USB_DevInit>:
{
 8005128:	b084      	sub	sp, #16
 800512a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512c:	4604      	mov	r4, r0
 800512e:	a807      	add	r0, sp, #28
 8005130:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8005134:	2300      	movs	r3, #0
 8005136:	e006      	b.n	8005146 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8005138:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800513c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005140:	2100      	movs	r1, #0
 8005142:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8005144:	3301      	adds	r3, #1
 8005146:	2b0e      	cmp	r3, #14
 8005148:	d9f6      	bls.n	8005138 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 800514a:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 800514e:	bb06      	cbnz	r6, 8005192 <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005150:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8005154:	f043 0302 	orr.w	r3, r3, #2
 8005158:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800515c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800515e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005162:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005164:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005166:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800516a:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800516c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800516e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005172:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800517a:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800517e:	2b01      	cmp	r3, #1
 8005180:	d115      	bne.n	80051ae <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 8005182:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8005186:	b96b      	cbnz	r3, 80051a4 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005188:	2100      	movs	r1, #0
 800518a:	4620      	mov	r0, r4
 800518c:	f7ff ffc4 	bl	8005118 <USB_SetDevSpeed>
 8005190:	e011      	b.n	80051b6 <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005192:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005194:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005198:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800519a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800519c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80051a2:	e7e7      	b.n	8005174 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051a4:	2101      	movs	r1, #1
 80051a6:	4620      	mov	r0, r4
 80051a8:	f7ff ffb6 	bl	8005118 <USB_SetDevSpeed>
 80051ac:	e003      	b.n	80051b6 <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051ae:	2103      	movs	r1, #3
 80051b0:	4620      	mov	r0, r4
 80051b2:	f7ff ffb1 	bl	8005118 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051b6:	2110      	movs	r1, #16
 80051b8:	4620      	mov	r0, r4
 80051ba:	f7ff ff65 	bl	8005088 <USB_FlushTxFifo>
 80051be:	4605      	mov	r5, r0
 80051c0:	b100      	cbz	r0, 80051c4 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 80051c2:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051c4:	4620      	mov	r0, r4
 80051c6:	f7ff ff84 	bl	80050d2 <USB_FlushRxFifo>
 80051ca:	b100      	cbz	r0, 80051ce <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 80051cc:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80051ce:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 80051d2:	2300      	movs	r3, #0
 80051d4:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051d8:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051dc:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051e0:	e00d      	b.n	80051fe <USB_DevInit+0xd6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80051e6:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 80051ea:	e002      	b.n	80051f2 <USB_DevInit+0xca>
      USBx_INEP(i)->DIEPCTL = 0U;
 80051ec:	2000      	movs	r0, #0
 80051ee:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051f2:	2200      	movs	r2, #0
 80051f4:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051f6:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 80051fa:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051fc:	3301      	adds	r3, #1
 80051fe:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8005202:	4299      	cmp	r1, r3
 8005204:	d90e      	bls.n	8005224 <USB_DevInit+0xfc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005206:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800520a:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 800520e:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 8005212:	2800      	cmp	r0, #0
 8005214:	daea      	bge.n	80051ec <USB_DevInit+0xc4>
      if (i == 0U)
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e3      	bne.n	80051e2 <USB_DevInit+0xba>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800521a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800521e:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8005222:	e7e6      	b.n	80051f2 <USB_DevInit+0xca>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005224:	2300      	movs	r3, #0
 8005226:	e00a      	b.n	800523e <USB_DevInit+0x116>
      if (i == 0U)
 8005228:	b1bb      	cbz	r3, 800525a <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800522a:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 800522e:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005232:	2200      	movs	r2, #0
 8005234:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005236:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 800523a:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800523c:	3301      	adds	r3, #1
 800523e:	4299      	cmp	r1, r3
 8005240:	d910      	bls.n	8005264 <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005242:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8005246:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 800524a:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 800524e:	2f00      	cmp	r7, #0
 8005250:	dbea      	blt.n	8005228 <USB_DevInit+0x100>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005252:	2700      	movs	r7, #0
 8005254:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8005258:	e7eb      	b.n	8005232 <USB_DevInit+0x10a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800525a:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 800525e:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8005262:	e7e6      	b.n	8005232 <USB_DevInit+0x10a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005264:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8005268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800526c:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005274:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8005278:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800527a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800527e:	b91b      	cbnz	r3, 8005288 <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005280:	69a3      	ldr	r3, [r4, #24]
 8005282:	f043 0310 	orr.w	r3, r3, #16
 8005286:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005288:	69a2      	ldr	r2, [r4, #24]
 800528a:	4b0c      	ldr	r3, [pc, #48]	@ (80052bc <USB_DevInit+0x194>)
 800528c:	4313      	orrs	r3, r2
 800528e:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8005290:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8005294:	b11b      	cbz	r3, 800529e <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005296:	69a3      	ldr	r3, [r4, #24]
 8005298:	f043 0308 	orr.w	r3, r3, #8
 800529c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800529e:	2e01      	cmp	r6, #1
 80052a0:	d004      	beq.n	80052ac <USB_DevInit+0x184>
}
 80052a2:	4628      	mov	r0, r5
 80052a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052a8:	b004      	add	sp, #16
 80052aa:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052ac:	69a3      	ldr	r3, [r4, #24]
 80052ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052b2:	f043 0304 	orr.w	r3, r3, #4
 80052b6:	61a3      	str	r3, [r4, #24]
 80052b8:	e7f3      	b.n	80052a2 <USB_DevInit+0x17a>
 80052ba:	bf00      	nop
 80052bc:	803c3800 	.word	0x803c3800

080052c0 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052c0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80052c4:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d004      	beq.n	80052d6 <USB_GetDevSpeed+0x16>
 80052cc:	2b06      	cmp	r3, #6
 80052ce:	d004      	beq.n	80052da <USB_GetDevSpeed+0x1a>
 80052d0:	b92b      	cbnz	r3, 80052de <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052d2:	2000      	movs	r0, #0
 80052d4:	4770      	bx	lr
 80052d6:	2002      	movs	r0, #2
 80052d8:	4770      	bx	lr
 80052da:	2002      	movs	r0, #2
 80052dc:	4770      	bx	lr
 80052de:	200f      	movs	r0, #15
}
 80052e0:	4770      	bx	lr

080052e2 <USB_ActivateEndpoint>:
{
 80052e2:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80052e4:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 80052e8:	784b      	ldrb	r3, [r1, #1]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d023      	beq.n	8005336 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052ee:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 80052f2:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 80052f6:	f00c 040f 	and.w	r4, ip, #15
 80052fa:	2201      	movs	r2, #1
 80052fc:	40a2      	lsls	r2, r4
 80052fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005302:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005306:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800530a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800530e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8005312:	d10e      	bne.n	8005332 <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005314:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005318:	688a      	ldr	r2, [r1, #8]
 800531a:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800531e:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005320:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8005324:	4313      	orrs	r3, r2
 8005326:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800532a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800532e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8005332:	2000      	movs	r0, #0
 8005334:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005336:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800533a:	f00c 0e0f 	and.w	lr, ip, #15
 800533e:	fa03 f30e 	lsl.w	r3, r3, lr
 8005342:	b29b      	uxth	r3, r3
 8005344:	4313      	orrs	r3, r2
 8005346:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800534a:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800534e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005352:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8005356:	d1ec      	bne.n	8005332 <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005358:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800535c:	688a      	ldr	r2, [r1, #8]
 800535e:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005362:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005364:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005368:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800536c:	4313      	orrs	r3, r2
 800536e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005376:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 800537a:	e7da      	b.n	8005332 <USB_ActivateEndpoint+0x50>

0800537c <USB_DeactivateEndpoint>:
{
 800537c:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800537e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005380:	784a      	ldrb	r2, [r1, #1]
 8005382:	2a01      	cmp	r2, #1
 8005384:	d026      	beq.n	80053d4 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005386:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800538a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800538e:	2a00      	cmp	r2, #0
 8005390:	db52      	blt.n	8005438 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005392:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8005396:	780a      	ldrb	r2, [r1, #0]
 8005398:	f002 020f 	and.w	r2, r2, #15
 800539c:	f04f 0c01 	mov.w	ip, #1
 80053a0:	fa0c f202 	lsl.w	r2, ip, r2
 80053a4:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 80053a8:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053ac:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80053b0:	7809      	ldrb	r1, [r1, #0]
 80053b2:	f001 010f 	and.w	r1, r1, #15
 80053b6:	fa0c fc01 	lsl.w	ip, ip, r1
 80053ba:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 80053be:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80053c2:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 80053c6:	4a23      	ldr	r2, [pc, #140]	@ (8005454 <USB_DeactivateEndpoint+0xd8>)
 80053c8:	400a      	ands	r2, r1
 80053ca:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 80053ce:	2000      	movs	r0, #0
 80053d0:	bc30      	pop	{r4, r5}
 80053d2:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053d4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80053d8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80053dc:	2a00      	cmp	r2, #0
 80053de:	db1e      	blt.n	800541e <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053e0:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 80053e4:	780a      	ldrb	r2, [r1, #0]
 80053e6:	f002 020f 	and.w	r2, r2, #15
 80053ea:	2401      	movs	r4, #1
 80053ec:	fa04 f202 	lsl.w	r2, r4, r2
 80053f0:	b292      	uxth	r2, r2
 80053f2:	ea25 0202 	bic.w	r2, r5, r2
 80053f6:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053fa:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80053fe:	7809      	ldrb	r1, [r1, #0]
 8005400:	f001 010f 	and.w	r1, r1, #15
 8005404:	408c      	lsls	r4, r1
 8005406:	b2a4      	uxth	r4, r4
 8005408:	ea22 0204 	bic.w	r2, r2, r4
 800540c:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005410:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8005414:	4a10      	ldr	r2, [pc, #64]	@ (8005458 <USB_DeactivateEndpoint+0xdc>)
 8005416:	400a      	ands	r2, r1
 8005418:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 800541c:	e7d7      	b.n	80053ce <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800541e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8005422:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8005426:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800542a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800542e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005432:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8005436:	e7d3      	b.n	80053e0 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005438:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800543c:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8005440:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005444:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8005448:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800544c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8005450:	e79f      	b.n	8005392 <USB_DeactivateEndpoint+0x16>
 8005452:	bf00      	nop
 8005454:	eff37800 	.word	0xeff37800
 8005458:	ec337800 	.word	0xec337800

0800545c <USB_EPStopXfer>:
{
 800545c:	b410      	push	{r4}
 800545e:	b083      	sub	sp, #12
 8005460:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8005466:	7848      	ldrb	r0, [r1, #1]
 8005468:	2801      	cmp	r0, #1
 800546a:	d00b      	beq.n	8005484 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800546c:	780b      	ldrb	r3, [r1, #0]
 800546e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8005472:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8005476:	2800      	cmp	r0, #0
 8005478:	db2d      	blt.n	80054d6 <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 800547a:	2000      	movs	r0, #0
}
 800547c:	b003      	add	sp, #12
 800547e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005482:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005484:	780b      	ldrb	r3, [r1, #0]
 8005486:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800548a:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800548e:	2c00      	cmp	r4, #0
 8005490:	db01      	blt.n	8005496 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 8005492:	2000      	movs	r0, #0
 8005494:	e7f2      	b.n	800547c <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005496:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800549a:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 800549e:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80054a2:	780b      	ldrb	r3, [r1, #0]
 80054a4:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80054a8:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80054ac:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 80054b0:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 80054b4:	9b01      	ldr	r3, [sp, #4]
 80054b6:	3301      	adds	r3, #1
 80054b8:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80054ba:	9c01      	ldr	r4, [sp, #4]
 80054bc:	f242 7310 	movw	r3, #10000	@ 0x2710
 80054c0:	429c      	cmp	r4, r3
 80054c2:	d8db      	bhi.n	800547c <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80054c4:	780b      	ldrb	r3, [r1, #0]
 80054c6:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80054ca:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	dbf0      	blt.n	80054b4 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 80054d2:	2000      	movs	r0, #0
 80054d4:	e7d2      	b.n	800547c <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80054d6:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80054da:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 80054de:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80054e2:	780b      	ldrb	r3, [r1, #0]
 80054e4:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80054e8:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80054ec:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80054f0:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 80054f4:	9b01      	ldr	r3, [sp, #4]
 80054f6:	3301      	adds	r3, #1
 80054f8:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80054fa:	9801      	ldr	r0, [sp, #4]
 80054fc:	f242 7310 	movw	r3, #10000	@ 0x2710
 8005500:	4298      	cmp	r0, r3
 8005502:	d808      	bhi.n	8005516 <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005504:	780b      	ldrb	r3, [r1, #0]
 8005506:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800550a:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800550e:	2b00      	cmp	r3, #0
 8005510:	dbf0      	blt.n	80054f4 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 8005512:	2000      	movs	r0, #0
 8005514:	e7b2      	b.n	800547c <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8005516:	2001      	movs	r0, #1
 8005518:	e7b0      	b.n	800547c <USB_EPStopXfer+0x20>

0800551a <USB_WritePacket>:
{
 800551a:	b510      	push	{r4, lr}
 800551c:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8005520:	b984      	cbnz	r4, 8005544 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8005522:	3303      	adds	r3, #3
 8005524:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8005528:	f04f 0c00 	mov.w	ip, #0
 800552c:	e008      	b.n	8005540 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800552e:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8005532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005536:	f851 4b04 	ldr.w	r4, [r1], #4
 800553a:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 800553c:	f10c 0c01 	add.w	ip, ip, #1
 8005540:	45f4      	cmp	ip, lr
 8005542:	d3f4      	bcc.n	800552e <USB_WritePacket+0x14>
}
 8005544:	2000      	movs	r0, #0
 8005546:	bd10      	pop	{r4, pc}

08005548 <USB_EPStartXfer>:
{
 8005548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800554a:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 800554c:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800554e:	784b      	ldrb	r3, [r1, #1]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d02d      	beq.n	80055b0 <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005554:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8005558:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 800555c:	691d      	ldr	r5, [r3, #16]
 800555e:	f36f 0512 	bfc	r5, #0, #19
 8005562:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005564:	691d      	ldr	r5, [r3, #16]
 8005566:	f36f 45dc 	bfc	r5, #19, #10
 800556a:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 800556c:	2c00      	cmp	r4, #0
 800556e:	f040 80ce 	bne.w	800570e <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 8005572:	690c      	ldr	r4, [r1, #16]
 8005574:	b10c      	cbz	r4, 800557a <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8005576:	688c      	ldr	r4, [r1, #8]
 8005578:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 800557a:	688c      	ldr	r4, [r1, #8]
 800557c:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800557e:	691d      	ldr	r5, [r3, #16]
 8005580:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8005584:	432c      	orrs	r4, r5
 8005586:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005588:	691c      	ldr	r4, [r3, #16]
 800558a:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800558e:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8005590:	2a01      	cmp	r2, #1
 8005592:	f000 80df 	beq.w	8005754 <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 8005596:	790b      	ldrb	r3, [r1, #4]
 8005598:	2b01      	cmp	r3, #1
 800559a:	f000 80e1 	beq.w	8005760 <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800559e:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 80055a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80055a6:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 80055aa:	2000      	movs	r0, #0
 80055ac:	b003      	add	sp, #12
 80055ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 80055b0:	690b      	ldr	r3, [r1, #16]
 80055b2:	bb73      	cbnz	r3, 8005612 <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055b4:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80055b8:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 80055bc:	f36f 45dc 	bfc	r5, #19, #10
 80055c0:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055c4:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 80055c8:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 80055cc:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055d0:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 80055d4:	f36f 0512 	bfc	r5, #0, #19
 80055d8:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 80055dc:	2a01      	cmp	r2, #1
 80055de:	d054      	beq.n	800568a <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055e0:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80055e4:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80055e8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80055ec:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 80055f0:	790b      	ldrb	r3, [r1, #4]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d072      	beq.n	80056dc <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 80055f6:	690b      	ldr	r3, [r1, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0d6      	beq.n	80055aa <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055fc:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8005600:	7809      	ldrb	r1, [r1, #0]
 8005602:	f001 010f 	and.w	r1, r1, #15
 8005606:	2201      	movs	r2, #1
 8005608:	408a      	lsls	r2, r1
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8005610:	e7cb      	b.n	80055aa <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005612:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8005616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800561a:	691d      	ldr	r5, [r3, #16]
 800561c:	f36f 0512 	bfc	r5, #0, #19
 8005620:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005622:	691d      	ldr	r5, [r3, #16]
 8005624:	f36f 45dc 	bfc	r5, #19, #10
 8005628:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 800562a:	b984      	cbnz	r4, 800564e <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 800562c:	690e      	ldr	r6, [r1, #16]
 800562e:	688d      	ldr	r5, [r1, #8]
 8005630:	42ae      	cmp	r6, r5
 8005632:	d900      	bls.n	8005636 <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 8005634:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005636:	691d      	ldr	r5, [r3, #16]
 8005638:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 800563c:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800563e:	691d      	ldr	r5, [r3, #16]
 8005640:	690e      	ldr	r6, [r1, #16]
 8005642:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8005646:	ea45 050c 	orr.w	r5, r5, ip
 800564a:	611d      	str	r5, [r3, #16]
 800564c:	e7c6      	b.n	80055dc <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800564e:	690d      	ldr	r5, [r1, #16]
 8005650:	688e      	ldr	r6, [r1, #8]
 8005652:	4435      	add	r5, r6
 8005654:	3d01      	subs	r5, #1
 8005656:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800565a:	691e      	ldr	r6, [r3, #16]
 800565c:	fa1f fc85 	uxth.w	ip, r5
 8005660:	4f49      	ldr	r7, [pc, #292]	@ (8005788 <USB_EPStartXfer+0x240>)
 8005662:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8005666:	4335      	orrs	r5, r6
 8005668:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 800566a:	790d      	ldrb	r5, [r1, #4]
 800566c:	2d01      	cmp	r5, #1
 800566e:	d1e6      	bne.n	800563e <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005670:	691d      	ldr	r5, [r3, #16]
 8005672:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8005676:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005678:	691d      	ldr	r5, [r3, #16]
 800567a:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 800567e:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 8005682:	ea45 050c 	orr.w	r5, r5, ip
 8005686:	611d      	str	r5, [r3, #16]
 8005688:	e7d9      	b.n	800563e <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 800568a:	69cb      	ldr	r3, [r1, #28]
 800568c:	b11b      	cbz	r3, 8005696 <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800568e:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8005692:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8005696:	790b      	ldrb	r3, [r1, #4]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d008      	beq.n	80056ae <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800569c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80056a0:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80056a4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056a8:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 80056ac:	e77d      	b.n	80055aa <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056ae:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80056b2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80056b6:	d108      	bne.n	80056ca <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056b8:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 80056bc:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 80056c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80056c4:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 80056c8:	e7e8      	b.n	800569c <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056ca:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 80056ce:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 80056d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056d6:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 80056da:	e7df      	b.n	800569c <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056dc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80056e0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80056e4:	d10c      	bne.n	8005700 <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056e6:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80056ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80056ee:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80056f2:	9200      	str	r2, [sp, #0]
 80056f4:	8a0b      	ldrh	r3, [r1, #16]
 80056f6:	780a      	ldrb	r2, [r1, #0]
 80056f8:	68c9      	ldr	r1, [r1, #12]
 80056fa:	f7ff ff0e 	bl	800551a <USB_WritePacket>
 80056fe:	e754      	b.n	80055aa <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005700:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8005704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005708:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 800570c:	e7f1      	b.n	80056f2 <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 800570e:	690c      	ldr	r4, [r1, #16]
 8005710:	b954      	cbnz	r4, 8005728 <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005712:	691c      	ldr	r4, [r3, #16]
 8005714:	688d      	ldr	r5, [r1, #8]
 8005716:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800571a:	432c      	orrs	r4, r5
 800571c:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800571e:	691c      	ldr	r4, [r3, #16]
 8005720:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8005724:	611c      	str	r4, [r3, #16]
 8005726:	e733      	b.n	8005590 <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005728:	688d      	ldr	r5, [r1, #8]
 800572a:	442c      	add	r4, r5
 800572c:	3c01      	subs	r4, #1
 800572e:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005732:	b2a4      	uxth	r4, r4
 8005734:	fb04 f505 	mul.w	r5, r4, r5
 8005738:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800573a:	691d      	ldr	r5, [r3, #16]
 800573c:	4e12      	ldr	r6, [pc, #72]	@ (8005788 <USB_EPStartXfer+0x240>)
 800573e:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8005742:	432c      	orrs	r4, r5
 8005744:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005746:	691c      	ldr	r4, [r3, #16]
 8005748:	6a0d      	ldr	r5, [r1, #32]
 800574a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800574e:	432c      	orrs	r4, r5
 8005750:	611c      	str	r4, [r3, #16]
 8005752:	e71d      	b.n	8005590 <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 8005754:	68ca      	ldr	r2, [r1, #12]
 8005756:	2a00      	cmp	r2, #0
 8005758:	f43f af1d 	beq.w	8005596 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800575c:	615a      	str	r2, [r3, #20]
 800575e:	e71a      	b.n	8005596 <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005760:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8005764:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005768:	d106      	bne.n	8005778 <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800576a:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800576e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005772:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8005776:	e712      	b.n	800559e <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005778:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800577c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005780:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8005784:	e70b      	b.n	800559e <USB_EPStartXfer+0x56>
 8005786:	bf00      	nop
 8005788:	1ff80000 	.word	0x1ff80000

0800578c <USB_ReadPacket>:
{
 800578c:	b510      	push	{r4, lr}
 800578e:	4684      	mov	ip, r0
 8005790:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8005792:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8005796:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 800579a:	2300      	movs	r3, #0
 800579c:	e005      	b.n	80057aa <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800579e:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 80057a2:	6809      	ldr	r1, [r1, #0]
 80057a4:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 80057a8:	3301      	adds	r3, #1
 80057aa:	4573      	cmp	r3, lr
 80057ac:	d3f7      	bcc.n	800579e <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 80057ae:	b17a      	cbz	r2, 80057d0 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057b0:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 80057b4:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 80057b8:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057ba:	b2cb      	uxtb	r3, r1
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	fa24 f303 	lsr.w	r3, r4, r3
 80057c2:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 80057c6:	3101      	adds	r1, #1
      remaining_bytes--;
 80057c8:	3a01      	subs	r2, #1
 80057ca:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 80057cc:	2a00      	cmp	r2, #0
 80057ce:	d1f4      	bne.n	80057ba <USB_ReadPacket+0x2e>
}
 80057d0:	bd10      	pop	{r4, pc}

080057d2 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80057d2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80057d4:	784a      	ldrb	r2, [r1, #1]
 80057d6:	2a01      	cmp	r2, #1
 80057d8:	d014      	beq.n	8005804 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057da:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80057de:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 80057e2:	2a00      	cmp	r2, #0
 80057e4:	db06      	blt.n	80057f4 <USB_EPSetStall+0x22>
 80057e6:	b12b      	cbz	r3, 80057f4 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80057e8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80057ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057f0:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80057f4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80057f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057fc:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8005800:	2000      	movs	r0, #0
 8005802:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005804:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005808:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 800580c:	2a00      	cmp	r2, #0
 800580e:	db06      	blt.n	800581e <USB_EPSetStall+0x4c>
 8005810:	b12b      	cbz	r3, 800581e <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005812:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005816:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800581a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800581e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005822:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005826:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 800582a:	e7e9      	b.n	8005800 <USB_EPSetStall+0x2e>

0800582c <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800582c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800582e:	784a      	ldrb	r2, [r1, #1]
 8005830:	2a01      	cmp	r2, #1
 8005832:	d00e      	beq.n	8005852 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005834:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005838:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800583c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005840:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005844:	790b      	ldrb	r3, [r1, #4]
 8005846:	3b02      	subs	r3, #2
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b01      	cmp	r3, #1
 800584c:	d915      	bls.n	800587a <USB_EPClearStall+0x4e>
}
 800584e:	2000      	movs	r0, #0
 8005850:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005852:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005856:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800585a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800585e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005862:	790b      	ldrb	r3, [r1, #4]
 8005864:	3b02      	subs	r3, #2
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	d8f0      	bhi.n	800584e <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800586c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005874:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8005878:	e7e9      	b.n	800584e <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800587a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800587e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005882:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8005886:	e7e2      	b.n	800584e <USB_EPClearStall+0x22>

08005888 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005888:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800588c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005890:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005894:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8005898:	0109      	lsls	r1, r1, #4
 800589a:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 800589e:	430b      	orrs	r3, r1
 80058a0:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 80058a4:	2000      	movs	r0, #0
 80058a6:	4770      	bx	lr

080058a8 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058a8:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 80058ac:	f023 0303 	bic.w	r3, r3, #3
 80058b0:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80058b4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 80058b8:	f023 0302 	bic.w	r3, r3, #2
 80058bc:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 80058c0:	2000      	movs	r0, #0
 80058c2:	4770      	bx	lr

080058c4 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058c4:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 80058c8:	f023 0303 	bic.w	r3, r3, #3
 80058cc:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058d0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 80058d4:	f043 0302 	orr.w	r3, r3, #2
 80058d8:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 80058dc:	2000      	movs	r0, #0
 80058de:	4770      	bx	lr

080058e0 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80058e0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80058e2:	6980      	ldr	r0, [r0, #24]
}
 80058e4:	4010      	ands	r0, r2
 80058e6:	4770      	bx	lr

080058e8 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80058e8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 80058ec:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058f0:	69c0      	ldr	r0, [r0, #28]
 80058f2:	4018      	ands	r0, r3
}
 80058f4:	0c00      	lsrs	r0, r0, #16
 80058f6:	4770      	bx	lr

080058f8 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80058f8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 80058fc:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005900:	69c0      	ldr	r0, [r0, #28]
 8005902:	4018      	ands	r0, r3
}
 8005904:	b280      	uxth	r0, r0
 8005906:	4770      	bx	lr

08005908 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005908:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800590c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005910:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8005914:	6940      	ldr	r0, [r0, #20]
}
 8005916:	4010      	ands	r0, r2
 8005918:	4770      	bx	lr

0800591a <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800591a:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800591e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005922:	f001 0c0f 	and.w	ip, r1, #15
 8005926:	fa23 f30c 	lsr.w	r3, r3, ip
 800592a:	01db      	lsls	r3, r3, #7
 800592c:	b2db      	uxtb	r3, r3
 800592e:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005930:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8005934:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8005938:	6880      	ldr	r0, [r0, #8]
}
 800593a:	4018      	ands	r0, r3
 800593c:	4770      	bx	lr

0800593e <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800593e:	6940      	ldr	r0, [r0, #20]
}
 8005940:	f000 0001 	and.w	r0, r0, #1
 8005944:	4770      	bx	lr

08005946 <USB_SetCurrentMode>:
{
 8005946:	b538      	push	{r3, r4, r5, lr}
 8005948:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800594a:	68c3      	ldr	r3, [r0, #12]
 800594c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005950:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8005952:	2901      	cmp	r1, #1
 8005954:	d013      	beq.n	800597e <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8005956:	bb19      	cbnz	r1, 80059a0 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005958:	68c3      	ldr	r3, [r0, #12]
 800595a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800595e:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8005960:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8005962:	200a      	movs	r0, #10
 8005964:	f7fc fd8a 	bl	800247c <HAL_Delay>
      ms += 10U;
 8005968:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800596a:	4628      	mov	r0, r5
 800596c:	f7ff ffe7 	bl	800593e <USB_GetMode>
 8005970:	b108      	cbz	r0, 8005976 <USB_SetCurrentMode+0x30>
 8005972:	2cc7      	cmp	r4, #199	@ 0xc7
 8005974:	d9f5      	bls.n	8005962 <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005976:	2cc8      	cmp	r4, #200	@ 0xc8
 8005978:	d014      	beq.n	80059a4 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 800597a:	2000      	movs	r0, #0
}
 800597c:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800597e:	68c3      	ldr	r3, [r0, #12]
 8005980:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005984:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8005986:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8005988:	200a      	movs	r0, #10
 800598a:	f7fc fd77 	bl	800247c <HAL_Delay>
      ms += 10U;
 800598e:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005990:	4628      	mov	r0, r5
 8005992:	f7ff ffd4 	bl	800593e <USB_GetMode>
 8005996:	2801      	cmp	r0, #1
 8005998:	d0ed      	beq.n	8005976 <USB_SetCurrentMode+0x30>
 800599a:	2cc7      	cmp	r4, #199	@ 0xc7
 800599c:	d9f4      	bls.n	8005988 <USB_SetCurrentMode+0x42>
 800599e:	e7ea      	b.n	8005976 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 80059a0:	2001      	movs	r0, #1
 80059a2:	e7eb      	b.n	800597c <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 80059a4:	2001      	movs	r0, #1
 80059a6:	e7e9      	b.n	800597c <USB_SetCurrentMode+0x36>

080059a8 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80059a8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80059ac:	f36f 030a 	bfc	r3, #0, #11
 80059b0:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80059b4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 80059b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059bc:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 80059c0:	2000      	movs	r0, #0
 80059c2:	4770      	bx	lr

080059c4 <USB_EP0_OutStart>:
{
 80059c4:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80059c6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80059c8:	4b15      	ldr	r3, [pc, #84]	@ (8005a20 <USB_EP0_OutStart+0x5c>)
 80059ca:	429c      	cmp	r4, r3
 80059cc:	d903      	bls.n	80059d6 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059ce:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	db16      	blt.n	8005a04 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80059d6:	2400      	movs	r4, #0
 80059d8:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059dc:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 80059e0:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 80059e4:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80059e8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 80059ec:	f044 0418 	orr.w	r4, r4, #24
 80059f0:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80059f4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 80059f8:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 80059fc:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8005a00:	2901      	cmp	r1, #1
 8005a02:	d003      	beq.n	8005a0c <USB_EP0_OutStart+0x48>
}
 8005a04:	2000      	movs	r0, #0
 8005a06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a0a:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a0c:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a10:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005a14:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005a18:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8005a1c:	e7f2      	b.n	8005a04 <USB_EP0_OutStart+0x40>
 8005a1e:	bf00      	nop
 8005a20:	4f54300a 	.word	0x4f54300a

08005a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a24:	b510      	push	{r4, lr}
 8005a26:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a28:	4a0c      	ldr	r2, [pc, #48]	@ (8005a5c <_sbrk+0x38>)
 8005a2a:	490d      	ldr	r1, [pc, #52]	@ (8005a60 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a2c:	480d      	ldr	r0, [pc, #52]	@ (8005a64 <_sbrk+0x40>)
 8005a2e:	6800      	ldr	r0, [r0, #0]
 8005a30:	b140      	cbz	r0, 8005a44 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a32:	480c      	ldr	r0, [pc, #48]	@ (8005a64 <_sbrk+0x40>)
 8005a34:	6800      	ldr	r0, [r0, #0]
 8005a36:	4403      	add	r3, r0
 8005a38:	1a52      	subs	r2, r2, r1
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d806      	bhi.n	8005a4c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005a3e:	4a09      	ldr	r2, [pc, #36]	@ (8005a64 <_sbrk+0x40>)
 8005a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8005a42:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8005a44:	4807      	ldr	r0, [pc, #28]	@ (8005a64 <_sbrk+0x40>)
 8005a46:	4c08      	ldr	r4, [pc, #32]	@ (8005a68 <_sbrk+0x44>)
 8005a48:	6004      	str	r4, [r0, #0]
 8005a4a:	e7f2      	b.n	8005a32 <_sbrk+0xe>
    errno = ENOMEM;
 8005a4c:	f003 f8e4 	bl	8008c18 <__errno>
 8005a50:	230c      	movs	r3, #12
 8005a52:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295
 8005a58:	e7f3      	b.n	8005a42 <_sbrk+0x1e>
 8005a5a:	bf00      	nop
 8005a5c:	20010000 	.word	0x20010000
 8005a60:	00000400 	.word	0x00000400
 8005a64:	200054d8 	.word	0x200054d8
 8005a68:	200072b8 	.word	0x200072b8

08005a6c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a6c:	4a03      	ldr	r2, [pc, #12]	@ (8005a7c <SystemInit+0x10>)
 8005a6e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005a72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a76:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a7a:	4770      	bx	lr
 8005a7c:	e000ed00 	.word	0xe000ed00

08005a80 <table_2d_get_value>:
#include "tables.h"
#include "error_handling.h"
#include "utils.h"

float table_2d_get_value(table_2d_t *table, float x, float y)
{
 8005a80:	b500      	push	{lr}
    uint8_t num_x_bins = sizeof(table->x_bins) / sizeof(table->x_bins[0]);
    uint8_t num_y_bins = sizeof(table->y_bins) / sizeof(table->y_bins[0]);
    x = CLAMP(x, table->x_bins[0], table->x_bins[num_x_bins - 1]);
 8005a82:	f500 6380 	add.w	r3, r0, #1024	@ 0x400
 8005a86:	edd3 6a00 	vldr	s13, [r3]
 8005a8a:	eef4 6ac0 	vcmpe.f32	s13, s0
 8005a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a92:	dc0a      	bgt.n	8005aaa <table_2d_get_value+0x2a>
 8005a94:	f200 433c 	addw	r3, r0, #1084	@ 0x43c
 8005a98:	edd3 6a00 	vldr	s13, [r3]
 8005a9c:	eef4 6ac0 	vcmpe.f32	s13, s0
 8005aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa4:	d401      	bmi.n	8005aaa <table_2d_get_value+0x2a>
 8005aa6:	eef0 6a40 	vmov.f32	s13, s0
    y = CLAMP(y, table->y_bins[0], table->y_bins[num_y_bins - 1]);
 8005aaa:	f500 6388 	add.w	r3, r0, #1088	@ 0x440
 8005aae:	ed93 7a00 	vldr	s14, [r3]
 8005ab2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8005ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aba:	dc0a      	bgt.n	8005ad2 <table_2d_get_value+0x52>
 8005abc:	f200 437c 	addw	r3, r0, #1148	@ 0x47c
 8005ac0:	ed93 7a00 	vldr	s14, [r3]
 8005ac4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8005ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005acc:	d401      	bmi.n	8005ad2 <table_2d_get_value+0x52>
 8005ace:	eeb0 7a60 	vmov.f32	s14, s1

    // Find x_bin (lower index)
    uint8_t x_bin = 0;
 8005ad2:	2300      	movs	r3, #0
    while (x_bin < num_x_bins - 1 && x >= table->x_bins[x_bin + 1])
 8005ad4:	e001      	b.n	8005ada <table_2d_get_value+0x5a>
    {
        x_bin++;
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	b2db      	uxtb	r3, r3
    while (x_bin < num_x_bins - 1 && x >= table->x_bins[x_bin + 1])
 8005ada:	2b0e      	cmp	r3, #14
 8005adc:	d80a      	bhi.n	8005af4 <table_2d_get_value+0x74>
 8005ade:	f203 1201 	addw	r2, r3, #257	@ 0x101
 8005ae2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005ae6:	edd2 7a00 	vldr	s15, [r2]
 8005aea:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af2:	d9f0      	bls.n	8005ad6 <table_2d_get_value+0x56>
    }
    uint8_t x_bin_next = (x_bin < num_x_bins - 1) ? x_bin + 1 : x_bin;
 8005af4:	2b0e      	cmp	r3, #14
 8005af6:	d814      	bhi.n	8005b22 <table_2d_get_value+0xa2>
 8005af8:	f103 0c01 	add.w	ip, r3, #1
 8005afc:	fa5f fc8c 	uxtb.w	ip, ip

    // Find y_bin (lower index)
    uint8_t y_bin = 0;
 8005b00:	2200      	movs	r2, #0
    while (y_bin < num_y_bins - 1 && y >= table->y_bins[y_bin + 1])
 8005b02:	2a0e      	cmp	r2, #14
 8005b04:	d80f      	bhi.n	8005b26 <table_2d_get_value+0xa6>
 8005b06:	f202 1111 	addw	r1, r2, #273	@ 0x111
 8005b0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005b0e:	edd1 7a00 	vldr	s15, [r1]
 8005b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b1a:	d804      	bhi.n	8005b26 <table_2d_get_value+0xa6>
    {
        y_bin++;
 8005b1c:	3201      	adds	r2, #1
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	e7ef      	b.n	8005b02 <table_2d_get_value+0x82>
    uint8_t x_bin_next = (x_bin < num_x_bins - 1) ? x_bin + 1 : x_bin;
 8005b22:	469c      	mov	ip, r3
 8005b24:	e7ec      	b.n	8005b00 <table_2d_get_value+0x80>
    }
    uint8_t y_bin_next = (y_bin < num_y_bins - 1) ? y_bin + 1 : y_bin;
 8005b26:	2a0e      	cmp	r2, #14
 8005b28:	d802      	bhi.n	8005b30 <table_2d_get_value+0xb0>
 8005b2a:	1c51      	adds	r1, r2, #1
 8005b2c:	b2c9      	uxtb	r1, r1
 8005b2e:	e000      	b.n	8005b32 <table_2d_get_value+0xb2>
 8005b30:	4611      	mov	r1, r2

    // Get bin edges
    float x0 = table->x_bins[x_bin];
 8005b32:	f503 7e80 	add.w	lr, r3, #256	@ 0x100
 8005b36:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8005b3a:	ed9e 4a00 	vldr	s8, [lr]
    float x1 = table->x_bins[x_bin_next];
 8005b3e:	f50c 7e80 	add.w	lr, ip, #256	@ 0x100
 8005b42:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8005b46:	ed9e 5a00 	vldr	s10, [lr]
    float y0 = table->y_bins[y_bin];
 8005b4a:	f502 7e88 	add.w	lr, r2, #272	@ 0x110
 8005b4e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8005b52:	edde 4a00 	vldr	s9, [lr]
    float y1 = table->y_bins[y_bin_next];
 8005b56:	f501 7e88 	add.w	lr, r1, #272	@ 0x110
 8005b5a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8005b5e:	ed9e 6a00 	vldr	s12, [lr]

    // Get table values at corners
    float q11 = table->data[x_bin][y_bin];
 8005b62:	eb02 1e03 	add.w	lr, r2, r3, lsl #4
 8005b66:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8005b6a:	edde 7a00 	vldr	s15, [lr]
    float q21 = table->data[x_bin_next][y_bin];
 8005b6e:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8005b72:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005b76:	edd2 5a00 	vldr	s11, [r2]
    float q12 = table->data[x_bin][y_bin_next];
 8005b7a:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8005b7e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005b82:	ed93 3a00 	vldr	s6, [r3]
    float q22 = table->data[x_bin_next][y_bin_next];
 8005b86:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8005b8a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005b8e:	edd0 3a00 	vldr	s7, [r0]

    // Handle edge cases (avoid division by zero)
    float x_frac = (x1 != x0) ? (x - x0) / (x1 - x0) : 0.0f;
 8005b92:	eeb4 4a45 	vcmp.f32	s8, s10
 8005b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9a:	d006      	beq.n	8005baa <table_2d_get_value+0x12a>
 8005b9c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8005ba0:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005ba4:	ee86 0a85 	vdiv.f32	s0, s13, s10
 8005ba8:	e001      	b.n	8005bae <table_2d_get_value+0x12e>
 8005baa:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8005c08 <table_2d_get_value+0x188>
    float y_frac = (y1 != y0) ? (y - y0) / (y1 - y0) : 0.0f;
 8005bae:	eef4 4a46 	vcmp.f32	s9, s12
 8005bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb6:	d006      	beq.n	8005bc6 <table_2d_get_value+0x146>
 8005bb8:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005bbc:	ee76 6a64 	vsub.f32	s13, s12, s9
 8005bc0:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8005bc4:	e001      	b.n	8005bca <table_2d_get_value+0x14a>
 8005bc6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8005c08 <table_2d_get_value+0x188>

    // Bilinear interpolation
    float interp =
        q11 * (1 - x_frac) * (1 - y_frac) +
 8005bca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bce:	ee77 6a40 	vsub.f32	s13, s14, s0
 8005bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bd6:	ee37 7a46 	vsub.f32	s14, s14, s12
 8005bda:	ee67 7a87 	vmul.f32	s15, s15, s14
        q21 * x_frac * (1 - y_frac) +
 8005bde:	ee60 5a25 	vmul.f32	s11, s0, s11
 8005be2:	ee27 7a25 	vmul.f32	s14, s14, s11
        q11 * (1 - x_frac) * (1 - y_frac) +
 8005be6:	ee77 7a87 	vadd.f32	s15, s15, s14
        q12 * (1 - x_frac) * y_frac +
 8005bea:	ee66 6a83 	vmul.f32	s13, s13, s6
 8005bee:	ee66 6a86 	vmul.f32	s13, s13, s12
        q21 * x_frac * (1 - y_frac) +
 8005bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        q22 * x_frac * y_frac;
 8005bf6:	ee20 0a23 	vmul.f32	s0, s0, s7
 8005bfa:	ee20 0a06 	vmul.f32	s0, s0, s12

    return interp;
}
 8005bfe:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005c02:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c06:	bf00      	nop
 8005c08:	00000000 	.word	0x00000000

08005c0c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c0c:	4b08      	ldr	r3, [pc, #32]	@ (8005c30 <prvResetNextTaskUnblockTime+0x24>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	b923      	cbnz	r3, 8005c1e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c14:	4b07      	ldr	r3, [pc, #28]	@ (8005c34 <prvResetNextTaskUnblockTime+0x28>)
 8005c16:	f04f 32ff 	mov.w	r2, #4294967295
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c1e:	4b04      	ldr	r3, [pc, #16]	@ (8005c30 <prvResetNextTaskUnblockTime+0x24>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	4b02      	ldr	r3, [pc, #8]	@ (8005c34 <prvResetNextTaskUnblockTime+0x28>)
 8005c2a:	601a      	str	r2, [r3, #0]
	}
}
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	2000554c 	.word	0x2000554c
 8005c34:	200054e4 	.word	0x200054e4

08005c38 <prvInitialiseNewTask>:
{
 8005c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3c:	4680      	mov	r8, r0
 8005c3e:	460d      	mov	r5, r1
 8005c40:	4617      	mov	r7, r2
 8005c42:	4699      	mov	r9, r3
 8005c44:	9e08      	ldr	r6, [sp, #32]
 8005c46:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8005c4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c4c:	0092      	lsls	r2, r2, #2
 8005c4e:	21a5      	movs	r1, #165	@ 0xa5
 8005c50:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005c52:	f002 ffd9 	bl	8008c08 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005c58:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8005c5c:	3a01      	subs	r2, #1
 8005c5e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c62:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8005c66:	b3a5      	cbz	r5, 8005cd2 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c68:	f04f 0c00 	mov.w	ip, #0
 8005c6c:	f1bc 0f0f 	cmp.w	ip, #15
 8005c70:	d809      	bhi.n	8005c86 <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c72:	f815 300c 	ldrb.w	r3, [r5, ip]
 8005c76:	eb04 020c 	add.w	r2, r4, ip
 8005c7a:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8005c7e:	b113      	cbz	r3, 8005c86 <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c80:	f10c 0c01 	add.w	ip, ip, #1
 8005c84:	e7f2      	b.n	8005c6c <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c86:	2300      	movs	r3, #0
 8005c88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c8c:	2e37      	cmp	r6, #55	@ 0x37
 8005c8e:	d900      	bls.n	8005c92 <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c90:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8005c92:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005c94:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c96:	2500      	movs	r5, #0
 8005c98:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c9a:	1d20      	adds	r0, r4, #4
 8005c9c:	f7fb fc2b 	bl	80014f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ca0:	f104 0018 	add.w	r0, r4, #24
 8005ca4:	f7fb fc27 	bl	80014f6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ca8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005caa:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8005cae:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cb0:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8005cb2:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cb4:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cb8:	464a      	mov	r2, r9
 8005cba:	4641      	mov	r1, r8
 8005cbc:	4638      	mov	r0, r7
 8005cbe:	f7fb fd19 	bl	80016f4 <pxPortInitialiseStack>
 8005cc2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005cc4:	f1ba 0f00 	cmp.w	sl, #0
 8005cc8:	d001      	beq.n	8005cce <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cca:	f8ca 4000 	str.w	r4, [sl]
}
 8005cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8005cd8:	e7d8      	b.n	8005c8c <prvInitialiseNewTask+0x54>
	...

08005cdc <prvInitialiseTaskLists>:
{
 8005cdc:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cde:	2400      	movs	r4, #0
 8005ce0:	e007      	b.n	8005cf2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ce2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005ce6:	0093      	lsls	r3, r2, #2
 8005ce8:	480e      	ldr	r0, [pc, #56]	@ (8005d24 <prvInitialiseTaskLists+0x48>)
 8005cea:	4418      	add	r0, r3
 8005cec:	f7fb fbf8 	bl	80014e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cf0:	3401      	adds	r4, #1
 8005cf2:	2c37      	cmp	r4, #55	@ 0x37
 8005cf4:	d9f5      	bls.n	8005ce2 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8005cf6:	4d0c      	ldr	r5, [pc, #48]	@ (8005d28 <prvInitialiseTaskLists+0x4c>)
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f7fb fbf1 	bl	80014e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cfe:	4c0b      	ldr	r4, [pc, #44]	@ (8005d2c <prvInitialiseTaskLists+0x50>)
 8005d00:	4620      	mov	r0, r4
 8005d02:	f7fb fbed 	bl	80014e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d06:	480a      	ldr	r0, [pc, #40]	@ (8005d30 <prvInitialiseTaskLists+0x54>)
 8005d08:	f7fb fbea 	bl	80014e0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005d0c:	4809      	ldr	r0, [pc, #36]	@ (8005d34 <prvInitialiseTaskLists+0x58>)
 8005d0e:	f7fb fbe7 	bl	80014e0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005d12:	4809      	ldr	r0, [pc, #36]	@ (8005d38 <prvInitialiseTaskLists+0x5c>)
 8005d14:	f7fb fbe4 	bl	80014e0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d18:	4b08      	ldr	r3, [pc, #32]	@ (8005d3c <prvInitialiseTaskLists+0x60>)
 8005d1a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d1c:	4b08      	ldr	r3, [pc, #32]	@ (8005d40 <prvInitialiseTaskLists+0x64>)
 8005d1e:	601c      	str	r4, [r3, #0]
}
 8005d20:	bd38      	pop	{r3, r4, r5, pc}
 8005d22:	bf00      	nop
 8005d24:	20005578 	.word	0x20005578
 8005d28:	20005564 	.word	0x20005564
 8005d2c:	20005550 	.word	0x20005550
 8005d30:	20005534 	.word	0x20005534
 8005d34:	20005520 	.word	0x20005520
 8005d38:	20005508 	.word	0x20005508
 8005d3c:	2000554c 	.word	0x2000554c
 8005d40:	20005548 	.word	0x20005548

08005d44 <prvAddNewTaskToReadyList>:
{
 8005d44:	b510      	push	{r4, lr}
 8005d46:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005d48:	f7fb fcfc 	bl	8001744 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005d4c:	4a22      	ldr	r2, [pc, #136]	@ (8005dd8 <prvAddNewTaskToReadyList+0x94>)
 8005d4e:	6813      	ldr	r3, [r2, #0]
 8005d50:	3301      	adds	r3, #1
 8005d52:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d54:	4b21      	ldr	r3, [pc, #132]	@ (8005ddc <prvAddNewTaskToReadyList+0x98>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	b15b      	cbz	r3, 8005d72 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8005d5a:	4b21      	ldr	r3, [pc, #132]	@ (8005de0 <prvAddNewTaskToReadyList+0x9c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	b96b      	cbnz	r3, 8005d7c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d60:	4b1e      	ldr	r3, [pc, #120]	@ (8005ddc <prvAddNewTaskToReadyList+0x98>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d66:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d807      	bhi.n	8005d7c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8005d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ddc <prvAddNewTaskToReadyList+0x98>)
 8005d6e:	601c      	str	r4, [r3, #0]
 8005d70:	e004      	b.n	8005d7c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8005d72:	4b1a      	ldr	r3, [pc, #104]	@ (8005ddc <prvAddNewTaskToReadyList+0x98>)
 8005d74:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d76:	6813      	ldr	r3, [r2, #0]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d029      	beq.n	8005dd0 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8005d7c:	4a19      	ldr	r2, [pc, #100]	@ (8005de4 <prvAddNewTaskToReadyList+0xa0>)
 8005d7e:	6813      	ldr	r3, [r2, #0]
 8005d80:	3301      	adds	r3, #1
 8005d82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d84:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8005d86:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005d88:	4b17      	ldr	r3, [pc, #92]	@ (8005de8 <prvAddNewTaskToReadyList+0xa4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4298      	cmp	r0, r3
 8005d8e:	d901      	bls.n	8005d94 <prvAddNewTaskToReadyList+0x50>
 8005d90:	4b15      	ldr	r3, [pc, #84]	@ (8005de8 <prvAddNewTaskToReadyList+0xa4>)
 8005d92:	6018      	str	r0, [r3, #0]
 8005d94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d98:	1d21      	adds	r1, r4, #4
 8005d9a:	4b14      	ldr	r3, [pc, #80]	@ (8005dec <prvAddNewTaskToReadyList+0xa8>)
 8005d9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005da0:	f7fb fbac 	bl	80014fc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005da4:	f7fb fcf0 	bl	8001788 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005da8:	4b0d      	ldr	r3, [pc, #52]	@ (8005de0 <prvAddNewTaskToReadyList+0x9c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	b17b      	cbz	r3, 8005dce <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dae:	4b0b      	ldr	r3, [pc, #44]	@ (8005ddc <prvAddNewTaskToReadyList+0x98>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d209      	bcs.n	8005dce <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8005dba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	f3bf 8f6f 	isb	sy
}
 8005dce:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8005dd0:	f7ff ff84 	bl	8005cdc <prvInitialiseTaskLists>
 8005dd4:	e7d2      	b.n	8005d7c <prvAddNewTaskToReadyList+0x38>
 8005dd6:	bf00      	nop
 8005dd8:	20005504 	.word	0x20005504
 8005ddc:	200059d8 	.word	0x200059d8
 8005de0:	200054f8 	.word	0x200054f8
 8005de4:	200054e8 	.word	0x200054e8
 8005de8:	200054fc 	.word	0x200054fc
 8005dec:	20005578 	.word	0x20005578

08005df0 <prvDeleteTCB>:
	{
 8005df0:	b510      	push	{r4, lr}
 8005df2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005df4:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 8005df8:	b163      	cbz	r3, 8005e14 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d011      	beq.n	8005e22 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d00e      	beq.n	8005e20 <prvDeleteTCB+0x30>
 8005e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	e7fe      	b.n	8005e12 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8005e14:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8005e16:	f7fb f98b 	bl	8001130 <vPortFree>
				vPortFree( pxTCB );
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f7fb f988 	bl	8001130 <vPortFree>
	}
 8005e20:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005e22:	f7fb f985 	bl	8001130 <vPortFree>
 8005e26:	e7fb      	b.n	8005e20 <prvDeleteTCB+0x30>

08005e28 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e28:	4b0f      	ldr	r3, [pc, #60]	@ (8005e68 <prvCheckTasksWaitingTermination+0x40>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	b1d3      	cbz	r3, 8005e64 <prvCheckTasksWaitingTermination+0x3c>
{
 8005e2e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8005e30:	f7fb fc88 	bl	8001744 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e34:	4b0d      	ldr	r3, [pc, #52]	@ (8005e6c <prvCheckTasksWaitingTermination+0x44>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e3a:	1d20      	adds	r0, r4, #4
 8005e3c:	f7fb fb82 	bl	8001544 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e40:	4a0b      	ldr	r2, [pc, #44]	@ (8005e70 <prvCheckTasksWaitingTermination+0x48>)
 8005e42:	6813      	ldr	r3, [r2, #0]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e48:	4a07      	ldr	r2, [pc, #28]	@ (8005e68 <prvCheckTasksWaitingTermination+0x40>)
 8005e4a:	6813      	ldr	r3, [r2, #0]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8005e50:	f7fb fc9a 	bl	8001788 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005e54:	4620      	mov	r0, r4
 8005e56:	f7ff ffcb 	bl	8005df0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e5a:	4b03      	ldr	r3, [pc, #12]	@ (8005e68 <prvCheckTasksWaitingTermination+0x40>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e6      	bne.n	8005e30 <prvCheckTasksWaitingTermination+0x8>
}
 8005e62:	bd10      	pop	{r4, pc}
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	2000551c 	.word	0x2000551c
 8005e6c:	20005520 	.word	0x20005520
 8005e70:	20005504 	.word	0x20005504

08005e74 <prvIdleTask>:
{
 8005e74:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8005e76:	f7ff ffd7 	bl	8005e28 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e7a:	4b07      	ldr	r3, [pc, #28]	@ (8005e98 <prvIdleTask+0x24>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d9f9      	bls.n	8005e76 <prvIdleTask+0x2>
				taskYIELD();
 8005e82:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	e7ee      	b.n	8005e76 <prvIdleTask+0x2>
 8005e98:	20005578 	.word	0x20005578

08005e9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ea2:	4b17      	ldr	r3, [pc, #92]	@ (8005f00 <prvAddCurrentTaskToDelayedList+0x64>)
 8005ea4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ea6:	4b17      	ldr	r3, [pc, #92]	@ (8005f04 <prvAddCurrentTaskToDelayedList+0x68>)
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	3004      	adds	r0, #4
 8005eac:	f7fb fb4a 	bl	8001544 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eb0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005eb4:	d00d      	beq.n	8005ed2 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005eb6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005eb8:	4b12      	ldr	r3, [pc, #72]	@ (8005f04 <prvAddCurrentTaskToDelayedList+0x68>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005ebe:	42a6      	cmp	r6, r4
 8005ec0:	d910      	bls.n	8005ee4 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ec2:	4b11      	ldr	r3, [pc, #68]	@ (8005f08 <prvAddCurrentTaskToDelayedList+0x6c>)
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f04 <prvAddCurrentTaskToDelayedList+0x68>)
 8005ec8:	6819      	ldr	r1, [r3, #0]
 8005eca:	3104      	adds	r1, #4
 8005ecc:	f7fb fb21 	bl	8001512 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ed0:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ed2:	2d00      	cmp	r5, #0
 8005ed4:	d0ef      	beq.n	8005eb6 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8005f04 <prvAddCurrentTaskToDelayedList+0x68>)
 8005ed8:	6819      	ldr	r1, [r3, #0]
 8005eda:	3104      	adds	r1, #4
 8005edc:	480b      	ldr	r0, [pc, #44]	@ (8005f0c <prvAddCurrentTaskToDelayedList+0x70>)
 8005ede:	f7fb fb0d 	bl	80014fc <vListInsertEnd>
 8005ee2:	e7f5      	b.n	8005ed0 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8005f10 <prvAddCurrentTaskToDelayedList+0x74>)
 8005ee6:	6818      	ldr	r0, [r3, #0]
 8005ee8:	4b06      	ldr	r3, [pc, #24]	@ (8005f04 <prvAddCurrentTaskToDelayedList+0x68>)
 8005eea:	6819      	ldr	r1, [r3, #0]
 8005eec:	3104      	adds	r1, #4
 8005eee:	f7fb fb10 	bl	8001512 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ef2:	4b08      	ldr	r3, [pc, #32]	@ (8005f14 <prvAddCurrentTaskToDelayedList+0x78>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	42a3      	cmp	r3, r4
 8005ef8:	d9ea      	bls.n	8005ed0 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8005efa:	4b06      	ldr	r3, [pc, #24]	@ (8005f14 <prvAddCurrentTaskToDelayedList+0x78>)
 8005efc:	601c      	str	r4, [r3, #0]
}
 8005efe:	e7e7      	b.n	8005ed0 <prvAddCurrentTaskToDelayedList+0x34>
 8005f00:	20005500 	.word	0x20005500
 8005f04:	200059d8 	.word	0x200059d8
 8005f08:	20005548 	.word	0x20005548
 8005f0c:	20005508 	.word	0x20005508
 8005f10:	2000554c 	.word	0x2000554c
 8005f14:	200054e4 	.word	0x200054e4

08005f18 <xTaskCreateStatic>:
	{
 8005f18:	b530      	push	{r4, r5, lr}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8005f1e:	b17c      	cbz	r4, 8005f40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f20:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005f22:	b1b5      	cbz	r5, 8005f52 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f24:	255c      	movs	r5, #92	@ 0x5c
 8005f26:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f28:	9d04      	ldr	r5, [sp, #16]
 8005f2a:	2d5c      	cmp	r5, #92	@ 0x5c
 8005f2c:	d01a      	beq.n	8005f64 <xTaskCreateStatic+0x4c>
 8005f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	e7fe      	b.n	8005f3e <xTaskCreateStatic+0x26>
 8005f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005f50:	e7fe      	b.n	8005f50 <xTaskCreateStatic+0x38>
 8005f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005f62:	e7fe      	b.n	8005f62 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f64:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f66:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005f68:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f6a:	2402      	movs	r4, #2
 8005f6c:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f70:	2400      	movs	r4, #0
 8005f72:	9403      	str	r4, [sp, #12]
 8005f74:	9502      	str	r5, [sp, #8]
 8005f76:	ac05      	add	r4, sp, #20
 8005f78:	9401      	str	r4, [sp, #4]
 8005f7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f7c:	9400      	str	r4, [sp, #0]
 8005f7e:	f7ff fe5b 	bl	8005c38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f82:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005f84:	f7ff fede 	bl	8005d44 <prvAddNewTaskToReadyList>
	}
 8005f88:	9805      	ldr	r0, [sp, #20]
 8005f8a:	b007      	add	sp, #28
 8005f8c:	bd30      	pop	{r4, r5, pc}

08005f8e <xTaskCreate>:
	{
 8005f8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f92:	b085      	sub	sp, #20
 8005f94:	4607      	mov	r7, r0
 8005f96:	4688      	mov	r8, r1
 8005f98:	4614      	mov	r4, r2
 8005f9a:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f9c:	0090      	lsls	r0, r2, #2
 8005f9e:	f7fb f845 	bl	800102c <pvPortMalloc>
			if( pxStack != NULL )
 8005fa2:	b308      	cbz	r0, 8005fe8 <xTaskCreate+0x5a>
 8005fa4:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fa6:	205c      	movs	r0, #92	@ 0x5c
 8005fa8:	f7fb f840 	bl	800102c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005fac:	4605      	mov	r5, r0
 8005fae:	b1a8      	cbz	r0, 8005fdc <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8005fb0:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fba:	9303      	str	r3, [sp, #12]
 8005fbc:	9002      	str	r0, [sp, #8]
 8005fbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	4633      	mov	r3, r6
 8005fc8:	4622      	mov	r2, r4
 8005fca:	4641      	mov	r1, r8
 8005fcc:	4638      	mov	r0, r7
 8005fce:	f7ff fe33 	bl	8005c38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f7ff feb6 	bl	8005d44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fd8:	2001      	movs	r0, #1
 8005fda:	e007      	b.n	8005fec <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8005fdc:	4648      	mov	r0, r9
 8005fde:	f7fb f8a7 	bl	8001130 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe6:	e001      	b.n	8005fec <xTaskCreate+0x5e>
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8005fec:	b005      	add	sp, #20
 8005fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08005ff4 <vTaskStartScheduler>:
{
 8005ff4:	b510      	push	{r4, lr}
 8005ff6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ff8:	2400      	movs	r4, #0
 8005ffa:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ffc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ffe:	aa07      	add	r2, sp, #28
 8006000:	a906      	add	r1, sp, #24
 8006002:	a805      	add	r0, sp, #20
 8006004:	f7fa fc94 	bl	8000930 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006008:	9b05      	ldr	r3, [sp, #20]
 800600a:	9302      	str	r3, [sp, #8]
 800600c:	9b06      	ldr	r3, [sp, #24]
 800600e:	9301      	str	r3, [sp, #4]
 8006010:	9400      	str	r4, [sp, #0]
 8006012:	4623      	mov	r3, r4
 8006014:	9a07      	ldr	r2, [sp, #28]
 8006016:	4917      	ldr	r1, [pc, #92]	@ (8006074 <vTaskStartScheduler+0x80>)
 8006018:	4817      	ldr	r0, [pc, #92]	@ (8006078 <vTaskStartScheduler+0x84>)
 800601a:	f7ff ff7d 	bl	8005f18 <xTaskCreateStatic>
 800601e:	4b17      	ldr	r3, [pc, #92]	@ (800607c <vTaskStartScheduler+0x88>)
 8006020:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8006022:	b1c0      	cbz	r0, 8006056 <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 8006024:	f000 fe22 	bl	8006c6c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006028:	2801      	cmp	r0, #1
 800602a:	d115      	bne.n	8006058 <vTaskStartScheduler+0x64>
 800602c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800603c:	4b10      	ldr	r3, [pc, #64]	@ (8006080 <vTaskStartScheduler+0x8c>)
 800603e:	f04f 32ff 	mov.w	r2, #4294967295
 8006042:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006044:	4b0f      	ldr	r3, [pc, #60]	@ (8006084 <vTaskStartScheduler+0x90>)
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800604a:	4b0f      	ldr	r3, [pc, #60]	@ (8006088 <vTaskStartScheduler+0x94>)
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006050:	f7fb fc12 	bl	8001878 <xPortStartScheduler>
		}
 8006054:	e003      	b.n	800605e <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 8006056:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006058:	f1b0 3fff 	cmp.w	r0, #4294967295
 800605c:	d001      	beq.n	8006062 <vTaskStartScheduler+0x6e>
}
 800605e:	b008      	add	sp, #32
 8006060:	bd10      	pop	{r4, pc}
 8006062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006072:	e7fe      	b.n	8006072 <vTaskStartScheduler+0x7e>
 8006074:	08009d94 	.word	0x08009d94
 8006078:	08005e75 	.word	0x08005e75
 800607c:	200054e0 	.word	0x200054e0
 8006080:	200054e4 	.word	0x200054e4
 8006084:	200054f8 	.word	0x200054f8
 8006088:	20005500 	.word	0x20005500

0800608c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800608c:	4a02      	ldr	r2, [pc, #8]	@ (8006098 <vTaskSuspendAll+0xc>)
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	3301      	adds	r3, #1
 8006092:	6013      	str	r3, [r2, #0]
}
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	200054dc 	.word	0x200054dc

0800609c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800609c:	4b01      	ldr	r3, [pc, #4]	@ (80060a4 <xTaskGetTickCount+0x8>)
 800609e:	6818      	ldr	r0, [r3, #0]
}
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	20005500 	.word	0x20005500

080060a8 <xTaskIncrementTick>:
{
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060aa:	4b3a      	ldr	r3, [pc, #232]	@ (8006194 <xTaskIncrementTick+0xec>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d169      	bne.n	8006186 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060b2:	4b39      	ldr	r3, [pc, #228]	@ (8006198 <xTaskIncrementTick+0xf0>)
 80060b4:	681d      	ldr	r5, [r3, #0]
 80060b6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80060b8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060ba:	b9c5      	cbnz	r5, 80060ee <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80060bc:	4b37      	ldr	r3, [pc, #220]	@ (800619c <xTaskIncrementTick+0xf4>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	b143      	cbz	r3, 80060d6 <xTaskIncrementTick+0x2e>
 80060c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	e7fe      	b.n	80060d4 <xTaskIncrementTick+0x2c>
 80060d6:	4a31      	ldr	r2, [pc, #196]	@ (800619c <xTaskIncrementTick+0xf4>)
 80060d8:	6811      	ldr	r1, [r2, #0]
 80060da:	4b31      	ldr	r3, [pc, #196]	@ (80061a0 <xTaskIncrementTick+0xf8>)
 80060dc:	6818      	ldr	r0, [r3, #0]
 80060de:	6010      	str	r0, [r2, #0]
 80060e0:	6019      	str	r1, [r3, #0]
 80060e2:	4a30      	ldr	r2, [pc, #192]	@ (80061a4 <xTaskIncrementTick+0xfc>)
 80060e4:	6813      	ldr	r3, [r2, #0]
 80060e6:	3301      	adds	r3, #1
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	f7ff fd8f 	bl	8005c0c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060ee:	4b2e      	ldr	r3, [pc, #184]	@ (80061a8 <xTaskIncrementTick+0x100>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	42ab      	cmp	r3, r5
 80060f4:	d93d      	bls.n	8006172 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80060f6:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060f8:	4b2c      	ldr	r3, [pc, #176]	@ (80061ac <xTaskIncrementTick+0x104>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006102:	009a      	lsls	r2, r3, #2
 8006104:	4b2a      	ldr	r3, [pc, #168]	@ (80061b0 <xTaskIncrementTick+0x108>)
 8006106:	589b      	ldr	r3, [r3, r2]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d900      	bls.n	800610e <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800610c:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800610e:	4b29      	ldr	r3, [pc, #164]	@ (80061b4 <xTaskIncrementTick+0x10c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d03c      	beq.n	8006190 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8006116:	2701      	movs	r7, #1
	return xSwitchRequired;
 8006118:	e03a      	b.n	8006190 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800611a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800611c:	4b1f      	ldr	r3, [pc, #124]	@ (800619c <xTaskIncrementTick+0xf4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	b343      	cbz	r3, 8006176 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006124:	4b1d      	ldr	r3, [pc, #116]	@ (800619c <xTaskIncrementTick+0xf4>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800612c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800612e:	429d      	cmp	r5, r3
 8006130:	d326      	bcc.n	8006180 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006132:	1d26      	adds	r6, r4, #4
 8006134:	4630      	mov	r0, r6
 8006136:	f7fb fa05 	bl	8001544 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800613a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800613c:	b11b      	cbz	r3, 8006146 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800613e:	f104 0018 	add.w	r0, r4, #24
 8006142:	f7fb f9ff 	bl	8001544 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006146:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006148:	4a1b      	ldr	r2, [pc, #108]	@ (80061b8 <xTaskIncrementTick+0x110>)
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	4293      	cmp	r3, r2
 800614e:	d901      	bls.n	8006154 <xTaskIncrementTick+0xac>
 8006150:	4a19      	ldr	r2, [pc, #100]	@ (80061b8 <xTaskIncrementTick+0x110>)
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006158:	009a      	lsls	r2, r3, #2
 800615a:	4631      	mov	r1, r6
 800615c:	4814      	ldr	r0, [pc, #80]	@ (80061b0 <xTaskIncrementTick+0x108>)
 800615e:	4410      	add	r0, r2
 8006160:	f7fb f9cc 	bl	80014fc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006164:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006166:	4b11      	ldr	r3, [pc, #68]	@ (80061ac <xTaskIncrementTick+0x104>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616c:	429a      	cmp	r2, r3
 800616e:	d2d4      	bcs.n	800611a <xTaskIncrementTick+0x72>
 8006170:	e7d4      	b.n	800611c <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8006172:	2700      	movs	r7, #0
 8006174:	e7d2      	b.n	800611c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006176:	4b0c      	ldr	r3, [pc, #48]	@ (80061a8 <xTaskIncrementTick+0x100>)
 8006178:	f04f 32ff 	mov.w	r2, #4294967295
 800617c:	601a      	str	r2, [r3, #0]
					break;
 800617e:	e7bb      	b.n	80060f8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8006180:	4a09      	ldr	r2, [pc, #36]	@ (80061a8 <xTaskIncrementTick+0x100>)
 8006182:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006184:	e7b8      	b.n	80060f8 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8006186:	4a0d      	ldr	r2, [pc, #52]	@ (80061bc <xTaskIncrementTick+0x114>)
 8006188:	6813      	ldr	r3, [r2, #0]
 800618a:	3301      	adds	r3, #1
 800618c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800618e:	2700      	movs	r7, #0
}
 8006190:	4638      	mov	r0, r7
 8006192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006194:	200054dc 	.word	0x200054dc
 8006198:	20005500 	.word	0x20005500
 800619c:	2000554c 	.word	0x2000554c
 80061a0:	20005548 	.word	0x20005548
 80061a4:	200054ec 	.word	0x200054ec
 80061a8:	200054e4 	.word	0x200054e4
 80061ac:	200059d8 	.word	0x200059d8
 80061b0:	20005578 	.word	0x20005578
 80061b4:	200054f0 	.word	0x200054f0
 80061b8:	200054fc 	.word	0x200054fc
 80061bc:	200054f4 	.word	0x200054f4

080061c0 <xTaskResumeAll>:
{
 80061c0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80061c2:	4b35      	ldr	r3, [pc, #212]	@ (8006298 <xTaskResumeAll+0xd8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	b943      	cbnz	r3, 80061da <xTaskResumeAll+0x1a>
 80061c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	e7fe      	b.n	80061d8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80061da:	f7fb fab3 	bl	8001744 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80061de:	4b2e      	ldr	r3, [pc, #184]	@ (8006298 <xTaskResumeAll+0xd8>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	3a01      	subs	r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d14f      	bne.n	800628c <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061ec:	4b2b      	ldr	r3, [pc, #172]	@ (800629c <xTaskResumeAll+0xdc>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	b90b      	cbnz	r3, 80061f6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80061f2:	2400      	movs	r4, #0
 80061f4:	e04b      	b.n	800628e <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80061f6:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061f8:	4b29      	ldr	r3, [pc, #164]	@ (80062a0 <xTaskResumeAll+0xe0>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	b31b      	cbz	r3, 8006246 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061fe:	4b28      	ldr	r3, [pc, #160]	@ (80062a0 <xTaskResumeAll+0xe0>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006204:	f104 0018 	add.w	r0, r4, #24
 8006208:	f7fb f99c 	bl	8001544 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800620c:	1d25      	adds	r5, r4, #4
 800620e:	4628      	mov	r0, r5
 8006210:	f7fb f998 	bl	8001544 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006214:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006216:	4b23      	ldr	r3, [pc, #140]	@ (80062a4 <xTaskResumeAll+0xe4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4298      	cmp	r0, r3
 800621c:	d901      	bls.n	8006222 <xTaskResumeAll+0x62>
 800621e:	4b21      	ldr	r3, [pc, #132]	@ (80062a4 <xTaskResumeAll+0xe4>)
 8006220:	6018      	str	r0, [r3, #0]
 8006222:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006226:	4629      	mov	r1, r5
 8006228:	4b1f      	ldr	r3, [pc, #124]	@ (80062a8 <xTaskResumeAll+0xe8>)
 800622a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800622e:	f7fb f965 	bl	80014fc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006232:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006234:	4b1d      	ldr	r3, [pc, #116]	@ (80062ac <xTaskResumeAll+0xec>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623a:	429a      	cmp	r2, r3
 800623c:	d3dc      	bcc.n	80061f8 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800623e:	4b1c      	ldr	r3, [pc, #112]	@ (80062b0 <xTaskResumeAll+0xf0>)
 8006240:	2201      	movs	r2, #1
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	e7d8      	b.n	80061f8 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8006246:	b10c      	cbz	r4, 800624c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8006248:	f7ff fce0 	bl	8005c0c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800624c:	4b19      	ldr	r3, [pc, #100]	@ (80062b4 <xTaskResumeAll+0xf4>)
 800624e:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8006250:	b984      	cbnz	r4, 8006274 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8006252:	4b17      	ldr	r3, [pc, #92]	@ (80062b0 <xTaskResumeAll+0xf0>)
 8006254:	681c      	ldr	r4, [r3, #0]
 8006256:	b1d4      	cbz	r4, 800628e <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8006258:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800625c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006260:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800626c:	2401      	movs	r4, #1
 800626e:	e00e      	b.n	800628e <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006270:	3c01      	subs	r4, #1
 8006272:	d007      	beq.n	8006284 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8006274:	f7ff ff18 	bl	80060a8 <xTaskIncrementTick>
 8006278:	2800      	cmp	r0, #0
 800627a:	d0f9      	beq.n	8006270 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800627c:	4b0c      	ldr	r3, [pc, #48]	@ (80062b0 <xTaskResumeAll+0xf0>)
 800627e:	2201      	movs	r2, #1
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	e7f5      	b.n	8006270 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8006284:	4b0b      	ldr	r3, [pc, #44]	@ (80062b4 <xTaskResumeAll+0xf4>)
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	e7e2      	b.n	8006252 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800628c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800628e:	f7fb fa7b 	bl	8001788 <vPortExitCritical>
}
 8006292:	4620      	mov	r0, r4
 8006294:	bd38      	pop	{r3, r4, r5, pc}
 8006296:	bf00      	nop
 8006298:	200054dc 	.word	0x200054dc
 800629c:	20005504 	.word	0x20005504
 80062a0:	20005534 	.word	0x20005534
 80062a4:	200054fc 	.word	0x200054fc
 80062a8:	20005578 	.word	0x20005578
 80062ac:	200059d8 	.word	0x200059d8
 80062b0:	200054f0 	.word	0x200054f0
 80062b4:	200054f4 	.word	0x200054f4

080062b8 <vTaskDelay>:
	{
 80062b8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062ba:	b1a8      	cbz	r0, 80062e8 <vTaskDelay+0x30>
 80062bc:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80062be:	4b10      	ldr	r3, [pc, #64]	@ (8006300 <vTaskDelay+0x48>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	b143      	cbz	r3, 80062d6 <vTaskDelay+0x1e>
 80062c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	e7fe      	b.n	80062d4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80062d6:	f7ff fed9 	bl	800608c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062da:	2100      	movs	r1, #0
 80062dc:	4620      	mov	r0, r4
 80062de:	f7ff fddd 	bl	8005e9c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80062e2:	f7ff ff6d 	bl	80061c0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80062e6:	b948      	cbnz	r0, 80062fc <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80062e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80062ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	f3bf 8f6f 	isb	sy
	}
 80062fc:	bd10      	pop	{r4, pc}
 80062fe:	bf00      	nop
 8006300:	200054dc 	.word	0x200054dc

08006304 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006304:	4b20      	ldr	r3, [pc, #128]	@ (8006388 <vTaskSwitchContext+0x84>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	b11b      	cbz	r3, 8006312 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800630a:	4b20      	ldr	r3, [pc, #128]	@ (800638c <vTaskSwitchContext+0x88>)
 800630c:	2201      	movs	r2, #1
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006312:	4b1e      	ldr	r3, [pc, #120]	@ (800638c <vTaskSwitchContext+0x88>)
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006318:	4b1d      	ldr	r3, [pc, #116]	@ (8006390 <vTaskSwitchContext+0x8c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006320:	008a      	lsls	r2, r1, #2
 8006322:	491c      	ldr	r1, [pc, #112]	@ (8006394 <vTaskSwitchContext+0x90>)
 8006324:	588a      	ldr	r2, [r1, r2]
 8006326:	b95a      	cbnz	r2, 8006340 <vTaskSwitchContext+0x3c>
 8006328:	b10b      	cbz	r3, 800632e <vTaskSwitchContext+0x2a>
 800632a:	3b01      	subs	r3, #1
 800632c:	e7f6      	b.n	800631c <vTaskSwitchContext+0x18>
 800632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	e7fe      	b.n	800633e <vTaskSwitchContext+0x3a>
 8006340:	4608      	mov	r0, r1
 8006342:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006346:	008a      	lsls	r2, r1, #2
 8006348:	4402      	add	r2, r0
 800634a:	6851      	ldr	r1, [r2, #4]
 800634c:	6849      	ldr	r1, [r1, #4]
 800634e:	6051      	str	r1, [r2, #4]
 8006350:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8006354:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8006358:	3208      	adds	r2, #8
 800635a:	4402      	add	r2, r0
 800635c:	4291      	cmp	r1, r2
 800635e:	d00b      	beq.n	8006378 <vTaskSwitchContext+0x74>
 8006360:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006364:	0091      	lsls	r1, r2, #2
 8006366:	4a0b      	ldr	r2, [pc, #44]	@ (8006394 <vTaskSwitchContext+0x90>)
 8006368:	440a      	add	r2, r1
 800636a:	6852      	ldr	r2, [r2, #4]
 800636c:	68d1      	ldr	r1, [r2, #12]
 800636e:	4a0a      	ldr	r2, [pc, #40]	@ (8006398 <vTaskSwitchContext+0x94>)
 8006370:	6011      	str	r1, [r2, #0]
 8006372:	4a07      	ldr	r2, [pc, #28]	@ (8006390 <vTaskSwitchContext+0x8c>)
 8006374:	6013      	str	r3, [r2, #0]
}
 8006376:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006378:	6848      	ldr	r0, [r1, #4]
 800637a:	4662      	mov	r2, ip
 800637c:	0091      	lsls	r1, r2, #2
 800637e:	4a05      	ldr	r2, [pc, #20]	@ (8006394 <vTaskSwitchContext+0x90>)
 8006380:	440a      	add	r2, r1
 8006382:	6050      	str	r0, [r2, #4]
 8006384:	e7ec      	b.n	8006360 <vTaskSwitchContext+0x5c>
 8006386:	bf00      	nop
 8006388:	200054dc 	.word	0x200054dc
 800638c:	200054f0 	.word	0x200054f0
 8006390:	200054fc 	.word	0x200054fc
 8006394:	20005578 	.word	0x20005578
 8006398:	200059d8 	.word	0x200059d8

0800639c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800639c:	b158      	cbz	r0, 80063b6 <vTaskPlaceOnEventList+0x1a>
{
 800639e:	b510      	push	{r4, lr}
 80063a0:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063a2:	4a09      	ldr	r2, [pc, #36]	@ (80063c8 <vTaskPlaceOnEventList+0x2c>)
 80063a4:	6811      	ldr	r1, [r2, #0]
 80063a6:	3118      	adds	r1, #24
 80063a8:	f7fb f8b3 	bl	8001512 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063ac:	2101      	movs	r1, #1
 80063ae:	4620      	mov	r0, r4
 80063b0:	f7ff fd74 	bl	8005e9c <prvAddCurrentTaskToDelayedList>
}
 80063b4:	bd10      	pop	{r4, pc}
 80063b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80063c6:	e7fe      	b.n	80063c6 <vTaskPlaceOnEventList+0x2a>
 80063c8:	200059d8 	.word	0x200059d8

080063cc <vTaskPlaceOnEventListRestricted>:
	{
 80063cc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80063ce:	b170      	cbz	r0, 80063ee <vTaskPlaceOnEventListRestricted+0x22>
 80063d0:	460d      	mov	r5, r1
 80063d2:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063d4:	4a0a      	ldr	r2, [pc, #40]	@ (8006400 <vTaskPlaceOnEventListRestricted+0x34>)
 80063d6:	6811      	ldr	r1, [r2, #0]
 80063d8:	3118      	adds	r1, #24
 80063da:	f7fb f88f 	bl	80014fc <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80063de:	b10c      	cbz	r4, 80063e4 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80063e0:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063e4:	4621      	mov	r1, r4
 80063e6:	4628      	mov	r0, r5
 80063e8:	f7ff fd58 	bl	8005e9c <prvAddCurrentTaskToDelayedList>
	}
 80063ec:	bd38      	pop	{r3, r4, r5, pc}
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80063fe:	e7fe      	b.n	80063fe <vTaskPlaceOnEventListRestricted+0x32>
 8006400:	200059d8 	.word	0x200059d8

08006404 <xTaskRemoveFromEventList>:
{
 8006404:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006406:	68c3      	ldr	r3, [r0, #12]
 8006408:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800640a:	b324      	cbz	r4, 8006456 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800640c:	f104 0518 	add.w	r5, r4, #24
 8006410:	4628      	mov	r0, r5
 8006412:	f7fb f897 	bl	8001544 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006416:	4b18      	ldr	r3, [pc, #96]	@ (8006478 <xTaskRemoveFromEventList+0x74>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	bb2b      	cbnz	r3, 8006468 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800641c:	1d25      	adds	r5, r4, #4
 800641e:	4628      	mov	r0, r5
 8006420:	f7fb f890 	bl	8001544 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006424:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006426:	4b15      	ldr	r3, [pc, #84]	@ (800647c <xTaskRemoveFromEventList+0x78>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4298      	cmp	r0, r3
 800642c:	d901      	bls.n	8006432 <xTaskRemoveFromEventList+0x2e>
 800642e:	4b13      	ldr	r3, [pc, #76]	@ (800647c <xTaskRemoveFromEventList+0x78>)
 8006430:	6018      	str	r0, [r3, #0]
 8006432:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006436:	4629      	mov	r1, r5
 8006438:	4b11      	ldr	r3, [pc, #68]	@ (8006480 <xTaskRemoveFromEventList+0x7c>)
 800643a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800643e:	f7fb f85d 	bl	80014fc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006442:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006444:	4b0f      	ldr	r3, [pc, #60]	@ (8006484 <xTaskRemoveFromEventList+0x80>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644a:	429a      	cmp	r2, r3
 800644c:	d911      	bls.n	8006472 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800644e:	2001      	movs	r0, #1
 8006450:	4b0d      	ldr	r3, [pc, #52]	@ (8006488 <xTaskRemoveFromEventList+0x84>)
 8006452:	6018      	str	r0, [r3, #0]
}
 8006454:	bd38      	pop	{r3, r4, r5, pc}
 8006456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006466:	e7fe      	b.n	8006466 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006468:	4629      	mov	r1, r5
 800646a:	4808      	ldr	r0, [pc, #32]	@ (800648c <xTaskRemoveFromEventList+0x88>)
 800646c:	f7fb f846 	bl	80014fc <vListInsertEnd>
 8006470:	e7e7      	b.n	8006442 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8006472:	2000      	movs	r0, #0
	return xReturn;
 8006474:	e7ee      	b.n	8006454 <xTaskRemoveFromEventList+0x50>
 8006476:	bf00      	nop
 8006478:	200054dc 	.word	0x200054dc
 800647c:	200054fc 	.word	0x200054fc
 8006480:	20005578 	.word	0x20005578
 8006484:	200059d8 	.word	0x200059d8
 8006488:	200054f0 	.word	0x200054f0
 800648c:	20005534 	.word	0x20005534

08006490 <vTaskRemoveFromUnorderedEventList>:
{
 8006490:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006492:	4b1c      	ldr	r3, [pc, #112]	@ (8006504 <vTaskRemoveFromUnorderedEventList+0x74>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	b943      	cbnz	r3, 80064aa <vTaskRemoveFromUnorderedEventList+0x1a>
 8006498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	e7fe      	b.n	80064a8 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80064aa:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 80064ae:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064b0:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 80064b2:	b1f4      	cbz	r4, 80064f2 <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 80064b4:	f7fb f846 	bl	8001544 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064b8:	1d25      	adds	r5, r4, #4
 80064ba:	4628      	mov	r0, r5
 80064bc:	f7fb f842 	bl	8001544 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80064c0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80064c2:	4b11      	ldr	r3, [pc, #68]	@ (8006508 <vTaskRemoveFromUnorderedEventList+0x78>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4298      	cmp	r0, r3
 80064c8:	d901      	bls.n	80064ce <vTaskRemoveFromUnorderedEventList+0x3e>
 80064ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006508 <vTaskRemoveFromUnorderedEventList+0x78>)
 80064cc:	6018      	str	r0, [r3, #0]
 80064ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80064d2:	4629      	mov	r1, r5
 80064d4:	4b0d      	ldr	r3, [pc, #52]	@ (800650c <vTaskRemoveFromUnorderedEventList+0x7c>)
 80064d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80064da:	f7fb f80f 	bl	80014fc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064de:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80064e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006510 <vTaskRemoveFromUnorderedEventList+0x80>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d902      	bls.n	80064f0 <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 80064ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006514 <vTaskRemoveFromUnorderedEventList+0x84>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	601a      	str	r2, [r3, #0]
}
 80064f0:	bd38      	pop	{r3, r4, r5, pc}
 80064f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006502:	e7fe      	b.n	8006502 <vTaskRemoveFromUnorderedEventList+0x72>
 8006504:	200054dc 	.word	0x200054dc
 8006508:	200054fc 	.word	0x200054fc
 800650c:	20005578 	.word	0x20005578
 8006510:	200059d8 	.word	0x200059d8
 8006514:	200054f0 	.word	0x200054f0

08006518 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006518:	4b03      	ldr	r3, [pc, #12]	@ (8006528 <vTaskInternalSetTimeOutState+0x10>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800651e:	4b03      	ldr	r3, [pc, #12]	@ (800652c <vTaskInternalSetTimeOutState+0x14>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6043      	str	r3, [r0, #4]
}
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	200054ec 	.word	0x200054ec
 800652c:	20005500 	.word	0x20005500

08006530 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8006530:	b1e0      	cbz	r0, 800656c <xTaskCheckForTimeOut+0x3c>
{
 8006532:	b570      	push	{r4, r5, r6, lr}
 8006534:	460c      	mov	r4, r1
 8006536:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006538:	b309      	cbz	r1, 800657e <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 800653a:	f7fb f903 	bl	8001744 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800653e:	4b1c      	ldr	r3, [pc, #112]	@ (80065b0 <xTaskCheckForTimeOut+0x80>)
 8006540:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006542:	686b      	ldr	r3, [r5, #4]
 8006544:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8006546:	6822      	ldr	r2, [r4, #0]
 8006548:	f1b2 3fff 	cmp.w	r2, #4294967295
 800654c:	d028      	beq.n	80065a0 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800654e:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80065b4 <xTaskCheckForTimeOut+0x84>
 8006552:	f8dc c000 	ldr.w	ip, [ip]
 8006556:	682e      	ldr	r6, [r5, #0]
 8006558:	4566      	cmp	r6, ip
 800655a:	d001      	beq.n	8006560 <xTaskCheckForTimeOut+0x30>
 800655c:	428b      	cmp	r3, r1
 800655e:	d924      	bls.n	80065aa <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006560:	4282      	cmp	r2, r0
 8006562:	d815      	bhi.n	8006590 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006568:	2401      	movs	r4, #1
 800656a:	e01a      	b.n	80065a2 <xTaskCheckForTimeOut+0x72>
 800656c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800657c:	e7fe      	b.n	800657c <xTaskCheckForTimeOut+0x4c>
 800657e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800658e:	e7fe      	b.n	800658e <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 8006590:	1a5b      	subs	r3, r3, r1
 8006592:	4413      	add	r3, r2
 8006594:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006596:	4628      	mov	r0, r5
 8006598:	f7ff ffbe 	bl	8006518 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800659c:	2400      	movs	r4, #0
 800659e:	e000      	b.n	80065a2 <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 80065a0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80065a2:	f7fb f8f1 	bl	8001788 <vPortExitCritical>
}
 80065a6:	4620      	mov	r0, r4
 80065a8:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 80065aa:	2401      	movs	r4, #1
 80065ac:	e7f9      	b.n	80065a2 <xTaskCheckForTimeOut+0x72>
 80065ae:	bf00      	nop
 80065b0:	20005500 	.word	0x20005500
 80065b4:	200054ec 	.word	0x200054ec

080065b8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80065b8:	4b01      	ldr	r3, [pc, #4]	@ (80065c0 <vTaskMissedYield+0x8>)
 80065ba:	2201      	movs	r2, #1
 80065bc:	601a      	str	r2, [r3, #0]
}
 80065be:	4770      	bx	lr
 80065c0:	200054f0 	.word	0x200054f0

080065c4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80065c4:	4b05      	ldr	r3, [pc, #20]	@ (80065dc <xTaskGetSchedulerState+0x18>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	b133      	cbz	r3, 80065d8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ca:	4b05      	ldr	r3, [pc, #20]	@ (80065e0 <xTaskGetSchedulerState+0x1c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	b10b      	cbz	r3, 80065d4 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80065d0:	2000      	movs	r0, #0
	}
 80065d2:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80065d4:	2002      	movs	r0, #2
 80065d6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065d8:	2001      	movs	r0, #1
 80065da:	4770      	bx	lr
 80065dc:	200054f8 	.word	0x200054f8
 80065e0:	200054dc 	.word	0x200054dc

080065e4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d03b      	beq.n	8006660 <xTaskPriorityDisinherit+0x7c>
	{
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80065ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006668 <xTaskPriorityDisinherit+0x84>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4283      	cmp	r3, r0
 80065f2:	d008      	beq.n	8006606 <xTaskPriorityDisinherit+0x22>
 80065f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	e7fe      	b.n	8006604 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006606:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006608:	b943      	cbnz	r3, 800661c <xTaskPriorityDisinherit+0x38>
 800660a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	e7fe      	b.n	800661a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800661c:	3b01      	subs	r3, #1
 800661e:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006620:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006622:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8006624:	4291      	cmp	r1, r2
 8006626:	d01d      	beq.n	8006664 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006628:	b10b      	cbz	r3, 800662e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800662a:	2000      	movs	r0, #0
	}
 800662c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800662e:	1d05      	adds	r5, r0, #4
 8006630:	4628      	mov	r0, r5
 8006632:	f7fa ff87 	bl	8001544 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006636:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8006638:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800663a:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 800663e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006640:	4b0a      	ldr	r3, [pc, #40]	@ (800666c <xTaskPriorityDisinherit+0x88>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4298      	cmp	r0, r3
 8006646:	d901      	bls.n	800664c <xTaskPriorityDisinherit+0x68>
 8006648:	4b08      	ldr	r3, [pc, #32]	@ (800666c <xTaskPriorityDisinherit+0x88>)
 800664a:	6018      	str	r0, [r3, #0]
 800664c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006650:	4629      	mov	r1, r5
 8006652:	4b07      	ldr	r3, [pc, #28]	@ (8006670 <xTaskPriorityDisinherit+0x8c>)
 8006654:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006658:	f7fa ff50 	bl	80014fc <vListInsertEnd>
					xReturn = pdTRUE;
 800665c:	2001      	movs	r0, #1
 800665e:	e7e5      	b.n	800662c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8006660:	2000      	movs	r0, #0
	}
 8006662:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8006664:	2000      	movs	r0, #0
 8006666:	e7e1      	b.n	800662c <xTaskPriorityDisinherit+0x48>
 8006668:	200059d8 	.word	0x200059d8
 800666c:	200054fc 	.word	0x200054fc
 8006670:	20005578 	.word	0x20005578

08006674 <thermistor_init>:
#include "thermistor.h"
#include "utils.h"


void thermistor_init(thermistor_t *thermistor, thermistor_conf_t cfg)
{
 8006674:	b084      	sub	sp, #16
 8006676:	b510      	push	{r4, lr}
 8006678:	ed2d 8b02 	vpush	{d8}
 800667c:	f10d 0c14 	add.w	ip, sp, #20
 8006680:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
    if (thermistor == NULL)
 8006684:	2800      	cmp	r0, #0
 8006686:	d060      	beq.n	800674a <thermistor_init+0xd6>
 8006688:	4604      	mov	r4, r0
        log_error("Thermistor init failed!");
        return;
    }

    // https://en.wikipedia.org/wiki/Steinhart%E2%80%93Hart_equation
	float l1 = logf(cfg.resistance_1);
 800668a:	ed9d 0a08 	vldr	s0, [sp, #32]
 800668e:	f002 ff3f 	bl	8009510 <logf>
 8006692:	eef0 8a40 	vmov.f32	s17, s0
	float l2 = logf(cfg.resistance_2);
 8006696:	ed9d 0a09 	vldr	s0, [sp, #36]	@ 0x24
 800669a:	f002 ff39 	bl	8009510 <logf>
 800669e:	eeb0 8a40 	vmov.f32	s16, s0
	float l3 = logf(cfg.resistance_3);
 80066a2:	ed9d 0a0a 	vldr	s0, [sp, #40]	@ 0x28
 80066a6:	f002 ff33 	bl	8009510 <logf>

	float y1 = 1 / CELSIUS_TO_KELVIN(cfg.tempC_1);
 80066aa:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 8006754 <thermistor_init+0xe0>
 80066ae:	eddd 7a05 	vldr	s15, [sp, #20]
 80066b2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80066b6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80066ba:	eec5 6aa7 	vdiv.f32	s13, s11, s15
	float y2 = 1 / CELSIUS_TO_KELVIN(cfg.tempC_2);
 80066be:	eddd 7a06 	vldr	s15, [sp, #24]
 80066c2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80066c6:	ee85 7aa7 	vdiv.f32	s14, s11, s15
	float y3 = 1 / CELSIUS_TO_KELVIN(cfg.tempC_3);
 80066ca:	eddd 7a07 	vldr	s15, [sp, #28]
 80066ce:	ee77 7a86 	vadd.f32	s15, s15, s12
 80066d2:	ee85 6aa7 	vdiv.f32	s12, s11, s15

	float u2 = (y2 - y1) / (l2 - l1);
 80066d6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80066da:	ee78 5a68 	vsub.f32	s11, s16, s17
 80066de:	eec7 7a25 	vdiv.f32	s15, s14, s11
	float u3 = (y3 - y1) / (l3 - l1);
 80066e2:	ee36 6a66 	vsub.f32	s12, s12, s13
 80066e6:	ee70 5a68 	vsub.f32	s11, s0, s17
 80066ea:	ee86 7a25 	vdiv.f32	s14, s12, s11

	thermistor->m_c = ((u3 - u2) / (l3 - l2)) / (l1 + l2 + l3);
 80066ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80066f2:	ee30 6a48 	vsub.f32	s12, s0, s16
 80066f6:	eec7 5a06 	vdiv.f32	s11, s14, s12
 80066fa:	ee38 7a88 	vadd.f32	s14, s17, s16
 80066fe:	ee37 7a00 	vadd.f32	s14, s14, s0
 8006702:	ee85 6a87 	vdiv.f32	s12, s11, s14
 8006706:	ed84 6a05 	vstr	s12, [r4, #20]
	thermistor->m_b = u2 - thermistor->m_c * (l1 * l1 + l1 * l2 + l2 * l2);
 800670a:	ee68 5aa8 	vmul.f32	s11, s17, s17
 800670e:	ee28 7a88 	vmul.f32	s14, s17, s16
 8006712:	ee35 7a87 	vadd.f32	s14, s11, s14
 8006716:	ee28 8a08 	vmul.f32	s16, s16, s16
 800671a:	ee37 7a08 	vadd.f32	s14, s14, s16
 800671e:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006722:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006726:	edc4 7a04 	vstr	s15, [r4, #16]
	thermistor->m_a = y1 - (thermistor->m_b + l1 * l1 * thermistor->m_c) * l1;
 800672a:	ee26 6a25 	vmul.f32	s12, s12, s11
 800672e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006732:	ee27 0aa8 	vmul.f32	s0, s15, s17
 8006736:	ee76 6ac0 	vsub.f32	s13, s13, s0
 800673a:	edc4 6a03 	vstr	s13, [r4, #12]
	if (tempAt90percentPoint > cfg.tempC_3)
    {
        log_error("Thermistor configuration has failed 90% test");
	}
    */
}
 800673e:	ecbd 8b02 	vpop	{d8}
 8006742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006746:	b004      	add	sp, #16
 8006748:	4770      	bx	lr
        log_error("Thermistor init failed!");
 800674a:	4803      	ldr	r0, [pc, #12]	@ (8006758 <thermistor_init+0xe4>)
 800674c:	f7fa f9be 	bl	8000acc <log_error>
        return;
 8006750:	e7f5      	b.n	800673e <thermistor_init+0xca>
 8006752:	bf00      	nop
 8006754:	43889333 	.word	0x43889333
 8006758:	08009d9c 	.word	0x08009d9c

0800675c <thermistor_get_temp>:

temperature_t thermistor_get_temp(thermistor_t *thermistor)
{
 800675c:	b510      	push	{r4, lr}
 800675e:	4604      	mov	r4, r0
    // This resistance should have already been validated - only
	// thing we can check is that it's non-negative
    float ohms = resistor_get_resistance(&thermistor->resistor);
 8006760:	f7fb fca8 	bl	80020b4 <resistor_get_resistance>
    {
        log_error("Thermistor invalid resistance!");
        return NAN;
    }

	float lnR = logf(ohms);
 8006764:	f002 fed4 	bl	8009510 <logf>

	float lnR3 = lnR * lnR * lnR;
 8006768:	ee60 6a00 	vmul.f32	s13, s0, s0
 800676c:	ee66 6a80 	vmul.f32	s13, s13, s0

	float recip = thermistor->m_a + thermistor->m_b * lnR + thermistor->m_c * lnR3;
 8006770:	edd4 7a03 	vldr	s15, [r4, #12]
 8006774:	ed94 7a04 	vldr	s14, [r4, #16]
 8006778:	ee27 7a00 	vmul.f32	s14, s14, s0
 800677c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006780:	ed94 7a05 	vldr	s14, [r4, #20]
 8006784:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006788:	ee77 7a87 	vadd.f32	s15, s15, s14

	float kelvin = 1 / recip;
 800678c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006790:	ee87 0a27 	vdiv.f32	s0, s14, s15

	float celsius = KELVIN_TO_CELSIUS(kelvin);
 8006794:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80067d4 <thermistor_get_temp+0x78>
 8006798:	ee30 0a67 	vsub.f32	s0, s0, s15

	// bounds check result - please don't try to run this SGC when it is colder than -50C :)
	if (celsius < -50) {
 800679c:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80067d8 <thermistor_get_temp+0x7c>
 80067a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80067a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067a8:	d407      	bmi.n	80067ba <thermistor_get_temp+0x5e>
		log_error("Thermistor temp bound check failed!");
        return NAN;
	}

	if (celsius > 250) {
 80067aa:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80067dc <thermistor_get_temp+0x80>
 80067ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80067b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b6:	dc06      	bgt.n	80067c6 <thermistor_get_temp+0x6a>
		log_error("Thermistor temp bound check failed!");
        return NAN;
	}

	return celsius;
 80067b8:	bd10      	pop	{r4, pc}
		log_error("Thermistor temp bound check failed!");
 80067ba:	4809      	ldr	r0, [pc, #36]	@ (80067e0 <thermistor_get_temp+0x84>)
 80067bc:	f7fa f986 	bl	8000acc <log_error>
        return NAN;
 80067c0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80067e4 <thermistor_get_temp+0x88>
 80067c4:	e7f8      	b.n	80067b8 <thermistor_get_temp+0x5c>
		log_error("Thermistor temp bound check failed!");
 80067c6:	4806      	ldr	r0, [pc, #24]	@ (80067e0 <thermistor_get_temp+0x84>)
 80067c8:	f7fa f980 	bl	8000acc <log_error>
        return NAN;
 80067cc:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 80067e4 <thermistor_get_temp+0x88>
 80067d0:	e7f2      	b.n	80067b8 <thermistor_get_temp+0x5c>
 80067d2:	bf00      	nop
 80067d4:	43889333 	.word	0x43889333
 80067d8:	c2480000 	.word	0xc2480000
 80067dc:	437a0000 	.word	0x437a0000
 80067e0:	08009db4 	.word	0x08009db4
 80067e4:	7fc00000 	.word	0x7fc00000

080067e8 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80067e8:	b500      	push	{lr}
 80067ea:	b08f      	sub	sp, #60	@ 0x3c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80067ec:	2300      	movs	r3, #0
 80067ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80067f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80067f4:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067f6:	9308      	str	r3, [sp, #32]
 80067f8:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	9302      	str	r3, [sp, #8]
 80067fe:	9303      	str	r3, [sp, #12]
 8006800:	9304      	str	r3, [sp, #16]
 8006802:	9305      	str	r3, [sp, #20]
 8006804:	9306      	str	r3, [sp, #24]
 8006806:	9307      	str	r3, [sp, #28]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006808:	481f      	ldr	r0, [pc, #124]	@ (8006888 <MX_TIM2_Init+0xa0>)
 800680a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800680e:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 84-1;
 8006810:	2253      	movs	r2, #83	@ 0x53
 8006812:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006814:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8006816:	f04f 32ff 	mov.w	r2, #4294967295
 800681a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800681c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800681e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006820:	f7fd ffcc 	bl	80047bc <HAL_TIM_Base_Init>
 8006824:	bb00      	cbnz	r0, 8006868 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800682a:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800682c:	a90a      	add	r1, sp, #40	@ 0x28
 800682e:	4816      	ldr	r0, [pc, #88]	@ (8006888 <MX_TIM2_Init+0xa0>)
 8006830:	f7fe f920 	bl	8004a74 <HAL_TIM_ConfigClockSource>
 8006834:	b9d8      	cbnz	r0, 800686e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8006836:	4814      	ldr	r0, [pc, #80]	@ (8006888 <MX_TIM2_Init+0xa0>)
 8006838:	f7fd ffec 	bl	8004814 <HAL_TIM_OC_Init>
 800683c:	b9d0      	cbnz	r0, 8006874 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800683e:	2300      	movs	r3, #0
 8006840:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006842:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006844:	a908      	add	r1, sp, #32
 8006846:	4810      	ldr	r0, [pc, #64]	@ (8006888 <MX_TIM2_Init+0xa0>)
 8006848:	f7fe fa4c 	bl	8004ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800684c:	b9a8      	cbnz	r0, 800687a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800684e:	2200      	movs	r2, #0
 8006850:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8006852:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006854:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006856:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006858:	a901      	add	r1, sp, #4
 800685a:	480b      	ldr	r0, [pc, #44]	@ (8006888 <MX_TIM2_Init+0xa0>)
 800685c:	f7fe f860 	bl	8004920 <HAL_TIM_OC_ConfigChannel>
 8006860:	b970      	cbnz	r0, 8006880 <MX_TIM2_Init+0x98>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006862:	b00f      	add	sp, #60	@ 0x3c
 8006864:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006868:	f7fa fe94 	bl	8001594 <Error_Handler>
 800686c:	e7db      	b.n	8006826 <MX_TIM2_Init+0x3e>
    Error_Handler();
 800686e:	f7fa fe91 	bl	8001594 <Error_Handler>
 8006872:	e7e0      	b.n	8006836 <MX_TIM2_Init+0x4e>
    Error_Handler();
 8006874:	f7fa fe8e 	bl	8001594 <Error_Handler>
 8006878:	e7e1      	b.n	800683e <MX_TIM2_Init+0x56>
    Error_Handler();
 800687a:	f7fa fe8b 	bl	8001594 <Error_Handler>
 800687e:	e7e6      	b.n	800684e <MX_TIM2_Init+0x66>
    Error_Handler();
 8006880:	f7fa fe88 	bl	8001594 <Error_Handler>
}
 8006884:	e7ed      	b.n	8006862 <MX_TIM2_Init+0x7a>
 8006886:	bf00      	nop
 8006888:	20005a24 	.word	0x20005a24

0800688c <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800688c:	b500      	push	{lr}
 800688e:	b083      	sub	sp, #12

  if(tim_pwmHandle->Instance==TIM1)
 8006890:	6803      	ldr	r3, [r0, #0]
 8006892:	4a15      	ldr	r2, [pc, #84]	@ (80068e8 <HAL_TIM_PWM_MspInit+0x5c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d005      	beq.n	80068a4 <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM3)
 8006898:	4a14      	ldr	r2, [pc, #80]	@ (80068ec <HAL_TIM_PWM_MspInit+0x60>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d016      	beq.n	80068cc <HAL_TIM_PWM_MspInit+0x40>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800689e:	b003      	add	sp, #12
 80068a0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80068a4:	2200      	movs	r2, #0
 80068a6:	9200      	str	r2, [sp, #0]
 80068a8:	4b11      	ldr	r3, [pc, #68]	@ (80068f0 <HAL_TIM_PWM_MspInit+0x64>)
 80068aa:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80068ac:	f041 0101 	orr.w	r1, r1, #1
 80068b0:	6459      	str	r1, [r3, #68]	@ 0x44
 80068b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 80068bc:	210f      	movs	r1, #15
 80068be:	201a      	movs	r0, #26
 80068c0:	f7fc f8d2 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80068c4:	201a      	movs	r0, #26
 80068c6:	f7fc f8df 	bl	8002a88 <HAL_NVIC_EnableIRQ>
 80068ca:	e7e8      	b.n	800689e <HAL_TIM_PWM_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80068cc:	2300      	movs	r3, #0
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	4b07      	ldr	r3, [pc, #28]	@ (80068f0 <HAL_TIM_PWM_MspInit+0x64>)
 80068d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068d4:	f042 0202 	orr.w	r2, r2, #2
 80068d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80068da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	9b01      	ldr	r3, [sp, #4]
}
 80068e4:	e7db      	b.n	800689e <HAL_TIM_PWM_MspInit+0x12>
 80068e6:	bf00      	nop
 80068e8:	40010000 	.word	0x40010000
 80068ec:	40000400 	.word	0x40000400
 80068f0:	40023800 	.word	0x40023800

080068f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80068f4:	6803      	ldr	r3, [r0, #0]
 80068f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068fa:	d000      	beq.n	80068fe <HAL_TIM_Base_MspInit+0xa>
 80068fc:	4770      	bx	lr
{
 80068fe:	b500      	push	{lr}
 8006900:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006902:	2200      	movs	r2, #0
 8006904:	9201      	str	r2, [sp, #4]
 8006906:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 800690a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800690c:	f041 0101 	orr.w	r1, r1, #1
 8006910:	6419      	str	r1, [r3, #64]	@ 0x40
 8006912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	9b01      	ldr	r3, [sp, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800691c:	2105      	movs	r1, #5
 800691e:	201c      	movs	r0, #28
 8006920:	f7fc f8a2 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006924:	201c      	movs	r0, #28
 8006926:	f7fc f8af 	bl	8002a88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800692a:	b003      	add	sp, #12
 800692c:	f85d fb04 	ldr.w	pc, [sp], #4

08006930 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006930:	b500      	push	{lr}
 8006932:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006934:	2300      	movs	r3, #0
 8006936:	9303      	str	r3, [sp, #12]
 8006938:	9304      	str	r3, [sp, #16]
 800693a:	9305      	str	r3, [sp, #20]
 800693c:	9306      	str	r3, [sp, #24]
 800693e:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 8006940:	6803      	ldr	r3, [r0, #0]
 8006942:	4a1c      	ldr	r2, [pc, #112]	@ (80069b4 <HAL_TIM_MspPostInit+0x84>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d005      	beq.n	8006954 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 8006948:	4a1b      	ldr	r2, [pc, #108]	@ (80069b8 <HAL_TIM_MspPostInit+0x88>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d01a      	beq.n	8006984 <HAL_TIM_MspPostInit+0x54>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800694e:	b009      	add	sp, #36	@ 0x24
 8006950:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006954:	2300      	movs	r3, #0
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	4b18      	ldr	r3, [pc, #96]	@ (80069bc <HAL_TIM_MspPostInit+0x8c>)
 800695a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800695c:	f042 0201 	orr.w	r2, r2, #1
 8006960:	631a      	str	r2, [r3, #48]	@ 0x30
 8006962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ETB1_MOTOR1_Pin|ETB1_MOTOR2_Pin;
 800696c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006970:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006972:	2302      	movs	r3, #2
 8006974:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006976:	2301      	movs	r3, #1
 8006978:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800697a:	a903      	add	r1, sp, #12
 800697c:	4810      	ldr	r0, [pc, #64]	@ (80069c0 <HAL_TIM_MspPostInit+0x90>)
 800697e:	f7fc fa9b 	bl	8002eb8 <HAL_GPIO_Init>
 8006982:	e7e4      	b.n	800694e <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006984:	2300      	movs	r3, #0
 8006986:	9302      	str	r3, [sp, #8]
 8006988:	4b0c      	ldr	r3, [pc, #48]	@ (80069bc <HAL_TIM_MspPostInit+0x8c>)
 800698a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800698c:	f042 0204 	orr.w	r2, r2, #4
 8006990:	631a      	str	r2, [r3, #48]	@ 0x30
 8006992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	9302      	str	r3, [sp, #8]
 800699a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM_OUT1_Pin|PWM_OUT2_Pin|PWM_OUT3_Pin|PWM_OUT4_Pin;
 800699c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80069a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069a2:	2302      	movs	r3, #2
 80069a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80069a6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069a8:	a903      	add	r1, sp, #12
 80069aa:	4806      	ldr	r0, [pc, #24]	@ (80069c4 <HAL_TIM_MspPostInit+0x94>)
 80069ac:	f7fc fa84 	bl	8002eb8 <HAL_GPIO_Init>
}
 80069b0:	e7cd      	b.n	800694e <HAL_TIM_MspPostInit+0x1e>
 80069b2:	bf00      	nop
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40000400 	.word	0x40000400
 80069bc:	40023800 	.word	0x40023800
 80069c0:	40020000 	.word	0x40020000
 80069c4:	40020800 	.word	0x40020800

080069c8 <MX_TIM1_Init>:
{
 80069c8:	b510      	push	{r4, lr}
 80069ca:	b092      	sub	sp, #72	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069cc:	2400      	movs	r4, #0
 80069ce:	9410      	str	r4, [sp, #64]	@ 0x40
 80069d0:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 80069d2:	9409      	str	r4, [sp, #36]	@ 0x24
 80069d4:	940a      	str	r4, [sp, #40]	@ 0x28
 80069d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80069d8:	940c      	str	r4, [sp, #48]	@ 0x30
 80069da:	940d      	str	r4, [sp, #52]	@ 0x34
 80069dc:	940e      	str	r4, [sp, #56]	@ 0x38
 80069de:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80069e0:	2220      	movs	r2, #32
 80069e2:	4621      	mov	r1, r4
 80069e4:	a801      	add	r0, sp, #4
 80069e6:	f002 f90f 	bl	8008c08 <memset>
  htim1.Instance = TIM1;
 80069ea:	4827      	ldr	r0, [pc, #156]	@ (8006a88 <MX_TIM1_Init+0xc0>)
 80069ec:	4b27      	ldr	r3, [pc, #156]	@ (8006a8c <MX_TIM1_Init+0xc4>)
 80069ee:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80069f0:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069f2:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 65535;
 80069f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069f8:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069fa:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80069fc:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069fe:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006a00:	f7fd ff34 	bl	800486c <HAL_TIM_PWM_Init>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d130      	bne.n	8006a6a <MX_TIM1_Init+0xa2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a0c:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006a0e:	a910      	add	r1, sp, #64	@ 0x40
 8006a10:	481d      	ldr	r0, [pc, #116]	@ (8006a88 <MX_TIM1_Init+0xc0>)
 8006a12:	f7fe f967 	bl	8004ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d12a      	bne.n	8006a70 <MX_TIM1_Init+0xa8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a1a:	2360      	movs	r3, #96	@ 0x60
 8006a1c:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8006a1e:	2200      	movs	r2, #0
 8006a20:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a22:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006a24:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006a26:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006a28:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006a2a:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006a2c:	a909      	add	r1, sp, #36	@ 0x24
 8006a2e:	4816      	ldr	r0, [pc, #88]	@ (8006a88 <MX_TIM1_Init+0xc0>)
 8006a30:	f7fd ffa5 	bl	800497e <HAL_TIM_PWM_ConfigChannel>
 8006a34:	b9f8      	cbnz	r0, 8006a76 <MX_TIM1_Init+0xae>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006a36:	2204      	movs	r2, #4
 8006a38:	a909      	add	r1, sp, #36	@ 0x24
 8006a3a:	4813      	ldr	r0, [pc, #76]	@ (8006a88 <MX_TIM1_Init+0xc0>)
 8006a3c:	f7fd ff9f 	bl	800497e <HAL_TIM_PWM_ConfigChannel>
 8006a40:	b9e0      	cbnz	r0, 8006a7c <MX_TIM1_Init+0xb4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006a46:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006a48:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006a4a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006a4c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006a4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006a52:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006a54:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006a56:	a901      	add	r1, sp, #4
 8006a58:	480b      	ldr	r0, [pc, #44]	@ (8006a88 <MX_TIM1_Init+0xc0>)
 8006a5a:	f7fe f981 	bl	8004d60 <HAL_TIMEx_ConfigBreakDeadTime>
 8006a5e:	b980      	cbnz	r0, 8006a82 <MX_TIM1_Init+0xba>
  HAL_TIM_MspPostInit(&htim1);
 8006a60:	4809      	ldr	r0, [pc, #36]	@ (8006a88 <MX_TIM1_Init+0xc0>)
 8006a62:	f7ff ff65 	bl	8006930 <HAL_TIM_MspPostInit>
}
 8006a66:	b012      	add	sp, #72	@ 0x48
 8006a68:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006a6a:	f7fa fd93 	bl	8001594 <Error_Handler>
 8006a6e:	e7cb      	b.n	8006a08 <MX_TIM1_Init+0x40>
    Error_Handler();
 8006a70:	f7fa fd90 	bl	8001594 <Error_Handler>
 8006a74:	e7d1      	b.n	8006a1a <MX_TIM1_Init+0x52>
    Error_Handler();
 8006a76:	f7fa fd8d 	bl	8001594 <Error_Handler>
 8006a7a:	e7dc      	b.n	8006a36 <MX_TIM1_Init+0x6e>
    Error_Handler();
 8006a7c:	f7fa fd8a 	bl	8001594 <Error_Handler>
 8006a80:	e7df      	b.n	8006a42 <MX_TIM1_Init+0x7a>
    Error_Handler();
 8006a82:	f7fa fd87 	bl	8001594 <Error_Handler>
 8006a86:	e7eb      	b.n	8006a60 <MX_TIM1_Init+0x98>
 8006a88:	20005a6c 	.word	0x20005a6c
 8006a8c:	40010000 	.word	0x40010000

08006a90 <MX_TIM3_Init>:
{
 8006a90:	b500      	push	{lr}
 8006a92:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a94:	2300      	movs	r3, #0
 8006a96:	9308      	str	r3, [sp, #32]
 8006a98:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	9302      	str	r3, [sp, #8]
 8006a9e:	9303      	str	r3, [sp, #12]
 8006aa0:	9304      	str	r3, [sp, #16]
 8006aa2:	9305      	str	r3, [sp, #20]
 8006aa4:	9306      	str	r3, [sp, #24]
 8006aa6:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8006aa8:	4825      	ldr	r0, [pc, #148]	@ (8006b40 <MX_TIM3_Init+0xb0>)
 8006aaa:	4a26      	ldr	r2, [pc, #152]	@ (8006b44 <MX_TIM3_Init+0xb4>)
 8006aac:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8006aae:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ab0:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8006ab2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ab6:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ab8:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006aba:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006abc:	f7fd fed6 	bl	800486c <HAL_TIM_PWM_Init>
 8006ac0:	bb58      	cbnz	r0, 8006b1a <MX_TIM3_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ac6:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006ac8:	a908      	add	r1, sp, #32
 8006aca:	481d      	ldr	r0, [pc, #116]	@ (8006b40 <MX_TIM3_Init+0xb0>)
 8006acc:	f7fe f90a 	bl	8004ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8006ad0:	bb30      	cbnz	r0, 8006b20 <MX_TIM3_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006ad2:	2360      	movs	r3, #96	@ 0x60
 8006ad4:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ada:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006adc:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006ade:	a901      	add	r1, sp, #4
 8006ae0:	4817      	ldr	r0, [pc, #92]	@ (8006b40 <MX_TIM3_Init+0xb0>)
 8006ae2:	f7fd ff4c 	bl	800497e <HAL_TIM_PWM_ConfigChannel>
 8006ae6:	b9f0      	cbnz	r0, 8006b26 <MX_TIM3_Init+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006ae8:	2204      	movs	r2, #4
 8006aea:	eb0d 0102 	add.w	r1, sp, r2
 8006aee:	4814      	ldr	r0, [pc, #80]	@ (8006b40 <MX_TIM3_Init+0xb0>)
 8006af0:	f7fd ff45 	bl	800497e <HAL_TIM_PWM_ConfigChannel>
 8006af4:	b9d0      	cbnz	r0, 8006b2c <MX_TIM3_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006af6:	2208      	movs	r2, #8
 8006af8:	a901      	add	r1, sp, #4
 8006afa:	4811      	ldr	r0, [pc, #68]	@ (8006b40 <MX_TIM3_Init+0xb0>)
 8006afc:	f7fd ff3f 	bl	800497e <HAL_TIM_PWM_ConfigChannel>
 8006b00:	b9b8      	cbnz	r0, 8006b32 <MX_TIM3_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006b02:	220c      	movs	r2, #12
 8006b04:	a901      	add	r1, sp, #4
 8006b06:	480e      	ldr	r0, [pc, #56]	@ (8006b40 <MX_TIM3_Init+0xb0>)
 8006b08:	f7fd ff39 	bl	800497e <HAL_TIM_PWM_ConfigChannel>
 8006b0c:	b9a0      	cbnz	r0, 8006b38 <MX_TIM3_Init+0xa8>
  HAL_TIM_MspPostInit(&htim3);
 8006b0e:	480c      	ldr	r0, [pc, #48]	@ (8006b40 <MX_TIM3_Init+0xb0>)
 8006b10:	f7ff ff0e 	bl	8006930 <HAL_TIM_MspPostInit>
}
 8006b14:	b00b      	add	sp, #44	@ 0x2c
 8006b16:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006b1a:	f7fa fd3b 	bl	8001594 <Error_Handler>
 8006b1e:	e7d0      	b.n	8006ac2 <MX_TIM3_Init+0x32>
    Error_Handler();
 8006b20:	f7fa fd38 	bl	8001594 <Error_Handler>
 8006b24:	e7d5      	b.n	8006ad2 <MX_TIM3_Init+0x42>
    Error_Handler();
 8006b26:	f7fa fd35 	bl	8001594 <Error_Handler>
 8006b2a:	e7dd      	b.n	8006ae8 <MX_TIM3_Init+0x58>
    Error_Handler();
 8006b2c:	f7fa fd32 	bl	8001594 <Error_Handler>
 8006b30:	e7e1      	b.n	8006af6 <MX_TIM3_Init+0x66>
    Error_Handler();
 8006b32:	f7fa fd2f 	bl	8001594 <Error_Handler>
 8006b36:	e7e4      	b.n	8006b02 <MX_TIM3_Init+0x72>
    Error_Handler();
 8006b38:	f7fa fd2c 	bl	8001594 <Error_Handler>
 8006b3c:	e7e7      	b.n	8006b0e <MX_TIM3_Init+0x7e>
 8006b3e:	bf00      	nop
 8006b40:	200059dc 	.word	0x200059dc
 8006b44:	40000400 	.word	0x40000400

08006b48 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b48:	4b06      	ldr	r3, [pc, #24]	@ (8006b64 <prvGetNextExpireTime+0x1c>)
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	6813      	ldr	r3, [r2, #0]
 8006b4e:	b92b      	cbnz	r3, 8006b5c <prvGetNextExpireTime+0x14>
 8006b50:	2301      	movs	r3, #1
 8006b52:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b54:	b923      	cbnz	r3, 8006b60 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b56:	68d3      	ldr	r3, [r2, #12]
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	e7f8      	b.n	8006b52 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b60:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8006b62:	4770      	bx	lr
 8006b64:	20005bb4 	.word	0x20005bb4

08006b68 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b68:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b6a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b6c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b6e:	4291      	cmp	r1, r2
 8006b70:	d80c      	bhi.n	8006b8c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b72:	1ad2      	subs	r2, r2, r3
 8006b74:	6983      	ldr	r3, [r0, #24]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d301      	bcc.n	8006b7e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b7a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8006b7c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b7e:	1d01      	adds	r1, r0, #4
 8006b80:	4b09      	ldr	r3, [pc, #36]	@ (8006ba8 <prvInsertTimerInActiveList+0x40>)
 8006b82:	6818      	ldr	r0, [r3, #0]
 8006b84:	f7fa fcc5 	bl	8001512 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006b88:	2000      	movs	r0, #0
 8006b8a:	e7f7      	b.n	8006b7c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d201      	bcs.n	8006b94 <prvInsertTimerInActiveList+0x2c>
 8006b90:	4299      	cmp	r1, r3
 8006b92:	d206      	bcs.n	8006ba2 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b94:	1d01      	adds	r1, r0, #4
 8006b96:	4b05      	ldr	r3, [pc, #20]	@ (8006bac <prvInsertTimerInActiveList+0x44>)
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	f7fa fcba 	bl	8001512 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	e7ec      	b.n	8006b7c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8006ba2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8006ba4:	e7ea      	b.n	8006b7c <prvInsertTimerInActiveList+0x14>
 8006ba6:	bf00      	nop
 8006ba8:	20005bb0 	.word	0x20005bb0
 8006bac:	20005bb4 	.word	0x20005bb4

08006bb0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006bb0:	b530      	push	{r4, r5, lr}
 8006bb2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006bb4:	f7fa fdc6 	bl	8001744 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006bb8:	4b11      	ldr	r3, [pc, #68]	@ (8006c00 <prvCheckForValidListAndQueue+0x50>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	b11b      	cbz	r3, 8006bc6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bbe:	f7fa fde3 	bl	8001788 <vPortExitCritical>
}
 8006bc2:	b003      	add	sp, #12
 8006bc4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8006bc6:	4d0f      	ldr	r5, [pc, #60]	@ (8006c04 <prvCheckForValidListAndQueue+0x54>)
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f7fa fc89 	bl	80014e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006bce:	4c0e      	ldr	r4, [pc, #56]	@ (8006c08 <prvCheckForValidListAndQueue+0x58>)
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f7fa fc85 	bl	80014e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c0c <prvCheckForValidListAndQueue+0x5c>)
 8006bd8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006bda:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <prvCheckForValidListAndQueue+0x60>)
 8006bdc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006bde:	2300      	movs	r3, #0
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c14 <prvCheckForValidListAndQueue+0x64>)
 8006be4:	4a0c      	ldr	r2, [pc, #48]	@ (8006c18 <prvCheckForValidListAndQueue+0x68>)
 8006be6:	2110      	movs	r1, #16
 8006be8:	200a      	movs	r0, #10
 8006bea:	f7fa fff2 	bl	8001bd2 <xQueueGenericCreateStatic>
 8006bee:	4b04      	ldr	r3, [pc, #16]	@ (8006c00 <prvCheckForValidListAndQueue+0x50>)
 8006bf0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d0e3      	beq.n	8006bbe <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006bf6:	4909      	ldr	r1, [pc, #36]	@ (8006c1c <prvCheckForValidListAndQueue+0x6c>)
 8006bf8:	f7fb fa10 	bl	800201c <vQueueAddToRegistry>
 8006bfc:	e7df      	b.n	8006bbe <prvCheckForValidListAndQueue+0xe>
 8006bfe:	bf00      	nop
 8006c00:	20005bac 	.word	0x20005bac
 8006c04:	20005bcc 	.word	0x20005bcc
 8006c08:	20005bb8 	.word	0x20005bb8
 8006c0c:	20005bb4 	.word	0x20005bb4
 8006c10:	20005bb0 	.word	0x20005bb0
 8006c14:	20005ab4 	.word	0x20005ab4
 8006c18:	20005b04 	.word	0x20005b04
 8006c1c:	08009dd8 	.word	0x08009dd8

08006c20 <prvInitialiseNewTimer>:
{
 8006c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c24:	9f07      	ldr	r7, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006c26:	b941      	cbnz	r1, 8006c3a <prvInitialiseNewTimer+0x1a>
 8006c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	e7fe      	b.n	8006c38 <prvInitialiseNewTimer+0x18>
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	4614      	mov	r4, r2
 8006c3e:	461d      	mov	r5, r3
 8006c40:	4688      	mov	r8, r1
	if( pxNewTimer != NULL )
 8006c42:	b18f      	cbz	r7, 8006c68 <prvInitialiseNewTimer+0x48>
		prvCheckForValidListAndQueue();
 8006c44:	f7ff ffb4 	bl	8006bb0 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8006c48:	603e      	str	r6, [r7, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006c4a:	f8c7 8018 	str.w	r8, [r7, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006c4e:	61fd      	str	r5, [r7, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006c50:	9b06      	ldr	r3, [sp, #24]
 8006c52:	623b      	str	r3, [r7, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006c54:	1d38      	adds	r0, r7, #4
 8006c56:	f7fa fc4e 	bl	80014f6 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006c5a:	b12c      	cbz	r4, 8006c68 <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006c5c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c60:	f043 0304 	orr.w	r3, r3, #4
 8006c64:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
}
 8006c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006c6c <xTimerCreateTimerTask>:
{
 8006c6c:	b510      	push	{r4, lr}
 8006c6e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8006c70:	f7ff ff9e 	bl	8006bb0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006c74:	4b12      	ldr	r3, [pc, #72]	@ (8006cc0 <xTimerCreateTimerTask+0x54>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	b1cb      	cbz	r3, 8006cae <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c7a:	2400      	movs	r4, #0
 8006c7c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c7e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c80:	aa07      	add	r2, sp, #28
 8006c82:	a906      	add	r1, sp, #24
 8006c84:	a805      	add	r0, sp, #20
 8006c86:	f7f9 fe5f 	bl	8000948 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c8a:	9b05      	ldr	r3, [sp, #20]
 8006c8c:	9302      	str	r3, [sp, #8]
 8006c8e:	9b06      	ldr	r3, [sp, #24]
 8006c90:	9301      	str	r3, [sp, #4]
 8006c92:	2302      	movs	r3, #2
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	4623      	mov	r3, r4
 8006c98:	9a07      	ldr	r2, [sp, #28]
 8006c9a:	490a      	ldr	r1, [pc, #40]	@ (8006cc4 <xTimerCreateTimerTask+0x58>)
 8006c9c:	480a      	ldr	r0, [pc, #40]	@ (8006cc8 <xTimerCreateTimerTask+0x5c>)
 8006c9e:	f7ff f93b 	bl	8005f18 <xTaskCreateStatic>
 8006ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8006ccc <xTimerCreateTimerTask+0x60>)
 8006ca4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006ca6:	b110      	cbz	r0, 8006cae <xTimerCreateTimerTask+0x42>
}
 8006ca8:	2001      	movs	r0, #1
 8006caa:	b008      	add	sp, #32
 8006cac:	bd10      	pop	{r4, pc}
 8006cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8006cbe:	e7fe      	b.n	8006cbe <xTimerCreateTimerTask+0x52>
 8006cc0:	20005bac 	.word	0x20005bac
 8006cc4:	08009de0 	.word	0x08009de0
 8006cc8:	0800705d 	.word	0x0800705d
 8006ccc:	20005ba8 	.word	0x20005ba8

08006cd0 <xTimerCreate>:
	{
 8006cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	4688      	mov	r8, r1
 8006cda:	4617      	mov	r7, r2
 8006cdc:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006cde:	202c      	movs	r0, #44	@ 0x2c
 8006ce0:	f7fa f9a4 	bl	800102c <pvPortMalloc>
		if( pxNewTimer != NULL )
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	b158      	cbz	r0, 8006d00 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006cee:	9001      	str	r0, [sp, #4]
 8006cf0:	9b08      	ldr	r3, [sp, #32]
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	463a      	mov	r2, r7
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f7ff ff90 	bl	8006c20 <prvInitialiseNewTimer>
	}
 8006d00:	4630      	mov	r0, r6
 8006d02:	b002      	add	sp, #8
 8006d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d08 <xTimerCreateStatic>:
	{
 8006d08:	b510      	push	{r4, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	4684      	mov	ip, r0
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006d0e:	202c      	movs	r0, #44	@ 0x2c
 8006d10:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006d12:	9803      	ldr	r0, [sp, #12]
 8006d14:	282c      	cmp	r0, #44	@ 0x2c
 8006d16:	d008      	beq.n	8006d2a <xTimerCreateStatic+0x22>
 8006d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	e7fe      	b.n	8006d28 <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d2a:	9803      	ldr	r0, [sp, #12]
		configASSERT( pxTimerBuffer );
 8006d2c:	9807      	ldr	r0, [sp, #28]
 8006d2e:	b160      	cbz	r0, 8006d4a <xTimerCreateStatic+0x42>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006d30:	2002      	movs	r0, #2
 8006d32:	9c07      	ldr	r4, [sp, #28]
 8006d34:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006d38:	9401      	str	r4, [sp, #4]
 8006d3a:	9806      	ldr	r0, [sp, #24]
 8006d3c:	9000      	str	r0, [sp, #0]
 8006d3e:	4660      	mov	r0, ip
 8006d40:	f7ff ff6e 	bl	8006c20 <prvInitialiseNewTimer>
	}
 8006d44:	9807      	ldr	r0, [sp, #28]
 8006d46:	b004      	add	sp, #16
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
 8006d5a:	e7fe      	b.n	8006d5a <xTimerCreateStatic+0x52>

08006d5c <xTimerGenericCommand>:
	configASSERT( xTimer );
 8006d5c:	b1b8      	cbz	r0, 8006d8e <xTimerGenericCommand+0x32>
 8006d5e:	469c      	mov	ip, r3
 8006d60:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8006d62:	4818      	ldr	r0, [pc, #96]	@ (8006dc4 <xTimerGenericCommand+0x68>)
 8006d64:	6800      	ldr	r0, [r0, #0]
 8006d66:	b358      	cbz	r0, 8006dc0 <xTimerGenericCommand+0x64>
{
 8006d68:	b500      	push	{lr}
 8006d6a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8006d6c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d6e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d70:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d72:	2905      	cmp	r1, #5
 8006d74:	dc1c      	bgt.n	8006db0 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d76:	f7ff fc25 	bl	80065c4 <xTaskGetSchedulerState>
 8006d7a:	2802      	cmp	r0, #2
 8006d7c:	d010      	beq.n	8006da0 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d7e:	2300      	movs	r3, #0
 8006d80:	461a      	mov	r2, r3
 8006d82:	4669      	mov	r1, sp
 8006d84:	480f      	ldr	r0, [pc, #60]	@ (8006dc4 <xTimerGenericCommand+0x68>)
 8006d86:	6800      	ldr	r0, [r0, #0]
 8006d88:	f7fa ff6d 	bl	8001c66 <xQueueGenericSend>
 8006d8c:	e015      	b.n	8006dba <xTimerGenericCommand+0x5e>
 8006d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8006d9e:	e7fe      	b.n	8006d9e <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006da0:	2300      	movs	r3, #0
 8006da2:	9a06      	ldr	r2, [sp, #24]
 8006da4:	4669      	mov	r1, sp
 8006da6:	4807      	ldr	r0, [pc, #28]	@ (8006dc4 <xTimerGenericCommand+0x68>)
 8006da8:	6800      	ldr	r0, [r0, #0]
 8006daa:	f7fa ff5c 	bl	8001c66 <xQueueGenericSend>
 8006dae:	e004      	b.n	8006dba <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006db0:	2300      	movs	r3, #0
 8006db2:	4662      	mov	r2, ip
 8006db4:	4669      	mov	r1, sp
 8006db6:	f7fb f81a 	bl	8001dee <xQueueGenericSendFromISR>
}
 8006dba:	b005      	add	sp, #20
 8006dbc:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8006dc0:	2000      	movs	r0, #0
}
 8006dc2:	4770      	bx	lr
 8006dc4:	20005bac 	.word	0x20005bac

08006dc8 <prvSwitchTimerLists>:
{
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8006e3c <prvSwitchTimerLists+0x74>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	b362      	cbz	r2, 8006e2e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dd8:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dda:	1d25      	adds	r5, r4, #4
 8006ddc:	4628      	mov	r0, r5
 8006dde:	f7fa fbb1 	bl	8001544 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006de2:	6a23      	ldr	r3, [r4, #32]
 8006de4:	4620      	mov	r0, r4
 8006de6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006de8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006dec:	f013 0f04 	tst.w	r3, #4
 8006df0:	d0ec      	beq.n	8006dcc <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006df2:	69a3      	ldr	r3, [r4, #24]
 8006df4:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8006df6:	429e      	cmp	r6, r3
 8006df8:	d207      	bcs.n	8006e0a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006dfa:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dfc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dfe:	4629      	mov	r1, r5
 8006e00:	4b0e      	ldr	r3, [pc, #56]	@ (8006e3c <prvSwitchTimerLists+0x74>)
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	f7fa fb85 	bl	8001512 <vListInsert>
 8006e08:	e7e0      	b.n	8006dcc <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	9100      	str	r1, [sp, #0]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4632      	mov	r2, r6
 8006e12:	4620      	mov	r0, r4
 8006e14:	f7ff ffa2 	bl	8006d5c <xTimerGenericCommand>
				configASSERT( xResult );
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d1d7      	bne.n	8006dcc <prvSwitchTimerLists+0x4>
 8006e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	e7fe      	b.n	8006e2c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8006e2e:	4a04      	ldr	r2, [pc, #16]	@ (8006e40 <prvSwitchTimerLists+0x78>)
 8006e30:	6810      	ldr	r0, [r2, #0]
 8006e32:	4902      	ldr	r1, [pc, #8]	@ (8006e3c <prvSwitchTimerLists+0x74>)
 8006e34:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8006e36:	6013      	str	r3, [r2, #0]
}
 8006e38:	b002      	add	sp, #8
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}
 8006e3c:	20005bb4 	.word	0x20005bb4
 8006e40:	20005bb0 	.word	0x20005bb0

08006e44 <prvSampleTimeNow>:
{
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8006e48:	f7ff f928 	bl	800609c <xTaskGetTickCount>
 8006e4c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8006e4e:	4b07      	ldr	r3, [pc, #28]	@ (8006e6c <prvSampleTimeNow+0x28>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4283      	cmp	r3, r0
 8006e54:	d805      	bhi.n	8006e62 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8006e56:	2300      	movs	r3, #0
 8006e58:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8006e5a:	4b04      	ldr	r3, [pc, #16]	@ (8006e6c <prvSampleTimeNow+0x28>)
 8006e5c:	601c      	str	r4, [r3, #0]
}
 8006e5e:	4620      	mov	r0, r4
 8006e60:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8006e62:	f7ff ffb1 	bl	8006dc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e66:	2301      	movs	r3, #1
 8006e68:	602b      	str	r3, [r5, #0]
 8006e6a:	e7f6      	b.n	8006e5a <prvSampleTimeNow+0x16>
 8006e6c:	20005ba4 	.word	0x20005ba4

08006e70 <prvProcessExpiredTimer>:
{
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	4606      	mov	r6, r0
 8006e76:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e78:	4917      	ldr	r1, [pc, #92]	@ (8006ed8 <prvProcessExpiredTimer+0x68>)
 8006e7a:	6809      	ldr	r1, [r1, #0]
 8006e7c:	68c9      	ldr	r1, [r1, #12]
 8006e7e:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e80:	1d20      	adds	r0, r4, #4
 8006e82:	f7fa fb5f 	bl	8001544 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e86:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8006e8a:	f01c 0f04 	tst.w	ip, #4
 8006e8e:	d108      	bne.n	8006ea2 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e90:	f02c 0c01 	bic.w	ip, ip, #1
 8006e94:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e98:	6a23      	ldr	r3, [r4, #32]
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	4798      	blx	r3
}
 8006e9e:	b002      	add	sp, #8
 8006ea0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ea2:	69a1      	ldr	r1, [r4, #24]
 8006ea4:	4633      	mov	r3, r6
 8006ea6:	462a      	mov	r2, r5
 8006ea8:	4431      	add	r1, r6
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f7ff fe5c 	bl	8006b68 <prvInsertTimerInActiveList>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d0f1      	beq.n	8006e98 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	9100      	str	r1, [sp, #0]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4632      	mov	r2, r6
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f7ff ff4d 	bl	8006d5c <xTimerGenericCommand>
			configASSERT( xResult );
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d1e8      	bne.n	8006e98 <prvProcessExpiredTimer+0x28>
 8006ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	e7fe      	b.n	8006ed6 <prvProcessExpiredTimer+0x66>
 8006ed8:	20005bb4 	.word	0x20005bb4

08006edc <prvProcessTimerOrBlockTask>:
{
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	4606      	mov	r6, r0
 8006ee2:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8006ee4:	f7ff f8d2 	bl	800608c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ee8:	a801      	add	r0, sp, #4
 8006eea:	f7ff ffab 	bl	8006e44 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8006eee:	9b01      	ldr	r3, [sp, #4]
 8006ef0:	bb33      	cbnz	r3, 8006f40 <prvProcessTimerOrBlockTask+0x64>
 8006ef2:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ef4:	b9e4      	cbnz	r4, 8006f30 <prvProcessTimerOrBlockTask+0x54>
 8006ef6:	42b0      	cmp	r0, r6
 8006ef8:	d213      	bcs.n	8006f22 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006efa:	4622      	mov	r2, r4
 8006efc:	1b71      	subs	r1, r6, r5
 8006efe:	4b12      	ldr	r3, [pc, #72]	@ (8006f48 <prvProcessTimerOrBlockTask+0x6c>)
 8006f00:	6818      	ldr	r0, [r3, #0]
 8006f02:	f7fb f89f 	bl	8002044 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f06:	f7ff f95b 	bl	80061c0 <xTaskResumeAll>
 8006f0a:	b9d8      	cbnz	r0, 8006f44 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8006f0c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f14:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	e010      	b.n	8006f44 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8006f22:	f7ff f94d 	bl	80061c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f26:	4629      	mov	r1, r5
 8006f28:	4630      	mov	r0, r6
 8006f2a:	f7ff ffa1 	bl	8006e70 <prvProcessExpiredTimer>
 8006f2e:	e009      	b.n	8006f44 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f30:	4a06      	ldr	r2, [pc, #24]	@ (8006f4c <prvProcessTimerOrBlockTask+0x70>)
 8006f32:	6812      	ldr	r2, [r2, #0]
 8006f34:	6812      	ldr	r2, [r2, #0]
 8006f36:	b90a      	cbnz	r2, 8006f3c <prvProcessTimerOrBlockTask+0x60>
 8006f38:	2401      	movs	r4, #1
 8006f3a:	e7de      	b.n	8006efa <prvProcessTimerOrBlockTask+0x1e>
 8006f3c:	461c      	mov	r4, r3
 8006f3e:	e7dc      	b.n	8006efa <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8006f40:	f7ff f93e 	bl	80061c0 <xTaskResumeAll>
}
 8006f44:	b002      	add	sp, #8
 8006f46:	bd70      	pop	{r4, r5, r6, pc}
 8006f48:	20005bac 	.word	0x20005bac
 8006f4c:	20005bb0 	.word	0x20005bb0

08006f50 <prvProcessReceivedCommands>:
{
 8006f50:	b510      	push	{r4, lr}
 8006f52:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f54:	e002      	b.n	8006f5c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f56:	9b04      	ldr	r3, [sp, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	da0f      	bge.n	8006f7c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	a904      	add	r1, sp, #16
 8006f60:	4b3d      	ldr	r3, [pc, #244]	@ (8007058 <prvProcessReceivedCommands+0x108>)
 8006f62:	6818      	ldr	r0, [r3, #0]
 8006f64:	f7fa ffaa 	bl	8001ebc <xQueueReceive>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d072      	beq.n	8007052 <prvProcessReceivedCommands+0x102>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f6c:	9b04      	ldr	r3, [sp, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	daf1      	bge.n	8006f56 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f72:	9907      	ldr	r1, [sp, #28]
 8006f74:	9806      	ldr	r0, [sp, #24]
 8006f76:	9b05      	ldr	r3, [sp, #20]
 8006f78:	4798      	blx	r3
 8006f7a:	e7ec      	b.n	8006f56 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f7c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f7e:	6963      	ldr	r3, [r4, #20]
 8006f80:	b113      	cbz	r3, 8006f88 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f82:	1d20      	adds	r0, r4, #4
 8006f84:	f7fa fade 	bl	8001544 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f88:	a803      	add	r0, sp, #12
 8006f8a:	f7ff ff5b 	bl	8006e44 <prvSampleTimeNow>
 8006f8e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8006f90:	9b04      	ldr	r3, [sp, #16]
 8006f92:	2b09      	cmp	r3, #9
 8006f94:	d8e2      	bhi.n	8006f5c <prvProcessReceivedCommands+0xc>
 8006f96:	e8df f003 	tbb	[pc, r3]
 8006f9a:	0505      	.short	0x0505
 8006f9c:	4e362f05 	.word	0x4e362f05
 8006fa0:	362f0505 	.word	0x362f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fa4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006fa8:	f043 0301 	orr.w	r3, r3, #1
 8006fac:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006fb0:	9b05      	ldr	r3, [sp, #20]
 8006fb2:	69a1      	ldr	r1, [r4, #24]
 8006fb4:	4419      	add	r1, r3
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f7ff fdd6 	bl	8006b68 <prvInsertTimerInActiveList>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d0cd      	beq.n	8006f5c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fc0:	6a23      	ldr	r3, [r4, #32]
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fc6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006fca:	f013 0f04 	tst.w	r3, #4
 8006fce:	d0c5      	beq.n	8006f5c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006fd0:	69a2      	ldr	r2, [r4, #24]
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	9100      	str	r1, [sp, #0]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	9805      	ldr	r0, [sp, #20]
 8006fda:	4402      	add	r2, r0
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f7ff febd 	bl	8006d5c <xTimerGenericCommand>
							configASSERT( xResult );
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d1ba      	bne.n	8006f5c <prvProcessReceivedCommands+0xc>
 8006fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	e7fe      	b.n	8006ff6 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ff8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006ffc:	f023 0301 	bic.w	r3, r3, #1
 8007000:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8007004:	e7aa      	b.n	8006f5c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007006:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800700a:	f043 0301 	orr.w	r3, r3, #1
 800700e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007012:	9905      	ldr	r1, [sp, #20]
 8007014:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007016:	b129      	cbz	r1, 8007024 <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007018:	4603      	mov	r3, r0
 800701a:	4401      	add	r1, r0
 800701c:	4620      	mov	r0, r4
 800701e:	f7ff fda3 	bl	8006b68 <prvInsertTimerInActiveList>
					break;
 8007022:	e79b      	b.n	8006f5c <prvProcessReceivedCommands+0xc>
 8007024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007034:	e7fe      	b.n	8007034 <prvProcessReceivedCommands+0xe4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007036:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800703a:	f013 0f02 	tst.w	r3, #2
 800703e:	d004      	beq.n	800704a <prvProcessReceivedCommands+0xfa>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007040:	f023 0301 	bic.w	r3, r3, #1
 8007044:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8007048:	e788      	b.n	8006f5c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800704a:	4620      	mov	r0, r4
 800704c:	f7fa f870 	bl	8001130 <vPortFree>
 8007050:	e784      	b.n	8006f5c <prvProcessReceivedCommands+0xc>
}
 8007052:	b008      	add	sp, #32
 8007054:	bd10      	pop	{r4, pc}
 8007056:	bf00      	nop
 8007058:	20005bac 	.word	0x20005bac

0800705c <prvTimerTask>:
{
 800705c:	b500      	push	{lr}
 800705e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007060:	a801      	add	r0, sp, #4
 8007062:	f7ff fd71 	bl	8006b48 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007066:	9901      	ldr	r1, [sp, #4]
 8007068:	f7ff ff38 	bl	8006edc <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800706c:	f7ff ff70 	bl	8006f50 <prvProcessReceivedCommands>
	for( ;; )
 8007070:	e7f6      	b.n	8007060 <prvTimerTask+0x4>

08007072 <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8007072:	b140      	cbz	r0, 8007086 <pvTimerGetTimerID+0x14>
{
 8007074:	b510      	push	{r4, lr}
 8007076:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
 8007078:	f7fa fb64 	bl	8001744 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800707c:	69e4      	ldr	r4, [r4, #28]
	}
	taskEXIT_CRITICAL();
 800707e:	f7fa fb83 	bl	8001788 <vPortExitCritical>

	return pvReturn;
}
 8007082:	4620      	mov	r0, r4
 8007084:	bd10      	pop	{r4, pc}
 8007086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8007096:	e7fe      	b.n	8007096 <pvTimerGetTimerID+0x24>

08007098 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007098:	b510      	push	{r4, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	4614      	mov	r4, r2
 800709e:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80070a0:	f06f 0301 	mvn.w	r3, #1
 80070a4:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80070a6:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80070a8:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80070aa:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070ac:	2300      	movs	r3, #0
 80070ae:	4669      	mov	r1, sp
 80070b0:	4802      	ldr	r0, [pc, #8]	@ (80070bc <xTimerPendFunctionCallFromISR+0x24>)
 80070b2:	6800      	ldr	r0, [r0, #0]
 80070b4:	f7fa fe9b 	bl	8001dee <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 80070b8:	b004      	add	sp, #16
 80070ba:	bd10      	pop	{r4, pc}
 80070bc:	20005bac 	.word	0x20005bac

080070c0 <controller_timing_start>:

void update_next_event(void);

void controller_timing_start(TIM_HandleTypeDef *htim)
{
    if (htim == NULL)
 80070c0:	b320      	cbz	r0, 800710c <controller_timing_start+0x4c>
{
 80070c2:	b510      	push	{r4, lr}
        /**
         * @todo throw an error
         */
        return;
    }
    timer = htim;
 80070c4:	4c12      	ldr	r4, [pc, #72]	@ (8007110 <controller_timing_start+0x50>)
 80070c6:	6020      	str	r0, [r4, #0]
    
    /**
     * This assumes that sys clock is the same as timer clock
     */
    timer->Instance->PSC = (HAL_RCC_GetSysClockFreq() / 1000000UL) - 1;
 80070c8:	f7fd f850 	bl	800416c <HAL_RCC_GetSysClockFreq>
 80070cc:	4b11      	ldr	r3, [pc, #68]	@ (8007114 <controller_timing_start+0x54>)
 80070ce:	fba3 2300 	umull	r2, r3, r3, r0
 80070d2:	0c9b      	lsrs	r3, r3, #18
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	6802      	ldr	r2, [r0, #0]
 80070d8:	3b01      	subs	r3, #1
 80070da:	6293      	str	r3, [r2, #40]	@ 0x28
    //timer->Instance->ARR = 100000;
    timer->Instance->EGR |= TIM_EGR_UG;  // Force an update event → immediately reloads PSC
 80070dc:	6802      	ldr	r2, [r0, #0]
 80070de:	6953      	ldr	r3, [r2, #20]
 80070e0:	f043 0301 	orr.w	r3, r3, #1
 80070e4:	6153      	str	r3, [r2, #20]

    HAL_TIM_Base_Start_IT(timer);
 80070e6:	f7fd fa25 	bl	8004534 <HAL_TIM_Base_Start_IT>
    HAL_TIM_OC_Start_IT(timer, TIM_CHANNEL_1);    
 80070ea:	2100      	movs	r1, #0
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	f7fd fd4f 	bl	8004b90 <HAL_TIM_OC_Start_IT>

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 80070f2:	2300      	movs	r3, #0
 80070f4:	2b13      	cmp	r3, #19
 80070f6:	d808      	bhi.n	800710a <controller_timing_start+0x4a>
    {
        event_queue[i].state = EVENT_STATE_INACTIVE;
 80070f8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80070fc:	4a06      	ldr	r2, [pc, #24]	@ (8007118 <controller_timing_start+0x58>)
 80070fe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007102:	2100      	movs	r1, #0
 8007104:	7411      	strb	r1, [r2, #16]
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8007106:	3301      	adds	r3, #1
 8007108:	e7f4      	b.n	80070f4 <controller_timing_start+0x34>
    }
    
}
 800710a:	bd10      	pop	{r4, pc}
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	20005d70 	.word	0x20005d70
 8007114:	431bde83 	.word	0x431bde83
 8007118:	20005be0 	.word	0x20005be0

0800711c <get_time_us>:

time_us_t get_time_us(void)
{
    return timer->Instance->CNT;
 800711c:	4b02      	ldr	r3, [pc, #8]	@ (8007128 <get_time_us+0xc>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	20005d70 	.word	0x20005d70

0800712c <get_time_ms>:

time_ms_t get_time_ms(void)
{
    return timer->Instance->CNT / 1000U;
 800712c:	4b04      	ldr	r3, [pc, #16]	@ (8007140 <get_time_ms+0x14>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007134:	4b03      	ldr	r3, [pc, #12]	@ (8007144 <get_time_ms+0x18>)
 8007136:	fba3 3000 	umull	r3, r0, r3, r0
}
 800713a:	0980      	lsrs	r0, r0, #6
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	20005d70 	.word	0x20005d70
 8007144:	10624dd3 	.word	0x10624dd3

08007148 <update_next_event>:

void update_next_event(void)
{
 8007148:	b410      	push	{r4}
    time_us_t nearest_time = 0xFFFFFFFF;
    bool found = false;

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 800714a:	2300      	movs	r3, #0
    bool found = false;
 800714c:	4618      	mov	r0, r3
    time_us_t nearest_time = 0xFFFFFFFF;
 800714e:	f04f 34ff 	mov.w	r4, #4294967295
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8007152:	e006      	b.n	8007162 <update_next_event+0x1a>
        
        /* This will handle wraparound safely aparantly, but i don't know how it works yet :( */
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
        {
            found = true;
            nearest_time = event_queue[i].timestamp_us;
 8007154:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007158:	008a      	lsls	r2, r1, #2
 800715a:	4910      	ldr	r1, [pc, #64]	@ (800719c <update_next_event+0x54>)
 800715c:	588c      	ldr	r4, [r1, r2]
            found = true;
 800715e:	2001      	movs	r0, #1
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8007160:	3301      	adds	r3, #1
 8007162:	2b13      	cmp	r3, #19
 8007164:	d812      	bhi.n	800718c <update_next_event+0x44>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 8007166:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800716a:	0091      	lsls	r1, r2, #2
 800716c:	4a0b      	ldr	r2, [pc, #44]	@ (800719c <update_next_event+0x54>)
 800716e:	440a      	add	r2, r1
 8007170:	7c12      	ldrb	r2, [r2, #16]
 8007172:	2a01      	cmp	r2, #1
 8007174:	d1f4      	bne.n	8007160 <update_next_event+0x18>
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
 8007176:	2800      	cmp	r0, #0
 8007178:	d0ec      	beq.n	8007154 <update_next_event+0xc>
 800717a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800717e:	008a      	lsls	r2, r1, #2
 8007180:	4906      	ldr	r1, [pc, #24]	@ (800719c <update_next_event+0x54>)
 8007182:	588a      	ldr	r2, [r1, r2]
 8007184:	1b12      	subs	r2, r2, r4
 8007186:	2a00      	cmp	r2, #0
 8007188:	daea      	bge.n	8007160 <update_next_event+0x18>
 800718a:	e7e3      	b.n	8007154 <update_next_event+0xc>
        }        
    }

    if (found) {
 800718c:	b118      	cbz	r0, 8007196 <update_next_event+0x4e>
        // Schedule next interrupt
        timer->Instance->CCR1 = nearest_time;
 800718e:	4b04      	ldr	r3, [pc, #16]	@ (80071a0 <update_next_event+0x58>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	635c      	str	r4, [r3, #52]	@ 0x34
    } else {
        // No pending events — disable future interrupts or set a dummy compare
        /* Should i set a compare in the near future ?*/
        //timer->Instance->CCR1 = 0xFFFFFFFF;
    }
}
 8007196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	20005be0 	.word	0x20005be0
 80071a0:	20005d70 	.word	0x20005d70

080071a4 <scheduler_timer_callback>:

void scheduler_timer_callback()
{
 80071a4:	b538      	push	{r3, r4, r5, lr}
    // Exit early if this wasn't a CCR1 match
    if (!(timer->Instance->SR & TIM_SR_CC1IF))
 80071a6:	4b23      	ldr	r3, [pc, #140]	@ (8007234 <scheduler_timer_callback+0x90>)
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	6813      	ldr	r3, [r2, #0]
 80071ac:	6919      	ldr	r1, [r3, #16]
 80071ae:	f011 0f02 	tst.w	r1, #2
 80071b2:	d03e      	beq.n	8007232 <scheduler_timer_callback+0x8e>
    {
        return;
    }

    timer->Instance->SR &= ~TIM_SR_CC1IF;  // Clear the compare match flag
 80071b4:	6919      	ldr	r1, [r3, #16]
 80071b6:	f021 0102 	bic.w	r1, r1, #2
 80071ba:	6119      	str	r1, [r3, #16]
    time_us_t time_now_us = timer->Instance->CNT; // I have avoided the function call overhead here. might be minimal anyways...
 80071bc:	6813      	ldr	r3, [r2, #0]
 80071be:	6a5d      	ldr	r5, [r3, #36]	@ 0x24

    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 80071c0:	2400      	movs	r4, #0
 80071c2:	e00e      	b.n	80071e2 <scheduler_timer_callback+0x3e>
        {
            event_queue[i].callback_arg(event_queue[i].arg);
        }
        else
        {
            event_queue[i].callback_noarg();
 80071c4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80071c8:	009a      	lsls	r2, r3, #2
 80071ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007238 <scheduler_timer_callback+0x94>)
 80071cc:	4413      	add	r3, r2
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	4798      	blx	r3
        }

        event_queue[i].state = EVENT_STATE_INACTIVE;
 80071d2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80071d6:	009a      	lsls	r2, r3, #2
 80071d8:	4b17      	ldr	r3, [pc, #92]	@ (8007238 <scheduler_timer_callback+0x94>)
 80071da:	4413      	add	r3, r2
 80071dc:	2200      	movs	r2, #0
 80071de:	741a      	strb	r2, [r3, #16]
    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 80071e0:	3401      	adds	r4, #1
 80071e2:	2c13      	cmp	r4, #19
 80071e4:	dc23      	bgt.n	800722e <scheduler_timer_callback+0x8a>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 80071e6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80071ea:	009a      	lsls	r2, r3, #2
 80071ec:	4b12      	ldr	r3, [pc, #72]	@ (8007238 <scheduler_timer_callback+0x94>)
 80071ee:	4413      	add	r3, r2
 80071f0:	7c1b      	ldrb	r3, [r3, #16]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d1f4      	bne.n	80071e0 <scheduler_timer_callback+0x3c>
        if ((int32_t)(time_now_us - event_queue[i].timestamp_us) < 0)
 80071f6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80071fa:	0093      	lsls	r3, r2, #2
 80071fc:	4a0e      	ldr	r2, [pc, #56]	@ (8007238 <scheduler_timer_callback+0x94>)
 80071fe:	58d3      	ldr	r3, [r2, r3]
 8007200:	1aeb      	subs	r3, r5, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	dbec      	blt.n	80071e0 <scheduler_timer_callback+0x3c>
        event_queue[i].state = EVENT_STATE_ACTIVE;
 8007206:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800720a:	009a      	lsls	r2, r3, #2
 800720c:	4b0a      	ldr	r3, [pc, #40]	@ (8007238 <scheduler_timer_callback+0x94>)
 800720e:	4413      	add	r3, r2
 8007210:	2202      	movs	r2, #2
 8007212:	741a      	strb	r2, [r3, #16]
        if (event_queue[i].uses_arg)
 8007214:	7c5b      	ldrb	r3, [r3, #17]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0d4      	beq.n	80071c4 <scheduler_timer_callback+0x20>
            event_queue[i].callback_arg(event_queue[i].arg);
 800721a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800721e:	fa03 f202 	lsl.w	r2, r3, r2
 8007222:	4b05      	ldr	r3, [pc, #20]	@ (8007238 <scheduler_timer_callback+0x94>)
 8007224:	4413      	add	r3, r2
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	68d8      	ldr	r0, [r3, #12]
 800722a:	4790      	blx	r2
 800722c:	e7d1      	b.n	80071d2 <scheduler_timer_callback+0x2e>
    }

    update_next_event();  // Schedule the next event
 800722e:	f7ff ff8b 	bl	8007148 <update_next_event>
}
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	20005d70 	.word	0x20005d70
 8007238:	20005be0 	.word	0x20005be0

0800723c <scheduler_schedule_event_with_arg>:


bool scheduler_schedule_event_with_arg(time_us_t timestamp_us, void (*callback)(void *), void *arg)
{
    if (callback == NULL) return false;
 800723c:	b311      	cbz	r1, 8007284 <scheduler_schedule_event_with_arg+0x48>
{
 800723e:	b510      	push	{r4, lr}
 8007240:	460c      	mov	r4, r1

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8007242:	2300      	movs	r3, #0
 8007244:	2b13      	cmp	r3, #19
 8007246:	d81b      	bhi.n	8007280 <scheduler_schedule_event_with_arg+0x44>
        if (event_queue[i].state == EVENT_STATE_INACTIVE) {
 8007248:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800724c:	490e      	ldr	r1, [pc, #56]	@ (8007288 <scheduler_schedule_event_with_arg+0x4c>)
 800724e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8007252:	7c09      	ldrb	r1, [r1, #16]
 8007254:	b109      	cbz	r1, 800725a <scheduler_schedule_event_with_arg+0x1e>
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8007256:	3301      	adds	r3, #1
 8007258:	e7f4      	b.n	8007244 <scheduler_schedule_event_with_arg+0x8>
            event_queue[i].timestamp_us = timestamp_us;
 800725a:	490b      	ldr	r1, [pc, #44]	@ (8007288 <scheduler_schedule_event_with_arg+0x4c>)
 800725c:	46e6      	mov	lr, ip
 800725e:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8007262:	f841 002e 	str.w	r0, [r1, lr, lsl #2]
            event_queue[i].callback_arg = callback;
 8007266:	f8cc 4004 	str.w	r4, [ip, #4]
            event_queue[i].arg = arg;
 800726a:	f8cc 200c 	str.w	r2, [ip, #12]
            event_queue[i].uses_arg = true;
 800726e:	2401      	movs	r4, #1
 8007270:	f88c 4011 	strb.w	r4, [ip, #17]
            event_queue[i].state = EVENT_STATE_PENDING;
 8007274:	f88c 4010 	strb.w	r4, [ip, #16]

            update_next_event();
 8007278:	f7ff ff66 	bl	8007148 <update_next_event>
            return true;
 800727c:	4620      	mov	r0, r4
        }
    }

    return false;
}
 800727e:	bd10      	pop	{r4, pc}
    return false;
 8007280:	2000      	movs	r0, #0
 8007282:	e7fc      	b.n	800727e <scheduler_schedule_event_with_arg+0x42>
    if (callback == NULL) return false;
 8007284:	2000      	movs	r0, #0
}
 8007286:	4770      	bx	lr
 8007288:	20005be0 	.word	0x20005be0

0800728c <set_filtering>:
/* just a temporary fix */
trigger_t *trigger = NULL;

void set_filtering()
{
  switch (trigger->settings->filtering)
 800728c:	4b0e      	ldr	r3, [pc, #56]	@ (80072c8 <set_filtering+0x3c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007292:	7812      	ldrb	r2, [r2, #0]
 8007294:	2a03      	cmp	r2, #3
 8007296:	d813      	bhi.n	80072c0 <set_filtering+0x34>
 8007298:	e8df f002 	tbb	[pc, r2]
 800729c:	0c090502 	.word	0x0c090502
  {
    case TRIGGER_FILTERING_NONE:
      trigger->_trigger_filter_time_us = 0;
 80072a0:	2200      	movs	r2, #0
 80072a2:	605a      	str	r2, [r3, #4]
        break;
 80072a4:	4770      	bx	lr
    case TRIGGER_FILTERING_LITE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 4U;
 80072a6:	695a      	ldr	r2, [r3, #20]
 80072a8:	0892      	lsrs	r2, r2, #2
 80072aa:	605a      	str	r2, [r3, #4]
        break;
 80072ac:	4770      	bx	lr
    case TRIGGER_FILTERING_MEDIUM:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 1U;
 80072ae:	695a      	ldr	r2, [r3, #20]
 80072b0:	605a      	str	r2, [r3, #4]
        break;
 80072b2:	4770      	bx	lr
    case TRIGGER_FILTERING_AGGRESSIVE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us * 3 / 4;
 80072b4:	695a      	ldr	r2, [r3, #20]
 80072b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80072ba:	0892      	lsrs	r2, r2, #2
 80072bc:	605a      	str	r2, [r3, #4]
        break;
 80072be:	4770      	bx	lr
    default:
        // Handle invalid filtering level
        trigger->_trigger_filter_time_us = 0;
 80072c0:	2200      	movs	r2, #0
 80072c2:	605a      	str	r2, [r3, #4]
        break;
  }
}
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	20005d74 	.word	0x20005d74

080072cc <trigger_init>:

void trigger_init(trigger_t *trigger_ptr, trigger_settings_t *settings)
{   
 80072cc:	b538      	push	{r3, r4, r5, lr}
  bool temp_status = true;
  if (trigger_ptr == NULL)
 80072ce:	b170      	cbz	r0, 80072ee <trigger_init+0x22>
 80072d0:	460c      	mov	r4, r1
 80072d2:	4603      	mov	r3, r0
  {
    log_error("Trigger initialization failed. Trigger is NULL.");
    return;
  }
  trigger = trigger_ptr;
 80072d4:	4a12      	ldr	r2, [pc, #72]	@ (8007320 <trigger_init+0x54>)
 80072d6:	6010      	str	r0, [r2, #0]

  if (settings == NULL)
 80072d8:	b169      	cbz	r1, 80072f6 <trigger_init+0x2a>
  {
    log_error("Trigger initialization failed. Settings are NULL.");
    return;
  }
  
  if (settings->full_teeth == 0 || settings->missing_teeth == 0)
 80072da:	784a      	ldrb	r2, [r1, #1]
 80072dc:	b10a      	cbz	r2, 80072e2 <trigger_init+0x16>
 80072de:	788a      	ldrb	r2, [r1, #2]
 80072e0:	b96a      	cbnz	r2, 80072fe <trigger_init+0x32>
  {
    temp_status = false;
    trigger->initialized = temp_status;
 80072e2:	2200      	movs	r2, #0
 80072e4:	701a      	strb	r2, [r3, #0]
    log_error("Trigger initialization failed. Teeth misconfigured.");
 80072e6:	480f      	ldr	r0, [pc, #60]	@ (8007324 <trigger_init+0x58>)
 80072e8:	f7f9 fbf0 	bl	8000acc <log_error>
  trigger->settings = settings;
  trigger->sync_status = TS_NOT_SYNCED;
  set_filtering(trigger);
  trigger->_trigger_actual_teeth = settings->full_teeth - settings->missing_teeth;
  trigger->initialized = true;
}
 80072ec:	bd38      	pop	{r3, r4, r5, pc}
    log_error("Trigger initialization failed. Trigger is NULL.");
 80072ee:	480e      	ldr	r0, [pc, #56]	@ (8007328 <trigger_init+0x5c>)
 80072f0:	f7f9 fbec 	bl	8000acc <log_error>
    return;
 80072f4:	e7fa      	b.n	80072ec <trigger_init+0x20>
    log_error("Trigger initialization failed. Settings are NULL.");
 80072f6:	480d      	ldr	r0, [pc, #52]	@ (800732c <trigger_init+0x60>)
 80072f8:	f7f9 fbe8 	bl	8000acc <log_error>
    return;
 80072fc:	e7f6      	b.n	80072ec <trigger_init+0x20>
  trigger->settings = settings;
 80072fe:	6241      	str	r1, [r0, #36]	@ 0x24
  trigger->sync_status = TS_NOT_SYNCED;
 8007300:	2200      	movs	r2, #0
 8007302:	7042      	strb	r2, [r0, #1]
  set_filtering(trigger);
 8007304:	4d06      	ldr	r5, [pc, #24]	@ (8007320 <trigger_init+0x54>)
 8007306:	6828      	ldr	r0, [r5, #0]
 8007308:	f7ff ffc0 	bl	800728c <set_filtering>
  trigger->_trigger_actual_teeth = settings->full_teeth - settings->missing_teeth;
 800730c:	7863      	ldrb	r3, [r4, #1]
 800730e:	78a1      	ldrb	r1, [r4, #2]
 8007310:	682a      	ldr	r2, [r5, #0]
 8007312:	1a5b      	subs	r3, r3, r1
 8007314:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22
  trigger->initialized = true;
 8007318:	2301      	movs	r3, #1
 800731a:	7013      	strb	r3, [r2, #0]
 800731c:	e7e6      	b.n	80072ec <trigger_init+0x20>
 800731e:	bf00      	nop
 8007320:	20005d74 	.word	0x20005d74
 8007324:	08009e4c 	.word	0x08009e4c
 8007328:	08009de8 	.word	0x08009de8
 800732c:	08009e18 	.word	0x08009e18

08007330 <crankshaft_get_rpm>:


rpm_t crankshaft_get_rpm()
{
  return engine.rpm;
}
 8007330:	4b01      	ldr	r3, [pc, #4]	@ (8007338 <crankshaft_get_rpm+0x8>)
 8007332:	ed93 0a03 	vldr	s0, [r3, #12]
 8007336:	4770      	bx	lr
 8007338:	20000938 	.word	0x20000938

0800733c <crankshaft_get_angle>:
 * @note angle is updated on every trigger event!
 */
angle_t crankshaft_get_angle()
{
  return engine.crankshaft_angle;
}
 800733c:	4b01      	ldr	r3, [pc, #4]	@ (8007344 <crankshaft_get_angle+0x8>)
 800733e:	ed93 0a01 	vldr	s0, [r3, #4]
 8007342:	4770      	bx	lr
 8007344:	20000938 	.word	0x20000938

08007348 <trigger_tooth_handle>:
{
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	ed2d 8b02 	vpush	{d8}
  if (!trigger->initialized)
 800734e:	4b61      	ldr	r3, [pc, #388]	@ (80074d4 <trigger_tooth_handle+0x18c>)
 8007350:	681d      	ldr	r5, [r3, #0]
 8007352:	782c      	ldrb	r4, [r5, #0]
 8007354:	2c00      	cmp	r4, #0
 8007356:	f000 8081 	beq.w	800745c <trigger_tooth_handle+0x114>
  trigger->_tooth_time_us[0] = get_time_us();
 800735a:	f7ff fedf 	bl	800711c <get_time_us>
 800735e:	60a8      	str	r0, [r5, #8]
  trigger->_current_tooth_gap_us = trigger->_tooth_time_us[0] - trigger->_tooth_time_us[1];
 8007360:	4b5c      	ldr	r3, [pc, #368]	@ (80074d4 <trigger_tooth_handle+0x18c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	68d8      	ldr	r0, [r3, #12]
 8007368:	1a12      	subs	r2, r2, r0
 800736a:	615a      	str	r2, [r3, #20]
  if (trigger->_current_tooth_gap_us < trigger->_trigger_filter_time_us) // Pulses should never be less than _trigger_filter_time_us, so if they are it means a false trigger. (A 36-1 wheel at 8000rpm will have triggers approx. every 200uS)
 800736c:	6859      	ldr	r1, [r3, #4]
 800736e:	428a      	cmp	r2, r1
 8007370:	d371      	bcc.n	8007456 <trigger_tooth_handle+0x10e>
  trigger->_counted_tooth++; //Increment the tooth counter
 8007372:	8c19      	ldrh	r1, [r3, #32]
 8007374:	3101      	adds	r1, #1
 8007376:	b289      	uxth	r1, r1
 8007378:	8419      	strh	r1, [r3, #32]
  previous_tooth_gap = trigger->_tooth_time_us[1] - trigger->_tooth_time_us[2];
 800737a:	691d      	ldr	r5, [r3, #16]
 800737c:	1b40      	subs	r0, r0, r5
  if (previous_tooth_gap < trigger->_current_tooth_gap_us) 
 800737e:	4282      	cmp	r2, r0
 8007380:	d970      	bls.n	8007464 <trigger_tooth_handle+0x11c>
    trigger->_shorter_tooth_gap = previous_tooth_gap;
 8007382:	6198      	str	r0, [r3, #24]
  if(trigger->settings->missing_teeth == 1)
 8007384:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007386:	7880      	ldrb	r0, [r0, #2]
 8007388:	2801      	cmp	r0, #1
 800738a:	d06d      	beq.n	8007468 <trigger_tooth_handle+0x120>
    trigger->_target_tooth_gap_us = trigger->_shorter_tooth_gap * trigger->settings->missing_teeth;
 800738c:	699d      	ldr	r5, [r3, #24]
 800738e:	fb00 f505 	mul.w	r5, r0, r5
 8007392:	61dd      	str	r5, [r3, #28]
  if ((trigger->_current_tooth_gap_us > trigger->_target_tooth_gap_us) || (trigger->_counted_tooth > trigger->_trigger_actual_teeth))
 8007394:	69d8      	ldr	r0, [r3, #28]
 8007396:	4282      	cmp	r2, r0
 8007398:	d803      	bhi.n	80073a2 <trigger_tooth_handle+0x5a>
 800739a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800739e:	4291      	cmp	r1, r2
 80073a0:	d977      	bls.n	8007492 <trigger_tooth_handle+0x14a>
    if (trigger->_counted_tooth < trigger->_trigger_actual_teeth)
 80073a2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80073a6:	4291      	cmp	r1, r2
 80073a8:	d264      	bcs.n	8007474 <trigger_tooth_handle+0x12c>
      trigger->sync_status = TS_NOT_SYNCED;
 80073aa:	2200      	movs	r2, #0
 80073ac:	705a      	strb	r2, [r3, #1]
      trigger->sync_loss_counter++;
 80073ae:	4949      	ldr	r1, [pc, #292]	@ (80074d4 <trigger_tooth_handle+0x18c>)
 80073b0:	6808      	ldr	r0, [r1, #0]
 80073b2:	8843      	ldrh	r3, [r0, #2]
 80073b4:	3301      	adds	r3, #1
 80073b6:	8043      	strh	r3, [r0, #2]
      engine.total_revolutions = 0;
 80073b8:	4b47      	ldr	r3, [pc, #284]	@ (80074d8 <trigger_tooth_handle+0x190>)
 80073ba:	601a      	str	r2, [r3, #0]
      engine.rpm = 0;
 80073bc:	2000      	movs	r0, #0
 80073be:	60d8      	str	r0, [r3, #12]
      trigger->_counted_tooth = 0;
 80073c0:	680b      	ldr	r3, [r1, #0]
 80073c2:	841a      	strh	r2, [r3, #32]
  engine.crankshaft_angle = 360.0f / (angle_t)configuration.trigger.full_teeth * (angle_t)trigger->_counted_tooth;
 80073c4:	4b45      	ldr	r3, [pc, #276]	@ (80074dc <trigger_tooth_handle+0x194>)
 80073c6:	79d9      	ldrb	r1, [r3, #7]
 80073c8:	ee07 1a90 	vmov	s15, r1
 80073cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073d0:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80074e0 <trigger_tooth_handle+0x198>
 80073d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073d8:	4b3e      	ldr	r3, [pc, #248]	@ (80074d4 <trigger_tooth_handle+0x18c>)
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	8c03      	ldrh	r3, [r0, #32]
 80073de:	ee07 3a10 	vmov	s14, r3
 80073e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80073e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073ea:	4a3b      	ldr	r2, [pc, #236]	@ (80074d8 <trigger_tooth_handle+0x190>)
 80073ec:	edc2 7a01 	vstr	s15, [r2, #4]
  engine.rpm = (rpm_t)(CONVERSION_FACTOR_SECONDS_TO_MICROSECONDS * CONVERSION_FACTOR_MINUTES_TO_SECONDS / trigger->_shorter_tooth_gap / configuration.trigger.full_teeth);
 80073f0:	6985      	ldr	r5, [r0, #24]
 80073f2:	4b3c      	ldr	r3, [pc, #240]	@ (80074e4 <trigger_tooth_handle+0x19c>)
 80073f4:	fbb3 f3f5 	udiv	r3, r3, r5
 80073f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80073fc:	ee07 3a90 	vmov	s15, r3
 8007400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007404:	edc2 7a03 	vstr	s15, [r2, #12]
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= configuration.cranking_rpm_threshold)
 8007408:	7843      	ldrb	r3, [r0, #1]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d043      	beq.n	8007496 <trigger_tooth_handle+0x14e>
  else if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < configuration.cranking_rpm_threshold)
 800740e:	2b01      	cmp	r3, #1
 8007410:	d04d      	beq.n	80074ae <trigger_tooth_handle+0x166>
  else if (trigger->sync_status == TS_NOT_SYNCED)
 8007412:	2b00      	cmp	r3, #0
 8007414:	d157      	bne.n	80074c6 <trigger_tooth_handle+0x17e>
    engine.spinning_state = SS_SPINNING_UP;
 8007416:	4b30      	ldr	r3, [pc, #192]	@ (80074d8 <trigger_tooth_handle+0x190>)
 8007418:	2201      	movs	r2, #1
 800741a:	745a      	strb	r2, [r3, #17]
  if(is_missing_teeth == false)
 800741c:	2c00      	cmp	r4, #0
 800741e:	d056      	beq.n	80074ce <trigger_tooth_handle+0x186>
  trigger->_tooth_time_us[2] = trigger->_tooth_time_us[1];
 8007420:	4b2c      	ldr	r3, [pc, #176]	@ (80074d4 <trigger_tooth_handle+0x18c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68da      	ldr	r2, [r3, #12]
 8007426:	611a      	str	r2, [r3, #16]
  trigger->_tooth_time_us[1] = trigger->_tooth_time_us[0];
 8007428:	689a      	ldr	r2, [r3, #8]
 800742a:	60da      	str	r2, [r3, #12]
  ignition_trigger_event_handle(crankshaft_get_angle(), crankshaft_get_rpm(), get_time_us());
 800742c:	f7ff ff86 	bl	800733c <crankshaft_get_angle>
 8007430:	eeb0 8a40 	vmov.f32	s16, s0
 8007434:	f7ff ff7c 	bl	8007330 <crankshaft_get_rpm>
 8007438:	eef0 8a40 	vmov.f32	s17, s0
 800743c:	f7ff fe6e 	bl	800711c <get_time_us>
 8007440:	eef0 0a68 	vmov.f32	s1, s17
 8007444:	eeb0 0a48 	vmov.f32	s0, s16
 8007448:	f7f9 ff70 	bl	800132c <ignition_trigger_event_handle>
  osEventFlagsSet(engine.flags, ENGINE_FLAG_TRIGGER_EVENT);
 800744c:	2101      	movs	r1, #1
 800744e:	4b22      	ldr	r3, [pc, #136]	@ (80074d8 <trigger_tooth_handle+0x190>)
 8007450:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007452:	f7f9 f9fd 	bl	8000850 <osEventFlagsSet>
}
 8007456:	ecbd 8b02 	vpop	{d8}
 800745a:	bd38      	pop	{r3, r4, r5, pc}
    log_error("Trigger is not initialized.");
 800745c:	4822      	ldr	r0, [pc, #136]	@ (80074e8 <trigger_tooth_handle+0x1a0>)
 800745e:	f7f9 fb35 	bl	8000acc <log_error>
    return;
 8007462:	e7f8      	b.n	8007456 <trigger_tooth_handle+0x10e>
    trigger->_shorter_tooth_gap = trigger->_current_tooth_gap_us;
 8007464:	619a      	str	r2, [r3, #24]
 8007466:	e78d      	b.n	8007384 <trigger_tooth_handle+0x3c>
    trigger->_target_tooth_gap_us = (3 * trigger->_shorter_tooth_gap) >> 1; 
 8007468:	6998      	ldr	r0, [r3, #24]
 800746a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800746e:	0840      	lsrs	r0, r0, #1
 8007470:	61d8      	str	r0, [r3, #28]
 8007472:	e78f      	b.n	8007394 <trigger_tooth_handle+0x4c>
      trigger->sync_status = TS_FULLY_SYNCED;
 8007474:	2201      	movs	r2, #1
 8007476:	705a      	strb	r2, [r3, #1]
      engine.total_revolutions++;
 8007478:	4b17      	ldr	r3, [pc, #92]	@ (80074d8 <trigger_tooth_handle+0x190>)
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	3201      	adds	r2, #1
 800747e:	601a      	str	r2, [r3, #0]
      trigger->_counted_tooth = 0;
 8007480:	4a14      	ldr	r2, [pc, #80]	@ (80074d4 <trigger_tooth_handle+0x18c>)
 8007482:	6812      	ldr	r2, [r2, #0]
 8007484:	2100      	movs	r1, #0
 8007486:	8411      	strh	r1, [r2, #32]
      osEventFlagsSet(engine.flags, ENGINE_FLAG_ROTATION_EVENT);
 8007488:	2102      	movs	r1, #2
 800748a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800748c:	f7f9 f9e0 	bl	8000850 <osEventFlagsSet>
 8007490:	e798      	b.n	80073c4 <trigger_tooth_handle+0x7c>
  bool is_missing_teeth = false;
 8007492:	2400      	movs	r4, #0
 8007494:	e796      	b.n	80073c4 <trigger_tooth_handle+0x7c>
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= configuration.cranking_rpm_threshold)
 8007496:	4a11      	ldr	r2, [pc, #68]	@ (80074dc <trigger_tooth_handle+0x194>)
 8007498:	ed92 7a03 	vldr	s14, [r2, #12]
 800749c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a4:	dbb3      	blt.n	800740e <trigger_tooth_handle+0xc6>
    engine.spinning_state = SS_RUNNING;
 80074a6:	4b0c      	ldr	r3, [pc, #48]	@ (80074d8 <trigger_tooth_handle+0x190>)
 80074a8:	2203      	movs	r2, #3
 80074aa:	745a      	strb	r2, [r3, #17]
 80074ac:	e7b6      	b.n	800741c <trigger_tooth_handle+0xd4>
  else if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < configuration.cranking_rpm_threshold)
 80074ae:	4a0b      	ldr	r2, [pc, #44]	@ (80074dc <trigger_tooth_handle+0x194>)
 80074b0:	ed92 7a03 	vldr	s14, [r2, #12]
 80074b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074bc:	d5a9      	bpl.n	8007412 <trigger_tooth_handle+0xca>
    engine.spinning_state = SS_CRANKING;
 80074be:	4b06      	ldr	r3, [pc, #24]	@ (80074d8 <trigger_tooth_handle+0x190>)
 80074c0:	2202      	movs	r2, #2
 80074c2:	745a      	strb	r2, [r3, #17]
 80074c4:	e7aa      	b.n	800741c <trigger_tooth_handle+0xd4>
    engine.spinning_state = SS_STOPPED;
 80074c6:	4b04      	ldr	r3, [pc, #16]	@ (80074d8 <trigger_tooth_handle+0x190>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	745a      	strb	r2, [r3, #17]
 80074cc:	e7a6      	b.n	800741c <trigger_tooth_handle+0xd4>
    set_filtering(trigger); 
 80074ce:	f7ff fedd 	bl	800728c <set_filtering>
 80074d2:	e7a5      	b.n	8007420 <trigger_tooth_handle+0xd8>
 80074d4:	20005d74 	.word	0x20005d74
 80074d8:	20000938 	.word	0x20000938
 80074dc:	20000994 	.word	0x20000994
 80074e0:	43b40000 	.word	0x43b40000
 80074e4:	03938700 	.word	0x03938700
 80074e8:	08009e80 	.word	0x08009e80

080074ec <trigger_simulator_init>:
uint8_t wheel_missing_teeth = 0;
void (*wheel_callback)(void) = NULL;

void trigger_simulator_init(uint8_t full_teeth, uint8_t missing_teeth, void (*callback)(void))
{
    wheel_full_teeth = full_teeth;
 80074ec:	4b03      	ldr	r3, [pc, #12]	@ (80074fc <trigger_simulator_init+0x10>)
 80074ee:	7018      	strb	r0, [r3, #0]
    wheel_missing_teeth = missing_teeth;
 80074f0:	4b03      	ldr	r3, [pc, #12]	@ (8007500 <trigger_simulator_init+0x14>)
 80074f2:	7019      	strb	r1, [r3, #0]
    wheel_callback = callback;
 80074f4:	4b03      	ldr	r3, [pc, #12]	@ (8007504 <trigger_simulator_init+0x18>)
 80074f6:	601a      	str	r2, [r3, #0]
}
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	20005d85 	.word	0x20005d85
 8007500:	20005d84 	.word	0x20005d84
 8007504:	20005d80 	.word	0x20005d80

08007508 <trigger_simulator_update>:

void trigger_simulator_update(rpm_t rpm)
{
    if (wheel_callback == NULL)
 8007508:	4b20      	ldr	r3, [pc, #128]	@ (800758c <trigger_simulator_update+0x84>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d03c      	beq.n	800758a <trigger_simulator_update+0x82>
{
 8007510:	b510      	push	{r4, lr}
    if (rpm == 0)
 8007512:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751a:	d030      	beq.n	800757e <trigger_simulator_update+0x76>
    return (time_us_t) 60.0f * 1e6f / (rpm * 360.0f);
 800751c:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8007590 <trigger_simulator_update+0x88>
 8007520:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007524:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8007594 <trigger_simulator_update+0x8c>
 8007528:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800752c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007530:	ee17 4a90 	vmov	r4, s15
    {
        return;
    }

    time_us_t tooth_interval = microseconds_per_degree(rpm) * 360 / wheel_full_teeth;
 8007534:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8007538:	fb03 f404 	mul.w	r4, r3, r4
 800753c:	4b16      	ldr	r3, [pc, #88]	@ (8007598 <trigger_simulator_update+0x90>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	fbb4 f4f3 	udiv	r4, r4, r3

    time_us_t current_time = get_time_us();
 8007544:	f7ff fdea 	bl	800711c <get_time_us>
    static time_us_t prev_time = 0;

    if ((int32_t)(current_time - prev_time) < tooth_interval)
 8007548:	4b14      	ldr	r3, [pc, #80]	@ (800759c <trigger_simulator_update+0x94>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	1ac3      	subs	r3, r0, r3
 800754e:	42a3      	cmp	r3, r4
 8007550:	d314      	bcc.n	800757c <trigger_simulator_update+0x74>
    {
        return;
    }
    prev_time = current_time;
 8007552:	4b12      	ldr	r3, [pc, #72]	@ (800759c <trigger_simulator_update+0x94>)
 8007554:	6018      	str	r0, [r3, #0]
    
    static uint8_t current_tooth_index = 0;

    if (current_tooth_index < wheel_missing_teeth)
 8007556:	4b12      	ldr	r3, [pc, #72]	@ (80075a0 <trigger_simulator_update+0x98>)
 8007558:	781a      	ldrb	r2, [r3, #0]
 800755a:	4b12      	ldr	r3, [pc, #72]	@ (80075a4 <trigger_simulator_update+0x9c>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	429a      	cmp	r2, r3
 8007560:	d302      	bcc.n	8007568 <trigger_simulator_update+0x60>
    {
        // welll do nothing!
    }
    else
    {
        wheel_callback();
 8007562:	4b0a      	ldr	r3, [pc, #40]	@ (800758c <trigger_simulator_update+0x84>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4798      	blx	r3
    }
    

    if (current_tooth_index < (wheel_full_teeth - 1))
 8007568:	4b0d      	ldr	r3, [pc, #52]	@ (80075a0 <trigger_simulator_update+0x98>)
 800756a:	781a      	ldrb	r2, [r3, #0]
 800756c:	4b0a      	ldr	r3, [pc, #40]	@ (8007598 <trigger_simulator_update+0x90>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	3b01      	subs	r3, #1
 8007572:	429a      	cmp	r2, r3
 8007574:	da05      	bge.n	8007582 <trigger_simulator_update+0x7a>
    {
        current_tooth_index++;
 8007576:	3201      	adds	r2, #1
 8007578:	4b09      	ldr	r3, [pc, #36]	@ (80075a0 <trigger_simulator_update+0x98>)
 800757a:	701a      	strb	r2, [r3, #0]
    {
        current_tooth_index = 0;
    }


}
 800757c:	bd10      	pop	{r4, pc}
        return 0;
 800757e:	2400      	movs	r4, #0
 8007580:	e7d8      	b.n	8007534 <trigger_simulator_update+0x2c>
        current_tooth_index = 0;
 8007582:	4b07      	ldr	r3, [pc, #28]	@ (80075a0 <trigger_simulator_update+0x98>)
 8007584:	2200      	movs	r2, #0
 8007586:	701a      	strb	r2, [r3, #0]
 8007588:	e7f8      	b.n	800757c <trigger_simulator_update+0x74>
 800758a:	4770      	bx	lr
 800758c:	20005d80 	.word	0x20005d80
 8007590:	43b40000 	.word	0x43b40000
 8007594:	4c64e1c0 	.word	0x4c64e1c0
 8007598:	20005d85 	.word	0x20005d85
 800759c:	20005d7c 	.word	0x20005d7c
 80075a0:	20005d78 	.word	0x20005d78
 80075a4:	20005d84 	.word	0x20005d84

080075a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075aa:	2200      	movs	r2, #0
 80075ac:	490f      	ldr	r1, [pc, #60]	@ (80075ec <MX_USB_DEVICE_Init+0x44>)
 80075ae:	4810      	ldr	r0, [pc, #64]	@ (80075f0 <MX_USB_DEVICE_Init+0x48>)
 80075b0:	f000 fc4a 	bl	8007e48 <USBD_Init>
 80075b4:	b970      	cbnz	r0, 80075d4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80075b6:	490f      	ldr	r1, [pc, #60]	@ (80075f4 <MX_USB_DEVICE_Init+0x4c>)
 80075b8:	480d      	ldr	r0, [pc, #52]	@ (80075f0 <MX_USB_DEVICE_Init+0x48>)
 80075ba:	f000 fc5c 	bl	8007e76 <USBD_RegisterClass>
 80075be:	b960      	cbnz	r0, 80075da <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075c0:	490d      	ldr	r1, [pc, #52]	@ (80075f8 <MX_USB_DEVICE_Init+0x50>)
 80075c2:	480b      	ldr	r0, [pc, #44]	@ (80075f0 <MX_USB_DEVICE_Init+0x48>)
 80075c4:	f000 fa39 	bl	8007a3a <USBD_CDC_RegisterInterface>
 80075c8:	b950      	cbnz	r0, 80075e0 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075ca:	4809      	ldr	r0, [pc, #36]	@ (80075f0 <MX_USB_DEVICE_Init+0x48>)
 80075cc:	f000 fc73 	bl	8007eb6 <USBD_Start>
 80075d0:	b948      	cbnz	r0, 80075e6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075d2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80075d4:	f7f9 ffde 	bl	8001594 <Error_Handler>
 80075d8:	e7ed      	b.n	80075b6 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 80075da:	f7f9 ffdb 	bl	8001594 <Error_Handler>
 80075de:	e7ef      	b.n	80075c0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80075e0:	f7f9 ffd8 	bl	8001594 <Error_Handler>
 80075e4:	e7f1      	b.n	80075ca <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80075e6:	f7f9 ffd5 	bl	8001594 <Error_Handler>
}
 80075ea:	e7f2      	b.n	80075d2 <MX_USB_DEVICE_Init+0x2a>
 80075ec:	200000e4 	.word	0x200000e4
 80075f0:	20005d88 	.word	0x20005d88
 80075f4:	20000058 	.word	0x20000058
 80075f8:	2000009c 	.word	0x2000009c

080075fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80075fc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075fe:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007602:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8007606:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 800760a:	b18c      	cbz	r4, 8007630 <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800760c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007610:	6843      	ldr	r3, [r0, #4]
 8007612:	b17b      	cbz	r3, 8007634 <USBD_CDC_EP0_RxReady+0x38>
 8007614:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8007618:	28ff      	cmp	r0, #255	@ 0xff
 800761a:	d00d      	beq.n	8007638 <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8007622:	4621      	mov	r1, r4
 8007624:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8007626:	23ff      	movs	r3, #255	@ 0xff
 8007628:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800762c:	2000      	movs	r0, #0
}
 800762e:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8007630:	2003      	movs	r0, #3
 8007632:	e7fc      	b.n	800762e <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 8007634:	2000      	movs	r0, #0
 8007636:	e7fa      	b.n	800762e <USBD_CDC_EP0_RxReady+0x32>
 8007638:	2000      	movs	r0, #0
 800763a:	e7f8      	b.n	800762e <USBD_CDC_EP0_RxReady+0x32>

0800763c <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800763c:	230a      	movs	r3, #10
 800763e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8007640:	4800      	ldr	r0, [pc, #0]	@ (8007644 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8007642:	4770      	bx	lr
 8007644:	20000090 	.word	0x20000090

08007648 <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800764c:	4f0f      	ldr	r7, [pc, #60]	@ (800768c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800764e:	2182      	movs	r1, #130	@ 0x82
 8007650:	4638      	mov	r0, r7
 8007652:	f000 fde3 	bl	800821c <USBD_GetEpDesc>
 8007656:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007658:	2101      	movs	r1, #1
 800765a:	4638      	mov	r0, r7
 800765c:	f000 fdde 	bl	800821c <USBD_GetEpDesc>
 8007660:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007662:	2181      	movs	r1, #129	@ 0x81
 8007664:	4638      	mov	r0, r7
 8007666:	f000 fdd9 	bl	800821c <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800766a:	b10d      	cbz	r5, 8007670 <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800766c:	2210      	movs	r2, #16
 800766e:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8007670:	b11c      	cbz	r4, 800767a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007672:	2240      	movs	r2, #64	@ 0x40
 8007674:	7122      	strb	r2, [r4, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800767a:	b118      	cbz	r0, 8007684 <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800767c:	2240      	movs	r2, #64	@ 0x40
 800767e:	7102      	strb	r2, [r0, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007684:	2343      	movs	r3, #67	@ 0x43
 8007686:	8033      	strh	r3, [r6, #0]
}
 8007688:	4800      	ldr	r0, [pc, #0]	@ (800768c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800768a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800768c:	20000014 	.word	0x20000014

08007690 <USBD_CDC_GetFSCfgDesc>:
{
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007694:	4f0f      	ldr	r7, [pc, #60]	@ (80076d4 <USBD_CDC_GetFSCfgDesc+0x44>)
 8007696:	2182      	movs	r1, #130	@ 0x82
 8007698:	4638      	mov	r0, r7
 800769a:	f000 fdbf 	bl	800821c <USBD_GetEpDesc>
 800769e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076a0:	2101      	movs	r1, #1
 80076a2:	4638      	mov	r0, r7
 80076a4:	f000 fdba 	bl	800821c <USBD_GetEpDesc>
 80076a8:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076aa:	2181      	movs	r1, #129	@ 0x81
 80076ac:	4638      	mov	r0, r7
 80076ae:	f000 fdb5 	bl	800821c <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80076b2:	b10d      	cbz	r5, 80076b8 <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80076b4:	2210      	movs	r2, #16
 80076b6:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80076b8:	b11c      	cbz	r4, 80076c2 <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076ba:	2240      	movs	r2, #64	@ 0x40
 80076bc:	7122      	strb	r2, [r4, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80076c2:	b118      	cbz	r0, 80076cc <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076c4:	2240      	movs	r2, #64	@ 0x40
 80076c6:	7102      	strb	r2, [r0, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80076cc:	2343      	movs	r3, #67	@ 0x43
 80076ce:	8033      	strh	r3, [r6, #0]
}
 80076d0:	4800      	ldr	r0, [pc, #0]	@ (80076d4 <USBD_CDC_GetFSCfgDesc+0x44>)
 80076d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076d4:	20000014 	.word	0x20000014

080076d8 <USBD_CDC_GetHSCfgDesc>:
{
 80076d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076da:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076dc:	4f0f      	ldr	r7, [pc, #60]	@ (800771c <USBD_CDC_GetHSCfgDesc+0x44>)
 80076de:	2182      	movs	r1, #130	@ 0x82
 80076e0:	4638      	mov	r0, r7
 80076e2:	f000 fd9b 	bl	800821c <USBD_GetEpDesc>
 80076e6:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076e8:	2101      	movs	r1, #1
 80076ea:	4638      	mov	r0, r7
 80076ec:	f000 fd96 	bl	800821c <USBD_GetEpDesc>
 80076f0:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076f2:	2181      	movs	r1, #129	@ 0x81
 80076f4:	4638      	mov	r0, r7
 80076f6:	f000 fd91 	bl	800821c <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80076fa:	b10d      	cbz	r5, 8007700 <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80076fc:	2210      	movs	r2, #16
 80076fe:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8007700:	b11c      	cbz	r4, 800770a <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007702:	2200      	movs	r2, #0
 8007704:	7122      	strb	r2, [r4, #4]
 8007706:	2202      	movs	r2, #2
 8007708:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800770a:	b118      	cbz	r0, 8007714 <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800770c:	2200      	movs	r2, #0
 800770e:	7102      	strb	r2, [r0, #4]
 8007710:	2202      	movs	r2, #2
 8007712:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007714:	2343      	movs	r3, #67	@ 0x43
 8007716:	8033      	strh	r3, [r6, #0]
}
 8007718:	4800      	ldr	r0, [pc, #0]	@ (800771c <USBD_CDC_GetHSCfgDesc+0x44>)
 800771a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800771c:	20000014 	.word	0x20000014

08007720 <USBD_CDC_DataOut>:
{
 8007720:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007722:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007726:	33b0      	adds	r3, #176	@ 0xb0
 8007728:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800772c:	b195      	cbz	r5, 8007754 <USBD_CDC_DataOut+0x34>
 800772e:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007730:	f000 fb32 	bl	8007d98 <USBD_LL_GetRxDataSize>
 8007734:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007738:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800773c:	33b0      	adds	r3, #176	@ 0xb0
 800773e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007742:	6863      	ldr	r3, [r4, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 800774a:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 800774e:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8007750:	2000      	movs	r0, #0
}
 8007752:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8007754:	2003      	movs	r0, #3
 8007756:	e7fc      	b.n	8007752 <USBD_CDC_DataOut+0x32>

08007758 <USBD_CDC_DataIn>:
{
 8007758:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800775a:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800775e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007762:	33b0      	adds	r3, #176	@ 0xb0
 8007764:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8007768:	b384      	cbz	r4, 80077cc <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800776a:	f001 030f 	and.w	r3, r1, #15
 800776e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007772:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007776:	6992      	ldr	r2, [r2, #24]
 8007778:	b14a      	cbz	r2, 800778e <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800777a:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 800777e:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8007782:	69ed      	ldr	r5, [r5, #28]
 8007784:	fbb2 fcf5 	udiv	ip, r2, r5
 8007788:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800778c:	b192      	cbz	r2, 80077b4 <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007794:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007798:	33b0      	adds	r3, #176	@ 0xb0
 800779a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800779e:	6843      	ldr	r3, [r0, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	b1ab      	cbz	r3, 80077d0 <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80077a4:	460a      	mov	r2, r1
 80077a6:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 80077aa:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 80077ae:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80077b0:	2000      	movs	r0, #0
}
 80077b2:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80077b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80077b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80077bc:	2400      	movs	r4, #0
 80077be:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80077c0:	4623      	mov	r3, r4
 80077c2:	4622      	mov	r2, r4
 80077c4:	f000 fb30 	bl	8007e28 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80077c8:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80077ca:	e7f2      	b.n	80077b2 <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 80077cc:	2003      	movs	r0, #3
 80077ce:	e7f0      	b.n	80077b2 <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 80077d0:	2000      	movs	r0, #0
 80077d2:	e7ee      	b.n	80077b2 <USBD_CDC_DataIn+0x5a>

080077d4 <USBD_CDC_Setup>:
{
 80077d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077d6:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077d8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80077dc:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80077e0:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 80077e4:	2200      	movs	r2, #0
 80077e6:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 80077ea:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 80077ee:	2f00      	cmp	r7, #0
 80077f0:	d078      	beq.n	80078e4 <USBD_CDC_Setup+0x110>
 80077f2:	4604      	mov	r4, r0
 80077f4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077f6:	7809      	ldrb	r1, [r1, #0]
 80077f8:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 80077fc:	d034      	beq.n	8007868 <USBD_CDC_Setup+0x94>
 80077fe:	2e20      	cmp	r6, #32
 8007800:	d169      	bne.n	80078d6 <USBD_CDC_Setup+0x102>
      if (req->wLength != 0U)
 8007802:	88ea      	ldrh	r2, [r5, #6]
 8007804:	b32a      	cbz	r2, 8007852 <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 8007806:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800780a:	d10e      	bne.n	800782a <USBD_CDC_Setup+0x56>
          hcdc->CmdOpCode = req->bRequest;
 800780c:	786b      	ldrb	r3, [r5, #1]
 800780e:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007812:	88ea      	ldrh	r2, [r5, #6]
 8007814:	2a3f      	cmp	r2, #63	@ 0x3f
 8007816:	d81a      	bhi.n	800784e <USBD_CDC_Setup+0x7a>
 8007818:	b2d2      	uxtb	r2, r2
 800781a:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800781e:	4639      	mov	r1, r7
 8007820:	4620      	mov	r0, r4
 8007822:	f001 f964 	bl	8008aee <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8007826:	2600      	movs	r6, #0
 8007828:	e059      	b.n	80078de <USBD_CDC_Setup+0x10a>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800782a:	33b0      	adds	r3, #176	@ 0xb0
 800782c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	4639      	mov	r1, r7
 8007836:	7868      	ldrb	r0, [r5, #1]
 8007838:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800783a:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800783c:	2a07      	cmp	r2, #7
 800783e:	bf28      	it	cs
 8007840:	2207      	movcs	r2, #7
 8007842:	4639      	mov	r1, r7
 8007844:	4620      	mov	r0, r4
 8007846:	f001 f93d 	bl	8008ac4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800784a:	2600      	movs	r6, #0
 800784c:	e047      	b.n	80078de <USBD_CDC_Setup+0x10a>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800784e:	2240      	movs	r2, #64	@ 0x40
 8007850:	e7e3      	b.n	800781a <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007852:	33b0      	adds	r3, #176	@ 0xb0
 8007854:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	2200      	movs	r2, #0
 800785e:	4629      	mov	r1, r5
 8007860:	7868      	ldrb	r0, [r5, #1]
 8007862:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8007864:	2600      	movs	r6, #0
 8007866:	e03a      	b.n	80078de <USBD_CDC_Setup+0x10a>
      switch (req->bRequest)
 8007868:	786f      	ldrb	r7, [r5, #1]
 800786a:	2f0b      	cmp	r7, #11
 800786c:	d82e      	bhi.n	80078cc <USBD_CDC_Setup+0xf8>
 800786e:	e8df f007 	tbb	[pc, r7]
 8007872:	3606      	.short	0x3606
 8007874:	2d2d2d2d 	.word	0x2d2d2d2d
 8007878:	2d2d2d2d 	.word	0x2d2d2d2d
 800787c:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800787e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007882:	2b03      	cmp	r3, #3
 8007884:	d004      	beq.n	8007890 <USBD_CDC_Setup+0xbc>
            USBD_CtlError(pdev, req);
 8007886:	4629      	mov	r1, r5
 8007888:	f000 fd05 	bl	8008296 <USBD_CtlError>
            ret = USBD_FAIL;
 800788c:	2603      	movs	r6, #3
 800788e:	e026      	b.n	80078de <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007890:	2202      	movs	r2, #2
 8007892:	a901      	add	r1, sp, #4
 8007894:	f001 f916 	bl	8008ac4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8007898:	463e      	mov	r6, r7
 800789a:	e020      	b.n	80078de <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d004      	beq.n	80078ae <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 80078a4:	4629      	mov	r1, r5
 80078a6:	f000 fcf6 	bl	8008296 <USBD_CtlError>
            ret = USBD_FAIL;
 80078aa:	2603      	movs	r6, #3
 80078ac:	e017      	b.n	80078de <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80078ae:	2201      	movs	r2, #1
 80078b0:	f10d 0107 	add.w	r1, sp, #7
 80078b4:	f001 f906 	bl	8008ac4 <USBD_CtlSendData>
 80078b8:	e011      	b.n	80078de <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80078ba:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d00d      	beq.n	80078de <USBD_CDC_Setup+0x10a>
            USBD_CtlError(pdev, req);
 80078c2:	4629      	mov	r1, r5
 80078c4:	f000 fce7 	bl	8008296 <USBD_CtlError>
            ret = USBD_FAIL;
 80078c8:	2603      	movs	r6, #3
 80078ca:	e008      	b.n	80078de <USBD_CDC_Setup+0x10a>
          USBD_CtlError(pdev, req);
 80078cc:	4629      	mov	r1, r5
 80078ce:	f000 fce2 	bl	8008296 <USBD_CtlError>
          ret = USBD_FAIL;
 80078d2:	2603      	movs	r6, #3
          break;
 80078d4:	e003      	b.n	80078de <USBD_CDC_Setup+0x10a>
      USBD_CtlError(pdev, req);
 80078d6:	4629      	mov	r1, r5
 80078d8:	f000 fcdd 	bl	8008296 <USBD_CtlError>
      ret = USBD_FAIL;
 80078dc:	2603      	movs	r6, #3
}
 80078de:	4630      	mov	r0, r6
 80078e0:	b003      	add	sp, #12
 80078e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 80078e4:	2603      	movs	r6, #3
 80078e6:	e7fa      	b.n	80078de <USBD_CDC_Setup+0x10a>

080078e8 <USBD_CDC_DeInit>:
{
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80078ec:	2181      	movs	r1, #129	@ 0x81
 80078ee:	f000 fa7b 	bl	8007de8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80078f2:	2500      	movs	r5, #0
 80078f4:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80078f6:	2101      	movs	r1, #1
 80078f8:	4620      	mov	r0, r4
 80078fa:	f000 fa75 	bl	8007de8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80078fe:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007902:	2182      	movs	r1, #130	@ 0x82
 8007904:	4620      	mov	r0, r4
 8007906:	f000 fa6f 	bl	8007de8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800790a:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800790e:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007912:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8007916:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800791a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800791e:	b19a      	cbz	r2, 8007948 <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007920:	33b0      	adds	r3, #176	@ 0xb0
 8007922:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800792c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8007930:	33b0      	adds	r3, #176	@ 0xb0
 8007932:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8007936:	f000 fa39 	bl	8007dac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800793a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800793e:	33b0      	adds	r3, #176	@ 0xb0
 8007940:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8007944:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8007948:	2000      	movs	r0, #0
 800794a:	bd38      	pop	{r3, r4, r5, pc}

0800794c <USBD_CDC_Init>:
{
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007950:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007954:	f000 fa26 	bl	8007da4 <USBD_static_malloc>
  if (hcdc == NULL)
 8007958:	2800      	cmp	r0, #0
 800795a:	d049      	beq.n	80079f0 <USBD_CDC_Init+0xa4>
 800795c:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800795e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007962:	2100      	movs	r1, #0
 8007964:	f001 f950 	bl	8008c08 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007968:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800796c:	33b0      	adds	r3, #176	@ 0xb0
 800796e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007972:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007976:	7c23      	ldrb	r3, [r4, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d141      	bne.n	8007a00 <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800797c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007980:	2202      	movs	r2, #2
 8007982:	2181      	movs	r1, #129	@ 0x81
 8007984:	4620      	mov	r0, r4
 8007986:	f000 fa24 	bl	8007dd2 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800798a:	2601      	movs	r6, #1
 800798c:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800798e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007992:	2202      	movs	r2, #2
 8007994:	4631      	mov	r1, r6
 8007996:	4620      	mov	r0, r4
 8007998:	f000 fa1b 	bl	8007dd2 <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800799c:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80079a0:	2310      	movs	r3, #16
 80079a2:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079a6:	2308      	movs	r3, #8
 80079a8:	2203      	movs	r2, #3
 80079aa:	2182      	movs	r1, #130	@ 0x82
 80079ac:	4620      	mov	r0, r4
 80079ae:	f000 fa10 	bl	8007dd2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80079b2:	2301      	movs	r3, #1
 80079b4:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
  hcdc->RxBuffer = NULL;
 80079b8:	2600      	movs	r6, #0
 80079ba:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80079be:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80079c2:	33b0      	adds	r3, #176	@ 0xb0
 80079c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4798      	blx	r3
  hcdc->TxState = 0U;
 80079ce:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 80079d2:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 80079d6:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 80079da:	b362      	cbz	r2, 8007a36 <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079dc:	7c25      	ldrb	r5, [r4, #16]
 80079de:	bb1d      	cbnz	r5, 8007a28 <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079e4:	2101      	movs	r1, #1
 80079e6:	4620      	mov	r0, r4
 80079e8:	f000 fa26 	bl	8007e38 <USBD_LL_PrepareReceive>
}
 80079ec:	4628      	mov	r0, r5
 80079ee:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80079f0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80079f4:	33b0      	adds	r3, #176	@ 0xb0
 80079f6:	2200      	movs	r2, #0
 80079f8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 80079fc:	2502      	movs	r5, #2
 80079fe:	e7f5      	b.n	80079ec <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a00:	2340      	movs	r3, #64	@ 0x40
 8007a02:	2202      	movs	r2, #2
 8007a04:	2181      	movs	r1, #129	@ 0x81
 8007a06:	4620      	mov	r0, r4
 8007a08:	f000 f9e3 	bl	8007dd2 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a0c:	2601      	movs	r6, #1
 8007a0e:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a10:	2340      	movs	r3, #64	@ 0x40
 8007a12:	2202      	movs	r2, #2
 8007a14:	4631      	mov	r1, r6
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 f9db 	bl	8007dd2 <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a1c:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a20:	2310      	movs	r3, #16
 8007a22:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 8007a26:	e7be      	b.n	80079a6 <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a28:	2340      	movs	r3, #64	@ 0x40
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 fa03 	bl	8007e38 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8007a32:	2500      	movs	r5, #0
 8007a34:	e7da      	b.n	80079ec <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 8007a36:	2502      	movs	r5, #2
 8007a38:	e7d8      	b.n	80079ec <USBD_CDC_Init+0xa0>

08007a3a <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8007a3a:	b139      	cbz	r1, 8007a4c <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8007a3c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007a40:	33b0      	adds	r3, #176	@ 0xb0
 8007a42:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007a46:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 8007a48:	2000      	movs	r0, #0
 8007a4a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007a4c:	2003      	movs	r0, #3
}
 8007a4e:	4770      	bx	lr

08007a50 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a50:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007a54:	33b0      	adds	r3, #176	@ 0xb0
 8007a56:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007a5a:	b12b      	cbz	r3, 8007a68 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8007a5c:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007a60:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007a64:	2000      	movs	r0, #0
 8007a66:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007a68:	2003      	movs	r0, #3
}
 8007a6a:	4770      	bx	lr

08007a6c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a6c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007a70:	33b0      	adds	r3, #176	@ 0xb0
 8007a72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8007a76:	b11b      	cbz	r3, 8007a80 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8007a78:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007a80:	2003      	movs	r0, #3
}
 8007a82:	4770      	bx	lr

08007a84 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a84:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a86:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007a8a:	33b0      	adds	r3, #176	@ 0xb0
 8007a8c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007a90:	b18a      	cbz	r2, 8007ab6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8007a92:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 8007a96:	b10b      	cbz	r3, 8007a9c <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007a98:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8007a9a:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007aa2:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 8007aa6:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007aa8:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8007aac:	2181      	movs	r1, #129	@ 0x81
 8007aae:	f000 f9bb 	bl	8007e28 <USBD_LL_Transmit>
    ret = USBD_OK;
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	e7f1      	b.n	8007a9a <USBD_CDC_TransmitPacket+0x16>
    return (uint8_t)USBD_FAIL;
 8007ab6:	2003      	movs	r0, #3
 8007ab8:	e7ef      	b.n	8007a9a <USBD_CDC_TransmitPacket+0x16>

08007aba <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007aba:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007abc:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007ac0:	33b0      	adds	r3, #176	@ 0xb0
 8007ac2:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ac6:	b192      	cbz	r2, 8007aee <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ac8:	7c04      	ldrb	r4, [r0, #16]
 8007aca:	b944      	cbnz	r4, 8007ade <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ad0:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	f000 f9af 	bl	8007e38 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8007ada:	4620      	mov	r0, r4
 8007adc:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ade:	2340      	movs	r3, #64	@ 0x40
 8007ae0:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	f000 f9a7 	bl	8007e38 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8007aea:	2400      	movs	r4, #0
 8007aec:	e7f5      	b.n	8007ada <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 8007aee:	2403      	movs	r4, #3
 8007af0:	e7f3      	b.n	8007ada <USBD_CDC_ReceivePacket+0x20>

08007af2 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8007af2:	2000      	movs	r0, #0
 8007af4:	4770      	bx	lr

08007af6 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8007af6:	2000      	movs	r0, #0
 8007af8:	4770      	bx	lr

08007afa <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8007afa:	2000      	movs	r0, #0
 8007afc:	4770      	bx	lr
	...

08007b00 <CDC_Receive_FS>:
{
 8007b00:	b570      	push	{r4, r5, r6, lr}
 8007b02:	b092      	sub	sp, #72	@ 0x48
 8007b04:	4605      	mov	r5, r0
 8007b06:	460c      	mov	r4, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b08:	4e0e      	ldr	r6, [pc, #56]	@ (8007b44 <CDC_Receive_FS+0x44>)
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f7ff ffad 	bl	8007a6c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b12:	4630      	mov	r0, r6
 8007b14:	f7ff ffd1 	bl	8007aba <USBD_CDC_ReceivePacket>
    if (*Len > 0 && *Len <= USB_RX_PACKET_MAX_SIZE) {
 8007b18:	6822      	ldr	r2, [r4, #0]
 8007b1a:	1e53      	subs	r3, r2, #1
 8007b1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8007b1e:	d902      	bls.n	8007b26 <CDC_Receive_FS+0x26>
}
 8007b20:	2000      	movs	r0, #0
 8007b22:	b012      	add	sp, #72	@ 0x48
 8007b24:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(rx_packet.data, Buf, *Len); // Copy data from USB buffer
 8007b26:	ae01      	add	r6, sp, #4
 8007b28:	4629      	mov	r1, r5
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f001 f8a0 	bl	8008c70 <memcpy>
        rx_packet.len = *Len;
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	9311      	str	r3, [sp, #68]	@ 0x44
        osMessageQueuePut(usb_rx_queue_handle, &rx_packet, 5, 0);
 8007b34:	2300      	movs	r3, #0
 8007b36:	2205      	movs	r2, #5
 8007b38:	4631      	mov	r1, r6
 8007b3a:	4803      	ldr	r0, [pc, #12]	@ (8007b48 <CDC_Receive_FS+0x48>)
 8007b3c:	6800      	ldr	r0, [r0, #0]
 8007b3e:	f7f8 feb4 	bl	80008aa <osMessageQueuePut>
 8007b42:	e7ed      	b.n	8007b20 <CDC_Receive_FS+0x20>
 8007b44:	20005d88 	.word	0x20005d88
 8007b48:	200008f4 	.word	0x200008f4

08007b4c <CDC_Init_FS>:
{
 8007b4c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b4e:	4c06      	ldr	r4, [pc, #24]	@ (8007b68 <CDC_Init_FS+0x1c>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	4906      	ldr	r1, [pc, #24]	@ (8007b6c <CDC_Init_FS+0x20>)
 8007b54:	4620      	mov	r0, r4
 8007b56:	f7ff ff7b 	bl	8007a50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b5a:	4905      	ldr	r1, [pc, #20]	@ (8007b70 <CDC_Init_FS+0x24>)
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f7ff ff85 	bl	8007a6c <USBD_CDC_SetRxBuffer>
}
 8007b62:	2000      	movs	r0, #0
 8007b64:	bd10      	pop	{r4, pc}
 8007b66:	bf00      	nop
 8007b68:	20005d88 	.word	0x20005d88
 8007b6c:	20006064 	.word	0x20006064
 8007b70:	20006464 	.word	0x20006464

08007b74 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b74:	4b09      	ldr	r3, [pc, #36]	@ (8007b9c <CDC_Transmit_FS+0x28>)
 8007b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 8007b7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007b7e:	b10b      	cbz	r3, 8007b84 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8007b80:	2001      	movs	r0, #1
}
 8007b82:	4770      	bx	lr
{
 8007b84:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b86:	4c05      	ldr	r4, [pc, #20]	@ (8007b9c <CDC_Transmit_FS+0x28>)
 8007b88:	460a      	mov	r2, r1
 8007b8a:	4601      	mov	r1, r0
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f7ff ff5f 	bl	8007a50 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b92:	4620      	mov	r0, r4
 8007b94:	f7ff ff76 	bl	8007a84 <USBD_CDC_TransmitPacket>
}
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20005d88 	.word	0x20005d88

08007ba0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ba0:	b530      	push	{r4, r5, lr}
 8007ba2:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	9303      	str	r3, [sp, #12]
 8007ba8:	9304      	str	r3, [sp, #16]
 8007baa:	9305      	str	r3, [sp, #20]
 8007bac:	9306      	str	r3, [sp, #24]
 8007bae:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007bb0:	6803      	ldr	r3, [r0, #0]
 8007bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007bb6:	d001      	beq.n	8007bbc <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007bb8:	b009      	add	sp, #36	@ 0x24
 8007bba:	bd30      	pop	{r4, r5, pc}
 8007bbc:	aa03      	add	r2, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bbe:	2500      	movs	r5, #0
 8007bc0:	9501      	str	r5, [sp, #4]
 8007bc2:	4c17      	ldr	r4, [pc, #92]	@ (8007c20 <HAL_PCD_MspInit+0x80>)
 8007bc4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007bc6:	f043 0301 	orr.w	r3, r3, #1
 8007bca:	6323      	str	r3, [r4, #48]	@ 0x30
 8007bcc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	9301      	str	r3, [sp, #4]
 8007bd4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007bd6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007bda:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bdc:	2302      	movs	r3, #2
 8007bde:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007be0:	2303      	movs	r3, #3
 8007be2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007be4:	230a      	movs	r3, #10
 8007be6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007be8:	4611      	mov	r1, r2
 8007bea:	480e      	ldr	r0, [pc, #56]	@ (8007c24 <HAL_PCD_MspInit+0x84>)
 8007bec:	f7fb f964 	bl	8002eb8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007bf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bf6:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bf8:	9502      	str	r5, [sp, #8]
 8007bfa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c00:	6463      	str	r3, [r4, #68]	@ 0x44
 8007c02:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007c04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c08:	9302      	str	r3, [sp, #8]
 8007c0a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	2105      	movs	r1, #5
 8007c10:	2043      	movs	r0, #67	@ 0x43
 8007c12:	f7fa ff29 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c16:	2043      	movs	r0, #67	@ 0x43
 8007c18:	f7fa ff36 	bl	8002a88 <HAL_NVIC_EnableIRQ>
}
 8007c1c:	e7cc      	b.n	8007bb8 <HAL_PCD_MspInit+0x18>
 8007c1e:	bf00      	nop
 8007c20:	40023800 	.word	0x40023800
 8007c24:	40020000 	.word	0x40020000

08007c28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c28:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c2a:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8007c2e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007c32:	f000 f956 	bl	8007ee2 <USBD_LL_SetupStage>
}
 8007c36:	bd08      	pop	{r3, pc}

08007c38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c38:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c3a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8007c3e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007c42:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8007c46:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007c4a:	f000 fa17 	bl	800807c <USBD_LL_DataOutStage>
}
 8007c4e:	bd08      	pop	{r3, pc}

08007c50 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c50:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c52:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8007c56:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007c5a:	6a1a      	ldr	r2, [r3, #32]
 8007c5c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007c60:	f000 fa6c 	bl	800813c <USBD_LL_DataInStage>
}
 8007c64:	bd08      	pop	{r3, pc}

08007c66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c66:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c68:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007c6c:	f000 f9b4 	bl	8007fd8 <USBD_LL_SOF>
}
 8007c70:	bd08      	pop	{r3, pc}

08007c72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c72:	b510      	push	{r4, lr}
 8007c74:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c76:	79c3      	ldrb	r3, [r0, #7]
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d109      	bne.n	8007c90 <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8007c82:	f000 f98c 	bl	8007f9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c86:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8007c8a:	f000 f956 	bl	8007f3a <USBD_LL_Reset>
}
 8007c8e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007c90:	f7f9 fc80 	bl	8001594 <Error_Handler>
 8007c94:	e7f2      	b.n	8007c7c <HAL_PCD_ResetCallback+0xa>
	...

08007c98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c9c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007ca0:	f000 f980 	bl	8007fa4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ca4:	6822      	ldr	r2, [r4, #0]
 8007ca6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8007caa:	f043 0301 	orr.w	r3, r3, #1
 8007cae:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007cb2:	7ae3      	ldrb	r3, [r4, #11]
 8007cb4:	b123      	cbz	r3, 8007cc0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cb6:	4a03      	ldr	r2, [pc, #12]	@ (8007cc4 <HAL_PCD_SuspendCallback+0x2c>)
 8007cb8:	6913      	ldr	r3, [r2, #16]
 8007cba:	f043 0306 	orr.w	r3, r3, #6
 8007cbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007cc0:	bd10      	pop	{r4, pc}
 8007cc2:	bf00      	nop
 8007cc4:	e000ed00 	.word	0xe000ed00

08007cc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cca:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007cce:	f000 f977 	bl	8007fc0 <USBD_LL_Resume>
}
 8007cd2:	bd08      	pop	{r3, pc}

08007cd4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd4:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cd6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007cda:	f000 f9a3 	bl	8008024 <USBD_LL_IsoOUTIncomplete>
}
 8007cde:	bd08      	pop	{r3, pc}

08007ce0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce0:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ce2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007ce6:	f000 f987 	bl	8007ff8 <USBD_LL_IsoINIncomplete>
}
 8007cea:	bd08      	pop	{r3, pc}

08007cec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cec:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cee:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007cf2:	f000 f9ad 	bl	8008050 <USBD_LL_DevConnected>
}
 8007cf6:	bd08      	pop	{r3, pc}

08007cf8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf8:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cfa:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007cfe:	f000 f9a9 	bl	8008054 <USBD_LL_DevDisconnected>
}
 8007d02:	bd08      	pop	{r3, pc}

08007d04 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d04:	7802      	ldrb	r2, [r0, #0]
 8007d06:	b10a      	cbz	r2, 8007d0c <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8007d08:	2000      	movs	r0, #0
 8007d0a:	4770      	bx	lr
{
 8007d0c:	b510      	push	{r4, lr}
 8007d0e:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8007d10:	4815      	ldr	r0, [pc, #84]	@ (8007d68 <USBD_LL_Init+0x64>)
 8007d12:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d16:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8007d1e:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d20:	2304      	movs	r3, #4
 8007d22:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d24:	2202      	movs	r2, #2
 8007d26:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d2c:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d2e:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d30:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d32:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d34:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d36:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d38:	f7fb fa48 	bl	80031cc <HAL_PCD_Init>
 8007d3c:	b980      	cbnz	r0, 8007d60 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d3e:	4c0a      	ldr	r4, [pc, #40]	@ (8007d68 <USBD_LL_Init+0x64>)
 8007d40:	2180      	movs	r1, #128	@ 0x80
 8007d42:	4620      	mov	r0, r4
 8007d44:	f7fc f811 	bl	8003d6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d48:	2240      	movs	r2, #64	@ 0x40
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f7fb ffe6 	bl	8003d1e <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d52:	2280      	movs	r2, #128	@ 0x80
 8007d54:	2101      	movs	r1, #1
 8007d56:	4620      	mov	r0, r4
 8007d58:	f7fb ffe1 	bl	8003d1e <HAL_PCDEx_SetTxFiFo>
}
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8007d60:	f7f9 fc18 	bl	8001594 <Error_Handler>
 8007d64:	e7eb      	b.n	8007d3e <USBD_LL_Init+0x3a>
 8007d66:	bf00      	nop
 8007d68:	20006a84 	.word	0x20006a84

08007d6c <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d6c:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8007d70:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8007d74:	d108      	bne.n	8007d88 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d76:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8007d7a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8007d7e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007d82:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8007d86:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d88:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8007d8c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8007d90:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007d94:	7d98      	ldrb	r0, [r3, #22]
 8007d96:	4770      	bx	lr

08007d98 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d98:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d9a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8007d9e:	f7fb fc19 	bl	80035d4 <HAL_PCD_EP_GetRxCount>
}
 8007da2:	bd08      	pop	{r3, pc}

08007da4 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8007da4:	4800      	ldr	r0, [pc, #0]	@ (8007da8 <USBD_static_malloc+0x4>)
 8007da6:	4770      	bx	lr
 8007da8:	20006864 	.word	0x20006864

08007dac <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8007dac:	4770      	bx	lr

08007dae <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8007dae:	2803      	cmp	r0, #3
 8007db0:	d805      	bhi.n	8007dbe <USBD_Get_USB_Status+0x10>
 8007db2:	e8df f000 	tbb	[pc, r0]
 8007db6:	0405      	.short	0x0405
 8007db8:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007dba:	2001      	movs	r0, #1
    break;
 8007dbc:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8007dbe:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8007dc0:	4770      	bx	lr

08007dc2 <USBD_LL_Start>:
{
 8007dc2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8007dc4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8007dc8:	f7fb fa81 	bl	80032ce <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dcc:	f7ff ffef 	bl	8007dae <USBD_Get_USB_Status>
}
 8007dd0:	bd08      	pop	{r3, pc}

08007dd2 <USBD_LL_OpenEP>:
{
 8007dd2:	b508      	push	{r3, lr}
 8007dd4:	4694      	mov	ip, r2
 8007dd6:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007dd8:	4663      	mov	r3, ip
 8007dda:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8007dde:	f7fb fb56 	bl	800348e <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007de2:	f7ff ffe4 	bl	8007dae <USBD_Get_USB_Status>
}
 8007de6:	bd08      	pop	{r3, pc}

08007de8 <USBD_LL_CloseEP>:
{
 8007de8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007dea:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8007dee:	f7fb fb94 	bl	800351a <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df2:	f7ff ffdc 	bl	8007dae <USBD_Get_USB_Status>
}
 8007df6:	bd08      	pop	{r3, pc}

08007df8 <USBD_LL_StallEP>:
{
 8007df8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007dfa:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8007dfe:	f7fb fc17 	bl	8003630 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e02:	f7ff ffd4 	bl	8007dae <USBD_Get_USB_Status>
}
 8007e06:	bd08      	pop	{r3, pc}

08007e08 <USBD_LL_ClearStallEP>:
{
 8007e08:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e0a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8007e0e:	f7fb fc52 	bl	80036b6 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e12:	f7ff ffcc 	bl	8007dae <USBD_Get_USB_Status>
}
 8007e16:	bd08      	pop	{r3, pc}

08007e18 <USBD_LL_SetUSBAddress>:
{
 8007e18:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e1a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8007e1e:	f7fb fb23 	bl	8003468 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e22:	f7ff ffc4 	bl	8007dae <USBD_Get_USB_Status>
}
 8007e26:	bd08      	pop	{r3, pc}

08007e28 <USBD_LL_Transmit>:
{
 8007e28:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e2a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8007e2e:	f7fb fbda 	bl	80035e6 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e32:	f7ff ffbc 	bl	8007dae <USBD_Get_USB_Status>
}
 8007e36:	bd08      	pop	{r3, pc}

08007e38 <USBD_LL_PrepareReceive>:
{
 8007e38:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e3a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8007e3e:	f7fb fba4 	bl	800358a <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e42:	f7ff ffb4 	bl	8007dae <USBD_Get_USB_Status>
}
 8007e46:	bd08      	pop	{r3, pc}

08007e48 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e48:	b198      	cbz	r0, 8007e72 <USBD_Init+0x2a>
{
 8007e4a:	b508      	push	{r3, lr}
 8007e4c:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007e4e:	2000      	movs	r0, #0
 8007e50:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007e54:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007e58:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e5c:	b109      	cbz	r1, 8007e62 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8007e5e:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e62:	2101      	movs	r1, #1
 8007e64:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007e68:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7ff ff4a 	bl	8007d04 <USBD_LL_Init>

  return ret;
}
 8007e70:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007e72:	2003      	movs	r0, #3
}
 8007e74:	4770      	bx	lr

08007e76 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e76:	b510      	push	{r4, lr}
 8007e78:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8007e80:	b1b9      	cbz	r1, 8007eb2 <USBD_RegisterClass+0x3c>
 8007e82:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007e84:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007e88:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8007e8c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8007e8e:	b143      	cbz	r3, 8007ea2 <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007e90:	32ae      	adds	r2, #174	@ 0xae
 8007e92:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8007e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e98:	f10d 0006 	add.w	r0, sp, #6
 8007e9c:	4798      	blx	r3
 8007e9e:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007ea2:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8007eac:	2000      	movs	r0, #0
}
 8007eae:	b002      	add	sp, #8
 8007eb0:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8007eb2:	2003      	movs	r0, #3
 8007eb4:	e7fb      	b.n	8007eae <USBD_RegisterClass+0x38>

08007eb6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007eb6:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007eb8:	f7ff ff83 	bl	8007dc2 <USBD_LL_Start>
}
 8007ebc:	bd08      	pop	{r3, pc}

08007ebe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ebe:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ec0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8007ec4:	b113      	cbz	r3, 8007ecc <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8007eca:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8007ecc:	2000      	movs	r0, #0
 8007ece:	e7fc      	b.n	8007eca <USBD_SetClassConfig+0xc>

08007ed0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ed0:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007ed2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	4798      	blx	r3
 8007eda:	b900      	cbnz	r0, 8007ede <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8007edc:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 8007ede:	2003      	movs	r0, #3
 8007ee0:	e7fc      	b.n	8007edc <USBD_ClrClassConfig+0xc>

08007ee2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ee2:	b538      	push	{r3, r4, r5, lr}
 8007ee4:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ee6:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8007eea:	4628      	mov	r0, r5
 8007eec:	f000 f9bf 	bl	800826e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ef6:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8007efa:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007efe:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8007f02:	f001 031f 	and.w	r3, r1, #31
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d007      	beq.n	8007f1a <USBD_LL_SetupStage+0x38>
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d00a      	beq.n	8007f24 <USBD_LL_SetupStage+0x42>
 8007f0e:	b973      	cbnz	r3, 8007f2e <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f10:	4629      	mov	r1, r5
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 fb80 	bl	8008618 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8007f18:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 fbb6 	bl	800868e <USBD_StdItfReq>
      break;
 8007f22:	e7f9      	b.n	8007f18 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f24:	4629      	mov	r1, r5
 8007f26:	4620      	mov	r0, r4
 8007f28:	f000 fbf3 	bl	8008712 <USBD_StdEPReq>
      break;
 8007f2c:	e7f4      	b.n	8007f18 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f2e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8007f32:	4620      	mov	r0, r4
 8007f34:	f7ff ff60 	bl	8007df8 <USBD_LL_StallEP>
      break;
 8007f38:	e7ee      	b.n	8007f18 <USBD_LL_SetupStage+0x36>

08007f3a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3c:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f44:	2300      	movs	r3, #0
 8007f46:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007f4a:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f4c:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007f50:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f54:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8007f58:	b1db      	cbz	r3, 8007f92 <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	b1db      	cbz	r3, 8007f96 <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4798      	blx	r3
 8007f62:	4607      	mov	r7, r0
 8007f64:	b9c8      	cbnz	r0, 8007f9a <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f66:	2340      	movs	r3, #64	@ 0x40
 8007f68:	2200      	movs	r2, #0
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f7ff ff30 	bl	8007dd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f72:	2601      	movs	r6, #1
 8007f74:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f78:	2540      	movs	r5, #64	@ 0x40
 8007f7a:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f7e:	462b      	mov	r3, r5
 8007f80:	2200      	movs	r2, #0
 8007f82:	2180      	movs	r1, #128	@ 0x80
 8007f84:	4620      	mov	r0, r4
 8007f86:	f7ff ff24 	bl	8007dd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f8a:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f8c:	6225      	str	r5, [r4, #32]

  return ret;
}
 8007f8e:	4638      	mov	r0, r7
 8007f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8007f92:	2700      	movs	r7, #0
 8007f94:	e7e7      	b.n	8007f66 <USBD_LL_Reset+0x2c>
 8007f96:	2700      	movs	r7, #0
 8007f98:	e7e5      	b.n	8007f66 <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8007f9a:	2703      	movs	r7, #3
 8007f9c:	e7e3      	b.n	8007f66 <USBD_LL_Reset+0x2c>

08007f9e <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007f9e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	4770      	bx	lr

08007fa4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007fa4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d004      	beq.n	8007fb6 <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007fac:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007fb6:	2304      	movs	r3, #4
 8007fb8:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	4770      	bx	lr

08007fc0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fc0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007fc4:	2b04      	cmp	r3, #4
 8007fc6:	d001      	beq.n	8007fcc <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8007fc8:	2000      	movs	r0, #0
 8007fca:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8007fcc:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8007fd6:	e7f7      	b.n	8007fc8 <USBD_LL_Resume+0x8>

08007fd8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fd8:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fda:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d001      	beq.n	8007fe6 <USBD_LL_SOF+0xe>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 8007fe6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0f9      	beq.n	8007fe2 <USBD_LL_SOF+0xa>
      if (pdev->pClass[0]->SOF != NULL)
 8007fee:	69db      	ldr	r3, [r3, #28]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d0f6      	beq.n	8007fe2 <USBD_LL_SOF+0xa>
        (void)pdev->pClass[0]->SOF(pdev);
 8007ff4:	4798      	blx	r3
 8007ff6:	e7f4      	b.n	8007fe2 <USBD_LL_SOF+0xa>

08007ff8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ff8:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8007ffa:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007ffe:	33ae      	adds	r3, #174	@ 0xae
 8008000:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008004:	b153      	cbz	r3, 800801c <USBD_LL_IsoINIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008006:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800800a:	2a03      	cmp	r2, #3
 800800c:	d001      	beq.n	8008012 <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800800e:	2000      	movs	r0, #0
}
 8008010:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	b123      	cbz	r3, 8008020 <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008016:	4798      	blx	r3
  return USBD_OK;
 8008018:	2000      	movs	r0, #0
 800801a:	e7f9      	b.n	8008010 <USBD_LL_IsoINIncomplete+0x18>
    return USBD_FAIL;
 800801c:	2003      	movs	r0, #3
 800801e:	e7f7      	b.n	8008010 <USBD_LL_IsoINIncomplete+0x18>
  return USBD_OK;
 8008020:	2000      	movs	r0, #0
 8008022:	e7f5      	b.n	8008010 <USBD_LL_IsoINIncomplete+0x18>

08008024 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008024:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8008026:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800802a:	33ae      	adds	r3, #174	@ 0xae
 800802c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008030:	b153      	cbz	r3, 8008048 <USBD_LL_IsoOUTIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008032:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008036:	2a03      	cmp	r2, #3
 8008038:	d001      	beq.n	800803e <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800803a:	2000      	movs	r0, #0
}
 800803c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800803e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008040:	b123      	cbz	r3, 800804c <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008042:	4798      	blx	r3
  return USBD_OK;
 8008044:	2000      	movs	r0, #0
 8008046:	e7f9      	b.n	800803c <USBD_LL_IsoOUTIncomplete+0x18>
    return USBD_FAIL;
 8008048:	2003      	movs	r0, #3
 800804a:	e7f7      	b.n	800803c <USBD_LL_IsoOUTIncomplete+0x18>
  return USBD_OK;
 800804c:	2000      	movs	r0, #0
 800804e:	e7f5      	b.n	800803c <USBD_LL_IsoOUTIncomplete+0x18>

08008050 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8008050:	2000      	movs	r0, #0
 8008052:	4770      	bx	lr

08008054 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008054:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008056:	2301      	movs	r3, #1
 8008058:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800805c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008060:	b123      	cbz	r3, 800806c <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	7901      	ldrb	r1, [r0, #4]
 8008066:	4798      	blx	r3
 8008068:	b910      	cbnz	r0, 8008070 <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800806a:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800806c:	2000      	movs	r0, #0
 800806e:	e7fc      	b.n	800806a <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 8008070:	2003      	movs	r0, #3
 8008072:	e7fa      	b.n	800806a <USBD_LL_DevDisconnected+0x16>

08008074 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8008074:	2000      	movs	r0, #0
 8008076:	4770      	bx	lr

08008078 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8008078:	2000      	movs	r0, #0
 800807a:	4770      	bx	lr

0800807c <USBD_LL_DataOutStage>:
{
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	4604      	mov	r4, r0
  if (epnum == 0U)
 8008080:	460d      	mov	r5, r1
 8008082:	2900      	cmp	r1, #0
 8008084:	d141      	bne.n	800810a <USBD_LL_DataOutStage+0x8e>
 8008086:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008088:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800808c:	2a03      	cmp	r2, #3
 800808e:	d001      	beq.n	8008094 <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 8008090:	4608      	mov	r0, r1
}
 8008092:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8008094:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 8008098:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 800809c:	4291      	cmp	r1, r2
 800809e:	d809      	bhi.n	80080b4 <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 80080a0:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 80080a4:	f003 031f 	and.w	r3, r3, #31
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d00e      	beq.n	80080ca <USBD_LL_DataOutStage+0x4e>
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d01a      	beq.n	80080e6 <USBD_LL_DataOutStage+0x6a>
 80080b0:	4628      	mov	r0, r5
 80080b2:	e00f      	b.n	80080d4 <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 80080b4:	1a89      	subs	r1, r1, r2
 80080b6:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080ba:	428a      	cmp	r2, r1
 80080bc:	bf28      	it	cs
 80080be:	460a      	movcs	r2, r1
 80080c0:	4619      	mov	r1, r3
 80080c2:	f000 fd23 	bl	8008b0c <USBD_CtlContinueRx>
  return USBD_OK;
 80080c6:	4628      	mov	r0, r5
 80080c8:	e7e3      	b.n	8008092 <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80080ca:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 80080ce:	f7ff ffd1 	bl	8008074 <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80080d2:	b918      	cbnz	r0, 80080dc <USBD_LL_DataOutStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d4:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d009      	beq.n	80080f0 <USBD_LL_DataOutStage+0x74>
        (void)USBD_CtlSendStatus(pdev);
 80080dc:	4620      	mov	r0, r4
 80080de:	f000 fd1d 	bl	8008b1c <USBD_CtlSendStatus>
  return USBD_OK;
 80080e2:	4628      	mov	r0, r5
 80080e4:	e7d5      	b.n	8008092 <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80080e6:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 80080ea:	f7ff ffc5 	bl	8008078 <USBD_CoreFindEP>
            break;
 80080ee:	e7f0      	b.n	80080d2 <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80080f0:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80080f4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80080f8:	691a      	ldr	r2, [r3, #16]
 80080fa:	2a00      	cmp	r2, #0
 80080fc:	d0ee      	beq.n	80080dc <USBD_LL_DataOutStage+0x60>
              pdev->classId = idx;
 80080fe:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	4620      	mov	r0, r4
 8008106:	4798      	blx	r3
 8008108:	e7e8      	b.n	80080dc <USBD_LL_DataOutStage+0x60>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800810a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800810e:	f7ff ffb3 	bl	8008078 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008112:	b988      	cbnz	r0, 8008138 <USBD_LL_DataOutStage+0xbc>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008114:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008118:	2b03      	cmp	r3, #3
 800811a:	d1ba      	bne.n	8008092 <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 800811c:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8008120:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008124:	699a      	ldr	r2, [r3, #24]
 8008126:	2a00      	cmp	r2, #0
 8008128:	d0b3      	beq.n	8008092 <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 800812a:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	4629      	mov	r1, r5
 8008132:	4620      	mov	r0, r4
 8008134:	4798      	blx	r3
      if (ret != USBD_OK)
 8008136:	e7ac      	b.n	8008092 <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8008138:	2000      	movs	r0, #0
 800813a:	e7aa      	b.n	8008092 <USBD_LL_DataOutStage+0x16>

0800813c <USBD_LL_DataInStage>:
{
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4604      	mov	r4, r0
  if (epnum == 0U)
 8008140:	460d      	mov	r5, r1
 8008142:	2900      	cmp	r1, #0
 8008144:	d14a      	bne.n	80081dc <USBD_LL_DataInStage+0xa0>
 8008146:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008148:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800814c:	2a02      	cmp	r2, #2
 800814e:	d007      	beq.n	8008160 <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 8008150:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 8008154:	b118      	cbz	r0, 800815e <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 800815c:	4628      	mov	r0, r5
}
 800815e:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8008160:	69c2      	ldr	r2, [r0, #28]
 8008162:	6a01      	ldr	r1, [r0, #32]
 8008164:	428a      	cmp	r2, r1
 8008166:	d80d      	bhi.n	8008184 <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 8008168:	428a      	cmp	r2, r1
 800816a:	d017      	beq.n	800819c <USBD_LL_DataInStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800816c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008170:	2b03      	cmp	r3, #3
 8008172:	d027      	beq.n	80081c4 <USBD_LL_DataInStage+0x88>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008174:	2180      	movs	r1, #128	@ 0x80
 8008176:	4620      	mov	r0, r4
 8008178:	f7ff fe3e 	bl	8007df8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800817c:	4620      	mov	r0, r4
 800817e:	f000 fcd8 	bl	8008b32 <USBD_CtlReceiveStatus>
 8008182:	e7e5      	b.n	8008150 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8008184:	1a52      	subs	r2, r2, r1
 8008186:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008188:	4619      	mov	r1, r3
 800818a:	f000 fca8 	bl	8008ade <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800818e:	2300      	movs	r3, #0
 8008190:	461a      	mov	r2, r3
 8008192:	4619      	mov	r1, r3
 8008194:	4620      	mov	r0, r4
 8008196:	f7ff fe4f 	bl	8007e38 <USBD_LL_PrepareReceive>
 800819a:	e7d9      	b.n	8008150 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800819c:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800819e:	4299      	cmp	r1, r3
 80081a0:	d8e4      	bhi.n	800816c <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 80081a2:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d2e0      	bcs.n	800816c <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081aa:	2200      	movs	r2, #0
 80081ac:	4611      	mov	r1, r2
 80081ae:	f000 fc96 	bl	8008ade <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081b2:	2100      	movs	r1, #0
 80081b4:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081b8:	460b      	mov	r3, r1
 80081ba:	460a      	mov	r2, r1
 80081bc:	4620      	mov	r0, r4
 80081be:	f7ff fe3b 	bl	8007e38 <USBD_LL_PrepareReceive>
 80081c2:	e7c5      	b.n	8008150 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80081c4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	2a00      	cmp	r2, #0
 80081cc:	d0d2      	beq.n	8008174 <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	4620      	mov	r0, r4
 80081d8:	4798      	blx	r3
 80081da:	e7cb      	b.n	8008174 <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80081dc:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80081e0:	f7ff ff4a 	bl	8008078 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081e4:	b988      	cbnz	r0, 800820a <USBD_LL_DataInStage+0xce>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e6:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d1b7      	bne.n	800815e <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 80081ee:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80081f2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80081f6:	695a      	ldr	r2, [r3, #20]
 80081f8:	2a00      	cmp	r2, #0
 80081fa:	d0b0      	beq.n	800815e <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 80081fc:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	4629      	mov	r1, r5
 8008204:	4620      	mov	r0, r4
 8008206:	4798      	blx	r3
          if (ret != USBD_OK)
 8008208:	e7a9      	b.n	800815e <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 800820a:	2000      	movs	r0, #0
 800820c:	e7a7      	b.n	800815e <USBD_LL_DataInStage+0x22>

0800820e <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800820e:	880b      	ldrh	r3, [r1, #0]
 8008210:	7802      	ldrb	r2, [r0, #0]
 8008212:	4413      	add	r3, r2
 8008214:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008216:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 8008218:	4418      	add	r0, r3
 800821a:	4770      	bx	lr

0800821c <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 800821c:	8842      	ldrh	r2, [r0, #2]
 800821e:	7803      	ldrb	r3, [r0, #0]
 8008220:	429a      	cmp	r2, r3
 8008222:	d918      	bls.n	8008256 <USBD_GetEpDesc+0x3a>
{
 8008224:	b530      	push	{r4, r5, lr}
 8008226:	b083      	sub	sp, #12
 8008228:	4604      	mov	r4, r0
 800822a:	460d      	mov	r5, r1
    ptr = desc->bLength;
 800822c:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 8008230:	8863      	ldrh	r3, [r4, #2]
 8008232:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008236:	429a      	cmp	r2, r3
 8008238:	d20a      	bcs.n	8008250 <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800823a:	f10d 0106 	add.w	r1, sp, #6
 800823e:	f7ff ffe6 	bl	800820e <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008242:	7843      	ldrb	r3, [r0, #1]
 8008244:	2b05      	cmp	r3, #5
 8008246:	d1f3      	bne.n	8008230 <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8008248:	7883      	ldrb	r3, [r0, #2]
 800824a:	42ab      	cmp	r3, r5
 800824c:	d1f0      	bne.n	8008230 <USBD_GetEpDesc+0x14>
 800824e:	e000      	b.n	8008252 <USBD_GetEpDesc+0x36>
 8008250:	2000      	movs	r0, #0
}
 8008252:	b003      	add	sp, #12
 8008254:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008256:	2000      	movs	r0, #0
}
 8008258:	4770      	bx	lr

0800825a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800825a:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800825c:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800825e:	e002      	b.n	8008266 <USBD_GetLen+0xc>
  {
    len++;
 8008260:	3001      	adds	r0, #1
 8008262:	b2c0      	uxtb	r0, r0
    pbuff++;
 8008264:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8008266:	781a      	ldrb	r2, [r3, #0]
 8008268:	2a00      	cmp	r2, #0
 800826a:	d1f9      	bne.n	8008260 <USBD_GetLen+0x6>
  }

  return len;
}
 800826c:	4770      	bx	lr

0800826e <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800826e:	780b      	ldrb	r3, [r1, #0]
 8008270:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8008272:	784b      	ldrb	r3, [r1, #1]
 8008274:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8008276:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8008278:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800827a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800827e:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8008280:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8008282:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008284:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8008288:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800828a:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800828c:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800828e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8008292:	80c3      	strh	r3, [r0, #6]
}
 8008294:	4770      	bx	lr

08008296 <USBD_CtlError>:
{
 8008296:	b510      	push	{r4, lr}
 8008298:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800829a:	2180      	movs	r1, #128	@ 0x80
 800829c:	f7ff fdac 	bl	8007df8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80082a0:	2100      	movs	r1, #0
 80082a2:	4620      	mov	r0, r4
 80082a4:	f7ff fda8 	bl	8007df8 <USBD_LL_StallEP>
}
 80082a8:	bd10      	pop	{r4, pc}

080082aa <USBD_GetDescriptor>:
{
 80082aa:	b530      	push	{r4, r5, lr}
 80082ac:	b083      	sub	sp, #12
 80082ae:	4604      	mov	r4, r0
 80082b0:	460d      	mov	r5, r1
  uint16_t len = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80082b8:	884a      	ldrh	r2, [r1, #2]
 80082ba:	0a13      	lsrs	r3, r2, #8
 80082bc:	3b01      	subs	r3, #1
 80082be:	2b06      	cmp	r3, #6
 80082c0:	f200 80aa 	bhi.w	8008418 <USBD_GetDescriptor+0x16e>
 80082c4:	e8df f003 	tbb	[pc, r3]
 80082c8:	a8321e04 	.word	0xa8321e04
 80082cc:	8ca8      	.short	0x8ca8
 80082ce:	99          	.byte	0x99
 80082cf:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082d0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f10d 0106 	add.w	r1, sp, #6
 80082da:	7c00      	ldrb	r0, [r0, #16]
 80082dc:	4798      	blx	r3
  if (req->wLength != 0U)
 80082de:	88ea      	ldrh	r2, [r5, #6]
 80082e0:	2a00      	cmp	r2, #0
 80082e2:	f000 80a3 	beq.w	800842c <USBD_GetDescriptor+0x182>
    if (len != 0U)
 80082e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 8099 	beq.w	8008422 <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 80082f0:	429a      	cmp	r2, r3
 80082f2:	bf28      	it	cs
 80082f4:	461a      	movcs	r2, r3
 80082f6:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082fa:	4601      	mov	r1, r0
 80082fc:	4620      	mov	r0, r4
 80082fe:	f000 fbe1 	bl	8008ac4 <USBD_CtlSendData>
 8008302:	e08c      	b.n	800841e <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008304:	7c03      	ldrb	r3, [r0, #16]
 8008306:	b943      	cbnz	r3, 800831a <USBD_GetDescriptor+0x70>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008308:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800830c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800830e:	f10d 0006 	add.w	r0, sp, #6
 8008312:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008314:	2302      	movs	r3, #2
 8008316:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8008318:	e7e1      	b.n	80082de <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800831a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800831e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008320:	f10d 0006 	add.w	r0, sp, #6
 8008324:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008326:	2302      	movs	r3, #2
 8008328:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800832a:	e7d8      	b.n	80082de <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800832c:	b2d2      	uxtb	r2, r2
 800832e:	2a05      	cmp	r2, #5
 8008330:	d852      	bhi.n	80083d8 <USBD_GetDescriptor+0x12e>
 8008332:	e8df f002 	tbb	[pc, r2]
 8008336:	1003      	.short	0x1003
 8008338:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800833c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	b123      	cbz	r3, 800834e <USBD_GetDescriptor+0xa4>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008344:	f10d 0106 	add.w	r1, sp, #6
 8008348:	7c00      	ldrb	r0, [r0, #16]
 800834a:	4798      	blx	r3
  if (err != 0U)
 800834c:	e7c7      	b.n	80082de <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800834e:	4629      	mov	r1, r5
 8008350:	f7ff ffa1 	bl	8008296 <USBD_CtlError>
  if (err != 0U)
 8008354:	e063      	b.n	800841e <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008356:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	b123      	cbz	r3, 8008368 <USBD_GetDescriptor+0xbe>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800835e:	f10d 0106 	add.w	r1, sp, #6
 8008362:	7c00      	ldrb	r0, [r0, #16]
 8008364:	4798      	blx	r3
  if (err != 0U)
 8008366:	e7ba      	b.n	80082de <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8008368:	4629      	mov	r1, r5
 800836a:	f7ff ff94 	bl	8008296 <USBD_CtlError>
  if (err != 0U)
 800836e:	e056      	b.n	800841e <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008370:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	b123      	cbz	r3, 8008382 <USBD_GetDescriptor+0xd8>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008378:	f10d 0106 	add.w	r1, sp, #6
 800837c:	7c00      	ldrb	r0, [r0, #16]
 800837e:	4798      	blx	r3
  if (err != 0U)
 8008380:	e7ad      	b.n	80082de <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8008382:	4629      	mov	r1, r5
 8008384:	f7ff ff87 	bl	8008296 <USBD_CtlError>
  if (err != 0U)
 8008388:	e049      	b.n	800841e <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800838a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	b123      	cbz	r3, 800839c <USBD_GetDescriptor+0xf2>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008392:	f10d 0106 	add.w	r1, sp, #6
 8008396:	7c00      	ldrb	r0, [r0, #16]
 8008398:	4798      	blx	r3
  if (err != 0U)
 800839a:	e7a0      	b.n	80082de <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800839c:	4629      	mov	r1, r5
 800839e:	f7ff ff7a 	bl	8008296 <USBD_CtlError>
  if (err != 0U)
 80083a2:	e03c      	b.n	800841e <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083a4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	b123      	cbz	r3, 80083b6 <USBD_GetDescriptor+0x10c>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083ac:	f10d 0106 	add.w	r1, sp, #6
 80083b0:	7c00      	ldrb	r0, [r0, #16]
 80083b2:	4798      	blx	r3
  if (err != 0U)
 80083b4:	e793      	b.n	80082de <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80083b6:	4629      	mov	r1, r5
 80083b8:	f7ff ff6d 	bl	8008296 <USBD_CtlError>
  if (err != 0U)
 80083bc:	e02f      	b.n	800841e <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083be:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	b123      	cbz	r3, 80083d0 <USBD_GetDescriptor+0x126>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083c6:	f10d 0106 	add.w	r1, sp, #6
 80083ca:	7c00      	ldrb	r0, [r0, #16]
 80083cc:	4798      	blx	r3
  if (err != 0U)
 80083ce:	e786      	b.n	80082de <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80083d0:	4629      	mov	r1, r5
 80083d2:	f7ff ff60 	bl	8008296 <USBD_CtlError>
  if (err != 0U)
 80083d6:	e022      	b.n	800841e <USBD_GetDescriptor+0x174>
          USBD_CtlError(pdev, req);
 80083d8:	4629      	mov	r1, r5
 80083da:	f7ff ff5c 	bl	8008296 <USBD_CtlError>
  if (err != 0U)
 80083de:	e01e      	b.n	800841e <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083e0:	7c03      	ldrb	r3, [r0, #16]
 80083e2:	b933      	cbnz	r3, 80083f2 <USBD_GetDescriptor+0x148>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083e4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80083e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ea:	f10d 0006 	add.w	r0, sp, #6
 80083ee:	4798      	blx	r3
  if (err != 0U)
 80083f0:	e775      	b.n	80082de <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80083f2:	4629      	mov	r1, r5
 80083f4:	f7ff ff4f 	bl	8008296 <USBD_CtlError>
  if (err != 0U)
 80083f8:	e011      	b.n	800841e <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083fa:	7c03      	ldrb	r3, [r0, #16]
 80083fc:	b943      	cbnz	r3, 8008410 <USBD_GetDescriptor+0x166>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80083fe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008404:	f10d 0006 	add.w	r0, sp, #6
 8008408:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800840a:	2307      	movs	r3, #7
 800840c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800840e:	e766      	b.n	80082de <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8008410:	4629      	mov	r1, r5
 8008412:	f7ff ff40 	bl	8008296 <USBD_CtlError>
  if (err != 0U)
 8008416:	e002      	b.n	800841e <USBD_GetDescriptor+0x174>
      USBD_CtlError(pdev, req);
 8008418:	4629      	mov	r1, r5
 800841a:	f7ff ff3c 	bl	8008296 <USBD_CtlError>
}
 800841e:	b003      	add	sp, #12
 8008420:	bd30      	pop	{r4, r5, pc}
      USBD_CtlError(pdev, req);
 8008422:	4629      	mov	r1, r5
 8008424:	4620      	mov	r0, r4
 8008426:	f7ff ff36 	bl	8008296 <USBD_CtlError>
 800842a:	e7f8      	b.n	800841e <USBD_GetDescriptor+0x174>
    (void)USBD_CtlSendStatus(pdev);
 800842c:	4620      	mov	r0, r4
 800842e:	f000 fb75 	bl	8008b1c <USBD_CtlSendStatus>
 8008432:	e7f4      	b.n	800841e <USBD_GetDescriptor+0x174>

08008434 <USBD_SetAddress>:
{
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008438:	888b      	ldrh	r3, [r1, #4]
 800843a:	b9f3      	cbnz	r3, 800847a <USBD_SetAddress+0x46>
 800843c:	88cb      	ldrh	r3, [r1, #6]
 800843e:	b9e3      	cbnz	r3, 800847a <USBD_SetAddress+0x46>
 8008440:	884b      	ldrh	r3, [r1, #2]
 8008442:	2b7f      	cmp	r3, #127	@ 0x7f
 8008444:	d819      	bhi.n	800847a <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008446:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800844e:	2b03      	cmp	r3, #3
 8008450:	d00c      	beq.n	800846c <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8008452:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008456:	4629      	mov	r1, r5
 8008458:	f7ff fcde 	bl	8007e18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800845c:	4620      	mov	r0, r4
 800845e:	f000 fb5d 	bl	8008b1c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008462:	b135      	cbz	r5, 8008472 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008464:	2302      	movs	r3, #2
 8008466:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800846a:	e009      	b.n	8008480 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 800846c:	f7ff ff13 	bl	8008296 <USBD_CtlError>
 8008470:	e006      	b.n	8008480 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008472:	2301      	movs	r3, #1
 8008474:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8008478:	e002      	b.n	8008480 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 800847a:	4620      	mov	r0, r4
 800847c:	f7ff ff0b 	bl	8008296 <USBD_CtlError>
}
 8008480:	bd38      	pop	{r3, r4, r5, pc}
	...

08008484 <USBD_SetConfig>:
{
 8008484:	b570      	push	{r4, r5, r6, lr}
 8008486:	4604      	mov	r4, r0
 8008488:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800848a:	788d      	ldrb	r5, [r1, #2]
 800848c:	4b2f      	ldr	r3, [pc, #188]	@ (800854c <USBD_SetConfig+0xc8>)
 800848e:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008490:	2d01      	cmp	r5, #1
 8008492:	d810      	bhi.n	80084b6 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8008494:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008498:	b2da      	uxtb	r2, r3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d00f      	beq.n	80084be <USBD_SetConfig+0x3a>
 800849e:	2a03      	cmp	r2, #3
 80084a0:	d026      	beq.n	80084f0 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 80084a2:	f7ff fef8 	bl	8008296 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084a6:	4b29      	ldr	r3, [pc, #164]	@ (800854c <USBD_SetConfig+0xc8>)
 80084a8:	7819      	ldrb	r1, [r3, #0]
 80084aa:	4620      	mov	r0, r4
 80084ac:	f7ff fd10 	bl	8007ed0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80084b0:	2503      	movs	r5, #3
}
 80084b2:	4628      	mov	r0, r5
 80084b4:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 80084b6:	f7ff feee 	bl	8008296 <USBD_CtlError>
    return USBD_FAIL;
 80084ba:	2503      	movs	r5, #3
 80084bc:	e7f9      	b.n	80084b2 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 80084be:	b1a5      	cbz	r5, 80084ea <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 80084c0:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084c2:	4629      	mov	r1, r5
 80084c4:	f7ff fcfb 	bl	8007ebe <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80084c8:	4605      	mov	r5, r0
 80084ca:	b138      	cbz	r0, 80084dc <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 80084cc:	4631      	mov	r1, r6
 80084ce:	4620      	mov	r0, r4
 80084d0:	f7ff fee1 	bl	8008296 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084d4:	2302      	movs	r3, #2
 80084d6:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80084da:	e7ea      	b.n	80084b2 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 fb1d 	bl	8008b1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084e2:	2303      	movs	r3, #3
 80084e4:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80084e8:	e7e3      	b.n	80084b2 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80084ea:	f000 fb17 	bl	8008b1c <USBD_CtlSendStatus>
 80084ee:	e7e0      	b.n	80084b2 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 80084f0:	b1cd      	cbz	r5, 8008526 <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 80084f2:	6841      	ldr	r1, [r0, #4]
 80084f4:	428d      	cmp	r5, r1
 80084f6:	d025      	beq.n	8008544 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084f8:	b2c9      	uxtb	r1, r1
 80084fa:	f7ff fce9 	bl	8007ed0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80084fe:	4b13      	ldr	r3, [pc, #76]	@ (800854c <USBD_SetConfig+0xc8>)
 8008500:	7819      	ldrb	r1, [r3, #0]
 8008502:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008504:	4620      	mov	r0, r4
 8008506:	f7ff fcda 	bl	8007ebe <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800850a:	4605      	mov	r5, r0
 800850c:	b1b0      	cbz	r0, 800853c <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 800850e:	4631      	mov	r1, r6
 8008510:	4620      	mov	r0, r4
 8008512:	f7ff fec0 	bl	8008296 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008516:	7921      	ldrb	r1, [r4, #4]
 8008518:	4620      	mov	r0, r4
 800851a:	f7ff fcd9 	bl	8007ed0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800851e:	2302      	movs	r3, #2
 8008520:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8008524:	e7c5      	b.n	80084b2 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008526:	2302      	movs	r3, #2
 8008528:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800852c:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800852e:	4629      	mov	r1, r5
 8008530:	f7ff fcce 	bl	8007ed0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008534:	4620      	mov	r0, r4
 8008536:	f000 faf1 	bl	8008b1c <USBD_CtlSendStatus>
 800853a:	e7ba      	b.n	80084b2 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800853c:	4620      	mov	r0, r4
 800853e:	f000 faed 	bl	8008b1c <USBD_CtlSendStatus>
 8008542:	e7b6      	b.n	80084b2 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8008544:	f000 faea 	bl	8008b1c <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8008548:	2500      	movs	r5, #0
 800854a:	e7b2      	b.n	80084b2 <USBD_SetConfig+0x2e>
 800854c:	20006f68 	.word	0x20006f68

08008550 <USBD_GetConfig>:
{
 8008550:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8008552:	88cb      	ldrh	r3, [r1, #6]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d10b      	bne.n	8008570 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8008558:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800855c:	b2da      	uxtb	r2, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d909      	bls.n	8008576 <USBD_GetConfig+0x26>
 8008562:	2a03      	cmp	r2, #3
 8008564:	d111      	bne.n	800858a <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008566:	2201      	movs	r2, #1
 8008568:	1d01      	adds	r1, r0, #4
 800856a:	f000 faab 	bl	8008ac4 <USBD_CtlSendData>
        break;
 800856e:	e001      	b.n	8008574 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8008570:	f7ff fe91 	bl	8008296 <USBD_CtlError>
}
 8008574:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8008576:	b252      	sxtb	r2, r2
 8008578:	b13a      	cbz	r2, 800858a <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 800857a:	4601      	mov	r1, r0
 800857c:	2300      	movs	r3, #0
 800857e:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008582:	2201      	movs	r2, #1
 8008584:	f000 fa9e 	bl	8008ac4 <USBD_CtlSendData>
        break;
 8008588:	e7f4      	b.n	8008574 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 800858a:	f7ff fe84 	bl	8008296 <USBD_CtlError>
}
 800858e:	e7f1      	b.n	8008574 <USBD_GetConfig+0x24>

08008590 <USBD_GetStatus>:
{
 8008590:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8008592:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008596:	3b01      	subs	r3, #1
 8008598:	2b02      	cmp	r3, #2
 800859a:	d812      	bhi.n	80085c2 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800859c:	88cb      	ldrh	r3, [r1, #6]
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d10c      	bne.n	80085bc <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085a2:	2301      	movs	r3, #1
 80085a4:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 80085a6:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80085aa:	b10b      	cbz	r3, 80085b0 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085ac:	2303      	movs	r3, #3
 80085ae:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085b0:	2202      	movs	r2, #2
 80085b2:	f100 010c 	add.w	r1, r0, #12
 80085b6:	f000 fa85 	bl	8008ac4 <USBD_CtlSendData>
}
 80085ba:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 80085bc:	f7ff fe6b 	bl	8008296 <USBD_CtlError>
        break;
 80085c0:	e7fb      	b.n	80085ba <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 80085c2:	f7ff fe68 	bl	8008296 <USBD_CtlError>
}
 80085c6:	e7f8      	b.n	80085ba <USBD_GetStatus+0x2a>

080085c8 <USBD_SetFeature>:
{
 80085c8:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085ca:	884b      	ldrh	r3, [r1, #2]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d004      	beq.n	80085da <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d007      	beq.n	80085e4 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 80085d4:	f7ff fe5f 	bl	8008296 <USBD_CtlError>
}
 80085d8:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80085da:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80085de:	f000 fa9d 	bl	8008b1c <USBD_CtlSendStatus>
 80085e2:	e7f9      	b.n	80085d8 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80085e4:	888b      	ldrh	r3, [r1, #4]
 80085e6:	0a1b      	lsrs	r3, r3, #8
 80085e8:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80085ec:	f000 fa96 	bl	8008b1c <USBD_CtlSendStatus>
 80085f0:	e7f2      	b.n	80085d8 <USBD_SetFeature+0x10>

080085f2 <USBD_ClrFeature>:
{
 80085f2:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80085f4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80085f8:	3b01      	subs	r3, #1
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d809      	bhi.n	8008612 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085fe:	884b      	ldrh	r3, [r1, #2]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d000      	beq.n	8008606 <USBD_ClrFeature+0x14>
}
 8008604:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800860c:	f000 fa86 	bl	8008b1c <USBD_CtlSendStatus>
 8008610:	e7f8      	b.n	8008604 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8008612:	f7ff fe40 	bl	8008296 <USBD_CtlError>
}
 8008616:	e7f5      	b.n	8008604 <USBD_ClrFeature+0x12>

08008618 <USBD_StdDevReq>:
{
 8008618:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800861a:	780c      	ldrb	r4, [r1, #0]
 800861c:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8008620:	2c20      	cmp	r4, #32
 8008622:	d006      	beq.n	8008632 <USBD_StdDevReq+0x1a>
 8008624:	2c40      	cmp	r4, #64	@ 0x40
 8008626:	d004      	beq.n	8008632 <USBD_StdDevReq+0x1a>
 8008628:	b16c      	cbz	r4, 8008646 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 800862a:	f7ff fe34 	bl	8008296 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800862e:	2400      	movs	r4, #0
      break;
 8008630:	e007      	b.n	8008642 <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008632:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008636:	33ae      	adds	r3, #174	@ 0xae
 8008638:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	4798      	blx	r3
 8008640:	4604      	mov	r4, r0
}
 8008642:	4620      	mov	r0, r4
 8008644:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8008646:	784d      	ldrb	r5, [r1, #1]
 8008648:	2d09      	cmp	r5, #9
 800864a:	d81d      	bhi.n	8008688 <USBD_StdDevReq+0x70>
 800864c:	e8df f005 	tbb	[pc, r5]
 8008650:	161c1912 	.word	0x161c1912
 8008654:	1c05081c 	.word	0x1c05081c
 8008658:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800865a:	f7ff fe26 	bl	80082aa <USBD_GetDescriptor>
          break;
 800865e:	e7f0      	b.n	8008642 <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 8008660:	f7ff fee8 	bl	8008434 <USBD_SetAddress>
          break;
 8008664:	e7ed      	b.n	8008642 <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 8008666:	f7ff ff0d 	bl	8008484 <USBD_SetConfig>
 800866a:	4604      	mov	r4, r0
          break;
 800866c:	e7e9      	b.n	8008642 <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 800866e:	f7ff ff6f 	bl	8008550 <USBD_GetConfig>
          break;
 8008672:	e7e6      	b.n	8008642 <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 8008674:	f7ff ff8c 	bl	8008590 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8008678:	462c      	mov	r4, r5
          break;
 800867a:	e7e2      	b.n	8008642 <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 800867c:	f7ff ffa4 	bl	80085c8 <USBD_SetFeature>
          break;
 8008680:	e7df      	b.n	8008642 <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 8008682:	f7ff ffb6 	bl	80085f2 <USBD_ClrFeature>
          break;
 8008686:	e7dc      	b.n	8008642 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8008688:	f7ff fe05 	bl	8008296 <USBD_CtlError>
          break;
 800868c:	e7d9      	b.n	8008642 <USBD_StdDevReq+0x2a>

0800868e <USBD_StdItfReq>:
{
 800868e:	b570      	push	{r4, r5, r6, lr}
 8008690:	4605      	mov	r5, r0
 8008692:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008694:	780b      	ldrb	r3, [r1, #0]
 8008696:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800869a:	2b20      	cmp	r3, #32
 800869c:	d007      	beq.n	80086ae <USBD_StdItfReq+0x20>
 800869e:	2b40      	cmp	r3, #64	@ 0x40
 80086a0:	d005      	beq.n	80086ae <USBD_StdItfReq+0x20>
 80086a2:	b123      	cbz	r3, 80086ae <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 80086a4:	f7ff fdf7 	bl	8008296 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80086a8:	2600      	movs	r6, #0
}
 80086aa:	4630      	mov	r0, r6
 80086ac:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80086ae:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 80086b2:	3b01      	subs	r3, #1
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d826      	bhi.n	8008706 <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086b8:	7921      	ldrb	r1, [r4, #4]
 80086ba:	2901      	cmp	r1, #1
 80086bc:	d905      	bls.n	80086ca <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 80086be:	4621      	mov	r1, r4
 80086c0:	4628      	mov	r0, r5
 80086c2:	f7ff fde8 	bl	8008296 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80086c6:	2600      	movs	r6, #0
 80086c8:	e7ef      	b.n	80086aa <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80086ca:	4628      	mov	r0, r5
 80086cc:	f7ff fcd2 	bl	8008074 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086d0:	b968      	cbnz	r0, 80086ee <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 80086d2:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 80086d6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80086da:	6891      	ldr	r1, [r2, #8]
 80086dc:	b189      	cbz	r1, 8008702 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 80086de:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086e2:	6893      	ldr	r3, [r2, #8]
 80086e4:	4621      	mov	r1, r4
 80086e6:	4628      	mov	r0, r5
 80086e8:	4798      	blx	r3
 80086ea:	4606      	mov	r6, r0
 80086ec:	e000      	b.n	80086f0 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 80086ee:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80086f0:	88e3      	ldrh	r3, [r4, #6]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1d9      	bne.n	80086aa <USBD_StdItfReq+0x1c>
 80086f6:	2e00      	cmp	r6, #0
 80086f8:	d1d7      	bne.n	80086aa <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 80086fa:	4628      	mov	r0, r5
 80086fc:	f000 fa0e 	bl	8008b1c <USBD_CtlSendStatus>
 8008700:	e7d3      	b.n	80086aa <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 8008702:	2603      	movs	r6, #3
 8008704:	e7f4      	b.n	80086f0 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 8008706:	4621      	mov	r1, r4
 8008708:	4628      	mov	r0, r5
 800870a:	f7ff fdc4 	bl	8008296 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800870e:	2600      	movs	r6, #0
          break;
 8008710:	e7cb      	b.n	80086aa <USBD_StdItfReq+0x1c>

08008712 <USBD_StdEPReq>:
{
 8008712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008716:	4606      	mov	r6, r0
 8008718:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800871a:	888b      	ldrh	r3, [r1, #4]
 800871c:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800871e:	780c      	ldrb	r4, [r1, #0]
 8008720:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8008724:	2c20      	cmp	r4, #32
 8008726:	d008      	beq.n	800873a <USBD_StdEPReq+0x28>
 8008728:	2c40      	cmp	r4, #64	@ 0x40
 800872a:	d006      	beq.n	800873a <USBD_StdEPReq+0x28>
 800872c:	b1dc      	cbz	r4, 8008766 <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 800872e:	f7ff fdb2 	bl	8008296 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008732:	2400      	movs	r4, #0
}
 8008734:	4620      	mov	r0, r4
 8008736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800873a:	4639      	mov	r1, r7
 800873c:	4630      	mov	r0, r6
 800873e:	f7ff fc9b 	bl	8008078 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008742:	4604      	mov	r4, r0
 8008744:	2800      	cmp	r0, #0
 8008746:	f040 80fc 	bne.w	8008942 <USBD_StdEPReq+0x230>
        pdev->classId = idx;
 800874a:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 800874e:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8008752:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d0eb      	beq.n	8008734 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800875c:	4629      	mov	r1, r5
 800875e:	4630      	mov	r0, r6
 8008760:	4798      	blx	r3
 8008762:	4604      	mov	r4, r0
 8008764:	e7e6      	b.n	8008734 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 8008766:	f891 8001 	ldrb.w	r8, [r1, #1]
 800876a:	f1b8 0f01 	cmp.w	r8, #1
 800876e:	d031      	beq.n	80087d4 <USBD_StdEPReq+0xc2>
 8008770:	f1b8 0f03 	cmp.w	r8, #3
 8008774:	d005      	beq.n	8008782 <USBD_StdEPReq+0x70>
 8008776:	f1b8 0f00 	cmp.w	r8, #0
 800877a:	d067      	beq.n	800884c <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 800877c:	f7ff fd8b 	bl	8008296 <USBD_CtlError>
          break;
 8008780:	e7d8      	b.n	8008734 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 8008782:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008786:	b2da      	uxtb	r2, r3
 8008788:	2b02      	cmp	r3, #2
 800878a:	d004      	beq.n	8008796 <USBD_StdEPReq+0x84>
 800878c:	2a03      	cmp	r2, #3
 800878e:	d012      	beq.n	80087b6 <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 8008790:	f7ff fd81 	bl	8008296 <USBD_CtlError>
              break;
 8008794:	e7ce      	b.n	8008734 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008796:	b10f      	cbz	r7, 800879c <USBD_StdEPReq+0x8a>
 8008798:	2f80      	cmp	r7, #128	@ 0x80
 800879a:	d104      	bne.n	80087a6 <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 800879c:	4629      	mov	r1, r5
 800879e:	4630      	mov	r0, r6
 80087a0:	f7ff fd79 	bl	8008296 <USBD_CtlError>
 80087a4:	e7c6      	b.n	8008734 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80087a6:	4639      	mov	r1, r7
 80087a8:	f7ff fb26 	bl	8007df8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80087ac:	2180      	movs	r1, #128	@ 0x80
 80087ae:	4630      	mov	r0, r6
 80087b0:	f7ff fb22 	bl	8007df8 <USBD_LL_StallEP>
 80087b4:	e7be      	b.n	8008734 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087b6:	884b      	ldrh	r3, [r1, #2]
 80087b8:	b923      	cbnz	r3, 80087c4 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80087ba:	b11f      	cbz	r7, 80087c4 <USBD_StdEPReq+0xb2>
 80087bc:	2f80      	cmp	r7, #128	@ 0x80
 80087be:	d001      	beq.n	80087c4 <USBD_StdEPReq+0xb2>
 80087c0:	88cb      	ldrh	r3, [r1, #6]
 80087c2:	b11b      	cbz	r3, 80087cc <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 80087c4:	4630      	mov	r0, r6
 80087c6:	f000 f9a9 	bl	8008b1c <USBD_CtlSendStatus>
              break;
 80087ca:	e7b3      	b.n	8008734 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80087cc:	4639      	mov	r1, r7
 80087ce:	f7ff fb13 	bl	8007df8 <USBD_LL_StallEP>
 80087d2:	e7f7      	b.n	80087c4 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 80087d4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d004      	beq.n	80087e8 <USBD_StdEPReq+0xd6>
 80087de:	2a03      	cmp	r2, #3
 80087e0:	d012      	beq.n	8008808 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 80087e2:	f7ff fd58 	bl	8008296 <USBD_CtlError>
              break;
 80087e6:	e7a5      	b.n	8008734 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087e8:	b10f      	cbz	r7, 80087ee <USBD_StdEPReq+0xdc>
 80087ea:	2f80      	cmp	r7, #128	@ 0x80
 80087ec:	d104      	bne.n	80087f8 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 80087ee:	4629      	mov	r1, r5
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7ff fd50 	bl	8008296 <USBD_CtlError>
 80087f6:	e79d      	b.n	8008734 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80087f8:	4639      	mov	r1, r7
 80087fa:	f7ff fafd 	bl	8007df8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80087fe:	2180      	movs	r1, #128	@ 0x80
 8008800:	4630      	mov	r0, r6
 8008802:	f7ff faf9 	bl	8007df8 <USBD_LL_StallEP>
 8008806:	e795      	b.n	8008734 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008808:	884b      	ldrh	r3, [r1, #2]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d192      	bne.n	8008734 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 800880e:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 8008812:	d117      	bne.n	8008844 <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 8008814:	4630      	mov	r0, r6
 8008816:	f000 f981 	bl	8008b1c <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800881a:	4639      	mov	r1, r7
 800881c:	4630      	mov	r0, r6
 800881e:	f7ff fc2b 	bl	8008078 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008822:	2800      	cmp	r0, #0
 8008824:	d186      	bne.n	8008734 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 8008826:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800882a:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 800882e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8008832:	6892      	ldr	r2, [r2, #8]
 8008834:	2a00      	cmp	r2, #0
 8008836:	f000 8086 	beq.w	8008946 <USBD_StdEPReq+0x234>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800883a:	4629      	mov	r1, r5
 800883c:	4630      	mov	r0, r6
 800883e:	4790      	blx	r2
 8008840:	4604      	mov	r4, r0
 8008842:	e777      	b.n	8008734 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008844:	4639      	mov	r1, r7
 8008846:	f7ff fadf 	bl	8007e08 <USBD_LL_ClearStallEP>
 800884a:	e7e3      	b.n	8008814 <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 800884c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008850:	b2d1      	uxtb	r1, r2
 8008852:	2a02      	cmp	r2, #2
 8008854:	d006      	beq.n	8008864 <USBD_StdEPReq+0x152>
 8008856:	2903      	cmp	r1, #3
 8008858:	d029      	beq.n	80088ae <USBD_StdEPReq+0x19c>
              USBD_CtlError(pdev, req);
 800885a:	4629      	mov	r1, r5
 800885c:	f7ff fd1b 	bl	8008296 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008860:	4644      	mov	r4, r8
              break;
 8008862:	e767      	b.n	8008734 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008864:	b10f      	cbz	r7, 800886a <USBD_StdEPReq+0x158>
 8008866:	2f80      	cmp	r7, #128	@ 0x80
 8008868:	d113      	bne.n	8008892 <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800886a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800886e:	d115      	bne.n	800889c <USBD_StdEPReq+0x18a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008870:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008874:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8008878:	00b9      	lsls	r1, r7, #2
 800887a:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 800887e:	4431      	add	r1, r6
 8008880:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8008882:	2300      	movs	r3, #0
 8008884:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008886:	2202      	movs	r2, #2
 8008888:	4630      	mov	r0, r6
 800888a:	f000 f91b 	bl	8008ac4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800888e:	4644      	mov	r4, r8
              break;
 8008890:	e750      	b.n	8008734 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 8008892:	4629      	mov	r1, r5
 8008894:	f7ff fcff 	bl	8008296 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008898:	4644      	mov	r4, r8
                break;
 800889a:	e74b      	b.n	8008734 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800889c:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 80088a0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80088a4:	00b9      	lsls	r1, r7, #2
 80088a6:	3110      	adds	r1, #16
 80088a8:	4431      	add	r1, r6
 80088aa:	3104      	adds	r1, #4
 80088ac:	e7e9      	b.n	8008882 <USBD_StdEPReq+0x170>
              if ((ep_addr & 0x80U) == 0x80U)
 80088ae:	b25b      	sxtb	r3, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	db1f      	blt.n	80088f4 <USBD_StdEPReq+0x1e2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088b4:	f007 020f 	and.w	r2, r7, #15
 80088b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80088bc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80088c0:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 80088c4:	b322      	cbz	r2, 8008910 <USBD_StdEPReq+0x1fe>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	db27      	blt.n	800891a <USBD_StdEPReq+0x208>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088ca:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80088d2:	009c      	lsls	r4, r3, #2
 80088d4:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 80088d8:	4434      	add	r4, r6
 80088da:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088dc:	b10f      	cbz	r7, 80088e2 <USBD_StdEPReq+0x1d0>
 80088de:	2f80      	cmp	r7, #128	@ 0x80
 80088e0:	d124      	bne.n	800892c <USBD_StdEPReq+0x21a>
                pep->status = 0x0000U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088e6:	2202      	movs	r2, #2
 80088e8:	4621      	mov	r1, r4
 80088ea:	4630      	mov	r0, r6
 80088ec:	f000 f8ea 	bl	8008ac4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80088f0:	4644      	mov	r4, r8
              break;
 80088f2:	e71f      	b.n	8008734 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80088f4:	f007 020f 	and.w	r2, r7, #15
 80088f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80088fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008900:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8008902:	2a00      	cmp	r2, #0
 8008904:	d1df      	bne.n	80088c6 <USBD_StdEPReq+0x1b4>
                  USBD_CtlError(pdev, req);
 8008906:	4629      	mov	r1, r5
 8008908:	f7ff fcc5 	bl	8008296 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800890c:	4644      	mov	r4, r8
                  break;
 800890e:	e711      	b.n	8008734 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8008910:	4629      	mov	r1, r5
 8008912:	f7ff fcc0 	bl	8008296 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008916:	4644      	mov	r4, r8
                  break;
 8008918:	e70c      	b.n	8008734 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800891a:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 800891e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008922:	009c      	lsls	r4, r3, #2
 8008924:	3410      	adds	r4, #16
 8008926:	4434      	add	r4, r6
 8008928:	3404      	adds	r4, #4
 800892a:	e7d7      	b.n	80088dc <USBD_StdEPReq+0x1ca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800892c:	4639      	mov	r1, r7
 800892e:	4630      	mov	r0, r6
 8008930:	f7ff fa1c 	bl	8007d6c <USBD_LL_IsStallEP>
 8008934:	b110      	cbz	r0, 800893c <USBD_StdEPReq+0x22a>
                pep->status = 0x0001U;
 8008936:	2301      	movs	r3, #1
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	e7d4      	b.n	80088e6 <USBD_StdEPReq+0x1d4>
                pep->status = 0x0000U;
 800893c:	2300      	movs	r3, #0
 800893e:	6023      	str	r3, [r4, #0]
 8008940:	e7d1      	b.n	80088e6 <USBD_StdEPReq+0x1d4>
  USBD_StatusTypeDef ret = USBD_OK;
 8008942:	2400      	movs	r4, #0
 8008944:	e6f6      	b.n	8008734 <USBD_StdEPReq+0x22>
 8008946:	4604      	mov	r4, r0
 8008948:	e6f4      	b.n	8008734 <USBD_StdEPReq+0x22>

0800894a <USBD_GetString>:
  if (desc == NULL)
 800894a:	b300      	cbz	r0, 800898e <USBD_GetString+0x44>
{
 800894c:	b570      	push	{r4, r5, r6, lr}
 800894e:	460d      	mov	r5, r1
 8008950:	4616      	mov	r6, r2
 8008952:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008954:	f7ff fc81 	bl	800825a <USBD_GetLen>
 8008958:	3001      	adds	r0, #1
 800895a:	0043      	lsls	r3, r0, #1
 800895c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008960:	d806      	bhi.n	8008970 <USBD_GetString+0x26>
 8008962:	b29b      	uxth	r3, r3
 8008964:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8008966:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008968:	2303      	movs	r3, #3
 800896a:	706b      	strb	r3, [r5, #1]
  idx++;
 800896c:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800896e:	e00a      	b.n	8008986 <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008970:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008974:	e7f6      	b.n	8008964 <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 8008976:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8008978:	3401      	adds	r4, #1
    idx++;
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800897e:	2100      	movs	r1, #0
 8008980:	54a9      	strb	r1, [r5, r2]
    idx++;
 8008982:	3302      	adds	r3, #2
 8008984:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8008986:	7822      	ldrb	r2, [r4, #0]
 8008988:	2a00      	cmp	r2, #0
 800898a:	d1f4      	bne.n	8008976 <USBD_GetString+0x2c>
}
 800898c:	bd70      	pop	{r4, r5, r6, pc}
 800898e:	4770      	bx	lr

08008990 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008990:	2312      	movs	r3, #18
 8008992:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8008994:	4800      	ldr	r0, [pc, #0]	@ (8008998 <USBD_FS_DeviceDescriptor+0x8>)
 8008996:	4770      	bx	lr
 8008998:	200000d0 	.word	0x200000d0

0800899c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800899c:	2304      	movs	r3, #4
 800899e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80089a0:	4800      	ldr	r0, [pc, #0]	@ (80089a4 <USBD_FS_LangIDStrDescriptor+0x8>)
 80089a2:	4770      	bx	lr
 80089a4:	200000cc 	.word	0x200000cc

080089a8 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80089a8:	2300      	movs	r3, #0
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d21e      	bcs.n	80089ec <IntToUnicode+0x44>
{
 80089ae:	b500      	push	{lr}
 80089b0:	e010      	b.n	80089d4 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089b2:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 80089b6:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 80089ba:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 80089bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089c0:	f10c 0c01 	add.w	ip, ip, #1
 80089c4:	f04f 0e00 	mov.w	lr, #0
 80089c8:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 80089cc:	3301      	adds	r3, #1
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d209      	bcs.n	80089e8 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 80089d4:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 80089d8:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 80089dc:	d2e9      	bcs.n	80089b2 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 80089de:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 80089e2:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 80089e6:	e7e8      	b.n	80089ba <IntToUnicode+0x12>
  }
}
 80089e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80089ec:	4770      	bx	lr
	...

080089f0 <Get_SerialNum>:
{
 80089f0:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80089f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008a20 <Get_SerialNum+0x30>)
 80089f4:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80089f8:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80089fc:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 8008a00:	18c0      	adds	r0, r0, r3
 8008a02:	d100      	bne.n	8008a06 <Get_SerialNum+0x16>
}
 8008a04:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a06:	4d07      	ldr	r5, [pc, #28]	@ (8008a24 <Get_SerialNum+0x34>)
 8008a08:	2208      	movs	r2, #8
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	f7ff ffcc 	bl	80089a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a10:	2204      	movs	r2, #4
 8008a12:	f105 0110 	add.w	r1, r5, #16
 8008a16:	4620      	mov	r0, r4
 8008a18:	f7ff ffc6 	bl	80089a8 <IntToUnicode>
}
 8008a1c:	e7f2      	b.n	8008a04 <Get_SerialNum+0x14>
 8008a1e:	bf00      	nop
 8008a20:	1fff7000 	.word	0x1fff7000
 8008a24:	200000b2 	.word	0x200000b2

08008a28 <USBD_FS_SerialStrDescriptor>:
{
 8008a28:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8008a2a:	231a      	movs	r3, #26
 8008a2c:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8008a2e:	f7ff ffdf 	bl	80089f0 <Get_SerialNum>
}
 8008a32:	4801      	ldr	r0, [pc, #4]	@ (8008a38 <USBD_FS_SerialStrDescriptor+0x10>)
 8008a34:	bd08      	pop	{r3, pc}
 8008a36:	bf00      	nop
 8008a38:	200000b0 	.word	0x200000b0

08008a3c <USBD_FS_ProductStrDescriptor>:
{
 8008a3c:	b508      	push	{r3, lr}
 8008a3e:	460a      	mov	r2, r1
  if(speed == 0)
 8008a40:	b928      	cbnz	r0, 8008a4e <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a42:	4905      	ldr	r1, [pc, #20]	@ (8008a58 <USBD_FS_ProductStrDescriptor+0x1c>)
 8008a44:	4805      	ldr	r0, [pc, #20]	@ (8008a5c <USBD_FS_ProductStrDescriptor+0x20>)
 8008a46:	f7ff ff80 	bl	800894a <USBD_GetString>
}
 8008a4a:	4803      	ldr	r0, [pc, #12]	@ (8008a58 <USBD_FS_ProductStrDescriptor+0x1c>)
 8008a4c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a4e:	4902      	ldr	r1, [pc, #8]	@ (8008a58 <USBD_FS_ProductStrDescriptor+0x1c>)
 8008a50:	4802      	ldr	r0, [pc, #8]	@ (8008a5c <USBD_FS_ProductStrDescriptor+0x20>)
 8008a52:	f7ff ff7a 	bl	800894a <USBD_GetString>
 8008a56:	e7f8      	b.n	8008a4a <USBD_FS_ProductStrDescriptor+0xe>
 8008a58:	20006f6c 	.word	0x20006f6c
 8008a5c:	08009e9c 	.word	0x08009e9c

08008a60 <USBD_FS_ManufacturerStrDescriptor>:
{
 8008a60:	b510      	push	{r4, lr}
 8008a62:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a64:	4c03      	ldr	r4, [pc, #12]	@ (8008a74 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8008a66:	4621      	mov	r1, r4
 8008a68:	4803      	ldr	r0, [pc, #12]	@ (8008a78 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8008a6a:	f7ff ff6e 	bl	800894a <USBD_GetString>
}
 8008a6e:	4620      	mov	r0, r4
 8008a70:	bd10      	pop	{r4, pc}
 8008a72:	bf00      	nop
 8008a74:	20006f6c 	.word	0x20006f6c
 8008a78:	08009eb8 	.word	0x08009eb8

08008a7c <USBD_FS_ConfigStrDescriptor>:
{
 8008a7c:	b508      	push	{r3, lr}
 8008a7e:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8008a80:	b928      	cbnz	r0, 8008a8e <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a82:	4905      	ldr	r1, [pc, #20]	@ (8008a98 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8008a84:	4805      	ldr	r0, [pc, #20]	@ (8008a9c <USBD_FS_ConfigStrDescriptor+0x20>)
 8008a86:	f7ff ff60 	bl	800894a <USBD_GetString>
}
 8008a8a:	4803      	ldr	r0, [pc, #12]	@ (8008a98 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8008a8c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a8e:	4902      	ldr	r1, [pc, #8]	@ (8008a98 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8008a90:	4802      	ldr	r0, [pc, #8]	@ (8008a9c <USBD_FS_ConfigStrDescriptor+0x20>)
 8008a92:	f7ff ff5a 	bl	800894a <USBD_GetString>
 8008a96:	e7f8      	b.n	8008a8a <USBD_FS_ConfigStrDescriptor+0xe>
 8008a98:	20006f6c 	.word	0x20006f6c
 8008a9c:	08009ecc 	.word	0x08009ecc

08008aa0 <USBD_FS_InterfaceStrDescriptor>:
{
 8008aa0:	b508      	push	{r3, lr}
 8008aa2:	460a      	mov	r2, r1
  if(speed == 0)
 8008aa4:	b928      	cbnz	r0, 8008ab2 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008aa6:	4905      	ldr	r1, [pc, #20]	@ (8008abc <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8008aa8:	4805      	ldr	r0, [pc, #20]	@ (8008ac0 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8008aaa:	f7ff ff4e 	bl	800894a <USBD_GetString>
}
 8008aae:	4803      	ldr	r0, [pc, #12]	@ (8008abc <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8008ab0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ab2:	4902      	ldr	r1, [pc, #8]	@ (8008abc <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8008ab4:	4802      	ldr	r0, [pc, #8]	@ (8008ac0 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8008ab6:	f7ff ff48 	bl	800894a <USBD_GetString>
 8008aba:	e7f8      	b.n	8008aae <USBD_FS_InterfaceStrDescriptor+0xe>
 8008abc:	20006f6c 	.word	0x20006f6c
 8008ac0:	08009ed8 	.word	0x08009ed8

08008ac4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ac4:	b508      	push	{r3, lr}
 8008ac6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ac8:	2202      	movs	r2, #2
 8008aca:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008ace:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ad0:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ad2:	460a      	mov	r2, r1
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	f7ff f9a7 	bl	8007e28 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008ada:	2000      	movs	r0, #0
 8008adc:	bd08      	pop	{r3, pc}

08008ade <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ade:	b508      	push	{r3, lr}
 8008ae0:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ae2:	460a      	mov	r2, r1
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	f7ff f99f 	bl	8007e28 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008aea:	2000      	movs	r0, #0
 8008aec:	bd08      	pop	{r3, pc}

08008aee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008aee:	b508      	push	{r3, lr}
 8008af0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008af2:	2203      	movs	r2, #3
 8008af4:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008af8:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008afc:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b00:	460a      	mov	r2, r1
 8008b02:	2100      	movs	r1, #0
 8008b04:	f7ff f998 	bl	8007e38 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008b08:	2000      	movs	r0, #0
 8008b0a:	bd08      	pop	{r3, pc}

08008b0c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b0c:	b508      	push	{r3, lr}
 8008b0e:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b10:	460a      	mov	r2, r1
 8008b12:	2100      	movs	r1, #0
 8008b14:	f7ff f990 	bl	8007e38 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008b18:	2000      	movs	r0, #0
 8008b1a:	bd08      	pop	{r3, pc}

08008b1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b1c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b1e:	2204      	movs	r2, #4
 8008b20:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b24:	2300      	movs	r3, #0
 8008b26:	461a      	mov	r2, r3
 8008b28:	4619      	mov	r1, r3
 8008b2a:	f7ff f97d 	bl	8007e28 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008b2e:	2000      	movs	r0, #0
 8008b30:	bd08      	pop	{r3, pc}

08008b32 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b32:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b34:	2205      	movs	r2, #5
 8008b36:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	4619      	mov	r1, r3
 8008b40:	f7ff f97a 	bl	8007e38 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008b44:	2000      	movs	r0, #0
 8008b46:	bd08      	pop	{r3, pc}

08008b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008b80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008b4c:	f7fc ff8e 	bl	8005a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008b50:	480c      	ldr	r0, [pc, #48]	@ (8008b84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008b52:	490d      	ldr	r1, [pc, #52]	@ (8008b88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008b54:	4a0d      	ldr	r2, [pc, #52]	@ (8008b8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008b58:	e002      	b.n	8008b60 <LoopCopyDataInit>

08008b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b5e:	3304      	adds	r3, #4

08008b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b64:	d3f9      	bcc.n	8008b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b66:	4a0a      	ldr	r2, [pc, #40]	@ (8008b90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008b68:	4c0a      	ldr	r4, [pc, #40]	@ (8008b94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b6c:	e001      	b.n	8008b72 <LoopFillZerobss>

08008b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b70:	3204      	adds	r2, #4

08008b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b74:	d3fb      	bcc.n	8008b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008b76:	f000 f855 	bl	8008c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008b7a:	f7f8 fd63 	bl	8001644 <main>
  bx  lr    
 8008b7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008b80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8008b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b88:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8008b8c:	0800a020 	.word	0x0800a020
  ldr r2, =_sbss
 8008b90:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8008b94:	200072b4 	.word	0x200072b4

08008b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008b98:	e7fe      	b.n	8008b98 <ADC_IRQHandler>
	...

08008b9c <sniprintf>:
 8008b9c:	b40c      	push	{r2, r3}
 8008b9e:	b530      	push	{r4, r5, lr}
 8008ba0:	4b18      	ldr	r3, [pc, #96]	@ (8008c04 <sniprintf+0x68>)
 8008ba2:	1e0c      	subs	r4, r1, #0
 8008ba4:	681d      	ldr	r5, [r3, #0]
 8008ba6:	b09d      	sub	sp, #116	@ 0x74
 8008ba8:	da08      	bge.n	8008bbc <sniprintf+0x20>
 8008baa:	238b      	movs	r3, #139	@ 0x8b
 8008bac:	602b      	str	r3, [r5, #0]
 8008bae:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb2:	b01d      	add	sp, #116	@ 0x74
 8008bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bb8:	b002      	add	sp, #8
 8008bba:	4770      	bx	lr
 8008bbc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008bc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008bc4:	f04f 0300 	mov.w	r3, #0
 8008bc8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008bca:	bf14      	ite	ne
 8008bcc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008bd0:	4623      	moveq	r3, r4
 8008bd2:	9304      	str	r3, [sp, #16]
 8008bd4:	9307      	str	r3, [sp, #28]
 8008bd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008bda:	9002      	str	r0, [sp, #8]
 8008bdc:	9006      	str	r0, [sp, #24]
 8008bde:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008be2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008be4:	ab21      	add	r3, sp, #132	@ 0x84
 8008be6:	a902      	add	r1, sp, #8
 8008be8:	4628      	mov	r0, r5
 8008bea:	9301      	str	r3, [sp, #4]
 8008bec:	f000 f9a6 	bl	8008f3c <_svfiprintf_r>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	bfbc      	itt	lt
 8008bf4:	238b      	movlt	r3, #139	@ 0x8b
 8008bf6:	602b      	strlt	r3, [r5, #0]
 8008bf8:	2c00      	cmp	r4, #0
 8008bfa:	d0da      	beq.n	8008bb2 <sniprintf+0x16>
 8008bfc:	9b02      	ldr	r3, [sp, #8]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	701a      	strb	r2, [r3, #0]
 8008c02:	e7d6      	b.n	8008bb2 <sniprintf+0x16>
 8008c04:	20000100 	.word	0x20000100

08008c08 <memset>:
 8008c08:	4402      	add	r2, r0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d100      	bne.n	8008c12 <memset+0xa>
 8008c10:	4770      	bx	lr
 8008c12:	f803 1b01 	strb.w	r1, [r3], #1
 8008c16:	e7f9      	b.n	8008c0c <memset+0x4>

08008c18 <__errno>:
 8008c18:	4b01      	ldr	r3, [pc, #4]	@ (8008c20 <__errno+0x8>)
 8008c1a:	6818      	ldr	r0, [r3, #0]
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	20000100 	.word	0x20000100

08008c24 <__libc_init_array>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	4b0d      	ldr	r3, [pc, #52]	@ (8008c5c <__libc_init_array+0x38>)
 8008c28:	4d0d      	ldr	r5, [pc, #52]	@ (8008c60 <__libc_init_array+0x3c>)
 8008c2a:	1b5b      	subs	r3, r3, r5
 8008c2c:	109c      	asrs	r4, r3, #2
 8008c2e:	2600      	movs	r6, #0
 8008c30:	42a6      	cmp	r6, r4
 8008c32:	d109      	bne.n	8008c48 <__libc_init_array+0x24>
 8008c34:	f000 ff18 	bl	8009a68 <_init>
 8008c38:	4d0a      	ldr	r5, [pc, #40]	@ (8008c64 <__libc_init_array+0x40>)
 8008c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c68 <__libc_init_array+0x44>)
 8008c3c:	1b5b      	subs	r3, r3, r5
 8008c3e:	109c      	asrs	r4, r3, #2
 8008c40:	2600      	movs	r6, #0
 8008c42:	42a6      	cmp	r6, r4
 8008c44:	d105      	bne.n	8008c52 <__libc_init_array+0x2e>
 8008c46:	bd70      	pop	{r4, r5, r6, pc}
 8008c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c4c:	4798      	blx	r3
 8008c4e:	3601      	adds	r6, #1
 8008c50:	e7ee      	b.n	8008c30 <__libc_init_array+0xc>
 8008c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c56:	4798      	blx	r3
 8008c58:	3601      	adds	r6, #1
 8008c5a:	e7f2      	b.n	8008c42 <__libc_init_array+0x1e>
 8008c5c:	0800a018 	.word	0x0800a018
 8008c60:	0800a018 	.word	0x0800a018
 8008c64:	0800a018 	.word	0x0800a018
 8008c68:	0800a01c 	.word	0x0800a01c

08008c6c <__retarget_lock_acquire_recursive>:
 8008c6c:	4770      	bx	lr

08008c6e <__retarget_lock_release_recursive>:
 8008c6e:	4770      	bx	lr

08008c70 <memcpy>:
 8008c70:	440a      	add	r2, r1
 8008c72:	4291      	cmp	r1, r2
 8008c74:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c78:	d100      	bne.n	8008c7c <memcpy+0xc>
 8008c7a:	4770      	bx	lr
 8008c7c:	b510      	push	{r4, lr}
 8008c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c86:	4291      	cmp	r1, r2
 8008c88:	d1f9      	bne.n	8008c7e <memcpy+0xe>
 8008c8a:	bd10      	pop	{r4, pc}

08008c8c <_free_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4605      	mov	r5, r0
 8008c90:	2900      	cmp	r1, #0
 8008c92:	d041      	beq.n	8008d18 <_free_r+0x8c>
 8008c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c98:	1f0c      	subs	r4, r1, #4
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	bfb8      	it	lt
 8008c9e:	18e4      	addlt	r4, r4, r3
 8008ca0:	f000 f8e0 	bl	8008e64 <__malloc_lock>
 8008ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8008d1c <_free_r+0x90>)
 8008ca6:	6813      	ldr	r3, [r2, #0]
 8008ca8:	b933      	cbnz	r3, 8008cb8 <_free_r+0x2c>
 8008caa:	6063      	str	r3, [r4, #4]
 8008cac:	6014      	str	r4, [r2, #0]
 8008cae:	4628      	mov	r0, r5
 8008cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cb4:	f000 b8dc 	b.w	8008e70 <__malloc_unlock>
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	d908      	bls.n	8008cce <_free_r+0x42>
 8008cbc:	6820      	ldr	r0, [r4, #0]
 8008cbe:	1821      	adds	r1, r4, r0
 8008cc0:	428b      	cmp	r3, r1
 8008cc2:	bf01      	itttt	eq
 8008cc4:	6819      	ldreq	r1, [r3, #0]
 8008cc6:	685b      	ldreq	r3, [r3, #4]
 8008cc8:	1809      	addeq	r1, r1, r0
 8008cca:	6021      	streq	r1, [r4, #0]
 8008ccc:	e7ed      	b.n	8008caa <_free_r+0x1e>
 8008cce:	461a      	mov	r2, r3
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	b10b      	cbz	r3, 8008cd8 <_free_r+0x4c>
 8008cd4:	42a3      	cmp	r3, r4
 8008cd6:	d9fa      	bls.n	8008cce <_free_r+0x42>
 8008cd8:	6811      	ldr	r1, [r2, #0]
 8008cda:	1850      	adds	r0, r2, r1
 8008cdc:	42a0      	cmp	r0, r4
 8008cde:	d10b      	bne.n	8008cf8 <_free_r+0x6c>
 8008ce0:	6820      	ldr	r0, [r4, #0]
 8008ce2:	4401      	add	r1, r0
 8008ce4:	1850      	adds	r0, r2, r1
 8008ce6:	4283      	cmp	r3, r0
 8008ce8:	6011      	str	r1, [r2, #0]
 8008cea:	d1e0      	bne.n	8008cae <_free_r+0x22>
 8008cec:	6818      	ldr	r0, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	6053      	str	r3, [r2, #4]
 8008cf2:	4408      	add	r0, r1
 8008cf4:	6010      	str	r0, [r2, #0]
 8008cf6:	e7da      	b.n	8008cae <_free_r+0x22>
 8008cf8:	d902      	bls.n	8008d00 <_free_r+0x74>
 8008cfa:	230c      	movs	r3, #12
 8008cfc:	602b      	str	r3, [r5, #0]
 8008cfe:	e7d6      	b.n	8008cae <_free_r+0x22>
 8008d00:	6820      	ldr	r0, [r4, #0]
 8008d02:	1821      	adds	r1, r4, r0
 8008d04:	428b      	cmp	r3, r1
 8008d06:	bf04      	itt	eq
 8008d08:	6819      	ldreq	r1, [r3, #0]
 8008d0a:	685b      	ldreq	r3, [r3, #4]
 8008d0c:	6063      	str	r3, [r4, #4]
 8008d0e:	bf04      	itt	eq
 8008d10:	1809      	addeq	r1, r1, r0
 8008d12:	6021      	streq	r1, [r4, #0]
 8008d14:	6054      	str	r4, [r2, #4]
 8008d16:	e7ca      	b.n	8008cae <_free_r+0x22>
 8008d18:	bd38      	pop	{r3, r4, r5, pc}
 8008d1a:	bf00      	nop
 8008d1c:	200072b0 	.word	0x200072b0

08008d20 <sbrk_aligned>:
 8008d20:	b570      	push	{r4, r5, r6, lr}
 8008d22:	4e0f      	ldr	r6, [pc, #60]	@ (8008d60 <sbrk_aligned+0x40>)
 8008d24:	460c      	mov	r4, r1
 8008d26:	6831      	ldr	r1, [r6, #0]
 8008d28:	4605      	mov	r5, r0
 8008d2a:	b911      	cbnz	r1, 8008d32 <sbrk_aligned+0x12>
 8008d2c:	f000 fbaa 	bl	8009484 <_sbrk_r>
 8008d30:	6030      	str	r0, [r6, #0]
 8008d32:	4621      	mov	r1, r4
 8008d34:	4628      	mov	r0, r5
 8008d36:	f000 fba5 	bl	8009484 <_sbrk_r>
 8008d3a:	1c43      	adds	r3, r0, #1
 8008d3c:	d103      	bne.n	8008d46 <sbrk_aligned+0x26>
 8008d3e:	f04f 34ff 	mov.w	r4, #4294967295
 8008d42:	4620      	mov	r0, r4
 8008d44:	bd70      	pop	{r4, r5, r6, pc}
 8008d46:	1cc4      	adds	r4, r0, #3
 8008d48:	f024 0403 	bic.w	r4, r4, #3
 8008d4c:	42a0      	cmp	r0, r4
 8008d4e:	d0f8      	beq.n	8008d42 <sbrk_aligned+0x22>
 8008d50:	1a21      	subs	r1, r4, r0
 8008d52:	4628      	mov	r0, r5
 8008d54:	f000 fb96 	bl	8009484 <_sbrk_r>
 8008d58:	3001      	adds	r0, #1
 8008d5a:	d1f2      	bne.n	8008d42 <sbrk_aligned+0x22>
 8008d5c:	e7ef      	b.n	8008d3e <sbrk_aligned+0x1e>
 8008d5e:	bf00      	nop
 8008d60:	200072ac 	.word	0x200072ac

08008d64 <_malloc_r>:
 8008d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d68:	1ccd      	adds	r5, r1, #3
 8008d6a:	f025 0503 	bic.w	r5, r5, #3
 8008d6e:	3508      	adds	r5, #8
 8008d70:	2d0c      	cmp	r5, #12
 8008d72:	bf38      	it	cc
 8008d74:	250c      	movcc	r5, #12
 8008d76:	2d00      	cmp	r5, #0
 8008d78:	4606      	mov	r6, r0
 8008d7a:	db01      	blt.n	8008d80 <_malloc_r+0x1c>
 8008d7c:	42a9      	cmp	r1, r5
 8008d7e:	d904      	bls.n	8008d8a <_malloc_r+0x26>
 8008d80:	230c      	movs	r3, #12
 8008d82:	6033      	str	r3, [r6, #0]
 8008d84:	2000      	movs	r0, #0
 8008d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e60 <_malloc_r+0xfc>
 8008d8e:	f000 f869 	bl	8008e64 <__malloc_lock>
 8008d92:	f8d8 3000 	ldr.w	r3, [r8]
 8008d96:	461c      	mov	r4, r3
 8008d98:	bb44      	cbnz	r4, 8008dec <_malloc_r+0x88>
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f7ff ffbf 	bl	8008d20 <sbrk_aligned>
 8008da2:	1c43      	adds	r3, r0, #1
 8008da4:	4604      	mov	r4, r0
 8008da6:	d158      	bne.n	8008e5a <_malloc_r+0xf6>
 8008da8:	f8d8 4000 	ldr.w	r4, [r8]
 8008dac:	4627      	mov	r7, r4
 8008dae:	2f00      	cmp	r7, #0
 8008db0:	d143      	bne.n	8008e3a <_malloc_r+0xd6>
 8008db2:	2c00      	cmp	r4, #0
 8008db4:	d04b      	beq.n	8008e4e <_malloc_r+0xea>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	4639      	mov	r1, r7
 8008dba:	4630      	mov	r0, r6
 8008dbc:	eb04 0903 	add.w	r9, r4, r3
 8008dc0:	f000 fb60 	bl	8009484 <_sbrk_r>
 8008dc4:	4581      	cmp	r9, r0
 8008dc6:	d142      	bne.n	8008e4e <_malloc_r+0xea>
 8008dc8:	6821      	ldr	r1, [r4, #0]
 8008dca:	1a6d      	subs	r5, r5, r1
 8008dcc:	4629      	mov	r1, r5
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f7ff ffa6 	bl	8008d20 <sbrk_aligned>
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	d03a      	beq.n	8008e4e <_malloc_r+0xea>
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	442b      	add	r3, r5
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	f8d8 3000 	ldr.w	r3, [r8]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	bb62      	cbnz	r2, 8008e40 <_malloc_r+0xdc>
 8008de6:	f8c8 7000 	str.w	r7, [r8]
 8008dea:	e00f      	b.n	8008e0c <_malloc_r+0xa8>
 8008dec:	6822      	ldr	r2, [r4, #0]
 8008dee:	1b52      	subs	r2, r2, r5
 8008df0:	d420      	bmi.n	8008e34 <_malloc_r+0xd0>
 8008df2:	2a0b      	cmp	r2, #11
 8008df4:	d917      	bls.n	8008e26 <_malloc_r+0xc2>
 8008df6:	1961      	adds	r1, r4, r5
 8008df8:	42a3      	cmp	r3, r4
 8008dfa:	6025      	str	r5, [r4, #0]
 8008dfc:	bf18      	it	ne
 8008dfe:	6059      	strne	r1, [r3, #4]
 8008e00:	6863      	ldr	r3, [r4, #4]
 8008e02:	bf08      	it	eq
 8008e04:	f8c8 1000 	streq.w	r1, [r8]
 8008e08:	5162      	str	r2, [r4, r5]
 8008e0a:	604b      	str	r3, [r1, #4]
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	f000 f82f 	bl	8008e70 <__malloc_unlock>
 8008e12:	f104 000b 	add.w	r0, r4, #11
 8008e16:	1d23      	adds	r3, r4, #4
 8008e18:	f020 0007 	bic.w	r0, r0, #7
 8008e1c:	1ac2      	subs	r2, r0, r3
 8008e1e:	bf1c      	itt	ne
 8008e20:	1a1b      	subne	r3, r3, r0
 8008e22:	50a3      	strne	r3, [r4, r2]
 8008e24:	e7af      	b.n	8008d86 <_malloc_r+0x22>
 8008e26:	6862      	ldr	r2, [r4, #4]
 8008e28:	42a3      	cmp	r3, r4
 8008e2a:	bf0c      	ite	eq
 8008e2c:	f8c8 2000 	streq.w	r2, [r8]
 8008e30:	605a      	strne	r2, [r3, #4]
 8008e32:	e7eb      	b.n	8008e0c <_malloc_r+0xa8>
 8008e34:	4623      	mov	r3, r4
 8008e36:	6864      	ldr	r4, [r4, #4]
 8008e38:	e7ae      	b.n	8008d98 <_malloc_r+0x34>
 8008e3a:	463c      	mov	r4, r7
 8008e3c:	687f      	ldr	r7, [r7, #4]
 8008e3e:	e7b6      	b.n	8008dae <_malloc_r+0x4a>
 8008e40:	461a      	mov	r2, r3
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	d1fb      	bne.n	8008e40 <_malloc_r+0xdc>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	6053      	str	r3, [r2, #4]
 8008e4c:	e7de      	b.n	8008e0c <_malloc_r+0xa8>
 8008e4e:	230c      	movs	r3, #12
 8008e50:	6033      	str	r3, [r6, #0]
 8008e52:	4630      	mov	r0, r6
 8008e54:	f000 f80c 	bl	8008e70 <__malloc_unlock>
 8008e58:	e794      	b.n	8008d84 <_malloc_r+0x20>
 8008e5a:	6005      	str	r5, [r0, #0]
 8008e5c:	e7d6      	b.n	8008e0c <_malloc_r+0xa8>
 8008e5e:	bf00      	nop
 8008e60:	200072b0 	.word	0x200072b0

08008e64 <__malloc_lock>:
 8008e64:	4801      	ldr	r0, [pc, #4]	@ (8008e6c <__malloc_lock+0x8>)
 8008e66:	f7ff bf01 	b.w	8008c6c <__retarget_lock_acquire_recursive>
 8008e6a:	bf00      	nop
 8008e6c:	200072a8 	.word	0x200072a8

08008e70 <__malloc_unlock>:
 8008e70:	4801      	ldr	r0, [pc, #4]	@ (8008e78 <__malloc_unlock+0x8>)
 8008e72:	f7ff befc 	b.w	8008c6e <__retarget_lock_release_recursive>
 8008e76:	bf00      	nop
 8008e78:	200072a8 	.word	0x200072a8

08008e7c <__ssputs_r>:
 8008e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e80:	688e      	ldr	r6, [r1, #8]
 8008e82:	461f      	mov	r7, r3
 8008e84:	42be      	cmp	r6, r7
 8008e86:	4682      	mov	sl, r0
 8008e88:	460c      	mov	r4, r1
 8008e8a:	4690      	mov	r8, r2
 8008e8c:	4633      	mov	r3, r6
 8008e8e:	d853      	bhi.n	8008f38 <__ssputs_r+0xbc>
 8008e90:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8008e94:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 8008e98:	d02b      	beq.n	8008ef2 <__ssputs_r+0x76>
 8008e9a:	6965      	ldr	r5, [r4, #20]
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	6909      	ldr	r1, [r1, #16]
 8008ea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ea4:	eba3 0901 	sub.w	r9, r3, r1
 8008ea8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008eac:	1c7b      	adds	r3, r7, #1
 8008eae:	106d      	asrs	r5, r5, #1
 8008eb0:	444b      	add	r3, r9
 8008eb2:	42ab      	cmp	r3, r5
 8008eb4:	462a      	mov	r2, r5
 8008eb6:	bf84      	itt	hi
 8008eb8:	461d      	movhi	r5, r3
 8008eba:	462a      	movhi	r2, r5
 8008ebc:	0543      	lsls	r3, r0, #21
 8008ebe:	d527      	bpl.n	8008f10 <__ssputs_r+0x94>
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	4650      	mov	r0, sl
 8008ec4:	f7ff ff4e 	bl	8008d64 <_malloc_r>
 8008ec8:	4606      	mov	r6, r0
 8008eca:	b358      	cbz	r0, 8008f24 <__ssputs_r+0xa8>
 8008ecc:	6921      	ldr	r1, [r4, #16]
 8008ece:	464a      	mov	r2, r9
 8008ed0:	f7ff fece 	bl	8008c70 <memcpy>
 8008ed4:	89a3      	ldrh	r3, [r4, #12]
 8008ed6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ede:	81a3      	strh	r3, [r4, #12]
 8008ee0:	6126      	str	r6, [r4, #16]
 8008ee2:	6165      	str	r5, [r4, #20]
 8008ee4:	444e      	add	r6, r9
 8008ee6:	eba5 0509 	sub.w	r5, r5, r9
 8008eea:	6026      	str	r6, [r4, #0]
 8008eec:	60a5      	str	r5, [r4, #8]
 8008eee:	463e      	mov	r6, r7
 8008ef0:	463b      	mov	r3, r7
 8008ef2:	461f      	mov	r7, r3
 8008ef4:	6820      	ldr	r0, [r4, #0]
 8008ef6:	463a      	mov	r2, r7
 8008ef8:	4641      	mov	r1, r8
 8008efa:	f000 faa9 	bl	8009450 <memmove>
 8008efe:	68a3      	ldr	r3, [r4, #8]
 8008f00:	1b9b      	subs	r3, r3, r6
 8008f02:	60a3      	str	r3, [r4, #8]
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	443b      	add	r3, r7
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f10:	4650      	mov	r0, sl
 8008f12:	f000 fac7 	bl	80094a4 <_realloc_r>
 8008f16:	4606      	mov	r6, r0
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d1e1      	bne.n	8008ee0 <__ssputs_r+0x64>
 8008f1c:	6921      	ldr	r1, [r4, #16]
 8008f1e:	4650      	mov	r0, sl
 8008f20:	f7ff feb4 	bl	8008c8c <_free_r>
 8008f24:	230c      	movs	r3, #12
 8008f26:	f8ca 3000 	str.w	r3, [sl]
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f30:	81a3      	strh	r3, [r4, #12]
 8008f32:	f04f 30ff 	mov.w	r0, #4294967295
 8008f36:	e7e9      	b.n	8008f0c <__ssputs_r+0x90>
 8008f38:	463e      	mov	r6, r7
 8008f3a:	e7db      	b.n	8008ef4 <__ssputs_r+0x78>

08008f3c <_svfiprintf_r>:
 8008f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f40:	4698      	mov	r8, r3
 8008f42:	898b      	ldrh	r3, [r1, #12]
 8008f44:	061b      	lsls	r3, r3, #24
 8008f46:	b09d      	sub	sp, #116	@ 0x74
 8008f48:	4607      	mov	r7, r0
 8008f4a:	460d      	mov	r5, r1
 8008f4c:	4614      	mov	r4, r2
 8008f4e:	d510      	bpl.n	8008f72 <_svfiprintf_r+0x36>
 8008f50:	690b      	ldr	r3, [r1, #16]
 8008f52:	b973      	cbnz	r3, 8008f72 <_svfiprintf_r+0x36>
 8008f54:	2140      	movs	r1, #64	@ 0x40
 8008f56:	f7ff ff05 	bl	8008d64 <_malloc_r>
 8008f5a:	6028      	str	r0, [r5, #0]
 8008f5c:	6128      	str	r0, [r5, #16]
 8008f5e:	b930      	cbnz	r0, 8008f6e <_svfiprintf_r+0x32>
 8008f60:	230c      	movs	r3, #12
 8008f62:	603b      	str	r3, [r7, #0]
 8008f64:	f04f 30ff 	mov.w	r0, #4294967295
 8008f68:	b01d      	add	sp, #116	@ 0x74
 8008f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6e:	2340      	movs	r3, #64	@ 0x40
 8008f70:	616b      	str	r3, [r5, #20]
 8008f72:	2300      	movs	r3, #0
 8008f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f76:	2320      	movs	r3, #32
 8008f78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f80:	2330      	movs	r3, #48	@ 0x30
 8008f82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009120 <_svfiprintf_r+0x1e4>
 8008f86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f8a:	f04f 0901 	mov.w	r9, #1
 8008f8e:	4623      	mov	r3, r4
 8008f90:	469a      	mov	sl, r3
 8008f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f96:	b10a      	cbz	r2, 8008f9c <_svfiprintf_r+0x60>
 8008f98:	2a25      	cmp	r2, #37	@ 0x25
 8008f9a:	d1f9      	bne.n	8008f90 <_svfiprintf_r+0x54>
 8008f9c:	ebba 0b04 	subs.w	fp, sl, r4
 8008fa0:	d00b      	beq.n	8008fba <_svfiprintf_r+0x7e>
 8008fa2:	465b      	mov	r3, fp
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	4638      	mov	r0, r7
 8008faa:	f7ff ff67 	bl	8008e7c <__ssputs_r>
 8008fae:	3001      	adds	r0, #1
 8008fb0:	f000 80a7 	beq.w	8009102 <_svfiprintf_r+0x1c6>
 8008fb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fb6:	445a      	add	r2, fp
 8008fb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fba:	f89a 3000 	ldrb.w	r3, [sl]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 809f 	beq.w	8009102 <_svfiprintf_r+0x1c6>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fce:	f10a 0a01 	add.w	sl, sl, #1
 8008fd2:	9304      	str	r3, [sp, #16]
 8008fd4:	9307      	str	r3, [sp, #28]
 8008fd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fda:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fdc:	4654      	mov	r4, sl
 8008fde:	2205      	movs	r2, #5
 8008fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe4:	484e      	ldr	r0, [pc, #312]	@ (8009120 <_svfiprintf_r+0x1e4>)
 8008fe6:	f7f7 f8e3 	bl	80001b0 <memchr>
 8008fea:	9a04      	ldr	r2, [sp, #16]
 8008fec:	b9d8      	cbnz	r0, 8009026 <_svfiprintf_r+0xea>
 8008fee:	06d0      	lsls	r0, r2, #27
 8008ff0:	bf44      	itt	mi
 8008ff2:	2320      	movmi	r3, #32
 8008ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ff8:	0711      	lsls	r1, r2, #28
 8008ffa:	bf44      	itt	mi
 8008ffc:	232b      	movmi	r3, #43	@ 0x2b
 8008ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009002:	f89a 3000 	ldrb.w	r3, [sl]
 8009006:	2b2a      	cmp	r3, #42	@ 0x2a
 8009008:	d015      	beq.n	8009036 <_svfiprintf_r+0xfa>
 800900a:	9a07      	ldr	r2, [sp, #28]
 800900c:	4654      	mov	r4, sl
 800900e:	2000      	movs	r0, #0
 8009010:	f04f 0c0a 	mov.w	ip, #10
 8009014:	4621      	mov	r1, r4
 8009016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800901a:	3b30      	subs	r3, #48	@ 0x30
 800901c:	2b09      	cmp	r3, #9
 800901e:	d94b      	bls.n	80090b8 <_svfiprintf_r+0x17c>
 8009020:	b1b0      	cbz	r0, 8009050 <_svfiprintf_r+0x114>
 8009022:	9207      	str	r2, [sp, #28]
 8009024:	e014      	b.n	8009050 <_svfiprintf_r+0x114>
 8009026:	eba0 0308 	sub.w	r3, r0, r8
 800902a:	fa09 f303 	lsl.w	r3, r9, r3
 800902e:	4313      	orrs	r3, r2
 8009030:	9304      	str	r3, [sp, #16]
 8009032:	46a2      	mov	sl, r4
 8009034:	e7d2      	b.n	8008fdc <_svfiprintf_r+0xa0>
 8009036:	9b03      	ldr	r3, [sp, #12]
 8009038:	1d19      	adds	r1, r3, #4
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	9103      	str	r1, [sp, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	bfbb      	ittet	lt
 8009042:	425b      	neglt	r3, r3
 8009044:	f042 0202 	orrlt.w	r2, r2, #2
 8009048:	9307      	strge	r3, [sp, #28]
 800904a:	9307      	strlt	r3, [sp, #28]
 800904c:	bfb8      	it	lt
 800904e:	9204      	strlt	r2, [sp, #16]
 8009050:	7823      	ldrb	r3, [r4, #0]
 8009052:	2b2e      	cmp	r3, #46	@ 0x2e
 8009054:	d10a      	bne.n	800906c <_svfiprintf_r+0x130>
 8009056:	7863      	ldrb	r3, [r4, #1]
 8009058:	2b2a      	cmp	r3, #42	@ 0x2a
 800905a:	d132      	bne.n	80090c2 <_svfiprintf_r+0x186>
 800905c:	9b03      	ldr	r3, [sp, #12]
 800905e:	1d1a      	adds	r2, r3, #4
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	9203      	str	r2, [sp, #12]
 8009064:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009068:	3402      	adds	r4, #2
 800906a:	9305      	str	r3, [sp, #20]
 800906c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009130 <_svfiprintf_r+0x1f4>
 8009070:	7821      	ldrb	r1, [r4, #0]
 8009072:	2203      	movs	r2, #3
 8009074:	4650      	mov	r0, sl
 8009076:	f7f7 f89b 	bl	80001b0 <memchr>
 800907a:	b138      	cbz	r0, 800908c <_svfiprintf_r+0x150>
 800907c:	9b04      	ldr	r3, [sp, #16]
 800907e:	eba0 000a 	sub.w	r0, r0, sl
 8009082:	2240      	movs	r2, #64	@ 0x40
 8009084:	4082      	lsls	r2, r0
 8009086:	4313      	orrs	r3, r2
 8009088:	3401      	adds	r4, #1
 800908a:	9304      	str	r3, [sp, #16]
 800908c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009090:	4824      	ldr	r0, [pc, #144]	@ (8009124 <_svfiprintf_r+0x1e8>)
 8009092:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009096:	2206      	movs	r2, #6
 8009098:	f7f7 f88a 	bl	80001b0 <memchr>
 800909c:	2800      	cmp	r0, #0
 800909e:	d036      	beq.n	800910e <_svfiprintf_r+0x1d2>
 80090a0:	4b21      	ldr	r3, [pc, #132]	@ (8009128 <_svfiprintf_r+0x1ec>)
 80090a2:	bb1b      	cbnz	r3, 80090ec <_svfiprintf_r+0x1b0>
 80090a4:	9b03      	ldr	r3, [sp, #12]
 80090a6:	3307      	adds	r3, #7
 80090a8:	f023 0307 	bic.w	r3, r3, #7
 80090ac:	3308      	adds	r3, #8
 80090ae:	9303      	str	r3, [sp, #12]
 80090b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090b2:	4433      	add	r3, r6
 80090b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80090b6:	e76a      	b.n	8008f8e <_svfiprintf_r+0x52>
 80090b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80090bc:	460c      	mov	r4, r1
 80090be:	2001      	movs	r0, #1
 80090c0:	e7a8      	b.n	8009014 <_svfiprintf_r+0xd8>
 80090c2:	2300      	movs	r3, #0
 80090c4:	3401      	adds	r4, #1
 80090c6:	9305      	str	r3, [sp, #20]
 80090c8:	4619      	mov	r1, r3
 80090ca:	f04f 0c0a 	mov.w	ip, #10
 80090ce:	4620      	mov	r0, r4
 80090d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090d4:	3a30      	subs	r2, #48	@ 0x30
 80090d6:	2a09      	cmp	r2, #9
 80090d8:	d903      	bls.n	80090e2 <_svfiprintf_r+0x1a6>
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d0c6      	beq.n	800906c <_svfiprintf_r+0x130>
 80090de:	9105      	str	r1, [sp, #20]
 80090e0:	e7c4      	b.n	800906c <_svfiprintf_r+0x130>
 80090e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80090e6:	4604      	mov	r4, r0
 80090e8:	2301      	movs	r3, #1
 80090ea:	e7f0      	b.n	80090ce <_svfiprintf_r+0x192>
 80090ec:	ab03      	add	r3, sp, #12
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	462a      	mov	r2, r5
 80090f2:	4b0e      	ldr	r3, [pc, #56]	@ (800912c <_svfiprintf_r+0x1f0>)
 80090f4:	a904      	add	r1, sp, #16
 80090f6:	4638      	mov	r0, r7
 80090f8:	f3af 8000 	nop.w
 80090fc:	1c42      	adds	r2, r0, #1
 80090fe:	4606      	mov	r6, r0
 8009100:	d1d6      	bne.n	80090b0 <_svfiprintf_r+0x174>
 8009102:	89ab      	ldrh	r3, [r5, #12]
 8009104:	065b      	lsls	r3, r3, #25
 8009106:	f53f af2d 	bmi.w	8008f64 <_svfiprintf_r+0x28>
 800910a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800910c:	e72c      	b.n	8008f68 <_svfiprintf_r+0x2c>
 800910e:	ab03      	add	r3, sp, #12
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	462a      	mov	r2, r5
 8009114:	4b05      	ldr	r3, [pc, #20]	@ (800912c <_svfiprintf_r+0x1f0>)
 8009116:	a904      	add	r1, sp, #16
 8009118:	4638      	mov	r0, r7
 800911a:	f000 f879 	bl	8009210 <_printf_i>
 800911e:	e7ed      	b.n	80090fc <_svfiprintf_r+0x1c0>
 8009120:	08009fdc 	.word	0x08009fdc
 8009124:	08009fe6 	.word	0x08009fe6
 8009128:	00000000 	.word	0x00000000
 800912c:	08008e7d 	.word	0x08008e7d
 8009130:	08009fe2 	.word	0x08009fe2

08009134 <_printf_common>:
 8009134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009138:	4616      	mov	r6, r2
 800913a:	4698      	mov	r8, r3
 800913c:	688a      	ldr	r2, [r1, #8]
 800913e:	690b      	ldr	r3, [r1, #16]
 8009140:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009144:	4293      	cmp	r3, r2
 8009146:	bfb8      	it	lt
 8009148:	4613      	movlt	r3, r2
 800914a:	6033      	str	r3, [r6, #0]
 800914c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009150:	4607      	mov	r7, r0
 8009152:	460c      	mov	r4, r1
 8009154:	b10a      	cbz	r2, 800915a <_printf_common+0x26>
 8009156:	3301      	adds	r3, #1
 8009158:	6033      	str	r3, [r6, #0]
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	0699      	lsls	r1, r3, #26
 800915e:	bf42      	ittt	mi
 8009160:	6833      	ldrmi	r3, [r6, #0]
 8009162:	3302      	addmi	r3, #2
 8009164:	6033      	strmi	r3, [r6, #0]
 8009166:	6825      	ldr	r5, [r4, #0]
 8009168:	f015 0506 	ands.w	r5, r5, #6
 800916c:	d106      	bne.n	800917c <_printf_common+0x48>
 800916e:	f104 0a19 	add.w	sl, r4, #25
 8009172:	68e3      	ldr	r3, [r4, #12]
 8009174:	6832      	ldr	r2, [r6, #0]
 8009176:	1a9b      	subs	r3, r3, r2
 8009178:	42ab      	cmp	r3, r5
 800917a:	dc26      	bgt.n	80091ca <_printf_common+0x96>
 800917c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009180:	6822      	ldr	r2, [r4, #0]
 8009182:	3b00      	subs	r3, #0
 8009184:	bf18      	it	ne
 8009186:	2301      	movne	r3, #1
 8009188:	0692      	lsls	r2, r2, #26
 800918a:	d42b      	bmi.n	80091e4 <_printf_common+0xb0>
 800918c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009190:	4641      	mov	r1, r8
 8009192:	4638      	mov	r0, r7
 8009194:	47c8      	blx	r9
 8009196:	3001      	adds	r0, #1
 8009198:	d01e      	beq.n	80091d8 <_printf_common+0xa4>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	6922      	ldr	r2, [r4, #16]
 800919e:	f003 0306 	and.w	r3, r3, #6
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	bf02      	ittt	eq
 80091a6:	68e5      	ldreq	r5, [r4, #12]
 80091a8:	6833      	ldreq	r3, [r6, #0]
 80091aa:	1aed      	subeq	r5, r5, r3
 80091ac:	68a3      	ldr	r3, [r4, #8]
 80091ae:	bf0c      	ite	eq
 80091b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091b4:	2500      	movne	r5, #0
 80091b6:	4293      	cmp	r3, r2
 80091b8:	bfc4      	itt	gt
 80091ba:	1a9b      	subgt	r3, r3, r2
 80091bc:	18ed      	addgt	r5, r5, r3
 80091be:	2600      	movs	r6, #0
 80091c0:	341a      	adds	r4, #26
 80091c2:	42b5      	cmp	r5, r6
 80091c4:	d11a      	bne.n	80091fc <_printf_common+0xc8>
 80091c6:	2000      	movs	r0, #0
 80091c8:	e008      	b.n	80091dc <_printf_common+0xa8>
 80091ca:	2301      	movs	r3, #1
 80091cc:	4652      	mov	r2, sl
 80091ce:	4641      	mov	r1, r8
 80091d0:	4638      	mov	r0, r7
 80091d2:	47c8      	blx	r9
 80091d4:	3001      	adds	r0, #1
 80091d6:	d103      	bne.n	80091e0 <_printf_common+0xac>
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295
 80091dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e0:	3501      	adds	r5, #1
 80091e2:	e7c6      	b.n	8009172 <_printf_common+0x3e>
 80091e4:	18e1      	adds	r1, r4, r3
 80091e6:	1c5a      	adds	r2, r3, #1
 80091e8:	2030      	movs	r0, #48	@ 0x30
 80091ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80091ee:	4422      	add	r2, r4
 80091f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80091f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80091f8:	3302      	adds	r3, #2
 80091fa:	e7c7      	b.n	800918c <_printf_common+0x58>
 80091fc:	2301      	movs	r3, #1
 80091fe:	4622      	mov	r2, r4
 8009200:	4641      	mov	r1, r8
 8009202:	4638      	mov	r0, r7
 8009204:	47c8      	blx	r9
 8009206:	3001      	adds	r0, #1
 8009208:	d0e6      	beq.n	80091d8 <_printf_common+0xa4>
 800920a:	3601      	adds	r6, #1
 800920c:	e7d9      	b.n	80091c2 <_printf_common+0x8e>
	...

08009210 <_printf_i>:
 8009210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009214:	7e0f      	ldrb	r7, [r1, #24]
 8009216:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009218:	2f78      	cmp	r7, #120	@ 0x78
 800921a:	4691      	mov	r9, r2
 800921c:	4680      	mov	r8, r0
 800921e:	460c      	mov	r4, r1
 8009220:	469a      	mov	sl, r3
 8009222:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009226:	d807      	bhi.n	8009238 <_printf_i+0x28>
 8009228:	2f62      	cmp	r7, #98	@ 0x62
 800922a:	d80a      	bhi.n	8009242 <_printf_i+0x32>
 800922c:	2f00      	cmp	r7, #0
 800922e:	f000 80d2 	beq.w	80093d6 <_printf_i+0x1c6>
 8009232:	2f58      	cmp	r7, #88	@ 0x58
 8009234:	f000 80b7 	beq.w	80093a6 <_printf_i+0x196>
 8009238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800923c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009240:	e03a      	b.n	80092b8 <_printf_i+0xa8>
 8009242:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009246:	2b15      	cmp	r3, #21
 8009248:	d8f6      	bhi.n	8009238 <_printf_i+0x28>
 800924a:	a101      	add	r1, pc, #4	@ (adr r1, 8009250 <_printf_i+0x40>)
 800924c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009250:	080092a9 	.word	0x080092a9
 8009254:	080092bd 	.word	0x080092bd
 8009258:	08009239 	.word	0x08009239
 800925c:	08009239 	.word	0x08009239
 8009260:	08009239 	.word	0x08009239
 8009264:	08009239 	.word	0x08009239
 8009268:	080092bd 	.word	0x080092bd
 800926c:	08009239 	.word	0x08009239
 8009270:	08009239 	.word	0x08009239
 8009274:	08009239 	.word	0x08009239
 8009278:	08009239 	.word	0x08009239
 800927c:	080093bd 	.word	0x080093bd
 8009280:	080092e7 	.word	0x080092e7
 8009284:	08009373 	.word	0x08009373
 8009288:	08009239 	.word	0x08009239
 800928c:	08009239 	.word	0x08009239
 8009290:	080093df 	.word	0x080093df
 8009294:	08009239 	.word	0x08009239
 8009298:	080092e7 	.word	0x080092e7
 800929c:	08009239 	.word	0x08009239
 80092a0:	08009239 	.word	0x08009239
 80092a4:	0800937b 	.word	0x0800937b
 80092a8:	6833      	ldr	r3, [r6, #0]
 80092aa:	1d1a      	adds	r2, r3, #4
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	6032      	str	r2, [r6, #0]
 80092b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80092b8:	2301      	movs	r3, #1
 80092ba:	e09d      	b.n	80093f8 <_printf_i+0x1e8>
 80092bc:	6833      	ldr	r3, [r6, #0]
 80092be:	6820      	ldr	r0, [r4, #0]
 80092c0:	1d19      	adds	r1, r3, #4
 80092c2:	6031      	str	r1, [r6, #0]
 80092c4:	0606      	lsls	r6, r0, #24
 80092c6:	d501      	bpl.n	80092cc <_printf_i+0xbc>
 80092c8:	681d      	ldr	r5, [r3, #0]
 80092ca:	e003      	b.n	80092d4 <_printf_i+0xc4>
 80092cc:	0645      	lsls	r5, r0, #25
 80092ce:	d5fb      	bpl.n	80092c8 <_printf_i+0xb8>
 80092d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80092d4:	2d00      	cmp	r5, #0
 80092d6:	da03      	bge.n	80092e0 <_printf_i+0xd0>
 80092d8:	232d      	movs	r3, #45	@ 0x2d
 80092da:	426d      	negs	r5, r5
 80092dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092e0:	4859      	ldr	r0, [pc, #356]	@ (8009448 <_printf_i+0x238>)
 80092e2:	230a      	movs	r3, #10
 80092e4:	e010      	b.n	8009308 <_printf_i+0xf8>
 80092e6:	6821      	ldr	r1, [r4, #0]
 80092e8:	6833      	ldr	r3, [r6, #0]
 80092ea:	0608      	lsls	r0, r1, #24
 80092ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80092f0:	d402      	bmi.n	80092f8 <_printf_i+0xe8>
 80092f2:	0649      	lsls	r1, r1, #25
 80092f4:	bf48      	it	mi
 80092f6:	b2ad      	uxthmi	r5, r5
 80092f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80092fa:	4853      	ldr	r0, [pc, #332]	@ (8009448 <_printf_i+0x238>)
 80092fc:	6033      	str	r3, [r6, #0]
 80092fe:	d159      	bne.n	80093b4 <_printf_i+0x1a4>
 8009300:	2308      	movs	r3, #8
 8009302:	2100      	movs	r1, #0
 8009304:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009308:	6866      	ldr	r6, [r4, #4]
 800930a:	60a6      	str	r6, [r4, #8]
 800930c:	2e00      	cmp	r6, #0
 800930e:	db05      	blt.n	800931c <_printf_i+0x10c>
 8009310:	6821      	ldr	r1, [r4, #0]
 8009312:	432e      	orrs	r6, r5
 8009314:	f021 0104 	bic.w	r1, r1, #4
 8009318:	6021      	str	r1, [r4, #0]
 800931a:	d04d      	beq.n	80093b8 <_printf_i+0x1a8>
 800931c:	4616      	mov	r6, r2
 800931e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009322:	fb03 5711 	mls	r7, r3, r1, r5
 8009326:	5dc7      	ldrb	r7, [r0, r7]
 8009328:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800932c:	462f      	mov	r7, r5
 800932e:	42bb      	cmp	r3, r7
 8009330:	460d      	mov	r5, r1
 8009332:	d9f4      	bls.n	800931e <_printf_i+0x10e>
 8009334:	2b08      	cmp	r3, #8
 8009336:	d10b      	bne.n	8009350 <_printf_i+0x140>
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	07df      	lsls	r7, r3, #31
 800933c:	d508      	bpl.n	8009350 <_printf_i+0x140>
 800933e:	6923      	ldr	r3, [r4, #16]
 8009340:	6861      	ldr	r1, [r4, #4]
 8009342:	4299      	cmp	r1, r3
 8009344:	bfde      	ittt	le
 8009346:	2330      	movle	r3, #48	@ 0x30
 8009348:	f806 3c01 	strble.w	r3, [r6, #-1]
 800934c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009350:	1b92      	subs	r2, r2, r6
 8009352:	6122      	str	r2, [r4, #16]
 8009354:	f8cd a000 	str.w	sl, [sp]
 8009358:	464b      	mov	r3, r9
 800935a:	aa03      	add	r2, sp, #12
 800935c:	4621      	mov	r1, r4
 800935e:	4640      	mov	r0, r8
 8009360:	f7ff fee8 	bl	8009134 <_printf_common>
 8009364:	3001      	adds	r0, #1
 8009366:	d14c      	bne.n	8009402 <_printf_i+0x1f2>
 8009368:	f04f 30ff 	mov.w	r0, #4294967295
 800936c:	b004      	add	sp, #16
 800936e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	f043 0320 	orr.w	r3, r3, #32
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	4834      	ldr	r0, [pc, #208]	@ (800944c <_printf_i+0x23c>)
 800937c:	2778      	movs	r7, #120	@ 0x78
 800937e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	6831      	ldr	r1, [r6, #0]
 8009386:	061f      	lsls	r7, r3, #24
 8009388:	f851 5b04 	ldr.w	r5, [r1], #4
 800938c:	d402      	bmi.n	8009394 <_printf_i+0x184>
 800938e:	065f      	lsls	r7, r3, #25
 8009390:	bf48      	it	mi
 8009392:	b2ad      	uxthmi	r5, r5
 8009394:	6031      	str	r1, [r6, #0]
 8009396:	07d9      	lsls	r1, r3, #31
 8009398:	bf44      	itt	mi
 800939a:	f043 0320 	orrmi.w	r3, r3, #32
 800939e:	6023      	strmi	r3, [r4, #0]
 80093a0:	b11d      	cbz	r5, 80093aa <_printf_i+0x19a>
 80093a2:	2310      	movs	r3, #16
 80093a4:	e7ad      	b.n	8009302 <_printf_i+0xf2>
 80093a6:	4828      	ldr	r0, [pc, #160]	@ (8009448 <_printf_i+0x238>)
 80093a8:	e7e9      	b.n	800937e <_printf_i+0x16e>
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	f023 0320 	bic.w	r3, r3, #32
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	e7f6      	b.n	80093a2 <_printf_i+0x192>
 80093b4:	230a      	movs	r3, #10
 80093b6:	e7a4      	b.n	8009302 <_printf_i+0xf2>
 80093b8:	4616      	mov	r6, r2
 80093ba:	e7bb      	b.n	8009334 <_printf_i+0x124>
 80093bc:	6833      	ldr	r3, [r6, #0]
 80093be:	6825      	ldr	r5, [r4, #0]
 80093c0:	6961      	ldr	r1, [r4, #20]
 80093c2:	1d18      	adds	r0, r3, #4
 80093c4:	6030      	str	r0, [r6, #0]
 80093c6:	062e      	lsls	r6, r5, #24
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	d501      	bpl.n	80093d0 <_printf_i+0x1c0>
 80093cc:	6019      	str	r1, [r3, #0]
 80093ce:	e002      	b.n	80093d6 <_printf_i+0x1c6>
 80093d0:	0668      	lsls	r0, r5, #25
 80093d2:	d5fb      	bpl.n	80093cc <_printf_i+0x1bc>
 80093d4:	8019      	strh	r1, [r3, #0]
 80093d6:	2300      	movs	r3, #0
 80093d8:	6123      	str	r3, [r4, #16]
 80093da:	4616      	mov	r6, r2
 80093dc:	e7ba      	b.n	8009354 <_printf_i+0x144>
 80093de:	6833      	ldr	r3, [r6, #0]
 80093e0:	1d1a      	adds	r2, r3, #4
 80093e2:	6032      	str	r2, [r6, #0]
 80093e4:	681e      	ldr	r6, [r3, #0]
 80093e6:	6862      	ldr	r2, [r4, #4]
 80093e8:	2100      	movs	r1, #0
 80093ea:	4630      	mov	r0, r6
 80093ec:	f7f6 fee0 	bl	80001b0 <memchr>
 80093f0:	b108      	cbz	r0, 80093f6 <_printf_i+0x1e6>
 80093f2:	1b80      	subs	r0, r0, r6
 80093f4:	6060      	str	r0, [r4, #4]
 80093f6:	6863      	ldr	r3, [r4, #4]
 80093f8:	6123      	str	r3, [r4, #16]
 80093fa:	2300      	movs	r3, #0
 80093fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009400:	e7a8      	b.n	8009354 <_printf_i+0x144>
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	4632      	mov	r2, r6
 8009406:	4649      	mov	r1, r9
 8009408:	4640      	mov	r0, r8
 800940a:	47d0      	blx	sl
 800940c:	3001      	adds	r0, #1
 800940e:	d0ab      	beq.n	8009368 <_printf_i+0x158>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	079b      	lsls	r3, r3, #30
 8009414:	d413      	bmi.n	800943e <_printf_i+0x22e>
 8009416:	68e0      	ldr	r0, [r4, #12]
 8009418:	9b03      	ldr	r3, [sp, #12]
 800941a:	4298      	cmp	r0, r3
 800941c:	bfb8      	it	lt
 800941e:	4618      	movlt	r0, r3
 8009420:	e7a4      	b.n	800936c <_printf_i+0x15c>
 8009422:	2301      	movs	r3, #1
 8009424:	4632      	mov	r2, r6
 8009426:	4649      	mov	r1, r9
 8009428:	4640      	mov	r0, r8
 800942a:	47d0      	blx	sl
 800942c:	3001      	adds	r0, #1
 800942e:	d09b      	beq.n	8009368 <_printf_i+0x158>
 8009430:	3501      	adds	r5, #1
 8009432:	68e3      	ldr	r3, [r4, #12]
 8009434:	9903      	ldr	r1, [sp, #12]
 8009436:	1a5b      	subs	r3, r3, r1
 8009438:	42ab      	cmp	r3, r5
 800943a:	dcf2      	bgt.n	8009422 <_printf_i+0x212>
 800943c:	e7eb      	b.n	8009416 <_printf_i+0x206>
 800943e:	2500      	movs	r5, #0
 8009440:	f104 0619 	add.w	r6, r4, #25
 8009444:	e7f5      	b.n	8009432 <_printf_i+0x222>
 8009446:	bf00      	nop
 8009448:	08009fed 	.word	0x08009fed
 800944c:	08009ffe 	.word	0x08009ffe

08009450 <memmove>:
 8009450:	4288      	cmp	r0, r1
 8009452:	b510      	push	{r4, lr}
 8009454:	eb01 0402 	add.w	r4, r1, r2
 8009458:	d902      	bls.n	8009460 <memmove+0x10>
 800945a:	4284      	cmp	r4, r0
 800945c:	4623      	mov	r3, r4
 800945e:	d807      	bhi.n	8009470 <memmove+0x20>
 8009460:	1e43      	subs	r3, r0, #1
 8009462:	42a1      	cmp	r1, r4
 8009464:	d007      	beq.n	8009476 <memmove+0x26>
 8009466:	f811 2b01 	ldrb.w	r2, [r1], #1
 800946a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800946e:	e7f8      	b.n	8009462 <memmove+0x12>
 8009470:	4402      	add	r2, r0
 8009472:	4282      	cmp	r2, r0
 8009474:	d100      	bne.n	8009478 <memmove+0x28>
 8009476:	bd10      	pop	{r4, pc}
 8009478:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800947c:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8009480:	e7f7      	b.n	8009472 <memmove+0x22>
	...

08009484 <_sbrk_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	4d06      	ldr	r5, [pc, #24]	@ (80094a0 <_sbrk_r+0x1c>)
 8009488:	2300      	movs	r3, #0
 800948a:	4604      	mov	r4, r0
 800948c:	4608      	mov	r0, r1
 800948e:	602b      	str	r3, [r5, #0]
 8009490:	f7fc fac8 	bl	8005a24 <_sbrk>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d102      	bne.n	800949e <_sbrk_r+0x1a>
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	b103      	cbz	r3, 800949e <_sbrk_r+0x1a>
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	200072a4 	.word	0x200072a4

080094a4 <_realloc_r>:
 80094a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a8:	4607      	mov	r7, r0
 80094aa:	4614      	mov	r4, r2
 80094ac:	460d      	mov	r5, r1
 80094ae:	b921      	cbnz	r1, 80094ba <_realloc_r+0x16>
 80094b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094b4:	4611      	mov	r1, r2
 80094b6:	f7ff bc55 	b.w	8008d64 <_malloc_r>
 80094ba:	b92a      	cbnz	r2, 80094c8 <_realloc_r+0x24>
 80094bc:	f7ff fbe6 	bl	8008c8c <_free_r>
 80094c0:	4625      	mov	r5, r4
 80094c2:	4628      	mov	r0, r5
 80094c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c8:	f000 f81a 	bl	8009500 <_malloc_usable_size_r>
 80094cc:	4284      	cmp	r4, r0
 80094ce:	4606      	mov	r6, r0
 80094d0:	d802      	bhi.n	80094d8 <_realloc_r+0x34>
 80094d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094d6:	d8f4      	bhi.n	80094c2 <_realloc_r+0x1e>
 80094d8:	4621      	mov	r1, r4
 80094da:	4638      	mov	r0, r7
 80094dc:	f7ff fc42 	bl	8008d64 <_malloc_r>
 80094e0:	4680      	mov	r8, r0
 80094e2:	b908      	cbnz	r0, 80094e8 <_realloc_r+0x44>
 80094e4:	4645      	mov	r5, r8
 80094e6:	e7ec      	b.n	80094c2 <_realloc_r+0x1e>
 80094e8:	42b4      	cmp	r4, r6
 80094ea:	4622      	mov	r2, r4
 80094ec:	4629      	mov	r1, r5
 80094ee:	bf28      	it	cs
 80094f0:	4632      	movcs	r2, r6
 80094f2:	f7ff fbbd 	bl	8008c70 <memcpy>
 80094f6:	4629      	mov	r1, r5
 80094f8:	4638      	mov	r0, r7
 80094fa:	f7ff fbc7 	bl	8008c8c <_free_r>
 80094fe:	e7f1      	b.n	80094e4 <_realloc_r+0x40>

08009500 <_malloc_usable_size_r>:
 8009500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009504:	1f18      	subs	r0, r3, #4
 8009506:	2b00      	cmp	r3, #0
 8009508:	bfbc      	itt	lt
 800950a:	580b      	ldrlt	r3, [r1, r0]
 800950c:	18c0      	addlt	r0, r0, r3
 800950e:	4770      	bx	lr

08009510 <logf>:
 8009510:	b508      	push	{r3, lr}
 8009512:	ed2d 8b02 	vpush	{d8}
 8009516:	eeb0 8a40 	vmov.f32	s16, s0
 800951a:	f000 f82f 	bl	800957c <__ieee754_logf>
 800951e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009526:	d60f      	bvs.n	8009548 <logf+0x38>
 8009528:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800952c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009530:	dc0a      	bgt.n	8009548 <logf+0x38>
 8009532:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953a:	d108      	bne.n	800954e <logf+0x3e>
 800953c:	f7ff fb6c 	bl	8008c18 <__errno>
 8009540:	2322      	movs	r3, #34	@ 0x22
 8009542:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8009568 <logf+0x58>
 8009546:	6003      	str	r3, [r0, #0]
 8009548:	ecbd 8b02 	vpop	{d8}
 800954c:	bd08      	pop	{r3, pc}
 800954e:	f7ff fb63 	bl	8008c18 <__errno>
 8009552:	ecbd 8b02 	vpop	{d8}
 8009556:	4603      	mov	r3, r0
 8009558:	2221      	movs	r2, #33	@ 0x21
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	4803      	ldr	r0, [pc, #12]	@ (800956c <logf+0x5c>)
 800955e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009562:	f000 b805 	b.w	8009570 <nanf>
 8009566:	bf00      	nop
 8009568:	ff800000 	.word	0xff800000
 800956c:	08009b60 	.word	0x08009b60

08009570 <nanf>:
 8009570:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009578 <nanf+0x8>
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	7fc00000 	.word	0x7fc00000

0800957c <__ieee754_logf>:
 800957c:	ee10 2a10 	vmov	r2, s0
 8009580:	f032 4300 	bics.w	r3, r2, #2147483648	@ 0x80000000
 8009584:	d02f      	beq.n	80095e6 <__ieee754_logf+0x6a>
 8009586:	2a00      	cmp	r2, #0
 8009588:	4613      	mov	r3, r2
 800958a:	db33      	blt.n	80095f4 <__ieee754_logf+0x78>
 800958c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009590:	da40      	bge.n	8009614 <__ieee754_logf+0x98>
 8009592:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8009596:	db34      	blt.n	8009602 <__ieee754_logf+0x86>
 8009598:	f04f 0c00 	mov.w	ip, #0
 800959c:	4864      	ldr	r0, [pc, #400]	@ (8009730 <__ieee754_logf+0x1b4>)
 800959e:	f3c3 0116 	ubfx	r1, r3, #0, #23
 80095a2:	4408      	add	r0, r1
 80095a4:	f400 0200 	and.w	r2, r0, #8388608	@ 0x800000
 80095a8:	f082 527e 	eor.w	r2, r2, #1065353216	@ 0x3f800000
 80095ac:	430a      	orrs	r2, r1
 80095ae:	15db      	asrs	r3, r3, #23
 80095b0:	ee00 2a10 	vmov	s0, r2
 80095b4:	3b7f      	subs	r3, #127	@ 0x7f
 80095b6:	4a5f      	ldr	r2, [pc, #380]	@ (8009734 <__ieee754_logf+0x1b8>)
 80095b8:	4463      	add	r3, ip
 80095ba:	f101 0c0f 	add.w	ip, r1, #15
 80095be:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80095c2:	ea0c 0202 	and.w	r2, ip, r2
 80095c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80095ca:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 80095ce:	bb22      	cbnz	r2, 800961a <__ieee754_logf+0x9e>
 80095d0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80095d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d8:	d162      	bne.n	80096a0 <__ieee754_logf+0x124>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f040 8090 	bne.w	8009700 <__ieee754_logf+0x184>
 80095e0:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 8009738 <__ieee754_logf+0x1bc>
 80095e4:	4770      	bx	lr
 80095e6:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800973c <__ieee754_logf+0x1c0>
 80095ea:	eddf 7a53 	vldr	s15, [pc, #332]	@ 8009738 <__ieee754_logf+0x1bc>
 80095ee:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80095f2:	4770      	bx	lr
 80095f4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80095f8:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8009738 <__ieee754_logf+0x1bc>
 80095fc:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8009600:	4770      	bx	lr
 8009602:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8009740 <__ieee754_logf+0x1c4>
 8009606:	ee60 7a27 	vmul.f32	s15, s0, s15
 800960a:	f06f 0c18 	mvn.w	ip, #24
 800960e:	ee17 3a90 	vmov	r3, s15
 8009612:	e7c3      	b.n	800959c <__ieee754_logf+0x20>
 8009614:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009618:	4770      	bx	lr
 800961a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800961e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009622:	ee07 3a10 	vmov	s14, r3
 8009626:	ee80 4a27 	vdiv.f32	s8, s0, s15
 800962a:	4846      	ldr	r0, [pc, #280]	@ (8009744 <__ieee754_logf+0x1c8>)
 800962c:	f5c1 1257 	rsb	r2, r1, #3522560	@ 0x35c000
 8009630:	4408      	add	r0, r1
 8009632:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8009636:	4302      	orrs	r2, r0
 8009638:	2a00      	cmp	r2, #0
 800963a:	ed9f 3a43 	vldr	s6, [pc, #268]	@ 8009748 <__ieee754_logf+0x1cc>
 800963e:	eddf 4a43 	vldr	s9, [pc, #268]	@ 800974c <__ieee754_logf+0x1d0>
 8009642:	eddf 5a43 	vldr	s11, [pc, #268]	@ 8009750 <__ieee754_logf+0x1d4>
 8009646:	eddf 3a43 	vldr	s7, [pc, #268]	@ 8009754 <__ieee754_logf+0x1d8>
 800964a:	ed9f 5a43 	vldr	s10, [pc, #268]	@ 8009758 <__ieee754_logf+0x1dc>
 800964e:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800975c <__ieee754_logf+0x1e0>
 8009652:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8009760 <__ieee754_logf+0x1e4>
 8009656:	ee24 6a04 	vmul.f32	s12, s8, s8
 800965a:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 800965e:	ee26 7a06 	vmul.f32	s14, s12, s12
 8009662:	eee7 4a03 	vfma.f32	s9, s14, s6
 8009666:	eea7 5a23 	vfma.f32	s10, s14, s7
 800966a:	eee4 5a87 	vfma.f32	s11, s9, s14
 800966e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8009672:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009676:	ee67 7a86 	vmul.f32	s15, s15, s12
 800967a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800967e:	dd2a      	ble.n	80096d6 <__ieee754_logf+0x15a>
 8009680:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009684:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009688:	ee27 7a00 	vmul.f32	s14, s14, s0
 800968c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009690:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009694:	bb3b      	cbnz	r3, 80096e6 <__ieee754_logf+0x16a>
 8009696:	ee37 7a67 	vsub.f32	s14, s14, s15
 800969a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800969e:	4770      	bx	lr
 80096a0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8009764 <__ieee754_logf+0x1e8>
 80096a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80096a8:	eee0 7a47 	vfms.f32	s15, s0, s14
 80096ac:	ee20 7a00 	vmul.f32	s14, s0, s0
 80096b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d0f0      	beq.n	800969a <__ieee754_logf+0x11e>
 80096b8:	ee07 3a90 	vmov	s15, r3
 80096bc:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 8009768 <__ieee754_logf+0x1ec>
 80096c0:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800976c <__ieee754_logf+0x1f0>
 80096c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096c8:	eea7 7ac6 	vfms.f32	s14, s15, s12
 80096cc:	ee37 0a40 	vsub.f32	s0, s14, s0
 80096d0:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 80096d4:	4770      	bx	lr
 80096d6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80096da:	ee67 7a84 	vmul.f32	s15, s15, s8
 80096de:	b9e3      	cbnz	r3, 800971a <__ieee754_logf+0x19e>
 80096e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80096e4:	4770      	bx	lr
 80096e6:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 8009768 <__ieee754_logf+0x1ec>
 80096ea:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800976c <__ieee754_logf+0x1f0>
 80096ee:	eee2 7a86 	vfma.f32	s15, s5, s12
 80096f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80096f6:	ee37 0a40 	vsub.f32	s0, s14, s0
 80096fa:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 80096fe:	4770      	bx	lr
 8009700:	ee07 3a90 	vmov	s15, r3
 8009704:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8009768 <__ieee754_logf+0x1ec>
 8009708:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800976c <__ieee754_logf+0x1f0>
 800970c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009710:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009714:	eea7 0a87 	vfma.f32	s0, s15, s14
 8009718:	4770      	bx	lr
 800971a:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8009768 <__ieee754_logf+0x1ec>
 800971e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800976c <__ieee754_logf+0x1f0>
 8009722:	eee2 7ae6 	vfms.f32	s15, s5, s13
 8009726:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800972a:	ee92 0a87 	vfnms.f32	s0, s5, s14
 800972e:	4770      	bx	lr
 8009730:	004afb20 	.word	0x004afb20
 8009734:	007ffff0 	.word	0x007ffff0
 8009738:	00000000 	.word	0x00000000
 800973c:	cc000000 	.word	0xcc000000
 8009740:	4c000000 	.word	0x4c000000
 8009744:	ffcf5c30 	.word	0xffcf5c30
 8009748:	3e178897 	.word	0x3e178897
 800974c:	3e3a3325 	.word	0x3e3a3325
 8009750:	3e924925 	.word	0x3e924925
 8009754:	3e1cd04f 	.word	0x3e1cd04f
 8009758:	3e638e29 	.word	0x3e638e29
 800975c:	3f2aaaab 	.word	0x3f2aaaab
 8009760:	3ecccccd 	.word	0x3ecccccd
 8009764:	3eaaaaab 	.word	0x3eaaaaab
 8009768:	3717f7d1 	.word	0x3717f7d1
 800976c:	3f317180 	.word	0x3f317180

08009770 <__udivmoddi4>:
 8009770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009774:	9d08      	ldr	r5, [sp, #32]
 8009776:	460f      	mov	r7, r1
 8009778:	4604      	mov	r4, r0
 800977a:	468c      	mov	ip, r1
 800977c:	2b00      	cmp	r3, #0
 800977e:	d148      	bne.n	8009812 <__udivmoddi4+0xa2>
 8009780:	428a      	cmp	r2, r1
 8009782:	4616      	mov	r6, r2
 8009784:	d961      	bls.n	800984a <__udivmoddi4+0xda>
 8009786:	fab2 f382 	clz	r3, r2
 800978a:	b14b      	cbz	r3, 80097a0 <__udivmoddi4+0x30>
 800978c:	f1c3 0220 	rsb	r2, r3, #32
 8009790:	fa01 fc03 	lsl.w	ip, r1, r3
 8009794:	fa20 f202 	lsr.w	r2, r0, r2
 8009798:	409e      	lsls	r6, r3
 800979a:	ea42 0c0c 	orr.w	ip, r2, ip
 800979e:	409c      	lsls	r4, r3
 80097a0:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80097a4:	b2b7      	uxth	r7, r6
 80097a6:	fbbc f1fe 	udiv	r1, ip, lr
 80097aa:	0c22      	lsrs	r2, r4, #16
 80097ac:	fb0e cc11 	mls	ip, lr, r1, ip
 80097b0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80097b4:	fb01 f007 	mul.w	r0, r1, r7
 80097b8:	4290      	cmp	r0, r2
 80097ba:	d909      	bls.n	80097d0 <__udivmoddi4+0x60>
 80097bc:	18b2      	adds	r2, r6, r2
 80097be:	f101 3cff 	add.w	ip, r1, #4294967295
 80097c2:	f080 80ee 	bcs.w	80099a2 <__udivmoddi4+0x232>
 80097c6:	4290      	cmp	r0, r2
 80097c8:	f240 80eb 	bls.w	80099a2 <__udivmoddi4+0x232>
 80097cc:	3902      	subs	r1, #2
 80097ce:	4432      	add	r2, r6
 80097d0:	1a12      	subs	r2, r2, r0
 80097d2:	b2a4      	uxth	r4, r4
 80097d4:	fbb2 f0fe 	udiv	r0, r2, lr
 80097d8:	fb0e 2210 	mls	r2, lr, r0, r2
 80097dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80097e0:	fb00 f707 	mul.w	r7, r0, r7
 80097e4:	42a7      	cmp	r7, r4
 80097e6:	d909      	bls.n	80097fc <__udivmoddi4+0x8c>
 80097e8:	1934      	adds	r4, r6, r4
 80097ea:	f100 32ff 	add.w	r2, r0, #4294967295
 80097ee:	f080 80da 	bcs.w	80099a6 <__udivmoddi4+0x236>
 80097f2:	42a7      	cmp	r7, r4
 80097f4:	f240 80d7 	bls.w	80099a6 <__udivmoddi4+0x236>
 80097f8:	4434      	add	r4, r6
 80097fa:	3802      	subs	r0, #2
 80097fc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8009800:	1be4      	subs	r4, r4, r7
 8009802:	2100      	movs	r1, #0
 8009804:	b11d      	cbz	r5, 800980e <__udivmoddi4+0x9e>
 8009806:	40dc      	lsrs	r4, r3
 8009808:	2300      	movs	r3, #0
 800980a:	e9c5 4300 	strd	r4, r3, [r5]
 800980e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009812:	428b      	cmp	r3, r1
 8009814:	d906      	bls.n	8009824 <__udivmoddi4+0xb4>
 8009816:	b10d      	cbz	r5, 800981c <__udivmoddi4+0xac>
 8009818:	e9c5 0100 	strd	r0, r1, [r5]
 800981c:	2100      	movs	r1, #0
 800981e:	4608      	mov	r0, r1
 8009820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009824:	fab3 f183 	clz	r1, r3
 8009828:	2900      	cmp	r1, #0
 800982a:	d148      	bne.n	80098be <__udivmoddi4+0x14e>
 800982c:	42bb      	cmp	r3, r7
 800982e:	d302      	bcc.n	8009836 <__udivmoddi4+0xc6>
 8009830:	4282      	cmp	r2, r0
 8009832:	f200 8107 	bhi.w	8009a44 <__udivmoddi4+0x2d4>
 8009836:	1a84      	subs	r4, r0, r2
 8009838:	eb67 0203 	sbc.w	r2, r7, r3
 800983c:	2001      	movs	r0, #1
 800983e:	4694      	mov	ip, r2
 8009840:	2d00      	cmp	r5, #0
 8009842:	d0e4      	beq.n	800980e <__udivmoddi4+0x9e>
 8009844:	e9c5 4c00 	strd	r4, ip, [r5]
 8009848:	e7e1      	b.n	800980e <__udivmoddi4+0x9e>
 800984a:	2a00      	cmp	r2, #0
 800984c:	f000 8092 	beq.w	8009974 <__udivmoddi4+0x204>
 8009850:	fab2 f382 	clz	r3, r2
 8009854:	2b00      	cmp	r3, #0
 8009856:	f040 80a8 	bne.w	80099aa <__udivmoddi4+0x23a>
 800985a:	1a8a      	subs	r2, r1, r2
 800985c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8009860:	fa1f fc86 	uxth.w	ip, r6
 8009864:	2101      	movs	r1, #1
 8009866:	0c20      	lsrs	r0, r4, #16
 8009868:	fbb2 f7fe 	udiv	r7, r2, lr
 800986c:	fb0e 2217 	mls	r2, lr, r7, r2
 8009870:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8009874:	fb0c f007 	mul.w	r0, ip, r7
 8009878:	4290      	cmp	r0, r2
 800987a:	d907      	bls.n	800988c <__udivmoddi4+0x11c>
 800987c:	18b2      	adds	r2, r6, r2
 800987e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009882:	d202      	bcs.n	800988a <__udivmoddi4+0x11a>
 8009884:	4290      	cmp	r0, r2
 8009886:	f200 80e2 	bhi.w	8009a4e <__udivmoddi4+0x2de>
 800988a:	4647      	mov	r7, r8
 800988c:	1a12      	subs	r2, r2, r0
 800988e:	b2a4      	uxth	r4, r4
 8009890:	fbb2 f0fe 	udiv	r0, r2, lr
 8009894:	fb0e 2210 	mls	r2, lr, r0, r2
 8009898:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800989c:	fb0c fc00 	mul.w	ip, ip, r0
 80098a0:	45a4      	cmp	ip, r4
 80098a2:	d907      	bls.n	80098b4 <__udivmoddi4+0x144>
 80098a4:	1934      	adds	r4, r6, r4
 80098a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80098aa:	d202      	bcs.n	80098b2 <__udivmoddi4+0x142>
 80098ac:	45a4      	cmp	ip, r4
 80098ae:	f200 80cb 	bhi.w	8009a48 <__udivmoddi4+0x2d8>
 80098b2:	4610      	mov	r0, r2
 80098b4:	eba4 040c 	sub.w	r4, r4, ip
 80098b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80098bc:	e7a2      	b.n	8009804 <__udivmoddi4+0x94>
 80098be:	f1c1 0620 	rsb	r6, r1, #32
 80098c2:	408b      	lsls	r3, r1
 80098c4:	fa22 fc06 	lsr.w	ip, r2, r6
 80098c8:	ea4c 0c03 	orr.w	ip, ip, r3
 80098cc:	fa07 f401 	lsl.w	r4, r7, r1
 80098d0:	fa20 f306 	lsr.w	r3, r0, r6
 80098d4:	40f7      	lsrs	r7, r6
 80098d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80098da:	4323      	orrs	r3, r4
 80098dc:	fa00 f801 	lsl.w	r8, r0, r1
 80098e0:	fa1f fe8c 	uxth.w	lr, ip
 80098e4:	fbb7 f0f9 	udiv	r0, r7, r9
 80098e8:	0c1c      	lsrs	r4, r3, #16
 80098ea:	fb09 7710 	mls	r7, r9, r0, r7
 80098ee:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80098f2:	fb00 f70e 	mul.w	r7, r0, lr
 80098f6:	42a7      	cmp	r7, r4
 80098f8:	fa02 f201 	lsl.w	r2, r2, r1
 80098fc:	d90a      	bls.n	8009914 <__udivmoddi4+0x1a4>
 80098fe:	eb1c 0404 	adds.w	r4, ip, r4
 8009902:	f100 3aff 	add.w	sl, r0, #4294967295
 8009906:	f080 809b 	bcs.w	8009a40 <__udivmoddi4+0x2d0>
 800990a:	42a7      	cmp	r7, r4
 800990c:	f240 8098 	bls.w	8009a40 <__udivmoddi4+0x2d0>
 8009910:	3802      	subs	r0, #2
 8009912:	4464      	add	r4, ip
 8009914:	1be4      	subs	r4, r4, r7
 8009916:	b29f      	uxth	r7, r3
 8009918:	fbb4 f3f9 	udiv	r3, r4, r9
 800991c:	fb09 4413 	mls	r4, r9, r3, r4
 8009920:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8009924:	fb03 fe0e 	mul.w	lr, r3, lr
 8009928:	45a6      	cmp	lr, r4
 800992a:	d909      	bls.n	8009940 <__udivmoddi4+0x1d0>
 800992c:	eb1c 0404 	adds.w	r4, ip, r4
 8009930:	f103 37ff 	add.w	r7, r3, #4294967295
 8009934:	f080 8082 	bcs.w	8009a3c <__udivmoddi4+0x2cc>
 8009938:	45a6      	cmp	lr, r4
 800993a:	d97f      	bls.n	8009a3c <__udivmoddi4+0x2cc>
 800993c:	3b02      	subs	r3, #2
 800993e:	4464      	add	r4, ip
 8009940:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009944:	eba4 040e 	sub.w	r4, r4, lr
 8009948:	fba0 e702 	umull	lr, r7, r0, r2
 800994c:	42bc      	cmp	r4, r7
 800994e:	4673      	mov	r3, lr
 8009950:	46b9      	mov	r9, r7
 8009952:	d363      	bcc.n	8009a1c <__udivmoddi4+0x2ac>
 8009954:	d060      	beq.n	8009a18 <__udivmoddi4+0x2a8>
 8009956:	b15d      	cbz	r5, 8009970 <__udivmoddi4+0x200>
 8009958:	ebb8 0203 	subs.w	r2, r8, r3
 800995c:	eb64 0409 	sbc.w	r4, r4, r9
 8009960:	fa04 f606 	lsl.w	r6, r4, r6
 8009964:	fa22 f301 	lsr.w	r3, r2, r1
 8009968:	431e      	orrs	r6, r3
 800996a:	40cc      	lsrs	r4, r1
 800996c:	e9c5 6400 	strd	r6, r4, [r5]
 8009970:	2100      	movs	r1, #0
 8009972:	e74c      	b.n	800980e <__udivmoddi4+0x9e>
 8009974:	0862      	lsrs	r2, r4, #1
 8009976:	0848      	lsrs	r0, r1, #1
 8009978:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 800997c:	0c0b      	lsrs	r3, r1, #16
 800997e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009982:	b28a      	uxth	r2, r1
 8009984:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009988:	fbb3 f1f6 	udiv	r1, r3, r6
 800998c:	07e4      	lsls	r4, r4, #31
 800998e:	46b4      	mov	ip, r6
 8009990:	4637      	mov	r7, r6
 8009992:	46b6      	mov	lr, r6
 8009994:	231f      	movs	r3, #31
 8009996:	fbb0 f0f6 	udiv	r0, r0, r6
 800999a:	1bd2      	subs	r2, r2, r7
 800999c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099a0:	e761      	b.n	8009866 <__udivmoddi4+0xf6>
 80099a2:	4661      	mov	r1, ip
 80099a4:	e714      	b.n	80097d0 <__udivmoddi4+0x60>
 80099a6:	4610      	mov	r0, r2
 80099a8:	e728      	b.n	80097fc <__udivmoddi4+0x8c>
 80099aa:	f1c3 0120 	rsb	r1, r3, #32
 80099ae:	fa20 f201 	lsr.w	r2, r0, r1
 80099b2:	409e      	lsls	r6, r3
 80099b4:	fa27 f101 	lsr.w	r1, r7, r1
 80099b8:	409f      	lsls	r7, r3
 80099ba:	433a      	orrs	r2, r7
 80099bc:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80099c0:	fa1f fc86 	uxth.w	ip, r6
 80099c4:	fbb1 f7fe 	udiv	r7, r1, lr
 80099c8:	fb0e 1017 	mls	r0, lr, r7, r1
 80099cc:	0c11      	lsrs	r1, r2, #16
 80099ce:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099d2:	fb07 f80c 	mul.w	r8, r7, ip
 80099d6:	4588      	cmp	r8, r1
 80099d8:	fa04 f403 	lsl.w	r4, r4, r3
 80099dc:	d93a      	bls.n	8009a54 <__udivmoddi4+0x2e4>
 80099de:	1871      	adds	r1, r6, r1
 80099e0:	f107 30ff 	add.w	r0, r7, #4294967295
 80099e4:	d201      	bcs.n	80099ea <__udivmoddi4+0x27a>
 80099e6:	4588      	cmp	r8, r1
 80099e8:	d81f      	bhi.n	8009a2a <__udivmoddi4+0x2ba>
 80099ea:	eba1 0108 	sub.w	r1, r1, r8
 80099ee:	fbb1 f8fe 	udiv	r8, r1, lr
 80099f2:	fb08 f70c 	mul.w	r7, r8, ip
 80099f6:	fb0e 1118 	mls	r1, lr, r8, r1
 80099fa:	b292      	uxth	r2, r2
 80099fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009a00:	42ba      	cmp	r2, r7
 8009a02:	d22f      	bcs.n	8009a64 <__udivmoddi4+0x2f4>
 8009a04:	18b2      	adds	r2, r6, r2
 8009a06:	f108 31ff 	add.w	r1, r8, #4294967295
 8009a0a:	d2c6      	bcs.n	800999a <__udivmoddi4+0x22a>
 8009a0c:	42ba      	cmp	r2, r7
 8009a0e:	d2c4      	bcs.n	800999a <__udivmoddi4+0x22a>
 8009a10:	f1a8 0102 	sub.w	r1, r8, #2
 8009a14:	4432      	add	r2, r6
 8009a16:	e7c0      	b.n	800999a <__udivmoddi4+0x22a>
 8009a18:	45f0      	cmp	r8, lr
 8009a1a:	d29c      	bcs.n	8009956 <__udivmoddi4+0x1e6>
 8009a1c:	ebbe 0302 	subs.w	r3, lr, r2
 8009a20:	eb67 070c 	sbc.w	r7, r7, ip
 8009a24:	3801      	subs	r0, #1
 8009a26:	46b9      	mov	r9, r7
 8009a28:	e795      	b.n	8009956 <__udivmoddi4+0x1e6>
 8009a2a:	eba6 0808 	sub.w	r8, r6, r8
 8009a2e:	4441      	add	r1, r8
 8009a30:	1eb8      	subs	r0, r7, #2
 8009a32:	fbb1 f8fe 	udiv	r8, r1, lr
 8009a36:	fb08 f70c 	mul.w	r7, r8, ip
 8009a3a:	e7dc      	b.n	80099f6 <__udivmoddi4+0x286>
 8009a3c:	463b      	mov	r3, r7
 8009a3e:	e77f      	b.n	8009940 <__udivmoddi4+0x1d0>
 8009a40:	4650      	mov	r0, sl
 8009a42:	e767      	b.n	8009914 <__udivmoddi4+0x1a4>
 8009a44:	4608      	mov	r0, r1
 8009a46:	e6fb      	b.n	8009840 <__udivmoddi4+0xd0>
 8009a48:	4434      	add	r4, r6
 8009a4a:	3802      	subs	r0, #2
 8009a4c:	e732      	b.n	80098b4 <__udivmoddi4+0x144>
 8009a4e:	3f02      	subs	r7, #2
 8009a50:	4432      	add	r2, r6
 8009a52:	e71b      	b.n	800988c <__udivmoddi4+0x11c>
 8009a54:	eba1 0108 	sub.w	r1, r1, r8
 8009a58:	4638      	mov	r0, r7
 8009a5a:	fbb1 f8fe 	udiv	r8, r1, lr
 8009a5e:	fb08 f70c 	mul.w	r7, r8, ip
 8009a62:	e7c8      	b.n	80099f6 <__udivmoddi4+0x286>
 8009a64:	4641      	mov	r1, r8
 8009a66:	e798      	b.n	800999a <__udivmoddi4+0x22a>

08009a68 <_init>:
 8009a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6a:	bf00      	nop
 8009a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a6e:	bc08      	pop	{r3}
 8009a70:	469e      	mov	lr, r3
 8009a72:	4770      	bx	lr

08009a74 <_fini>:
 8009a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a76:	bf00      	nop
 8009a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a7a:	bc08      	pop	{r3}
 8009a7c:	469e      	mov	lr, r3
 8009a7e:	4770      	bx	lr
