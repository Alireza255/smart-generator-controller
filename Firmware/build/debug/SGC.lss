
build/debug/SGC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015c4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001758  08001758  00002758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001768  08001768  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001768  08001768  00002768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001770  08001770  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001770  08001770  00002770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001774  08001774  00002774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001778  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08001784  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08001784  000030ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba71  00000000  00000000  00003075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d75  00000000  00000000  0000eae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00006662  00000000  00000000  0001085b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a28  00000000  00000000  00016ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007f7  00000000  00000000  000178e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a484  00000000  00000000  000180df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000039ec  00000000  00000000  00022563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000018a8  00000000  00000000  00025f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000182  00000000  00000000  000277f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__aeabi_uldivmod>:
 8000194:	b953      	cbnz	r3, 80001ac <__aeabi_uldivmod+0x18>
 8000196:	b94a      	cbnz	r2, 80001ac <__aeabi_uldivmod+0x18>
 8000198:	2900      	cmp	r1, #0
 800019a:	bf08      	it	eq
 800019c:	2800      	cmpeq	r0, #0
 800019e:	bf1c      	itt	ne
 80001a0:	f04f 31ff 	movne.w	r1, #4294967295
 80001a4:	f04f 30ff 	movne.w	r0, #4294967295
 80001a8:	f000 b80c 	b.w	80001c4 <__aeabi_idiv0>
 80001ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b4:	f001 f948 	bl	8001448 <__udivmoddi4>
 80001b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c0:	b004      	add	sp, #16
 80001c2:	4770      	bx	lr

080001c4 <__aeabi_idiv0>:
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08001740 	.word	0x08001740

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08001740 	.word	0x08001740

08000208 <controller_time_start>:

TIM_HandleTypeDef *timer = NULL;

void controller_time_start(TIM_HandleTypeDef *htim)
{
    if (htim == NULL)
 8000208:	b178      	cbz	r0, 800022a <controller_time_start+0x22>
{
 800020a:	b510      	push	{r4, lr}
        /**
         * @todo throw an error
         */
        return;
    }
    timer = htim;
 800020c:	4c07      	ldr	r4, [pc, #28]	@ (800022c <controller_time_start+0x24>)
 800020e:	6020      	str	r0, [r4, #0]
    /**
     * This assumes that sys clock is the same as timer clock
     */
    timer->Instance->PSC = HAL_RCC_GetSysClockFreq() / 1000000UL;
 8000210:	f000 fce2 	bl	8000bd8 <HAL_RCC_GetSysClockFreq>
 8000214:	4603      	mov	r3, r0
 8000216:	6820      	ldr	r0, [r4, #0]
 8000218:	6801      	ldr	r1, [r0, #0]
 800021a:	4a05      	ldr	r2, [pc, #20]	@ (8000230 <controller_time_start+0x28>)
 800021c:	fba2 2303 	umull	r2, r3, r2, r3
 8000220:	0c9b      	lsrs	r3, r3, #18
 8000222:	628b      	str	r3, [r1, #40]	@ 0x28
    HAL_TIM_Base_Start(timer);
 8000224:	f000 fe0c 	bl	8000e40 <HAL_TIM_Base_Start>
}
 8000228:	bd10      	pop	{r4, pc}
 800022a:	4770      	bx	lr
 800022c:	20000028 	.word	0x20000028
 8000230:	431bde83 	.word	0x431bde83

08000234 <get_time_us>:


controller_time_us_t get_time_us(void)
{
    return timer->Instance->CNT;
 8000234:	4b02      	ldr	r3, [pc, #8]	@ (8000240 <get_time_us+0xc>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	20000028 	.word	0x20000028

08000244 <get_time_ms>:

controller_time_ms_t get_time_ms(void)
{
    return timer->Instance->CNT / 1000U;
 8000244:	4b04      	ldr	r3, [pc, #16]	@ (8000258 <get_time_ms+0x14>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800024c:	4b03      	ldr	r3, [pc, #12]	@ (800025c <get_time_ms+0x18>)
 800024e:	fba3 3000 	umull	r3, r0, r3, r0
}
 8000252:	0980      	lsrs	r0, r0, #6
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	20000028 	.word	0x20000028
 800025c:	10624dd3 	.word	0x10624dd3

08000260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000260:	b510      	push	{r4, lr}
 8000262:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000264:	a905      	add	r1, sp, #20
 8000266:	2400      	movs	r4, #0
 8000268:	9405      	str	r4, [sp, #20]
 800026a:	604c      	str	r4, [r1, #4]
 800026c:	608c      	str	r4, [r1, #8]
 800026e:	60cc      	str	r4, [r1, #12]
 8000270:	610c      	str	r4, [r1, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000272:	9401      	str	r4, [sp, #4]
 8000274:	4b1e      	ldr	r3, [pc, #120]	@ (80002f0 <MX_GPIO_Init+0x90>)
 8000276:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000278:	f042 0204 	orr.w	r2, r2, #4
 800027c:	631a      	str	r2, [r3, #48]	@ 0x30
 800027e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000280:	f002 0204 	and.w	r2, r2, #4
 8000284:	9201      	str	r2, [sp, #4]
 8000286:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000288:	9402      	str	r4, [sp, #8]
 800028a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800028c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000290:	631a      	str	r2, [r3, #48]	@ 0x30
 8000292:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000294:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000298:	9202      	str	r2, [sp, #8]
 800029a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029c:	9403      	str	r4, [sp, #12]
 800029e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002a0:	f042 0202 	orr.w	r2, r2, #2
 80002a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80002a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002a8:	f002 0202 	and.w	r2, r2, #2
 80002ac:	9203      	str	r2, [sp, #12]
 80002ae:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b0:	9404      	str	r4, [sp, #16]
 80002b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002b4:	f042 0201 	orr.w	r2, r2, #1
 80002b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80002ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002bc:	f003 0301 	and.w	r3, r3, #1
 80002c0:	9304      	str	r3, [sp, #16]
 80002c2:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80002c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002c8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80002ce:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002d0:	2302      	movs	r3, #2
 80002d2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d4:	4807      	ldr	r0, [pc, #28]	@ (80002f4 <MX_GPIO_Init+0x94>)
 80002d6:	f000 f975 	bl	80005c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002da:	4622      	mov	r2, r4
 80002dc:	4621      	mov	r1, r4
 80002de:	2028      	movs	r0, #40	@ 0x28
 80002e0:	f000 f948 	bl	8000574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002e4:	2028      	movs	r0, #40	@ 0x28
 80002e6:	f000 f955 	bl	8000594 <HAL_NVIC_EnableIRQ>

}
 80002ea:	b00a      	add	sp, #40	@ 0x28
 80002ec:	bd10      	pop	{r4, pc}
 80002ee:	bf00      	nop
 80002f0:	40023800 	.word	0x40023800
 80002f4:	40020400 	.word	0x40020400

080002f8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    if (GPIO_Pin == GPIO_PIN_12)
 80002f8:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80002fc:	d000      	beq.n	8000300 <HAL_GPIO_EXTI_Callback+0x8>
 80002fe:	4770      	bx	lr
{
 8000300:	b508      	push	{r3, lr}
    {
      trigger_tooth_handle();
 8000302:	f000 ffd1 	bl	80012a8 <trigger_tooth_handle>
    }
}
 8000306:	bd08      	pop	{r3, pc}

08000308 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000308:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800030a:	e7fe      	b.n	800030a <Error_Handler+0x2>

0800030c <SystemClock_Config>:
{
 800030c:	b510      	push	{r4, lr}
 800030e:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000310:	ac08      	add	r4, sp, #32
 8000312:	2230      	movs	r2, #48	@ 0x30
 8000314:	2100      	movs	r1, #0
 8000316:	4620      	mov	r0, r4
 8000318:	f001 f869 	bl	80013ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	2300      	movs	r3, #0
 800031e:	9303      	str	r3, [sp, #12]
 8000320:	9304      	str	r3, [sp, #16]
 8000322:	9305      	str	r3, [sp, #20]
 8000324:	9306      	str	r3, [sp, #24]
 8000326:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	4a20      	ldr	r2, [pc, #128]	@ (80003ac <SystemClock_Config+0xa0>)
 800032c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800032e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000332:	6411      	str	r1, [r2, #64]	@ 0x40
 8000334:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000336:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800033a:	9201      	str	r2, [sp, #4]
 800033c:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800033e:	9302      	str	r3, [sp, #8]
 8000340:	4a1b      	ldr	r2, [pc, #108]	@ (80003b0 <SystemClock_Config+0xa4>)
 8000342:	6813      	ldr	r3, [r2, #0]
 8000344:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000348:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800034c:	6013      	str	r3, [r2, #0]
 800034e:	6813      	ldr	r3, [r2, #0]
 8000350:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000354:	9302      	str	r3, [sp, #8]
 8000356:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000358:	2301      	movs	r3, #1
 800035a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000360:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000362:	2302      	movs	r3, #2
 8000364:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000366:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800036a:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800036c:	2219      	movs	r2, #25
 800036e:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000370:	22a8      	movs	r2, #168	@ 0xa8
 8000372:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000374:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000376:	2304      	movs	r3, #4
 8000378:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	4620      	mov	r0, r4
 800037c:	f000 fa30 	bl	80007e0 <HAL_RCC_OscConfig>
 8000380:	b978      	cbnz	r0, 80003a2 <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	230f      	movs	r3, #15
 8000384:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000386:	2102      	movs	r1, #2
 8000388:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000392:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000394:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000396:	a803      	add	r0, sp, #12
 8000398:	f000 fc72 	bl	8000c80 <HAL_RCC_ClockConfig>
 800039c:	b918      	cbnz	r0, 80003a6 <SystemClock_Config+0x9a>
}
 800039e:	b014      	add	sp, #80	@ 0x50
 80003a0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80003a2:	f7ff ffb1 	bl	8000308 <Error_Handler>
    Error_Handler();
 80003a6:	f7ff ffaf 	bl	8000308 <Error_Handler>
 80003aa:	bf00      	nop
 80003ac:	40023800 	.word	0x40023800
 80003b0:	40007000 	.word	0x40007000

080003b4 <main>:
{
 80003b4:	b508      	push	{r3, lr}
settings.trigger_filtering = TF_FILTERING_NONE;
 80003b6:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <main+0x40>)
 80003b8:	2400      	movs	r4, #0
 80003ba:	701c      	strb	r4, [r3, #0]
settings.trigger_full_teeth = 60;
 80003bc:	223c      	movs	r2, #60	@ 0x3c
 80003be:	709a      	strb	r2, [r3, #2]
settings.trigger_missing_teeth = 2;
 80003c0:	2202      	movs	r2, #2
 80003c2:	705a      	strb	r2, [r3, #1]
  HAL_Init();
 80003c4:	f000 f842 	bl	800044c <HAL_Init>
  SystemClock_Config();
 80003c8:	f7ff ffa0 	bl	800030c <SystemClock_Config>
  MX_GPIO_Init();
 80003cc:	f7ff ff48 	bl	8000260 <MX_GPIO_Init>
  MX_TIM5_Init();
 80003d0:	f000 fed4 	bl	800117c <MX_TIM5_Init>
  controller_time_start(&htim5);
 80003d4:	4808      	ldr	r0, [pc, #32]	@ (80003f8 <main+0x44>)
 80003d6:	f7ff ff17 	bl	8000208 <controller_time_start>
  trigger_set_filtering(TF_FILTERING_NONE);
 80003da:	4620      	mov	r0, r4
 80003dc:	f000 ff46 	bl	800126c <trigger_set_filtering>
  trigger_init();
 80003e0:	f000 ff4c 	bl	800127c <trigger_init>
    HAL_Delay(100);
 80003e4:	2064      	movs	r0, #100	@ 0x64
 80003e6:	f000 f85d 	bl	80004a4 <HAL_Delay>
    global_time = get_time_ms();
 80003ea:	f7ff ff2b 	bl	8000244 <get_time_ms>
 80003ee:	4b03      	ldr	r3, [pc, #12]	@ (80003fc <main+0x48>)
 80003f0:	6018      	str	r0, [r3, #0]
  while (1)
 80003f2:	e7f7      	b.n	80003e4 <main+0x30>
 80003f4:	2000002c 	.word	0x2000002c
 80003f8:	20000044 	.word	0x20000044
 80003fc:	2000003c 	.word	0x2000003c

08000400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000400:	b510      	push	{r4, lr}
 8000402:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000404:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <HAL_InitTick+0x40>)
 8000406:	781a      	ldrb	r2, [r3, #0]
 8000408:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800040c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000410:	4a0c      	ldr	r2, [pc, #48]	@ (8000444 <HAL_InitTick+0x44>)
 8000412:	6810      	ldr	r0, [r2, #0]
 8000414:	fbb0 f0f3 	udiv	r0, r0, r3
 8000418:	f000 f8c0 	bl	800059c <HAL_SYSTICK_Config>
 800041c:	b968      	cbnz	r0, 800043a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800041e:	2c0f      	cmp	r4, #15
 8000420:	d901      	bls.n	8000426 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000422:	2001      	movs	r0, #1
 8000424:	e00a      	b.n	800043c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000426:	2200      	movs	r2, #0
 8000428:	4621      	mov	r1, r4
 800042a:	f04f 30ff 	mov.w	r0, #4294967295
 800042e:	f000 f8a1 	bl	8000574 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000432:	4b05      	ldr	r3, [pc, #20]	@ (8000448 <HAL_InitTick+0x48>)
 8000434:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000436:	2000      	movs	r0, #0
 8000438:	e000      	b.n	800043c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800043a:	2001      	movs	r0, #1
}
 800043c:	bd10      	pop	{r4, pc}
 800043e:	bf00      	nop
 8000440:	20000000 	.word	0x20000000
 8000444:	20000008 	.word	0x20000008
 8000448:	20000004 	.word	0x20000004

0800044c <HAL_Init>:
{
 800044c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800044e:	4b0b      	ldr	r3, [pc, #44]	@ (800047c <HAL_Init+0x30>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000456:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800045e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000466:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000468:	2003      	movs	r0, #3
 800046a:	f000 f871 	bl	8000550 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800046e:	200f      	movs	r0, #15
 8000470:	f7ff ffc6 	bl	8000400 <HAL_InitTick>
  HAL_MspInit();
 8000474:	f000 f998 	bl	80007a8 <HAL_MspInit>
}
 8000478:	2000      	movs	r0, #0
 800047a:	bd08      	pop	{r3, pc}
 800047c:	40023c00 	.word	0x40023c00

08000480 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000480:	4a03      	ldr	r2, [pc, #12]	@ (8000490 <HAL_IncTick+0x10>)
 8000482:	6811      	ldr	r1, [r2, #0]
 8000484:	4b03      	ldr	r3, [pc, #12]	@ (8000494 <HAL_IncTick+0x14>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	440b      	add	r3, r1
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	20000040 	.word	0x20000040
 8000494:	20000000 	.word	0x20000000

08000498 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000498:	4b01      	ldr	r3, [pc, #4]	@ (80004a0 <HAL_GetTick+0x8>)
 800049a:	6818      	ldr	r0, [r3, #0]
}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	20000040 	.word	0x20000040

080004a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004a4:	b538      	push	{r3, r4, r5, lr}
 80004a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004a8:	f7ff fff6 	bl	8000498 <HAL_GetTick>
 80004ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004ae:	f1b4 3fff 	cmp.w	r4, #4294967295
 80004b2:	d002      	beq.n	80004ba <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80004b4:	4b04      	ldr	r3, [pc, #16]	@ (80004c8 <HAL_Delay+0x24>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80004ba:	f7ff ffed 	bl	8000498 <HAL_GetTick>
 80004be:	1b40      	subs	r0, r0, r5
 80004c0:	42a0      	cmp	r0, r4
 80004c2:	d3fa      	bcc.n	80004ba <HAL_Delay+0x16>
  {
  }
}
 80004c4:	bd38      	pop	{r3, r4, r5, pc}
 80004c6:	bf00      	nop
 80004c8:	20000000 	.word	0x20000000

080004cc <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80004cc:	2800      	cmp	r0, #0
 80004ce:	db07      	blt.n	80004e0 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004d0:	f000 021f 	and.w	r2, r0, #31
 80004d4:	0940      	lsrs	r0, r0, #5
 80004d6:	2301      	movs	r3, #1
 80004d8:	4093      	lsls	r3, r2
 80004da:	4a02      	ldr	r2, [pc, #8]	@ (80004e4 <__NVIC_EnableIRQ+0x18>)
 80004dc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	e000e100 	.word	0xe000e100

080004e8 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80004e8:	2800      	cmp	r0, #0
 80004ea:	db08      	blt.n	80004fe <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ec:	0109      	lsls	r1, r1, #4
 80004ee:	b2c9      	uxtb	r1, r1
 80004f0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80004f4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80004f8:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80004fc:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004fe:	f000 000f 	and.w	r0, r0, #15
 8000502:	0109      	lsls	r1, r1, #4
 8000504:	b2c9      	uxtb	r1, r1
 8000506:	4b01      	ldr	r3, [pc, #4]	@ (800050c <__NVIC_SetPriority+0x24>)
 8000508:	5419      	strb	r1, [r3, r0]
  }
}
 800050a:	4770      	bx	lr
 800050c:	e000ed14 	.word	0xe000ed14

08000510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000510:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000512:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000516:	f1c0 0c07 	rsb	ip, r0, #7
 800051a:	f1bc 0f04 	cmp.w	ip, #4
 800051e:	bf28      	it	cs
 8000520:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000524:	1d03      	adds	r3, r0, #4
 8000526:	2b06      	cmp	r3, #6
 8000528:	d90f      	bls.n	800054a <NVIC_EncodePriority+0x3a>
 800052a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800052c:	f04f 3eff 	mov.w	lr, #4294967295
 8000530:	fa0e f00c 	lsl.w	r0, lr, ip
 8000534:	ea21 0100 	bic.w	r1, r1, r0
 8000538:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800053a:	fa0e fe03 	lsl.w	lr, lr, r3
 800053e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000542:	ea41 0002 	orr.w	r0, r1, r2
 8000546:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800054a:	2300      	movs	r3, #0
 800054c:	e7ee      	b.n	800052c <NVIC_EncodePriority+0x1c>
	...

08000550 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000550:	4a07      	ldr	r2, [pc, #28]	@ (8000570 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000552:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000554:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000558:	041b      	lsls	r3, r3, #16
 800055a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800055c:	0200      	lsls	r0, r0, #8
 800055e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000562:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800056c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800056e:	4770      	bx	lr
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000574:	b510      	push	{r4, lr}
 8000576:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <HAL_NVIC_SetPriority+0x1c>)
 800057a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800057c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000580:	f7ff ffc6 	bl	8000510 <NVIC_EncodePriority>
 8000584:	4601      	mov	r1, r0
 8000586:	4620      	mov	r0, r4
 8000588:	f7ff ffae 	bl	80004e8 <__NVIC_SetPriority>
}
 800058c:	bd10      	pop	{r4, pc}
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000594:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000596:	f7ff ff99 	bl	80004cc <__NVIC_EnableIRQ>
}
 800059a:	bd08      	pop	{r3, pc}

0800059c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800059c:	3801      	subs	r0, #1
 800059e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80005a2:	d20b      	bcs.n	80005bc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80005a8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005aa:	4a05      	ldr	r2, [pc, #20]	@ (80005c0 <HAL_SYSTICK_Config+0x24>)
 80005ac:	21f0      	movs	r1, #240	@ 0xf0
 80005ae:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005b2:	2000      	movs	r0, #0
 80005b4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005b6:	2207      	movs	r2, #7
 80005b8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005ba:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005bc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	2b0f      	cmp	r3, #15
 80005c8:	f200 80d7 	bhi.w	800077a <HAL_GPIO_Init+0x1b6>
{
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	e065      	b.n	800069e <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80005d2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80005d4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80005d8:	2403      	movs	r4, #3
 80005da:	fa04 f40e 	lsl.w	r4, r4, lr
 80005de:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005e2:	68cc      	ldr	r4, [r1, #12]
 80005e4:	fa04 f40e 	lsl.w	r4, r4, lr
 80005e8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80005ea:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005ec:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005ee:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80005f2:	684a      	ldr	r2, [r1, #4]
 80005f4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80005f8:	409a      	lsls	r2, r3
 80005fa:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80005fc:	6042      	str	r2, [r0, #4]
 80005fe:	e05c      	b.n	80006ba <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000600:	08dc      	lsrs	r4, r3, #3
 8000602:	3408      	adds	r4, #8
 8000604:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000608:	f003 0507 	and.w	r5, r3, #7
 800060c:	00ad      	lsls	r5, r5, #2
 800060e:	f04f 0e0f 	mov.w	lr, #15
 8000612:	fa0e fe05 	lsl.w	lr, lr, r5
 8000616:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800061a:	690a      	ldr	r2, [r1, #16]
 800061c:	40aa      	lsls	r2, r5
 800061e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000622:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000626:	e05c      	b.n	80006e2 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000628:	2204      	movs	r2, #4
 800062a:	e000      	b.n	800062e <HAL_GPIO_Init+0x6a>
 800062c:	2200      	movs	r2, #0
 800062e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000632:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000634:	3402      	adds	r4, #2
 8000636:	4d51      	ldr	r5, [pc, #324]	@ (800077c <HAL_GPIO_Init+0x1b8>)
 8000638:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800063c:	4a50      	ldr	r2, [pc, #320]	@ (8000780 <HAL_GPIO_Init+0x1bc>)
 800063e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000640:	ea6f 020c 	mvn.w	r2, ip
 8000644:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000648:	684e      	ldr	r6, [r1, #4]
 800064a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800064e:	d001      	beq.n	8000654 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000650:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000654:	4c4a      	ldr	r4, [pc, #296]	@ (8000780 <HAL_GPIO_Init+0x1bc>)
 8000656:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000658:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800065a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800065e:	684e      	ldr	r6, [r1, #4]
 8000660:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000664:	d001      	beq.n	800066a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000666:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800066a:	4c45      	ldr	r4, [pc, #276]	@ (8000780 <HAL_GPIO_Init+0x1bc>)
 800066c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800066e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000670:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000674:	684e      	ldr	r6, [r1, #4]
 8000676:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800067a:	d001      	beq.n	8000680 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 800067c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000680:	4c3f      	ldr	r4, [pc, #252]	@ (8000780 <HAL_GPIO_Init+0x1bc>)
 8000682:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000684:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000686:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000688:	684d      	ldr	r5, [r1, #4]
 800068a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800068e:	d001      	beq.n	8000694 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000690:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000694:	4c3a      	ldr	r4, [pc, #232]	@ (8000780 <HAL_GPIO_Init+0x1bc>)
 8000696:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000698:	3301      	adds	r3, #1
 800069a:	2b0f      	cmp	r3, #15
 800069c:	d86b      	bhi.n	8000776 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 800069e:	2201      	movs	r2, #1
 80006a0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a2:	680c      	ldr	r4, [r1, #0]
 80006a4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80006a8:	ea32 0404 	bics.w	r4, r2, r4
 80006ac:	d1f4      	bne.n	8000698 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80006ae:	684c      	ldr	r4, [r1, #4]
 80006b0:	f004 0403 	and.w	r4, r4, #3
 80006b4:	3c01      	subs	r4, #1
 80006b6:	2c01      	cmp	r4, #1
 80006b8:	d98b      	bls.n	80005d2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80006ba:	684a      	ldr	r2, [r1, #4]
 80006bc:	f002 0203 	and.w	r2, r2, #3
 80006c0:	2a03      	cmp	r2, #3
 80006c2:	d009      	beq.n	80006d8 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80006c4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006c6:	005d      	lsls	r5, r3, #1
 80006c8:	2203      	movs	r2, #3
 80006ca:	40aa      	lsls	r2, r5
 80006cc:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006d0:	688a      	ldr	r2, [r1, #8]
 80006d2:	40aa      	lsls	r2, r5
 80006d4:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80006d6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006d8:	684a      	ldr	r2, [r1, #4]
 80006da:	f002 0203 	and.w	r2, r2, #3
 80006de:	2a02      	cmp	r2, #2
 80006e0:	d08e      	beq.n	8000600 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80006e2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006e4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006e8:	2203      	movs	r2, #3
 80006ea:	fa02 f20e 	lsl.w	r2, r2, lr
 80006ee:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006f2:	684a      	ldr	r2, [r1, #4]
 80006f4:	f002 0203 	and.w	r2, r2, #3
 80006f8:	fa02 f20e 	lsl.w	r2, r2, lr
 80006fc:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80006fe:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000700:	684a      	ldr	r2, [r1, #4]
 8000702:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000706:	d0c7      	beq.n	8000698 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000708:	2200      	movs	r2, #0
 800070a:	9201      	str	r2, [sp, #4]
 800070c:	4a1d      	ldr	r2, [pc, #116]	@ (8000784 <HAL_GPIO_Init+0x1c0>)
 800070e:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000710:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000714:	6454      	str	r4, [r2, #68]	@ 0x44
 8000716:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000718:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000720:	089c      	lsrs	r4, r3, #2
 8000722:	1ca5      	adds	r5, r4, #2
 8000724:	4a15      	ldr	r2, [pc, #84]	@ (800077c <HAL_GPIO_Init+0x1b8>)
 8000726:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800072a:	f003 0e03 	and.w	lr, r3, #3
 800072e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000732:	220f      	movs	r2, #15
 8000734:	fa02 f20e 	lsl.w	r2, r2, lr
 8000738:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800073c:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <HAL_GPIO_Init+0x1c4>)
 800073e:	4290      	cmp	r0, r2
 8000740:	f43f af74 	beq.w	800062c <HAL_GPIO_Init+0x68>
 8000744:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000748:	4290      	cmp	r0, r2
 800074a:	d00e      	beq.n	800076a <HAL_GPIO_Init+0x1a6>
 800074c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000750:	4290      	cmp	r0, r2
 8000752:	d00c      	beq.n	800076e <HAL_GPIO_Init+0x1aa>
 8000754:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000758:	4290      	cmp	r0, r2
 800075a:	d00a      	beq.n	8000772 <HAL_GPIO_Init+0x1ae>
 800075c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000760:	4290      	cmp	r0, r2
 8000762:	f43f af61 	beq.w	8000628 <HAL_GPIO_Init+0x64>
 8000766:	2207      	movs	r2, #7
 8000768:	e761      	b.n	800062e <HAL_GPIO_Init+0x6a>
 800076a:	2201      	movs	r2, #1
 800076c:	e75f      	b.n	800062e <HAL_GPIO_Init+0x6a>
 800076e:	2202      	movs	r2, #2
 8000770:	e75d      	b.n	800062e <HAL_GPIO_Init+0x6a>
 8000772:	2203      	movs	r2, #3
 8000774:	e75b      	b.n	800062e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000776:	b002      	add	sp, #8
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	4770      	bx	lr
 800077c:	40013800 	.word	0x40013800
 8000780:	40013c00 	.word	0x40013c00
 8000784:	40023800 	.word	0x40023800
 8000788:	40020000 	.word	0x40020000

0800078c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800078c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800078e:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4203      	tst	r3, r0
 8000794:	d100      	bne.n	8000798 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000796:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000798:	4b02      	ldr	r3, [pc, #8]	@ (80007a4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800079a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800079c:	f7ff fdac 	bl	80002f8 <HAL_GPIO_EXTI_Callback>
}
 80007a0:	e7f9      	b.n	8000796 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80007a2:	bf00      	nop
 80007a4:	40013c00 	.word	0x40013c00

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	2100      	movs	r1, #0
 80007ac:	9100      	str	r1, [sp, #0]
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <HAL_MspInit+0x34>)
 80007b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80007b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80007b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007ba:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80007be:	9200      	str	r2, [sp, #0]
 80007c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	9101      	str	r1, [sp, #4]
 80007c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007c6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80007ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80007cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	b002      	add	sp, #8
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80007e0:	2800      	cmp	r0, #0
 80007e2:	f000 81e0 	beq.w	8000ba6 <HAL_RCC_OscConfig+0x3c6>
{
 80007e6:	b570      	push	{r4, r5, r6, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007ec:	6803      	ldr	r3, [r0, #0]
 80007ee:	f013 0f01 	tst.w	r3, #1
 80007f2:	d03b      	beq.n	800086c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80007f4:	4b9f      	ldr	r3, [pc, #636]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	f003 030c 	and.w	r3, r3, #12
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	d02c      	beq.n	800085a <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000800:	4b9c      	ldr	r3, [pc, #624]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000808:	2b08      	cmp	r3, #8
 800080a:	d021      	beq.n	8000850 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800080c:	6863      	ldr	r3, [r4, #4]
 800080e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000812:	d04f      	beq.n	80008b4 <HAL_RCC_OscConfig+0xd4>
 8000814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000818:	d052      	beq.n	80008c0 <HAL_RCC_OscConfig+0xe0>
 800081a:	4b96      	ldr	r3, [pc, #600]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800082a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800082c:	6863      	ldr	r3, [r4, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d050      	beq.n	80008d4 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000832:	f7ff fe31 	bl	8000498 <HAL_GetTick>
 8000836:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000838:	4b8e      	ldr	r3, [pc, #568]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000840:	d114      	bne.n	800086c <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000842:	f7ff fe29 	bl	8000498 <HAL_GetTick>
 8000846:	1b40      	subs	r0, r0, r5
 8000848:	2864      	cmp	r0, #100	@ 0x64
 800084a:	d9f5      	bls.n	8000838 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800084c:	2003      	movs	r0, #3
 800084e:	e1b1      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000850:	4b88      	ldr	r3, [pc, #544]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000858:	d0d8      	beq.n	800080c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800085a:	4b86      	ldr	r3, [pc, #536]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000862:	d003      	beq.n	800086c <HAL_RCC_OscConfig+0x8c>
 8000864:	6863      	ldr	r3, [r4, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	f000 819f 	beq.w	8000baa <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800086c:	6823      	ldr	r3, [r4, #0]
 800086e:	f013 0f02 	tst.w	r3, #2
 8000872:	d054      	beq.n	800091e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000874:	4b7f      	ldr	r3, [pc, #508]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	f013 0f0c 	tst.w	r3, #12
 800087c:	d03e      	beq.n	80008fc <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800087e:	4b7d      	ldr	r3, [pc, #500]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000886:	2b08      	cmp	r3, #8
 8000888:	d033      	beq.n	80008f2 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800088a:	68e3      	ldr	r3, [r4, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d068      	beq.n	8000962 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000890:	4b79      	ldr	r3, [pc, #484]	@ (8000a78 <HAL_RCC_OscConfig+0x298>)
 8000892:	2201      	movs	r2, #1
 8000894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000896:	f7ff fdff 	bl	8000498 <HAL_GetTick>
 800089a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800089c:	4b75      	ldr	r3, [pc, #468]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f013 0f02 	tst.w	r3, #2
 80008a4:	d154      	bne.n	8000950 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008a6:	f7ff fdf7 	bl	8000498 <HAL_GetTick>
 80008aa:	1b40      	subs	r0, r0, r5
 80008ac:	2802      	cmp	r0, #2
 80008ae:	d9f5      	bls.n	800089c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80008b0:	2003      	movs	r0, #3
 80008b2:	e17f      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008b4:	4a6f      	ldr	r2, [pc, #444]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 80008b6:	6813      	ldr	r3, [r2, #0]
 80008b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008bc:	6013      	str	r3, [r2, #0]
 80008be:	e7b5      	b.n	800082c <HAL_RCC_OscConfig+0x4c>
 80008c0:	4b6c      	ldr	r3, [pc, #432]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	e7ab      	b.n	800082c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80008d4:	f7ff fde0 	bl	8000498 <HAL_GetTick>
 80008d8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008da:	4b66      	ldr	r3, [pc, #408]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80008e2:	d0c3      	beq.n	800086c <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008e4:	f7ff fdd8 	bl	8000498 <HAL_GetTick>
 80008e8:	1b40      	subs	r0, r0, r5
 80008ea:	2864      	cmp	r0, #100	@ 0x64
 80008ec:	d9f5      	bls.n	80008da <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80008ee:	2003      	movs	r0, #3
 80008f0:	e160      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008f2:	4b60      	ldr	r3, [pc, #384]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80008fa:	d1c6      	bne.n	800088a <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008fc:	4b5d      	ldr	r3, [pc, #372]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f013 0f02 	tst.w	r3, #2
 8000904:	d003      	beq.n	800090e <HAL_RCC_OscConfig+0x12e>
 8000906:	68e3      	ldr	r3, [r4, #12]
 8000908:	2b01      	cmp	r3, #1
 800090a:	f040 8150 	bne.w	8000bae <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800090e:	4a59      	ldr	r2, [pc, #356]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 8000910:	6813      	ldr	r3, [r2, #0]
 8000912:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000916:	6921      	ldr	r1, [r4, #16]
 8000918:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800091c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	f013 0f08 	tst.w	r3, #8
 8000924:	d042      	beq.n	80009ac <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000926:	6963      	ldr	r3, [r4, #20]
 8000928:	b36b      	cbz	r3, 8000986 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800092a:	4b53      	ldr	r3, [pc, #332]	@ (8000a78 <HAL_RCC_OscConfig+0x298>)
 800092c:	2201      	movs	r2, #1
 800092e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000932:	f7ff fdb1 	bl	8000498 <HAL_GetTick>
 8000936:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000938:	4b4e      	ldr	r3, [pc, #312]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 800093a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800093c:	f013 0f02 	tst.w	r3, #2
 8000940:	d134      	bne.n	80009ac <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000942:	f7ff fda9 	bl	8000498 <HAL_GetTick>
 8000946:	1b40      	subs	r0, r0, r5
 8000948:	2802      	cmp	r0, #2
 800094a:	d9f5      	bls.n	8000938 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800094c:	2003      	movs	r0, #3
 800094e:	e131      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000950:	4a48      	ldr	r2, [pc, #288]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 8000952:	6813      	ldr	r3, [r2, #0]
 8000954:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000958:	6921      	ldr	r1, [r4, #16]
 800095a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	e7dd      	b.n	800091e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000962:	4b45      	ldr	r3, [pc, #276]	@ (8000a78 <HAL_RCC_OscConfig+0x298>)
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000968:	f7ff fd96 	bl	8000498 <HAL_GetTick>
 800096c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800096e:	4b41      	ldr	r3, [pc, #260]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f013 0f02 	tst.w	r3, #2
 8000976:	d0d2      	beq.n	800091e <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000978:	f7ff fd8e 	bl	8000498 <HAL_GetTick>
 800097c:	1b40      	subs	r0, r0, r5
 800097e:	2802      	cmp	r0, #2
 8000980:	d9f5      	bls.n	800096e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000982:	2003      	movs	r0, #3
 8000984:	e116      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000986:	4b3c      	ldr	r3, [pc, #240]	@ (8000a78 <HAL_RCC_OscConfig+0x298>)
 8000988:	2200      	movs	r2, #0
 800098a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800098e:	f7ff fd83 	bl	8000498 <HAL_GetTick>
 8000992:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000994:	4b37      	ldr	r3, [pc, #220]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 8000996:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000998:	f013 0f02 	tst.w	r3, #2
 800099c:	d006      	beq.n	80009ac <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800099e:	f7ff fd7b 	bl	8000498 <HAL_GetTick>
 80009a2:	1b40      	subs	r0, r0, r5
 80009a4:	2802      	cmp	r0, #2
 80009a6:	d9f5      	bls.n	8000994 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80009a8:	2003      	movs	r0, #3
 80009aa:	e103      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	f013 0f04 	tst.w	r3, #4
 80009b2:	d077      	beq.n	8000aa4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80009bc:	d133      	bne.n	8000a26 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	9301      	str	r3, [sp, #4]
 80009c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 80009c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009c6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80009ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009d6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009d8:	4b28      	ldr	r3, [pc, #160]	@ (8000a7c <HAL_RCC_OscConfig+0x29c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80009e0:	d023      	beq.n	8000a2a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009e2:	68a3      	ldr	r3, [r4, #8]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d034      	beq.n	8000a52 <HAL_RCC_OscConfig+0x272>
 80009e8:	2b05      	cmp	r3, #5
 80009ea:	d038      	beq.n	8000a5e <HAL_RCC_OscConfig+0x27e>
 80009ec:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 80009ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80009f0:	f022 0201 	bic.w	r2, r2, #1
 80009f4:	671a      	str	r2, [r3, #112]	@ 0x70
 80009f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80009f8:	f022 0204 	bic.w	r2, r2, #4
 80009fc:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80009fe:	68a3      	ldr	r3, [r4, #8]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d03d      	beq.n	8000a80 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a04:	f7ff fd48 	bl	8000498 <HAL_GetTick>
 8000a08:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 8000a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000a0e:	f013 0f02 	tst.w	r3, #2
 8000a12:	d146      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a14:	f7ff fd40 	bl	8000498 <HAL_GetTick>
 8000a18:	1b80      	subs	r0, r0, r6
 8000a1a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000a1e:	4298      	cmp	r0, r3
 8000a20:	d9f3      	bls.n	8000a0a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8000a22:	2003      	movs	r0, #3
 8000a24:	e0c6      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8000a26:	2500      	movs	r5, #0
 8000a28:	e7d6      	b.n	80009d8 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a2a:	4a14      	ldr	r2, [pc, #80]	@ (8000a7c <HAL_RCC_OscConfig+0x29c>)
 8000a2c:	6813      	ldr	r3, [r2, #0]
 8000a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a32:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000a34:	f7ff fd30 	bl	8000498 <HAL_GetTick>
 8000a38:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <HAL_RCC_OscConfig+0x29c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000a42:	d1ce      	bne.n	80009e2 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a44:	f7ff fd28 	bl	8000498 <HAL_GetTick>
 8000a48:	1b80      	subs	r0, r0, r6
 8000a4a:	2802      	cmp	r0, #2
 8000a4c:	d9f5      	bls.n	8000a3a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8000a4e:	2003      	movs	r0, #3
 8000a50:	e0b0      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a52:	4a08      	ldr	r2, [pc, #32]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 8000a54:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8000a5c:	e7cf      	b.n	80009fe <HAL_RCC_OscConfig+0x21e>
 8000a5e:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <HAL_RCC_OscConfig+0x294>)
 8000a60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000a62:	f042 0204 	orr.w	r2, r2, #4
 8000a66:	671a      	str	r2, [r3, #112]	@ 0x70
 8000a68:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000a6a:	f042 0201 	orr.w	r2, r2, #1
 8000a6e:	671a      	str	r2, [r3, #112]	@ 0x70
 8000a70:	e7c5      	b.n	80009fe <HAL_RCC_OscConfig+0x21e>
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	42470000 	.word	0x42470000
 8000a7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a80:	f7ff fd0a 	bl	8000498 <HAL_GetTick>
 8000a84:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a86:	4b52      	ldr	r3, [pc, #328]	@ (8000bd0 <HAL_RCC_OscConfig+0x3f0>)
 8000a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000a8a:	f013 0f02 	tst.w	r3, #2
 8000a8e:	d008      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a90:	f7ff fd02 	bl	8000498 <HAL_GetTick>
 8000a94:	1b80      	subs	r0, r0, r6
 8000a96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000a9a:	4298      	cmp	r0, r3
 8000a9c:	d9f3      	bls.n	8000a86 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8000a9e:	2003      	movs	r0, #3
 8000aa0:	e088      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000aa2:	b9ed      	cbnz	r5, 8000ae0 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000aa4:	69a3      	ldr	r3, [r4, #24]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f000 8083 	beq.w	8000bb2 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000aac:	4a48      	ldr	r2, [pc, #288]	@ (8000bd0 <HAL_RCC_OscConfig+0x3f0>)
 8000aae:	6892      	ldr	r2, [r2, #8]
 8000ab0:	f002 020c 	and.w	r2, r2, #12
 8000ab4:	2a08      	cmp	r2, #8
 8000ab6:	d051      	beq.n	8000b5c <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d017      	beq.n	8000aec <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000abc:	4b45      	ldr	r3, [pc, #276]	@ (8000bd4 <HAL_RCC_OscConfig+0x3f4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac2:	f7ff fce9 	bl	8000498 <HAL_GetTick>
 8000ac6:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ac8:	4b41      	ldr	r3, [pc, #260]	@ (8000bd0 <HAL_RCC_OscConfig+0x3f0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000ad0:	d042      	beq.n	8000b58 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ad2:	f7ff fce1 	bl	8000498 <HAL_GetTick>
 8000ad6:	1b00      	subs	r0, r0, r4
 8000ad8:	2802      	cmp	r0, #2
 8000ada:	d9f5      	bls.n	8000ac8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000adc:	2003      	movs	r0, #3
 8000ade:	e069      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ae0:	4a3b      	ldr	r2, [pc, #236]	@ (8000bd0 <HAL_RCC_OscConfig+0x3f0>)
 8000ae2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000ae4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	e7db      	b.n	8000aa4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8000aec:	4b39      	ldr	r3, [pc, #228]	@ (8000bd4 <HAL_RCC_OscConfig+0x3f4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000af2:	f7ff fcd1 	bl	8000498 <HAL_GetTick>
 8000af6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000af8:	4b35      	ldr	r3, [pc, #212]	@ (8000bd0 <HAL_RCC_OscConfig+0x3f0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000b00:	d006      	beq.n	8000b10 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b02:	f7ff fcc9 	bl	8000498 <HAL_GetTick>
 8000b06:	1b40      	subs	r0, r0, r5
 8000b08:	2802      	cmp	r0, #2
 8000b0a:	d9f5      	bls.n	8000af8 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	e051      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b10:	69e3      	ldr	r3, [r4, #28]
 8000b12:	6a22      	ldr	r2, [r4, #32]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000b18:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b1c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000b1e:	0852      	lsrs	r2, r2, #1
 8000b20:	3a01      	subs	r2, #1
 8000b22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b26:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000b28:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b2c:	4a28      	ldr	r2, [pc, #160]	@ (8000bd0 <HAL_RCC_OscConfig+0x3f0>)
 8000b2e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b30:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <HAL_RCC_OscConfig+0x3f4>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000b36:	f7ff fcaf 	bl	8000498 <HAL_GetTick>
 8000b3a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b3c:	4b24      	ldr	r3, [pc, #144]	@ (8000bd0 <HAL_RCC_OscConfig+0x3f0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000b44:	d106      	bne.n	8000b54 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b46:	f7ff fca7 	bl	8000498 <HAL_GetTick>
 8000b4a:	1b00      	subs	r0, r0, r4
 8000b4c:	2802      	cmp	r0, #2
 8000b4e:	d9f5      	bls.n	8000b3c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8000b50:	2003      	movs	r0, #3
 8000b52:	e02f      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000b54:	2000      	movs	r0, #0
 8000b56:	e02d      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
 8000b58:	2000      	movs	r0, #0
 8000b5a:	e02b      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d02b      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <HAL_RCC_OscConfig+0x3f0>)
 8000b62:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b64:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8000b68:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000b6a:	4291      	cmp	r1, r2
 8000b6c:	d126      	bne.n	8000bbc <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000b6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000b72:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b74:	428a      	cmp	r2, r1
 8000b76:	d123      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000b78:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000b7a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8000b7e:	401a      	ands	r2, r3
 8000b80:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000b84:	d11e      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000b86:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000b8a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000b8c:	0852      	lsrs	r2, r2, #1
 8000b8e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000b90:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000b94:	d118      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000b96:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8000b9a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000b9c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000ba0:	d114      	bne.n	8000bcc <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	e006      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8000ba6:	2001      	movs	r0, #1
}
 8000ba8:	4770      	bx	lr
        return HAL_ERROR;
 8000baa:	2001      	movs	r0, #1
 8000bac:	e002      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8000bae:	2001      	movs	r0, #1
 8000bb0:	e000      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8000bb2:	2000      	movs	r0, #0
}
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000bb8:	2001      	movs	r0, #1
 8000bba:	e7fb      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	e7f9      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	e7f7      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	e7f5      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
 8000bc8:	2001      	movs	r0, #1
 8000bca:	e7f3      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
 8000bcc:	2001      	movs	r0, #1
 8000bce:	e7f1      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3d4>
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	42470000 	.word	0x42470000

08000bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000bd8:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bda:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	f003 030c 	and.w	r3, r3, #12
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	d041      	beq.n	8000c6a <HAL_RCC_GetSysClockFreq+0x92>
 8000be6:	2b08      	cmp	r3, #8
 8000be8:	d141      	bne.n	8000c6e <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bea:	4b22      	ldr	r3, [pc, #136]	@ (8000c74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000bf8:	d012      	beq.n	8000c20 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000bfc:	6859      	ldr	r1, [r3, #4]
 8000bfe:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c02:	481d      	ldr	r0, [pc, #116]	@ (8000c78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000c04:	2300      	movs	r3, #0
 8000c06:	fba1 0100 	umull	r0, r1, r1, r0
 8000c0a:	f7ff fac3 	bl	8000194 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8000c0e:	4b19      	ldr	r3, [pc, #100]	@ (8000c74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c16:	3301      	adds	r3, #1
 8000c18:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8000c1a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c1e:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c20:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000c22:	6858      	ldr	r0, [r3, #4]
 8000c24:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000c28:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000c2c:	ebbc 0c00 	subs.w	ip, ip, r0
 8000c30:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000c34:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000c38:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8000c3c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8000c40:	ebb1 010c 	subs.w	r1, r1, ip
 8000c44:	eb63 030e 	sbc.w	r3, r3, lr
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000c4e:	00c9      	lsls	r1, r1, #3
 8000c50:	eb11 0c00 	adds.w	ip, r1, r0
 8000c54:	f143 0300 	adc.w	r3, r3, #0
 8000c58:	0299      	lsls	r1, r3, #10
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8000c60:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8000c64:	f7ff fa96 	bl	8000194 <__aeabi_uldivmod>
 8000c68:	e7d1      	b.n	8000c0e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8000c6a:	4803      	ldr	r0, [pc, #12]	@ (8000c78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000c6c:	e7d7      	b.n	8000c1e <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c6e:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8000c70:	e7d5      	b.n	8000c1e <HAL_RCC_GetSysClockFreq+0x46>
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	017d7840 	.word	0x017d7840
 8000c7c:	00f42400 	.word	0x00f42400

08000c80 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000c80:	2800      	cmp	r0, #0
 8000c82:	f000 809b 	beq.w	8000dbc <HAL_RCC_ClockConfig+0x13c>
{
 8000c86:	b570      	push	{r4, r5, r6, lr}
 8000c88:	460d      	mov	r5, r1
 8000c8a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c8c:	4b4f      	ldr	r3, [pc, #316]	@ (8000dcc <HAL_RCC_ClockConfig+0x14c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d208      	bcs.n	8000caa <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c98:	b2cb      	uxtb	r3, r1
 8000c9a:	4a4c      	ldr	r2, [pc, #304]	@ (8000dcc <HAL_RCC_ClockConfig+0x14c>)
 8000c9c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c9e:	6813      	ldr	r3, [r2, #0]
 8000ca0:	f003 0307 	and.w	r3, r3, #7
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	f040 808b 	bne.w	8000dc0 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	f013 0f02 	tst.w	r3, #2
 8000cb0:	d017      	beq.n	8000ce2 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cb2:	f013 0f04 	tst.w	r3, #4
 8000cb6:	d004      	beq.n	8000cc2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cb8:	4a45      	ldr	r2, [pc, #276]	@ (8000dd0 <HAL_RCC_ClockConfig+0x150>)
 8000cba:	6893      	ldr	r3, [r2, #8]
 8000cbc:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000cc0:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc2:	6823      	ldr	r3, [r4, #0]
 8000cc4:	f013 0f08 	tst.w	r3, #8
 8000cc8:	d004      	beq.n	8000cd4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cca:	4a41      	ldr	r2, [pc, #260]	@ (8000dd0 <HAL_RCC_ClockConfig+0x150>)
 8000ccc:	6893      	ldr	r3, [r2, #8]
 8000cce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000cd2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cd4:	4a3e      	ldr	r2, [pc, #248]	@ (8000dd0 <HAL_RCC_ClockConfig+0x150>)
 8000cd6:	6893      	ldr	r3, [r2, #8]
 8000cd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000cdc:	68a1      	ldr	r1, [r4, #8]
 8000cde:	430b      	orrs	r3, r1
 8000ce0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	f013 0f01 	tst.w	r3, #1
 8000ce8:	d032      	beq.n	8000d50 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cea:	6863      	ldr	r3, [r4, #4]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d021      	beq.n	8000d34 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cf0:	1e9a      	subs	r2, r3, #2
 8000cf2:	2a01      	cmp	r2, #1
 8000cf4:	d925      	bls.n	8000d42 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf6:	4a36      	ldr	r2, [pc, #216]	@ (8000dd0 <HAL_RCC_ClockConfig+0x150>)
 8000cf8:	6812      	ldr	r2, [r2, #0]
 8000cfa:	f012 0f02 	tst.w	r2, #2
 8000cfe:	d061      	beq.n	8000dc4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d00:	4933      	ldr	r1, [pc, #204]	@ (8000dd0 <HAL_RCC_ClockConfig+0x150>)
 8000d02:	688a      	ldr	r2, [r1, #8]
 8000d04:	f022 0203 	bic.w	r2, r2, #3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000d0c:	f7ff fbc4 	bl	8000498 <HAL_GetTick>
 8000d10:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d12:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd0 <HAL_RCC_ClockConfig+0x150>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f003 030c 	and.w	r3, r3, #12
 8000d1a:	6862      	ldr	r2, [r4, #4]
 8000d1c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d20:	d016      	beq.n	8000d50 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d22:	f7ff fbb9 	bl	8000498 <HAL_GetTick>
 8000d26:	1b80      	subs	r0, r0, r6
 8000d28:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	d9f0      	bls.n	8000d12 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8000d30:	2003      	movs	r0, #3
 8000d32:	e042      	b.n	8000dba <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d34:	4a26      	ldr	r2, [pc, #152]	@ (8000dd0 <HAL_RCC_ClockConfig+0x150>)
 8000d36:	6812      	ldr	r2, [r2, #0]
 8000d38:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8000d3c:	d1e0      	bne.n	8000d00 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000d3e:	2001      	movs	r0, #1
 8000d40:	e03b      	b.n	8000dba <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d42:	4a23      	ldr	r2, [pc, #140]	@ (8000dd0 <HAL_RCC_ClockConfig+0x150>)
 8000d44:	6812      	ldr	r2, [r2, #0]
 8000d46:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8000d4a:	d1d9      	bne.n	8000d00 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	e034      	b.n	8000dba <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d50:	4b1e      	ldr	r3, [pc, #120]	@ (8000dcc <HAL_RCC_ClockConfig+0x14c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	42ab      	cmp	r3, r5
 8000d5a:	d907      	bls.n	8000d6c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d5c:	b2ea      	uxtb	r2, r5
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <HAL_RCC_ClockConfig+0x14c>)
 8000d60:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	42ab      	cmp	r3, r5
 8000d6a:	d12d      	bne.n	8000dc8 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	f013 0f04 	tst.w	r3, #4
 8000d72:	d006      	beq.n	8000d82 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d74:	4a16      	ldr	r2, [pc, #88]	@ (8000dd0 <HAL_RCC_ClockConfig+0x150>)
 8000d76:	6893      	ldr	r3, [r2, #8]
 8000d78:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8000d7c:	68e1      	ldr	r1, [r4, #12]
 8000d7e:	430b      	orrs	r3, r1
 8000d80:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	f013 0f08 	tst.w	r3, #8
 8000d88:	d007      	beq.n	8000d9a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d8a:	4a11      	ldr	r2, [pc, #68]	@ (8000dd0 <HAL_RCC_ClockConfig+0x150>)
 8000d8c:	6893      	ldr	r3, [r2, #8]
 8000d8e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8000d92:	6921      	ldr	r1, [r4, #16]
 8000d94:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d98:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d9a:	f7ff ff1d 	bl	8000bd8 <HAL_RCC_GetSysClockFreq>
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <HAL_RCC_ClockConfig+0x150>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000da6:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd4 <HAL_RCC_ClockConfig+0x154>)
 8000da8:	5cd3      	ldrb	r3, [r2, r3]
 8000daa:	40d8      	lsrs	r0, r3
 8000dac:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <HAL_RCC_ClockConfig+0x158>)
 8000dae:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000db0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <HAL_RCC_ClockConfig+0x15c>)
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	f7ff fb24 	bl	8000400 <HAL_InitTick>
  return HAL_OK;
 8000db8:	2000      	movs	r0, #0
}
 8000dba:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000dbc:	2001      	movs	r0, #1
}
 8000dbe:	4770      	bx	lr
      return HAL_ERROR;
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	e7fa      	b.n	8000dba <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	e7f8      	b.n	8000dba <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8000dc8:	2001      	movs	r0, #1
 8000dca:	e7f6      	b.n	8000dba <HAL_RCC_ClockConfig+0x13a>
 8000dcc:	40023c00 	.word	0x40023c00
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	08001758 	.word	0x08001758
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000004 	.word	0x20000004

08000de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000de0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000de2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000de4:	6a04      	ldr	r4, [r0, #32]
 8000de6:	f024 0401 	bic.w	r4, r4, #1
 8000dea:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000dec:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000dee:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000df2:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000df6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8000dfa:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000dfc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000dfe:	6203      	str	r3, [r0, #32]
}
 8000e00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000e06:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8000e08:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e0a:	6a04      	ldr	r4, [r0, #32]
 8000e0c:	f024 0410 	bic.w	r4, r4, #16
 8000e10:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e12:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000e14:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000e18:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000e1c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000e20:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000e24:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000e26:	6203      	str	r3, [r0, #32]
}
 8000e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8000e2e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8000e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000e34:	430b      	orrs	r3, r1
 8000e36:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000e3a:	6083      	str	r3, [r0, #8]
}
 8000e3c:	4770      	bx	lr
	...

08000e40 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8000e40:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d12a      	bne.n	8000e9e <HAL_TIM_Base_Start+0x5e>
  htim->State = HAL_TIM_STATE_BUSY;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000e4e:	6803      	ldr	r3, [r0, #0]
 8000e50:	4a15      	ldr	r2, [pc, #84]	@ (8000ea8 <HAL_TIM_Base_Start+0x68>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d018      	beq.n	8000e88 <HAL_TIM_Base_Start+0x48>
 8000e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e5a:	d015      	beq.n	8000e88 <HAL_TIM_Base_Start+0x48>
 8000e5c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d011      	beq.n	8000e88 <HAL_TIM_Base_Start+0x48>
 8000e64:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d00d      	beq.n	8000e88 <HAL_TIM_Base_Start+0x48>
 8000e6c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d009      	beq.n	8000e88 <HAL_TIM_Base_Start+0x48>
 8000e74:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d005      	beq.n	8000e88 <HAL_TIM_Base_Start+0x48>
    __HAL_TIM_ENABLE(htim);
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	f042 0201 	orr.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000e84:	2000      	movs	r0, #0
 8000e86:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000e8e:	2a06      	cmp	r2, #6
 8000e90:	d007      	beq.n	8000ea2 <HAL_TIM_Base_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	f042 0201 	orr.w	r2, r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	4770      	bx	lr
    return HAL_ERROR;
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	4770      	bx	lr
  return HAL_OK;
 8000ea2:	2000      	movs	r0, #0
}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40010000 	.word	0x40010000

08000eac <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8000eac:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000eae:	4a29      	ldr	r2, [pc, #164]	@ (8000f54 <TIM_Base_SetConfig+0xa8>)
 8000eb0:	4290      	cmp	r0, r2
 8000eb2:	d00e      	beq.n	8000ed2 <TIM_Base_SetConfig+0x26>
 8000eb4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8000eb8:	d00b      	beq.n	8000ed2 <TIM_Base_SetConfig+0x26>
 8000eba:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8000ebe:	4290      	cmp	r0, r2
 8000ec0:	d007      	beq.n	8000ed2 <TIM_Base_SetConfig+0x26>
 8000ec2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ec6:	4290      	cmp	r0, r2
 8000ec8:	d003      	beq.n	8000ed2 <TIM_Base_SetConfig+0x26>
 8000eca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ece:	4290      	cmp	r0, r2
 8000ed0:	d103      	bne.n	8000eda <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8000ed6:	684a      	ldr	r2, [r1, #4]
 8000ed8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000eda:	4a1e      	ldr	r2, [pc, #120]	@ (8000f54 <TIM_Base_SetConfig+0xa8>)
 8000edc:	4290      	cmp	r0, r2
 8000ede:	d01a      	beq.n	8000f16 <TIM_Base_SetConfig+0x6a>
 8000ee0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8000ee4:	d017      	beq.n	8000f16 <TIM_Base_SetConfig+0x6a>
 8000ee6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8000eea:	4290      	cmp	r0, r2
 8000eec:	d013      	beq.n	8000f16 <TIM_Base_SetConfig+0x6a>
 8000eee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ef2:	4290      	cmp	r0, r2
 8000ef4:	d00f      	beq.n	8000f16 <TIM_Base_SetConfig+0x6a>
 8000ef6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000efa:	4290      	cmp	r0, r2
 8000efc:	d00b      	beq.n	8000f16 <TIM_Base_SetConfig+0x6a>
 8000efe:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8000f02:	4290      	cmp	r0, r2
 8000f04:	d007      	beq.n	8000f16 <TIM_Base_SetConfig+0x6a>
 8000f06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f0a:	4290      	cmp	r0, r2
 8000f0c:	d003      	beq.n	8000f16 <TIM_Base_SetConfig+0x6a>
 8000f0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f12:	4290      	cmp	r0, r2
 8000f14:	d103      	bne.n	8000f1e <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f1a:	68ca      	ldr	r2, [r1, #12]
 8000f1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f22:	694a      	ldr	r2, [r1, #20]
 8000f24:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000f26:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f28:	688b      	ldr	r3, [r1, #8]
 8000f2a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8000f2c:	680b      	ldr	r3, [r1, #0]
 8000f2e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f30:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <TIM_Base_SetConfig+0xa8>)
 8000f32:	4298      	cmp	r0, r3
 8000f34:	d00a      	beq.n	8000f4c <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8000f36:	2301      	movs	r3, #1
 8000f38:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8000f3a:	6903      	ldr	r3, [r0, #16]
 8000f3c:	f013 0f01 	tst.w	r3, #1
 8000f40:	d003      	beq.n	8000f4a <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8000f42:	6903      	ldr	r3, [r0, #16]
 8000f44:	f023 0301 	bic.w	r3, r3, #1
 8000f48:	6103      	str	r3, [r0, #16]
}
 8000f4a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000f4c:	690b      	ldr	r3, [r1, #16]
 8000f4e:	6303      	str	r3, [r0, #48]	@ 0x30
 8000f50:	e7f1      	b.n	8000f36 <TIM_Base_SetConfig+0x8a>
 8000f52:	bf00      	nop
 8000f54:	40010000 	.word	0x40010000

08000f58 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8000f58:	b340      	cbz	r0, 8000fac <HAL_TIM_Base_Init+0x54>
{
 8000f5a:	b510      	push	{r4, lr}
 8000f5c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8000f5e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8000f62:	b1f3      	cbz	r3, 8000fa2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8000f64:	2302      	movs	r3, #2
 8000f66:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f6a:	4621      	mov	r1, r4
 8000f6c:	f851 0b04 	ldr.w	r0, [r1], #4
 8000f70:	f7ff ff9c 	bl	8000eac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000f74:	2301      	movs	r3, #1
 8000f76:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f7a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8000f7e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8000f82:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8000f86:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f8a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000f8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f92:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8000f96:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8000f9a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8000f9e:	2000      	movs	r0, #0
}
 8000fa0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8000fa2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000fa6:	f000 f91f 	bl	80011e8 <HAL_TIM_Base_MspInit>
 8000faa:	e7db      	b.n	8000f64 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8000fac:	2001      	movs	r0, #1
}
 8000fae:	4770      	bx	lr

08000fb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000fb0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8000fb2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fb4:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000fb8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000fc2:	6082      	str	r2, [r0, #8]
}
 8000fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000fca:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d078      	beq.n	80010c4 <HAL_TIM_ConfigClockSource+0xfa>
{
 8000fd2:	b510      	push	{r4, lr}
 8000fd4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000fe2:	6802      	ldr	r2, [r0, #0]
 8000fe4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fe6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000fea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000fee:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8000ff0:	680b      	ldr	r3, [r1, #0]
 8000ff2:	2b60      	cmp	r3, #96	@ 0x60
 8000ff4:	d04c      	beq.n	8001090 <HAL_TIM_ConfigClockSource+0xc6>
 8000ff6:	d823      	bhi.n	8001040 <HAL_TIM_ConfigClockSource+0x76>
 8000ff8:	2b40      	cmp	r3, #64	@ 0x40
 8000ffa:	d054      	beq.n	80010a6 <HAL_TIM_ConfigClockSource+0xdc>
 8000ffc:	d811      	bhi.n	8001022 <HAL_TIM_ConfigClockSource+0x58>
 8000ffe:	2b20      	cmp	r3, #32
 8001000:	d003      	beq.n	800100a <HAL_TIM_ConfigClockSource+0x40>
 8001002:	d80a      	bhi.n	800101a <HAL_TIM_ConfigClockSource+0x50>
 8001004:	b10b      	cbz	r3, 800100a <HAL_TIM_ConfigClockSource+0x40>
 8001006:	2b10      	cmp	r3, #16
 8001008:	d105      	bne.n	8001016 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800100a:	4619      	mov	r1, r3
 800100c:	6820      	ldr	r0, [r4, #0]
 800100e:	f7ff ff0e 	bl	8000e2e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001012:	2000      	movs	r0, #0
      break;
 8001014:	e028      	b.n	8001068 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001016:	2001      	movs	r0, #1
 8001018:	e026      	b.n	8001068 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800101a:	2b30      	cmp	r3, #48	@ 0x30
 800101c:	d0f5      	beq.n	800100a <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 800101e:	2001      	movs	r0, #1
 8001020:	e022      	b.n	8001068 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001022:	2b50      	cmp	r3, #80	@ 0x50
 8001024:	d10a      	bne.n	800103c <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001026:	68ca      	ldr	r2, [r1, #12]
 8001028:	6849      	ldr	r1, [r1, #4]
 800102a:	6800      	ldr	r0, [r0, #0]
 800102c:	f7ff fed8 	bl	8000de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001030:	2150      	movs	r1, #80	@ 0x50
 8001032:	6820      	ldr	r0, [r4, #0]
 8001034:	f7ff fefb 	bl	8000e2e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001038:	2000      	movs	r0, #0
      break;
 800103a:	e015      	b.n	8001068 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800103c:	2001      	movs	r0, #1
 800103e:	e013      	b.n	8001068 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001044:	d03a      	beq.n	80010bc <HAL_TIM_ConfigClockSource+0xf2>
 8001046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800104a:	d014      	beq.n	8001076 <HAL_TIM_ConfigClockSource+0xac>
 800104c:	2b70      	cmp	r3, #112	@ 0x70
 800104e:	d137      	bne.n	80010c0 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8001050:	68cb      	ldr	r3, [r1, #12]
 8001052:	684a      	ldr	r2, [r1, #4]
 8001054:	6889      	ldr	r1, [r1, #8]
 8001056:	6800      	ldr	r0, [r0, #0]
 8001058:	f7ff ffaa 	bl	8000fb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800105c:	6822      	ldr	r2, [r4, #0]
 800105e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001060:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001064:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001066:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001068:	2301      	movs	r3, #1
 800106a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800106e:	2300      	movs	r3, #0
 8001070:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001074:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8001076:	68cb      	ldr	r3, [r1, #12]
 8001078:	684a      	ldr	r2, [r1, #4]
 800107a:	6889      	ldr	r1, [r1, #8]
 800107c:	6800      	ldr	r0, [r0, #0]
 800107e:	f7ff ff97 	bl	8000fb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001082:	6822      	ldr	r2, [r4, #0]
 8001084:	6893      	ldr	r3, [r2, #8]
 8001086:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800108a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800108c:	2000      	movs	r0, #0
      break;
 800108e:	e7eb      	b.n	8001068 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001090:	68ca      	ldr	r2, [r1, #12]
 8001092:	6849      	ldr	r1, [r1, #4]
 8001094:	6800      	ldr	r0, [r0, #0]
 8001096:	f7ff feb6 	bl	8000e06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800109a:	2160      	movs	r1, #96	@ 0x60
 800109c:	6820      	ldr	r0, [r4, #0]
 800109e:	f7ff fec6 	bl	8000e2e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80010a2:	2000      	movs	r0, #0
      break;
 80010a4:	e7e0      	b.n	8001068 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80010a6:	68ca      	ldr	r2, [r1, #12]
 80010a8:	6849      	ldr	r1, [r1, #4]
 80010aa:	6800      	ldr	r0, [r0, #0]
 80010ac:	f7ff fe98 	bl	8000de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80010b0:	2140      	movs	r1, #64	@ 0x40
 80010b2:	6820      	ldr	r0, [r4, #0]
 80010b4:	f7ff febb 	bl	8000e2e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80010b8:	2000      	movs	r0, #0
      break;
 80010ba:	e7d5      	b.n	8001068 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80010bc:	2000      	movs	r0, #0
 80010be:	e7d3      	b.n	8001068 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80010c0:	2001      	movs	r0, #1
 80010c2:	e7d1      	b.n	8001068 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 80010c4:	2002      	movs	r0, #2
}
 80010c6:	4770      	bx	lr

080010c8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80010c8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80010cc:	2a01      	cmp	r2, #1
 80010ce:	d035      	beq.n	800113c <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 80010d0:	b410      	push	{r4}
 80010d2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80010d4:	2201      	movs	r2, #1
 80010d6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010da:	2202      	movs	r2, #2
 80010dc:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80010e0:	6802      	ldr	r2, [r0, #0]
 80010e2:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80010e4:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80010e6:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80010ea:	6808      	ldr	r0, [r1, #0]
 80010ec:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80010f0:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4812      	ldr	r0, [pc, #72]	@ (8001140 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80010f6:	4282      	cmp	r2, r0
 80010f8:	d012      	beq.n	8001120 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80010fa:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80010fe:	d00f      	beq.n	8001120 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001100:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8001104:	4282      	cmp	r2, r0
 8001106:	d00b      	beq.n	8001120 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001108:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800110c:	4282      	cmp	r2, r0
 800110e:	d007      	beq.n	8001120 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001110:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001114:	4282      	cmp	r2, r0
 8001116:	d003      	beq.n	8001120 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001118:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 800111c:	4282      	cmp	r2, r0
 800111e:	d104      	bne.n	800112a <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001120:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001124:	6849      	ldr	r1, [r1, #4]
 8001126:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001128:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800112a:	2201      	movs	r2, #1
 800112c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001130:	2000      	movs	r0, #0
 8001132:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8001136:	f85d 4b04 	ldr.w	r4, [sp], #4
 800113a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800113c:	2002      	movs	r0, #2
}
 800113e:	4770      	bx	lr
 8001140:	40010000 	.word	0x40010000

08001144 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001144:	e7fe      	b.n	8001144 <NMI_Handler>

08001146 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <HardFault_Handler>

08001148 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <MemManage_Handler>

0800114a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler>

0800114c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler>

0800114e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114e:	4770      	bx	lr

08001150 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	4770      	bx	lr

08001152 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001156:	f7ff f993 	bl	8000480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115a:	bd08      	pop	{r3, pc}

0800115c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800115c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800115e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001162:	f7ff fb13 	bl	800078c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001166:	bd08      	pop	{r3, pc}

08001168 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001168:	4a03      	ldr	r2, [pc, #12]	@ (8001178 <SystemInit+0x10>)
 800116a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800116e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001172:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800117c:	b500      	push	{lr}
 800117e:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001180:	2300      	movs	r3, #0
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	9303      	str	r3, [sp, #12]
 8001186:	9304      	str	r3, [sp, #16]
 8001188:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800118e:	4814      	ldr	r0, [pc, #80]	@ (80011e0 <MX_TIM5_Init+0x64>)
 8001190:	4a14      	ldr	r2, [pc, #80]	@ (80011e4 <MX_TIM5_Init+0x68>)
 8001192:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 0;
 8001194:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 4294967295;
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119e:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011a2:	f7ff fed9 	bl	8000f58 <HAL_TIM_Base_Init>
 80011a6:	b990      	cbnz	r0, 80011ce <MX_TIM5_Init+0x52>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ac:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011ae:	a902      	add	r1, sp, #8
 80011b0:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <MX_TIM5_Init+0x64>)
 80011b2:	f7ff ff0a 	bl	8000fca <HAL_TIM_ConfigClockSource>
 80011b6:	b968      	cbnz	r0, 80011d4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011bc:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011be:	4669      	mov	r1, sp
 80011c0:	4807      	ldr	r0, [pc, #28]	@ (80011e0 <MX_TIM5_Init+0x64>)
 80011c2:	f7ff ff81 	bl	80010c8 <HAL_TIMEx_MasterConfigSynchronization>
 80011c6:	b940      	cbnz	r0, 80011da <MX_TIM5_Init+0x5e>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80011c8:	b007      	add	sp, #28
 80011ca:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011ce:	f7ff f89b 	bl	8000308 <Error_Handler>
 80011d2:	e7e9      	b.n	80011a8 <MX_TIM5_Init+0x2c>
    Error_Handler();
 80011d4:	f7ff f898 	bl	8000308 <Error_Handler>
 80011d8:	e7ee      	b.n	80011b8 <MX_TIM5_Init+0x3c>
    Error_Handler();
 80011da:	f7ff f895 	bl	8000308 <Error_Handler>
}
 80011de:	e7f3      	b.n	80011c8 <MX_TIM5_Init+0x4c>
 80011e0:	20000044 	.word	0x20000044
 80011e4:	40000c00 	.word	0x40000c00

080011e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM5)
 80011e8:	6802      	ldr	r2, [r0, #0]
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <HAL_TIM_Base_MspInit+0x28>)
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d000      	beq.n	80011f2 <HAL_TIM_Base_MspInit+0xa>
 80011f0:	4770      	bx	lr
{
 80011f2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_TIM_Base_MspInit+0x2c>)
 80011fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011fc:	f042 0208 	orr.w	r2, r2, #8
 8001200:	641a      	str	r2, [r3, #64]	@ 0x40
 8001202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800120c:	b002      	add	sp, #8
 800120e:	4770      	bx	lr
 8001210:	40000c00 	.word	0x40000c00
 8001214:	40023800 	.word	0x40023800

08001218 <set_filtering>:
  set_filtering();
}

void set_filtering(void)
{
  switch (settings.trigger_filtering)
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <set_filtering+0x48>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b03      	cmp	r3, #3
 800121e:	d81a      	bhi.n	8001256 <set_filtering+0x3e>
 8001220:	e8df f003 	tbb	[pc, r3]
 8001224:	110c0602 	.word	0x110c0602
  {
    case TF_FILTERING_NONE:
        trigger_filter_time_us = 0;
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <set_filtering+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
        break;
 800122e:	4770      	bx	lr
    case TF_FILTERING_LITE:
        trigger_filter_time_us = current_tooth_gap_us / 4U; 
 8001230:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <set_filtering+0x50>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	4a0b      	ldr	r2, [pc, #44]	@ (8001264 <set_filtering+0x4c>)
 8001238:	6013      	str	r3, [r2, #0]
        break;
 800123a:	4770      	bx	lr
    case TF_FILTERING_MEDIUM:
        trigger_filter_time_us = current_tooth_gap_us / 1U;
 800123c:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <set_filtering+0x50>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <set_filtering+0x4c>)
 8001242:	601a      	str	r2, [r3, #0]
        break;
 8001244:	4770      	bx	lr
    case TF_FILTERING_AGGRESSIVE:
        trigger_filter_time_us = current_tooth_gap_us * 3 / 4;
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <set_filtering+0x50>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <set_filtering+0x4c>)
 8001252:	6013      	str	r3, [r2, #0]
        break;
 8001254:	4770      	bx	lr
    default:
        // Handle invalid filtering level
        trigger_filter_time_us = 0;
 8001256:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <set_filtering+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
        break;
  }
}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	2000002c 	.word	0x2000002c
 8001264:	200000a4 	.word	0x200000a4
 8001268:	20000094 	.word	0x20000094

0800126c <trigger_set_filtering>:
{
 800126c:	b508      	push	{r3, lr}
  settings.trigger_filtering = filtering_level;
 800126e:	4b02      	ldr	r3, [pc, #8]	@ (8001278 <trigger_set_filtering+0xc>)
 8001270:	7018      	strb	r0, [r3, #0]
  set_filtering();
 8001272:	f7ff ffd1 	bl	8001218 <set_filtering>
}
 8001276:	bd08      	pop	{r3, pc}
 8001278:	2000002c 	.word	0x2000002c

0800127c <trigger_init>:

void trigger_init(void)
{   
 800127c:	b538      	push	{r3, r4, r5, lr}
    trigger_status.sync_status = TS_NOT_SYNCED;
 800127e:	4d07      	ldr	r5, [pc, #28]	@ (800129c <trigger_init+0x20>)
 8001280:	2300      	movs	r3, #0
 8001282:	706b      	strb	r3, [r5, #1]
    trigger_set_filtering(settings.trigger_filtering);
 8001284:	4c06      	ldr	r4, [pc, #24]	@ (80012a0 <trigger_init+0x24>)
 8001286:	7820      	ldrb	r0, [r4, #0]
 8001288:	f7ff fff0 	bl	800126c <trigger_set_filtering>
    trigger_actual_teeth = settings.trigger_full_teeth - settings.trigger_missing_teeth;
 800128c:	78a3      	ldrb	r3, [r4, #2]
 800128e:	7862      	ldrb	r2, [r4, #1]
 8001290:	1a9b      	subs	r3, r3, r2
 8001292:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <trigger_init+0x28>)
 8001294:	7013      	strb	r3, [r2, #0]
    
    
    trigger_status.initialized = true;
 8001296:	2301      	movs	r3, #1
 8001298:	702b      	strb	r3, [r5, #0]
    
}
 800129a:	bd38      	pop	{r3, r4, r5, pc}
 800129c:	200000a8 	.word	0x200000a8
 80012a0:	2000002c 	.word	0x2000002c
 80012a4:	2000008c 	.word	0x2000008c

080012a8 <trigger_tooth_handle>:
void trigger_tooth_handle(void)
{
 80012a8:	b508      	push	{r3, lr}

  if (!trigger_status.initialized)
 80012aa:	4b33      	ldr	r3, [pc, #204]	@ (8001378 <trigger_tooth_handle+0xd0>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b903      	cbnz	r3, 80012b2 <trigger_tooth_handle+0xa>
  }
  
  tooth_time_us[2] = tooth_time_us[1];
  tooth_time_us[1] = tooth_time_us[0];

}
 80012b0:	bd08      	pop	{r3, pc}
  tooth_time_us[0] = get_time_us();
 80012b2:	f7fe ffbf 	bl	8000234 <get_time_us>
 80012b6:	4a31      	ldr	r2, [pc, #196]	@ (800137c <trigger_tooth_handle+0xd4>)
 80012b8:	6010      	str	r0, [r2, #0]
  current_tooth_gap_us = tooth_time_us[0] - tooth_time_us[1];
 80012ba:	6813      	ldr	r3, [r2, #0]
 80012bc:	6852      	ldr	r2, [r2, #4]
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001380 <trigger_tooth_handle+0xd8>)
 80012c2:	6013      	str	r3, [r2, #0]
  if (current_tooth_gap_us < trigger_filter_time_us) // Pulses should never be less than trigger_filter_time_us, so if they are it means a false trigger. (A 36-1 wheel at 8000rpm will have triggers approx. every 200uS)
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001384 <trigger_tooth_handle+0xdc>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d3f0      	bcc.n	80012b0 <trigger_tooth_handle+0x8>
  counted_tooth++; //Increment the tooth counter
 80012ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001388 <trigger_tooth_handle+0xe0>)
 80012d0:	8813      	ldrh	r3, [r2, #0]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	3301      	adds	r3, #1
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	8013      	strh	r3, [r2, #0]
  if (tooth_time_us[1] == 0 || tooth_time_us[2] == 0)
 80012da:	4b28      	ldr	r3, [pc, #160]	@ (800137c <trigger_tooth_handle+0xd4>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	b10b      	cbz	r3, 80012e4 <trigger_tooth_handle+0x3c>
 80012e0:	4b26      	ldr	r3, [pc, #152]	@ (800137c <trigger_tooth_handle+0xd4>)
 80012e2:	689b      	ldr	r3, [r3, #8]
  previous_tooth_gap = tooth_time_us[1] - tooth_time_us[2];
 80012e4:	4a25      	ldr	r2, [pc, #148]	@ (800137c <trigger_tooth_handle+0xd4>)
 80012e6:	6853      	ldr	r3, [r2, #4]
 80012e8:	6892      	ldr	r2, [r2, #8]
 80012ea:	1a9b      	subs	r3, r3, r2
  if (previous_tooth_gap < current_tooth_gap_us) 
 80012ec:	4a24      	ldr	r2, [pc, #144]	@ (8001380 <trigger_tooth_handle+0xd8>)
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d801      	bhi.n	80012f8 <trigger_tooth_handle+0x50>
    shorter_tooth_gap = current_tooth_gap_us;
 80012f4:	4b22      	ldr	r3, [pc, #136]	@ (8001380 <trigger_tooth_handle+0xd8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
  if(settings.trigger_missing_teeth == 1)
 80012f8:	4a24      	ldr	r2, [pc, #144]	@ (800138c <trigger_tooth_handle+0xe4>)
 80012fa:	7852      	ldrb	r2, [r2, #1]
 80012fc:	2a01      	cmp	r2, #1
 80012fe:	d027      	beq.n	8001350 <trigger_tooth_handle+0xa8>
      target_tooth_gap_us = shorter_tooth_gap * settings.trigger_missing_teeth;
 8001300:	fb03 f202 	mul.w	r2, r3, r2
 8001304:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <trigger_tooth_handle+0xe8>)
 8001306:	601a      	str	r2, [r3, #0]
  if ((current_tooth_gap_us > target_tooth_gap_us) || (counted_tooth > trigger_actual_teeth))
 8001308:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <trigger_tooth_handle+0xd8>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <trigger_tooth_handle+0xe8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d806      	bhi.n	8001322 <trigger_tooth_handle+0x7a>
 8001314:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <trigger_tooth_handle+0xec>)
 8001316:	781a      	ldrb	r2, [r3, #0]
 8001318:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <trigger_tooth_handle+0xe0>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	b29b      	uxth	r3, r3
 800131e:	429a      	cmp	r2, r3
 8001320:	d21c      	bcs.n	800135c <trigger_tooth_handle+0xb4>
    if (counted_tooth < trigger_actual_teeth)
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <trigger_tooth_handle+0xec>)
 8001324:	781a      	ldrb	r2, [r3, #0]
 8001326:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <trigger_tooth_handle+0xe0>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	429a      	cmp	r2, r3
 800132e:	d918      	bls.n	8001362 <trigger_tooth_handle+0xba>
      trigger_status.sync_status = TS_NOT_SYNCED;
 8001330:	4a11      	ldr	r2, [pc, #68]	@ (8001378 <trigger_tooth_handle+0xd0>)
 8001332:	2300      	movs	r3, #0
 8001334:	7053      	strb	r3, [r2, #1]
      trigger_status.cync_loss_counter++;
 8001336:	8851      	ldrh	r1, [r2, #2]
 8001338:	3101      	adds	r1, #1
 800133a:	8051      	strh	r1, [r2, #2]
      engine_parameters.total_revolutions = 0;
 800133c:	4a16      	ldr	r2, [pc, #88]	@ (8001398 <trigger_tooth_handle+0xf0>)
 800133e:	6013      	str	r3, [r2, #0]
      counted_tooth = 0;
 8001340:	4a11      	ldr	r2, [pc, #68]	@ (8001388 <trigger_tooth_handle+0xe0>)
 8001342:	8013      	strh	r3, [r2, #0]
  tooth_time_us[2] = tooth_time_us[1];
 8001344:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <trigger_tooth_handle+0xd4>)
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
  tooth_time_us[1] = tooth_time_us[0];
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	e7af      	b.n	80012b0 <trigger_tooth_handle+0x8>
    target_tooth_gap_us = (3 * shorter_tooth_gap) >> 1; 
 8001350:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001354:	085b      	lsrs	r3, r3, #1
 8001356:	4a0e      	ldr	r2, [pc, #56]	@ (8001390 <trigger_tooth_handle+0xe8>)
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e7d5      	b.n	8001308 <trigger_tooth_handle+0x60>
    set_filtering(); 
 800135c:	f7ff ff5c 	bl	8001218 <set_filtering>
 8001360:	e7f0      	b.n	8001344 <trigger_tooth_handle+0x9c>
      trigger_status.sync_status = TS_FULLY_SYNCED;
 8001362:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <trigger_tooth_handle+0xd0>)
 8001364:	2201      	movs	r2, #1
 8001366:	705a      	strb	r2, [r3, #1]
      engine_parameters.total_revolutions++;
 8001368:	4a0b      	ldr	r2, [pc, #44]	@ (8001398 <trigger_tooth_handle+0xf0>)
 800136a:	6813      	ldr	r3, [r2, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	6013      	str	r3, [r2, #0]
      counted_tooth = 0;
 8001370:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <trigger_tooth_handle+0xe0>)
 8001372:	2200      	movs	r2, #0
 8001374:	801a      	strh	r2, [r3, #0]
  if(is_missing_teeth == false)
 8001376:	e7e5      	b.n	8001344 <trigger_tooth_handle+0x9c>
 8001378:	200000a8 	.word	0x200000a8
 800137c:	20000098 	.word	0x20000098
 8001380:	20000094 	.word	0x20000094
 8001384:	200000a4 	.word	0x200000a4
 8001388:	2000008e 	.word	0x2000008e
 800138c:	2000002c 	.word	0x2000002c
 8001390:	20000090 	.word	0x20000090
 8001394:	2000008c 	.word	0x2000008c
 8001398:	20000030 	.word	0x20000030

0800139c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013a0:	f7ff fee2 	bl	8001168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a4:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013a6:	490d      	ldr	r1, [pc, #52]	@ (80013dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a8:	4a0d      	ldr	r2, [pc, #52]	@ (80013e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013bc:	4c0a      	ldr	r4, [pc, #40]	@ (80013e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ca:	f000 f819 	bl	8001400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ce:	f7fe fff1 	bl	80003b4 <main>
  bx  lr    
 80013d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013e0:	08001778 	.word	0x08001778
  ldr r2, =_sbss
 80013e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013e8:	200000ac 	.word	0x200000ac

080013ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC_IRQHandler>

080013ee <memset>:
 80013ee:	4402      	add	r2, r0
 80013f0:	4603      	mov	r3, r0
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d100      	bne.n	80013f8 <memset+0xa>
 80013f6:	4770      	bx	lr
 80013f8:	f803 1b01 	strb.w	r1, [r3], #1
 80013fc:	e7f9      	b.n	80013f2 <memset+0x4>
	...

08001400 <__libc_init_array>:
 8001400:	b570      	push	{r4, r5, r6, lr}
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <__libc_init_array+0x38>)
 8001404:	4d0d      	ldr	r5, [pc, #52]	@ (800143c <__libc_init_array+0x3c>)
 8001406:	1b5b      	subs	r3, r3, r5
 8001408:	109c      	asrs	r4, r3, #2
 800140a:	2600      	movs	r6, #0
 800140c:	42a6      	cmp	r6, r4
 800140e:	d109      	bne.n	8001424 <__libc_init_array+0x24>
 8001410:	f000 f996 	bl	8001740 <_init>
 8001414:	4d0a      	ldr	r5, [pc, #40]	@ (8001440 <__libc_init_array+0x40>)
 8001416:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <__libc_init_array+0x44>)
 8001418:	1b5b      	subs	r3, r3, r5
 800141a:	109c      	asrs	r4, r3, #2
 800141c:	2600      	movs	r6, #0
 800141e:	42a6      	cmp	r6, r4
 8001420:	d105      	bne.n	800142e <__libc_init_array+0x2e>
 8001422:	bd70      	pop	{r4, r5, r6, pc}
 8001424:	f855 3b04 	ldr.w	r3, [r5], #4
 8001428:	4798      	blx	r3
 800142a:	3601      	adds	r6, #1
 800142c:	e7ee      	b.n	800140c <__libc_init_array+0xc>
 800142e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001432:	4798      	blx	r3
 8001434:	3601      	adds	r6, #1
 8001436:	e7f2      	b.n	800141e <__libc_init_array+0x1e>
 8001438:	08001770 	.word	0x08001770
 800143c:	08001770 	.word	0x08001770
 8001440:	08001770 	.word	0x08001770
 8001444:	08001774 	.word	0x08001774

08001448 <__udivmoddi4>:
 8001448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800144c:	9d08      	ldr	r5, [sp, #32]
 800144e:	460f      	mov	r7, r1
 8001450:	4604      	mov	r4, r0
 8001452:	468c      	mov	ip, r1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d148      	bne.n	80014ea <__udivmoddi4+0xa2>
 8001458:	428a      	cmp	r2, r1
 800145a:	4616      	mov	r6, r2
 800145c:	d961      	bls.n	8001522 <__udivmoddi4+0xda>
 800145e:	fab2 f382 	clz	r3, r2
 8001462:	b14b      	cbz	r3, 8001478 <__udivmoddi4+0x30>
 8001464:	f1c3 0220 	rsb	r2, r3, #32
 8001468:	fa01 fc03 	lsl.w	ip, r1, r3
 800146c:	fa20 f202 	lsr.w	r2, r0, r2
 8001470:	409e      	lsls	r6, r3
 8001472:	ea42 0c0c 	orr.w	ip, r2, ip
 8001476:	409c      	lsls	r4, r3
 8001478:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800147c:	b2b7      	uxth	r7, r6
 800147e:	fbbc f1fe 	udiv	r1, ip, lr
 8001482:	0c22      	lsrs	r2, r4, #16
 8001484:	fb0e cc11 	mls	ip, lr, r1, ip
 8001488:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800148c:	fb01 f007 	mul.w	r0, r1, r7
 8001490:	4290      	cmp	r0, r2
 8001492:	d909      	bls.n	80014a8 <__udivmoddi4+0x60>
 8001494:	18b2      	adds	r2, r6, r2
 8001496:	f101 3cff 	add.w	ip, r1, #4294967295
 800149a:	f080 80ee 	bcs.w	800167a <__udivmoddi4+0x232>
 800149e:	4290      	cmp	r0, r2
 80014a0:	f240 80eb 	bls.w	800167a <__udivmoddi4+0x232>
 80014a4:	3902      	subs	r1, #2
 80014a6:	4432      	add	r2, r6
 80014a8:	1a12      	subs	r2, r2, r0
 80014aa:	b2a4      	uxth	r4, r4
 80014ac:	fbb2 f0fe 	udiv	r0, r2, lr
 80014b0:	fb0e 2210 	mls	r2, lr, r0, r2
 80014b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80014b8:	fb00 f707 	mul.w	r7, r0, r7
 80014bc:	42a7      	cmp	r7, r4
 80014be:	d909      	bls.n	80014d4 <__udivmoddi4+0x8c>
 80014c0:	1934      	adds	r4, r6, r4
 80014c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80014c6:	f080 80da 	bcs.w	800167e <__udivmoddi4+0x236>
 80014ca:	42a7      	cmp	r7, r4
 80014cc:	f240 80d7 	bls.w	800167e <__udivmoddi4+0x236>
 80014d0:	4434      	add	r4, r6
 80014d2:	3802      	subs	r0, #2
 80014d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80014d8:	1be4      	subs	r4, r4, r7
 80014da:	2100      	movs	r1, #0
 80014dc:	b11d      	cbz	r5, 80014e6 <__udivmoddi4+0x9e>
 80014de:	40dc      	lsrs	r4, r3
 80014e0:	2300      	movs	r3, #0
 80014e2:	e9c5 4300 	strd	r4, r3, [r5]
 80014e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014ea:	428b      	cmp	r3, r1
 80014ec:	d906      	bls.n	80014fc <__udivmoddi4+0xb4>
 80014ee:	b10d      	cbz	r5, 80014f4 <__udivmoddi4+0xac>
 80014f0:	e9c5 0100 	strd	r0, r1, [r5]
 80014f4:	2100      	movs	r1, #0
 80014f6:	4608      	mov	r0, r1
 80014f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014fc:	fab3 f183 	clz	r1, r3
 8001500:	2900      	cmp	r1, #0
 8001502:	d148      	bne.n	8001596 <__udivmoddi4+0x14e>
 8001504:	42bb      	cmp	r3, r7
 8001506:	d302      	bcc.n	800150e <__udivmoddi4+0xc6>
 8001508:	4282      	cmp	r2, r0
 800150a:	f200 8107 	bhi.w	800171c <__udivmoddi4+0x2d4>
 800150e:	1a84      	subs	r4, r0, r2
 8001510:	eb67 0203 	sbc.w	r2, r7, r3
 8001514:	2001      	movs	r0, #1
 8001516:	4694      	mov	ip, r2
 8001518:	2d00      	cmp	r5, #0
 800151a:	d0e4      	beq.n	80014e6 <__udivmoddi4+0x9e>
 800151c:	e9c5 4c00 	strd	r4, ip, [r5]
 8001520:	e7e1      	b.n	80014e6 <__udivmoddi4+0x9e>
 8001522:	2a00      	cmp	r2, #0
 8001524:	f000 8092 	beq.w	800164c <__udivmoddi4+0x204>
 8001528:	fab2 f382 	clz	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	f040 80a8 	bne.w	8001682 <__udivmoddi4+0x23a>
 8001532:	1a8a      	subs	r2, r1, r2
 8001534:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8001538:	fa1f fc86 	uxth.w	ip, r6
 800153c:	2101      	movs	r1, #1
 800153e:	0c20      	lsrs	r0, r4, #16
 8001540:	fbb2 f7fe 	udiv	r7, r2, lr
 8001544:	fb0e 2217 	mls	r2, lr, r7, r2
 8001548:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800154c:	fb0c f007 	mul.w	r0, ip, r7
 8001550:	4290      	cmp	r0, r2
 8001552:	d907      	bls.n	8001564 <__udivmoddi4+0x11c>
 8001554:	18b2      	adds	r2, r6, r2
 8001556:	f107 38ff 	add.w	r8, r7, #4294967295
 800155a:	d202      	bcs.n	8001562 <__udivmoddi4+0x11a>
 800155c:	4290      	cmp	r0, r2
 800155e:	f200 80e2 	bhi.w	8001726 <__udivmoddi4+0x2de>
 8001562:	4647      	mov	r7, r8
 8001564:	1a12      	subs	r2, r2, r0
 8001566:	b2a4      	uxth	r4, r4
 8001568:	fbb2 f0fe 	udiv	r0, r2, lr
 800156c:	fb0e 2210 	mls	r2, lr, r0, r2
 8001570:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001574:	fb0c fc00 	mul.w	ip, ip, r0
 8001578:	45a4      	cmp	ip, r4
 800157a:	d907      	bls.n	800158c <__udivmoddi4+0x144>
 800157c:	1934      	adds	r4, r6, r4
 800157e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001582:	d202      	bcs.n	800158a <__udivmoddi4+0x142>
 8001584:	45a4      	cmp	ip, r4
 8001586:	f200 80cb 	bhi.w	8001720 <__udivmoddi4+0x2d8>
 800158a:	4610      	mov	r0, r2
 800158c:	eba4 040c 	sub.w	r4, r4, ip
 8001590:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001594:	e7a2      	b.n	80014dc <__udivmoddi4+0x94>
 8001596:	f1c1 0620 	rsb	r6, r1, #32
 800159a:	408b      	lsls	r3, r1
 800159c:	fa22 fc06 	lsr.w	ip, r2, r6
 80015a0:	ea4c 0c03 	orr.w	ip, ip, r3
 80015a4:	fa07 f401 	lsl.w	r4, r7, r1
 80015a8:	fa20 f306 	lsr.w	r3, r0, r6
 80015ac:	40f7      	lsrs	r7, r6
 80015ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80015b2:	4323      	orrs	r3, r4
 80015b4:	fa00 f801 	lsl.w	r8, r0, r1
 80015b8:	fa1f fe8c 	uxth.w	lr, ip
 80015bc:	fbb7 f0f9 	udiv	r0, r7, r9
 80015c0:	0c1c      	lsrs	r4, r3, #16
 80015c2:	fb09 7710 	mls	r7, r9, r0, r7
 80015c6:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80015ca:	fb00 f70e 	mul.w	r7, r0, lr
 80015ce:	42a7      	cmp	r7, r4
 80015d0:	fa02 f201 	lsl.w	r2, r2, r1
 80015d4:	d90a      	bls.n	80015ec <__udivmoddi4+0x1a4>
 80015d6:	eb1c 0404 	adds.w	r4, ip, r4
 80015da:	f100 3aff 	add.w	sl, r0, #4294967295
 80015de:	f080 809b 	bcs.w	8001718 <__udivmoddi4+0x2d0>
 80015e2:	42a7      	cmp	r7, r4
 80015e4:	f240 8098 	bls.w	8001718 <__udivmoddi4+0x2d0>
 80015e8:	3802      	subs	r0, #2
 80015ea:	4464      	add	r4, ip
 80015ec:	1be4      	subs	r4, r4, r7
 80015ee:	b29f      	uxth	r7, r3
 80015f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80015f4:	fb09 4413 	mls	r4, r9, r3, r4
 80015f8:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 80015fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8001600:	45a6      	cmp	lr, r4
 8001602:	d909      	bls.n	8001618 <__udivmoddi4+0x1d0>
 8001604:	eb1c 0404 	adds.w	r4, ip, r4
 8001608:	f103 37ff 	add.w	r7, r3, #4294967295
 800160c:	f080 8082 	bcs.w	8001714 <__udivmoddi4+0x2cc>
 8001610:	45a6      	cmp	lr, r4
 8001612:	d97f      	bls.n	8001714 <__udivmoddi4+0x2cc>
 8001614:	3b02      	subs	r3, #2
 8001616:	4464      	add	r4, ip
 8001618:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800161c:	eba4 040e 	sub.w	r4, r4, lr
 8001620:	fba0 e702 	umull	lr, r7, r0, r2
 8001624:	42bc      	cmp	r4, r7
 8001626:	4673      	mov	r3, lr
 8001628:	46b9      	mov	r9, r7
 800162a:	d363      	bcc.n	80016f4 <__udivmoddi4+0x2ac>
 800162c:	d060      	beq.n	80016f0 <__udivmoddi4+0x2a8>
 800162e:	b15d      	cbz	r5, 8001648 <__udivmoddi4+0x200>
 8001630:	ebb8 0203 	subs.w	r2, r8, r3
 8001634:	eb64 0409 	sbc.w	r4, r4, r9
 8001638:	fa04 f606 	lsl.w	r6, r4, r6
 800163c:	fa22 f301 	lsr.w	r3, r2, r1
 8001640:	431e      	orrs	r6, r3
 8001642:	40cc      	lsrs	r4, r1
 8001644:	e9c5 6400 	strd	r6, r4, [r5]
 8001648:	2100      	movs	r1, #0
 800164a:	e74c      	b.n	80014e6 <__udivmoddi4+0x9e>
 800164c:	0862      	lsrs	r2, r4, #1
 800164e:	0848      	lsrs	r0, r1, #1
 8001650:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8001654:	0c0b      	lsrs	r3, r1, #16
 8001656:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800165a:	b28a      	uxth	r2, r1
 800165c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8001660:	fbb3 f1f6 	udiv	r1, r3, r6
 8001664:	07e4      	lsls	r4, r4, #31
 8001666:	46b4      	mov	ip, r6
 8001668:	4637      	mov	r7, r6
 800166a:	46b6      	mov	lr, r6
 800166c:	231f      	movs	r3, #31
 800166e:	fbb0 f0f6 	udiv	r0, r0, r6
 8001672:	1bd2      	subs	r2, r2, r7
 8001674:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001678:	e761      	b.n	800153e <__udivmoddi4+0xf6>
 800167a:	4661      	mov	r1, ip
 800167c:	e714      	b.n	80014a8 <__udivmoddi4+0x60>
 800167e:	4610      	mov	r0, r2
 8001680:	e728      	b.n	80014d4 <__udivmoddi4+0x8c>
 8001682:	f1c3 0120 	rsb	r1, r3, #32
 8001686:	fa20 f201 	lsr.w	r2, r0, r1
 800168a:	409e      	lsls	r6, r3
 800168c:	fa27 f101 	lsr.w	r1, r7, r1
 8001690:	409f      	lsls	r7, r3
 8001692:	433a      	orrs	r2, r7
 8001694:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8001698:	fa1f fc86 	uxth.w	ip, r6
 800169c:	fbb1 f7fe 	udiv	r7, r1, lr
 80016a0:	fb0e 1017 	mls	r0, lr, r7, r1
 80016a4:	0c11      	lsrs	r1, r2, #16
 80016a6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80016aa:	fb07 f80c 	mul.w	r8, r7, ip
 80016ae:	4588      	cmp	r8, r1
 80016b0:	fa04 f403 	lsl.w	r4, r4, r3
 80016b4:	d93a      	bls.n	800172c <__udivmoddi4+0x2e4>
 80016b6:	1871      	adds	r1, r6, r1
 80016b8:	f107 30ff 	add.w	r0, r7, #4294967295
 80016bc:	d201      	bcs.n	80016c2 <__udivmoddi4+0x27a>
 80016be:	4588      	cmp	r8, r1
 80016c0:	d81f      	bhi.n	8001702 <__udivmoddi4+0x2ba>
 80016c2:	eba1 0108 	sub.w	r1, r1, r8
 80016c6:	fbb1 f8fe 	udiv	r8, r1, lr
 80016ca:	fb08 f70c 	mul.w	r7, r8, ip
 80016ce:	fb0e 1118 	mls	r1, lr, r8, r1
 80016d2:	b292      	uxth	r2, r2
 80016d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80016d8:	42ba      	cmp	r2, r7
 80016da:	d22f      	bcs.n	800173c <__udivmoddi4+0x2f4>
 80016dc:	18b2      	adds	r2, r6, r2
 80016de:	f108 31ff 	add.w	r1, r8, #4294967295
 80016e2:	d2c6      	bcs.n	8001672 <__udivmoddi4+0x22a>
 80016e4:	42ba      	cmp	r2, r7
 80016e6:	d2c4      	bcs.n	8001672 <__udivmoddi4+0x22a>
 80016e8:	f1a8 0102 	sub.w	r1, r8, #2
 80016ec:	4432      	add	r2, r6
 80016ee:	e7c0      	b.n	8001672 <__udivmoddi4+0x22a>
 80016f0:	45f0      	cmp	r8, lr
 80016f2:	d29c      	bcs.n	800162e <__udivmoddi4+0x1e6>
 80016f4:	ebbe 0302 	subs.w	r3, lr, r2
 80016f8:	eb67 070c 	sbc.w	r7, r7, ip
 80016fc:	3801      	subs	r0, #1
 80016fe:	46b9      	mov	r9, r7
 8001700:	e795      	b.n	800162e <__udivmoddi4+0x1e6>
 8001702:	eba6 0808 	sub.w	r8, r6, r8
 8001706:	4441      	add	r1, r8
 8001708:	1eb8      	subs	r0, r7, #2
 800170a:	fbb1 f8fe 	udiv	r8, r1, lr
 800170e:	fb08 f70c 	mul.w	r7, r8, ip
 8001712:	e7dc      	b.n	80016ce <__udivmoddi4+0x286>
 8001714:	463b      	mov	r3, r7
 8001716:	e77f      	b.n	8001618 <__udivmoddi4+0x1d0>
 8001718:	4650      	mov	r0, sl
 800171a:	e767      	b.n	80015ec <__udivmoddi4+0x1a4>
 800171c:	4608      	mov	r0, r1
 800171e:	e6fb      	b.n	8001518 <__udivmoddi4+0xd0>
 8001720:	4434      	add	r4, r6
 8001722:	3802      	subs	r0, #2
 8001724:	e732      	b.n	800158c <__udivmoddi4+0x144>
 8001726:	3f02      	subs	r7, #2
 8001728:	4432      	add	r2, r6
 800172a:	e71b      	b.n	8001564 <__udivmoddi4+0x11c>
 800172c:	eba1 0108 	sub.w	r1, r1, r8
 8001730:	4638      	mov	r0, r7
 8001732:	fbb1 f8fe 	udiv	r8, r1, lr
 8001736:	fb08 f70c 	mul.w	r7, r8, ip
 800173a:	e7c8      	b.n	80016ce <__udivmoddi4+0x286>
 800173c:	4641      	mov	r1, r8
 800173e:	e798      	b.n	8001672 <__udivmoddi4+0x22a>

08001740 <_init>:
 8001740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001742:	bf00      	nop
 8001744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001746:	bc08      	pop	{r3}
 8001748:	469e      	mov	lr, r3
 800174a:	4770      	bx	lr

0800174c <_fini>:
 800174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174e:	bf00      	nop
 8001750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001752:	bc08      	pop	{r3}
 8001754:	469e      	mov	lr, r3
 8001756:	4770      	bx	lr
