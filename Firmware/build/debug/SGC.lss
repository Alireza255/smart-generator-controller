
build/debug/SGC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009978  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08009b18  08009b18  0000ab18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e10  08009e10  0000b194  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009e10  08009e10  0000ae10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e18  08009e18  0000b194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e18  08009e18  0000ae18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e1c  08009e1c  0000ae1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  08009e20  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063a0  20000194  08009fb4  0000b194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006534  08009fb4  0000b534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b194  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000b1c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003080f  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000755f  00000000  00000000  0003ba0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000150ac  00000000  00000000  00042f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e78  00000000  00000000  00058018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001822  00000000  00000000  00059e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000217c9  00000000  00000000  0005b6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a923  00000000  00000000  0007ce7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051a8  00000000  00000000  000877a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000001a1  00000000  00000000  0008c948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__aeabi_d2uiz>:
 80009ec:	004a      	lsls	r2, r1, #1
 80009ee:	d211      	bcs.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009f4:	d211      	bcs.n	8000a1a <__aeabi_d2uiz+0x2e>
 80009f6:	d50d      	bpl.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a00:	d40e      	bmi.n	8000a20 <__aeabi_d2uiz+0x34>
 8000a02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a1e:	d102      	bne.n	8000a26 <__aeabi_d2uiz+0x3a>
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	4770      	bx	lr
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	4770      	bx	lr

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b80c 	b.w	8000a5c <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f008 fedc 	bl	8009808 <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_idiv0>:
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__do_global_dtors_aux>:
 8000a60:	b510      	push	{r4, lr}
 8000a62:	4c05      	ldr	r4, [pc, #20]	@ (8000a78 <__do_global_dtors_aux+0x18>)
 8000a64:	7823      	ldrb	r3, [r4, #0]
 8000a66:	b933      	cbnz	r3, 8000a76 <__do_global_dtors_aux+0x16>
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <__do_global_dtors_aux+0x1c>)
 8000a6a:	b113      	cbz	r3, 8000a72 <__do_global_dtors_aux+0x12>
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <__do_global_dtors_aux+0x20>)
 8000a6e:	f3af 8000 	nop.w
 8000a72:	2301      	movs	r3, #1
 8000a74:	7023      	strb	r3, [r4, #0]
 8000a76:	bd10      	pop	{r4, pc}
 8000a78:	20000194 	.word	0x20000194
 8000a7c:	00000000 	.word	0x00000000
 8000a80:	08009b00 	.word	0x08009b00

08000a84 <frame_dummy>:
 8000a84:	b508      	push	{r3, lr}
 8000a86:	4b03      	ldr	r3, [pc, #12]	@ (8000a94 <frame_dummy+0x10>)
 8000a88:	b11b      	cbz	r3, 8000a92 <frame_dummy+0xe>
 8000a8a:	4903      	ldr	r1, [pc, #12]	@ (8000a98 <frame_dummy+0x14>)
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <frame_dummy+0x18>)
 8000a8e:	f3af 8000 	nop.w
 8000a92:	bd08      	pop	{r3, pc}
 8000a94:	00000000 	.word	0x00000000
 8000a98:	20000198 	.word	0x20000198
 8000a9c:	08009b00 	.word	0x08009b00

08000aa0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000aa0:	b500      	push	{lr}
 8000aa2:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	9301      	str	r3, [sp, #4]
 8000aaa:	9302      	str	r3, [sp, #8]
 8000aac:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aae:	4861      	ldr	r0, [pc, #388]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000ab0:	4a61      	ldr	r2, [pc, #388]	@ (8000c38 <MX_ADC1_Init+0x198>)
 8000ab2:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ab4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ab8:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aba:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000abc:	2201      	movs	r2, #1
 8000abe:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ac0:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ac2:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac8:	495c      	ldr	r1, [pc, #368]	@ (8000c3c <MX_ADC1_Init+0x19c>)
 8000aca:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000acc:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 13;
 8000ace:	210d      	movs	r1, #13
 8000ad0:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ad2:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad6:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad8:	f002 f810 	bl	8002afc <HAL_ADC_Init>
 8000adc:	2800      	cmp	r0, #0
 8000ade:	d17e      	bne.n	8000bde <MX_ADC1_Init+0x13e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	9201      	str	r2, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ae8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aea:	4669      	mov	r1, sp
 8000aec:	4851      	ldr	r0, [pc, #324]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000aee:	f002 f92f 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	d176      	bne.n	8000be4 <MX_ADC1_Init+0x144>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afe:	4669      	mov	r1, sp
 8000b00:	484c      	ldr	r0, [pc, #304]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b02:	f002 f925 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d16f      	bne.n	8000bea <MX_ADC1_Init+0x14a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b12:	4669      	mov	r1, sp
 8000b14:	4847      	ldr	r0, [pc, #284]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b16:	f002 f91b 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	d168      	bne.n	8000bf0 <MX_ADC1_Init+0x150>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8000b22:	2304      	movs	r3, #4
 8000b24:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b26:	4669      	mov	r1, sp
 8000b28:	4842      	ldr	r0, [pc, #264]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b2a:	f002 f911 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	d161      	bne.n	8000bf6 <MX_ADC1_Init+0x156>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b32:	2304      	movs	r3, #4
 8000b34:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 5;
 8000b36:	2305      	movs	r3, #5
 8000b38:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3a:	4669      	mov	r1, sp
 8000b3c:	483d      	ldr	r0, [pc, #244]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b3e:	f002 f907 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8000b42:	2800      	cmp	r0, #0
 8000b44:	d15a      	bne.n	8000bfc <MX_ADC1_Init+0x15c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b46:	2305      	movs	r3, #5
 8000b48:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 6;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4e:	4669      	mov	r1, sp
 8000b50:	4838      	ldr	r0, [pc, #224]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b52:	f002 f8fd 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8000b56:	2800      	cmp	r0, #0
 8000b58:	d153      	bne.n	8000c02 <MX_ADC1_Init+0x162>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b5a:	2306      	movs	r3, #6
 8000b5c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 7;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b62:	4669      	mov	r1, sp
 8000b64:	4833      	ldr	r0, [pc, #204]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b66:	f002 f8f3 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d14c      	bne.n	8000c08 <MX_ADC1_Init+0x168>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b6e:	2307      	movs	r3, #7
 8000b70:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 8;
 8000b72:	2308      	movs	r3, #8
 8000b74:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b76:	4669      	mov	r1, sp
 8000b78:	482e      	ldr	r0, [pc, #184]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b7a:	f002 f8e9 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	d145      	bne.n	8000c0e <MX_ADC1_Init+0x16e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b82:	230e      	movs	r3, #14
 8000b84:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 9;
 8000b86:	2309      	movs	r3, #9
 8000b88:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8a:	4669      	mov	r1, sp
 8000b8c:	4829      	ldr	r0, [pc, #164]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000b8e:	f002 f8df 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d13e      	bne.n	8000c14 <MX_ADC1_Init+0x174>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b96:	230a      	movs	r3, #10
 8000b98:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 10;
 8000b9a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b9c:	4669      	mov	r1, sp
 8000b9e:	4825      	ldr	r0, [pc, #148]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000ba0:	f002 f8d6 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	d138      	bne.n	8000c1a <MX_ADC1_Init+0x17a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ba8:	230b      	movs	r3, #11
 8000baa:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 11;
 8000bac:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bae:	4669      	mov	r1, sp
 8000bb0:	4820      	ldr	r0, [pc, #128]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000bb2:	f002 f8cd 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8000bb6:	bb98      	cbnz	r0, 8000c20 <MX_ADC1_Init+0x180>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bb8:	230c      	movs	r3, #12
 8000bba:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 12;
 8000bbc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bbe:	4669      	mov	r1, sp
 8000bc0:	481c      	ldr	r0, [pc, #112]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000bc2:	f002 f8c5 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8000bc6:	bb70      	cbnz	r0, 8000c26 <MX_ADC1_Init+0x186>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000bc8:	230d      	movs	r3, #13
 8000bca:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 13;
 8000bcc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bce:	4669      	mov	r1, sp
 8000bd0:	4818      	ldr	r0, [pc, #96]	@ (8000c34 <MX_ADC1_Init+0x194>)
 8000bd2:	f002 f8bd 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8000bd6:	bb48      	cbnz	r0, 8000c2c <MX_ADC1_Init+0x18c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bd8:	b005      	add	sp, #20
 8000bda:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000bde:	f001 f899 	bl	8001d14 <Error_Handler>
 8000be2:	e77d      	b.n	8000ae0 <MX_ADC1_Init+0x40>
    Error_Handler();
 8000be4:	f001 f896 	bl	8001d14 <Error_Handler>
 8000be8:	e785      	b.n	8000af6 <MX_ADC1_Init+0x56>
    Error_Handler();
 8000bea:	f001 f893 	bl	8001d14 <Error_Handler>
 8000bee:	e78c      	b.n	8000b0a <MX_ADC1_Init+0x6a>
    Error_Handler();
 8000bf0:	f001 f890 	bl	8001d14 <Error_Handler>
 8000bf4:	e793      	b.n	8000b1e <MX_ADC1_Init+0x7e>
    Error_Handler();
 8000bf6:	f001 f88d 	bl	8001d14 <Error_Handler>
 8000bfa:	e79a      	b.n	8000b32 <MX_ADC1_Init+0x92>
    Error_Handler();
 8000bfc:	f001 f88a 	bl	8001d14 <Error_Handler>
 8000c00:	e7a1      	b.n	8000b46 <MX_ADC1_Init+0xa6>
    Error_Handler();
 8000c02:	f001 f887 	bl	8001d14 <Error_Handler>
 8000c06:	e7a8      	b.n	8000b5a <MX_ADC1_Init+0xba>
    Error_Handler();
 8000c08:	f001 f884 	bl	8001d14 <Error_Handler>
 8000c0c:	e7af      	b.n	8000b6e <MX_ADC1_Init+0xce>
    Error_Handler();
 8000c0e:	f001 f881 	bl	8001d14 <Error_Handler>
 8000c12:	e7b6      	b.n	8000b82 <MX_ADC1_Init+0xe2>
    Error_Handler();
 8000c14:	f001 f87e 	bl	8001d14 <Error_Handler>
 8000c18:	e7bd      	b.n	8000b96 <MX_ADC1_Init+0xf6>
    Error_Handler();
 8000c1a:	f001 f87b 	bl	8001d14 <Error_Handler>
 8000c1e:	e7c3      	b.n	8000ba8 <MX_ADC1_Init+0x108>
    Error_Handler();
 8000c20:	f001 f878 	bl	8001d14 <Error_Handler>
 8000c24:	e7c8      	b.n	8000bb8 <MX_ADC1_Init+0x118>
    Error_Handler();
 8000c26:	f001 f875 	bl	8001d14 <Error_Handler>
 8000c2a:	e7cd      	b.n	8000bc8 <MX_ADC1_Init+0x128>
    Error_Handler();
 8000c2c:	f001 f872 	bl	8001d14 <Error_Handler>
}
 8000c30:	e7d2      	b.n	8000bd8 <MX_ADC1_Init+0x138>
 8000c32:	bf00      	nop
 8000c34:	20000210 	.word	0x20000210
 8000c38:	40012000 	.word	0x40012000
 8000c3c:	0f000001 	.word	0x0f000001

08000c40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c42:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	2300      	movs	r3, #0
 8000c46:	9303      	str	r3, [sp, #12]
 8000c48:	9304      	str	r3, [sp, #16]
 8000c4a:	9305      	str	r3, [sp, #20]
 8000c4c:	9306      	str	r3, [sp, #24]
 8000c4e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000c50:	6802      	ldr	r2, [r0, #0]
 8000c52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000c56:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d001      	beq.n	8000c62 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c5e:	b009      	add	sp, #36	@ 0x24
 8000c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c62:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c64:	2500      	movs	r5, #0
 8000c66:	9500      	str	r5, [sp, #0]
 8000c68:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000c72:	645a      	str	r2, [r3, #68]	@ 0x44
 8000c74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c76:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000c7a:	9200      	str	r2, [sp, #0]
 8000c7c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	9501      	str	r5, [sp, #4]
 8000c80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c82:	f042 0204 	orr.w	r2, r2, #4
 8000c86:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c8a:	f002 0204 	and.w	r2, r2, #4
 8000c8e:	9201      	str	r2, [sp, #4]
 8000c90:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	9502      	str	r5, [sp, #8]
 8000c94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c96:	f042 0201 	orr.w	r2, r2, #1
 8000c9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	9302      	str	r3, [sp, #8]
 8000ca4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD_INPUT1_PIN_Pin|AD_INPUT2_PIN_Pin|AD_INPUT3_PIN_Pin|AD_INPUT4_PIN_Pin
 8000ca6:	231f      	movs	r3, #31
 8000ca8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000caa:	2703      	movs	r7, #3
 8000cac:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cae:	ae03      	add	r6, sp, #12
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	4814      	ldr	r0, [pc, #80]	@ (8000d04 <HAL_ADC_MspInit+0xc4>)
 8000cb4:	f002 fb82 	bl	80033bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ETB1_SENSE1_Pin|ETB1_SENSE2_Pin|ETB2_SENSE1_Pin|ETB2_SENSE2_Pin
 8000cb8:	23ff      	movs	r3, #255	@ 0xff
 8000cba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	4811      	ldr	r0, [pc, #68]	@ (8000d08 <HAL_ADC_MspInit+0xc8>)
 8000cc4:	f002 fb7a 	bl	80033bc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000cc8:	4810      	ldr	r0, [pc, #64]	@ (8000d0c <HAL_ADC_MspInit+0xcc>)
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <HAL_ADC_MspInit+0xd0>)
 8000ccc:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cce:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cd0:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd2:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cd8:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cde:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce4:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ce6:	61c5      	str	r5, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ce8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cec:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cee:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cf0:	f002 f9dc 	bl	80030ac <HAL_DMA_Init>
 8000cf4:	b918      	cbnz	r0, 8000cfe <HAL_ADC_MspInit+0xbe>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cf6:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <HAL_ADC_MspInit+0xcc>)
 8000cf8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000cfa:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000cfc:	e7af      	b.n	8000c5e <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000cfe:	f001 f809 	bl	8001d14 <Error_Handler>
 8000d02:	e7f8      	b.n	8000cf6 <HAL_ADC_MspInit+0xb6>
 8000d04:	40020800 	.word	0x40020800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	200001b0 	.word	0x200001b0
 8000d10:	40026410 	.word	0x40026410

08000d14 <analog_inputs_start_conversion>:
 * 
 * This function triggers the ADC to begin converting the analog signals
 * to digital values.
 */
void analog_inputs_start_conversion()
{
 8000d14:	b508      	push	{r3, lr}
    if (hadc == NULL)
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <analog_inputs_start_conversion+0x20>)
 8000d18:	6818      	ldr	r0, [r3, #0]
 8000d1a:	b110      	cbz	r0, 8000d22 <analog_inputs_start_conversion+0xe>
    {
        return;
    }
    if (conversion_is_happening)
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <analog_inputs_start_conversion+0x24>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b103      	cbz	r3, 8000d24 <analog_inputs_start_conversion+0x10>
        return;
    }
    
    conversion_is_happening = true;
    HAL_ADC_Start_DMA(hadc, (uint32_t*)&analog_data.raw_values, ANALOG_INPUTS_MAX);
}
 8000d22:	bd08      	pop	{r3, pc}
    conversion_is_happening = true;
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <analog_inputs_start_conversion+0x24>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
    HAL_ADC_Start_DMA(hadc, (uint32_t*)&analog_data.raw_values, ANALOG_INPUTS_MAX);
 8000d2a:	220d      	movs	r2, #13
 8000d2c:	4903      	ldr	r1, [pc, #12]	@ (8000d3c <analog_inputs_start_conversion+0x28>)
 8000d2e:	f001 ff11 	bl	8002b54 <HAL_ADC_Start_DMA>
 8000d32:	e7f6      	b.n	8000d22 <analog_inputs_start_conversion+0xe>
 8000d34:	20000278 	.word	0x20000278
 8000d38:	20000258 	.word	0x20000258
 8000d3c:	2000025c 	.word	0x2000025c

08000d40 <HAL_ADC_ConvCpltCallback>:
    conversion_is_happening = false;
 8000d40:	4b01      	ldr	r3, [pc, #4]	@ (8000d48 <HAL_ADC_ConvCpltCallback+0x8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
}
 8000d46:	4770      	bx	lr
 8000d48:	20000258 	.word	0x20000258

08000d4c <analog_inputs_init>:
{
 8000d4c:	b510      	push	{r4, lr}
    if (adc_handle == NULL)
 8000d4e:	b190      	cbz	r0, 8000d76 <analog_inputs_init+0x2a>
    hadc = adc_handle;
 8000d50:	4a0b      	ldr	r2, [pc, #44]	@ (8000d80 <analog_inputs_init+0x34>)
 8000d52:	6010      	str	r0, [r2, #0]
    conversion_is_happening = true;
 8000d54:	2401      	movs	r4, #1
 8000d56:	4a0b      	ldr	r2, [pc, #44]	@ (8000d84 <analog_inputs_init+0x38>)
 8000d58:	7014      	strb	r4, [r2, #0]
    HAL_ADC_Start_DMA(hadc, (uint32_t*)&analog_data.raw_values, ANALOG_INPUTS_MAX);
 8000d5a:	220d      	movs	r2, #13
 8000d5c:	490a      	ldr	r1, [pc, #40]	@ (8000d88 <analog_inputs_init+0x3c>)
 8000d5e:	f001 fef9 	bl	8002b54 <HAL_ADC_Start_DMA>
    osTimerId_t timer_id = osTimerNew(
 8000d62:	2300      	movs	r3, #0
 8000d64:	461a      	mov	r2, r3
 8000d66:	4621      	mov	r1, r4
 8000d68:	4808      	ldr	r0, [pc, #32]	@ (8000d8c <analog_inputs_init+0x40>)
 8000d6a:	f000 f8cf 	bl	8000f0c <osTimerNew>
    osTimerStart(timer_id, 1);
 8000d6e:	4621      	mov	r1, r4
 8000d70:	f000 f920 	bl	8000fb4 <osTimerStart>
}
 8000d74:	bd10      	pop	{r4, pc}
        log_error("Analog input init failed! adc handle is null.");
 8000d76:	4806      	ldr	r0, [pc, #24]	@ (8000d90 <analog_inputs_init+0x44>)
 8000d78:	f000 fbae 	bl	80014d8 <log_error>
        return;
 8000d7c:	e7fa      	b.n	8000d74 <analog_inputs_init+0x28>
 8000d7e:	bf00      	nop
 8000d80:	20000278 	.word	0x20000278
 8000d84:	20000258 	.word	0x20000258
 8000d88:	2000025c 	.word	0x2000025c
 8000d8c:	08000d15 	.word	0x08000d15
 8000d90:	08009b38 	.word	0x08009b38

08000d94 <analog_inputs_get_data>:
#if ANALOG_INPUTS_ADC_BITS == 12
uint16_t analog_inputs_get_data(analog_input_adc_channel_mapping_e input_index)
#elif ANALOG_INPUTS_ADC_BITS == 24
uint32_t analog_inputs_get_data(analog_input_adc_channel_mapping_e input_index)
#endif
{
 8000d94:	b508      	push	{r3, lr}
    if (input_index > (ANALOG_INPUTS_MAX - 1))
 8000d96:	280c      	cmp	r0, #12
 8000d98:	d804      	bhi.n	8000da4 <analog_inputs_get_data+0x10>
    {
        log_error("Invalid index in analog input.");
        return 0;
    }
    return analog_data.raw_values[input_index];
 8000d9a:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <analog_inputs_get_data+0x1c>)
 8000d9c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8000da0:	b280      	uxth	r0, r0
}
 8000da2:	bd08      	pop	{r3, pc}
        log_error("Invalid index in analog input.");
 8000da4:	4803      	ldr	r0, [pc, #12]	@ (8000db4 <analog_inputs_get_data+0x20>)
 8000da6:	f000 fb97 	bl	80014d8 <log_error>
        return 0;
 8000daa:	2000      	movs	r0, #0
 8000dac:	e7f9      	b.n	8000da2 <analog_inputs_get_data+0xe>
 8000dae:	bf00      	nop
 8000db0:	2000025c 	.word	0x2000025c
 8000db4:	08009b68 	.word	0x08009b68

08000db8 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8000db8:	b508      	push	{r3, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8000dba:	f006 fac0 	bl	800733e <pvTimerGetTimerID>

  if (callb != NULL) {
 8000dbe:	b110      	cbz	r0, 8000dc6 <TimerCallback+0xe>
    callb->func (callb->arg);
 8000dc0:	6802      	ldr	r2, [r0, #0]
 8000dc2:	6840      	ldr	r0, [r0, #4]
 8000dc4:	4790      	blx	r2
  }
}
 8000dc6:	bd08      	pop	{r3, pc}

08000dc8 <SysTick_Handler>:
void SysTick_Handler (void) {
 8000dc8:	b508      	push	{r3, lr}
  SysTick->CTRL;
 8000dca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000dce:	691b      	ldr	r3, [r3, #16]
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8000dd0:	f005 fe04 	bl	80069dc <xTaskGetSchedulerState>
 8000dd4:	2801      	cmp	r0, #1
 8000dd6:	d100      	bne.n	8000dda <SysTick_Handler+0x12>
}
 8000dd8:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8000dda:	f001 f97b 	bl	80020d4 <xPortSysTickHandler>
}
 8000dde:	e7fb      	b.n	8000dd8 <SysTick_Handler+0x10>

08000de0 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000de0:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000de4:	b92b      	cbnz	r3, 8000df2 <osKernelInitialize+0x12>
    if (KernelState == osKernelInactive) {
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <osKernelInitialize+0x20>)
 8000de8:	6818      	ldr	r0, [r3, #0]
 8000dea:	b928      	cbnz	r0, 8000df8 <osKernelInitialize+0x18>
      KernelState = osKernelReady;
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000df0:	4770      	bx	lr
    stat = osErrorISR;
 8000df2:	f06f 0005 	mvn.w	r0, #5
 8000df6:	4770      	bx	lr
      stat = osError;
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000934 	.word	0x20000934

08000e04 <osKernelStart>:
 8000e04:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000e08:	b973      	cbnz	r3, 8000e28 <osKernelStart+0x24>
    if (KernelState == osKernelReady) {
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <osKernelStart+0x30>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d10d      	bne.n	8000e2e <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8000e12:	b510      	push	{r4, lr}
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	2400      	movs	r4, #0
 8000e16:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <osKernelStart+0x34>)
 8000e18:	77dc      	strb	r4, [r3, #31]
      KernelState = osKernelRunning;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <osKernelStart+0x30>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8000e20:	f005 fb38 	bl	8006494 <vTaskStartScheduler>
      stat = osOK;
 8000e24:	4620      	mov	r0, r4
}
 8000e26:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8000e28:	f06f 0005 	mvn.w	r0, #5
 8000e2c:	4770      	bx	lr
      stat = osError;
 8000e2e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000e32:	4770      	bx	lr
 8000e34:	20000934 	.word	0x20000934
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3e:	b087      	sub	sp, #28
  hTask = NULL;
 8000e40:	2400      	movs	r4, #0
 8000e42:	9405      	str	r4, [sp, #20]
 8000e44:	f3ef 8405 	mrs	r4, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 8000e48:	bb04      	cbnz	r4, 8000e8c <osThreadNew+0x50>
 8000e4a:	b1f8      	cbz	r0, 8000e8c <osThreadNew+0x50>
    if (attr != NULL) {
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	d034      	beq.n	8000eba <osThreadNew+0x7e>
      if (attr->name != NULL) {
 8000e50:	6815      	ldr	r5, [r2, #0]
      if (attr->priority != osPriorityNone) {
 8000e52:	6993      	ldr	r3, [r2, #24]
 8000e54:	b12b      	cbz	r3, 8000e62 <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 8000e56:	461e      	mov	r6, r3
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	2b37      	cmp	r3, #55	@ 0x37
 8000e5c:	d902      	bls.n	8000e64 <osThreadNew+0x28>
        return (NULL);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	e015      	b.n	8000e8e <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;
 8000e62:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000e64:	6853      	ldr	r3, [r2, #4]
 8000e66:	f013 0f01 	tst.w	r3, #1
 8000e6a:	d13f      	bne.n	8000eec <osThreadNew+0xb0>
      if (attr->stack_size > 0U) {
 8000e6c:	6954      	ldr	r4, [r2, #20]
 8000e6e:	b184      	cbz	r4, 8000e92 <osThreadNew+0x56>
        stack = attr->stack_size / sizeof(StackType_t);
 8000e70:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000e74:	6893      	ldr	r3, [r2, #8]
 8000e76:	b12b      	cbz	r3, 8000e84 <osThreadNew+0x48>
 8000e78:	68d7      	ldr	r7, [r2, #12]
 8000e7a:	2f5b      	cmp	r7, #91	@ 0x5b
 8000e7c:	d902      	bls.n	8000e84 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000e7e:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000e80:	b107      	cbz	r7, 8000e84 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000e82:	b984      	cbnz	r4, 8000ea6 <osThreadNew+0x6a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000e84:	b143      	cbz	r3, 8000e98 <osThreadNew+0x5c>
    mem  = -1;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
      if (mem == 0) {
 8000e8a:	b30b      	cbz	r3, 8000ed0 <osThreadNew+0x94>
  return ((osThreadId_t)hTask);
 8000e8c:	9805      	ldr	r0, [sp, #20]
}
 8000e8e:	b007      	add	sp, #28
 8000e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8000e92:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000e96:	e7ed      	b.n	8000e74 <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000e98:	68d3      	ldr	r3, [r2, #12]
 8000e9a:	b9a3      	cbnz	r3, 8000ec6 <osThreadNew+0x8a>
 8000e9c:	6913      	ldr	r3, [r2, #16]
 8000e9e:	b1ab      	cbz	r3, 8000ecc <osThreadNew+0x90>
    mem  = -1;
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea4:	e7f1      	b.n	8000e8a <osThreadNew+0x4e>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000ea6:	9302      	str	r3, [sp, #8]
 8000ea8:	9701      	str	r7, [sp, #4]
 8000eaa:	9600      	str	r6, [sp, #0]
 8000eac:	460b      	mov	r3, r1
 8000eae:	4662      	mov	r2, ip
 8000eb0:	4629      	mov	r1, r5
 8000eb2:	f005 fa81 	bl	80063b8 <xTaskCreateStatic>
 8000eb6:	9005      	str	r0, [sp, #20]
 8000eb8:	e7e8      	b.n	8000e8c <osThreadNew+0x50>
    name = NULL;
 8000eba:	4615      	mov	r5, r2
      mem = 0;
 8000ebc:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8000ebe:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 8000ec0:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000ec4:	e7e1      	b.n	8000e8a <osThreadNew+0x4e>
    mem  = -1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e7de      	b.n	8000e8a <osThreadNew+0x4e>
          mem = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e7dc      	b.n	8000e8a <osThreadNew+0x4e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000ed0:	ab05      	add	r3, sp, #20
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	9600      	str	r6, [sp, #0]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	fa1f f28c 	uxth.w	r2, ip
 8000edc:	4629      	mov	r1, r5
 8000ede:	f005 faa6 	bl	800642e <xTaskCreate>
 8000ee2:	2801      	cmp	r0, #1
 8000ee4:	d0d2      	beq.n	8000e8c <osThreadNew+0x50>
            hTask = NULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9305      	str	r3, [sp, #20]
 8000eea:	e7cf      	b.n	8000e8c <osThreadNew+0x50>
        return (NULL);
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7ce      	b.n	8000e8e <osThreadNew+0x52>

08000ef0 <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
 8000ef0:	b508      	push	{r3, lr}
 8000ef2:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000ef6:	b933      	cbnz	r3, 8000f06 <osDelay+0x16>
    if (ticks != 0U) {
 8000ef8:	b908      	cbnz	r0, 8000efe <osDelay+0xe>
    stat = osOK;
 8000efa:	2000      	movs	r0, #0
}
 8000efc:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8000efe:	f005 fc2b 	bl	8006758 <vTaskDelay>
    stat = osOK;
 8000f02:	2000      	movs	r0, #0
 8000f04:	e7fa      	b.n	8000efc <osDelay+0xc>
    stat = osErrorISR;
 8000f06:	f06f 0005 	mvn.w	r0, #5
 8000f0a:	e7f7      	b.n	8000efc <osDelay+0xc>

08000f0c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8000f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f10:	b083      	sub	sp, #12
 8000f12:	f3ef 8705 	mrs	r7, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 8000f16:	2f00      	cmp	r7, #0
 8000f18:	d143      	bne.n	8000fa2 <osTimerNew+0x96>
 8000f1a:	4606      	mov	r6, r0
 8000f1c:	4689      	mov	r9, r1
 8000f1e:	4615      	mov	r5, r2
 8000f20:	461c      	mov	r4, r3
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d03f      	beq.n	8000fa6 <osTimerNew+0x9a>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8000f26:	2008      	movs	r0, #8
 8000f28:	f000 fc7c 	bl	8001824 <pvPortMalloc>

    if (callb != NULL) {
 8000f2c:	4680      	mov	r8, r0
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	d03b      	beq.n	8000faa <osTimerNew+0x9e>
      callb->func = func;
 8000f32:	6006      	str	r6, [r0, #0]
      callb->arg  = argument;
 8000f34:	6045      	str	r5, [r0, #4]

      if (type == osTimerOnce) {
 8000f36:	f1b9 0f00 	cmp.w	r9, #0
 8000f3a:	d000      	beq.n	8000f3e <osTimerNew+0x32>
        reload = pdFALSE;
      } else {
        reload = pdTRUE;
 8000f3c:	2701      	movs	r7, #1
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
 8000f3e:	b304      	cbz	r4, 8000f82 <osTimerNew+0x76>
        if (attr->name != NULL) {
 8000f40:	6820      	ldr	r0, [r4, #0]
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8000f42:	68a3      	ldr	r3, [r4, #8]
 8000f44:	b113      	cbz	r3, 8000f4c <osTimerNew+0x40>
 8000f46:	68e2      	ldr	r2, [r4, #12]
 8000f48:	2a2b      	cmp	r2, #43	@ 0x2b
 8000f4a:	d810      	bhi.n	8000f6e <osTimerNew+0x62>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000f4c:	b153      	cbz	r3, 8000f64 <osTimerNew+0x58>
      mem  = -1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
        #endif
      }
      else {
        if (mem == 0) {
 8000f52:	b1db      	cbz	r3, 8000f8c <osTimerNew+0x80>
  hTimer = NULL;
 8000f54:	2400      	movs	r4, #0
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
        vPortFree (callb);
 8000f56:	4640      	mov	r0, r8
 8000f58:	f000 fce6 	bl	8001928 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	b003      	add	sp, #12
 8000f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000f64:	68e3      	ldr	r3, [r4, #12]
 8000f66:	b17b      	cbz	r3, 8000f88 <osTimerNew+0x7c>
      mem  = -1;
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	e7f1      	b.n	8000f52 <osTimerNew+0x46>
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <osTimerNew+0xa4>)
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	4643      	mov	r3, r8
 8000f76:	463a      	mov	r2, r7
 8000f78:	2101      	movs	r1, #1
 8000f7a:	f006 f82b 	bl	8006fd4 <xTimerCreateStatic>
 8000f7e:	4604      	mov	r4, r0
 8000f80:	e00c      	b.n	8000f9c <osTimerNew+0x90>
      name = NULL;
 8000f82:	4620      	mov	r0, r4
        mem = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e7e4      	b.n	8000f52 <osTimerNew+0x46>
            mem = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e7e2      	b.n	8000f52 <osTimerNew+0x46>
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <osTimerNew+0xa4>)
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	4643      	mov	r3, r8
 8000f92:	463a      	mov	r2, r7
 8000f94:	2101      	movs	r1, #1
 8000f96:	f006 f801 	bl	8006f9c <xTimerCreate>
 8000f9a:	4604      	mov	r4, r0
      if ((hTimer == NULL) && (callb != NULL)) {
 8000f9c:	2c00      	cmp	r4, #0
 8000f9e:	d1dd      	bne.n	8000f5c <osTimerNew+0x50>
 8000fa0:	e7d9      	b.n	8000f56 <osTimerNew+0x4a>
  hTimer = NULL;
 8000fa2:	2400      	movs	r4, #0
 8000fa4:	e7da      	b.n	8000f5c <osTimerNew+0x50>
 8000fa6:	2400      	movs	r4, #0
 8000fa8:	e7d8      	b.n	8000f5c <osTimerNew+0x50>
 8000faa:	4604      	mov	r4, r0
  return ((osTimerId_t)hTimer);
 8000fac:	e7d6      	b.n	8000f5c <osTimerNew+0x50>
 8000fae:	bf00      	nop
 8000fb0:	08000db9 	.word	0x08000db9

08000fb4 <osTimerStart>:
 8000fb4:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8000fb8:	b96b      	cbnz	r3, 8000fd6 <osTimerStart+0x22>
 8000fba:	460a      	mov	r2, r1
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
 8000fbc:	b170      	cbz	r0, 8000fdc <osTimerStart+0x28>
osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8000fbe:	b500      	push	{lr}
 8000fc0:	b083      	sub	sp, #12
    stat = osErrorParameter;
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	f006 f82f 	bl	8007028 <xTimerGenericCommand>
 8000fca:	2801      	cmp	r0, #1
 8000fcc:	d109      	bne.n	8000fe2 <osTimerStart+0x2e>
      stat = osOK;
 8000fce:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8000fd0:	b003      	add	sp, #12
 8000fd2:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorISR;
 8000fd6:	f06f 0005 	mvn.w	r0, #5
 8000fda:	4770      	bx	lr
    stat = osErrorParameter;
 8000fdc:	f06f 0003 	mvn.w	r0, #3
}
 8000fe0:	4770      	bx	lr
      stat = osErrorResource;
 8000fe2:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8000fe6:	e7f3      	b.n	8000fd0 <osTimerStart+0x1c>

08000fe8 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <vApplicationGetIdleTaskMemory+0x10>)
 8000fea:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000fec:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <vApplicationGetIdleTaskMemory+0x14>)
 8000fee:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	200008d8 	.word	0x200008d8
 8000ffc:	200006d8 	.word	0x200006d8

08001000 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <vApplicationGetTimerTaskMemory+0x10>)
 8001002:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001004:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <vApplicationGetTimerTaskMemory+0x14>)
 8001006:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001008:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800100c:	6013      	str	r3, [r2, #0]
}
 800100e:	4770      	bx	lr
 8001010:	2000067c 	.word	0x2000067c
 8001014:	2000027c 	.word	0x2000027c

08001018 <controller_init>:
engine_s engine = {0};

static electronic_throttle_s etb1 = {0};

void controller_init()
{
 8001018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800101c:	b08a      	sub	sp, #40	@ 0x28
    engine.total_revolutions = 0;
 800101e:	4e29      	ldr	r6, [pc, #164]	@ (80010c4 <controller_init+0xac>)
 8001020:	2700      	movs	r7, #0
 8001022:	6037      	str	r7, [r6, #0]
    engine.crankshaft_angle = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	6073      	str	r3, [r6, #4]
    engine.camshaft_angle = 0;
 8001028:	60b3      	str	r3, [r6, #8]
    engine.rpm = 0;
 800102a:	60f3      	str	r3, [r6, #12]
    engine.cylinder_count = 4;
 800102c:	f04f 0804 	mov.w	r8, #4
 8001030:	f886 8010 	strb.w	r8, [r6, #16]
    engine.spinning_state = SS_STOPPED;
 8001034:	7477      	strb	r7, [r6, #17]
    engine.firing_interval = 180.0f;
 8001036:	4b24      	ldr	r3, [pc, #144]	@ (80010c8 <controller_init+0xb0>)
 8001038:	6173      	str	r3, [r6, #20]
    // engine.trigger = .....;

    configuration.ignition_dwell = (float_time_ms_t)3;
 800103a:	4d24      	ldr	r5, [pc, #144]	@ (80010cc <controller_init+0xb4>)
 800103c:	4b24      	ldr	r3, [pc, #144]	@ (80010d0 <controller_init+0xb8>)
 800103e:	61ab      	str	r3, [r5, #24]
    configuration.ignition_mode = IM_WASTED_SPARK;
 8001040:	2303      	movs	r3, #3
 8001042:	756b      	strb	r3, [r5, #21]

    configuration.trigger.filtering = TF_FILTERING_NONE;
 8001044:	70af      	strb	r7, [r5, #2]
    configuration.trigger.full_teeth = 60;
 8001046:	233c      	movs	r3, #60	@ 0x3c
 8001048:	70eb      	strb	r3, [r5, #3]
    configuration.trigger.missing_teeth = 2;
 800104a:	2302      	movs	r3, #2
 800104c:	712b      	strb	r3, [r5, #4]
    configuration.cranking_rpm_threshold = 400;
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <controller_init+0xbc>)
 8001050:	60ab      	str	r3, [r5, #8]
    
    ignition_output_conf_s ignition_output_conf =
 8001052:	f10d 0c08 	add.w	ip, sp, #8
 8001056:	4c20      	ldr	r4, [pc, #128]	@ (80010d8 <controller_init+0xc0>)
 8001058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800105e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001062:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        .output[0] = {.gpio = IGNITION_OUTPUT1_GPIO_Port, .pin = IGNITION_OUTPUT1_Pin},
        .output[1] = {.gpio = IGNITION_OUTPUT2_GPIO_Port, .pin = IGNITION_OUTPUT2_Pin},
        .output[2] = {.gpio = IGNITION_OUTPUT3_GPIO_Port, .pin = IGNITION_OUTPUT3_Pin},
        .output[3] = {.gpio = IGNITION_OUTPUT4_GPIO_Port, .pin = IGNITION_OUTPUT4_Pin}
    };
    configuration.governer_pid.Kp = 1;
 8001066:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800106a:	67eb      	str	r3, [r5, #124]	@ 0x7c
    configuration.cranking_throttle = 10;
 800106c:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <controller_init+0xc4>)
 800106e:	612b      	str	r3, [r5, #16]
    configuration.governer_target_rpm = 1100;
 8001070:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <controller_init+0xc8>)
 8001072:	65eb      	str	r3, [r5, #92]	@ 0x5c

    controller_timing_start(&htim2);
 8001074:	481b      	ldr	r0, [pc, #108]	@ (80010e4 <controller_init+0xcc>)
 8001076:	f006 f975 	bl	8007364 <controller_timing_start>
    analog_inputs_init(&hadc1);
 800107a:	481b      	ldr	r0, [pc, #108]	@ (80010e8 <controller_init+0xd0>)
 800107c:	f7ff fe66 	bl	8000d4c <analog_inputs_init>
    trigger_init(&engine.trigger);
 8001080:	f106 0018 	add.w	r0, r6, #24
 8001084:	f006 fada 	bl	800763c <trigger_init>
    ignition_init(&ignition_output_conf);
 8001088:	a802      	add	r0, sp, #8
 800108a:	f000 fcc9 	bl	8001a20 <ignition_init>

    // this has to eventually use the configuration 
    static pid_t etb1_pid = {.Kp = 10, .Ki = 0, .Kd = 0, .setpoint = 50};
    pid_init(&etb1_pid);
 800108e:	4d17      	ldr	r5, [pc, #92]	@ (80010ec <controller_init+0xd4>)
 8001090:	4628      	mov	r0, r5
 8001092:	f000 feaf 	bl	8001df4 <pid_init>
    static sensor_tps_s etb1_tps = {.analog_channel = ANALOG_INPUT_ETB1_SENSE1, .closed_throttle_adc_value = 0, .wide_open_throttle_adc_value = 4095, .is_inverted = false};
    static dc_motor_s etb1_motor = {0};
    dc_motor_init(&etb1_motor, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, 1000);
 8001096:	4e16      	ldr	r6, [pc, #88]	@ (80010f0 <controller_init+0xd8>)
 8001098:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	4643      	mov	r3, r8
 80010a0:	463a      	mov	r2, r7
 80010a2:	4914      	ldr	r1, [pc, #80]	@ (80010f4 <controller_init+0xdc>)
 80010a4:	4630      	mov	r0, r6
 80010a6:	f000 f92d 	bl	8001304 <dc_motor_init>
    electronic_throttle_init(&etb1, &etb1_pid, &etb1_tps, &etb1_motor);
 80010aa:	4c13      	ldr	r4, [pc, #76]	@ (80010f8 <controller_init+0xe0>)
 80010ac:	4633      	mov	r3, r6
 80010ae:	4a13      	ldr	r2, [pc, #76]	@ (80010fc <controller_init+0xe4>)
 80010b0:	4629      	mov	r1, r5
 80010b2:	4620      	mov	r0, r4
 80010b4:	f000 f9d4 	bl	8001460 <electronic_throttle_init>

    governer_init(&etb1);
 80010b8:	4620      	mov	r0, r4
 80010ba:	f000 fac5 	bl	8001648 <governer_init>

    //HAL_FLASH_Unlock();
    //EE_Init();
}
 80010be:	b00a      	add	sp, #40	@ 0x28
 80010c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010c4:	2000095c 	.word	0x2000095c
 80010c8:	43340000 	.word	0x43340000
 80010cc:	2000099c 	.word	0x2000099c
 80010d0:	40400000 	.word	0x40400000
 80010d4:	43c80000 	.word	0x43c80000
 80010d8:	08009b18 	.word	0x08009b18
 80010dc:	41200000 	.word	0x41200000
 80010e0:	44898000 	.word	0x44898000
 80010e4:	20004ca4 	.word	0x20004ca4
 80010e8:	20000210 	.word	0x20000210
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000938 	.word	0x20000938
 80010f4:	20004c5c 	.word	0x20004c5c
 80010f8:	20000948 	.word	0x20000948
 80010fc:	20000000 	.word	0x20000000

08001100 <dc_motor_set>:
 * @param dir the desired direction of the motor
 * @param duty_cycle a number between 0 and 255 not a percentage
 */
void dc_motor_set(dc_motor_s *motor, dc_motor_direction_e dir, uint8_t duty_cycle)
{
	if (motor == NULL || motor->timer == NULL)
 8001100:	2800      	cmp	r0, #0
 8001102:	f000 809b 	beq.w	800123c <dc_motor_set+0x13c>
{
 8001106:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800110a:	460d      	mov	r5, r1
 800110c:	4616      	mov	r6, r2
 800110e:	4604      	mov	r4, r0
	if (motor == NULL || motor->timer == NULL)
 8001110:	6807      	ldr	r7, [r0, #0]
 8001112:	2f00      	cmp	r7, #0
 8001114:	d02d      	beq.n	8001172 <dc_motor_set+0x72>
	if (duty_cycle < 0 || duty_cycle > 255)
	{
		return;
	}
	// Map duty cycle (0-255) to timer compare value
	uint32_t compare_value = (uint32_t)((duty_cycle / 255.0) * __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001116:	4610      	mov	r0, r2
 8001118:	f7ff f9ec 	bl	80004f4 <__aeabi_i2d>
 800111c:	a348      	add	r3, pc, #288	@ (adr r3, 8001240 <dc_motor_set+0x140>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff fb7b 	bl	800081c <__aeabi_ddiv>
 8001126:	4680      	mov	r8, r0
 8001128:	4689      	mov	r9, r1
 800112a:	683f      	ldr	r7, [r7, #0]
 800112c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800112e:	f7ff f9d1 	bl	80004d4 <__aeabi_ui2d>
 8001132:	4642      	mov	r2, r8
 8001134:	464b      	mov	r3, r9
 8001136:	f7ff fa47 	bl	80005c8 <__aeabi_dmul>
 800113a:	f7ff fc57 	bl	80009ec <__aeabi_d2uiz>
	
	switch (dir)
 800113e:	b16d      	cbz	r5, 800115c <dc_motor_set+0x5c>
 8001140:	2d01      	cmp	r5, #1
 8001142:	d035      	beq.n	80011b0 <dc_motor_set+0xb0>
	case MD_REVERSE:
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
		break;
	default:
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001144:	6863      	ldr	r3, [r4, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d158      	bne.n	80011fc <dc_motor_set+0xfc>
 800114a:	637b      	str	r3, [r7, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 800114c:	68a3      	ldr	r3, [r4, #8]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d161      	bne.n	8001216 <dc_motor_set+0x116>
 8001152:	6823      	ldr	r3, [r4, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	635a      	str	r2, [r3, #52]	@ 0x34
 800115a:	e008      	b.n	800116e <dc_motor_set+0x6e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, compare_value);
 800115c:	6863      	ldr	r3, [r4, #4]
 800115e:	b953      	cbnz	r3, 8001176 <dc_motor_set+0x76>
 8001160:	6378      	str	r0, [r7, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001162:	68a3      	ldr	r3, [r4, #8]
 8001164:	b98b      	cbnz	r3, 800118a <dc_motor_set+0x8a>
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2200      	movs	r2, #0
 800116c:	635a      	str	r2, [r3, #52]	@ 0x34
		/**
		 * @todo throw an error
		 */
		break;
	}
	motor->current_duty_cycle = duty_cycle;
 800116e:	7366      	strb	r6, [r4, #13]
	motor->current_direction = dir;
 8001170:	7325      	strb	r5, [r4, #12]
}
 8001172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, compare_value);
 8001176:	2b04      	cmp	r3, #4
 8001178:	d003      	beq.n	8001182 <dc_motor_set+0x82>
 800117a:	2b08      	cmp	r3, #8
 800117c:	d003      	beq.n	8001186 <dc_motor_set+0x86>
 800117e:	6438      	str	r0, [r7, #64]	@ 0x40
 8001180:	e7ef      	b.n	8001162 <dc_motor_set+0x62>
 8001182:	63b8      	str	r0, [r7, #56]	@ 0x38
 8001184:	e7ed      	b.n	8001162 <dc_motor_set+0x62>
 8001186:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001188:	e7eb      	b.n	8001162 <dc_motor_set+0x62>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 800118a:	2b04      	cmp	r3, #4
 800118c:	d006      	beq.n	800119c <dc_motor_set+0x9c>
 800118e:	2b08      	cmp	r3, #8
 8001190:	d009      	beq.n	80011a6 <dc_motor_set+0xa6>
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2200      	movs	r2, #0
 8001198:	641a      	str	r2, [r3, #64]	@ 0x40
 800119a:	e7e8      	b.n	800116e <dc_motor_set+0x6e>
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2200      	movs	r2, #0
 80011a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80011a4:	e7e3      	b.n	800116e <dc_motor_set+0x6e>
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011ae:	e7de      	b.n	800116e <dc_motor_set+0x6e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 80011b0:	6863      	ldr	r3, [r4, #4]
 80011b2:	b933      	cbnz	r3, 80011c2 <dc_motor_set+0xc2>
 80011b4:	637b      	str	r3, [r7, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
 80011b6:	68a3      	ldr	r3, [r4, #8]
 80011b8:	b983      	cbnz	r3, 80011dc <dc_motor_set+0xdc>
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6358      	str	r0, [r3, #52]	@ 0x34
 80011c0:	e7d5      	b.n	800116e <dc_motor_set+0x6e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d004      	beq.n	80011d0 <dc_motor_set+0xd0>
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d005      	beq.n	80011d6 <dc_motor_set+0xd6>
 80011ca:	2300      	movs	r3, #0
 80011cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80011ce:	e7f2      	b.n	80011b6 <dc_motor_set+0xb6>
 80011d0:	2300      	movs	r3, #0
 80011d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011d4:	e7ef      	b.n	80011b6 <dc_motor_set+0xb6>
 80011d6:	2300      	movs	r3, #0
 80011d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011da:	e7ec      	b.n	80011b6 <dc_motor_set+0xb6>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d005      	beq.n	80011ec <dc_motor_set+0xec>
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	d007      	beq.n	80011f4 <dc_motor_set+0xf4>
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6418      	str	r0, [r3, #64]	@ 0x40
 80011ea:	e7c0      	b.n	800116e <dc_motor_set+0x6e>
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6398      	str	r0, [r3, #56]	@ 0x38
 80011f2:	e7bc      	b.n	800116e <dc_motor_set+0x6e>
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	63d8      	str	r0, [r3, #60]	@ 0x3c
 80011fa:	e7b8      	b.n	800116e <dc_motor_set+0x6e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d004      	beq.n	800120a <dc_motor_set+0x10a>
 8001200:	2b08      	cmp	r3, #8
 8001202:	d005      	beq.n	8001210 <dc_motor_set+0x110>
 8001204:	2300      	movs	r3, #0
 8001206:	643b      	str	r3, [r7, #64]	@ 0x40
 8001208:	e7a0      	b.n	800114c <dc_motor_set+0x4c>
 800120a:	2300      	movs	r3, #0
 800120c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800120e:	e79d      	b.n	800114c <dc_motor_set+0x4c>
 8001210:	2300      	movs	r3, #0
 8001212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001214:	e79a      	b.n	800114c <dc_motor_set+0x4c>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001216:	2b04      	cmp	r3, #4
 8001218:	d006      	beq.n	8001228 <dc_motor_set+0x128>
 800121a:	2b08      	cmp	r3, #8
 800121c:	d009      	beq.n	8001232 <dc_motor_set+0x132>
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	641a      	str	r2, [r3, #64]	@ 0x40
 8001226:	e7a2      	b.n	800116e <dc_motor_set+0x6e>
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001230:	e79d      	b.n	800116e <dc_motor_set+0x6e>
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2200      	movs	r2, #0
 8001238:	63da      	str	r2, [r3, #60]	@ 0x3c
 800123a:	e798      	b.n	800116e <dc_motor_set+0x6e>
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	00000000 	.word	0x00000000
 8001244:	406fe000 	.word	0x406fe000

08001248 <dc_motor_disable>:
/**
 * @brief disables the motor.
 */
void dc_motor_disable(dc_motor_s *motor)
{
	if (motor == NULL || motor->timer == NULL)
 8001248:	4603      	mov	r3, r0
 800124a:	b178      	cbz	r0, 800126c <dc_motor_disable+0x24>
 800124c:	6802      	ldr	r2, [r0, #0]
 800124e:	b16a      	cbz	r2, 800126c <dc_motor_disable+0x24>
		 * @todo throw an error
		 */
	}

	// Set duty cycle to 0 for both channels
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001250:	6841      	ldr	r1, [r0, #4]
 8001252:	b961      	cbnz	r1, 800126e <dc_motor_disable+0x26>
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	6351      	str	r1, [r2, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	b9c2      	cbnz	r2, 800128e <dc_motor_disable+0x46>
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	6812      	ldr	r2, [r2, #0]
 8001260:	2100      	movs	r1, #0
 8001262:	6351      	str	r1, [r2, #52]	@ 0x34
	motor->current_duty_cycle = 0;
 8001264:	2200      	movs	r2, #0
 8001266:	735a      	strb	r2, [r3, #13]
	motor->status = MS_DISABLED;
 8001268:	2202      	movs	r2, #2
 800126a:	739a      	strb	r2, [r3, #14]
}
 800126c:	4770      	bx	lr
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 800126e:	2904      	cmp	r1, #4
 8001270:	d005      	beq.n	800127e <dc_motor_disable+0x36>
 8001272:	2908      	cmp	r1, #8
 8001274:	d007      	beq.n	8001286 <dc_motor_disable+0x3e>
 8001276:	6812      	ldr	r2, [r2, #0]
 8001278:	2100      	movs	r1, #0
 800127a:	6411      	str	r1, [r2, #64]	@ 0x40
 800127c:	e7ec      	b.n	8001258 <dc_motor_disable+0x10>
 800127e:	6812      	ldr	r2, [r2, #0]
 8001280:	2100      	movs	r1, #0
 8001282:	6391      	str	r1, [r2, #56]	@ 0x38
 8001284:	e7e8      	b.n	8001258 <dc_motor_disable+0x10>
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	2100      	movs	r1, #0
 800128a:	63d1      	str	r1, [r2, #60]	@ 0x3c
 800128c:	e7e4      	b.n	8001258 <dc_motor_disable+0x10>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 800128e:	2a04      	cmp	r2, #4
 8001290:	d006      	beq.n	80012a0 <dc_motor_disable+0x58>
 8001292:	2a08      	cmp	r2, #8
 8001294:	d009      	beq.n	80012aa <dc_motor_disable+0x62>
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	2100      	movs	r1, #0
 800129c:	6411      	str	r1, [r2, #64]	@ 0x40
 800129e:	e7e1      	b.n	8001264 <dc_motor_disable+0x1c>
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	2100      	movs	r1, #0
 80012a6:	6391      	str	r1, [r2, #56]	@ 0x38
 80012a8:	e7dc      	b.n	8001264 <dc_motor_disable+0x1c>
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	2100      	movs	r1, #0
 80012b0:	63d1      	str	r1, [r2, #60]	@ 0x3c
 80012b2:	e7d7      	b.n	8001264 <dc_motor_disable+0x1c>

080012b4 <dc_motor_set_timer_freq>:
{
 80012b4:	b538      	push	{r3, r4, r5, lr}
 80012b6:	4605      	mov	r5, r0
	if (frequency == 0)
 80012b8:	b199      	cbz	r1, 80012e2 <dc_motor_set_timer_freq+0x2e>
 80012ba:	460c      	mov	r4, r1
	if (frequency > DC_MOTOR_MAX_FREQUENCY)
 80012bc:	f242 7310 	movw	r3, #10000	@ 0x2710
 80012c0:	4299      	cmp	r1, r3
 80012c2:	d900      	bls.n	80012c6 <dc_motor_set_timer_freq+0x12>
		frequency = DC_MOTOR_MAX_FREQUENCY;
 80012c4:	461c      	mov	r4, r3
	uint32_t timer_clock = HAL_RCC_GetSysClockFreq(); // Get the timer clock frequency
 80012c6:	f003 f9c5 	bl	8004654 <HAL_RCC_GetSysClockFreq>
	for (prescaler = 0; prescaler <= 0xFFFF; prescaler++)
 80012ca:	2200      	movs	r2, #0
		auto_reload = (timer_clock / ((prescaler + 1) * frequency)) - 1;
 80012cc:	fb02 4304 	mla	r3, r2, r4, r4
 80012d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d4:	3b01      	subs	r3, #1
		if (auto_reload <= 0xFFFF)
 80012d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012da:	d305      	bcc.n	80012e8 <dc_motor_set_timer_freq+0x34>
	for (prescaler = 0; prescaler <= 0xFFFF; prescaler++)
 80012dc:	3201      	adds	r2, #1
 80012de:	b292      	uxth	r2, r2
		auto_reload = (timer_clock / ((prescaler + 1) * frequency)) - 1;
 80012e0:	e7f4      	b.n	80012cc <dc_motor_set_timer_freq+0x18>
		dc_motor_disable(motor);
 80012e2:	f7ff ffb1 	bl	8001248 <dc_motor_disable>
		return;
 80012e6:	e00c      	b.n	8001302 <dc_motor_set_timer_freq+0x4e>
	__HAL_TIM_SET_PRESCALER((TIM_HandleTypeDef *)motor->timer, prescaler);
 80012e8:	6829      	ldr	r1, [r5, #0]
 80012ea:	6809      	ldr	r1, [r1, #0]
 80012ec:	628a      	str	r2, [r1, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer, auto_reload);
 80012ee:	682a      	ldr	r2, [r5, #0]
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80012f4:	682a      	ldr	r2, [r5, #0]
 80012f6:	60d3      	str	r3, [r2, #12]
	dc_motor_set(motor, motor->current_direction, motor->current_duty_cycle);
 80012f8:	7b6a      	ldrb	r2, [r5, #13]
 80012fa:	7b29      	ldrb	r1, [r5, #12]
 80012fc:	4628      	mov	r0, r5
 80012fe:	f7ff feff 	bl	8001100 <dc_motor_set>
}
 8001302:	bd38      	pop	{r3, r4, r5, pc}

08001304 <dc_motor_init>:
    if (motor == NULL || timer == NULL)
 8001304:	2800      	cmp	r0, #0
 8001306:	d04d      	beq.n	80013a4 <dc_motor_init+0xa0>
{
 8001308:	b510      	push	{r4, lr}
 800130a:	4604      	mov	r4, r0
    if (motor == NULL || timer == NULL)
 800130c:	b319      	cbz	r1, 8001356 <dc_motor_init+0x52>
    motor->timer = timer;
 800130e:	6001      	str	r1, [r0, #0]
    motor->timer_channel_output_1 = timer_channel_output_1;
 8001310:	6042      	str	r2, [r0, #4]
    motor->timer_channel_output_2 = timer_channel_output_2;
 8001312:	6083      	str	r3, [r0, #8]
	motor->current_direction = MD_FORWARD;
 8001314:	2300      	movs	r3, #0
 8001316:	7303      	strb	r3, [r0, #12]
	motor->status = MS_NORMAL;
 8001318:	7383      	strb	r3, [r0, #14]
	HAL_TIM_Base_Start((TIM_HandleTypeDef *)motor->timer);
 800131a:	4608      	mov	r0, r1
 800131c:	f003 fb7e 	bl	8004a1c <HAL_TIM_Base_Start>
	dc_motor_set_timer_freq(motor, frequency);
 8001320:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff ffc5 	bl	80012b4 <dc_motor_set_timer_freq>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 800132a:	6863      	ldr	r3, [r4, #4]
 800132c:	b9a3      	cbnz	r3, 8001358 <dc_motor_init+0x54>
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2200      	movs	r2, #0
 8001334:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001336:	68a3      	ldr	r3, [r4, #8]
 8001338:	bb0b      	cbnz	r3, 800137e <dc_motor_init+0x7a>
 800133a:	6823      	ldr	r3, [r4, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2200      	movs	r2, #0
 8001340:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1);
 8001342:	6861      	ldr	r1, [r4, #4]
 8001344:	6820      	ldr	r0, [r4, #0]
 8001346:	f003 ff77 	bl	8005238 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2);
 800134a:	68a1      	ldr	r1, [r4, #8]
 800134c:	6820      	ldr	r0, [r4, #0]
 800134e:	f003 ff73 	bl	8005238 <HAL_TIM_PWM_Start>
	motor->current_duty_cycle = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	7363      	strb	r3, [r4, #13]
}
 8001356:	bd10      	pop	{r4, pc}
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001358:	2b04      	cmp	r3, #4
 800135a:	d006      	beq.n	800136a <dc_motor_init+0x66>
 800135c:	2b08      	cmp	r3, #8
 800135e:	d009      	beq.n	8001374 <dc_motor_init+0x70>
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2200      	movs	r2, #0
 8001366:	641a      	str	r2, [r3, #64]	@ 0x40
 8001368:	e7e5      	b.n	8001336 <dc_motor_init+0x32>
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	639a      	str	r2, [r3, #56]	@ 0x38
 8001372:	e7e0      	b.n	8001336 <dc_motor_init+0x32>
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2200      	movs	r2, #0
 800137a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800137c:	e7db      	b.n	8001336 <dc_motor_init+0x32>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 800137e:	2b04      	cmp	r3, #4
 8001380:	d006      	beq.n	8001390 <dc_motor_init+0x8c>
 8001382:	2b08      	cmp	r3, #8
 8001384:	d009      	beq.n	800139a <dc_motor_init+0x96>
 8001386:	6823      	ldr	r3, [r4, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2200      	movs	r2, #0
 800138c:	641a      	str	r2, [r3, #64]	@ 0x40
 800138e:	e7d8      	b.n	8001342 <dc_motor_init+0x3e>
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2200      	movs	r2, #0
 8001396:	639a      	str	r2, [r3, #56]	@ 0x38
 8001398:	e7d3      	b.n	8001342 <dc_motor_init+0x3e>
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2200      	movs	r2, #0
 80013a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013a2:	e7ce      	b.n	8001342 <dc_motor_init+0x3e>
 80013a4:	4770      	bx	lr
	...

080013a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013a8:	b500      	push	{lr}
 80013aa:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013ac:	2200      	movs	r2, #0
 80013ae:	9201      	str	r2, [sp, #4]
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <MX_DMA_Init+0x30>)
 80013b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013b4:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 80013b8:	6319      	str	r1, [r3, #48]	@ 0x30
 80013ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80013c4:	2105      	movs	r1, #5
 80013c6:	2038      	movs	r0, #56	@ 0x38
 80013c8:	f001 fde0 	bl	8002f8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013cc:	2038      	movs	r0, #56	@ 0x38
 80013ce:	f001 fded 	bl	8002fac <HAL_NVIC_EnableIRQ>

}
 80013d2:	b003      	add	sp, #12
 80013d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80013d8:	40023800 	.word	0x40023800

080013dc <electronic_throttle_update>:
    }
    etb->target_position = position;
}

void electronic_throttle_update(void *arg)
{
 80013dc:	b530      	push	{r4, r5, lr}
 80013de:	ed2d 8b02 	vpush	{d8}
 80013e2:	b083      	sub	sp, #12
    electronic_throttle_s *etb = (electronic_throttle_s *)arg;
    if (etb == NULL || etb->pid == NULL || etb->sensor == NULL || etb->motor == NULL)
 80013e4:	b350      	cbz	r0, 800143c <electronic_throttle_update+0x60>
 80013e6:	4604      	mov	r4, r0
 80013e8:	6883      	ldr	r3, [r0, #8]
 80013ea:	b33b      	cbz	r3, 800143c <electronic_throttle_update+0x60>
 80013ec:	68c0      	ldr	r0, [r0, #12]
 80013ee:	b328      	cbz	r0, 800143c <electronic_throttle_update+0x60>
 80013f0:	6863      	ldr	r3, [r4, #4]
 80013f2:	b31b      	cbz	r3, 800143c <electronic_throttle_update+0x60>
    {
        log_error("Electronic throttle not initialized");
        return;
    }
    percent_t postion = sensor_tps_get(etb->sensor);
 80013f4:	f006 f88e 	bl	8007514 <sensor_tps_get>
 80013f8:	eeb0 8a40 	vmov.f32	s16, s0
    pid_set_setpoint(etb->pid, etb->target_position);
 80013fc:	ed94 0a04 	vldr	s0, [r4, #16]
 8001400:	68a0      	ldr	r0, [r4, #8]
 8001402:	f000 fd00 	bl	8001e06 <pid_set_setpoint>
    percent_t motor_effort = pid_compute(etb->pid, get_time_us(), postion);
 8001406:	68a5      	ldr	r5, [r4, #8]
 8001408:	f005 ffda 	bl	80073c0 <get_time_us>
 800140c:	4601      	mov	r1, r0
 800140e:	eeb0 0a48 	vmov.f32	s0, s16
 8001412:	4628      	mov	r0, r5
 8001414:	f000 fcfa 	bl	8001e0c <pid_compute>
    dc_motor_direction_e dir = motor_effort > 0 ? MD_FORWARD : MD_REVERSE;
 8001418:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	bfd4      	ite	le
 8001422:	2101      	movle	r1, #1
 8001424:	2100      	movgt	r1, #0
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 8001426:	6860      	ldr	r0, [r4, #4]
 8001428:	d40f      	bmi.n	800144a <electronic_throttle_update+0x6e>
 800142a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800142e:	edcd 7a01 	vstr	s15, [sp, #4]
 8001432:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001436:	f7ff fe63 	bl	8001100 <dc_motor_set>
 800143a:	e002      	b.n	8001442 <electronic_throttle_update+0x66>
        log_error("Electronic throttle not initialized");
 800143c:	4807      	ldr	r0, [pc, #28]	@ (800145c <electronic_throttle_update+0x80>)
 800143e:	f000 f84b 	bl	80014d8 <log_error>
}
 8001442:	b003      	add	sp, #12
 8001444:	ecbd 8b02 	vpop	{d8}
 8001448:	bd30      	pop	{r4, r5, pc}
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 800144a:	eeb1 0a40 	vneg.f32	s0, s0
 800144e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8001452:	edcd 7a01 	vstr	s15, [sp, #4]
 8001456:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800145a:	e7ec      	b.n	8001436 <electronic_throttle_update+0x5a>
 800145c:	08009b88 	.word	0x08009b88

08001460 <electronic_throttle_init>:
{
 8001460:	b510      	push	{r4, lr}
    if (etb == NULL || sensor == NULL || motor == NULL)
 8001462:	b1c0      	cbz	r0, 8001496 <electronic_throttle_init+0x36>
 8001464:	4604      	mov	r4, r0
 8001466:	b1b2      	cbz	r2, 8001496 <electronic_throttle_init+0x36>
 8001468:	b1ab      	cbz	r3, 8001496 <electronic_throttle_init+0x36>
    etb->pid = pid;
 800146a:	6081      	str	r1, [r0, #8]
    etb->sensor = sensor;
 800146c:	60c2      	str	r2, [r0, #12]
    etb->motor = motor;
 800146e:	6043      	str	r3, [r0, #4]
    etb->target_position = ELECTRONIC_THROTTLE_FAIL_SAFE_POSITION;
 8001470:	2300      	movs	r3, #0
 8001472:	6103      	str	r3, [r0, #16]
    etb->pid->limit_output_max = (float)255;
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <electronic_throttle_init+0x40>)
 8001476:	614b      	str	r3, [r1, #20]
    etb->pid->limit_output_min = (float)-255;
 8001478:	6883      	ldr	r3, [r0, #8]
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <electronic_throttle_init+0x44>)
 800147c:	611a      	str	r2, [r3, #16]
    osTimerId_t timer_id = osTimerNew(
 800147e:	2300      	movs	r3, #0
 8001480:	4602      	mov	r2, r0
 8001482:	2101      	movs	r1, #1
 8001484:	4808      	ldr	r0, [pc, #32]	@ (80014a8 <electronic_throttle_init+0x48>)
 8001486:	f7ff fd41 	bl	8000f0c <osTimerNew>
    osTimerStart(timer_id, 1); // every 1 tick = every 1ms = 1000Hz
 800148a:	2101      	movs	r1, #1
 800148c:	f7ff fd92 	bl	8000fb4 <osTimerStart>
    etb->state = ETB_STATE_NORMAL;
 8001490:	2301      	movs	r3, #1
 8001492:	7023      	strb	r3, [r4, #0]
}
 8001494:	bd10      	pop	{r4, pc}
        log_error("Electronic throttle init failed");
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <electronic_throttle_init+0x4c>)
 8001498:	f000 f81e 	bl	80014d8 <log_error>
        return;
 800149c:	e7fa      	b.n	8001494 <electronic_throttle_init+0x34>
 800149e:	bf00      	nop
 80014a0:	437f0000 	.word	0x437f0000
 80014a4:	c37f0000 	.word	0xc37f0000
 80014a8:	080013dd 	.word	0x080013dd
 80014ac:	08009bac 	.word	0x08009bac

080014b0 <electronic_throttle_set>:
    if (!IS_IN_RANGE(position, (percent_t)0, (percent_t)100))
 80014b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	db06      	blt.n	80014c8 <electronic_throttle_set+0x18>
 80014ba:	eddf 7a06 	vldr	s15, [pc, #24]	@ 80014d4 <electronic_throttle_set+0x24>
 80014be:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	d901      	bls.n	80014cc <electronic_throttle_set+0x1c>
        etb->target_position = ELECTRONIC_THROTTLE_FAIL_SAFE_POSITION;
 80014c8:	2300      	movs	r3, #0
 80014ca:	6103      	str	r3, [r0, #16]
    etb->target_position = position;
 80014cc:	ed80 0a04 	vstr	s0, [r0, #16]
}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	42c80000 	.word	0x42c80000

080014d8 <log_error>:
#include "error_handling.h"


void log_error(const char* message)
{
    if (message == NULL) return;
 80014d8:	b1c0      	cbz	r0, 800150c <log_error+0x34>
{
 80014da:	b570      	push	{r4, r5, r6, lr}
 80014dc:	b09a      	sub	sp, #104	@ 0x68
 80014de:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 80014e0:	ac01      	add	r4, sp, #4
 80014e2:	2564      	movs	r5, #100	@ 0x64
 80014e4:	462a      	mov	r2, r5
 80014e6:	2100      	movs	r1, #0
 80014e8:	4620      	mov	r0, r4
 80014ea:	f007 fd09 	bl	8008f00 <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Error: %s\n", message);
 80014ee:	4633      	mov	r3, r6
 80014f0:	4a07      	ldr	r2, [pc, #28]	@ (8001510 <log_error+0x38>)
 80014f2:	4629      	mov	r1, r5
 80014f4:	4620      	mov	r0, r4
 80014f6:	f007 fccd 	bl	8008e94 <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 80014fa:	4620      	mov	r0, r4
 80014fc:	f7fe fe50 	bl	80001a0 <strlen>
 8001500:	b281      	uxth	r1, r0
 8001502:	4620      	mov	r0, r4
 8001504:	f006 fcb2 	bl	8007e6c <CDC_Transmit_FS>
}
 8001508:	b01a      	add	sp, #104	@ 0x68
 800150a:	bd70      	pop	{r4, r5, r6, pc}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	08009bcc 	.word	0x08009bcc

08001514 <log_warning>:

void log_warning(const char* message)
{
    if (message == NULL) return;
 8001514:	b1c0      	cbz	r0, 8001548 <log_warning+0x34>
{
 8001516:	b570      	push	{r4, r5, r6, lr}
 8001518:	b09a      	sub	sp, #104	@ 0x68
 800151a:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 800151c:	ac01      	add	r4, sp, #4
 800151e:	2564      	movs	r5, #100	@ 0x64
 8001520:	462a      	mov	r2, r5
 8001522:	2100      	movs	r1, #0
 8001524:	4620      	mov	r0, r4
 8001526:	f007 fceb 	bl	8008f00 <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Warning: %s\n", message);
 800152a:	4633      	mov	r3, r6
 800152c:	4a07      	ldr	r2, [pc, #28]	@ (800154c <log_warning+0x38>)
 800152e:	4629      	mov	r1, r5
 8001530:	4620      	mov	r0, r4
 8001532:	f007 fcaf 	bl	8008e94 <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 8001536:	4620      	mov	r0, r4
 8001538:	f7fe fe32 	bl	80001a0 <strlen>
 800153c:	b281      	uxth	r1, r0
 800153e:	4620      	mov	r0, r4
 8001540:	f006 fc94 	bl	8007e6c <CDC_Transmit_FS>
 8001544:	b01a      	add	sp, #104	@ 0x68
 8001546:	bd70      	pop	{r4, r5, r6, pc}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	08009bd8 	.word	0x08009bd8

08001550 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001550:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001552:	f006 f9bd 	bl	80078d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  controller_init();
 8001556:	f7ff fd5f 	bl	8001018 <controller_init>
  osDelay(100);
 800155a:	2064      	movs	r0, #100	@ 0x64
 800155c:	f7ff fcc8 	bl	8000ef0 <osDelay>
  
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8001560:	2001      	movs	r0, #1
 8001562:	f7ff fcc5 	bl	8000ef0 <osDelay>
  for(;;)
 8001566:	e7fb      	b.n	8001560 <StartDefaultTask+0x10>

08001568 <trigger_simulator_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_trigger_simulator_task */
void trigger_simulator_task(void *argument)
{
 8001568:	b508      	push	{r3, lr}
  /* USER CODE BEGIN trigger_simulator_task */
  trigger_simulator_init(60, 2, trigger_tooth_handle);
 800156a:	4a07      	ldr	r2, [pc, #28]	@ (8001588 <trigger_simulator_task+0x20>)
 800156c:	2102      	movs	r1, #2
 800156e:	203c      	movs	r0, #60	@ 0x3c
 8001570:	f006 f950 	bl	8007814 <trigger_simulator_init>
  /* Infinite loop */
  for(;;)
  {
    trigger_simulator_update(simulated_rpm);
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <trigger_simulator_task+0x24>)
 8001576:	ed93 0a00 	vldr	s0, [r3]
 800157a:	f006 f959 	bl	8007830 <trigger_simulator_update>
    osDelay(1);
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff fcb6 	bl	8000ef0 <osDelay>
  for(;;)
 8001584:	e7f6      	b.n	8001574 <trigger_simulator_task+0xc>
 8001586:	bf00      	nop
 8001588:	08007691 	.word	0x08007691
 800158c:	20000044 	.word	0x20000044

08001590 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001590:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001592:	4a07      	ldr	r2, [pc, #28]	@ (80015b0 <MX_FREERTOS_Init+0x20>)
 8001594:	2100      	movs	r1, #0
 8001596:	4807      	ldr	r0, [pc, #28]	@ (80015b4 <MX_FREERTOS_Init+0x24>)
 8001598:	f7ff fc50 	bl	8000e3c <osThreadNew>
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_FREERTOS_Init+0x28>)
 800159e:	6018      	str	r0, [r3, #0]
  trig_simHandle = osThreadNew(trigger_simulator_task, NULL, &trig_sim_attributes);
 80015a0:	4a06      	ldr	r2, [pc, #24]	@ (80015bc <MX_FREERTOS_Init+0x2c>)
 80015a2:	2100      	movs	r1, #0
 80015a4:	4806      	ldr	r0, [pc, #24]	@ (80015c0 <MX_FREERTOS_Init+0x30>)
 80015a6:	f7ff fc49 	bl	8000e3c <osThreadNew>
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <MX_FREERTOS_Init+0x34>)
 80015ac:	6018      	str	r0, [r3, #0]
}
 80015ae:	bd08      	pop	{r3, pc}
 80015b0:	08009d98 	.word	0x08009d98
 80015b4:	08001551 	.word	0x08001551
 80015b8:	20000a34 	.word	0x20000a34
 80015bc:	08009d74 	.word	0x08009d74
 80015c0:	08001569 	.word	0x08001569
 80015c4:	20000a30 	.word	0x20000a30

080015c8 <governer_update>:
    osTimerStart(timer, 1);
    
}

void governer_update()
{
 80015c8:	b510      	push	{r4, lr}
 80015ca:	ed2d 8b02 	vpush	{d8}
    if (governer_etb == NULL)
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <governer_update+0x6c>)
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	b178      	cbz	r0, 80015f4 <governer_update+0x2c>
        log_error("Governer no init!");
        return;
    }
    percent_t throttle_setpoint = ELECTRONIC_THROTTLE_FAIL_SAFE_POSITION;

    if (engine.spinning_state != SS_RUNNING)
 80015d4:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <governer_update+0x70>)
 80015d6:	7c5b      	ldrb	r3, [r3, #17]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d00f      	beq.n	80015fc <governer_update+0x34>
    {
        throttle_setpoint = configuration.cranking_throttle;
        engine.governer_status = GOVERNER_STATUS_IGNORED;
 80015dc:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <governer_update+0x70>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        electronic_throttle_set(governer_etb, throttle_setpoint);
 80015e4:	4b15      	ldr	r3, [pc, #84]	@ (800163c <governer_update+0x74>)
 80015e6:	ed93 0a04 	vldr	s0, [r3, #16]
 80015ea:	f7ff ff61 	bl	80014b0 <electronic_throttle_set>
        pid_set_setpoint(&governer_pid, configuration.governer_target_rpm);
        rpm_t rpm = crankshaft_get_rpm();
        throttle_setpoint = pid_compute(&governer_pid, get_time_us(), rpm);
        electronic_throttle_set(governer_etb, throttle_setpoint);
    }
}
 80015ee:	ecbd 8b02 	vpop	{d8}
 80015f2:	bd10      	pop	{r4, pc}
        log_error("Governer no init!");
 80015f4:	4812      	ldr	r0, [pc, #72]	@ (8001640 <governer_update+0x78>)
 80015f6:	f7ff ff6f 	bl	80014d8 <log_error>
        return;
 80015fa:	e7f8      	b.n	80015ee <governer_update+0x26>
        engine.governer_status = GOVERNER_STATUS_TARGET;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <governer_update+0x70>)
 80015fe:	2202      	movs	r2, #2
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        pid_set_setpoint(&governer_pid, configuration.governer_target_rpm);
 8001604:	4c0f      	ldr	r4, [pc, #60]	@ (8001644 <governer_update+0x7c>)
 8001606:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <governer_update+0x74>)
 8001608:	ed93 0a17 	vldr	s0, [r3, #92]	@ 0x5c
 800160c:	4620      	mov	r0, r4
 800160e:	f000 fbfa 	bl	8001e06 <pid_set_setpoint>
        rpm_t rpm = crankshaft_get_rpm();
 8001612:	f006 f831 	bl	8007678 <crankshaft_get_rpm>
 8001616:	eeb0 8a40 	vmov.f32	s16, s0
        throttle_setpoint = pid_compute(&governer_pid, get_time_us(), rpm);
 800161a:	f005 fed1 	bl	80073c0 <get_time_us>
 800161e:	4601      	mov	r1, r0
 8001620:	eeb0 0a48 	vmov.f32	s0, s16
 8001624:	4620      	mov	r0, r4
 8001626:	f000 fbf1 	bl	8001e0c <pid_compute>
        electronic_throttle_set(governer_etb, throttle_setpoint);
 800162a:	4b02      	ldr	r3, [pc, #8]	@ (8001634 <governer_update+0x6c>)
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	f7ff ff3f 	bl	80014b0 <electronic_throttle_set>
 8001632:	e7dc      	b.n	80015ee <governer_update+0x26>
 8001634:	20000a74 	.word	0x20000a74
 8001638:	2000095c 	.word	0x2000095c
 800163c:	2000099c 	.word	0x2000099c
 8001640:	08009c00 	.word	0x08009c00
 8001644:	20000a38 	.word	0x20000a38

08001648 <governer_init>:
{
 8001648:	b510      	push	{r4, lr}
    if (etb == NULL)
 800164a:	b1b8      	cbz	r0, 800167c <governer_init+0x34>
    governer_etb = etb;
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <governer_init+0x3c>)
 800164e:	6010      	str	r0, [r2, #0]
    pid_init(&governer_pid);
 8001650:	4c0d      	ldr	r4, [pc, #52]	@ (8001688 <governer_init+0x40>)
 8001652:	4620      	mov	r0, r4
 8001654:	f000 fbce 	bl	8001df4 <pid_init>
    governer_pid.limit_output_max = (percent_t)100;
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <governer_init+0x44>)
 800165a:	6163      	str	r3, [r4, #20]
    governer_pid.limit_output_min = (percent_t)0;
 800165c:	2300      	movs	r3, #0
 800165e:	6123      	str	r3, [r4, #16]
    pid_set_tuning(&governer_pid, &configuration.governer_pid);
 8001660:	490b      	ldr	r1, [pc, #44]	@ (8001690 <governer_init+0x48>)
 8001662:	4620      	mov	r0, r4
 8001664:	f000 fc4e 	bl	8001f04 <pid_set_tuning>
    osTimerId_t timer = osTimerNew(governer_update, osTimerPeriodic, NULL, NULL);
 8001668:	2300      	movs	r3, #0
 800166a:	461a      	mov	r2, r3
 800166c:	2101      	movs	r1, #1
 800166e:	4809      	ldr	r0, [pc, #36]	@ (8001694 <governer_init+0x4c>)
 8001670:	f7ff fc4c 	bl	8000f0c <osTimerNew>
    osTimerStart(timer, 1);
 8001674:	2101      	movs	r1, #1
 8001676:	f7ff fc9d 	bl	8000fb4 <osTimerStart>
}
 800167a:	bd10      	pop	{r4, pc}
        log_error("Governer init failed!");
 800167c:	4806      	ldr	r0, [pc, #24]	@ (8001698 <governer_init+0x50>)
 800167e:	f7ff ff2b 	bl	80014d8 <log_error>
        return;
 8001682:	e7fa      	b.n	800167a <governer_init+0x32>
 8001684:	20000a74 	.word	0x20000a74
 8001688:	20000a38 	.word	0x20000a38
 800168c:	42c80000 	.word	0x42c80000
 8001690:	20000a18 	.word	0x20000a18
 8001694:	080015c9 	.word	0x080015c9
 8001698:	08009c14 	.word	0x08009c14

0800169c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800169c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016a0:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	ad05      	add	r5, sp, #20
 80016a4:	2400      	movs	r4, #0
 80016a6:	9405      	str	r4, [sp, #20]
 80016a8:	9406      	str	r4, [sp, #24]
 80016aa:	9407      	str	r4, [sp, #28]
 80016ac:	9408      	str	r4, [sp, #32]
 80016ae:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b0:	9401      	str	r4, [sp, #4]
 80016b2:	4b27      	ldr	r3, [pc, #156]	@ (8001750 <MX_GPIO_Init+0xb4>)
 80016b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016b6:	f042 0204 	orr.w	r2, r2, #4
 80016ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80016bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016be:	f002 0204 	and.w	r2, r2, #4
 80016c2:	9201      	str	r2, [sp, #4]
 80016c4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016c6:	9402      	str	r4, [sp, #8]
 80016c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80016d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016d2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80016d6:	9202      	str	r2, [sp, #8]
 80016d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	9403      	str	r4, [sp, #12]
 80016dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80016e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016e6:	f002 0201 	and.w	r2, r2, #1
 80016ea:	9203      	str	r2, [sp, #12]
 80016ec:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	9404      	str	r4, [sp, #16]
 80016f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016f2:	f042 0202 	orr.w	r2, r2, #2
 80016f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	9304      	str	r3, [sp, #16]
 8001700:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001702:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 8001758 <MX_GPIO_Init+0xbc>
 8001706:	4622      	mov	r2, r4
 8001708:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800170c:	4640      	mov	r0, r8
 800170e:	f001 ff40 	bl	8003592 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IGNITION_OUTPUT4_Pin|IGNITION_OUTPUT3_Pin|IGNITION_OUTPUT2_Pin|IGNITION_OUTPUT1_Pin, GPIO_PIN_RESET);
 8001712:	4e10      	ldr	r6, [pc, #64]	@ (8001754 <MX_GPIO_Init+0xb8>)
 8001714:	4622      	mov	r2, r4
 8001716:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800171a:	4630      	mov	r0, r6
 800171c:	f001 ff39 	bl	8003592 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001720:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001724:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2701      	movs	r7, #1
 8001728:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800172e:	4629      	mov	r1, r5
 8001730:	4640      	mov	r0, r8
 8001732:	f001 fe43 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : IGNITION_OUTPUT4_Pin IGNITION_OUTPUT3_Pin IGNITION_OUTPUT2_Pin IGNITION_OUTPUT1_Pin */
  GPIO_InitStruct.Pin = IGNITION_OUTPUT4_Pin|IGNITION_OUTPUT3_Pin|IGNITION_OUTPUT2_Pin|IGNITION_OUTPUT1_Pin;
 8001736:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800173a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001742:	4629      	mov	r1, r5
 8001744:	4630      	mov	r0, r6
 8001746:	f001 fe39 	bl	80033bc <HAL_GPIO_Init>

}
 800174a:	b00a      	add	sp, #40	@ 0x28
 800174c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	40020400 	.word	0x40020400
 8001758:	40020800 	.word	0x40020800

0800175c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800175c:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800175e:	f012 0f07 	tst.w	r2, #7
 8001762:	d01e      	beq.n	80017a2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001764:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001766:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800176a:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 800176e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001770:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001772:	480e      	ldr	r0, [pc, #56]	@ (80017ac <prvHeapInit+0x50>)
 8001774:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001776:	2100      	movs	r1, #0
 8001778:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800177a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800177c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800177e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8001782:	480b      	ldr	r0, [pc, #44]	@ (80017b0 <prvHeapInit+0x54>)
 8001784:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8001786:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001788:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800178a:	1a99      	subs	r1, r3, r2
 800178c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800178e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <prvHeapInit+0x58>)
 8001792:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001794:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <prvHeapInit+0x5c>)
 8001796:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <prvHeapInit+0x60>)
 800179a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800179e:	601a      	str	r2, [r3, #0]
}
 80017a0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80017a2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80017a6:	e7e4      	b.n	8001772 <prvHeapInit+0x16>
 80017a8:	20000a98 	.word	0x20000a98
 80017ac:	20000a90 	.word	0x20000a90
 80017b0:	20000a8c 	.word	0x20000a8c
 80017b4:	20000a84 	.word	0x20000a84
 80017b8:	20000a88 	.word	0x20000a88
 80017bc:	20000a78 	.word	0x20000a78

080017c0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80017c0:	4b16      	ldr	r3, [pc, #88]	@ (800181c <prvInsertBlockIntoFreeList+0x5c>)
 80017c2:	461a      	mov	r2, r3
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4283      	cmp	r3, r0
 80017c8:	d3fb      	bcc.n	80017c2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80017ca:	6851      	ldr	r1, [r2, #4]
 80017cc:	eb02 0c01 	add.w	ip, r2, r1
 80017d0:	4584      	cmp	ip, r0
 80017d2:	d009      	beq.n	80017e8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80017d4:	6841      	ldr	r1, [r0, #4]
 80017d6:	eb00 0c01 	add.w	ip, r0, r1
 80017da:	4563      	cmp	r3, ip
 80017dc:	d009      	beq.n	80017f2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80017de:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80017e0:	4290      	cmp	r0, r2
 80017e2:	d019      	beq.n	8001818 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80017e4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 80017e6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80017e8:	6840      	ldr	r0, [r0, #4]
 80017ea:	4401      	add	r1, r0
 80017ec:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80017ee:	4610      	mov	r0, r2
 80017f0:	e7f0      	b.n	80017d4 <prvInsertBlockIntoFreeList+0x14>
{
 80017f2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80017f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001820 <prvInsertBlockIntoFreeList+0x60>)
 80017f6:	6824      	ldr	r4, [r4, #0]
 80017f8:	42a3      	cmp	r3, r4
 80017fa:	d00b      	beq.n	8001814 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4419      	add	r1, r3
 8001800:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001802:	6813      	ldr	r3, [r2, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8001808:	4290      	cmp	r0, r2
 800180a:	d000      	beq.n	800180e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800180c:	6010      	str	r0, [r2, #0]
	}
}
 800180e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001812:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001814:	6004      	str	r4, [r0, #0]
 8001816:	e7f7      	b.n	8001808 <prvInsertBlockIntoFreeList+0x48>
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000a90 	.word	0x20000a90
 8001820:	20000a8c 	.word	0x20000a8c

08001824 <pvPortMalloc>:
{
 8001824:	b538      	push	{r3, r4, r5, lr}
 8001826:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001828:	f004 fe80 	bl	800652c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800182c:	4b38      	ldr	r3, [pc, #224]	@ (8001910 <pvPortMalloc+0xec>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	b1b3      	cbz	r3, 8001860 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001832:	4b38      	ldr	r3, [pc, #224]	@ (8001914 <pvPortMalloc+0xf0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	421c      	tst	r4, r3
 8001838:	d150      	bne.n	80018dc <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 800183a:	2c00      	cmp	r4, #0
 800183c:	d050      	beq.n	80018e0 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 800183e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001842:	f014 0f07 	tst.w	r4, #7
 8001846:	d002      	beq.n	800184e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001848:	f022 0207 	bic.w	r2, r2, #7
 800184c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800184e:	2a00      	cmp	r2, #0
 8001850:	d055      	beq.n	80018fe <pvPortMalloc+0xda>
 8001852:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <pvPortMalloc+0xf4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4293      	cmp	r3, r2
 8001858:	d353      	bcc.n	8001902 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 800185a:	4930      	ldr	r1, [pc, #192]	@ (800191c <pvPortMalloc+0xf8>)
 800185c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800185e:	e004      	b.n	800186a <pvPortMalloc+0x46>
			prvHeapInit();
 8001860:	f7ff ff7c 	bl	800175c <prvHeapInit>
 8001864:	e7e5      	b.n	8001832 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8001866:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8001868:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800186a:	6863      	ldr	r3, [r4, #4]
 800186c:	4293      	cmp	r3, r2
 800186e:	d202      	bcs.n	8001876 <pvPortMalloc+0x52>
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f7      	bne.n	8001866 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8001876:	4b26      	ldr	r3, [pc, #152]	@ (8001910 <pvPortMalloc+0xec>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	42a3      	cmp	r3, r4
 800187c:	d043      	beq.n	8001906 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800187e:	680d      	ldr	r5, [r1, #0]
 8001880:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001886:	6863      	ldr	r3, [r4, #4]
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	2b10      	cmp	r3, #16
 800188c:	d910      	bls.n	80018b0 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800188e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001890:	f010 0f07 	tst.w	r0, #7
 8001894:	d008      	beq.n	80018a8 <pvPortMalloc+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800189a:	f383 8811 	msr	BASEPRI, r3
 800189e:	f3bf 8f6f 	isb	sy
 80018a2:	f3bf 8f4f 	dsb	sy
 80018a6:	e7fe      	b.n	80018a6 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80018a8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80018aa:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80018ac:	f7ff ff88 	bl	80017c0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80018b0:	6862      	ldr	r2, [r4, #4]
 80018b2:	4919      	ldr	r1, [pc, #100]	@ (8001918 <pvPortMalloc+0xf4>)
 80018b4:	680b      	ldr	r3, [r1, #0]
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80018ba:	4919      	ldr	r1, [pc, #100]	@ (8001920 <pvPortMalloc+0xfc>)
 80018bc:	6809      	ldr	r1, [r1, #0]
 80018be:	428b      	cmp	r3, r1
 80018c0:	d201      	bcs.n	80018c6 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80018c2:	4917      	ldr	r1, [pc, #92]	@ (8001920 <pvPortMalloc+0xfc>)
 80018c4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80018c6:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <pvPortMalloc+0xf0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 80018d2:	4a14      	ldr	r2, [pc, #80]	@ (8001924 <pvPortMalloc+0x100>)
 80018d4:	6813      	ldr	r3, [r2, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e002      	b.n	80018e2 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 80018dc:	2500      	movs	r5, #0
 80018de:	e000      	b.n	80018e2 <pvPortMalloc+0xbe>
 80018e0:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 80018e2:	f004 febd 	bl	8006660 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80018e6:	f015 0f07 	tst.w	r5, #7
 80018ea:	d00e      	beq.n	800190a <pvPortMalloc+0xe6>
 80018ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018f0:	f383 8811 	msr	BASEPRI, r3
 80018f4:	f3bf 8f6f 	isb	sy
 80018f8:	f3bf 8f4f 	dsb	sy
 80018fc:	e7fe      	b.n	80018fc <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 80018fe:	2500      	movs	r5, #0
 8001900:	e7ef      	b.n	80018e2 <pvPortMalloc+0xbe>
 8001902:	2500      	movs	r5, #0
 8001904:	e7ed      	b.n	80018e2 <pvPortMalloc+0xbe>
 8001906:	2500      	movs	r5, #0
 8001908:	e7eb      	b.n	80018e2 <pvPortMalloc+0xbe>
}
 800190a:	4628      	mov	r0, r5
 800190c:	bd38      	pop	{r3, r4, r5, pc}
 800190e:	bf00      	nop
 8001910:	20000a8c 	.word	0x20000a8c
 8001914:	20000a78 	.word	0x20000a78
 8001918:	20000a88 	.word	0x20000a88
 800191c:	20000a90 	.word	0x20000a90
 8001920:	20000a84 	.word	0x20000a84
 8001924:	20000a80 	.word	0x20000a80

08001928 <vPortFree>:
	if( pv != NULL )
 8001928:	2800      	cmp	r0, #0
 800192a:	d034      	beq.n	8001996 <vPortFree+0x6e>
{
 800192c:	b538      	push	{r3, r4, r5, lr}
 800192e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8001930:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001934:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001938:	4a17      	ldr	r2, [pc, #92]	@ (8001998 <vPortFree+0x70>)
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	4213      	tst	r3, r2
 800193e:	d108      	bne.n	8001952 <vPortFree+0x2a>
 8001940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001944:	f383 8811 	msr	BASEPRI, r3
 8001948:	f3bf 8f6f 	isb	sy
 800194c:	f3bf 8f4f 	dsb	sy
 8001950:	e7fe      	b.n	8001950 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001952:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001956:	b141      	cbz	r1, 800196a <vPortFree+0x42>
 8001958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800195c:	f383 8811 	msr	BASEPRI, r3
 8001960:	f3bf 8f6f 	isb	sy
 8001964:	f3bf 8f4f 	dsb	sy
 8001968:	e7fe      	b.n	8001968 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800196a:	ea23 0302 	bic.w	r3, r3, r2
 800196e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001972:	f004 fddb 	bl	800652c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001976:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800197a:	4a08      	ldr	r2, [pc, #32]	@ (800199c <vPortFree+0x74>)
 800197c:	6813      	ldr	r3, [r2, #0]
 800197e:	440b      	add	r3, r1
 8001980:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001982:	4628      	mov	r0, r5
 8001984:	f7ff ff1c 	bl	80017c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001988:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <vPortFree+0x78>)
 800198a:	6813      	ldr	r3, [r2, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8001990:	f004 fe66 	bl	8006660 <xTaskResumeAll>
}
 8001994:	bd38      	pop	{r3, r4, r5, pc}
 8001996:	4770      	bx	lr
 8001998:	20000a78 	.word	0x20000a78
 800199c:	20000a88 	.word	0x20000a88
 80019a0:	20000a7c 	.word	0x20000a7c

080019a4 <ignition_coil_begin_charge>:
 * 
 * @param coil_index The index of the coil to be charged.
 */
void ignition_coil_begin_charge(void *arg)
{
    if (arg == NULL)
 80019a4:	b198      	cbz	r0, 80019ce <ignition_coil_begin_charge+0x2a>
{
 80019a6:	b508      	push	{r3, lr}
    {
        return;
    }
    uint8_t coil_index = *(uint8_t*)arg;
 80019a8:	7803      	ldrb	r3, [r0, #0]

    if (coil_index > IGNITION_MAX_OUTPUTS - 1)
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d80b      	bhi.n	80019c6 <ignition_coil_begin_charge+0x22>
    {
        log_error("Unkown ignition output");
        return;
    }
    ignition_coil_state[coil_index] = IGNITION_COIL_STATE_CHARGING;
 80019ae:	2201      	movs	r2, #1
 80019b0:	4907      	ldr	r1, [pc, #28]	@ (80019d0 <ignition_coil_begin_charge+0x2c>)
 80019b2:	54ca      	strb	r2, [r1, r3]
    HAL_GPIO_WritePin(ignition_outputs[coil_index].gpio, ignition_outputs[coil_index].pin, GPIO_PIN_SET);
 80019b4:	4807      	ldr	r0, [pc, #28]	@ (80019d4 <ignition_coil_begin_charge+0x30>)
 80019b6:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
 80019ba:	8889      	ldrh	r1, [r1, #4]
 80019bc:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 80019c0:	f001 fde7 	bl	8003592 <HAL_GPIO_WritePin>
}
 80019c4:	bd08      	pop	{r3, pc}
        log_error("Unkown ignition output");
 80019c6:	4804      	ldr	r0, [pc, #16]	@ (80019d8 <ignition_coil_begin_charge+0x34>)
 80019c8:	f7ff fd86 	bl	80014d8 <log_error>
        return;
 80019cc:	e7fa      	b.n	80019c4 <ignition_coil_begin_charge+0x20>
 80019ce:	4770      	bx	lr
 80019d0:	200046a0 	.word	0x200046a0
 80019d4:	200046a4 	.word	0x200046a4
 80019d8:	08009c2c 	.word	0x08009c2c

080019dc <ignition_coil_fire_spark>:
 * 
 * @param coil_index The index of the coil to fire the spark from.
 */
void ignition_coil_fire_spark(void *arg)
{
    if (arg == NULL)
 80019dc:	b1b0      	cbz	r0, 8001a0c <ignition_coil_fire_spark+0x30>
{
 80019de:	b510      	push	{r4, lr}
    {
        return;
    }
    
    uint8_t coil_index = *(uint8_t*)arg;
 80019e0:	7803      	ldrb	r3, [r0, #0]
    if (coil_index > IGNITION_MAX_OUTPUTS - 1)
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d80e      	bhi.n	8001a04 <ignition_coil_fire_spark+0x28>
    {
        log_error("Unkown ignition output");
        return;
    }
    ignition_coil_state[coil_index] = IGNITION_COIL_STATE_NOT_CHARGING;
 80019e6:	2400      	movs	r4, #0
 80019e8:	4a09      	ldr	r2, [pc, #36]	@ (8001a10 <ignition_coil_fire_spark+0x34>)
 80019ea:	54d4      	strb	r4, [r2, r3]
    HAL_GPIO_WritePin(ignition_outputs[coil_index].gpio, ignition_outputs[coil_index].pin, GPIO_PIN_RESET);
 80019ec:	4809      	ldr	r0, [pc, #36]	@ (8001a14 <ignition_coil_fire_spark+0x38>)
 80019ee:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
 80019f2:	4622      	mov	r2, r4
 80019f4:	8889      	ldrh	r1, [r1, #4]
 80019f6:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 80019fa:	f001 fdca 	bl	8003592 <HAL_GPIO_WritePin>
    spark_is_in_progress = false;
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <ignition_coil_fire_spark+0x3c>)
 8001a00:	701c      	strb	r4, [r3, #0]
}
 8001a02:	bd10      	pop	{r4, pc}
        log_error("Unkown ignition output");
 8001a04:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <ignition_coil_fire_spark+0x40>)
 8001a06:	f7ff fd67 	bl	80014d8 <log_error>
        return;
 8001a0a:	e7fa      	b.n	8001a02 <ignition_coil_fire_spark+0x26>
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	200046a0 	.word	0x200046a0
 8001a14:	200046a4 	.word	0x200046a4
 8001a18:	20004699 	.word	0x20004699
 8001a1c:	08009c2c 	.word	0x08009c2c

08001a20 <ignition_init>:
{
 8001a20:	b510      	push	{r4, lr}
    if (output_conf == NULL)
 8001a22:	b190      	cbz	r0, 8001a4a <ignition_init+0x2a>
 8001a24:	4601      	mov	r1, r0
    switch (configuration.firing_order)
 8001a26:	4b26      	ldr	r3, [pc, #152]	@ (8001ac0 <ignition_init+0xa0>)
 8001a28:	7d1b      	ldrb	r3, [r3, #20]
 8001a2a:	b993      	cbnz	r3, 8001a52 <ignition_init+0x32>
            engine.cylinder_count = 4;
 8001a2c:	4a25      	ldr	r2, [pc, #148]	@ (8001ac4 <ignition_init+0xa4>)
 8001a2e:	2004      	movs	r0, #4
 8001a30:	7410      	strb	r0, [r2, #16]
            ignition_order[0] = 1;
 8001a32:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <ignition_init+0xa8>)
 8001a34:	2401      	movs	r4, #1
 8001a36:	701c      	strb	r4, [r3, #0]
            ignition_order[1] = 3;
 8001a38:	2403      	movs	r4, #3
 8001a3a:	705c      	strb	r4, [r3, #1]
            ignition_order[2] = 4;
 8001a3c:	7098      	strb	r0, [r3, #2]
            ignition_order[3] = 2;
 8001a3e:	2002      	movs	r0, #2
 8001a40:	70d8      	strb	r0, [r3, #3]
    engine.firing_interval = (angle_t)720 / engine.cylinder_count;
 8001a42:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <ignition_init+0xac>)
 8001a44:	6153      	str	r3, [r2, #20]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	e013      	b.n	8001a72 <ignition_init+0x52>
        log_error("ignition init failed. No output config");
 8001a4a:	4821      	ldr	r0, [pc, #132]	@ (8001ad0 <ignition_init+0xb0>)
 8001a4c:	f7ff fd44 	bl	80014d8 <log_error>
        return;
 8001a50:	e002      	b.n	8001a58 <ignition_init+0x38>
            log_error("ignition init failed. unkown firing order.");
 8001a52:	4820      	ldr	r0, [pc, #128]	@ (8001ad4 <ignition_init+0xb4>)
 8001a54:	f7ff fd40 	bl	80014d8 <log_error>
}
 8001a58:	bd10      	pop	{r4, pc}
        ignition_outputs[i].gpio = output_conf->output[i].gpio;
 8001a5a:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8001a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad8 <ignition_init+0xb8>)
 8001a60:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
        ignition_outputs[i].pin = output_conf->output[i].pin;
 8001a64:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 8001a68:	6840      	ldr	r0, [r0, #4]
 8001a6a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001a6e:	6050      	str	r0, [r2, #4]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8001a70:	3301      	adds	r3, #1
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d9f1      	bls.n	8001a5a <ignition_init+0x3a>
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8001a76:	2400      	movs	r4, #0
 8001a78:	e008      	b.n	8001a8c <ignition_init+0x6c>
        ignition_coil_state[i] = HAL_GPIO_ReadPin(ignition_outputs[i].gpio, ignition_outputs->pin);
 8001a7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <ignition_init+0xb8>)
 8001a7c:	8899      	ldrh	r1, [r3, #4]
 8001a7e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8001a82:	f001 fd7f 	bl	8003584 <HAL_GPIO_ReadPin>
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <ignition_init+0xbc>)
 8001a88:	5518      	strb	r0, [r3, r4]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8001a8a:	3401      	adds	r4, #1
 8001a8c:	2c03      	cmp	r4, #3
 8001a8e:	d9f4      	bls.n	8001a7a <ignition_init+0x5a>
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8001a90:	2400      	movs	r4, #0
 8001a92:	e007      	b.n	8001aa4 <ignition_init+0x84>
        HAL_GPIO_WritePin(ignition_outputs[i].gpio, ignition_outputs->pin, GPIO_PIN_RESET);
 8001a94:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <ignition_init+0xb8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	8899      	ldrh	r1, [r3, #4]
 8001a9a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8001a9e:	f001 fd78 	bl	8003592 <HAL_GPIO_WritePin>
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8001aa2:	3401      	adds	r4, #1
 8001aa4:	2c03      	cmp	r4, #3
 8001aa6:	d9f5      	bls.n	8001a94 <ignition_init+0x74>
    if (configuration.ignition_is_multi_spark && !IS_IN_RANGE(configuration.ignition_multi_spark_number_of_sparks, 0, IGNITION_MULTI_SPARK_MAX_SPARKS))
 8001aa8:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <ignition_init+0xa0>)
 8001aaa:	7f1b      	ldrb	r3, [r3, #28]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0d3      	beq.n	8001a58 <ignition_init+0x38>
 8001ab0:	4b03      	ldr	r3, [pc, #12]	@ (8001ac0 <ignition_init+0xa0>)
 8001ab2:	7f5b      	ldrb	r3, [r3, #29]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d9cf      	bls.n	8001a58 <ignition_init+0x38>
        log_warning("Multi spark is enabled but number of sparks are 0.");
 8001ab8:	4809      	ldr	r0, [pc, #36]	@ (8001ae0 <ignition_init+0xc0>)
 8001aba:	f7ff fd2b 	bl	8001514 <log_warning>
 8001abe:	e7cb      	b.n	8001a58 <ignition_init+0x38>
 8001ac0:	2000099c 	.word	0x2000099c
 8001ac4:	2000095c 	.word	0x2000095c
 8001ac8:	2000469c 	.word	0x2000469c
 8001acc:	43340000 	.word	0x43340000
 8001ad0:	08009c44 	.word	0x08009c44
 8001ad4:	08009c6c 	.word	0x08009c6c
 8001ad8:	200046a4 	.word	0x200046a4
 8001adc:	200046a0 	.word	0x200046a0
 8001ae0:	08009c98 	.word	0x08009c98

08001ae4 <ignition_trigger_event_handle>:
    if (configuration.ignition_mode == IM_NO_IGNITION)
 8001ae4:	4b55      	ldr	r3, [pc, #340]	@ (8001c3c <ignition_trigger_event_handle+0x158>)
 8001ae6:	7d5b      	ldrb	r3, [r3, #21]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80a5 	beq.w	8001c38 <ignition_trigger_event_handle+0x154>
{
 8001aee:	b530      	push	{r4, r5, lr}
 8001af0:	b085      	sub	sp, #20
    if (!IS_IN_RANGE(configuration.ignition_dwell, IGNITION_MIN_DWELL_TIME_MS, IGNITION_MAX_DWELL_TIME_MS))
 8001af2:	4b52      	ldr	r3, [pc, #328]	@ (8001c3c <ignition_trigger_event_handle+0x158>)
 8001af4:	edd3 7a06 	vldr	s15, [r3, #24]
 8001af8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	f2c0 808d 	blt.w	8001c22 <ignition_trigger_event_handle+0x13e>
 8001b08:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	f200 8085 	bhi.w	8001c22 <ignition_trigger_event_handle+0x13e>
    uint8_t phase = (uint8_t)(crankshaft_angle / engine.firing_interval);
 8001b18:	4b49      	ldr	r3, [pc, #292]	@ (8001c40 <ignition_trigger_event_handle+0x15c>)
 8001b1a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b1e:	eec0 6a07 	vdiv.f32	s13, s0, s14
 8001b22:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001b26:	edcd 6a01 	vstr	s13, [sp, #4]
 8001b2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    volatile angle_t next_spark_angle = phase * engine.firing_interval - spark_advance + engine.firing_interval;
 8001b2e:	ee06 3a90 	vmov	s13, r3
 8001b32:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001b36:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001b3a:	eeb3 6a0e 	vmov.f32	s12, #62	@ 0x41f00000  30.0
 8001b3e:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8001b42:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001b46:	ed8d 7a03 	vstr	s14, [sp, #12]
    volatile angle_t next_dwell_angle = next_spark_angle - (float)configuration.ignition_dwell * (float)1000 * degrees_per_microsecond(rpm);
 8001b4a:	ed9d 7a03 	vldr	s14, [sp, #12]
 8001b4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001c44 <ignition_trigger_event_handle+0x160>
 8001b52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 * @brief Function to calculate the degrees the engine turns in one microsecond.
 * @note Returns 0 if rpm is 0.
 */
static inline angle_t degrees_per_microsecond(rpm_t rpm)
{
    if (rpm == 0)
 8001b56:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5e:	d065      	beq.n	8001c2c <ignition_trigger_event_handle+0x148>
    {
        return 0.0f;
    }
    return (angle_t)(rpm * 360.0f) / (60.0f * 1e6f);
 8001b60:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8001c48 <ignition_trigger_event_handle+0x164>
 8001b64:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8001b68:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8001c4c <ignition_trigger_event_handle+0x168>
 8001b6c:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 8001b70:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b78:	edcd 7a02 	vstr	s15, [sp, #8]
    next_firing_cylinder_index = ignition_order[phase] - 1;
 8001b7c:	4a34      	ldr	r2, [pc, #208]	@ (8001c50 <ignition_trigger_event_handle+0x16c>)
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	4a34      	ldr	r2, [pc, #208]	@ (8001c54 <ignition_trigger_event_handle+0x170>)
 8001b84:	7013      	strb	r3, [r2, #0]
    if ((next_dwell_angle - crankshaft_angle) < 10 && !spark_is_in_progress && (next_dwell_angle - crankshaft_angle) > 0)
 8001b86:	eddd 7a02 	vldr	s15, [sp, #8]
 8001b8a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8001b8e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	d545      	bpl.n	8001c28 <ignition_trigger_event_handle+0x144>
 8001b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c58 <ignition_trigger_event_handle+0x174>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d141      	bne.n	8001c28 <ignition_trigger_event_handle+0x144>
 8001ba4:	eddd 7a02 	vldr	s15, [sp, #8]
 8001ba8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8001bac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	dd38      	ble.n	8001c28 <ignition_trigger_event_handle+0x144>
        spark_is_in_progress = true;
 8001bb6:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <ignition_trigger_event_handle+0x174>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
        time_us_t dwell_start_time_us = current_time_us + (time_us_t)((next_dwell_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 8001bbc:	ed9d 7a02 	vldr	s14, [sp, #8]
 8001bc0:	ee37 7a40 	vsub.f32	s14, s14, s0
    if (rpm == 0)
 8001bc4:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bcc:	d031      	beq.n	8001c32 <ignition_trigger_event_handle+0x14e>
    return (time_us_t) 60.0f * 1e6f / (rpm * 360.0f);
 8001bce:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8001c48 <ignition_trigger_event_handle+0x164>
 8001bd2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8001bd6:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001c4c <ignition_trigger_event_handle+0x168>
 8001bda:	eec6 7aa0 	vdiv.f32	s15, s13, s1
 8001bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bea:	eebc 7ac7 	vcvt.u32.f32	s14, s14
        time_us_t spark_start_time_us = current_time_us + (time_us_t)((next_spark_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 8001bee:	eddd 6a03 	vldr	s13, [sp, #12]
 8001bf2:	ee76 6ac0 	vsub.f32	s13, s13, s0
 8001bf6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfe:	ee17 4a90 	vmov	r4, s15
 8001c02:	4404      	add	r4, r0
        scheduler_schedule_event_with_arg(dwell_start_time_us, ignition_coil_begin_charge, (void*)&next_firing_cylinder_index);
 8001c04:	4d13      	ldr	r5, [pc, #76]	@ (8001c54 <ignition_trigger_event_handle+0x170>)
 8001c06:	462a      	mov	r2, r5
 8001c08:	4914      	ldr	r1, [pc, #80]	@ (8001c5c <ignition_trigger_event_handle+0x178>)
 8001c0a:	ee17 3a10 	vmov	r3, s14
 8001c0e:	4403      	add	r3, r0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f005 fc57 	bl	80074c4 <scheduler_schedule_event_with_arg>
        scheduler_schedule_event_with_arg(spark_start_time_us, ignition_coil_fire_spark, (void*)&next_firing_cylinder_index);
 8001c16:	462a      	mov	r2, r5
 8001c18:	4911      	ldr	r1, [pc, #68]	@ (8001c60 <ignition_trigger_event_handle+0x17c>)
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f005 fc52 	bl	80074c4 <scheduler_schedule_event_with_arg>
 8001c20:	e002      	b.n	8001c28 <ignition_trigger_event_handle+0x144>
        log_error("ignition dwell out of bounds.");
 8001c22:	4810      	ldr	r0, [pc, #64]	@ (8001c64 <ignition_trigger_event_handle+0x180>)
 8001c24:	f7ff fc58 	bl	80014d8 <log_error>
}
 8001c28:	b005      	add	sp, #20
 8001c2a:	bd30      	pop	{r4, r5, pc}
        return 0.0f;
 8001c2c:	ed9f 6a0e 	vldr	s12, [pc, #56]	@ 8001c68 <ignition_trigger_event_handle+0x184>
 8001c30:	e79e      	b.n	8001b70 <ignition_trigger_event_handle+0x8c>
        return 0;
 8001c32:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8001c6c <ignition_trigger_event_handle+0x188>
 8001c36:	e7d4      	b.n	8001be2 <ignition_trigger_event_handle+0xfe>
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	2000099c 	.word	0x2000099c
 8001c40:	2000095c 	.word	0x2000095c
 8001c44:	447a0000 	.word	0x447a0000
 8001c48:	43b40000 	.word	0x43b40000
 8001c4c:	4c64e1c0 	.word	0x4c64e1c0
 8001c50:	2000469c 	.word	0x2000469c
 8001c54:	20004698 	.word	0x20004698
 8001c58:	20004699 	.word	0x20004699
 8001c5c:	080019a5 	.word	0x080019a5
 8001c60:	080019dd 	.word	0x080019dd
 8001c64:	08009ccc 	.word	0x08009ccc
	...

08001c70 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c70:	f100 0308 	add.w	r3, r0, #8
 8001c74:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c76:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c7c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c7e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c84:	4770      	bx	lr

08001c86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c8a:	4770      	bx	lr

08001c8c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c8c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c8e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c94:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c96:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c98:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001c9a:	6803      	ldr	r3, [r0, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	6003      	str	r3, [r0, #0]
}
 8001ca0:	4770      	bx	lr

08001ca2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ca2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ca4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ca6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001caa:	d011      	beq.n	8001cd0 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001cac:	f100 0308 	add.w	r3, r0, #8
 8001cb0:	461c      	mov	r4, r3
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	42aa      	cmp	r2, r5
 8001cb8:	d9fa      	bls.n	8001cb0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cba:	6863      	ldr	r3, [r4, #4]
 8001cbc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cbe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001cc0:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001cc2:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001cc4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001cc6:	6803      	ldr	r3, [r0, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	6003      	str	r3, [r0, #0]
}
 8001ccc:	bc30      	pop	{r4, r5}
 8001cce:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cd0:	6904      	ldr	r4, [r0, #16]
 8001cd2:	e7f2      	b.n	8001cba <vListInsert+0x18>

08001cd4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001cd4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cd6:	6841      	ldr	r1, [r0, #4]
 8001cd8:	6882      	ldr	r2, [r0, #8]
 8001cda:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cdc:	6841      	ldr	r1, [r0, #4]
 8001cde:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4282      	cmp	r2, r0
 8001ce4:	d006      	beq.n	8001cf4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	3a01      	subs	r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001cf0:	6818      	ldr	r0, [r3, #0]
}
 8001cf2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001cf4:	6882      	ldr	r2, [r0, #8]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	e7f5      	b.n	8001ce6 <uxListRemove+0x12>
	...

08001cfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 8001cfe:	6802      	ldr	r2, [r0, #0]
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d000      	beq.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d06:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001d08:	f000 fe38 	bl	800297c <HAL_IncTick>
}
 8001d0c:	e7fb      	b.n	8001d06 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001d0e:	bf00      	nop
 8001d10:	40014800 	.word	0x40014800

08001d14 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001d14:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <Error_Handler+0x2>

08001d18 <SystemClock_Config>:
{
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d1c:	ac08      	add	r4, sp, #32
 8001d1e:	2230      	movs	r2, #48	@ 0x30
 8001d20:	2100      	movs	r1, #0
 8001d22:	4620      	mov	r0, r4
 8001d24:	f007 f8ec 	bl	8008f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9303      	str	r3, [sp, #12]
 8001d2c:	9304      	str	r3, [sp, #16]
 8001d2e:	9305      	str	r3, [sp, #20]
 8001d30:	9306      	str	r3, [sp, #24]
 8001d32:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	4a21      	ldr	r2, [pc, #132]	@ (8001dbc <SystemClock_Config+0xa4>)
 8001d38:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001d3a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001d3e:	6411      	str	r1, [r2, #64]	@ 0x40
 8001d40:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d42:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001d46:	9201      	str	r2, [sp, #4]
 8001d48:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc0 <SystemClock_Config+0xa8>)
 8001d4e:	6813      	ldr	r3, [r2, #0]
 8001d50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	6813      	ldr	r3, [r2, #0]
 8001d5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d60:	9302      	str	r3, [sp, #8]
 8001d62:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d6c:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d72:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d76:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001d78:	2319      	movs	r3, #25
 8001d7a:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d7c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d80:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d82:	2304      	movs	r3, #4
 8001d84:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d86:	2307      	movs	r3, #7
 8001d88:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f002 fa66 	bl	800425c <HAL_RCC_OscConfig>
 8001d90:	b978      	cbnz	r0, 8001db2 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d92:	230f      	movs	r3, #15
 8001d94:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d96:	2102      	movs	r1, #2
 8001d98:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d9e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001da2:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da4:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001da6:	a803      	add	r0, sp, #12
 8001da8:	f002 fca8 	bl	80046fc <HAL_RCC_ClockConfig>
 8001dac:	b918      	cbnz	r0, 8001db6 <SystemClock_Config+0x9e>
}
 8001dae:	b014      	add	sp, #80	@ 0x50
 8001db0:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001db2:	f7ff ffaf 	bl	8001d14 <Error_Handler>
    Error_Handler();
 8001db6:	f7ff ffad 	bl	8001d14 <Error_Handler>
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40007000 	.word	0x40007000

08001dc4 <main>:
{
 8001dc4:	b508      	push	{r3, lr}
  HAL_Init();
 8001dc6:	f000 fdbf 	bl	8002948 <HAL_Init>
  SystemClock_Config();
 8001dca:	f7ff ffa5 	bl	8001d18 <SystemClock_Config>
  MX_GPIO_Init();
 8001dce:	f7ff fc65 	bl	800169c <MX_GPIO_Init>
  MX_DMA_Init();
 8001dd2:	f7ff fae9 	bl	80013a8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001dd6:	f004 ffc1 	bl	8006d5c <MX_TIM3_Init>
  MX_ADC1_Init();
 8001dda:	f7fe fe61 	bl	8000aa0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001dde:	f004 ff45 	bl	8006c6c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001de2:	f004 fe53 	bl	8006a8c <MX_TIM2_Init>
  osKernelInitialize();
 8001de6:	f7fe fffb 	bl	8000de0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001dea:	f7ff fbd1 	bl	8001590 <MX_FREERTOS_Init>
  osKernelStart();
 8001dee:	f7ff f809 	bl	8000e04 <osKernelStart>
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <main+0x2e>

08001df4 <pid_init>:
#include "pid.h"

void pid_init(pid_t *pid)
{
    /* Clearing controller variables */
    pid->integrator = 0.0f;
 8001df4:	2300      	movs	r3, #0
 8001df6:	6203      	str	r3, [r0, #32]
    pid->differentiator = 0.0f;
 8001df8:	6243      	str	r3, [r0, #36]	@ 0x24
    pid->prev_error = 0.0f;
 8001dfa:	6283      	str	r3, [r0, #40]	@ 0x28
    pid->prev_input = 0.0f;
 8001dfc:	62c3      	str	r3, [r0, #44]	@ 0x2c

    pid->prev_controller_time_us = 0;
 8001dfe:	2200      	movs	r2, #0
 8001e00:	6302      	str	r2, [r0, #48]	@ 0x30
    pid->output = 0.0f;
 8001e02:	6383      	str	r3, [r0, #56]	@ 0x38

    /**
     * @todo implement checks for the parameters
     */
    
}
 8001e04:	4770      	bx	lr

08001e06 <pid_set_setpoint>:

void pid_set_setpoint(pid_t *pid, float setpoint)
{
    pid->setpoint = setpoint;
 8001e06:	ed80 0a0d 	vstr	s0, [r0, #52]	@ 0x34
}
 8001e0a:	4770      	bx	lr

08001e0c <pid_compute>:

float pid_compute(pid_t *pid, time_us_t current_time_us, float input)
{
    /* Compute the time between the function calls to determine T */
    time_us_t T_us = current_time_us - pid->prev_controller_time_us;
 8001e0c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001e0e:	1acb      	subs	r3, r1, r3
    float T_sec = (float)T_us / (float)1e6f;
 8001e10:	ee07 3a90 	vmov	s15, r3
 8001e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e18:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001f00 <pid_compute+0xf4>
 8001e1c:	eec7 6a87 	vdiv.f32	s13, s15, s14

    /* Finding the error */
    float error = pid->setpoint - input;
 8001e20:	ed90 6a0d 	vldr	s12, [r0, #52]	@ 0x34
 8001e24:	ee36 6a40 	vsub.f32	s12, s12, s0

    /* Finding the P-term */
    float proportional = pid->Kp * error;
 8001e28:	edd0 5a00 	vldr	s11, [r0]
 8001e2c:	ee65 5a86 	vmul.f32	s11, s11, s12

    /* Finding the integral term*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * T_sec *(error + pid->prev_error);
 8001e30:	ed90 7a08 	vldr	s14, [r0, #32]
 8001e34:	edd0 7a01 	vldr	s15, [r0, #4]
 8001e38:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8001e3c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8001e40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e44:	ed90 5a0a 	vldr	s10, [r0, #40]	@ 0x28
 8001e48:	ee35 5a06 	vadd.f32	s10, s10, s12
 8001e4c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8001e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e54:	edc0 7a08 	vstr	s15, [r0, #32]

    /* Anti-windup - works by clamping the integrator */
    if (pid->integrator > pid->limit_integrator_max)
 8001e58:	ed90 7a07 	vldr	s14, [r0, #28]
 8001e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e64:	dd38      	ble.n	8001ed8 <pid_compute+0xcc>
    {
        pid->integrator = pid->limit_integrator_max;
 8001e66:	ed80 7a08 	vstr	s14, [r0, #32]

    /* Finding the derivative term @note has a low pass filter */
    /**
     * @note only derivative on input has been implemented for now
     */
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 8001e6a:	edd0 7a02 	vldr	s15, [r0, #8]
 8001e6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e72:	ed90 7a0b 	vldr	s14, [r0, #44]	@ 0x2c
 8001e76:	ee30 7a47 	vsub.f32	s14, s0, s14
 8001e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
                          +(2.0f * pid->derivative_filter_tau - T_sec) * pid->differentiator)
 8001e7e:	ed90 7a03 	vldr	s14, [r0, #12]
 8001e82:	ee37 7a07 	vadd.f32	s14, s14, s14
 8001e86:	ee37 5a66 	vsub.f32	s10, s14, s13
 8001e8a:	edd0 4a09 	vldr	s9, [r0, #36]	@ 0x24
 8001e8e:	ee25 5a24 	vmul.f32	s10, s10, s9
 8001e92:	ee77 7a85 	vadd.f32	s15, s15, s10
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 8001e96:	eef1 7a67 	vneg.f32	s15, s15
                          / (2.0f * pid->derivative_filter_tau + T_sec);
 8001e9a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001e9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 8001ea2:	edc0 6a09 	vstr	s13, [r0, #36]	@ 0x24

    /* Summing the terms to make the output */
    pid->output = proportional + pid->integrator + pid->differentiator;
 8001ea6:	edd0 7a08 	vldr	s15, [r0, #32]
 8001eaa:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eb2:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38

    /* Clamp the output the the output bounds */
    if (pid->output > pid->limit_output_max)
 8001eb6:	ed90 7a05 	vldr	s14, [r0, #20]
 8001eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec2:	dd13      	ble.n	8001eec <pid_compute+0xe0>
    {
        pid->output = pid->limit_output_max;
 8001ec4:	ed80 7a0e 	vstr	s14, [r0, #56]	@ 0x38
    {
        pid->output = pid->limit_output_min;
    }

    /* Save the variables for the next function call */
    pid->prev_error = error;
 8001ec8:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
    pid->prev_input = input;
 8001ecc:	ed80 0a0b 	vstr	s0, [r0, #44]	@ 0x2c
    pid->prev_controller_time_us = current_time_us;
 8001ed0:	6301      	str	r1, [r0, #48]	@ 0x30
    
    return pid->output;
}
 8001ed2:	ed90 0a0e 	vldr	s0, [r0, #56]	@ 0x38
 8001ed6:	4770      	bx	lr
    else if (pid->integrator < pid->limit_integrator_min)
 8001ed8:	ed90 7a06 	vldr	s14, [r0, #24]
 8001edc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee4:	d5c1      	bpl.n	8001e6a <pid_compute+0x5e>
        pid->integrator = pid->limit_integrator_min;
 8001ee6:	ed80 7a08 	vstr	s14, [r0, #32]
 8001eea:	e7be      	b.n	8001e6a <pid_compute+0x5e>
    else if (pid->output < pid->limit_output_min)
 8001eec:	ed90 7a04 	vldr	s14, [r0, #16]
 8001ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef8:	d5e6      	bpl.n	8001ec8 <pid_compute+0xbc>
        pid->output = pid->limit_output_min;
 8001efa:	ed80 7a0e 	vstr	s14, [r0, #56]	@ 0x38
 8001efe:	e7e3      	b.n	8001ec8 <pid_compute+0xbc>
 8001f00:	49742400 	.word	0x49742400

08001f04 <pid_set_tuning>:

void pid_set_tuning(pid_t *pid, pid_configuration_s *conf)
{
    if (pid == NULL)
 8001f04:	b158      	cbz	r0, 8001f1e <pid_set_tuning+0x1a>
        return;
    }
    /**
     * @todo provide propper range checks in the furture
     */
    pid->Kp = conf->Kp;
 8001f06:	680a      	ldr	r2, [r1, #0]
 8001f08:	6002      	str	r2, [r0, #0]
    pid->Ki = conf->Ki;
 8001f0a:	684a      	ldr	r2, [r1, #4]
 8001f0c:	6042      	str	r2, [r0, #4]
    pid->Kd = conf->Kd;
 8001f0e:	688a      	ldr	r2, [r1, #8]
 8001f10:	6082      	str	r2, [r0, #8]
    pid->limit_integrator_min = conf->limit_integrator_min;
 8001f12:	68ca      	ldr	r2, [r1, #12]
 8001f14:	6182      	str	r2, [r0, #24]
    pid->limit_integrator_max = conf->limit_integrator_max;
 8001f16:	690a      	ldr	r2, [r1, #16]
 8001f18:	61c2      	str	r2, [r0, #28]
    pid->derivative_filter_tau = conf->derivative_filter_tau;
 8001f1a:	694a      	ldr	r2, [r1, #20]
 8001f1c:	60c2      	str	r2, [r0, #12]
 8001f1e:	4770      	bx	lr

08001f20 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001f20:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001f26:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <prvTaskExitError+0x3c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2e:	d008      	beq.n	8001f42 <prvTaskExitError+0x22>
 8001f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f34:	f383 8811 	msr	BASEPRI, r3
 8001f38:	f3bf 8f6f 	isb	sy
 8001f3c:	f3bf 8f4f 	dsb	sy
 8001f40:	e7fe      	b.n	8001f40 <prvTaskExitError+0x20>
 8001f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f46:	f383 8811 	msr	BASEPRI, r3
 8001f4a:	f3bf 8f6f 	isb	sy
 8001f4e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001f52:	9b01      	ldr	r3, [sp, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0fc      	beq.n	8001f52 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001f58:	b002      	add	sp, #8
 8001f5a:	4770      	bx	lr
 8001f5c:	20000048 	.word	0x20000048

08001f60 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001f60:	4808      	ldr	r0, [pc, #32]	@ (8001f84 <prvPortStartFirstTask+0x24>)
 8001f62:	6800      	ldr	r0, [r0, #0]
 8001f64:	6800      	ldr	r0, [r0, #0]
 8001f66:	f380 8808 	msr	MSP, r0
 8001f6a:	f04f 0000 	mov.w	r0, #0
 8001f6e:	f380 8814 	msr	CONTROL, r0
 8001f72:	b662      	cpsie	i
 8001f74:	b661      	cpsie	f
 8001f76:	f3bf 8f4f 	dsb	sy
 8001f7a:	f3bf 8f6f 	isb	sy
 8001f7e:	df00      	svc	0
 8001f80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001f82:	0000      	.short	0x0000
 8001f84:	e000ed08 	.word	0xe000ed08

08001f88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001f88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8001f98 <vPortEnableVFP+0x10>
 8001f8c:	6801      	ldr	r1, [r0, #0]
 8001f8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8001f92:	6001      	str	r1, [r0, #0]
 8001f94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001f96:	0000      	.short	0x0000
 8001f98:	e000ed88 	.word	0xe000ed88

08001f9c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001f9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fa0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001fa4:	f021 0101 	bic.w	r1, r1, #1
 8001fa8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <pxPortInitialiseStack+0x28>)
 8001fae:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001fb2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001fb6:	f06f 0302 	mvn.w	r3, #2
 8001fba:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001fbe:	3844      	subs	r0, #68	@ 0x44
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	08001f21 	.word	0x08001f21
	...

08001fd0 <SVC_Handler>:
	__asm volatile (
 8001fd0:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <pxCurrentTCBConst2>)
 8001fd2:	6819      	ldr	r1, [r3, #0]
 8001fd4:	6808      	ldr	r0, [r1, #0]
 8001fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fda:	f380 8809 	msr	PSP, r0
 8001fde:	f3bf 8f6f 	isb	sy
 8001fe2:	f04f 0000 	mov.w	r0, #0
 8001fe6:	f380 8811 	msr	BASEPRI, r0
 8001fea:	4770      	bx	lr
 8001fec:	f3af 8000 	nop.w

08001ff0 <pxCurrentTCBConst2>:
 8001ff0:	20004c58 	.word	0x20004c58

08001ff4 <vPortEnterCritical>:
 8001ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ff8:	f383 8811 	msr	BASEPRI, r3
 8001ffc:	f3bf 8f6f 	isb	sy
 8002000:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002004:	4a0b      	ldr	r2, [pc, #44]	@ (8002034 <vPortEnterCritical+0x40>)
 8002006:	6813      	ldr	r3, [r2, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800200c:	2b01      	cmp	r3, #1
 800200e:	d000      	beq.n	8002012 <vPortEnterCritical+0x1e>
}
 8002010:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002012:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002016:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800201a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800201e:	d0f7      	beq.n	8002010 <vPortEnterCritical+0x1c>
 8002020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002024:	f383 8811 	msr	BASEPRI, r3
 8002028:	f3bf 8f6f 	isb	sy
 800202c:	f3bf 8f4f 	dsb	sy
 8002030:	e7fe      	b.n	8002030 <vPortEnterCritical+0x3c>
 8002032:	bf00      	nop
 8002034:	20000048 	.word	0x20000048

08002038 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002038:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <vPortExitCritical+0x28>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	b943      	cbnz	r3, 8002050 <vPortExitCritical+0x18>
 800203e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002042:	f383 8811 	msr	BASEPRI, r3
 8002046:	f3bf 8f6f 	isb	sy
 800204a:	f3bf 8f4f 	dsb	sy
 800204e:	e7fe      	b.n	800204e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002050:	3b01      	subs	r3, #1
 8002052:	4a03      	ldr	r2, [pc, #12]	@ (8002060 <vPortExitCritical+0x28>)
 8002054:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002056:	b90b      	cbnz	r3, 800205c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002058:	f383 8811 	msr	BASEPRI, r3
}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000048 	.word	0x20000048
	...

08002070 <PendSV_Handler>:
	__asm volatile
 8002070:	f3ef 8009 	mrs	r0, PSP
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <pxCurrentTCBConst>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	f01e 0f10 	tst.w	lr, #16
 8002080:	bf08      	it	eq
 8002082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800208a:	6010      	str	r0, [r2, #0]
 800208c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002090:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002094:	f380 8811 	msr	BASEPRI, r0
 8002098:	f3bf 8f4f 	dsb	sy
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	f004 fb80 	bl	80067a4 <vTaskSwitchContext>
 80020a4:	f04f 0000 	mov.w	r0, #0
 80020a8:	f380 8811 	msr	BASEPRI, r0
 80020ac:	bc09      	pop	{r0, r3}
 80020ae:	6819      	ldr	r1, [r3, #0]
 80020b0:	6808      	ldr	r0, [r1, #0]
 80020b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020b6:	f01e 0f10 	tst.w	lr, #16
 80020ba:	bf08      	it	eq
 80020bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80020c0:	f380 8809 	msr	PSP, r0
 80020c4:	f3bf 8f6f 	isb	sy
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	f3af 8000 	nop.w

080020d0 <pxCurrentTCBConst>:
 80020d0:	20004c58 	.word	0x20004c58

080020d4 <xPortSysTickHandler>:
{
 80020d4:	b508      	push	{r3, lr}
	__asm volatile
 80020d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020da:	f383 8811 	msr	BASEPRI, r3
 80020de:	f3bf 8f6f 	isb	sy
 80020e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80020e6:	f004 fa2f 	bl	8006548 <xTaskIncrementTick>
 80020ea:	b128      	cbz	r0, 80020f8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80020ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80020f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80020f8:	2300      	movs	r3, #0
 80020fa:	f383 8811 	msr	BASEPRI, r3
}
 80020fe:	bd08      	pop	{r3, pc}

08002100 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002100:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002104:	2300      	movs	r3, #0
 8002106:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002108:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800210a:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <vPortSetupTimerInterrupt+0x20>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4905      	ldr	r1, [pc, #20]	@ (8002124 <vPortSetupTimerInterrupt+0x24>)
 8002110:	fba1 1303 	umull	r1, r3, r1, r3
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	3b01      	subs	r3, #1
 8002118:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800211a:	2307      	movs	r3, #7
 800211c:	6113      	str	r3, [r2, #16]
}
 800211e:	4770      	bx	lr
 8002120:	20000054 	.word	0x20000054
 8002124:	10624dd3 	.word	0x10624dd3

08002128 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002128:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800212c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002130:	4b3d      	ldr	r3, [pc, #244]	@ (8002228 <xPortStartScheduler+0x100>)
 8002132:	429a      	cmp	r2, r3
 8002134:	d01c      	beq.n	8002170 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002136:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800213a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800213e:	4b3b      	ldr	r3, [pc, #236]	@ (800222c <xPortStartScheduler+0x104>)
 8002140:	429a      	cmp	r2, r3
 8002142:	d01e      	beq.n	8002182 <xPortStartScheduler+0x5a>
{
 8002144:	b530      	push	{r4, r5, lr}
 8002146:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002148:	4b39      	ldr	r3, [pc, #228]	@ (8002230 <xPortStartScheduler+0x108>)
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002150:	22ff      	movs	r2, #255	@ 0xff
 8002152:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800215c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002160:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002164:	4a33      	ldr	r2, [pc, #204]	@ (8002234 <xPortStartScheduler+0x10c>)
 8002166:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002168:	4b33      	ldr	r3, [pc, #204]	@ (8002238 <xPortStartScheduler+0x110>)
 800216a:	2207      	movs	r2, #7
 800216c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800216e:	e01b      	b.n	80021a8 <xPortStartScheduler+0x80>
	__asm volatile
 8002170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002174:	f383 8811 	msr	BASEPRI, r3
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002180:	e7fe      	b.n	8002180 <xPortStartScheduler+0x58>
 8002182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002186:	f383 8811 	msr	BASEPRI, r3
 800218a:	f3bf 8f6f 	isb	sy
 800218e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002192:	e7fe      	b.n	8002192 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8002194:	4a28      	ldr	r2, [pc, #160]	@ (8002238 <xPortStartScheduler+0x110>)
 8002196:	6813      	ldr	r3, [r2, #0]
 8002198:	3b01      	subs	r3, #1
 800219a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800219c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80021ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80021b0:	d1f0      	bne.n	8002194 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80021b2:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <xPortStartScheduler+0x110>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d008      	beq.n	80021cc <xPortStartScheduler+0xa4>
 80021ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021be:	f383 8811 	msr	BASEPRI, r3
 80021c2:	f3bf 8f6f 	isb	sy
 80021c6:	f3bf 8f4f 	dsb	sy
 80021ca:	e7fe      	b.n	80021ca <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002238 <xPortStartScheduler+0x110>)
 80021d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80021d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80021d6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80021d8:	9b01      	ldr	r3, [sp, #4]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	4a14      	ldr	r2, [pc, #80]	@ (8002230 <xPortStartScheduler+0x108>)
 80021de:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80021e0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 80021e4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80021e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021ec:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80021f0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80021f4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80021f8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80021fc:	f7ff ff80 	bl	8002100 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002200:	2500      	movs	r5, #0
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <xPortStartScheduler+0x114>)
 8002204:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8002206:	f7ff febf 	bl	8001f88 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800220a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800220e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002212:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8002216:	f7ff fea3 	bl	8001f60 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800221a:	f004 fac3 	bl	80067a4 <vTaskSwitchContext>
	prvTaskExitError();
 800221e:	f7ff fe7f 	bl	8001f20 <prvTaskExitError>
}
 8002222:	4628      	mov	r0, r5
 8002224:	b003      	add	sp, #12
 8002226:	bd30      	pop	{r4, r5, pc}
 8002228:	410fc271 	.word	0x410fc271
 800222c:	410fc270 	.word	0x410fc270
 8002230:	e000e400 	.word	0xe000e400
 8002234:	200046c8 	.word	0x200046c8
 8002238:	200046c4 	.word	0x200046c4
 800223c:	20000048 	.word	0x20000048

08002240 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002240:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002244:	2b0f      	cmp	r3, #15
 8002246:	d90e      	bls.n	8002266 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002248:	4a11      	ldr	r2, [pc, #68]	@ (8002290 <vPortValidateInterruptPriority+0x50>)
 800224a:	5c9a      	ldrb	r2, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800224c:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <vPortValidateInterruptPriority+0x54>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d208      	bcs.n	8002266 <vPortValidateInterruptPriority+0x26>
 8002254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	e7fe      	b.n	8002264 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002266:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800226a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800226e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002272:	4a09      	ldr	r2, [pc, #36]	@ (8002298 <vPortValidateInterruptPriority+0x58>)
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	4293      	cmp	r3, r2
 8002278:	d908      	bls.n	800228c <vPortValidateInterruptPriority+0x4c>
 800227a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800227e:	f383 8811 	msr	BASEPRI, r3
 8002282:	f3bf 8f6f 	isb	sy
 8002286:	f3bf 8f4f 	dsb	sy
 800228a:	e7fe      	b.n	800228a <vPortValidateInterruptPriority+0x4a>
	}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000e3f0 	.word	0xe000e3f0
 8002294:	200046c8 	.word	0x200046c8
 8002298:	200046c4 	.word	0x200046c4

0800229c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800229c:	b510      	push	{r4, lr}
 800229e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80022a0:	f7ff fea8 	bl	8001ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80022a4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80022a6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d004      	beq.n	80022b6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80022ac:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80022ae:	f7ff fec3 	bl	8002038 <vPortExitCritical>

	return xReturn;
}
 80022b2:	4620      	mov	r0, r4
 80022b4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80022b6:	2401      	movs	r4, #1
 80022b8:	e7f9      	b.n	80022ae <prvIsQueueFull+0x12>

080022ba <prvIsQueueEmpty>:
{
 80022ba:	b510      	push	{r4, lr}
 80022bc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80022be:	f7ff fe99 	bl	8001ff4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80022c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80022c4:	b923      	cbnz	r3, 80022d0 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80022c6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80022c8:	f7ff feb6 	bl	8002038 <vPortExitCritical>
}
 80022cc:	4620      	mov	r0, r4
 80022ce:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80022d0:	2400      	movs	r4, #0
 80022d2:	e7f9      	b.n	80022c8 <prvIsQueueEmpty+0xe>

080022d4 <prvCopyDataToQueue>:
{
 80022d4:	b570      	push	{r4, r5, r6, lr}
 80022d6:	4604      	mov	r4, r0
 80022d8:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022da:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80022dc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80022de:	b95a      	cbnz	r2, 80022f8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80022e0:	6803      	ldr	r3, [r0, #0]
 80022e2:	b11b      	cbz	r3, 80022ec <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80022e4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022e6:	3601      	adds	r6, #1
 80022e8:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 80022ea:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80022ec:	6880      	ldr	r0, [r0, #8]
 80022ee:	f004 fb85 	bl	80069fc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60a3      	str	r3, [r4, #8]
 80022f6:	e7f6      	b.n	80022e6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80022f8:	b96d      	cbnz	r5, 8002316 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80022fa:	6840      	ldr	r0, [r0, #4]
 80022fc:	f006 fe34 	bl	8008f68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002300:	6863      	ldr	r3, [r4, #4]
 8002302:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002304:	4413      	add	r3, r2
 8002306:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002308:	68a2      	ldr	r2, [r4, #8]
 800230a:	4293      	cmp	r3, r2
 800230c:	d319      	bcc.n	8002342 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800230e:	6823      	ldr	r3, [r4, #0]
 8002310:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8002312:	4628      	mov	r0, r5
 8002314:	e7e7      	b.n	80022e6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002316:	68c0      	ldr	r0, [r0, #12]
 8002318:	f006 fe26 	bl	8008f68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800231c:	68e3      	ldr	r3, [r4, #12]
 800231e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002320:	4251      	negs	r1, r2
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002326:	6822      	ldr	r2, [r4, #0]
 8002328:	4293      	cmp	r3, r2
 800232a:	d202      	bcs.n	8002332 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800232c:	68a3      	ldr	r3, [r4, #8]
 800232e:	440b      	add	r3, r1
 8002330:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002332:	2d02      	cmp	r5, #2
 8002334:	d001      	beq.n	800233a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8002336:	2000      	movs	r0, #0
 8002338:	e7d5      	b.n	80022e6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800233a:	b126      	cbz	r6, 8002346 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800233c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800233e:	2000      	movs	r0, #0
 8002340:	e7d1      	b.n	80022e6 <prvCopyDataToQueue+0x12>
 8002342:	4628      	mov	r0, r5
 8002344:	e7cf      	b.n	80022e6 <prvCopyDataToQueue+0x12>
 8002346:	2000      	movs	r0, #0
 8002348:	e7cd      	b.n	80022e6 <prvCopyDataToQueue+0x12>

0800234a <prvCopyDataFromQueue>:
{
 800234a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800234c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800234e:	b16a      	cbz	r2, 800236c <prvCopyDataFromQueue+0x22>
{
 8002350:	b510      	push	{r4, lr}
 8002352:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002354:	68d9      	ldr	r1, [r3, #12]
 8002356:	4411      	add	r1, r2
 8002358:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800235a:	689c      	ldr	r4, [r3, #8]
 800235c:	42a1      	cmp	r1, r4
 800235e:	d301      	bcc.n	8002364 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002360:	6819      	ldr	r1, [r3, #0]
 8002362:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002364:	68d9      	ldr	r1, [r3, #12]
 8002366:	f006 fdff 	bl	8008f68 <memcpy>
}
 800236a:	bd10      	pop	{r4, pc}
 800236c:	4770      	bx	lr

0800236e <prvUnlockQueue>:
{
 800236e:	b538      	push	{r3, r4, r5, lr}
 8002370:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8002372:	f7ff fe3f 	bl	8001ff4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002376:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800237a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800237c:	e001      	b.n	8002382 <prvUnlockQueue+0x14>
			--cTxLock;
 800237e:	3c01      	subs	r4, #1
 8002380:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002382:	2c00      	cmp	r4, #0
 8002384:	dd0a      	ble.n	800239c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002386:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002388:	b143      	cbz	r3, 800239c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800238a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800238e:	f004 fa89 	bl	80068a4 <xTaskRemoveFromEventList>
 8002392:	2800      	cmp	r0, #0
 8002394:	d0f3      	beq.n	800237e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8002396:	f004 fb1b 	bl	80069d0 <vTaskMissedYield>
 800239a:	e7f0      	b.n	800237e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800239c:	23ff      	movs	r3, #255	@ 0xff
 800239e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80023a2:	f7ff fe49 	bl	8002038 <vPortExitCritical>
	taskENTER_CRITICAL();
 80023a6:	f7ff fe25 	bl	8001ff4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80023aa:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 80023ae:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023b0:	e001      	b.n	80023b6 <prvUnlockQueue+0x48>
				--cRxLock;
 80023b2:	3c01      	subs	r4, #1
 80023b4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023b6:	2c00      	cmp	r4, #0
 80023b8:	dd0a      	ble.n	80023d0 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023ba:	692b      	ldr	r3, [r5, #16]
 80023bc:	b143      	cbz	r3, 80023d0 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023be:	f105 0010 	add.w	r0, r5, #16
 80023c2:	f004 fa6f 	bl	80068a4 <xTaskRemoveFromEventList>
 80023c6:	2800      	cmp	r0, #0
 80023c8:	d0f3      	beq.n	80023b2 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80023ca:	f004 fb01 	bl	80069d0 <vTaskMissedYield>
 80023ce:	e7f0      	b.n	80023b2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80023d0:	23ff      	movs	r3, #255	@ 0xff
 80023d2:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80023d6:	f7ff fe2f 	bl	8002038 <vPortExitCritical>
}
 80023da:	bd38      	pop	{r3, r4, r5, pc}

080023dc <xQueueGenericReset>:
{
 80023dc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80023de:	b1e0      	cbz	r0, 800241a <xQueueGenericReset+0x3e>
 80023e0:	460d      	mov	r5, r1
 80023e2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80023e4:	f7ff fe06 	bl	8001ff4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80023ec:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80023ee:	fb01 3002 	mla	r0, r1, r2, r3
 80023f2:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023f4:	2000      	movs	r0, #0
 80023f6:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80023f8:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023fa:	3a01      	subs	r2, #1
 80023fc:	fb02 3301 	mla	r3, r2, r1, r3
 8002400:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002402:	23ff      	movs	r3, #255	@ 0xff
 8002404:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002408:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800240c:	b9fd      	cbnz	r5, 800244e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800240e:	6923      	ldr	r3, [r4, #16]
 8002410:	b963      	cbnz	r3, 800242c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8002412:	f7ff fe11 	bl	8002038 <vPortExitCritical>
}
 8002416:	2001      	movs	r0, #1
 8002418:	bd38      	pop	{r3, r4, r5, pc}
 800241a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800241e:	f383 8811 	msr	BASEPRI, r3
 8002422:	f3bf 8f6f 	isb	sy
 8002426:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800242a:	e7fe      	b.n	800242a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800242c:	f104 0010 	add.w	r0, r4, #16
 8002430:	f004 fa38 	bl	80068a4 <xTaskRemoveFromEventList>
 8002434:	2800      	cmp	r0, #0
 8002436:	d0ec      	beq.n	8002412 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8002438:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800243c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002440:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	e7e1      	b.n	8002412 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800244e:	f104 0010 	add.w	r0, r4, #16
 8002452:	f7ff fc0d 	bl	8001c70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002456:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800245a:	f7ff fc09 	bl	8001c70 <vListInitialise>
 800245e:	e7d8      	b.n	8002412 <xQueueGenericReset+0x36>

08002460 <prvInitialiseNewQueue>:
{
 8002460:	b538      	push	{r3, r4, r5, lr}
 8002462:	461d      	mov	r5, r3
 8002464:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002466:	460b      	mov	r3, r1
 8002468:	b949      	cbnz	r1, 800247e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800246a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800246c:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800246e:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002470:	2101      	movs	r1, #1
 8002472:	4620      	mov	r0, r4
 8002474:	f7ff ffb2 	bl	80023dc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002478:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800247c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800247e:	6022      	str	r2, [r4, #0]
 8002480:	e7f4      	b.n	800246c <prvInitialiseNewQueue+0xc>

08002482 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002482:	b940      	cbnz	r0, 8002496 <xQueueGenericCreateStatic+0x14>
 8002484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002488:	f383 8811 	msr	BASEPRI, r3
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	e7fe      	b.n	8002494 <xQueueGenericCreateStatic+0x12>
	{
 8002496:	b510      	push	{r4, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	461c      	mov	r4, r3
 800249c:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800249e:	b153      	cbz	r3, 80024b6 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80024a0:	b192      	cbz	r2, 80024c8 <xQueueGenericCreateStatic+0x46>
 80024a2:	b989      	cbnz	r1, 80024c8 <xQueueGenericCreateStatic+0x46>
 80024a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	e7fe      	b.n	80024b4 <xQueueGenericCreateStatic+0x32>
 80024b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ba:	f383 8811 	msr	BASEPRI, r3
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80024c6:	e7fe      	b.n	80024c6 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80024c8:	b16a      	cbz	r2, 80024e6 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80024ca:	2350      	movs	r3, #80	@ 0x50
 80024cc:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80024ce:	9b03      	ldr	r3, [sp, #12]
 80024d0:	2b50      	cmp	r3, #80	@ 0x50
 80024d2:	d013      	beq.n	80024fc <xQueueGenericCreateStatic+0x7a>
 80024d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	e7fe      	b.n	80024e4 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80024e6:	2900      	cmp	r1, #0
 80024e8:	d0ef      	beq.n	80024ca <xQueueGenericCreateStatic+0x48>
 80024ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	e7fe      	b.n	80024fa <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80024fc:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80024fe:	2301      	movs	r3, #1
 8002500:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002504:	9400      	str	r4, [sp, #0]
 8002506:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800250a:	4660      	mov	r0, ip
 800250c:	f7ff ffa8 	bl	8002460 <prvInitialiseNewQueue>
	}
 8002510:	4620      	mov	r0, r4
 8002512:	b004      	add	sp, #16
 8002514:	bd10      	pop	{r4, pc}

08002516 <xQueueGenericSend>:
{
 8002516:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002518:	b085      	sub	sp, #20
 800251a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800251c:	b188      	cbz	r0, 8002542 <xQueueGenericSend+0x2c>
 800251e:	460f      	mov	r7, r1
 8002520:	461d      	mov	r5, r3
 8002522:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002524:	b1b1      	cbz	r1, 8002554 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002526:	2d02      	cmp	r5, #2
 8002528:	d120      	bne.n	800256c <xQueueGenericSend+0x56>
 800252a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d01d      	beq.n	800256c <xQueueGenericSend+0x56>
 8002530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	e7fe      	b.n	8002540 <xQueueGenericSend+0x2a>
 8002542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002546:	f383 8811 	msr	BASEPRI, r3
 800254a:	f3bf 8f6f 	isb	sy
 800254e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002552:	e7fe      	b.n	8002552 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002554:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0e5      	beq.n	8002526 <xQueueGenericSend+0x10>
 800255a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800255e:	f383 8811 	msr	BASEPRI, r3
 8002562:	f3bf 8f6f 	isb	sy
 8002566:	f3bf 8f4f 	dsb	sy
 800256a:	e7fe      	b.n	800256a <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800256c:	f004 fa36 	bl	80069dc <xTaskGetSchedulerState>
 8002570:	4606      	mov	r6, r0
 8002572:	b958      	cbnz	r0, 800258c <xQueueGenericSend+0x76>
 8002574:	9b01      	ldr	r3, [sp, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d048      	beq.n	800260c <xQueueGenericSend+0xf6>
 800257a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800257e:	f383 8811 	msr	BASEPRI, r3
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	f3bf 8f4f 	dsb	sy
 800258a:	e7fe      	b.n	800258a <xQueueGenericSend+0x74>
 800258c:	2600      	movs	r6, #0
 800258e:	e03d      	b.n	800260c <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002590:	462a      	mov	r2, r5
 8002592:	4639      	mov	r1, r7
 8002594:	4620      	mov	r0, r4
 8002596:	f7ff fe9d 	bl	80022d4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800259a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800259c:	b97b      	cbnz	r3, 80025be <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800259e:	b148      	cbz	r0, 80025b4 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80025a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80025a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80025b4:	f7ff fd40 	bl	8002038 <vPortExitCritical>
				return pdPASS;
 80025b8:	2001      	movs	r0, #1
}
 80025ba:	b005      	add	sp, #20
 80025bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025be:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80025c2:	f004 f96f 	bl	80068a4 <xTaskRemoveFromEventList>
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d0f4      	beq.n	80025b4 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 80025ca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80025ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025d2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	e7e9      	b.n	80025b4 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 80025e0:	f7ff fd2a 	bl	8002038 <vPortExitCritical>
					return errQUEUE_FULL;
 80025e4:	2000      	movs	r0, #0
 80025e6:	e7e8      	b.n	80025ba <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025e8:	a802      	add	r0, sp, #8
 80025ea:	f004 f9a1 	bl	8006930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025ee:	2601      	movs	r6, #1
 80025f0:	e019      	b.n	8002626 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 80025f2:	2300      	movs	r3, #0
 80025f4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80025f8:	e021      	b.n	800263e <xQueueGenericSend+0x128>
 80025fa:	2300      	movs	r3, #0
 80025fc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002600:	e023      	b.n	800264a <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8002602:	4620      	mov	r0, r4
 8002604:	f7ff feb3 	bl	800236e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002608:	f004 f82a 	bl	8006660 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800260c:	f7ff fcf2 	bl	8001ff4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002610:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002612:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002614:	429a      	cmp	r2, r3
 8002616:	d3bb      	bcc.n	8002590 <xQueueGenericSend+0x7a>
 8002618:	2d02      	cmp	r5, #2
 800261a:	d0b9      	beq.n	8002590 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800261c:	9b01      	ldr	r3, [sp, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0de      	beq.n	80025e0 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8002622:	2e00      	cmp	r6, #0
 8002624:	d0e0      	beq.n	80025e8 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8002626:	f7ff fd07 	bl	8002038 <vPortExitCritical>
		vTaskSuspendAll();
 800262a:	f003 ff7f 	bl	800652c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800262e:	f7ff fce1 	bl	8001ff4 <vPortEnterCritical>
 8002632:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8002636:	b252      	sxtb	r2, r2
 8002638:	f1b2 3fff 	cmp.w	r2, #4294967295
 800263c:	d0d9      	beq.n	80025f2 <xQueueGenericSend+0xdc>
 800263e:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8002642:	b252      	sxtb	r2, r2
 8002644:	f1b2 3fff 	cmp.w	r2, #4294967295
 8002648:	d0d7      	beq.n	80025fa <xQueueGenericSend+0xe4>
 800264a:	f7ff fcf5 	bl	8002038 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800264e:	a901      	add	r1, sp, #4
 8002650:	a802      	add	r0, sp, #8
 8002652:	f004 f979 	bl	8006948 <xTaskCheckForTimeOut>
 8002656:	b9d8      	cbnz	r0, 8002690 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002658:	4620      	mov	r0, r4
 800265a:	f7ff fe1f 	bl	800229c <prvIsQueueFull>
 800265e:	2800      	cmp	r0, #0
 8002660:	d0cf      	beq.n	8002602 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002662:	9901      	ldr	r1, [sp, #4]
 8002664:	f104 0010 	add.w	r0, r4, #16
 8002668:	f004 f8e8 	bl	800683c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800266c:	4620      	mov	r0, r4
 800266e:	f7ff fe7e 	bl	800236e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002672:	f003 fff5 	bl	8006660 <xTaskResumeAll>
 8002676:	2800      	cmp	r0, #0
 8002678:	d1c8      	bne.n	800260c <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800267a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800267e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002682:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	e7bd      	b.n	800260c <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8002690:	4620      	mov	r0, r4
 8002692:	f7ff fe6c 	bl	800236e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002696:	f003 ffe3 	bl	8006660 <xTaskResumeAll>
			return errQUEUE_FULL;
 800269a:	2000      	movs	r0, #0
 800269c:	e78d      	b.n	80025ba <xQueueGenericSend+0xa4>

0800269e <xQueueGenericSendFromISR>:
{
 800269e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80026a2:	b190      	cbz	r0, 80026ca <xQueueGenericSendFromISR+0x2c>
 80026a4:	460f      	mov	r7, r1
 80026a6:	4616      	mov	r6, r2
 80026a8:	461c      	mov	r4, r3
 80026aa:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026ac:	b1b1      	cbz	r1, 80026dc <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026ae:	2c02      	cmp	r4, #2
 80026b0:	d120      	bne.n	80026f4 <xQueueGenericSendFromISR+0x56>
 80026b2:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d01d      	beq.n	80026f4 <xQueueGenericSendFromISR+0x56>
 80026b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	e7fe      	b.n	80026c8 <xQueueGenericSendFromISR+0x2a>
 80026ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ce:	f383 8811 	msr	BASEPRI, r3
 80026d2:	f3bf 8f6f 	isb	sy
 80026d6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80026da:	e7fe      	b.n	80026da <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026dc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0e5      	beq.n	80026ae <xQueueGenericSendFromISR+0x10>
 80026e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e6:	f383 8811 	msr	BASEPRI, r3
 80026ea:	f3bf 8f6f 	isb	sy
 80026ee:	f3bf 8f4f 	dsb	sy
 80026f2:	e7fe      	b.n	80026f2 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026f4:	f7ff fda4 	bl	8002240 <vPortValidateInterruptPriority>
	__asm volatile
 80026f8:	f3ef 8811 	mrs	r8, BASEPRI
 80026fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800270c:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800270e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8002710:	429a      	cmp	r2, r3
 8002712:	d306      	bcc.n	8002722 <xQueueGenericSendFromISR+0x84>
 8002714:	2c02      	cmp	r4, #2
 8002716:	d004      	beq.n	8002722 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8002718:	2000      	movs	r0, #0
	__asm volatile
 800271a:	f388 8811 	msr	BASEPRI, r8
}
 800271e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8002722:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8002726:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800272a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800272c:	4622      	mov	r2, r4
 800272e:	4639      	mov	r1, r7
 8002730:	4628      	mov	r0, r5
 8002732:	f7ff fdcf 	bl	80022d4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002736:	f1b9 3fff 	cmp.w	r9, #4294967295
 800273a:	d006      	beq.n	800274a <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800273c:	f109 0301 	add.w	r3, r9, #1
 8002740:	b25b      	sxtb	r3, r3
 8002742:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8002746:	2001      	movs	r0, #1
 8002748:	e7e7      	b.n	800271a <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800274a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800274c:	b90b      	cbnz	r3, 8002752 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800274e:	2001      	movs	r0, #1
 8002750:	e7e3      	b.n	800271a <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002752:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8002756:	f004 f8a5 	bl	80068a4 <xTaskRemoveFromEventList>
 800275a:	b118      	cbz	r0, 8002764 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800275c:	b126      	cbz	r6, 8002768 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800275e:	2001      	movs	r0, #1
 8002760:	6030      	str	r0, [r6, #0]
 8002762:	e7da      	b.n	800271a <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8002764:	2001      	movs	r0, #1
 8002766:	e7d8      	b.n	800271a <xQueueGenericSendFromISR+0x7c>
 8002768:	2001      	movs	r0, #1
 800276a:	e7d6      	b.n	800271a <xQueueGenericSendFromISR+0x7c>

0800276c <xQueueReceive>:
{
 800276c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800276e:	b085      	sub	sp, #20
 8002770:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002772:	b190      	cbz	r0, 800279a <xQueueReceive+0x2e>
 8002774:	460f      	mov	r7, r1
 8002776:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002778:	b1c1      	cbz	r1, 80027ac <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800277a:	f004 f92f 	bl	80069dc <xTaskGetSchedulerState>
 800277e:	4606      	mov	r6, r0
 8002780:	bb00      	cbnz	r0, 80027c4 <xQueueReceive+0x58>
 8002782:	9b01      	ldr	r3, [sp, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d05e      	beq.n	8002846 <xQueueReceive+0xda>
	__asm volatile
 8002788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800278c:	f383 8811 	msr	BASEPRI, r3
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	e7fe      	b.n	8002798 <xQueueReceive+0x2c>
 800279a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800279e:	f383 8811 	msr	BASEPRI, r3
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80027aa:	e7fe      	b.n	80027aa <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027ac:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0e3      	beq.n	800277a <xQueueReceive+0xe>
 80027b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b6:	f383 8811 	msr	BASEPRI, r3
 80027ba:	f3bf 8f6f 	isb	sy
 80027be:	f3bf 8f4f 	dsb	sy
 80027c2:	e7fe      	b.n	80027c2 <xQueueReceive+0x56>
 80027c4:	2600      	movs	r6, #0
 80027c6:	e03e      	b.n	8002846 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027c8:	4639      	mov	r1, r7
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff fdbd 	bl	800234a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027d0:	3d01      	subs	r5, #1
 80027d2:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027d4:	6923      	ldr	r3, [r4, #16]
 80027d6:	b923      	cbnz	r3, 80027e2 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80027d8:	f7ff fc2e 	bl	8002038 <vPortExitCritical>
				return pdPASS;
 80027dc:	2001      	movs	r0, #1
}
 80027de:	b005      	add	sp, #20
 80027e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027e2:	f104 0010 	add.w	r0, r4, #16
 80027e6:	f004 f85d 	bl	80068a4 <xTaskRemoveFromEventList>
 80027ea:	2800      	cmp	r0, #0
 80027ec:	d0f4      	beq.n	80027d8 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80027ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80027f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	e7e9      	b.n	80027d8 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8002804:	f7ff fc18 	bl	8002038 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002808:	2000      	movs	r0, #0
 800280a:	e7e8      	b.n	80027de <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800280c:	a802      	add	r0, sp, #8
 800280e:	f004 f88f 	bl	8006930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002812:	2601      	movs	r6, #1
 8002814:	e021      	b.n	800285a <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8002816:	2300      	movs	r3, #0
 8002818:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800281c:	e029      	b.n	8002872 <xQueueReceive+0x106>
 800281e:	2300      	movs	r3, #0
 8002820:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002824:	e02b      	b.n	800287e <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8002826:	4620      	mov	r0, r4
 8002828:	f7ff fda1 	bl	800236e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800282c:	f003 ff18 	bl	8006660 <xTaskResumeAll>
 8002830:	e009      	b.n	8002846 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8002832:	4620      	mov	r0, r4
 8002834:	f7ff fd9b 	bl	800236e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002838:	f003 ff12 	bl	8006660 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800283c:	4620      	mov	r0, r4
 800283e:	f7ff fd3c 	bl	80022ba <prvIsQueueEmpty>
 8002842:	2800      	cmp	r0, #0
 8002844:	d13f      	bne.n	80028c6 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8002846:	f7ff fbd5 	bl	8001ff4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800284a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800284c:	2d00      	cmp	r5, #0
 800284e:	d1bb      	bne.n	80027c8 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002850:	9b01      	ldr	r3, [sp, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0d6      	beq.n	8002804 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8002856:	2e00      	cmp	r6, #0
 8002858:	d0d8      	beq.n	800280c <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800285a:	f7ff fbed 	bl	8002038 <vPortExitCritical>
		vTaskSuspendAll();
 800285e:	f003 fe65 	bl	800652c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002862:	f7ff fbc7 	bl	8001ff4 <vPortEnterCritical>
 8002866:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800286a:	b25b      	sxtb	r3, r3
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d0d1      	beq.n	8002816 <xQueueReceive+0xaa>
 8002872:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002876:	b25b      	sxtb	r3, r3
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d0cf      	beq.n	800281e <xQueueReceive+0xb2>
 800287e:	f7ff fbdb 	bl	8002038 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002882:	a901      	add	r1, sp, #4
 8002884:	a802      	add	r0, sp, #8
 8002886:	f004 f85f 	bl	8006948 <xTaskCheckForTimeOut>
 800288a:	2800      	cmp	r0, #0
 800288c:	d1d1      	bne.n	8002832 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800288e:	4620      	mov	r0, r4
 8002890:	f7ff fd13 	bl	80022ba <prvIsQueueEmpty>
 8002894:	2800      	cmp	r0, #0
 8002896:	d0c6      	beq.n	8002826 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002898:	9901      	ldr	r1, [sp, #4]
 800289a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800289e:	f003 ffcd 	bl	800683c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028a2:	4620      	mov	r0, r4
 80028a4:	f7ff fd63 	bl	800236e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028a8:	f003 feda 	bl	8006660 <xTaskResumeAll>
 80028ac:	2800      	cmp	r0, #0
 80028ae:	d1ca      	bne.n	8002846 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80028b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80028b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	e7bf      	b.n	8002846 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80028c6:	2000      	movs	r0, #0
 80028c8:	e789      	b.n	80027de <xQueueReceive+0x72>
	...

080028cc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028cc:	2300      	movs	r3, #0
 80028ce:	2b07      	cmp	r3, #7
 80028d0:	d80c      	bhi.n	80028ec <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80028d2:	4a07      	ldr	r2, [pc, #28]	@ (80028f0 <vQueueAddToRegistry+0x24>)
 80028d4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80028d8:	b10a      	cbz	r2, 80028de <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028da:	3301      	adds	r3, #1
 80028dc:	e7f7      	b.n	80028ce <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80028de:	4a04      	ldr	r2, [pc, #16]	@ (80028f0 <vQueueAddToRegistry+0x24>)
 80028e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80028e4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80028e8:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80028ea:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	200046cc 	.word	0x200046cc

080028f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80028f4:	b570      	push	{r4, r5, r6, lr}
 80028f6:	4604      	mov	r4, r0
 80028f8:	460d      	mov	r5, r1
 80028fa:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80028fc:	f7ff fb7a 	bl	8001ff4 <vPortEnterCritical>
 8002900:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002904:	b25b      	sxtb	r3, r3
 8002906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290a:	d00d      	beq.n	8002928 <vQueueWaitForMessageRestricted+0x34>
 800290c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002910:	b25b      	sxtb	r3, r3
 8002912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002916:	d00b      	beq.n	8002930 <vQueueWaitForMessageRestricted+0x3c>
 8002918:	f7ff fb8e 	bl	8002038 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800291c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800291e:	b15b      	cbz	r3, 8002938 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002920:	4620      	mov	r0, r4
 8002922:	f7ff fd24 	bl	800236e <prvUnlockQueue>
	}
 8002926:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8002928:	2300      	movs	r3, #0
 800292a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800292e:	e7ed      	b.n	800290c <vQueueWaitForMessageRestricted+0x18>
 8002930:	2300      	movs	r3, #0
 8002932:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002936:	e7ef      	b.n	8002918 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002938:	4632      	mov	r2, r6
 800293a:	4629      	mov	r1, r5
 800293c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002940:	f003 ff94 	bl	800686c <vTaskPlaceOnEventListRestricted>
 8002944:	e7ec      	b.n	8002920 <vQueueWaitForMessageRestricted+0x2c>
	...

08002948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002948:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800294a:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <HAL_Init+0x30>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002952:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800295a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002962:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002964:	2003      	movs	r0, #3
 8002966:	f000 faff 	bl	8002f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800296a:	200f      	movs	r0, #15
 800296c:	f002 fd40 	bl	80053f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002970:	f000 fe16 	bl	80035a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002974:	2000      	movs	r0, #0
 8002976:	bd08      	pop	{r3, pc}
 8002978:	40023c00 	.word	0x40023c00

0800297c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800297c:	4a03      	ldr	r2, [pc, #12]	@ (800298c <HAL_IncTick+0x10>)
 800297e:	6811      	ldr	r1, [r2, #0]
 8002980:	4b03      	ldr	r3, [pc, #12]	@ (8002990 <HAL_IncTick+0x14>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	440b      	add	r3, r1
 8002986:	6013      	str	r3, [r2, #0]
}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	2000470c 	.word	0x2000470c
 8002990:	2000004c 	.word	0x2000004c

08002994 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002994:	4b01      	ldr	r3, [pc, #4]	@ (800299c <HAL_GetTick+0x8>)
 8002996:	6818      	ldr	r0, [r3, #0]
}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	2000470c 	.word	0x2000470c

080029a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029a0:	b538      	push	{r3, r4, r5, lr}
 80029a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80029a4:	f7ff fff6 	bl	8002994 <HAL_GetTick>
 80029a8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029aa:	f1b4 3fff 	cmp.w	r4, #4294967295
 80029ae:	d002      	beq.n	80029b6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80029b0:	4b04      	ldr	r3, [pc, #16]	@ (80029c4 <HAL_Delay+0x24>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029b6:	f7ff ffed 	bl	8002994 <HAL_GetTick>
 80029ba:	1b40      	subs	r0, r0, r5
 80029bc:	42a0      	cmp	r0, r4
 80029be:	d3fa      	bcc.n	80029b6 <HAL_Delay+0x16>
  {
  }
}
 80029c0:	bd38      	pop	{r3, r4, r5, pc}
 80029c2:	bf00      	nop
 80029c4:	2000004c 	.word	0x2000004c

080029c8 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029c8:	4b4a      	ldr	r3, [pc, #296]	@ (8002af4 <ADC_Init+0x12c>)
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80029d0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	6841      	ldr	r1, [r0, #4]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029da:	6802      	ldr	r2, [r0, #0]
 80029dc:	6853      	ldr	r3, [r2, #4]
 80029de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029e2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029e4:	6802      	ldr	r2, [r0, #0]
 80029e6:	6853      	ldr	r3, [r2, #4]
 80029e8:	6901      	ldr	r1, [r0, #16]
 80029ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80029ee:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029f0:	6802      	ldr	r2, [r0, #0]
 80029f2:	6853      	ldr	r3, [r2, #4]
 80029f4:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80029f8:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029fa:	6802      	ldr	r2, [r0, #0]
 80029fc:	6853      	ldr	r3, [r2, #4]
 80029fe:	6881      	ldr	r1, [r0, #8]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a04:	6802      	ldr	r2, [r0, #0]
 8002a06:	6893      	ldr	r3, [r2, #8]
 8002a08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a0c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a0e:	6802      	ldr	r2, [r0, #0]
 8002a10:	6893      	ldr	r3, [r2, #8]
 8002a12:	68c1      	ldr	r1, [r0, #12]
 8002a14:	430b      	orrs	r3, r1
 8002a16:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a18:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8002a1a:	4b37      	ldr	r3, [pc, #220]	@ (8002af8 <ADC_Init+0x130>)
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d057      	beq.n	8002ad0 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a20:	6802      	ldr	r2, [r0, #0]
 8002a22:	6893      	ldr	r3, [r2, #8]
 8002a24:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8002a28:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a2a:	6802      	ldr	r2, [r0, #0]
 8002a2c:	6893      	ldr	r3, [r2, #8]
 8002a2e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8002a30:	430b      	orrs	r3, r1
 8002a32:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a34:	6802      	ldr	r2, [r0, #0]
 8002a36:	6893      	ldr	r3, [r2, #8]
 8002a38:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002a3c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a3e:	6802      	ldr	r2, [r0, #0]
 8002a40:	6893      	ldr	r3, [r2, #8]
 8002a42:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a48:	6802      	ldr	r2, [r0, #0]
 8002a4a:	6893      	ldr	r3, [r2, #8]
 8002a4c:	f023 0302 	bic.w	r3, r3, #2
 8002a50:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a52:	6802      	ldr	r2, [r0, #0]
 8002a54:	6893      	ldr	r3, [r2, #8]
 8002a56:	7e01      	ldrb	r1, [r0, #24]
 8002a58:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002a5c:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a5e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d03f      	beq.n	8002ae6 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a66:	6802      	ldr	r2, [r0, #0]
 8002a68:	6853      	ldr	r3, [r2, #4]
 8002a6a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a6e:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a70:	6802      	ldr	r2, [r0, #0]
 8002a72:	6853      	ldr	r3, [r2, #4]
 8002a74:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002a78:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a7a:	6801      	ldr	r1, [r0, #0]
 8002a7c:	684b      	ldr	r3, [r1, #4]
 8002a7e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8002a80:	3a01      	subs	r2, #1
 8002a82:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002a86:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a88:	6802      	ldr	r2, [r0, #0]
 8002a8a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002a8c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002a90:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a92:	6801      	ldr	r1, [r0, #0]
 8002a94:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8002a96:	69c2      	ldr	r2, [r0, #28]
 8002a98:	3a01      	subs	r2, #1
 8002a9a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002a9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aa0:	6802      	ldr	r2, [r0, #0]
 8002aa2:	6893      	ldr	r3, [r2, #8]
 8002aa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002aa8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002aaa:	6802      	ldr	r2, [r0, #0]
 8002aac:	6893      	ldr	r3, [r2, #8]
 8002aae:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8002ab2:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8002ab6:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ab8:	6802      	ldr	r2, [r0, #0]
 8002aba:	6893      	ldr	r3, [r2, #8]
 8002abc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ac0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ac2:	6802      	ldr	r2, [r0, #0]
 8002ac4:	6893      	ldr	r3, [r2, #8]
 8002ac6:	6941      	ldr	r1, [r0, #20]
 8002ac8:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002acc:	6093      	str	r3, [r2, #8]
}
 8002ace:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ad0:	6802      	ldr	r2, [r0, #0]
 8002ad2:	6893      	ldr	r3, [r2, #8]
 8002ad4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8002ad8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ada:	6802      	ldr	r2, [r0, #0]
 8002adc:	6893      	ldr	r3, [r2, #8]
 8002ade:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002ae2:	6093      	str	r3, [r2, #8]
 8002ae4:	e7b0      	b.n	8002a48 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ae6:	6802      	ldr	r2, [r0, #0]
 8002ae8:	6853      	ldr	r3, [r2, #4]
 8002aea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002aee:	6053      	str	r3, [r2, #4]
 8002af0:	e7ca      	b.n	8002a88 <ADC_Init+0xc0>
 8002af2:	bf00      	nop
 8002af4:	40012300 	.word	0x40012300
 8002af8:	0f000001 	.word	0x0f000001

08002afc <HAL_ADC_Init>:
  if (hadc == NULL)
 8002afc:	b338      	cbz	r0, 8002b4e <HAL_ADC_Init+0x52>
{
 8002afe:	b510      	push	{r4, lr}
 8002b00:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b02:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002b04:	b143      	cbz	r3, 8002b18 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b08:	f013 0f10 	tst.w	r3, #16
 8002b0c:	d00b      	beq.n	8002b26 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8002b0e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002b10:	2300      	movs	r3, #0
 8002b12:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002b16:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8002b18:	f7fe f892 	bl	8000c40 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8002b20:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8002b24:	e7ef      	b.n	8002b06 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8002b26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b28:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b2c:	f023 0302 	bic.w	r3, r3, #2
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8002b36:	4620      	mov	r0, r4
 8002b38:	f7ff ff46 	bl	80029c8 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002b40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b42:	f023 0303 	bic.w	r3, r3, #3
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6423      	str	r3, [r4, #64]	@ 0x40
 8002b4c:	e7e0      	b.n	8002b10 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8002b4e:	2001      	movs	r0, #1
}
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_ADC_Start_DMA>:
{
 8002b54:	b510      	push	{r4, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002b5e:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002b62:	2a01      	cmp	r2, #1
 8002b64:	f000 8094 	beq.w	8002c90 <HAL_ADC_Start_DMA+0x13c>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b70:	6802      	ldr	r2, [r0, #0]
 8002b72:	6890      	ldr	r0, [r2, #8]
 8002b74:	f010 0f01 	tst.w	r0, #1
 8002b78:	d113      	bne.n	8002ba2 <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8002b7a:	6890      	ldr	r0, [r2, #8]
 8002b7c:	f040 0001 	orr.w	r0, r0, #1
 8002b80:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b82:	4a46      	ldr	r2, [pc, #280]	@ (8002c9c <HAL_ADC_Start_DMA+0x148>)
 8002b84:	6810      	ldr	r0, [r2, #0]
 8002b86:	4a46      	ldr	r2, [pc, #280]	@ (8002ca0 <HAL_ADC_Start_DMA+0x14c>)
 8002b88:	fba2 2000 	umull	r2, r0, r2, r0
 8002b8c:	0c80      	lsrs	r0, r0, #18
 8002b8e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b92:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8002b94:	e002      	b.n	8002b9c <HAL_ADC_Start_DMA+0x48>
      counter--;
 8002b96:	9801      	ldr	r0, [sp, #4]
 8002b98:	3801      	subs	r0, #1
 8002b9a:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8002b9c:	9801      	ldr	r0, [sp, #4]
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d1f9      	bne.n	8002b96 <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002ba2:	6822      	ldr	r2, [r4, #0]
 8002ba4:	6890      	ldr	r0, [r2, #8]
 8002ba6:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8002baa:	d003      	beq.n	8002bb4 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002bac:	6890      	ldr	r0, [r2, #8]
 8002bae:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8002bb2:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bb4:	6822      	ldr	r2, [r4, #0]
 8002bb6:	6890      	ldr	r0, [r2, #8]
 8002bb8:	f010 0f01 	tst.w	r0, #1
 8002bbc:	d05d      	beq.n	8002c7a <HAL_ADC_Start_DMA+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 8002bbe:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002bc0:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8002bc4:	f020 0001 	bic.w	r0, r0, #1
 8002bc8:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8002bcc:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bce:	6852      	ldr	r2, [r2, #4]
 8002bd0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002bd4:	d005      	beq.n	8002be2 <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bd6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002bd8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002bdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002be0:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002be2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002be4:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8002be8:	d034      	beq.n	8002c54 <HAL_ADC_Start_DMA+0x100>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bea:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002bec:	f022 0206 	bic.w	r2, r2, #6
 8002bf0:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bf8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002bfa:	482a      	ldr	r0, [pc, #168]	@ (8002ca4 <HAL_ADC_Start_DMA+0x150>)
 8002bfc:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bfe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002c00:	4829      	ldr	r0, [pc, #164]	@ (8002ca8 <HAL_ADC_Start_DMA+0x154>)
 8002c02:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c04:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002c06:	4829      	ldr	r0, [pc, #164]	@ (8002cac <HAL_ADC_Start_DMA+0x158>)
 8002c08:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c0a:	6822      	ldr	r2, [r4, #0]
 8002c0c:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8002c10:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c12:	6820      	ldr	r0, [r4, #0]
 8002c14:	6842      	ldr	r2, [r0, #4]
 8002c16:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002c1a:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c1c:	6820      	ldr	r0, [r4, #0]
 8002c1e:	6882      	ldr	r2, [r0, #8]
 8002c20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c24:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c26:	6820      	ldr	r0, [r4, #0]
 8002c28:	460a      	mov	r2, r1
 8002c2a:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 8002c2e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002c30:	f000 faa2 	bl	8003178 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c34:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb0 <HAL_ADC_Start_DMA+0x15c>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f013 0f1f 	tst.w	r3, #31
 8002c3c:	d10d      	bne.n	8002c5a <HAL_ADC_Start_DMA+0x106>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002c46:	d125      	bne.n	8002c94 <HAL_ADC_Start_DMA+0x140>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c50:	2000      	movs	r0, #0
 8002c52:	e01b      	b.n	8002c8c <HAL_ADC_Start_DMA+0x138>
      ADC_CLEAR_ERRORCODE(hadc);
 8002c54:	2200      	movs	r2, #0
 8002c56:	6462      	str	r2, [r4, #68]	@ 0x44
 8002c58:	e7cb      	b.n	8002bf2 <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	4a15      	ldr	r2, [pc, #84]	@ (8002cb4 <HAL_ADC_Start_DMA+0x160>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d001      	beq.n	8002c66 <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 8002c62:	2000      	movs	r0, #0
 8002c64:	e012      	b.n	8002c8c <HAL_ADC_Start_DMA+0x138>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002c6c:	d114      	bne.n	8002c98 <HAL_ADC_Start_DMA+0x144>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c76:	2000      	movs	r0, #0
 8002c78:	e008      	b.n	8002c8c <HAL_ADC_Start_DMA+0x138>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c7c:	f043 0310 	orr.w	r3, r3, #16
 8002c80:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c82:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 8002c8a:	2000      	movs	r0, #0
}
 8002c8c:	b002      	add	sp, #8
 8002c8e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002c90:	2002      	movs	r0, #2
 8002c92:	e7fb      	b.n	8002c8c <HAL_ADC_Start_DMA+0x138>
  return HAL_OK;
 8002c94:	2000      	movs	r0, #0
 8002c96:	e7f9      	b.n	8002c8c <HAL_ADC_Start_DMA+0x138>
 8002c98:	2000      	movs	r0, #0
 8002c9a:	e7f7      	b.n	8002c8c <HAL_ADC_Start_DMA+0x138>
 8002c9c:	20000054 	.word	0x20000054
 8002ca0:	431bde83 	.word	0x431bde83
 8002ca4:	08002cdd 	.word	0x08002cdd
 8002ca8:	08002cbb 	.word	0x08002cbb
 8002cac:	08002cc7 	.word	0x08002cc7
 8002cb0:	40012300 	.word	0x40012300
 8002cb4:	40012000 	.word	0x40012000

08002cb8 <HAL_ADC_ConvHalfCpltCallback>:
}
 8002cb8:	4770      	bx	lr

08002cba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cba:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cbc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8002cbe:	f7ff fffb 	bl	8002cb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cc2:	bd08      	pop	{r3, pc}

08002cc4 <HAL_ADC_ErrorCallback>:
}
 8002cc4:	4770      	bx	lr

08002cc6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cc6:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cc8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002cca:	2340      	movs	r3, #64	@ 0x40
 8002ccc:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cce:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cd6:	f7ff fff5 	bl	8002cc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cda:	bd08      	pop	{r3, pc}

08002cdc <ADC_DMAConvCplt>:
{
 8002cdc:	b508      	push	{r3, lr}
 8002cde:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ce0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ce2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002ce4:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8002ce8:	d125      	bne.n	8002d36 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cea:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002cec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cf0:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cf2:	6803      	ldr	r3, [r0, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002cfa:	d119      	bne.n	8002d30 <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cfc:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cfe:	b9ba      	cbnz	r2, 8002d30 <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d02:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8002d06:	d003      	beq.n	8002d10 <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002d08:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d0a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002d0e:	d10f      	bne.n	8002d30 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	f022 0220 	bic.w	r2, r2, #32
 8002d16:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d18:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002d1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d1e:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d20:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002d22:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002d26:	d103      	bne.n	8002d30 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d28:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002d30:	f7fe f806 	bl	8000d40 <HAL_ADC_ConvCpltCallback>
}
 8002d34:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d36:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002d38:	f012 0f10 	tst.w	r2, #16
 8002d3c:	d104      	bne.n	8002d48 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d3e:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8002d40:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d42:	4618      	mov	r0, r3
 8002d44:	4790      	blx	r2
}
 8002d46:	e7f5      	b.n	8002d34 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8002d48:	f7ff ffbc 	bl	8002cc4 <HAL_ADC_ErrorCallback>
 8002d4c:	e7f2      	b.n	8002d34 <ADC_DMAConvCplt+0x58>
	...

08002d50 <HAL_ADC_ConfigChannel>:
{
 8002d50:	b430      	push	{r4, r5}
 8002d52:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8002d54:	2200      	movs	r2, #0
 8002d56:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002d58:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002d5c:	2a01      	cmp	r2, #1
 8002d5e:	f000 80b6 	beq.w	8002ece <HAL_ADC_ConfigChannel+0x17e>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2201      	movs	r2, #1
 8002d66:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d6a:	680a      	ldr	r2, [r1, #0]
 8002d6c:	2a09      	cmp	r2, #9
 8002d6e:	d940      	bls.n	8002df2 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d70:	6804      	ldr	r4, [r0, #0]
 8002d72:	68e0      	ldr	r0, [r4, #12]
 8002d74:	b292      	uxth	r2, r2
 8002d76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002d7a:	3a1e      	subs	r2, #30
 8002d7c:	f04f 0c07 	mov.w	ip, #7
 8002d80:	fa0c f202 	lsl.w	r2, ip, r2
 8002d84:	ea20 0202 	bic.w	r2, r0, r2
 8002d88:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d8a:	681c      	ldr	r4, [r3, #0]
 8002d8c:	68e0      	ldr	r0, [r4, #12]
 8002d8e:	880a      	ldrh	r2, [r1, #0]
 8002d90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002d94:	3a1e      	subs	r2, #30
 8002d96:	688d      	ldr	r5, [r1, #8]
 8002d98:	fa05 f202 	lsl.w	r2, r5, r2
 8002d9c:	4302      	orrs	r2, r0
 8002d9e:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8002da0:	684a      	ldr	r2, [r1, #4]
 8002da2:	2a06      	cmp	r2, #6
 8002da4:	d83c      	bhi.n	8002e20 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002da6:	681c      	ldr	r4, [r3, #0]
 8002da8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002daa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002dae:	3a05      	subs	r2, #5
 8002db0:	f04f 0c1f 	mov.w	ip, #31
 8002db4:	fa0c f202 	lsl.w	r2, ip, r2
 8002db8:	ea20 0202 	bic.w	r2, r0, r2
 8002dbc:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dbe:	681c      	ldr	r4, [r3, #0]
 8002dc0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002dc2:	684a      	ldr	r2, [r1, #4]
 8002dc4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002dc8:	3a05      	subs	r2, #5
 8002dca:	f8b1 c000 	ldrh.w	ip, [r1]
 8002dce:	fa0c f202 	lsl.w	r2, ip, r2
 8002dd2:	4302      	orrs	r2, r0
 8002dd4:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	4a3e      	ldr	r2, [pc, #248]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x184>)
 8002dda:	4290      	cmp	r0, r2
 8002ddc:	d050      	beq.n	8002e80 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	4a3c      	ldr	r2, [pc, #240]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x184>)
 8002de2:	4290      	cmp	r0, r2
 8002de4:	d055      	beq.n	8002e92 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8002de6:	2000      	movs	r0, #0
 8002de8:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8002dec:	b002      	add	sp, #8
 8002dee:	bc30      	pop	{r4, r5}
 8002df0:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002df2:	6804      	ldr	r4, [r0, #0]
 8002df4:	6920      	ldr	r0, [r4, #16]
 8002df6:	b292      	uxth	r2, r2
 8002df8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002dfc:	f04f 0c07 	mov.w	ip, #7
 8002e00:	fa0c f202 	lsl.w	r2, ip, r2
 8002e04:	ea20 0202 	bic.w	r2, r0, r2
 8002e08:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e0a:	681c      	ldr	r4, [r3, #0]
 8002e0c:	6920      	ldr	r0, [r4, #16]
 8002e0e:	880a      	ldrh	r2, [r1, #0]
 8002e10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002e14:	688d      	ldr	r5, [r1, #8]
 8002e16:	fa05 f202 	lsl.w	r2, r5, r2
 8002e1a:	4302      	orrs	r2, r0
 8002e1c:	6122      	str	r2, [r4, #16]
 8002e1e:	e7bf      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8002e20:	2a0c      	cmp	r2, #12
 8002e22:	d816      	bhi.n	8002e52 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e24:	681d      	ldr	r5, [r3, #0]
 8002e26:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8002e28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e2c:	3a23      	subs	r2, #35	@ 0x23
 8002e2e:	241f      	movs	r4, #31
 8002e30:	fa04 f202 	lsl.w	r2, r4, r2
 8002e34:	ea20 0202 	bic.w	r2, r0, r2
 8002e38:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e3a:	681d      	ldr	r5, [r3, #0]
 8002e3c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8002e3e:	684a      	ldr	r2, [r1, #4]
 8002e40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e44:	3a23      	subs	r2, #35	@ 0x23
 8002e46:	880c      	ldrh	r4, [r1, #0]
 8002e48:	fa04 f202 	lsl.w	r2, r4, r2
 8002e4c:	4302      	orrs	r2, r0
 8002e4e:	632a      	str	r2, [r5, #48]	@ 0x30
 8002e50:	e7c1      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e52:	681d      	ldr	r5, [r3, #0]
 8002e54:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002e56:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e5a:	3a41      	subs	r2, #65	@ 0x41
 8002e5c:	241f      	movs	r4, #31
 8002e5e:	fa04 f202 	lsl.w	r2, r4, r2
 8002e62:	ea20 0202 	bic.w	r2, r0, r2
 8002e66:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e68:	681d      	ldr	r5, [r3, #0]
 8002e6a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002e6c:	684a      	ldr	r2, [r1, #4]
 8002e6e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e72:	3a41      	subs	r2, #65	@ 0x41
 8002e74:	880c      	ldrh	r4, [r1, #0]
 8002e76:	fa04 f202 	lsl.w	r2, r4, r2
 8002e7a:	4302      	orrs	r2, r0
 8002e7c:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8002e7e:	e7aa      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e80:	680a      	ldr	r2, [r1, #0]
 8002e82:	2a12      	cmp	r2, #18
 8002e84:	d1ab      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e86:	4814      	ldr	r0, [pc, #80]	@ (8002ed8 <HAL_ADC_ConfigChannel+0x188>)
 8002e88:	6842      	ldr	r2, [r0, #4]
 8002e8a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002e8e:	6042      	str	r2, [r0, #4]
 8002e90:	e7a5      	b.n	8002dde <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e92:	680a      	ldr	r2, [r1, #0]
 8002e94:	3a10      	subs	r2, #16
 8002e96:	2a01      	cmp	r2, #1
 8002e98:	d8a5      	bhi.n	8002de6 <HAL_ADC_ConfigChannel+0x96>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e9a:	480f      	ldr	r0, [pc, #60]	@ (8002ed8 <HAL_ADC_ConfigChannel+0x188>)
 8002e9c:	6842      	ldr	r2, [r0, #4]
 8002e9e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002ea2:	6042      	str	r2, [r0, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ea4:	680a      	ldr	r2, [r1, #0]
 8002ea6:	2a10      	cmp	r2, #16
 8002ea8:	d19d      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8002edc <HAL_ADC_ConfigChannel+0x18c>)
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	490c      	ldr	r1, [pc, #48]	@ (8002ee0 <HAL_ADC_ConfigChannel+0x190>)
 8002eb0:	fba1 1202 	umull	r1, r2, r1, r2
 8002eb4:	0c92      	lsrs	r2, r2, #18
 8002eb6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002eba:	0052      	lsls	r2, r2, #1
 8002ebc:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8002ebe:	e002      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x176>
        counter--;
 8002ec0:	9a01      	ldr	r2, [sp, #4]
 8002ec2:	3a01      	subs	r2, #1
 8002ec4:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8002ec6:	9a01      	ldr	r2, [sp, #4]
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d1f9      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x170>
 8002ecc:	e78b      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 8002ece:	2002      	movs	r0, #2
 8002ed0:	e78c      	b.n	8002dec <HAL_ADC_ConfigChannel+0x9c>
 8002ed2:	bf00      	nop
 8002ed4:	40012000 	.word	0x40012000
 8002ed8:	40012300 	.word	0x40012300
 8002edc:	20000054 	.word	0x20000054
 8002ee0:	431bde83 	.word	0x431bde83

08002ee4 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	db07      	blt.n	8002ef8 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee8:	f000 021f 	and.w	r2, r0, #31
 8002eec:	0940      	lsrs	r0, r0, #5
 8002eee:	2301      	movs	r3, #1
 8002ef0:	4093      	lsls	r3, r2
 8002ef2:	4a02      	ldr	r2, [pc, #8]	@ (8002efc <__NVIC_EnableIRQ+0x18>)
 8002ef4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000e100 	.word	0xe000e100

08002f00 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8002f00:	2800      	cmp	r0, #0
 8002f02:	db08      	blt.n	8002f16 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	0109      	lsls	r1, r1, #4
 8002f06:	b2c9      	uxtb	r1, r1
 8002f08:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002f0c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002f10:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8002f14:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f16:	f000 000f 	and.w	r0, r0, #15
 8002f1a:	0109      	lsls	r1, r1, #4
 8002f1c:	b2c9      	uxtb	r1, r1
 8002f1e:	4b01      	ldr	r3, [pc, #4]	@ (8002f24 <__NVIC_SetPriority+0x24>)
 8002f20:	5419      	strb	r1, [r3, r0]
  }
}
 8002f22:	4770      	bx	lr
 8002f24:	e000ed14 	.word	0xe000ed14

08002f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f28:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f2a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f2e:	f1c0 0c07 	rsb	ip, r0, #7
 8002f32:	f1bc 0f04 	cmp.w	ip, #4
 8002f36:	bf28      	it	cs
 8002f38:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3c:	1d03      	adds	r3, r0, #4
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d90f      	bls.n	8002f62 <NVIC_EncodePriority+0x3a>
 8002f42:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f44:	f04f 3eff 	mov.w	lr, #4294967295
 8002f48:	fa0e f00c 	lsl.w	r0, lr, ip
 8002f4c:	ea21 0100 	bic.w	r1, r1, r0
 8002f50:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f52:	fa0e fe03 	lsl.w	lr, lr, r3
 8002f56:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8002f5a:	ea41 0002 	orr.w	r0, r1, r2
 8002f5e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f62:	2300      	movs	r3, #0
 8002f64:	e7ee      	b.n	8002f44 <NVIC_EncodePriority+0x1c>
	...

08002f68 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f68:	4a07      	ldr	r2, [pc, #28]	@ (8002f88 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002f6a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f6c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f70:	041b      	lsls	r3, r3, #16
 8002f72:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f74:	0200      	lsls	r0, r0, #8
 8002f76:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f7a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002f7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002f84:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f8c:	b510      	push	{r4, lr}
 8002f8e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f90:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <HAL_NVIC_SetPriority+0x1c>)
 8002f92:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f94:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002f98:	f7ff ffc6 	bl	8002f28 <NVIC_EncodePriority>
 8002f9c:	4601      	mov	r1, r0
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f7ff ffae 	bl	8002f00 <__NVIC_SetPriority>
}
 8002fa4:	bd10      	pop	{r4, pc}
 8002fa6:	bf00      	nop
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fac:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fae:	f7ff ff99 	bl	8002ee4 <__NVIC_EnableIRQ>
}
 8002fb2:	bd08      	pop	{r3, pc}

08002fb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fb4:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fb6:	6805      	ldr	r5, [r0, #0]
 8002fb8:	682c      	ldr	r4, [r5, #0]
 8002fba:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8002fbe:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fc0:	6804      	ldr	r4, [r0, #0]
 8002fc2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fc4:	6883      	ldr	r3, [r0, #8]
 8002fc6:	2b40      	cmp	r3, #64	@ 0x40
 8002fc8:	d005      	beq.n	8002fd6 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8002fca:	6803      	ldr	r3, [r0, #0]
 8002fcc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8002fce:	6803      	ldr	r3, [r0, #0]
 8002fd0:	60da      	str	r2, [r3, #12]
  }
}
 8002fd2:	bc30      	pop	{r4, r5}
 8002fd4:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8002fd6:	6803      	ldr	r3, [r0, #0]
 8002fd8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002fda:	6803      	ldr	r3, [r0, #0]
 8002fdc:	60d9      	str	r1, [r3, #12]
 8002fde:	e7f8      	b.n	8002fd2 <DMA_SetConfig+0x1e>

08002fe0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fe2:	6803      	ldr	r3, [r0, #0]
 8002fe4:	b2d9      	uxtb	r1, r3
 8002fe6:	3910      	subs	r1, #16
 8002fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8003014 <DMA_CalcBaseAndBitshift+0x34>)
 8002fea:	fba2 4201 	umull	r4, r2, r2, r1
 8002fee:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ff0:	4c09      	ldr	r4, [pc, #36]	@ (8003018 <DMA_CalcBaseAndBitshift+0x38>)
 8002ff2:	5ca2      	ldrb	r2, [r4, r2]
 8002ff4:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ff6:	295f      	cmp	r1, #95	@ 0x5f
 8002ff8:	d907      	bls.n	800300a <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ffa:	f36f 0309 	bfc	r3, #0, #10
 8002ffe:	3304      	adds	r3, #4
 8003000:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8003002:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8003004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003008:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800300a:	f36f 0309 	bfc	r3, #0, #10
 800300e:	6583      	str	r3, [r0, #88]	@ 0x58
 8003010:	e7f7      	b.n	8003002 <DMA_CalcBaseAndBitshift+0x22>
 8003012:	bf00      	nop
 8003014:	aaaaaaab 	.word	0xaaaaaaab
 8003018:	08009dbc 	.word	0x08009dbc

0800301c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800301c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800301e:	6982      	ldr	r2, [r0, #24]
 8003020:	b992      	cbnz	r2, 8003048 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8003022:	2b01      	cmp	r3, #1
 8003024:	d00a      	beq.n	800303c <DMA_CheckFifoParam+0x20>
 8003026:	2b02      	cmp	r3, #2
 8003028:	d002      	beq.n	8003030 <DMA_CheckFifoParam+0x14>
 800302a:	b10b      	cbz	r3, 8003030 <DMA_CheckFifoParam+0x14>
 800302c:	2000      	movs	r0, #0
 800302e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003030:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003032:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8003036:	d128      	bne.n	800308a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8003038:	2000      	movs	r0, #0
 800303a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800303c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800303e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003042:	d024      	beq.n	800308e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2000      	movs	r0, #0
 8003046:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003048:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800304c:	d009      	beq.n	8003062 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800304e:	2b02      	cmp	r3, #2
 8003050:	d925      	bls.n	800309e <DMA_CheckFifoParam+0x82>
 8003052:	2b03      	cmp	r3, #3
 8003054:	d125      	bne.n	80030a2 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003056:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003058:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800305c:	d123      	bne.n	80030a6 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800305e:	2000      	movs	r0, #0
 8003060:	4770      	bx	lr
    switch (tmp)
 8003062:	2b03      	cmp	r3, #3
 8003064:	d803      	bhi.n	800306e <DMA_CheckFifoParam+0x52>
 8003066:	e8df f003 	tbb	[pc, r3]
 800306a:	0414      	.short	0x0414
 800306c:	0a14      	.short	0x0a14
 800306e:	2000      	movs	r0, #0
 8003070:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003072:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003074:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8003078:	d10d      	bne.n	8003096 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2000      	movs	r0, #0
 800307c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800307e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003080:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003084:	d009      	beq.n	800309a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8003086:	2000      	movs	r0, #0
 8003088:	4770      	bx	lr
        status = HAL_ERROR;
 800308a:	2001      	movs	r0, #1
 800308c:	4770      	bx	lr
        status = HAL_ERROR;
 800308e:	2001      	movs	r0, #1
 8003090:	4770      	bx	lr
      status = HAL_ERROR;
 8003092:	2001      	movs	r0, #1
 8003094:	4770      	bx	lr
        status = HAL_ERROR;
 8003096:	2001      	movs	r0, #1
 8003098:	4770      	bx	lr
        status = HAL_ERROR;
 800309a:	2001      	movs	r0, #1
 800309c:	4770      	bx	lr
      status = HAL_ERROR;
 800309e:	2001      	movs	r0, #1
 80030a0:	4770      	bx	lr
    switch (tmp)
 80030a2:	2000      	movs	r0, #0
 80030a4:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80030a6:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80030a8:	4770      	bx	lr
	...

080030ac <HAL_DMA_Init>:
{
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80030b0:	f7ff fc70 	bl	8002994 <HAL_GetTick>
  if(hdma == NULL)
 80030b4:	2c00      	cmp	r4, #0
 80030b6:	d05b      	beq.n	8003170 <HAL_DMA_Init+0xc4>
 80030b8:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80030ba:	2302      	movs	r3, #2
 80030bc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80030c0:	2300      	movs	r3, #0
 80030c2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80030c6:	6822      	ldr	r2, [r4, #0]
 80030c8:	6813      	ldr	r3, [r2, #0]
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	f012 0f01 	tst.w	r2, #1
 80030d8:	d00a      	beq.n	80030f0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030da:	f7ff fc5b 	bl	8002994 <HAL_GetTick>
 80030de:	1b43      	subs	r3, r0, r5
 80030e0:	2b05      	cmp	r3, #5
 80030e2:	d9f5      	bls.n	80030d0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030e4:	2320      	movs	r3, #32
 80030e6:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030e8:	2003      	movs	r0, #3
 80030ea:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80030f0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030f2:	4920      	ldr	r1, [pc, #128]	@ (8003174 <HAL_DMA_Init+0xc8>)
 80030f4:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030f6:	6862      	ldr	r2, [r4, #4]
 80030f8:	68a0      	ldr	r0, [r4, #8]
 80030fa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fc:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030fe:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003100:	6920      	ldr	r0, [r4, #16]
 8003102:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003104:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003106:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003108:	69a0      	ldr	r0, [r4, #24]
 800310a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800310c:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800310e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003110:	6a20      	ldr	r0, [r4, #32]
 8003112:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003114:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003116:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003118:	2904      	cmp	r1, #4
 800311a:	d01e      	beq.n	800315a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 800311c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800311e:	6826      	ldr	r6, [r4, #0]
 8003120:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003122:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8003126:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003128:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800312a:	2b04      	cmp	r3, #4
 800312c:	d107      	bne.n	800313e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800312e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003130:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003132:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003134:	b11b      	cbz	r3, 800313e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003136:	4620      	mov	r0, r4
 8003138:	f7ff ff70 	bl	800301c <DMA_CheckFifoParam>
 800313c:	b990      	cbnz	r0, 8003164 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800313e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff ff4d 	bl	8002fe0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003146:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003148:	233f      	movs	r3, #63	@ 0x3f
 800314a:	4093      	lsls	r3, r2
 800314c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800314e:	2000      	movs	r0, #0
 8003150:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003152:	2301      	movs	r3, #1
 8003154:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8003158:	e7c9      	b.n	80030ee <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800315a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800315c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800315e:	4301      	orrs	r1, r0
 8003160:	430a      	orrs	r2, r1
 8003162:	e7db      	b.n	800311c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003164:	2340      	movs	r3, #64	@ 0x40
 8003166:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003168:	2001      	movs	r0, #1
 800316a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 800316e:	e7be      	b.n	80030ee <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8003170:	2001      	movs	r0, #1
 8003172:	e7bc      	b.n	80030ee <HAL_DMA_Init+0x42>
 8003174:	f010803f 	.word	0xf010803f

08003178 <HAL_DMA_Start_IT>:
{
 8003178:	b538      	push	{r3, r4, r5, lr}
 800317a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800317c:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 800317e:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8003182:	2801      	cmp	r0, #1
 8003184:	d02a      	beq.n	80031dc <HAL_DMA_Start_IT+0x64>
 8003186:	2001      	movs	r0, #1
 8003188:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800318c:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8003190:	2801      	cmp	r0, #1
 8003192:	d004      	beq.n	800319e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8003194:	2300      	movs	r3, #0
 8003196:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 800319a:	2002      	movs	r0, #2
}
 800319c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800319e:	2002      	movs	r0, #2
 80031a0:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031a4:	2000      	movs	r0, #0
 80031a6:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031a8:	4620      	mov	r0, r4
 80031aa:	f7ff ff03 	bl	8002fb4 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ae:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80031b0:	233f      	movs	r3, #63	@ 0x3f
 80031b2:	4093      	lsls	r3, r2
 80031b4:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031b6:	6822      	ldr	r2, [r4, #0]
 80031b8:	6813      	ldr	r3, [r2, #0]
 80031ba:	f043 0316 	orr.w	r3, r3, #22
 80031be:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80031c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80031c2:	b123      	cbz	r3, 80031ce <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 80031c4:	6822      	ldr	r2, [r4, #0]
 80031c6:	6813      	ldr	r3, [r2, #0]
 80031c8:	f043 0308 	orr.w	r3, r3, #8
 80031cc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80031ce:	6822      	ldr	r2, [r4, #0]
 80031d0:	6813      	ldr	r3, [r2, #0]
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2000      	movs	r0, #0
 80031da:	e7df      	b.n	800319c <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80031dc:	2002      	movs	r0, #2
 80031de:	e7dd      	b.n	800319c <HAL_DMA_Start_IT+0x24>

080031e0 <HAL_DMA_IRQHandler>:
{
 80031e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031e2:	b083      	sub	sp, #12
 80031e4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031ea:	4b72      	ldr	r3, [pc, #456]	@ (80033b4 <HAL_DMA_IRQHandler+0x1d4>)
 80031ec:	681d      	ldr	r5, [r3, #0]
 80031ee:	4b72      	ldr	r3, [pc, #456]	@ (80033b8 <HAL_DMA_IRQHandler+0x1d8>)
 80031f0:	fba3 3505 	umull	r3, r5, r3, r5
 80031f4:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f6:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 80031f8:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031fa:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80031fc:	2308      	movs	r3, #8
 80031fe:	4093      	lsls	r3, r2
 8003200:	4233      	tst	r3, r6
 8003202:	d010      	beq.n	8003226 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003204:	6803      	ldr	r3, [r0, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	f012 0f04 	tst.w	r2, #4
 800320c:	d00b      	beq.n	8003226 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	f022 0204 	bic.w	r2, r2, #4
 8003214:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003216:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8003218:	2308      	movs	r3, #8
 800321a:	4093      	lsls	r3, r2
 800321c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800321e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003226:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003228:	2301      	movs	r3, #1
 800322a:	4093      	lsls	r3, r2
 800322c:	4233      	tst	r3, r6
 800322e:	d009      	beq.n	8003244 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003230:	6822      	ldr	r2, [r4, #0]
 8003232:	6952      	ldr	r2, [r2, #20]
 8003234:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8003238:	d004      	beq.n	8003244 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800323a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800323c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800323e:	f043 0302 	orr.w	r3, r3, #2
 8003242:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003244:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003246:	2304      	movs	r3, #4
 8003248:	4093      	lsls	r3, r2
 800324a:	4233      	tst	r3, r6
 800324c:	d009      	beq.n	8003262 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800324e:	6822      	ldr	r2, [r4, #0]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	f012 0f02 	tst.w	r2, #2
 8003256:	d004      	beq.n	8003262 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003258:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800325a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800325c:	f043 0304 	orr.w	r3, r3, #4
 8003260:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003262:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003264:	2310      	movs	r3, #16
 8003266:	4093      	lsls	r3, r2
 8003268:	4233      	tst	r3, r6
 800326a:	d024      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800326c:	6822      	ldr	r2, [r4, #0]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	f012 0f08 	tst.w	r2, #8
 8003274:	d01f      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003276:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8003280:	d00d      	beq.n	800329e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8003288:	d104      	bne.n	8003294 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800328a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800328c:	b19b      	cbz	r3, 80032b6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800328e:	4620      	mov	r0, r4
 8003290:	4798      	blx	r3
 8003292:	e010      	b.n	80032b6 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003294:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003296:	b173      	cbz	r3, 80032b6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8003298:	4620      	mov	r0, r4
 800329a:	4798      	blx	r3
 800329c:	e00b      	b.n	80032b6 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80032a4:	d103      	bne.n	80032ae <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	f022 0208 	bic.w	r2, r2, #8
 80032ac:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80032ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032b0:	b10b      	cbz	r3, 80032b6 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80032b2:	4620      	mov	r0, r4
 80032b4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032b6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80032b8:	2320      	movs	r3, #32
 80032ba:	4093      	lsls	r3, r2
 80032bc:	4233      	tst	r3, r6
 80032be:	d054      	beq.n	800336a <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032c0:	6822      	ldr	r2, [r4, #0]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	f012 0f10 	tst.w	r2, #16
 80032c8:	d04f      	beq.n	800336a <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032ca:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032cc:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80032d0:	2b05      	cmp	r3, #5
 80032d2:	d00e      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80032dc:	d033      	beq.n	8003346 <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80032e4:	d12a      	bne.n	800333c <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 80032e6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d03e      	beq.n	800336a <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 80032ec:	4620      	mov	r0, r4
 80032ee:	4798      	blx	r3
 80032f0:	e03b      	b.n	800336a <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	6813      	ldr	r3, [r2, #0]
 80032f6:	f023 0316 	bic.w	r3, r3, #22
 80032fa:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032fc:	6822      	ldr	r2, [r4, #0]
 80032fe:	6953      	ldr	r3, [r2, #20]
 8003300:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003304:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003306:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003308:	b1a3      	cbz	r3, 8003334 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800330a:	6822      	ldr	r2, [r4, #0]
 800330c:	6813      	ldr	r3, [r2, #0]
 800330e:	f023 0308 	bic.w	r3, r3, #8
 8003312:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003314:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003316:	233f      	movs	r3, #63	@ 0x3f
 8003318:	4093      	lsls	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800331c:	2301      	movs	r3, #1
 800331e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8003322:	2300      	movs	r3, #0
 8003324:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8003328:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800332a:	2b00      	cmp	r3, #0
 800332c:	d03f      	beq.n	80033ae <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 800332e:	4620      	mov	r0, r4
 8003330:	4798      	blx	r3
        return;
 8003332:	e03c      	b.n	80033ae <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003334:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e7      	bne.n	800330a <HAL_DMA_IRQHandler+0x12a>
 800333a:	e7eb      	b.n	8003314 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 800333c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800333e:	b1a3      	cbz	r3, 800336a <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8003340:	4620      	mov	r0, r4
 8003342:	4798      	blx	r3
 8003344:	e011      	b.n	800336a <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800334c:	d109      	bne.n	8003362 <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	f022 0210 	bic.w	r2, r2, #16
 8003354:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003356:	2301      	movs	r3, #1
 8003358:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800335c:	2300      	movs	r3, #0
 800335e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8003362:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003364:	b10b      	cbz	r3, 800336a <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 8003366:	4620      	mov	r0, r4
 8003368:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800336a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800336c:	b1fb      	cbz	r3, 80033ae <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800336e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003370:	f013 0f01 	tst.w	r3, #1
 8003374:	d017      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003376:	2305      	movs	r3, #5
 8003378:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800337c:	6822      	ldr	r2, [r4, #0]
 800337e:	6813      	ldr	r3, [r2, #0]
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8003386:	9b01      	ldr	r3, [sp, #4]
 8003388:	3301      	adds	r3, #1
 800338a:	9301      	str	r3, [sp, #4]
 800338c:	42ab      	cmp	r3, r5
 800338e:	d804      	bhi.n	800339a <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f013 0f01 	tst.w	r3, #1
 8003398:	d1f5      	bne.n	8003386 <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 800339a:	2301      	movs	r3, #1
 800339c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80033a0:	2300      	movs	r3, #0
 80033a2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80033a6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80033a8:	b10b      	cbz	r3, 80033ae <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 80033aa:	4620      	mov	r0, r4
 80033ac:	4798      	blx	r3
}
 80033ae:	b003      	add	sp, #12
 80033b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000054 	.word	0x20000054
 80033b8:	1b4e81b5 	.word	0x1b4e81b5

080033bc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033bc:	2300      	movs	r3, #0
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	f200 80d7 	bhi.w	8003572 <HAL_GPIO_Init+0x1b6>
{
 80033c4:	b570      	push	{r4, r5, r6, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	e065      	b.n	8003496 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ca:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033cc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80033d0:	2403      	movs	r4, #3
 80033d2:	fa04 f40e 	lsl.w	r4, r4, lr
 80033d6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033da:	68cc      	ldr	r4, [r1, #12]
 80033dc:	fa04 f40e 	lsl.w	r4, r4, lr
 80033e0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80033e2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ea:	684a      	ldr	r2, [r1, #4]
 80033ec:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80033f0:	409a      	lsls	r2, r3
 80033f2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80033f4:	6042      	str	r2, [r0, #4]
 80033f6:	e05c      	b.n	80034b2 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033f8:	08dc      	lsrs	r4, r3, #3
 80033fa:	3408      	adds	r4, #8
 80033fc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003400:	f003 0507 	and.w	r5, r3, #7
 8003404:	00ad      	lsls	r5, r5, #2
 8003406:	f04f 0e0f 	mov.w	lr, #15
 800340a:	fa0e fe05 	lsl.w	lr, lr, r5
 800340e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003412:	690a      	ldr	r2, [r1, #16]
 8003414:	40aa      	lsls	r2, r5
 8003416:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800341a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800341e:	e05c      	b.n	80034da <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003420:	2204      	movs	r2, #4
 8003422:	e000      	b.n	8003426 <HAL_GPIO_Init+0x6a>
 8003424:	2200      	movs	r2, #0
 8003426:	fa02 f20e 	lsl.w	r2, r2, lr
 800342a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800342c:	3402      	adds	r4, #2
 800342e:	4d51      	ldr	r5, [pc, #324]	@ (8003574 <HAL_GPIO_Init+0x1b8>)
 8003430:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003434:	4a50      	ldr	r2, [pc, #320]	@ (8003578 <HAL_GPIO_Init+0x1bc>)
 8003436:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003438:	ea6f 020c 	mvn.w	r2, ip
 800343c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003440:	684e      	ldr	r6, [r1, #4]
 8003442:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8003446:	d001      	beq.n	800344c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8003448:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 800344c:	4c4a      	ldr	r4, [pc, #296]	@ (8003578 <HAL_GPIO_Init+0x1bc>)
 800344e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8003450:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003452:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003456:	684e      	ldr	r6, [r1, #4]
 8003458:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 800345c:	d001      	beq.n	8003462 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800345e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8003462:	4c45      	ldr	r4, [pc, #276]	@ (8003578 <HAL_GPIO_Init+0x1bc>)
 8003464:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8003466:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003468:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800346c:	684e      	ldr	r6, [r1, #4]
 800346e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8003472:	d001      	beq.n	8003478 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8003474:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8003478:	4c3f      	ldr	r4, [pc, #252]	@ (8003578 <HAL_GPIO_Init+0x1bc>)
 800347a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800347c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800347e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003480:	684d      	ldr	r5, [r1, #4]
 8003482:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8003486:	d001      	beq.n	800348c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8003488:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 800348c:	4c3a      	ldr	r4, [pc, #232]	@ (8003578 <HAL_GPIO_Init+0x1bc>)
 800348e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003490:	3301      	adds	r3, #1
 8003492:	2b0f      	cmp	r3, #15
 8003494:	d86b      	bhi.n	800356e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8003496:	2201      	movs	r2, #1
 8003498:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800349a:	680c      	ldr	r4, [r1, #0]
 800349c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80034a0:	ea32 0404 	bics.w	r4, r2, r4
 80034a4:	d1f4      	bne.n	8003490 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034a6:	684c      	ldr	r4, [r1, #4]
 80034a8:	f004 0403 	and.w	r4, r4, #3
 80034ac:	3c01      	subs	r4, #1
 80034ae:	2c01      	cmp	r4, #1
 80034b0:	d98b      	bls.n	80033ca <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034b2:	684a      	ldr	r2, [r1, #4]
 80034b4:	f002 0203 	and.w	r2, r2, #3
 80034b8:	2a03      	cmp	r2, #3
 80034ba:	d009      	beq.n	80034d0 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80034bc:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034be:	005d      	lsls	r5, r3, #1
 80034c0:	2203      	movs	r2, #3
 80034c2:	40aa      	lsls	r2, r5
 80034c4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034c8:	688a      	ldr	r2, [r1, #8]
 80034ca:	40aa      	lsls	r2, r5
 80034cc:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80034ce:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d0:	684a      	ldr	r2, [r1, #4]
 80034d2:	f002 0203 	and.w	r2, r2, #3
 80034d6:	2a02      	cmp	r2, #2
 80034d8:	d08e      	beq.n	80033f8 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80034da:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034dc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80034e0:	2203      	movs	r2, #3
 80034e2:	fa02 f20e 	lsl.w	r2, r2, lr
 80034e6:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034ea:	684a      	ldr	r2, [r1, #4]
 80034ec:	f002 0203 	and.w	r2, r2, #3
 80034f0:	fa02 f20e 	lsl.w	r2, r2, lr
 80034f4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80034f6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034f8:	684a      	ldr	r2, [r1, #4]
 80034fa:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80034fe:	d0c7      	beq.n	8003490 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003500:	2200      	movs	r2, #0
 8003502:	9201      	str	r2, [sp, #4]
 8003504:	4a1d      	ldr	r2, [pc, #116]	@ (800357c <HAL_GPIO_Init+0x1c0>)
 8003506:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8003508:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800350c:	6454      	str	r4, [r2, #68]	@ 0x44
 800350e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003510:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003514:	9201      	str	r2, [sp, #4]
 8003516:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003518:	089c      	lsrs	r4, r3, #2
 800351a:	1ca5      	adds	r5, r4, #2
 800351c:	4a15      	ldr	r2, [pc, #84]	@ (8003574 <HAL_GPIO_Init+0x1b8>)
 800351e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003522:	f003 0e03 	and.w	lr, r3, #3
 8003526:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800352a:	220f      	movs	r2, #15
 800352c:	fa02 f20e 	lsl.w	r2, r2, lr
 8003530:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003534:	4a12      	ldr	r2, [pc, #72]	@ (8003580 <HAL_GPIO_Init+0x1c4>)
 8003536:	4290      	cmp	r0, r2
 8003538:	f43f af74 	beq.w	8003424 <HAL_GPIO_Init+0x68>
 800353c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003540:	4290      	cmp	r0, r2
 8003542:	d00e      	beq.n	8003562 <HAL_GPIO_Init+0x1a6>
 8003544:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003548:	4290      	cmp	r0, r2
 800354a:	d00c      	beq.n	8003566 <HAL_GPIO_Init+0x1aa>
 800354c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003550:	4290      	cmp	r0, r2
 8003552:	d00a      	beq.n	800356a <HAL_GPIO_Init+0x1ae>
 8003554:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003558:	4290      	cmp	r0, r2
 800355a:	f43f af61 	beq.w	8003420 <HAL_GPIO_Init+0x64>
 800355e:	2207      	movs	r2, #7
 8003560:	e761      	b.n	8003426 <HAL_GPIO_Init+0x6a>
 8003562:	2201      	movs	r2, #1
 8003564:	e75f      	b.n	8003426 <HAL_GPIO_Init+0x6a>
 8003566:	2202      	movs	r2, #2
 8003568:	e75d      	b.n	8003426 <HAL_GPIO_Init+0x6a>
 800356a:	2203      	movs	r2, #3
 800356c:	e75b      	b.n	8003426 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800356e:	b002      	add	sp, #8
 8003570:	bd70      	pop	{r4, r5, r6, pc}
 8003572:	4770      	bx	lr
 8003574:	40013800 	.word	0x40013800
 8003578:	40013c00 	.word	0x40013c00
 800357c:	40023800 	.word	0x40023800
 8003580:	40020000 	.word	0x40020000

08003584 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003584:	6903      	ldr	r3, [r0, #16]
 8003586:	4219      	tst	r1, r3
 8003588:	d001      	beq.n	800358e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800358a:	2001      	movs	r0, #1
 800358c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800358e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003590:	4770      	bx	lr

08003592 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003592:	b10a      	cbz	r2, 8003598 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003594:	6181      	str	r1, [r0, #24]
 8003596:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003598:	0409      	lsls	r1, r1, #16
 800359a:	6181      	str	r1, [r0, #24]
  }
}
 800359c:	4770      	bx	lr
	...

080035a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035a0:	b500      	push	{lr}
 80035a2:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a4:	2200      	movs	r2, #0
 80035a6:	9200      	str	r2, [sp, #0]
 80035a8:	4b0d      	ldr	r3, [pc, #52]	@ (80035e0 <HAL_MspInit+0x40>)
 80035aa:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80035ac:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80035b0:	6459      	str	r1, [r3, #68]	@ 0x44
 80035b2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80035b4:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80035b8:	9100      	str	r1, [sp, #0]
 80035ba:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035bc:	9201      	str	r2, [sp, #4]
 80035be:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80035c0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80035c4:	6419      	str	r1, [r3, #64]	@ 0x40
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035d0:	210f      	movs	r1, #15
 80035d2:	f06f 0001 	mvn.w	r0, #1
 80035d6:	f7ff fcd9 	bl	8002f8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035da:	b003      	add	sp, #12
 80035dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80035e0:	40023800 	.word	0x40023800

080035e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035e8:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ea:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80035ee:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80035f2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80035f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d854      	bhi.n	80036a8 <PCD_WriteEmptyTxFifo+0xc4>
 80035fe:	4607      	mov	r7, r0
 8003600:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8003602:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8003604:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8003608:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800360c:	69d2      	ldr	r2, [r2, #28]
 800360e:	429a      	cmp	r2, r3
 8003610:	d300      	bcc.n	8003614 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8003612:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8003614:	f102 0903 	add.w	r9, r2, #3
 8003618:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800361c:	e015      	b.n	800364a <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 800361e:	f106 0903 	add.w	r9, r6, #3
 8003622:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 8003626:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003628:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 800362c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8003630:	6a29      	ldr	r1, [r5, #32]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	b2b3      	uxth	r3, r6
 8003636:	b2e2      	uxtb	r2, r4
 8003638:	4640      	mov	r0, r8
 800363a:	f002 fa84 	bl	8005b46 <USB_WritePacket>

    ep->xfer_buff  += len;
 800363e:	6a2b      	ldr	r3, [r5, #32]
 8003640:	4433      	add	r3, r6
 8003642:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8003644:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003646:	4433      	add	r3, r6
 8003648:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800364a:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 800364e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003656:	454b      	cmp	r3, r9
 8003658:	d312      	bcc.n	8003680 <PCD_WriteEmptyTxFifo+0x9c>
 800365a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800365e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003662:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003666:	429a      	cmp	r2, r3
 8003668:	d20a      	bcs.n	8003680 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800366a:	b14b      	cbz	r3, 8003680 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 800366c:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 800366e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8003672:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8003676:	69d6      	ldr	r6, [r2, #28]
 8003678:	429e      	cmp	r6, r3
 800367a:	d3d0      	bcc.n	800361e <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 800367c:	461e      	mov	r6, r3
 800367e:	e7ce      	b.n	800361e <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003680:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8003684:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8003688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800368a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368c:	429a      	cmp	r2, r3
 800368e:	d80f      	bhi.n	80036b0 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003690:	f004 040f 	and.w	r4, r4, #15
 8003694:	2201      	movs	r2, #1
 8003696:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003698:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 800369c:	ea23 0302 	bic.w	r3, r3, r2
 80036a0:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 80036a4:	2000      	movs	r0, #0
 80036a6:	e000      	b.n	80036aa <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 80036a8:	2001      	movs	r0, #1
}
 80036aa:	b003      	add	sp, #12
 80036ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 80036b0:	2000      	movs	r0, #0
 80036b2:	e7fa      	b.n	80036aa <PCD_WriteEmptyTxFifo+0xc6>

080036b4 <HAL_PCD_Init>:
{
 80036b4:	b530      	push	{r4, r5, lr}
 80036b6:	b083      	sub	sp, #12
  if (hpcd == NULL)
 80036b8:	2800      	cmp	r0, #0
 80036ba:	d07a      	beq.n	80037b2 <HAL_PCD_Init+0xfe>
 80036bc:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 80036be:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036c0:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 80036c4:	b1c3      	cbz	r3, 80036f8 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80036c6:	2303      	movs	r3, #3
 80036c8:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 80036cc:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 80036d0:	d017      	beq.n	8003702 <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 80036d2:	6820      	ldr	r0, [r4, #0]
 80036d4:	f001 ffe8 	bl	80056a8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036d8:	7c23      	ldrb	r3, [r4, #16]
 80036da:	f88d 3000 	strb.w	r3, [sp]
 80036de:	1d23      	adds	r3, r4, #4
 80036e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036e2:	6820      	ldr	r0, [r4, #0]
 80036e4:	f001 ff1f 	bl	8005526 <USB_CoreInit>
 80036e8:	b170      	cbz	r0, 8003708 <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036ea:	2302      	movs	r3, #2
 80036ec:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80036f0:	2501      	movs	r5, #1
}
 80036f2:	4628      	mov	r0, r5
 80036f4:	b003      	add	sp, #12
 80036f6:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80036f8:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 80036fc:	f004 fbcc 	bl	8007e98 <HAL_PCD_MspInit>
 8003700:	e7e1      	b.n	80036c6 <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	71a3      	strb	r3, [r4, #6]
 8003706:	e7e4      	b.n	80036d2 <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003708:	2100      	movs	r1, #0
 800370a:	6820      	ldr	r0, [r4, #0]
 800370c:	f002 fc31 	bl	8005f72 <USB_SetCurrentMode>
 8003710:	4602      	mov	r2, r0
 8003712:	b9b8      	cbnz	r0, 8003744 <HAL_PCD_Init+0x90>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003714:	4603      	mov	r3, r0
 8003716:	7920      	ldrb	r0, [r4, #4]
 8003718:	4298      	cmp	r0, r3
 800371a:	d918      	bls.n	800374e <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 800371c:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8003720:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003724:	2001      	movs	r0, #1
 8003726:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8003728:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800372a:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800372c:	2000      	movs	r0, #0
 800372e:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003730:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003732:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003734:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8003738:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800373c:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800373e:	3301      	adds	r3, #1
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e7e8      	b.n	8003716 <HAL_PCD_Init+0x62>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003744:	2302      	movs	r3, #2
 8003746:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800374a:	2501      	movs	r5, #1
 800374c:	e7d1      	b.n	80036f2 <HAL_PCD_Init+0x3e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800374e:	4290      	cmp	r0, r2
 8003750:	d917      	bls.n	8003782 <HAL_PCD_Init+0xce>
    hpcd->OUT_ep[i].is_in = 0U;
 8003752:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8003756:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800375a:	2100      	movs	r1, #0
 800375c:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8003760:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003764:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003768:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800376c:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003770:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8003774:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003778:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800377c:	3201      	adds	r2, #1
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	e7e5      	b.n	800374e <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003782:	7c23      	ldrb	r3, [r4, #16]
 8003784:	f88d 3000 	strb.w	r3, [sp]
 8003788:	1d23      	adds	r3, r4, #4
 800378a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800378c:	6820      	ldr	r0, [r4, #0]
 800378e:	f001 ffe1 	bl	8005754 <USB_DevInit>
 8003792:	4605      	mov	r5, r0
 8003794:	b120      	cbz	r0, 80037a0 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003796:	2302      	movs	r3, #2
 8003798:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800379c:	2501      	movs	r5, #1
 800379e:	e7a8      	b.n	80036f2 <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 80037aa:	6820      	ldr	r0, [r4, #0]
 80037ac:	f002 fba0 	bl	8005ef0 <USB_DevDisconnect>
  return HAL_OK;
 80037b0:	e79f      	b.n	80036f2 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 80037b2:	2501      	movs	r5, #1
 80037b4:	e79d      	b.n	80036f2 <HAL_PCD_Init+0x3e>

080037b6 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037b6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 80037b8:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 80037bc:	2a01      	cmp	r2, #1
 80037be:	d01a      	beq.n	80037f6 <HAL_PCD_Start+0x40>
{
 80037c0:	b510      	push	{r4, lr}
 80037c2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80037c4:	2201      	movs	r2, #1
 80037c6:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80037d0:	d002      	beq.n	80037d8 <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 80037d2:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80037d4:	2a01      	cmp	r2, #1
 80037d6:	d009      	beq.n	80037ec <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 80037d8:	6820      	ldr	r0, [r4, #0]
 80037da:	f001 ff5f 	bl	800569c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	f002 fb78 	bl	8005ed4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037e4:	2000      	movs	r0, #0
 80037e6:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80037ea:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80037f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80037f4:	e7f0      	b.n	80037d8 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 80037f6:	2002      	movs	r0, #2
}
 80037f8:	4770      	bx	lr
	...

080037fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	4604      	mov	r4, r0
 8003800:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003802:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003804:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003806:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800380a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380e:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003810:	79a1      	ldrb	r1, [r4, #6]
 8003812:	2901      	cmp	r1, #1
 8003814:	d011      	beq.n	800383a <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003816:	4938      	ldr	r1, [pc, #224]	@ (80038f8 <PCD_EP_OutXfrComplete_int+0xfc>)
 8003818:	428e      	cmp	r6, r1
 800381a:	d056      	beq.n	80038ca <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800381c:	b93d      	cbnz	r5, 800382e <PCD_EP_OutXfrComplete_int+0x32>
 800381e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8003822:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003826:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800382a:	2b00      	cmp	r3, #0
 800382c:	d05e      	beq.n	80038ec <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800382e:	b2e9      	uxtb	r1, r5
 8003830:	4620      	mov	r0, r4
 8003832:	f004 fb7d 	bl	8007f30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8003836:	2000      	movs	r0, #0
 8003838:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800383a:	f012 0f08 	tst.w	r2, #8
 800383e:	d009      	beq.n	8003854 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003840:	492e      	ldr	r1, [pc, #184]	@ (80038fc <PCD_EP_OutXfrComplete_int+0x100>)
 8003842:	428e      	cmp	r6, r1
 8003844:	d9f7      	bls.n	8003836 <PCD_EP_OutXfrComplete_int+0x3a>
 8003846:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800384a:	d0f4      	beq.n	8003836 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800384c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003850:	609a      	str	r2, [r3, #8]
 8003852:	e7f0      	b.n	8003836 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003854:	f012 0f20 	tst.w	r2, #32
 8003858:	d002      	beq.n	8003860 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800385a:	2220      	movs	r2, #32
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	e7ea      	b.n	8003836 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003860:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8003864:	d1e7      	bne.n	8003836 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003866:	4925      	ldr	r1, [pc, #148]	@ (80038fc <PCD_EP_OutXfrComplete_int+0x100>)
 8003868:	428e      	cmp	r6, r1
 800386a:	d906      	bls.n	800387a <PCD_EP_OutXfrComplete_int+0x7e>
 800386c:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8003870:	d003      	beq.n	800387a <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003872:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	e7dd      	b.n	8003836 <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800387a:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800387e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003882:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388c:	1acb      	subs	r3, r1, r3
 800388e:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 8003892:	b97d      	cbnz	r5, 80038b4 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 8003894:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8003898:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800389c:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 80038a0:	b16a      	cbz	r2, 80038be <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 80038a2:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80038a6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80038aa:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 80038ae:	4419      	add	r1, r3
 80038b0:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038b4:	b2e9      	uxtb	r1, r5
 80038b6:	4620      	mov	r0, r4
 80038b8:	f004 fb3a 	bl	8007f30 <HAL_PCD_DataOutStageCallback>
 80038bc:	e7bb      	b.n	8003836 <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038be:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80038c2:	2101      	movs	r1, #1
 80038c4:	f002 fb94 	bl	8005ff0 <USB_EP0_OutStart>
 80038c8:	e7f4      	b.n	80038b4 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038ca:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80038ce:	d003      	beq.n	80038d8 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80038d4:	609a      	str	r2, [r3, #8]
 80038d6:	e7ae      	b.n	8003836 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038d8:	f012 0f20 	tst.w	r2, #32
 80038dc:	d001      	beq.n	80038e2 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038de:	2220      	movs	r2, #32
 80038e0:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038e2:	b2e9      	uxtb	r1, r5
 80038e4:	4620      	mov	r0, r4
 80038e6:	f004 fb23 	bl	8007f30 <HAL_PCD_DataOutStageCallback>
 80038ea:	e7a4      	b.n	8003836 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038ec:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80038f0:	2100      	movs	r1, #0
 80038f2:	f002 fb7d 	bl	8005ff0 <USB_EP0_OutStart>
 80038f6:	e79a      	b.n	800382e <PCD_EP_OutXfrComplete_int+0x32>
 80038f8:	4f54310a 	.word	0x4f54310a
 80038fc:	4f54300a 	.word	0x4f54300a

08003900 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003904:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003906:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003908:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800390c:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003910:	4a0e      	ldr	r2, [pc, #56]	@ (800394c <PCD_EP_OutSetupPacket_int+0x4c>)
 8003912:	4295      	cmp	r5, r2
 8003914:	d907      	bls.n	8003926 <PCD_EP_OutSetupPacket_int+0x26>
 8003916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800391a:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 800391e:	d002      	beq.n	8003926 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003920:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003924:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003926:	4620      	mov	r0, r4
 8003928:	f004 fafa 	bl	8007f20 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800392c:	4b07      	ldr	r3, [pc, #28]	@ (800394c <PCD_EP_OutSetupPacket_int+0x4c>)
 800392e:	429d      	cmp	r5, r3
 8003930:	d902      	bls.n	8003938 <PCD_EP_OutSetupPacket_int+0x38>
 8003932:	79a3      	ldrb	r3, [r4, #6]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d001      	beq.n	800393c <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8003938:	2000      	movs	r0, #0
 800393a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800393c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003940:	2101      	movs	r1, #1
 8003942:	6820      	ldr	r0, [r4, #0]
 8003944:	f002 fb54 	bl	8005ff0 <USB_EP0_OutStart>
 8003948:	e7f6      	b.n	8003938 <PCD_EP_OutSetupPacket_int+0x38>
 800394a:	bf00      	nop
 800394c:	4f54300a 	.word	0x4f54300a

08003950 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003950:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8003954:	2b01      	cmp	r3, #1
 8003956:	d00c      	beq.n	8003972 <HAL_PCD_SetAddress+0x22>
{
 8003958:	b510      	push	{r4, lr}
 800395a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800395c:	2301      	movs	r3, #1
 800395e:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003962:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003964:	6800      	ldr	r0, [r0, #0]
 8003966:	f002 faa5 	bl	8005eb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800396a:	2000      	movs	r0, #0
 800396c:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003970:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003972:	2002      	movs	r0, #2
}
 8003974:	4770      	bx	lr

08003976 <HAL_PCD_EP_Open>:
{
 8003976:	b538      	push	{r3, r4, r5, lr}
 8003978:	4605      	mov	r5, r0
 800397a:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800397c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003980:	d12b      	bne.n	80039da <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003982:	f001 0e0f 	and.w	lr, r1, #15
 8003986:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 800398a:	00a4      	lsls	r4, r4, #2
 800398c:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 8003990:	4404      	add	r4, r0
 8003992:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8003994:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8003998:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800399c:	2000      	movs	r0, #0
 800399e:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80039a2:	f00c 0c0f 	and.w	ip, ip, #15
 80039a6:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80039aa:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80039ae:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80039b0:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 80039b2:	784a      	ldrb	r2, [r1, #1]
 80039b4:	b10a      	cbz	r2, 80039ba <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 80039b6:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d01c      	beq.n	80039f8 <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 80039be:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d01b      	beq.n	80039fe <HAL_PCD_EP_Open+0x88>
 80039c6:	2301      	movs	r3, #1
 80039c8:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039cc:	6828      	ldr	r0, [r5, #0]
 80039ce:	f001 ff9e 	bl	800590e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039d2:	2000      	movs	r0, #0
 80039d4:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 80039d8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039da:	f001 000f 	and.w	r0, r1, #15
 80039de:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 80039e2:	0089      	lsls	r1, r1, #2
 80039e4:	3110      	adds	r1, #16
 80039e6:	4429      	add	r1, r5
 80039e8:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80039ea:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80039ee:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80039f2:	2401      	movs	r4, #1
 80039f4:	7544      	strb	r4, [r0, #21]
 80039f6:	e7d4      	b.n	80039a2 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	714b      	strb	r3, [r1, #5]
 80039fc:	e7df      	b.n	80039be <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 80039fe:	2002      	movs	r0, #2
 8003a00:	e7ea      	b.n	80039d8 <HAL_PCD_EP_Open+0x62>

08003a02 <HAL_PCD_EP_Close>:
{
 8003a02:	b510      	push	{r4, lr}
 8003a04:	4604      	mov	r4, r0
 8003a06:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003a08:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003a0c:	d120      	bne.n	8003a50 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a0e:	f001 000f 	and.w	r0, r1, #15
 8003a12:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a1c:	4423      	add	r3, r4
 8003a1e:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8003a20:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8003a24:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a2e:	f002 020f 	and.w	r2, r2, #15
 8003a32:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003a34:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d018      	beq.n	8003a6e <HAL_PCD_EP_Close+0x6c>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a42:	6820      	ldr	r0, [r4, #0]
 8003a44:	f001 ffb0 	bl	80059a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003a4e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a50:	f001 000f 	and.w	r0, r1, #15
 8003a54:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	3310      	adds	r3, #16
 8003a5c:	4423      	add	r3, r4
 8003a5e:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8003a60:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8003a64:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003a68:	2301      	movs	r3, #1
 8003a6a:	7543      	strb	r3, [r0, #21]
 8003a6c:	e7df      	b.n	8003a2e <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8003a6e:	2002      	movs	r0, #2
 8003a70:	e7ed      	b.n	8003a4e <HAL_PCD_EP_Close+0x4c>

08003a72 <HAL_PCD_EP_Receive>:
{
 8003a72:	b510      	push	{r4, lr}
 8003a74:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a76:	f001 0c0f 	and.w	ip, r1, #15
 8003a7a:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8003a7e:	0089      	lsls	r1, r1, #2
 8003a80:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8003a84:	4401      	add	r1, r0
 8003a86:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8003a88:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8003a8c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8003a90:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 8003a94:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 8003a9e:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aa2:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 8003aa6:	7982      	ldrb	r2, [r0, #6]
 8003aa8:	2a01      	cmp	r2, #1
 8003aaa:	d004      	beq.n	8003ab6 <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aac:	6800      	ldr	r0, [r0, #0]
 8003aae:	f002 f861 	bl	8005b74 <USB_EPStartXfer>
}
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8003ab6:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 8003aba:	e7f7      	b.n	8003aac <HAL_PCD_EP_Receive+0x3a>

08003abc <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003abc:	f001 010f 	and.w	r1, r1, #15
 8003ac0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003ac4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8003ac8:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 8003acc:	4770      	bx	lr

08003ace <HAL_PCD_EP_Transmit>:
{
 8003ace:	b510      	push	{r4, lr}
 8003ad0:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad2:	f001 0c0f 	and.w	ip, r1, #15
 8003ad6:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8003ada:	0089      	lsls	r1, r1, #2
 8003adc:	3110      	adds	r1, #16
 8003ade:	4401      	add	r1, r0
 8003ae0:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8003ae2:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8003ae6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8003aea:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8003aee:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003afe:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 8003b02:	7982      	ldrb	r2, [r0, #6]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d004      	beq.n	8003b12 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b08:	6800      	ldr	r0, [r0, #0]
 8003b0a:	f002 f833 	bl	8005b74 <USB_EPStartXfer>
}
 8003b0e:	2000      	movs	r0, #0
 8003b10:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8003b12:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 8003b16:	e7f7      	b.n	8003b08 <HAL_PCD_EP_Transmit+0x3a>

08003b18 <HAL_PCD_EP_SetStall>:
{
 8003b18:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b1a:	f001 050f 	and.w	r5, r1, #15
 8003b1e:	7902      	ldrb	r2, [r0, #4]
 8003b20:	42aa      	cmp	r2, r5
 8003b22:	d338      	bcc.n	8003b96 <HAL_PCD_EP_SetStall+0x7e>
 8003b24:	4604      	mov	r4, r0
 8003b26:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8003b28:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003b2c:	d11f      	bne.n	8003b6e <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8003b2e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003b32:	0089      	lsls	r1, r1, #2
 8003b34:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8003b38:	4401      	add	r1, r0
 8003b3a:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8003b3c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003b40:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b4e:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8003b50:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d020      	beq.n	8003b9a <HAL_PCD_EP_SetStall+0x82>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b5e:	6820      	ldr	r0, [r4, #0]
 8003b60:	f002 f94d 	bl	8005dfe <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b64:	b185      	cbz	r5, 8003b88 <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 8003b66:	2000      	movs	r0, #0
 8003b68:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003b6c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b6e:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8003b72:	0089      	lsls	r1, r1, #2
 8003b74:	3110      	adds	r1, #16
 8003b76:	4401      	add	r1, r0
 8003b78:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003b7a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8003b7e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003b82:	2201      	movs	r2, #1
 8003b84:	755a      	strb	r2, [r3, #21]
 8003b86:	e7e0      	b.n	8003b4a <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b88:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003b8c:	79a1      	ldrb	r1, [r4, #6]
 8003b8e:	6820      	ldr	r0, [r4, #0]
 8003b90:	f002 fa2e 	bl	8005ff0 <USB_EP0_OutStart>
 8003b94:	e7e7      	b.n	8003b66 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8003b96:	2001      	movs	r0, #1
 8003b98:	e7e8      	b.n	8003b6c <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8003b9a:	2002      	movs	r0, #2
 8003b9c:	e7e6      	b.n	8003b6c <HAL_PCD_EP_SetStall+0x54>

08003b9e <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b9e:	f001 030f 	and.w	r3, r1, #15
 8003ba2:	7902      	ldrb	r2, [r0, #4]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d330      	bcc.n	8003c0a <HAL_PCD_EP_ClrStall+0x6c>
{
 8003ba8:	b510      	push	{r4, lr}
 8003baa:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8003bac:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003bb0:	d11e      	bne.n	8003bf0 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bb2:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8003bb6:	0089      	lsls	r1, r1, #2
 8003bb8:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8003bbc:	4401      	add	r1, r0
 8003bbe:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8003bc0:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8003bc4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003bc8:	2000      	movs	r0, #0
 8003bca:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 8003bce:	2200      	movs	r2, #0
 8003bd0:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd2:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003bd4:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d018      	beq.n	8003c0e <HAL_PCD_EP_ClrStall+0x70>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003be2:	6820      	ldr	r0, [r4, #0]
 8003be4:	f002 f938 	bl	8005e58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003be8:	2000      	movs	r0, #0
 8003bea:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003bee:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf0:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8003bf4:	0089      	lsls	r1, r1, #2
 8003bf6:	3110      	adds	r1, #16
 8003bf8:	4401      	add	r1, r0
 8003bfa:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003bfc:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8003c00:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003c04:	2001      	movs	r0, #1
 8003c06:	7550      	strb	r0, [r2, #21]
 8003c08:	e7e1      	b.n	8003bce <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8003c0a:	2001      	movs	r0, #1
}
 8003c0c:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8003c0e:	2002      	movs	r0, #2
 8003c10:	e7ed      	b.n	8003bee <HAL_PCD_EP_ClrStall+0x50>

08003c12 <HAL_PCD_EP_Abort>:
{
 8003c12:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8003c14:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003c18:	d10c      	bne.n	8003c34 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c1a:	f001 010f 	and.w	r1, r1, #15
 8003c1e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003c22:	0089      	lsls	r1, r1, #2
 8003c24:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8003c28:	4401      	add	r1, r0
 8003c2a:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c2c:	6800      	ldr	r0, [r0, #0]
 8003c2e:	f001 ff2b 	bl	8005a88 <USB_EPStopXfer>
}
 8003c32:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c34:	f001 010f 	and.w	r1, r1, #15
 8003c38:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003c3c:	0089      	lsls	r1, r1, #2
 8003c3e:	3110      	adds	r1, #16
 8003c40:	4401      	add	r1, r0
 8003c42:	3104      	adds	r1, #4
 8003c44:	e7f2      	b.n	8003c2c <HAL_PCD_EP_Abort+0x1a>

08003c46 <HAL_PCD_IRQHandler>:
{
 8003c46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c4e:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c50:	4628      	mov	r0, r5
 8003c52:	f002 f98a 	bl	8005f6a <USB_GetMode>
 8003c56:	b110      	cbz	r0, 8003c5e <HAL_PCD_IRQHandler+0x18>
}
 8003c58:	b003      	add	sp, #12
 8003c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5e:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c60:	6820      	ldr	r0, [r4, #0]
 8003c62:	f002 f953 	bl	8005f0c <USB_ReadInterrupts>
 8003c66:	2800      	cmp	r0, #0
 8003c68:	d0f6      	beq.n	8003c58 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c6a:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8003c74:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c78:	6820      	ldr	r0, [r4, #0]
 8003c7a:	f002 f947 	bl	8005f0c <USB_ReadInterrupts>
 8003c7e:	f010 0f02 	tst.w	r0, #2
 8003c82:	d004      	beq.n	8003c8e <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c84:	6822      	ldr	r2, [r4, #0]
 8003c86:	6953      	ldr	r3, [r2, #20]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c8e:	6820      	ldr	r0, [r4, #0]
 8003c90:	f002 f93c 	bl	8005f0c <USB_ReadInterrupts>
 8003c94:	f010 0f10 	tst.w	r0, #16
 8003c98:	d015      	beq.n	8003cc6 <HAL_PCD_IRQHandler+0x80>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c9a:	6822      	ldr	r2, [r4, #0]
 8003c9c:	6993      	ldr	r3, [r2, #24]
 8003c9e:	f023 0310 	bic.w	r3, r3, #16
 8003ca2:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8003ca4:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ca8:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003cac:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 8003cb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cb4:	d04c      	beq.n	8003d50 <HAL_PCD_IRQHandler+0x10a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003cb6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003cba:	d06f      	beq.n	8003d9c <HAL_PCD_IRQHandler+0x156>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cbc:	6822      	ldr	r2, [r4, #0]
 8003cbe:	6993      	ldr	r3, [r2, #24]
 8003cc0:	f043 0310 	orr.w	r3, r3, #16
 8003cc4:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003cc6:	6820      	ldr	r0, [r4, #0]
 8003cc8:	f002 f920 	bl	8005f0c <USB_ReadInterrupts>
 8003ccc:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8003cd0:	d176      	bne.n	8003dc0 <HAL_PCD_IRQHandler+0x17a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003cd2:	6820      	ldr	r0, [r4, #0]
 8003cd4:	f002 f91a 	bl	8005f0c <USB_ReadInterrupts>
 8003cd8:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8003cdc:	f040 80e0 	bne.w	8003ea0 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ce0:	6820      	ldr	r0, [r4, #0]
 8003ce2:	f002 f913 	bl	8005f0c <USB_ReadInterrupts>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	f2c0 8161 	blt.w	8003fae <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003cec:	6820      	ldr	r0, [r4, #0]
 8003cee:	f002 f90d 	bl	8005f0c <USB_ReadInterrupts>
 8003cf2:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8003cf6:	d009      	beq.n	8003d0c <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f013 0f01 	tst.w	r3, #1
 8003cfe:	f040 816e 	bne.w	8003fde <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	6953      	ldr	r3, [r2, #20]
 8003d06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d0a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d0c:	6820      	ldr	r0, [r4, #0]
 8003d0e:	f002 f8fd 	bl	8005f0c <USB_ReadInterrupts>
 8003d12:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8003d16:	f040 8166 	bne.w	8003fe6 <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d1a:	6820      	ldr	r0, [r4, #0]
 8003d1c:	f002 f8f6 	bl	8005f0c <USB_ReadInterrupts>
 8003d20:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8003d24:	f040 81b3 	bne.w	800408e <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d28:	6820      	ldr	r0, [r4, #0]
 8003d2a:	f002 f8ef 	bl	8005f0c <USB_ReadInterrupts>
 8003d2e:	f010 0f08 	tst.w	r0, #8
 8003d32:	f040 81c4 	bne.w	80040be <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d36:	6820      	ldr	r0, [r4, #0]
 8003d38:	f002 f8e8 	bl	8005f0c <USB_ReadInterrupts>
 8003d3c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8003d40:	f000 81d7 	beq.w	80040f2 <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d44:	69ab      	ldr	r3, [r5, #24]
 8003d46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d4a:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d4c:	2601      	movs	r6, #1
 8003d4e:	e1c0      	b.n	80040d2 <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d50:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003d54:	ea18 0f03 	tst.w	r8, r3
 8003d58:	d0b0      	beq.n	8003cbc <HAL_PCD_IRQHandler+0x76>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d5a:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 8003d68:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8003d6c:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8003d70:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8003d74:	4628      	mov	r0, r5
 8003d76:	f002 f81f 	bl	8005db8 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d7a:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8003d7e:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8003d82:	4453      	add	r3, sl
 8003d84:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d88:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 8003d8c:	9a01      	ldr	r2, [sp, #4]
 8003d8e:	444a      	add	r2, r9
 8003d90:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003d94:	4453      	add	r3, sl
 8003d96:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8003d9a:	e78f      	b.n	8003cbc <HAL_PCD_IRQHandler+0x76>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8003da2:	4628      	mov	r0, r5
 8003da4:	f002 f808 	bl	8005db8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003da8:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8003dac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003db0:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8003db4:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8003db8:	4442      	add	r2, r8
 8003dba:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 8003dbe:	e77d      	b.n	8003cbc <HAL_PCD_IRQHandler+0x76>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003dc0:	6820      	ldr	r0, [r4, #0]
 8003dc2:	f002 f8a7 	bl	8005f14 <USB_ReadDevAllOutEpInterrupt>
 8003dc6:	4680      	mov	r8, r0
      epnum = 0U;
 8003dc8:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8003dca:	e035      	b.n	8003e38 <HAL_PCD_IRQHandler+0x1f2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dcc:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f7ff fd0f 	bl	80037fc <PCD_EP_OutXfrComplete_int>
 8003dde:	e03c      	b.n	8003e5a <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003de0:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003de4:	2208      	movs	r2, #8
 8003de6:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003dea:	4649      	mov	r1, r9
 8003dec:	4620      	mov	r0, r4
 8003dee:	f7ff fd87 	bl	8003900 <PCD_EP_OutSetupPacket_int>
 8003df2:	e035      	b.n	8003e60 <HAL_PCD_IRQHandler+0x21a>
            if (ep->is_iso_incomplete == 1U)
 8003df4:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8003df8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003dfc:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d041      	beq.n	8003e88 <HAL_PCD_IRQHandler+0x242>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e04:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e0e:	f01a 0f20 	tst.w	sl, #32
 8003e12:	d004      	beq.n	8003e1e <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e14:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003e1e:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8003e22:	d005      	beq.n	8003e30 <HAL_PCD_IRQHandler+0x1ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e24:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003e28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e2c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8003e30:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8003e34:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8003e38:	f1b8 0f00 	cmp.w	r8, #0
 8003e3c:	f43f af49 	beq.w	8003cd2 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 8003e40:	f018 0f01 	tst.w	r8, #1
 8003e44:	d0f4      	beq.n	8003e30 <HAL_PCD_IRQHandler+0x1ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e46:	fa5f fb89 	uxtb.w	fp, r9
 8003e4a:	4659      	mov	r1, fp
 8003e4c:	6820      	ldr	r0, [r4, #0]
 8003e4e:	f002 f871 	bl	8005f34 <USB_ReadDevOutEPInterrupt>
 8003e52:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e54:	f010 0f01 	tst.w	r0, #1
 8003e58:	d1b8      	bne.n	8003dcc <HAL_PCD_IRQHandler+0x186>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e5a:	f01a 0f08 	tst.w	sl, #8
 8003e5e:	d1bf      	bne.n	8003de0 <HAL_PCD_IRQHandler+0x19a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e60:	f01a 0f10 	tst.w	sl, #16
 8003e64:	d004      	beq.n	8003e70 <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e66:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003e6a:	2210      	movs	r2, #16
 8003e6c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e70:	f01a 0f02 	tst.w	sl, #2
 8003e74:	d0cb      	beq.n	8003e0e <HAL_PCD_IRQHandler+0x1c8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e76:	696b      	ldr	r3, [r5, #20]
 8003e78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e7c:	d0ba      	beq.n	8003df4 <HAL_PCD_IRQHandler+0x1ae>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	e7b5      	b.n	8003df4 <HAL_PCD_IRQHandler+0x1ae>
              ep->is_iso_incomplete = 0U;
 8003e88:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8003e8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e96:	4659      	mov	r1, fp
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f004 f897 	bl	8007fcc <HAL_PCD_ISOOUTIncompleteCallback>
 8003e9e:	e7b1      	b.n	8003e04 <HAL_PCD_IRQHandler+0x1be>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ea0:	6820      	ldr	r0, [r4, #0]
 8003ea2:	f002 f83f 	bl	8005f24 <USB_ReadDevAllInEpInterrupt>
 8003ea6:	4680      	mov	r8, r0
      epnum = 0U;
 8003ea8:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8003eaa:	e025      	b.n	8003ef8 <HAL_PCD_IRQHandler+0x2b2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003eac:	4659      	mov	r1, fp
 8003eae:	4620      	mov	r0, r4
 8003eb0:	f004 f84a 	bl	8007f48 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003eb4:	f01a 0f08 	tst.w	sl, #8
 8003eb8:	d004      	beq.n	8003ec4 <HAL_PCD_IRQHandler+0x27e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003eba:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ec4:	f01a 0f10 	tst.w	sl, #16
 8003ec8:	d004      	beq.n	8003ed4 <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003eca:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003ece:	2210      	movs	r2, #16
 8003ed0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ed4:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8003ed8:	d004      	beq.n	8003ee4 <HAL_PCD_IRQHandler+0x29e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003eda:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003ede:	2240      	movs	r2, #64	@ 0x40
 8003ee0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ee4:	f01a 0f02 	tst.w	sl, #2
 8003ee8:	d140      	bne.n	8003f6c <HAL_PCD_IRQHandler+0x326>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003eea:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8003eee:	d159      	bne.n	8003fa4 <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 8003ef0:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8003ef4:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8003ef8:	f1b8 0f00 	cmp.w	r8, #0
 8003efc:	f43f aef0 	beq.w	8003ce0 <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f00:	f018 0f01 	tst.w	r8, #1
 8003f04:	d0f4      	beq.n	8003ef0 <HAL_PCD_IRQHandler+0x2aa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f06:	fa5f fb89 	uxtb.w	fp, r9
 8003f0a:	4659      	mov	r1, fp
 8003f0c:	6820      	ldr	r0, [r4, #0]
 8003f0e:	f002 f81a 	bl	8005f46 <USB_ReadDevInEPInterrupt>
 8003f12:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f14:	f010 0f01 	tst.w	r0, #1
 8003f18:	d0cc      	beq.n	8003eb4 <HAL_PCD_IRQHandler+0x26e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f1a:	f009 020f 	and.w	r2, r9, #15
 8003f1e:	2101      	movs	r1, #1
 8003f20:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f26:	ea23 0302 	bic.w	r3, r3, r2
 8003f2a:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f2c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003f30:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8003f34:	79a3      	ldrb	r3, [r4, #6]
 8003f36:	428b      	cmp	r3, r1
 8003f38:	d1b8      	bne.n	8003eac <HAL_PCD_IRQHandler+0x266>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f3a:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8003f3e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003f42:	6a1a      	ldr	r2, [r3, #32]
 8003f44:	69d9      	ldr	r1, [r3, #28]
 8003f46:	440a      	add	r2, r1
 8003f48:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003f4a:	f1b9 0f00 	cmp.w	r9, #0
 8003f4e:	d1ad      	bne.n	8003eac <HAL_PCD_IRQHandler+0x266>
 8003f50:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8003f54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1a6      	bne.n	8003eac <HAL_PCD_IRQHandler+0x266>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f5e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003f62:	2101      	movs	r1, #1
 8003f64:	6820      	ldr	r0, [r4, #0]
 8003f66:	f002 f843 	bl	8005ff0 <USB_EP0_OutStart>
 8003f6a:	e79f      	b.n	8003eac <HAL_PCD_IRQHandler+0x266>
            (void)USB_FlushTxFifo(USBx, epnum);
 8003f6c:	4649      	mov	r1, r9
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f001 fba0 	bl	80056b4 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8003f74:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8003f78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003f7c:	7ddb      	ldrb	r3, [r3, #23]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d005      	beq.n	8003f8e <HAL_PCD_IRQHandler+0x348>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f82:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003f86:	2202      	movs	r2, #2
 8003f88:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8003f8c:	e7ad      	b.n	8003eea <HAL_PCD_IRQHandler+0x2a4>
              ep->is_iso_incomplete = 0U;
 8003f8e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8003f92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003f96:	2200      	movs	r2, #0
 8003f98:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f9a:	4659      	mov	r1, fp
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f004 f81b 	bl	8007fd8 <HAL_PCD_ISOINIncompleteCallback>
 8003fa2:	e7ee      	b.n	8003f82 <HAL_PCD_IRQHandler+0x33c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f7ff fb1c 	bl	80035e4 <PCD_WriteEmptyTxFifo>
 8003fac:	e7a0      	b.n	8003ef0 <HAL_PCD_IRQHandler+0x2aa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8003fb6:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d008      	beq.n	8003fd0 <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f003 fffe 	bl	8007fc0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003fc4:	6822      	ldr	r2, [r4, #0]
 8003fc6:	6953      	ldr	r3, [r2, #20]
 8003fc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fcc:	6153      	str	r3, [r2, #20]
 8003fce:	e68d      	b.n	8003cec <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f000 f93f 	bl	800425a <HAL_PCDEx_LPM_Callback>
 8003fdc:	e7f2      	b.n	8003fc4 <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f003 ffd6 	bl	8007f90 <HAL_PCD_SuspendCallback>
 8003fe4:	e68d      	b.n	8003d02 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003fee:	2110      	movs	r1, #16
 8003ff0:	6820      	ldr	r0, [r4, #0]
 8003ff2:	f001 fb5f 	bl	80056b4 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff6:	e01a      	b.n	800402e <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ff8:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8003ffc:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8004000:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004004:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004008:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800400c:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004010:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004014:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8004018:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800401c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004020:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8004024:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8004028:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800402c:	3601      	adds	r6, #1
 800402e:	7923      	ldrb	r3, [r4, #4]
 8004030:	42b3      	cmp	r3, r6
 8004032:	d8e1      	bhi.n	8003ff8 <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800403a:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800403c:	7be3      	ldrb	r3, [r4, #15]
 800403e:	b1db      	cbz	r3, 8004078 <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004040:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004044:	f043 030b 	orr.w	r3, r3, #11
 8004048:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800404c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800404e:	f043 030b 	orr.w	r3, r3, #11
 8004052:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004054:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 8004058:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800405c:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004060:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8004064:	79a1      	ldrb	r1, [r4, #6]
 8004066:	6820      	ldr	r0, [r4, #0]
 8004068:	f001 ffc2 	bl	8005ff0 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800406c:	6822      	ldr	r2, [r4, #0]
 800406e:	6953      	ldr	r3, [r2, #20]
 8004070:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004074:	6153      	str	r3, [r2, #20]
 8004076:	e650      	b.n	8003d1a <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800407e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004082:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f043 030b 	orr.w	r3, r3, #11
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	e7e2      	b.n	8004054 <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 800408e:	6820      	ldr	r0, [r4, #0]
 8004090:	f001 ffa0 	bl	8005fd4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	f001 fc29 	bl	80058ec <USB_GetDevSpeed>
 800409a:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800409c:	6826      	ldr	r6, [r4, #0]
 800409e:	f000 fbdd 	bl	800485c <HAL_RCC_GetHCLKFreq>
 80040a2:	4601      	mov	r1, r0
 80040a4:	79e2      	ldrb	r2, [r4, #7]
 80040a6:	4630      	mov	r0, r6
 80040a8:	f001 fa86 	bl	80055b8 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80040ac:	4620      	mov	r0, r4
 80040ae:	f003 ff5c 	bl	8007f6a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040b2:	6822      	ldr	r2, [r4, #0]
 80040b4:	6953      	ldr	r3, [r2, #20]
 80040b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040ba:	6153      	str	r3, [r2, #20]
 80040bc:	e634      	b.n	8003d28 <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 80040be:	4620      	mov	r0, r4
 80040c0:	f003 ff4d 	bl	8007f5e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040c4:	6822      	ldr	r2, [r4, #0]
 80040c6:	6953      	ldr	r3, [r2, #20]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	6153      	str	r3, [r2, #20]
 80040ce:	e632      	b.n	8003d36 <HAL_PCD_IRQHandler+0xf0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040d0:	3601      	adds	r6, #1
 80040d2:	7923      	ldrb	r3, [r4, #4]
 80040d4:	42b3      	cmp	r3, r6
 80040d6:	d90c      	bls.n	80040f2 <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80040d8:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80040dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80040e0:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d1f3      	bne.n	80040d0 <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80040e8:	b2f1      	uxtb	r1, r6
 80040ea:	4620      	mov	r0, r4
 80040ec:	f7ff fd91 	bl	8003c12 <HAL_PCD_EP_Abort>
 80040f0:	e7ee      	b.n	80040d0 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040f2:	6820      	ldr	r0, [r4, #0]
 80040f4:	f001 ff0a 	bl	8005f0c <USB_ReadInterrupts>
 80040f8:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 80040fc:	d125      	bne.n	800414a <HAL_PCD_IRQHandler+0x504>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040fe:	6820      	ldr	r0, [r4, #0]
 8004100:	f001 ff04 	bl	8005f0c <USB_ReadInterrupts>
 8004104:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8004108:	d059      	beq.n	80041be <HAL_PCD_IRQHandler+0x578>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800410a:	2301      	movs	r3, #1
 800410c:	e026      	b.n	800415c <HAL_PCD_IRQHandler+0x516>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800410e:	3601      	adds	r6, #1
 8004110:	7923      	ldrb	r3, [r4, #4]
 8004112:	42b3      	cmp	r3, r6
 8004114:	d91b      	bls.n	800414e <HAL_PCD_IRQHandler+0x508>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004116:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 800411a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800411e:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8004122:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004126:	7e1b      	ldrb	r3, [r3, #24]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d1f0      	bne.n	800410e <HAL_PCD_IRQHandler+0x4c8>
 800412c:	2a00      	cmp	r2, #0
 800412e:	daee      	bge.n	800410e <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004130:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8004134:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004138:	2201      	movs	r2, #1
 800413a:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800413c:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8004140:	b2c9      	uxtb	r1, r1
 8004142:	4620      	mov	r0, r4
 8004144:	f7ff fd65 	bl	8003c12 <HAL_PCD_EP_Abort>
 8004148:	e7e1      	b.n	800410e <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800414a:	2601      	movs	r6, #1
 800414c:	e7e0      	b.n	8004110 <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	6953      	ldr	r3, [r2, #20]
 8004152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004156:	6153      	str	r3, [r2, #20]
 8004158:	e7d1      	b.n	80040fe <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800415a:	3301      	adds	r3, #1
 800415c:	7922      	ldrb	r2, [r4, #4]
 800415e:	429a      	cmp	r2, r3
 8004160:	d928      	bls.n	80041b4 <HAL_PCD_IRQHandler+0x56e>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004162:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8004166:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800416a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800416e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004172:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 8004176:	2a01      	cmp	r2, #1
 8004178:	d1ef      	bne.n	800415a <HAL_PCD_IRQHandler+0x514>
 800417a:	2900      	cmp	r1, #0
 800417c:	daed      	bge.n	800415a <HAL_PCD_IRQHandler+0x514>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800417e:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 8004182:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8004186:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800418a:	4291      	cmp	r1, r2
 800418c:	d1e5      	bne.n	800415a <HAL_PCD_IRQHandler+0x514>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800418e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8004192:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004196:	2101      	movs	r1, #1
 8004198:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800419c:	69aa      	ldr	r2, [r5, #24]
 800419e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80041a2:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80041a4:	696a      	ldr	r2, [r5, #20]
 80041a6:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80041aa:	d1d6      	bne.n	800415a <HAL_PCD_IRQHandler+0x514>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041b2:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041b4:	6822      	ldr	r2, [r4, #0]
 80041b6:	6953      	ldr	r3, [r2, #20]
 80041b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041bc:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041be:	6820      	ldr	r0, [r4, #0]
 80041c0:	f001 fea4 	bl	8005f0c <USB_ReadInterrupts>
 80041c4:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 80041c8:	d110      	bne.n	80041ec <HAL_PCD_IRQHandler+0x5a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041ca:	6820      	ldr	r0, [r4, #0]
 80041cc:	f001 fe9e 	bl	8005f0c <USB_ReadInterrupts>
 80041d0:	f010 0f04 	tst.w	r0, #4
 80041d4:	f43f ad40 	beq.w	8003c58 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041dc:	f015 0f04 	tst.w	r5, #4
 80041e0:	d10d      	bne.n	80041fe <HAL_PCD_IRQHandler+0x5b8>
      hpcd->Instance->GOTGINT |= RegVal;
 80041e2:	6822      	ldr	r2, [r4, #0]
 80041e4:	6853      	ldr	r3, [r2, #4]
 80041e6:	432b      	orrs	r3, r5
 80041e8:	6053      	str	r3, [r2, #4]
 80041ea:	e535      	b.n	8003c58 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 80041ec:	4620      	mov	r0, r4
 80041ee:	f003 fef9 	bl	8007fe4 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041f2:	6822      	ldr	r2, [r4, #0]
 80041f4:	6953      	ldr	r3, [r2, #20]
 80041f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80041fa:	6153      	str	r3, [r2, #20]
 80041fc:	e7e5      	b.n	80041ca <HAL_PCD_IRQHandler+0x584>
        HAL_PCD_DisconnectCallback(hpcd);
 80041fe:	4620      	mov	r0, r4
 8004200:	f003 fef6 	bl	8007ff0 <HAL_PCD_DisconnectCallback>
 8004204:	e7ed      	b.n	80041e2 <HAL_PCD_IRQHandler+0x59c>

08004206 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004206:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004208:	6804      	ldr	r4, [r0, #0]
 800420a:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 800420c:	b931      	cbnz	r1, 800421c <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800420e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8004212:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8004214:	2000      	movs	r0, #0
 8004216:	f85d 4b04 	ldr.w	r4, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800421e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004220:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8004224:	2300      	movs	r3, #0
 8004226:	e008      	b.n	800423a <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004228:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800422c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004230:	6849      	ldr	r1, [r1, #4]
 8004232:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8004236:	3301      	adds	r3, #1
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800423e:	428b      	cmp	r3, r1
 8004240:	d3f2      	bcc.n	8004228 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004242:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8004246:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 800424a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800424e:	6060      	str	r0, [r4, #4]
 8004250:	e7e0      	b.n	8004214 <HAL_PCDEx_SetTxFiFo+0xe>

08004252 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8004252:	6803      	ldr	r3, [r0, #0]
 8004254:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8004256:	2000      	movs	r0, #0
 8004258:	4770      	bx	lr

0800425a <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800425a:	4770      	bx	lr

0800425c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800425c:	2800      	cmp	r0, #0
 800425e:	f000 81e0 	beq.w	8004622 <HAL_RCC_OscConfig+0x3c6>
{
 8004262:	b570      	push	{r4, r5, r6, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004268:	6803      	ldr	r3, [r0, #0]
 800426a:	f013 0f01 	tst.w	r3, #1
 800426e:	d03b      	beq.n	80042e8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004270:	4b9f      	ldr	r3, [pc, #636]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 030c 	and.w	r3, r3, #12
 8004278:	2b04      	cmp	r3, #4
 800427a:	d02c      	beq.n	80042d6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427c:	4b9c      	ldr	r3, [pc, #624]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004284:	2b08      	cmp	r3, #8
 8004286:	d021      	beq.n	80042cc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004288:	6863      	ldr	r3, [r4, #4]
 800428a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800428e:	d04f      	beq.n	8004330 <HAL_RCC_OscConfig+0xd4>
 8004290:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004294:	d052      	beq.n	800433c <HAL_RCC_OscConfig+0xe0>
 8004296:	4b96      	ldr	r3, [pc, #600]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042a8:	6863      	ldr	r3, [r4, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d050      	beq.n	8004350 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ae:	f7fe fb71 	bl	8002994 <HAL_GetTick>
 80042b2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b4:	4b8e      	ldr	r3, [pc, #568]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80042bc:	d114      	bne.n	80042e8 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042be:	f7fe fb69 	bl	8002994 <HAL_GetTick>
 80042c2:	1b40      	subs	r0, r0, r5
 80042c4:	2864      	cmp	r0, #100	@ 0x64
 80042c6:	d9f5      	bls.n	80042b4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80042c8:	2003      	movs	r0, #3
 80042ca:	e1b1      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042cc:	4b88      	ldr	r3, [pc, #544]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80042d4:	d0d8      	beq.n	8004288 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d6:	4b86      	ldr	r3, [pc, #536]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80042de:	d003      	beq.n	80042e8 <HAL_RCC_OscConfig+0x8c>
 80042e0:	6863      	ldr	r3, [r4, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 819f 	beq.w	8004626 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	f013 0f02 	tst.w	r3, #2
 80042ee:	d054      	beq.n	800439a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042f0:	4b7f      	ldr	r3, [pc, #508]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f013 0f0c 	tst.w	r3, #12
 80042f8:	d03e      	beq.n	8004378 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fa:	4b7d      	ldr	r3, [pc, #500]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004302:	2b08      	cmp	r3, #8
 8004304:	d033      	beq.n	800436e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004306:	68e3      	ldr	r3, [r4, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d068      	beq.n	80043de <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800430c:	4b79      	ldr	r3, [pc, #484]	@ (80044f4 <HAL_RCC_OscConfig+0x298>)
 800430e:	2201      	movs	r2, #1
 8004310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fe fb3f 	bl	8002994 <HAL_GetTick>
 8004316:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004318:	4b75      	ldr	r3, [pc, #468]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f013 0f02 	tst.w	r3, #2
 8004320:	d154      	bne.n	80043cc <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004322:	f7fe fb37 	bl	8002994 <HAL_GetTick>
 8004326:	1b40      	subs	r0, r0, r5
 8004328:	2802      	cmp	r0, #2
 800432a:	d9f5      	bls.n	8004318 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800432c:	2003      	movs	r0, #3
 800432e:	e17f      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004330:	4a6f      	ldr	r2, [pc, #444]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	e7b5      	b.n	80042a8 <HAL_RCC_OscConfig+0x4c>
 800433c:	4b6c      	ldr	r3, [pc, #432]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e7ab      	b.n	80042a8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8004350:	f7fe fb20 	bl	8002994 <HAL_GetTick>
 8004354:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	4b66      	ldr	r3, [pc, #408]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800435e:	d0c3      	beq.n	80042e8 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004360:	f7fe fb18 	bl	8002994 <HAL_GetTick>
 8004364:	1b40      	subs	r0, r0, r5
 8004366:	2864      	cmp	r0, #100	@ 0x64
 8004368:	d9f5      	bls.n	8004356 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800436a:	2003      	movs	r0, #3
 800436c:	e160      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800436e:	4b60      	ldr	r3, [pc, #384]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8004376:	d1c6      	bne.n	8004306 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004378:	4b5d      	ldr	r3, [pc, #372]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f013 0f02 	tst.w	r3, #2
 8004380:	d003      	beq.n	800438a <HAL_RCC_OscConfig+0x12e>
 8004382:	68e3      	ldr	r3, [r4, #12]
 8004384:	2b01      	cmp	r3, #1
 8004386:	f040 8150 	bne.w	800462a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438a:	4a59      	ldr	r2, [pc, #356]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 800438c:	6813      	ldr	r3, [r2, #0]
 800438e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004392:	6921      	ldr	r1, [r4, #16]
 8004394:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004398:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	f013 0f08 	tst.w	r3, #8
 80043a0:	d042      	beq.n	8004428 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043a2:	6963      	ldr	r3, [r4, #20]
 80043a4:	b36b      	cbz	r3, 8004402 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043a6:	4b53      	ldr	r3, [pc, #332]	@ (80044f4 <HAL_RCC_OscConfig+0x298>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ae:	f7fe faf1 	bl	8002994 <HAL_GetTick>
 80043b2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b4:	4b4e      	ldr	r3, [pc, #312]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 80043b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b8:	f013 0f02 	tst.w	r3, #2
 80043bc:	d134      	bne.n	8004428 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043be:	f7fe fae9 	bl	8002994 <HAL_GetTick>
 80043c2:	1b40      	subs	r0, r0, r5
 80043c4:	2802      	cmp	r0, #2
 80043c6:	d9f5      	bls.n	80043b4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80043c8:	2003      	movs	r0, #3
 80043ca:	e131      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043cc:	4a48      	ldr	r2, [pc, #288]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80043d4:	6921      	ldr	r1, [r4, #16]
 80043d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e7dd      	b.n	800439a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80043de:	4b45      	ldr	r3, [pc, #276]	@ (80044f4 <HAL_RCC_OscConfig+0x298>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80043e4:	f7fe fad6 	bl	8002994 <HAL_GetTick>
 80043e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ea:	4b41      	ldr	r3, [pc, #260]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f013 0f02 	tst.w	r3, #2
 80043f2:	d0d2      	beq.n	800439a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f4:	f7fe face 	bl	8002994 <HAL_GetTick>
 80043f8:	1b40      	subs	r0, r0, r5
 80043fa:	2802      	cmp	r0, #2
 80043fc:	d9f5      	bls.n	80043ea <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80043fe:	2003      	movs	r0, #3
 8004400:	e116      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004402:	4b3c      	ldr	r3, [pc, #240]	@ (80044f4 <HAL_RCC_OscConfig+0x298>)
 8004404:	2200      	movs	r2, #0
 8004406:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440a:	f7fe fac3 	bl	8002994 <HAL_GetTick>
 800440e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004410:	4b37      	ldr	r3, [pc, #220]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 8004412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004414:	f013 0f02 	tst.w	r3, #2
 8004418:	d006      	beq.n	8004428 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800441a:	f7fe fabb 	bl	8002994 <HAL_GetTick>
 800441e:	1b40      	subs	r0, r0, r5
 8004420:	2802      	cmp	r0, #2
 8004422:	d9f5      	bls.n	8004410 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8004424:	2003      	movs	r0, #3
 8004426:	e103      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	f013 0f04 	tst.w	r3, #4
 800442e:	d077      	beq.n	8004520 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004430:	4b2f      	ldr	r3, [pc, #188]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 8004432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004434:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004438:	d133      	bne.n	80044a2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	9301      	str	r3, [sp, #4]
 800443e:	4b2c      	ldr	r3, [pc, #176]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 8004440:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004442:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004446:	641a      	str	r2, [r3, #64]	@ 0x40
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004452:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	4b28      	ldr	r3, [pc, #160]	@ (80044f8 <HAL_RCC_OscConfig+0x29c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800445c:	d023      	beq.n	80044a6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800445e:	68a3      	ldr	r3, [r4, #8]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d034      	beq.n	80044ce <HAL_RCC_OscConfig+0x272>
 8004464:	2b05      	cmp	r3, #5
 8004466:	d038      	beq.n	80044da <HAL_RCC_OscConfig+0x27e>
 8004468:	4b21      	ldr	r3, [pc, #132]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 800446a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	671a      	str	r2, [r3, #112]	@ 0x70
 8004472:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004474:	f022 0204 	bic.w	r2, r2, #4
 8004478:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800447a:	68a3      	ldr	r3, [r4, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d03d      	beq.n	80044fc <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fe fa88 	bl	8002994 <HAL_GetTick>
 8004484:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004486:	4b1a      	ldr	r3, [pc, #104]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448a:	f013 0f02 	tst.w	r3, #2
 800448e:	d146      	bne.n	800451e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004490:	f7fe fa80 	bl	8002994 <HAL_GetTick>
 8004494:	1b80      	subs	r0, r0, r6
 8004496:	f241 3388 	movw	r3, #5000	@ 0x1388
 800449a:	4298      	cmp	r0, r3
 800449c:	d9f3      	bls.n	8004486 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800449e:	2003      	movs	r0, #3
 80044a0:	e0c6      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80044a2:	2500      	movs	r5, #0
 80044a4:	e7d6      	b.n	8004454 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044a6:	4a14      	ldr	r2, [pc, #80]	@ (80044f8 <HAL_RCC_OscConfig+0x29c>)
 80044a8:	6813      	ldr	r3, [r2, #0]
 80044aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ae:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80044b0:	f7fe fa70 	bl	8002994 <HAL_GetTick>
 80044b4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b6:	4b10      	ldr	r3, [pc, #64]	@ (80044f8 <HAL_RCC_OscConfig+0x29c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80044be:	d1ce      	bne.n	800445e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c0:	f7fe fa68 	bl	8002994 <HAL_GetTick>
 80044c4:	1b80      	subs	r0, r0, r6
 80044c6:	2802      	cmp	r0, #2
 80044c8:	d9f5      	bls.n	80044b6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80044ca:	2003      	movs	r0, #3
 80044cc:	e0b0      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ce:	4a08      	ldr	r2, [pc, #32]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 80044d0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044d8:	e7cf      	b.n	800447a <HAL_RCC_OscConfig+0x21e>
 80044da:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <HAL_RCC_OscConfig+0x294>)
 80044dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044de:	f042 0204 	orr.w	r2, r2, #4
 80044e2:	671a      	str	r2, [r3, #112]	@ 0x70
 80044e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	671a      	str	r2, [r3, #112]	@ 0x70
 80044ec:	e7c5      	b.n	800447a <HAL_RCC_OscConfig+0x21e>
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	42470000 	.word	0x42470000
 80044f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044fc:	f7fe fa4a 	bl	8002994 <HAL_GetTick>
 8004500:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004502:	4b52      	ldr	r3, [pc, #328]	@ (800464c <HAL_RCC_OscConfig+0x3f0>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004506:	f013 0f02 	tst.w	r3, #2
 800450a:	d008      	beq.n	800451e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450c:	f7fe fa42 	bl	8002994 <HAL_GetTick>
 8004510:	1b80      	subs	r0, r0, r6
 8004512:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004516:	4298      	cmp	r0, r3
 8004518:	d9f3      	bls.n	8004502 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800451a:	2003      	movs	r0, #3
 800451c:	e088      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800451e:	b9ed      	cbnz	r5, 800455c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004520:	69a3      	ldr	r3, [r4, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8083 	beq.w	800462e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004528:	4a48      	ldr	r2, [pc, #288]	@ (800464c <HAL_RCC_OscConfig+0x3f0>)
 800452a:	6892      	ldr	r2, [r2, #8]
 800452c:	f002 020c 	and.w	r2, r2, #12
 8004530:	2a08      	cmp	r2, #8
 8004532:	d051      	beq.n	80045d8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004534:	2b02      	cmp	r3, #2
 8004536:	d017      	beq.n	8004568 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004538:	4b45      	ldr	r3, [pc, #276]	@ (8004650 <HAL_RCC_OscConfig+0x3f4>)
 800453a:	2200      	movs	r2, #0
 800453c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453e:	f7fe fa29 	bl	8002994 <HAL_GetTick>
 8004542:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004544:	4b41      	ldr	r3, [pc, #260]	@ (800464c <HAL_RCC_OscConfig+0x3f0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800454c:	d042      	beq.n	80045d4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454e:	f7fe fa21 	bl	8002994 <HAL_GetTick>
 8004552:	1b00      	subs	r0, r0, r4
 8004554:	2802      	cmp	r0, #2
 8004556:	d9f5      	bls.n	8004544 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004558:	2003      	movs	r0, #3
 800455a:	e069      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800455c:	4a3b      	ldr	r2, [pc, #236]	@ (800464c <HAL_RCC_OscConfig+0x3f0>)
 800455e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004560:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004564:	6413      	str	r3, [r2, #64]	@ 0x40
 8004566:	e7db      	b.n	8004520 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8004568:	4b39      	ldr	r3, [pc, #228]	@ (8004650 <HAL_RCC_OscConfig+0x3f4>)
 800456a:	2200      	movs	r2, #0
 800456c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800456e:	f7fe fa11 	bl	8002994 <HAL_GetTick>
 8004572:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004574:	4b35      	ldr	r3, [pc, #212]	@ (800464c <HAL_RCC_OscConfig+0x3f0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800457c:	d006      	beq.n	800458c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457e:	f7fe fa09 	bl	8002994 <HAL_GetTick>
 8004582:	1b40      	subs	r0, r0, r5
 8004584:	2802      	cmp	r0, #2
 8004586:	d9f5      	bls.n	8004574 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8004588:	2003      	movs	r0, #3
 800458a:	e051      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800458c:	69e3      	ldr	r3, [r4, #28]
 800458e:	6a22      	ldr	r2, [r4, #32]
 8004590:	4313      	orrs	r3, r2
 8004592:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004594:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004598:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800459a:	0852      	lsrs	r2, r2, #1
 800459c:	3a01      	subs	r2, #1
 800459e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80045a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80045a8:	4a28      	ldr	r2, [pc, #160]	@ (800464c <HAL_RCC_OscConfig+0x3f0>)
 80045aa:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80045ac:	4b28      	ldr	r3, [pc, #160]	@ (8004650 <HAL_RCC_OscConfig+0x3f4>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80045b2:	f7fe f9ef 	bl	8002994 <HAL_GetTick>
 80045b6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b8:	4b24      	ldr	r3, [pc, #144]	@ (800464c <HAL_RCC_OscConfig+0x3f0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80045c0:	d106      	bne.n	80045d0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c2:	f7fe f9e7 	bl	8002994 <HAL_GetTick>
 80045c6:	1b00      	subs	r0, r0, r4
 80045c8:	2802      	cmp	r0, #2
 80045ca:	d9f5      	bls.n	80045b8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80045cc:	2003      	movs	r0, #3
 80045ce:	e02f      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80045d0:	2000      	movs	r0, #0
 80045d2:	e02d      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
 80045d4:	2000      	movs	r0, #0
 80045d6:	e02b      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d02b      	beq.n	8004634 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80045dc:	4b1b      	ldr	r3, [pc, #108]	@ (800464c <HAL_RCC_OscConfig+0x3f0>)
 80045de:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80045e4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e6:	4291      	cmp	r1, r2
 80045e8:	d126      	bne.n	8004638 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045ee:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f0:	428a      	cmp	r2, r1
 80045f2:	d123      	bne.n	800463c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045f4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f6:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80045fa:	401a      	ands	r2, r3
 80045fc:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004600:	d11e      	bne.n	8004640 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004602:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8004606:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004608:	0852      	lsrs	r2, r2, #1
 800460a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800460c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004610:	d118      	bne.n	8004644 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004612:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8004616:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004618:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800461c:	d114      	bne.n	8004648 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800461e:	2000      	movs	r0, #0
 8004620:	e006      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8004622:	2001      	movs	r0, #1
}
 8004624:	4770      	bx	lr
        return HAL_ERROR;
 8004626:	2001      	movs	r0, #1
 8004628:	e002      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800462a:	2001      	movs	r0, #1
 800462c:	e000      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800462e:	2000      	movs	r0, #0
}
 8004630:	b002      	add	sp, #8
 8004632:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004634:	2001      	movs	r0, #1
 8004636:	e7fb      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8004638:	2001      	movs	r0, #1
 800463a:	e7f9      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
 800463c:	2001      	movs	r0, #1
 800463e:	e7f7      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
 8004640:	2001      	movs	r0, #1
 8004642:	e7f5      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
 8004644:	2001      	movs	r0, #1
 8004646:	e7f3      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
 8004648:	2001      	movs	r0, #1
 800464a:	e7f1      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
 800464c:	40023800 	.word	0x40023800
 8004650:	42470000 	.word	0x42470000

08004654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004654:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004656:	4b26      	ldr	r3, [pc, #152]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 030c 	and.w	r3, r3, #12
 800465e:	2b04      	cmp	r3, #4
 8004660:	d041      	beq.n	80046e6 <HAL_RCC_GetSysClockFreq+0x92>
 8004662:	2b08      	cmp	r3, #8
 8004664:	d141      	bne.n	80046ea <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004666:	4b22      	ldr	r3, [pc, #136]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8004674:	d012      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004676:	4b1e      	ldr	r3, [pc, #120]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004678:	6859      	ldr	r1, [r3, #4]
 800467a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800467e:	481d      	ldr	r0, [pc, #116]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004680:	2300      	movs	r3, #0
 8004682:	fba1 0100 	umull	r0, r1, r1, r0
 8004686:	f7fc f9d1 	bl	8000a2c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800468a:	4b19      	ldr	r3, [pc, #100]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004692:	3301      	adds	r3, #1
 8004694:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8004696:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800469a:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800469c:	4b14      	ldr	r3, [pc, #80]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800469e:	6858      	ldr	r0, [r3, #4]
 80046a0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80046a4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80046a8:	ebbc 0c00 	subs.w	ip, ip, r0
 80046ac:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80046b0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80046b4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80046b8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80046bc:	ebb1 010c 	subs.w	r1, r1, ip
 80046c0:	eb63 030e 	sbc.w	r3, r3, lr
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ca:	00c9      	lsls	r1, r1, #3
 80046cc:	eb11 0c00 	adds.w	ip, r1, r0
 80046d0:	f143 0300 	adc.w	r3, r3, #0
 80046d4:	0299      	lsls	r1, r3, #10
 80046d6:	2300      	movs	r3, #0
 80046d8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80046dc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80046e0:	f7fc f9a4 	bl	8000a2c <__aeabi_uldivmod>
 80046e4:	e7d1      	b.n	800468a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80046e6:	4803      	ldr	r0, [pc, #12]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80046e8:	e7d7      	b.n	800469a <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ea:	4803      	ldr	r0, [pc, #12]	@ (80046f8 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 80046ec:	e7d5      	b.n	800469a <HAL_RCC_GetSysClockFreq+0x46>
 80046ee:	bf00      	nop
 80046f0:	40023800 	.word	0x40023800
 80046f4:	017d7840 	.word	0x017d7840
 80046f8:	00f42400 	.word	0x00f42400

080046fc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80046fc:	2800      	cmp	r0, #0
 80046fe:	f000 809b 	beq.w	8004838 <HAL_RCC_ClockConfig+0x13c>
{
 8004702:	b570      	push	{r4, r5, r6, lr}
 8004704:	460d      	mov	r5, r1
 8004706:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004708:	4b4f      	ldr	r3, [pc, #316]	@ (8004848 <HAL_RCC_ClockConfig+0x14c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	428b      	cmp	r3, r1
 8004712:	d208      	bcs.n	8004726 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004714:	b2cb      	uxtb	r3, r1
 8004716:	4a4c      	ldr	r2, [pc, #304]	@ (8004848 <HAL_RCC_ClockConfig+0x14c>)
 8004718:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471a:	6813      	ldr	r3, [r2, #0]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	428b      	cmp	r3, r1
 8004722:	f040 808b 	bne.w	800483c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	f013 0f02 	tst.w	r3, #2
 800472c:	d017      	beq.n	800475e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800472e:	f013 0f04 	tst.w	r3, #4
 8004732:	d004      	beq.n	800473e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004734:	4a45      	ldr	r2, [pc, #276]	@ (800484c <HAL_RCC_ClockConfig+0x150>)
 8004736:	6893      	ldr	r3, [r2, #8]
 8004738:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800473c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	f013 0f08 	tst.w	r3, #8
 8004744:	d004      	beq.n	8004750 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004746:	4a41      	ldr	r2, [pc, #260]	@ (800484c <HAL_RCC_ClockConfig+0x150>)
 8004748:	6893      	ldr	r3, [r2, #8]
 800474a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800474e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004750:	4a3e      	ldr	r2, [pc, #248]	@ (800484c <HAL_RCC_ClockConfig+0x150>)
 8004752:	6893      	ldr	r3, [r2, #8]
 8004754:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004758:	68a1      	ldr	r1, [r4, #8]
 800475a:	430b      	orrs	r3, r1
 800475c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	f013 0f01 	tst.w	r3, #1
 8004764:	d032      	beq.n	80047cc <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004766:	6863      	ldr	r3, [r4, #4]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d021      	beq.n	80047b0 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476c:	1e9a      	subs	r2, r3, #2
 800476e:	2a01      	cmp	r2, #1
 8004770:	d925      	bls.n	80047be <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004772:	4a36      	ldr	r2, [pc, #216]	@ (800484c <HAL_RCC_ClockConfig+0x150>)
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	f012 0f02 	tst.w	r2, #2
 800477a:	d061      	beq.n	8004840 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800477c:	4933      	ldr	r1, [pc, #204]	@ (800484c <HAL_RCC_ClockConfig+0x150>)
 800477e:	688a      	ldr	r2, [r1, #8]
 8004780:	f022 0203 	bic.w	r2, r2, #3
 8004784:	4313      	orrs	r3, r2
 8004786:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004788:	f7fe f904 	bl	8002994 <HAL_GetTick>
 800478c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478e:	4b2f      	ldr	r3, [pc, #188]	@ (800484c <HAL_RCC_ClockConfig+0x150>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	6862      	ldr	r2, [r4, #4]
 8004798:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800479c:	d016      	beq.n	80047cc <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800479e:	f7fe f8f9 	bl	8002994 <HAL_GetTick>
 80047a2:	1b80      	subs	r0, r0, r6
 80047a4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80047a8:	4298      	cmp	r0, r3
 80047aa:	d9f0      	bls.n	800478e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80047ac:	2003      	movs	r0, #3
 80047ae:	e042      	b.n	8004836 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b0:	4a26      	ldr	r2, [pc, #152]	@ (800484c <HAL_RCC_ClockConfig+0x150>)
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80047b8:	d1e0      	bne.n	800477c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80047ba:	2001      	movs	r0, #1
 80047bc:	e03b      	b.n	8004836 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047be:	4a23      	ldr	r2, [pc, #140]	@ (800484c <HAL_RCC_ClockConfig+0x150>)
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80047c6:	d1d9      	bne.n	800477c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80047c8:	2001      	movs	r0, #1
 80047ca:	e034      	b.n	8004836 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004848 <HAL_RCC_ClockConfig+0x14c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	42ab      	cmp	r3, r5
 80047d6:	d907      	bls.n	80047e8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d8:	b2ea      	uxtb	r2, r5
 80047da:	4b1b      	ldr	r3, [pc, #108]	@ (8004848 <HAL_RCC_ClockConfig+0x14c>)
 80047dc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	42ab      	cmp	r3, r5
 80047e6:	d12d      	bne.n	8004844 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	f013 0f04 	tst.w	r3, #4
 80047ee:	d006      	beq.n	80047fe <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f0:	4a16      	ldr	r2, [pc, #88]	@ (800484c <HAL_RCC_ClockConfig+0x150>)
 80047f2:	6893      	ldr	r3, [r2, #8]
 80047f4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80047f8:	68e1      	ldr	r1, [r4, #12]
 80047fa:	430b      	orrs	r3, r1
 80047fc:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	f013 0f08 	tst.w	r3, #8
 8004804:	d007      	beq.n	8004816 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004806:	4a11      	ldr	r2, [pc, #68]	@ (800484c <HAL_RCC_ClockConfig+0x150>)
 8004808:	6893      	ldr	r3, [r2, #8]
 800480a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800480e:	6921      	ldr	r1, [r4, #16]
 8004810:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004814:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004816:	f7ff ff1d 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 800481a:	4b0c      	ldr	r3, [pc, #48]	@ (800484c <HAL_RCC_ClockConfig+0x150>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004822:	4a0b      	ldr	r2, [pc, #44]	@ (8004850 <HAL_RCC_ClockConfig+0x154>)
 8004824:	5cd3      	ldrb	r3, [r2, r3]
 8004826:	40d8      	lsrs	r0, r3
 8004828:	4b0a      	ldr	r3, [pc, #40]	@ (8004854 <HAL_RCC_ClockConfig+0x158>)
 800482a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800482c:	4b0a      	ldr	r3, [pc, #40]	@ (8004858 <HAL_RCC_ClockConfig+0x15c>)
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	f000 fdde 	bl	80053f0 <HAL_InitTick>
  return HAL_OK;
 8004834:	2000      	movs	r0, #0
}
 8004836:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004838:	2001      	movs	r0, #1
}
 800483a:	4770      	bx	lr
      return HAL_ERROR;
 800483c:	2001      	movs	r0, #1
 800483e:	e7fa      	b.n	8004836 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8004840:	2001      	movs	r0, #1
 8004842:	e7f8      	b.n	8004836 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8004844:	2001      	movs	r0, #1
 8004846:	e7f6      	b.n	8004836 <HAL_RCC_ClockConfig+0x13a>
 8004848:	40023c00 	.word	0x40023c00
 800484c:	40023800 	.word	0x40023800
 8004850:	08009dcc 	.word	0x08009dcc
 8004854:	20000054 	.word	0x20000054
 8004858:	20000050 	.word	0x20000050

0800485c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800485c:	4b01      	ldr	r3, [pc, #4]	@ (8004864 <HAL_RCC_GetHCLKFreq+0x8>)
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	20000054 	.word	0x20000054

08004868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004868:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800486a:	f7ff fff7 	bl	800485c <HAL_RCC_GetHCLKFreq>
 800486e:	4b04      	ldr	r3, [pc, #16]	@ (8004880 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004876:	4a03      	ldr	r2, [pc, #12]	@ (8004884 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004878:	5cd3      	ldrb	r3, [r2, r3]
}
 800487a:	40d8      	lsrs	r0, r3
 800487c:	bd08      	pop	{r3, pc}
 800487e:	bf00      	nop
 8004880:	40023800 	.word	0x40023800
 8004884:	08009dc4 	.word	0x08009dc4

08004888 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004888:	230f      	movs	r3, #15
 800488a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800488c:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <HAL_RCC_GetClockConfig+0x34>)
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	f002 0203 	and.w	r2, r2, #3
 8004894:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800489c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80048a4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	08db      	lsrs	r3, r3, #3
 80048aa:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80048ae:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048b0:	4b03      	ldr	r3, [pc, #12]	@ (80048c0 <HAL_RCC_GetClockConfig+0x38>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	600b      	str	r3, [r1, #0]
}
 80048ba:	4770      	bx	lr
 80048bc:	40023800 	.word	0x40023800
 80048c0:	40023c00 	.word	0x40023c00

080048c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048c4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c6:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c8:	6a03      	ldr	r3, [r0, #32]
 80048ca:	f023 0301 	bic.w	r3, r3, #1
 80048ce:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048d2:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048d4:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d8:	680c      	ldr	r4, [r1, #0]
 80048da:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048dc:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048e0:	688b      	ldr	r3, [r1, #8]
 80048e2:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004914 <TIM_OC1_SetConfig+0x50>)
 80048e6:	4290      	cmp	r0, r2
 80048e8:	d006      	beq.n	80048f8 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ea:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ec:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ee:	684a      	ldr	r2, [r1, #4]
 80048f0:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f2:	6203      	str	r3, [r0, #32]
}
 80048f4:	bc30      	pop	{r4, r5}
 80048f6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80048f8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80048fc:	68ca      	ldr	r2, [r1, #12]
 80048fe:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8004900:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004904:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8004908:	694a      	ldr	r2, [r1, #20]
 800490a:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800490c:	698d      	ldr	r5, [r1, #24]
 800490e:	4315      	orrs	r5, r2
 8004910:	e7eb      	b.n	80048ea <TIM_OC1_SetConfig+0x26>
 8004912:	bf00      	nop
 8004914:	40010000 	.word	0x40010000

08004918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004918:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800491c:	6a02      	ldr	r2, [r0, #32]
 800491e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004922:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004924:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004926:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004928:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800492c:	680d      	ldr	r5, [r1, #0]
 800492e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004930:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004934:	688a      	ldr	r2, [r1, #8]
 8004936:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800493a:	4a0d      	ldr	r2, [pc, #52]	@ (8004970 <TIM_OC3_SetConfig+0x58>)
 800493c:	4290      	cmp	r0, r2
 800493e:	d006      	beq.n	800494e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004940:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004942:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004944:	684a      	ldr	r2, [r1, #4]
 8004946:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004948:	6203      	str	r3, [r0, #32]
}
 800494a:	bc30      	pop	{r4, r5}
 800494c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800494e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004952:	68ca      	ldr	r2, [r1, #12]
 8004954:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004958:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800495c:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004960:	694a      	ldr	r2, [r1, #20]
 8004962:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004966:	698a      	ldr	r2, [r1, #24]
 8004968:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 800496c:	e7e8      	b.n	8004940 <TIM_OC3_SetConfig+0x28>
 800496e:	bf00      	nop
 8004970:	40010000 	.word	0x40010000

08004974 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004976:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004978:	6a02      	ldr	r2, [r0, #32]
 800497a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800497e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004982:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004984:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004988:	680d      	ldr	r5, [r1, #0]
 800498a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800498e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004992:	688d      	ldr	r5, [r1, #8]
 8004994:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004998:	4d07      	ldr	r5, [pc, #28]	@ (80049b8 <TIM_OC4_SetConfig+0x44>)
 800499a:	42a8      	cmp	r0, r5
 800499c:	d006      	beq.n	80049ac <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800499e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049a0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049a2:	684a      	ldr	r2, [r1, #4]
 80049a4:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a6:	6203      	str	r3, [r0, #32]
}
 80049a8:	bc30      	pop	{r4, r5}
 80049aa:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049ac:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049b0:	694d      	ldr	r5, [r1, #20]
 80049b2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80049b6:	e7f2      	b.n	800499e <TIM_OC4_SetConfig+0x2a>
 80049b8:	40010000 	.word	0x40010000

080049bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049bc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049be:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c0:	6a04      	ldr	r4, [r0, #32]
 80049c2:	f024 0401 	bic.w	r4, r4, #1
 80049c6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049c8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049ca:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049ce:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049d2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80049d6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049d8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80049da:	6203      	str	r3, [r0, #32]
}
 80049dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049e4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e6:	6a04      	ldr	r4, [r0, #32]
 80049e8:	f024 0410 	bic.w	r4, r4, #16
 80049ec:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ee:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049f0:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049f4:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80049fc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a00:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004a02:	6203      	str	r3, [r0, #32]
}
 8004a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a0a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a10:	430b      	orrs	r3, r1
 8004a12:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a16:	6083      	str	r3, [r0, #8]
}
 8004a18:	4770      	bx	lr
	...

08004a1c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004a1c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d12a      	bne.n	8004a7a <HAL_TIM_Base_Start+0x5e>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	2302      	movs	r3, #2
 8004a26:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2a:	6803      	ldr	r3, [r0, #0]
 8004a2c:	4a15      	ldr	r2, [pc, #84]	@ (8004a84 <HAL_TIM_Base_Start+0x68>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d018      	beq.n	8004a64 <HAL_TIM_Base_Start+0x48>
 8004a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a36:	d015      	beq.n	8004a64 <HAL_TIM_Base_Start+0x48>
 8004a38:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d011      	beq.n	8004a64 <HAL_TIM_Base_Start+0x48>
 8004a40:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00d      	beq.n	8004a64 <HAL_TIM_Base_Start+0x48>
 8004a48:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d009      	beq.n	8004a64 <HAL_TIM_Base_Start+0x48>
 8004a50:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d005      	beq.n	8004a64 <HAL_TIM_Base_Start+0x48>
    __HAL_TIM_ENABLE(htim);
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004a60:	2000      	movs	r0, #0
 8004a62:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6a:	2a06      	cmp	r2, #6
 8004a6c:	d007      	beq.n	8004a7e <HAL_TIM_Base_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	f042 0201 	orr.w	r2, r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004a76:	2000      	movs	r0, #0
 8004a78:	4770      	bx	lr
    return HAL_ERROR;
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	4770      	bx	lr
  return HAL_OK;
 8004a7e:	2000      	movs	r0, #0
}
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40010000 	.word	0x40010000

08004a88 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004a88:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d12f      	bne.n	8004af0 <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	2302      	movs	r3, #2
 8004a92:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a96:	6802      	ldr	r2, [r0, #0]
 8004a98:	68d3      	ldr	r3, [r2, #12]
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa0:	6803      	ldr	r3, [r0, #0]
 8004aa2:	4a15      	ldr	r2, [pc, #84]	@ (8004af8 <HAL_TIM_Base_Start_IT+0x70>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d018      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0x52>
 8004aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aac:	d015      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0x52>
 8004aae:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d011      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0x52>
 8004ab6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00d      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0x52>
 8004abe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0x52>
 8004ac6:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d005      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	f042 0201 	orr.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	2a06      	cmp	r2, #6
 8004ae2:	d007      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004aec:	2000      	movs	r0, #0
 8004aee:	4770      	bx	lr
    return HAL_ERROR;
 8004af0:	2001      	movs	r0, #1
 8004af2:	4770      	bx	lr
  return HAL_OK;
 8004af4:	2000      	movs	r0, #0
}
 8004af6:	4770      	bx	lr
 8004af8:	40010000 	.word	0x40010000

08004afc <HAL_TIM_OC_MspInit>:
}
 8004afc:	4770      	bx	lr

08004afe <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIM_IC_CaptureCallback>:
}
 8004b00:	4770      	bx	lr

08004b02 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIM_TriggerCallback>:
}
 8004b04:	4770      	bx	lr

08004b06 <HAL_TIM_IRQHandler>:
{
 8004b06:	b570      	push	{r4, r5, r6, lr}
 8004b08:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8004b0a:	6803      	ldr	r3, [r0, #0]
 8004b0c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b0e:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b10:	f015 0f02 	tst.w	r5, #2
 8004b14:	d010      	beq.n	8004b38 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b16:	f016 0f02 	tst.w	r6, #2
 8004b1a:	d00d      	beq.n	8004b38 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b1c:	f06f 0202 	mvn.w	r2, #2
 8004b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b22:	2301      	movs	r3, #1
 8004b24:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b26:	6803      	ldr	r3, [r0, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f013 0f03 	tst.w	r3, #3
 8004b2e:	d05e      	beq.n	8004bee <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8004b30:	f7ff ffe6 	bl	8004b00 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b34:	2300      	movs	r3, #0
 8004b36:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b38:	f015 0f04 	tst.w	r5, #4
 8004b3c:	d012      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b3e:	f016 0f04 	tst.w	r6, #4
 8004b42:	d00f      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	f06f 0204 	mvn.w	r2, #4
 8004b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004b58:	d04f      	beq.n	8004bfa <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f7ff ffd0 	bl	8004b00 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b60:	2300      	movs	r3, #0
 8004b62:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b64:	f015 0f08 	tst.w	r5, #8
 8004b68:	d012      	beq.n	8004b90 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b6a:	f016 0f08 	tst.w	r6, #8
 8004b6e:	d00f      	beq.n	8004b90 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	f06f 0208 	mvn.w	r2, #8
 8004b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b78:	2304      	movs	r3, #4
 8004b7a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f013 0f03 	tst.w	r3, #3
 8004b84:	d040      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b86:	4620      	mov	r0, r4
 8004b88:	f7ff ffba 	bl	8004b00 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b90:	f015 0f10 	tst.w	r5, #16
 8004b94:	d012      	beq.n	8004bbc <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b96:	f016 0f10 	tst.w	r6, #16
 8004b9a:	d00f      	beq.n	8004bbc <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	f06f 0210 	mvn.w	r2, #16
 8004ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004bb0:	d031      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f7ff ffa4 	bl	8004b00 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bbc:	f015 0f01 	tst.w	r5, #1
 8004bc0:	d002      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bc2:	f016 0f01 	tst.w	r6, #1
 8004bc6:	d12d      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bc8:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8004bcc:	d002      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bce:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8004bd2:	d12f      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bd4:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8004bd8:	d002      	beq.n	8004be0 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bda:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8004bde:	d131      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004be0:	f015 0f20 	tst.w	r5, #32
 8004be4:	d002      	beq.n	8004bec <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004be6:	f016 0f20 	tst.w	r6, #32
 8004bea:	d133      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x14e>
}
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bee:	f7ff ff86 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7ff ff85 	bl	8004b02 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bf8:	e79c      	b.n	8004b34 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f7ff ff7f 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c00:	4620      	mov	r0, r4
 8004c02:	f7ff ff7e 	bl	8004b02 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c06:	e7ab      	b.n	8004b60 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f7ff ff78 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f7ff ff77 	bl	8004b02 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c14:	e7ba      	b.n	8004b8c <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c16:	4620      	mov	r0, r4
 8004c18:	f7ff ff71 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	f7ff ff70 	bl	8004b02 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c22:	e7c9      	b.n	8004bb8 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	f06f 0201 	mvn.w	r2, #1
 8004c2a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	f7fd f865 	bl	8001cfc <HAL_TIM_PeriodElapsedCallback>
 8004c32:	e7c9      	b.n	8004bc8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c3a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f000 fbd5 	bl	80053ec <HAL_TIMEx_BreakCallback>
 8004c42:	e7c7      	b.n	8004bd4 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c4a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f7ff ff59 	bl	8004b04 <HAL_TIM_TriggerCallback>
 8004c52:	e7c5      	b.n	8004be0 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	f06f 0220 	mvn.w	r2, #32
 8004c5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f000 fbc4 	bl	80053ea <HAL_TIMEx_CommutCallback>
}
 8004c62:	e7c3      	b.n	8004bec <HAL_TIM_IRQHandler+0xe6>

08004c64 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004c64:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c66:	4a29      	ldr	r2, [pc, #164]	@ (8004d0c <TIM_Base_SetConfig+0xa8>)
 8004c68:	4290      	cmp	r0, r2
 8004c6a:	d00e      	beq.n	8004c8a <TIM_Base_SetConfig+0x26>
 8004c6c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004c70:	d00b      	beq.n	8004c8a <TIM_Base_SetConfig+0x26>
 8004c72:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004c76:	4290      	cmp	r0, r2
 8004c78:	d007      	beq.n	8004c8a <TIM_Base_SetConfig+0x26>
 8004c7a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004c7e:	4290      	cmp	r0, r2
 8004c80:	d003      	beq.n	8004c8a <TIM_Base_SetConfig+0x26>
 8004c82:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004c86:	4290      	cmp	r0, r2
 8004c88:	d103      	bne.n	8004c92 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c8e:	684a      	ldr	r2, [r1, #4]
 8004c90:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c92:	4a1e      	ldr	r2, [pc, #120]	@ (8004d0c <TIM_Base_SetConfig+0xa8>)
 8004c94:	4290      	cmp	r0, r2
 8004c96:	d01a      	beq.n	8004cce <TIM_Base_SetConfig+0x6a>
 8004c98:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004c9c:	d017      	beq.n	8004cce <TIM_Base_SetConfig+0x6a>
 8004c9e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004ca2:	4290      	cmp	r0, r2
 8004ca4:	d013      	beq.n	8004cce <TIM_Base_SetConfig+0x6a>
 8004ca6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004caa:	4290      	cmp	r0, r2
 8004cac:	d00f      	beq.n	8004cce <TIM_Base_SetConfig+0x6a>
 8004cae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004cb2:	4290      	cmp	r0, r2
 8004cb4:	d00b      	beq.n	8004cce <TIM_Base_SetConfig+0x6a>
 8004cb6:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8004cba:	4290      	cmp	r0, r2
 8004cbc:	d007      	beq.n	8004cce <TIM_Base_SetConfig+0x6a>
 8004cbe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004cc2:	4290      	cmp	r0, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_Base_SetConfig+0x6a>
 8004cc6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004cca:	4290      	cmp	r0, r2
 8004ccc:	d103      	bne.n	8004cd6 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cd2:	68ca      	ldr	r2, [r1, #12]
 8004cd4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cda:	694a      	ldr	r2, [r1, #20]
 8004cdc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004cde:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce0:	688b      	ldr	r3, [r1, #8]
 8004ce2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ce4:	680b      	ldr	r3, [r1, #0]
 8004ce6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ce8:	4b08      	ldr	r3, [pc, #32]	@ (8004d0c <TIM_Base_SetConfig+0xa8>)
 8004cea:	4298      	cmp	r0, r3
 8004cec:	d00a      	beq.n	8004d04 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cf2:	6903      	ldr	r3, [r0, #16]
 8004cf4:	f013 0f01 	tst.w	r3, #1
 8004cf8:	d003      	beq.n	8004d02 <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cfa:	6903      	ldr	r3, [r0, #16]
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	6103      	str	r3, [r0, #16]
}
 8004d02:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8004d04:	690b      	ldr	r3, [r1, #16]
 8004d06:	6303      	str	r3, [r0, #48]	@ 0x30
 8004d08:	e7f1      	b.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004d0a:	bf00      	nop
 8004d0c:	40010000 	.word	0x40010000

08004d10 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004d10:	b340      	cbz	r0, 8004d64 <HAL_TIM_Base_Init+0x54>
{
 8004d12:	b510      	push	{r4, lr}
 8004d14:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004d16:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004d1a:	b1f3      	cbz	r3, 8004d5a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d22:	4621      	mov	r1, r4
 8004d24:	f851 0b04 	ldr.w	r0, [r1], #4
 8004d28:	f7ff ff9c 	bl	8004c64 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d32:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004d36:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004d3a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004d3e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d42:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d4a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004d4e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004d52:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004d56:	2000      	movs	r0, #0
}
 8004d58:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004d5a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004d5e:	f001 ff1b 	bl	8006b98 <HAL_TIM_Base_MspInit>
 8004d62:	e7db      	b.n	8004d1c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004d64:	2001      	movs	r0, #1
}
 8004d66:	4770      	bx	lr

08004d68 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8004d68:	b340      	cbz	r0, 8004dbc <HAL_TIM_OC_Init+0x54>
{
 8004d6a:	b510      	push	{r4, lr}
 8004d6c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004d72:	b1f3      	cbz	r3, 8004db2 <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004d74:	2302      	movs	r3, #2
 8004d76:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004d80:	f7ff ff70 	bl	8004c64 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d84:	2301      	movs	r3, #1
 8004d86:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004d8e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004d92:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004d96:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004da2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004da6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004daa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004dae:	2000      	movs	r0, #0
}
 8004db0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004db2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8004db6:	f7ff fea1 	bl	8004afc <HAL_TIM_OC_MspInit>
 8004dba:	e7db      	b.n	8004d74 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8004dbc:	2001      	movs	r0, #1
}
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004dc0:	b340      	cbz	r0, 8004e14 <HAL_TIM_PWM_Init+0x54>
{
 8004dc2:	b510      	push	{r4, lr}
 8004dc4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004dca:	b1f3      	cbz	r3, 8004e0a <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	f851 0b04 	ldr.w	r0, [r1], #4
 8004dd8:	f7ff ff44 	bl	8004c64 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004de6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004dea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004dee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004df6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dfa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004dfe:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004e02:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004e06:	2000      	movs	r0, #0
}
 8004e08:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004e0a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004e0e:	f001 fe8f 	bl	8006b30 <HAL_TIM_PWM_MspInit>
 8004e12:	e7db      	b.n	8004dcc <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004e14:	2001      	movs	r0, #1
}
 8004e16:	4770      	bx	lr

08004e18 <TIM_OC2_SetConfig>:
{
 8004e18:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8004e1a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e1c:	6a02      	ldr	r2, [r0, #32]
 8004e1e:	f022 0210 	bic.w	r2, r2, #16
 8004e22:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004e24:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004e26:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e28:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e2c:	680d      	ldr	r5, [r1, #0]
 8004e2e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004e32:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e36:	688d      	ldr	r5, [r1, #8]
 8004e38:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e3c:	4d0c      	ldr	r5, [pc, #48]	@ (8004e70 <TIM_OC2_SetConfig+0x58>)
 8004e3e:	42a8      	cmp	r0, r5
 8004e40:	d006      	beq.n	8004e50 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8004e42:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004e44:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004e46:	684a      	ldr	r2, [r1, #4]
 8004e48:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004e4a:	6203      	str	r3, [r0, #32]
}
 8004e4c:	bc30      	pop	{r4, r5}
 8004e4e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e54:	68cd      	ldr	r5, [r1, #12]
 8004e56:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e5e:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e62:	694d      	ldr	r5, [r1, #20]
 8004e64:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e68:	698d      	ldr	r5, [r1, #24]
 8004e6a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004e6e:	e7e8      	b.n	8004e42 <TIM_OC2_SetConfig+0x2a>
 8004e70:	40010000 	.word	0x40010000

08004e74 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8004e74:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d028      	beq.n	8004ece <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004e80:	2301      	movs	r3, #1
 8004e82:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8004e86:	2a0c      	cmp	r2, #12
 8004e88:	d81c      	bhi.n	8004ec4 <HAL_TIM_OC_ConfigChannel+0x50>
 8004e8a:	e8df f002 	tbb	[pc, r2]
 8004e8e:	1b07      	.short	0x1b07
 8004e90:	1b0c1b1b 	.word	0x1b0c1b1b
 8004e94:	1b111b1b 	.word	0x1b111b1b
 8004e98:	1b1b      	.short	0x1b1b
 8004e9a:	16          	.byte	0x16
 8004e9b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e9c:	6800      	ldr	r0, [r0, #0]
 8004e9e:	f7ff fd11 	bl	80048c4 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004ea2:	2000      	movs	r0, #0
      break;
 8004ea4:	e00f      	b.n	8004ec6 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ea6:	6800      	ldr	r0, [r0, #0]
 8004ea8:	f7ff ffb6 	bl	8004e18 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004eac:	2000      	movs	r0, #0
      break;
 8004eae:	e00a      	b.n	8004ec6 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eb0:	6800      	ldr	r0, [r0, #0]
 8004eb2:	f7ff fd31 	bl	8004918 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004eb6:	2000      	movs	r0, #0
      break;
 8004eb8:	e005      	b.n	8004ec6 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eba:	6800      	ldr	r0, [r0, #0]
 8004ebc:	f7ff fd5a 	bl	8004974 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004ec0:	2000      	movs	r0, #0
      break;
 8004ec2:	e000      	b.n	8004ec6 <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 8004ec4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004ecc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8004ece:	2002      	movs	r0, #2
}
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_TIM_PWM_ConfigChannel>:
{
 8004ed2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004ed4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d066      	beq.n	8004faa <HAL_TIM_PWM_ConfigChannel+0xd8>
 8004edc:	4604      	mov	r4, r0
 8004ede:	460d      	mov	r5, r1
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8004ee6:	2a0c      	cmp	r2, #12
 8004ee8:	d85a      	bhi.n	8004fa0 <HAL_TIM_PWM_ConfigChannel+0xce>
 8004eea:	e8df f002 	tbb	[pc, r2]
 8004eee:	5907      	.short	0x5907
 8004ef0:	591b5959 	.word	0x591b5959
 8004ef4:	59305959 	.word	0x59305959
 8004ef8:	5959      	.short	0x5959
 8004efa:	44          	.byte	0x44
 8004efb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004efc:	6800      	ldr	r0, [r0, #0]
 8004efe:	f7ff fce1 	bl	80048c4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	6993      	ldr	r3, [r2, #24]
 8004f06:	f043 0308 	orr.w	r3, r3, #8
 8004f0a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f0c:	6822      	ldr	r2, [r4, #0]
 8004f0e:	6993      	ldr	r3, [r2, #24]
 8004f10:	f023 0304 	bic.w	r3, r3, #4
 8004f14:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	6993      	ldr	r3, [r2, #24]
 8004f1a:	6929      	ldr	r1, [r5, #16]
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004f20:	2000      	movs	r0, #0
      break;
 8004f22:	e03e      	b.n	8004fa2 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f24:	6800      	ldr	r0, [r0, #0]
 8004f26:	f7ff ff77 	bl	8004e18 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f2a:	6822      	ldr	r2, [r4, #0]
 8004f2c:	6993      	ldr	r3, [r2, #24]
 8004f2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004f32:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f34:	6822      	ldr	r2, [r4, #0]
 8004f36:	6993      	ldr	r3, [r2, #24]
 8004f38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f3c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f3e:	6822      	ldr	r2, [r4, #0]
 8004f40:	6993      	ldr	r3, [r2, #24]
 8004f42:	6929      	ldr	r1, [r5, #16]
 8004f44:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004f48:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4a:	2000      	movs	r0, #0
      break;
 8004f4c:	e029      	b.n	8004fa2 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f4e:	6800      	ldr	r0, [r0, #0]
 8004f50:	f7ff fce2 	bl	8004918 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f54:	6822      	ldr	r2, [r4, #0]
 8004f56:	69d3      	ldr	r3, [r2, #28]
 8004f58:	f043 0308 	orr.w	r3, r3, #8
 8004f5c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f5e:	6822      	ldr	r2, [r4, #0]
 8004f60:	69d3      	ldr	r3, [r2, #28]
 8004f62:	f023 0304 	bic.w	r3, r3, #4
 8004f66:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	69d3      	ldr	r3, [r2, #28]
 8004f6c:	6929      	ldr	r1, [r5, #16]
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004f72:	2000      	movs	r0, #0
      break;
 8004f74:	e015      	b.n	8004fa2 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f76:	6800      	ldr	r0, [r0, #0]
 8004f78:	f7ff fcfc 	bl	8004974 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f7c:	6822      	ldr	r2, [r4, #0]
 8004f7e:	69d3      	ldr	r3, [r2, #28]
 8004f80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004f84:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f86:	6822      	ldr	r2, [r4, #0]
 8004f88:	69d3      	ldr	r3, [r2, #28]
 8004f8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f8e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f90:	6822      	ldr	r2, [r4, #0]
 8004f92:	69d3      	ldr	r3, [r2, #28]
 8004f94:	6929      	ldr	r1, [r5, #16]
 8004f96:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004f9a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004f9c:	2000      	movs	r0, #0
      break;
 8004f9e:	e000      	b.n	8004fa2 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8004fa0:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004fa8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004faa:	2002      	movs	r0, #2
 8004fac:	e7fc      	b.n	8004fa8 <HAL_TIM_PWM_ConfigChannel+0xd6>

08004fae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fae:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fb0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb2:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fb6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc0:	6082      	str	r2, [r0, #8]
}
 8004fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004fc8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d078      	beq.n	80050c2 <HAL_TIM_ConfigClockSource+0xfa>
{
 8004fd0:	b510      	push	{r4, lr}
 8004fd2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004fda:	2302      	movs	r3, #2
 8004fdc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004fe0:	6802      	ldr	r2, [r0, #0]
 8004fe2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fe8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004fec:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004fee:	680b      	ldr	r3, [r1, #0]
 8004ff0:	2b60      	cmp	r3, #96	@ 0x60
 8004ff2:	d04c      	beq.n	800508e <HAL_TIM_ConfigClockSource+0xc6>
 8004ff4:	d823      	bhi.n	800503e <HAL_TIM_ConfigClockSource+0x76>
 8004ff6:	2b40      	cmp	r3, #64	@ 0x40
 8004ff8:	d054      	beq.n	80050a4 <HAL_TIM_ConfigClockSource+0xdc>
 8004ffa:	d811      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x58>
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d003      	beq.n	8005008 <HAL_TIM_ConfigClockSource+0x40>
 8005000:	d80a      	bhi.n	8005018 <HAL_TIM_ConfigClockSource+0x50>
 8005002:	b10b      	cbz	r3, 8005008 <HAL_TIM_ConfigClockSource+0x40>
 8005004:	2b10      	cmp	r3, #16
 8005006:	d105      	bne.n	8005014 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005008:	4619      	mov	r1, r3
 800500a:	6820      	ldr	r0, [r4, #0]
 800500c:	f7ff fcfd 	bl	8004a0a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005010:	2000      	movs	r0, #0
      break;
 8005012:	e028      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8005014:	2001      	movs	r0, #1
 8005016:	e026      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8005018:	2b30      	cmp	r3, #48	@ 0x30
 800501a:	d0f5      	beq.n	8005008 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 800501c:	2001      	movs	r0, #1
 800501e:	e022      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8005020:	2b50      	cmp	r3, #80	@ 0x50
 8005022:	d10a      	bne.n	800503a <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005024:	68ca      	ldr	r2, [r1, #12]
 8005026:	6849      	ldr	r1, [r1, #4]
 8005028:	6800      	ldr	r0, [r0, #0]
 800502a:	f7ff fcc7 	bl	80049bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800502e:	2150      	movs	r1, #80	@ 0x50
 8005030:	6820      	ldr	r0, [r4, #0]
 8005032:	f7ff fcea 	bl	8004a0a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005036:	2000      	movs	r0, #0
      break;
 8005038:	e015      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800503a:	2001      	movs	r0, #1
 800503c:	e013      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800503e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005042:	d03a      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0xf2>
 8005044:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005048:	d014      	beq.n	8005074 <HAL_TIM_ConfigClockSource+0xac>
 800504a:	2b70      	cmp	r3, #112	@ 0x70
 800504c:	d137      	bne.n	80050be <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 800504e:	68cb      	ldr	r3, [r1, #12]
 8005050:	684a      	ldr	r2, [r1, #4]
 8005052:	6889      	ldr	r1, [r1, #8]
 8005054:	6800      	ldr	r0, [r0, #0]
 8005056:	f7ff ffaa 	bl	8004fae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800505a:	6822      	ldr	r2, [r4, #0]
 800505c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800505e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005062:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005064:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005066:	2301      	movs	r3, #1
 8005068:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800506c:	2300      	movs	r3, #0
 800506e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005072:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8005074:	68cb      	ldr	r3, [r1, #12]
 8005076:	684a      	ldr	r2, [r1, #4]
 8005078:	6889      	ldr	r1, [r1, #8]
 800507a:	6800      	ldr	r0, [r0, #0]
 800507c:	f7ff ff97 	bl	8004fae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005080:	6822      	ldr	r2, [r4, #0]
 8005082:	6893      	ldr	r3, [r2, #8]
 8005084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005088:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800508a:	2000      	movs	r0, #0
      break;
 800508c:	e7eb      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800508e:	68ca      	ldr	r2, [r1, #12]
 8005090:	6849      	ldr	r1, [r1, #4]
 8005092:	6800      	ldr	r0, [r0, #0]
 8005094:	f7ff fca5 	bl	80049e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005098:	2160      	movs	r1, #96	@ 0x60
 800509a:	6820      	ldr	r0, [r4, #0]
 800509c:	f7ff fcb5 	bl	8004a0a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80050a0:	2000      	movs	r0, #0
      break;
 80050a2:	e7e0      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a4:	68ca      	ldr	r2, [r1, #12]
 80050a6:	6849      	ldr	r1, [r1, #4]
 80050a8:	6800      	ldr	r0, [r0, #0]
 80050aa:	f7ff fc87 	bl	80049bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050ae:	2140      	movs	r1, #64	@ 0x40
 80050b0:	6820      	ldr	r0, [r4, #0]
 80050b2:	f7ff fcaa 	bl	8004a0a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80050b6:	2000      	movs	r0, #0
      break;
 80050b8:	e7d5      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80050ba:	2000      	movs	r0, #0
 80050bc:	e7d3      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80050be:	2001      	movs	r0, #1
 80050c0:	e7d1      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 80050c2:	2002      	movs	r0, #2
}
 80050c4:	4770      	bx	lr

080050c6 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050c6:	f001 011f 	and.w	r1, r1, #31
 80050ca:	f04f 0c01 	mov.w	ip, #1
 80050ce:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050d2:	6a03      	ldr	r3, [r0, #32]
 80050d4:	ea23 030c 	bic.w	r3, r3, ip
 80050d8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050da:	6a03      	ldr	r3, [r0, #32]
 80050dc:	408a      	lsls	r2, r1
 80050de:	4313      	orrs	r3, r2
 80050e0:	6203      	str	r3, [r0, #32]
}
 80050e2:	4770      	bx	lr

080050e4 <HAL_TIM_OC_Start_IT>:
{
 80050e4:	b510      	push	{r4, lr}
 80050e6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050e8:	4608      	mov	r0, r1
 80050ea:	2900      	cmp	r1, #0
 80050ec:	d137      	bne.n	800515e <HAL_TIM_OC_Start_IT+0x7a>
 80050ee:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80050f2:	3b01      	subs	r3, #1
 80050f4:	bf18      	it	ne
 80050f6:	2301      	movne	r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f040 8095 	bne.w	8005228 <HAL_TIM_OC_Start_IT+0x144>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050fe:	2800      	cmp	r0, #0
 8005100:	d143      	bne.n	800518a <HAL_TIM_OC_Start_IT+0xa6>
 8005102:	2302      	movs	r3, #2
 8005104:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005108:	6822      	ldr	r2, [r4, #0]
 800510a:	68d3      	ldr	r3, [r2, #12]
 800510c:	f043 0302 	orr.w	r3, r3, #2
 8005110:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005112:	2201      	movs	r2, #1
 8005114:	4601      	mov	r1, r0
 8005116:	6820      	ldr	r0, [r4, #0]
 8005118:	f7ff ffd5 	bl	80050c6 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	4a45      	ldr	r2, [pc, #276]	@ (8005234 <HAL_TIM_OC_Start_IT+0x150>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d071      	beq.n	8005208 <HAL_TIM_OC_Start_IT+0x124>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	4a43      	ldr	r2, [pc, #268]	@ (8005234 <HAL_TIM_OC_Start_IT+0x150>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d072      	beq.n	8005212 <HAL_TIM_OC_Start_IT+0x12e>
 800512c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005130:	d06f      	beq.n	8005212 <HAL_TIM_OC_Start_IT+0x12e>
 8005132:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8005136:	4293      	cmp	r3, r2
 8005138:	d06b      	beq.n	8005212 <HAL_TIM_OC_Start_IT+0x12e>
 800513a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800513e:	4293      	cmp	r3, r2
 8005140:	d067      	beq.n	8005212 <HAL_TIM_OC_Start_IT+0x12e>
 8005142:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005146:	4293      	cmp	r3, r2
 8005148:	d063      	beq.n	8005212 <HAL_TIM_OC_Start_IT+0x12e>
 800514a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800514e:	4293      	cmp	r3, r2
 8005150:	d05f      	beq.n	8005212 <HAL_TIM_OC_Start_IT+0x12e>
      __HAL_TIM_ENABLE(htim);
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	2000      	movs	r0, #0
 800515c:	e065      	b.n	800522a <HAL_TIM_OC_Start_IT+0x146>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800515e:	2904      	cmp	r1, #4
 8005160:	d007      	beq.n	8005172 <HAL_TIM_OC_Start_IT+0x8e>
 8005162:	2908      	cmp	r1, #8
 8005164:	d00b      	beq.n	800517e <HAL_TIM_OC_Start_IT+0x9a>
 8005166:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800516a:	3b01      	subs	r3, #1
 800516c:	bf18      	it	ne
 800516e:	2301      	movne	r3, #1
 8005170:	e7c2      	b.n	80050f8 <HAL_TIM_OC_Start_IT+0x14>
 8005172:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8005176:	3b01      	subs	r3, #1
 8005178:	bf18      	it	ne
 800517a:	2301      	movne	r3, #1
 800517c:	e7bc      	b.n	80050f8 <HAL_TIM_OC_Start_IT+0x14>
 800517e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8005182:	3b01      	subs	r3, #1
 8005184:	bf18      	it	ne
 8005186:	2301      	movne	r3, #1
 8005188:	e7b6      	b.n	80050f8 <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800518a:	2804      	cmp	r0, #4
 800518c:	d024      	beq.n	80051d8 <HAL_TIM_OC_Start_IT+0xf4>
 800518e:	2808      	cmp	r0, #8
 8005190:	d02b      	beq.n	80051ea <HAL_TIM_OC_Start_IT+0x106>
 8005192:	2302      	movs	r3, #2
 8005194:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  switch (Channel)
 8005198:	280c      	cmp	r0, #12
 800519a:	d847      	bhi.n	800522c <HAL_TIM_OC_Start_IT+0x148>
 800519c:	a301      	add	r3, pc, #4	@ (adr r3, 80051a4 <HAL_TIM_OC_Start_IT+0xc0>)
 800519e:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80051a2:	bf00      	nop
 80051a4:	08005109 	.word	0x08005109
 80051a8:	0800522d 	.word	0x0800522d
 80051ac:	0800522d 	.word	0x0800522d
 80051b0:	0800522d 	.word	0x0800522d
 80051b4:	080051df 	.word	0x080051df
 80051b8:	0800522d 	.word	0x0800522d
 80051bc:	0800522d 	.word	0x0800522d
 80051c0:	0800522d 	.word	0x0800522d
 80051c4:	080051f1 	.word	0x080051f1
 80051c8:	0800522d 	.word	0x0800522d
 80051cc:	0800522d 	.word	0x0800522d
 80051d0:	0800522d 	.word	0x0800522d
 80051d4:	080051fd 	.word	0x080051fd
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d8:	2302      	movs	r3, #2
 80051da:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051de:	6822      	ldr	r2, [r4, #0]
 80051e0:	68d3      	ldr	r3, [r2, #12]
 80051e2:	f043 0304 	orr.w	r3, r3, #4
 80051e6:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80051e8:	e793      	b.n	8005112 <HAL_TIM_OC_Start_IT+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ea:	2302      	movs	r3, #2
 80051ec:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051f0:	6822      	ldr	r2, [r4, #0]
 80051f2:	68d3      	ldr	r3, [r2, #12]
 80051f4:	f043 0308 	orr.w	r3, r3, #8
 80051f8:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80051fa:	e78a      	b.n	8005112 <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051fc:	6822      	ldr	r2, [r4, #0]
 80051fe:	68d3      	ldr	r3, [r2, #12]
 8005200:	f043 0310 	orr.w	r3, r3, #16
 8005204:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8005206:	e784      	b.n	8005112 <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_MOE_ENABLE(htim);
 8005208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800520a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800520e:	645a      	str	r2, [r3, #68]	@ 0x44
 8005210:	e788      	b.n	8005124 <HAL_TIM_OC_Start_IT+0x40>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005218:	2a06      	cmp	r2, #6
 800521a:	d009      	beq.n	8005230 <HAL_TIM_OC_Start_IT+0x14c>
        __HAL_TIM_ENABLE(htim);
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	2000      	movs	r0, #0
 8005226:	e000      	b.n	800522a <HAL_TIM_OC_Start_IT+0x146>
    return HAL_ERROR;
 8005228:	2001      	movs	r0, #1
}
 800522a:	bd10      	pop	{r4, pc}
  switch (Channel)
 800522c:	2001      	movs	r0, #1
 800522e:	e7fc      	b.n	800522a <HAL_TIM_OC_Start_IT+0x146>
 8005230:	2000      	movs	r0, #0
 8005232:	e7fa      	b.n	800522a <HAL_TIM_OC_Start_IT+0x146>
 8005234:	40010000 	.word	0x40010000

08005238 <HAL_TIM_PWM_Start>:
{
 8005238:	b510      	push	{r4, lr}
 800523a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800523c:	4608      	mov	r0, r1
 800523e:	bb89      	cbnz	r1, 80052a4 <HAL_TIM_PWM_Start+0x6c>
 8005240:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8005244:	3b01      	subs	r3, #1
 8005246:	bf18      	it	ne
 8005248:	2301      	movne	r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d160      	bne.n	8005310 <HAL_TIM_PWM_Start+0xd8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800524e:	2800      	cmp	r0, #0
 8005250:	d13e      	bne.n	80052d0 <HAL_TIM_PWM_Start+0x98>
 8005252:	2302      	movs	r3, #2
 8005254:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005258:	2201      	movs	r2, #1
 800525a:	4601      	mov	r1, r0
 800525c:	6820      	ldr	r0, [r4, #0]
 800525e:	f7ff ff32 	bl	80050c6 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	4a2c      	ldr	r2, [pc, #176]	@ (8005318 <HAL_TIM_PWM_Start+0xe0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d042      	beq.n	80052f0 <HAL_TIM_PWM_Start+0xb8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	4a2a      	ldr	r2, [pc, #168]	@ (8005318 <HAL_TIM_PWM_Start+0xe0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d043      	beq.n	80052fa <HAL_TIM_PWM_Start+0xc2>
 8005272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005276:	d040      	beq.n	80052fa <HAL_TIM_PWM_Start+0xc2>
 8005278:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800527c:	4293      	cmp	r3, r2
 800527e:	d03c      	beq.n	80052fa <HAL_TIM_PWM_Start+0xc2>
 8005280:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005284:	4293      	cmp	r3, r2
 8005286:	d038      	beq.n	80052fa <HAL_TIM_PWM_Start+0xc2>
 8005288:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800528c:	4293      	cmp	r3, r2
 800528e:	d034      	beq.n	80052fa <HAL_TIM_PWM_Start+0xc2>
 8005290:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8005294:	4293      	cmp	r3, r2
 8005296:	d030      	beq.n	80052fa <HAL_TIM_PWM_Start+0xc2>
    __HAL_TIM_ENABLE(htim);
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80052a0:	2000      	movs	r0, #0
 80052a2:	e034      	b.n	800530e <HAL_TIM_PWM_Start+0xd6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052a4:	2904      	cmp	r1, #4
 80052a6:	d007      	beq.n	80052b8 <HAL_TIM_PWM_Start+0x80>
 80052a8:	2908      	cmp	r1, #8
 80052aa:	d00b      	beq.n	80052c4 <HAL_TIM_PWM_Start+0x8c>
 80052ac:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80052b0:	3b01      	subs	r3, #1
 80052b2:	bf18      	it	ne
 80052b4:	2301      	movne	r3, #1
 80052b6:	e7c8      	b.n	800524a <HAL_TIM_PWM_Start+0x12>
 80052b8:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80052bc:	3b01      	subs	r3, #1
 80052be:	bf18      	it	ne
 80052c0:	2301      	movne	r3, #1
 80052c2:	e7c2      	b.n	800524a <HAL_TIM_PWM_Start+0x12>
 80052c4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80052c8:	3b01      	subs	r3, #1
 80052ca:	bf18      	it	ne
 80052cc:	2301      	movne	r3, #1
 80052ce:	e7bc      	b.n	800524a <HAL_TIM_PWM_Start+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052d0:	2804      	cmp	r0, #4
 80052d2:	d005      	beq.n	80052e0 <HAL_TIM_PWM_Start+0xa8>
 80052d4:	2808      	cmp	r0, #8
 80052d6:	d007      	beq.n	80052e8 <HAL_TIM_PWM_Start+0xb0>
 80052d8:	2302      	movs	r3, #2
 80052da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80052de:	e7bb      	b.n	8005258 <HAL_TIM_PWM_Start+0x20>
 80052e0:	2302      	movs	r3, #2
 80052e2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80052e6:	e7b7      	b.n	8005258 <HAL_TIM_PWM_Start+0x20>
 80052e8:	2302      	movs	r3, #2
 80052ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80052ee:	e7b3      	b.n	8005258 <HAL_TIM_PWM_Start+0x20>
    __HAL_TIM_MOE_ENABLE(htim);
 80052f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80052f8:	e7b7      	b.n	800526a <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005300:	2a06      	cmp	r2, #6
 8005302:	d007      	beq.n	8005314 <HAL_TIM_PWM_Start+0xdc>
      __HAL_TIM_ENABLE(htim);
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800530c:	2000      	movs	r0, #0
}
 800530e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005310:	2001      	movs	r0, #1
 8005312:	e7fc      	b.n	800530e <HAL_TIM_PWM_Start+0xd6>
  return HAL_OK;
 8005314:	2000      	movs	r0, #0
 8005316:	e7fa      	b.n	800530e <HAL_TIM_PWM_Start+0xd6>
 8005318:	40010000 	.word	0x40010000

0800531c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800531c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005320:	2a01      	cmp	r2, #1
 8005322:	d035      	beq.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8005324:	b410      	push	{r4}
 8005326:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005328:	2201      	movs	r2, #1
 800532a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532e:	2202      	movs	r2, #2
 8005330:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005334:	6802      	ldr	r2, [r0, #0]
 8005336:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005338:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800533a:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800533e:	6808      	ldr	r0, [r1, #0]
 8005340:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005344:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	4812      	ldr	r0, [pc, #72]	@ (8005394 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 800534a:	4282      	cmp	r2, r0
 800534c:	d012      	beq.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800534e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005352:	d00f      	beq.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8005354:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8005358:	4282      	cmp	r2, r0
 800535a:	d00b      	beq.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800535c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005360:	4282      	cmp	r2, r0
 8005362:	d007      	beq.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8005364:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005368:	4282      	cmp	r2, r0
 800536a:	d003      	beq.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800536c:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8005370:	4282      	cmp	r2, r0
 8005372:	d104      	bne.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005374:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005378:	6849      	ldr	r1, [r1, #4]
 800537a:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800537c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005384:	2000      	movs	r0, #0
 8005386:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800538a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800538e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005390:	2002      	movs	r0, #2
}
 8005392:	4770      	bx	lr
 8005394:	40010000 	.word	0x40010000

08005398 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005398:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800539a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d021      	beq.n	80053e6 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 80053a2:	2301      	movs	r3, #1
 80053a4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053a8:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053ae:	6888      	ldr	r0, [r1, #8]
 80053b0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053b6:	6848      	ldr	r0, [r1, #4]
 80053b8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053be:	6808      	ldr	r0, [r1, #0]
 80053c0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053c6:	6908      	ldr	r0, [r1, #16]
 80053c8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053ce:	6948      	ldr	r0, [r1, #20]
 80053d0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053d6:	69c9      	ldr	r1, [r1, #28]
 80053d8:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053da:	6811      	ldr	r1, [r2, #0]
 80053dc:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80053de:	2000      	movs	r0, #0
 80053e0:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 80053e4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80053e6:	2002      	movs	r0, #2
}
 80053e8:	4770      	bx	lr

080053ea <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053ea:	4770      	bx	lr

080053ec <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053ec:	4770      	bx	lr
	...

080053f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053f0:	b530      	push	{r4, r5, lr}
 80053f2:	b089      	sub	sp, #36	@ 0x24
 80053f4:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80053f6:	2400      	movs	r4, #0
 80053f8:	9401      	str	r4, [sp, #4]
 80053fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005470 <HAL_InitTick+0x80>)
 80053fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053fe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005402:	645a      	str	r2, [r3, #68]	@ 0x44
 8005404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005406:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800540e:	a902      	add	r1, sp, #8
 8005410:	a803      	add	r0, sp, #12
 8005412:	f7ff fa39 	bl	8004888 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005416:	f7ff fa27 	bl	8004868 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800541a:	4a16      	ldr	r2, [pc, #88]	@ (8005474 <HAL_InitTick+0x84>)
 800541c:	fba2 2300 	umull	r2, r3, r2, r0
 8005420:	0c9b      	lsrs	r3, r3, #18
 8005422:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8005424:	4814      	ldr	r0, [pc, #80]	@ (8005478 <HAL_InitTick+0x88>)
 8005426:	4a15      	ldr	r2, [pc, #84]	@ (800547c <HAL_InitTick+0x8c>)
 8005428:	6002      	str	r2, [r0, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800542a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800542e:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8005430:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 8005432:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005434:	6084      	str	r4, [r0, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005436:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8005438:	f7ff fc6a 	bl	8004d10 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800543c:	4604      	mov	r4, r0
 800543e:	b110      	cbz	r0, 8005446 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8005440:	4620      	mov	r0, r4
 8005442:	b009      	add	sp, #36	@ 0x24
 8005444:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim11);
 8005446:	480c      	ldr	r0, [pc, #48]	@ (8005478 <HAL_InitTick+0x88>)
 8005448:	f7ff fb1e 	bl	8004a88 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800544c:	4604      	mov	r4, r0
 800544e:	2800      	cmp	r0, #0
 8005450:	d1f6      	bne.n	8005440 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005452:	201a      	movs	r0, #26
 8005454:	f7fd fdaa 	bl	8002fac <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005458:	2d0f      	cmp	r5, #15
 800545a:	d901      	bls.n	8005460 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 800545c:	2401      	movs	r4, #1
 800545e:	e7ef      	b.n	8005440 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8005460:	2200      	movs	r2, #0
 8005462:	4629      	mov	r1, r5
 8005464:	201a      	movs	r0, #26
 8005466:	f7fd fd91 	bl	8002f8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800546a:	4b05      	ldr	r3, [pc, #20]	@ (8005480 <HAL_InitTick+0x90>)
 800546c:	601d      	str	r5, [r3, #0]
 800546e:	e7e7      	b.n	8005440 <HAL_InitTick+0x50>
 8005470:	40023800 	.word	0x40023800
 8005474:	431bde83 	.word	0x431bde83
 8005478:	20004710 	.word	0x20004710
 800547c:	40014800 	.word	0x40014800
 8005480:	20000050 	.word	0x20000050

08005484 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005484:	e7fe      	b.n	8005484 <NMI_Handler>

08005486 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005486:	e7fe      	b.n	8005486 <HardFault_Handler>

08005488 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005488:	e7fe      	b.n	8005488 <MemManage_Handler>

0800548a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800548a:	e7fe      	b.n	800548a <BusFault_Handler>

0800548c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800548c:	e7fe      	b.n	800548c <UsageFault_Handler>

0800548e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800548e:	4770      	bx	lr

08005490 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005490:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005492:	4803      	ldr	r0, [pc, #12]	@ (80054a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8005494:	f7ff fb37 	bl	8004b06 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8005498:	4802      	ldr	r0, [pc, #8]	@ (80054a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800549a:	f7ff fb34 	bl	8004b06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800549e:	bd08      	pop	{r3, pc}
 80054a0:	20004cec 	.word	0x20004cec
 80054a4:	20004710 	.word	0x20004710

080054a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80054a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  scheduler_timer_callback();
 80054aa:	f001 ffbf 	bl	800742c <scheduler_timer_callback>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80054ae:	4802      	ldr	r0, [pc, #8]	@ (80054b8 <TIM2_IRQHandler+0x10>)
 80054b0:	f7ff fb29 	bl	8004b06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80054b4:	bd08      	pop	{r3, pc}
 80054b6:	bf00      	nop
 80054b8:	20004ca4 	.word	0x20004ca4

080054bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80054bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80054be:	4802      	ldr	r0, [pc, #8]	@ (80054c8 <DMA2_Stream0_IRQHandler+0xc>)
 80054c0:	f7fd fe8e 	bl	80031e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80054c4:	bd08      	pop	{r3, pc}
 80054c6:	bf00      	nop
 80054c8:	200001b0 	.word	0x200001b0

080054cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80054cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80054ce:	4802      	ldr	r0, [pc, #8]	@ (80054d8 <OTG_FS_IRQHandler+0xc>)
 80054d0:	f7fe fbb9 	bl	8003c46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80054d4:	bd08      	pop	{r3, pc}
 80054d6:	bf00      	nop
 80054d8:	20005d04 	.word	0x20005d04

080054dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054dc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054e2:	9b01      	ldr	r3, [sp, #4]
 80054e4:	3301      	adds	r3, #1
 80054e6:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80054e8:	9b01      	ldr	r3, [sp, #4]
 80054ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054ee:	d815      	bhi.n	800551c <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054f0:	6903      	ldr	r3, [r0, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	daf5      	bge.n	80054e2 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054fa:	6903      	ldr	r3, [r0, #16]
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8005502:	9b01      	ldr	r3, [sp, #4]
 8005504:	3301      	adds	r3, #1
 8005506:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8005508:	9b01      	ldr	r3, [sp, #4]
 800550a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800550e:	d808      	bhi.n	8005522 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005510:	6903      	ldr	r3, [r0, #16]
 8005512:	f013 0f01 	tst.w	r3, #1
 8005516:	d1f4      	bne.n	8005502 <USB_CoreReset+0x26>

  return HAL_OK;
 8005518:	2000      	movs	r0, #0
 800551a:	e000      	b.n	800551e <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 800551c:	2003      	movs	r0, #3
}
 800551e:	b002      	add	sp, #8
 8005520:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005522:	2003      	movs	r0, #3
 8005524:	e7fb      	b.n	800551e <USB_CoreReset+0x42>

08005526 <USB_CoreInit>:
{
 8005526:	b084      	sub	sp, #16
 8005528:	b510      	push	{r4, lr}
 800552a:	4604      	mov	r4, r0
 800552c:	a803      	add	r0, sp, #12
 800552e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005532:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d121      	bne.n	800557e <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800553a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800553c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005540:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005542:	68e3      	ldr	r3, [r4, #12]
 8005544:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800554c:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800554e:	68e3      	ldr	r3, [r4, #12]
 8005550:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005554:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8005556:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d00a      	beq.n	8005574 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 800555e:	4620      	mov	r0, r4
 8005560:	f7ff ffbc 	bl	80054dc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8005564:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d01c      	beq.n	80055a6 <USB_CoreInit+0x80>
}
 800556c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005570:	b004      	add	sp, #16
 8005572:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005574:	68e3      	ldr	r3, [r4, #12]
 8005576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800557a:	60e3      	str	r3, [r4, #12]
 800557c:	e7ef      	b.n	800555e <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800557e:	68e3      	ldr	r3, [r4, #12]
 8005580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005584:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8005586:	4620      	mov	r0, r4
 8005588:	f7ff ffa8 	bl	80054dc <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800558c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8005590:	b923      	cbnz	r3, 800559c <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005592:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005598:	63a3      	str	r3, [r4, #56]	@ 0x38
 800559a:	e7e3      	b.n	8005564 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800559c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800559e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055a2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80055a4:	e7de      	b.n	8005564 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055a6:	68a3      	ldr	r3, [r4, #8]
 80055a8:	f043 0306 	orr.w	r3, r3, #6
 80055ac:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055ae:	68a3      	ldr	r3, [r4, #8]
 80055b0:	f043 0320 	orr.w	r3, r3, #32
 80055b4:	60a3      	str	r3, [r4, #8]
 80055b6:	e7d9      	b.n	800556c <USB_CoreInit+0x46>

080055b8 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80055b8:	2a02      	cmp	r2, #2
 80055ba:	d00a      	beq.n	80055d2 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 80055bc:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80055be:	68c3      	ldr	r3, [r0, #12]
 80055c0:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80055c4:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055c6:	68c3      	ldr	r3, [r0, #12]
 80055c8:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80055cc:	60c3      	str	r3, [r0, #12]
}
 80055ce:	2000      	movs	r0, #0
 80055d0:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80055d2:	4b23      	ldr	r3, [pc, #140]	@ (8005660 <USB_SetTurnaroundTime+0xa8>)
 80055d4:	440b      	add	r3, r1
 80055d6:	4a23      	ldr	r2, [pc, #140]	@ (8005664 <USB_SetTurnaroundTime+0xac>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d92f      	bls.n	800563c <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055dc:	4b22      	ldr	r3, [pc, #136]	@ (8005668 <USB_SetTurnaroundTime+0xb0>)
 80055de:	440b      	add	r3, r1
 80055e0:	4a22      	ldr	r2, [pc, #136]	@ (800566c <USB_SetTurnaroundTime+0xb4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d92c      	bls.n	8005640 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055e6:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 80055ea:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 80055ee:	4a20      	ldr	r2, [pc, #128]	@ (8005670 <USB_SetTurnaroundTime+0xb8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d927      	bls.n	8005644 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055f4:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 80055f8:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 80055fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005674 <USB_SetTurnaroundTime+0xbc>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d322      	bcc.n	8005648 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005602:	4b1d      	ldr	r3, [pc, #116]	@ (8005678 <USB_SetTurnaroundTime+0xc0>)
 8005604:	440b      	add	r3, r1
 8005606:	4a1d      	ldr	r2, [pc, #116]	@ (800567c <USB_SetTurnaroundTime+0xc4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d91f      	bls.n	800564c <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800560c:	4b1c      	ldr	r3, [pc, #112]	@ (8005680 <USB_SetTurnaroundTime+0xc8>)
 800560e:	440b      	add	r3, r1
 8005610:	4a1c      	ldr	r2, [pc, #112]	@ (8005684 <USB_SetTurnaroundTime+0xcc>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d31c      	bcc.n	8005650 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005616:	4b1c      	ldr	r3, [pc, #112]	@ (8005688 <USB_SetTurnaroundTime+0xd0>)
 8005618:	440b      	add	r3, r1
 800561a:	4a1c      	ldr	r2, [pc, #112]	@ (800568c <USB_SetTurnaroundTime+0xd4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d319      	bcc.n	8005654 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005620:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8005624:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 8005628:	4a19      	ldr	r2, [pc, #100]	@ (8005690 <USB_SetTurnaroundTime+0xd8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d314      	bcc.n	8005658 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800562e:	4b19      	ldr	r3, [pc, #100]	@ (8005694 <USB_SetTurnaroundTime+0xdc>)
 8005630:	440b      	add	r3, r1
 8005632:	4a19      	ldr	r2, [pc, #100]	@ (8005698 <USB_SetTurnaroundTime+0xe0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d211      	bcs.n	800565c <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 8005638:	2207      	movs	r2, #7
 800563a:	e7c0      	b.n	80055be <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 800563c:	220f      	movs	r2, #15
 800563e:	e7be      	b.n	80055be <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8005640:	220e      	movs	r2, #14
 8005642:	e7bc      	b.n	80055be <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8005644:	220d      	movs	r2, #13
 8005646:	e7ba      	b.n	80055be <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8005648:	220c      	movs	r2, #12
 800564a:	e7b8      	b.n	80055be <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 800564c:	220b      	movs	r2, #11
 800564e:	e7b6      	b.n	80055be <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8005650:	220a      	movs	r2, #10
 8005652:	e7b4      	b.n	80055be <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8005654:	2209      	movs	r2, #9
 8005656:	e7b2      	b.n	80055be <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8005658:	2208      	movs	r2, #8
 800565a:	e7b0      	b.n	80055be <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 800565c:	2206      	movs	r2, #6
 800565e:	e7ae      	b.n	80055be <USB_SetTurnaroundTime+0x6>
 8005660:	ff275340 	.word	0xff275340
 8005664:	000c34ff 	.word	0x000c34ff
 8005668:	ff1b1e40 	.word	0xff1b1e40
 800566c:	000f423f 	.word	0x000f423f
 8005670:	00124f7f 	.word	0x00124f7f
 8005674:	0013d620 	.word	0x0013d620
 8005678:	fee5b660 	.word	0xfee5b660
 800567c:	0016e35f 	.word	0x0016e35f
 8005680:	feced300 	.word	0xfeced300
 8005684:	001b7740 	.word	0x001b7740
 8005688:	feb35bc0 	.word	0xfeb35bc0
 800568c:	002191c0 	.word	0x002191c0
 8005690:	00387520 	.word	0x00387520
 8005694:	fe5954e0 	.word	0xfe5954e0
 8005698:	00419ce0 	.word	0x00419ce0

0800569c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800569c:	6883      	ldr	r3, [r0, #8]
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	6083      	str	r3, [r0, #8]
}
 80056a4:	2000      	movs	r0, #0
 80056a6:	4770      	bx	lr

080056a8 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056a8:	6883      	ldr	r3, [r0, #8]
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	6083      	str	r3, [r0, #8]
}
 80056b0:	2000      	movs	r0, #0
 80056b2:	4770      	bx	lr

080056b4 <USB_FlushTxFifo>:
{
 80056b4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	9301      	str	r3, [sp, #4]
    count++;
 80056ba:	9b01      	ldr	r3, [sp, #4]
 80056bc:	3301      	adds	r3, #1
 80056be:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80056c0:	9b01      	ldr	r3, [sp, #4]
 80056c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056c6:	d815      	bhi.n	80056f4 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056c8:	6903      	ldr	r3, [r0, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	daf5      	bge.n	80056ba <USB_FlushTxFifo+0x6>
  count = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056d2:	0189      	lsls	r1, r1, #6
 80056d4:	f041 0120 	orr.w	r1, r1, #32
 80056d8:	6101      	str	r1, [r0, #16]
    count++;
 80056da:	9b01      	ldr	r3, [sp, #4]
 80056dc:	3301      	adds	r3, #1
 80056de:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80056e0:	9b01      	ldr	r3, [sp, #4]
 80056e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056e6:	d808      	bhi.n	80056fa <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056e8:	6903      	ldr	r3, [r0, #16]
 80056ea:	f013 0f20 	tst.w	r3, #32
 80056ee:	d1f4      	bne.n	80056da <USB_FlushTxFifo+0x26>
  return HAL_OK;
 80056f0:	2000      	movs	r0, #0
 80056f2:	e000      	b.n	80056f6 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 80056f4:	2003      	movs	r0, #3
}
 80056f6:	b002      	add	sp, #8
 80056f8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80056fa:	2003      	movs	r0, #3
 80056fc:	e7fb      	b.n	80056f6 <USB_FlushTxFifo+0x42>

080056fe <USB_FlushRxFifo>:
{
 80056fe:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	9301      	str	r3, [sp, #4]
    count++;
 8005704:	9b01      	ldr	r3, [sp, #4]
 8005706:	3301      	adds	r3, #1
 8005708:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800570a:	9b01      	ldr	r3, [sp, #4]
 800570c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005710:	d813      	bhi.n	800573a <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005712:	6903      	ldr	r3, [r0, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	daf5      	bge.n	8005704 <USB_FlushRxFifo+0x6>
  count = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800571c:	2310      	movs	r3, #16
 800571e:	6103      	str	r3, [r0, #16]
    count++;
 8005720:	9b01      	ldr	r3, [sp, #4]
 8005722:	3301      	adds	r3, #1
 8005724:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8005726:	9b01      	ldr	r3, [sp, #4]
 8005728:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800572c:	d808      	bhi.n	8005740 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800572e:	6903      	ldr	r3, [r0, #16]
 8005730:	f013 0f10 	tst.w	r3, #16
 8005734:	d1f4      	bne.n	8005720 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8005736:	2000      	movs	r0, #0
 8005738:	e000      	b.n	800573c <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 800573a:	2003      	movs	r0, #3
}
 800573c:	b002      	add	sp, #8
 800573e:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005740:	2003      	movs	r0, #3
 8005742:	e7fb      	b.n	800573c <USB_FlushRxFifo+0x3e>

08005744 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8005744:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8005748:	4319      	orrs	r1, r3
 800574a:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 800574e:	2000      	movs	r0, #0
 8005750:	4770      	bx	lr
	...

08005754 <USB_DevInit>:
{
 8005754:	b084      	sub	sp, #16
 8005756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005758:	4604      	mov	r4, r0
 800575a:	a807      	add	r0, sp, #28
 800575c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8005760:	2300      	movs	r3, #0
 8005762:	e006      	b.n	8005772 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8005764:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8005768:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800576c:	2100      	movs	r1, #0
 800576e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8005770:	3301      	adds	r3, #1
 8005772:	2b0e      	cmp	r3, #14
 8005774:	d9f6      	bls.n	8005764 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 8005776:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 800577a:	bb06      	cbnz	r6, 80057be <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800577c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8005780:	f043 0302 	orr.w	r3, r3, #2
 8005784:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005788:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800578a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800578e:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005790:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005792:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005796:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005798:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800579a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800579e:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057a6:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d115      	bne.n	80057da <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 80057ae:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80057b2:	b96b      	cbnz	r3, 80057d0 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057b4:	2100      	movs	r1, #0
 80057b6:	4620      	mov	r0, r4
 80057b8:	f7ff ffc4 	bl	8005744 <USB_SetDevSpeed>
 80057bc:	e011      	b.n	80057e2 <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80057be:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80057c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057c4:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80057c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80057c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80057ce:	e7e7      	b.n	80057a0 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057d0:	2101      	movs	r1, #1
 80057d2:	4620      	mov	r0, r4
 80057d4:	f7ff ffb6 	bl	8005744 <USB_SetDevSpeed>
 80057d8:	e003      	b.n	80057e2 <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057da:	2103      	movs	r1, #3
 80057dc:	4620      	mov	r0, r4
 80057de:	f7ff ffb1 	bl	8005744 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057e2:	2110      	movs	r1, #16
 80057e4:	4620      	mov	r0, r4
 80057e6:	f7ff ff65 	bl	80056b4 <USB_FlushTxFifo>
 80057ea:	4605      	mov	r5, r0
 80057ec:	b100      	cbz	r0, 80057f0 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 80057ee:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057f0:	4620      	mov	r0, r4
 80057f2:	f7ff ff84 	bl	80056fe <USB_FlushRxFifo>
 80057f6:	b100      	cbz	r0, 80057fa <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 80057f8:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80057fa:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 80057fe:	2300      	movs	r3, #0
 8005800:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005804:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005808:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800580c:	e00d      	b.n	800582a <USB_DevInit+0xd6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800580e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005812:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8005816:	e002      	b.n	800581e <USB_DevInit+0xca>
      USBx_INEP(i)->DIEPCTL = 0U;
 8005818:	2000      	movs	r0, #0
 800581a:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800581e:	2200      	movs	r2, #0
 8005820:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005822:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8005826:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005828:	3301      	adds	r3, #1
 800582a:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800582e:	4299      	cmp	r1, r3
 8005830:	d90e      	bls.n	8005850 <USB_DevInit+0xfc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005832:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8005836:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 800583a:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 800583e:	2800      	cmp	r0, #0
 8005840:	daea      	bge.n	8005818 <USB_DevInit+0xc4>
      if (i == 0U)
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e3      	bne.n	800580e <USB_DevInit+0xba>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005846:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800584a:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 800584e:	e7e6      	b.n	800581e <USB_DevInit+0xca>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005850:	2300      	movs	r3, #0
 8005852:	e00a      	b.n	800586a <USB_DevInit+0x116>
      if (i == 0U)
 8005854:	b1bb      	cbz	r3, 8005886 <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005856:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 800585a:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800585e:	2200      	movs	r2, #0
 8005860:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005862:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8005866:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005868:	3301      	adds	r3, #1
 800586a:	4299      	cmp	r1, r3
 800586c:	d910      	bls.n	8005890 <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800586e:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8005872:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8005876:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 800587a:	2f00      	cmp	r7, #0
 800587c:	dbea      	blt.n	8005854 <USB_DevInit+0x100>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800587e:	2700      	movs	r7, #0
 8005880:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8005884:	e7eb      	b.n	800585e <USB_DevInit+0x10a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005886:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 800588a:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 800588e:	e7e6      	b.n	800585e <USB_DevInit+0x10a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005890:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8005894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005898:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058a0:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 80058a4:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80058a6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80058aa:	b91b      	cbnz	r3, 80058b4 <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058ac:	69a3      	ldr	r3, [r4, #24]
 80058ae:	f043 0310 	orr.w	r3, r3, #16
 80058b2:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058b4:	69a2      	ldr	r2, [r4, #24]
 80058b6:	4b0c      	ldr	r3, [pc, #48]	@ (80058e8 <USB_DevInit+0x194>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80058bc:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 80058c0:	b11b      	cbz	r3, 80058ca <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058c2:	69a3      	ldr	r3, [r4, #24]
 80058c4:	f043 0308 	orr.w	r3, r3, #8
 80058c8:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80058ca:	2e01      	cmp	r6, #1
 80058cc:	d004      	beq.n	80058d8 <USB_DevInit+0x184>
}
 80058ce:	4628      	mov	r0, r5
 80058d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058d4:	b004      	add	sp, #16
 80058d6:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058d8:	69a3      	ldr	r3, [r4, #24]
 80058da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058de:	f043 0304 	orr.w	r3, r3, #4
 80058e2:	61a3      	str	r3, [r4, #24]
 80058e4:	e7f3      	b.n	80058ce <USB_DevInit+0x17a>
 80058e6:	bf00      	nop
 80058e8:	803c3800 	.word	0x803c3800

080058ec <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80058ec:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80058f0:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d004      	beq.n	8005902 <USB_GetDevSpeed+0x16>
 80058f8:	2b06      	cmp	r3, #6
 80058fa:	d004      	beq.n	8005906 <USB_GetDevSpeed+0x1a>
 80058fc:	b92b      	cbnz	r3, 800590a <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80058fe:	2000      	movs	r0, #0
 8005900:	4770      	bx	lr
 8005902:	2002      	movs	r0, #2
 8005904:	4770      	bx	lr
 8005906:	2002      	movs	r0, #2
 8005908:	4770      	bx	lr
 800590a:	200f      	movs	r0, #15
}
 800590c:	4770      	bx	lr

0800590e <USB_ActivateEndpoint>:
{
 800590e:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8005910:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8005914:	784b      	ldrb	r3, [r1, #1]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d023      	beq.n	8005962 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800591a:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 800591e:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 8005922:	f00c 040f 	and.w	r4, ip, #15
 8005926:	2201      	movs	r2, #1
 8005928:	40a2      	lsls	r2, r4
 800592a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800592e:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005932:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8005936:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800593a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800593e:	d10e      	bne.n	800595e <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005940:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005944:	688a      	ldr	r2, [r1, #8]
 8005946:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800594a:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800594c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8005950:	4313      	orrs	r3, r2
 8005952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800595a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800595e:	2000      	movs	r0, #0
 8005960:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005962:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8005966:	f00c 0e0f 	and.w	lr, ip, #15
 800596a:	fa03 f30e 	lsl.w	r3, r3, lr
 800596e:	b29b      	uxth	r3, r3
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005976:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800597a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800597e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8005982:	d1ec      	bne.n	800595e <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005984:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005988:	688a      	ldr	r2, [r1, #8]
 800598a:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800598e:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005990:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005994:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005998:	4313      	orrs	r3, r2
 800599a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800599e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059a2:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80059a6:	e7da      	b.n	800595e <USB_ActivateEndpoint+0x50>

080059a8 <USB_DeactivateEndpoint>:
{
 80059a8:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 80059aa:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80059ac:	784a      	ldrb	r2, [r1, #1]
 80059ae:	2a01      	cmp	r2, #1
 80059b0:	d026      	beq.n	8005a00 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059b2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80059b6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80059ba:	2a00      	cmp	r2, #0
 80059bc:	db52      	blt.n	8005a64 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059be:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 80059c2:	780a      	ldrb	r2, [r1, #0]
 80059c4:	f002 020f 	and.w	r2, r2, #15
 80059c8:	f04f 0c01 	mov.w	ip, #1
 80059cc:	fa0c f202 	lsl.w	r2, ip, r2
 80059d0:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 80059d4:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059d8:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80059dc:	7809      	ldrb	r1, [r1, #0]
 80059de:	f001 010f 	and.w	r1, r1, #15
 80059e2:	fa0c fc01 	lsl.w	ip, ip, r1
 80059e6:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 80059ea:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80059ee:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 80059f2:	4a23      	ldr	r2, [pc, #140]	@ (8005a80 <USB_DeactivateEndpoint+0xd8>)
 80059f4:	400a      	ands	r2, r1
 80059f6:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 80059fa:	2000      	movs	r0, #0
 80059fc:	bc30      	pop	{r4, r5}
 80059fe:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a00:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005a04:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8005a08:	2a00      	cmp	r2, #0
 8005a0a:	db1e      	blt.n	8005a4a <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a0c:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8005a10:	780a      	ldrb	r2, [r1, #0]
 8005a12:	f002 020f 	and.w	r2, r2, #15
 8005a16:	2401      	movs	r4, #1
 8005a18:	fa04 f202 	lsl.w	r2, r4, r2
 8005a1c:	b292      	uxth	r2, r2
 8005a1e:	ea25 0202 	bic.w	r2, r5, r2
 8005a22:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a26:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8005a2a:	7809      	ldrb	r1, [r1, #0]
 8005a2c:	f001 010f 	and.w	r1, r1, #15
 8005a30:	408c      	lsls	r4, r1
 8005a32:	b2a4      	uxth	r4, r4
 8005a34:	ea22 0204 	bic.w	r2, r2, r4
 8005a38:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a3c:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8005a40:	4a10      	ldr	r2, [pc, #64]	@ (8005a84 <USB_DeactivateEndpoint+0xdc>)
 8005a42:	400a      	ands	r2, r1
 8005a44:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8005a48:	e7d7      	b.n	80059fa <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a4a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8005a4e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8005a52:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a56:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8005a5a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005a5e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8005a62:	e7d3      	b.n	8005a0c <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a64:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8005a68:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8005a6c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a70:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8005a74:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005a78:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8005a7c:	e79f      	b.n	80059be <USB_DeactivateEndpoint+0x16>
 8005a7e:	bf00      	nop
 8005a80:	eff37800 	.word	0xeff37800
 8005a84:	ec337800 	.word	0xec337800

08005a88 <USB_EPStopXfer>:
{
 8005a88:	b410      	push	{r4}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8005a92:	7848      	ldrb	r0, [r1, #1]
 8005a94:	2801      	cmp	r0, #1
 8005a96:	d00b      	beq.n	8005ab0 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a98:	780b      	ldrb	r3, [r1, #0]
 8005a9a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8005a9e:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	db2d      	blt.n	8005b02 <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8005aa6:	2000      	movs	r0, #0
}
 8005aa8:	b003      	add	sp, #12
 8005aaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aae:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ab0:	780b      	ldrb	r3, [r1, #0]
 8005ab2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8005ab6:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8005aba:	2c00      	cmp	r4, #0
 8005abc:	db01      	blt.n	8005ac2 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 8005abe:	2000      	movs	r0, #0
 8005ac0:	e7f2      	b.n	8005aa8 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005ac2:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8005ac6:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8005aca:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005ace:	780b      	ldrb	r3, [r1, #0]
 8005ad0:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8005ad4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8005ad8:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8005adc:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8005ae0:	9b01      	ldr	r3, [sp, #4]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8005ae6:	9c01      	ldr	r4, [sp, #4]
 8005ae8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8005aec:	429c      	cmp	r4, r3
 8005aee:	d8db      	bhi.n	8005aa8 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005af0:	780b      	ldrb	r3, [r1, #0]
 8005af2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8005af6:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	dbf0      	blt.n	8005ae0 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 8005afe:	2000      	movs	r0, #0
 8005b00:	e7d2      	b.n	8005aa8 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b02:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8005b06:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 8005b0a:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005b0e:	780b      	ldrb	r3, [r1, #0]
 8005b10:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8005b14:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8005b18:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8005b1c:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 8005b20:	9b01      	ldr	r3, [sp, #4]
 8005b22:	3301      	adds	r3, #1
 8005b24:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8005b26:	9801      	ldr	r0, [sp, #4]
 8005b28:	f242 7310 	movw	r3, #10000	@ 0x2710
 8005b2c:	4298      	cmp	r0, r3
 8005b2e:	d808      	bhi.n	8005b42 <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005b30:	780b      	ldrb	r3, [r1, #0]
 8005b32:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8005b36:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	dbf0      	blt.n	8005b20 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 8005b3e:	2000      	movs	r0, #0
 8005b40:	e7b2      	b.n	8005aa8 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8005b42:	2001      	movs	r0, #1
 8005b44:	e7b0      	b.n	8005aa8 <USB_EPStopXfer+0x20>

08005b46 <USB_WritePacket>:
{
 8005b46:	b510      	push	{r4, lr}
 8005b48:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8005b4c:	b984      	cbnz	r4, 8005b70 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b4e:	3303      	adds	r3, #3
 8005b50:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8005b54:	f04f 0c00 	mov.w	ip, #0
 8005b58:	e008      	b.n	8005b6c <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b5a:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8005b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b62:	f851 4b04 	ldr.w	r4, [r1], #4
 8005b66:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8005b68:	f10c 0c01 	add.w	ip, ip, #1
 8005b6c:	45f4      	cmp	ip, lr
 8005b6e:	d3f4      	bcc.n	8005b5a <USB_WritePacket+0x14>
}
 8005b70:	2000      	movs	r0, #0
 8005b72:	bd10      	pop	{r4, pc}

08005b74 <USB_EPStartXfer>:
{
 8005b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b76:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8005b78:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8005b7a:	784b      	ldrb	r3, [r1, #1]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d02d      	beq.n	8005bdc <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b80:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8005b84:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8005b88:	691d      	ldr	r5, [r3, #16]
 8005b8a:	f36f 0512 	bfc	r5, #0, #19
 8005b8e:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b90:	691d      	ldr	r5, [r3, #16]
 8005b92:	f36f 45dc 	bfc	r5, #19, #10
 8005b96:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8005b98:	2c00      	cmp	r4, #0
 8005b9a:	f040 80ce 	bne.w	8005d3a <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 8005b9e:	690c      	ldr	r4, [r1, #16]
 8005ba0:	b10c      	cbz	r4, 8005ba6 <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8005ba2:	688c      	ldr	r4, [r1, #8]
 8005ba4:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8005ba6:	688c      	ldr	r4, [r1, #8]
 8005ba8:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005baa:	691d      	ldr	r5, [r3, #16]
 8005bac:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8005bb0:	432c      	orrs	r4, r5
 8005bb2:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bb4:	691c      	ldr	r4, [r3, #16]
 8005bb6:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8005bba:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8005bbc:	2a01      	cmp	r2, #1
 8005bbe:	f000 80df 	beq.w	8005d80 <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 8005bc2:	790b      	ldrb	r3, [r1, #4]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	f000 80e1 	beq.w	8005d8c <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bca:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8005bce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005bd2:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	b003      	add	sp, #12
 8005bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8005bdc:	690b      	ldr	r3, [r1, #16]
 8005bde:	bb73      	cbnz	r3, 8005c3e <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005be0:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8005be4:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8005be8:	f36f 45dc 	bfc	r5, #19, #10
 8005bec:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bf0:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8005bf4:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8005bf8:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bfc:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8005c00:	f36f 0512 	bfc	r5, #0, #19
 8005c04:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8005c08:	2a01      	cmp	r2, #1
 8005c0a:	d054      	beq.n	8005cb6 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c0c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8005c10:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8005c14:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c18:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8005c1c:	790b      	ldrb	r3, [r1, #4]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d072      	beq.n	8005d08 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 8005c22:	690b      	ldr	r3, [r1, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0d6      	beq.n	8005bd6 <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c28:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8005c2c:	7809      	ldrb	r1, [r1, #0]
 8005c2e:	f001 010f 	and.w	r1, r1, #15
 8005c32:	2201      	movs	r2, #1
 8005c34:	408a      	lsls	r2, r1
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8005c3c:	e7cb      	b.n	8005bd6 <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c3e:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8005c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c46:	691d      	ldr	r5, [r3, #16]
 8005c48:	f36f 0512 	bfc	r5, #0, #19
 8005c4c:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c4e:	691d      	ldr	r5, [r3, #16]
 8005c50:	f36f 45dc 	bfc	r5, #19, #10
 8005c54:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8005c56:	b984      	cbnz	r4, 8005c7a <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 8005c58:	690e      	ldr	r6, [r1, #16]
 8005c5a:	688d      	ldr	r5, [r1, #8]
 8005c5c:	42ae      	cmp	r6, r5
 8005c5e:	d900      	bls.n	8005c62 <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 8005c60:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c62:	691d      	ldr	r5, [r3, #16]
 8005c64:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8005c68:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c6a:	691d      	ldr	r5, [r3, #16]
 8005c6c:	690e      	ldr	r6, [r1, #16]
 8005c6e:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8005c72:	ea45 050c 	orr.w	r5, r5, ip
 8005c76:	611d      	str	r5, [r3, #16]
 8005c78:	e7c6      	b.n	8005c08 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c7a:	690d      	ldr	r5, [r1, #16]
 8005c7c:	688e      	ldr	r6, [r1, #8]
 8005c7e:	4435      	add	r5, r6
 8005c80:	3d01      	subs	r5, #1
 8005c82:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005c86:	691e      	ldr	r6, [r3, #16]
 8005c88:	fa1f fc85 	uxth.w	ip, r5
 8005c8c:	4f49      	ldr	r7, [pc, #292]	@ (8005db4 <USB_EPStartXfer+0x240>)
 8005c8e:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8005c92:	4335      	orrs	r5, r6
 8005c94:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8005c96:	790d      	ldrb	r5, [r1, #4]
 8005c98:	2d01      	cmp	r5, #1
 8005c9a:	d1e6      	bne.n	8005c6a <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c9c:	691d      	ldr	r5, [r3, #16]
 8005c9e:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8005ca2:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005ca4:	691d      	ldr	r5, [r3, #16]
 8005ca6:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8005caa:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 8005cae:	ea45 050c 	orr.w	r5, r5, ip
 8005cb2:	611d      	str	r5, [r3, #16]
 8005cb4:	e7d9      	b.n	8005c6a <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8005cb6:	69cb      	ldr	r3, [r1, #28]
 8005cb8:	b11b      	cbz	r3, 8005cc2 <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cba:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8005cbe:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8005cc2:	790b      	ldrb	r3, [r1, #4]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d008      	beq.n	8005cda <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cc8:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8005ccc:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8005cd0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005cd4:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8005cd8:	e77d      	b.n	8005bd6 <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cda:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8005cde:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005ce2:	d108      	bne.n	8005cf6 <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ce4:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8005ce8:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8005cec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005cf0:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8005cf4:	e7e8      	b.n	8005cc8 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005cf6:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8005cfa:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8005cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d02:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8005d06:	e7df      	b.n	8005cc8 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d08:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8005d0c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005d10:	d10c      	bne.n	8005d2c <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d12:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8005d16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d1a:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d1e:	9200      	str	r2, [sp, #0]
 8005d20:	8a0b      	ldrh	r3, [r1, #16]
 8005d22:	780a      	ldrb	r2, [r1, #0]
 8005d24:	68c9      	ldr	r1, [r1, #12]
 8005d26:	f7ff ff0e 	bl	8005b46 <USB_WritePacket>
 8005d2a:	e754      	b.n	8005bd6 <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d2c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8005d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d34:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8005d38:	e7f1      	b.n	8005d1e <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 8005d3a:	690c      	ldr	r4, [r1, #16]
 8005d3c:	b954      	cbnz	r4, 8005d54 <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d3e:	691c      	ldr	r4, [r3, #16]
 8005d40:	688d      	ldr	r5, [r1, #8]
 8005d42:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8005d46:	432c      	orrs	r4, r5
 8005d48:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d4a:	691c      	ldr	r4, [r3, #16]
 8005d4c:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8005d50:	611c      	str	r4, [r3, #16]
 8005d52:	e733      	b.n	8005bbc <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d54:	688d      	ldr	r5, [r1, #8]
 8005d56:	442c      	add	r4, r5
 8005d58:	3c01      	subs	r4, #1
 8005d5a:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005d5e:	b2a4      	uxth	r4, r4
 8005d60:	fb04 f505 	mul.w	r5, r4, r5
 8005d64:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d66:	691d      	ldr	r5, [r3, #16]
 8005d68:	4e12      	ldr	r6, [pc, #72]	@ (8005db4 <USB_EPStartXfer+0x240>)
 8005d6a:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8005d6e:	432c      	orrs	r4, r5
 8005d70:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d72:	691c      	ldr	r4, [r3, #16]
 8005d74:	6a0d      	ldr	r5, [r1, #32]
 8005d76:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8005d7a:	432c      	orrs	r4, r5
 8005d7c:	611c      	str	r4, [r3, #16]
 8005d7e:	e71d      	b.n	8005bbc <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d80:	68ca      	ldr	r2, [r1, #12]
 8005d82:	2a00      	cmp	r2, #0
 8005d84:	f43f af1d 	beq.w	8005bc2 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d88:	615a      	str	r2, [r3, #20]
 8005d8a:	e71a      	b.n	8005bc2 <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d8c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8005d90:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005d94:	d106      	bne.n	8005da4 <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d96:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8005d9a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d9e:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8005da2:	e712      	b.n	8005bca <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005da4:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8005da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dac:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8005db0:	e70b      	b.n	8005bca <USB_EPStartXfer+0x56>
 8005db2:	bf00      	nop
 8005db4:	1ff80000 	.word	0x1ff80000

08005db8 <USB_ReadPacket>:
{
 8005db8:	b510      	push	{r4, lr}
 8005dba:	4684      	mov	ip, r0
 8005dbc:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8005dbe:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8005dc2:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e005      	b.n	8005dd6 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005dca:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 8005dce:	6809      	ldr	r1, [r1, #0]
 8005dd0:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	4573      	cmp	r3, lr
 8005dd8:	d3f7      	bcc.n	8005dca <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8005dda:	b17a      	cbz	r2, 8005dfc <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ddc:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8005de0:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8005de4:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005de6:	b2cb      	uxtb	r3, r1
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	fa24 f303 	lsr.w	r3, r4, r3
 8005dee:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8005df2:	3101      	adds	r1, #1
      remaining_bytes--;
 8005df4:	3a01      	subs	r2, #1
 8005df6:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8005df8:	2a00      	cmp	r2, #0
 8005dfa:	d1f4      	bne.n	8005de6 <USB_ReadPacket+0x2e>
}
 8005dfc:	bd10      	pop	{r4, pc}

08005dfe <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8005dfe:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005e00:	784a      	ldrb	r2, [r1, #1]
 8005e02:	2a01      	cmp	r2, #1
 8005e04:	d014      	beq.n	8005e30 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e06:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005e0a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8005e0e:	2a00      	cmp	r2, #0
 8005e10:	db06      	blt.n	8005e20 <USB_EPSetStall+0x22>
 8005e12:	b12b      	cbz	r3, 8005e20 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e14:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005e18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e1c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e20:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005e24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e28:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e30:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005e34:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8005e38:	2a00      	cmp	r2, #0
 8005e3a:	db06      	blt.n	8005e4a <USB_EPSetStall+0x4c>
 8005e3c:	b12b      	cbz	r3, 8005e4a <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e3e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005e42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e46:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e4a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005e4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e52:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8005e56:	e7e9      	b.n	8005e2c <USB_EPSetStall+0x2e>

08005e58 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8005e58:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005e5a:	784a      	ldrb	r2, [r1, #1]
 8005e5c:	2a01      	cmp	r2, #1
 8005e5e:	d00e      	beq.n	8005e7e <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e60:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005e64:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005e68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e6c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e70:	790b      	ldrb	r3, [r1, #4]
 8005e72:	3b02      	subs	r3, #2
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d915      	bls.n	8005ea6 <USB_EPClearStall+0x4e>
}
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e7e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005e82:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005e86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e8a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e8e:	790b      	ldrb	r3, [r1, #4]
 8005e90:	3b02      	subs	r3, #2
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d8f0      	bhi.n	8005e7a <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e98:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ea0:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8005ea4:	e7e9      	b.n	8005e7a <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ea6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eae:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8005eb2:	e7e2      	b.n	8005e7a <USB_EPClearStall+0x22>

08005eb4 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005eb4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8005eb8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005ebc:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ec0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8005ec4:	0109      	lsls	r1, r1, #4
 8005ec6:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8005eca:	430b      	orrs	r3, r1
 8005ecc:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	4770      	bx	lr

08005ed4 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ed4:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8005ed8:	f023 0303 	bic.w	r3, r3, #3
 8005edc:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ee0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8005ee4:	f023 0302 	bic.w	r3, r3, #2
 8005ee8:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8005eec:	2000      	movs	r0, #0
 8005eee:	4770      	bx	lr

08005ef0 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ef0:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8005ef4:	f023 0303 	bic.w	r3, r3, #3
 8005ef8:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005efc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8005f00:	f043 0302 	orr.w	r3, r3, #2
 8005f04:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8005f08:	2000      	movs	r0, #0
 8005f0a:	4770      	bx	lr

08005f0c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8005f0c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8005f0e:	6980      	ldr	r0, [r0, #24]
}
 8005f10:	4010      	ands	r0, r2
 8005f12:	4770      	bx	lr

08005f14 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005f14:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8005f18:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f1c:	69c0      	ldr	r0, [r0, #28]
 8005f1e:	4018      	ands	r0, r3
}
 8005f20:	0c00      	lsrs	r0, r0, #16
 8005f22:	4770      	bx	lr

08005f24 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005f24:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8005f28:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f2c:	69c0      	ldr	r0, [r0, #28]
 8005f2e:	4018      	ands	r0, r3
}
 8005f30:	b280      	uxth	r0, r0
 8005f32:	4770      	bx	lr

08005f34 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f34:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8005f38:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f3c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8005f40:	6940      	ldr	r0, [r0, #20]
}
 8005f42:	4010      	ands	r0, r2
 8005f44:	4770      	bx	lr

08005f46 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8005f46:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f4a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f4e:	f001 0c0f 	and.w	ip, r1, #15
 8005f52:	fa23 f30c 	lsr.w	r3, r3, ip
 8005f56:	01db      	lsls	r3, r3, #7
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f5c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8005f60:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8005f64:	6880      	ldr	r0, [r0, #8]
}
 8005f66:	4018      	ands	r0, r3
 8005f68:	4770      	bx	lr

08005f6a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8005f6a:	6940      	ldr	r0, [r0, #20]
}
 8005f6c:	f000 0001 	and.w	r0, r0, #1
 8005f70:	4770      	bx	lr

08005f72 <USB_SetCurrentMode>:
{
 8005f72:	b538      	push	{r3, r4, r5, lr}
 8005f74:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f76:	68c3      	ldr	r3, [r0, #12]
 8005f78:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005f7c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8005f7e:	2901      	cmp	r1, #1
 8005f80:	d013      	beq.n	8005faa <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8005f82:	bb19      	cbnz	r1, 8005fcc <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f84:	68c3      	ldr	r3, [r0, #12]
 8005f86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f8a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8005f8c:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8005f8e:	200a      	movs	r0, #10
 8005f90:	f7fc fd06 	bl	80029a0 <HAL_Delay>
      ms += 10U;
 8005f94:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f96:	4628      	mov	r0, r5
 8005f98:	f7ff ffe7 	bl	8005f6a <USB_GetMode>
 8005f9c:	b108      	cbz	r0, 8005fa2 <USB_SetCurrentMode+0x30>
 8005f9e:	2cc7      	cmp	r4, #199	@ 0xc7
 8005fa0:	d9f5      	bls.n	8005f8e <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005fa2:	2cc8      	cmp	r4, #200	@ 0xc8
 8005fa4:	d014      	beq.n	8005fd0 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8005fa6:	2000      	movs	r0, #0
}
 8005fa8:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005faa:	68c3      	ldr	r3, [r0, #12]
 8005fac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005fb0:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8005fb2:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8005fb4:	200a      	movs	r0, #10
 8005fb6:	f7fc fcf3 	bl	80029a0 <HAL_Delay>
      ms += 10U;
 8005fba:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f7ff ffd4 	bl	8005f6a <USB_GetMode>
 8005fc2:	2801      	cmp	r0, #1
 8005fc4:	d0ed      	beq.n	8005fa2 <USB_SetCurrentMode+0x30>
 8005fc6:	2cc7      	cmp	r4, #199	@ 0xc7
 8005fc8:	d9f4      	bls.n	8005fb4 <USB_SetCurrentMode+0x42>
 8005fca:	e7ea      	b.n	8005fa2 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8005fcc:	2001      	movs	r0, #1
 8005fce:	e7eb      	b.n	8005fa8 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	e7e9      	b.n	8005fa8 <USB_SetCurrentMode+0x36>

08005fd4 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fd4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005fd8:	f36f 030a 	bfc	r3, #0, #11
 8005fdc:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fe0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8005fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe8:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8005fec:	2000      	movs	r0, #0
 8005fee:	4770      	bx	lr

08005ff0 <USB_EP0_OutStart>:
{
 8005ff0:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ff2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ff4:	4b15      	ldr	r3, [pc, #84]	@ (800604c <USB_EP0_OutStart+0x5c>)
 8005ff6:	429c      	cmp	r4, r3
 8005ff8:	d903      	bls.n	8006002 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ffa:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	db16      	blt.n	8006030 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006002:	2400      	movs	r4, #0
 8006004:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006008:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 800600c:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8006010:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006014:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8006018:	f044 0418 	orr.w	r4, r4, #24
 800601c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006020:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8006024:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8006028:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 800602c:	2901      	cmp	r1, #1
 800602e:	d003      	beq.n	8006038 <USB_EP0_OutStart+0x48>
}
 8006030:	2000      	movs	r0, #0
 8006032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006036:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006038:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800603c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8006040:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006044:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8006048:	e7f2      	b.n	8006030 <USB_EP0_OutStart+0x40>
 800604a:	bf00      	nop
 800604c:	4f54300a 	.word	0x4f54300a

08006050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006050:	b510      	push	{r4, lr}
 8006052:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006054:	4a0c      	ldr	r2, [pc, #48]	@ (8006088 <_sbrk+0x38>)
 8006056:	490d      	ldr	r1, [pc, #52]	@ (800608c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006058:	480d      	ldr	r0, [pc, #52]	@ (8006090 <_sbrk+0x40>)
 800605a:	6800      	ldr	r0, [r0, #0]
 800605c:	b140      	cbz	r0, 8006070 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800605e:	480c      	ldr	r0, [pc, #48]	@ (8006090 <_sbrk+0x40>)
 8006060:	6800      	ldr	r0, [r0, #0]
 8006062:	4403      	add	r3, r0
 8006064:	1a52      	subs	r2, r2, r1
 8006066:	4293      	cmp	r3, r2
 8006068:	d806      	bhi.n	8006078 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800606a:	4a09      	ldr	r2, [pc, #36]	@ (8006090 <_sbrk+0x40>)
 800606c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800606e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8006070:	4807      	ldr	r0, [pc, #28]	@ (8006090 <_sbrk+0x40>)
 8006072:	4c08      	ldr	r4, [pc, #32]	@ (8006094 <_sbrk+0x44>)
 8006074:	6004      	str	r4, [r0, #0]
 8006076:	e7f2      	b.n	800605e <_sbrk+0xe>
    errno = ENOMEM;
 8006078:	f002 ff4a 	bl	8008f10 <__errno>
 800607c:	230c      	movs	r3, #12
 800607e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8006080:	f04f 30ff 	mov.w	r0, #4294967295
 8006084:	e7f3      	b.n	800606e <_sbrk+0x1e>
 8006086:	bf00      	nop
 8006088:	20010000 	.word	0x20010000
 800608c:	00000400 	.word	0x00000400
 8006090:	20004758 	.word	0x20004758
 8006094:	20006538 	.word	0x20006538

08006098 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006098:	4a03      	ldr	r2, [pc, #12]	@ (80060a8 <SystemInit+0x10>)
 800609a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800609e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80060a2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80060a6:	4770      	bx	lr
 80060a8:	e000ed00 	.word	0xe000ed00

080060ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ac:	4b08      	ldr	r3, [pc, #32]	@ (80060d0 <prvResetNextTaskUnblockTime+0x24>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	b923      	cbnz	r3, 80060be <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060b4:	4b07      	ldr	r3, [pc, #28]	@ (80060d4 <prvResetNextTaskUnblockTime+0x28>)
 80060b6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060be:	4b04      	ldr	r3, [pc, #16]	@ (80060d0 <prvResetNextTaskUnblockTime+0x24>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	4b02      	ldr	r3, [pc, #8]	@ (80060d4 <prvResetNextTaskUnblockTime+0x28>)
 80060ca:	601a      	str	r2, [r3, #0]
	}
}
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	200047cc 	.word	0x200047cc
 80060d4:	20004764 	.word	0x20004764

080060d8 <prvInitialiseNewTask>:
{
 80060d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	4680      	mov	r8, r0
 80060de:	460d      	mov	r5, r1
 80060e0:	4617      	mov	r7, r2
 80060e2:	4699      	mov	r9, r3
 80060e4:	9e08      	ldr	r6, [sp, #32]
 80060e6:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80060ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060ec:	0092      	lsls	r2, r2, #2
 80060ee:	21a5      	movs	r1, #165	@ 0xa5
 80060f0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80060f2:	f002 ff05 	bl	8008f00 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80060f8:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 80060fc:	3a01      	subs	r2, #1
 80060fe:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006102:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8006106:	b3a5      	cbz	r5, 8006172 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006108:	f04f 0c00 	mov.w	ip, #0
 800610c:	f1bc 0f0f 	cmp.w	ip, #15
 8006110:	d809      	bhi.n	8006126 <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006112:	f815 300c 	ldrb.w	r3, [r5, ip]
 8006116:	eb04 020c 	add.w	r2, r4, ip
 800611a:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800611e:	b113      	cbz	r3, 8006126 <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006120:	f10c 0c01 	add.w	ip, ip, #1
 8006124:	e7f2      	b.n	800610c <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006126:	2300      	movs	r3, #0
 8006128:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800612c:	2e37      	cmp	r6, #55	@ 0x37
 800612e:	d900      	bls.n	8006132 <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006130:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8006132:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006134:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006136:	2500      	movs	r5, #0
 8006138:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800613a:	1d20      	adds	r0, r4, #4
 800613c:	f7fb fda3 	bl	8001c86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006140:	f104 0018 	add.w	r0, r4, #24
 8006144:	f7fb fd9f 	bl	8001c86 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006148:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800614a:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 800614e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006150:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8006152:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006154:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006158:	464a      	mov	r2, r9
 800615a:	4641      	mov	r1, r8
 800615c:	4638      	mov	r0, r7
 800615e:	f7fb ff1d 	bl	8001f9c <pxPortInitialiseStack>
 8006162:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8006164:	f1ba 0f00 	cmp.w	sl, #0
 8006168:	d001      	beq.n	800616e <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800616a:	f8ca 4000 	str.w	r4, [sl]
}
 800616e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006172:	2300      	movs	r3, #0
 8006174:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8006178:	e7d8      	b.n	800612c <prvInitialiseNewTask+0x54>
	...

0800617c <prvInitialiseTaskLists>:
{
 800617c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800617e:	2400      	movs	r4, #0
 8006180:	e007      	b.n	8006192 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006182:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8006186:	0093      	lsls	r3, r2, #2
 8006188:	480e      	ldr	r0, [pc, #56]	@ (80061c4 <prvInitialiseTaskLists+0x48>)
 800618a:	4418      	add	r0, r3
 800618c:	f7fb fd70 	bl	8001c70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006190:	3401      	adds	r4, #1
 8006192:	2c37      	cmp	r4, #55	@ 0x37
 8006194:	d9f5      	bls.n	8006182 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8006196:	4d0c      	ldr	r5, [pc, #48]	@ (80061c8 <prvInitialiseTaskLists+0x4c>)
 8006198:	4628      	mov	r0, r5
 800619a:	f7fb fd69 	bl	8001c70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800619e:	4c0b      	ldr	r4, [pc, #44]	@ (80061cc <prvInitialiseTaskLists+0x50>)
 80061a0:	4620      	mov	r0, r4
 80061a2:	f7fb fd65 	bl	8001c70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061a6:	480a      	ldr	r0, [pc, #40]	@ (80061d0 <prvInitialiseTaskLists+0x54>)
 80061a8:	f7fb fd62 	bl	8001c70 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80061ac:	4809      	ldr	r0, [pc, #36]	@ (80061d4 <prvInitialiseTaskLists+0x58>)
 80061ae:	f7fb fd5f 	bl	8001c70 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80061b2:	4809      	ldr	r0, [pc, #36]	@ (80061d8 <prvInitialiseTaskLists+0x5c>)
 80061b4:	f7fb fd5c 	bl	8001c70 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80061b8:	4b08      	ldr	r3, [pc, #32]	@ (80061dc <prvInitialiseTaskLists+0x60>)
 80061ba:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061bc:	4b08      	ldr	r3, [pc, #32]	@ (80061e0 <prvInitialiseTaskLists+0x64>)
 80061be:	601c      	str	r4, [r3, #0]
}
 80061c0:	bd38      	pop	{r3, r4, r5, pc}
 80061c2:	bf00      	nop
 80061c4:	200047f8 	.word	0x200047f8
 80061c8:	200047e4 	.word	0x200047e4
 80061cc:	200047d0 	.word	0x200047d0
 80061d0:	200047b4 	.word	0x200047b4
 80061d4:	200047a0 	.word	0x200047a0
 80061d8:	20004788 	.word	0x20004788
 80061dc:	200047cc 	.word	0x200047cc
 80061e0:	200047c8 	.word	0x200047c8

080061e4 <prvAddNewTaskToReadyList>:
{
 80061e4:	b510      	push	{r4, lr}
 80061e6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80061e8:	f7fb ff04 	bl	8001ff4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80061ec:	4a22      	ldr	r2, [pc, #136]	@ (8006278 <prvAddNewTaskToReadyList+0x94>)
 80061ee:	6813      	ldr	r3, [r2, #0]
 80061f0:	3301      	adds	r3, #1
 80061f2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061f4:	4b21      	ldr	r3, [pc, #132]	@ (800627c <prvAddNewTaskToReadyList+0x98>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	b15b      	cbz	r3, 8006212 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80061fa:	4b21      	ldr	r3, [pc, #132]	@ (8006280 <prvAddNewTaskToReadyList+0x9c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	b96b      	cbnz	r3, 800621c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006200:	4b1e      	ldr	r3, [pc, #120]	@ (800627c <prvAddNewTaskToReadyList+0x98>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006206:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006208:	429a      	cmp	r2, r3
 800620a:	d807      	bhi.n	800621c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800620c:	4b1b      	ldr	r3, [pc, #108]	@ (800627c <prvAddNewTaskToReadyList+0x98>)
 800620e:	601c      	str	r4, [r3, #0]
 8006210:	e004      	b.n	800621c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8006212:	4b1a      	ldr	r3, [pc, #104]	@ (800627c <prvAddNewTaskToReadyList+0x98>)
 8006214:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006216:	6813      	ldr	r3, [r2, #0]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d029      	beq.n	8006270 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800621c:	4a19      	ldr	r2, [pc, #100]	@ (8006284 <prvAddNewTaskToReadyList+0xa0>)
 800621e:	6813      	ldr	r3, [r2, #0]
 8006220:	3301      	adds	r3, #1
 8006222:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006224:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006226:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006228:	4b17      	ldr	r3, [pc, #92]	@ (8006288 <prvAddNewTaskToReadyList+0xa4>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4298      	cmp	r0, r3
 800622e:	d901      	bls.n	8006234 <prvAddNewTaskToReadyList+0x50>
 8006230:	4b15      	ldr	r3, [pc, #84]	@ (8006288 <prvAddNewTaskToReadyList+0xa4>)
 8006232:	6018      	str	r0, [r3, #0]
 8006234:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006238:	1d21      	adds	r1, r4, #4
 800623a:	4b14      	ldr	r3, [pc, #80]	@ (800628c <prvAddNewTaskToReadyList+0xa8>)
 800623c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006240:	f7fb fd24 	bl	8001c8c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006244:	f7fb fef8 	bl	8002038 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006248:	4b0d      	ldr	r3, [pc, #52]	@ (8006280 <prvAddNewTaskToReadyList+0x9c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	b17b      	cbz	r3, 800626e <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800624e:	4b0b      	ldr	r3, [pc, #44]	@ (800627c <prvAddNewTaskToReadyList+0x98>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006254:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006256:	429a      	cmp	r2, r3
 8006258:	d209      	bcs.n	800626e <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800625a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800625e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006262:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	f3bf 8f6f 	isb	sy
}
 800626e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8006270:	f7ff ff84 	bl	800617c <prvInitialiseTaskLists>
 8006274:	e7d2      	b.n	800621c <prvAddNewTaskToReadyList+0x38>
 8006276:	bf00      	nop
 8006278:	20004784 	.word	0x20004784
 800627c:	20004c58 	.word	0x20004c58
 8006280:	20004778 	.word	0x20004778
 8006284:	20004768 	.word	0x20004768
 8006288:	2000477c 	.word	0x2000477c
 800628c:	200047f8 	.word	0x200047f8

08006290 <prvDeleteTCB>:
	{
 8006290:	b510      	push	{r4, lr}
 8006292:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006294:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 8006298:	b163      	cbz	r3, 80062b4 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800629a:	2b01      	cmp	r3, #1
 800629c:	d011      	beq.n	80062c2 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d00e      	beq.n	80062c0 <prvDeleteTCB+0x30>
 80062a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	e7fe      	b.n	80062b2 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80062b4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80062b6:	f7fb fb37 	bl	8001928 <vPortFree>
				vPortFree( pxTCB );
 80062ba:	4620      	mov	r0, r4
 80062bc:	f7fb fb34 	bl	8001928 <vPortFree>
	}
 80062c0:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80062c2:	f7fb fb31 	bl	8001928 <vPortFree>
 80062c6:	e7fb      	b.n	80062c0 <prvDeleteTCB+0x30>

080062c8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006308 <prvCheckTasksWaitingTermination+0x40>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	b1d3      	cbz	r3, 8006304 <prvCheckTasksWaitingTermination+0x3c>
{
 80062ce:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80062d0:	f7fb fe90 	bl	8001ff4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d4:	4b0d      	ldr	r3, [pc, #52]	@ (800630c <prvCheckTasksWaitingTermination+0x44>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062da:	1d20      	adds	r0, r4, #4
 80062dc:	f7fb fcfa 	bl	8001cd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062e0:	4a0b      	ldr	r2, [pc, #44]	@ (8006310 <prvCheckTasksWaitingTermination+0x48>)
 80062e2:	6813      	ldr	r3, [r2, #0]
 80062e4:	3b01      	subs	r3, #1
 80062e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062e8:	4a07      	ldr	r2, [pc, #28]	@ (8006308 <prvCheckTasksWaitingTermination+0x40>)
 80062ea:	6813      	ldr	r3, [r2, #0]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80062f0:	f7fb fea2 	bl	8002038 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80062f4:	4620      	mov	r0, r4
 80062f6:	f7ff ffcb 	bl	8006290 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062fa:	4b03      	ldr	r3, [pc, #12]	@ (8006308 <prvCheckTasksWaitingTermination+0x40>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e6      	bne.n	80062d0 <prvCheckTasksWaitingTermination+0x8>
}
 8006302:	bd10      	pop	{r4, pc}
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	2000479c 	.word	0x2000479c
 800630c:	200047a0 	.word	0x200047a0
 8006310:	20004784 	.word	0x20004784

08006314 <prvIdleTask>:
{
 8006314:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8006316:	f7ff ffd7 	bl	80062c8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800631a:	4b07      	ldr	r3, [pc, #28]	@ (8006338 <prvIdleTask+0x24>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d9f9      	bls.n	8006316 <prvIdleTask+0x2>
				taskYIELD();
 8006322:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800632a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	e7ee      	b.n	8006316 <prvIdleTask+0x2>
 8006338:	200047f8 	.word	0x200047f8

0800633c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	4604      	mov	r4, r0
 8006340:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006342:	4b17      	ldr	r3, [pc, #92]	@ (80063a0 <prvAddCurrentTaskToDelayedList+0x64>)
 8006344:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006346:	4b17      	ldr	r3, [pc, #92]	@ (80063a4 <prvAddCurrentTaskToDelayedList+0x68>)
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	3004      	adds	r0, #4
 800634c:	f7fb fcc2 	bl	8001cd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006350:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006354:	d00d      	beq.n	8006372 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006356:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006358:	4b12      	ldr	r3, [pc, #72]	@ (80063a4 <prvAddCurrentTaskToDelayedList+0x68>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800635e:	42a6      	cmp	r6, r4
 8006360:	d910      	bls.n	8006384 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006362:	4b11      	ldr	r3, [pc, #68]	@ (80063a8 <prvAddCurrentTaskToDelayedList+0x6c>)
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	4b0f      	ldr	r3, [pc, #60]	@ (80063a4 <prvAddCurrentTaskToDelayedList+0x68>)
 8006368:	6819      	ldr	r1, [r3, #0]
 800636a:	3104      	adds	r1, #4
 800636c:	f7fb fc99 	bl	8001ca2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006370:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006372:	2d00      	cmp	r5, #0
 8006374:	d0ef      	beq.n	8006356 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006376:	4b0b      	ldr	r3, [pc, #44]	@ (80063a4 <prvAddCurrentTaskToDelayedList+0x68>)
 8006378:	6819      	ldr	r1, [r3, #0]
 800637a:	3104      	adds	r1, #4
 800637c:	480b      	ldr	r0, [pc, #44]	@ (80063ac <prvAddCurrentTaskToDelayedList+0x70>)
 800637e:	f7fb fc85 	bl	8001c8c <vListInsertEnd>
 8006382:	e7f5      	b.n	8006370 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006384:	4b0a      	ldr	r3, [pc, #40]	@ (80063b0 <prvAddCurrentTaskToDelayedList+0x74>)
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	4b06      	ldr	r3, [pc, #24]	@ (80063a4 <prvAddCurrentTaskToDelayedList+0x68>)
 800638a:	6819      	ldr	r1, [r3, #0]
 800638c:	3104      	adds	r1, #4
 800638e:	f7fb fc88 	bl	8001ca2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006392:	4b08      	ldr	r3, [pc, #32]	@ (80063b4 <prvAddCurrentTaskToDelayedList+0x78>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	42a3      	cmp	r3, r4
 8006398:	d9ea      	bls.n	8006370 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 800639a:	4b06      	ldr	r3, [pc, #24]	@ (80063b4 <prvAddCurrentTaskToDelayedList+0x78>)
 800639c:	601c      	str	r4, [r3, #0]
}
 800639e:	e7e7      	b.n	8006370 <prvAddCurrentTaskToDelayedList+0x34>
 80063a0:	20004780 	.word	0x20004780
 80063a4:	20004c58 	.word	0x20004c58
 80063a8:	200047c8 	.word	0x200047c8
 80063ac:	20004788 	.word	0x20004788
 80063b0:	200047cc 	.word	0x200047cc
 80063b4:	20004764 	.word	0x20004764

080063b8 <xTaskCreateStatic>:
	{
 80063b8:	b530      	push	{r4, r5, lr}
 80063ba:	b087      	sub	sp, #28
 80063bc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80063be:	b17c      	cbz	r4, 80063e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063c0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80063c2:	b1b5      	cbz	r5, 80063f2 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80063c4:	255c      	movs	r5, #92	@ 0x5c
 80063c6:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063c8:	9d04      	ldr	r5, [sp, #16]
 80063ca:	2d5c      	cmp	r5, #92	@ 0x5c
 80063cc:	d01a      	beq.n	8006404 <xTaskCreateStatic+0x4c>
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	e7fe      	b.n	80063de <xTaskCreateStatic+0x26>
 80063e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80063f0:	e7fe      	b.n	80063f0 <xTaskCreateStatic+0x38>
 80063f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006402:	e7fe      	b.n	8006402 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006404:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006406:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8006408:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800640a:	2402      	movs	r4, #2
 800640c:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006410:	2400      	movs	r4, #0
 8006412:	9403      	str	r4, [sp, #12]
 8006414:	9502      	str	r5, [sp, #8]
 8006416:	ac05      	add	r4, sp, #20
 8006418:	9401      	str	r4, [sp, #4]
 800641a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800641c:	9400      	str	r4, [sp, #0]
 800641e:	f7ff fe5b 	bl	80060d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006422:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006424:	f7ff fede 	bl	80061e4 <prvAddNewTaskToReadyList>
	}
 8006428:	9805      	ldr	r0, [sp, #20]
 800642a:	b007      	add	sp, #28
 800642c:	bd30      	pop	{r4, r5, pc}

0800642e <xTaskCreate>:
	{
 800642e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006432:	b085      	sub	sp, #20
 8006434:	4607      	mov	r7, r0
 8006436:	4688      	mov	r8, r1
 8006438:	4614      	mov	r4, r2
 800643a:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800643c:	0090      	lsls	r0, r2, #2
 800643e:	f7fb f9f1 	bl	8001824 <pvPortMalloc>
			if( pxStack != NULL )
 8006442:	b308      	cbz	r0, 8006488 <xTaskCreate+0x5a>
 8006444:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006446:	205c      	movs	r0, #92	@ 0x5c
 8006448:	f7fb f9ec 	bl	8001824 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800644c:	4605      	mov	r5, r0
 800644e:	b1a8      	cbz	r0, 800647c <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8006450:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006454:	2300      	movs	r3, #0
 8006456:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800645a:	9303      	str	r3, [sp, #12]
 800645c:	9002      	str	r0, [sp, #8]
 800645e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006460:	9301      	str	r3, [sp, #4]
 8006462:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	4633      	mov	r3, r6
 8006468:	4622      	mov	r2, r4
 800646a:	4641      	mov	r1, r8
 800646c:	4638      	mov	r0, r7
 800646e:	f7ff fe33 	bl	80060d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006472:	4628      	mov	r0, r5
 8006474:	f7ff feb6 	bl	80061e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006478:	2001      	movs	r0, #1
 800647a:	e007      	b.n	800648c <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800647c:	4648      	mov	r0, r9
 800647e:	f7fb fa53 	bl	8001928 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006482:	f04f 30ff 	mov.w	r0, #4294967295
 8006486:	e001      	b.n	800648c <xTaskCreate+0x5e>
 8006488:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800648c:	b005      	add	sp, #20
 800648e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08006494 <vTaskStartScheduler>:
{
 8006494:	b510      	push	{r4, lr}
 8006496:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006498:	2400      	movs	r4, #0
 800649a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800649c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800649e:	aa07      	add	r2, sp, #28
 80064a0:	a906      	add	r1, sp, #24
 80064a2:	a805      	add	r0, sp, #20
 80064a4:	f7fa fda0 	bl	8000fe8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064a8:	9b05      	ldr	r3, [sp, #20]
 80064aa:	9302      	str	r3, [sp, #8]
 80064ac:	9b06      	ldr	r3, [sp, #24]
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	9400      	str	r4, [sp, #0]
 80064b2:	4623      	mov	r3, r4
 80064b4:	9a07      	ldr	r2, [sp, #28]
 80064b6:	4917      	ldr	r1, [pc, #92]	@ (8006514 <vTaskStartScheduler+0x80>)
 80064b8:	4817      	ldr	r0, [pc, #92]	@ (8006518 <vTaskStartScheduler+0x84>)
 80064ba:	f7ff ff7d 	bl	80063b8 <xTaskCreateStatic>
 80064be:	4b17      	ldr	r3, [pc, #92]	@ (800651c <vTaskStartScheduler+0x88>)
 80064c0:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 80064c2:	b1c0      	cbz	r0, 80064f6 <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 80064c4:	f000 fd38 	bl	8006f38 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80064c8:	2801      	cmp	r0, #1
 80064ca:	d115      	bne.n	80064f8 <vTaskStartScheduler+0x64>
 80064cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80064dc:	4b10      	ldr	r3, [pc, #64]	@ (8006520 <vTaskStartScheduler+0x8c>)
 80064de:	f04f 32ff 	mov.w	r2, #4294967295
 80064e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006524 <vTaskStartScheduler+0x90>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006528 <vTaskStartScheduler+0x94>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80064f0:	f7fb fe1a 	bl	8002128 <xPortStartScheduler>
		}
 80064f4:	e003      	b.n	80064fe <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 80064f6:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80064fc:	d001      	beq.n	8006502 <vTaskStartScheduler+0x6e>
}
 80064fe:	b008      	add	sp, #32
 8006500:	bd10      	pop	{r4, pc}
 8006502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006512:	e7fe      	b.n	8006512 <vTaskStartScheduler+0x7e>
 8006514:	08009cec 	.word	0x08009cec
 8006518:	08006315 	.word	0x08006315
 800651c:	20004760 	.word	0x20004760
 8006520:	20004764 	.word	0x20004764
 8006524:	20004778 	.word	0x20004778
 8006528:	20004780 	.word	0x20004780

0800652c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800652c:	4a02      	ldr	r2, [pc, #8]	@ (8006538 <vTaskSuspendAll+0xc>)
 800652e:	6813      	ldr	r3, [r2, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	6013      	str	r3, [r2, #0]
}
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	2000475c 	.word	0x2000475c

0800653c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800653c:	4b01      	ldr	r3, [pc, #4]	@ (8006544 <xTaskGetTickCount+0x8>)
 800653e:	6818      	ldr	r0, [r3, #0]
}
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	20004780 	.word	0x20004780

08006548 <xTaskIncrementTick>:
{
 8006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800654a:	4b3a      	ldr	r3, [pc, #232]	@ (8006634 <xTaskIncrementTick+0xec>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d169      	bne.n	8006626 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006552:	4b39      	ldr	r3, [pc, #228]	@ (8006638 <xTaskIncrementTick+0xf0>)
 8006554:	681d      	ldr	r5, [r3, #0]
 8006556:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8006558:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800655a:	b9c5      	cbnz	r5, 800658e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800655c:	4b37      	ldr	r3, [pc, #220]	@ (800663c <xTaskIncrementTick+0xf4>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	b143      	cbz	r3, 8006576 <xTaskIncrementTick+0x2e>
 8006564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	e7fe      	b.n	8006574 <xTaskIncrementTick+0x2c>
 8006576:	4a31      	ldr	r2, [pc, #196]	@ (800663c <xTaskIncrementTick+0xf4>)
 8006578:	6811      	ldr	r1, [r2, #0]
 800657a:	4b31      	ldr	r3, [pc, #196]	@ (8006640 <xTaskIncrementTick+0xf8>)
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	6010      	str	r0, [r2, #0]
 8006580:	6019      	str	r1, [r3, #0]
 8006582:	4a30      	ldr	r2, [pc, #192]	@ (8006644 <xTaskIncrementTick+0xfc>)
 8006584:	6813      	ldr	r3, [r2, #0]
 8006586:	3301      	adds	r3, #1
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	f7ff fd8f 	bl	80060ac <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800658e:	4b2e      	ldr	r3, [pc, #184]	@ (8006648 <xTaskIncrementTick+0x100>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	42ab      	cmp	r3, r5
 8006594:	d93d      	bls.n	8006612 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8006596:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006598:	4b2c      	ldr	r3, [pc, #176]	@ (800664c <xTaskIncrementTick+0x104>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80065a2:	009a      	lsls	r2, r3, #2
 80065a4:	4b2a      	ldr	r3, [pc, #168]	@ (8006650 <xTaskIncrementTick+0x108>)
 80065a6:	589b      	ldr	r3, [r3, r2]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d900      	bls.n	80065ae <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80065ac:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 80065ae:	4b29      	ldr	r3, [pc, #164]	@ (8006654 <xTaskIncrementTick+0x10c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d03c      	beq.n	8006630 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 80065b6:	2701      	movs	r7, #1
	return xSwitchRequired;
 80065b8:	e03a      	b.n	8006630 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 80065ba:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065bc:	4b1f      	ldr	r3, [pc, #124]	@ (800663c <xTaskIncrementTick+0xf4>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	b343      	cbz	r3, 8006616 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c4:	4b1d      	ldr	r3, [pc, #116]	@ (800663c <xTaskIncrementTick+0xf4>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065cc:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80065ce:	429d      	cmp	r5, r3
 80065d0:	d326      	bcc.n	8006620 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065d2:	1d26      	adds	r6, r4, #4
 80065d4:	4630      	mov	r0, r6
 80065d6:	f7fb fb7d 	bl	8001cd4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065da:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80065dc:	b11b      	cbz	r3, 80065e6 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065de:	f104 0018 	add.w	r0, r4, #24
 80065e2:	f7fb fb77 	bl	8001cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065e6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80065e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006658 <xTaskIncrementTick+0x110>)
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d901      	bls.n	80065f4 <xTaskIncrementTick+0xac>
 80065f0:	4a19      	ldr	r2, [pc, #100]	@ (8006658 <xTaskIncrementTick+0x110>)
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80065f8:	009a      	lsls	r2, r3, #2
 80065fa:	4631      	mov	r1, r6
 80065fc:	4814      	ldr	r0, [pc, #80]	@ (8006650 <xTaskIncrementTick+0x108>)
 80065fe:	4410      	add	r0, r2
 8006600:	f7fb fb44 	bl	8001c8c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006604:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006606:	4b11      	ldr	r3, [pc, #68]	@ (800664c <xTaskIncrementTick+0x104>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660c:	429a      	cmp	r2, r3
 800660e:	d2d4      	bcs.n	80065ba <xTaskIncrementTick+0x72>
 8006610:	e7d4      	b.n	80065bc <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8006612:	2700      	movs	r7, #0
 8006614:	e7d2      	b.n	80065bc <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006616:	4b0c      	ldr	r3, [pc, #48]	@ (8006648 <xTaskIncrementTick+0x100>)
 8006618:	f04f 32ff 	mov.w	r2, #4294967295
 800661c:	601a      	str	r2, [r3, #0]
					break;
 800661e:	e7bb      	b.n	8006598 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8006620:	4a09      	ldr	r2, [pc, #36]	@ (8006648 <xTaskIncrementTick+0x100>)
 8006622:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006624:	e7b8      	b.n	8006598 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8006626:	4a0d      	ldr	r2, [pc, #52]	@ (800665c <xTaskIncrementTick+0x114>)
 8006628:	6813      	ldr	r3, [r2, #0]
 800662a:	3301      	adds	r3, #1
 800662c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800662e:	2700      	movs	r7, #0
}
 8006630:	4638      	mov	r0, r7
 8006632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006634:	2000475c 	.word	0x2000475c
 8006638:	20004780 	.word	0x20004780
 800663c:	200047cc 	.word	0x200047cc
 8006640:	200047c8 	.word	0x200047c8
 8006644:	2000476c 	.word	0x2000476c
 8006648:	20004764 	.word	0x20004764
 800664c:	20004c58 	.word	0x20004c58
 8006650:	200047f8 	.word	0x200047f8
 8006654:	20004770 	.word	0x20004770
 8006658:	2000477c 	.word	0x2000477c
 800665c:	20004774 	.word	0x20004774

08006660 <xTaskResumeAll>:
{
 8006660:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8006662:	4b35      	ldr	r3, [pc, #212]	@ (8006738 <xTaskResumeAll+0xd8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	b943      	cbnz	r3, 800667a <xTaskResumeAll+0x1a>
 8006668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	e7fe      	b.n	8006678 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800667a:	f7fb fcbb 	bl	8001ff4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800667e:	4b2e      	ldr	r3, [pc, #184]	@ (8006738 <xTaskResumeAll+0xd8>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	3a01      	subs	r2, #1
 8006684:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d14f      	bne.n	800672c <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800668c:	4b2b      	ldr	r3, [pc, #172]	@ (800673c <xTaskResumeAll+0xdc>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	b90b      	cbnz	r3, 8006696 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8006692:	2400      	movs	r4, #0
 8006694:	e04b      	b.n	800672e <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8006696:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006698:	4b29      	ldr	r3, [pc, #164]	@ (8006740 <xTaskResumeAll+0xe0>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	b31b      	cbz	r3, 80066e6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800669e:	4b28      	ldr	r3, [pc, #160]	@ (8006740 <xTaskResumeAll+0xe0>)
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066a4:	f104 0018 	add.w	r0, r4, #24
 80066a8:	f7fb fb14 	bl	8001cd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066ac:	1d25      	adds	r5, r4, #4
 80066ae:	4628      	mov	r0, r5
 80066b0:	f7fb fb10 	bl	8001cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066b4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80066b6:	4b23      	ldr	r3, [pc, #140]	@ (8006744 <xTaskResumeAll+0xe4>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4298      	cmp	r0, r3
 80066bc:	d901      	bls.n	80066c2 <xTaskResumeAll+0x62>
 80066be:	4b21      	ldr	r3, [pc, #132]	@ (8006744 <xTaskResumeAll+0xe4>)
 80066c0:	6018      	str	r0, [r3, #0]
 80066c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80066c6:	4629      	mov	r1, r5
 80066c8:	4b1f      	ldr	r3, [pc, #124]	@ (8006748 <xTaskResumeAll+0xe8>)
 80066ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80066ce:	f7fb fadd 	bl	8001c8c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80066d4:	4b1d      	ldr	r3, [pc, #116]	@ (800674c <xTaskResumeAll+0xec>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066da:	429a      	cmp	r2, r3
 80066dc:	d3dc      	bcc.n	8006698 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 80066de:	4b1c      	ldr	r3, [pc, #112]	@ (8006750 <xTaskResumeAll+0xf0>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	e7d8      	b.n	8006698 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 80066e6:	b10c      	cbz	r4, 80066ec <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 80066e8:	f7ff fce0 	bl	80060ac <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066ec:	4b19      	ldr	r3, [pc, #100]	@ (8006754 <xTaskResumeAll+0xf4>)
 80066ee:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80066f0:	b984      	cbnz	r4, 8006714 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 80066f2:	4b17      	ldr	r3, [pc, #92]	@ (8006750 <xTaskResumeAll+0xf0>)
 80066f4:	681c      	ldr	r4, [r3, #0]
 80066f6:	b1d4      	cbz	r4, 800672e <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 80066f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80066fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006700:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800670c:	2401      	movs	r4, #1
 800670e:	e00e      	b.n	800672e <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006710:	3c01      	subs	r4, #1
 8006712:	d007      	beq.n	8006724 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8006714:	f7ff ff18 	bl	8006548 <xTaskIncrementTick>
 8006718:	2800      	cmp	r0, #0
 800671a:	d0f9      	beq.n	8006710 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800671c:	4b0c      	ldr	r3, [pc, #48]	@ (8006750 <xTaskResumeAll+0xf0>)
 800671e:	2201      	movs	r2, #1
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	e7f5      	b.n	8006710 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8006724:	4b0b      	ldr	r3, [pc, #44]	@ (8006754 <xTaskResumeAll+0xf4>)
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	e7e2      	b.n	80066f2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800672c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800672e:	f7fb fc83 	bl	8002038 <vPortExitCritical>
}
 8006732:	4620      	mov	r0, r4
 8006734:	bd38      	pop	{r3, r4, r5, pc}
 8006736:	bf00      	nop
 8006738:	2000475c 	.word	0x2000475c
 800673c:	20004784 	.word	0x20004784
 8006740:	200047b4 	.word	0x200047b4
 8006744:	2000477c 	.word	0x2000477c
 8006748:	200047f8 	.word	0x200047f8
 800674c:	20004c58 	.word	0x20004c58
 8006750:	20004770 	.word	0x20004770
 8006754:	20004774 	.word	0x20004774

08006758 <vTaskDelay>:
	{
 8006758:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800675a:	b1a8      	cbz	r0, 8006788 <vTaskDelay+0x30>
 800675c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800675e:	4b10      	ldr	r3, [pc, #64]	@ (80067a0 <vTaskDelay+0x48>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	b143      	cbz	r3, 8006776 <vTaskDelay+0x1e>
 8006764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	e7fe      	b.n	8006774 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006776:	f7ff fed9 	bl	800652c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800677a:	2100      	movs	r1, #0
 800677c:	4620      	mov	r0, r4
 800677e:	f7ff fddd 	bl	800633c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006782:	f7ff ff6d 	bl	8006660 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006786:	b948      	cbnz	r0, 800679c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8006788:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800678c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006790:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	f3bf 8f6f 	isb	sy
	}
 800679c:	bd10      	pop	{r4, pc}
 800679e:	bf00      	nop
 80067a0:	2000475c 	.word	0x2000475c

080067a4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067a4:	4b20      	ldr	r3, [pc, #128]	@ (8006828 <vTaskSwitchContext+0x84>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	b11b      	cbz	r3, 80067b2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80067aa:	4b20      	ldr	r3, [pc, #128]	@ (800682c <vTaskSwitchContext+0x88>)
 80067ac:	2201      	movs	r2, #1
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80067b2:	4b1e      	ldr	r3, [pc, #120]	@ (800682c <vTaskSwitchContext+0x88>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006830 <vTaskSwitchContext+0x8c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80067c0:	008a      	lsls	r2, r1, #2
 80067c2:	491c      	ldr	r1, [pc, #112]	@ (8006834 <vTaskSwitchContext+0x90>)
 80067c4:	588a      	ldr	r2, [r1, r2]
 80067c6:	b95a      	cbnz	r2, 80067e0 <vTaskSwitchContext+0x3c>
 80067c8:	b10b      	cbz	r3, 80067ce <vTaskSwitchContext+0x2a>
 80067ca:	3b01      	subs	r3, #1
 80067cc:	e7f6      	b.n	80067bc <vTaskSwitchContext+0x18>
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	e7fe      	b.n	80067de <vTaskSwitchContext+0x3a>
 80067e0:	4608      	mov	r0, r1
 80067e2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80067e6:	008a      	lsls	r2, r1, #2
 80067e8:	4402      	add	r2, r0
 80067ea:	6851      	ldr	r1, [r2, #4]
 80067ec:	6849      	ldr	r1, [r1, #4]
 80067ee:	6051      	str	r1, [r2, #4]
 80067f0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80067f4:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80067f8:	3208      	adds	r2, #8
 80067fa:	4402      	add	r2, r0
 80067fc:	4291      	cmp	r1, r2
 80067fe:	d00b      	beq.n	8006818 <vTaskSwitchContext+0x74>
 8006800:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006804:	0091      	lsls	r1, r2, #2
 8006806:	4a0b      	ldr	r2, [pc, #44]	@ (8006834 <vTaskSwitchContext+0x90>)
 8006808:	440a      	add	r2, r1
 800680a:	6852      	ldr	r2, [r2, #4]
 800680c:	68d1      	ldr	r1, [r2, #12]
 800680e:	4a0a      	ldr	r2, [pc, #40]	@ (8006838 <vTaskSwitchContext+0x94>)
 8006810:	6011      	str	r1, [r2, #0]
 8006812:	4a07      	ldr	r2, [pc, #28]	@ (8006830 <vTaskSwitchContext+0x8c>)
 8006814:	6013      	str	r3, [r2, #0]
}
 8006816:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006818:	6848      	ldr	r0, [r1, #4]
 800681a:	4662      	mov	r2, ip
 800681c:	0091      	lsls	r1, r2, #2
 800681e:	4a05      	ldr	r2, [pc, #20]	@ (8006834 <vTaskSwitchContext+0x90>)
 8006820:	440a      	add	r2, r1
 8006822:	6050      	str	r0, [r2, #4]
 8006824:	e7ec      	b.n	8006800 <vTaskSwitchContext+0x5c>
 8006826:	bf00      	nop
 8006828:	2000475c 	.word	0x2000475c
 800682c:	20004770 	.word	0x20004770
 8006830:	2000477c 	.word	0x2000477c
 8006834:	200047f8 	.word	0x200047f8
 8006838:	20004c58 	.word	0x20004c58

0800683c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800683c:	b158      	cbz	r0, 8006856 <vTaskPlaceOnEventList+0x1a>
{
 800683e:	b510      	push	{r4, lr}
 8006840:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006842:	4a09      	ldr	r2, [pc, #36]	@ (8006868 <vTaskPlaceOnEventList+0x2c>)
 8006844:	6811      	ldr	r1, [r2, #0]
 8006846:	3118      	adds	r1, #24
 8006848:	f7fb fa2b 	bl	8001ca2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800684c:	2101      	movs	r1, #1
 800684e:	4620      	mov	r0, r4
 8006850:	f7ff fd74 	bl	800633c <prvAddCurrentTaskToDelayedList>
}
 8006854:	bd10      	pop	{r4, pc}
 8006856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006866:	e7fe      	b.n	8006866 <vTaskPlaceOnEventList+0x2a>
 8006868:	20004c58 	.word	0x20004c58

0800686c <vTaskPlaceOnEventListRestricted>:
	{
 800686c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800686e:	b170      	cbz	r0, 800688e <vTaskPlaceOnEventListRestricted+0x22>
 8006870:	460d      	mov	r5, r1
 8006872:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006874:	4a0a      	ldr	r2, [pc, #40]	@ (80068a0 <vTaskPlaceOnEventListRestricted+0x34>)
 8006876:	6811      	ldr	r1, [r2, #0]
 8006878:	3118      	adds	r1, #24
 800687a:	f7fb fa07 	bl	8001c8c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800687e:	b10c      	cbz	r4, 8006884 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8006880:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006884:	4621      	mov	r1, r4
 8006886:	4628      	mov	r0, r5
 8006888:	f7ff fd58 	bl	800633c <prvAddCurrentTaskToDelayedList>
	}
 800688c:	bd38      	pop	{r3, r4, r5, pc}
 800688e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800689e:	e7fe      	b.n	800689e <vTaskPlaceOnEventListRestricted+0x32>
 80068a0:	20004c58 	.word	0x20004c58

080068a4 <xTaskRemoveFromEventList>:
{
 80068a4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a6:	68c3      	ldr	r3, [r0, #12]
 80068a8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80068aa:	b324      	cbz	r4, 80068f6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068ac:	f104 0518 	add.w	r5, r4, #24
 80068b0:	4628      	mov	r0, r5
 80068b2:	f7fb fa0f 	bl	8001cd4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068b6:	4b18      	ldr	r3, [pc, #96]	@ (8006918 <xTaskRemoveFromEventList+0x74>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	bb2b      	cbnz	r3, 8006908 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068bc:	1d25      	adds	r5, r4, #4
 80068be:	4628      	mov	r0, r5
 80068c0:	f7fb fa08 	bl	8001cd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068c4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80068c6:	4b15      	ldr	r3, [pc, #84]	@ (800691c <xTaskRemoveFromEventList+0x78>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4298      	cmp	r0, r3
 80068cc:	d901      	bls.n	80068d2 <xTaskRemoveFromEventList+0x2e>
 80068ce:	4b13      	ldr	r3, [pc, #76]	@ (800691c <xTaskRemoveFromEventList+0x78>)
 80068d0:	6018      	str	r0, [r3, #0]
 80068d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80068d6:	4629      	mov	r1, r5
 80068d8:	4b11      	ldr	r3, [pc, #68]	@ (8006920 <xTaskRemoveFromEventList+0x7c>)
 80068da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80068de:	f7fb f9d5 	bl	8001c8c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068e2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80068e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006924 <xTaskRemoveFromEventList+0x80>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d911      	bls.n	8006912 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80068ee:	2001      	movs	r0, #1
 80068f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006928 <xTaskRemoveFromEventList+0x84>)
 80068f2:	6018      	str	r0, [r3, #0]
}
 80068f4:	bd38      	pop	{r3, r4, r5, pc}
 80068f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006906:	e7fe      	b.n	8006906 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006908:	4629      	mov	r1, r5
 800690a:	4808      	ldr	r0, [pc, #32]	@ (800692c <xTaskRemoveFromEventList+0x88>)
 800690c:	f7fb f9be 	bl	8001c8c <vListInsertEnd>
 8006910:	e7e7      	b.n	80068e2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8006912:	2000      	movs	r0, #0
	return xReturn;
 8006914:	e7ee      	b.n	80068f4 <xTaskRemoveFromEventList+0x50>
 8006916:	bf00      	nop
 8006918:	2000475c 	.word	0x2000475c
 800691c:	2000477c 	.word	0x2000477c
 8006920:	200047f8 	.word	0x200047f8
 8006924:	20004c58 	.word	0x20004c58
 8006928:	20004770 	.word	0x20004770
 800692c:	200047b4 	.word	0x200047b4

08006930 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006930:	4b03      	ldr	r3, [pc, #12]	@ (8006940 <vTaskInternalSetTimeOutState+0x10>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006936:	4b03      	ldr	r3, [pc, #12]	@ (8006944 <vTaskInternalSetTimeOutState+0x14>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6043      	str	r3, [r0, #4]
}
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	2000476c 	.word	0x2000476c
 8006944:	20004780 	.word	0x20004780

08006948 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8006948:	b1e0      	cbz	r0, 8006984 <xTaskCheckForTimeOut+0x3c>
{
 800694a:	b570      	push	{r4, r5, r6, lr}
 800694c:	460c      	mov	r4, r1
 800694e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006950:	b309      	cbz	r1, 8006996 <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 8006952:	f7fb fb4f 	bl	8001ff4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006956:	4b1c      	ldr	r3, [pc, #112]	@ (80069c8 <xTaskCheckForTimeOut+0x80>)
 8006958:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800695a:	686b      	ldr	r3, [r5, #4]
 800695c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800695e:	6822      	ldr	r2, [r4, #0]
 8006960:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006964:	d028      	beq.n	80069b8 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006966:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80069cc <xTaskCheckForTimeOut+0x84>
 800696a:	f8dc c000 	ldr.w	ip, [ip]
 800696e:	682e      	ldr	r6, [r5, #0]
 8006970:	4566      	cmp	r6, ip
 8006972:	d001      	beq.n	8006978 <xTaskCheckForTimeOut+0x30>
 8006974:	428b      	cmp	r3, r1
 8006976:	d924      	bls.n	80069c2 <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006978:	4282      	cmp	r2, r0
 800697a:	d815      	bhi.n	80069a8 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 800697c:	2300      	movs	r3, #0
 800697e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006980:	2401      	movs	r4, #1
 8006982:	e01a      	b.n	80069ba <xTaskCheckForTimeOut+0x72>
 8006984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8006994:	e7fe      	b.n	8006994 <xTaskCheckForTimeOut+0x4c>
 8006996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80069a6:	e7fe      	b.n	80069a6 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 80069a8:	1a5b      	subs	r3, r3, r1
 80069aa:	4413      	add	r3, r2
 80069ac:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069ae:	4628      	mov	r0, r5
 80069b0:	f7ff ffbe 	bl	8006930 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069b4:	2400      	movs	r4, #0
 80069b6:	e000      	b.n	80069ba <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 80069b8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80069ba:	f7fb fb3d 	bl	8002038 <vPortExitCritical>
}
 80069be:	4620      	mov	r0, r4
 80069c0:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 80069c2:	2401      	movs	r4, #1
 80069c4:	e7f9      	b.n	80069ba <xTaskCheckForTimeOut+0x72>
 80069c6:	bf00      	nop
 80069c8:	20004780 	.word	0x20004780
 80069cc:	2000476c 	.word	0x2000476c

080069d0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80069d0:	4b01      	ldr	r3, [pc, #4]	@ (80069d8 <vTaskMissedYield+0x8>)
 80069d2:	2201      	movs	r2, #1
 80069d4:	601a      	str	r2, [r3, #0]
}
 80069d6:	4770      	bx	lr
 80069d8:	20004770 	.word	0x20004770

080069dc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80069dc:	4b05      	ldr	r3, [pc, #20]	@ (80069f4 <xTaskGetSchedulerState+0x18>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	b133      	cbz	r3, 80069f0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069e2:	4b05      	ldr	r3, [pc, #20]	@ (80069f8 <xTaskGetSchedulerState+0x1c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	b10b      	cbz	r3, 80069ec <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80069e8:	2000      	movs	r0, #0
	}
 80069ea:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80069ec:	2002      	movs	r0, #2
 80069ee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069f0:	2001      	movs	r0, #1
 80069f2:	4770      	bx	lr
 80069f4:	20004778 	.word	0x20004778
 80069f8:	2000475c 	.word	0x2000475c

080069fc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d03b      	beq.n	8006a78 <xTaskPriorityDisinherit+0x7c>
	{
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8006a04:	4b1e      	ldr	r3, [pc, #120]	@ (8006a80 <xTaskPriorityDisinherit+0x84>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4283      	cmp	r3, r0
 8006a0a:	d008      	beq.n	8006a1e <xTaskPriorityDisinherit+0x22>
 8006a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	e7fe      	b.n	8006a1c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a1e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006a20:	b943      	cbnz	r3, 8006a34 <xTaskPriorityDisinherit+0x38>
 8006a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	e7fe      	b.n	8006a32 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8006a34:	3b01      	subs	r3, #1
 8006a36:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a38:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006a3a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8006a3c:	4291      	cmp	r1, r2
 8006a3e:	d01d      	beq.n	8006a7c <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a40:	b10b      	cbz	r3, 8006a46 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8006a42:	2000      	movs	r0, #0
	}
 8006a44:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a46:	1d05      	adds	r5, r0, #4
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f7fb f943 	bl	8001cd4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a4e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8006a50:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a52:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8006a56:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a58:	4b0a      	ldr	r3, [pc, #40]	@ (8006a84 <xTaskPriorityDisinherit+0x88>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4298      	cmp	r0, r3
 8006a5e:	d901      	bls.n	8006a64 <xTaskPriorityDisinherit+0x68>
 8006a60:	4b08      	ldr	r3, [pc, #32]	@ (8006a84 <xTaskPriorityDisinherit+0x88>)
 8006a62:	6018      	str	r0, [r3, #0]
 8006a64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4b07      	ldr	r3, [pc, #28]	@ (8006a88 <xTaskPriorityDisinherit+0x8c>)
 8006a6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006a70:	f7fb f90c 	bl	8001c8c <vListInsertEnd>
					xReturn = pdTRUE;
 8006a74:	2001      	movs	r0, #1
 8006a76:	e7e5      	b.n	8006a44 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8006a78:	2000      	movs	r0, #0
	}
 8006a7a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	e7e1      	b.n	8006a44 <xTaskPriorityDisinherit+0x48>
 8006a80:	20004c58 	.word	0x20004c58
 8006a84:	2000477c 	.word	0x2000477c
 8006a88:	200047f8 	.word	0x200047f8

08006a8c <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006a8c:	b500      	push	{lr}
 8006a8e:	b08f      	sub	sp, #60	@ 0x3c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a90:	2300      	movs	r3, #0
 8006a92:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a96:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a98:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a9a:	9308      	str	r3, [sp, #32]
 8006a9c:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	9302      	str	r3, [sp, #8]
 8006aa2:	9303      	str	r3, [sp, #12]
 8006aa4:	9304      	str	r3, [sp, #16]
 8006aa6:	9305      	str	r3, [sp, #20]
 8006aa8:	9306      	str	r3, [sp, #24]
 8006aaa:	9307      	str	r3, [sp, #28]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006aac:	481f      	ldr	r0, [pc, #124]	@ (8006b2c <MX_TIM2_Init+0xa0>)
 8006aae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006ab2:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 84-1;
 8006ab4:	2253      	movs	r2, #83	@ 0x53
 8006ab6:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ab8:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8006aba:	f04f 32ff 	mov.w	r2, #4294967295
 8006abe:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ac0:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ac2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006ac4:	f7fe f924 	bl	8004d10 <HAL_TIM_Base_Init>
 8006ac8:	bb00      	cbnz	r0, 8006b0c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006aca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ace:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006ad0:	a90a      	add	r1, sp, #40	@ 0x28
 8006ad2:	4816      	ldr	r0, [pc, #88]	@ (8006b2c <MX_TIM2_Init+0xa0>)
 8006ad4:	f7fe fa78 	bl	8004fc8 <HAL_TIM_ConfigClockSource>
 8006ad8:	b9d8      	cbnz	r0, 8006b12 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8006ada:	4814      	ldr	r0, [pc, #80]	@ (8006b2c <MX_TIM2_Init+0xa0>)
 8006adc:	f7fe f944 	bl	8004d68 <HAL_TIM_OC_Init>
 8006ae0:	b9d0      	cbnz	r0, 8006b18 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ae6:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006ae8:	a908      	add	r1, sp, #32
 8006aea:	4810      	ldr	r0, [pc, #64]	@ (8006b2c <MX_TIM2_Init+0xa0>)
 8006aec:	f7fe fc16 	bl	800531c <HAL_TIMEx_MasterConfigSynchronization>
 8006af0:	b9a8      	cbnz	r0, 8006b1e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006af2:	2200      	movs	r2, #0
 8006af4:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8006af6:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006af8:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006afa:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006afc:	a901      	add	r1, sp, #4
 8006afe:	480b      	ldr	r0, [pc, #44]	@ (8006b2c <MX_TIM2_Init+0xa0>)
 8006b00:	f7fe f9b8 	bl	8004e74 <HAL_TIM_OC_ConfigChannel>
 8006b04:	b970      	cbnz	r0, 8006b24 <MX_TIM2_Init+0x98>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006b06:	b00f      	add	sp, #60	@ 0x3c
 8006b08:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006b0c:	f7fb f902 	bl	8001d14 <Error_Handler>
 8006b10:	e7db      	b.n	8006aca <MX_TIM2_Init+0x3e>
    Error_Handler();
 8006b12:	f7fb f8ff 	bl	8001d14 <Error_Handler>
 8006b16:	e7e0      	b.n	8006ada <MX_TIM2_Init+0x4e>
    Error_Handler();
 8006b18:	f7fb f8fc 	bl	8001d14 <Error_Handler>
 8006b1c:	e7e1      	b.n	8006ae2 <MX_TIM2_Init+0x56>
    Error_Handler();
 8006b1e:	f7fb f8f9 	bl	8001d14 <Error_Handler>
 8006b22:	e7e6      	b.n	8006af2 <MX_TIM2_Init+0x66>
    Error_Handler();
 8006b24:	f7fb f8f6 	bl	8001d14 <Error_Handler>
}
 8006b28:	e7ed      	b.n	8006b06 <MX_TIM2_Init+0x7a>
 8006b2a:	bf00      	nop
 8006b2c:	20004ca4 	.word	0x20004ca4

08006b30 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006b30:	b500      	push	{lr}
 8006b32:	b083      	sub	sp, #12

  if(tim_pwmHandle->Instance==TIM1)
 8006b34:	6803      	ldr	r3, [r0, #0]
 8006b36:	4a15      	ldr	r2, [pc, #84]	@ (8006b8c <HAL_TIM_PWM_MspInit+0x5c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d005      	beq.n	8006b48 <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM3)
 8006b3c:	4a14      	ldr	r2, [pc, #80]	@ (8006b90 <HAL_TIM_PWM_MspInit+0x60>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d016      	beq.n	8006b70 <HAL_TIM_PWM_MspInit+0x40>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006b42:	b003      	add	sp, #12
 8006b44:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006b48:	2200      	movs	r2, #0
 8006b4a:	9200      	str	r2, [sp, #0]
 8006b4c:	4b11      	ldr	r3, [pc, #68]	@ (8006b94 <HAL_TIM_PWM_MspInit+0x64>)
 8006b4e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8006b50:	f041 0101 	orr.w	r1, r1, #1
 8006b54:	6459      	str	r1, [r3, #68]	@ 0x44
 8006b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8006b60:	210f      	movs	r1, #15
 8006b62:	201a      	movs	r0, #26
 8006b64:	f7fc fa12 	bl	8002f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006b68:	201a      	movs	r0, #26
 8006b6a:	f7fc fa1f 	bl	8002fac <HAL_NVIC_EnableIRQ>
 8006b6e:	e7e8      	b.n	8006b42 <HAL_TIM_PWM_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006b70:	2300      	movs	r3, #0
 8006b72:	9301      	str	r3, [sp, #4]
 8006b74:	4b07      	ldr	r3, [pc, #28]	@ (8006b94 <HAL_TIM_PWM_MspInit+0x64>)
 8006b76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b78:	f042 0202 	orr.w	r2, r2, #2
 8006b7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	9301      	str	r3, [sp, #4]
 8006b86:	9b01      	ldr	r3, [sp, #4]
}
 8006b88:	e7db      	b.n	8006b42 <HAL_TIM_PWM_MspInit+0x12>
 8006b8a:	bf00      	nop
 8006b8c:	40010000 	.word	0x40010000
 8006b90:	40000400 	.word	0x40000400
 8006b94:	40023800 	.word	0x40023800

08006b98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8006b98:	6803      	ldr	r3, [r0, #0]
 8006b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b9e:	d000      	beq.n	8006ba2 <HAL_TIM_Base_MspInit+0xa>
 8006ba0:	4770      	bx	lr
{
 8006ba2:	b500      	push	{lr}
 8006ba4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	9201      	str	r2, [sp, #4]
 8006baa:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8006bae:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006bb0:	f041 0101 	orr.w	r1, r1, #1
 8006bb4:	6419      	str	r1, [r3, #64]	@ 0x40
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	9b01      	ldr	r3, [sp, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8006bc0:	2105      	movs	r1, #5
 8006bc2:	201c      	movs	r0, #28
 8006bc4:	f7fc f9e2 	bl	8002f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006bc8:	201c      	movs	r0, #28
 8006bca:	f7fc f9ef 	bl	8002fac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8006bce:	b003      	add	sp, #12
 8006bd0:	f85d fb04 	ldr.w	pc, [sp], #4

08006bd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006bd4:	b500      	push	{lr}
 8006bd6:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bd8:	2300      	movs	r3, #0
 8006bda:	9303      	str	r3, [sp, #12]
 8006bdc:	9304      	str	r3, [sp, #16]
 8006bde:	9305      	str	r3, [sp, #20]
 8006be0:	9306      	str	r3, [sp, #24]
 8006be2:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 8006be4:	6803      	ldr	r3, [r0, #0]
 8006be6:	4a1c      	ldr	r2, [pc, #112]	@ (8006c58 <HAL_TIM_MspPostInit+0x84>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d005      	beq.n	8006bf8 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 8006bec:	4a1b      	ldr	r2, [pc, #108]	@ (8006c5c <HAL_TIM_MspPostInit+0x88>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d01a      	beq.n	8006c28 <HAL_TIM_MspPostInit+0x54>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006bf2:	b009      	add	sp, #36	@ 0x24
 8006bf4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	4b18      	ldr	r3, [pc, #96]	@ (8006c60 <HAL_TIM_MspPostInit+0x8c>)
 8006bfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c00:	f042 0201 	orr.w	r2, r2, #1
 8006c04:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_OUT1_PIN_Pin|PWM_OUT2_PIN_Pin|PWM_OUT3_PIN_Pin;
 8006c10:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8006c14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c16:	2302      	movs	r3, #2
 8006c18:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c1e:	a903      	add	r1, sp, #12
 8006c20:	4810      	ldr	r0, [pc, #64]	@ (8006c64 <HAL_TIM_MspPostInit+0x90>)
 8006c22:	f7fc fbcb 	bl	80033bc <HAL_GPIO_Init>
 8006c26:	e7e4      	b.n	8006bf2 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c28:	2300      	movs	r3, #0
 8006c2a:	9302      	str	r3, [sp, #8]
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c60 <HAL_TIM_MspPostInit+0x8c>)
 8006c2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c30:	f042 0204 	orr.w	r2, r2, #4
 8006c34:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	9302      	str	r3, [sp, #8]
 8006c3e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ETB1_MOTOR1_Pin|ETB1_MOTOR2_Pin|ETB2_MOTOR1_Pin|ETB2_MOTOR2_Pin;
 8006c40:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8006c44:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c46:	2302      	movs	r3, #2
 8006c48:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006c4a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c4c:	a903      	add	r1, sp, #12
 8006c4e:	4806      	ldr	r0, [pc, #24]	@ (8006c68 <HAL_TIM_MspPostInit+0x94>)
 8006c50:	f7fc fbb4 	bl	80033bc <HAL_GPIO_Init>
}
 8006c54:	e7cd      	b.n	8006bf2 <HAL_TIM_MspPostInit+0x1e>
 8006c56:	bf00      	nop
 8006c58:	40010000 	.word	0x40010000
 8006c5c:	40000400 	.word	0x40000400
 8006c60:	40023800 	.word	0x40023800
 8006c64:	40020000 	.word	0x40020000
 8006c68:	40020800 	.word	0x40020800

08006c6c <MX_TIM1_Init>:
{
 8006c6c:	b510      	push	{r4, lr}
 8006c6e:	b092      	sub	sp, #72	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c70:	2400      	movs	r4, #0
 8006c72:	9410      	str	r4, [sp, #64]	@ 0x40
 8006c74:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006c76:	9409      	str	r4, [sp, #36]	@ 0x24
 8006c78:	940a      	str	r4, [sp, #40]	@ 0x28
 8006c7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c7c:	940c      	str	r4, [sp, #48]	@ 0x30
 8006c7e:	940d      	str	r4, [sp, #52]	@ 0x34
 8006c80:	940e      	str	r4, [sp, #56]	@ 0x38
 8006c82:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006c84:	2220      	movs	r2, #32
 8006c86:	4621      	mov	r1, r4
 8006c88:	a801      	add	r0, sp, #4
 8006c8a:	f002 f939 	bl	8008f00 <memset>
  htim1.Instance = TIM1;
 8006c8e:	4831      	ldr	r0, [pc, #196]	@ (8006d54 <MX_TIM1_Init+0xe8>)
 8006c90:	4b31      	ldr	r3, [pc, #196]	@ (8006d58 <MX_TIM1_Init+0xec>)
 8006c92:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8006c94:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c96:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 65535;
 8006c98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c9c:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c9e:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8006ca0:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ca2:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006ca4:	f7fe f88c 	bl	8004dc0 <HAL_TIM_PWM_Init>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d13d      	bne.n	8006d28 <MX_TIM1_Init+0xbc>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8006cac:	4829      	ldr	r0, [pc, #164]	@ (8006d54 <MX_TIM1_Init+0xe8>)
 8006cae:	f7fe f85b 	bl	8004d68 <HAL_TIM_OC_Init>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d13b      	bne.n	8006d2e <MX_TIM1_Init+0xc2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006cba:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006cbc:	a910      	add	r1, sp, #64	@ 0x40
 8006cbe:	4825      	ldr	r0, [pc, #148]	@ (8006d54 <MX_TIM1_Init+0xe8>)
 8006cc0:	f7fe fb2c 	bl	800531c <HAL_TIMEx_MasterConfigSynchronization>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d135      	bne.n	8006d34 <MX_TIM1_Init+0xc8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006cc8:	2360      	movs	r3, #96	@ 0x60
 8006cca:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8006ccc:	2200      	movs	r2, #0
 8006cce:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006cd0:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006cd2:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006cd4:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006cd6:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006cd8:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006cda:	a909      	add	r1, sp, #36	@ 0x24
 8006cdc:	481d      	ldr	r0, [pc, #116]	@ (8006d54 <MX_TIM1_Init+0xe8>)
 8006cde:	f7fe f8f8 	bl	8004ed2 <HAL_TIM_PWM_ConfigChannel>
 8006ce2:	bb50      	cbnz	r0, 8006d3a <MX_TIM1_Init+0xce>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006ce4:	2204      	movs	r2, #4
 8006ce6:	a909      	add	r1, sp, #36	@ 0x24
 8006ce8:	481a      	ldr	r0, [pc, #104]	@ (8006d54 <MX_TIM1_Init+0xe8>)
 8006cea:	f7fe f8f2 	bl	8004ed2 <HAL_TIM_PWM_ConfigChannel>
 8006cee:	bb38      	cbnz	r0, 8006d40 <MX_TIM1_Init+0xd4>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006cf4:	2208      	movs	r2, #8
 8006cf6:	a909      	add	r1, sp, #36	@ 0x24
 8006cf8:	4816      	ldr	r0, [pc, #88]	@ (8006d54 <MX_TIM1_Init+0xe8>)
 8006cfa:	f7fe f8bb 	bl	8004e74 <HAL_TIM_OC_ConfigChannel>
 8006cfe:	bb10      	cbnz	r0, 8006d46 <MX_TIM1_Init+0xda>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006d00:	2300      	movs	r3, #0
 8006d02:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006d04:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006d06:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006d08:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006d0a:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006d0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006d10:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006d12:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006d14:	a901      	add	r1, sp, #4
 8006d16:	480f      	ldr	r0, [pc, #60]	@ (8006d54 <MX_TIM1_Init+0xe8>)
 8006d18:	f7fe fb3e 	bl	8005398 <HAL_TIMEx_ConfigBreakDeadTime>
 8006d1c:	b9b0      	cbnz	r0, 8006d4c <MX_TIM1_Init+0xe0>
  HAL_TIM_MspPostInit(&htim1);
 8006d1e:	480d      	ldr	r0, [pc, #52]	@ (8006d54 <MX_TIM1_Init+0xe8>)
 8006d20:	f7ff ff58 	bl	8006bd4 <HAL_TIM_MspPostInit>
}
 8006d24:	b012      	add	sp, #72	@ 0x48
 8006d26:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006d28:	f7fa fff4 	bl	8001d14 <Error_Handler>
 8006d2c:	e7be      	b.n	8006cac <MX_TIM1_Init+0x40>
    Error_Handler();
 8006d2e:	f7fa fff1 	bl	8001d14 <Error_Handler>
 8006d32:	e7c0      	b.n	8006cb6 <MX_TIM1_Init+0x4a>
    Error_Handler();
 8006d34:	f7fa ffee 	bl	8001d14 <Error_Handler>
 8006d38:	e7c6      	b.n	8006cc8 <MX_TIM1_Init+0x5c>
    Error_Handler();
 8006d3a:	f7fa ffeb 	bl	8001d14 <Error_Handler>
 8006d3e:	e7d1      	b.n	8006ce4 <MX_TIM1_Init+0x78>
    Error_Handler();
 8006d40:	f7fa ffe8 	bl	8001d14 <Error_Handler>
 8006d44:	e7d4      	b.n	8006cf0 <MX_TIM1_Init+0x84>
    Error_Handler();
 8006d46:	f7fa ffe5 	bl	8001d14 <Error_Handler>
 8006d4a:	e7d9      	b.n	8006d00 <MX_TIM1_Init+0x94>
    Error_Handler();
 8006d4c:	f7fa ffe2 	bl	8001d14 <Error_Handler>
 8006d50:	e7e5      	b.n	8006d1e <MX_TIM1_Init+0xb2>
 8006d52:	bf00      	nop
 8006d54:	20004cec 	.word	0x20004cec
 8006d58:	40010000 	.word	0x40010000

08006d5c <MX_TIM3_Init>:
{
 8006d5c:	b500      	push	{lr}
 8006d5e:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d60:	2300      	movs	r3, #0
 8006d62:	9308      	str	r3, [sp, #32]
 8006d64:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	9302      	str	r3, [sp, #8]
 8006d6a:	9303      	str	r3, [sp, #12]
 8006d6c:	9304      	str	r3, [sp, #16]
 8006d6e:	9305      	str	r3, [sp, #20]
 8006d70:	9306      	str	r3, [sp, #24]
 8006d72:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8006d74:	4825      	ldr	r0, [pc, #148]	@ (8006e0c <MX_TIM3_Init+0xb0>)
 8006d76:	4a26      	ldr	r2, [pc, #152]	@ (8006e10 <MX_TIM3_Init+0xb4>)
 8006d78:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8006d7a:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d7c:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8006d7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006d82:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d84:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d86:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006d88:	f7fe f81a 	bl	8004dc0 <HAL_TIM_PWM_Init>
 8006d8c:	bb58      	cbnz	r0, 8006de6 <MX_TIM3_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d92:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006d94:	a908      	add	r1, sp, #32
 8006d96:	481d      	ldr	r0, [pc, #116]	@ (8006e0c <MX_TIM3_Init+0xb0>)
 8006d98:	f7fe fac0 	bl	800531c <HAL_TIMEx_MasterConfigSynchronization>
 8006d9c:	bb30      	cbnz	r0, 8006dec <MX_TIM3_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d9e:	2360      	movs	r3, #96	@ 0x60
 8006da0:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8006da2:	2200      	movs	r2, #0
 8006da4:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006da6:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006da8:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006daa:	a901      	add	r1, sp, #4
 8006dac:	4817      	ldr	r0, [pc, #92]	@ (8006e0c <MX_TIM3_Init+0xb0>)
 8006dae:	f7fe f890 	bl	8004ed2 <HAL_TIM_PWM_ConfigChannel>
 8006db2:	b9f0      	cbnz	r0, 8006df2 <MX_TIM3_Init+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006db4:	2204      	movs	r2, #4
 8006db6:	eb0d 0102 	add.w	r1, sp, r2
 8006dba:	4814      	ldr	r0, [pc, #80]	@ (8006e0c <MX_TIM3_Init+0xb0>)
 8006dbc:	f7fe f889 	bl	8004ed2 <HAL_TIM_PWM_ConfigChannel>
 8006dc0:	b9d0      	cbnz	r0, 8006df8 <MX_TIM3_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006dc2:	2208      	movs	r2, #8
 8006dc4:	a901      	add	r1, sp, #4
 8006dc6:	4811      	ldr	r0, [pc, #68]	@ (8006e0c <MX_TIM3_Init+0xb0>)
 8006dc8:	f7fe f883 	bl	8004ed2 <HAL_TIM_PWM_ConfigChannel>
 8006dcc:	b9b8      	cbnz	r0, 8006dfe <MX_TIM3_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006dce:	220c      	movs	r2, #12
 8006dd0:	a901      	add	r1, sp, #4
 8006dd2:	480e      	ldr	r0, [pc, #56]	@ (8006e0c <MX_TIM3_Init+0xb0>)
 8006dd4:	f7fe f87d 	bl	8004ed2 <HAL_TIM_PWM_ConfigChannel>
 8006dd8:	b9a0      	cbnz	r0, 8006e04 <MX_TIM3_Init+0xa8>
  HAL_TIM_MspPostInit(&htim3);
 8006dda:	480c      	ldr	r0, [pc, #48]	@ (8006e0c <MX_TIM3_Init+0xb0>)
 8006ddc:	f7ff fefa 	bl	8006bd4 <HAL_TIM_MspPostInit>
}
 8006de0:	b00b      	add	sp, #44	@ 0x2c
 8006de2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006de6:	f7fa ff95 	bl	8001d14 <Error_Handler>
 8006dea:	e7d0      	b.n	8006d8e <MX_TIM3_Init+0x32>
    Error_Handler();
 8006dec:	f7fa ff92 	bl	8001d14 <Error_Handler>
 8006df0:	e7d5      	b.n	8006d9e <MX_TIM3_Init+0x42>
    Error_Handler();
 8006df2:	f7fa ff8f 	bl	8001d14 <Error_Handler>
 8006df6:	e7dd      	b.n	8006db4 <MX_TIM3_Init+0x58>
    Error_Handler();
 8006df8:	f7fa ff8c 	bl	8001d14 <Error_Handler>
 8006dfc:	e7e1      	b.n	8006dc2 <MX_TIM3_Init+0x66>
    Error_Handler();
 8006dfe:	f7fa ff89 	bl	8001d14 <Error_Handler>
 8006e02:	e7e4      	b.n	8006dce <MX_TIM3_Init+0x72>
    Error_Handler();
 8006e04:	f7fa ff86 	bl	8001d14 <Error_Handler>
 8006e08:	e7e7      	b.n	8006dda <MX_TIM3_Init+0x7e>
 8006e0a:	bf00      	nop
 8006e0c:	20004c5c 	.word	0x20004c5c
 8006e10:	40000400 	.word	0x40000400

08006e14 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e14:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <prvGetNextExpireTime+0x1c>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	6813      	ldr	r3, [r2, #0]
 8006e1a:	b92b      	cbnz	r3, 8006e28 <prvGetNextExpireTime+0x14>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e20:	b923      	cbnz	r3, 8006e2c <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e22:	68d3      	ldr	r3, [r2, #12]
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e7f8      	b.n	8006e1e <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e2c:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8006e2e:	4770      	bx	lr
 8006e30:	20004e34 	.word	0x20004e34

08006e34 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e34:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e36:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e38:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e3a:	4291      	cmp	r1, r2
 8006e3c:	d80c      	bhi.n	8006e58 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e3e:	1ad2      	subs	r2, r2, r3
 8006e40:	6983      	ldr	r3, [r0, #24]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d301      	bcc.n	8006e4a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e46:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8006e48:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e4a:	1d01      	adds	r1, r0, #4
 8006e4c:	4b09      	ldr	r3, [pc, #36]	@ (8006e74 <prvInsertTimerInActiveList+0x40>)
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	f7fa ff27 	bl	8001ca2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006e54:	2000      	movs	r0, #0
 8006e56:	e7f7      	b.n	8006e48 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d201      	bcs.n	8006e60 <prvInsertTimerInActiveList+0x2c>
 8006e5c:	4299      	cmp	r1, r3
 8006e5e:	d206      	bcs.n	8006e6e <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e60:	1d01      	adds	r1, r0, #4
 8006e62:	4b05      	ldr	r3, [pc, #20]	@ (8006e78 <prvInsertTimerInActiveList+0x44>)
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	f7fa ff1c 	bl	8001ca2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	e7ec      	b.n	8006e48 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8006e6e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8006e70:	e7ea      	b.n	8006e48 <prvInsertTimerInActiveList+0x14>
 8006e72:	bf00      	nop
 8006e74:	20004e30 	.word	0x20004e30
 8006e78:	20004e34 	.word	0x20004e34

08006e7c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e7c:	b530      	push	{r4, r5, lr}
 8006e7e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e80:	f7fb f8b8 	bl	8001ff4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e84:	4b11      	ldr	r3, [pc, #68]	@ (8006ecc <prvCheckForValidListAndQueue+0x50>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	b11b      	cbz	r3, 8006e92 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e8a:	f7fb f8d5 	bl	8002038 <vPortExitCritical>
}
 8006e8e:	b003      	add	sp, #12
 8006e90:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8006e92:	4d0f      	ldr	r5, [pc, #60]	@ (8006ed0 <prvCheckForValidListAndQueue+0x54>)
 8006e94:	4628      	mov	r0, r5
 8006e96:	f7fa feeb 	bl	8001c70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e9a:	4c0e      	ldr	r4, [pc, #56]	@ (8006ed4 <prvCheckForValidListAndQueue+0x58>)
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f7fa fee7 	bl	8001c70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed8 <prvCheckForValidListAndQueue+0x5c>)
 8006ea4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8006edc <prvCheckForValidListAndQueue+0x60>)
 8006ea8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee0 <prvCheckForValidListAndQueue+0x64>)
 8006eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8006ee4 <prvCheckForValidListAndQueue+0x68>)
 8006eb2:	2110      	movs	r1, #16
 8006eb4:	200a      	movs	r0, #10
 8006eb6:	f7fb fae4 	bl	8002482 <xQueueGenericCreateStatic>
 8006eba:	4b04      	ldr	r3, [pc, #16]	@ (8006ecc <prvCheckForValidListAndQueue+0x50>)
 8006ebc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d0e3      	beq.n	8006e8a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ec2:	4909      	ldr	r1, [pc, #36]	@ (8006ee8 <prvCheckForValidListAndQueue+0x6c>)
 8006ec4:	f7fb fd02 	bl	80028cc <vQueueAddToRegistry>
 8006ec8:	e7df      	b.n	8006e8a <prvCheckForValidListAndQueue+0xe>
 8006eca:	bf00      	nop
 8006ecc:	20004e2c 	.word	0x20004e2c
 8006ed0:	20004e4c 	.word	0x20004e4c
 8006ed4:	20004e38 	.word	0x20004e38
 8006ed8:	20004e34 	.word	0x20004e34
 8006edc:	20004e30 	.word	0x20004e30
 8006ee0:	20004d34 	.word	0x20004d34
 8006ee4:	20004d84 	.word	0x20004d84
 8006ee8:	08009cf4 	.word	0x08009cf4

08006eec <prvInitialiseNewTimer>:
{
 8006eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef0:	9f07      	ldr	r7, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006ef2:	b941      	cbnz	r1, 8006f06 <prvInitialiseNewTimer+0x1a>
 8006ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	e7fe      	b.n	8006f04 <prvInitialiseNewTimer+0x18>
 8006f06:	4606      	mov	r6, r0
 8006f08:	4614      	mov	r4, r2
 8006f0a:	461d      	mov	r5, r3
 8006f0c:	4688      	mov	r8, r1
	if( pxNewTimer != NULL )
 8006f0e:	b18f      	cbz	r7, 8006f34 <prvInitialiseNewTimer+0x48>
		prvCheckForValidListAndQueue();
 8006f10:	f7ff ffb4 	bl	8006e7c <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8006f14:	603e      	str	r6, [r7, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006f16:	f8c7 8018 	str.w	r8, [r7, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006f1a:	61fd      	str	r5, [r7, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006f1c:	9b06      	ldr	r3, [sp, #24]
 8006f1e:	623b      	str	r3, [r7, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006f20:	1d38      	adds	r0, r7, #4
 8006f22:	f7fa feb0 	bl	8001c86 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006f26:	b12c      	cbz	r4, 8006f34 <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006f28:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f2c:	f043 0304 	orr.w	r3, r3, #4
 8006f30:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
}
 8006f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006f38 <xTimerCreateTimerTask>:
{
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8006f3c:	f7ff ff9e 	bl	8006e7c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006f40:	4b12      	ldr	r3, [pc, #72]	@ (8006f8c <xTimerCreateTimerTask+0x54>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	b1cb      	cbz	r3, 8006f7a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f46:	2400      	movs	r4, #0
 8006f48:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f4a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f4c:	aa07      	add	r2, sp, #28
 8006f4e:	a906      	add	r1, sp, #24
 8006f50:	a805      	add	r0, sp, #20
 8006f52:	f7fa f855 	bl	8001000 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f56:	9b05      	ldr	r3, [sp, #20]
 8006f58:	9302      	str	r3, [sp, #8]
 8006f5a:	9b06      	ldr	r3, [sp, #24]
 8006f5c:	9301      	str	r3, [sp, #4]
 8006f5e:	2302      	movs	r3, #2
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	4623      	mov	r3, r4
 8006f64:	9a07      	ldr	r2, [sp, #28]
 8006f66:	490a      	ldr	r1, [pc, #40]	@ (8006f90 <xTimerCreateTimerTask+0x58>)
 8006f68:	480a      	ldr	r0, [pc, #40]	@ (8006f94 <xTimerCreateTimerTask+0x5c>)
 8006f6a:	f7ff fa25 	bl	80063b8 <xTaskCreateStatic>
 8006f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f98 <xTimerCreateTimerTask+0x60>)
 8006f70:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006f72:	b110      	cbz	r0, 8006f7a <xTimerCreateTimerTask+0x42>
}
 8006f74:	2001      	movs	r0, #1
 8006f76:	b008      	add	sp, #32
 8006f78:	bd10      	pop	{r4, pc}
 8006f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8006f8a:	e7fe      	b.n	8006f8a <xTimerCreateTimerTask+0x52>
 8006f8c:	20004e2c 	.word	0x20004e2c
 8006f90:	08009cfc 	.word	0x08009cfc
 8006f94:	08007329 	.word	0x08007329
 8006f98:	20004e28 	.word	0x20004e28

08006f9c <xTimerCreate>:
	{
 8006f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	4688      	mov	r8, r1
 8006fa6:	4617      	mov	r7, r2
 8006fa8:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006faa:	202c      	movs	r0, #44	@ 0x2c
 8006fac:	f7fa fc3a 	bl	8001824 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8006fb0:	4606      	mov	r6, r0
 8006fb2:	b158      	cbz	r0, 8006fcc <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006fba:	9001      	str	r0, [sp, #4]
 8006fbc:	9b08      	ldr	r3, [sp, #32]
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	462b      	mov	r3, r5
 8006fc2:	463a      	mov	r2, r7
 8006fc4:	4641      	mov	r1, r8
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f7ff ff90 	bl	8006eec <prvInitialiseNewTimer>
	}
 8006fcc:	4630      	mov	r0, r6
 8006fce:	b002      	add	sp, #8
 8006fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006fd4 <xTimerCreateStatic>:
	{
 8006fd4:	b510      	push	{r4, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	4684      	mov	ip, r0
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006fda:	202c      	movs	r0, #44	@ 0x2c
 8006fdc:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006fde:	9803      	ldr	r0, [sp, #12]
 8006fe0:	282c      	cmp	r0, #44	@ 0x2c
 8006fe2:	d008      	beq.n	8006ff6 <xTimerCreateStatic+0x22>
 8006fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	e7fe      	b.n	8006ff4 <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ff6:	9803      	ldr	r0, [sp, #12]
		configASSERT( pxTimerBuffer );
 8006ff8:	9807      	ldr	r0, [sp, #28]
 8006ffa:	b160      	cbz	r0, 8007016 <xTimerCreateStatic+0x42>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006ffc:	2002      	movs	r0, #2
 8006ffe:	9c07      	ldr	r4, [sp, #28]
 8007000:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007004:	9401      	str	r4, [sp, #4]
 8007006:	9806      	ldr	r0, [sp, #24]
 8007008:	9000      	str	r0, [sp, #0]
 800700a:	4660      	mov	r0, ip
 800700c:	f7ff ff6e 	bl	8006eec <prvInitialiseNewTimer>
	}
 8007010:	9807      	ldr	r0, [sp, #28]
 8007012:	b004      	add	sp, #16
 8007014:	bd10      	pop	{r4, pc}
 8007016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
 8007026:	e7fe      	b.n	8007026 <xTimerCreateStatic+0x52>

08007028 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8007028:	b1b8      	cbz	r0, 800705a <xTimerGenericCommand+0x32>
 800702a:	469c      	mov	ip, r3
 800702c:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800702e:	4818      	ldr	r0, [pc, #96]	@ (8007090 <xTimerGenericCommand+0x68>)
 8007030:	6800      	ldr	r0, [r0, #0]
 8007032:	b358      	cbz	r0, 800708c <xTimerGenericCommand+0x64>
{
 8007034:	b500      	push	{lr}
 8007036:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8007038:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800703a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800703c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800703e:	2905      	cmp	r1, #5
 8007040:	dc1c      	bgt.n	800707c <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007042:	f7ff fccb 	bl	80069dc <xTaskGetSchedulerState>
 8007046:	2802      	cmp	r0, #2
 8007048:	d010      	beq.n	800706c <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800704a:	2300      	movs	r3, #0
 800704c:	461a      	mov	r2, r3
 800704e:	4669      	mov	r1, sp
 8007050:	480f      	ldr	r0, [pc, #60]	@ (8007090 <xTimerGenericCommand+0x68>)
 8007052:	6800      	ldr	r0, [r0, #0]
 8007054:	f7fb fa5f 	bl	8002516 <xQueueGenericSend>
 8007058:	e015      	b.n	8007086 <xTimerGenericCommand+0x5e>
 800705a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800706a:	e7fe      	b.n	800706a <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800706c:	2300      	movs	r3, #0
 800706e:	9a06      	ldr	r2, [sp, #24]
 8007070:	4669      	mov	r1, sp
 8007072:	4807      	ldr	r0, [pc, #28]	@ (8007090 <xTimerGenericCommand+0x68>)
 8007074:	6800      	ldr	r0, [r0, #0]
 8007076:	f7fb fa4e 	bl	8002516 <xQueueGenericSend>
 800707a:	e004      	b.n	8007086 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800707c:	2300      	movs	r3, #0
 800707e:	4662      	mov	r2, ip
 8007080:	4669      	mov	r1, sp
 8007082:	f7fb fb0c 	bl	800269e <xQueueGenericSendFromISR>
}
 8007086:	b005      	add	sp, #20
 8007088:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800708c:	2000      	movs	r0, #0
}
 800708e:	4770      	bx	lr
 8007090:	20004e2c 	.word	0x20004e2c

08007094 <prvSwitchTimerLists>:
{
 8007094:	b570      	push	{r4, r5, r6, lr}
 8007096:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007098:	4b1b      	ldr	r3, [pc, #108]	@ (8007108 <prvSwitchTimerLists+0x74>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	b362      	cbz	r2, 80070fa <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070a6:	1d25      	adds	r5, r4, #4
 80070a8:	4628      	mov	r0, r5
 80070aa:	f7fa fe13 	bl	8001cd4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070ae:	6a23      	ldr	r3, [r4, #32]
 80070b0:	4620      	mov	r0, r4
 80070b2:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070b4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80070b8:	f013 0f04 	tst.w	r3, #4
 80070bc:	d0ec      	beq.n	8007098 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070be:	69a3      	ldr	r3, [r4, #24]
 80070c0:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80070c2:	429e      	cmp	r6, r3
 80070c4:	d207      	bcs.n	80070d6 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070c6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070c8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070ca:	4629      	mov	r1, r5
 80070cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007108 <prvSwitchTimerLists+0x74>)
 80070ce:	6818      	ldr	r0, [r3, #0]
 80070d0:	f7fa fde7 	bl	8001ca2 <vListInsert>
 80070d4:	e7e0      	b.n	8007098 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070d6:	2100      	movs	r1, #0
 80070d8:	9100      	str	r1, [sp, #0]
 80070da:	460b      	mov	r3, r1
 80070dc:	4632      	mov	r2, r6
 80070de:	4620      	mov	r0, r4
 80070e0:	f7ff ffa2 	bl	8007028 <xTimerGenericCommand>
				configASSERT( xResult );
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d1d7      	bne.n	8007098 <prvSwitchTimerLists+0x4>
 80070e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	e7fe      	b.n	80070f8 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 80070fa:	4a04      	ldr	r2, [pc, #16]	@ (800710c <prvSwitchTimerLists+0x78>)
 80070fc:	6810      	ldr	r0, [r2, #0]
 80070fe:	4902      	ldr	r1, [pc, #8]	@ (8007108 <prvSwitchTimerLists+0x74>)
 8007100:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8007102:	6013      	str	r3, [r2, #0]
}
 8007104:	b002      	add	sp, #8
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	20004e34 	.word	0x20004e34
 800710c:	20004e30 	.word	0x20004e30

08007110 <prvSampleTimeNow>:
{
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8007114:	f7ff fa12 	bl	800653c <xTaskGetTickCount>
 8007118:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800711a:	4b07      	ldr	r3, [pc, #28]	@ (8007138 <prvSampleTimeNow+0x28>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4283      	cmp	r3, r0
 8007120:	d805      	bhi.n	800712e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8007122:	2300      	movs	r3, #0
 8007124:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8007126:	4b04      	ldr	r3, [pc, #16]	@ (8007138 <prvSampleTimeNow+0x28>)
 8007128:	601c      	str	r4, [r3, #0]
}
 800712a:	4620      	mov	r0, r4
 800712c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800712e:	f7ff ffb1 	bl	8007094 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007132:	2301      	movs	r3, #1
 8007134:	602b      	str	r3, [r5, #0]
 8007136:	e7f6      	b.n	8007126 <prvSampleTimeNow+0x16>
 8007138:	20004e24 	.word	0x20004e24

0800713c <prvProcessExpiredTimer>:
{
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	4606      	mov	r6, r0
 8007142:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007144:	4917      	ldr	r1, [pc, #92]	@ (80071a4 <prvProcessExpiredTimer+0x68>)
 8007146:	6809      	ldr	r1, [r1, #0]
 8007148:	68c9      	ldr	r1, [r1, #12]
 800714a:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800714c:	1d20      	adds	r0, r4, #4
 800714e:	f7fa fdc1 	bl	8001cd4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007152:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8007156:	f01c 0f04 	tst.w	ip, #4
 800715a:	d108      	bne.n	800716e <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800715c:	f02c 0c01 	bic.w	ip, ip, #1
 8007160:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007164:	6a23      	ldr	r3, [r4, #32]
 8007166:	4620      	mov	r0, r4
 8007168:	4798      	blx	r3
}
 800716a:	b002      	add	sp, #8
 800716c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800716e:	69a1      	ldr	r1, [r4, #24]
 8007170:	4633      	mov	r3, r6
 8007172:	462a      	mov	r2, r5
 8007174:	4431      	add	r1, r6
 8007176:	4620      	mov	r0, r4
 8007178:	f7ff fe5c 	bl	8006e34 <prvInsertTimerInActiveList>
 800717c:	2800      	cmp	r0, #0
 800717e:	d0f1      	beq.n	8007164 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007180:	2100      	movs	r1, #0
 8007182:	9100      	str	r1, [sp, #0]
 8007184:	460b      	mov	r3, r1
 8007186:	4632      	mov	r2, r6
 8007188:	4620      	mov	r0, r4
 800718a:	f7ff ff4d 	bl	8007028 <xTimerGenericCommand>
			configASSERT( xResult );
 800718e:	2800      	cmp	r0, #0
 8007190:	d1e8      	bne.n	8007164 <prvProcessExpiredTimer+0x28>
 8007192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	e7fe      	b.n	80071a2 <prvProcessExpiredTimer+0x66>
 80071a4:	20004e34 	.word	0x20004e34

080071a8 <prvProcessTimerOrBlockTask>:
{
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	4606      	mov	r6, r0
 80071ae:	460c      	mov	r4, r1
	vTaskSuspendAll();
 80071b0:	f7ff f9bc 	bl	800652c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071b4:	a801      	add	r0, sp, #4
 80071b6:	f7ff ffab 	bl	8007110 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80071ba:	9b01      	ldr	r3, [sp, #4]
 80071bc:	bb33      	cbnz	r3, 800720c <prvProcessTimerOrBlockTask+0x64>
 80071be:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071c0:	b9e4      	cbnz	r4, 80071fc <prvProcessTimerOrBlockTask+0x54>
 80071c2:	42b0      	cmp	r0, r6
 80071c4:	d213      	bcs.n	80071ee <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071c6:	4622      	mov	r2, r4
 80071c8:	1b71      	subs	r1, r6, r5
 80071ca:	4b12      	ldr	r3, [pc, #72]	@ (8007214 <prvProcessTimerOrBlockTask+0x6c>)
 80071cc:	6818      	ldr	r0, [r3, #0]
 80071ce:	f7fb fb91 	bl	80028f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071d2:	f7ff fa45 	bl	8006660 <xTaskResumeAll>
 80071d6:	b9d8      	cbnz	r0, 8007210 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 80071d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80071dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	e010      	b.n	8007210 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 80071ee:	f7ff fa37 	bl	8006660 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071f2:	4629      	mov	r1, r5
 80071f4:	4630      	mov	r0, r6
 80071f6:	f7ff ffa1 	bl	800713c <prvProcessExpiredTimer>
 80071fa:	e009      	b.n	8007210 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071fc:	4a06      	ldr	r2, [pc, #24]	@ (8007218 <prvProcessTimerOrBlockTask+0x70>)
 80071fe:	6812      	ldr	r2, [r2, #0]
 8007200:	6812      	ldr	r2, [r2, #0]
 8007202:	b90a      	cbnz	r2, 8007208 <prvProcessTimerOrBlockTask+0x60>
 8007204:	2401      	movs	r4, #1
 8007206:	e7de      	b.n	80071c6 <prvProcessTimerOrBlockTask+0x1e>
 8007208:	461c      	mov	r4, r3
 800720a:	e7dc      	b.n	80071c6 <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 800720c:	f7ff fa28 	bl	8006660 <xTaskResumeAll>
}
 8007210:	b002      	add	sp, #8
 8007212:	bd70      	pop	{r4, r5, r6, pc}
 8007214:	20004e2c 	.word	0x20004e2c
 8007218:	20004e30 	.word	0x20004e30

0800721c <prvProcessReceivedCommands>:
{
 800721c:	b510      	push	{r4, lr}
 800721e:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007220:	e002      	b.n	8007228 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	da0f      	bge.n	8007248 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007228:	2200      	movs	r2, #0
 800722a:	a904      	add	r1, sp, #16
 800722c:	4b3d      	ldr	r3, [pc, #244]	@ (8007324 <prvProcessReceivedCommands+0x108>)
 800722e:	6818      	ldr	r0, [r3, #0]
 8007230:	f7fb fa9c 	bl	800276c <xQueueReceive>
 8007234:	2800      	cmp	r0, #0
 8007236:	d072      	beq.n	800731e <prvProcessReceivedCommands+0x102>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007238:	9b04      	ldr	r3, [sp, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	daf1      	bge.n	8007222 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800723e:	9907      	ldr	r1, [sp, #28]
 8007240:	9806      	ldr	r0, [sp, #24]
 8007242:	9b05      	ldr	r3, [sp, #20]
 8007244:	4798      	blx	r3
 8007246:	e7ec      	b.n	8007222 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007248:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800724a:	6963      	ldr	r3, [r4, #20]
 800724c:	b113      	cbz	r3, 8007254 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800724e:	1d20      	adds	r0, r4, #4
 8007250:	f7fa fd40 	bl	8001cd4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007254:	a803      	add	r0, sp, #12
 8007256:	f7ff ff5b 	bl	8007110 <prvSampleTimeNow>
 800725a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800725c:	9b04      	ldr	r3, [sp, #16]
 800725e:	2b09      	cmp	r3, #9
 8007260:	d8e2      	bhi.n	8007228 <prvProcessReceivedCommands+0xc>
 8007262:	e8df f003 	tbb	[pc, r3]
 8007266:	0505      	.short	0x0505
 8007268:	4e362f05 	.word	0x4e362f05
 800726c:	362f0505 	.word	0x362f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007270:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8007274:	f043 0301 	orr.w	r3, r3, #1
 8007278:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800727c:	9b05      	ldr	r3, [sp, #20]
 800727e:	69a1      	ldr	r1, [r4, #24]
 8007280:	4419      	add	r1, r3
 8007282:	4620      	mov	r0, r4
 8007284:	f7ff fdd6 	bl	8006e34 <prvInsertTimerInActiveList>
 8007288:	2800      	cmp	r0, #0
 800728a:	d0cd      	beq.n	8007228 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800728c:	6a23      	ldr	r3, [r4, #32]
 800728e:	4620      	mov	r0, r4
 8007290:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007292:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8007296:	f013 0f04 	tst.w	r3, #4
 800729a:	d0c5      	beq.n	8007228 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800729c:	69a2      	ldr	r2, [r4, #24]
 800729e:	2100      	movs	r1, #0
 80072a0:	9100      	str	r1, [sp, #0]
 80072a2:	460b      	mov	r3, r1
 80072a4:	9805      	ldr	r0, [sp, #20]
 80072a6:	4402      	add	r2, r0
 80072a8:	4620      	mov	r0, r4
 80072aa:	f7ff febd 	bl	8007028 <xTimerGenericCommand>
							configASSERT( xResult );
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d1ba      	bne.n	8007228 <prvProcessReceivedCommands+0xc>
 80072b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	e7fe      	b.n	80072c2 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072c4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80072c8:	f023 0301 	bic.w	r3, r3, #1
 80072cc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 80072d0:	e7aa      	b.n	8007228 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072d2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80072d6:	f043 0301 	orr.w	r3, r3, #1
 80072da:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80072de:	9905      	ldr	r1, [sp, #20]
 80072e0:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80072e2:	b129      	cbz	r1, 80072f0 <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80072e4:	4603      	mov	r3, r0
 80072e6:	4401      	add	r1, r0
 80072e8:	4620      	mov	r0, r4
 80072ea:	f7ff fda3 	bl	8006e34 <prvInsertTimerInActiveList>
					break;
 80072ee:	e79b      	b.n	8007228 <prvProcessReceivedCommands+0xc>
 80072f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007300:	e7fe      	b.n	8007300 <prvProcessReceivedCommands+0xe4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007302:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8007306:	f013 0f02 	tst.w	r3, #2
 800730a:	d004      	beq.n	8007316 <prvProcessReceivedCommands+0xfa>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800730c:	f023 0301 	bic.w	r3, r3, #1
 8007310:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8007314:	e788      	b.n	8007228 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8007316:	4620      	mov	r0, r4
 8007318:	f7fa fb06 	bl	8001928 <vPortFree>
 800731c:	e784      	b.n	8007228 <prvProcessReceivedCommands+0xc>
}
 800731e:	b008      	add	sp, #32
 8007320:	bd10      	pop	{r4, pc}
 8007322:	bf00      	nop
 8007324:	20004e2c 	.word	0x20004e2c

08007328 <prvTimerTask>:
{
 8007328:	b500      	push	{lr}
 800732a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800732c:	a801      	add	r0, sp, #4
 800732e:	f7ff fd71 	bl	8006e14 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007332:	9901      	ldr	r1, [sp, #4]
 8007334:	f7ff ff38 	bl	80071a8 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8007338:	f7ff ff70 	bl	800721c <prvProcessReceivedCommands>
	for( ;; )
 800733c:	e7f6      	b.n	800732c <prvTimerTask+0x4>

0800733e <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800733e:	b140      	cbz	r0, 8007352 <pvTimerGetTimerID+0x14>
{
 8007340:	b510      	push	{r4, lr}
 8007342:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
 8007344:	f7fa fe56 	bl	8001ff4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007348:	69e4      	ldr	r4, [r4, #28]
	}
	taskEXIT_CRITICAL();
 800734a:	f7fa fe75 	bl	8002038 <vPortExitCritical>

	return pvReturn;
}
 800734e:	4620      	mov	r0, r4
 8007350:	bd10      	pop	{r4, pc}
 8007352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8007362:	e7fe      	b.n	8007362 <pvTimerGetTimerID+0x24>

08007364 <controller_timing_start>:

void update_next_event(void);

void controller_timing_start(TIM_HandleTypeDef *htim)
{
    if (htim == NULL)
 8007364:	b320      	cbz	r0, 80073b0 <controller_timing_start+0x4c>
{
 8007366:	b510      	push	{r4, lr}
        /**
         * @todo throw an error
         */
        return;
    }
    timer = htim;
 8007368:	4c12      	ldr	r4, [pc, #72]	@ (80073b4 <controller_timing_start+0x50>)
 800736a:	6020      	str	r0, [r4, #0]
    
    /**
     * This assumes that sys clock is the same as timer clock
     */
    timer->Instance->PSC = (HAL_RCC_GetSysClockFreq() / 1000000UL) - 1;
 800736c:	f7fd f972 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8007370:	4b11      	ldr	r3, [pc, #68]	@ (80073b8 <controller_timing_start+0x54>)
 8007372:	fba3 2300 	umull	r2, r3, r3, r0
 8007376:	0c9b      	lsrs	r3, r3, #18
 8007378:	6820      	ldr	r0, [r4, #0]
 800737a:	6802      	ldr	r2, [r0, #0]
 800737c:	3b01      	subs	r3, #1
 800737e:	6293      	str	r3, [r2, #40]	@ 0x28
    //timer->Instance->ARR = 100000;
    timer->Instance->EGR |= TIM_EGR_UG;  // Force an update event → immediately reloads PSC
 8007380:	6802      	ldr	r2, [r0, #0]
 8007382:	6953      	ldr	r3, [r2, #20]
 8007384:	f043 0301 	orr.w	r3, r3, #1
 8007388:	6153      	str	r3, [r2, #20]

    HAL_TIM_Base_Start_IT(timer);
 800738a:	f7fd fb7d 	bl	8004a88 <HAL_TIM_Base_Start_IT>
    HAL_TIM_OC_Start_IT(timer, TIM_CHANNEL_1);    
 800738e:	2100      	movs	r1, #0
 8007390:	6820      	ldr	r0, [r4, #0]
 8007392:	f7fd fea7 	bl	80050e4 <HAL_TIM_OC_Start_IT>

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8007396:	2300      	movs	r3, #0
 8007398:	2b13      	cmp	r3, #19
 800739a:	d808      	bhi.n	80073ae <controller_timing_start+0x4a>
    {
        event_queue[i].state = EVENT_STATE_INACTIVE;
 800739c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80073a0:	4a06      	ldr	r2, [pc, #24]	@ (80073bc <controller_timing_start+0x58>)
 80073a2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80073a6:	2100      	movs	r1, #0
 80073a8:	7411      	strb	r1, [r2, #16]
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 80073aa:	3301      	adds	r3, #1
 80073ac:	e7f4      	b.n	8007398 <controller_timing_start+0x34>
    }
    
}
 80073ae:	bd10      	pop	{r4, pc}
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20004ff0 	.word	0x20004ff0
 80073b8:	431bde83 	.word	0x431bde83
 80073bc:	20004e60 	.word	0x20004e60

080073c0 <get_time_us>:

time_us_t get_time_us(void)
{
    return timer->Instance->CNT;
 80073c0:	4b02      	ldr	r3, [pc, #8]	@ (80073cc <get_time_us+0xc>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	20004ff0 	.word	0x20004ff0

080073d0 <update_next_event>:
{
    return timer->Instance->CNT / 1000U;
}

void update_next_event(void)
{
 80073d0:	b410      	push	{r4}
    time_us_t nearest_time = 0xFFFFFFFF;
    bool found = false;

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 80073d2:	2300      	movs	r3, #0
    bool found = false;
 80073d4:	4618      	mov	r0, r3
    time_us_t nearest_time = 0xFFFFFFFF;
 80073d6:	f04f 34ff 	mov.w	r4, #4294967295
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 80073da:	e006      	b.n	80073ea <update_next_event+0x1a>
        
        /* This will handle wraparound safely aparantly, but i don't know how it works yet :( */
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
        {
            found = true;
            nearest_time = event_queue[i].timestamp_us;
 80073dc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80073e0:	008a      	lsls	r2, r1, #2
 80073e2:	4910      	ldr	r1, [pc, #64]	@ (8007424 <update_next_event+0x54>)
 80073e4:	588c      	ldr	r4, [r1, r2]
            found = true;
 80073e6:	2001      	movs	r0, #1
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 80073e8:	3301      	adds	r3, #1
 80073ea:	2b13      	cmp	r3, #19
 80073ec:	d812      	bhi.n	8007414 <update_next_event+0x44>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 80073ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80073f2:	0091      	lsls	r1, r2, #2
 80073f4:	4a0b      	ldr	r2, [pc, #44]	@ (8007424 <update_next_event+0x54>)
 80073f6:	440a      	add	r2, r1
 80073f8:	7c12      	ldrb	r2, [r2, #16]
 80073fa:	2a01      	cmp	r2, #1
 80073fc:	d1f4      	bne.n	80073e8 <update_next_event+0x18>
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
 80073fe:	2800      	cmp	r0, #0
 8007400:	d0ec      	beq.n	80073dc <update_next_event+0xc>
 8007402:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007406:	008a      	lsls	r2, r1, #2
 8007408:	4906      	ldr	r1, [pc, #24]	@ (8007424 <update_next_event+0x54>)
 800740a:	588a      	ldr	r2, [r1, r2]
 800740c:	1b12      	subs	r2, r2, r4
 800740e:	2a00      	cmp	r2, #0
 8007410:	daea      	bge.n	80073e8 <update_next_event+0x18>
 8007412:	e7e3      	b.n	80073dc <update_next_event+0xc>
        }        
    }

    if (found) {
 8007414:	b118      	cbz	r0, 800741e <update_next_event+0x4e>
        // Schedule next interrupt
        timer->Instance->CCR1 = nearest_time;
 8007416:	4b04      	ldr	r3, [pc, #16]	@ (8007428 <update_next_event+0x58>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	635c      	str	r4, [r3, #52]	@ 0x34
    } else {
        // No pending events — disable future interrupts or set a dummy compare
        /* Should i set a compare in the near future ?*/
        //timer->Instance->CCR1 = 0xFFFFFFFF;
    }
}
 800741e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	20004e60 	.word	0x20004e60
 8007428:	20004ff0 	.word	0x20004ff0

0800742c <scheduler_timer_callback>:

void scheduler_timer_callback()
{
 800742c:	b538      	push	{r3, r4, r5, lr}
    // Exit early if this wasn't a CCR1 match
    if (!(timer->Instance->SR & TIM_SR_CC1IF))
 800742e:	4b23      	ldr	r3, [pc, #140]	@ (80074bc <scheduler_timer_callback+0x90>)
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	6813      	ldr	r3, [r2, #0]
 8007434:	6919      	ldr	r1, [r3, #16]
 8007436:	f011 0f02 	tst.w	r1, #2
 800743a:	d03e      	beq.n	80074ba <scheduler_timer_callback+0x8e>
    {
        return;
    }

    timer->Instance->SR &= ~TIM_SR_CC1IF;  // Clear the compare match flag
 800743c:	6919      	ldr	r1, [r3, #16]
 800743e:	f021 0102 	bic.w	r1, r1, #2
 8007442:	6119      	str	r1, [r3, #16]
    time_us_t time_now_us = timer->Instance->CNT; // I have avoided the function call overhead here. might be minimal anyways...
 8007444:	6813      	ldr	r3, [r2, #0]
 8007446:	6a5d      	ldr	r5, [r3, #36]	@ 0x24

    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8007448:	2400      	movs	r4, #0
 800744a:	e00e      	b.n	800746a <scheduler_timer_callback+0x3e>
        {
            event_queue[i].callback_arg(event_queue[i].arg);
        }
        else
        {
            event_queue[i].callback_noarg();
 800744c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007450:	009a      	lsls	r2, r3, #2
 8007452:	4b1b      	ldr	r3, [pc, #108]	@ (80074c0 <scheduler_timer_callback+0x94>)
 8007454:	4413      	add	r3, r2
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	4798      	blx	r3
        }

        event_queue[i].state = EVENT_STATE_INACTIVE;
 800745a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800745e:	009a      	lsls	r2, r3, #2
 8007460:	4b17      	ldr	r3, [pc, #92]	@ (80074c0 <scheduler_timer_callback+0x94>)
 8007462:	4413      	add	r3, r2
 8007464:	2200      	movs	r2, #0
 8007466:	741a      	strb	r2, [r3, #16]
    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8007468:	3401      	adds	r4, #1
 800746a:	2c13      	cmp	r4, #19
 800746c:	dc23      	bgt.n	80074b6 <scheduler_timer_callback+0x8a>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 800746e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007472:	009a      	lsls	r2, r3, #2
 8007474:	4b12      	ldr	r3, [pc, #72]	@ (80074c0 <scheduler_timer_callback+0x94>)
 8007476:	4413      	add	r3, r2
 8007478:	7c1b      	ldrb	r3, [r3, #16]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d1f4      	bne.n	8007468 <scheduler_timer_callback+0x3c>
        if ((int32_t)(time_now_us - event_queue[i].timestamp_us) < 0)
 800747e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8007482:	0093      	lsls	r3, r2, #2
 8007484:	4a0e      	ldr	r2, [pc, #56]	@ (80074c0 <scheduler_timer_callback+0x94>)
 8007486:	58d3      	ldr	r3, [r2, r3]
 8007488:	1aeb      	subs	r3, r5, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	dbec      	blt.n	8007468 <scheduler_timer_callback+0x3c>
        event_queue[i].state = EVENT_STATE_ACTIVE;
 800748e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007492:	009a      	lsls	r2, r3, #2
 8007494:	4b0a      	ldr	r3, [pc, #40]	@ (80074c0 <scheduler_timer_callback+0x94>)
 8007496:	4413      	add	r3, r2
 8007498:	2202      	movs	r2, #2
 800749a:	741a      	strb	r2, [r3, #16]
        if (event_queue[i].uses_arg)
 800749c:	7c5b      	ldrb	r3, [r3, #17]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0d4      	beq.n	800744c <scheduler_timer_callback+0x20>
            event_queue[i].callback_arg(event_queue[i].arg);
 80074a2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80074a6:	fa03 f202 	lsl.w	r2, r3, r2
 80074aa:	4b05      	ldr	r3, [pc, #20]	@ (80074c0 <scheduler_timer_callback+0x94>)
 80074ac:	4413      	add	r3, r2
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	68d8      	ldr	r0, [r3, #12]
 80074b2:	4790      	blx	r2
 80074b4:	e7d1      	b.n	800745a <scheduler_timer_callback+0x2e>
    }

    update_next_event();  // Schedule the next event
 80074b6:	f7ff ff8b 	bl	80073d0 <update_next_event>
}
 80074ba:	bd38      	pop	{r3, r4, r5, pc}
 80074bc:	20004ff0 	.word	0x20004ff0
 80074c0:	20004e60 	.word	0x20004e60

080074c4 <scheduler_schedule_event_with_arg>:


bool scheduler_schedule_event_with_arg(time_us_t timestamp_us, void (*callback)(void *), void *arg)
{
    if (callback == NULL) return false;
 80074c4:	b311      	cbz	r1, 800750c <scheduler_schedule_event_with_arg+0x48>
{
 80074c6:	b510      	push	{r4, lr}
 80074c8:	460c      	mov	r4, r1

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b13      	cmp	r3, #19
 80074ce:	d81b      	bhi.n	8007508 <scheduler_schedule_event_with_arg+0x44>
        if (event_queue[i].state == EVENT_STATE_INACTIVE) {
 80074d0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80074d4:	490e      	ldr	r1, [pc, #56]	@ (8007510 <scheduler_schedule_event_with_arg+0x4c>)
 80074d6:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 80074da:	7c09      	ldrb	r1, [r1, #16]
 80074dc:	b109      	cbz	r1, 80074e2 <scheduler_schedule_event_with_arg+0x1e>
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 80074de:	3301      	adds	r3, #1
 80074e0:	e7f4      	b.n	80074cc <scheduler_schedule_event_with_arg+0x8>
            event_queue[i].timestamp_us = timestamp_us;
 80074e2:	490b      	ldr	r1, [pc, #44]	@ (8007510 <scheduler_schedule_event_with_arg+0x4c>)
 80074e4:	46e6      	mov	lr, ip
 80074e6:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80074ea:	f841 002e 	str.w	r0, [r1, lr, lsl #2]
            event_queue[i].callback_arg = callback;
 80074ee:	f8cc 4004 	str.w	r4, [ip, #4]
            event_queue[i].arg = arg;
 80074f2:	f8cc 200c 	str.w	r2, [ip, #12]
            event_queue[i].uses_arg = true;
 80074f6:	2401      	movs	r4, #1
 80074f8:	f88c 4011 	strb.w	r4, [ip, #17]
            event_queue[i].state = EVENT_STATE_PENDING;
 80074fc:	f88c 4010 	strb.w	r4, [ip, #16]

            update_next_event();
 8007500:	f7ff ff66 	bl	80073d0 <update_next_event>
            return true;
 8007504:	4620      	mov	r0, r4
        }
    }

    return false;
}
 8007506:	bd10      	pop	{r4, pc}
    return false;
 8007508:	2000      	movs	r0, #0
 800750a:	e7fc      	b.n	8007506 <scheduler_schedule_event_with_arg+0x42>
    if (callback == NULL) return false;
 800750c:	2000      	movs	r0, #0
}
 800750e:	4770      	bx	lr
 8007510:	20004e60 	.word	0x20004e60

08007514 <sensor_tps_get>:
#include "error_handling.h"
#include <math.h>
#include "utils.h"

percent_t sensor_tps_get(sensor_tps_s *sensor)
{
 8007514:	b510      	push	{r4, lr}
    if (sensor == NULL)
 8007516:	b3a0      	cbz	r0, 8007582 <sensor_tps_get+0x6e>
 8007518:	4604      	mov	r4, r0
    {
        log_error("tps is null");
        return SENSOR_TPS_FAIL_SAFE;
    }
     if (sensor->wide_open_throttle_adc_value == 0 && sensor->closed_throttle_adc_value == 0)
 800751a:	8803      	ldrh	r3, [r0, #0]
 800751c:	b90b      	cbnz	r3, 8007522 <sensor_tps_get+0xe>
 800751e:	8843      	ldrh	r3, [r0, #2]
 8007520:	b3ab      	cbz	r3, 800758e <sensor_tps_get+0x7a>
    {
        log_error("tps wrong sensor calib");
        return SENSOR_TPS_FAIL_SAFE;
    }
    percent_t result = 0;
    uint16_t raw_data = analog_inputs_get_data(sensor->analog_channel);
 8007522:	7920      	ldrb	r0, [r4, #4]
 8007524:	f7f9 fc36 	bl	8000d94 <analog_inputs_get_data>
 8007528:	ee07 0a90 	vmov	s15, r0
    if (sensor->is_inverted)
 800752c:	7963      	ldrb	r3, [r4, #5]
 800752e:	b3a3      	cbz	r3, 800759a <sensor_tps_get+0x86>
    {
        result = mapf((float)raw_data, (float)sensor->wide_open_throttle_adc_value, (float)sensor->closed_throttle_adc_value, (float)0, (float)100);
 8007530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007534:	8822      	ldrh	r2, [r4, #0]
 8007536:	ee07 2a10 	vmov	s14, r2
 800753a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800753e:	8863      	ldrh	r3, [r4, #2]
 8007540:	ee07 3a10 	vmov	s14, r3
 8007544:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (in_max == in_min)
 8007548:	429a      	cmp	r2, r3
 800754a:	d043      	beq.n	80075d4 <sensor_tps_get+0xc0>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800754c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007550:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 80075ec <sensor_tps_get+0xd8>
 8007554:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007558:	ee37 7a66 	vsub.f32	s14, s14, s13
 800755c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8007560:	eddf 7a23 	vldr	s15, [pc, #140]	@ 80075f0 <sensor_tps_get+0xdc>
 8007564:	ee30 0a27 	vadd.f32	s0, s0, s15
    }
    else
    {
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
    }
    if (!IS_IN_RANGE(result, (percent_t)0, (percent_t)100))
 8007568:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800756c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007570:	db36      	blt.n	80075e0 <sensor_tps_get+0xcc>
 8007572:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80075ec <sensor_tps_get+0xd8>
 8007576:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800757a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800757e:	d832      	bhi.n	80075e6 <sensor_tps_get+0xd2>
    {
        return SENSOR_TPS_FAIL_SAFE;
        log_error("tps out of range!");
    }
    return result;
 8007580:	bd10      	pop	{r4, pc}
        log_error("tps is null");
 8007582:	481c      	ldr	r0, [pc, #112]	@ (80075f4 <sensor_tps_get+0xe0>)
 8007584:	f7f9 ffa8 	bl	80014d8 <log_error>
        return SENSOR_TPS_FAIL_SAFE;
 8007588:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 80075f8 <sensor_tps_get+0xe4>
 800758c:	e7f8      	b.n	8007580 <sensor_tps_get+0x6c>
        log_error("tps wrong sensor calib");
 800758e:	481b      	ldr	r0, [pc, #108]	@ (80075fc <sensor_tps_get+0xe8>)
 8007590:	f7f9 ffa2 	bl	80014d8 <log_error>
        return SENSOR_TPS_FAIL_SAFE;
 8007594:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80075f8 <sensor_tps_get+0xe4>
 8007598:	e7f2      	b.n	8007580 <sensor_tps_get+0x6c>
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759e:	8862      	ldrh	r2, [r4, #2]
 80075a0:	ee07 2a10 	vmov	s14, r2
 80075a4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80075a8:	8823      	ldrh	r3, [r4, #0]
 80075aa:	ee07 3a10 	vmov	s14, r3
 80075ae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (in_max == in_min)
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d011      	beq.n	80075da <sensor_tps_get+0xc6>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80075b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075ba:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 80075ec <sensor_tps_get+0xd8>
 80075be:	ee67 7a86 	vmul.f32	s15, s15, s12
 80075c2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80075c6:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80075ca:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80075f0 <sensor_tps_get+0xdc>
 80075ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80075d2:	e7c9      	b.n	8007568 <sensor_tps_get+0x54>
        result = mapf((float)raw_data, (float)sensor->wide_open_throttle_adc_value, (float)sensor->closed_throttle_adc_value, (float)0, (float)100);
 80075d4:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80075f0 <sensor_tps_get+0xdc>
 80075d8:	e7cb      	b.n	8007572 <sensor_tps_get+0x5e>
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
 80075da:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 80075f0 <sensor_tps_get+0xdc>
 80075de:	e7c8      	b.n	8007572 <sensor_tps_get+0x5e>
        return SENSOR_TPS_FAIL_SAFE;
 80075e0:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 80075f8 <sensor_tps_get+0xe4>
 80075e4:	e7cc      	b.n	8007580 <sensor_tps_get+0x6c>
 80075e6:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 80075f8 <sensor_tps_get+0xe4>
 80075ea:	e7c9      	b.n	8007580 <sensor_tps_get+0x6c>
 80075ec:	42c80000 	.word	0x42c80000
 80075f0:	00000000 	.word	0x00000000
 80075f4:	08009d04 	.word	0x08009d04
 80075f8:	7fc00000 	.word	0x7fc00000
 80075fc:	08009d10 	.word	0x08009d10

08007600 <set_filtering>:

trigger_s *trigger = NULL;

void set_filtering(trigger_s *trigger)
{
  switch (configuration.trigger.filtering)
 8007600:	4b0d      	ldr	r3, [pc, #52]	@ (8007638 <set_filtering+0x38>)
 8007602:	789b      	ldrb	r3, [r3, #2]
 8007604:	2b03      	cmp	r3, #3
 8007606:	d813      	bhi.n	8007630 <set_filtering+0x30>
 8007608:	e8df f003 	tbb	[pc, r3]
 800760c:	0c090502 	.word	0x0c090502
  {
    case TF_FILTERING_NONE:
      trigger->_trigger_filter_time_us = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	6043      	str	r3, [r0, #4]
        break;
 8007614:	4770      	bx	lr
    case TF_FILTERING_LITE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 4U; 
 8007616:	6943      	ldr	r3, [r0, #20]
 8007618:	089b      	lsrs	r3, r3, #2
 800761a:	6043      	str	r3, [r0, #4]
        break;
 800761c:	4770      	bx	lr
    case TF_FILTERING_MEDIUM:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 1U;
 800761e:	6943      	ldr	r3, [r0, #20]
 8007620:	6043      	str	r3, [r0, #4]
        break;
 8007622:	4770      	bx	lr
    case TF_FILTERING_AGGRESSIVE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us * 3 / 4;
 8007624:	6943      	ldr	r3, [r0, #20]
 8007626:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800762a:	089b      	lsrs	r3, r3, #2
 800762c:	6043      	str	r3, [r0, #4]
        break;
 800762e:	4770      	bx	lr
    default:
        // Handle invalid filtering level
        trigger->_trigger_filter_time_us = 0;
 8007630:	2300      	movs	r3, #0
 8007632:	6043      	str	r3, [r0, #4]
        break;
  }
}
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	2000099c 	.word	0x2000099c

0800763c <trigger_init>:

void trigger_init(trigger_s *instance)
{   
  bool temp_status = true;
  if (instance == NULL)
 800763c:	b1b8      	cbz	r0, 800766e <trigger_init+0x32>
{   
 800763e:	b510      	push	{r4, lr}
    /**
     * @todo and maybe throw an error!
     */
    return;
  }
  trigger = instance;
 8007640:	4c0b      	ldr	r4, [pc, #44]	@ (8007670 <trigger_init+0x34>)
 8007642:	6020      	str	r0, [r4, #0]
  
  trigger->sync_status = TS_NOT_SYNCED;
 8007644:	2200      	movs	r2, #0
 8007646:	7042      	strb	r2, [r0, #1]
  set_filtering(trigger);
 8007648:	6820      	ldr	r0, [r4, #0]
 800764a:	f7ff ffd9 	bl	8007600 <set_filtering>
  trigger->_trigger_actual_teeth = configuration.trigger.full_teeth - configuration.trigger.missing_teeth;
 800764e:	4b09      	ldr	r3, [pc, #36]	@ (8007674 <trigger_init+0x38>)
 8007650:	78da      	ldrb	r2, [r3, #3]
 8007652:	7919      	ldrb	r1, [r3, #4]
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	1a50      	subs	r0, r2, r1
 8007658:	f883 0022 	strb.w	r0, [r3, #34]	@ 0x22
    
  if (configuration.trigger.full_teeth == 0 || configuration.trigger.missing_teeth == 0)
 800765c:	b112      	cbz	r2, 8007664 <trigger_init+0x28>
 800765e:	b121      	cbz	r1, 800766a <trigger_init+0x2e>
  bool temp_status = true;
 8007660:	2201      	movs	r2, #1
 8007662:	e000      	b.n	8007666 <trigger_init+0x2a>
  {
    temp_status = false;
 8007664:	2200      	movs	r2, #0
  }
  trigger->initialized = temp_status;
 8007666:	701a      	strb	r2, [r3, #0]
    
}
 8007668:	bd10      	pop	{r4, pc}
    temp_status = false;
 800766a:	2200      	movs	r2, #0
 800766c:	e7fb      	b.n	8007666 <trigger_init+0x2a>
 800766e:	4770      	bx	lr
 8007670:	20004ff4 	.word	0x20004ff4
 8007674:	2000099c 	.word	0x2000099c

08007678 <crankshaft_get_rpm>:


rpm_t crankshaft_get_rpm()
{
  return engine.rpm;
}
 8007678:	4b01      	ldr	r3, [pc, #4]	@ (8007680 <crankshaft_get_rpm+0x8>)
 800767a:	ed93 0a03 	vldr	s0, [r3, #12]
 800767e:	4770      	bx	lr
 8007680:	2000095c 	.word	0x2000095c

08007684 <crankshaft_get_angle>:
 * @note angle is updated on every trigger event!
 */
angle_t crankshaft_get_angle()
{
  return engine.crankshaft_angle;
}
 8007684:	4b01      	ldr	r3, [pc, #4]	@ (800768c <crankshaft_get_angle+0x8>)
 8007686:	ed93 0a01 	vldr	s0, [r3, #4]
 800768a:	4770      	bx	lr
 800768c:	2000095c 	.word	0x2000095c

08007690 <trigger_tooth_handle>:
{
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	ed2d 8b02 	vpush	{d8}
  if (!trigger->initialized)
 8007696:	4b5a      	ldr	r3, [pc, #360]	@ (8007800 <trigger_tooth_handle+0x170>)
 8007698:	681c      	ldr	r4, [r3, #0]
 800769a:	7825      	ldrb	r5, [r4, #0]
 800769c:	b915      	cbnz	r5, 80076a4 <trigger_tooth_handle+0x14>
}
 800769e:	ecbd 8b02 	vpop	{d8}
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
  trigger->_tooth_time_us[0] = get_time_us();
 80076a4:	f7ff fe8c 	bl	80073c0 <get_time_us>
 80076a8:	60a0      	str	r0, [r4, #8]
  trigger->_current_tooth_gap_us = trigger->_tooth_time_us[0] - trigger->_tooth_time_us[1];
 80076aa:	4b55      	ldr	r3, [pc, #340]	@ (8007800 <trigger_tooth_handle+0x170>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	68d8      	ldr	r0, [r3, #12]
 80076b2:	1a12      	subs	r2, r2, r0
 80076b4:	615a      	str	r2, [r3, #20]
  if (trigger->_current_tooth_gap_us < trigger->_trigger_filter_time_us) // Pulses should never be less than _trigger_filter_time_us, so if they are it means a false trigger. (A 36-1 wheel at 8000rpm will have triggers approx. every 200uS)
 80076b6:	6859      	ldr	r1, [r3, #4]
 80076b8:	428a      	cmp	r2, r1
 80076ba:	d3f0      	bcc.n	800769e <trigger_tooth_handle+0xe>
  trigger->_counted_tooth++; //Increment the tooth counter
 80076bc:	8c19      	ldrh	r1, [r3, #32]
 80076be:	3101      	adds	r1, #1
 80076c0:	b289      	uxth	r1, r1
 80076c2:	8419      	strh	r1, [r3, #32]
  previous_tooth_gap = trigger->_tooth_time_us[1] - trigger->_tooth_time_us[2];
 80076c4:	691c      	ldr	r4, [r3, #16]
 80076c6:	1b00      	subs	r0, r0, r4
  if (previous_tooth_gap < trigger->_current_tooth_gap_us) 
 80076c8:	4282      	cmp	r2, r0
 80076ca:	d965      	bls.n	8007798 <trigger_tooth_handle+0x108>
    trigger->_shorter_tooth_gap = previous_tooth_gap;
 80076cc:	6198      	str	r0, [r3, #24]
  if(configuration.trigger.missing_teeth == 1)
 80076ce:	484d      	ldr	r0, [pc, #308]	@ (8007804 <trigger_tooth_handle+0x174>)
 80076d0:	7900      	ldrb	r0, [r0, #4]
 80076d2:	2801      	cmp	r0, #1
 80076d4:	d062      	beq.n	800779c <trigger_tooth_handle+0x10c>
    trigger->_target_tooth_gap_us = trigger->_shorter_tooth_gap * configuration.trigger.missing_teeth;
 80076d6:	699c      	ldr	r4, [r3, #24]
 80076d8:	fb00 f404 	mul.w	r4, r0, r4
 80076dc:	61dc      	str	r4, [r3, #28]
  if ((trigger->_current_tooth_gap_us > trigger->_target_tooth_gap_us) || (trigger->_counted_tooth > trigger->_trigger_actual_teeth))
 80076de:	69d8      	ldr	r0, [r3, #28]
 80076e0:	4282      	cmp	r2, r0
 80076e2:	d803      	bhi.n	80076ec <trigger_tooth_handle+0x5c>
 80076e4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80076e8:	4291      	cmp	r1, r2
 80076ea:	d968      	bls.n	80077be <trigger_tooth_handle+0x12e>
    if (trigger->_counted_tooth < trigger->_trigger_actual_teeth)
 80076ec:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80076f0:	4291      	cmp	r1, r2
 80076f2:	d259      	bcs.n	80077a8 <trigger_tooth_handle+0x118>
      trigger->sync_status = TS_NOT_SYNCED;
 80076f4:	2200      	movs	r2, #0
 80076f6:	705a      	strb	r2, [r3, #1]
      trigger->sync_loss_counter++;
 80076f8:	4941      	ldr	r1, [pc, #260]	@ (8007800 <trigger_tooth_handle+0x170>)
 80076fa:	6808      	ldr	r0, [r1, #0]
 80076fc:	8843      	ldrh	r3, [r0, #2]
 80076fe:	3301      	adds	r3, #1
 8007700:	8043      	strh	r3, [r0, #2]
      engine.total_revolutions = 0;
 8007702:	4b41      	ldr	r3, [pc, #260]	@ (8007808 <trigger_tooth_handle+0x178>)
 8007704:	601a      	str	r2, [r3, #0]
      engine.rpm = 0;
 8007706:	2000      	movs	r0, #0
 8007708:	60d8      	str	r0, [r3, #12]
      trigger->_counted_tooth = 0;
 800770a:	680b      	ldr	r3, [r1, #0]
 800770c:	841a      	strh	r2, [r3, #32]
  engine.crankshaft_angle = 360.0f / (angle_t)configuration.trigger.full_teeth * (angle_t)trigger->_counted_tooth;
 800770e:	4b3d      	ldr	r3, [pc, #244]	@ (8007804 <trigger_tooth_handle+0x174>)
 8007710:	78d9      	ldrb	r1, [r3, #3]
 8007712:	ee07 1a90 	vmov	s15, r1
 8007716:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800771a:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 800780c <trigger_tooth_handle+0x17c>
 800771e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007722:	4b37      	ldr	r3, [pc, #220]	@ (8007800 <trigger_tooth_handle+0x170>)
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	8c03      	ldrh	r3, [r0, #32]
 8007728:	ee07 3a10 	vmov	s14, r3
 800772c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007734:	4a34      	ldr	r2, [pc, #208]	@ (8007808 <trigger_tooth_handle+0x178>)
 8007736:	edc2 7a01 	vstr	s15, [r2, #4]
  engine.rpm = (rpm_t)(CONVERSION_FACTOR_SECONDS_TO_MICROSECONDS * CONVERSION_FACTOR_MINUTES_TO_SECONDS / trigger->_shorter_tooth_gap / configuration.trigger.full_teeth);
 800773a:	6984      	ldr	r4, [r0, #24]
 800773c:	4b34      	ldr	r3, [pc, #208]	@ (8007810 <trigger_tooth_handle+0x180>)
 800773e:	fbb3 f3f4 	udiv	r3, r3, r4
 8007742:	fbb3 f3f1 	udiv	r3, r3, r1
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774e:	edc2 7a03 	vstr	s15, [r2, #12]
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= configuration.cranking_rpm_threshold)
 8007752:	7843      	ldrb	r3, [r0, #1]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d034      	beq.n	80077c2 <trigger_tooth_handle+0x132>
  else if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < configuration.cranking_rpm_threshold)
 8007758:	2b01      	cmp	r3, #1
 800775a:	d03e      	beq.n	80077da <trigger_tooth_handle+0x14a>
  else if (trigger->sync_status == TS_NOT_SYNCED)
 800775c:	2b00      	cmp	r3, #0
 800775e:	d148      	bne.n	80077f2 <trigger_tooth_handle+0x162>
    engine.spinning_state = SS_SPINNING_UP;
 8007760:	4b29      	ldr	r3, [pc, #164]	@ (8007808 <trigger_tooth_handle+0x178>)
 8007762:	2201      	movs	r2, #1
 8007764:	745a      	strb	r2, [r3, #17]
  if(is_missing_teeth == false)
 8007766:	2d00      	cmp	r5, #0
 8007768:	d047      	beq.n	80077fa <trigger_tooth_handle+0x16a>
  trigger->_tooth_time_us[2] = trigger->_tooth_time_us[1];
 800776a:	4b25      	ldr	r3, [pc, #148]	@ (8007800 <trigger_tooth_handle+0x170>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	611a      	str	r2, [r3, #16]
  trigger->_tooth_time_us[1] = trigger->_tooth_time_us[0];
 8007772:	689a      	ldr	r2, [r3, #8]
 8007774:	60da      	str	r2, [r3, #12]
  ignition_trigger_event_handle(crankshaft_get_angle(), crankshaft_get_rpm(), get_time_us());
 8007776:	f7ff ff85 	bl	8007684 <crankshaft_get_angle>
 800777a:	eeb0 8a40 	vmov.f32	s16, s0
 800777e:	f7ff ff7b 	bl	8007678 <crankshaft_get_rpm>
 8007782:	eef0 8a40 	vmov.f32	s17, s0
 8007786:	f7ff fe1b 	bl	80073c0 <get_time_us>
 800778a:	eef0 0a68 	vmov.f32	s1, s17
 800778e:	eeb0 0a48 	vmov.f32	s0, s16
 8007792:	f7fa f9a7 	bl	8001ae4 <ignition_trigger_event_handle>
 8007796:	e782      	b.n	800769e <trigger_tooth_handle+0xe>
    trigger->_shorter_tooth_gap = trigger->_current_tooth_gap_us;
 8007798:	619a      	str	r2, [r3, #24]
 800779a:	e798      	b.n	80076ce <trigger_tooth_handle+0x3e>
    trigger->_target_tooth_gap_us = (3 * trigger->_shorter_tooth_gap) >> 1; 
 800779c:	6998      	ldr	r0, [r3, #24]
 800779e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80077a2:	0840      	lsrs	r0, r0, #1
 80077a4:	61d8      	str	r0, [r3, #28]
 80077a6:	e79a      	b.n	80076de <trigger_tooth_handle+0x4e>
      trigger->sync_status = TS_FULLY_SYNCED;
 80077a8:	2201      	movs	r2, #1
 80077aa:	705a      	strb	r2, [r3, #1]
      engine.total_revolutions++;
 80077ac:	4a16      	ldr	r2, [pc, #88]	@ (8007808 <trigger_tooth_handle+0x178>)
 80077ae:	6813      	ldr	r3, [r2, #0]
 80077b0:	3301      	adds	r3, #1
 80077b2:	6013      	str	r3, [r2, #0]
      trigger->_counted_tooth = 0;
 80077b4:	4b12      	ldr	r3, [pc, #72]	@ (8007800 <trigger_tooth_handle+0x170>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2200      	movs	r2, #0
 80077ba:	841a      	strh	r2, [r3, #32]
 80077bc:	e7a7      	b.n	800770e <trigger_tooth_handle+0x7e>
  bool is_missing_teeth = false;
 80077be:	2500      	movs	r5, #0
 80077c0:	e7a5      	b.n	800770e <trigger_tooth_handle+0x7e>
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= configuration.cranking_rpm_threshold)
 80077c2:	4a10      	ldr	r2, [pc, #64]	@ (8007804 <trigger_tooth_handle+0x174>)
 80077c4:	ed92 7a02 	vldr	s14, [r2, #8]
 80077c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d0:	dbc2      	blt.n	8007758 <trigger_tooth_handle+0xc8>
    engine.spinning_state = SS_RUNNING;
 80077d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007808 <trigger_tooth_handle+0x178>)
 80077d4:	2203      	movs	r2, #3
 80077d6:	745a      	strb	r2, [r3, #17]
 80077d8:	e7c5      	b.n	8007766 <trigger_tooth_handle+0xd6>
  else if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < configuration.cranking_rpm_threshold)
 80077da:	4a0a      	ldr	r2, [pc, #40]	@ (8007804 <trigger_tooth_handle+0x174>)
 80077dc:	ed92 7a02 	vldr	s14, [r2, #8]
 80077e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e8:	d5b8      	bpl.n	800775c <trigger_tooth_handle+0xcc>
    engine.spinning_state = SS_CRANKING;
 80077ea:	4b07      	ldr	r3, [pc, #28]	@ (8007808 <trigger_tooth_handle+0x178>)
 80077ec:	2202      	movs	r2, #2
 80077ee:	745a      	strb	r2, [r3, #17]
 80077f0:	e7b9      	b.n	8007766 <trigger_tooth_handle+0xd6>
    engine.spinning_state = SS_STOPPED;
 80077f2:	4b05      	ldr	r3, [pc, #20]	@ (8007808 <trigger_tooth_handle+0x178>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	745a      	strb	r2, [r3, #17]
 80077f8:	e7b5      	b.n	8007766 <trigger_tooth_handle+0xd6>
    set_filtering(trigger); 
 80077fa:	f7ff ff01 	bl	8007600 <set_filtering>
 80077fe:	e7b4      	b.n	800776a <trigger_tooth_handle+0xda>
 8007800:	20004ff4 	.word	0x20004ff4
 8007804:	2000099c 	.word	0x2000099c
 8007808:	2000095c 	.word	0x2000095c
 800780c:	43b40000 	.word	0x43b40000
 8007810:	03938700 	.word	0x03938700

08007814 <trigger_simulator_init>:
uint8_t wheel_missing_teeth = 0;
void (*wheel_callback)(void) = NULL;

void trigger_simulator_init(uint8_t full_teeth, uint8_t missing_teeth, void (*callback)(void))
{
    wheel_full_teeth = full_teeth;
 8007814:	4b03      	ldr	r3, [pc, #12]	@ (8007824 <trigger_simulator_init+0x10>)
 8007816:	7018      	strb	r0, [r3, #0]
    wheel_missing_teeth = missing_teeth;
 8007818:	4b03      	ldr	r3, [pc, #12]	@ (8007828 <trigger_simulator_init+0x14>)
 800781a:	7019      	strb	r1, [r3, #0]
    wheel_callback = callback;
 800781c:	4b03      	ldr	r3, [pc, #12]	@ (800782c <trigger_simulator_init+0x18>)
 800781e:	601a      	str	r2, [r3, #0]
}
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	20005005 	.word	0x20005005
 8007828:	20005004 	.word	0x20005004
 800782c:	20005000 	.word	0x20005000

08007830 <trigger_simulator_update>:

void trigger_simulator_update(rpm_t rpm)
{
    if (wheel_callback == NULL)
 8007830:	4b20      	ldr	r3, [pc, #128]	@ (80078b4 <trigger_simulator_update+0x84>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d03c      	beq.n	80078b2 <trigger_simulator_update+0x82>
{
 8007838:	b510      	push	{r4, lr}
    if (rpm == 0)
 800783a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800783e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007842:	d030      	beq.n	80078a6 <trigger_simulator_update+0x76>
    return (time_us_t) 60.0f * 1e6f / (rpm * 360.0f);
 8007844:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80078b8 <trigger_simulator_update+0x88>
 8007848:	ee20 0a27 	vmul.f32	s0, s0, s15
 800784c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80078bc <trigger_simulator_update+0x8c>
 8007850:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007858:	ee17 4a90 	vmov	r4, s15
    {
        return;
    }

    time_us_t tooth_interval = microseconds_per_degree(rpm) * 360 / wheel_full_teeth;
 800785c:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8007860:	fb03 f404 	mul.w	r4, r3, r4
 8007864:	4b16      	ldr	r3, [pc, #88]	@ (80078c0 <trigger_simulator_update+0x90>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	fbb4 f4f3 	udiv	r4, r4, r3

    time_us_t current_time = get_time_us();
 800786c:	f7ff fda8 	bl	80073c0 <get_time_us>
    static time_us_t prev_time = 0;

    if ((int32_t)(current_time - prev_time) < tooth_interval)
 8007870:	4b14      	ldr	r3, [pc, #80]	@ (80078c4 <trigger_simulator_update+0x94>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	1ac3      	subs	r3, r0, r3
 8007876:	42a3      	cmp	r3, r4
 8007878:	d314      	bcc.n	80078a4 <trigger_simulator_update+0x74>
    {
        return;
    }
    prev_time = current_time;
 800787a:	4b12      	ldr	r3, [pc, #72]	@ (80078c4 <trigger_simulator_update+0x94>)
 800787c:	6018      	str	r0, [r3, #0]
    
    static uint8_t current_tooth_index = 0;

    if (current_tooth_index < wheel_missing_teeth)
 800787e:	4b12      	ldr	r3, [pc, #72]	@ (80078c8 <trigger_simulator_update+0x98>)
 8007880:	781a      	ldrb	r2, [r3, #0]
 8007882:	4b12      	ldr	r3, [pc, #72]	@ (80078cc <trigger_simulator_update+0x9c>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	429a      	cmp	r2, r3
 8007888:	d302      	bcc.n	8007890 <trigger_simulator_update+0x60>
    {
        // welll do nothing!
    }
    else
    {
        wheel_callback();
 800788a:	4b0a      	ldr	r3, [pc, #40]	@ (80078b4 <trigger_simulator_update+0x84>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4798      	blx	r3
    }
    

    if (current_tooth_index < (wheel_full_teeth - 1))
 8007890:	4b0d      	ldr	r3, [pc, #52]	@ (80078c8 <trigger_simulator_update+0x98>)
 8007892:	781a      	ldrb	r2, [r3, #0]
 8007894:	4b0a      	ldr	r3, [pc, #40]	@ (80078c0 <trigger_simulator_update+0x90>)
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	3b01      	subs	r3, #1
 800789a:	429a      	cmp	r2, r3
 800789c:	da05      	bge.n	80078aa <trigger_simulator_update+0x7a>
    {
        current_tooth_index++;
 800789e:	3201      	adds	r2, #1
 80078a0:	4b09      	ldr	r3, [pc, #36]	@ (80078c8 <trigger_simulator_update+0x98>)
 80078a2:	701a      	strb	r2, [r3, #0]
    {
        current_tooth_index = 0;
    }


}
 80078a4:	bd10      	pop	{r4, pc}
        return 0;
 80078a6:	2400      	movs	r4, #0
 80078a8:	e7d8      	b.n	800785c <trigger_simulator_update+0x2c>
        current_tooth_index = 0;
 80078aa:	4b07      	ldr	r3, [pc, #28]	@ (80078c8 <trigger_simulator_update+0x98>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	701a      	strb	r2, [r3, #0]
 80078b0:	e7f8      	b.n	80078a4 <trigger_simulator_update+0x74>
 80078b2:	4770      	bx	lr
 80078b4:	20005000 	.word	0x20005000
 80078b8:	43b40000 	.word	0x43b40000
 80078bc:	4c64e1c0 	.word	0x4c64e1c0
 80078c0:	20005005 	.word	0x20005005
 80078c4:	20004ffc 	.word	0x20004ffc
 80078c8:	20004ff8 	.word	0x20004ff8
 80078cc:	20005004 	.word	0x20005004

080078d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078d2:	2200      	movs	r2, #0
 80078d4:	490f      	ldr	r1, [pc, #60]	@ (8007914 <MX_USB_DEVICE_Init+0x44>)
 80078d6:	4810      	ldr	r0, [pc, #64]	@ (8007918 <MX_USB_DEVICE_Init+0x48>)
 80078d8:	f000 fc32 	bl	8008140 <USBD_Init>
 80078dc:	b970      	cbnz	r0, 80078fc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078de:	490f      	ldr	r1, [pc, #60]	@ (800791c <MX_USB_DEVICE_Init+0x4c>)
 80078e0:	480d      	ldr	r0, [pc, #52]	@ (8007918 <MX_USB_DEVICE_Init+0x48>)
 80078e2:	f000 fc44 	bl	800816e <USBD_RegisterClass>
 80078e6:	b960      	cbnz	r0, 8007902 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80078e8:	490d      	ldr	r1, [pc, #52]	@ (8007920 <MX_USB_DEVICE_Init+0x50>)
 80078ea:	480b      	ldr	r0, [pc, #44]	@ (8007918 <MX_USB_DEVICE_Init+0x48>)
 80078ec:	f000 fa39 	bl	8007d62 <USBD_CDC_RegisterInterface>
 80078f0:	b950      	cbnz	r0, 8007908 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078f2:	4809      	ldr	r0, [pc, #36]	@ (8007918 <MX_USB_DEVICE_Init+0x48>)
 80078f4:	f000 fc5b 	bl	80081ae <USBD_Start>
 80078f8:	b948      	cbnz	r0, 800790e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078fa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80078fc:	f7fa fa0a 	bl	8001d14 <Error_Handler>
 8007900:	e7ed      	b.n	80078de <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8007902:	f7fa fa07 	bl	8001d14 <Error_Handler>
 8007906:	e7ef      	b.n	80078e8 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8007908:	f7fa fa04 	bl	8001d14 <Error_Handler>
 800790c:	e7f1      	b.n	80078f2 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800790e:	f7fa fa01 	bl	8001d14 <Error_Handler>
}
 8007912:	e7f2      	b.n	80078fa <MX_USB_DEVICE_Init+0x2a>
 8007914:	20000128 	.word	0x20000128
 8007918:	20005008 	.word	0x20005008
 800791c:	2000009c 	.word	0x2000009c
 8007920:	200000e0 	.word	0x200000e0

08007924 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007924:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007926:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800792a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800792e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 8007932:	b18c      	cbz	r4, 8007958 <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007934:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007938:	6843      	ldr	r3, [r0, #4]
 800793a:	b17b      	cbz	r3, 800795c <USBD_CDC_EP0_RxReady+0x38>
 800793c:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8007940:	28ff      	cmp	r0, #255	@ 0xff
 8007942:	d00d      	beq.n	8007960 <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800794a:	4621      	mov	r1, r4
 800794c:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800794e:	23ff      	movs	r3, #255	@ 0xff
 8007950:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007954:	2000      	movs	r0, #0
}
 8007956:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8007958:	2003      	movs	r0, #3
 800795a:	e7fc      	b.n	8007956 <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 800795c:	2000      	movs	r0, #0
 800795e:	e7fa      	b.n	8007956 <USBD_CDC_EP0_RxReady+0x32>
 8007960:	2000      	movs	r0, #0
 8007962:	e7f8      	b.n	8007956 <USBD_CDC_EP0_RxReady+0x32>

08007964 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007964:	230a      	movs	r3, #10
 8007966:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8007968:	4800      	ldr	r0, [pc, #0]	@ (800796c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800796a:	4770      	bx	lr
 800796c:	200000d4 	.word	0x200000d4

08007970 <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 8007970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007972:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007974:	4f0f      	ldr	r7, [pc, #60]	@ (80079b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8007976:	2182      	movs	r1, #130	@ 0x82
 8007978:	4638      	mov	r0, r7
 800797a:	f000 fdcb 	bl	8008514 <USBD_GetEpDesc>
 800797e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007980:	2101      	movs	r1, #1
 8007982:	4638      	mov	r0, r7
 8007984:	f000 fdc6 	bl	8008514 <USBD_GetEpDesc>
 8007988:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800798a:	2181      	movs	r1, #129	@ 0x81
 800798c:	4638      	mov	r0, r7
 800798e:	f000 fdc1 	bl	8008514 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8007992:	b10d      	cbz	r5, 8007998 <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007994:	2210      	movs	r2, #16
 8007996:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8007998:	b11c      	cbz	r4, 80079a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800799a:	2240      	movs	r2, #64	@ 0x40
 800799c:	7122      	strb	r2, [r4, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80079a2:	b118      	cbz	r0, 80079ac <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079a4:	2240      	movs	r2, #64	@ 0x40
 80079a6:	7102      	strb	r2, [r0, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079ac:	2343      	movs	r3, #67	@ 0x43
 80079ae:	8033      	strh	r3, [r6, #0]
}
 80079b0:	4800      	ldr	r0, [pc, #0]	@ (80079b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80079b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b4:	20000058 	.word	0x20000058

080079b8 <USBD_CDC_GetFSCfgDesc>:
{
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80079bc:	4f0f      	ldr	r7, [pc, #60]	@ (80079fc <USBD_CDC_GetFSCfgDesc+0x44>)
 80079be:	2182      	movs	r1, #130	@ 0x82
 80079c0:	4638      	mov	r0, r7
 80079c2:	f000 fda7 	bl	8008514 <USBD_GetEpDesc>
 80079c6:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80079c8:	2101      	movs	r1, #1
 80079ca:	4638      	mov	r0, r7
 80079cc:	f000 fda2 	bl	8008514 <USBD_GetEpDesc>
 80079d0:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079d2:	2181      	movs	r1, #129	@ 0x81
 80079d4:	4638      	mov	r0, r7
 80079d6:	f000 fd9d 	bl	8008514 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80079da:	b10d      	cbz	r5, 80079e0 <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80079dc:	2210      	movs	r2, #16
 80079de:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80079e0:	b11c      	cbz	r4, 80079ea <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079e2:	2240      	movs	r2, #64	@ 0x40
 80079e4:	7122      	strb	r2, [r4, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80079ea:	b118      	cbz	r0, 80079f4 <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079ec:	2240      	movs	r2, #64	@ 0x40
 80079ee:	7102      	strb	r2, [r0, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079f4:	2343      	movs	r3, #67	@ 0x43
 80079f6:	8033      	strh	r3, [r6, #0]
}
 80079f8:	4800      	ldr	r0, [pc, #0]	@ (80079fc <USBD_CDC_GetFSCfgDesc+0x44>)
 80079fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079fc:	20000058 	.word	0x20000058

08007a00 <USBD_CDC_GetHSCfgDesc>:
{
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a04:	4f0f      	ldr	r7, [pc, #60]	@ (8007a44 <USBD_CDC_GetHSCfgDesc+0x44>)
 8007a06:	2182      	movs	r1, #130	@ 0x82
 8007a08:	4638      	mov	r0, r7
 8007a0a:	f000 fd83 	bl	8008514 <USBD_GetEpDesc>
 8007a0e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a10:	2101      	movs	r1, #1
 8007a12:	4638      	mov	r0, r7
 8007a14:	f000 fd7e 	bl	8008514 <USBD_GetEpDesc>
 8007a18:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a1a:	2181      	movs	r1, #129	@ 0x81
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	f000 fd79 	bl	8008514 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8007a22:	b10d      	cbz	r5, 8007a28 <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007a24:	2210      	movs	r2, #16
 8007a26:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8007a28:	b11c      	cbz	r4, 8007a32 <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	7122      	strb	r2, [r4, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8007a32:	b118      	cbz	r0, 8007a3c <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a34:	2200      	movs	r2, #0
 8007a36:	7102      	strb	r2, [r0, #4]
 8007a38:	2202      	movs	r2, #2
 8007a3a:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a3c:	2343      	movs	r3, #67	@ 0x43
 8007a3e:	8033      	strh	r3, [r6, #0]
}
 8007a40:	4800      	ldr	r0, [pc, #0]	@ (8007a44 <USBD_CDC_GetHSCfgDesc+0x44>)
 8007a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a44:	20000058 	.word	0x20000058

08007a48 <USBD_CDC_DataOut>:
{
 8007a48:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a4a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007a4e:	33b0      	adds	r3, #176	@ 0xb0
 8007a50:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a54:	b195      	cbz	r5, 8007a7c <USBD_CDC_DataOut+0x34>
 8007a56:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007a58:	f000 fb1a 	bl	8008090 <USBD_LL_GetRxDataSize>
 8007a5c:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007a60:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8007a64:	33b0      	adds	r3, #176	@ 0xb0
 8007a66:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007a6a:	6863      	ldr	r3, [r4, #4]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8007a72:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8007a76:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8007a78:	2000      	movs	r0, #0
}
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8007a7c:	2003      	movs	r0, #3
 8007a7e:	e7fc      	b.n	8007a7a <USBD_CDC_DataOut+0x32>

08007a80 <USBD_CDC_DataIn>:
{
 8007a80:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007a82:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a86:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007a8a:	33b0      	adds	r3, #176	@ 0xb0
 8007a8c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8007a90:	b384      	cbz	r4, 8007af4 <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007a92:	f001 030f 	and.w	r3, r1, #15
 8007a96:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007a9a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007a9e:	6992      	ldr	r2, [r2, #24]
 8007aa0:	b14a      	cbz	r2, 8007ab6 <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007aa2:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 8007aa6:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8007aaa:	69ed      	ldr	r5, [r5, #28]
 8007aac:	fbb2 fcf5 	udiv	ip, r2, r5
 8007ab0:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ab4:	b192      	cbz	r2, 8007adc <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007abc:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007ac0:	33b0      	adds	r3, #176	@ 0xb0
 8007ac2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007ac6:	6843      	ldr	r3, [r0, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	b1ab      	cbz	r3, 8007af8 <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007acc:	460a      	mov	r2, r1
 8007ace:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 8007ad2:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 8007ad6:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8007ad8:	2000      	movs	r0, #0
}
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007adc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007ae0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007ae4:	2400      	movs	r4, #0
 8007ae6:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ae8:	4623      	mov	r3, r4
 8007aea:	4622      	mov	r2, r4
 8007aec:	f000 fb18 	bl	8008120 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8007af0:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007af2:	e7f2      	b.n	8007ada <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 8007af4:	2003      	movs	r0, #3
 8007af6:	e7f0      	b.n	8007ada <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 8007af8:	2000      	movs	r0, #0
 8007afa:	e7ee      	b.n	8007ada <USBD_CDC_DataIn+0x5a>

08007afc <USBD_CDC_Setup>:
{
 8007afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007afe:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b00:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007b04:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8007b08:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 8007b12:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 8007b16:	2f00      	cmp	r7, #0
 8007b18:	d078      	beq.n	8007c0c <USBD_CDC_Setup+0x110>
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b1e:	7809      	ldrb	r1, [r1, #0]
 8007b20:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 8007b24:	d034      	beq.n	8007b90 <USBD_CDC_Setup+0x94>
 8007b26:	2e20      	cmp	r6, #32
 8007b28:	d169      	bne.n	8007bfe <USBD_CDC_Setup+0x102>
      if (req->wLength != 0U)
 8007b2a:	88ea      	ldrh	r2, [r5, #6]
 8007b2c:	b32a      	cbz	r2, 8007b7a <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 8007b2e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8007b32:	d10e      	bne.n	8007b52 <USBD_CDC_Setup+0x56>
          hcdc->CmdOpCode = req->bRequest;
 8007b34:	786b      	ldrb	r3, [r5, #1]
 8007b36:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007b3a:	88ea      	ldrh	r2, [r5, #6]
 8007b3c:	2a3f      	cmp	r2, #63	@ 0x3f
 8007b3e:	d81a      	bhi.n	8007b76 <USBD_CDC_Setup+0x7a>
 8007b40:	b2d2      	uxtb	r2, r2
 8007b42:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007b46:	4639      	mov	r1, r7
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f001 f94c 	bl	8008de6 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8007b4e:	2600      	movs	r6, #0
 8007b50:	e059      	b.n	8007c06 <USBD_CDC_Setup+0x10a>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b52:	33b0      	adds	r3, #176	@ 0xb0
 8007b54:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	7868      	ldrb	r0, [r5, #1]
 8007b60:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007b62:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b64:	2a07      	cmp	r2, #7
 8007b66:	bf28      	it	cs
 8007b68:	2207      	movcs	r2, #7
 8007b6a:	4639      	mov	r1, r7
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f001 f925 	bl	8008dbc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8007b72:	2600      	movs	r6, #0
 8007b74:	e047      	b.n	8007c06 <USBD_CDC_Setup+0x10a>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007b76:	2240      	movs	r2, #64	@ 0x40
 8007b78:	e7e3      	b.n	8007b42 <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b7a:	33b0      	adds	r3, #176	@ 0xb0
 8007b7c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	2200      	movs	r2, #0
 8007b86:	4629      	mov	r1, r5
 8007b88:	7868      	ldrb	r0, [r5, #1]
 8007b8a:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8007b8c:	2600      	movs	r6, #0
 8007b8e:	e03a      	b.n	8007c06 <USBD_CDC_Setup+0x10a>
      switch (req->bRequest)
 8007b90:	786f      	ldrb	r7, [r5, #1]
 8007b92:	2f0b      	cmp	r7, #11
 8007b94:	d82e      	bhi.n	8007bf4 <USBD_CDC_Setup+0xf8>
 8007b96:	e8df f007 	tbb	[pc, r7]
 8007b9a:	3606      	.short	0x3606
 8007b9c:	2d2d2d2d 	.word	0x2d2d2d2d
 8007ba0:	2d2d2d2d 	.word	0x2d2d2d2d
 8007ba4:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d004      	beq.n	8007bb8 <USBD_CDC_Setup+0xbc>
            USBD_CtlError(pdev, req);
 8007bae:	4629      	mov	r1, r5
 8007bb0:	f000 fced 	bl	800858e <USBD_CtlError>
            ret = USBD_FAIL;
 8007bb4:	2603      	movs	r6, #3
 8007bb6:	e026      	b.n	8007c06 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007bb8:	2202      	movs	r2, #2
 8007bba:	a901      	add	r1, sp, #4
 8007bbc:	f001 f8fe 	bl	8008dbc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8007bc0:	463e      	mov	r6, r7
 8007bc2:	e020      	b.n	8007c06 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d004      	beq.n	8007bd6 <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 8007bcc:	4629      	mov	r1, r5
 8007bce:	f000 fcde 	bl	800858e <USBD_CtlError>
            ret = USBD_FAIL;
 8007bd2:	2603      	movs	r6, #3
 8007bd4:	e017      	b.n	8007c06 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f10d 0107 	add.w	r1, sp, #7
 8007bdc:	f001 f8ee 	bl	8008dbc <USBD_CtlSendData>
 8007be0:	e011      	b.n	8007c06 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007be2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d00d      	beq.n	8007c06 <USBD_CDC_Setup+0x10a>
            USBD_CtlError(pdev, req);
 8007bea:	4629      	mov	r1, r5
 8007bec:	f000 fccf 	bl	800858e <USBD_CtlError>
            ret = USBD_FAIL;
 8007bf0:	2603      	movs	r6, #3
 8007bf2:	e008      	b.n	8007c06 <USBD_CDC_Setup+0x10a>
          USBD_CtlError(pdev, req);
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	f000 fcca 	bl	800858e <USBD_CtlError>
          ret = USBD_FAIL;
 8007bfa:	2603      	movs	r6, #3
          break;
 8007bfc:	e003      	b.n	8007c06 <USBD_CDC_Setup+0x10a>
      USBD_CtlError(pdev, req);
 8007bfe:	4629      	mov	r1, r5
 8007c00:	f000 fcc5 	bl	800858e <USBD_CtlError>
      ret = USBD_FAIL;
 8007c04:	2603      	movs	r6, #3
}
 8007c06:	4630      	mov	r0, r6
 8007c08:	b003      	add	sp, #12
 8007c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8007c0c:	2603      	movs	r6, #3
 8007c0e:	e7fa      	b.n	8007c06 <USBD_CDC_Setup+0x10a>

08007c10 <USBD_CDC_DeInit>:
{
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007c14:	2181      	movs	r1, #129	@ 0x81
 8007c16:	f000 fa63 	bl	80080e0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007c1a:	2500      	movs	r5, #0
 8007c1c:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007c1e:	2101      	movs	r1, #1
 8007c20:	4620      	mov	r0, r4
 8007c22:	f000 fa5d 	bl	80080e0 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007c26:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007c2a:	2182      	movs	r1, #130	@ 0x82
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f000 fa57 	bl	80080e0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007c32:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007c36:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007c3a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8007c3e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8007c42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c46:	b19a      	cbz	r2, 8007c70 <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007c48:	33b0      	adds	r3, #176	@ 0xb0
 8007c4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007c54:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8007c58:	33b0      	adds	r3, #176	@ 0xb0
 8007c5a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8007c5e:	f000 fa21 	bl	80080a4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c62:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8007c66:	33b0      	adds	r3, #176	@ 0xb0
 8007c68:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8007c6c:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8007c70:	2000      	movs	r0, #0
 8007c72:	bd38      	pop	{r3, r4, r5, pc}

08007c74 <USBD_CDC_Init>:
{
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c78:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007c7c:	f000 fa0e 	bl	800809c <USBD_static_malloc>
  if (hcdc == NULL)
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d049      	beq.n	8007d18 <USBD_CDC_Init+0xa4>
 8007c84:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007c86:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	f001 f938 	bl	8008f00 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007c90:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8007c94:	33b0      	adds	r3, #176	@ 0xb0
 8007c96:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007c9a:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c9e:	7c23      	ldrb	r3, [r4, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d141      	bne.n	8007d28 <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ca4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ca8:	2202      	movs	r2, #2
 8007caa:	2181      	movs	r1, #129	@ 0x81
 8007cac:	4620      	mov	r0, r4
 8007cae:	f000 fa0c 	bl	80080ca <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007cb2:	2601      	movs	r6, #1
 8007cb4:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007cb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cba:	2202      	movs	r2, #2
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 fa03 	bl	80080ca <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007cc4:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007cc8:	2310      	movs	r3, #16
 8007cca:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cce:	2308      	movs	r3, #8
 8007cd0:	2203      	movs	r2, #3
 8007cd2:	2182      	movs	r1, #130	@ 0x82
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 f9f8 	bl	80080ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
  hcdc->RxBuffer = NULL;
 8007ce0:	2600      	movs	r6, #0
 8007ce2:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007ce6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8007cea:	33b0      	adds	r3, #176	@ 0xb0
 8007cec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4798      	blx	r3
  hcdc->TxState = 0U;
 8007cf6:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007cfa:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 8007cfe:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8007d02:	b362      	cbz	r2, 8007d5e <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d04:	7c25      	ldrb	r5, [r4, #16]
 8007d06:	bb1d      	cbnz	r5, 8007d50 <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f000 fa0e 	bl	8008130 <USBD_LL_PrepareReceive>
}
 8007d14:	4628      	mov	r0, r5
 8007d16:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d18:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8007d1c:	33b0      	adds	r3, #176	@ 0xb0
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007d24:	2502      	movs	r5, #2
 8007d26:	e7f5      	b.n	8007d14 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007d28:	2340      	movs	r3, #64	@ 0x40
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	2181      	movs	r1, #129	@ 0x81
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f000 f9cb 	bl	80080ca <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007d34:	2601      	movs	r6, #1
 8007d36:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007d38:	2340      	movs	r3, #64	@ 0x40
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f000 f9c3 	bl	80080ca <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007d44:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d48:	2310      	movs	r3, #16
 8007d4a:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 8007d4e:	e7be      	b.n	8007cce <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d50:	2340      	movs	r3, #64	@ 0x40
 8007d52:	2101      	movs	r1, #1
 8007d54:	4620      	mov	r0, r4
 8007d56:	f000 f9eb 	bl	8008130 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8007d5a:	2500      	movs	r5, #0
 8007d5c:	e7da      	b.n	8007d14 <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 8007d5e:	2502      	movs	r5, #2
 8007d60:	e7d8      	b.n	8007d14 <USBD_CDC_Init+0xa0>

08007d62 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8007d62:	b139      	cbz	r1, 8007d74 <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8007d64:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007d68:	33b0      	adds	r3, #176	@ 0xb0
 8007d6a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007d6e:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 8007d70:	2000      	movs	r0, #0
 8007d72:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007d74:	2003      	movs	r0, #3
}
 8007d76:	4770      	bx	lr

08007d78 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d78:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007d7c:	33b0      	adds	r3, #176	@ 0xb0
 8007d7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007d82:	b12b      	cbz	r3, 8007d90 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8007d84:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007d88:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007d90:	2003      	movs	r0, #3
}
 8007d92:	4770      	bx	lr

08007d94 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d94:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007d98:	33b0      	adds	r3, #176	@ 0xb0
 8007d9a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8007d9e:	b11b      	cbz	r3, 8007da8 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8007da0:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007da4:	2000      	movs	r0, #0
 8007da6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007da8:	2003      	movs	r0, #3
}
 8007daa:	4770      	bx	lr

08007dac <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007dac:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dae:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007db2:	33b0      	adds	r3, #176	@ 0xb0
 8007db4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007db8:	b18a      	cbz	r2, 8007dde <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8007dba:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 8007dbe:	b10b      	cbz	r3, 8007dc4 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007dc0:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8007dc2:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007dca:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 8007dce:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007dd0:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8007dd4:	2181      	movs	r1, #129	@ 0x81
 8007dd6:	f000 f9a3 	bl	8008120 <USBD_LL_Transmit>
    ret = USBD_OK;
 8007dda:	2000      	movs	r0, #0
 8007ddc:	e7f1      	b.n	8007dc2 <USBD_CDC_TransmitPacket+0x16>
    return (uint8_t)USBD_FAIL;
 8007dde:	2003      	movs	r0, #3
 8007de0:	e7ef      	b.n	8007dc2 <USBD_CDC_TransmitPacket+0x16>

08007de2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007de2:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007de4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8007de8:	33b0      	adds	r3, #176	@ 0xb0
 8007dea:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007dee:	b192      	cbz	r2, 8007e16 <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007df0:	7c04      	ldrb	r4, [r0, #16]
 8007df2:	b944      	cbnz	r4, 8007e06 <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007df4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007df8:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	f000 f997 	bl	8008130 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8007e02:	4620      	mov	r0, r4
 8007e04:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e06:	2340      	movs	r3, #64	@ 0x40
 8007e08:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	f000 f98f 	bl	8008130 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8007e12:	2400      	movs	r4, #0
 8007e14:	e7f5      	b.n	8007e02 <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 8007e16:	2403      	movs	r4, #3
 8007e18:	e7f3      	b.n	8007e02 <USBD_CDC_ReceivePacket+0x20>

08007e1a <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	4770      	bx	lr

08007e1e <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8007e1e:	2000      	movs	r0, #0
 8007e20:	4770      	bx	lr

08007e22 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8007e22:	2000      	movs	r0, #0
 8007e24:	4770      	bx	lr
	...

08007e28 <CDC_Receive_FS>:
{
 8007e28:	b510      	push	{r4, lr}
 8007e2a:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e2c:	4c04      	ldr	r4, [pc, #16]	@ (8007e40 <CDC_Receive_FS+0x18>)
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f7ff ffb0 	bl	8007d94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e34:	4620      	mov	r0, r4
 8007e36:	f7ff ffd4 	bl	8007de2 <USBD_CDC_ReceivePacket>
}
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	bd10      	pop	{r4, pc}
 8007e3e:	bf00      	nop
 8007e40:	20005008 	.word	0x20005008

08007e44 <CDC_Init_FS>:
{
 8007e44:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e46:	4c06      	ldr	r4, [pc, #24]	@ (8007e60 <CDC_Init_FS+0x1c>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	4906      	ldr	r1, [pc, #24]	@ (8007e64 <CDC_Init_FS+0x20>)
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f7ff ff93 	bl	8007d78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e52:	4905      	ldr	r1, [pc, #20]	@ (8007e68 <CDC_Init_FS+0x24>)
 8007e54:	4620      	mov	r0, r4
 8007e56:	f7ff ff9d 	bl	8007d94 <USBD_CDC_SetRxBuffer>
}
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	bd10      	pop	{r4, pc}
 8007e5e:	bf00      	nop
 8007e60:	20005008 	.word	0x20005008
 8007e64:	200052e4 	.word	0x200052e4
 8007e68:	200056e4 	.word	0x200056e4

08007e6c <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007e6c:	4b09      	ldr	r3, [pc, #36]	@ (8007e94 <CDC_Transmit_FS+0x28>)
 8007e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 8007e72:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007e76:	b10b      	cbz	r3, 8007e7c <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8007e78:	2001      	movs	r0, #1
}
 8007e7a:	4770      	bx	lr
{
 8007e7c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007e7e:	4c05      	ldr	r4, [pc, #20]	@ (8007e94 <CDC_Transmit_FS+0x28>)
 8007e80:	460a      	mov	r2, r1
 8007e82:	4601      	mov	r1, r0
 8007e84:	4620      	mov	r0, r4
 8007e86:	f7ff ff77 	bl	8007d78 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f7ff ff8e 	bl	8007dac <USBD_CDC_TransmitPacket>
}
 8007e90:	bd10      	pop	{r4, pc}
 8007e92:	bf00      	nop
 8007e94:	20005008 	.word	0x20005008

08007e98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e98:	b530      	push	{r4, r5, lr}
 8007e9a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9303      	str	r3, [sp, #12]
 8007ea0:	9304      	str	r3, [sp, #16]
 8007ea2:	9305      	str	r3, [sp, #20]
 8007ea4:	9306      	str	r3, [sp, #24]
 8007ea6:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ea8:	6803      	ldr	r3, [r0, #0]
 8007eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007eae:	d001      	beq.n	8007eb4 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007eb0:	b009      	add	sp, #36	@ 0x24
 8007eb2:	bd30      	pop	{r4, r5, pc}
 8007eb4:	aa03      	add	r2, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eb6:	2500      	movs	r5, #0
 8007eb8:	9501      	str	r5, [sp, #4]
 8007eba:	4c17      	ldr	r4, [pc, #92]	@ (8007f18 <HAL_PCD_MspInit+0x80>)
 8007ebc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007ebe:	f043 0301 	orr.w	r3, r3, #1
 8007ec2:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ec4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	9301      	str	r3, [sp, #4]
 8007ecc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ece:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007ed2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007edc:	230a      	movs	r3, #10
 8007ede:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	480e      	ldr	r0, [pc, #56]	@ (8007f1c <HAL_PCD_MspInit+0x84>)
 8007ee4:	f7fb fa6a 	bl	80033bc <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ee8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eee:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ef0:	9502      	str	r5, [sp, #8]
 8007ef2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007ef8:	6463      	str	r3, [r4, #68]	@ 0x44
 8007efa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007efc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f00:	9302      	str	r3, [sp, #8]
 8007f02:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8007f04:	462a      	mov	r2, r5
 8007f06:	2105      	movs	r1, #5
 8007f08:	2043      	movs	r0, #67	@ 0x43
 8007f0a:	f7fb f83f 	bl	8002f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f0e:	2043      	movs	r0, #67	@ 0x43
 8007f10:	f7fb f84c 	bl	8002fac <HAL_NVIC_EnableIRQ>
}
 8007f14:	e7cc      	b.n	8007eb0 <HAL_PCD_MspInit+0x18>
 8007f16:	bf00      	nop
 8007f18:	40023800 	.word	0x40023800
 8007f1c:	40020000 	.word	0x40020000

08007f20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f20:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f22:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8007f26:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007f2a:	f000 f956 	bl	80081da <USBD_LL_SetupStage>
}
 8007f2e:	bd08      	pop	{r3, pc}

08007f30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f30:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f32:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8007f36:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007f3a:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8007f3e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007f42:	f000 fa17 	bl	8008374 <USBD_LL_DataOutStage>
}
 8007f46:	bd08      	pop	{r3, pc}

08007f48 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f48:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f4a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8007f4e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007f52:	6a1a      	ldr	r2, [r3, #32]
 8007f54:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007f58:	f000 fa6c 	bl	8008434 <USBD_LL_DataInStage>
}
 8007f5c:	bd08      	pop	{r3, pc}

08007f5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f5e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f60:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007f64:	f000 f9b4 	bl	80082d0 <USBD_LL_SOF>
}
 8007f68:	bd08      	pop	{r3, pc}

08007f6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f6a:	b510      	push	{r4, lr}
 8007f6c:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f6e:	79c3      	ldrb	r3, [r0, #7]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d109      	bne.n	8007f88 <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f74:	2101      	movs	r1, #1
 8007f76:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8007f7a:	f000 f98c 	bl	8008296 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f7e:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8007f82:	f000 f956 	bl	8008232 <USBD_LL_Reset>
}
 8007f86:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007f88:	f7f9 fec4 	bl	8001d14 <Error_Handler>
 8007f8c:	e7f2      	b.n	8007f74 <HAL_PCD_ResetCallback+0xa>
	...

08007f90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f90:	b510      	push	{r4, lr}
 8007f92:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f94:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007f98:	f000 f980 	bl	800829c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f9c:	6822      	ldr	r2, [r4, #0]
 8007f9e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8007fa2:	f043 0301 	orr.w	r3, r3, #1
 8007fa6:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007faa:	7ae3      	ldrb	r3, [r4, #11]
 8007fac:	b123      	cbz	r3, 8007fb8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fae:	4a03      	ldr	r2, [pc, #12]	@ (8007fbc <HAL_PCD_SuspendCallback+0x2c>)
 8007fb0:	6913      	ldr	r3, [r2, #16]
 8007fb2:	f043 0306 	orr.w	r3, r3, #6
 8007fb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fb8:	bd10      	pop	{r4, pc}
 8007fba:	bf00      	nop
 8007fbc:	e000ed00 	.word	0xe000ed00

08007fc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fc2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007fc6:	f000 f977 	bl	80082b8 <USBD_LL_Resume>
}
 8007fca:	bd08      	pop	{r3, pc}

08007fcc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fcc:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fce:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007fd2:	f000 f9a3 	bl	800831c <USBD_LL_IsoOUTIncomplete>
}
 8007fd6:	bd08      	pop	{r3, pc}

08007fd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd8:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fda:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007fde:	f000 f987 	bl	80082f0 <USBD_LL_IsoINIncomplete>
}
 8007fe2:	bd08      	pop	{r3, pc}

08007fe4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fe4:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fe6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007fea:	f000 f9ad 	bl	8008348 <USBD_LL_DevConnected>
}
 8007fee:	bd08      	pop	{r3, pc}

08007ff0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff0:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ff2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8007ff6:	f000 f9a9 	bl	800834c <USBD_LL_DevDisconnected>
}
 8007ffa:	bd08      	pop	{r3, pc}

08007ffc <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ffc:	7802      	ldrb	r2, [r0, #0]
 8007ffe:	b10a      	cbz	r2, 8008004 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8008000:	2000      	movs	r0, #0
 8008002:	4770      	bx	lr
{
 8008004:	b510      	push	{r4, lr}
 8008006:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8008008:	4815      	ldr	r0, [pc, #84]	@ (8008060 <USBD_LL_Init+0x64>)
 800800a:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800800e:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008012:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8008016:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008018:	2304      	movs	r3, #4
 800801a:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800801c:	2202      	movs	r2, #2
 800801e:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008020:	2300      	movs	r3, #0
 8008022:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008024:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008026:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008028:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800802a:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800802c:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800802e:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008030:	f7fb fb40 	bl	80036b4 <HAL_PCD_Init>
 8008034:	b980      	cbnz	r0, 8008058 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008036:	4c0a      	ldr	r4, [pc, #40]	@ (8008060 <USBD_LL_Init+0x64>)
 8008038:	2180      	movs	r1, #128	@ 0x80
 800803a:	4620      	mov	r0, r4
 800803c:	f7fc f909 	bl	8004252 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008040:	2240      	movs	r2, #64	@ 0x40
 8008042:	2100      	movs	r1, #0
 8008044:	4620      	mov	r0, r4
 8008046:	f7fc f8de 	bl	8004206 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800804a:	2280      	movs	r2, #128	@ 0x80
 800804c:	2101      	movs	r1, #1
 800804e:	4620      	mov	r0, r4
 8008050:	f7fc f8d9 	bl	8004206 <HAL_PCDEx_SetTxFiFo>
}
 8008054:	2000      	movs	r0, #0
 8008056:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8008058:	f7f9 fe5c 	bl	8001d14 <Error_Handler>
 800805c:	e7eb      	b.n	8008036 <USBD_LL_Init+0x3a>
 800805e:	bf00      	nop
 8008060:	20005d04 	.word	0x20005d04

08008064 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008064:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8008068:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800806c:	d108      	bne.n	8008080 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800806e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8008072:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8008076:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800807a:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 800807e:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008080:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8008084:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8008088:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800808c:	7d98      	ldrb	r0, [r3, #22]
 800808e:	4770      	bx	lr

08008090 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008090:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008092:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008096:	f7fb fd11 	bl	8003abc <HAL_PCD_EP_GetRxCount>
}
 800809a:	bd08      	pop	{r3, pc}

0800809c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 800809c:	4800      	ldr	r0, [pc, #0]	@ (80080a0 <USBD_static_malloc+0x4>)
 800809e:	4770      	bx	lr
 80080a0:	20005ae4 	.word	0x20005ae4

080080a4 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 80080a4:	4770      	bx	lr

080080a6 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80080a6:	2803      	cmp	r0, #3
 80080a8:	d805      	bhi.n	80080b6 <USBD_Get_USB_Status+0x10>
 80080aa:	e8df f000 	tbb	[pc, r0]
 80080ae:	0405      	.short	0x0405
 80080b0:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080b2:	2001      	movs	r0, #1
    break;
 80080b4:	4770      	bx	lr
      usb_status = USBD_FAIL;
 80080b6:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80080b8:	4770      	bx	lr

080080ba <USBD_LL_Start>:
{
 80080ba:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80080bc:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80080c0:	f7fb fb79 	bl	80037b6 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c4:	f7ff ffef 	bl	80080a6 <USBD_Get_USB_Status>
}
 80080c8:	bd08      	pop	{r3, pc}

080080ca <USBD_LL_OpenEP>:
{
 80080ca:	b508      	push	{r3, lr}
 80080cc:	4694      	mov	ip, r2
 80080ce:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080d0:	4663      	mov	r3, ip
 80080d2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80080d6:	f7fb fc4e 	bl	8003976 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80080da:	f7ff ffe4 	bl	80080a6 <USBD_Get_USB_Status>
}
 80080de:	bd08      	pop	{r3, pc}

080080e0 <USBD_LL_CloseEP>:
{
 80080e0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080e2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80080e6:	f7fb fc8c 	bl	8003a02 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ea:	f7ff ffdc 	bl	80080a6 <USBD_Get_USB_Status>
}
 80080ee:	bd08      	pop	{r3, pc}

080080f0 <USBD_LL_StallEP>:
{
 80080f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080f2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80080f6:	f7fb fd0f 	bl	8003b18 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80080fa:	f7ff ffd4 	bl	80080a6 <USBD_Get_USB_Status>
}
 80080fe:	bd08      	pop	{r3, pc}

08008100 <USBD_LL_ClearStallEP>:
{
 8008100:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008102:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008106:	f7fb fd4a 	bl	8003b9e <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800810a:	f7ff ffcc 	bl	80080a6 <USBD_Get_USB_Status>
}
 800810e:	bd08      	pop	{r3, pc}

08008110 <USBD_LL_SetUSBAddress>:
{
 8008110:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008112:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008116:	f7fb fc1b 	bl	8003950 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800811a:	f7ff ffc4 	bl	80080a6 <USBD_Get_USB_Status>
}
 800811e:	bd08      	pop	{r3, pc}

08008120 <USBD_LL_Transmit>:
{
 8008120:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008122:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008126:	f7fb fcd2 	bl	8003ace <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800812a:	f7ff ffbc 	bl	80080a6 <USBD_Get_USB_Status>
}
 800812e:	bd08      	pop	{r3, pc}

08008130 <USBD_LL_PrepareReceive>:
{
 8008130:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008132:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008136:	f7fb fc9c 	bl	8003a72 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800813a:	f7ff ffb4 	bl	80080a6 <USBD_Get_USB_Status>
}
 800813e:	bd08      	pop	{r3, pc}

08008140 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008140:	b198      	cbz	r0, 800816a <USBD_Init+0x2a>
{
 8008142:	b508      	push	{r3, lr}
 8008144:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008146:	2000      	movs	r0, #0
 8008148:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800814c:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008150:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008154:	b109      	cbz	r1, 800815a <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8008156:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800815a:	2101      	movs	r1, #1
 800815c:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008160:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008162:	4618      	mov	r0, r3
 8008164:	f7ff ff4a 	bl	8007ffc <USBD_LL_Init>

  return ret;
}
 8008168:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800816a:	2003      	movs	r0, #3
}
 800816c:	4770      	bx	lr

0800816e <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800816e:	b510      	push	{r4, lr}
 8008170:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8008178:	b1b9      	cbz	r1, 80081aa <USBD_RegisterClass+0x3c>
 800817a:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800817c:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008180:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8008184:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8008186:	b143      	cbz	r3, 800819a <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008188:	32ae      	adds	r2, #174	@ 0xae
 800818a:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800818e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008190:	f10d 0006 	add.w	r0, sp, #6
 8008194:	4798      	blx	r3
 8008196:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800819a:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 800819e:	3301      	adds	r3, #1
 80081a0:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 80081a4:	2000      	movs	r0, #0
}
 80081a6:	b002      	add	sp, #8
 80081a8:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80081aa:	2003      	movs	r0, #3
 80081ac:	e7fb      	b.n	80081a6 <USBD_RegisterClass+0x38>

080081ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081ae:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80081b0:	f7ff ff83 	bl	80080ba <USBD_LL_Start>
}
 80081b4:	bd08      	pop	{r3, pc}

080081b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081b6:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081b8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80081bc:	b113      	cbz	r3, 80081c4 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80081c2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 80081c4:	2000      	movs	r0, #0
 80081c6:	e7fc      	b.n	80081c2 <USBD_SetClassConfig+0xc>

080081c8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081c8:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80081ca:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	4798      	blx	r3
 80081d2:	b900      	cbnz	r0, 80081d6 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80081d4:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 80081d6:	2003      	movs	r0, #3
 80081d8:	e7fc      	b.n	80081d4 <USBD_ClrClassConfig+0xc>

080081da <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081da:	b538      	push	{r3, r4, r5, lr}
 80081dc:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081de:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 80081e2:	4628      	mov	r0, r5
 80081e4:	f000 f9bf 	bl	8008566 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081e8:	2301      	movs	r3, #1
 80081ea:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80081ee:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 80081f2:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80081f6:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 80081fa:	f001 031f 	and.w	r3, r1, #31
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d007      	beq.n	8008212 <USBD_LL_SetupStage+0x38>
 8008202:	2b02      	cmp	r3, #2
 8008204:	d00a      	beq.n	800821c <USBD_LL_SetupStage+0x42>
 8008206:	b973      	cbnz	r3, 8008226 <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008208:	4629      	mov	r1, r5
 800820a:	4620      	mov	r0, r4
 800820c:	f000 fb80 	bl	8008910 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8008210:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008212:	4629      	mov	r1, r5
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fbb6 	bl	8008986 <USBD_StdItfReq>
      break;
 800821a:	e7f9      	b.n	8008210 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800821c:	4629      	mov	r1, r5
 800821e:	4620      	mov	r0, r4
 8008220:	f000 fbf3 	bl	8008a0a <USBD_StdEPReq>
      break;
 8008224:	e7f4      	b.n	8008210 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008226:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800822a:	4620      	mov	r0, r4
 800822c:	f7ff ff60 	bl	80080f0 <USBD_LL_StallEP>
      break;
 8008230:	e7ee      	b.n	8008210 <USBD_LL_SetupStage+0x36>

08008232 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008234:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008236:	2301      	movs	r3, #1
 8008238:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800823c:	2300      	movs	r3, #0
 800823e:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008242:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8008244:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008248:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800824c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008250:	b1db      	cbz	r3, 800828a <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	b1db      	cbz	r3, 800828e <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008256:	2100      	movs	r1, #0
 8008258:	4798      	blx	r3
 800825a:	4607      	mov	r7, r0
 800825c:	b9c8      	cbnz	r0, 8008292 <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800825e:	2340      	movs	r3, #64	@ 0x40
 8008260:	2200      	movs	r2, #0
 8008262:	4611      	mov	r1, r2
 8008264:	4620      	mov	r0, r4
 8008266:	f7ff ff30 	bl	80080ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800826a:	2601      	movs	r6, #1
 800826c:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008270:	2540      	movs	r5, #64	@ 0x40
 8008272:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008276:	462b      	mov	r3, r5
 8008278:	2200      	movs	r2, #0
 800827a:	2180      	movs	r1, #128	@ 0x80
 800827c:	4620      	mov	r0, r4
 800827e:	f7ff ff24 	bl	80080ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008282:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008284:	6225      	str	r5, [r4, #32]

  return ret;
}
 8008286:	4638      	mov	r0, r7
 8008288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800828a:	2700      	movs	r7, #0
 800828c:	e7e7      	b.n	800825e <USBD_LL_Reset+0x2c>
 800828e:	2700      	movs	r7, #0
 8008290:	e7e5      	b.n	800825e <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8008292:	2703      	movs	r7, #3
 8008294:	e7e3      	b.n	800825e <USBD_LL_Reset+0x2c>

08008296 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008296:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8008298:	2000      	movs	r0, #0
 800829a:	4770      	bx	lr

0800829c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800829c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80082a0:	2b04      	cmp	r3, #4
 80082a2:	d004      	beq.n	80082ae <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 80082a4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082ae:	2304      	movs	r3, #4
 80082b0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 80082b4:	2000      	movs	r0, #0
 80082b6:	4770      	bx	lr

080082b8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082b8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d001      	beq.n	80082c4 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 80082c0:	2000      	movs	r0, #0
 80082c2:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 80082c4:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 80082ce:	e7f7      	b.n	80082c0 <USBD_LL_Resume+0x8>

080082d0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082d0:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d001      	beq.n	80082de <USBD_LL_SOF+0xe>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 80082da:	2000      	movs	r0, #0
 80082dc:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 80082de:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0f9      	beq.n	80082da <USBD_LL_SOF+0xa>
      if (pdev->pClass[0]->SOF != NULL)
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d0f6      	beq.n	80082da <USBD_LL_SOF+0xa>
        (void)pdev->pClass[0]->SOF(pdev);
 80082ec:	4798      	blx	r3
 80082ee:	e7f4      	b.n	80082da <USBD_LL_SOF+0xa>

080082f0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80082f0:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 80082f2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80082f6:	33ae      	adds	r3, #174	@ 0xae
 80082f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80082fc:	b153      	cbz	r3, 8008314 <USBD_LL_IsoINIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082fe:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008302:	2a03      	cmp	r2, #3
 8008304:	d001      	beq.n	800830a <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8008306:	2000      	movs	r0, #0
}
 8008308:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	b123      	cbz	r3, 8008318 <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800830e:	4798      	blx	r3
  return USBD_OK;
 8008310:	2000      	movs	r0, #0
 8008312:	e7f9      	b.n	8008308 <USBD_LL_IsoINIncomplete+0x18>
    return USBD_FAIL;
 8008314:	2003      	movs	r0, #3
 8008316:	e7f7      	b.n	8008308 <USBD_LL_IsoINIncomplete+0x18>
  return USBD_OK;
 8008318:	2000      	movs	r0, #0
 800831a:	e7f5      	b.n	8008308 <USBD_LL_IsoINIncomplete+0x18>

0800831c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800831c:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800831e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008322:	33ae      	adds	r3, #174	@ 0xae
 8008324:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008328:	b153      	cbz	r3, 8008340 <USBD_LL_IsoOUTIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800832a:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800832e:	2a03      	cmp	r2, #3
 8008330:	d001      	beq.n	8008336 <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8008332:	2000      	movs	r0, #0
}
 8008334:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008338:	b123      	cbz	r3, 8008344 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800833a:	4798      	blx	r3
  return USBD_OK;
 800833c:	2000      	movs	r0, #0
 800833e:	e7f9      	b.n	8008334 <USBD_LL_IsoOUTIncomplete+0x18>
    return USBD_FAIL;
 8008340:	2003      	movs	r0, #3
 8008342:	e7f7      	b.n	8008334 <USBD_LL_IsoOUTIncomplete+0x18>
  return USBD_OK;
 8008344:	2000      	movs	r0, #0
 8008346:	e7f5      	b.n	8008334 <USBD_LL_IsoOUTIncomplete+0x18>

08008348 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8008348:	2000      	movs	r0, #0
 800834a:	4770      	bx	lr

0800834c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800834c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800834e:	2301      	movs	r3, #1
 8008350:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008354:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008358:	b123      	cbz	r3, 8008364 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	7901      	ldrb	r1, [r0, #4]
 800835e:	4798      	blx	r3
 8008360:	b910      	cbnz	r0, 8008368 <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8008362:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8008364:	2000      	movs	r0, #0
 8008366:	e7fc      	b.n	8008362 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 8008368:	2003      	movs	r0, #3
 800836a:	e7fa      	b.n	8008362 <USBD_LL_DevDisconnected+0x16>

0800836c <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800836c:	2000      	movs	r0, #0
 800836e:	4770      	bx	lr

08008370 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8008370:	2000      	movs	r0, #0
 8008372:	4770      	bx	lr

08008374 <USBD_LL_DataOutStage>:
{
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4604      	mov	r4, r0
  if (epnum == 0U)
 8008378:	460d      	mov	r5, r1
 800837a:	2900      	cmp	r1, #0
 800837c:	d141      	bne.n	8008402 <USBD_LL_DataOutStage+0x8e>
 800837e:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008380:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8008384:	2a03      	cmp	r2, #3
 8008386:	d001      	beq.n	800838c <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 8008388:	4608      	mov	r0, r1
}
 800838a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800838c:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 8008390:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 8008394:	4291      	cmp	r1, r2
 8008396:	d809      	bhi.n	80083ac <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 8008398:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 800839c:	f003 031f 	and.w	r3, r3, #31
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d00e      	beq.n	80083c2 <USBD_LL_DataOutStage+0x4e>
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d01a      	beq.n	80083de <USBD_LL_DataOutStage+0x6a>
 80083a8:	4628      	mov	r0, r5
 80083aa:	e00f      	b.n	80083cc <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 80083ac:	1a89      	subs	r1, r1, r2
 80083ae:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083b2:	428a      	cmp	r2, r1
 80083b4:	bf28      	it	cs
 80083b6:	460a      	movcs	r2, r1
 80083b8:	4619      	mov	r1, r3
 80083ba:	f000 fd23 	bl	8008e04 <USBD_CtlContinueRx>
  return USBD_OK;
 80083be:	4628      	mov	r0, r5
 80083c0:	e7e3      	b.n	800838a <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80083c2:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 80083c6:	f7ff ffd1 	bl	800836c <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80083ca:	b918      	cbnz	r0, 80083d4 <USBD_LL_DataOutStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083cc:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d009      	beq.n	80083e8 <USBD_LL_DataOutStage+0x74>
        (void)USBD_CtlSendStatus(pdev);
 80083d4:	4620      	mov	r0, r4
 80083d6:	f000 fd1d 	bl	8008e14 <USBD_CtlSendStatus>
  return USBD_OK;
 80083da:	4628      	mov	r0, r5
 80083dc:	e7d5      	b.n	800838a <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80083de:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 80083e2:	f7ff ffc5 	bl	8008370 <USBD_CoreFindEP>
            break;
 80083e6:	e7f0      	b.n	80083ca <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80083e8:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80083ec:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80083f0:	691a      	ldr	r2, [r3, #16]
 80083f2:	2a00      	cmp	r2, #0
 80083f4:	d0ee      	beq.n	80083d4 <USBD_LL_DataOutStage+0x60>
              pdev->classId = idx;
 80083f6:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	4620      	mov	r0, r4
 80083fe:	4798      	blx	r3
 8008400:	e7e8      	b.n	80083d4 <USBD_LL_DataOutStage+0x60>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008402:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8008406:	f7ff ffb3 	bl	8008370 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800840a:	b988      	cbnz	r0, 8008430 <USBD_LL_DataOutStage+0xbc>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800840c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008410:	2b03      	cmp	r3, #3
 8008412:	d1ba      	bne.n	800838a <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 8008414:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8008418:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800841c:	699a      	ldr	r2, [r3, #24]
 800841e:	2a00      	cmp	r2, #0
 8008420:	d0b3      	beq.n	800838a <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 8008422:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	4629      	mov	r1, r5
 800842a:	4620      	mov	r0, r4
 800842c:	4798      	blx	r3
      if (ret != USBD_OK)
 800842e:	e7ac      	b.n	800838a <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8008430:	2000      	movs	r0, #0
 8008432:	e7aa      	b.n	800838a <USBD_LL_DataOutStage+0x16>

08008434 <USBD_LL_DataInStage>:
{
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4604      	mov	r4, r0
  if (epnum == 0U)
 8008438:	460d      	mov	r5, r1
 800843a:	2900      	cmp	r1, #0
 800843c:	d14a      	bne.n	80084d4 <USBD_LL_DataInStage+0xa0>
 800843e:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008440:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8008444:	2a02      	cmp	r2, #2
 8008446:	d007      	beq.n	8008458 <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 8008448:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 800844c:	b118      	cbz	r0, 8008456 <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8008454:	4628      	mov	r0, r5
}
 8008456:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8008458:	69c2      	ldr	r2, [r0, #28]
 800845a:	6a01      	ldr	r1, [r0, #32]
 800845c:	428a      	cmp	r2, r1
 800845e:	d80d      	bhi.n	800847c <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 8008460:	428a      	cmp	r2, r1
 8008462:	d017      	beq.n	8008494 <USBD_LL_DataInStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008464:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008468:	2b03      	cmp	r3, #3
 800846a:	d027      	beq.n	80084bc <USBD_LL_DataInStage+0x88>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800846c:	2180      	movs	r1, #128	@ 0x80
 800846e:	4620      	mov	r0, r4
 8008470:	f7ff fe3e 	bl	80080f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008474:	4620      	mov	r0, r4
 8008476:	f000 fcd8 	bl	8008e2a <USBD_CtlReceiveStatus>
 800847a:	e7e5      	b.n	8008448 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800847c:	1a52      	subs	r2, r2, r1
 800847e:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008480:	4619      	mov	r1, r3
 8008482:	f000 fca8 	bl	8008dd6 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008486:	2300      	movs	r3, #0
 8008488:	461a      	mov	r2, r3
 800848a:	4619      	mov	r1, r3
 800848c:	4620      	mov	r0, r4
 800848e:	f7ff fe4f 	bl	8008130 <USBD_LL_PrepareReceive>
 8008492:	e7d9      	b.n	8008448 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8008494:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8008496:	4299      	cmp	r1, r3
 8008498:	d8e4      	bhi.n	8008464 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 800849a:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800849e:	4293      	cmp	r3, r2
 80084a0:	d2e0      	bcs.n	8008464 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084a2:	2200      	movs	r2, #0
 80084a4:	4611      	mov	r1, r2
 80084a6:	f000 fc96 	bl	8008dd6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084aa:	2100      	movs	r1, #0
 80084ac:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084b0:	460b      	mov	r3, r1
 80084b2:	460a      	mov	r2, r1
 80084b4:	4620      	mov	r0, r4
 80084b6:	f7ff fe3b 	bl	8008130 <USBD_LL_PrepareReceive>
 80084ba:	e7c5      	b.n	8008448 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80084bc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80084c0:	68da      	ldr	r2, [r3, #12]
 80084c2:	2a00      	cmp	r2, #0
 80084c4:	d0d2      	beq.n	800846c <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 80084c6:	2200      	movs	r2, #0
 80084c8:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	4620      	mov	r0, r4
 80084d0:	4798      	blx	r3
 80084d2:	e7cb      	b.n	800846c <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80084d4:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80084d8:	f7ff ff4a 	bl	8008370 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084dc:	b988      	cbnz	r0, 8008502 <USBD_LL_DataInStage+0xce>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084de:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d1b7      	bne.n	8008456 <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 80084e6:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80084ea:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80084ee:	695a      	ldr	r2, [r3, #20]
 80084f0:	2a00      	cmp	r2, #0
 80084f2:	d0b0      	beq.n	8008456 <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 80084f4:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	4629      	mov	r1, r5
 80084fc:	4620      	mov	r0, r4
 80084fe:	4798      	blx	r3
          if (ret != USBD_OK)
 8008500:	e7a9      	b.n	8008456 <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 8008502:	2000      	movs	r0, #0
 8008504:	e7a7      	b.n	8008456 <USBD_LL_DataInStage+0x22>

08008506 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8008506:	880b      	ldrh	r3, [r1, #0]
 8008508:	7802      	ldrb	r2, [r0, #0]
 800850a:	4413      	add	r3, r2
 800850c:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800850e:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 8008510:	4418      	add	r0, r3
 8008512:	4770      	bx	lr

08008514 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 8008514:	8842      	ldrh	r2, [r0, #2]
 8008516:	7803      	ldrb	r3, [r0, #0]
 8008518:	429a      	cmp	r2, r3
 800851a:	d918      	bls.n	800854e <USBD_GetEpDesc+0x3a>
{
 800851c:	b530      	push	{r4, r5, lr}
 800851e:	b083      	sub	sp, #12
 8008520:	4604      	mov	r4, r0
 8008522:	460d      	mov	r5, r1
    ptr = desc->bLength;
 8008524:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 8008528:	8863      	ldrh	r3, [r4, #2]
 800852a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800852e:	429a      	cmp	r2, r3
 8008530:	d20a      	bcs.n	8008548 <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008532:	f10d 0106 	add.w	r1, sp, #6
 8008536:	f7ff ffe6 	bl	8008506 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800853a:	7843      	ldrb	r3, [r0, #1]
 800853c:	2b05      	cmp	r3, #5
 800853e:	d1f3      	bne.n	8008528 <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8008540:	7883      	ldrb	r3, [r0, #2]
 8008542:	42ab      	cmp	r3, r5
 8008544:	d1f0      	bne.n	8008528 <USBD_GetEpDesc+0x14>
 8008546:	e000      	b.n	800854a <USBD_GetEpDesc+0x36>
 8008548:	2000      	movs	r0, #0
}
 800854a:	b003      	add	sp, #12
 800854c:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800854e:	2000      	movs	r0, #0
}
 8008550:	4770      	bx	lr

08008552 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008552:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8008554:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8008556:	e002      	b.n	800855e <USBD_GetLen+0xc>
  {
    len++;
 8008558:	3001      	adds	r0, #1
 800855a:	b2c0      	uxtb	r0, r0
    pbuff++;
 800855c:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800855e:	781a      	ldrb	r2, [r3, #0]
 8008560:	2a00      	cmp	r2, #0
 8008562:	d1f9      	bne.n	8008558 <USBD_GetLen+0x6>
  }

  return len;
}
 8008564:	4770      	bx	lr

08008566 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8008566:	780b      	ldrb	r3, [r1, #0]
 8008568:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800856a:	784b      	ldrb	r3, [r1, #1]
 800856c:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800856e:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8008570:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008572:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8008576:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8008578:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800857a:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800857c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8008580:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8008582:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8008584:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008586:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800858a:	80c3      	strh	r3, [r0, #6]
}
 800858c:	4770      	bx	lr

0800858e <USBD_CtlError>:
{
 800858e:	b510      	push	{r4, lr}
 8008590:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008592:	2180      	movs	r1, #128	@ 0x80
 8008594:	f7ff fdac 	bl	80080f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008598:	2100      	movs	r1, #0
 800859a:	4620      	mov	r0, r4
 800859c:	f7ff fda8 	bl	80080f0 <USBD_LL_StallEP>
}
 80085a0:	bd10      	pop	{r4, pc}

080085a2 <USBD_GetDescriptor>:
{
 80085a2:	b530      	push	{r4, r5, lr}
 80085a4:	b083      	sub	sp, #12
 80085a6:	4604      	mov	r4, r0
 80085a8:	460d      	mov	r5, r1
  uint16_t len = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80085b0:	884a      	ldrh	r2, [r1, #2]
 80085b2:	0a13      	lsrs	r3, r2, #8
 80085b4:	3b01      	subs	r3, #1
 80085b6:	2b06      	cmp	r3, #6
 80085b8:	f200 80aa 	bhi.w	8008710 <USBD_GetDescriptor+0x16e>
 80085bc:	e8df f003 	tbb	[pc, r3]
 80085c0:	a8321e04 	.word	0xa8321e04
 80085c4:	8ca8      	.short	0x8ca8
 80085c6:	99          	.byte	0x99
 80085c7:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085c8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f10d 0106 	add.w	r1, sp, #6
 80085d2:	7c00      	ldrb	r0, [r0, #16]
 80085d4:	4798      	blx	r3
  if (req->wLength != 0U)
 80085d6:	88ea      	ldrh	r2, [r5, #6]
 80085d8:	2a00      	cmp	r2, #0
 80085da:	f000 80a3 	beq.w	8008724 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 80085de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 8099 	beq.w	800871a <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 80085e8:	429a      	cmp	r2, r3
 80085ea:	bf28      	it	cs
 80085ec:	461a      	movcs	r2, r3
 80085ee:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80085f2:	4601      	mov	r1, r0
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 fbe1 	bl	8008dbc <USBD_CtlSendData>
 80085fa:	e08c      	b.n	8008716 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085fc:	7c03      	ldrb	r3, [r0, #16]
 80085fe:	b943      	cbnz	r3, 8008612 <USBD_GetDescriptor+0x70>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008600:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008606:	f10d 0006 	add.w	r0, sp, #6
 800860a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800860c:	2302      	movs	r3, #2
 800860e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8008610:	e7e1      	b.n	80085d6 <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008612:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008618:	f10d 0006 	add.w	r0, sp, #6
 800861c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800861e:	2302      	movs	r3, #2
 8008620:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8008622:	e7d8      	b.n	80085d6 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8008624:	b2d2      	uxtb	r2, r2
 8008626:	2a05      	cmp	r2, #5
 8008628:	d852      	bhi.n	80086d0 <USBD_GetDescriptor+0x12e>
 800862a:	e8df f002 	tbb	[pc, r2]
 800862e:	1003      	.short	0x1003
 8008630:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008634:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	b123      	cbz	r3, 8008646 <USBD_GetDescriptor+0xa4>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800863c:	f10d 0106 	add.w	r1, sp, #6
 8008640:	7c00      	ldrb	r0, [r0, #16]
 8008642:	4798      	blx	r3
  if (err != 0U)
 8008644:	e7c7      	b.n	80085d6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8008646:	4629      	mov	r1, r5
 8008648:	f7ff ffa1 	bl	800858e <USBD_CtlError>
  if (err != 0U)
 800864c:	e063      	b.n	8008716 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800864e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	b123      	cbz	r3, 8008660 <USBD_GetDescriptor+0xbe>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008656:	f10d 0106 	add.w	r1, sp, #6
 800865a:	7c00      	ldrb	r0, [r0, #16]
 800865c:	4798      	blx	r3
  if (err != 0U)
 800865e:	e7ba      	b.n	80085d6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8008660:	4629      	mov	r1, r5
 8008662:	f7ff ff94 	bl	800858e <USBD_CtlError>
  if (err != 0U)
 8008666:	e056      	b.n	8008716 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008668:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	b123      	cbz	r3, 800867a <USBD_GetDescriptor+0xd8>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008670:	f10d 0106 	add.w	r1, sp, #6
 8008674:	7c00      	ldrb	r0, [r0, #16]
 8008676:	4798      	blx	r3
  if (err != 0U)
 8008678:	e7ad      	b.n	80085d6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800867a:	4629      	mov	r1, r5
 800867c:	f7ff ff87 	bl	800858e <USBD_CtlError>
  if (err != 0U)
 8008680:	e049      	b.n	8008716 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008682:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	b123      	cbz	r3, 8008694 <USBD_GetDescriptor+0xf2>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800868a:	f10d 0106 	add.w	r1, sp, #6
 800868e:	7c00      	ldrb	r0, [r0, #16]
 8008690:	4798      	blx	r3
  if (err != 0U)
 8008692:	e7a0      	b.n	80085d6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8008694:	4629      	mov	r1, r5
 8008696:	f7ff ff7a 	bl	800858e <USBD_CtlError>
  if (err != 0U)
 800869a:	e03c      	b.n	8008716 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800869c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	b123      	cbz	r3, 80086ae <USBD_GetDescriptor+0x10c>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086a4:	f10d 0106 	add.w	r1, sp, #6
 80086a8:	7c00      	ldrb	r0, [r0, #16]
 80086aa:	4798      	blx	r3
  if (err != 0U)
 80086ac:	e793      	b.n	80085d6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80086ae:	4629      	mov	r1, r5
 80086b0:	f7ff ff6d 	bl	800858e <USBD_CtlError>
  if (err != 0U)
 80086b4:	e02f      	b.n	8008716 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086b6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	b123      	cbz	r3, 80086c8 <USBD_GetDescriptor+0x126>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086be:	f10d 0106 	add.w	r1, sp, #6
 80086c2:	7c00      	ldrb	r0, [r0, #16]
 80086c4:	4798      	blx	r3
  if (err != 0U)
 80086c6:	e786      	b.n	80085d6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80086c8:	4629      	mov	r1, r5
 80086ca:	f7ff ff60 	bl	800858e <USBD_CtlError>
  if (err != 0U)
 80086ce:	e022      	b.n	8008716 <USBD_GetDescriptor+0x174>
          USBD_CtlError(pdev, req);
 80086d0:	4629      	mov	r1, r5
 80086d2:	f7ff ff5c 	bl	800858e <USBD_CtlError>
  if (err != 0U)
 80086d6:	e01e      	b.n	8008716 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086d8:	7c03      	ldrb	r3, [r0, #16]
 80086da:	b933      	cbnz	r3, 80086ea <USBD_GetDescriptor+0x148>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80086dc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80086e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086e2:	f10d 0006 	add.w	r0, sp, #6
 80086e6:	4798      	blx	r3
  if (err != 0U)
 80086e8:	e775      	b.n	80085d6 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80086ea:	4629      	mov	r1, r5
 80086ec:	f7ff ff4f 	bl	800858e <USBD_CtlError>
  if (err != 0U)
 80086f0:	e011      	b.n	8008716 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086f2:	7c03      	ldrb	r3, [r0, #16]
 80086f4:	b943      	cbnz	r3, 8008708 <USBD_GetDescriptor+0x166>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80086f6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80086fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086fc:	f10d 0006 	add.w	r0, sp, #6
 8008700:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008702:	2307      	movs	r3, #7
 8008704:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8008706:	e766      	b.n	80085d6 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8008708:	4629      	mov	r1, r5
 800870a:	f7ff ff40 	bl	800858e <USBD_CtlError>
  if (err != 0U)
 800870e:	e002      	b.n	8008716 <USBD_GetDescriptor+0x174>
      USBD_CtlError(pdev, req);
 8008710:	4629      	mov	r1, r5
 8008712:	f7ff ff3c 	bl	800858e <USBD_CtlError>
}
 8008716:	b003      	add	sp, #12
 8008718:	bd30      	pop	{r4, r5, pc}
      USBD_CtlError(pdev, req);
 800871a:	4629      	mov	r1, r5
 800871c:	4620      	mov	r0, r4
 800871e:	f7ff ff36 	bl	800858e <USBD_CtlError>
 8008722:	e7f8      	b.n	8008716 <USBD_GetDescriptor+0x174>
    (void)USBD_CtlSendStatus(pdev);
 8008724:	4620      	mov	r0, r4
 8008726:	f000 fb75 	bl	8008e14 <USBD_CtlSendStatus>
 800872a:	e7f4      	b.n	8008716 <USBD_GetDescriptor+0x174>

0800872c <USBD_SetAddress>:
{
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008730:	888b      	ldrh	r3, [r1, #4]
 8008732:	b9f3      	cbnz	r3, 8008772 <USBD_SetAddress+0x46>
 8008734:	88cb      	ldrh	r3, [r1, #6]
 8008736:	b9e3      	cbnz	r3, 8008772 <USBD_SetAddress+0x46>
 8008738:	884b      	ldrh	r3, [r1, #2]
 800873a:	2b7f      	cmp	r3, #127	@ 0x7f
 800873c:	d819      	bhi.n	8008772 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800873e:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008742:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008746:	2b03      	cmp	r3, #3
 8008748:	d00c      	beq.n	8008764 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 800874a:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800874e:	4629      	mov	r1, r5
 8008750:	f7ff fcde 	bl	8008110 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008754:	4620      	mov	r0, r4
 8008756:	f000 fb5d 	bl	8008e14 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800875a:	b135      	cbz	r5, 800876a <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800875c:	2302      	movs	r3, #2
 800875e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8008762:	e009      	b.n	8008778 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8008764:	f7ff ff13 	bl	800858e <USBD_CtlError>
 8008768:	e006      	b.n	8008778 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800876a:	2301      	movs	r3, #1
 800876c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8008770:	e002      	b.n	8008778 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8008772:	4620      	mov	r0, r4
 8008774:	f7ff ff0b 	bl	800858e <USBD_CtlError>
}
 8008778:	bd38      	pop	{r3, r4, r5, pc}
	...

0800877c <USBD_SetConfig>:
{
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	4604      	mov	r4, r0
 8008780:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8008782:	788d      	ldrb	r5, [r1, #2]
 8008784:	4b2f      	ldr	r3, [pc, #188]	@ (8008844 <USBD_SetConfig+0xc8>)
 8008786:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008788:	2d01      	cmp	r5, #1
 800878a:	d810      	bhi.n	80087ae <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800878c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008790:	b2da      	uxtb	r2, r3
 8008792:	2b02      	cmp	r3, #2
 8008794:	d00f      	beq.n	80087b6 <USBD_SetConfig+0x3a>
 8008796:	2a03      	cmp	r2, #3
 8008798:	d026      	beq.n	80087e8 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 800879a:	f7ff fef8 	bl	800858e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800879e:	4b29      	ldr	r3, [pc, #164]	@ (8008844 <USBD_SetConfig+0xc8>)
 80087a0:	7819      	ldrb	r1, [r3, #0]
 80087a2:	4620      	mov	r0, r4
 80087a4:	f7ff fd10 	bl	80081c8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80087a8:	2503      	movs	r5, #3
}
 80087aa:	4628      	mov	r0, r5
 80087ac:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 80087ae:	f7ff feee 	bl	800858e <USBD_CtlError>
    return USBD_FAIL;
 80087b2:	2503      	movs	r5, #3
 80087b4:	e7f9      	b.n	80087aa <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 80087b6:	b1a5      	cbz	r5, 80087e2 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 80087b8:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087ba:	4629      	mov	r1, r5
 80087bc:	f7ff fcfb 	bl	80081b6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80087c0:	4605      	mov	r5, r0
 80087c2:	b138      	cbz	r0, 80087d4 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 80087c4:	4631      	mov	r1, r6
 80087c6:	4620      	mov	r0, r4
 80087c8:	f7ff fee1 	bl	800858e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087cc:	2302      	movs	r3, #2
 80087ce:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80087d2:	e7ea      	b.n	80087aa <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80087d4:	4620      	mov	r0, r4
 80087d6:	f000 fb1d 	bl	8008e14 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80087da:	2303      	movs	r3, #3
 80087dc:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80087e0:	e7e3      	b.n	80087aa <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80087e2:	f000 fb17 	bl	8008e14 <USBD_CtlSendStatus>
 80087e6:	e7e0      	b.n	80087aa <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 80087e8:	b1cd      	cbz	r5, 800881e <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 80087ea:	6841      	ldr	r1, [r0, #4]
 80087ec:	428d      	cmp	r5, r1
 80087ee:	d025      	beq.n	800883c <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087f0:	b2c9      	uxtb	r1, r1
 80087f2:	f7ff fce9 	bl	80081c8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80087f6:	4b13      	ldr	r3, [pc, #76]	@ (8008844 <USBD_SetConfig+0xc8>)
 80087f8:	7819      	ldrb	r1, [r3, #0]
 80087fa:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7ff fcda 	bl	80081b6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8008802:	4605      	mov	r5, r0
 8008804:	b1b0      	cbz	r0, 8008834 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 8008806:	4631      	mov	r1, r6
 8008808:	4620      	mov	r0, r4
 800880a:	f7ff fec0 	bl	800858e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800880e:	7921      	ldrb	r1, [r4, #4]
 8008810:	4620      	mov	r0, r4
 8008812:	f7ff fcd9 	bl	80081c8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008816:	2302      	movs	r3, #2
 8008818:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800881c:	e7c5      	b.n	80087aa <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800881e:	2302      	movs	r3, #2
 8008820:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008824:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008826:	4629      	mov	r1, r5
 8008828:	f7ff fcce 	bl	80081c8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800882c:	4620      	mov	r0, r4
 800882e:	f000 faf1 	bl	8008e14 <USBD_CtlSendStatus>
 8008832:	e7ba      	b.n	80087aa <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8008834:	4620      	mov	r0, r4
 8008836:	f000 faed 	bl	8008e14 <USBD_CtlSendStatus>
 800883a:	e7b6      	b.n	80087aa <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800883c:	f000 faea 	bl	8008e14 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8008840:	2500      	movs	r5, #0
 8008842:	e7b2      	b.n	80087aa <USBD_SetConfig+0x2e>
 8008844:	200061e8 	.word	0x200061e8

08008848 <USBD_GetConfig>:
{
 8008848:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800884a:	88cb      	ldrh	r3, [r1, #6]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d10b      	bne.n	8008868 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8008850:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008854:	b2da      	uxtb	r2, r3
 8008856:	2b02      	cmp	r3, #2
 8008858:	d909      	bls.n	800886e <USBD_GetConfig+0x26>
 800885a:	2a03      	cmp	r2, #3
 800885c:	d111      	bne.n	8008882 <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800885e:	2201      	movs	r2, #1
 8008860:	1d01      	adds	r1, r0, #4
 8008862:	f000 faab 	bl	8008dbc <USBD_CtlSendData>
        break;
 8008866:	e001      	b.n	800886c <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8008868:	f7ff fe91 	bl	800858e <USBD_CtlError>
}
 800886c:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800886e:	b252      	sxtb	r2, r2
 8008870:	b13a      	cbz	r2, 8008882 <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 8008872:	4601      	mov	r1, r0
 8008874:	2300      	movs	r3, #0
 8008876:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800887a:	2201      	movs	r2, #1
 800887c:	f000 fa9e 	bl	8008dbc <USBD_CtlSendData>
        break;
 8008880:	e7f4      	b.n	800886c <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 8008882:	f7ff fe84 	bl	800858e <USBD_CtlError>
}
 8008886:	e7f1      	b.n	800886c <USBD_GetConfig+0x24>

08008888 <USBD_GetStatus>:
{
 8008888:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800888a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800888e:	3b01      	subs	r3, #1
 8008890:	2b02      	cmp	r3, #2
 8008892:	d812      	bhi.n	80088ba <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8008894:	88cb      	ldrh	r3, [r1, #6]
 8008896:	2b02      	cmp	r3, #2
 8008898:	d10c      	bne.n	80088b4 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800889a:	2301      	movs	r3, #1
 800889c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800889e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80088a2:	b10b      	cbz	r3, 80088a8 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088a4:	2303      	movs	r3, #3
 80088a6:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80088a8:	2202      	movs	r2, #2
 80088aa:	f100 010c 	add.w	r1, r0, #12
 80088ae:	f000 fa85 	bl	8008dbc <USBD_CtlSendData>
}
 80088b2:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 80088b4:	f7ff fe6b 	bl	800858e <USBD_CtlError>
        break;
 80088b8:	e7fb      	b.n	80088b2 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 80088ba:	f7ff fe68 	bl	800858e <USBD_CtlError>
}
 80088be:	e7f8      	b.n	80088b2 <USBD_GetStatus+0x2a>

080088c0 <USBD_SetFeature>:
{
 80088c0:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088c2:	884b      	ldrh	r3, [r1, #2]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d004      	beq.n	80088d2 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d007      	beq.n	80088dc <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 80088cc:	f7ff fe5f 	bl	800858e <USBD_CtlError>
}
 80088d0:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80088d2:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80088d6:	f000 fa9d 	bl	8008e14 <USBD_CtlSendStatus>
 80088da:	e7f9      	b.n	80088d0 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80088dc:	888b      	ldrh	r3, [r1, #4]
 80088de:	0a1b      	lsrs	r3, r3, #8
 80088e0:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80088e4:	f000 fa96 	bl	8008e14 <USBD_CtlSendStatus>
 80088e8:	e7f2      	b.n	80088d0 <USBD_SetFeature+0x10>

080088ea <USBD_ClrFeature>:
{
 80088ea:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80088ec:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80088f0:	3b01      	subs	r3, #1
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d809      	bhi.n	800890a <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088f6:	884b      	ldrh	r3, [r1, #2]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d000      	beq.n	80088fe <USBD_ClrFeature+0x14>
}
 80088fc:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80088fe:	2300      	movs	r3, #0
 8008900:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008904:	f000 fa86 	bl	8008e14 <USBD_CtlSendStatus>
 8008908:	e7f8      	b.n	80088fc <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800890a:	f7ff fe40 	bl	800858e <USBD_CtlError>
}
 800890e:	e7f5      	b.n	80088fc <USBD_ClrFeature+0x12>

08008910 <USBD_StdDevReq>:
{
 8008910:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008912:	780c      	ldrb	r4, [r1, #0]
 8008914:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8008918:	2c20      	cmp	r4, #32
 800891a:	d006      	beq.n	800892a <USBD_StdDevReq+0x1a>
 800891c:	2c40      	cmp	r4, #64	@ 0x40
 800891e:	d004      	beq.n	800892a <USBD_StdDevReq+0x1a>
 8008920:	b16c      	cbz	r4, 800893e <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8008922:	f7ff fe34 	bl	800858e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008926:	2400      	movs	r4, #0
      break;
 8008928:	e007      	b.n	800893a <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800892a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800892e:	33ae      	adds	r3, #174	@ 0xae
 8008930:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	4798      	blx	r3
 8008938:	4604      	mov	r4, r0
}
 800893a:	4620      	mov	r0, r4
 800893c:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800893e:	784d      	ldrb	r5, [r1, #1]
 8008940:	2d09      	cmp	r5, #9
 8008942:	d81d      	bhi.n	8008980 <USBD_StdDevReq+0x70>
 8008944:	e8df f005 	tbb	[pc, r5]
 8008948:	161c1912 	.word	0x161c1912
 800894c:	1c05081c 	.word	0x1c05081c
 8008950:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8008952:	f7ff fe26 	bl	80085a2 <USBD_GetDescriptor>
          break;
 8008956:	e7f0      	b.n	800893a <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 8008958:	f7ff fee8 	bl	800872c <USBD_SetAddress>
          break;
 800895c:	e7ed      	b.n	800893a <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 800895e:	f7ff ff0d 	bl	800877c <USBD_SetConfig>
 8008962:	4604      	mov	r4, r0
          break;
 8008964:	e7e9      	b.n	800893a <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 8008966:	f7ff ff6f 	bl	8008848 <USBD_GetConfig>
          break;
 800896a:	e7e6      	b.n	800893a <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 800896c:	f7ff ff8c 	bl	8008888 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8008970:	462c      	mov	r4, r5
          break;
 8008972:	e7e2      	b.n	800893a <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 8008974:	f7ff ffa4 	bl	80088c0 <USBD_SetFeature>
          break;
 8008978:	e7df      	b.n	800893a <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 800897a:	f7ff ffb6 	bl	80088ea <USBD_ClrFeature>
          break;
 800897e:	e7dc      	b.n	800893a <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8008980:	f7ff fe05 	bl	800858e <USBD_CtlError>
          break;
 8008984:	e7d9      	b.n	800893a <USBD_StdDevReq+0x2a>

08008986 <USBD_StdItfReq>:
{
 8008986:	b570      	push	{r4, r5, r6, lr}
 8008988:	4605      	mov	r5, r0
 800898a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800898c:	780b      	ldrb	r3, [r1, #0]
 800898e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008992:	2b20      	cmp	r3, #32
 8008994:	d007      	beq.n	80089a6 <USBD_StdItfReq+0x20>
 8008996:	2b40      	cmp	r3, #64	@ 0x40
 8008998:	d005      	beq.n	80089a6 <USBD_StdItfReq+0x20>
 800899a:	b123      	cbz	r3, 80089a6 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800899c:	f7ff fdf7 	bl	800858e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80089a0:	2600      	movs	r6, #0
}
 80089a2:	4630      	mov	r0, r6
 80089a4:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80089a6:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 80089aa:	3b01      	subs	r3, #1
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d826      	bhi.n	80089fe <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089b0:	7921      	ldrb	r1, [r4, #4]
 80089b2:	2901      	cmp	r1, #1
 80089b4:	d905      	bls.n	80089c2 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 80089b6:	4621      	mov	r1, r4
 80089b8:	4628      	mov	r0, r5
 80089ba:	f7ff fde8 	bl	800858e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80089be:	2600      	movs	r6, #0
 80089c0:	e7ef      	b.n	80089a2 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80089c2:	4628      	mov	r0, r5
 80089c4:	f7ff fcd2 	bl	800836c <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089c8:	b968      	cbnz	r0, 80089e6 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 80089ca:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 80089ce:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80089d2:	6891      	ldr	r1, [r2, #8]
 80089d4:	b189      	cbz	r1, 80089fa <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 80089d6:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80089da:	6893      	ldr	r3, [r2, #8]
 80089dc:	4621      	mov	r1, r4
 80089de:	4628      	mov	r0, r5
 80089e0:	4798      	blx	r3
 80089e2:	4606      	mov	r6, r0
 80089e4:	e000      	b.n	80089e8 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 80089e6:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80089e8:	88e3      	ldrh	r3, [r4, #6]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1d9      	bne.n	80089a2 <USBD_StdItfReq+0x1c>
 80089ee:	2e00      	cmp	r6, #0
 80089f0:	d1d7      	bne.n	80089a2 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 80089f2:	4628      	mov	r0, r5
 80089f4:	f000 fa0e 	bl	8008e14 <USBD_CtlSendStatus>
 80089f8:	e7d3      	b.n	80089a2 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 80089fa:	2603      	movs	r6, #3
 80089fc:	e7f4      	b.n	80089e8 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 80089fe:	4621      	mov	r1, r4
 8008a00:	4628      	mov	r0, r5
 8008a02:	f7ff fdc4 	bl	800858e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008a06:	2600      	movs	r6, #0
          break;
 8008a08:	e7cb      	b.n	80089a2 <USBD_StdItfReq+0x1c>

08008a0a <USBD_StdEPReq>:
{
 8008a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0e:	4606      	mov	r6, r0
 8008a10:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8008a12:	888b      	ldrh	r3, [r1, #4]
 8008a14:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a16:	780c      	ldrb	r4, [r1, #0]
 8008a18:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8008a1c:	2c20      	cmp	r4, #32
 8008a1e:	d008      	beq.n	8008a32 <USBD_StdEPReq+0x28>
 8008a20:	2c40      	cmp	r4, #64	@ 0x40
 8008a22:	d006      	beq.n	8008a32 <USBD_StdEPReq+0x28>
 8008a24:	b1dc      	cbz	r4, 8008a5e <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 8008a26:	f7ff fdb2 	bl	800858e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008a2a:	2400      	movs	r4, #0
}
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a32:	4639      	mov	r1, r7
 8008a34:	4630      	mov	r0, r6
 8008a36:	f7ff fc9b 	bl	8008370 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	f040 80fc 	bne.w	8008c3a <USBD_StdEPReq+0x230>
        pdev->classId = idx;
 8008a42:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 8008a46:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8008a4a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d0eb      	beq.n	8008a2c <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008a54:	4629      	mov	r1, r5
 8008a56:	4630      	mov	r0, r6
 8008a58:	4798      	blx	r3
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	e7e6      	b.n	8008a2c <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 8008a5e:	f891 8001 	ldrb.w	r8, [r1, #1]
 8008a62:	f1b8 0f01 	cmp.w	r8, #1
 8008a66:	d031      	beq.n	8008acc <USBD_StdEPReq+0xc2>
 8008a68:	f1b8 0f03 	cmp.w	r8, #3
 8008a6c:	d005      	beq.n	8008a7a <USBD_StdEPReq+0x70>
 8008a6e:	f1b8 0f00 	cmp.w	r8, #0
 8008a72:	d067      	beq.n	8008b44 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 8008a74:	f7ff fd8b 	bl	800858e <USBD_CtlError>
          break;
 8008a78:	e7d8      	b.n	8008a2c <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 8008a7a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d004      	beq.n	8008a8e <USBD_StdEPReq+0x84>
 8008a84:	2a03      	cmp	r2, #3
 8008a86:	d012      	beq.n	8008aae <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 8008a88:	f7ff fd81 	bl	800858e <USBD_CtlError>
              break;
 8008a8c:	e7ce      	b.n	8008a2c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a8e:	b10f      	cbz	r7, 8008a94 <USBD_StdEPReq+0x8a>
 8008a90:	2f80      	cmp	r7, #128	@ 0x80
 8008a92:	d104      	bne.n	8008a9e <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 8008a94:	4629      	mov	r1, r5
 8008a96:	4630      	mov	r0, r6
 8008a98:	f7ff fd79 	bl	800858e <USBD_CtlError>
 8008a9c:	e7c6      	b.n	8008a2c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a9e:	4639      	mov	r1, r7
 8008aa0:	f7ff fb26 	bl	80080f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aa4:	2180      	movs	r1, #128	@ 0x80
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f7ff fb22 	bl	80080f0 <USBD_LL_StallEP>
 8008aac:	e7be      	b.n	8008a2c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008aae:	884b      	ldrh	r3, [r1, #2]
 8008ab0:	b923      	cbnz	r3, 8008abc <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ab2:	b11f      	cbz	r7, 8008abc <USBD_StdEPReq+0xb2>
 8008ab4:	2f80      	cmp	r7, #128	@ 0x80
 8008ab6:	d001      	beq.n	8008abc <USBD_StdEPReq+0xb2>
 8008ab8:	88cb      	ldrh	r3, [r1, #6]
 8008aba:	b11b      	cbz	r3, 8008ac4 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 8008abc:	4630      	mov	r0, r6
 8008abe:	f000 f9a9 	bl	8008e14 <USBD_CtlSendStatus>
              break;
 8008ac2:	e7b3      	b.n	8008a2c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	f7ff fb13 	bl	80080f0 <USBD_LL_StallEP>
 8008aca:	e7f7      	b.n	8008abc <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 8008acc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d004      	beq.n	8008ae0 <USBD_StdEPReq+0xd6>
 8008ad6:	2a03      	cmp	r2, #3
 8008ad8:	d012      	beq.n	8008b00 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 8008ada:	f7ff fd58 	bl	800858e <USBD_CtlError>
              break;
 8008ade:	e7a5      	b.n	8008a2c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ae0:	b10f      	cbz	r7, 8008ae6 <USBD_StdEPReq+0xdc>
 8008ae2:	2f80      	cmp	r7, #128	@ 0x80
 8008ae4:	d104      	bne.n	8008af0 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f7ff fd50 	bl	800858e <USBD_CtlError>
 8008aee:	e79d      	b.n	8008a2c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008af0:	4639      	mov	r1, r7
 8008af2:	f7ff fafd 	bl	80080f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008af6:	2180      	movs	r1, #128	@ 0x80
 8008af8:	4630      	mov	r0, r6
 8008afa:	f7ff faf9 	bl	80080f0 <USBD_LL_StallEP>
 8008afe:	e795      	b.n	8008a2c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b00:	884b      	ldrh	r3, [r1, #2]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d192      	bne.n	8008a2c <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b06:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 8008b0a:	d117      	bne.n	8008b3c <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f000 f981 	bl	8008e14 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b12:	4639      	mov	r1, r7
 8008b14:	4630      	mov	r0, r6
 8008b16:	f7ff fc2b 	bl	8008370 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d186      	bne.n	8008a2c <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 8008b1e:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8008b22:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8008b26:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8008b2a:	6892      	ldr	r2, [r2, #8]
 8008b2c:	2a00      	cmp	r2, #0
 8008b2e:	f000 8086 	beq.w	8008c3e <USBD_StdEPReq+0x234>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b32:	4629      	mov	r1, r5
 8008b34:	4630      	mov	r0, r6
 8008b36:	4790      	blx	r2
 8008b38:	4604      	mov	r4, r0
 8008b3a:	e777      	b.n	8008a2c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	f7ff fadf 	bl	8008100 <USBD_LL_ClearStallEP>
 8008b42:	e7e3      	b.n	8008b0c <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 8008b44:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008b48:	b2d1      	uxtb	r1, r2
 8008b4a:	2a02      	cmp	r2, #2
 8008b4c:	d006      	beq.n	8008b5c <USBD_StdEPReq+0x152>
 8008b4e:	2903      	cmp	r1, #3
 8008b50:	d029      	beq.n	8008ba6 <USBD_StdEPReq+0x19c>
              USBD_CtlError(pdev, req);
 8008b52:	4629      	mov	r1, r5
 8008b54:	f7ff fd1b 	bl	800858e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008b58:	4644      	mov	r4, r8
              break;
 8008b5a:	e767      	b.n	8008a2c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b5c:	b10f      	cbz	r7, 8008b62 <USBD_StdEPReq+0x158>
 8008b5e:	2f80      	cmp	r7, #128	@ 0x80
 8008b60:	d113      	bne.n	8008b8a <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b62:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b66:	d115      	bne.n	8008b94 <USBD_StdEPReq+0x18a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b68:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b6c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8008b70:	00b9      	lsls	r1, r7, #2
 8008b72:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8008b76:	4431      	add	r1, r6
 8008b78:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b7e:	2202      	movs	r2, #2
 8008b80:	4630      	mov	r0, r6
 8008b82:	f000 f91b 	bl	8008dbc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8008b86:	4644      	mov	r4, r8
              break;
 8008b88:	e750      	b.n	8008a2c <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	f7ff fcff 	bl	800858e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008b90:	4644      	mov	r4, r8
                break;
 8008b92:	e74b      	b.n	8008a2c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b94:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8008b98:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8008b9c:	00b9      	lsls	r1, r7, #2
 8008b9e:	3110      	adds	r1, #16
 8008ba0:	4431      	add	r1, r6
 8008ba2:	3104      	adds	r1, #4
 8008ba4:	e7e9      	b.n	8008b7a <USBD_StdEPReq+0x170>
              if ((ep_addr & 0x80U) == 0x80U)
 8008ba6:	b25b      	sxtb	r3, r3
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	db1f      	blt.n	8008bec <USBD_StdEPReq+0x1e2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008bac:	f007 020f 	and.w	r2, r7, #15
 8008bb0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008bb4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008bb8:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 8008bbc:	b322      	cbz	r2, 8008c08 <USBD_StdEPReq+0x1fe>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	db27      	blt.n	8008c12 <USBD_StdEPReq+0x208>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bc2:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008bca:	009c      	lsls	r4, r3, #2
 8008bcc:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8008bd0:	4434      	add	r4, r6
 8008bd2:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008bd4:	b10f      	cbz	r7, 8008bda <USBD_StdEPReq+0x1d0>
 8008bd6:	2f80      	cmp	r7, #128	@ 0x80
 8008bd8:	d124      	bne.n	8008c24 <USBD_StdEPReq+0x21a>
                pep->status = 0x0000U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bde:	2202      	movs	r2, #2
 8008be0:	4621      	mov	r1, r4
 8008be2:	4630      	mov	r0, r6
 8008be4:	f000 f8ea 	bl	8008dbc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8008be8:	4644      	mov	r4, r8
              break;
 8008bea:	e71f      	b.n	8008a2c <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008bec:	f007 020f 	and.w	r2, r7, #15
 8008bf0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008bf4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008bf8:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8008bfa:	2a00      	cmp	r2, #0
 8008bfc:	d1df      	bne.n	8008bbe <USBD_StdEPReq+0x1b4>
                  USBD_CtlError(pdev, req);
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f7ff fcc5 	bl	800858e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008c04:	4644      	mov	r4, r8
                  break;
 8008c06:	e711      	b.n	8008a2c <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8008c08:	4629      	mov	r1, r5
 8008c0a:	f7ff fcc0 	bl	800858e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008c0e:	4644      	mov	r4, r8
                  break;
 8008c10:	e70c      	b.n	8008a2c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c12:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 8008c16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008c1a:	009c      	lsls	r4, r3, #2
 8008c1c:	3410      	adds	r4, #16
 8008c1e:	4434      	add	r4, r6
 8008c20:	3404      	adds	r4, #4
 8008c22:	e7d7      	b.n	8008bd4 <USBD_StdEPReq+0x1ca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c24:	4639      	mov	r1, r7
 8008c26:	4630      	mov	r0, r6
 8008c28:	f7ff fa1c 	bl	8008064 <USBD_LL_IsStallEP>
 8008c2c:	b110      	cbz	r0, 8008c34 <USBD_StdEPReq+0x22a>
                pep->status = 0x0001U;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	e7d4      	b.n	8008bde <USBD_StdEPReq+0x1d4>
                pep->status = 0x0000U;
 8008c34:	2300      	movs	r3, #0
 8008c36:	6023      	str	r3, [r4, #0]
 8008c38:	e7d1      	b.n	8008bde <USBD_StdEPReq+0x1d4>
  USBD_StatusTypeDef ret = USBD_OK;
 8008c3a:	2400      	movs	r4, #0
 8008c3c:	e6f6      	b.n	8008a2c <USBD_StdEPReq+0x22>
 8008c3e:	4604      	mov	r4, r0
 8008c40:	e6f4      	b.n	8008a2c <USBD_StdEPReq+0x22>

08008c42 <USBD_GetString>:
  if (desc == NULL)
 8008c42:	b300      	cbz	r0, 8008c86 <USBD_GetString+0x44>
{
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	460d      	mov	r5, r1
 8008c48:	4616      	mov	r6, r2
 8008c4a:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008c4c:	f7ff fc81 	bl	8008552 <USBD_GetLen>
 8008c50:	3001      	adds	r0, #1
 8008c52:	0043      	lsls	r3, r0, #1
 8008c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c58:	d806      	bhi.n	8008c68 <USBD_GetString+0x26>
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8008c5e:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c60:	2303      	movs	r3, #3
 8008c62:	706b      	strb	r3, [r5, #1]
  idx++;
 8008c64:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8008c66:	e00a      	b.n	8008c7e <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008c68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c6c:	e7f6      	b.n	8008c5c <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 8008c6e:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8008c70:	3401      	adds	r4, #1
    idx++;
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8008c76:	2100      	movs	r1, #0
 8008c78:	54a9      	strb	r1, [r5, r2]
    idx++;
 8008c7a:	3302      	adds	r3, #2
 8008c7c:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8008c7e:	7822      	ldrb	r2, [r4, #0]
 8008c80:	2a00      	cmp	r2, #0
 8008c82:	d1f4      	bne.n	8008c6e <USBD_GetString+0x2c>
}
 8008c84:	bd70      	pop	{r4, r5, r6, pc}
 8008c86:	4770      	bx	lr

08008c88 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c88:	2312      	movs	r3, #18
 8008c8a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8008c8c:	4800      	ldr	r0, [pc, #0]	@ (8008c90 <USBD_FS_DeviceDescriptor+0x8>)
 8008c8e:	4770      	bx	lr
 8008c90:	20000114 	.word	0x20000114

08008c94 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c94:	2304      	movs	r3, #4
 8008c96:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8008c98:	4800      	ldr	r0, [pc, #0]	@ (8008c9c <USBD_FS_LangIDStrDescriptor+0x8>)
 8008c9a:	4770      	bx	lr
 8008c9c:	20000110 	.word	0x20000110

08008ca0 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d21e      	bcs.n	8008ce4 <IntToUnicode+0x44>
{
 8008ca6:	b500      	push	{lr}
 8008ca8:	e010      	b.n	8008ccc <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008caa:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 8008cae:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8008cb2:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8008cb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008cb8:	f10c 0c01 	add.w	ip, ip, #1
 8008cbc:	f04f 0e00 	mov.w	lr, #0
 8008cc0:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d209      	bcs.n	8008ce0 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8008ccc:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8008cd0:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8008cd4:	d2e9      	bcs.n	8008caa <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8008cd6:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8008cda:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8008cde:	e7e8      	b.n	8008cb2 <IntToUnicode+0x12>
  }
}
 8008ce0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ce4:	4770      	bx	lr
	...

08008ce8 <Get_SerialNum>:
{
 8008ce8:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008cea:	4b0b      	ldr	r3, [pc, #44]	@ (8008d18 <Get_SerialNum+0x30>)
 8008cec:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008cf0:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008cf4:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 8008cf8:	18c0      	adds	r0, r0, r3
 8008cfa:	d100      	bne.n	8008cfe <Get_SerialNum+0x16>
}
 8008cfc:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008cfe:	4d07      	ldr	r5, [pc, #28]	@ (8008d1c <Get_SerialNum+0x34>)
 8008d00:	2208      	movs	r2, #8
 8008d02:	4629      	mov	r1, r5
 8008d04:	f7ff ffcc 	bl	8008ca0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d08:	2204      	movs	r2, #4
 8008d0a:	f105 0110 	add.w	r1, r5, #16
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f7ff ffc6 	bl	8008ca0 <IntToUnicode>
}
 8008d14:	e7f2      	b.n	8008cfc <Get_SerialNum+0x14>
 8008d16:	bf00      	nop
 8008d18:	1fff7000 	.word	0x1fff7000
 8008d1c:	200000f6 	.word	0x200000f6

08008d20 <USBD_FS_SerialStrDescriptor>:
{
 8008d20:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8008d22:	231a      	movs	r3, #26
 8008d24:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8008d26:	f7ff ffdf 	bl	8008ce8 <Get_SerialNum>
}
 8008d2a:	4801      	ldr	r0, [pc, #4]	@ (8008d30 <USBD_FS_SerialStrDescriptor+0x10>)
 8008d2c:	bd08      	pop	{r3, pc}
 8008d2e:	bf00      	nop
 8008d30:	200000f4 	.word	0x200000f4

08008d34 <USBD_FS_ProductStrDescriptor>:
{
 8008d34:	b508      	push	{r3, lr}
 8008d36:	460a      	mov	r2, r1
  if(speed == 0)
 8008d38:	b928      	cbnz	r0, 8008d46 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d3a:	4905      	ldr	r1, [pc, #20]	@ (8008d50 <USBD_FS_ProductStrDescriptor+0x1c>)
 8008d3c:	4805      	ldr	r0, [pc, #20]	@ (8008d54 <USBD_FS_ProductStrDescriptor+0x20>)
 8008d3e:	f7ff ff80 	bl	8008c42 <USBD_GetString>
}
 8008d42:	4803      	ldr	r0, [pc, #12]	@ (8008d50 <USBD_FS_ProductStrDescriptor+0x1c>)
 8008d44:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d46:	4902      	ldr	r1, [pc, #8]	@ (8008d50 <USBD_FS_ProductStrDescriptor+0x1c>)
 8008d48:	4802      	ldr	r0, [pc, #8]	@ (8008d54 <USBD_FS_ProductStrDescriptor+0x20>)
 8008d4a:	f7ff ff7a 	bl	8008c42 <USBD_GetString>
 8008d4e:	e7f8      	b.n	8008d42 <USBD_FS_ProductStrDescriptor+0xe>
 8008d50:	200061ec 	.word	0x200061ec
 8008d54:	08009d28 	.word	0x08009d28

08008d58 <USBD_FS_ManufacturerStrDescriptor>:
{
 8008d58:	b510      	push	{r4, lr}
 8008d5a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d5c:	4c03      	ldr	r4, [pc, #12]	@ (8008d6c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8008d5e:	4621      	mov	r1, r4
 8008d60:	4803      	ldr	r0, [pc, #12]	@ (8008d70 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8008d62:	f7ff ff6e 	bl	8008c42 <USBD_GetString>
}
 8008d66:	4620      	mov	r0, r4
 8008d68:	bd10      	pop	{r4, pc}
 8008d6a:	bf00      	nop
 8008d6c:	200061ec 	.word	0x200061ec
 8008d70:	08009d44 	.word	0x08009d44

08008d74 <USBD_FS_ConfigStrDescriptor>:
{
 8008d74:	b508      	push	{r3, lr}
 8008d76:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8008d78:	b928      	cbnz	r0, 8008d86 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d7a:	4905      	ldr	r1, [pc, #20]	@ (8008d90 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8008d7c:	4805      	ldr	r0, [pc, #20]	@ (8008d94 <USBD_FS_ConfigStrDescriptor+0x20>)
 8008d7e:	f7ff ff60 	bl	8008c42 <USBD_GetString>
}
 8008d82:	4803      	ldr	r0, [pc, #12]	@ (8008d90 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8008d84:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d86:	4902      	ldr	r1, [pc, #8]	@ (8008d90 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8008d88:	4802      	ldr	r0, [pc, #8]	@ (8008d94 <USBD_FS_ConfigStrDescriptor+0x20>)
 8008d8a:	f7ff ff5a 	bl	8008c42 <USBD_GetString>
 8008d8e:	e7f8      	b.n	8008d82 <USBD_FS_ConfigStrDescriptor+0xe>
 8008d90:	200061ec 	.word	0x200061ec
 8008d94:	08009d58 	.word	0x08009d58

08008d98 <USBD_FS_InterfaceStrDescriptor>:
{
 8008d98:	b508      	push	{r3, lr}
 8008d9a:	460a      	mov	r2, r1
  if(speed == 0)
 8008d9c:	b928      	cbnz	r0, 8008daa <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d9e:	4905      	ldr	r1, [pc, #20]	@ (8008db4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8008da0:	4805      	ldr	r0, [pc, #20]	@ (8008db8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8008da2:	f7ff ff4e 	bl	8008c42 <USBD_GetString>
}
 8008da6:	4803      	ldr	r0, [pc, #12]	@ (8008db4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8008da8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008daa:	4902      	ldr	r1, [pc, #8]	@ (8008db4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8008dac:	4802      	ldr	r0, [pc, #8]	@ (8008db8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8008dae:	f7ff ff48 	bl	8008c42 <USBD_GetString>
 8008db2:	e7f8      	b.n	8008da6 <USBD_FS_InterfaceStrDescriptor+0xe>
 8008db4:	200061ec 	.word	0x200061ec
 8008db8:	08009d64 	.word	0x08009d64

08008dbc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008dbc:	b508      	push	{r3, lr}
 8008dbe:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008dc6:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008dc8:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dca:	460a      	mov	r2, r1
 8008dcc:	2100      	movs	r1, #0
 8008dce:	f7ff f9a7 	bl	8008120 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	bd08      	pop	{r3, pc}

08008dd6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008dd6:	b508      	push	{r3, lr}
 8008dd8:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dda:	460a      	mov	r2, r1
 8008ddc:	2100      	movs	r1, #0
 8008dde:	f7ff f99f 	bl	8008120 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008de2:	2000      	movs	r0, #0
 8008de4:	bd08      	pop	{r3, pc}

08008de6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008de6:	b508      	push	{r3, lr}
 8008de8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008dea:	2203      	movs	r2, #3
 8008dec:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008df0:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008df4:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008df8:	460a      	mov	r2, r1
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	f7ff f998 	bl	8008130 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008e00:	2000      	movs	r0, #0
 8008e02:	bd08      	pop	{r3, pc}

08008e04 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e04:	b508      	push	{r3, lr}
 8008e06:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e08:	460a      	mov	r2, r1
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	f7ff f990 	bl	8008130 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008e10:	2000      	movs	r0, #0
 8008e12:	bd08      	pop	{r3, pc}

08008e14 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e14:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e16:	2204      	movs	r2, #4
 8008e18:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	461a      	mov	r2, r3
 8008e20:	4619      	mov	r1, r3
 8008e22:	f7ff f97d 	bl	8008120 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008e26:	2000      	movs	r0, #0
 8008e28:	bd08      	pop	{r3, pc}

08008e2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e2a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e2c:	2205      	movs	r2, #5
 8008e2e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e32:	2300      	movs	r3, #0
 8008e34:	461a      	mov	r2, r3
 8008e36:	4619      	mov	r1, r3
 8008e38:	f7ff f97a 	bl	8008130 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	bd08      	pop	{r3, pc}

08008e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008e40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008e78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008e44:	f7fd f928 	bl	8006098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008e48:	480c      	ldr	r0, [pc, #48]	@ (8008e7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008e4a:	490d      	ldr	r1, [pc, #52]	@ (8008e80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8008e84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008e50:	e002      	b.n	8008e58 <LoopCopyDataInit>

08008e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008e56:	3304      	adds	r3, #4

08008e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008e5c:	d3f9      	bcc.n	8008e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8008e88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008e60:	4c0a      	ldr	r4, [pc, #40]	@ (8008e8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008e64:	e001      	b.n	8008e6a <LoopFillZerobss>

08008e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008e68:	3204      	adds	r2, #4

08008e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e6c:	d3fb      	bcc.n	8008e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008e6e:	f000 f855 	bl	8008f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e72:	f7f8 ffa7 	bl	8001dc4 <main>
  bx  lr    
 8008e76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008e78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8008e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008e80:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8008e84:	08009e20 	.word	0x08009e20
  ldr r2, =_sbss
 8008e88:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8008e8c:	20006534 	.word	0x20006534

08008e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008e90:	e7fe      	b.n	8008e90 <ADC_IRQHandler>
	...

08008e94 <sniprintf>:
 8008e94:	b40c      	push	{r2, r3}
 8008e96:	b530      	push	{r4, r5, lr}
 8008e98:	4b18      	ldr	r3, [pc, #96]	@ (8008efc <sniprintf+0x68>)
 8008e9a:	1e0c      	subs	r4, r1, #0
 8008e9c:	681d      	ldr	r5, [r3, #0]
 8008e9e:	b09d      	sub	sp, #116	@ 0x74
 8008ea0:	da08      	bge.n	8008eb4 <sniprintf+0x20>
 8008ea2:	238b      	movs	r3, #139	@ 0x8b
 8008ea4:	602b      	str	r3, [r5, #0]
 8008ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eaa:	b01d      	add	sp, #116	@ 0x74
 8008eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008eb0:	b002      	add	sp, #8
 8008eb2:	4770      	bx	lr
 8008eb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008eb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008ebc:	f04f 0300 	mov.w	r3, #0
 8008ec0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008ec2:	bf14      	ite	ne
 8008ec4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ec8:	4623      	moveq	r3, r4
 8008eca:	9304      	str	r3, [sp, #16]
 8008ecc:	9307      	str	r3, [sp, #28]
 8008ece:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ed2:	9002      	str	r0, [sp, #8]
 8008ed4:	9006      	str	r0, [sp, #24]
 8008ed6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008eda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008edc:	ab21      	add	r3, sp, #132	@ 0x84
 8008ede:	a902      	add	r1, sp, #8
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	9301      	str	r3, [sp, #4]
 8008ee4:	f000 f9a6 	bl	8009234 <_svfiprintf_r>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	bfbc      	itt	lt
 8008eec:	238b      	movlt	r3, #139	@ 0x8b
 8008eee:	602b      	strlt	r3, [r5, #0]
 8008ef0:	2c00      	cmp	r4, #0
 8008ef2:	d0da      	beq.n	8008eaa <sniprintf+0x16>
 8008ef4:	9b02      	ldr	r3, [sp, #8]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	701a      	strb	r2, [r3, #0]
 8008efa:	e7d6      	b.n	8008eaa <sniprintf+0x16>
 8008efc:	20000144 	.word	0x20000144

08008f00 <memset>:
 8008f00:	4402      	add	r2, r0
 8008f02:	4603      	mov	r3, r0
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d100      	bne.n	8008f0a <memset+0xa>
 8008f08:	4770      	bx	lr
 8008f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f0e:	e7f9      	b.n	8008f04 <memset+0x4>

08008f10 <__errno>:
 8008f10:	4b01      	ldr	r3, [pc, #4]	@ (8008f18 <__errno+0x8>)
 8008f12:	6818      	ldr	r0, [r3, #0]
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	20000144 	.word	0x20000144

08008f1c <__libc_init_array>:
 8008f1c:	b570      	push	{r4, r5, r6, lr}
 8008f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f54 <__libc_init_array+0x38>)
 8008f20:	4d0d      	ldr	r5, [pc, #52]	@ (8008f58 <__libc_init_array+0x3c>)
 8008f22:	1b5b      	subs	r3, r3, r5
 8008f24:	109c      	asrs	r4, r3, #2
 8008f26:	2600      	movs	r6, #0
 8008f28:	42a6      	cmp	r6, r4
 8008f2a:	d109      	bne.n	8008f40 <__libc_init_array+0x24>
 8008f2c:	f000 fde8 	bl	8009b00 <_init>
 8008f30:	4d0a      	ldr	r5, [pc, #40]	@ (8008f5c <__libc_init_array+0x40>)
 8008f32:	4b0b      	ldr	r3, [pc, #44]	@ (8008f60 <__libc_init_array+0x44>)
 8008f34:	1b5b      	subs	r3, r3, r5
 8008f36:	109c      	asrs	r4, r3, #2
 8008f38:	2600      	movs	r6, #0
 8008f3a:	42a6      	cmp	r6, r4
 8008f3c:	d105      	bne.n	8008f4a <__libc_init_array+0x2e>
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
 8008f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f44:	4798      	blx	r3
 8008f46:	3601      	adds	r6, #1
 8008f48:	e7ee      	b.n	8008f28 <__libc_init_array+0xc>
 8008f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f4e:	4798      	blx	r3
 8008f50:	3601      	adds	r6, #1
 8008f52:	e7f2      	b.n	8008f3a <__libc_init_array+0x1e>
 8008f54:	08009e18 	.word	0x08009e18
 8008f58:	08009e18 	.word	0x08009e18
 8008f5c:	08009e18 	.word	0x08009e18
 8008f60:	08009e1c 	.word	0x08009e1c

08008f64 <__retarget_lock_acquire_recursive>:
 8008f64:	4770      	bx	lr

08008f66 <__retarget_lock_release_recursive>:
 8008f66:	4770      	bx	lr

08008f68 <memcpy>:
 8008f68:	440a      	add	r2, r1
 8008f6a:	4291      	cmp	r1, r2
 8008f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f70:	d100      	bne.n	8008f74 <memcpy+0xc>
 8008f72:	4770      	bx	lr
 8008f74:	b510      	push	{r4, lr}
 8008f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f7e:	4291      	cmp	r1, r2
 8008f80:	d1f9      	bne.n	8008f76 <memcpy+0xe>
 8008f82:	bd10      	pop	{r4, pc}

08008f84 <_free_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4605      	mov	r5, r0
 8008f88:	2900      	cmp	r1, #0
 8008f8a:	d041      	beq.n	8009010 <_free_r+0x8c>
 8008f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f90:	1f0c      	subs	r4, r1, #4
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	bfb8      	it	lt
 8008f96:	18e4      	addlt	r4, r4, r3
 8008f98:	f000 f8e0 	bl	800915c <__malloc_lock>
 8008f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8009014 <_free_r+0x90>)
 8008f9e:	6813      	ldr	r3, [r2, #0]
 8008fa0:	b933      	cbnz	r3, 8008fb0 <_free_r+0x2c>
 8008fa2:	6063      	str	r3, [r4, #4]
 8008fa4:	6014      	str	r4, [r2, #0]
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fac:	f000 b8dc 	b.w	8009168 <__malloc_unlock>
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	d908      	bls.n	8008fc6 <_free_r+0x42>
 8008fb4:	6820      	ldr	r0, [r4, #0]
 8008fb6:	1821      	adds	r1, r4, r0
 8008fb8:	428b      	cmp	r3, r1
 8008fba:	bf01      	itttt	eq
 8008fbc:	6819      	ldreq	r1, [r3, #0]
 8008fbe:	685b      	ldreq	r3, [r3, #4]
 8008fc0:	1809      	addeq	r1, r1, r0
 8008fc2:	6021      	streq	r1, [r4, #0]
 8008fc4:	e7ed      	b.n	8008fa2 <_free_r+0x1e>
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	b10b      	cbz	r3, 8008fd0 <_free_r+0x4c>
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	d9fa      	bls.n	8008fc6 <_free_r+0x42>
 8008fd0:	6811      	ldr	r1, [r2, #0]
 8008fd2:	1850      	adds	r0, r2, r1
 8008fd4:	42a0      	cmp	r0, r4
 8008fd6:	d10b      	bne.n	8008ff0 <_free_r+0x6c>
 8008fd8:	6820      	ldr	r0, [r4, #0]
 8008fda:	4401      	add	r1, r0
 8008fdc:	1850      	adds	r0, r2, r1
 8008fde:	4283      	cmp	r3, r0
 8008fe0:	6011      	str	r1, [r2, #0]
 8008fe2:	d1e0      	bne.n	8008fa6 <_free_r+0x22>
 8008fe4:	6818      	ldr	r0, [r3, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	6053      	str	r3, [r2, #4]
 8008fea:	4408      	add	r0, r1
 8008fec:	6010      	str	r0, [r2, #0]
 8008fee:	e7da      	b.n	8008fa6 <_free_r+0x22>
 8008ff0:	d902      	bls.n	8008ff8 <_free_r+0x74>
 8008ff2:	230c      	movs	r3, #12
 8008ff4:	602b      	str	r3, [r5, #0]
 8008ff6:	e7d6      	b.n	8008fa6 <_free_r+0x22>
 8008ff8:	6820      	ldr	r0, [r4, #0]
 8008ffa:	1821      	adds	r1, r4, r0
 8008ffc:	428b      	cmp	r3, r1
 8008ffe:	bf04      	itt	eq
 8009000:	6819      	ldreq	r1, [r3, #0]
 8009002:	685b      	ldreq	r3, [r3, #4]
 8009004:	6063      	str	r3, [r4, #4]
 8009006:	bf04      	itt	eq
 8009008:	1809      	addeq	r1, r1, r0
 800900a:	6021      	streq	r1, [r4, #0]
 800900c:	6054      	str	r4, [r2, #4]
 800900e:	e7ca      	b.n	8008fa6 <_free_r+0x22>
 8009010:	bd38      	pop	{r3, r4, r5, pc}
 8009012:	bf00      	nop
 8009014:	20006530 	.word	0x20006530

08009018 <sbrk_aligned>:
 8009018:	b570      	push	{r4, r5, r6, lr}
 800901a:	4e0f      	ldr	r6, [pc, #60]	@ (8009058 <sbrk_aligned+0x40>)
 800901c:	460c      	mov	r4, r1
 800901e:	6831      	ldr	r1, [r6, #0]
 8009020:	4605      	mov	r5, r0
 8009022:	b911      	cbnz	r1, 800902a <sbrk_aligned+0x12>
 8009024:	f000 fbaa 	bl	800977c <_sbrk_r>
 8009028:	6030      	str	r0, [r6, #0]
 800902a:	4621      	mov	r1, r4
 800902c:	4628      	mov	r0, r5
 800902e:	f000 fba5 	bl	800977c <_sbrk_r>
 8009032:	1c43      	adds	r3, r0, #1
 8009034:	d103      	bne.n	800903e <sbrk_aligned+0x26>
 8009036:	f04f 34ff 	mov.w	r4, #4294967295
 800903a:	4620      	mov	r0, r4
 800903c:	bd70      	pop	{r4, r5, r6, pc}
 800903e:	1cc4      	adds	r4, r0, #3
 8009040:	f024 0403 	bic.w	r4, r4, #3
 8009044:	42a0      	cmp	r0, r4
 8009046:	d0f8      	beq.n	800903a <sbrk_aligned+0x22>
 8009048:	1a21      	subs	r1, r4, r0
 800904a:	4628      	mov	r0, r5
 800904c:	f000 fb96 	bl	800977c <_sbrk_r>
 8009050:	3001      	adds	r0, #1
 8009052:	d1f2      	bne.n	800903a <sbrk_aligned+0x22>
 8009054:	e7ef      	b.n	8009036 <sbrk_aligned+0x1e>
 8009056:	bf00      	nop
 8009058:	2000652c 	.word	0x2000652c

0800905c <_malloc_r>:
 800905c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009060:	1ccd      	adds	r5, r1, #3
 8009062:	f025 0503 	bic.w	r5, r5, #3
 8009066:	3508      	adds	r5, #8
 8009068:	2d0c      	cmp	r5, #12
 800906a:	bf38      	it	cc
 800906c:	250c      	movcc	r5, #12
 800906e:	2d00      	cmp	r5, #0
 8009070:	4606      	mov	r6, r0
 8009072:	db01      	blt.n	8009078 <_malloc_r+0x1c>
 8009074:	42a9      	cmp	r1, r5
 8009076:	d904      	bls.n	8009082 <_malloc_r+0x26>
 8009078:	230c      	movs	r3, #12
 800907a:	6033      	str	r3, [r6, #0]
 800907c:	2000      	movs	r0, #0
 800907e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009082:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009158 <_malloc_r+0xfc>
 8009086:	f000 f869 	bl	800915c <__malloc_lock>
 800908a:	f8d8 3000 	ldr.w	r3, [r8]
 800908e:	461c      	mov	r4, r3
 8009090:	bb44      	cbnz	r4, 80090e4 <_malloc_r+0x88>
 8009092:	4629      	mov	r1, r5
 8009094:	4630      	mov	r0, r6
 8009096:	f7ff ffbf 	bl	8009018 <sbrk_aligned>
 800909a:	1c43      	adds	r3, r0, #1
 800909c:	4604      	mov	r4, r0
 800909e:	d158      	bne.n	8009152 <_malloc_r+0xf6>
 80090a0:	f8d8 4000 	ldr.w	r4, [r8]
 80090a4:	4627      	mov	r7, r4
 80090a6:	2f00      	cmp	r7, #0
 80090a8:	d143      	bne.n	8009132 <_malloc_r+0xd6>
 80090aa:	2c00      	cmp	r4, #0
 80090ac:	d04b      	beq.n	8009146 <_malloc_r+0xea>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	4639      	mov	r1, r7
 80090b2:	4630      	mov	r0, r6
 80090b4:	eb04 0903 	add.w	r9, r4, r3
 80090b8:	f000 fb60 	bl	800977c <_sbrk_r>
 80090bc:	4581      	cmp	r9, r0
 80090be:	d142      	bne.n	8009146 <_malloc_r+0xea>
 80090c0:	6821      	ldr	r1, [r4, #0]
 80090c2:	1a6d      	subs	r5, r5, r1
 80090c4:	4629      	mov	r1, r5
 80090c6:	4630      	mov	r0, r6
 80090c8:	f7ff ffa6 	bl	8009018 <sbrk_aligned>
 80090cc:	3001      	adds	r0, #1
 80090ce:	d03a      	beq.n	8009146 <_malloc_r+0xea>
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	442b      	add	r3, r5
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	f8d8 3000 	ldr.w	r3, [r8]
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	bb62      	cbnz	r2, 8009138 <_malloc_r+0xdc>
 80090de:	f8c8 7000 	str.w	r7, [r8]
 80090e2:	e00f      	b.n	8009104 <_malloc_r+0xa8>
 80090e4:	6822      	ldr	r2, [r4, #0]
 80090e6:	1b52      	subs	r2, r2, r5
 80090e8:	d420      	bmi.n	800912c <_malloc_r+0xd0>
 80090ea:	2a0b      	cmp	r2, #11
 80090ec:	d917      	bls.n	800911e <_malloc_r+0xc2>
 80090ee:	1961      	adds	r1, r4, r5
 80090f0:	42a3      	cmp	r3, r4
 80090f2:	6025      	str	r5, [r4, #0]
 80090f4:	bf18      	it	ne
 80090f6:	6059      	strne	r1, [r3, #4]
 80090f8:	6863      	ldr	r3, [r4, #4]
 80090fa:	bf08      	it	eq
 80090fc:	f8c8 1000 	streq.w	r1, [r8]
 8009100:	5162      	str	r2, [r4, r5]
 8009102:	604b      	str	r3, [r1, #4]
 8009104:	4630      	mov	r0, r6
 8009106:	f000 f82f 	bl	8009168 <__malloc_unlock>
 800910a:	f104 000b 	add.w	r0, r4, #11
 800910e:	1d23      	adds	r3, r4, #4
 8009110:	f020 0007 	bic.w	r0, r0, #7
 8009114:	1ac2      	subs	r2, r0, r3
 8009116:	bf1c      	itt	ne
 8009118:	1a1b      	subne	r3, r3, r0
 800911a:	50a3      	strne	r3, [r4, r2]
 800911c:	e7af      	b.n	800907e <_malloc_r+0x22>
 800911e:	6862      	ldr	r2, [r4, #4]
 8009120:	42a3      	cmp	r3, r4
 8009122:	bf0c      	ite	eq
 8009124:	f8c8 2000 	streq.w	r2, [r8]
 8009128:	605a      	strne	r2, [r3, #4]
 800912a:	e7eb      	b.n	8009104 <_malloc_r+0xa8>
 800912c:	4623      	mov	r3, r4
 800912e:	6864      	ldr	r4, [r4, #4]
 8009130:	e7ae      	b.n	8009090 <_malloc_r+0x34>
 8009132:	463c      	mov	r4, r7
 8009134:	687f      	ldr	r7, [r7, #4]
 8009136:	e7b6      	b.n	80090a6 <_malloc_r+0x4a>
 8009138:	461a      	mov	r2, r3
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	42a3      	cmp	r3, r4
 800913e:	d1fb      	bne.n	8009138 <_malloc_r+0xdc>
 8009140:	2300      	movs	r3, #0
 8009142:	6053      	str	r3, [r2, #4]
 8009144:	e7de      	b.n	8009104 <_malloc_r+0xa8>
 8009146:	230c      	movs	r3, #12
 8009148:	6033      	str	r3, [r6, #0]
 800914a:	4630      	mov	r0, r6
 800914c:	f000 f80c 	bl	8009168 <__malloc_unlock>
 8009150:	e794      	b.n	800907c <_malloc_r+0x20>
 8009152:	6005      	str	r5, [r0, #0]
 8009154:	e7d6      	b.n	8009104 <_malloc_r+0xa8>
 8009156:	bf00      	nop
 8009158:	20006530 	.word	0x20006530

0800915c <__malloc_lock>:
 800915c:	4801      	ldr	r0, [pc, #4]	@ (8009164 <__malloc_lock+0x8>)
 800915e:	f7ff bf01 	b.w	8008f64 <__retarget_lock_acquire_recursive>
 8009162:	bf00      	nop
 8009164:	20006528 	.word	0x20006528

08009168 <__malloc_unlock>:
 8009168:	4801      	ldr	r0, [pc, #4]	@ (8009170 <__malloc_unlock+0x8>)
 800916a:	f7ff befc 	b.w	8008f66 <__retarget_lock_release_recursive>
 800916e:	bf00      	nop
 8009170:	20006528 	.word	0x20006528

08009174 <__ssputs_r>:
 8009174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009178:	688e      	ldr	r6, [r1, #8]
 800917a:	461f      	mov	r7, r3
 800917c:	42be      	cmp	r6, r7
 800917e:	4682      	mov	sl, r0
 8009180:	460c      	mov	r4, r1
 8009182:	4690      	mov	r8, r2
 8009184:	4633      	mov	r3, r6
 8009186:	d853      	bhi.n	8009230 <__ssputs_r+0xbc>
 8009188:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800918c:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 8009190:	d02b      	beq.n	80091ea <__ssputs_r+0x76>
 8009192:	6965      	ldr	r5, [r4, #20]
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	6909      	ldr	r1, [r1, #16]
 8009198:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800919c:	eba3 0901 	sub.w	r9, r3, r1
 80091a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091a4:	1c7b      	adds	r3, r7, #1
 80091a6:	106d      	asrs	r5, r5, #1
 80091a8:	444b      	add	r3, r9
 80091aa:	42ab      	cmp	r3, r5
 80091ac:	462a      	mov	r2, r5
 80091ae:	bf84      	itt	hi
 80091b0:	461d      	movhi	r5, r3
 80091b2:	462a      	movhi	r2, r5
 80091b4:	0543      	lsls	r3, r0, #21
 80091b6:	d527      	bpl.n	8009208 <__ssputs_r+0x94>
 80091b8:	4611      	mov	r1, r2
 80091ba:	4650      	mov	r0, sl
 80091bc:	f7ff ff4e 	bl	800905c <_malloc_r>
 80091c0:	4606      	mov	r6, r0
 80091c2:	b358      	cbz	r0, 800921c <__ssputs_r+0xa8>
 80091c4:	6921      	ldr	r1, [r4, #16]
 80091c6:	464a      	mov	r2, r9
 80091c8:	f7ff fece 	bl	8008f68 <memcpy>
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80091d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091d6:	81a3      	strh	r3, [r4, #12]
 80091d8:	6126      	str	r6, [r4, #16]
 80091da:	6165      	str	r5, [r4, #20]
 80091dc:	444e      	add	r6, r9
 80091de:	eba5 0509 	sub.w	r5, r5, r9
 80091e2:	6026      	str	r6, [r4, #0]
 80091e4:	60a5      	str	r5, [r4, #8]
 80091e6:	463e      	mov	r6, r7
 80091e8:	463b      	mov	r3, r7
 80091ea:	461f      	mov	r7, r3
 80091ec:	6820      	ldr	r0, [r4, #0]
 80091ee:	463a      	mov	r2, r7
 80091f0:	4641      	mov	r1, r8
 80091f2:	f000 faa9 	bl	8009748 <memmove>
 80091f6:	68a3      	ldr	r3, [r4, #8]
 80091f8:	1b9b      	subs	r3, r3, r6
 80091fa:	60a3      	str	r3, [r4, #8]
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	443b      	add	r3, r7
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	2000      	movs	r0, #0
 8009204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009208:	4650      	mov	r0, sl
 800920a:	f000 fac7 	bl	800979c <_realloc_r>
 800920e:	4606      	mov	r6, r0
 8009210:	2800      	cmp	r0, #0
 8009212:	d1e1      	bne.n	80091d8 <__ssputs_r+0x64>
 8009214:	6921      	ldr	r1, [r4, #16]
 8009216:	4650      	mov	r0, sl
 8009218:	f7ff feb4 	bl	8008f84 <_free_r>
 800921c:	230c      	movs	r3, #12
 800921e:	f8ca 3000 	str.w	r3, [sl]
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009228:	81a3      	strh	r3, [r4, #12]
 800922a:	f04f 30ff 	mov.w	r0, #4294967295
 800922e:	e7e9      	b.n	8009204 <__ssputs_r+0x90>
 8009230:	463e      	mov	r6, r7
 8009232:	e7db      	b.n	80091ec <__ssputs_r+0x78>

08009234 <_svfiprintf_r>:
 8009234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009238:	4698      	mov	r8, r3
 800923a:	898b      	ldrh	r3, [r1, #12]
 800923c:	061b      	lsls	r3, r3, #24
 800923e:	b09d      	sub	sp, #116	@ 0x74
 8009240:	4607      	mov	r7, r0
 8009242:	460d      	mov	r5, r1
 8009244:	4614      	mov	r4, r2
 8009246:	d510      	bpl.n	800926a <_svfiprintf_r+0x36>
 8009248:	690b      	ldr	r3, [r1, #16]
 800924a:	b973      	cbnz	r3, 800926a <_svfiprintf_r+0x36>
 800924c:	2140      	movs	r1, #64	@ 0x40
 800924e:	f7ff ff05 	bl	800905c <_malloc_r>
 8009252:	6028      	str	r0, [r5, #0]
 8009254:	6128      	str	r0, [r5, #16]
 8009256:	b930      	cbnz	r0, 8009266 <_svfiprintf_r+0x32>
 8009258:	230c      	movs	r3, #12
 800925a:	603b      	str	r3, [r7, #0]
 800925c:	f04f 30ff 	mov.w	r0, #4294967295
 8009260:	b01d      	add	sp, #116	@ 0x74
 8009262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009266:	2340      	movs	r3, #64	@ 0x40
 8009268:	616b      	str	r3, [r5, #20]
 800926a:	2300      	movs	r3, #0
 800926c:	9309      	str	r3, [sp, #36]	@ 0x24
 800926e:	2320      	movs	r3, #32
 8009270:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009274:	f8cd 800c 	str.w	r8, [sp, #12]
 8009278:	2330      	movs	r3, #48	@ 0x30
 800927a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009418 <_svfiprintf_r+0x1e4>
 800927e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009282:	f04f 0901 	mov.w	r9, #1
 8009286:	4623      	mov	r3, r4
 8009288:	469a      	mov	sl, r3
 800928a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800928e:	b10a      	cbz	r2, 8009294 <_svfiprintf_r+0x60>
 8009290:	2a25      	cmp	r2, #37	@ 0x25
 8009292:	d1f9      	bne.n	8009288 <_svfiprintf_r+0x54>
 8009294:	ebba 0b04 	subs.w	fp, sl, r4
 8009298:	d00b      	beq.n	80092b2 <_svfiprintf_r+0x7e>
 800929a:	465b      	mov	r3, fp
 800929c:	4622      	mov	r2, r4
 800929e:	4629      	mov	r1, r5
 80092a0:	4638      	mov	r0, r7
 80092a2:	f7ff ff67 	bl	8009174 <__ssputs_r>
 80092a6:	3001      	adds	r0, #1
 80092a8:	f000 80a7 	beq.w	80093fa <_svfiprintf_r+0x1c6>
 80092ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092ae:	445a      	add	r2, fp
 80092b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80092b2:	f89a 3000 	ldrb.w	r3, [sl]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 809f 	beq.w	80093fa <_svfiprintf_r+0x1c6>
 80092bc:	2300      	movs	r3, #0
 80092be:	f04f 32ff 	mov.w	r2, #4294967295
 80092c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092c6:	f10a 0a01 	add.w	sl, sl, #1
 80092ca:	9304      	str	r3, [sp, #16]
 80092cc:	9307      	str	r3, [sp, #28]
 80092ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80092d4:	4654      	mov	r4, sl
 80092d6:	2205      	movs	r2, #5
 80092d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092dc:	484e      	ldr	r0, [pc, #312]	@ (8009418 <_svfiprintf_r+0x1e4>)
 80092de:	f7f6 ff67 	bl	80001b0 <memchr>
 80092e2:	9a04      	ldr	r2, [sp, #16]
 80092e4:	b9d8      	cbnz	r0, 800931e <_svfiprintf_r+0xea>
 80092e6:	06d0      	lsls	r0, r2, #27
 80092e8:	bf44      	itt	mi
 80092ea:	2320      	movmi	r3, #32
 80092ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092f0:	0711      	lsls	r1, r2, #28
 80092f2:	bf44      	itt	mi
 80092f4:	232b      	movmi	r3, #43	@ 0x2b
 80092f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092fa:	f89a 3000 	ldrb.w	r3, [sl]
 80092fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009300:	d015      	beq.n	800932e <_svfiprintf_r+0xfa>
 8009302:	9a07      	ldr	r2, [sp, #28]
 8009304:	4654      	mov	r4, sl
 8009306:	2000      	movs	r0, #0
 8009308:	f04f 0c0a 	mov.w	ip, #10
 800930c:	4621      	mov	r1, r4
 800930e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009312:	3b30      	subs	r3, #48	@ 0x30
 8009314:	2b09      	cmp	r3, #9
 8009316:	d94b      	bls.n	80093b0 <_svfiprintf_r+0x17c>
 8009318:	b1b0      	cbz	r0, 8009348 <_svfiprintf_r+0x114>
 800931a:	9207      	str	r2, [sp, #28]
 800931c:	e014      	b.n	8009348 <_svfiprintf_r+0x114>
 800931e:	eba0 0308 	sub.w	r3, r0, r8
 8009322:	fa09 f303 	lsl.w	r3, r9, r3
 8009326:	4313      	orrs	r3, r2
 8009328:	9304      	str	r3, [sp, #16]
 800932a:	46a2      	mov	sl, r4
 800932c:	e7d2      	b.n	80092d4 <_svfiprintf_r+0xa0>
 800932e:	9b03      	ldr	r3, [sp, #12]
 8009330:	1d19      	adds	r1, r3, #4
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	9103      	str	r1, [sp, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	bfbb      	ittet	lt
 800933a:	425b      	neglt	r3, r3
 800933c:	f042 0202 	orrlt.w	r2, r2, #2
 8009340:	9307      	strge	r3, [sp, #28]
 8009342:	9307      	strlt	r3, [sp, #28]
 8009344:	bfb8      	it	lt
 8009346:	9204      	strlt	r2, [sp, #16]
 8009348:	7823      	ldrb	r3, [r4, #0]
 800934a:	2b2e      	cmp	r3, #46	@ 0x2e
 800934c:	d10a      	bne.n	8009364 <_svfiprintf_r+0x130>
 800934e:	7863      	ldrb	r3, [r4, #1]
 8009350:	2b2a      	cmp	r3, #42	@ 0x2a
 8009352:	d132      	bne.n	80093ba <_svfiprintf_r+0x186>
 8009354:	9b03      	ldr	r3, [sp, #12]
 8009356:	1d1a      	adds	r2, r3, #4
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	9203      	str	r2, [sp, #12]
 800935c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009360:	3402      	adds	r4, #2
 8009362:	9305      	str	r3, [sp, #20]
 8009364:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009428 <_svfiprintf_r+0x1f4>
 8009368:	7821      	ldrb	r1, [r4, #0]
 800936a:	2203      	movs	r2, #3
 800936c:	4650      	mov	r0, sl
 800936e:	f7f6 ff1f 	bl	80001b0 <memchr>
 8009372:	b138      	cbz	r0, 8009384 <_svfiprintf_r+0x150>
 8009374:	9b04      	ldr	r3, [sp, #16]
 8009376:	eba0 000a 	sub.w	r0, r0, sl
 800937a:	2240      	movs	r2, #64	@ 0x40
 800937c:	4082      	lsls	r2, r0
 800937e:	4313      	orrs	r3, r2
 8009380:	3401      	adds	r4, #1
 8009382:	9304      	str	r3, [sp, #16]
 8009384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009388:	4824      	ldr	r0, [pc, #144]	@ (800941c <_svfiprintf_r+0x1e8>)
 800938a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800938e:	2206      	movs	r2, #6
 8009390:	f7f6 ff0e 	bl	80001b0 <memchr>
 8009394:	2800      	cmp	r0, #0
 8009396:	d036      	beq.n	8009406 <_svfiprintf_r+0x1d2>
 8009398:	4b21      	ldr	r3, [pc, #132]	@ (8009420 <_svfiprintf_r+0x1ec>)
 800939a:	bb1b      	cbnz	r3, 80093e4 <_svfiprintf_r+0x1b0>
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	3307      	adds	r3, #7
 80093a0:	f023 0307 	bic.w	r3, r3, #7
 80093a4:	3308      	adds	r3, #8
 80093a6:	9303      	str	r3, [sp, #12]
 80093a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093aa:	4433      	add	r3, r6
 80093ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80093ae:	e76a      	b.n	8009286 <_svfiprintf_r+0x52>
 80093b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80093b4:	460c      	mov	r4, r1
 80093b6:	2001      	movs	r0, #1
 80093b8:	e7a8      	b.n	800930c <_svfiprintf_r+0xd8>
 80093ba:	2300      	movs	r3, #0
 80093bc:	3401      	adds	r4, #1
 80093be:	9305      	str	r3, [sp, #20]
 80093c0:	4619      	mov	r1, r3
 80093c2:	f04f 0c0a 	mov.w	ip, #10
 80093c6:	4620      	mov	r0, r4
 80093c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093cc:	3a30      	subs	r2, #48	@ 0x30
 80093ce:	2a09      	cmp	r2, #9
 80093d0:	d903      	bls.n	80093da <_svfiprintf_r+0x1a6>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d0c6      	beq.n	8009364 <_svfiprintf_r+0x130>
 80093d6:	9105      	str	r1, [sp, #20]
 80093d8:	e7c4      	b.n	8009364 <_svfiprintf_r+0x130>
 80093da:	fb0c 2101 	mla	r1, ip, r1, r2
 80093de:	4604      	mov	r4, r0
 80093e0:	2301      	movs	r3, #1
 80093e2:	e7f0      	b.n	80093c6 <_svfiprintf_r+0x192>
 80093e4:	ab03      	add	r3, sp, #12
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	462a      	mov	r2, r5
 80093ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009424 <_svfiprintf_r+0x1f0>)
 80093ec:	a904      	add	r1, sp, #16
 80093ee:	4638      	mov	r0, r7
 80093f0:	f3af 8000 	nop.w
 80093f4:	1c42      	adds	r2, r0, #1
 80093f6:	4606      	mov	r6, r0
 80093f8:	d1d6      	bne.n	80093a8 <_svfiprintf_r+0x174>
 80093fa:	89ab      	ldrh	r3, [r5, #12]
 80093fc:	065b      	lsls	r3, r3, #25
 80093fe:	f53f af2d 	bmi.w	800925c <_svfiprintf_r+0x28>
 8009402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009404:	e72c      	b.n	8009260 <_svfiprintf_r+0x2c>
 8009406:	ab03      	add	r3, sp, #12
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	462a      	mov	r2, r5
 800940c:	4b05      	ldr	r3, [pc, #20]	@ (8009424 <_svfiprintf_r+0x1f0>)
 800940e:	a904      	add	r1, sp, #16
 8009410:	4638      	mov	r0, r7
 8009412:	f000 f879 	bl	8009508 <_printf_i>
 8009416:	e7ed      	b.n	80093f4 <_svfiprintf_r+0x1c0>
 8009418:	08009ddc 	.word	0x08009ddc
 800941c:	08009de6 	.word	0x08009de6
 8009420:	00000000 	.word	0x00000000
 8009424:	08009175 	.word	0x08009175
 8009428:	08009de2 	.word	0x08009de2

0800942c <_printf_common>:
 800942c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009430:	4616      	mov	r6, r2
 8009432:	4698      	mov	r8, r3
 8009434:	688a      	ldr	r2, [r1, #8]
 8009436:	690b      	ldr	r3, [r1, #16]
 8009438:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800943c:	4293      	cmp	r3, r2
 800943e:	bfb8      	it	lt
 8009440:	4613      	movlt	r3, r2
 8009442:	6033      	str	r3, [r6, #0]
 8009444:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009448:	4607      	mov	r7, r0
 800944a:	460c      	mov	r4, r1
 800944c:	b10a      	cbz	r2, 8009452 <_printf_common+0x26>
 800944e:	3301      	adds	r3, #1
 8009450:	6033      	str	r3, [r6, #0]
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	0699      	lsls	r1, r3, #26
 8009456:	bf42      	ittt	mi
 8009458:	6833      	ldrmi	r3, [r6, #0]
 800945a:	3302      	addmi	r3, #2
 800945c:	6033      	strmi	r3, [r6, #0]
 800945e:	6825      	ldr	r5, [r4, #0]
 8009460:	f015 0506 	ands.w	r5, r5, #6
 8009464:	d106      	bne.n	8009474 <_printf_common+0x48>
 8009466:	f104 0a19 	add.w	sl, r4, #25
 800946a:	68e3      	ldr	r3, [r4, #12]
 800946c:	6832      	ldr	r2, [r6, #0]
 800946e:	1a9b      	subs	r3, r3, r2
 8009470:	42ab      	cmp	r3, r5
 8009472:	dc26      	bgt.n	80094c2 <_printf_common+0x96>
 8009474:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009478:	6822      	ldr	r2, [r4, #0]
 800947a:	3b00      	subs	r3, #0
 800947c:	bf18      	it	ne
 800947e:	2301      	movne	r3, #1
 8009480:	0692      	lsls	r2, r2, #26
 8009482:	d42b      	bmi.n	80094dc <_printf_common+0xb0>
 8009484:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009488:	4641      	mov	r1, r8
 800948a:	4638      	mov	r0, r7
 800948c:	47c8      	blx	r9
 800948e:	3001      	adds	r0, #1
 8009490:	d01e      	beq.n	80094d0 <_printf_common+0xa4>
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	6922      	ldr	r2, [r4, #16]
 8009496:	f003 0306 	and.w	r3, r3, #6
 800949a:	2b04      	cmp	r3, #4
 800949c:	bf02      	ittt	eq
 800949e:	68e5      	ldreq	r5, [r4, #12]
 80094a0:	6833      	ldreq	r3, [r6, #0]
 80094a2:	1aed      	subeq	r5, r5, r3
 80094a4:	68a3      	ldr	r3, [r4, #8]
 80094a6:	bf0c      	ite	eq
 80094a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094ac:	2500      	movne	r5, #0
 80094ae:	4293      	cmp	r3, r2
 80094b0:	bfc4      	itt	gt
 80094b2:	1a9b      	subgt	r3, r3, r2
 80094b4:	18ed      	addgt	r5, r5, r3
 80094b6:	2600      	movs	r6, #0
 80094b8:	341a      	adds	r4, #26
 80094ba:	42b5      	cmp	r5, r6
 80094bc:	d11a      	bne.n	80094f4 <_printf_common+0xc8>
 80094be:	2000      	movs	r0, #0
 80094c0:	e008      	b.n	80094d4 <_printf_common+0xa8>
 80094c2:	2301      	movs	r3, #1
 80094c4:	4652      	mov	r2, sl
 80094c6:	4641      	mov	r1, r8
 80094c8:	4638      	mov	r0, r7
 80094ca:	47c8      	blx	r9
 80094cc:	3001      	adds	r0, #1
 80094ce:	d103      	bne.n	80094d8 <_printf_common+0xac>
 80094d0:	f04f 30ff 	mov.w	r0, #4294967295
 80094d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d8:	3501      	adds	r5, #1
 80094da:	e7c6      	b.n	800946a <_printf_common+0x3e>
 80094dc:	18e1      	adds	r1, r4, r3
 80094de:	1c5a      	adds	r2, r3, #1
 80094e0:	2030      	movs	r0, #48	@ 0x30
 80094e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094e6:	4422      	add	r2, r4
 80094e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094f0:	3302      	adds	r3, #2
 80094f2:	e7c7      	b.n	8009484 <_printf_common+0x58>
 80094f4:	2301      	movs	r3, #1
 80094f6:	4622      	mov	r2, r4
 80094f8:	4641      	mov	r1, r8
 80094fa:	4638      	mov	r0, r7
 80094fc:	47c8      	blx	r9
 80094fe:	3001      	adds	r0, #1
 8009500:	d0e6      	beq.n	80094d0 <_printf_common+0xa4>
 8009502:	3601      	adds	r6, #1
 8009504:	e7d9      	b.n	80094ba <_printf_common+0x8e>
	...

08009508 <_printf_i>:
 8009508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800950c:	7e0f      	ldrb	r7, [r1, #24]
 800950e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009510:	2f78      	cmp	r7, #120	@ 0x78
 8009512:	4691      	mov	r9, r2
 8009514:	4680      	mov	r8, r0
 8009516:	460c      	mov	r4, r1
 8009518:	469a      	mov	sl, r3
 800951a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800951e:	d807      	bhi.n	8009530 <_printf_i+0x28>
 8009520:	2f62      	cmp	r7, #98	@ 0x62
 8009522:	d80a      	bhi.n	800953a <_printf_i+0x32>
 8009524:	2f00      	cmp	r7, #0
 8009526:	f000 80d2 	beq.w	80096ce <_printf_i+0x1c6>
 800952a:	2f58      	cmp	r7, #88	@ 0x58
 800952c:	f000 80b7 	beq.w	800969e <_printf_i+0x196>
 8009530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009534:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009538:	e03a      	b.n	80095b0 <_printf_i+0xa8>
 800953a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800953e:	2b15      	cmp	r3, #21
 8009540:	d8f6      	bhi.n	8009530 <_printf_i+0x28>
 8009542:	a101      	add	r1, pc, #4	@ (adr r1, 8009548 <_printf_i+0x40>)
 8009544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009548:	080095a1 	.word	0x080095a1
 800954c:	080095b5 	.word	0x080095b5
 8009550:	08009531 	.word	0x08009531
 8009554:	08009531 	.word	0x08009531
 8009558:	08009531 	.word	0x08009531
 800955c:	08009531 	.word	0x08009531
 8009560:	080095b5 	.word	0x080095b5
 8009564:	08009531 	.word	0x08009531
 8009568:	08009531 	.word	0x08009531
 800956c:	08009531 	.word	0x08009531
 8009570:	08009531 	.word	0x08009531
 8009574:	080096b5 	.word	0x080096b5
 8009578:	080095df 	.word	0x080095df
 800957c:	0800966b 	.word	0x0800966b
 8009580:	08009531 	.word	0x08009531
 8009584:	08009531 	.word	0x08009531
 8009588:	080096d7 	.word	0x080096d7
 800958c:	08009531 	.word	0x08009531
 8009590:	080095df 	.word	0x080095df
 8009594:	08009531 	.word	0x08009531
 8009598:	08009531 	.word	0x08009531
 800959c:	08009673 	.word	0x08009673
 80095a0:	6833      	ldr	r3, [r6, #0]
 80095a2:	1d1a      	adds	r2, r3, #4
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6032      	str	r2, [r6, #0]
 80095a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80095b0:	2301      	movs	r3, #1
 80095b2:	e09d      	b.n	80096f0 <_printf_i+0x1e8>
 80095b4:	6833      	ldr	r3, [r6, #0]
 80095b6:	6820      	ldr	r0, [r4, #0]
 80095b8:	1d19      	adds	r1, r3, #4
 80095ba:	6031      	str	r1, [r6, #0]
 80095bc:	0606      	lsls	r6, r0, #24
 80095be:	d501      	bpl.n	80095c4 <_printf_i+0xbc>
 80095c0:	681d      	ldr	r5, [r3, #0]
 80095c2:	e003      	b.n	80095cc <_printf_i+0xc4>
 80095c4:	0645      	lsls	r5, r0, #25
 80095c6:	d5fb      	bpl.n	80095c0 <_printf_i+0xb8>
 80095c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80095cc:	2d00      	cmp	r5, #0
 80095ce:	da03      	bge.n	80095d8 <_printf_i+0xd0>
 80095d0:	232d      	movs	r3, #45	@ 0x2d
 80095d2:	426d      	negs	r5, r5
 80095d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095d8:	4859      	ldr	r0, [pc, #356]	@ (8009740 <_printf_i+0x238>)
 80095da:	230a      	movs	r3, #10
 80095dc:	e010      	b.n	8009600 <_printf_i+0xf8>
 80095de:	6821      	ldr	r1, [r4, #0]
 80095e0:	6833      	ldr	r3, [r6, #0]
 80095e2:	0608      	lsls	r0, r1, #24
 80095e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80095e8:	d402      	bmi.n	80095f0 <_printf_i+0xe8>
 80095ea:	0649      	lsls	r1, r1, #25
 80095ec:	bf48      	it	mi
 80095ee:	b2ad      	uxthmi	r5, r5
 80095f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80095f2:	4853      	ldr	r0, [pc, #332]	@ (8009740 <_printf_i+0x238>)
 80095f4:	6033      	str	r3, [r6, #0]
 80095f6:	d159      	bne.n	80096ac <_printf_i+0x1a4>
 80095f8:	2308      	movs	r3, #8
 80095fa:	2100      	movs	r1, #0
 80095fc:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009600:	6866      	ldr	r6, [r4, #4]
 8009602:	60a6      	str	r6, [r4, #8]
 8009604:	2e00      	cmp	r6, #0
 8009606:	db05      	blt.n	8009614 <_printf_i+0x10c>
 8009608:	6821      	ldr	r1, [r4, #0]
 800960a:	432e      	orrs	r6, r5
 800960c:	f021 0104 	bic.w	r1, r1, #4
 8009610:	6021      	str	r1, [r4, #0]
 8009612:	d04d      	beq.n	80096b0 <_printf_i+0x1a8>
 8009614:	4616      	mov	r6, r2
 8009616:	fbb5 f1f3 	udiv	r1, r5, r3
 800961a:	fb03 5711 	mls	r7, r3, r1, r5
 800961e:	5dc7      	ldrb	r7, [r0, r7]
 8009620:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009624:	462f      	mov	r7, r5
 8009626:	42bb      	cmp	r3, r7
 8009628:	460d      	mov	r5, r1
 800962a:	d9f4      	bls.n	8009616 <_printf_i+0x10e>
 800962c:	2b08      	cmp	r3, #8
 800962e:	d10b      	bne.n	8009648 <_printf_i+0x140>
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	07df      	lsls	r7, r3, #31
 8009634:	d508      	bpl.n	8009648 <_printf_i+0x140>
 8009636:	6923      	ldr	r3, [r4, #16]
 8009638:	6861      	ldr	r1, [r4, #4]
 800963a:	4299      	cmp	r1, r3
 800963c:	bfde      	ittt	le
 800963e:	2330      	movle	r3, #48	@ 0x30
 8009640:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009644:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009648:	1b92      	subs	r2, r2, r6
 800964a:	6122      	str	r2, [r4, #16]
 800964c:	f8cd a000 	str.w	sl, [sp]
 8009650:	464b      	mov	r3, r9
 8009652:	aa03      	add	r2, sp, #12
 8009654:	4621      	mov	r1, r4
 8009656:	4640      	mov	r0, r8
 8009658:	f7ff fee8 	bl	800942c <_printf_common>
 800965c:	3001      	adds	r0, #1
 800965e:	d14c      	bne.n	80096fa <_printf_i+0x1f2>
 8009660:	f04f 30ff 	mov.w	r0, #4294967295
 8009664:	b004      	add	sp, #16
 8009666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	f043 0320 	orr.w	r3, r3, #32
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	4834      	ldr	r0, [pc, #208]	@ (8009744 <_printf_i+0x23c>)
 8009674:	2778      	movs	r7, #120	@ 0x78
 8009676:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	6831      	ldr	r1, [r6, #0]
 800967e:	061f      	lsls	r7, r3, #24
 8009680:	f851 5b04 	ldr.w	r5, [r1], #4
 8009684:	d402      	bmi.n	800968c <_printf_i+0x184>
 8009686:	065f      	lsls	r7, r3, #25
 8009688:	bf48      	it	mi
 800968a:	b2ad      	uxthmi	r5, r5
 800968c:	6031      	str	r1, [r6, #0]
 800968e:	07d9      	lsls	r1, r3, #31
 8009690:	bf44      	itt	mi
 8009692:	f043 0320 	orrmi.w	r3, r3, #32
 8009696:	6023      	strmi	r3, [r4, #0]
 8009698:	b11d      	cbz	r5, 80096a2 <_printf_i+0x19a>
 800969a:	2310      	movs	r3, #16
 800969c:	e7ad      	b.n	80095fa <_printf_i+0xf2>
 800969e:	4828      	ldr	r0, [pc, #160]	@ (8009740 <_printf_i+0x238>)
 80096a0:	e7e9      	b.n	8009676 <_printf_i+0x16e>
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	f023 0320 	bic.w	r3, r3, #32
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	e7f6      	b.n	800969a <_printf_i+0x192>
 80096ac:	230a      	movs	r3, #10
 80096ae:	e7a4      	b.n	80095fa <_printf_i+0xf2>
 80096b0:	4616      	mov	r6, r2
 80096b2:	e7bb      	b.n	800962c <_printf_i+0x124>
 80096b4:	6833      	ldr	r3, [r6, #0]
 80096b6:	6825      	ldr	r5, [r4, #0]
 80096b8:	6961      	ldr	r1, [r4, #20]
 80096ba:	1d18      	adds	r0, r3, #4
 80096bc:	6030      	str	r0, [r6, #0]
 80096be:	062e      	lsls	r6, r5, #24
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	d501      	bpl.n	80096c8 <_printf_i+0x1c0>
 80096c4:	6019      	str	r1, [r3, #0]
 80096c6:	e002      	b.n	80096ce <_printf_i+0x1c6>
 80096c8:	0668      	lsls	r0, r5, #25
 80096ca:	d5fb      	bpl.n	80096c4 <_printf_i+0x1bc>
 80096cc:	8019      	strh	r1, [r3, #0]
 80096ce:	2300      	movs	r3, #0
 80096d0:	6123      	str	r3, [r4, #16]
 80096d2:	4616      	mov	r6, r2
 80096d4:	e7ba      	b.n	800964c <_printf_i+0x144>
 80096d6:	6833      	ldr	r3, [r6, #0]
 80096d8:	1d1a      	adds	r2, r3, #4
 80096da:	6032      	str	r2, [r6, #0]
 80096dc:	681e      	ldr	r6, [r3, #0]
 80096de:	6862      	ldr	r2, [r4, #4]
 80096e0:	2100      	movs	r1, #0
 80096e2:	4630      	mov	r0, r6
 80096e4:	f7f6 fd64 	bl	80001b0 <memchr>
 80096e8:	b108      	cbz	r0, 80096ee <_printf_i+0x1e6>
 80096ea:	1b80      	subs	r0, r0, r6
 80096ec:	6060      	str	r0, [r4, #4]
 80096ee:	6863      	ldr	r3, [r4, #4]
 80096f0:	6123      	str	r3, [r4, #16]
 80096f2:	2300      	movs	r3, #0
 80096f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096f8:	e7a8      	b.n	800964c <_printf_i+0x144>
 80096fa:	6923      	ldr	r3, [r4, #16]
 80096fc:	4632      	mov	r2, r6
 80096fe:	4649      	mov	r1, r9
 8009700:	4640      	mov	r0, r8
 8009702:	47d0      	blx	sl
 8009704:	3001      	adds	r0, #1
 8009706:	d0ab      	beq.n	8009660 <_printf_i+0x158>
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	079b      	lsls	r3, r3, #30
 800970c:	d413      	bmi.n	8009736 <_printf_i+0x22e>
 800970e:	68e0      	ldr	r0, [r4, #12]
 8009710:	9b03      	ldr	r3, [sp, #12]
 8009712:	4298      	cmp	r0, r3
 8009714:	bfb8      	it	lt
 8009716:	4618      	movlt	r0, r3
 8009718:	e7a4      	b.n	8009664 <_printf_i+0x15c>
 800971a:	2301      	movs	r3, #1
 800971c:	4632      	mov	r2, r6
 800971e:	4649      	mov	r1, r9
 8009720:	4640      	mov	r0, r8
 8009722:	47d0      	blx	sl
 8009724:	3001      	adds	r0, #1
 8009726:	d09b      	beq.n	8009660 <_printf_i+0x158>
 8009728:	3501      	adds	r5, #1
 800972a:	68e3      	ldr	r3, [r4, #12]
 800972c:	9903      	ldr	r1, [sp, #12]
 800972e:	1a5b      	subs	r3, r3, r1
 8009730:	42ab      	cmp	r3, r5
 8009732:	dcf2      	bgt.n	800971a <_printf_i+0x212>
 8009734:	e7eb      	b.n	800970e <_printf_i+0x206>
 8009736:	2500      	movs	r5, #0
 8009738:	f104 0619 	add.w	r6, r4, #25
 800973c:	e7f5      	b.n	800972a <_printf_i+0x222>
 800973e:	bf00      	nop
 8009740:	08009ded 	.word	0x08009ded
 8009744:	08009dfe 	.word	0x08009dfe

08009748 <memmove>:
 8009748:	4288      	cmp	r0, r1
 800974a:	b510      	push	{r4, lr}
 800974c:	eb01 0402 	add.w	r4, r1, r2
 8009750:	d902      	bls.n	8009758 <memmove+0x10>
 8009752:	4284      	cmp	r4, r0
 8009754:	4623      	mov	r3, r4
 8009756:	d807      	bhi.n	8009768 <memmove+0x20>
 8009758:	1e43      	subs	r3, r0, #1
 800975a:	42a1      	cmp	r1, r4
 800975c:	d007      	beq.n	800976e <memmove+0x26>
 800975e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009762:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009766:	e7f8      	b.n	800975a <memmove+0x12>
 8009768:	4402      	add	r2, r0
 800976a:	4282      	cmp	r2, r0
 800976c:	d100      	bne.n	8009770 <memmove+0x28>
 800976e:	bd10      	pop	{r4, pc}
 8009770:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8009774:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8009778:	e7f7      	b.n	800976a <memmove+0x22>
	...

0800977c <_sbrk_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4d06      	ldr	r5, [pc, #24]	@ (8009798 <_sbrk_r+0x1c>)
 8009780:	2300      	movs	r3, #0
 8009782:	4604      	mov	r4, r0
 8009784:	4608      	mov	r0, r1
 8009786:	602b      	str	r3, [r5, #0]
 8009788:	f7fc fc62 	bl	8006050 <_sbrk>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	d102      	bne.n	8009796 <_sbrk_r+0x1a>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	b103      	cbz	r3, 8009796 <_sbrk_r+0x1a>
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	bd38      	pop	{r3, r4, r5, pc}
 8009798:	20006524 	.word	0x20006524

0800979c <_realloc_r>:
 800979c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a0:	4607      	mov	r7, r0
 80097a2:	4614      	mov	r4, r2
 80097a4:	460d      	mov	r5, r1
 80097a6:	b921      	cbnz	r1, 80097b2 <_realloc_r+0x16>
 80097a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ac:	4611      	mov	r1, r2
 80097ae:	f7ff bc55 	b.w	800905c <_malloc_r>
 80097b2:	b92a      	cbnz	r2, 80097c0 <_realloc_r+0x24>
 80097b4:	f7ff fbe6 	bl	8008f84 <_free_r>
 80097b8:	4625      	mov	r5, r4
 80097ba:	4628      	mov	r0, r5
 80097bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c0:	f000 f81a 	bl	80097f8 <_malloc_usable_size_r>
 80097c4:	4284      	cmp	r4, r0
 80097c6:	4606      	mov	r6, r0
 80097c8:	d802      	bhi.n	80097d0 <_realloc_r+0x34>
 80097ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097ce:	d8f4      	bhi.n	80097ba <_realloc_r+0x1e>
 80097d0:	4621      	mov	r1, r4
 80097d2:	4638      	mov	r0, r7
 80097d4:	f7ff fc42 	bl	800905c <_malloc_r>
 80097d8:	4680      	mov	r8, r0
 80097da:	b908      	cbnz	r0, 80097e0 <_realloc_r+0x44>
 80097dc:	4645      	mov	r5, r8
 80097de:	e7ec      	b.n	80097ba <_realloc_r+0x1e>
 80097e0:	42b4      	cmp	r4, r6
 80097e2:	4622      	mov	r2, r4
 80097e4:	4629      	mov	r1, r5
 80097e6:	bf28      	it	cs
 80097e8:	4632      	movcs	r2, r6
 80097ea:	f7ff fbbd 	bl	8008f68 <memcpy>
 80097ee:	4629      	mov	r1, r5
 80097f0:	4638      	mov	r0, r7
 80097f2:	f7ff fbc7 	bl	8008f84 <_free_r>
 80097f6:	e7f1      	b.n	80097dc <_realloc_r+0x40>

080097f8 <_malloc_usable_size_r>:
 80097f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097fc:	1f18      	subs	r0, r3, #4
 80097fe:	2b00      	cmp	r3, #0
 8009800:	bfbc      	itt	lt
 8009802:	580b      	ldrlt	r3, [r1, r0]
 8009804:	18c0      	addlt	r0, r0, r3
 8009806:	4770      	bx	lr

08009808 <__udivmoddi4>:
 8009808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800980c:	9d08      	ldr	r5, [sp, #32]
 800980e:	460f      	mov	r7, r1
 8009810:	4604      	mov	r4, r0
 8009812:	468c      	mov	ip, r1
 8009814:	2b00      	cmp	r3, #0
 8009816:	d148      	bne.n	80098aa <__udivmoddi4+0xa2>
 8009818:	428a      	cmp	r2, r1
 800981a:	4616      	mov	r6, r2
 800981c:	d961      	bls.n	80098e2 <__udivmoddi4+0xda>
 800981e:	fab2 f382 	clz	r3, r2
 8009822:	b14b      	cbz	r3, 8009838 <__udivmoddi4+0x30>
 8009824:	f1c3 0220 	rsb	r2, r3, #32
 8009828:	fa01 fc03 	lsl.w	ip, r1, r3
 800982c:	fa20 f202 	lsr.w	r2, r0, r2
 8009830:	409e      	lsls	r6, r3
 8009832:	ea42 0c0c 	orr.w	ip, r2, ip
 8009836:	409c      	lsls	r4, r3
 8009838:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800983c:	b2b7      	uxth	r7, r6
 800983e:	fbbc f1fe 	udiv	r1, ip, lr
 8009842:	0c22      	lsrs	r2, r4, #16
 8009844:	fb0e cc11 	mls	ip, lr, r1, ip
 8009848:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800984c:	fb01 f007 	mul.w	r0, r1, r7
 8009850:	4290      	cmp	r0, r2
 8009852:	d909      	bls.n	8009868 <__udivmoddi4+0x60>
 8009854:	18b2      	adds	r2, r6, r2
 8009856:	f101 3cff 	add.w	ip, r1, #4294967295
 800985a:	f080 80ee 	bcs.w	8009a3a <__udivmoddi4+0x232>
 800985e:	4290      	cmp	r0, r2
 8009860:	f240 80eb 	bls.w	8009a3a <__udivmoddi4+0x232>
 8009864:	3902      	subs	r1, #2
 8009866:	4432      	add	r2, r6
 8009868:	1a12      	subs	r2, r2, r0
 800986a:	b2a4      	uxth	r4, r4
 800986c:	fbb2 f0fe 	udiv	r0, r2, lr
 8009870:	fb0e 2210 	mls	r2, lr, r0, r2
 8009874:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009878:	fb00 f707 	mul.w	r7, r0, r7
 800987c:	42a7      	cmp	r7, r4
 800987e:	d909      	bls.n	8009894 <__udivmoddi4+0x8c>
 8009880:	1934      	adds	r4, r6, r4
 8009882:	f100 32ff 	add.w	r2, r0, #4294967295
 8009886:	f080 80da 	bcs.w	8009a3e <__udivmoddi4+0x236>
 800988a:	42a7      	cmp	r7, r4
 800988c:	f240 80d7 	bls.w	8009a3e <__udivmoddi4+0x236>
 8009890:	4434      	add	r4, r6
 8009892:	3802      	subs	r0, #2
 8009894:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8009898:	1be4      	subs	r4, r4, r7
 800989a:	2100      	movs	r1, #0
 800989c:	b11d      	cbz	r5, 80098a6 <__udivmoddi4+0x9e>
 800989e:	40dc      	lsrs	r4, r3
 80098a0:	2300      	movs	r3, #0
 80098a2:	e9c5 4300 	strd	r4, r3, [r5]
 80098a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098aa:	428b      	cmp	r3, r1
 80098ac:	d906      	bls.n	80098bc <__udivmoddi4+0xb4>
 80098ae:	b10d      	cbz	r5, 80098b4 <__udivmoddi4+0xac>
 80098b0:	e9c5 0100 	strd	r0, r1, [r5]
 80098b4:	2100      	movs	r1, #0
 80098b6:	4608      	mov	r0, r1
 80098b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098bc:	fab3 f183 	clz	r1, r3
 80098c0:	2900      	cmp	r1, #0
 80098c2:	d148      	bne.n	8009956 <__udivmoddi4+0x14e>
 80098c4:	42bb      	cmp	r3, r7
 80098c6:	d302      	bcc.n	80098ce <__udivmoddi4+0xc6>
 80098c8:	4282      	cmp	r2, r0
 80098ca:	f200 8107 	bhi.w	8009adc <__udivmoddi4+0x2d4>
 80098ce:	1a84      	subs	r4, r0, r2
 80098d0:	eb67 0203 	sbc.w	r2, r7, r3
 80098d4:	2001      	movs	r0, #1
 80098d6:	4694      	mov	ip, r2
 80098d8:	2d00      	cmp	r5, #0
 80098da:	d0e4      	beq.n	80098a6 <__udivmoddi4+0x9e>
 80098dc:	e9c5 4c00 	strd	r4, ip, [r5]
 80098e0:	e7e1      	b.n	80098a6 <__udivmoddi4+0x9e>
 80098e2:	2a00      	cmp	r2, #0
 80098e4:	f000 8092 	beq.w	8009a0c <__udivmoddi4+0x204>
 80098e8:	fab2 f382 	clz	r3, r2
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f040 80a8 	bne.w	8009a42 <__udivmoddi4+0x23a>
 80098f2:	1a8a      	subs	r2, r1, r2
 80098f4:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80098f8:	fa1f fc86 	uxth.w	ip, r6
 80098fc:	2101      	movs	r1, #1
 80098fe:	0c20      	lsrs	r0, r4, #16
 8009900:	fbb2 f7fe 	udiv	r7, r2, lr
 8009904:	fb0e 2217 	mls	r2, lr, r7, r2
 8009908:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800990c:	fb0c f007 	mul.w	r0, ip, r7
 8009910:	4290      	cmp	r0, r2
 8009912:	d907      	bls.n	8009924 <__udivmoddi4+0x11c>
 8009914:	18b2      	adds	r2, r6, r2
 8009916:	f107 38ff 	add.w	r8, r7, #4294967295
 800991a:	d202      	bcs.n	8009922 <__udivmoddi4+0x11a>
 800991c:	4290      	cmp	r0, r2
 800991e:	f200 80e2 	bhi.w	8009ae6 <__udivmoddi4+0x2de>
 8009922:	4647      	mov	r7, r8
 8009924:	1a12      	subs	r2, r2, r0
 8009926:	b2a4      	uxth	r4, r4
 8009928:	fbb2 f0fe 	udiv	r0, r2, lr
 800992c:	fb0e 2210 	mls	r2, lr, r0, r2
 8009930:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009934:	fb0c fc00 	mul.w	ip, ip, r0
 8009938:	45a4      	cmp	ip, r4
 800993a:	d907      	bls.n	800994c <__udivmoddi4+0x144>
 800993c:	1934      	adds	r4, r6, r4
 800993e:	f100 32ff 	add.w	r2, r0, #4294967295
 8009942:	d202      	bcs.n	800994a <__udivmoddi4+0x142>
 8009944:	45a4      	cmp	ip, r4
 8009946:	f200 80cb 	bhi.w	8009ae0 <__udivmoddi4+0x2d8>
 800994a:	4610      	mov	r0, r2
 800994c:	eba4 040c 	sub.w	r4, r4, ip
 8009950:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8009954:	e7a2      	b.n	800989c <__udivmoddi4+0x94>
 8009956:	f1c1 0620 	rsb	r6, r1, #32
 800995a:	408b      	lsls	r3, r1
 800995c:	fa22 fc06 	lsr.w	ip, r2, r6
 8009960:	ea4c 0c03 	orr.w	ip, ip, r3
 8009964:	fa07 f401 	lsl.w	r4, r7, r1
 8009968:	fa20 f306 	lsr.w	r3, r0, r6
 800996c:	40f7      	lsrs	r7, r6
 800996e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8009972:	4323      	orrs	r3, r4
 8009974:	fa00 f801 	lsl.w	r8, r0, r1
 8009978:	fa1f fe8c 	uxth.w	lr, ip
 800997c:	fbb7 f0f9 	udiv	r0, r7, r9
 8009980:	0c1c      	lsrs	r4, r3, #16
 8009982:	fb09 7710 	mls	r7, r9, r0, r7
 8009986:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800998a:	fb00 f70e 	mul.w	r7, r0, lr
 800998e:	42a7      	cmp	r7, r4
 8009990:	fa02 f201 	lsl.w	r2, r2, r1
 8009994:	d90a      	bls.n	80099ac <__udivmoddi4+0x1a4>
 8009996:	eb1c 0404 	adds.w	r4, ip, r4
 800999a:	f100 3aff 	add.w	sl, r0, #4294967295
 800999e:	f080 809b 	bcs.w	8009ad8 <__udivmoddi4+0x2d0>
 80099a2:	42a7      	cmp	r7, r4
 80099a4:	f240 8098 	bls.w	8009ad8 <__udivmoddi4+0x2d0>
 80099a8:	3802      	subs	r0, #2
 80099aa:	4464      	add	r4, ip
 80099ac:	1be4      	subs	r4, r4, r7
 80099ae:	b29f      	uxth	r7, r3
 80099b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80099b4:	fb09 4413 	mls	r4, r9, r3, r4
 80099b8:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 80099bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80099c0:	45a6      	cmp	lr, r4
 80099c2:	d909      	bls.n	80099d8 <__udivmoddi4+0x1d0>
 80099c4:	eb1c 0404 	adds.w	r4, ip, r4
 80099c8:	f103 37ff 	add.w	r7, r3, #4294967295
 80099cc:	f080 8082 	bcs.w	8009ad4 <__udivmoddi4+0x2cc>
 80099d0:	45a6      	cmp	lr, r4
 80099d2:	d97f      	bls.n	8009ad4 <__udivmoddi4+0x2cc>
 80099d4:	3b02      	subs	r3, #2
 80099d6:	4464      	add	r4, ip
 80099d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80099dc:	eba4 040e 	sub.w	r4, r4, lr
 80099e0:	fba0 e702 	umull	lr, r7, r0, r2
 80099e4:	42bc      	cmp	r4, r7
 80099e6:	4673      	mov	r3, lr
 80099e8:	46b9      	mov	r9, r7
 80099ea:	d363      	bcc.n	8009ab4 <__udivmoddi4+0x2ac>
 80099ec:	d060      	beq.n	8009ab0 <__udivmoddi4+0x2a8>
 80099ee:	b15d      	cbz	r5, 8009a08 <__udivmoddi4+0x200>
 80099f0:	ebb8 0203 	subs.w	r2, r8, r3
 80099f4:	eb64 0409 	sbc.w	r4, r4, r9
 80099f8:	fa04 f606 	lsl.w	r6, r4, r6
 80099fc:	fa22 f301 	lsr.w	r3, r2, r1
 8009a00:	431e      	orrs	r6, r3
 8009a02:	40cc      	lsrs	r4, r1
 8009a04:	e9c5 6400 	strd	r6, r4, [r5]
 8009a08:	2100      	movs	r1, #0
 8009a0a:	e74c      	b.n	80098a6 <__udivmoddi4+0x9e>
 8009a0c:	0862      	lsrs	r2, r4, #1
 8009a0e:	0848      	lsrs	r0, r1, #1
 8009a10:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8009a14:	0c0b      	lsrs	r3, r1, #16
 8009a16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009a1a:	b28a      	uxth	r2, r1
 8009a1c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009a20:	fbb3 f1f6 	udiv	r1, r3, r6
 8009a24:	07e4      	lsls	r4, r4, #31
 8009a26:	46b4      	mov	ip, r6
 8009a28:	4637      	mov	r7, r6
 8009a2a:	46b6      	mov	lr, r6
 8009a2c:	231f      	movs	r3, #31
 8009a2e:	fbb0 f0f6 	udiv	r0, r0, r6
 8009a32:	1bd2      	subs	r2, r2, r7
 8009a34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a38:	e761      	b.n	80098fe <__udivmoddi4+0xf6>
 8009a3a:	4661      	mov	r1, ip
 8009a3c:	e714      	b.n	8009868 <__udivmoddi4+0x60>
 8009a3e:	4610      	mov	r0, r2
 8009a40:	e728      	b.n	8009894 <__udivmoddi4+0x8c>
 8009a42:	f1c3 0120 	rsb	r1, r3, #32
 8009a46:	fa20 f201 	lsr.w	r2, r0, r1
 8009a4a:	409e      	lsls	r6, r3
 8009a4c:	fa27 f101 	lsr.w	r1, r7, r1
 8009a50:	409f      	lsls	r7, r3
 8009a52:	433a      	orrs	r2, r7
 8009a54:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8009a58:	fa1f fc86 	uxth.w	ip, r6
 8009a5c:	fbb1 f7fe 	udiv	r7, r1, lr
 8009a60:	fb0e 1017 	mls	r0, lr, r7, r1
 8009a64:	0c11      	lsrs	r1, r2, #16
 8009a66:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a6a:	fb07 f80c 	mul.w	r8, r7, ip
 8009a6e:	4588      	cmp	r8, r1
 8009a70:	fa04 f403 	lsl.w	r4, r4, r3
 8009a74:	d93a      	bls.n	8009aec <__udivmoddi4+0x2e4>
 8009a76:	1871      	adds	r1, r6, r1
 8009a78:	f107 30ff 	add.w	r0, r7, #4294967295
 8009a7c:	d201      	bcs.n	8009a82 <__udivmoddi4+0x27a>
 8009a7e:	4588      	cmp	r8, r1
 8009a80:	d81f      	bhi.n	8009ac2 <__udivmoddi4+0x2ba>
 8009a82:	eba1 0108 	sub.w	r1, r1, r8
 8009a86:	fbb1 f8fe 	udiv	r8, r1, lr
 8009a8a:	fb08 f70c 	mul.w	r7, r8, ip
 8009a8e:	fb0e 1118 	mls	r1, lr, r8, r1
 8009a92:	b292      	uxth	r2, r2
 8009a94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009a98:	42ba      	cmp	r2, r7
 8009a9a:	d22f      	bcs.n	8009afc <__udivmoddi4+0x2f4>
 8009a9c:	18b2      	adds	r2, r6, r2
 8009a9e:	f108 31ff 	add.w	r1, r8, #4294967295
 8009aa2:	d2c6      	bcs.n	8009a32 <__udivmoddi4+0x22a>
 8009aa4:	42ba      	cmp	r2, r7
 8009aa6:	d2c4      	bcs.n	8009a32 <__udivmoddi4+0x22a>
 8009aa8:	f1a8 0102 	sub.w	r1, r8, #2
 8009aac:	4432      	add	r2, r6
 8009aae:	e7c0      	b.n	8009a32 <__udivmoddi4+0x22a>
 8009ab0:	45f0      	cmp	r8, lr
 8009ab2:	d29c      	bcs.n	80099ee <__udivmoddi4+0x1e6>
 8009ab4:	ebbe 0302 	subs.w	r3, lr, r2
 8009ab8:	eb67 070c 	sbc.w	r7, r7, ip
 8009abc:	3801      	subs	r0, #1
 8009abe:	46b9      	mov	r9, r7
 8009ac0:	e795      	b.n	80099ee <__udivmoddi4+0x1e6>
 8009ac2:	eba6 0808 	sub.w	r8, r6, r8
 8009ac6:	4441      	add	r1, r8
 8009ac8:	1eb8      	subs	r0, r7, #2
 8009aca:	fbb1 f8fe 	udiv	r8, r1, lr
 8009ace:	fb08 f70c 	mul.w	r7, r8, ip
 8009ad2:	e7dc      	b.n	8009a8e <__udivmoddi4+0x286>
 8009ad4:	463b      	mov	r3, r7
 8009ad6:	e77f      	b.n	80099d8 <__udivmoddi4+0x1d0>
 8009ad8:	4650      	mov	r0, sl
 8009ada:	e767      	b.n	80099ac <__udivmoddi4+0x1a4>
 8009adc:	4608      	mov	r0, r1
 8009ade:	e6fb      	b.n	80098d8 <__udivmoddi4+0xd0>
 8009ae0:	4434      	add	r4, r6
 8009ae2:	3802      	subs	r0, #2
 8009ae4:	e732      	b.n	800994c <__udivmoddi4+0x144>
 8009ae6:	3f02      	subs	r7, #2
 8009ae8:	4432      	add	r2, r6
 8009aea:	e71b      	b.n	8009924 <__udivmoddi4+0x11c>
 8009aec:	eba1 0108 	sub.w	r1, r1, r8
 8009af0:	4638      	mov	r0, r7
 8009af2:	fbb1 f8fe 	udiv	r8, r1, lr
 8009af6:	fb08 f70c 	mul.w	r7, r8, ip
 8009afa:	e7c8      	b.n	8009a8e <__udivmoddi4+0x286>
 8009afc:	4641      	mov	r1, r8
 8009afe:	e798      	b.n	8009a32 <__udivmoddi4+0x22a>

08009b00 <_init>:
 8009b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b02:	bf00      	nop
 8009b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b06:	bc08      	pop	{r3}
 8009b08:	469e      	mov	lr, r3
 8009b0a:	4770      	bx	lr

08009b0c <_fini>:
 8009b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0e:	bf00      	nop
 8009b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b12:	bc08      	pop	{r3}
 8009b14:	469e      	mov	lr, r3
 8009b16:	4770      	bx	lr
