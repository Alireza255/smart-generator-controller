
build/debug/SGC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002770  08002770  00003770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002780  08002780  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002780  08002780  00003780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002788  08002788  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002788  08002788  00003788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800278c  0800278c  0000378c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002790  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  0800279c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  0800279c  00004104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd87  00000000  00000000  00004075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002083  00000000  00000000  00010dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000069a5  00000000  00000000  00012e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ae0  00000000  00000000  00019828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000845  00000000  00000000  0001a308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b08a  00000000  00000000  0001ab4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003d6d  00000000  00000000  00025bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ab8  00000000  00000000  00029944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000001a1  00000000  00000000  0002b3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__aeabi_drsub>:
 8000198:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800019c:	e002      	b.n	80001a4 <__adddf3>
 800019e:	bf00      	nop

080001a0 <__aeabi_dsub>:
 80001a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001a4 <__adddf3>:
 80001a4:	b530      	push	{r4, r5, lr}
 80001a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ae:	ea94 0f05 	teq	r4, r5
 80001b2:	bf08      	it	eq
 80001b4:	ea90 0f02 	teqeq	r0, r2
 80001b8:	bf1f      	itttt	ne
 80001ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ca:	f000 80e2 	beq.w	8000392 <__adddf3+0x1ee>
 80001ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d6:	bfb8      	it	lt
 80001d8:	426d      	neglt	r5, r5
 80001da:	dd0c      	ble.n	80001f6 <__adddf3+0x52>
 80001dc:	442c      	add	r4, r5
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	ea82 0000 	eor.w	r0, r2, r0
 80001ea:	ea83 0101 	eor.w	r1, r3, r1
 80001ee:	ea80 0202 	eor.w	r2, r0, r2
 80001f2:	ea81 0303 	eor.w	r3, r1, r3
 80001f6:	2d36      	cmp	r5, #54	@ 0x36
 80001f8:	bf88      	it	hi
 80001fa:	bd30      	pophi	{r4, r5, pc}
 80001fc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000200:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000204:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000208:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800020c:	d002      	beq.n	8000214 <__adddf3+0x70>
 800020e:	4240      	negs	r0, r0
 8000210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000214:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000218:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800021c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000220:	d002      	beq.n	8000228 <__adddf3+0x84>
 8000222:	4252      	negs	r2, r2
 8000224:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000228:	ea94 0f05 	teq	r4, r5
 800022c:	f000 80a7 	beq.w	800037e <__adddf3+0x1da>
 8000230:	f1a4 0401 	sub.w	r4, r4, #1
 8000234:	f1d5 0e20 	rsbs	lr, r5, #32
 8000238:	db0d      	blt.n	8000256 <__adddf3+0xb2>
 800023a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023e:	fa22 f205 	lsr.w	r2, r2, r5
 8000242:	1880      	adds	r0, r0, r2
 8000244:	f141 0100 	adc.w	r1, r1, #0
 8000248:	fa03 f20e 	lsl.w	r2, r3, lr
 800024c:	1880      	adds	r0, r0, r2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	4159      	adcs	r1, r3
 8000254:	e00e      	b.n	8000274 <__adddf3+0xd0>
 8000256:	f1a5 0520 	sub.w	r5, r5, #32
 800025a:	f10e 0e20 	add.w	lr, lr, #32
 800025e:	2a01      	cmp	r2, #1
 8000260:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000264:	bf28      	it	cs
 8000266:	f04c 0c02 	orrcs.w	ip, ip, #2
 800026a:	fa43 f305 	asr.w	r3, r3, r5
 800026e:	18c0      	adds	r0, r0, r3
 8000270:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000274:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000278:	d507      	bpl.n	800028a <__adddf3+0xe6>
 800027a:	f04f 0e00 	mov.w	lr, #0
 800027e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000282:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000286:	eb6e 0101 	sbc.w	r1, lr, r1
 800028a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800028e:	d31b      	bcc.n	80002c8 <__adddf3+0x124>
 8000290:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000294:	d30c      	bcc.n	80002b0 <__adddf3+0x10c>
 8000296:	0849      	lsrs	r1, r1, #1
 8000298:	ea5f 0030 	movs.w	r0, r0, rrx
 800029c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002a0:	f104 0401 	add.w	r4, r4, #1
 80002a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ac:	f080 809a 	bcs.w	80003e4 <__adddf3+0x240>
 80002b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002b4:	bf08      	it	eq
 80002b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ba:	f150 0000 	adcs.w	r0, r0, #0
 80002be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002c2:	ea41 0105 	orr.w	r1, r1, r5
 80002c6:	bd30      	pop	{r4, r5, pc}
 80002c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002cc:	4140      	adcs	r0, r0
 80002ce:	eb41 0101 	adc.w	r1, r1, r1
 80002d2:	3c01      	subs	r4, #1
 80002d4:	bf28      	it	cs
 80002d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002da:	d2e9      	bcs.n	80002b0 <__adddf3+0x10c>
 80002dc:	f091 0f00 	teq	r1, #0
 80002e0:	bf04      	itt	eq
 80002e2:	4601      	moveq	r1, r0
 80002e4:	2000      	moveq	r0, #0
 80002e6:	fab1 f381 	clz	r3, r1
 80002ea:	bf08      	it	eq
 80002ec:	3320      	addeq	r3, #32
 80002ee:	f1a3 030b 	sub.w	r3, r3, #11
 80002f2:	f1b3 0220 	subs.w	r2, r3, #32
 80002f6:	da0c      	bge.n	8000312 <__adddf3+0x16e>
 80002f8:	320c      	adds	r2, #12
 80002fa:	dd08      	ble.n	800030e <__adddf3+0x16a>
 80002fc:	f102 0c14 	add.w	ip, r2, #20
 8000300:	f1c2 020c 	rsb	r2, r2, #12
 8000304:	fa01 f00c 	lsl.w	r0, r1, ip
 8000308:	fa21 f102 	lsr.w	r1, r1, r2
 800030c:	e00c      	b.n	8000328 <__adddf3+0x184>
 800030e:	f102 0214 	add.w	r2, r2, #20
 8000312:	bfd8      	it	le
 8000314:	f1c2 0c20 	rsble	ip, r2, #32
 8000318:	fa01 f102 	lsl.w	r1, r1, r2
 800031c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000320:	bfdc      	itt	le
 8000322:	ea41 010c 	orrle.w	r1, r1, ip
 8000326:	4090      	lslle	r0, r2
 8000328:	1ae4      	subs	r4, r4, r3
 800032a:	bfa2      	ittt	ge
 800032c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000330:	4329      	orrge	r1, r5
 8000332:	bd30      	popge	{r4, r5, pc}
 8000334:	ea6f 0404 	mvn.w	r4, r4
 8000338:	3c1f      	subs	r4, #31
 800033a:	da1c      	bge.n	8000376 <__adddf3+0x1d2>
 800033c:	340c      	adds	r4, #12
 800033e:	dc0e      	bgt.n	800035e <__adddf3+0x1ba>
 8000340:	f104 0414 	add.w	r4, r4, #20
 8000344:	f1c4 0220 	rsb	r2, r4, #32
 8000348:	fa20 f004 	lsr.w	r0, r0, r4
 800034c:	fa01 f302 	lsl.w	r3, r1, r2
 8000350:	ea40 0003 	orr.w	r0, r0, r3
 8000354:	fa21 f304 	lsr.w	r3, r1, r4
 8000358:	ea45 0103 	orr.w	r1, r5, r3
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	f1c4 040c 	rsb	r4, r4, #12
 8000362:	f1c4 0220 	rsb	r2, r4, #32
 8000366:	fa20 f002 	lsr.w	r0, r0, r2
 800036a:	fa01 f304 	lsl.w	r3, r1, r4
 800036e:	ea40 0003 	orr.w	r0, r0, r3
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	fa21 f004 	lsr.w	r0, r1, r4
 800037a:	4629      	mov	r1, r5
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	f094 0f00 	teq	r4, #0
 8000382:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000386:	bf06      	itte	eq
 8000388:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800038c:	3401      	addeq	r4, #1
 800038e:	3d01      	subne	r5, #1
 8000390:	e74e      	b.n	8000230 <__adddf3+0x8c>
 8000392:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000396:	bf18      	it	ne
 8000398:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800039c:	d029      	beq.n	80003f2 <__adddf3+0x24e>
 800039e:	ea94 0f05 	teq	r4, r5
 80003a2:	bf08      	it	eq
 80003a4:	ea90 0f02 	teqeq	r0, r2
 80003a8:	d005      	beq.n	80003b6 <__adddf3+0x212>
 80003aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ae:	bf04      	itt	eq
 80003b0:	4619      	moveq	r1, r3
 80003b2:	4610      	moveq	r0, r2
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea91 0f03 	teq	r1, r3
 80003ba:	bf1e      	ittt	ne
 80003bc:	2100      	movne	r1, #0
 80003be:	2000      	movne	r0, #0
 80003c0:	bd30      	popne	{r4, r5, pc}
 80003c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c6:	d105      	bne.n	80003d4 <__adddf3+0x230>
 80003c8:	0040      	lsls	r0, r0, #1
 80003ca:	4149      	adcs	r1, r1
 80003cc:	bf28      	it	cs
 80003ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d8:	bf3c      	itt	cc
 80003da:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003de:	bd30      	popcc	{r4, r5, pc}
 80003e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003e4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f6:	bf1a      	itte	ne
 80003f8:	4619      	movne	r1, r3
 80003fa:	4610      	movne	r0, r2
 80003fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000400:	bf1c      	itt	ne
 8000402:	460b      	movne	r3, r1
 8000404:	4602      	movne	r2, r0
 8000406:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800040a:	bf06      	itte	eq
 800040c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000410:	ea91 0f03 	teqeq	r1, r3
 8000414:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	bf00      	nop

0800041c <__aeabi_ui2d>:
 800041c:	f090 0f00 	teq	r0, #0
 8000420:	bf04      	itt	eq
 8000422:	2100      	moveq	r1, #0
 8000424:	4770      	bxeq	lr
 8000426:	b530      	push	{r4, r5, lr}
 8000428:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800042c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000430:	f04f 0500 	mov.w	r5, #0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e750      	b.n	80002dc <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_i2d>:
 800043c:	f090 0f00 	teq	r0, #0
 8000440:	bf04      	itt	eq
 8000442:	2100      	moveq	r1, #0
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800044c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000450:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000454:	bf48      	it	mi
 8000456:	4240      	negmi	r0, r0
 8000458:	f04f 0100 	mov.w	r1, #0
 800045c:	e73e      	b.n	80002dc <__adddf3+0x138>
 800045e:	bf00      	nop

08000460 <__aeabi_f2d>:
 8000460:	0042      	lsls	r2, r0, #1
 8000462:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000466:	ea4f 0131 	mov.w	r1, r1, rrx
 800046a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046e:	bf1f      	itttt	ne
 8000470:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000474:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000478:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800047c:	4770      	bxne	lr
 800047e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000482:	bf08      	it	eq
 8000484:	4770      	bxeq	lr
 8000486:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800048a:	bf04      	itt	eq
 800048c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004a0:	e71c      	b.n	80002dc <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_ul2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f04f 0500 	mov.w	r5, #0
 80004b2:	e00a      	b.n	80004ca <__aeabi_l2d+0x16>

080004b4 <__aeabi_l2d>:
 80004b4:	ea50 0201 	orrs.w	r2, r0, r1
 80004b8:	bf08      	it	eq
 80004ba:	4770      	bxeq	lr
 80004bc:	b530      	push	{r4, r5, lr}
 80004be:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004c2:	d502      	bpl.n	80004ca <__aeabi_l2d+0x16>
 80004c4:	4240      	negs	r0, r0
 80004c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ca:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ce:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d6:	f43f aed8 	beq.w	800028a <__adddf3+0xe6>
 80004da:	f04f 0203 	mov.w	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ea:	bf18      	it	ne
 80004ec:	3203      	addne	r2, #3
 80004ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004f2:	f1c2 0320 	rsb	r3, r2, #32
 80004f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fa:	fa20 f002 	lsr.w	r0, r0, r2
 80004fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000502:	ea40 000e 	orr.w	r0, r0, lr
 8000506:	fa21 f102 	lsr.w	r1, r1, r2
 800050a:	4414      	add	r4, r2
 800050c:	e6bd      	b.n	800028a <__adddf3+0xe6>
 800050e:	bf00      	nop

08000510 <__aeabi_dmul>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000516:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800051a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051e:	bf1d      	ittte	ne
 8000520:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000524:	ea94 0f0c 	teqne	r4, ip
 8000528:	ea95 0f0c 	teqne	r5, ip
 800052c:	f000 f8de 	bleq	80006ec <__aeabi_dmul+0x1dc>
 8000530:	442c      	add	r4, r5
 8000532:	ea81 0603 	eor.w	r6, r1, r3
 8000536:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800053a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000542:	bf18      	it	ne
 8000544:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000548:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800054c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000550:	d038      	beq.n	80005c4 <__aeabi_dmul+0xb4>
 8000552:	fba0 ce02 	umull	ip, lr, r0, r2
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000562:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000566:	f04f 0600 	mov.w	r6, #0
 800056a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056e:	f09c 0f00 	teq	ip, #0
 8000572:	bf18      	it	ne
 8000574:	f04e 0e01 	orrne.w	lr, lr, #1
 8000578:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800057c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000580:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000584:	d204      	bcs.n	8000590 <__aeabi_dmul+0x80>
 8000586:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800058a:	416d      	adcs	r5, r5
 800058c:	eb46 0606 	adc.w	r6, r6, r6
 8000590:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000594:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000598:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800059c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a8:	bf88      	it	hi
 80005aa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ae:	d81e      	bhi.n	80005ee <__aeabi_dmul+0xde>
 80005b0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005b4:	bf08      	it	eq
 80005b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ba:	f150 0000 	adcs.w	r0, r0, #0
 80005be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c8:	ea46 0101 	orr.w	r1, r6, r1
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	ea81 0103 	eor.w	r1, r1, r3
 80005d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d8:	bfc2      	ittt	gt
 80005da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005e2:	bd70      	popgt	{r4, r5, r6, pc}
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e8:	f04f 0e00 	mov.w	lr, #0
 80005ec:	3c01      	subs	r4, #1
 80005ee:	f300 80ab 	bgt.w	8000748 <__aeabi_dmul+0x238>
 80005f2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005f6:	bfde      	ittt	le
 80005f8:	2000      	movle	r0, #0
 80005fa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005fe:	bd70      	pople	{r4, r5, r6, pc}
 8000600:	f1c4 0400 	rsb	r4, r4, #0
 8000604:	3c20      	subs	r4, #32
 8000606:	da35      	bge.n	8000674 <__aeabi_dmul+0x164>
 8000608:	340c      	adds	r4, #12
 800060a:	dc1b      	bgt.n	8000644 <__aeabi_dmul+0x134>
 800060c:	f104 0414 	add.w	r4, r4, #20
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f305 	lsl.w	r3, r0, r5
 8000618:	fa20 f004 	lsr.w	r0, r0, r4
 800061c:	fa01 f205 	lsl.w	r2, r1, r5
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000628:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	fa21 f604 	lsr.w	r6, r1, r4
 8000634:	eb42 0106 	adc.w	r1, r2, r6
 8000638:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800063c:	bf08      	it	eq
 800063e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f1c4 040c 	rsb	r4, r4, #12
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f304 	lsl.w	r3, r0, r4
 8000650:	fa20 f005 	lsr.w	r0, r0, r5
 8000654:	fa01 f204 	lsl.w	r2, r1, r4
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	f141 0100 	adc.w	r1, r1, #0
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f205 	lsl.w	r2, r0, r5
 800067c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000680:	fa20 f304 	lsr.w	r3, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea43 0302 	orr.w	r3, r3, r2
 800068c:	fa21 f004 	lsr.w	r0, r1, r4
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	fa21 f204 	lsr.w	r2, r1, r4
 8000698:	ea20 0002 	bic.w	r0, r0, r2
 800069c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f094 0f00 	teq	r4, #0
 80006b0:	d10f      	bne.n	80006d2 <__aeabi_dmul+0x1c2>
 80006b2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006b6:	0040      	lsls	r0, r0, #1
 80006b8:	eb41 0101 	adc.w	r1, r1, r1
 80006bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3c01      	subeq	r4, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1a6>
 80006c6:	ea41 0106 	orr.w	r1, r1, r6
 80006ca:	f095 0f00 	teq	r5, #0
 80006ce:	bf18      	it	ne
 80006d0:	4770      	bxne	lr
 80006d2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006d6:	0052      	lsls	r2, r2, #1
 80006d8:	eb43 0303 	adc.w	r3, r3, r3
 80006dc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006e0:	bf08      	it	eq
 80006e2:	3d01      	subeq	r5, #1
 80006e4:	d0f7      	beq.n	80006d6 <__aeabi_dmul+0x1c6>
 80006e6:	ea43 0306 	orr.w	r3, r3, r6
 80006ea:	4770      	bx	lr
 80006ec:	ea94 0f0c 	teq	r4, ip
 80006f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f4:	bf18      	it	ne
 80006f6:	ea95 0f0c 	teqne	r5, ip
 80006fa:	d00c      	beq.n	8000716 <__aeabi_dmul+0x206>
 80006fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000700:	bf18      	it	ne
 8000702:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000706:	d1d1      	bne.n	80006ac <__aeabi_dmul+0x19c>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	f04f 0000 	mov.w	r0, #0
 8000714:	bd70      	pop	{r4, r5, r6, pc}
 8000716:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800071a:	bf06      	itte	eq
 800071c:	4610      	moveq	r0, r2
 800071e:	4619      	moveq	r1, r3
 8000720:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000724:	d019      	beq.n	800075a <__aeabi_dmul+0x24a>
 8000726:	ea94 0f0c 	teq	r4, ip
 800072a:	d102      	bne.n	8000732 <__aeabi_dmul+0x222>
 800072c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000730:	d113      	bne.n	800075a <__aeabi_dmul+0x24a>
 8000732:	ea95 0f0c 	teq	r5, ip
 8000736:	d105      	bne.n	8000744 <__aeabi_dmul+0x234>
 8000738:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800073c:	bf1c      	itt	ne
 800073e:	4610      	movne	r0, r2
 8000740:	4619      	movne	r1, r3
 8000742:	d10a      	bne.n	800075a <__aeabi_dmul+0x24a>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000750:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800075e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000762:	bd70      	pop	{r4, r5, r6, pc}

08000764 <__aeabi_ddiv>:
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800076a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800076e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000772:	bf1d      	ittte	ne
 8000774:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000778:	ea94 0f0c 	teqne	r4, ip
 800077c:	ea95 0f0c 	teqne	r5, ip
 8000780:	f000 f8a7 	bleq	80008d2 <__aeabi_ddiv+0x16e>
 8000784:	eba4 0405 	sub.w	r4, r4, r5
 8000788:	ea81 0e03 	eor.w	lr, r1, r3
 800078c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000790:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000794:	f000 8088 	beq.w	80008a8 <__aeabi_ddiv+0x144>
 8000798:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800079c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007bc:	429d      	cmp	r5, r3
 80007be:	bf08      	it	eq
 80007c0:	4296      	cmpeq	r6, r2
 80007c2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007c6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007ca:	d202      	bcs.n	80007d2 <__aeabi_ddiv+0x6e>
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	1ab6      	subs	r6, r6, r2
 80007d4:	eb65 0503 	sbc.w	r5, r5, r3
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007e2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000840:	ea55 0e06 	orrs.w	lr, r5, r6
 8000844:	d018      	beq.n	8000878 <__aeabi_ddiv+0x114>
 8000846:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800084a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000852:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000856:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800085a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000862:	d1c0      	bne.n	80007e6 <__aeabi_ddiv+0x82>
 8000864:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000868:	d10b      	bne.n	8000882 <__aeabi_ddiv+0x11e>
 800086a:	ea41 0100 	orr.w	r1, r1, r0
 800086e:	f04f 0000 	mov.w	r0, #0
 8000872:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000876:	e7b6      	b.n	80007e6 <__aeabi_ddiv+0x82>
 8000878:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800087c:	bf04      	itt	eq
 800087e:	4301      	orreq	r1, r0
 8000880:	2000      	moveq	r0, #0
 8000882:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000886:	bf88      	it	hi
 8000888:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800088c:	f63f aeaf 	bhi.w	80005ee <__aeabi_dmul+0xde>
 8000890:	ebb5 0c03 	subs.w	ip, r5, r3
 8000894:	bf04      	itt	eq
 8000896:	ebb6 0c02 	subseq.w	ip, r6, r2
 800089a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089e:	f150 0000 	adcs.w	r0, r0, #0
 80008a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	pop	{r4, r5, r6, pc}
 80008a8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b4:	bfc2      	ittt	gt
 80008b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008be:	bd70      	popgt	{r4, r5, r6, pc}
 80008c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c4:	f04f 0e00 	mov.w	lr, #0
 80008c8:	3c01      	subs	r4, #1
 80008ca:	e690      	b.n	80005ee <__aeabi_dmul+0xde>
 80008cc:	ea45 0e06 	orr.w	lr, r5, r6
 80008d0:	e68d      	b.n	80005ee <__aeabi_dmul+0xde>
 80008d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d6:	ea94 0f0c 	teq	r4, ip
 80008da:	bf08      	it	eq
 80008dc:	ea95 0f0c 	teqeq	r5, ip
 80008e0:	f43f af3b 	beq.w	800075a <__aeabi_dmul+0x24a>
 80008e4:	ea94 0f0c 	teq	r4, ip
 80008e8:	d10a      	bne.n	8000900 <__aeabi_ddiv+0x19c>
 80008ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ee:	f47f af34 	bne.w	800075a <__aeabi_dmul+0x24a>
 80008f2:	ea95 0f0c 	teq	r5, ip
 80008f6:	f47f af25 	bne.w	8000744 <__aeabi_dmul+0x234>
 80008fa:	4610      	mov	r0, r2
 80008fc:	4619      	mov	r1, r3
 80008fe:	e72c      	b.n	800075a <__aeabi_dmul+0x24a>
 8000900:	ea95 0f0c 	teq	r5, ip
 8000904:	d106      	bne.n	8000914 <__aeabi_ddiv+0x1b0>
 8000906:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800090a:	f43f aefd 	beq.w	8000708 <__aeabi_dmul+0x1f8>
 800090e:	4610      	mov	r0, r2
 8000910:	4619      	mov	r1, r3
 8000912:	e722      	b.n	800075a <__aeabi_dmul+0x24a>
 8000914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091e:	f47f aec5 	bne.w	80006ac <__aeabi_dmul+0x19c>
 8000922:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000926:	f47f af0d 	bne.w	8000744 <__aeabi_dmul+0x234>
 800092a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092e:	f47f aeeb 	bne.w	8000708 <__aeabi_dmul+0x1f8>
 8000932:	e712      	b.n	800075a <__aeabi_dmul+0x24a>

08000934 <__aeabi_d2uiz>:
 8000934:	004a      	lsls	r2, r1, #1
 8000936:	d211      	bcs.n	800095c <__aeabi_d2uiz+0x28>
 8000938:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800093c:	d211      	bcs.n	8000962 <__aeabi_d2uiz+0x2e>
 800093e:	d50d      	bpl.n	800095c <__aeabi_d2uiz+0x28>
 8000940:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000944:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000948:	d40e      	bmi.n	8000968 <__aeabi_d2uiz+0x34>
 800094a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000952:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000956:	fa23 f002 	lsr.w	r0, r3, r2
 800095a:	4770      	bx	lr
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	4770      	bx	lr
 8000962:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000966:	d102      	bne.n	800096e <__aeabi_d2uiz+0x3a>
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	4770      	bx	lr
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	4770      	bx	lr

08000974 <__aeabi_uldivmod>:
 8000974:	b953      	cbnz	r3, 800098c <__aeabi_uldivmod+0x18>
 8000976:	b94a      	cbnz	r2, 800098c <__aeabi_uldivmod+0x18>
 8000978:	2900      	cmp	r1, #0
 800097a:	bf08      	it	eq
 800097c:	2800      	cmpeq	r0, #0
 800097e:	bf1c      	itt	ne
 8000980:	f04f 31ff 	movne.w	r1, #4294967295
 8000984:	f04f 30ff 	movne.w	r0, #4294967295
 8000988:	f000 b80c 	b.w	80009a4 <__aeabi_idiv0>
 800098c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000990:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000994:	f001 fd64 	bl	8002460 <__udivmoddi4>
 8000998:	f8dd e004 	ldr.w	lr, [sp, #4]
 800099c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009a0:	b004      	add	sp, #16
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_idiv0>:
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__do_global_dtors_aux>:
 80009a8:	b510      	push	{r4, lr}
 80009aa:	4c05      	ldr	r4, [pc, #20]	@ (80009c0 <__do_global_dtors_aux+0x18>)
 80009ac:	7823      	ldrb	r3, [r4, #0]
 80009ae:	b933      	cbnz	r3, 80009be <__do_global_dtors_aux+0x16>
 80009b0:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <__do_global_dtors_aux+0x1c>)
 80009b2:	b113      	cbz	r3, 80009ba <__do_global_dtors_aux+0x12>
 80009b4:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <__do_global_dtors_aux+0x20>)
 80009b6:	f3af 8000 	nop.w
 80009ba:	2301      	movs	r3, #1
 80009bc:	7023      	strb	r3, [r4, #0]
 80009be:	bd10      	pop	{r4, pc}
 80009c0:	2000000c 	.word	0x2000000c
 80009c4:	00000000 	.word	0x00000000
 80009c8:	08002758 	.word	0x08002758

080009cc <frame_dummy>:
 80009cc:	b508      	push	{r3, lr}
 80009ce:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <frame_dummy+0x10>)
 80009d0:	b11b      	cbz	r3, 80009da <frame_dummy+0xe>
 80009d2:	4903      	ldr	r1, [pc, #12]	@ (80009e0 <frame_dummy+0x14>)
 80009d4:	4803      	ldr	r0, [pc, #12]	@ (80009e4 <frame_dummy+0x18>)
 80009d6:	f3af 8000 	nop.w
 80009da:	bd08      	pop	{r3, pc}
 80009dc:	00000000 	.word	0x00000000
 80009e0:	20000010 	.word	0x20000010
 80009e4:	08002758 	.word	0x08002758

080009e8 <controller_time_start>:

TIM_HandleTypeDef *timer = NULL;

void controller_time_start(TIM_HandleTypeDef *htim)
{
    if (htim == NULL)
 80009e8:	b178      	cbz	r0, 8000a0a <controller_time_start+0x22>
{
 80009ea:	b510      	push	{r4, lr}
        /**
         * @todo throw an error
         */
        return;
    }
    timer = htim;
 80009ec:	4c07      	ldr	r4, [pc, #28]	@ (8000a0c <controller_time_start+0x24>)
 80009ee:	6020      	str	r0, [r4, #0]
    /**
     * This assumes that sys clock is the same as timer clock
     */
    timer->Instance->PSC = HAL_RCC_GetSysClockFreq() / 1000000UL;
 80009f0:	f000 fe78 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 80009f4:	4603      	mov	r3, r0
 80009f6:	6820      	ldr	r0, [r4, #0]
 80009f8:	6801      	ldr	r1, [r0, #0]
 80009fa:	4a05      	ldr	r2, [pc, #20]	@ (8000a10 <controller_time_start+0x28>)
 80009fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000a00:	0c9b      	lsrs	r3, r3, #18
 8000a02:	628b      	str	r3, [r1, #40]	@ 0x28
    HAL_TIM_Base_Start(timer);
 8000a04:	f001 f81e 	bl	8001a44 <HAL_TIM_Base_Start>
}
 8000a08:	bd10      	pop	{r4, pc}
 8000a0a:	4770      	bx	lr
 8000a0c:	20000028 	.word	0x20000028
 8000a10:	431bde83 	.word	0x431bde83

08000a14 <get_time_us>:


controller_time_us_t get_time_us(void)
{
    return timer->Instance->CNT;
 8000a14:	4b02      	ldr	r3, [pc, #8]	@ (8000a20 <get_time_us+0xc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000028 	.word	0x20000028
 8000a24:	00000000 	.word	0x00000000

08000a28 <dc_motor_set>:
 * @param dir the desired direction of the motor
 * @param duty_cycle a number between 0 and 255 not a percentage
 */
void dc_motor_set(dc_motor_s *motor, dc_motor_direction_e dir, uint8_t duty_cycle)
{
	if (motor == NULL || motor->timer == NULL)
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	f000 80a9 	beq.w	8000b80 <dc_motor_set+0x158>
{
 8000a2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a32:	460e      	mov	r6, r1
 8000a34:	4615      	mov	r5, r2
 8000a36:	4604      	mov	r4, r0
	if (motor == NULL || motor->timer == NULL)
 8000a38:	6807      	ldr	r7, [r0, #0]
 8000a3a:	2f00      	cmp	r7, #0
 8000a3c:	d030      	beq.n	8000aa0 <dc_motor_set+0x78>
		 * @todo throw an error
		 */
	}

	// Map duty cycle (0-255) to timer compare value
	uint32_t compare_value = (uint32_t)((duty_cycle / 255.0) * __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8000a3e:	4610      	mov	r0, r2
 8000a40:	f7ff fcfc 	bl	800043c <__aeabi_i2d>
 8000a44:	a350      	add	r3, pc, #320	@ (adr r3, 8000b88 <dc_motor_set+0x160>)
 8000a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a4a:	f7ff fe8b 	bl	8000764 <__aeabi_ddiv>
 8000a4e:	4680      	mov	r8, r0
 8000a50:	4689      	mov	r9, r1
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000a56:	f7ff fce1 	bl	800041c <__aeabi_ui2d>
 8000a5a:	4642      	mov	r2, r8
 8000a5c:	464b      	mov	r3, r9
 8000a5e:	f7ff fd57 	bl	8000510 <__aeabi_dmul>
 8000a62:	f7ff ff67 	bl	8000934 <__aeabi_d2uiz>
	motor->_last_compare_value = compare_value;
 8000a66:	6120      	str	r0, [r4, #16]
	
	switch (dir)
 8000a68:	b17e      	cbz	r6, 8000a8a <dc_motor_set+0x62>
 8000a6a:	2e01      	cmp	r6, #1
 8000a6c:	d03a      	beq.n	8000ae4 <dc_motor_set+0xbc>
	case MD_REVERSE:
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
		break;
	default:
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8000a6e:	6863      	ldr	r3, [r4, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d162      	bne.n	8000b3a <dc_motor_set+0x112>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	2200      	movs	r2, #0
 8000a78:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8000a7a:	68a3      	ldr	r3, [r4, #8]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d16c      	bne.n	8000b5a <dc_motor_set+0x132>
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2200      	movs	r2, #0
 8000a86:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a88:	e009      	b.n	8000a9e <dc_motor_set+0x76>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, compare_value);
 8000a8a:	6863      	ldr	r3, [r4, #4]
 8000a8c:	b953      	cbnz	r3, 8000aa4 <dc_motor_set+0x7c>
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	6358      	str	r0, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8000a92:	68a3      	ldr	r3, [r4, #8]
 8000a94:	b99b      	cbnz	r3, 8000abe <dc_motor_set+0x96>
 8000a96:	6823      	ldr	r3, [r4, #0]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	635a      	str	r2, [r3, #52]	@ 0x34
		/**
		 * @todo throw an error
		 */
		break;
	}
	motor->current_duty_cycle = duty_cycle;
 8000a9e:	7365      	strb	r5, [r4, #13]
}
 8000aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, compare_value);
 8000aa4:	2b04      	cmp	r3, #4
 8000aa6:	d004      	beq.n	8000ab2 <dc_motor_set+0x8a>
 8000aa8:	2b08      	cmp	r3, #8
 8000aaa:	d005      	beq.n	8000ab8 <dc_motor_set+0x90>
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	6418      	str	r0, [r3, #64]	@ 0x40
 8000ab0:	e7ef      	b.n	8000a92 <dc_motor_set+0x6a>
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	6398      	str	r0, [r3, #56]	@ 0x38
 8000ab6:	e7ec      	b.n	8000a92 <dc_motor_set+0x6a>
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8000abc:	e7e9      	b.n	8000a92 <dc_motor_set+0x6a>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d006      	beq.n	8000ad0 <dc_motor_set+0xa8>
 8000ac2:	2b08      	cmp	r3, #8
 8000ac4:	d009      	beq.n	8000ada <dc_motor_set+0xb2>
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2200      	movs	r2, #0
 8000acc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ace:	e7e6      	b.n	8000a9e <dc_motor_set+0x76>
 8000ad0:	6823      	ldr	r3, [r4, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ad8:	e7e1      	b.n	8000a9e <dc_motor_set+0x76>
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ae2:	e7dc      	b.n	8000a9e <dc_motor_set+0x76>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8000ae4:	6863      	ldr	r3, [r4, #4]
 8000ae6:	b943      	cbnz	r3, 8000afa <dc_motor_set+0xd2>
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2200      	movs	r2, #0
 8000aec:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
 8000aee:	68a3      	ldr	r3, [r4, #8]
 8000af0:	b99b      	cbnz	r3, 8000b1a <dc_motor_set+0xf2>
 8000af2:	6823      	ldr	r3, [r4, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	6358      	str	r0, [r3, #52]	@ 0x34
 8000af8:	e7d1      	b.n	8000a9e <dc_motor_set+0x76>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d005      	beq.n	8000b0a <dc_motor_set+0xe2>
 8000afe:	2b08      	cmp	r3, #8
 8000b00:	d007      	beq.n	8000b12 <dc_motor_set+0xea>
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2200      	movs	r2, #0
 8000b06:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b08:	e7f1      	b.n	8000aee <dc_motor_set+0xc6>
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b10:	e7ed      	b.n	8000aee <dc_motor_set+0xc6>
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	2200      	movs	r2, #0
 8000b16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b18:	e7e9      	b.n	8000aee <dc_motor_set+0xc6>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d005      	beq.n	8000b2a <dc_motor_set+0x102>
 8000b1e:	2b08      	cmp	r3, #8
 8000b20:	d007      	beq.n	8000b32 <dc_motor_set+0x10a>
 8000b22:	6823      	ldr	r3, [r4, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6418      	str	r0, [r3, #64]	@ 0x40
 8000b28:	e7b9      	b.n	8000a9e <dc_motor_set+0x76>
 8000b2a:	6823      	ldr	r3, [r4, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	6398      	str	r0, [r3, #56]	@ 0x38
 8000b30:	e7b5      	b.n	8000a9e <dc_motor_set+0x76>
 8000b32:	6823      	ldr	r3, [r4, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8000b38:	e7b1      	b.n	8000a9e <dc_motor_set+0x76>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	d005      	beq.n	8000b4a <dc_motor_set+0x122>
 8000b3e:	2b08      	cmp	r3, #8
 8000b40:	d007      	beq.n	8000b52 <dc_motor_set+0x12a>
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	2200      	movs	r2, #0
 8000b46:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b48:	e797      	b.n	8000a7a <dc_motor_set+0x52>
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b50:	e793      	b.n	8000a7a <dc_motor_set+0x52>
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	2200      	movs	r2, #0
 8000b56:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b58:	e78f      	b.n	8000a7a <dc_motor_set+0x52>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	d006      	beq.n	8000b6c <dc_motor_set+0x144>
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	d009      	beq.n	8000b76 <dc_motor_set+0x14e>
 8000b62:	6823      	ldr	r3, [r4, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2200      	movs	r2, #0
 8000b68:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b6a:	e798      	b.n	8000a9e <dc_motor_set+0x76>
 8000b6c:	6823      	ldr	r3, [r4, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2200      	movs	r2, #0
 8000b72:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b74:	e793      	b.n	8000a9e <dc_motor_set+0x76>
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b7e:	e78e      	b.n	8000a9e <dc_motor_set+0x76>
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	f3af 8000 	nop.w
 8000b88:	00000000 	.word	0x00000000
 8000b8c:	406fe000 	.word	0x406fe000

08000b90 <dc_motor_disable>:
/**
 * @brief disables the motor.
 */
void dc_motor_disable(dc_motor_s *motor)
{
	if (motor == NULL || motor->timer == NULL)
 8000b90:	4603      	mov	r3, r0
 8000b92:	b178      	cbz	r0, 8000bb4 <dc_motor_disable+0x24>
 8000b94:	6802      	ldr	r2, [r0, #0]
 8000b96:	b16a      	cbz	r2, 8000bb4 <dc_motor_disable+0x24>
		 * @todo throw an error
		 */
	}

	// Set duty cycle to 0 for both channels
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8000b98:	6841      	ldr	r1, [r0, #4]
 8000b9a:	b961      	cbnz	r1, 8000bb6 <dc_motor_disable+0x26>
 8000b9c:	6812      	ldr	r2, [r2, #0]
 8000b9e:	6351      	str	r1, [r2, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	b9c2      	cbnz	r2, 8000bd6 <dc_motor_disable+0x46>
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	6812      	ldr	r2, [r2, #0]
 8000ba8:	2100      	movs	r1, #0
 8000baa:	6351      	str	r1, [r2, #52]	@ 0x34
	motor->current_duty_cycle = 0;
 8000bac:	2200      	movs	r2, #0
 8000bae:	735a      	strb	r2, [r3, #13]

	motor->status = MS_DISABLED;
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	739a      	strb	r2, [r3, #14]
}
 8000bb4:	4770      	bx	lr
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8000bb6:	2904      	cmp	r1, #4
 8000bb8:	d005      	beq.n	8000bc6 <dc_motor_disable+0x36>
 8000bba:	2908      	cmp	r1, #8
 8000bbc:	d007      	beq.n	8000bce <dc_motor_disable+0x3e>
 8000bbe:	6812      	ldr	r2, [r2, #0]
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	6411      	str	r1, [r2, #64]	@ 0x40
 8000bc4:	e7ec      	b.n	8000ba0 <dc_motor_disable+0x10>
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	2100      	movs	r1, #0
 8000bca:	6391      	str	r1, [r2, #56]	@ 0x38
 8000bcc:	e7e8      	b.n	8000ba0 <dc_motor_disable+0x10>
 8000bce:	6812      	ldr	r2, [r2, #0]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8000bd4:	e7e4      	b.n	8000ba0 <dc_motor_disable+0x10>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8000bd6:	2a04      	cmp	r2, #4
 8000bd8:	d006      	beq.n	8000be8 <dc_motor_disable+0x58>
 8000bda:	2a08      	cmp	r2, #8
 8000bdc:	d009      	beq.n	8000bf2 <dc_motor_disable+0x62>
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	2100      	movs	r1, #0
 8000be4:	6411      	str	r1, [r2, #64]	@ 0x40
 8000be6:	e7e1      	b.n	8000bac <dc_motor_disable+0x1c>
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	6812      	ldr	r2, [r2, #0]
 8000bec:	2100      	movs	r1, #0
 8000bee:	6391      	str	r1, [r2, #56]	@ 0x38
 8000bf0:	e7dc      	b.n	8000bac <dc_motor_disable+0x1c>
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	6812      	ldr	r2, [r2, #0]
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8000bfa:	e7d7      	b.n	8000bac <dc_motor_disable+0x1c>

08000bfc <dc_motor_set_timer_freq>:
{
 8000bfc:	b538      	push	{r3, r4, r5, lr}
 8000bfe:	4605      	mov	r5, r0
	if (frequency == 0)
 8000c00:	b199      	cbz	r1, 8000c2a <dc_motor_set_timer_freq+0x2e>
 8000c02:	460c      	mov	r4, r1
	if (frequency > DC_MOTOR_MAX_FREQUENCY)
 8000c04:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d900      	bls.n	8000c0e <dc_motor_set_timer_freq+0x12>
		frequency = DC_MOTOR_MAX_FREQUENCY;
 8000c0c:	461c      	mov	r4, r3
	uint32_t timer_clock = HAL_RCC_GetSysClockFreq(); // Get the timer clock frequency
 8000c0e:	f000 fd69 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
	for (prescaler = 0; prescaler <= 0xFFFF; prescaler++)
 8000c12:	2200      	movs	r2, #0
		auto_reload = (timer_clock / ((prescaler + 1) * frequency)) - 1;
 8000c14:	fb02 4304 	mla	r3, r2, r4, r4
 8000c18:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c1c:	3b01      	subs	r3, #1
		if (auto_reload <= 0xFFFF)
 8000c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c22:	d305      	bcc.n	8000c30 <dc_motor_set_timer_freq+0x34>
	for (prescaler = 0; prescaler <= 0xFFFF; prescaler++)
 8000c24:	3201      	adds	r2, #1
 8000c26:	b292      	uxth	r2, r2
		auto_reload = (timer_clock / ((prescaler + 1) * frequency)) - 1;
 8000c28:	e7f4      	b.n	8000c14 <dc_motor_set_timer_freq+0x18>
		dc_motor_disable(motor);
 8000c2a:	f7ff ffb1 	bl	8000b90 <dc_motor_disable>
		return;
 8000c2e:	e00c      	b.n	8000c4a <dc_motor_set_timer_freq+0x4e>
	__HAL_TIM_SET_PRESCALER((TIM_HandleTypeDef *)motor->timer, prescaler);
 8000c30:	6829      	ldr	r1, [r5, #0]
 8000c32:	6809      	ldr	r1, [r1, #0]
 8000c34:	628a      	str	r2, [r1, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer, auto_reload);
 8000c36:	682a      	ldr	r2, [r5, #0]
 8000c38:	6812      	ldr	r2, [r2, #0]
 8000c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c3c:	682a      	ldr	r2, [r5, #0]
 8000c3e:	60d3      	str	r3, [r2, #12]
	dc_motor_set(motor, motor->current_direction, motor->current_duty_cycle);
 8000c40:	7b6a      	ldrb	r2, [r5, #13]
 8000c42:	7b29      	ldrb	r1, [r5, #12]
 8000c44:	4628      	mov	r0, r5
 8000c46:	f7ff feef 	bl	8000a28 <dc_motor_set>
}
 8000c4a:	bd38      	pop	{r3, r4, r5, pc}

08000c4c <dc_motor_init>:
    if (motor == NULL || timer == NULL)
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d04c      	beq.n	8000cea <dc_motor_init+0x9e>
{
 8000c50:	b510      	push	{r4, lr}
 8000c52:	4604      	mov	r4, r0
    if (motor == NULL || timer == NULL)
 8000c54:	b311      	cbz	r1, 8000c9c <dc_motor_init+0x50>
    motor->timer = timer;
 8000c56:	6001      	str	r1, [r0, #0]
    motor->timer_channel_output_1 = timer_channel_output_1;
 8000c58:	6042      	str	r2, [r0, #4]
    motor->timer_channel_output_2 = timer_channel_output_2;
 8000c5a:	6083      	str	r3, [r0, #8]
	motor->current_direction = MD_FORWARD;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	7303      	strb	r3, [r0, #12]
	HAL_TIM_Base_Start((TIM_HandleTypeDef *)motor->timer);
 8000c60:	4608      	mov	r0, r1
 8000c62:	f000 feef 	bl	8001a44 <HAL_TIM_Base_Start>
	dc_motor_set_timer_freq(motor, frequency);
 8000c66:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f7ff ffc6 	bl	8000bfc <dc_motor_set_timer_freq>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8000c70:	6863      	ldr	r3, [r4, #4]
 8000c72:	b9a3      	cbnz	r3, 8000c9e <dc_motor_init+0x52>
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8000c7c:	68a3      	ldr	r3, [r4, #8]
 8000c7e:	bb0b      	cbnz	r3, 8000cc4 <dc_motor_init+0x78>
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2200      	movs	r2, #0
 8000c86:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1);
 8000c88:	6861      	ldr	r1, [r4, #4]
 8000c8a:	6820      	ldr	r0, [r4, #0]
 8000c8c:	f001 f8f8 	bl	8001e80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2);
 8000c90:	68a1      	ldr	r1, [r4, #8]
 8000c92:	6820      	ldr	r0, [r4, #0]
 8000c94:	f001 f8f4 	bl	8001e80 <HAL_TIM_PWM_Start>
	motor->current_duty_cycle = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	7363      	strb	r3, [r4, #13]
}
 8000c9c:	bd10      	pop	{r4, pc}
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	d006      	beq.n	8000cb0 <dc_motor_init+0x64>
 8000ca2:	2b08      	cmp	r3, #8
 8000ca4:	d009      	beq.n	8000cba <dc_motor_init+0x6e>
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2200      	movs	r2, #0
 8000cac:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cae:	e7e5      	b.n	8000c7c <dc_motor_init+0x30>
 8000cb0:	6823      	ldr	r3, [r4, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cb8:	e7e0      	b.n	8000c7c <dc_motor_init+0x30>
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cc2:	e7db      	b.n	8000c7c <dc_motor_init+0x30>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d006      	beq.n	8000cd6 <dc_motor_init+0x8a>
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d009      	beq.n	8000ce0 <dc_motor_init+0x94>
 8000ccc:	6823      	ldr	r3, [r4, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cd4:	e7d8      	b.n	8000c88 <dc_motor_init+0x3c>
 8000cd6:	6823      	ldr	r3, [r4, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cde:	e7d3      	b.n	8000c88 <dc_motor_init+0x3c>
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ce8:	e7ce      	b.n	8000c88 <dc_motor_init+0x3c>
 8000cea:	4770      	bx	lr

08000cec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cec:	b510      	push	{r4, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	a905      	add	r1, sp, #20
 8000cf2:	2400      	movs	r4, #0
 8000cf4:	9405      	str	r4, [sp, #20]
 8000cf6:	604c      	str	r4, [r1, #4]
 8000cf8:	608c      	str	r4, [r1, #8]
 8000cfa:	60cc      	str	r4, [r1, #12]
 8000cfc:	610c      	str	r4, [r1, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	9401      	str	r4, [sp, #4]
 8000d00:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <MX_GPIO_Init+0x90>)
 8000d02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d04:	f042 0204 	orr.w	r2, r2, #4
 8000d08:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d0c:	f002 0204 	and.w	r2, r2, #4
 8000d10:	9201      	str	r2, [sp, #4]
 8000d12:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d14:	9402      	str	r4, [sp, #8]
 8000d16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d18:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d20:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000d24:	9202      	str	r2, [sp, #8]
 8000d26:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	9403      	str	r4, [sp, #12]
 8000d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d2c:	f042 0201 	orr.w	r2, r2, #1
 8000d30:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d34:	f002 0201 	and.w	r2, r2, #1
 8000d38:	9203      	str	r2, [sp, #12]
 8000d3a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	9404      	str	r4, [sp, #16]
 8000d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d40:	f042 0202 	orr.w	r2, r2, #2
 8000d44:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	9304      	str	r3, [sp, #16]
 8000d4e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d54:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d5a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	4807      	ldr	r0, [pc, #28]	@ (8000d80 <MX_GPIO_Init+0x94>)
 8000d62:	f000 f9b5 	bl	80010d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d66:	4622      	mov	r2, r4
 8000d68:	4621      	mov	r1, r4
 8000d6a:	2028      	movs	r0, #40	@ 0x28
 8000d6c:	f000 f988 	bl	8001080 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d70:	2028      	movs	r0, #40	@ 0x28
 8000d72:	f000 f995 	bl	80010a0 <HAL_NVIC_EnableIRQ>

}
 8000d76:	b00a      	add	sp, #40	@ 0x28
 8000d78:	bd10      	pop	{r4, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020400 	.word	0x40020400

08000d84 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_12)
 8000d84:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8000d88:	d000      	beq.n	8000d8c <HAL_GPIO_EXTI_Callback+0x8>
 8000d8a:	4770      	bx	lr
{
 8000d8c:	b508      	push	{r3, lr}
  {
    trigger_tooth_handle(&engine.trigger);
 8000d8e:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <HAL_GPIO_EXTI_Callback+0x14>)
 8000d90:	f001 fa64 	bl	800225c <trigger_tooth_handle>
  }
}
 8000d94:	bd08      	pop	{r3, pc}
 8000d96:	bf00      	nop
 8000d98:	20000040 	.word	0x20000040

08000d9c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <Error_Handler+0x2>

08000da0 <SystemClock_Config>:
{
 8000da0:	b510      	push	{r4, lr}
 8000da2:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da4:	ac08      	add	r4, sp, #32
 8000da6:	2230      	movs	r2, #48	@ 0x30
 8000da8:	2100      	movs	r1, #0
 8000daa:	4620      	mov	r0, r4
 8000dac:	f001 fb2b 	bl	8002406 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	2300      	movs	r3, #0
 8000db2:	9303      	str	r3, [sp, #12]
 8000db4:	9304      	str	r3, [sp, #16]
 8000db6:	9305      	str	r3, [sp, #20]
 8000db8:	9306      	str	r3, [sp, #24]
 8000dba:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbc:	9301      	str	r3, [sp, #4]
 8000dbe:	4a20      	ldr	r2, [pc, #128]	@ (8000e40 <SystemClock_Config+0xa0>)
 8000dc0:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000dc2:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000dc6:	6411      	str	r1, [r2, #64]	@ 0x40
 8000dc8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000dca:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000dce:	9201      	str	r2, [sp, #4]
 8000dd0:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dd2:	9302      	str	r3, [sp, #8]
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e44 <SystemClock_Config+0xa4>)
 8000dd6:	6813      	ldr	r3, [r2, #0]
 8000dd8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	6813      	ldr	r3, [r2, #0]
 8000de4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de8:	9302      	str	r3, [sp, #8]
 8000dea:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df4:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df6:	2302      	movs	r3, #2
 8000df8:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000dfe:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e00:	2219      	movs	r2, #25
 8000e02:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e04:	22a8      	movs	r2, #168	@ 0xa8
 8000e06:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e08:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0e:	4620      	mov	r0, r4
 8000e10:	f000 fa6c 	bl	80012ec <HAL_RCC_OscConfig>
 8000e14:	b978      	cbnz	r0, 8000e36 <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e16:	230f      	movs	r3, #15
 8000e18:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e22:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e26:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e28:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e2a:	a803      	add	r0, sp, #12
 8000e2c:	f000 fcae 	bl	800178c <HAL_RCC_ClockConfig>
 8000e30:	b918      	cbnz	r0, 8000e3a <SystemClock_Config+0x9a>
}
 8000e32:	b014      	add	sp, #80	@ 0x50
 8000e34:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e36:	f7ff ffb1 	bl	8000d9c <Error_Handler>
    Error_Handler();
 8000e3a:	f7ff ffaf 	bl	8000d9c <Error_Handler>
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40007000 	.word	0x40007000

08000e48 <main>:
{
 8000e48:	b510      	push	{r4, lr}
 8000e4a:	b088      	sub	sp, #32
  HAL_Init();
 8000e4c:	f000 f884 	bl	8000f58 <HAL_Init>
  SystemClock_Config();
 8000e50:	f7ff ffa6 	bl	8000da0 <SystemClock_Config>
  MX_GPIO_Init();
 8000e54:	f7ff ff4a 	bl	8000cec <MX_GPIO_Init>
  MX_TIM5_Init();
 8000e58:	f001 f8de 	bl	8002018 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000e5c:	f001 f968 	bl	8002130 <MX_TIM3_Init>
  controller_time_start(&htim5);
 8000e60:	4827      	ldr	r0, [pc, #156]	@ (8000f00 <main+0xb8>)
 8000e62:	f7ff fdc1 	bl	80009e8 <controller_time_start>
  trigger_init(&engine.trigger);
 8000e66:	4827      	ldr	r0, [pc, #156]	@ (8000f04 <main+0xbc>)
 8000e68:	f001 f9dc 	bl	8002224 <trigger_init>
  dc_motor_s mymotor = {0};
 8000e6c:	a803      	add	r0, sp, #12
 8000e6e:	2200      	movs	r2, #0
 8000e70:	9203      	str	r2, [sp, #12]
 8000e72:	6042      	str	r2, [r0, #4]
 8000e74:	6082      	str	r2, [r0, #8]
 8000e76:	60c2      	str	r2, [r0, #12]
 8000e78:	6102      	str	r2, [r0, #16]
  dc_motor_init(&mymotor, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, 10000);
 8000e7a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2304      	movs	r3, #4
 8000e82:	4921      	ldr	r1, [pc, #132]	@ (8000f08 <main+0xc0>)
 8000e84:	f7ff fee2 	bl	8000c4c <dc_motor_init>
 8000e88:	e037      	b.n	8000efa <main+0xb2>
      dc_motor_set(&mymotor, MD_FORWARD, i);
 8000e8a:	4622      	mov	r2, r4
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	a803      	add	r0, sp, #12
 8000e90:	f7ff fdca 	bl	8000a28 <dc_motor_set>
      HAL_Delay(2);
 8000e94:	2002      	movs	r0, #2
 8000e96:	f000 f88b 	bl	8000fb0 <HAL_Delay>
    for (uint8_t i = 0; i < 0xff; i++)
 8000e9a:	3401      	adds	r4, #1
 8000e9c:	b2e4      	uxtb	r4, r4
 8000e9e:	2cff      	cmp	r4, #255	@ 0xff
 8000ea0:	d1f3      	bne.n	8000e8a <main+0x42>
    for (uint8_t i = 0; i < 0xff; i++)
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	e00a      	b.n	8000ebc <main+0x74>
      dc_motor_set(&mymotor, MD_FORWARD, 0xff - i);
 8000ea6:	43e2      	mvns	r2, r4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	2100      	movs	r1, #0
 8000eac:	a803      	add	r0, sp, #12
 8000eae:	f7ff fdbb 	bl	8000a28 <dc_motor_set>
      HAL_Delay(2);
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f000 f87c 	bl	8000fb0 <HAL_Delay>
    for (uint8_t i = 0; i < 0xff; i++)
 8000eb8:	3401      	adds	r4, #1
 8000eba:	b2e4      	uxtb	r4, r4
 8000ebc:	2cff      	cmp	r4, #255	@ 0xff
 8000ebe:	d1f2      	bne.n	8000ea6 <main+0x5e>
    for (uint8_t i = 0; i < 0xff; i++)
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e009      	b.n	8000ed8 <main+0x90>
      dc_motor_set(&mymotor, MD_REVERSE, i);
 8000ec4:	4622      	mov	r2, r4
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	a803      	add	r0, sp, #12
 8000eca:	f7ff fdad 	bl	8000a28 <dc_motor_set>
      HAL_Delay(2);
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f000 f86e 	bl	8000fb0 <HAL_Delay>
    for (uint8_t i = 0; i < 0xff; i++)
 8000ed4:	3401      	adds	r4, #1
 8000ed6:	b2e4      	uxtb	r4, r4
 8000ed8:	2cff      	cmp	r4, #255	@ 0xff
 8000eda:	d1f3      	bne.n	8000ec4 <main+0x7c>
    for (uint8_t i = 0; i < 0xff; i++)
 8000edc:	2400      	movs	r4, #0
 8000ede:	e00a      	b.n	8000ef6 <main+0xae>
      dc_motor_set(&mymotor, MD_REVERSE, 0xff - i);
 8000ee0:	43e2      	mvns	r2, r4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	a803      	add	r0, sp, #12
 8000ee8:	f7ff fd9e 	bl	8000a28 <dc_motor_set>
      HAL_Delay(2);
 8000eec:	2002      	movs	r0, #2
 8000eee:	f000 f85f 	bl	8000fb0 <HAL_Delay>
    for (uint8_t i = 0; i < 0xff; i++)
 8000ef2:	3401      	adds	r4, #1
 8000ef4:	b2e4      	uxtb	r4, r4
 8000ef6:	2cff      	cmp	r4, #255	@ 0xff
 8000ef8:	d1f2      	bne.n	8000ee0 <main+0x98>
    for (uint8_t i = 0; i < 0xff; i++)
 8000efa:	2400      	movs	r4, #0
 8000efc:	e7cf      	b.n	8000e9e <main+0x56>
 8000efe:	bf00      	nop
 8000f00:	20000070 	.word	0x20000070
 8000f04:	20000040 	.word	0x20000040
 8000f08:	200000b8 	.word	0x200000b8

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b510      	push	{r4, lr}
 8000f0e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <HAL_InitTick+0x40>)
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f50 <HAL_InitTick+0x44>)
 8000f1e:	6810      	ldr	r0, [r2, #0]
 8000f20:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f24:	f000 f8c0 	bl	80010a8 <HAL_SYSTICK_Config>
 8000f28:	b968      	cbnz	r0, 8000f46 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	2c0f      	cmp	r4, #15
 8000f2c:	d901      	bls.n	8000f32 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f2e:	2001      	movs	r0, #1
 8000f30:	e00a      	b.n	8000f48 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f32:	2200      	movs	r2, #0
 8000f34:	4621      	mov	r1, r4
 8000f36:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3a:	f000 f8a1 	bl	8001080 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3e:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <HAL_InitTick+0x48>)
 8000f40:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2000      	movs	r0, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000f46:	2001      	movs	r0, #1
}
 8000f48:	bd10      	pop	{r4, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_Init>:
{
 8000f58:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <HAL_Init+0x30>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f62:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000f6a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f72:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 f871 	bl	800105c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	200f      	movs	r0, #15
 8000f7c:	f7ff ffc6 	bl	8000f0c <HAL_InitTick>
  HAL_MspInit();
 8000f80:	f000 f998 	bl	80012b4 <HAL_MspInit>
}
 8000f84:	2000      	movs	r0, #0
 8000f86:	bd08      	pop	{r3, pc}
 8000f88:	40023c00 	.word	0x40023c00

08000f8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f8c:	4a03      	ldr	r2, [pc, #12]	@ (8000f9c <HAL_IncTick+0x10>)
 8000f8e:	6811      	ldr	r1, [r2, #0]
 8000f90:	4b03      	ldr	r3, [pc, #12]	@ (8000fa0 <HAL_IncTick+0x14>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	440b      	add	r3, r1
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2000006c 	.word	0x2000006c
 8000fa0:	20000000 	.word	0x20000000

08000fa4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fa4:	4b01      	ldr	r3, [pc, #4]	@ (8000fac <HAL_GetTick+0x8>)
 8000fa6:	6818      	ldr	r0, [r3, #0]
}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2000006c 	.word	0x2000006c

08000fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb0:	b538      	push	{r3, r4, r5, lr}
 8000fb2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff fff6 	bl	8000fa4 <HAL_GetTick>
 8000fb8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000fbe:	d002      	beq.n	8000fc6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc0:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <HAL_Delay+0x24>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc6:	f7ff ffed 	bl	8000fa4 <HAL_GetTick>
 8000fca:	1b40      	subs	r0, r0, r5
 8000fcc:	42a0      	cmp	r0, r4
 8000fce:	d3fa      	bcc.n	8000fc6 <HAL_Delay+0x16>
  {
  }
}
 8000fd0:	bd38      	pop	{r3, r4, r5, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000000 	.word	0x20000000

08000fd8 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	db07      	blt.n	8000fec <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fdc:	f000 021f 	and.w	r2, r0, #31
 8000fe0:	0940      	lsrs	r0, r0, #5
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	4093      	lsls	r3, r2
 8000fe6:	4a02      	ldr	r2, [pc, #8]	@ (8000ff0 <__NVIC_EnableIRQ+0x18>)
 8000fe8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	db08      	blt.n	800100a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	0109      	lsls	r1, r1, #4
 8000ffa:	b2c9      	uxtb	r1, r1
 8000ffc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001000:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001004:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001008:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	f000 000f 	and.w	r0, r0, #15
 800100e:	0109      	lsls	r1, r1, #4
 8001010:	b2c9      	uxtb	r1, r1
 8001012:	4b01      	ldr	r3, [pc, #4]	@ (8001018 <__NVIC_SetPriority+0x24>)
 8001014:	5419      	strb	r1, [r3, r0]
  }
}
 8001016:	4770      	bx	lr
 8001018:	e000ed14 	.word	0xe000ed14

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001022:	f1c0 0c07 	rsb	ip, r0, #7
 8001026:	f1bc 0f04 	cmp.w	ip, #4
 800102a:	bf28      	it	cs
 800102c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001030:	1d03      	adds	r3, r0, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d90f      	bls.n	8001056 <NVIC_EncodePriority+0x3a>
 8001036:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	f04f 3eff 	mov.w	lr, #4294967295
 800103c:	fa0e f00c 	lsl.w	r0, lr, ip
 8001040:	ea21 0100 	bic.w	r1, r1, r0
 8001044:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001046:	fa0e fe03 	lsl.w	lr, lr, r3
 800104a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800104e:	ea41 0002 	orr.w	r0, r1, r2
 8001052:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	2300      	movs	r3, #0
 8001058:	e7ee      	b.n	8001038 <NVIC_EncodePriority+0x1c>
	...

0800105c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4a07      	ldr	r2, [pc, #28]	@ (800107c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800105e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001060:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001064:	041b      	lsls	r3, r3, #16
 8001066:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	0200      	lsls	r0, r0, #8
 800106a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001078:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001080:	b510      	push	{r4, lr}
 8001082:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b05      	ldr	r3, [pc, #20]	@ (800109c <HAL_NVIC_SetPriority+0x1c>)
 8001086:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001088:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800108c:	f7ff ffc6 	bl	800101c <NVIC_EncodePriority>
 8001090:	4601      	mov	r1, r0
 8001092:	4620      	mov	r0, r4
 8001094:	f7ff ffae 	bl	8000ff4 <__NVIC_SetPriority>
}
 8001098:	bd10      	pop	{r4, pc}
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a2:	f7ff ff99 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 80010a6:	bd08      	pop	{r3, pc}

080010a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a8:	3801      	subs	r0, #1
 80010aa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80010ae:	d20b      	bcs.n	80010c8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80010b4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <HAL_SYSTICK_Config+0x24>)
 80010b8:	21f0      	movs	r1, #240	@ 0xf0
 80010ba:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010be:	2000      	movs	r0, #0
 80010c0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	2207      	movs	r2, #7
 80010c4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010c8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	f200 80d7 	bhi.w	8001286 <HAL_GPIO_Init+0x1b6>
{
 80010d8:	b570      	push	{r4, r5, r6, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	e065      	b.n	80011aa <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010de:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80010e4:	2403      	movs	r4, #3
 80010e6:	fa04 f40e 	lsl.w	r4, r4, lr
 80010ea:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ee:	68cc      	ldr	r4, [r1, #12]
 80010f0:	fa04 f40e 	lsl.w	r4, r4, lr
 80010f4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80010f6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010fa:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fe:	684a      	ldr	r2, [r1, #4]
 8001100:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001104:	409a      	lsls	r2, r3
 8001106:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001108:	6042      	str	r2, [r0, #4]
 800110a:	e05c      	b.n	80011c6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800110c:	08dc      	lsrs	r4, r3, #3
 800110e:	3408      	adds	r4, #8
 8001110:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001114:	f003 0507 	and.w	r5, r3, #7
 8001118:	00ad      	lsls	r5, r5, #2
 800111a:	f04f 0e0f 	mov.w	lr, #15
 800111e:	fa0e fe05 	lsl.w	lr, lr, r5
 8001122:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001126:	690a      	ldr	r2, [r1, #16]
 8001128:	40aa      	lsls	r2, r5
 800112a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800112e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001132:	e05c      	b.n	80011ee <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001134:	2204      	movs	r2, #4
 8001136:	e000      	b.n	800113a <HAL_GPIO_Init+0x6a>
 8001138:	2200      	movs	r2, #0
 800113a:	fa02 f20e 	lsl.w	r2, r2, lr
 800113e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001140:	3402      	adds	r4, #2
 8001142:	4d51      	ldr	r5, [pc, #324]	@ (8001288 <HAL_GPIO_Init+0x1b8>)
 8001144:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001148:	4a50      	ldr	r2, [pc, #320]	@ (800128c <HAL_GPIO_Init+0x1bc>)
 800114a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800114c:	ea6f 020c 	mvn.w	r2, ip
 8001150:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001154:	684e      	ldr	r6, [r1, #4]
 8001156:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800115a:	d001      	beq.n	8001160 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800115c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001160:	4c4a      	ldr	r4, [pc, #296]	@ (800128c <HAL_GPIO_Init+0x1bc>)
 8001162:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001164:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001166:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116a:	684e      	ldr	r6, [r1, #4]
 800116c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001170:	d001      	beq.n	8001176 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001172:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001176:	4c45      	ldr	r4, [pc, #276]	@ (800128c <HAL_GPIO_Init+0x1bc>)
 8001178:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800117a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800117c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001180:	684e      	ldr	r6, [r1, #4]
 8001182:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001186:	d001      	beq.n	800118c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001188:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800118c:	4c3f      	ldr	r4, [pc, #252]	@ (800128c <HAL_GPIO_Init+0x1bc>)
 800118e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001190:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001192:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001194:	684d      	ldr	r5, [r1, #4]
 8001196:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800119a:	d001      	beq.n	80011a0 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 800119c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80011a0:	4c3a      	ldr	r4, [pc, #232]	@ (800128c <HAL_GPIO_Init+0x1bc>)
 80011a2:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a4:	3301      	adds	r3, #1
 80011a6:	2b0f      	cmp	r3, #15
 80011a8:	d86b      	bhi.n	8001282 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80011aa:	2201      	movs	r2, #1
 80011ac:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ae:	680c      	ldr	r4, [r1, #0]
 80011b0:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80011b4:	ea32 0404 	bics.w	r4, r2, r4
 80011b8:	d1f4      	bne.n	80011a4 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	684c      	ldr	r4, [r1, #4]
 80011bc:	f004 0403 	and.w	r4, r4, #3
 80011c0:	3c01      	subs	r4, #1
 80011c2:	2c01      	cmp	r4, #1
 80011c4:	d98b      	bls.n	80010de <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c6:	684a      	ldr	r2, [r1, #4]
 80011c8:	f002 0203 	and.w	r2, r2, #3
 80011cc:	2a03      	cmp	r2, #3
 80011ce:	d009      	beq.n	80011e4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80011d0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011d2:	005d      	lsls	r5, r3, #1
 80011d4:	2203      	movs	r2, #3
 80011d6:	40aa      	lsls	r2, r5
 80011d8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011dc:	688a      	ldr	r2, [r1, #8]
 80011de:	40aa      	lsls	r2, r5
 80011e0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80011e2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e4:	684a      	ldr	r2, [r1, #4]
 80011e6:	f002 0203 	and.w	r2, r2, #3
 80011ea:	2a02      	cmp	r2, #2
 80011ec:	d08e      	beq.n	800110c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80011ee:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f20e 	lsl.w	r2, r2, lr
 80011fa:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011fe:	684a      	ldr	r2, [r1, #4]
 8001200:	f002 0203 	and.w	r2, r2, #3
 8001204:	fa02 f20e 	lsl.w	r2, r2, lr
 8001208:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800120a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800120c:	684a      	ldr	r2, [r1, #4]
 800120e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001212:	d0c7      	beq.n	80011a4 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001214:	2200      	movs	r2, #0
 8001216:	9201      	str	r2, [sp, #4]
 8001218:	4a1d      	ldr	r2, [pc, #116]	@ (8001290 <HAL_GPIO_Init+0x1c0>)
 800121a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800121c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001220:	6454      	str	r4, [r2, #68]	@ 0x44
 8001222:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001224:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001228:	9201      	str	r2, [sp, #4]
 800122a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800122c:	089c      	lsrs	r4, r3, #2
 800122e:	1ca5      	adds	r5, r4, #2
 8001230:	4a15      	ldr	r2, [pc, #84]	@ (8001288 <HAL_GPIO_Init+0x1b8>)
 8001232:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001236:	f003 0e03 	and.w	lr, r3, #3
 800123a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800123e:	220f      	movs	r2, #15
 8001240:	fa02 f20e 	lsl.w	r2, r2, lr
 8001244:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001248:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <HAL_GPIO_Init+0x1c4>)
 800124a:	4290      	cmp	r0, r2
 800124c:	f43f af74 	beq.w	8001138 <HAL_GPIO_Init+0x68>
 8001250:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001254:	4290      	cmp	r0, r2
 8001256:	d00e      	beq.n	8001276 <HAL_GPIO_Init+0x1a6>
 8001258:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800125c:	4290      	cmp	r0, r2
 800125e:	d00c      	beq.n	800127a <HAL_GPIO_Init+0x1aa>
 8001260:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001264:	4290      	cmp	r0, r2
 8001266:	d00a      	beq.n	800127e <HAL_GPIO_Init+0x1ae>
 8001268:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800126c:	4290      	cmp	r0, r2
 800126e:	f43f af61 	beq.w	8001134 <HAL_GPIO_Init+0x64>
 8001272:	2207      	movs	r2, #7
 8001274:	e761      	b.n	800113a <HAL_GPIO_Init+0x6a>
 8001276:	2201      	movs	r2, #1
 8001278:	e75f      	b.n	800113a <HAL_GPIO_Init+0x6a>
 800127a:	2202      	movs	r2, #2
 800127c:	e75d      	b.n	800113a <HAL_GPIO_Init+0x6a>
 800127e:	2203      	movs	r2, #3
 8001280:	e75b      	b.n	800113a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001282:	b002      	add	sp, #8
 8001284:	bd70      	pop	{r4, r5, r6, pc}
 8001286:	4770      	bx	lr
 8001288:	40013800 	.word	0x40013800
 800128c:	40013c00 	.word	0x40013c00
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000

08001298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001298:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800129a:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	4203      	tst	r3, r0
 80012a0:	d100      	bne.n	80012a4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80012a2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012a4:	4b02      	ldr	r3, [pc, #8]	@ (80012b0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80012a6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012a8:	f7ff fd6c 	bl	8000d84 <HAL_GPIO_EXTI_Callback>
}
 80012ac:	e7f9      	b.n	80012a2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80012ae:	bf00      	nop
 80012b0:	40013c00 	.word	0x40013c00

080012b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2100      	movs	r1, #0
 80012b8:	9100      	str	r1, [sp, #0]
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <HAL_MspInit+0x34>)
 80012bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80012c2:	645a      	str	r2, [r3, #68]	@ 0x44
 80012c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012c6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80012ca:	9200      	str	r2, [sp, #0]
 80012cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	9101      	str	r1, [sp, #4]
 80012d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012d2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e2:	b002      	add	sp, #8
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800

080012ec <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012ec:	2800      	cmp	r0, #0
 80012ee:	f000 81e0 	beq.w	80016b2 <HAL_RCC_OscConfig+0x3c6>
{
 80012f2:	b570      	push	{r4, r5, r6, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f8:	6803      	ldr	r3, [r0, #0]
 80012fa:	f013 0f01 	tst.w	r3, #1
 80012fe:	d03b      	beq.n	8001378 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001300:	4b9f      	ldr	r3, [pc, #636]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b04      	cmp	r3, #4
 800130a:	d02c      	beq.n	8001366 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130c:	4b9c      	ldr	r3, [pc, #624]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001314:	2b08      	cmp	r3, #8
 8001316:	d021      	beq.n	800135c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	6863      	ldr	r3, [r4, #4]
 800131a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800131e:	d04f      	beq.n	80013c0 <HAL_RCC_OscConfig+0xd4>
 8001320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001324:	d052      	beq.n	80013cc <HAL_RCC_OscConfig+0xe0>
 8001326:	4b96      	ldr	r3, [pc, #600]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001336:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001338:	6863      	ldr	r3, [r4, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d050      	beq.n	80013e0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fe31 	bl	8000fa4 <HAL_GetTick>
 8001342:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001344:	4b8e      	ldr	r3, [pc, #568]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800134c:	d114      	bne.n	8001378 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800134e:	f7ff fe29 	bl	8000fa4 <HAL_GetTick>
 8001352:	1b40      	subs	r0, r0, r5
 8001354:	2864      	cmp	r0, #100	@ 0x64
 8001356:	d9f5      	bls.n	8001344 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001358:	2003      	movs	r0, #3
 800135a:	e1b1      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800135c:	4b88      	ldr	r3, [pc, #544]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001364:	d0d8      	beq.n	8001318 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001366:	4b86      	ldr	r3, [pc, #536]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800136e:	d003      	beq.n	8001378 <HAL_RCC_OscConfig+0x8c>
 8001370:	6863      	ldr	r3, [r4, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 819f 	beq.w	80016b6 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	f013 0f02 	tst.w	r3, #2
 800137e:	d054      	beq.n	800142a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001380:	4b7f      	ldr	r3, [pc, #508]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f013 0f0c 	tst.w	r3, #12
 8001388:	d03e      	beq.n	8001408 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138a:	4b7d      	ldr	r3, [pc, #500]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001392:	2b08      	cmp	r3, #8
 8001394:	d033      	beq.n	80013fe <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001396:	68e3      	ldr	r3, [r4, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d068      	beq.n	800146e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139c:	4b79      	ldr	r3, [pc, #484]	@ (8001584 <HAL_RCC_OscConfig+0x298>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a2:	f7ff fdff 	bl	8000fa4 <HAL_GetTick>
 80013a6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a8:	4b75      	ldr	r3, [pc, #468]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f013 0f02 	tst.w	r3, #2
 80013b0:	d154      	bne.n	800145c <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b2:	f7ff fdf7 	bl	8000fa4 <HAL_GetTick>
 80013b6:	1b40      	subs	r0, r0, r5
 80013b8:	2802      	cmp	r0, #2
 80013ba:	d9f5      	bls.n	80013a8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80013bc:	2003      	movs	r0, #3
 80013be:	e17f      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c0:	4a6f      	ldr	r2, [pc, #444]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 80013c2:	6813      	ldr	r3, [r2, #0]
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e7b5      	b.n	8001338 <HAL_RCC_OscConfig+0x4c>
 80013cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	e7ab      	b.n	8001338 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80013e0:	f7ff fde0 	bl	8000fa4 <HAL_GetTick>
 80013e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e6:	4b66      	ldr	r3, [pc, #408]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80013ee:	d0c3      	beq.n	8001378 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fdd8 	bl	8000fa4 <HAL_GetTick>
 80013f4:	1b40      	subs	r0, r0, r5
 80013f6:	2864      	cmp	r0, #100	@ 0x64
 80013f8:	d9f5      	bls.n	80013e6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80013fa:	2003      	movs	r0, #3
 80013fc:	e160      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fe:	4b60      	ldr	r3, [pc, #384]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001406:	d1c6      	bne.n	8001396 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001408:	4b5d      	ldr	r3, [pc, #372]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f013 0f02 	tst.w	r3, #2
 8001410:	d003      	beq.n	800141a <HAL_RCC_OscConfig+0x12e>
 8001412:	68e3      	ldr	r3, [r4, #12]
 8001414:	2b01      	cmp	r3, #1
 8001416:	f040 8150 	bne.w	80016ba <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141a:	4a59      	ldr	r2, [pc, #356]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 800141c:	6813      	ldr	r3, [r2, #0]
 800141e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001422:	6921      	ldr	r1, [r4, #16]
 8001424:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001428:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	f013 0f08 	tst.w	r3, #8
 8001430:	d042      	beq.n	80014b8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001432:	6963      	ldr	r3, [r4, #20]
 8001434:	b36b      	cbz	r3, 8001492 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001436:	4b53      	ldr	r3, [pc, #332]	@ (8001584 <HAL_RCC_OscConfig+0x298>)
 8001438:	2201      	movs	r2, #1
 800143a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143e:	f7ff fdb1 	bl	8000fa4 <HAL_GetTick>
 8001442:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001444:	4b4e      	ldr	r3, [pc, #312]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 8001446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001448:	f013 0f02 	tst.w	r3, #2
 800144c:	d134      	bne.n	80014b8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144e:	f7ff fda9 	bl	8000fa4 <HAL_GetTick>
 8001452:	1b40      	subs	r0, r0, r5
 8001454:	2802      	cmp	r0, #2
 8001456:	d9f5      	bls.n	8001444 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001458:	2003      	movs	r0, #3
 800145a:	e131      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4a48      	ldr	r2, [pc, #288]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 800145e:	6813      	ldr	r3, [r2, #0]
 8001460:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001464:	6921      	ldr	r1, [r4, #16]
 8001466:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e7dd      	b.n	800142a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b45      	ldr	r3, [pc, #276]	@ (8001584 <HAL_RCC_OscConfig+0x298>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001474:	f7ff fd96 	bl	8000fa4 <HAL_GetTick>
 8001478:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	4b41      	ldr	r3, [pc, #260]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f013 0f02 	tst.w	r3, #2
 8001482:	d0d2      	beq.n	800142a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fd8e 	bl	8000fa4 <HAL_GetTick>
 8001488:	1b40      	subs	r0, r0, r5
 800148a:	2802      	cmp	r0, #2
 800148c:	d9f5      	bls.n	800147a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800148e:	2003      	movs	r0, #3
 8001490:	e116      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001492:	4b3c      	ldr	r3, [pc, #240]	@ (8001584 <HAL_RCC_OscConfig+0x298>)
 8001494:	2200      	movs	r2, #0
 8001496:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149a:	f7ff fd83 	bl	8000fa4 <HAL_GetTick>
 800149e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b37      	ldr	r3, [pc, #220]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 80014a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014a4:	f013 0f02 	tst.w	r3, #2
 80014a8:	d006      	beq.n	80014b8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014aa:	f7ff fd7b 	bl	8000fa4 <HAL_GetTick>
 80014ae:	1b40      	subs	r0, r0, r5
 80014b0:	2802      	cmp	r0, #2
 80014b2:	d9f5      	bls.n	80014a0 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80014b4:	2003      	movs	r0, #3
 80014b6:	e103      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	f013 0f04 	tst.w	r3, #4
 80014be:	d077      	beq.n	80015b0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80014c8:	d133      	bne.n	8001532 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 80014d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014d2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80014d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014e2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e4:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <HAL_RCC_OscConfig+0x29c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80014ec:	d023      	beq.n	8001536 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ee:	68a3      	ldr	r3, [r4, #8]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d034      	beq.n	800155e <HAL_RCC_OscConfig+0x272>
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	d038      	beq.n	800156a <HAL_RCC_OscConfig+0x27e>
 80014f8:	4b21      	ldr	r3, [pc, #132]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 80014fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80014fc:	f022 0201 	bic.w	r2, r2, #1
 8001500:	671a      	str	r2, [r3, #112]	@ 0x70
 8001502:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001504:	f022 0204 	bic.w	r2, r2, #4
 8001508:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800150a:	68a3      	ldr	r3, [r4, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d03d      	beq.n	800158c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001510:	f7ff fd48 	bl	8000fa4 <HAL_GetTick>
 8001514:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001516:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151a:	f013 0f02 	tst.w	r3, #2
 800151e:	d146      	bne.n	80015ae <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001520:	f7ff fd40 	bl	8000fa4 <HAL_GetTick>
 8001524:	1b80      	subs	r0, r0, r6
 8001526:	f241 3388 	movw	r3, #5000	@ 0x1388
 800152a:	4298      	cmp	r0, r3
 800152c:	d9f3      	bls.n	8001516 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800152e:	2003      	movs	r0, #3
 8001530:	e0c6      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001532:	2500      	movs	r5, #0
 8001534:	e7d6      	b.n	80014e4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001536:	4a14      	ldr	r2, [pc, #80]	@ (8001588 <HAL_RCC_OscConfig+0x29c>)
 8001538:	6813      	ldr	r3, [r2, #0]
 800153a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800153e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001540:	f7ff fd30 	bl	8000fa4 <HAL_GetTick>
 8001544:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <HAL_RCC_OscConfig+0x29c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800154e:	d1ce      	bne.n	80014ee <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001550:	f7ff fd28 	bl	8000fa4 <HAL_GetTick>
 8001554:	1b80      	subs	r0, r0, r6
 8001556:	2802      	cmp	r0, #2
 8001558:	d9f5      	bls.n	8001546 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800155a:	2003      	movs	r0, #3
 800155c:	e0b0      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155e:	4a08      	ldr	r2, [pc, #32]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 8001560:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6713      	str	r3, [r2, #112]	@ 0x70
 8001568:	e7cf      	b.n	800150a <HAL_RCC_OscConfig+0x21e>
 800156a:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <HAL_RCC_OscConfig+0x294>)
 800156c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800156e:	f042 0204 	orr.w	r2, r2, #4
 8001572:	671a      	str	r2, [r3, #112]	@ 0x70
 8001574:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001576:	f042 0201 	orr.w	r2, r2, #1
 800157a:	671a      	str	r2, [r3, #112]	@ 0x70
 800157c:	e7c5      	b.n	800150a <HAL_RCC_OscConfig+0x21e>
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	42470000 	.word	0x42470000
 8001588:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff fd0a 	bl	8000fa4 <HAL_GetTick>
 8001590:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001592:	4b52      	ldr	r3, [pc, #328]	@ (80016dc <HAL_RCC_OscConfig+0x3f0>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001596:	f013 0f02 	tst.w	r3, #2
 800159a:	d008      	beq.n	80015ae <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159c:	f7ff fd02 	bl	8000fa4 <HAL_GetTick>
 80015a0:	1b80      	subs	r0, r0, r6
 80015a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015a6:	4298      	cmp	r0, r3
 80015a8:	d9f3      	bls.n	8001592 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80015aa:	2003      	movs	r0, #3
 80015ac:	e088      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015ae:	b9ed      	cbnz	r5, 80015ec <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b0:	69a3      	ldr	r3, [r4, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8083 	beq.w	80016be <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015b8:	4a48      	ldr	r2, [pc, #288]	@ (80016dc <HAL_RCC_OscConfig+0x3f0>)
 80015ba:	6892      	ldr	r2, [r2, #8]
 80015bc:	f002 020c 	and.w	r2, r2, #12
 80015c0:	2a08      	cmp	r2, #8
 80015c2:	d051      	beq.n	8001668 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d017      	beq.n	80015f8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c8:	4b45      	ldr	r3, [pc, #276]	@ (80016e0 <HAL_RCC_OscConfig+0x3f4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fce9 	bl	8000fa4 <HAL_GetTick>
 80015d2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d4:	4b41      	ldr	r3, [pc, #260]	@ (80016dc <HAL_RCC_OscConfig+0x3f0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80015dc:	d042      	beq.n	8001664 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015de:	f7ff fce1 	bl	8000fa4 <HAL_GetTick>
 80015e2:	1b00      	subs	r0, r0, r4
 80015e4:	2802      	cmp	r0, #2
 80015e6:	d9f5      	bls.n	80015d4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80015e8:	2003      	movs	r0, #3
 80015ea:	e069      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ec:	4a3b      	ldr	r2, [pc, #236]	@ (80016dc <HAL_RCC_OscConfig+0x3f0>)
 80015ee:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80015f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f6:	e7db      	b.n	80015b0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80015f8:	4b39      	ldr	r3, [pc, #228]	@ (80016e0 <HAL_RCC_OscConfig+0x3f4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80015fe:	f7ff fcd1 	bl	8000fa4 <HAL_GetTick>
 8001602:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001604:	4b35      	ldr	r3, [pc, #212]	@ (80016dc <HAL_RCC_OscConfig+0x3f0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800160c:	d006      	beq.n	800161c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160e:	f7ff fcc9 	bl	8000fa4 <HAL_GetTick>
 8001612:	1b40      	subs	r0, r0, r5
 8001614:	2802      	cmp	r0, #2
 8001616:	d9f5      	bls.n	8001604 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001618:	2003      	movs	r0, #3
 800161a:	e051      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800161c:	69e3      	ldr	r3, [r4, #28]
 800161e:	6a22      	ldr	r2, [r4, #32]
 8001620:	4313      	orrs	r3, r2
 8001622:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001624:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001628:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800162a:	0852      	lsrs	r2, r2, #1
 800162c:	3a01      	subs	r2, #1
 800162e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001632:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001634:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001638:	4a28      	ldr	r2, [pc, #160]	@ (80016dc <HAL_RCC_OscConfig+0x3f0>)
 800163a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800163c:	4b28      	ldr	r3, [pc, #160]	@ (80016e0 <HAL_RCC_OscConfig+0x3f4>)
 800163e:	2201      	movs	r2, #1
 8001640:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001642:	f7ff fcaf 	bl	8000fa4 <HAL_GetTick>
 8001646:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001648:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <HAL_RCC_OscConfig+0x3f0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001650:	d106      	bne.n	8001660 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff fca7 	bl	8000fa4 <HAL_GetTick>
 8001656:	1b00      	subs	r0, r0, r4
 8001658:	2802      	cmp	r0, #2
 800165a:	d9f5      	bls.n	8001648 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 800165c:	2003      	movs	r0, #3
 800165e:	e02f      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001660:	2000      	movs	r0, #0
 8001662:	e02d      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
 8001664:	2000      	movs	r0, #0
 8001666:	e02b      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001668:	2b01      	cmp	r3, #1
 800166a:	d02b      	beq.n	80016c4 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 800166c:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <HAL_RCC_OscConfig+0x3f0>)
 800166e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001670:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001674:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001676:	4291      	cmp	r1, r2
 8001678:	d126      	bne.n	80016c8 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800167a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800167e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001680:	428a      	cmp	r2, r1
 8001682:	d123      	bne.n	80016cc <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001684:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001686:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800168a:	401a      	ands	r2, r3
 800168c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001690:	d11e      	bne.n	80016d0 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001692:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001696:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001698:	0852      	lsrs	r2, r2, #1
 800169a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800169c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80016a0:	d118      	bne.n	80016d4 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016a2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80016a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80016ac:	d114      	bne.n	80016d8 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80016ae:	2000      	movs	r0, #0
 80016b0:	e006      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80016b2:	2001      	movs	r0, #1
}
 80016b4:	4770      	bx	lr
        return HAL_ERROR;
 80016b6:	2001      	movs	r0, #1
 80016b8:	e002      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80016ba:	2001      	movs	r0, #1
 80016bc:	e000      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80016be:	2000      	movs	r0, #0
}
 80016c0:	b002      	add	sp, #8
 80016c2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80016c4:	2001      	movs	r0, #1
 80016c6:	e7fb      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80016c8:	2001      	movs	r0, #1
 80016ca:	e7f9      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
 80016cc:	2001      	movs	r0, #1
 80016ce:	e7f7      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
 80016d0:	2001      	movs	r0, #1
 80016d2:	e7f5      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
 80016d4:	2001      	movs	r0, #1
 80016d6:	e7f3      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
 80016d8:	2001      	movs	r0, #1
 80016da:	e7f1      	b.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
 80016dc:	40023800 	.word	0x40023800
 80016e0:	42470000 	.word	0x42470000

080016e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e4:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016e6:	4b26      	ldr	r3, [pc, #152]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d041      	beq.n	8001776 <HAL_RCC_GetSysClockFreq+0x92>
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d141      	bne.n	800177a <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016f6:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001704:	d012      	beq.n	800172c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001706:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001708:	6859      	ldr	r1, [r3, #4]
 800170a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800170e:	481d      	ldr	r0, [pc, #116]	@ (8001784 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001710:	2300      	movs	r3, #0
 8001712:	fba1 0100 	umull	r0, r1, r1, r0
 8001716:	f7ff f92d 	bl	8000974 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800171a:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x9c>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001722:	3301      	adds	r3, #1
 8001724:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001726:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800172a:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800172c:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x9c>)
 800172e:	6858      	ldr	r0, [r3, #4]
 8001730:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001734:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001738:	ebbc 0c00 	subs.w	ip, ip, r0
 800173c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001740:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001744:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001748:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800174c:	ebb1 010c 	subs.w	r1, r1, ip
 8001750:	eb63 030e 	sbc.w	r3, r3, lr
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800175a:	00c9      	lsls	r1, r1, #3
 800175c:	eb11 0c00 	adds.w	ip, r1, r0
 8001760:	f143 0300 	adc.w	r3, r3, #0
 8001764:	0299      	lsls	r1, r3, #10
 8001766:	2300      	movs	r3, #0
 8001768:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800176c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001770:	f7ff f900 	bl	8000974 <__aeabi_uldivmod>
 8001774:	e7d1      	b.n	800171a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001776:	4803      	ldr	r0, [pc, #12]	@ (8001784 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001778:	e7d7      	b.n	800172a <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800177a:	4803      	ldr	r0, [pc, #12]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 800177c:	e7d5      	b.n	800172a <HAL_RCC_GetSysClockFreq+0x46>
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	017d7840 	.word	0x017d7840
 8001788:	00f42400 	.word	0x00f42400

0800178c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800178c:	2800      	cmp	r0, #0
 800178e:	f000 809b 	beq.w	80018c8 <HAL_RCC_ClockConfig+0x13c>
{
 8001792:	b570      	push	{r4, r5, r6, lr}
 8001794:	460d      	mov	r5, r1
 8001796:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001798:	4b4f      	ldr	r3, [pc, #316]	@ (80018d8 <HAL_RCC_ClockConfig+0x14c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	428b      	cmp	r3, r1
 80017a2:	d208      	bcs.n	80017b6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a4:	b2cb      	uxtb	r3, r1
 80017a6:	4a4c      	ldr	r2, [pc, #304]	@ (80018d8 <HAL_RCC_ClockConfig+0x14c>)
 80017a8:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	428b      	cmp	r3, r1
 80017b2:	f040 808b 	bne.w	80018cc <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	f013 0f02 	tst.w	r3, #2
 80017bc:	d017      	beq.n	80017ee <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017be:	f013 0f04 	tst.w	r3, #4
 80017c2:	d004      	beq.n	80017ce <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c4:	4a45      	ldr	r2, [pc, #276]	@ (80018dc <HAL_RCC_ClockConfig+0x150>)
 80017c6:	6893      	ldr	r3, [r2, #8]
 80017c8:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017cc:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ce:	6823      	ldr	r3, [r4, #0]
 80017d0:	f013 0f08 	tst.w	r3, #8
 80017d4:	d004      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d6:	4a41      	ldr	r2, [pc, #260]	@ (80018dc <HAL_RCC_ClockConfig+0x150>)
 80017d8:	6893      	ldr	r3, [r2, #8]
 80017da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017de:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4a3e      	ldr	r2, [pc, #248]	@ (80018dc <HAL_RCC_ClockConfig+0x150>)
 80017e2:	6893      	ldr	r3, [r2, #8]
 80017e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80017e8:	68a1      	ldr	r1, [r4, #8]
 80017ea:	430b      	orrs	r3, r1
 80017ec:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ee:	6823      	ldr	r3, [r4, #0]
 80017f0:	f013 0f01 	tst.w	r3, #1
 80017f4:	d032      	beq.n	800185c <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f6:	6863      	ldr	r3, [r4, #4]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d021      	beq.n	8001840 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fc:	1e9a      	subs	r2, r3, #2
 80017fe:	2a01      	cmp	r2, #1
 8001800:	d925      	bls.n	800184e <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001802:	4a36      	ldr	r2, [pc, #216]	@ (80018dc <HAL_RCC_ClockConfig+0x150>)
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	f012 0f02 	tst.w	r2, #2
 800180a:	d061      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180c:	4933      	ldr	r1, [pc, #204]	@ (80018dc <HAL_RCC_ClockConfig+0x150>)
 800180e:	688a      	ldr	r2, [r1, #8]
 8001810:	f022 0203 	bic.w	r2, r2, #3
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001818:	f7ff fbc4 	bl	8000fa4 <HAL_GetTick>
 800181c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b2f      	ldr	r3, [pc, #188]	@ (80018dc <HAL_RCC_ClockConfig+0x150>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	6862      	ldr	r2, [r4, #4]
 8001828:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800182c:	d016      	beq.n	800185c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182e:	f7ff fbb9 	bl	8000fa4 <HAL_GetTick>
 8001832:	1b80      	subs	r0, r0, r6
 8001834:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001838:	4298      	cmp	r0, r3
 800183a:	d9f0      	bls.n	800181e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800183c:	2003      	movs	r0, #3
 800183e:	e042      	b.n	80018c6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001840:	4a26      	ldr	r2, [pc, #152]	@ (80018dc <HAL_RCC_ClockConfig+0x150>)
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001848:	d1e0      	bne.n	800180c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800184a:	2001      	movs	r0, #1
 800184c:	e03b      	b.n	80018c6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184e:	4a23      	ldr	r2, [pc, #140]	@ (80018dc <HAL_RCC_ClockConfig+0x150>)
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001856:	d1d9      	bne.n	800180c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001858:	2001      	movs	r0, #1
 800185a:	e034      	b.n	80018c6 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800185c:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <HAL_RCC_ClockConfig+0x14c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	42ab      	cmp	r3, r5
 8001866:	d907      	bls.n	8001878 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001868:	b2ea      	uxtb	r2, r5
 800186a:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <HAL_RCC_ClockConfig+0x14c>)
 800186c:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	42ab      	cmp	r3, r5
 8001876:	d12d      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	f013 0f04 	tst.w	r3, #4
 800187e:	d006      	beq.n	800188e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001880:	4a16      	ldr	r2, [pc, #88]	@ (80018dc <HAL_RCC_ClockConfig+0x150>)
 8001882:	6893      	ldr	r3, [r2, #8]
 8001884:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001888:	68e1      	ldr	r1, [r4, #12]
 800188a:	430b      	orrs	r3, r1
 800188c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	f013 0f08 	tst.w	r3, #8
 8001894:	d007      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001896:	4a11      	ldr	r2, [pc, #68]	@ (80018dc <HAL_RCC_ClockConfig+0x150>)
 8001898:	6893      	ldr	r3, [r2, #8]
 800189a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800189e:	6921      	ldr	r1, [r4, #16]
 80018a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018a4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018a6:	f7ff ff1d 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 80018aa:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <HAL_RCC_ClockConfig+0x150>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018b2:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <HAL_RCC_ClockConfig+0x154>)
 80018b4:	5cd3      	ldrb	r3, [r2, r3]
 80018b6:	40d8      	lsrs	r0, r3
 80018b8:	4b0a      	ldr	r3, [pc, #40]	@ (80018e4 <HAL_RCC_ClockConfig+0x158>)
 80018ba:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80018bc:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_RCC_ClockConfig+0x15c>)
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	f7ff fb24 	bl	8000f0c <HAL_InitTick>
  return HAL_OK;
 80018c4:	2000      	movs	r0, #0
}
 80018c6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80018c8:	2001      	movs	r0, #1
}
 80018ca:	4770      	bx	lr
      return HAL_ERROR;
 80018cc:	2001      	movs	r0, #1
 80018ce:	e7fa      	b.n	80018c6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80018d0:	2001      	movs	r0, #1
 80018d2:	e7f8      	b.n	80018c6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80018d4:	2001      	movs	r0, #1
 80018d6:	e7f6      	b.n	80018c6 <HAL_RCC_ClockConfig+0x13a>
 80018d8:	40023c00 	.word	0x40023c00
 80018dc:	40023800 	.word	0x40023800
 80018e0:	08002770 	.word	0x08002770
 80018e4:	20000008 	.word	0x20000008
 80018e8:	20000004 	.word	0x20000004

080018ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80018ec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018ee:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018f0:	6a03      	ldr	r3, [r0, #32]
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018f8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80018fa:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80018fc:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001900:	680c      	ldr	r4, [r1, #0]
 8001902:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001904:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001908:	688b      	ldr	r3, [r1, #8]
 800190a:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800190c:	4a0b      	ldr	r2, [pc, #44]	@ (800193c <TIM_OC1_SetConfig+0x50>)
 800190e:	4290      	cmp	r0, r2
 8001910:	d006      	beq.n	8001920 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001912:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001914:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001916:	684a      	ldr	r2, [r1, #4]
 8001918:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800191a:	6203      	str	r3, [r0, #32]
}
 800191c:	bc30      	pop	{r4, r5}
 800191e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8001920:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001924:	68ca      	ldr	r2, [r1, #12]
 8001926:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8001928:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800192c:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8001930:	694a      	ldr	r2, [r1, #20]
 8001932:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001934:	698d      	ldr	r5, [r1, #24]
 8001936:	4315      	orrs	r5, r2
 8001938:	e7eb      	b.n	8001912 <TIM_OC1_SetConfig+0x26>
 800193a:	bf00      	nop
 800193c:	40010000 	.word	0x40010000

08001940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001940:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001942:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001944:	6a02      	ldr	r2, [r0, #32]
 8001946:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800194a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800194c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800194e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001950:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001954:	680d      	ldr	r5, [r1, #0]
 8001956:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001958:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800195c:	688a      	ldr	r2, [r1, #8]
 800195e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001962:	4a0d      	ldr	r2, [pc, #52]	@ (8001998 <TIM_OC3_SetConfig+0x58>)
 8001964:	4290      	cmp	r0, r2
 8001966:	d006      	beq.n	8001976 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001968:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800196a:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800196c:	684a      	ldr	r2, [r1, #4]
 800196e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001970:	6203      	str	r3, [r0, #32]
}
 8001972:	bc30      	pop	{r4, r5}
 8001974:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8001976:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800197a:	68ca      	ldr	r2, [r1, #12]
 800197c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001980:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001984:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001988:	694a      	ldr	r2, [r1, #20]
 800198a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800198e:	698a      	ldr	r2, [r1, #24]
 8001990:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8001994:	e7e8      	b.n	8001968 <TIM_OC3_SetConfig+0x28>
 8001996:	bf00      	nop
 8001998:	40010000 	.word	0x40010000

0800199c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800199c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800199e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80019a0:	6a02      	ldr	r2, [r0, #32]
 80019a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80019a6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80019aa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80019ac:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019b0:	680d      	ldr	r5, [r1, #0]
 80019b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80019b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80019ba:	688d      	ldr	r5, [r1, #8]
 80019bc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019c0:	4d07      	ldr	r5, [pc, #28]	@ (80019e0 <TIM_OC4_SetConfig+0x44>)
 80019c2:	42a8      	cmp	r0, r5
 80019c4:	d006      	beq.n	80019d4 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80019c8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80019ca:	684a      	ldr	r2, [r1, #4]
 80019cc:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019ce:	6203      	str	r3, [r0, #32]
}
 80019d0:	bc30      	pop	{r4, r5}
 80019d2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80019d4:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80019d8:	694d      	ldr	r5, [r1, #20]
 80019da:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80019de:	e7f2      	b.n	80019c6 <TIM_OC4_SetConfig+0x2a>
 80019e0:	40010000 	.word	0x40010000

080019e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80019e4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80019e6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019e8:	6a04      	ldr	r4, [r0, #32]
 80019ea:	f024 0401 	bic.w	r4, r4, #1
 80019ee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019f0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019f2:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019f6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80019fa:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80019fe:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a00:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a02:	6203      	str	r3, [r0, #32]
}
 8001a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a0a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001a0c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a0e:	6a04      	ldr	r4, [r0, #32]
 8001a10:	f024 0410 	bic.w	r4, r4, #16
 8001a14:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a16:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001a18:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001a1c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001a20:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001a24:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001a28:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a2a:	6203      	str	r3, [r0, #32]
}
 8001a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001a32:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a3e:	6083      	str	r3, [r0, #8]
}
 8001a40:	4770      	bx	lr
	...

08001a44 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001a44:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d12a      	bne.n	8001aa2 <HAL_TIM_Base_Start+0x5e>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a52:	6803      	ldr	r3, [r0, #0]
 8001a54:	4a15      	ldr	r2, [pc, #84]	@ (8001aac <HAL_TIM_Base_Start+0x68>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d018      	beq.n	8001a8c <HAL_TIM_Base_Start+0x48>
 8001a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a5e:	d015      	beq.n	8001a8c <HAL_TIM_Base_Start+0x48>
 8001a60:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d011      	beq.n	8001a8c <HAL_TIM_Base_Start+0x48>
 8001a68:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d00d      	beq.n	8001a8c <HAL_TIM_Base_Start+0x48>
 8001a70:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d009      	beq.n	8001a8c <HAL_TIM_Base_Start+0x48>
 8001a78:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d005      	beq.n	8001a8c <HAL_TIM_Base_Start+0x48>
    __HAL_TIM_ENABLE(htim);
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001a88:	2000      	movs	r0, #0
 8001a8a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a92:	2a06      	cmp	r2, #6
 8001a94:	d007      	beq.n	8001aa6 <HAL_TIM_Base_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	4770      	bx	lr
    return HAL_ERROR;
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	4770      	bx	lr
  return HAL_OK;
 8001aa6:	2000      	movs	r0, #0
}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40010000 	.word	0x40010000

08001ab0 <HAL_TIM_PWM_MspInit>:
}
 8001ab0:	4770      	bx	lr
	...

08001ab4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001ab4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ab6:	4a29      	ldr	r2, [pc, #164]	@ (8001b5c <TIM_Base_SetConfig+0xa8>)
 8001ab8:	4290      	cmp	r0, r2
 8001aba:	d00e      	beq.n	8001ada <TIM_Base_SetConfig+0x26>
 8001abc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001ac0:	d00b      	beq.n	8001ada <TIM_Base_SetConfig+0x26>
 8001ac2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001ac6:	4290      	cmp	r0, r2
 8001ac8:	d007      	beq.n	8001ada <TIM_Base_SetConfig+0x26>
 8001aca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ace:	4290      	cmp	r0, r2
 8001ad0:	d003      	beq.n	8001ada <TIM_Base_SetConfig+0x26>
 8001ad2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ad6:	4290      	cmp	r0, r2
 8001ad8:	d103      	bne.n	8001ae2 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001ade:	684a      	ldr	r2, [r1, #4]
 8001ae0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b5c <TIM_Base_SetConfig+0xa8>)
 8001ae4:	4290      	cmp	r0, r2
 8001ae6:	d01a      	beq.n	8001b1e <TIM_Base_SetConfig+0x6a>
 8001ae8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001aec:	d017      	beq.n	8001b1e <TIM_Base_SetConfig+0x6a>
 8001aee:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001af2:	4290      	cmp	r0, r2
 8001af4:	d013      	beq.n	8001b1e <TIM_Base_SetConfig+0x6a>
 8001af6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001afa:	4290      	cmp	r0, r2
 8001afc:	d00f      	beq.n	8001b1e <TIM_Base_SetConfig+0x6a>
 8001afe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b02:	4290      	cmp	r0, r2
 8001b04:	d00b      	beq.n	8001b1e <TIM_Base_SetConfig+0x6a>
 8001b06:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001b0a:	4290      	cmp	r0, r2
 8001b0c:	d007      	beq.n	8001b1e <TIM_Base_SetConfig+0x6a>
 8001b0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b12:	4290      	cmp	r0, r2
 8001b14:	d003      	beq.n	8001b1e <TIM_Base_SetConfig+0x6a>
 8001b16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b1a:	4290      	cmp	r0, r2
 8001b1c:	d103      	bne.n	8001b26 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b22:	68ca      	ldr	r2, [r1, #12]
 8001b24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b2a:	694a      	ldr	r2, [r1, #20]
 8001b2c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001b2e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b30:	688b      	ldr	r3, [r1, #8]
 8001b32:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001b34:	680b      	ldr	r3, [r1, #0]
 8001b36:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b38:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <TIM_Base_SetConfig+0xa8>)
 8001b3a:	4298      	cmp	r0, r3
 8001b3c:	d00a      	beq.n	8001b54 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001b42:	6903      	ldr	r3, [r0, #16]
 8001b44:	f013 0f01 	tst.w	r3, #1
 8001b48:	d003      	beq.n	8001b52 <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001b4a:	6903      	ldr	r3, [r0, #16]
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6103      	str	r3, [r0, #16]
}
 8001b52:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001b54:	690b      	ldr	r3, [r1, #16]
 8001b56:	6303      	str	r3, [r0, #48]	@ 0x30
 8001b58:	e7f1      	b.n	8001b3e <TIM_Base_SetConfig+0x8a>
 8001b5a:	bf00      	nop
 8001b5c:	40010000 	.word	0x40010000

08001b60 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001b60:	b340      	cbz	r0, 8001bb4 <HAL_TIM_Base_Init+0x54>
{
 8001b62:	b510      	push	{r4, lr}
 8001b64:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001b66:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001b6a:	b1f3      	cbz	r3, 8001baa <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b72:	4621      	mov	r1, r4
 8001b74:	f851 0b04 	ldr.w	r0, [r1], #4
 8001b78:	f7ff ff9c 	bl	8001ab4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b82:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001b86:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001b8a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001b8e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b92:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001b96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001b9a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001b9e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001ba2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001ba6:	2000      	movs	r0, #0
}
 8001ba8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001baa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001bae:	f000 fa69 	bl	8002084 <HAL_TIM_Base_MspInit>
 8001bb2:	e7db      	b.n	8001b6c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001bb4:	2001      	movs	r0, #1
}
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001bb8:	b340      	cbz	r0, 8001c0c <HAL_TIM_PWM_Init+0x54>
{
 8001bba:	b510      	push	{r4, lr}
 8001bbc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001bbe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001bc2:	b1f3      	cbz	r3, 8001c02 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f851 0b04 	ldr.w	r0, [r1], #4
 8001bd0:	f7ff ff70 	bl	8001ab4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bda:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001bde:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001be2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001be6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bea:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001bee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001bf2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001bf6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001bfa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001bfe:	2000      	movs	r0, #0
}
 8001c00:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001c02:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001c06:	f7ff ff53 	bl	8001ab0 <HAL_TIM_PWM_MspInit>
 8001c0a:	e7db      	b.n	8001bc4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8001c0c:	2001      	movs	r0, #1
}
 8001c0e:	4770      	bx	lr

08001c10 <TIM_OC2_SetConfig>:
{
 8001c10:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8001c12:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c14:	6a02      	ldr	r2, [r0, #32]
 8001c16:	f022 0210 	bic.w	r2, r2, #16
 8001c1a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001c1c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001c1e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c20:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c24:	680d      	ldr	r5, [r1, #0]
 8001c26:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8001c2a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c2e:	688d      	ldr	r5, [r1, #8]
 8001c30:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c34:	4d0c      	ldr	r5, [pc, #48]	@ (8001c68 <TIM_OC2_SetConfig+0x58>)
 8001c36:	42a8      	cmp	r0, r5
 8001c38:	d006      	beq.n	8001c48 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8001c3a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001c3c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001c3e:	684a      	ldr	r2, [r1, #4]
 8001c40:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8001c42:	6203      	str	r3, [r0, #32]
}
 8001c44:	bc30      	pop	{r4, r5}
 8001c46:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8001c48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c4c:	68cd      	ldr	r5, [r1, #12]
 8001c4e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001c52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001c56:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001c5a:	694d      	ldr	r5, [r1, #20]
 8001c5c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c60:	698d      	ldr	r5, [r1, #24]
 8001c62:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8001c66:	e7e8      	b.n	8001c3a <TIM_OC2_SetConfig+0x2a>
 8001c68:	40010000 	.word	0x40010000

08001c6c <HAL_TIM_PWM_ConfigChannel>:
{
 8001c6c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001c6e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d066      	beq.n	8001d44 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8001c76:	4604      	mov	r4, r0
 8001c78:	460d      	mov	r5, r1
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8001c80:	2a0c      	cmp	r2, #12
 8001c82:	d85a      	bhi.n	8001d3a <HAL_TIM_PWM_ConfigChannel+0xce>
 8001c84:	e8df f002 	tbb	[pc, r2]
 8001c88:	59595907 	.word	0x59595907
 8001c8c:	5959591b 	.word	0x5959591b
 8001c90:	59595930 	.word	0x59595930
 8001c94:	44          	.byte	0x44
 8001c95:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c96:	6800      	ldr	r0, [r0, #0]
 8001c98:	f7ff fe28 	bl	80018ec <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c9c:	6822      	ldr	r2, [r4, #0]
 8001c9e:	6993      	ldr	r3, [r2, #24]
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ca6:	6822      	ldr	r2, [r4, #0]
 8001ca8:	6993      	ldr	r3, [r2, #24]
 8001caa:	f023 0304 	bic.w	r3, r3, #4
 8001cae:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001cb0:	6822      	ldr	r2, [r4, #0]
 8001cb2:	6993      	ldr	r3, [r2, #24]
 8001cb4:	6929      	ldr	r1, [r5, #16]
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001cba:	2000      	movs	r0, #0
      break;
 8001cbc:	e03e      	b.n	8001d3c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cbe:	6800      	ldr	r0, [r0, #0]
 8001cc0:	f7ff ffa6 	bl	8001c10 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cc4:	6822      	ldr	r2, [r4, #0]
 8001cc6:	6993      	ldr	r3, [r2, #24]
 8001cc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ccc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cce:	6822      	ldr	r2, [r4, #0]
 8001cd0:	6993      	ldr	r3, [r2, #24]
 8001cd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001cd6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cd8:	6822      	ldr	r2, [r4, #0]
 8001cda:	6993      	ldr	r3, [r2, #24]
 8001cdc:	6929      	ldr	r1, [r5, #16]
 8001cde:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ce2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce4:	2000      	movs	r0, #0
      break;
 8001ce6:	e029      	b.n	8001d3c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ce8:	6800      	ldr	r0, [r0, #0]
 8001cea:	f7ff fe29 	bl	8001940 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cee:	6822      	ldr	r2, [r4, #0]
 8001cf0:	69d3      	ldr	r3, [r2, #28]
 8001cf2:	f043 0308 	orr.w	r3, r3, #8
 8001cf6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cf8:	6822      	ldr	r2, [r4, #0]
 8001cfa:	69d3      	ldr	r3, [r2, #28]
 8001cfc:	f023 0304 	bic.w	r3, r3, #4
 8001d00:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d02:	6822      	ldr	r2, [r4, #0]
 8001d04:	69d3      	ldr	r3, [r2, #28]
 8001d06:	6929      	ldr	r1, [r5, #16]
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0c:	2000      	movs	r0, #0
      break;
 8001d0e:	e015      	b.n	8001d3c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d10:	6800      	ldr	r0, [r0, #0]
 8001d12:	f7ff fe43 	bl	800199c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d16:	6822      	ldr	r2, [r4, #0]
 8001d18:	69d3      	ldr	r3, [r2, #28]
 8001d1a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d1e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d20:	6822      	ldr	r2, [r4, #0]
 8001d22:	69d3      	ldr	r3, [r2, #28]
 8001d24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001d28:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d2a:	6822      	ldr	r2, [r4, #0]
 8001d2c:	69d3      	ldr	r3, [r2, #28]
 8001d2e:	6929      	ldr	r1, [r5, #16]
 8001d30:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d34:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001d36:	2000      	movs	r0, #0
      break;
 8001d38:	e000      	b.n	8001d3c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8001d3a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001d42:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8001d44:	2002      	movs	r0, #2
 8001d46:	e7fc      	b.n	8001d42 <HAL_TIM_PWM_ConfigChannel+0xd6>

08001d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d48:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d4a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d4c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d50:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001d54:	430a      	orrs	r2, r1
 8001d56:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d5a:	6082      	str	r2, [r0, #8]
}
 8001d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001d62:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d078      	beq.n	8001e5c <HAL_TIM_ConfigClockSource+0xfa>
{
 8001d6a:	b510      	push	{r4, lr}
 8001d6c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001d74:	2302      	movs	r3, #2
 8001d76:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001d7a:	6802      	ldr	r2, [r0, #0]
 8001d7c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001d86:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d88:	680b      	ldr	r3, [r1, #0]
 8001d8a:	2b60      	cmp	r3, #96	@ 0x60
 8001d8c:	d04c      	beq.n	8001e28 <HAL_TIM_ConfigClockSource+0xc6>
 8001d8e:	d823      	bhi.n	8001dd8 <HAL_TIM_ConfigClockSource+0x76>
 8001d90:	2b40      	cmp	r3, #64	@ 0x40
 8001d92:	d054      	beq.n	8001e3e <HAL_TIM_ConfigClockSource+0xdc>
 8001d94:	d811      	bhi.n	8001dba <HAL_TIM_ConfigClockSource+0x58>
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d003      	beq.n	8001da2 <HAL_TIM_ConfigClockSource+0x40>
 8001d9a:	d80a      	bhi.n	8001db2 <HAL_TIM_ConfigClockSource+0x50>
 8001d9c:	b10b      	cbz	r3, 8001da2 <HAL_TIM_ConfigClockSource+0x40>
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d105      	bne.n	8001dae <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001da2:	4619      	mov	r1, r3
 8001da4:	6820      	ldr	r0, [r4, #0]
 8001da6:	f7ff fe44 	bl	8001a32 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2000      	movs	r0, #0
      break;
 8001dac:	e028      	b.n	8001e00 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001dae:	2001      	movs	r0, #1
 8001db0:	e026      	b.n	8001e00 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001db2:	2b30      	cmp	r3, #48	@ 0x30
 8001db4:	d0f5      	beq.n	8001da2 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8001db6:	2001      	movs	r0, #1
 8001db8:	e022      	b.n	8001e00 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001dba:	2b50      	cmp	r3, #80	@ 0x50
 8001dbc:	d10a      	bne.n	8001dd4 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dbe:	68ca      	ldr	r2, [r1, #12]
 8001dc0:	6849      	ldr	r1, [r1, #4]
 8001dc2:	6800      	ldr	r0, [r0, #0]
 8001dc4:	f7ff fe0e 	bl	80019e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dc8:	2150      	movs	r1, #80	@ 0x50
 8001dca:	6820      	ldr	r0, [r4, #0]
 8001dcc:	f7ff fe31 	bl	8001a32 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001dd0:	2000      	movs	r0, #0
      break;
 8001dd2:	e015      	b.n	8001e00 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	e013      	b.n	8001e00 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ddc:	d03a      	beq.n	8001e54 <HAL_TIM_ConfigClockSource+0xf2>
 8001dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001de2:	d014      	beq.n	8001e0e <HAL_TIM_ConfigClockSource+0xac>
 8001de4:	2b70      	cmp	r3, #112	@ 0x70
 8001de6:	d137      	bne.n	8001e58 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8001de8:	68cb      	ldr	r3, [r1, #12]
 8001dea:	684a      	ldr	r2, [r1, #4]
 8001dec:	6889      	ldr	r1, [r1, #8]
 8001dee:	6800      	ldr	r0, [r0, #0]
 8001df0:	f7ff ffaa 	bl	8001d48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001df4:	6822      	ldr	r2, [r4, #0]
 8001df6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001df8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001dfc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfe:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001e06:	2300      	movs	r3, #0
 8001e08:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001e0c:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8001e0e:	68cb      	ldr	r3, [r1, #12]
 8001e10:	684a      	ldr	r2, [r1, #4]
 8001e12:	6889      	ldr	r1, [r1, #8]
 8001e14:	6800      	ldr	r0, [r0, #0]
 8001e16:	f7ff ff97 	bl	8001d48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e1a:	6822      	ldr	r2, [r4, #0]
 8001e1c:	6893      	ldr	r3, [r2, #8]
 8001e1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e22:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e24:	2000      	movs	r0, #0
      break;
 8001e26:	e7eb      	b.n	8001e00 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e28:	68ca      	ldr	r2, [r1, #12]
 8001e2a:	6849      	ldr	r1, [r1, #4]
 8001e2c:	6800      	ldr	r0, [r0, #0]
 8001e2e:	f7ff fdec 	bl	8001a0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e32:	2160      	movs	r1, #96	@ 0x60
 8001e34:	6820      	ldr	r0, [r4, #0]
 8001e36:	f7ff fdfc 	bl	8001a32 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001e3a:	2000      	movs	r0, #0
      break;
 8001e3c:	e7e0      	b.n	8001e00 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e3e:	68ca      	ldr	r2, [r1, #12]
 8001e40:	6849      	ldr	r1, [r1, #4]
 8001e42:	6800      	ldr	r0, [r0, #0]
 8001e44:	f7ff fdce 	bl	80019e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e48:	2140      	movs	r1, #64	@ 0x40
 8001e4a:	6820      	ldr	r0, [r4, #0]
 8001e4c:	f7ff fdf1 	bl	8001a32 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001e50:	2000      	movs	r0, #0
      break;
 8001e52:	e7d5      	b.n	8001e00 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001e54:	2000      	movs	r0, #0
 8001e56:	e7d3      	b.n	8001e00 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001e58:	2001      	movs	r0, #1
 8001e5a:	e7d1      	b.n	8001e00 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8001e5c:	2002      	movs	r0, #2
}
 8001e5e:	4770      	bx	lr

08001e60 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001e60:	f001 011f 	and.w	r1, r1, #31
 8001e64:	f04f 0c01 	mov.w	ip, #1
 8001e68:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001e6c:	6a03      	ldr	r3, [r0, #32]
 8001e6e:	ea23 030c 	bic.w	r3, r3, ip
 8001e72:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001e74:	6a03      	ldr	r3, [r0, #32]
 8001e76:	408a      	lsls	r2, r1
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	6203      	str	r3, [r0, #32]
}
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_TIM_PWM_Start>:
{
 8001e80:	b510      	push	{r4, lr}
 8001e82:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e84:	4608      	mov	r0, r1
 8001e86:	bb89      	cbnz	r1, 8001eec <HAL_TIM_PWM_Start+0x6c>
 8001e88:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	bf18      	it	ne
 8001e90:	2301      	movne	r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d160      	bne.n	8001f58 <HAL_TIM_PWM_Start+0xd8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e96:	2800      	cmp	r0, #0
 8001e98:	d13e      	bne.n	8001f18 <HAL_TIM_PWM_Start+0x98>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	4601      	mov	r1, r0
 8001ea4:	6820      	ldr	r0, [r4, #0]
 8001ea6:	f7ff ffdb 	bl	8001e60 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	4a2c      	ldr	r2, [pc, #176]	@ (8001f60 <HAL_TIM_PWM_Start+0xe0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d042      	beq.n	8001f38 <HAL_TIM_PWM_Start+0xb8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8001f60 <HAL_TIM_PWM_Start+0xe0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d043      	beq.n	8001f42 <HAL_TIM_PWM_Start+0xc2>
 8001eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ebe:	d040      	beq.n	8001f42 <HAL_TIM_PWM_Start+0xc2>
 8001ec0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d03c      	beq.n	8001f42 <HAL_TIM_PWM_Start+0xc2>
 8001ec8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d038      	beq.n	8001f42 <HAL_TIM_PWM_Start+0xc2>
 8001ed0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d034      	beq.n	8001f42 <HAL_TIM_PWM_Start+0xc2>
 8001ed8:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d030      	beq.n	8001f42 <HAL_TIM_PWM_Start+0xc2>
    __HAL_TIM_ENABLE(htim);
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001ee8:	2000      	movs	r0, #0
 8001eea:	e034      	b.n	8001f56 <HAL_TIM_PWM_Start+0xd6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001eec:	2904      	cmp	r1, #4
 8001eee:	d007      	beq.n	8001f00 <HAL_TIM_PWM_Start+0x80>
 8001ef0:	2908      	cmp	r1, #8
 8001ef2:	d00b      	beq.n	8001f0c <HAL_TIM_PWM_Start+0x8c>
 8001ef4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	bf18      	it	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	e7c8      	b.n	8001e92 <HAL_TIM_PWM_Start+0x12>
 8001f00:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8001f04:	3b01      	subs	r3, #1
 8001f06:	bf18      	it	ne
 8001f08:	2301      	movne	r3, #1
 8001f0a:	e7c2      	b.n	8001e92 <HAL_TIM_PWM_Start+0x12>
 8001f0c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001f10:	3b01      	subs	r3, #1
 8001f12:	bf18      	it	ne
 8001f14:	2301      	movne	r3, #1
 8001f16:	e7bc      	b.n	8001e92 <HAL_TIM_PWM_Start+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f18:	2804      	cmp	r0, #4
 8001f1a:	d005      	beq.n	8001f28 <HAL_TIM_PWM_Start+0xa8>
 8001f1c:	2808      	cmp	r0, #8
 8001f1e:	d007      	beq.n	8001f30 <HAL_TIM_PWM_Start+0xb0>
 8001f20:	2302      	movs	r3, #2
 8001f22:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8001f26:	e7bb      	b.n	8001ea0 <HAL_TIM_PWM_Start+0x20>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001f2e:	e7b7      	b.n	8001ea0 <HAL_TIM_PWM_Start+0x20>
 8001f30:	2302      	movs	r3, #2
 8001f32:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001f36:	e7b3      	b.n	8001ea0 <HAL_TIM_PWM_Start+0x20>
    __HAL_TIM_MOE_ENABLE(htim);
 8001f38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f3e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f40:	e7b7      	b.n	8001eb2 <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f48:	2a06      	cmp	r2, #6
 8001f4a:	d007      	beq.n	8001f5c <HAL_TIM_PWM_Start+0xdc>
      __HAL_TIM_ENABLE(htim);
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001f54:	2000      	movs	r0, #0
}
 8001f56:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f58:	2001      	movs	r0, #1
 8001f5a:	e7fc      	b.n	8001f56 <HAL_TIM_PWM_Start+0xd6>
  return HAL_OK;
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	e7fa      	b.n	8001f56 <HAL_TIM_PWM_Start+0xd6>
 8001f60:	40010000 	.word	0x40010000

08001f64 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f64:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001f68:	2a01      	cmp	r2, #1
 8001f6a:	d035      	beq.n	8001fd8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8001f6c:	b410      	push	{r4}
 8001f6e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001f70:	2201      	movs	r2, #1
 8001f72:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f76:	2202      	movs	r2, #2
 8001f78:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f7c:	6802      	ldr	r2, [r0, #0]
 8001f7e:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f80:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f82:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f86:	6808      	ldr	r0, [r1, #0]
 8001f88:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f8c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4812      	ldr	r0, [pc, #72]	@ (8001fdc <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8001f92:	4282      	cmp	r2, r0
 8001f94:	d012      	beq.n	8001fbc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001f96:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001f9a:	d00f      	beq.n	8001fbc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001f9c:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8001fa0:	4282      	cmp	r2, r0
 8001fa2:	d00b      	beq.n	8001fbc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001fa4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001fa8:	4282      	cmp	r2, r0
 8001faa:	d007      	beq.n	8001fbc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001fac:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001fb0:	4282      	cmp	r2, r0
 8001fb2:	d003      	beq.n	8001fbc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001fb4:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8001fb8:	4282      	cmp	r2, r0
 8001fba:	d104      	bne.n	8001fc6 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fbc:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fc0:	6849      	ldr	r1, [r1, #4]
 8001fc2:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fc4:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8001fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fd6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001fd8:	2002      	movs	r0, #2
}
 8001fda:	4770      	bx	lr
 8001fdc:	40010000 	.word	0x40010000

08001fe0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <NMI_Handler>

08001fe2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe2:	e7fe      	b.n	8001fe2 <HardFault_Handler>

08001fe4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <MemManage_Handler>

08001fe6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe6:	e7fe      	b.n	8001fe6 <BusFault_Handler>

08001fe8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <UsageFault_Handler>

08001fea <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fea:	4770      	bx	lr

08001fec <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fec:	4770      	bx	lr

08001fee <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fee:	4770      	bx	lr

08001ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff2:	f7fe ffcb 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff6:	bd08      	pop	{r3, pc}

08001ff8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ff8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001ffa:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001ffe:	f7ff f94b 	bl	8001298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002002:	bd08      	pop	{r3, pc}

08002004 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002004:	4a03      	ldr	r2, [pc, #12]	@ (8002014 <SystemInit+0x10>)
 8002006:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800200a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800200e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002012:	4770      	bx	lr
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <MX_TIM5_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002018:	b500      	push	{lr}
 800201a:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201c:	2300      	movs	r3, #0
 800201e:	9302      	str	r3, [sp, #8]
 8002020:	9303      	str	r3, [sp, #12]
 8002022:	9304      	str	r3, [sp, #16]
 8002024:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800202a:	4814      	ldr	r0, [pc, #80]	@ (800207c <MX_TIM5_Init+0x64>)
 800202c:	4a14      	ldr	r2, [pc, #80]	@ (8002080 <MX_TIM5_Init+0x68>)
 800202e:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 0;
 8002030:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002032:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 4294967295;
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203a:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800203c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800203e:	f7ff fd8f 	bl	8001b60 <HAL_TIM_Base_Init>
 8002042:	b990      	cbnz	r0, 800206a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002044:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002048:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800204a:	a902      	add	r1, sp, #8
 800204c:	480b      	ldr	r0, [pc, #44]	@ (800207c <MX_TIM5_Init+0x64>)
 800204e:	f7ff fe88 	bl	8001d62 <HAL_TIM_ConfigClockSource>
 8002052:	b968      	cbnz	r0, 8002070 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002058:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800205a:	4669      	mov	r1, sp
 800205c:	4807      	ldr	r0, [pc, #28]	@ (800207c <MX_TIM5_Init+0x64>)
 800205e:	f7ff ff81 	bl	8001f64 <HAL_TIMEx_MasterConfigSynchronization>
 8002062:	b940      	cbnz	r0, 8002076 <MX_TIM5_Init+0x5e>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002064:	b007      	add	sp, #28
 8002066:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800206a:	f7fe fe97 	bl	8000d9c <Error_Handler>
 800206e:	e7e9      	b.n	8002044 <MX_TIM5_Init+0x2c>
    Error_Handler();
 8002070:	f7fe fe94 	bl	8000d9c <Error_Handler>
 8002074:	e7ee      	b.n	8002054 <MX_TIM5_Init+0x3c>
    Error_Handler();
 8002076:	f7fe fe91 	bl	8000d9c <Error_Handler>
}
 800207a:	e7f3      	b.n	8002064 <MX_TIM5_Init+0x4c>
 800207c:	20000070 	.word	0x20000070
 8002080:	40000c00 	.word	0x40000c00

08002084 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002084:	b082      	sub	sp, #8

  if(tim_baseHandle->Instance==TIM3)
 8002086:	6803      	ldr	r3, [r0, #0]
 8002088:	4a10      	ldr	r2, [pc, #64]	@ (80020cc <HAL_TIM_Base_MspInit+0x48>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d004      	beq.n	8002098 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 800208e:	4a10      	ldr	r2, [pc, #64]	@ (80020d0 <HAL_TIM_Base_MspInit+0x4c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00e      	beq.n	80020b2 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002094:	b002      	add	sp, #8
 8002096:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002098:	2300      	movs	r3, #0
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	4b0d      	ldr	r3, [pc, #52]	@ (80020d4 <HAL_TIM_Base_MspInit+0x50>)
 800209e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020a0:	f042 0202 	orr.w	r2, r2, #2
 80020a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	9b00      	ldr	r3, [sp, #0]
 80020b0:	e7f0      	b.n	8002094 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <HAL_TIM_Base_MspInit+0x50>)
 80020b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020ba:	f042 0208 	orr.w	r2, r2, #8
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	9b01      	ldr	r3, [sp, #4]
}
 80020ca:	e7e3      	b.n	8002094 <HAL_TIM_Base_MspInit+0x10>
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40000c00 	.word	0x40000c00
 80020d4:	40023800 	.word	0x40023800

080020d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020d8:	b500      	push	{lr}
 80020da:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	2300      	movs	r3, #0
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	9302      	str	r3, [sp, #8]
 80020e2:	9303      	str	r3, [sp, #12]
 80020e4:	9304      	str	r3, [sp, #16]
 80020e6:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 80020e8:	6802      	ldr	r2, [r0, #0]
 80020ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <HAL_TIM_MspPostInit+0x4c>)
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d002      	beq.n	80020f6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020f0:	b007      	add	sp, #28
 80020f2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <HAL_TIM_MspPostInit+0x50>)
 80020fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	631a      	str	r2, [r3, #48]	@ 0x30
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800210e:	23c0      	movs	r3, #192	@ 0xc0
 8002110:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002116:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	a901      	add	r1, sp, #4
 800211a:	4804      	ldr	r0, [pc, #16]	@ (800212c <HAL_TIM_MspPostInit+0x54>)
 800211c:	f7fe ffd8 	bl	80010d0 <HAL_GPIO_Init>
}
 8002120:	e7e6      	b.n	80020f0 <HAL_TIM_MspPostInit+0x18>
 8002122:	bf00      	nop
 8002124:	40000400 	.word	0x40000400
 8002128:	40023800 	.word	0x40023800
 800212c:	40020000 	.word	0x40020000

08002130 <MX_TIM3_Init>:
{
 8002130:	b500      	push	{lr}
 8002132:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002134:	2300      	movs	r3, #0
 8002136:	930a      	str	r3, [sp, #40]	@ 0x28
 8002138:	930b      	str	r3, [sp, #44]	@ 0x2c
 800213a:	930c      	str	r3, [sp, #48]	@ 0x30
 800213c:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800213e:	9308      	str	r3, [sp, #32]
 8002140:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	9303      	str	r3, [sp, #12]
 8002148:	9304      	str	r3, [sp, #16]
 800214a:	9305      	str	r3, [sp, #20]
 800214c:	9306      	str	r3, [sp, #24]
 800214e:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8002150:	4825      	ldr	r0, [pc, #148]	@ (80021e8 <MX_TIM3_Init+0xb8>)
 8002152:	4a26      	ldr	r2, [pc, #152]	@ (80021ec <MX_TIM3_Init+0xbc>)
 8002154:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8002156:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002158:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 800215a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800215e:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002160:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002162:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002164:	f7ff fcfc 	bl	8001b60 <HAL_TIM_Base_Init>
 8002168:	bb58      	cbnz	r0, 80021c2 <MX_TIM3_Init+0x92>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800216a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800216e:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002170:	a90a      	add	r1, sp, #40	@ 0x28
 8002172:	481d      	ldr	r0, [pc, #116]	@ (80021e8 <MX_TIM3_Init+0xb8>)
 8002174:	f7ff fdf5 	bl	8001d62 <HAL_TIM_ConfigClockSource>
 8002178:	bb30      	cbnz	r0, 80021c8 <MX_TIM3_Init+0x98>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800217a:	481b      	ldr	r0, [pc, #108]	@ (80021e8 <MX_TIM3_Init+0xb8>)
 800217c:	f7ff fd1c 	bl	8001bb8 <HAL_TIM_PWM_Init>
 8002180:	bb28      	cbnz	r0, 80021ce <MX_TIM3_Init+0x9e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002186:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002188:	a908      	add	r1, sp, #32
 800218a:	4817      	ldr	r0, [pc, #92]	@ (80021e8 <MX_TIM3_Init+0xb8>)
 800218c:	f7ff feea 	bl	8001f64 <HAL_TIMEx_MasterConfigSynchronization>
 8002190:	bb00      	cbnz	r0, 80021d4 <MX_TIM3_Init+0xa4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002192:	2360      	movs	r3, #96	@ 0x60
 8002194:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002196:	2200      	movs	r2, #0
 8002198:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800219a:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800219c:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800219e:	a901      	add	r1, sp, #4
 80021a0:	4811      	ldr	r0, [pc, #68]	@ (80021e8 <MX_TIM3_Init+0xb8>)
 80021a2:	f7ff fd63 	bl	8001c6c <HAL_TIM_PWM_ConfigChannel>
 80021a6:	b9c0      	cbnz	r0, 80021da <MX_TIM3_Init+0xaa>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021a8:	2204      	movs	r2, #4
 80021aa:	eb0d 0102 	add.w	r1, sp, r2
 80021ae:	480e      	ldr	r0, [pc, #56]	@ (80021e8 <MX_TIM3_Init+0xb8>)
 80021b0:	f7ff fd5c 	bl	8001c6c <HAL_TIM_PWM_ConfigChannel>
 80021b4:	b9a0      	cbnz	r0, 80021e0 <MX_TIM3_Init+0xb0>
  HAL_TIM_MspPostInit(&htim3);
 80021b6:	480c      	ldr	r0, [pc, #48]	@ (80021e8 <MX_TIM3_Init+0xb8>)
 80021b8:	f7ff ff8e 	bl	80020d8 <HAL_TIM_MspPostInit>
}
 80021bc:	b00f      	add	sp, #60	@ 0x3c
 80021be:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80021c2:	f7fe fdeb 	bl	8000d9c <Error_Handler>
 80021c6:	e7d0      	b.n	800216a <MX_TIM3_Init+0x3a>
    Error_Handler();
 80021c8:	f7fe fde8 	bl	8000d9c <Error_Handler>
 80021cc:	e7d5      	b.n	800217a <MX_TIM3_Init+0x4a>
    Error_Handler();
 80021ce:	f7fe fde5 	bl	8000d9c <Error_Handler>
 80021d2:	e7d6      	b.n	8002182 <MX_TIM3_Init+0x52>
    Error_Handler();
 80021d4:	f7fe fde2 	bl	8000d9c <Error_Handler>
 80021d8:	e7db      	b.n	8002192 <MX_TIM3_Init+0x62>
    Error_Handler();
 80021da:	f7fe fddf 	bl	8000d9c <Error_Handler>
 80021de:	e7e3      	b.n	80021a8 <MX_TIM3_Init+0x78>
    Error_Handler();
 80021e0:	f7fe fddc 	bl	8000d9c <Error_Handler>
 80021e4:	e7e7      	b.n	80021b6 <MX_TIM3_Init+0x86>
 80021e6:	bf00      	nop
 80021e8:	200000b8 	.word	0x200000b8
 80021ec:	40000400 	.word	0x40000400

080021f0 <set_filtering>:

trigger_s *trigger = NULL;

void set_filtering(trigger_s *trigger)
{
  switch (trigger->settings.filtering)
 80021f0:	7903      	ldrb	r3, [r0, #4]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d813      	bhi.n	800221e <set_filtering+0x2e>
 80021f6:	e8df f003 	tbb	[pc, r3]
 80021fa:	0502      	.short	0x0502
 80021fc:	0c09      	.short	0x0c09
  {
    case TF_FILTERING_NONE:
      trigger->_trigger_filter_time_us = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	60c3      	str	r3, [r0, #12]
        break;
 8002202:	4770      	bx	lr
    case TF_FILTERING_LITE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 4U; 
 8002204:	69c3      	ldr	r3, [r0, #28]
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	60c3      	str	r3, [r0, #12]
        break;
 800220a:	4770      	bx	lr
    case TF_FILTERING_MEDIUM:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 1U;
 800220c:	69c3      	ldr	r3, [r0, #28]
 800220e:	60c3      	str	r3, [r0, #12]
        break;
 8002210:	4770      	bx	lr
    case TF_FILTERING_AGGRESSIVE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us * 3 / 4;
 8002212:	69c3      	ldr	r3, [r0, #28]
 8002214:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	60c3      	str	r3, [r0, #12]
        break;
 800221c:	4770      	bx	lr
    default:
        // Handle invalid filtering level
        trigger->_trigger_filter_time_us = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	60c3      	str	r3, [r0, #12]
        break;
  }
}
 8002222:	4770      	bx	lr

08002224 <trigger_init>:

void trigger_init(trigger_s *instance)
{   
  bool temp_status = true;
  if (instance == NULL)
 8002224:	b1b0      	cbz	r0, 8002254 <trigger_init+0x30>
{   
 8002226:	b510      	push	{r4, lr}
    /**
     * @todo and maybe throw an error!
     */
    return;
  }
  trigger = instance;
 8002228:	4c0b      	ldr	r4, [pc, #44]	@ (8002258 <trigger_init+0x34>)
 800222a:	6020      	str	r0, [r4, #0]
  
  trigger->sync_status = TS_NOT_SYNCED;
 800222c:	2200      	movs	r2, #0
 800222e:	7042      	strb	r2, [r0, #1]
  set_filtering(trigger);
 8002230:	6820      	ldr	r0, [r4, #0]
 8002232:	f7ff ffdd 	bl	80021f0 <set_filtering>
  trigger->_trigger_actual_teeth = trigger->settings.full_teeth - trigger->settings.missing_teeth;
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	795a      	ldrb	r2, [r3, #5]
 800223a:	7999      	ldrb	r1, [r3, #6]
 800223c:	1a50      	subs	r0, r2, r1
 800223e:	f883 002a 	strb.w	r0, [r3, #42]	@ 0x2a
    
  if (trigger->settings.full_teeth == 0 || trigger->settings.missing_teeth == 0)
 8002242:	b112      	cbz	r2, 800224a <trigger_init+0x26>
 8002244:	b121      	cbz	r1, 8002250 <trigger_init+0x2c>
  bool temp_status = true;
 8002246:	2201      	movs	r2, #1
 8002248:	e000      	b.n	800224c <trigger_init+0x28>
  {
    temp_status = false;
 800224a:	2200      	movs	r2, #0
  }
  trigger->initialized = temp_status;
 800224c:	701a      	strb	r2, [r3, #0]
    
}
 800224e:	bd10      	pop	{r4, pc}
    temp_status = false;
 8002250:	2200      	movs	r2, #0
 8002252:	e7fb      	b.n	800224c <trigger_init+0x28>
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000100 	.word	0x20000100

0800225c <trigger_tooth_handle>:

void trigger_tooth_handle()
{
 800225c:	b538      	push	{r3, r4, r5, lr}

  if (!trigger->initialized)
 800225e:	4b51      	ldr	r3, [pc, #324]	@ (80023a4 <trigger_tooth_handle+0x148>)
 8002260:	681c      	ldr	r4, [r3, #0]
 8002262:	7825      	ldrb	r5, [r4, #0]
 8002264:	b905      	cbnz	r5, 8002268 <trigger_tooth_handle+0xc>
    set_filtering(trigger); 
  }
  
  trigger->_tooth_time_us[2] = trigger->_tooth_time_us[1];
  trigger->_tooth_time_us[1] = trigger->_tooth_time_us[0];
}
 8002266:	bd38      	pop	{r3, r4, r5, pc}
  trigger->_tooth_time_us[0] = get_time_us();
 8002268:	f7fe fbd4 	bl	8000a14 <get_time_us>
 800226c:	6120      	str	r0, [r4, #16]
  trigger->_current_tooth_gap_us = trigger->_tooth_time_us[0] - trigger->_tooth_time_us[1];
 800226e:	4b4d      	ldr	r3, [pc, #308]	@ (80023a4 <trigger_tooth_handle+0x148>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	6958      	ldr	r0, [r3, #20]
 8002276:	1a12      	subs	r2, r2, r0
 8002278:	61da      	str	r2, [r3, #28]
  if (trigger->_current_tooth_gap_us < trigger->_trigger_filter_time_us) // Pulses should never be less than _trigger_filter_time_us, so if they are it means a false trigger. (A 36-1 wheel at 8000rpm will have triggers approx. every 200uS)
 800227a:	68d9      	ldr	r1, [r3, #12]
 800227c:	428a      	cmp	r2, r1
 800227e:	d3f2      	bcc.n	8002266 <trigger_tooth_handle+0xa>
  trigger->_counted_tooth++; //Increment the tooth counter
 8002280:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 8002282:	3101      	adds	r1, #1
 8002284:	b289      	uxth	r1, r1
 8002286:	8519      	strh	r1, [r3, #40]	@ 0x28
  previous_tooth_gap = trigger->_tooth_time_us[1] - trigger->_tooth_time_us[2];
 8002288:	699c      	ldr	r4, [r3, #24]
 800228a:	1b00      	subs	r0, r0, r4
  if (previous_tooth_gap < trigger->_current_tooth_gap_us) 
 800228c:	4282      	cmp	r2, r0
 800228e:	d956      	bls.n	800233e <trigger_tooth_handle+0xe2>
    trigger->_shorter_tooth_gap = previous_tooth_gap;
 8002290:	6218      	str	r0, [r3, #32]
  if(trigger->settings.missing_teeth == 1)
 8002292:	7998      	ldrb	r0, [r3, #6]
 8002294:	2801      	cmp	r0, #1
 8002296:	d054      	beq.n	8002342 <trigger_tooth_handle+0xe6>
    trigger->_target_tooth_gap_us = trigger->_shorter_tooth_gap * trigger->settings.missing_teeth;
 8002298:	6a1c      	ldr	r4, [r3, #32]
 800229a:	fb00 f404 	mul.w	r4, r0, r4
 800229e:	625c      	str	r4, [r3, #36]	@ 0x24
  if ((trigger->_current_tooth_gap_us > trigger->_target_tooth_gap_us) || (trigger->_counted_tooth > trigger->_trigger_actual_teeth))
 80022a0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80022a2:	4282      	cmp	r2, r0
 80022a4:	d803      	bhi.n	80022ae <trigger_tooth_handle+0x52>
 80022a6:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80022aa:	4291      	cmp	r1, r2
 80022ac:	d95a      	bls.n	8002364 <trigger_tooth_handle+0x108>
    if (trigger->_counted_tooth < trigger->_trigger_actual_teeth)
 80022ae:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80022b2:	4291      	cmp	r1, r2
 80022b4:	d24b      	bcs.n	800234e <trigger_tooth_handle+0xf2>
      trigger->sync_status = TS_NOT_SYNCED;
 80022b6:	2200      	movs	r2, #0
 80022b8:	705a      	strb	r2, [r3, #1]
      trigger->sync_loss_counter++;
 80022ba:	493a      	ldr	r1, [pc, #232]	@ (80023a4 <trigger_tooth_handle+0x148>)
 80022bc:	6808      	ldr	r0, [r1, #0]
 80022be:	8843      	ldrh	r3, [r0, #2]
 80022c0:	3301      	adds	r3, #1
 80022c2:	8043      	strh	r3, [r0, #2]
      engine.total_revolutions = 0;
 80022c4:	4b38      	ldr	r3, [pc, #224]	@ (80023a8 <trigger_tooth_handle+0x14c>)
 80022c6:	601a      	str	r2, [r3, #0]
      engine.rpm = 0;
 80022c8:	2000      	movs	r0, #0
 80022ca:	60d8      	str	r0, [r3, #12]
      trigger->_counted_tooth = 0;
 80022cc:	680b      	ldr	r3, [r1, #0]
 80022ce:	851a      	strh	r2, [r3, #40]	@ 0x28
  engine.crankshaft_angle = 360.0f / (angle_t)trigger->settings.full_teeth * (angle_t)trigger->_counted_tooth;
 80022d0:	4b34      	ldr	r3, [pc, #208]	@ (80023a4 <trigger_tooth_handle+0x148>)
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	7943      	ldrb	r3, [r0, #5]
 80022d6:	ee07 3a10 	vmov	s14, r3
 80022da:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80022de:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80023ac <trigger_tooth_handle+0x150>
 80022e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e6:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 80022e8:	ee07 3a10 	vmov	s14, r3
 80022ec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80022f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f4:	4a2c      	ldr	r2, [pc, #176]	@ (80023a8 <trigger_tooth_handle+0x14c>)
 80022f6:	edc2 7a01 	vstr	s15, [r2, #4]
  engine.rpm = (rpm_t)(CONVERSION_FACTOR_SECONDS_TO_MICROSECONDS * CONVERSION_FACTOR_MINUTES_TO_SECONDS / trigger->_shorter_tooth_gap / trigger->settings.full_teeth);
 80022fa:	6a01      	ldr	r1, [r0, #32]
 80022fc:	4b2c      	ldr	r3, [pc, #176]	@ (80023b0 <trigger_tooth_handle+0x154>)
 80022fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002302:	7941      	ldrb	r1, [r0, #5]
 8002304:	fbb3 f3f1 	udiv	r3, r3, r1
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002310:	edc2 7a03 	vstr	s15, [r2, #12]
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= trigger->cranking_rpm_threshold)
 8002314:	7843      	ldrb	r3, [r0, #1]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d026      	beq.n	8002368 <trigger_tooth_handle+0x10c>
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < trigger->cranking_rpm_threshold)
 800231a:	7843      	ldrb	r3, [r0, #1]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d02e      	beq.n	800237e <trigger_tooth_handle+0x122>
  if (trigger->sync_status == TS_NOT_SYNCED)
 8002320:	7843      	ldrb	r3, [r0, #1]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d136      	bne.n	8002394 <trigger_tooth_handle+0x138>
    engine.spinning_state = SS_SPINNING_UP;
 8002326:	4b20      	ldr	r3, [pc, #128]	@ (80023a8 <trigger_tooth_handle+0x14c>)
 8002328:	2201      	movs	r2, #1
 800232a:	741a      	strb	r2, [r3, #16]
  if(is_missing_teeth == false)
 800232c:	2d00      	cmp	r5, #0
 800232e:	d035      	beq.n	800239c <trigger_tooth_handle+0x140>
  trigger->_tooth_time_us[2] = trigger->_tooth_time_us[1];
 8002330:	4b1c      	ldr	r3, [pc, #112]	@ (80023a4 <trigger_tooth_handle+0x148>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	619a      	str	r2, [r3, #24]
  trigger->_tooth_time_us[1] = trigger->_tooth_time_us[0];
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	615a      	str	r2, [r3, #20]
 800233c:	e793      	b.n	8002266 <trigger_tooth_handle+0xa>
    trigger->_shorter_tooth_gap = trigger->_current_tooth_gap_us;
 800233e:	621a      	str	r2, [r3, #32]
 8002340:	e7a7      	b.n	8002292 <trigger_tooth_handle+0x36>
    trigger->_target_tooth_gap_us = (3 * trigger->_shorter_tooth_gap) >> 1; 
 8002342:	6a18      	ldr	r0, [r3, #32]
 8002344:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002348:	0840      	lsrs	r0, r0, #1
 800234a:	6258      	str	r0, [r3, #36]	@ 0x24
 800234c:	e7a8      	b.n	80022a0 <trigger_tooth_handle+0x44>
      trigger->sync_status = TS_FULLY_SYNCED;
 800234e:	2201      	movs	r2, #1
 8002350:	705a      	strb	r2, [r3, #1]
      engine.total_revolutions++;
 8002352:	4a15      	ldr	r2, [pc, #84]	@ (80023a8 <trigger_tooth_handle+0x14c>)
 8002354:	6813      	ldr	r3, [r2, #0]
 8002356:	3301      	adds	r3, #1
 8002358:	6013      	str	r3, [r2, #0]
      trigger->_counted_tooth = 0;
 800235a:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <trigger_tooth_handle+0x148>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2200      	movs	r2, #0
 8002360:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002362:	e7b5      	b.n	80022d0 <trigger_tooth_handle+0x74>
  bool is_missing_teeth = false;
 8002364:	2500      	movs	r5, #0
 8002366:	e7b3      	b.n	80022d0 <trigger_tooth_handle+0x74>
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= trigger->cranking_rpm_threshold)
 8002368:	ed90 7a02 	vldr	s14, [r0, #8]
 800236c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002374:	dbd1      	blt.n	800231a <trigger_tooth_handle+0xbe>
    engine.spinning_state = SS_RUNNING;
 8002376:	4613      	mov	r3, r2
 8002378:	2203      	movs	r2, #3
 800237a:	741a      	strb	r2, [r3, #16]
 800237c:	e7cd      	b.n	800231a <trigger_tooth_handle+0xbe>
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < trigger->cranking_rpm_threshold)
 800237e:	ed90 7a02 	vldr	s14, [r0, #8]
 8002382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238a:	d5c9      	bpl.n	8002320 <trigger_tooth_handle+0xc4>
    engine.spinning_state = SS_CRANKING;
 800238c:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <trigger_tooth_handle+0x14c>)
 800238e:	2202      	movs	r2, #2
 8002390:	741a      	strb	r2, [r3, #16]
 8002392:	e7c5      	b.n	8002320 <trigger_tooth_handle+0xc4>
    engine.spinning_state = SS_STOPPED;
 8002394:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <trigger_tooth_handle+0x14c>)
 8002396:	2200      	movs	r2, #0
 8002398:	741a      	strb	r2, [r3, #16]
 800239a:	e7c7      	b.n	800232c <trigger_tooth_handle+0xd0>
    set_filtering(trigger); 
 800239c:	f7ff ff28 	bl	80021f0 <set_filtering>
 80023a0:	e7c6      	b.n	8002330 <trigger_tooth_handle+0xd4>
 80023a2:	bf00      	nop
 80023a4:	20000100 	.word	0x20000100
 80023a8:	2000002c 	.word	0x2000002c
 80023ac:	43b40000 	.word	0x43b40000
 80023b0:	03938700 	.word	0x03938700

080023b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023b8:	f7ff fe24 	bl	8002004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023bc:	480c      	ldr	r0, [pc, #48]	@ (80023f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023be:	490d      	ldr	r1, [pc, #52]	@ (80023f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023c0:	4a0d      	ldr	r2, [pc, #52]	@ (80023f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c4:	e002      	b.n	80023cc <LoopCopyDataInit>

080023c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ca:	3304      	adds	r3, #4

080023cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d0:	d3f9      	bcc.n	80023c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d2:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d8:	e001      	b.n	80023de <LoopFillZerobss>

080023da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023dc:	3204      	adds	r2, #4

080023de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e0:	d3fb      	bcc.n	80023da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023e2:	f000 f819 	bl	8002418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e6:	f7fe fd2f 	bl	8000e48 <main>
  bx  lr    
 80023ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80023f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80023f8:	08002790 	.word	0x08002790
  ldr r2, =_sbss
 80023fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002400:	20000104 	.word	0x20000104

08002404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC_IRQHandler>

08002406 <memset>:
 8002406:	4402      	add	r2, r0
 8002408:	4603      	mov	r3, r0
 800240a:	4293      	cmp	r3, r2
 800240c:	d100      	bne.n	8002410 <memset+0xa>
 800240e:	4770      	bx	lr
 8002410:	f803 1b01 	strb.w	r1, [r3], #1
 8002414:	e7f9      	b.n	800240a <memset+0x4>
	...

08002418 <__libc_init_array>:
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	4b0d      	ldr	r3, [pc, #52]	@ (8002450 <__libc_init_array+0x38>)
 800241c:	4d0d      	ldr	r5, [pc, #52]	@ (8002454 <__libc_init_array+0x3c>)
 800241e:	1b5b      	subs	r3, r3, r5
 8002420:	109c      	asrs	r4, r3, #2
 8002422:	2600      	movs	r6, #0
 8002424:	42a6      	cmp	r6, r4
 8002426:	d109      	bne.n	800243c <__libc_init_array+0x24>
 8002428:	f000 f996 	bl	8002758 <_init>
 800242c:	4d0a      	ldr	r5, [pc, #40]	@ (8002458 <__libc_init_array+0x40>)
 800242e:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <__libc_init_array+0x44>)
 8002430:	1b5b      	subs	r3, r3, r5
 8002432:	109c      	asrs	r4, r3, #2
 8002434:	2600      	movs	r6, #0
 8002436:	42a6      	cmp	r6, r4
 8002438:	d105      	bne.n	8002446 <__libc_init_array+0x2e>
 800243a:	bd70      	pop	{r4, r5, r6, pc}
 800243c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002440:	4798      	blx	r3
 8002442:	3601      	adds	r6, #1
 8002444:	e7ee      	b.n	8002424 <__libc_init_array+0xc>
 8002446:	f855 3b04 	ldr.w	r3, [r5], #4
 800244a:	4798      	blx	r3
 800244c:	3601      	adds	r6, #1
 800244e:	e7f2      	b.n	8002436 <__libc_init_array+0x1e>
 8002450:	08002788 	.word	0x08002788
 8002454:	08002788 	.word	0x08002788
 8002458:	08002788 	.word	0x08002788
 800245c:	0800278c 	.word	0x0800278c

08002460 <__udivmoddi4>:
 8002460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002464:	9d08      	ldr	r5, [sp, #32]
 8002466:	460f      	mov	r7, r1
 8002468:	4604      	mov	r4, r0
 800246a:	468c      	mov	ip, r1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d148      	bne.n	8002502 <__udivmoddi4+0xa2>
 8002470:	428a      	cmp	r2, r1
 8002472:	4616      	mov	r6, r2
 8002474:	d961      	bls.n	800253a <__udivmoddi4+0xda>
 8002476:	fab2 f382 	clz	r3, r2
 800247a:	b14b      	cbz	r3, 8002490 <__udivmoddi4+0x30>
 800247c:	f1c3 0220 	rsb	r2, r3, #32
 8002480:	fa01 fc03 	lsl.w	ip, r1, r3
 8002484:	fa20 f202 	lsr.w	r2, r0, r2
 8002488:	409e      	lsls	r6, r3
 800248a:	ea42 0c0c 	orr.w	ip, r2, ip
 800248e:	409c      	lsls	r4, r3
 8002490:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8002494:	b2b7      	uxth	r7, r6
 8002496:	fbbc f1fe 	udiv	r1, ip, lr
 800249a:	0c22      	lsrs	r2, r4, #16
 800249c:	fb0e cc11 	mls	ip, lr, r1, ip
 80024a0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80024a4:	fb01 f007 	mul.w	r0, r1, r7
 80024a8:	4290      	cmp	r0, r2
 80024aa:	d909      	bls.n	80024c0 <__udivmoddi4+0x60>
 80024ac:	18b2      	adds	r2, r6, r2
 80024ae:	f101 3cff 	add.w	ip, r1, #4294967295
 80024b2:	f080 80ee 	bcs.w	8002692 <__udivmoddi4+0x232>
 80024b6:	4290      	cmp	r0, r2
 80024b8:	f240 80eb 	bls.w	8002692 <__udivmoddi4+0x232>
 80024bc:	3902      	subs	r1, #2
 80024be:	4432      	add	r2, r6
 80024c0:	1a12      	subs	r2, r2, r0
 80024c2:	b2a4      	uxth	r4, r4
 80024c4:	fbb2 f0fe 	udiv	r0, r2, lr
 80024c8:	fb0e 2210 	mls	r2, lr, r0, r2
 80024cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80024d0:	fb00 f707 	mul.w	r7, r0, r7
 80024d4:	42a7      	cmp	r7, r4
 80024d6:	d909      	bls.n	80024ec <__udivmoddi4+0x8c>
 80024d8:	1934      	adds	r4, r6, r4
 80024da:	f100 32ff 	add.w	r2, r0, #4294967295
 80024de:	f080 80da 	bcs.w	8002696 <__udivmoddi4+0x236>
 80024e2:	42a7      	cmp	r7, r4
 80024e4:	f240 80d7 	bls.w	8002696 <__udivmoddi4+0x236>
 80024e8:	4434      	add	r4, r6
 80024ea:	3802      	subs	r0, #2
 80024ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80024f0:	1be4      	subs	r4, r4, r7
 80024f2:	2100      	movs	r1, #0
 80024f4:	b11d      	cbz	r5, 80024fe <__udivmoddi4+0x9e>
 80024f6:	40dc      	lsrs	r4, r3
 80024f8:	2300      	movs	r3, #0
 80024fa:	e9c5 4300 	strd	r4, r3, [r5]
 80024fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002502:	428b      	cmp	r3, r1
 8002504:	d906      	bls.n	8002514 <__udivmoddi4+0xb4>
 8002506:	b10d      	cbz	r5, 800250c <__udivmoddi4+0xac>
 8002508:	e9c5 0100 	strd	r0, r1, [r5]
 800250c:	2100      	movs	r1, #0
 800250e:	4608      	mov	r0, r1
 8002510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002514:	fab3 f183 	clz	r1, r3
 8002518:	2900      	cmp	r1, #0
 800251a:	d148      	bne.n	80025ae <__udivmoddi4+0x14e>
 800251c:	42bb      	cmp	r3, r7
 800251e:	d302      	bcc.n	8002526 <__udivmoddi4+0xc6>
 8002520:	4282      	cmp	r2, r0
 8002522:	f200 8107 	bhi.w	8002734 <__udivmoddi4+0x2d4>
 8002526:	1a84      	subs	r4, r0, r2
 8002528:	eb67 0203 	sbc.w	r2, r7, r3
 800252c:	2001      	movs	r0, #1
 800252e:	4694      	mov	ip, r2
 8002530:	2d00      	cmp	r5, #0
 8002532:	d0e4      	beq.n	80024fe <__udivmoddi4+0x9e>
 8002534:	e9c5 4c00 	strd	r4, ip, [r5]
 8002538:	e7e1      	b.n	80024fe <__udivmoddi4+0x9e>
 800253a:	2a00      	cmp	r2, #0
 800253c:	f000 8092 	beq.w	8002664 <__udivmoddi4+0x204>
 8002540:	fab2 f382 	clz	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	f040 80a8 	bne.w	800269a <__udivmoddi4+0x23a>
 800254a:	1a8a      	subs	r2, r1, r2
 800254c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8002550:	fa1f fc86 	uxth.w	ip, r6
 8002554:	2101      	movs	r1, #1
 8002556:	0c20      	lsrs	r0, r4, #16
 8002558:	fbb2 f7fe 	udiv	r7, r2, lr
 800255c:	fb0e 2217 	mls	r2, lr, r7, r2
 8002560:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8002564:	fb0c f007 	mul.w	r0, ip, r7
 8002568:	4290      	cmp	r0, r2
 800256a:	d907      	bls.n	800257c <__udivmoddi4+0x11c>
 800256c:	18b2      	adds	r2, r6, r2
 800256e:	f107 38ff 	add.w	r8, r7, #4294967295
 8002572:	d202      	bcs.n	800257a <__udivmoddi4+0x11a>
 8002574:	4290      	cmp	r0, r2
 8002576:	f200 80e2 	bhi.w	800273e <__udivmoddi4+0x2de>
 800257a:	4647      	mov	r7, r8
 800257c:	1a12      	subs	r2, r2, r0
 800257e:	b2a4      	uxth	r4, r4
 8002580:	fbb2 f0fe 	udiv	r0, r2, lr
 8002584:	fb0e 2210 	mls	r2, lr, r0, r2
 8002588:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800258c:	fb0c fc00 	mul.w	ip, ip, r0
 8002590:	45a4      	cmp	ip, r4
 8002592:	d907      	bls.n	80025a4 <__udivmoddi4+0x144>
 8002594:	1934      	adds	r4, r6, r4
 8002596:	f100 32ff 	add.w	r2, r0, #4294967295
 800259a:	d202      	bcs.n	80025a2 <__udivmoddi4+0x142>
 800259c:	45a4      	cmp	ip, r4
 800259e:	f200 80cb 	bhi.w	8002738 <__udivmoddi4+0x2d8>
 80025a2:	4610      	mov	r0, r2
 80025a4:	eba4 040c 	sub.w	r4, r4, ip
 80025a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80025ac:	e7a2      	b.n	80024f4 <__udivmoddi4+0x94>
 80025ae:	f1c1 0620 	rsb	r6, r1, #32
 80025b2:	408b      	lsls	r3, r1
 80025b4:	fa22 fc06 	lsr.w	ip, r2, r6
 80025b8:	ea4c 0c03 	orr.w	ip, ip, r3
 80025bc:	fa07 f401 	lsl.w	r4, r7, r1
 80025c0:	fa20 f306 	lsr.w	r3, r0, r6
 80025c4:	40f7      	lsrs	r7, r6
 80025c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80025ca:	4323      	orrs	r3, r4
 80025cc:	fa00 f801 	lsl.w	r8, r0, r1
 80025d0:	fa1f fe8c 	uxth.w	lr, ip
 80025d4:	fbb7 f0f9 	udiv	r0, r7, r9
 80025d8:	0c1c      	lsrs	r4, r3, #16
 80025da:	fb09 7710 	mls	r7, r9, r0, r7
 80025de:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80025e2:	fb00 f70e 	mul.w	r7, r0, lr
 80025e6:	42a7      	cmp	r7, r4
 80025e8:	fa02 f201 	lsl.w	r2, r2, r1
 80025ec:	d90a      	bls.n	8002604 <__udivmoddi4+0x1a4>
 80025ee:	eb1c 0404 	adds.w	r4, ip, r4
 80025f2:	f100 3aff 	add.w	sl, r0, #4294967295
 80025f6:	f080 809b 	bcs.w	8002730 <__udivmoddi4+0x2d0>
 80025fa:	42a7      	cmp	r7, r4
 80025fc:	f240 8098 	bls.w	8002730 <__udivmoddi4+0x2d0>
 8002600:	3802      	subs	r0, #2
 8002602:	4464      	add	r4, ip
 8002604:	1be4      	subs	r4, r4, r7
 8002606:	b29f      	uxth	r7, r3
 8002608:	fbb4 f3f9 	udiv	r3, r4, r9
 800260c:	fb09 4413 	mls	r4, r9, r3, r4
 8002610:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8002614:	fb03 fe0e 	mul.w	lr, r3, lr
 8002618:	45a6      	cmp	lr, r4
 800261a:	d909      	bls.n	8002630 <__udivmoddi4+0x1d0>
 800261c:	eb1c 0404 	adds.w	r4, ip, r4
 8002620:	f103 37ff 	add.w	r7, r3, #4294967295
 8002624:	f080 8082 	bcs.w	800272c <__udivmoddi4+0x2cc>
 8002628:	45a6      	cmp	lr, r4
 800262a:	d97f      	bls.n	800272c <__udivmoddi4+0x2cc>
 800262c:	3b02      	subs	r3, #2
 800262e:	4464      	add	r4, ip
 8002630:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002634:	eba4 040e 	sub.w	r4, r4, lr
 8002638:	fba0 e702 	umull	lr, r7, r0, r2
 800263c:	42bc      	cmp	r4, r7
 800263e:	4673      	mov	r3, lr
 8002640:	46b9      	mov	r9, r7
 8002642:	d363      	bcc.n	800270c <__udivmoddi4+0x2ac>
 8002644:	d060      	beq.n	8002708 <__udivmoddi4+0x2a8>
 8002646:	b15d      	cbz	r5, 8002660 <__udivmoddi4+0x200>
 8002648:	ebb8 0203 	subs.w	r2, r8, r3
 800264c:	eb64 0409 	sbc.w	r4, r4, r9
 8002650:	fa04 f606 	lsl.w	r6, r4, r6
 8002654:	fa22 f301 	lsr.w	r3, r2, r1
 8002658:	431e      	orrs	r6, r3
 800265a:	40cc      	lsrs	r4, r1
 800265c:	e9c5 6400 	strd	r6, r4, [r5]
 8002660:	2100      	movs	r1, #0
 8002662:	e74c      	b.n	80024fe <__udivmoddi4+0x9e>
 8002664:	0862      	lsrs	r2, r4, #1
 8002666:	0848      	lsrs	r0, r1, #1
 8002668:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 800266c:	0c0b      	lsrs	r3, r1, #16
 800266e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002672:	b28a      	uxth	r2, r1
 8002674:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002678:	fbb3 f1f6 	udiv	r1, r3, r6
 800267c:	07e4      	lsls	r4, r4, #31
 800267e:	46b4      	mov	ip, r6
 8002680:	4637      	mov	r7, r6
 8002682:	46b6      	mov	lr, r6
 8002684:	231f      	movs	r3, #31
 8002686:	fbb0 f0f6 	udiv	r0, r0, r6
 800268a:	1bd2      	subs	r2, r2, r7
 800268c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8002690:	e761      	b.n	8002556 <__udivmoddi4+0xf6>
 8002692:	4661      	mov	r1, ip
 8002694:	e714      	b.n	80024c0 <__udivmoddi4+0x60>
 8002696:	4610      	mov	r0, r2
 8002698:	e728      	b.n	80024ec <__udivmoddi4+0x8c>
 800269a:	f1c3 0120 	rsb	r1, r3, #32
 800269e:	fa20 f201 	lsr.w	r2, r0, r1
 80026a2:	409e      	lsls	r6, r3
 80026a4:	fa27 f101 	lsr.w	r1, r7, r1
 80026a8:	409f      	lsls	r7, r3
 80026aa:	433a      	orrs	r2, r7
 80026ac:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80026b0:	fa1f fc86 	uxth.w	ip, r6
 80026b4:	fbb1 f7fe 	udiv	r7, r1, lr
 80026b8:	fb0e 1017 	mls	r0, lr, r7, r1
 80026bc:	0c11      	lsrs	r1, r2, #16
 80026be:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80026c2:	fb07 f80c 	mul.w	r8, r7, ip
 80026c6:	4588      	cmp	r8, r1
 80026c8:	fa04 f403 	lsl.w	r4, r4, r3
 80026cc:	d93a      	bls.n	8002744 <__udivmoddi4+0x2e4>
 80026ce:	1871      	adds	r1, r6, r1
 80026d0:	f107 30ff 	add.w	r0, r7, #4294967295
 80026d4:	d201      	bcs.n	80026da <__udivmoddi4+0x27a>
 80026d6:	4588      	cmp	r8, r1
 80026d8:	d81f      	bhi.n	800271a <__udivmoddi4+0x2ba>
 80026da:	eba1 0108 	sub.w	r1, r1, r8
 80026de:	fbb1 f8fe 	udiv	r8, r1, lr
 80026e2:	fb08 f70c 	mul.w	r7, r8, ip
 80026e6:	fb0e 1118 	mls	r1, lr, r8, r1
 80026ea:	b292      	uxth	r2, r2
 80026ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026f0:	42ba      	cmp	r2, r7
 80026f2:	d22f      	bcs.n	8002754 <__udivmoddi4+0x2f4>
 80026f4:	18b2      	adds	r2, r6, r2
 80026f6:	f108 31ff 	add.w	r1, r8, #4294967295
 80026fa:	d2c6      	bcs.n	800268a <__udivmoddi4+0x22a>
 80026fc:	42ba      	cmp	r2, r7
 80026fe:	d2c4      	bcs.n	800268a <__udivmoddi4+0x22a>
 8002700:	f1a8 0102 	sub.w	r1, r8, #2
 8002704:	4432      	add	r2, r6
 8002706:	e7c0      	b.n	800268a <__udivmoddi4+0x22a>
 8002708:	45f0      	cmp	r8, lr
 800270a:	d29c      	bcs.n	8002646 <__udivmoddi4+0x1e6>
 800270c:	ebbe 0302 	subs.w	r3, lr, r2
 8002710:	eb67 070c 	sbc.w	r7, r7, ip
 8002714:	3801      	subs	r0, #1
 8002716:	46b9      	mov	r9, r7
 8002718:	e795      	b.n	8002646 <__udivmoddi4+0x1e6>
 800271a:	eba6 0808 	sub.w	r8, r6, r8
 800271e:	4441      	add	r1, r8
 8002720:	1eb8      	subs	r0, r7, #2
 8002722:	fbb1 f8fe 	udiv	r8, r1, lr
 8002726:	fb08 f70c 	mul.w	r7, r8, ip
 800272a:	e7dc      	b.n	80026e6 <__udivmoddi4+0x286>
 800272c:	463b      	mov	r3, r7
 800272e:	e77f      	b.n	8002630 <__udivmoddi4+0x1d0>
 8002730:	4650      	mov	r0, sl
 8002732:	e767      	b.n	8002604 <__udivmoddi4+0x1a4>
 8002734:	4608      	mov	r0, r1
 8002736:	e6fb      	b.n	8002530 <__udivmoddi4+0xd0>
 8002738:	4434      	add	r4, r6
 800273a:	3802      	subs	r0, #2
 800273c:	e732      	b.n	80025a4 <__udivmoddi4+0x144>
 800273e:	3f02      	subs	r7, #2
 8002740:	4432      	add	r2, r6
 8002742:	e71b      	b.n	800257c <__udivmoddi4+0x11c>
 8002744:	eba1 0108 	sub.w	r1, r1, r8
 8002748:	4638      	mov	r0, r7
 800274a:	fbb1 f8fe 	udiv	r8, r1, lr
 800274e:	fb08 f70c 	mul.w	r7, r8, ip
 8002752:	e7c8      	b.n	80026e6 <__udivmoddi4+0x286>
 8002754:	4641      	mov	r1, r8
 8002756:	e798      	b.n	800268a <__udivmoddi4+0x22a>

08002758 <_init>:
 8002758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275a:	bf00      	nop
 800275c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275e:	bc08      	pop	{r3}
 8002760:	469e      	mov	lr, r3
 8002762:	4770      	bx	lr

08002764 <_fini>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	bf00      	nop
 8002768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276a:	bc08      	pop	{r3}
 800276c:	469e      	mov	lr, r3
 800276e:	4770      	bx	lr
