
build/debug/SGC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08008674  08008674  00009674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008888  08008888  0000a150  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008888  08008888  00009888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008890  08008890  0000a150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008890  08008890  00009890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008894  08008894  00009894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  08008898  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000631c  20000150  080089e8  0000a150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000646c  080089e8  0000a46c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a150  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000a180  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c5b5  00000000  00000000  0000a1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000068eb  00000000  00000000  0003676e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000148de  00000000  00000000  0003d059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ce8  00000000  00000000  00051938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001755  00000000  00000000  00053620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa71  00000000  00000000  00054d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a1af  00000000  00000000  000747e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e40  00000000  00000000  0007e998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000194  00000000  00000000  000837d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b80c 	b.w	8000280 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f008 f878 	bl	8008364 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__aeabi_idiv0>:
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop

08000284 <__do_global_dtors_aux>:
 8000284:	b510      	push	{r4, lr}
 8000286:	4c05      	ldr	r4, [pc, #20]	@ (800029c <__do_global_dtors_aux+0x18>)
 8000288:	7823      	ldrb	r3, [r4, #0]
 800028a:	b933      	cbnz	r3, 800029a <__do_global_dtors_aux+0x16>
 800028c:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x1c>)
 800028e:	b113      	cbz	r3, 8000296 <__do_global_dtors_aux+0x12>
 8000290:	4804      	ldr	r0, [pc, #16]	@ (80002a4 <__do_global_dtors_aux+0x20>)
 8000292:	f3af 8000 	nop.w
 8000296:	2301      	movs	r3, #1
 8000298:	7023      	strb	r3, [r4, #0]
 800029a:	bd10      	pop	{r4, pc}
 800029c:	20000150 	.word	0x20000150
 80002a0:	00000000 	.word	0x00000000
 80002a4:	0800865c 	.word	0x0800865c

080002a8 <frame_dummy>:
 80002a8:	b508      	push	{r3, lr}
 80002aa:	4b03      	ldr	r3, [pc, #12]	@ (80002b8 <frame_dummy+0x10>)
 80002ac:	b11b      	cbz	r3, 80002b6 <frame_dummy+0xe>
 80002ae:	4903      	ldr	r1, [pc, #12]	@ (80002bc <frame_dummy+0x14>)
 80002b0:	4803      	ldr	r0, [pc, #12]	@ (80002c0 <frame_dummy+0x18>)
 80002b2:	f3af 8000 	nop.w
 80002b6:	bd08      	pop	{r3, pc}
 80002b8:	00000000 	.word	0x00000000
 80002bc:	20000154 	.word	0x20000154
 80002c0:	0800865c 	.word	0x0800865c

080002c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002c4:	b500      	push	{lr}
 80002c6:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002c8:	2300      	movs	r3, #0
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	9302      	str	r3, [sp, #8]
 80002d0:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80002d2:	4864      	ldr	r0, [pc, #400]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80002d4:	4a64      	ldr	r2, [pc, #400]	@ (8000468 <MX_ADC1_Init+0x1a4>)
 80002d6:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002d8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80002dc:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002de:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80002e0:	2201      	movs	r2, #1
 80002e2:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002e4:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002ea:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ec:	495f      	ldr	r1, [pc, #380]	@ (800046c <MX_ADC1_Init+0x1a8>)
 80002ee:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f0:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 13;
 80002f2:	210d      	movs	r1, #13
 80002f4:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002f6:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002fa:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002fc:	f001 fc46 	bl	8001b8c <HAL_ADC_Init>
 8000300:	2800      	cmp	r0, #0
 8000302:	f040 8084 	bne.w	800040e <MX_ADC1_Init+0x14a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000306:	230a      	movs	r3, #10
 8000308:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800030a:	2301      	movs	r3, #1
 800030c:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800030e:	2300      	movs	r3, #0
 8000310:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000312:	4669      	mov	r1, sp
 8000314:	4853      	ldr	r0, [pc, #332]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 8000316:	f001 fc65 	bl	8001be4 <HAL_ADC_ConfigChannel>
 800031a:	2800      	cmp	r0, #0
 800031c:	d17a      	bne.n	8000414 <MX_ADC1_Init+0x150>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800031e:	230b      	movs	r3, #11
 8000320:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8000322:	2302      	movs	r3, #2
 8000324:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000326:	4669      	mov	r1, sp
 8000328:	484e      	ldr	r0, [pc, #312]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 800032a:	f001 fc5b 	bl	8001be4 <HAL_ADC_ConfigChannel>
 800032e:	2800      	cmp	r0, #0
 8000330:	d173      	bne.n	800041a <MX_ADC1_Init+0x156>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000332:	230c      	movs	r3, #12
 8000334:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000336:	2303      	movs	r3, #3
 8000338:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800033a:	4669      	mov	r1, sp
 800033c:	4849      	ldr	r0, [pc, #292]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 800033e:	f001 fc51 	bl	8001be4 <HAL_ADC_ConfigChannel>
 8000342:	2800      	cmp	r0, #0
 8000344:	d16c      	bne.n	8000420 <MX_ADC1_Init+0x15c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000346:	230d      	movs	r3, #13
 8000348:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 800034a:	2304      	movs	r3, #4
 800034c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034e:	4669      	mov	r1, sp
 8000350:	4844      	ldr	r0, [pc, #272]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 8000352:	f001 fc47 	bl	8001be4 <HAL_ADC_ConfigChannel>
 8000356:	2800      	cmp	r0, #0
 8000358:	d165      	bne.n	8000426 <MX_ADC1_Init+0x162>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800035a:	2300      	movs	r3, #0
 800035c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 5;
 800035e:	2305      	movs	r3, #5
 8000360:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000362:	4669      	mov	r1, sp
 8000364:	483f      	ldr	r0, [pc, #252]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 8000366:	f001 fc3d 	bl	8001be4 <HAL_ADC_ConfigChannel>
 800036a:	2800      	cmp	r0, #0
 800036c:	d15e      	bne.n	800042c <MX_ADC1_Init+0x168>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800036e:	2301      	movs	r3, #1
 8000370:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 6;
 8000372:	2306      	movs	r3, #6
 8000374:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000376:	4669      	mov	r1, sp
 8000378:	483a      	ldr	r0, [pc, #232]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 800037a:	f001 fc33 	bl	8001be4 <HAL_ADC_ConfigChannel>
 800037e:	2800      	cmp	r0, #0
 8000380:	d157      	bne.n	8000432 <MX_ADC1_Init+0x16e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000382:	2302      	movs	r3, #2
 8000384:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 7;
 8000386:	2307      	movs	r3, #7
 8000388:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	4669      	mov	r1, sp
 800038c:	4835      	ldr	r0, [pc, #212]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 800038e:	f001 fc29 	bl	8001be4 <HAL_ADC_ConfigChannel>
 8000392:	2800      	cmp	r0, #0
 8000394:	d150      	bne.n	8000438 <MX_ADC1_Init+0x174>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000396:	2303      	movs	r3, #3
 8000398:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 8;
 800039a:	2308      	movs	r3, #8
 800039c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039e:	4669      	mov	r1, sp
 80003a0:	4830      	ldr	r0, [pc, #192]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80003a2:	f001 fc1f 	bl	8001be4 <HAL_ADC_ConfigChannel>
 80003a6:	2800      	cmp	r0, #0
 80003a8:	d149      	bne.n	800043e <MX_ADC1_Init+0x17a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80003aa:	2304      	movs	r3, #4
 80003ac:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 9;
 80003ae:	2309      	movs	r3, #9
 80003b0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b2:	4669      	mov	r1, sp
 80003b4:	482b      	ldr	r0, [pc, #172]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80003b6:	f001 fc15 	bl	8001be4 <HAL_ADC_ConfigChannel>
 80003ba:	2800      	cmp	r0, #0
 80003bc:	d142      	bne.n	8000444 <MX_ADC1_Init+0x180>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003be:	2305      	movs	r3, #5
 80003c0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 10;
 80003c2:	230a      	movs	r3, #10
 80003c4:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c6:	4669      	mov	r1, sp
 80003c8:	4826      	ldr	r0, [pc, #152]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80003ca:	f001 fc0b 	bl	8001be4 <HAL_ADC_ConfigChannel>
 80003ce:	2800      	cmp	r0, #0
 80003d0:	d13b      	bne.n	800044a <MX_ADC1_Init+0x186>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80003d2:	2306      	movs	r3, #6
 80003d4:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 11;
 80003d6:	230b      	movs	r3, #11
 80003d8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003da:	4669      	mov	r1, sp
 80003dc:	4821      	ldr	r0, [pc, #132]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80003de:	f001 fc01 	bl	8001be4 <HAL_ADC_ConfigChannel>
 80003e2:	bba8      	cbnz	r0, 8000450 <MX_ADC1_Init+0x18c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003e4:	2307      	movs	r3, #7
 80003e6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 12;
 80003e8:	230c      	movs	r3, #12
 80003ea:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ec:	4669      	mov	r1, sp
 80003ee:	481d      	ldr	r0, [pc, #116]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 80003f0:	f001 fbf8 	bl	8001be4 <HAL_ADC_ConfigChannel>
 80003f4:	bb78      	cbnz	r0, 8000456 <MX_ADC1_Init+0x192>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80003f6:	230e      	movs	r3, #14
 80003f8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 13;
 80003fa:	230d      	movs	r3, #13
 80003fc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fe:	4669      	mov	r1, sp
 8000400:	4818      	ldr	r0, [pc, #96]	@ (8000464 <MX_ADC1_Init+0x1a0>)
 8000402:	f001 fbef 	bl	8001be4 <HAL_ADC_ConfigChannel>
 8000406:	bb48      	cbnz	r0, 800045c <MX_ADC1_Init+0x198>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000408:	b005      	add	sp, #20
 800040a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800040e:	f000 fd5b 	bl	8000ec8 <Error_Handler>
 8000412:	e778      	b.n	8000306 <MX_ADC1_Init+0x42>
    Error_Handler();
 8000414:	f000 fd58 	bl	8000ec8 <Error_Handler>
 8000418:	e781      	b.n	800031e <MX_ADC1_Init+0x5a>
    Error_Handler();
 800041a:	f000 fd55 	bl	8000ec8 <Error_Handler>
 800041e:	e788      	b.n	8000332 <MX_ADC1_Init+0x6e>
    Error_Handler();
 8000420:	f000 fd52 	bl	8000ec8 <Error_Handler>
 8000424:	e78f      	b.n	8000346 <MX_ADC1_Init+0x82>
    Error_Handler();
 8000426:	f000 fd4f 	bl	8000ec8 <Error_Handler>
 800042a:	e796      	b.n	800035a <MX_ADC1_Init+0x96>
    Error_Handler();
 800042c:	f000 fd4c 	bl	8000ec8 <Error_Handler>
 8000430:	e79d      	b.n	800036e <MX_ADC1_Init+0xaa>
    Error_Handler();
 8000432:	f000 fd49 	bl	8000ec8 <Error_Handler>
 8000436:	e7a4      	b.n	8000382 <MX_ADC1_Init+0xbe>
    Error_Handler();
 8000438:	f000 fd46 	bl	8000ec8 <Error_Handler>
 800043c:	e7ab      	b.n	8000396 <MX_ADC1_Init+0xd2>
    Error_Handler();
 800043e:	f000 fd43 	bl	8000ec8 <Error_Handler>
 8000442:	e7b2      	b.n	80003aa <MX_ADC1_Init+0xe6>
    Error_Handler();
 8000444:	f000 fd40 	bl	8000ec8 <Error_Handler>
 8000448:	e7b9      	b.n	80003be <MX_ADC1_Init+0xfa>
    Error_Handler();
 800044a:	f000 fd3d 	bl	8000ec8 <Error_Handler>
 800044e:	e7c0      	b.n	80003d2 <MX_ADC1_Init+0x10e>
    Error_Handler();
 8000450:	f000 fd3a 	bl	8000ec8 <Error_Handler>
 8000454:	e7c6      	b.n	80003e4 <MX_ADC1_Init+0x120>
    Error_Handler();
 8000456:	f000 fd37 	bl	8000ec8 <Error_Handler>
 800045a:	e7cc      	b.n	80003f6 <MX_ADC1_Init+0x132>
    Error_Handler();
 800045c:	f000 fd34 	bl	8000ec8 <Error_Handler>
}
 8000460:	e7d2      	b.n	8000408 <MX_ADC1_Init+0x144>
 8000462:	bf00      	nop
 8000464:	200001cc 	.word	0x200001cc
 8000468:	40012000 	.word	0x40012000
 800046c:	0f000001 	.word	0x0f000001

08000470 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	2300      	movs	r3, #0
 8000476:	9303      	str	r3, [sp, #12]
 8000478:	9304      	str	r3, [sp, #16]
 800047a:	9305      	str	r3, [sp, #20]
 800047c:	9306      	str	r3, [sp, #24]
 800047e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000480:	6802      	ldr	r2, [r0, #0]
 8000482:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000486:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 800048a:	429a      	cmp	r2, r3
 800048c:	d001      	beq.n	8000492 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800048e:	b009      	add	sp, #36	@ 0x24
 8000490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000492:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000494:	2500      	movs	r5, #0
 8000496:	9500      	str	r5, [sp, #0]
 8000498:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 800049c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800049e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80004a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80004a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004a6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80004aa:	9200      	str	r2, [sp, #0]
 80004ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	9501      	str	r5, [sp, #4]
 80004b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004b2:	f042 0204 	orr.w	r2, r2, #4
 80004b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80004b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004ba:	f002 0204 	and.w	r2, r2, #4
 80004be:	9201      	str	r2, [sp, #4]
 80004c0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	9502      	str	r5, [sp, #8]
 80004c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004c6:	f042 0201 	orr.w	r2, r2, #1
 80004ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80004cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	9302      	str	r3, [sp, #8]
 80004d4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD_INPUT1_PIN_Pin|AD_INPUT2_PIN_Pin|AD_INPUT3_PIN_Pin|AD_INPUT4_PIN_Pin
 80004d6:	231f      	movs	r3, #31
 80004d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004da:	2703      	movs	r7, #3
 80004dc:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004de:	ae03      	add	r6, sp, #12
 80004e0:	4631      	mov	r1, r6
 80004e2:	4814      	ldr	r0, [pc, #80]	@ (8000534 <HAL_ADC_MspInit+0xc4>)
 80004e4:	f001 fe6a 	bl	80021bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ETB1_SENSE1_Pin|ETB1_SENSE2_Pin|ETB2_SENSE1_Pin|ETB2_SENSE2_Pin
 80004e8:	23ff      	movs	r3, #255	@ 0xff
 80004ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ec:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	4631      	mov	r1, r6
 80004f2:	4811      	ldr	r0, [pc, #68]	@ (8000538 <HAL_ADC_MspInit+0xc8>)
 80004f4:	f001 fe62 	bl	80021bc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80004f8:	4810      	ldr	r0, [pc, #64]	@ (800053c <HAL_ADC_MspInit+0xcc>)
 80004fa:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <HAL_ADC_MspInit+0xd0>)
 80004fc:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80004fe:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000500:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000502:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000504:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000508:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800050a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800050e:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000510:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000514:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000516:	61c5      	str	r5, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000518:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800051c:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800051e:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000520:	f001 fcf8 	bl	8001f14 <HAL_DMA_Init>
 8000524:	b918      	cbnz	r0, 800052e <HAL_ADC_MspInit+0xbe>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000526:	4b05      	ldr	r3, [pc, #20]	@ (800053c <HAL_ADC_MspInit+0xcc>)
 8000528:	63a3      	str	r3, [r4, #56]	@ 0x38
 800052a:	639c      	str	r4, [r3, #56]	@ 0x38
}
 800052c:	e7af      	b.n	800048e <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 800052e:	f000 fccb 	bl	8000ec8 <Error_Handler>
 8000532:	e7f8      	b.n	8000526 <HAL_ADC_MspInit+0xb6>
 8000534:	40020800 	.word	0x40020800
 8000538:	40020000 	.word	0x40020000
 800053c:	2000016c 	.word	0x2000016c
 8000540:	40026410 	.word	0x40026410

08000544 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8000544:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8000546:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800054a:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800054c:	f005 f89e 	bl	800568c <xTaskGetSchedulerState>
 8000550:	2801      	cmp	r0, #1
 8000552:	d100      	bne.n	8000556 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8000554:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8000556:	f000 fe05 	bl	8001164 <xPortSysTickHandler>
}
 800055a:	e7fb      	b.n	8000554 <SysTick_Handler+0x10>

0800055c <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800055c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8000560:	b92b      	cbnz	r3, 800056e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8000562:	4b06      	ldr	r3, [pc, #24]	@ (800057c <osKernelInitialize+0x20>)
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	b928      	cbnz	r0, 8000574 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8000568:	2201      	movs	r2, #1
 800056a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800056c:	4770      	bx	lr
    stat = osErrorISR;
 800056e:	f06f 0005 	mvn.w	r0, #5
 8000572:	4770      	bx	lr
    } else {
      stat = osError;
 8000574:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	200008cc 	.word	0x200008cc

08000580 <osKernelStart>:
 8000580:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8000584:	b973      	cbnz	r3, 80005a4 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <osKernelStart+0x30>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d10d      	bne.n	80005aa <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800058e:	b510      	push	{r4, lr}
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000590:	2400      	movs	r4, #0
 8000592:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <osKernelStart+0x34>)
 8000594:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <osKernelStart+0x30>)
 8000598:	2202      	movs	r2, #2
 800059a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800059c:	f004 fdd2 	bl	8005144 <vTaskStartScheduler>
      stat = osOK;
 80005a0:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80005a2:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80005a4:	f06f 0005 	mvn.w	r0, #5
 80005a8:	4770      	bx	lr
      stat = osError;
 80005aa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80005ae:	4770      	bx	lr
 80005b0:	200008cc 	.word	0x200008cc
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80005bc:	2400      	movs	r4, #0
 80005be:	9405      	str	r4, [sp, #20]
 80005c0:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80005c4:	bb04      	cbnz	r4, 8000608 <osThreadNew+0x50>
 80005c6:	b1f8      	cbz	r0, 8000608 <osThreadNew+0x50>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80005c8:	2a00      	cmp	r2, #0
 80005ca:	d034      	beq.n	8000636 <osThreadNew+0x7e>
      if (attr->name != NULL) {
 80005cc:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80005ce:	6993      	ldr	r3, [r2, #24]
 80005d0:	b12b      	cbz	r3, 80005de <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 80005d2:	461e      	mov	r6, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80005d4:	3b01      	subs	r3, #1
 80005d6:	2b37      	cmp	r3, #55	@ 0x37
 80005d8:	d902      	bls.n	80005e0 <osThreadNew+0x28>
        return (NULL);
 80005da:	2000      	movs	r0, #0
 80005dc:	e015      	b.n	800060a <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;
 80005de:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80005e0:	6853      	ldr	r3, [r2, #4]
 80005e2:	f013 0f01 	tst.w	r3, #1
 80005e6:	d13f      	bne.n	8000668 <osThreadNew+0xb0>
      }

      if (attr->stack_size > 0U) {
 80005e8:	6954      	ldr	r4, [r2, #20]
 80005ea:	b184      	cbz	r4, 800060e <osThreadNew+0x56>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80005ec:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80005f0:	6893      	ldr	r3, [r2, #8]
 80005f2:	b12b      	cbz	r3, 8000600 <osThreadNew+0x48>
 80005f4:	68d7      	ldr	r7, [r2, #12]
 80005f6:	2f5b      	cmp	r7, #91	@ 0x5b
 80005f8:	d902      	bls.n	8000600 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80005fa:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80005fc:	b107      	cbz	r7, 8000600 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80005fe:	b984      	cbnz	r4, 8000622 <osThreadNew+0x6a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000600:	b143      	cbz	r3, 8000614 <osThreadNew+0x5c>
    mem  = -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8000606:	b30b      	cbz	r3, 800064c <osThreadNew+0x94>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8000608:	9805      	ldr	r0, [sp, #20]
}
 800060a:	b007      	add	sp, #28
 800060c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800060e:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000612:	e7ed      	b.n	80005f0 <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000614:	68d3      	ldr	r3, [r2, #12]
 8000616:	b9a3      	cbnz	r3, 8000642 <osThreadNew+0x8a>
 8000618:	6913      	ldr	r3, [r2, #16]
 800061a:	b1ab      	cbz	r3, 8000648 <osThreadNew+0x90>
    mem  = -1;
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	e7f1      	b.n	8000606 <osThreadNew+0x4e>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000622:	9302      	str	r3, [sp, #8]
 8000624:	9701      	str	r7, [sp, #4]
 8000626:	9600      	str	r6, [sp, #0]
 8000628:	460b      	mov	r3, r1
 800062a:	4662      	mov	r2, ip
 800062c:	4629      	mov	r1, r5
 800062e:	f004 fd1b 	bl	8005068 <xTaskCreateStatic>
 8000632:	9005      	str	r0, [sp, #20]
 8000634:	e7e8      	b.n	8000608 <osThreadNew+0x50>
    name = NULL;
 8000636:	4615      	mov	r5, r2
      mem = 0;
 8000638:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800063a:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 800063c:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000640:	e7e1      	b.n	8000606 <osThreadNew+0x4e>
    mem  = -1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	e7de      	b.n	8000606 <osThreadNew+0x4e>
          mem = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	e7dc      	b.n	8000606 <osThreadNew+0x4e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800064c:	ab05      	add	r3, sp, #20
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	9600      	str	r6, [sp, #0]
 8000652:	460b      	mov	r3, r1
 8000654:	fa1f f28c 	uxth.w	r2, ip
 8000658:	4629      	mov	r1, r5
 800065a:	f004 fd40 	bl	80050de <xTaskCreate>
 800065e:	2801      	cmp	r0, #1
 8000660:	d0d2      	beq.n	8000608 <osThreadNew+0x50>
            hTask = NULL;
 8000662:	2300      	movs	r3, #0
 8000664:	9305      	str	r3, [sp, #20]
 8000666:	e7cf      	b.n	8000608 <osThreadNew+0x50>
        return (NULL);
 8000668:	2000      	movs	r0, #0
 800066a:	e7ce      	b.n	800060a <osThreadNew+0x52>

0800066c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800066c:	b508      	push	{r3, lr}
 800066e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8000672:	b933      	cbnz	r3, 8000682 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8000674:	b908      	cbnz	r0, 800067a <osDelay+0xe>
    stat = osOK;
 8000676:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8000678:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800067a:	f004 fec5 	bl	8005408 <vTaskDelay>
    stat = osOK;
 800067e:	2000      	movs	r0, #0
 8000680:	e7fa      	b.n	8000678 <osDelay+0xc>
    stat = osErrorISR;
 8000682:	f06f 0005 	mvn.w	r0, #5
 8000686:	e7f7      	b.n	8000678 <osDelay+0xc>

08000688 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000688:	4b03      	ldr	r3, [pc, #12]	@ (8000698 <vApplicationGetIdleTaskMemory+0x10>)
 800068a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800068c:	4b03      	ldr	r3, [pc, #12]	@ (800069c <vApplicationGetIdleTaskMemory+0x14>)
 800068e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000690:	2380      	movs	r3, #128	@ 0x80
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000870 	.word	0x20000870
 800069c:	20000670 	.word	0x20000670

080006a0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80006a0:	4b03      	ldr	r3, [pc, #12]	@ (80006b0 <vApplicationGetTimerTaskMemory+0x10>)
 80006a2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80006a4:	4b03      	ldr	r3, [pc, #12]	@ (80006b4 <vApplicationGetTimerTaskMemory+0x14>)
 80006a6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80006a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ac:	6013      	str	r3, [r2, #0]
}
 80006ae:	4770      	bx	lr
 80006b0:	20000614 	.word	0x20000614
 80006b4:	20000214 	.word	0x20000214

080006b8 <controller_init>:
configuration_s configuration = {0};
engine_s engine = {0};


void controller_init()
{
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	b089      	sub	sp, #36	@ 0x24
    engine.total_revolutions = 0;
 80006bc:	4d16      	ldr	r5, [pc, #88]	@ (8000718 <controller_init+0x60>)
 80006be:	2200      	movs	r2, #0
 80006c0:	602a      	str	r2, [r5, #0]
    engine.crankshaft_angle = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	606b      	str	r3, [r5, #4]
    engine.camshaft_angle = 0;
 80006c6:	60ab      	str	r3, [r5, #8]
    engine.rpm = 0;
 80006c8:	60eb      	str	r3, [r5, #12]
    engine.cylinder_count = 4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	742b      	strb	r3, [r5, #16]
    engine.spinning_state = SS_STOPPED;
 80006ce:	746a      	strb	r2, [r5, #17]
    engine.firing_interval = 180.0f;
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <controller_init+0x64>)
 80006d2:	616b      	str	r3, [r5, #20]
    // engine.trigger = .....;

    configuration.ignition_dwell = (float_time_ms_t)3;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <controller_init+0x68>)
 80006d6:	4913      	ldr	r1, [pc, #76]	@ (8000724 <controller_init+0x6c>)
 80006d8:	6119      	str	r1, [r3, #16]
    configuration.ignition_mode = IM_WASTED_SPARK;
 80006da:	2103      	movs	r1, #3
 80006dc:	7359      	strb	r1, [r3, #13]

    configuration.trigger.filtering = TF_FILTERING_NONE;
 80006de:	709a      	strb	r2, [r3, #2]
    configuration.trigger.full_teeth = 60;
 80006e0:	223c      	movs	r2, #60	@ 0x3c
 80006e2:	70da      	strb	r2, [r3, #3]
    configuration.trigger.missing_teeth = 2;
 80006e4:	2202      	movs	r2, #2
 80006e6:	711a      	strb	r2, [r3, #4]
    configuration.cranking_rpm_threshold = 400;
 80006e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000728 <controller_init+0x70>)
 80006ea:	609a      	str	r2, [r3, #8]
    
    ignition_output_conf_s ignition_output_conf =
 80006ec:	46ec      	mov	ip, sp
 80006ee:	4c0f      	ldr	r4, [pc, #60]	@ (800072c <controller_init+0x74>)
 80006f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        .output[1] = {.gpio = IGNITION_OUTPUT2_GPIO_Port, .pin = IGNITION_OUTPUT2_Pin},
        .output[2] = {.gpio = IGNITION_OUTPUT3_GPIO_Port, .pin = IGNITION_OUTPUT3_Pin},
        .output[3] = {.gpio = IGNITION_OUTPUT4_GPIO_Port, .pin = IGNITION_OUTPUT4_Pin}
    };

    controller_timing_start(&htim2);
 80006fe:	480c      	ldr	r0, [pc, #48]	@ (8000730 <controller_init+0x78>)
 8000700:	f005 fc54 	bl	8005fac <controller_timing_start>
    trigger_init(&engine.trigger);
 8000704:	f105 0018 	add.w	r0, r5, #24
 8000708:	f005 fd46 	bl	8006198 <trigger_init>
    ignition_init(&ignition_output_conf);
 800070c:	4668      	mov	r0, sp
 800070e:	f000 fa61 	bl	8000bd4 <ignition_init>

    //HAL_FLASH_Unlock();
    //EE_Init();
}
 8000712:	b009      	add	sp, #36	@ 0x24
 8000714:	bd30      	pop	{r4, r5, pc}
 8000716:	bf00      	nop
 8000718:	200008d0 	.word	0x200008d0
 800071c:	43340000 	.word	0x43340000
 8000720:	2000090c 	.word	0x2000090c
 8000724:	40400000 	.word	0x40400000
 8000728:	43c80000 	.word	0x43c80000
 800072c:	08008674 	.word	0x08008674
 8000730:	20004bdc 	.word	0x20004bdc

08000734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000734:	b500      	push	{lr}
 8000736:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000738:	2200      	movs	r2, #0
 800073a:	9201      	str	r2, [sp, #4]
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_DMA_Init+0x30>)
 800073e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000740:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8000744:	6319      	str	r1, [r3, #48]	@ 0x30
 8000746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000750:	2105      	movs	r1, #5
 8000752:	2038      	movs	r0, #56	@ 0x38
 8000754:	f001 fb64 	bl	8001e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000758:	2038      	movs	r0, #56	@ 0x38
 800075a:	f001 fb71 	bl	8001e40 <HAL_NVIC_EnableIRQ>

}
 800075e:	b003      	add	sp, #12
 8000760:	f85d fb04 	ldr.w	pc, [sp], #4
 8000764:	40023800 	.word	0x40023800

08000768 <log_error>:
#include "error_handling.h"


void log_error(const char* message)
{
    if (message == NULL) return;
 8000768:	b1c0      	cbz	r0, 800079c <log_error+0x34>
{
 800076a:	b570      	push	{r4, r5, r6, lr}
 800076c:	b09a      	sub	sp, #104	@ 0x68
 800076e:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 8000770:	ac01      	add	r4, sp, #4
 8000772:	2564      	movs	r5, #100	@ 0x64
 8000774:	462a      	mov	r2, r5
 8000776:	2100      	movs	r1, #0
 8000778:	4620      	mov	r0, r4
 800077a:	f007 f96f 	bl	8007a5c <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Error: %s\n", message);
 800077e:	4633      	mov	r3, r6
 8000780:	4a07      	ldr	r2, [pc, #28]	@ (80007a0 <log_error+0x38>)
 8000782:	4629      	mov	r1, r5
 8000784:	4620      	mov	r0, r4
 8000786:	f007 f933 	bl	80079f0 <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 800078a:	4620      	mov	r0, r4
 800078c:	f7ff fd08 	bl	80001a0 <strlen>
 8000790:	b281      	uxth	r1, r0
 8000792:	4620      	mov	r0, r4
 8000794:	f006 f918 	bl	80069c8 <CDC_Transmit_FS>
}
 8000798:	b01a      	add	sp, #104	@ 0x68
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	08008694 	.word	0x08008694

080007a4 <log_warning>:

void log_warning(const char* message)
{
    if (message == NULL) return;
 80007a4:	b1c0      	cbz	r0, 80007d8 <log_warning+0x34>
{
 80007a6:	b570      	push	{r4, r5, r6, lr}
 80007a8:	b09a      	sub	sp, #104	@ 0x68
 80007aa:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 80007ac:	ac01      	add	r4, sp, #4
 80007ae:	2564      	movs	r5, #100	@ 0x64
 80007b0:	462a      	mov	r2, r5
 80007b2:	2100      	movs	r1, #0
 80007b4:	4620      	mov	r0, r4
 80007b6:	f007 f951 	bl	8007a5c <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Warning: %s\n", message);
 80007ba:	4633      	mov	r3, r6
 80007bc:	4a07      	ldr	r2, [pc, #28]	@ (80007dc <log_warning+0x38>)
 80007be:	4629      	mov	r1, r5
 80007c0:	4620      	mov	r0, r4
 80007c2:	f007 f915 	bl	80079f0 <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 80007c6:	4620      	mov	r0, r4
 80007c8:	f7ff fcea 	bl	80001a0 <strlen>
 80007cc:	b281      	uxth	r1, r0
 80007ce:	4620      	mov	r0, r4
 80007d0:	f006 f8fa 	bl	80069c8 <CDC_Transmit_FS>
 80007d4:	b01a      	add	sp, #104	@ 0x68
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	080086a0 	.word	0x080086a0

080007e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007e0:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007e2:	f005 fe23 	bl	800642c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  controller_init();
 80007e6:	f7ff ff67 	bl	80006b8 <controller_init>
  osDelay(100);
 80007ea:	2064      	movs	r0, #100	@ 0x64
 80007ec:	f7ff ff3e 	bl	800066c <osDelay>
  
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff ff3b 	bl	800066c <osDelay>
  for(;;)
 80007f6:	e7fb      	b.n	80007f0 <StartDefaultTask+0x10>

080007f8 <trigger_simulator_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_trigger_simulator_task */
void trigger_simulator_task(void *argument)
{
 80007f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN trigger_simulator_task */
  trigger_simulator_init(60, 2, trigger_tooth_handle);
 80007fa:	4a05      	ldr	r2, [pc, #20]	@ (8000810 <trigger_simulator_task+0x18>)
 80007fc:	2102      	movs	r1, #2
 80007fe:	203c      	movs	r0, #60	@ 0x3c
 8000800:	f005 fdb6 	bl	8006370 <trigger_simulator_init>
  /* Infinite loop */
  for(;;)
  {
    trigger_simulator_update(simulated_rpm);
 8000804:	4b03      	ldr	r3, [pc, #12]	@ (8000814 <trigger_simulator_task+0x1c>)
 8000806:	ed93 0a00 	vldr	s0, [r3]
 800080a:	f005 fdbf 	bl	800638c <trigger_simulator_update>
  for(;;)
 800080e:	e7f9      	b.n	8000804 <trigger_simulator_task+0xc>
 8000810:	080061ed 	.word	0x080061ed
 8000814:	20000000 	.word	0x20000000

08000818 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000818:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800081a:	4a07      	ldr	r2, [pc, #28]	@ (8000838 <MX_FREERTOS_Init+0x20>)
 800081c:	2100      	movs	r1, #0
 800081e:	4807      	ldr	r0, [pc, #28]	@ (800083c <MX_FREERTOS_Init+0x24>)
 8000820:	f7ff feca 	bl	80005b8 <osThreadNew>
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_FREERTOS_Init+0x28>)
 8000826:	6018      	str	r0, [r3, #0]
  trig_simHandle = osThreadNew(trigger_simulator_task, NULL, &trig_sim_attributes);
 8000828:	4a06      	ldr	r2, [pc, #24]	@ (8000844 <MX_FREERTOS_Init+0x2c>)
 800082a:	2100      	movs	r1, #0
 800082c:	4806      	ldr	r0, [pc, #24]	@ (8000848 <MX_FREERTOS_Init+0x30>)
 800082e:	f7ff fec3 	bl	80005b8 <osThreadNew>
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_FREERTOS_Init+0x34>)
 8000834:	6018      	str	r0, [r3, #0]
}
 8000836:	bd08      	pop	{r3, pc}
 8000838:	08008810 	.word	0x08008810
 800083c:	080007e1 	.word	0x080007e1
 8000840:	20000964 	.word	0x20000964
 8000844:	080087ec 	.word	0x080087ec
 8000848:	080007f9 	.word	0x080007f9
 800084c:	20000960 	.word	0x20000960

08000850 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000854:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	ad05      	add	r5, sp, #20
 8000858:	2400      	movs	r4, #0
 800085a:	9405      	str	r4, [sp, #20]
 800085c:	9406      	str	r4, [sp, #24]
 800085e:	9407      	str	r4, [sp, #28]
 8000860:	9408      	str	r4, [sp, #32]
 8000862:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000864:	9401      	str	r4, [sp, #4]
 8000866:	4b27      	ldr	r3, [pc, #156]	@ (8000904 <MX_GPIO_Init+0xb4>)
 8000868:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800086a:	f042 0204 	orr.w	r2, r2, #4
 800086e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000870:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000872:	f002 0204 	and.w	r2, r2, #4
 8000876:	9201      	str	r2, [sp, #4]
 8000878:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	9402      	str	r4, [sp, #8]
 800087c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800087e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000882:	631a      	str	r2, [r3, #48]	@ 0x30
 8000884:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000886:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800088a:	9202      	str	r2, [sp, #8]
 800088c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	9403      	str	r4, [sp, #12]
 8000890:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000892:	f042 0201 	orr.w	r2, r2, #1
 8000896:	631a      	str	r2, [r3, #48]	@ 0x30
 8000898:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800089a:	f002 0201 	and.w	r2, r2, #1
 800089e:	9203      	str	r2, [sp, #12]
 80008a0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	9404      	str	r4, [sp, #16]
 80008a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008a6:	f042 0202 	orr.w	r2, r2, #2
 80008aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	9304      	str	r3, [sp, #16]
 80008b4:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008b6:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 800090c <MX_GPIO_Init+0xbc>
 80008ba:	4622      	mov	r2, r4
 80008bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c0:	4640      	mov	r0, r8
 80008c2:	f001 fd66 	bl	8002392 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IGNITION_OUTPUT4_Pin|IGNITION_OUTPUT3_Pin|IGNITION_OUTPUT2_Pin|IGNITION_OUTPUT1_Pin, GPIO_PIN_RESET);
 80008c6:	4e10      	ldr	r6, [pc, #64]	@ (8000908 <MX_GPIO_Init+0xb8>)
 80008c8:	4622      	mov	r2, r4
 80008ca:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80008ce:	4630      	mov	r0, r6
 80008d0:	f001 fd5f 	bl	8002392 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2701      	movs	r7, #1
 80008dc:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008e2:	4629      	mov	r1, r5
 80008e4:	4640      	mov	r0, r8
 80008e6:	f001 fc69 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pins : IGNITION_OUTPUT4_Pin IGNITION_OUTPUT3_Pin IGNITION_OUTPUT2_Pin IGNITION_OUTPUT1_Pin */
  GPIO_InitStruct.Pin = IGNITION_OUTPUT4_Pin|IGNITION_OUTPUT3_Pin|IGNITION_OUTPUT2_Pin|IGNITION_OUTPUT1_Pin;
 80008ea:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80008ee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	4629      	mov	r1, r5
 80008f8:	4630      	mov	r0, r6
 80008fa:	f001 fc5f 	bl	80021bc <HAL_GPIO_Init>

}
 80008fe:	b00a      	add	sp, #40	@ 0x28
 8000900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400
 800090c:	40020800 	.word	0x40020800

08000910 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000910:	4a12      	ldr	r2, [pc, #72]	@ (800095c <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000912:	f012 0f07 	tst.w	r2, #7
 8000916:	d01e      	beq.n	8000956 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000918:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800091a:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800091e:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 8000922:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000924:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000926:	480e      	ldr	r0, [pc, #56]	@ (8000960 <prvHeapInit+0x50>)
 8000928:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800092a:	2100      	movs	r1, #0
 800092c:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800092e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8000930:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000932:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8000936:	480b      	ldr	r0, [pc, #44]	@ (8000964 <prvHeapInit+0x54>)
 8000938:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800093a:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800093c:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800093e:	1a99      	subs	r1, r3, r2
 8000940:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000942:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <prvHeapInit+0x58>)
 8000946:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <prvHeapInit+0x5c>)
 800094a:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800094c:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <prvHeapInit+0x60>)
 800094e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000952:	601a      	str	r2, [r3, #0]
}
 8000954:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000956:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800095a:	e7e4      	b.n	8000926 <prvHeapInit+0x16>
 800095c:	20000988 	.word	0x20000988
 8000960:	20000980 	.word	0x20000980
 8000964:	2000097c 	.word	0x2000097c
 8000968:	20000974 	.word	0x20000974
 800096c:	20000978 	.word	0x20000978
 8000970:	20000968 	.word	0x20000968

08000974 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000974:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <prvInsertBlockIntoFreeList+0x5c>)
 8000976:	461a      	mov	r2, r3
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4283      	cmp	r3, r0
 800097c:	d3fb      	bcc.n	8000976 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800097e:	6851      	ldr	r1, [r2, #4]
 8000980:	eb02 0c01 	add.w	ip, r2, r1
 8000984:	4584      	cmp	ip, r0
 8000986:	d009      	beq.n	800099c <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000988:	6841      	ldr	r1, [r0, #4]
 800098a:	eb00 0c01 	add.w	ip, r0, r1
 800098e:	4563      	cmp	r3, ip
 8000990:	d009      	beq.n	80009a6 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000992:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000994:	4290      	cmp	r0, r2
 8000996:	d019      	beq.n	80009cc <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000998:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800099a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800099c:	6840      	ldr	r0, [r0, #4]
 800099e:	4401      	add	r1, r0
 80009a0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80009a2:	4610      	mov	r0, r2
 80009a4:	e7f0      	b.n	8000988 <prvInsertBlockIntoFreeList+0x14>
{
 80009a6:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80009a8:	4c0a      	ldr	r4, [pc, #40]	@ (80009d4 <prvInsertBlockIntoFreeList+0x60>)
 80009aa:	6824      	ldr	r4, [r4, #0]
 80009ac:	42a3      	cmp	r3, r4
 80009ae:	d00b      	beq.n	80009c8 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	4419      	add	r1, r3
 80009b4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80009b6:	6813      	ldr	r3, [r2, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80009bc:	4290      	cmp	r0, r2
 80009be:	d000      	beq.n	80009c2 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80009c0:	6010      	str	r0, [r2, #0]
	}
}
 80009c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009c6:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80009c8:	6004      	str	r4, [r0, #0]
 80009ca:	e7f7      	b.n	80009bc <prvInsertBlockIntoFreeList+0x48>
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000980 	.word	0x20000980
 80009d4:	2000097c 	.word	0x2000097c

080009d8 <pvPortMalloc>:
{
 80009d8:	b538      	push	{r3, r4, r5, lr}
 80009da:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80009dc:	f004 fbfe 	bl	80051dc <vTaskSuspendAll>
		if( pxEnd == NULL )
 80009e0:	4b38      	ldr	r3, [pc, #224]	@ (8000ac4 <pvPortMalloc+0xec>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	b1b3      	cbz	r3, 8000a14 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009e6:	4b38      	ldr	r3, [pc, #224]	@ (8000ac8 <pvPortMalloc+0xf0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	421c      	tst	r4, r3
 80009ec:	d150      	bne.n	8000a90 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 80009ee:	2c00      	cmp	r4, #0
 80009f0:	d050      	beq.n	8000a94 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 80009f2:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80009f6:	f014 0f07 	tst.w	r4, #7
 80009fa:	d002      	beq.n	8000a02 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80009fc:	f022 0207 	bic.w	r2, r2, #7
 8000a00:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a02:	2a00      	cmp	r2, #0
 8000a04:	d055      	beq.n	8000ab2 <pvPortMalloc+0xda>
 8000a06:	4b31      	ldr	r3, [pc, #196]	@ (8000acc <pvPortMalloc+0xf4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d353      	bcc.n	8000ab6 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8000a0e:	4930      	ldr	r1, [pc, #192]	@ (8000ad0 <pvPortMalloc+0xf8>)
 8000a10:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a12:	e004      	b.n	8000a1e <pvPortMalloc+0x46>
			prvHeapInit();
 8000a14:	f7ff ff7c 	bl	8000910 <prvHeapInit>
 8000a18:	e7e5      	b.n	80009e6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8000a1a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a1c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a1e:	6863      	ldr	r3, [r4, #4]
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d202      	bcs.n	8000a2a <pvPortMalloc+0x52>
 8000a24:	6823      	ldr	r3, [r4, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1f7      	bne.n	8000a1a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8000a2a:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <pvPortMalloc+0xec>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	42a3      	cmp	r3, r4
 8000a30:	d043      	beq.n	8000aba <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a32:	680d      	ldr	r5, [r1, #0]
 8000a34:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a36:	6823      	ldr	r3, [r4, #0]
 8000a38:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a3a:	6863      	ldr	r3, [r4, #4]
 8000a3c:	1a9b      	subs	r3, r3, r2
 8000a3e:	2b10      	cmp	r3, #16
 8000a40:	d910      	bls.n	8000a64 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a42:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a44:	f010 0f07 	tst.w	r0, #7
 8000a48:	d008      	beq.n	8000a5c <pvPortMalloc+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a4e:	f383 8811 	msr	BASEPRI, r3
 8000a52:	f3bf 8f6f 	isb	sy
 8000a56:	f3bf 8f4f 	dsb	sy
 8000a5a:	e7fe      	b.n	8000a5a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000a5c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000a5e:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000a60:	f7ff ff88 	bl	8000974 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000a64:	6862      	ldr	r2, [r4, #4]
 8000a66:	4919      	ldr	r1, [pc, #100]	@ (8000acc <pvPortMalloc+0xf4>)
 8000a68:	680b      	ldr	r3, [r1, #0]
 8000a6a:	1a9b      	subs	r3, r3, r2
 8000a6c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000a6e:	4919      	ldr	r1, [pc, #100]	@ (8000ad4 <pvPortMalloc+0xfc>)
 8000a70:	6809      	ldr	r1, [r1, #0]
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d201      	bcs.n	8000a7a <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000a76:	4917      	ldr	r1, [pc, #92]	@ (8000ad4 <pvPortMalloc+0xfc>)
 8000a78:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <pvPortMalloc+0xf0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8000a86:	4a14      	ldr	r2, [pc, #80]	@ (8000ad8 <pvPortMalloc+0x100>)
 8000a88:	6813      	ldr	r3, [r2, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	6013      	str	r3, [r2, #0]
 8000a8e:	e002      	b.n	8000a96 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8000a90:	2500      	movs	r5, #0
 8000a92:	e000      	b.n	8000a96 <pvPortMalloc+0xbe>
 8000a94:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8000a96:	f004 fc3b 	bl	8005310 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a9a:	f015 0f07 	tst.w	r5, #7
 8000a9e:	d00e      	beq.n	8000abe <pvPortMalloc+0xe6>
 8000aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000aa4:	f383 8811 	msr	BASEPRI, r3
 8000aa8:	f3bf 8f6f 	isb	sy
 8000aac:	f3bf 8f4f 	dsb	sy
 8000ab0:	e7fe      	b.n	8000ab0 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8000ab2:	2500      	movs	r5, #0
 8000ab4:	e7ef      	b.n	8000a96 <pvPortMalloc+0xbe>
 8000ab6:	2500      	movs	r5, #0
 8000ab8:	e7ed      	b.n	8000a96 <pvPortMalloc+0xbe>
 8000aba:	2500      	movs	r5, #0
 8000abc:	e7eb      	b.n	8000a96 <pvPortMalloc+0xbe>
}
 8000abe:	4628      	mov	r0, r5
 8000ac0:	bd38      	pop	{r3, r4, r5, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000097c 	.word	0x2000097c
 8000ac8:	20000968 	.word	0x20000968
 8000acc:	20000978 	.word	0x20000978
 8000ad0:	20000980 	.word	0x20000980
 8000ad4:	20000974 	.word	0x20000974
 8000ad8:	20000970 	.word	0x20000970

08000adc <vPortFree>:
	if( pv != NULL )
 8000adc:	2800      	cmp	r0, #0
 8000ade:	d034      	beq.n	8000b4a <vPortFree+0x6e>
{
 8000ae0:	b538      	push	{r3, r4, r5, lr}
 8000ae2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8000ae4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000ae8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8000aec:	4a17      	ldr	r2, [pc, #92]	@ (8000b4c <vPortFree+0x70>)
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	4213      	tst	r3, r2
 8000af2:	d108      	bne.n	8000b06 <vPortFree+0x2a>
 8000af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000af8:	f383 8811 	msr	BASEPRI, r3
 8000afc:	f3bf 8f6f 	isb	sy
 8000b00:	f3bf 8f4f 	dsb	sy
 8000b04:	e7fe      	b.n	8000b04 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000b06:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8000b0a:	b141      	cbz	r1, 8000b1e <vPortFree+0x42>
 8000b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b10:	f383 8811 	msr	BASEPRI, r3
 8000b14:	f3bf 8f6f 	isb	sy
 8000b18:	f3bf 8f4f 	dsb	sy
 8000b1c:	e7fe      	b.n	8000b1c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000b1e:	ea23 0302 	bic.w	r3, r3, r2
 8000b22:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8000b26:	f004 fb59 	bl	80051dc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000b2a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8000b2e:	4a08      	ldr	r2, [pc, #32]	@ (8000b50 <vPortFree+0x74>)
 8000b30:	6813      	ldr	r3, [r2, #0]
 8000b32:	440b      	add	r3, r1
 8000b34:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000b36:	4628      	mov	r0, r5
 8000b38:	f7ff ff1c 	bl	8000974 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000b3c:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <vPortFree+0x78>)
 8000b3e:	6813      	ldr	r3, [r2, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8000b44:	f004 fbe4 	bl	8005310 <xTaskResumeAll>
}
 8000b48:	bd38      	pop	{r3, r4, r5, pc}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000968 	.word	0x20000968
 8000b50:	20000978 	.word	0x20000978
 8000b54:	2000096c 	.word	0x2000096c

08000b58 <ignition_coil_begin_charge>:
 * 
 * @param coil_index The index of the coil to be charged.
 */
void ignition_coil_begin_charge(void *arg)
{
    if (arg == NULL)
 8000b58:	b198      	cbz	r0, 8000b82 <ignition_coil_begin_charge+0x2a>
{
 8000b5a:	b508      	push	{r3, lr}
    {
        return;
    }
    uint8_t coil_index = *(uint8_t*)arg;
 8000b5c:	7803      	ldrb	r3, [r0, #0]

    if (coil_index > IGNITION_MAX_OUTPUTS - 1)
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	d80b      	bhi.n	8000b7a <ignition_coil_begin_charge+0x22>
    {
        log_error("Unkown ignition output");
        return;
    }
    ignition_coil_state[coil_index] = IGNITION_COIL_STATE_CHARGING;
 8000b62:	2201      	movs	r2, #1
 8000b64:	4907      	ldr	r1, [pc, #28]	@ (8000b84 <ignition_coil_begin_charge+0x2c>)
 8000b66:	54ca      	strb	r2, [r1, r3]
    HAL_GPIO_WritePin(ignition_outputs[coil_index].gpio, ignition_outputs[coil_index].pin, GPIO_PIN_SET);
 8000b68:	4807      	ldr	r0, [pc, #28]	@ (8000b88 <ignition_coil_begin_charge+0x30>)
 8000b6a:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
 8000b6e:	8889      	ldrh	r1, [r1, #4]
 8000b70:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 8000b74:	f001 fc0d 	bl	8002392 <HAL_GPIO_WritePin>
}
 8000b78:	bd08      	pop	{r3, pc}
        log_error("Unkown ignition output");
 8000b7a:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <ignition_coil_begin_charge+0x34>)
 8000b7c:	f7ff fdf4 	bl	8000768 <log_error>
        return;
 8000b80:	e7fa      	b.n	8000b78 <ignition_coil_begin_charge+0x20>
 8000b82:	4770      	bx	lr
 8000b84:	20004590 	.word	0x20004590
 8000b88:	20004594 	.word	0x20004594
 8000b8c:	080086c8 	.word	0x080086c8

08000b90 <ignition_coil_fire_spark>:
 * 
 * @param coil_index The index of the coil to fire the spark from.
 */
void ignition_coil_fire_spark(void *arg)
{
    if (arg == NULL)
 8000b90:	b1b0      	cbz	r0, 8000bc0 <ignition_coil_fire_spark+0x30>
{
 8000b92:	b510      	push	{r4, lr}
    {
        return;
    }
    
    uint8_t coil_index = *(uint8_t*)arg;
 8000b94:	7803      	ldrb	r3, [r0, #0]
    if (coil_index > IGNITION_MAX_OUTPUTS - 1)
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d80e      	bhi.n	8000bb8 <ignition_coil_fire_spark+0x28>
    {
        log_error("Unkown ignition output");
        return;
    }
    ignition_coil_state[coil_index] = IGNITION_COIL_STATE_NOT_CHARGING;
 8000b9a:	2400      	movs	r4, #0
 8000b9c:	4a09      	ldr	r2, [pc, #36]	@ (8000bc4 <ignition_coil_fire_spark+0x34>)
 8000b9e:	54d4      	strb	r4, [r2, r3]
    HAL_GPIO_WritePin(ignition_outputs[coil_index].gpio, ignition_outputs[coil_index].pin, GPIO_PIN_RESET);
 8000ba0:	4809      	ldr	r0, [pc, #36]	@ (8000bc8 <ignition_coil_fire_spark+0x38>)
 8000ba2:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
 8000ba6:	4622      	mov	r2, r4
 8000ba8:	8889      	ldrh	r1, [r1, #4]
 8000baa:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 8000bae:	f001 fbf0 	bl	8002392 <HAL_GPIO_WritePin>
    spark_is_in_progress = false;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <ignition_coil_fire_spark+0x3c>)
 8000bb4:	701c      	strb	r4, [r3, #0]
}
 8000bb6:	bd10      	pop	{r4, pc}
        log_error("Unkown ignition output");
 8000bb8:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <ignition_coil_fire_spark+0x40>)
 8000bba:	f7ff fdd5 	bl	8000768 <log_error>
        return;
 8000bbe:	e7fa      	b.n	8000bb6 <ignition_coil_fire_spark+0x26>
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20004590 	.word	0x20004590
 8000bc8:	20004594 	.word	0x20004594
 8000bcc:	20004589 	.word	0x20004589
 8000bd0:	080086c8 	.word	0x080086c8

08000bd4 <ignition_init>:
{
 8000bd4:	b510      	push	{r4, lr}
    if (output_conf == NULL)
 8000bd6:	b190      	cbz	r0, 8000bfe <ignition_init+0x2a>
 8000bd8:	4601      	mov	r1, r0
    switch (configuration.firing_order)
 8000bda:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <ignition_init+0xa0>)
 8000bdc:	7b1b      	ldrb	r3, [r3, #12]
 8000bde:	b993      	cbnz	r3, 8000c06 <ignition_init+0x32>
            engine.cylinder_count = 4;
 8000be0:	4a25      	ldr	r2, [pc, #148]	@ (8000c78 <ignition_init+0xa4>)
 8000be2:	2004      	movs	r0, #4
 8000be4:	7410      	strb	r0, [r2, #16]
            ignition_order[0] = 1;
 8000be6:	4b25      	ldr	r3, [pc, #148]	@ (8000c7c <ignition_init+0xa8>)
 8000be8:	2401      	movs	r4, #1
 8000bea:	701c      	strb	r4, [r3, #0]
            ignition_order[1] = 3;
 8000bec:	2403      	movs	r4, #3
 8000bee:	705c      	strb	r4, [r3, #1]
            ignition_order[2] = 4;
 8000bf0:	7098      	strb	r0, [r3, #2]
            ignition_order[3] = 2;
 8000bf2:	2002      	movs	r0, #2
 8000bf4:	70d8      	strb	r0, [r3, #3]
    engine.firing_interval = (angle_t)720 / engine.cylinder_count;
 8000bf6:	4b22      	ldr	r3, [pc, #136]	@ (8000c80 <ignition_init+0xac>)
 8000bf8:	6153      	str	r3, [r2, #20]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e013      	b.n	8000c26 <ignition_init+0x52>
        log_error("ignition init failed. No output config");
 8000bfe:	4821      	ldr	r0, [pc, #132]	@ (8000c84 <ignition_init+0xb0>)
 8000c00:	f7ff fdb2 	bl	8000768 <log_error>
        return;
 8000c04:	e002      	b.n	8000c0c <ignition_init+0x38>
            log_error("ignition init failed. unkown firing order.");
 8000c06:	4820      	ldr	r0, [pc, #128]	@ (8000c88 <ignition_init+0xb4>)
 8000c08:	f7ff fdae 	bl	8000768 <log_error>
}
 8000c0c:	bd10      	pop	{r4, pc}
        ignition_outputs[i].gpio = output_conf->output[i].gpio;
 8000c0e:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8000c12:	4a1e      	ldr	r2, [pc, #120]	@ (8000c8c <ignition_init+0xb8>)
 8000c14:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
        ignition_outputs[i].pin = output_conf->output[i].pin;
 8000c18:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 8000c1c:	6840      	ldr	r0, [r0, #4]
 8000c1e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c22:	6050      	str	r0, [r2, #4]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8000c24:	3301      	adds	r3, #1
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d9f1      	bls.n	8000c0e <ignition_init+0x3a>
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8000c2a:	2400      	movs	r4, #0
 8000c2c:	e008      	b.n	8000c40 <ignition_init+0x6c>
        ignition_coil_state[i] = HAL_GPIO_ReadPin(ignition_outputs[i].gpio, ignition_outputs->pin);
 8000c2e:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <ignition_init+0xb8>)
 8000c30:	8899      	ldrh	r1, [r3, #4]
 8000c32:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8000c36:	f001 fba5 	bl	8002384 <HAL_GPIO_ReadPin>
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <ignition_init+0xbc>)
 8000c3c:	5518      	strb	r0, [r3, r4]
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8000c3e:	3401      	adds	r4, #1
 8000c40:	2c03      	cmp	r4, #3
 8000c42:	d9f4      	bls.n	8000c2e <ignition_init+0x5a>
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8000c44:	2400      	movs	r4, #0
 8000c46:	e007      	b.n	8000c58 <ignition_init+0x84>
        HAL_GPIO_WritePin(ignition_outputs[i].gpio, ignition_outputs->pin, GPIO_PIN_RESET);
 8000c48:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <ignition_init+0xb8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	8899      	ldrh	r1, [r3, #4]
 8000c4e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8000c52:	f001 fb9e 	bl	8002392 <HAL_GPIO_WritePin>
    for (size_t i = 0; i < IGNITION_MAX_OUTPUTS; i++)
 8000c56:	3401      	adds	r4, #1
 8000c58:	2c03      	cmp	r4, #3
 8000c5a:	d9f5      	bls.n	8000c48 <ignition_init+0x74>
    if (configuration.ignition_is_multi_spark && !IS_IN_RANGE(configuration.ignition_multi_spark_number_of_sparks, 0, IGNITION_MULTI_SPARK_MAX_SPARKS))
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <ignition_init+0xa0>)
 8000c5e:	7d1b      	ldrb	r3, [r3, #20]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d0d3      	beq.n	8000c0c <ignition_init+0x38>
 8000c64:	4b03      	ldr	r3, [pc, #12]	@ (8000c74 <ignition_init+0xa0>)
 8000c66:	7d5b      	ldrb	r3, [r3, #21]
 8000c68:	2b08      	cmp	r3, #8
 8000c6a:	d9cf      	bls.n	8000c0c <ignition_init+0x38>
        log_warning("Multi spark is enabled but number of sparks are 0.");
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <ignition_init+0xc0>)
 8000c6e:	f7ff fd99 	bl	80007a4 <log_warning>
 8000c72:	e7cb      	b.n	8000c0c <ignition_init+0x38>
 8000c74:	2000090c 	.word	0x2000090c
 8000c78:	200008d0 	.word	0x200008d0
 8000c7c:	2000458c 	.word	0x2000458c
 8000c80:	43340000 	.word	0x43340000
 8000c84:	080086e0 	.word	0x080086e0
 8000c88:	08008708 	.word	0x08008708
 8000c8c:	20004594 	.word	0x20004594
 8000c90:	20004590 	.word	0x20004590
 8000c94:	08008734 	.word	0x08008734

08000c98 <ignition_trigger_event_handle>:
    if (configuration.ignition_mode == IM_NO_IGNITION)
 8000c98:	4b55      	ldr	r3, [pc, #340]	@ (8000df0 <ignition_trigger_event_handle+0x158>)
 8000c9a:	7b5b      	ldrb	r3, [r3, #13]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f000 80a5 	beq.w	8000dec <ignition_trigger_event_handle+0x154>
{
 8000ca2:	b530      	push	{r4, r5, lr}
 8000ca4:	b085      	sub	sp, #20
    if (!IS_IN_RANGE(configuration.ignition_dwell, IGNITION_MIN_DWELL_TIME_MS, IGNITION_MAX_DWELL_TIME_MS))
 8000ca6:	4b52      	ldr	r3, [pc, #328]	@ (8000df0 <ignition_trigger_event_handle+0x158>)
 8000ca8:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb8:	f2c0 808d 	blt.w	8000dd6 <ignition_trigger_event_handle+0x13e>
 8000cbc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc8:	f200 8085 	bhi.w	8000dd6 <ignition_trigger_event_handle+0x13e>
    uint8_t phase = (uint8_t)(crankshaft_angle / engine.firing_interval);
 8000ccc:	4b49      	ldr	r3, [pc, #292]	@ (8000df4 <ignition_trigger_event_handle+0x15c>)
 8000cce:	ed93 7a05 	vldr	s14, [r3, #20]
 8000cd2:	eec0 6a07 	vdiv.f32	s13, s0, s14
 8000cd6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8000cda:	edcd 6a01 	vstr	s13, [sp, #4]
 8000cde:	f89d 3004 	ldrb.w	r3, [sp, #4]
    volatile angle_t next_spark_angle = phase * engine.firing_interval - spark_advance + engine.firing_interval;
 8000ce2:	ee06 3a90 	vmov	s13, r3
 8000ce6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000cea:	ee66 6a87 	vmul.f32	s13, s13, s14
 8000cee:	eeb3 6a0e 	vmov.f32	s12, #62	@ 0x41f00000  30.0
 8000cf2:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8000cf6:	ee37 7a26 	vadd.f32	s14, s14, s13
 8000cfa:	ed8d 7a03 	vstr	s14, [sp, #12]
    volatile angle_t next_dwell_angle = next_spark_angle - (float)configuration.ignition_dwell * (float)1000 * degrees_per_microsecond(rpm);
 8000cfe:	ed9d 7a03 	vldr	s14, [sp, #12]
 8000d02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8000df8 <ignition_trigger_event_handle+0x160>
 8000d06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 * @brief Function to calculate the degrees the engine turns in one microsecond.
 * @note Returns 0 if rpm is 0.
 */
static inline angle_t degrees_per_microsecond(rpm_t rpm)
{
    if (rpm == 0)
 8000d0a:	eef5 0a40 	vcmp.f32	s1, #0.0
 8000d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d12:	d065      	beq.n	8000de0 <ignition_trigger_event_handle+0x148>
    {
        return 0.0f;
    }
    return (angle_t)(rpm * 360.0f) / (60.0f * 1e6f);
 8000d14:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8000dfc <ignition_trigger_event_handle+0x164>
 8000d18:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8000d1c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8000e00 <ignition_trigger_event_handle+0x168>
 8000d20:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 8000d24:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d2c:	edcd 7a02 	vstr	s15, [sp, #8]
    next_firing_cylinder_index = ignition_order[phase] - 1;
 8000d30:	4a34      	ldr	r2, [pc, #208]	@ (8000e04 <ignition_trigger_event_handle+0x16c>)
 8000d32:	5cd3      	ldrb	r3, [r2, r3]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	4a34      	ldr	r2, [pc, #208]	@ (8000e08 <ignition_trigger_event_handle+0x170>)
 8000d38:	7013      	strb	r3, [r2, #0]
    if ((next_dwell_angle - crankshaft_angle) < 10 && !spark_is_in_progress && (next_dwell_angle - crankshaft_angle) > 0)
 8000d3a:	eddd 7a02 	vldr	s15, [sp, #8]
 8000d3e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8000d42:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4e:	d545      	bpl.n	8000ddc <ignition_trigger_event_handle+0x144>
 8000d50:	4b2e      	ldr	r3, [pc, #184]	@ (8000e0c <ignition_trigger_event_handle+0x174>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d141      	bne.n	8000ddc <ignition_trigger_event_handle+0x144>
 8000d58:	eddd 7a02 	vldr	s15, [sp, #8]
 8000d5c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8000d60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d68:	dd38      	ble.n	8000ddc <ignition_trigger_event_handle+0x144>
        spark_is_in_progress = true;
 8000d6a:	4b28      	ldr	r3, [pc, #160]	@ (8000e0c <ignition_trigger_event_handle+0x174>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
        time_us_t dwell_start_time_us = current_time_us + (time_us_t)((next_dwell_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 8000d70:	ed9d 7a02 	vldr	s14, [sp, #8]
 8000d74:	ee37 7a40 	vsub.f32	s14, s14, s0
    if (rpm == 0)
 8000d78:	eef5 0a40 	vcmp.f32	s1, #0.0
 8000d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d80:	d031      	beq.n	8000de6 <ignition_trigger_event_handle+0x14e>
    return (time_us_t) 60.0f * 1e6f / (rpm * 360.0f);
 8000d82:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8000dfc <ignition_trigger_event_handle+0x164>
 8000d86:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8000d8a:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000e00 <ignition_trigger_event_handle+0x168>
 8000d8e:	eec6 7aa0 	vdiv.f32	s15, s13, s1
 8000d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d9e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
        time_us_t spark_start_time_us = current_time_us + (time_us_t)((next_spark_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 8000da2:	eddd 6a03 	vldr	s13, [sp, #12]
 8000da6:	ee76 6ac0 	vsub.f32	s13, s13, s0
 8000daa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000db2:	ee17 4a90 	vmov	r4, s15
 8000db6:	4404      	add	r4, r0
        scheduler_schedule_event_with_arg(dwell_start_time_us, ignition_coil_begin_charge, (void*)&next_firing_cylinder_index);
 8000db8:	4d13      	ldr	r5, [pc, #76]	@ (8000e08 <ignition_trigger_event_handle+0x170>)
 8000dba:	462a      	mov	r2, r5
 8000dbc:	4914      	ldr	r1, [pc, #80]	@ (8000e10 <ignition_trigger_event_handle+0x178>)
 8000dbe:	ee17 3a10 	vmov	r3, s14
 8000dc2:	4403      	add	r3, r0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f005 f9a1 	bl	800610c <scheduler_schedule_event_with_arg>
        scheduler_schedule_event_with_arg(spark_start_time_us, ignition_coil_fire_spark, (void*)&next_firing_cylinder_index);
 8000dca:	462a      	mov	r2, r5
 8000dcc:	4911      	ldr	r1, [pc, #68]	@ (8000e14 <ignition_trigger_event_handle+0x17c>)
 8000dce:	4620      	mov	r0, r4
 8000dd0:	f005 f99c 	bl	800610c <scheduler_schedule_event_with_arg>
 8000dd4:	e002      	b.n	8000ddc <ignition_trigger_event_handle+0x144>
        log_error("ignition dwell out of bounds.");
 8000dd6:	4810      	ldr	r0, [pc, #64]	@ (8000e18 <ignition_trigger_event_handle+0x180>)
 8000dd8:	f7ff fcc6 	bl	8000768 <log_error>
}
 8000ddc:	b005      	add	sp, #20
 8000dde:	bd30      	pop	{r4, r5, pc}
        return 0.0f;
 8000de0:	ed9f 6a0e 	vldr	s12, [pc, #56]	@ 8000e1c <ignition_trigger_event_handle+0x184>
 8000de4:	e79e      	b.n	8000d24 <ignition_trigger_event_handle+0x8c>
        return 0;
 8000de6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8000e20 <ignition_trigger_event_handle+0x188>
 8000dea:	e7d4      	b.n	8000d96 <ignition_trigger_event_handle+0xfe>
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	2000090c 	.word	0x2000090c
 8000df4:	200008d0 	.word	0x200008d0
 8000df8:	447a0000 	.word	0x447a0000
 8000dfc:	43b40000 	.word	0x43b40000
 8000e00:	4c64e1c0 	.word	0x4c64e1c0
 8000e04:	2000458c 	.word	0x2000458c
 8000e08:	20004588 	.word	0x20004588
 8000e0c:	20004589 	.word	0x20004589
 8000e10:	08000b59 	.word	0x08000b59
 8000e14:	08000b91 	.word	0x08000b91
 8000e18:	08008768 	.word	0x08008768
	...

08000e24 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e24:	f100 0308 	add.w	r3, r0, #8
 8000e28:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e30:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e32:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000e38:	4770      	bx	lr

08000e3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000e3e:	4770      	bx	lr

08000e40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000e40:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000e42:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000e48:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000e4a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000e4c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000e4e:	6803      	ldr	r3, [r0, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	6003      	str	r3, [r0, #0]
}
 8000e54:	4770      	bx	lr

08000e56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000e56:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000e58:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000e5a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000e5e:	d011      	beq.n	8000e84 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000e60:	f100 0308 	add.w	r3, r0, #8
 8000e64:	461c      	mov	r4, r3
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	42aa      	cmp	r2, r5
 8000e6c:	d9fa      	bls.n	8000e64 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000e6e:	6863      	ldr	r3, [r4, #4]
 8000e70:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000e72:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000e74:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000e76:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000e78:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000e7a:	6803      	ldr	r3, [r0, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	6003      	str	r3, [r0, #0]
}
 8000e80:	bc30      	pop	{r4, r5}
 8000e82:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8000e84:	6904      	ldr	r4, [r0, #16]
 8000e86:	e7f2      	b.n	8000e6e <vListInsert+0x18>

08000e88 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000e88:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000e8a:	6841      	ldr	r1, [r0, #4]
 8000e8c:	6882      	ldr	r2, [r0, #8]
 8000e8e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000e90:	6841      	ldr	r1, [r0, #4]
 8000e92:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	4282      	cmp	r2, r0
 8000e98:	d006      	beq.n	8000ea8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	3a01      	subs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000ea4:	6818      	ldr	r0, [r3, #0]
}
 8000ea6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000ea8:	6882      	ldr	r2, [r0, #8]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	e7f5      	b.n	8000e9a <uxListRemove+0x12>
	...

08000eb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 8000eb2:	6802      	ldr	r2, [r0, #0]
 8000eb4:	4b03      	ldr	r3, [pc, #12]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d000      	beq.n	8000ebc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eba:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000ebc:	f000 fda6 	bl	8001a0c <HAL_IncTick>
}
 8000ec0:	e7fb      	b.n	8000eba <HAL_TIM_PeriodElapsedCallback+0xa>
 8000ec2:	bf00      	nop
 8000ec4:	40014800 	.word	0x40014800

08000ec8 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eca:	e7fe      	b.n	8000eca <Error_Handler+0x2>

08000ecc <SystemClock_Config>:
{
 8000ecc:	b510      	push	{r4, lr}
 8000ece:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed0:	ac08      	add	r4, sp, #32
 8000ed2:	2230      	movs	r2, #48	@ 0x30
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f006 fdc0 	bl	8007a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	2300      	movs	r3, #0
 8000ede:	9303      	str	r3, [sp, #12]
 8000ee0:	9304      	str	r3, [sp, #16]
 8000ee2:	9305      	str	r3, [sp, #20]
 8000ee4:	9306      	str	r3, [sp, #24]
 8000ee6:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee8:	9301      	str	r3, [sp, #4]
 8000eea:	4a21      	ldr	r2, [pc, #132]	@ (8000f70 <SystemClock_Config+0xa4>)
 8000eec:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000eee:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000ef2:	6411      	str	r1, [r2, #64]	@ 0x40
 8000ef4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000ef6:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000efa:	9201      	str	r2, [sp, #4]
 8000efc:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	4a1c      	ldr	r2, [pc, #112]	@ (8000f74 <SystemClock_Config+0xa8>)
 8000f02:	6813      	ldr	r3, [r2, #0]
 8000f04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	6813      	ldr	r3, [r2, #0]
 8000f10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f20:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f22:	2302      	movs	r3, #2
 8000f24:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f2a:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f2c:	2319      	movs	r3, #25
 8000f2e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f30:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f34:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f36:	2304      	movs	r3, #4
 8000f38:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f002 f88c 	bl	800305c <HAL_RCC_OscConfig>
 8000f44:	b978      	cbnz	r0, 8000f66 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f46:	230f      	movs	r3, #15
 8000f48:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f56:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f58:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f5a:	a803      	add	r0, sp, #12
 8000f5c:	f002 face 	bl	80034fc <HAL_RCC_ClockConfig>
 8000f60:	b918      	cbnz	r0, 8000f6a <SystemClock_Config+0x9e>
}
 8000f62:	b014      	add	sp, #80	@ 0x50
 8000f64:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f66:	f7ff ffaf 	bl	8000ec8 <Error_Handler>
    Error_Handler();
 8000f6a:	f7ff ffad 	bl	8000ec8 <Error_Handler>
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40007000 	.word	0x40007000

08000f78 <main>:
{
 8000f78:	b508      	push	{r3, lr}
  HAL_Init();
 8000f7a:	f000 fd2d 	bl	80019d8 <HAL_Init>
  SystemClock_Config();
 8000f7e:	f7ff ffa5 	bl	8000ecc <SystemClock_Config>
  MX_GPIO_Init();
 8000f82:	f7ff fc65 	bl	8000850 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f86:	f7ff fbd5 	bl	8000734 <MX_DMA_Init>
  MX_TIM5_Init();
 8000f8a:	f004 fc29 	bl	80057e0 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000f8e:	f004 fd87 	bl	8005aa0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000f92:	f7ff f997 	bl	80002c4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f96:	f004 fd0b 	bl	80059b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f9a:	f004 fbcf 	bl	800573c <MX_TIM2_Init>
  osKernelInitialize();
 8000f9e:	f7ff fadd 	bl	800055c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000fa2:	f7ff fc39 	bl	8000818 <MX_FREERTOS_Init>
  osKernelStart();
 8000fa6:	f7ff faeb 	bl	8000580 <osKernelStart>
  while (1)
 8000faa:	e7fe      	b.n	8000faa <main+0x32>

08000fac <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000fac:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <prvTaskExitError+0x3c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fba:	d008      	beq.n	8000fce <prvTaskExitError+0x22>
 8000fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fc0:	f383 8811 	msr	BASEPRI, r3
 8000fc4:	f3bf 8f6f 	isb	sy
 8000fc8:	f3bf 8f4f 	dsb	sy
 8000fcc:	e7fe      	b.n	8000fcc <prvTaskExitError+0x20>
 8000fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fd2:	f383 8811 	msr	BASEPRI, r3
 8000fd6:	f3bf 8f6f 	isb	sy
 8000fda:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000fde:	9b01      	ldr	r3, [sp, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0fc      	beq.n	8000fde <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000fe4:	b002      	add	sp, #8
 8000fe6:	4770      	bx	lr
 8000fe8:	20000004 	.word	0x20000004

08000fec <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8000fec:	4808      	ldr	r0, [pc, #32]	@ (8001010 <prvPortStartFirstTask+0x24>)
 8000fee:	6800      	ldr	r0, [r0, #0]
 8000ff0:	6800      	ldr	r0, [r0, #0]
 8000ff2:	f380 8808 	msr	MSP, r0
 8000ff6:	f04f 0000 	mov.w	r0, #0
 8000ffa:	f380 8814 	msr	CONTROL, r0
 8000ffe:	b662      	cpsie	i
 8001000:	b661      	cpsie	f
 8001002:	f3bf 8f4f 	dsb	sy
 8001006:	f3bf 8f6f 	isb	sy
 800100a:	df00      	svc	0
 800100c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800100e:	0000      	.short	0x0000
 8001010:	e000ed08 	.word	0xe000ed08

08001014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001014:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8001024 <vPortEnableVFP+0x10>
 8001018:	6801      	ldr	r1, [r0, #0]
 800101a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800101e:	6001      	str	r1, [r0, #0]
 8001020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001022:	0000      	.short	0x0000
 8001024:	e000ed88 	.word	0xe000ed88

08001028 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001028:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800102c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001030:	f021 0101 	bic.w	r1, r1, #1
 8001034:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <pxPortInitialiseStack+0x28>)
 800103a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800103e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001042:	f06f 0302 	mvn.w	r3, #2
 8001046:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800104a:	3844      	subs	r0, #68	@ 0x44
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	08000fad 	.word	0x08000fad
	...

08001060 <SVC_Handler>:
	__asm volatile (
 8001060:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <pxCurrentTCBConst2>)
 8001062:	6819      	ldr	r1, [r3, #0]
 8001064:	6808      	ldr	r0, [r1, #0]
 8001066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800106a:	f380 8809 	msr	PSP, r0
 800106e:	f3bf 8f6f 	isb	sy
 8001072:	f04f 0000 	mov.w	r0, #0
 8001076:	f380 8811 	msr	BASEPRI, r0
 800107a:	4770      	bx	lr
 800107c:	f3af 8000 	nop.w

08001080 <pxCurrentTCBConst2>:
 8001080:	20004b48 	.word	0x20004b48

08001084 <vPortEnterCritical>:
 8001084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001088:	f383 8811 	msr	BASEPRI, r3
 800108c:	f3bf 8f6f 	isb	sy
 8001090:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001094:	4a0b      	ldr	r2, [pc, #44]	@ (80010c4 <vPortEnterCritical+0x40>)
 8001096:	6813      	ldr	r3, [r2, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800109c:	2b01      	cmp	r3, #1
 800109e:	d000      	beq.n	80010a2 <vPortEnterCritical+0x1e>
}
 80010a0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80010a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80010a6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80010aa:	f013 0fff 	tst.w	r3, #255	@ 0xff
 80010ae:	d0f7      	beq.n	80010a0 <vPortEnterCritical+0x1c>
 80010b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010b4:	f383 8811 	msr	BASEPRI, r3
 80010b8:	f3bf 8f6f 	isb	sy
 80010bc:	f3bf 8f4f 	dsb	sy
 80010c0:	e7fe      	b.n	80010c0 <vPortEnterCritical+0x3c>
 80010c2:	bf00      	nop
 80010c4:	20000004 	.word	0x20000004

080010c8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <vPortExitCritical+0x28>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	b943      	cbnz	r3, 80010e0 <vPortExitCritical+0x18>
 80010ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d2:	f383 8811 	msr	BASEPRI, r3
 80010d6:	f3bf 8f6f 	isb	sy
 80010da:	f3bf 8f4f 	dsb	sy
 80010de:	e7fe      	b.n	80010de <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80010e0:	3b01      	subs	r3, #1
 80010e2:	4a03      	ldr	r2, [pc, #12]	@ (80010f0 <vPortExitCritical+0x28>)
 80010e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80010e6:	b90b      	cbnz	r3, 80010ec <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80010e8:	f383 8811 	msr	BASEPRI, r3
}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000004 	.word	0x20000004
	...

08001100 <PendSV_Handler>:
	__asm volatile
 8001100:	f3ef 8009 	mrs	r0, PSP
 8001104:	f3bf 8f6f 	isb	sy
 8001108:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <pxCurrentTCBConst>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	f01e 0f10 	tst.w	lr, #16
 8001110:	bf08      	it	eq
 8001112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800111a:	6010      	str	r0, [r2, #0]
 800111c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001120:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001124:	f380 8811 	msr	BASEPRI, r0
 8001128:	f3bf 8f4f 	dsb	sy
 800112c:	f3bf 8f6f 	isb	sy
 8001130:	f004 f990 	bl	8005454 <vTaskSwitchContext>
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	f380 8811 	msr	BASEPRI, r0
 800113c:	bc09      	pop	{r0, r3}
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	6808      	ldr	r0, [r1, #0]
 8001142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001146:	f01e 0f10 	tst.w	lr, #16
 800114a:	bf08      	it	eq
 800114c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001150:	f380 8809 	msr	PSP, r0
 8001154:	f3bf 8f6f 	isb	sy
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	f3af 8000 	nop.w

08001160 <pxCurrentTCBConst>:
 8001160:	20004b48 	.word	0x20004b48

08001164 <xPortSysTickHandler>:
{
 8001164:	b508      	push	{r3, lr}
	__asm volatile
 8001166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800116a:	f383 8811 	msr	BASEPRI, r3
 800116e:	f3bf 8f6f 	isb	sy
 8001172:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001176:	f004 f83f 	bl	80051f8 <xTaskIncrementTick>
 800117a:	b128      	cbz	r0, 8001188 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800117c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001184:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8001188:	2300      	movs	r3, #0
 800118a:	f383 8811 	msr	BASEPRI, r3
}
 800118e:	bd08      	pop	{r3, pc}

08001190 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001190:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8001194:	2300      	movs	r3, #0
 8001196:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001198:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800119a:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <vPortSetupTimerInterrupt+0x20>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4905      	ldr	r1, [pc, #20]	@ (80011b4 <vPortSetupTimerInterrupt+0x24>)
 80011a0:	fba1 1303 	umull	r1, r3, r1, r3
 80011a4:	099b      	lsrs	r3, r3, #6
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80011aa:	2307      	movs	r3, #7
 80011ac:	6113      	str	r3, [r2, #16]
}
 80011ae:	4770      	bx	lr
 80011b0:	20000010 	.word	0x20000010
 80011b4:	10624dd3 	.word	0x10624dd3

080011b8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80011b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80011bc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80011c0:	4b3d      	ldr	r3, [pc, #244]	@ (80012b8 <xPortStartScheduler+0x100>)
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d01c      	beq.n	8001200 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80011c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80011ca:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80011ce:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <xPortStartScheduler+0x104>)
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d01e      	beq.n	8001212 <xPortStartScheduler+0x5a>
{
 80011d4:	b530      	push	{r4, r5, lr}
 80011d6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80011d8:	4b39      	ldr	r3, [pc, #228]	@ (80012c0 <xPortStartScheduler+0x108>)
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80011e0:	22ff      	movs	r2, #255	@ 0xff
 80011e2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80011ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80011f0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80011f4:	4a33      	ldr	r2, [pc, #204]	@ (80012c4 <xPortStartScheduler+0x10c>)
 80011f6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80011f8:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <xPortStartScheduler+0x110>)
 80011fa:	2207      	movs	r2, #7
 80011fc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80011fe:	e01b      	b.n	8001238 <xPortStartScheduler+0x80>
	__asm volatile
 8001200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001204:	f383 8811 	msr	BASEPRI, r3
 8001208:	f3bf 8f6f 	isb	sy
 800120c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001210:	e7fe      	b.n	8001210 <xPortStartScheduler+0x58>
 8001212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001216:	f383 8811 	msr	BASEPRI, r3
 800121a:	f3bf 8f6f 	isb	sy
 800121e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001222:	e7fe      	b.n	8001222 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8001224:	4a28      	ldr	r2, [pc, #160]	@ (80012c8 <xPortStartScheduler+0x110>)
 8001226:	6813      	ldr	r3, [r2, #0]
 8001228:	3b01      	subs	r3, #1
 800122a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800122c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001238:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800123c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001240:	d1f0      	bne.n	8001224 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001242:	4b21      	ldr	r3, [pc, #132]	@ (80012c8 <xPortStartScheduler+0x110>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b03      	cmp	r3, #3
 8001248:	d008      	beq.n	800125c <xPortStartScheduler+0xa4>
 800124a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800124e:	f383 8811 	msr	BASEPRI, r3
 8001252:	f3bf 8f6f 	isb	sy
 8001256:	f3bf 8f4f 	dsb	sy
 800125a:	e7fe      	b.n	800125a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	4a1a      	ldr	r2, [pc, #104]	@ (80012c8 <xPortStartScheduler+0x110>)
 8001260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001262:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001266:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001268:	9b01      	ldr	r3, [sp, #4]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4a14      	ldr	r2, [pc, #80]	@ (80012c0 <xPortStartScheduler+0x108>)
 800126e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001270:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8001274:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8001278:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800127c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001280:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8001284:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8001288:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800128c:	f7ff ff80 	bl	8001190 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001290:	2500      	movs	r5, #0
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <xPortStartScheduler+0x114>)
 8001294:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8001296:	f7ff febd 	bl	8001014 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800129a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800129e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80012a2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80012a6:	f7ff fea1 	bl	8000fec <prvPortStartFirstTask>
	vTaskSwitchContext();
 80012aa:	f004 f8d3 	bl	8005454 <vTaskSwitchContext>
	prvTaskExitError();
 80012ae:	f7ff fe7d 	bl	8000fac <prvTaskExitError>
}
 80012b2:	4628      	mov	r0, r5
 80012b4:	b003      	add	sp, #12
 80012b6:	bd30      	pop	{r4, r5, pc}
 80012b8:	410fc271 	.word	0x410fc271
 80012bc:	410fc270 	.word	0x410fc270
 80012c0:	e000e400 	.word	0xe000e400
 80012c4:	200045b8 	.word	0x200045b8
 80012c8:	200045b4 	.word	0x200045b4
 80012cc:	20000004 	.word	0x20000004

080012d0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80012d0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80012d4:	2b0f      	cmp	r3, #15
 80012d6:	d90e      	bls.n	80012f6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80012d8:	4a11      	ldr	r2, [pc, #68]	@ (8001320 <vPortValidateInterruptPriority+0x50>)
 80012da:	5c9a      	ldrb	r2, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <vPortValidateInterruptPriority+0x54>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d208      	bcs.n	80012f6 <vPortValidateInterruptPriority+0x26>
 80012e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012e8:	f383 8811 	msr	BASEPRI, r3
 80012ec:	f3bf 8f6f 	isb	sy
 80012f0:	f3bf 8f4f 	dsb	sy
 80012f4:	e7fe      	b.n	80012f4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80012f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80012fa:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80012fe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001302:	4a09      	ldr	r2, [pc, #36]	@ (8001328 <vPortValidateInterruptPriority+0x58>)
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	4293      	cmp	r3, r2
 8001308:	d908      	bls.n	800131c <vPortValidateInterruptPriority+0x4c>
 800130a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800130e:	f383 8811 	msr	BASEPRI, r3
 8001312:	f3bf 8f6f 	isb	sy
 8001316:	f3bf 8f4f 	dsb	sy
 800131a:	e7fe      	b.n	800131a <vPortValidateInterruptPriority+0x4a>
	}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000e3f0 	.word	0xe000e3f0
 8001324:	200045b8 	.word	0x200045b8
 8001328:	200045b4 	.word	0x200045b4

0800132c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800132c:	b510      	push	{r4, lr}
 800132e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001330:	f7ff fea8 	bl	8001084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001334:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001336:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001338:	429a      	cmp	r2, r3
 800133a:	d004      	beq.n	8001346 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800133c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800133e:	f7ff fec3 	bl	80010c8 <vPortExitCritical>

	return xReturn;
}
 8001342:	4620      	mov	r0, r4
 8001344:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8001346:	2401      	movs	r4, #1
 8001348:	e7f9      	b.n	800133e <prvIsQueueFull+0x12>

0800134a <prvIsQueueEmpty>:
{
 800134a:	b510      	push	{r4, lr}
 800134c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800134e:	f7ff fe99 	bl	8001084 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001352:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001354:	b923      	cbnz	r3, 8001360 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8001356:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8001358:	f7ff feb6 	bl	80010c8 <vPortExitCritical>
}
 800135c:	4620      	mov	r0, r4
 800135e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8001360:	2400      	movs	r4, #0
 8001362:	e7f9      	b.n	8001358 <prvIsQueueEmpty+0xe>

08001364 <prvCopyDataToQueue>:
{
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	4604      	mov	r4, r0
 8001368:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800136a:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800136c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800136e:	b95a      	cbnz	r2, 8001388 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001370:	6803      	ldr	r3, [r0, #0]
 8001372:	b11b      	cbz	r3, 800137c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8001374:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001376:	3601      	adds	r6, #1
 8001378:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 800137a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800137c:	6880      	ldr	r0, [r0, #8]
 800137e:	f004 f995 	bl	80056ac <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001382:	2300      	movs	r3, #0
 8001384:	60a3      	str	r3, [r4, #8]
 8001386:	e7f6      	b.n	8001376 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8001388:	b96d      	cbnz	r5, 80013a6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800138a:	6840      	ldr	r0, [r0, #4]
 800138c:	f006 fb9a 	bl	8007ac4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001390:	6863      	ldr	r3, [r4, #4]
 8001392:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001394:	4413      	add	r3, r2
 8001396:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001398:	68a2      	ldr	r2, [r4, #8]
 800139a:	4293      	cmp	r3, r2
 800139c:	d319      	bcc.n	80013d2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800139e:	6823      	ldr	r3, [r4, #0]
 80013a0:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80013a2:	4628      	mov	r0, r5
 80013a4:	e7e7      	b.n	8001376 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80013a6:	68c0      	ldr	r0, [r0, #12]
 80013a8:	f006 fb8c 	bl	8007ac4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80013ac:	68e3      	ldr	r3, [r4, #12]
 80013ae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80013b0:	4251      	negs	r1, r2
 80013b2:	1a9b      	subs	r3, r3, r2
 80013b4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80013b6:	6822      	ldr	r2, [r4, #0]
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d202      	bcs.n	80013c2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80013bc:	68a3      	ldr	r3, [r4, #8]
 80013be:	440b      	add	r3, r1
 80013c0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80013c2:	2d02      	cmp	r5, #2
 80013c4:	d001      	beq.n	80013ca <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80013c6:	2000      	movs	r0, #0
 80013c8:	e7d5      	b.n	8001376 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80013ca:	b126      	cbz	r6, 80013d6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80013cc:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80013ce:	2000      	movs	r0, #0
 80013d0:	e7d1      	b.n	8001376 <prvCopyDataToQueue+0x12>
 80013d2:	4628      	mov	r0, r5
 80013d4:	e7cf      	b.n	8001376 <prvCopyDataToQueue+0x12>
 80013d6:	2000      	movs	r0, #0
 80013d8:	e7cd      	b.n	8001376 <prvCopyDataToQueue+0x12>

080013da <prvCopyDataFromQueue>:
{
 80013da:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80013dc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80013de:	b16a      	cbz	r2, 80013fc <prvCopyDataFromQueue+0x22>
{
 80013e0:	b510      	push	{r4, lr}
 80013e2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80013e4:	68d9      	ldr	r1, [r3, #12]
 80013e6:	4411      	add	r1, r2
 80013e8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80013ea:	689c      	ldr	r4, [r3, #8]
 80013ec:	42a1      	cmp	r1, r4
 80013ee:	d301      	bcc.n	80013f4 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80013f0:	6819      	ldr	r1, [r3, #0]
 80013f2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80013f4:	68d9      	ldr	r1, [r3, #12]
 80013f6:	f006 fb65 	bl	8007ac4 <memcpy>
}
 80013fa:	bd10      	pop	{r4, pc}
 80013fc:	4770      	bx	lr

080013fe <prvUnlockQueue>:
{
 80013fe:	b538      	push	{r3, r4, r5, lr}
 8001400:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8001402:	f7ff fe3f 	bl	8001084 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001406:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800140a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800140c:	e001      	b.n	8001412 <prvUnlockQueue+0x14>
			--cTxLock;
 800140e:	3c01      	subs	r4, #1
 8001410:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001412:	2c00      	cmp	r4, #0
 8001414:	dd0a      	ble.n	800142c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001416:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001418:	b143      	cbz	r3, 800142c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800141a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800141e:	f004 f899 	bl	8005554 <xTaskRemoveFromEventList>
 8001422:	2800      	cmp	r0, #0
 8001424:	d0f3      	beq.n	800140e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8001426:	f004 f92b 	bl	8005680 <vTaskMissedYield>
 800142a:	e7f0      	b.n	800140e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800142c:	23ff      	movs	r3, #255	@ 0xff
 800142e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8001432:	f7ff fe49 	bl	80010c8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001436:	f7ff fe25 	bl	8001084 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800143a:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 800143e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001440:	e001      	b.n	8001446 <prvUnlockQueue+0x48>
				--cRxLock;
 8001442:	3c01      	subs	r4, #1
 8001444:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001446:	2c00      	cmp	r4, #0
 8001448:	dd0a      	ble.n	8001460 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800144a:	692b      	ldr	r3, [r5, #16]
 800144c:	b143      	cbz	r3, 8001460 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800144e:	f105 0010 	add.w	r0, r5, #16
 8001452:	f004 f87f 	bl	8005554 <xTaskRemoveFromEventList>
 8001456:	2800      	cmp	r0, #0
 8001458:	d0f3      	beq.n	8001442 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800145a:	f004 f911 	bl	8005680 <vTaskMissedYield>
 800145e:	e7f0      	b.n	8001442 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8001460:	23ff      	movs	r3, #255	@ 0xff
 8001462:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8001466:	f7ff fe2f 	bl	80010c8 <vPortExitCritical>
}
 800146a:	bd38      	pop	{r3, r4, r5, pc}

0800146c <xQueueGenericReset>:
{
 800146c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800146e:	b1e0      	cbz	r0, 80014aa <xQueueGenericReset+0x3e>
 8001470:	460d      	mov	r5, r1
 8001472:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001474:	f7ff fe06 	bl	8001084 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800147c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800147e:	fb01 3002 	mla	r0, r1, r2, r3
 8001482:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001484:	2000      	movs	r0, #0
 8001486:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001488:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800148a:	3a01      	subs	r2, #1
 800148c:	fb02 3301 	mla	r3, r2, r1, r3
 8001490:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001492:	23ff      	movs	r3, #255	@ 0xff
 8001494:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001498:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800149c:	b9fd      	cbnz	r5, 80014de <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800149e:	6923      	ldr	r3, [r4, #16]
 80014a0:	b963      	cbnz	r3, 80014bc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80014a2:	f7ff fe11 	bl	80010c8 <vPortExitCritical>
}
 80014a6:	2001      	movs	r0, #1
 80014a8:	bd38      	pop	{r3, r4, r5, pc}
 80014aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014ae:	f383 8811 	msr	BASEPRI, r3
 80014b2:	f3bf 8f6f 	isb	sy
 80014b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80014ba:	e7fe      	b.n	80014ba <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014bc:	f104 0010 	add.w	r0, r4, #16
 80014c0:	f004 f848 	bl	8005554 <xTaskRemoveFromEventList>
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d0ec      	beq.n	80014a2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80014c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80014cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80014d4:	f3bf 8f4f 	dsb	sy
 80014d8:	f3bf 8f6f 	isb	sy
 80014dc:	e7e1      	b.n	80014a2 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80014de:	f104 0010 	add.w	r0, r4, #16
 80014e2:	f7ff fc9f 	bl	8000e24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80014e6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80014ea:	f7ff fc9b 	bl	8000e24 <vListInitialise>
 80014ee:	e7d8      	b.n	80014a2 <xQueueGenericReset+0x36>

080014f0 <prvInitialiseNewQueue>:
{
 80014f0:	b538      	push	{r3, r4, r5, lr}
 80014f2:	461d      	mov	r5, r3
 80014f4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80014f6:	460b      	mov	r3, r1
 80014f8:	b949      	cbnz	r1, 800150e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80014fa:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80014fc:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80014fe:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001500:	2101      	movs	r1, #1
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff ffb2 	bl	800146c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8001508:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800150c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800150e:	6022      	str	r2, [r4, #0]
 8001510:	e7f4      	b.n	80014fc <prvInitialiseNewQueue+0xc>

08001512 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001512:	b940      	cbnz	r0, 8001526 <xQueueGenericCreateStatic+0x14>
 8001514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001518:	f383 8811 	msr	BASEPRI, r3
 800151c:	f3bf 8f6f 	isb	sy
 8001520:	f3bf 8f4f 	dsb	sy
 8001524:	e7fe      	b.n	8001524 <xQueueGenericCreateStatic+0x12>
	{
 8001526:	b510      	push	{r4, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	461c      	mov	r4, r3
 800152c:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800152e:	b153      	cbz	r3, 8001546 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001530:	b192      	cbz	r2, 8001558 <xQueueGenericCreateStatic+0x46>
 8001532:	b989      	cbnz	r1, 8001558 <xQueueGenericCreateStatic+0x46>
 8001534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001538:	f383 8811 	msr	BASEPRI, r3
 800153c:	f3bf 8f6f 	isb	sy
 8001540:	f3bf 8f4f 	dsb	sy
 8001544:	e7fe      	b.n	8001544 <xQueueGenericCreateStatic+0x32>
 8001546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800154a:	f383 8811 	msr	BASEPRI, r3
 800154e:	f3bf 8f6f 	isb	sy
 8001552:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8001556:	e7fe      	b.n	8001556 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001558:	b16a      	cbz	r2, 8001576 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800155a:	2350      	movs	r3, #80	@ 0x50
 800155c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800155e:	9b03      	ldr	r3, [sp, #12]
 8001560:	2b50      	cmp	r3, #80	@ 0x50
 8001562:	d013      	beq.n	800158c <xQueueGenericCreateStatic+0x7a>
 8001564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001568:	f383 8811 	msr	BASEPRI, r3
 800156c:	f3bf 8f6f 	isb	sy
 8001570:	f3bf 8f4f 	dsb	sy
 8001574:	e7fe      	b.n	8001574 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001576:	2900      	cmp	r1, #0
 8001578:	d0ef      	beq.n	800155a <xQueueGenericCreateStatic+0x48>
 800157a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800157e:	f383 8811 	msr	BASEPRI, r3
 8001582:	f3bf 8f6f 	isb	sy
 8001586:	f3bf 8f4f 	dsb	sy
 800158a:	e7fe      	b.n	800158a <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800158c:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800158e:	2301      	movs	r3, #1
 8001590:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001594:	9400      	str	r4, [sp, #0]
 8001596:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800159a:	4660      	mov	r0, ip
 800159c:	f7ff ffa8 	bl	80014f0 <prvInitialiseNewQueue>
	}
 80015a0:	4620      	mov	r0, r4
 80015a2:	b004      	add	sp, #16
 80015a4:	bd10      	pop	{r4, pc}

080015a6 <xQueueGenericSend>:
{
 80015a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a8:	b085      	sub	sp, #20
 80015aa:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80015ac:	b188      	cbz	r0, 80015d2 <xQueueGenericSend+0x2c>
 80015ae:	460f      	mov	r7, r1
 80015b0:	461d      	mov	r5, r3
 80015b2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015b4:	b1b1      	cbz	r1, 80015e4 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80015b6:	2d02      	cmp	r5, #2
 80015b8:	d120      	bne.n	80015fc <xQueueGenericSend+0x56>
 80015ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d01d      	beq.n	80015fc <xQueueGenericSend+0x56>
 80015c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015c4:	f383 8811 	msr	BASEPRI, r3
 80015c8:	f3bf 8f6f 	isb	sy
 80015cc:	f3bf 8f4f 	dsb	sy
 80015d0:	e7fe      	b.n	80015d0 <xQueueGenericSend+0x2a>
 80015d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015d6:	f383 8811 	msr	BASEPRI, r3
 80015da:	f3bf 8f6f 	isb	sy
 80015de:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80015e2:	e7fe      	b.n	80015e2 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015e4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0e5      	beq.n	80015b6 <xQueueGenericSend+0x10>
 80015ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015ee:	f383 8811 	msr	BASEPRI, r3
 80015f2:	f3bf 8f6f 	isb	sy
 80015f6:	f3bf 8f4f 	dsb	sy
 80015fa:	e7fe      	b.n	80015fa <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80015fc:	f004 f846 	bl	800568c <xTaskGetSchedulerState>
 8001600:	4606      	mov	r6, r0
 8001602:	b958      	cbnz	r0, 800161c <xQueueGenericSend+0x76>
 8001604:	9b01      	ldr	r3, [sp, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d048      	beq.n	800169c <xQueueGenericSend+0xf6>
 800160a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800160e:	f383 8811 	msr	BASEPRI, r3
 8001612:	f3bf 8f6f 	isb	sy
 8001616:	f3bf 8f4f 	dsb	sy
 800161a:	e7fe      	b.n	800161a <xQueueGenericSend+0x74>
 800161c:	2600      	movs	r6, #0
 800161e:	e03d      	b.n	800169c <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001620:	462a      	mov	r2, r5
 8001622:	4639      	mov	r1, r7
 8001624:	4620      	mov	r0, r4
 8001626:	f7ff fe9d 	bl	8001364 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800162a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800162c:	b97b      	cbnz	r3, 800164e <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800162e:	b148      	cbz	r0, 8001644 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8001630:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001638:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800163c:	f3bf 8f4f 	dsb	sy
 8001640:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001644:	f7ff fd40 	bl	80010c8 <vPortExitCritical>
				return pdPASS;
 8001648:	2001      	movs	r0, #1
}
 800164a:	b005      	add	sp, #20
 800164c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800164e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001652:	f003 ff7f 	bl	8005554 <xTaskRemoveFromEventList>
 8001656:	2800      	cmp	r0, #0
 8001658:	d0f4      	beq.n	8001644 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800165a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800165e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001662:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001666:	f3bf 8f4f 	dsb	sy
 800166a:	f3bf 8f6f 	isb	sy
 800166e:	e7e9      	b.n	8001644 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8001670:	f7ff fd2a 	bl	80010c8 <vPortExitCritical>
					return errQUEUE_FULL;
 8001674:	2000      	movs	r0, #0
 8001676:	e7e8      	b.n	800164a <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001678:	a802      	add	r0, sp, #8
 800167a:	f003 ffb1 	bl	80055e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800167e:	2601      	movs	r6, #1
 8001680:	e019      	b.n	80016b6 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8001682:	2300      	movs	r3, #0
 8001684:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001688:	e021      	b.n	80016ce <xQueueGenericSend+0x128>
 800168a:	2300      	movs	r3, #0
 800168c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8001690:	e023      	b.n	80016da <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8001692:	4620      	mov	r0, r4
 8001694:	f7ff feb3 	bl	80013fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001698:	f003 fe3a 	bl	8005310 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800169c:	f7ff fcf2 	bl	8001084 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80016a0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80016a2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d3bb      	bcc.n	8001620 <xQueueGenericSend+0x7a>
 80016a8:	2d02      	cmp	r5, #2
 80016aa:	d0b9      	beq.n	8001620 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80016ac:	9b01      	ldr	r3, [sp, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0de      	beq.n	8001670 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 80016b2:	2e00      	cmp	r6, #0
 80016b4:	d0e0      	beq.n	8001678 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 80016b6:	f7ff fd07 	bl	80010c8 <vPortExitCritical>
		vTaskSuspendAll();
 80016ba:	f003 fd8f 	bl	80051dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80016be:	f7ff fce1 	bl	8001084 <vPortEnterCritical>
 80016c2:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80016c6:	b252      	sxtb	r2, r2
 80016c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80016cc:	d0d9      	beq.n	8001682 <xQueueGenericSend+0xdc>
 80016ce:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80016d2:	b252      	sxtb	r2, r2
 80016d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80016d8:	d0d7      	beq.n	800168a <xQueueGenericSend+0xe4>
 80016da:	f7ff fcf5 	bl	80010c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016de:	a901      	add	r1, sp, #4
 80016e0:	a802      	add	r0, sp, #8
 80016e2:	f003 ff89 	bl	80055f8 <xTaskCheckForTimeOut>
 80016e6:	b9d8      	cbnz	r0, 8001720 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80016e8:	4620      	mov	r0, r4
 80016ea:	f7ff fe1f 	bl	800132c <prvIsQueueFull>
 80016ee:	2800      	cmp	r0, #0
 80016f0:	d0cf      	beq.n	8001692 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80016f2:	9901      	ldr	r1, [sp, #4]
 80016f4:	f104 0010 	add.w	r0, r4, #16
 80016f8:	f003 fef8 	bl	80054ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7ff fe7e 	bl	80013fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001702:	f003 fe05 	bl	8005310 <xTaskResumeAll>
 8001706:	2800      	cmp	r0, #0
 8001708:	d1c8      	bne.n	800169c <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800170a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800170e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001712:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001716:	f3bf 8f4f 	dsb	sy
 800171a:	f3bf 8f6f 	isb	sy
 800171e:	e7bd      	b.n	800169c <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8001720:	4620      	mov	r0, r4
 8001722:	f7ff fe6c 	bl	80013fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001726:	f003 fdf3 	bl	8005310 <xTaskResumeAll>
			return errQUEUE_FULL;
 800172a:	2000      	movs	r0, #0
 800172c:	e78d      	b.n	800164a <xQueueGenericSend+0xa4>

0800172e <xQueueGenericSendFromISR>:
{
 800172e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8001732:	b190      	cbz	r0, 800175a <xQueueGenericSendFromISR+0x2c>
 8001734:	460f      	mov	r7, r1
 8001736:	4616      	mov	r6, r2
 8001738:	461c      	mov	r4, r3
 800173a:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800173c:	b1b1      	cbz	r1, 800176c <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800173e:	2c02      	cmp	r4, #2
 8001740:	d120      	bne.n	8001784 <xQueueGenericSendFromISR+0x56>
 8001742:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8001744:	2b01      	cmp	r3, #1
 8001746:	d01d      	beq.n	8001784 <xQueueGenericSendFromISR+0x56>
 8001748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800174c:	f383 8811 	msr	BASEPRI, r3
 8001750:	f3bf 8f6f 	isb	sy
 8001754:	f3bf 8f4f 	dsb	sy
 8001758:	e7fe      	b.n	8001758 <xQueueGenericSendFromISR+0x2a>
 800175a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800175e:	f383 8811 	msr	BASEPRI, r3
 8001762:	f3bf 8f6f 	isb	sy
 8001766:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800176a:	e7fe      	b.n	800176a <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800176c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0e5      	beq.n	800173e <xQueueGenericSendFromISR+0x10>
 8001772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001776:	f383 8811 	msr	BASEPRI, r3
 800177a:	f3bf 8f6f 	isb	sy
 800177e:	f3bf 8f4f 	dsb	sy
 8001782:	e7fe      	b.n	8001782 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001784:	f7ff fda4 	bl	80012d0 <vPortValidateInterruptPriority>
	__asm volatile
 8001788:	f3ef 8811 	mrs	r8, BASEPRI
 800178c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001790:	f383 8811 	msr	BASEPRI, r3
 8001794:	f3bf 8f6f 	isb	sy
 8001798:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800179c:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800179e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d306      	bcc.n	80017b2 <xQueueGenericSendFromISR+0x84>
 80017a4:	2c02      	cmp	r4, #2
 80017a6:	d004      	beq.n	80017b2 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80017a8:	2000      	movs	r0, #0
	__asm volatile
 80017aa:	f388 8811 	msr	BASEPRI, r8
}
 80017ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80017b2:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 80017b6:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80017ba:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80017bc:	4622      	mov	r2, r4
 80017be:	4639      	mov	r1, r7
 80017c0:	4628      	mov	r0, r5
 80017c2:	f7ff fdcf 	bl	8001364 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80017c6:	f1b9 3fff 	cmp.w	r9, #4294967295
 80017ca:	d006      	beq.n	80017da <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80017cc:	f109 0301 	add.w	r3, r9, #1
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 80017d6:	2001      	movs	r0, #1
 80017d8:	e7e7      	b.n	80017aa <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80017da:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80017dc:	b90b      	cbnz	r3, 80017e2 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 80017de:	2001      	movs	r0, #1
 80017e0:	e7e3      	b.n	80017aa <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80017e2:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80017e6:	f003 feb5 	bl	8005554 <xTaskRemoveFromEventList>
 80017ea:	b118      	cbz	r0, 80017f4 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 80017ec:	b126      	cbz	r6, 80017f8 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80017ee:	2001      	movs	r0, #1
 80017f0:	6030      	str	r0, [r6, #0]
 80017f2:	e7da      	b.n	80017aa <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80017f4:	2001      	movs	r0, #1
 80017f6:	e7d8      	b.n	80017aa <xQueueGenericSendFromISR+0x7c>
 80017f8:	2001      	movs	r0, #1
 80017fa:	e7d6      	b.n	80017aa <xQueueGenericSendFromISR+0x7c>

080017fc <xQueueReceive>:
{
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	b085      	sub	sp, #20
 8001800:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001802:	b190      	cbz	r0, 800182a <xQueueReceive+0x2e>
 8001804:	460f      	mov	r7, r1
 8001806:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001808:	b1c1      	cbz	r1, 800183c <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800180a:	f003 ff3f 	bl	800568c <xTaskGetSchedulerState>
 800180e:	4606      	mov	r6, r0
 8001810:	bb00      	cbnz	r0, 8001854 <xQueueReceive+0x58>
 8001812:	9b01      	ldr	r3, [sp, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d05e      	beq.n	80018d6 <xQueueReceive+0xda>
	__asm volatile
 8001818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800181c:	f383 8811 	msr	BASEPRI, r3
 8001820:	f3bf 8f6f 	isb	sy
 8001824:	f3bf 8f4f 	dsb	sy
 8001828:	e7fe      	b.n	8001828 <xQueueReceive+0x2c>
 800182a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800182e:	f383 8811 	msr	BASEPRI, r3
 8001832:	f3bf 8f6f 	isb	sy
 8001836:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800183a:	e7fe      	b.n	800183a <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800183c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0e3      	beq.n	800180a <xQueueReceive+0xe>
 8001842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001846:	f383 8811 	msr	BASEPRI, r3
 800184a:	f3bf 8f6f 	isb	sy
 800184e:	f3bf 8f4f 	dsb	sy
 8001852:	e7fe      	b.n	8001852 <xQueueReceive+0x56>
 8001854:	2600      	movs	r6, #0
 8001856:	e03e      	b.n	80018d6 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001858:	4639      	mov	r1, r7
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff fdbd 	bl	80013da <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001860:	3d01      	subs	r5, #1
 8001862:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001864:	6923      	ldr	r3, [r4, #16]
 8001866:	b923      	cbnz	r3, 8001872 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8001868:	f7ff fc2e 	bl	80010c8 <vPortExitCritical>
				return pdPASS;
 800186c:	2001      	movs	r0, #1
}
 800186e:	b005      	add	sp, #20
 8001870:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001872:	f104 0010 	add.w	r0, r4, #16
 8001876:	f003 fe6d 	bl	8005554 <xTaskRemoveFromEventList>
 800187a:	2800      	cmp	r0, #0
 800187c:	d0f4      	beq.n	8001868 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800187e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001886:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800188a:	f3bf 8f4f 	dsb	sy
 800188e:	f3bf 8f6f 	isb	sy
 8001892:	e7e9      	b.n	8001868 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8001894:	f7ff fc18 	bl	80010c8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001898:	2000      	movs	r0, #0
 800189a:	e7e8      	b.n	800186e <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800189c:	a802      	add	r0, sp, #8
 800189e:	f003 fe9f 	bl	80055e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80018a2:	2601      	movs	r6, #1
 80018a4:	e021      	b.n	80018ea <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 80018a6:	2300      	movs	r3, #0
 80018a8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80018ac:	e029      	b.n	8001902 <xQueueReceive+0x106>
 80018ae:	2300      	movs	r3, #0
 80018b0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80018b4:	e02b      	b.n	800190e <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80018b6:	4620      	mov	r0, r4
 80018b8:	f7ff fda1 	bl	80013fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80018bc:	f003 fd28 	bl	8005310 <xTaskResumeAll>
 80018c0:	e009      	b.n	80018d6 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7ff fd9b 	bl	80013fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80018c8:	f003 fd22 	bl	8005310 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80018cc:	4620      	mov	r0, r4
 80018ce:	f7ff fd3c 	bl	800134a <prvIsQueueEmpty>
 80018d2:	2800      	cmp	r0, #0
 80018d4:	d13f      	bne.n	8001956 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 80018d6:	f7ff fbd5 	bl	8001084 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80018da:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80018dc:	2d00      	cmp	r5, #0
 80018de:	d1bb      	bne.n	8001858 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80018e0:	9b01      	ldr	r3, [sp, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0d6      	beq.n	8001894 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80018e6:	2e00      	cmp	r6, #0
 80018e8:	d0d8      	beq.n	800189c <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 80018ea:	f7ff fbed 	bl	80010c8 <vPortExitCritical>
		vTaskSuspendAll();
 80018ee:	f003 fc75 	bl	80051dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80018f2:	f7ff fbc7 	bl	8001084 <vPortEnterCritical>
 80018f6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80018fa:	b25b      	sxtb	r3, r3
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d0d1      	beq.n	80018a6 <xQueueReceive+0xaa>
 8001902:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8001906:	b25b      	sxtb	r3, r3
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d0cf      	beq.n	80018ae <xQueueReceive+0xb2>
 800190e:	f7ff fbdb 	bl	80010c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001912:	a901      	add	r1, sp, #4
 8001914:	a802      	add	r0, sp, #8
 8001916:	f003 fe6f 	bl	80055f8 <xTaskCheckForTimeOut>
 800191a:	2800      	cmp	r0, #0
 800191c:	d1d1      	bne.n	80018c2 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800191e:	4620      	mov	r0, r4
 8001920:	f7ff fd13 	bl	800134a <prvIsQueueEmpty>
 8001924:	2800      	cmp	r0, #0
 8001926:	d0c6      	beq.n	80018b6 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001928:	9901      	ldr	r1, [sp, #4]
 800192a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800192e:	f003 fddd 	bl	80054ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001932:	4620      	mov	r0, r4
 8001934:	f7ff fd63 	bl	80013fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001938:	f003 fcea 	bl	8005310 <xTaskResumeAll>
 800193c:	2800      	cmp	r0, #0
 800193e:	d1ca      	bne.n	80018d6 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8001940:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001948:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800194c:	f3bf 8f4f 	dsb	sy
 8001950:	f3bf 8f6f 	isb	sy
 8001954:	e7bf      	b.n	80018d6 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8001956:	2000      	movs	r0, #0
 8001958:	e789      	b.n	800186e <xQueueReceive+0x72>
	...

0800195c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800195c:	2300      	movs	r3, #0
 800195e:	2b07      	cmp	r3, #7
 8001960:	d80c      	bhi.n	800197c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001962:	4a07      	ldr	r2, [pc, #28]	@ (8001980 <vQueueAddToRegistry+0x24>)
 8001964:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001968:	b10a      	cbz	r2, 800196e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800196a:	3301      	adds	r3, #1
 800196c:	e7f7      	b.n	800195e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800196e:	4a04      	ldr	r2, [pc, #16]	@ (8001980 <vQueueAddToRegistry+0x24>)
 8001970:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001974:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001978:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800197a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	200045bc 	.word	0x200045bc

08001984 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001984:	b570      	push	{r4, r5, r6, lr}
 8001986:	4604      	mov	r4, r0
 8001988:	460d      	mov	r5, r1
 800198a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800198c:	f7ff fb7a 	bl	8001084 <vPortEnterCritical>
 8001990:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001994:	b25b      	sxtb	r3, r3
 8001996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199a:	d00d      	beq.n	80019b8 <vQueueWaitForMessageRestricted+0x34>
 800199c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80019a0:	b25b      	sxtb	r3, r3
 80019a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a6:	d00b      	beq.n	80019c0 <vQueueWaitForMessageRestricted+0x3c>
 80019a8:	f7ff fb8e 	bl	80010c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80019ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80019ae:	b15b      	cbz	r3, 80019c8 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80019b0:	4620      	mov	r0, r4
 80019b2:	f7ff fd24 	bl	80013fe <prvUnlockQueue>
	}
 80019b6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80019b8:	2300      	movs	r3, #0
 80019ba:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80019be:	e7ed      	b.n	800199c <vQueueWaitForMessageRestricted+0x18>
 80019c0:	2300      	movs	r3, #0
 80019c2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80019c6:	e7ef      	b.n	80019a8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80019c8:	4632      	mov	r2, r6
 80019ca:	4629      	mov	r1, r5
 80019cc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80019d0:	f003 fda4 	bl	800551c <vTaskPlaceOnEventListRestricted>
 80019d4:	e7ec      	b.n	80019b0 <vQueueWaitForMessageRestricted+0x2c>
	...

080019d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019da:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_Init+0x30>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019e2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019ea:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f000 fa01 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fa:	200f      	movs	r0, #15
 80019fc:	f002 fb50 	bl	80040a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a00:	f000 fcce 	bl	80023a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001a04:	2000      	movs	r0, #0
 8001a06:	bd08      	pop	{r3, pc}
 8001a08:	40023c00 	.word	0x40023c00

08001a0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a0c:	4a03      	ldr	r2, [pc, #12]	@ (8001a1c <HAL_IncTick+0x10>)
 8001a0e:	6811      	ldr	r1, [r2, #0]
 8001a10:	4b03      	ldr	r3, [pc, #12]	@ (8001a20 <HAL_IncTick+0x14>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	440b      	add	r3, r1
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	200045fc 	.word	0x200045fc
 8001a20:	20000008 	.word	0x20000008

08001a24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a24:	4b01      	ldr	r3, [pc, #4]	@ (8001a2c <HAL_GetTick+0x8>)
 8001a26:	6818      	ldr	r0, [r3, #0]
}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	200045fc 	.word	0x200045fc

08001a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a30:	b538      	push	{r3, r4, r5, lr}
 8001a32:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a34:	f7ff fff6 	bl	8001a24 <HAL_GetTick>
 8001a38:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001a3e:	d002      	beq.n	8001a46 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a40:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <HAL_Delay+0x24>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a46:	f7ff ffed 	bl	8001a24 <HAL_GetTick>
 8001a4a:	1b40      	subs	r0, r0, r5
 8001a4c:	42a0      	cmp	r0, r4
 8001a4e:	d3fa      	bcc.n	8001a46 <HAL_Delay+0x16>
  {
  }
}
 8001a50:	bd38      	pop	{r3, r4, r5, pc}
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008

08001a58 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a58:	4b4a      	ldr	r3, [pc, #296]	@ (8001b84 <ADC_Init+0x12c>)
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8001a60:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	6841      	ldr	r1, [r0, #4]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a6a:	6802      	ldr	r2, [r0, #0]
 8001a6c:	6853      	ldr	r3, [r2, #4]
 8001a6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a72:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a74:	6802      	ldr	r2, [r0, #0]
 8001a76:	6853      	ldr	r3, [r2, #4]
 8001a78:	6901      	ldr	r1, [r0, #16]
 8001a7a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001a7e:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a80:	6802      	ldr	r2, [r0, #0]
 8001a82:	6853      	ldr	r3, [r2, #4]
 8001a84:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001a88:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a8a:	6802      	ldr	r2, [r0, #0]
 8001a8c:	6853      	ldr	r3, [r2, #4]
 8001a8e:	6881      	ldr	r1, [r0, #8]
 8001a90:	430b      	orrs	r3, r1
 8001a92:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a94:	6802      	ldr	r2, [r0, #0]
 8001a96:	6893      	ldr	r3, [r2, #8]
 8001a98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001a9c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a9e:	6802      	ldr	r2, [r0, #0]
 8001aa0:	6893      	ldr	r3, [r2, #8]
 8001aa2:	68c1      	ldr	r1, [r0, #12]
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aa8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001aaa:	4b37      	ldr	r3, [pc, #220]	@ (8001b88 <ADC_Init+0x130>)
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d057      	beq.n	8001b60 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ab0:	6802      	ldr	r2, [r0, #0]
 8001ab2:	6893      	ldr	r3, [r2, #8]
 8001ab4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001ab8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001aba:	6802      	ldr	r2, [r0, #0]
 8001abc:	6893      	ldr	r3, [r2, #8]
 8001abe:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ac4:	6802      	ldr	r2, [r0, #0]
 8001ac6:	6893      	ldr	r3, [r2, #8]
 8001ac8:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001acc:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ace:	6802      	ldr	r2, [r0, #0]
 8001ad0:	6893      	ldr	r3, [r2, #8]
 8001ad2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ad8:	6802      	ldr	r2, [r0, #0]
 8001ada:	6893      	ldr	r3, [r2, #8]
 8001adc:	f023 0302 	bic.w	r3, r3, #2
 8001ae0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ae2:	6802      	ldr	r2, [r0, #0]
 8001ae4:	6893      	ldr	r3, [r2, #8]
 8001ae6:	7e01      	ldrb	r1, [r0, #24]
 8001ae8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001aec:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001aee:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d03f      	beq.n	8001b76 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001af6:	6802      	ldr	r2, [r0, #0]
 8001af8:	6853      	ldr	r3, [r2, #4]
 8001afa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001afe:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b00:	6802      	ldr	r2, [r0, #0]
 8001b02:	6853      	ldr	r3, [r2, #4]
 8001b04:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001b08:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b0a:	6801      	ldr	r1, [r0, #0]
 8001b0c:	684b      	ldr	r3, [r1, #4]
 8001b0e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8001b10:	3a01      	subs	r2, #1
 8001b12:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001b16:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b18:	6802      	ldr	r2, [r0, #0]
 8001b1a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001b1c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001b20:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b22:	6801      	ldr	r1, [r0, #0]
 8001b24:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8001b26:	69c2      	ldr	r2, [r0, #28]
 8001b28:	3a01      	subs	r2, #1
 8001b2a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001b2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b30:	6802      	ldr	r2, [r0, #0]
 8001b32:	6893      	ldr	r3, [r2, #8]
 8001b34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001b38:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b3a:	6802      	ldr	r2, [r0, #0]
 8001b3c:	6893      	ldr	r3, [r2, #8]
 8001b3e:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8001b42:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001b46:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b48:	6802      	ldr	r2, [r0, #0]
 8001b4a:	6893      	ldr	r3, [r2, #8]
 8001b4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b50:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b52:	6802      	ldr	r2, [r0, #0]
 8001b54:	6893      	ldr	r3, [r2, #8]
 8001b56:	6941      	ldr	r1, [r0, #20]
 8001b58:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001b5c:	6093      	str	r3, [r2, #8]
}
 8001b5e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b60:	6802      	ldr	r2, [r0, #0]
 8001b62:	6893      	ldr	r3, [r2, #8]
 8001b64:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001b68:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b6a:	6802      	ldr	r2, [r0, #0]
 8001b6c:	6893      	ldr	r3, [r2, #8]
 8001b6e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001b72:	6093      	str	r3, [r2, #8]
 8001b74:	e7b0      	b.n	8001ad8 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b76:	6802      	ldr	r2, [r0, #0]
 8001b78:	6853      	ldr	r3, [r2, #4]
 8001b7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001b7e:	6053      	str	r3, [r2, #4]
 8001b80:	e7ca      	b.n	8001b18 <ADC_Init+0xc0>
 8001b82:	bf00      	nop
 8001b84:	40012300 	.word	0x40012300
 8001b88:	0f000001 	.word	0x0f000001

08001b8c <HAL_ADC_Init>:
  if (hadc == NULL)
 8001b8c:	b338      	cbz	r0, 8001bde <HAL_ADC_Init+0x52>
{
 8001b8e:	b510      	push	{r4, lr}
 8001b90:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b92:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001b94:	b143      	cbz	r3, 8001ba8 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b98:	f013 0f10 	tst.w	r3, #16
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001b9e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001ba6:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001ba8:	f7fe fc62 	bl	8000470 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001bac:	2300      	movs	r3, #0
 8001bae:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001bb0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8001bb4:	e7ef      	b.n	8001b96 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001bb6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bb8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bbc:	f023 0302 	bic.w	r3, r3, #2
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	f7ff ff46 	bl	8001a58 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001bcc:	2000      	movs	r0, #0
 8001bce:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001bd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bd2:	f023 0303 	bic.w	r3, r3, #3
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6423      	str	r3, [r4, #64]	@ 0x40
 8001bdc:	e7e0      	b.n	8001ba0 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001bde:	2001      	movs	r0, #1
}
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_ADC_ConfigChannel>:
{
 8001be4:	b430      	push	{r4, r5}
 8001be6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001be8:	2200      	movs	r2, #0
 8001bea:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001bec:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001bf0:	2a01      	cmp	r2, #1
 8001bf2:	f000 80b6 	beq.w	8001d62 <HAL_ADC_ConfigChannel+0x17e>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bfe:	680a      	ldr	r2, [r1, #0]
 8001c00:	2a09      	cmp	r2, #9
 8001c02:	d940      	bls.n	8001c86 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c04:	6804      	ldr	r4, [r0, #0]
 8001c06:	68e0      	ldr	r0, [r4, #12]
 8001c08:	b292      	uxth	r2, r2
 8001c0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001c0e:	3a1e      	subs	r2, #30
 8001c10:	f04f 0c07 	mov.w	ip, #7
 8001c14:	fa0c f202 	lsl.w	r2, ip, r2
 8001c18:	ea20 0202 	bic.w	r2, r0, r2
 8001c1c:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c1e:	681c      	ldr	r4, [r3, #0]
 8001c20:	68e0      	ldr	r0, [r4, #12]
 8001c22:	880a      	ldrh	r2, [r1, #0]
 8001c24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001c28:	3a1e      	subs	r2, #30
 8001c2a:	688d      	ldr	r5, [r1, #8]
 8001c2c:	fa05 f202 	lsl.w	r2, r5, r2
 8001c30:	4302      	orrs	r2, r0
 8001c32:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8001c34:	684a      	ldr	r2, [r1, #4]
 8001c36:	2a06      	cmp	r2, #6
 8001c38:	d83c      	bhi.n	8001cb4 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c3a:	681c      	ldr	r4, [r3, #0]
 8001c3c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001c3e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c42:	3a05      	subs	r2, #5
 8001c44:	f04f 0c1f 	mov.w	ip, #31
 8001c48:	fa0c f202 	lsl.w	r2, ip, r2
 8001c4c:	ea20 0202 	bic.w	r2, r0, r2
 8001c50:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c52:	681c      	ldr	r4, [r3, #0]
 8001c54:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001c56:	684a      	ldr	r2, [r1, #4]
 8001c58:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c5c:	3a05      	subs	r2, #5
 8001c5e:	f8b1 c000 	ldrh.w	ip, [r1]
 8001c62:	fa0c f202 	lsl.w	r2, ip, r2
 8001c66:	4302      	orrs	r2, r0
 8001c68:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	4a3e      	ldr	r2, [pc, #248]	@ (8001d68 <HAL_ADC_ConfigChannel+0x184>)
 8001c6e:	4290      	cmp	r0, r2
 8001c70:	d050      	beq.n	8001d14 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	4a3c      	ldr	r2, [pc, #240]	@ (8001d68 <HAL_ADC_ConfigChannel+0x184>)
 8001c76:	4290      	cmp	r0, r2
 8001c78:	d055      	beq.n	8001d26 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8001c80:	b002      	add	sp, #8
 8001c82:	bc30      	pop	{r4, r5}
 8001c84:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c86:	6804      	ldr	r4, [r0, #0]
 8001c88:	6920      	ldr	r0, [r4, #16]
 8001c8a:	b292      	uxth	r2, r2
 8001c8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001c90:	f04f 0c07 	mov.w	ip, #7
 8001c94:	fa0c f202 	lsl.w	r2, ip, r2
 8001c98:	ea20 0202 	bic.w	r2, r0, r2
 8001c9c:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c9e:	681c      	ldr	r4, [r3, #0]
 8001ca0:	6920      	ldr	r0, [r4, #16]
 8001ca2:	880a      	ldrh	r2, [r1, #0]
 8001ca4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ca8:	688d      	ldr	r5, [r1, #8]
 8001caa:	fa05 f202 	lsl.w	r2, r5, r2
 8001cae:	4302      	orrs	r2, r0
 8001cb0:	6122      	str	r2, [r4, #16]
 8001cb2:	e7bf      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8001cb4:	2a0c      	cmp	r2, #12
 8001cb6:	d816      	bhi.n	8001ce6 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cb8:	681d      	ldr	r5, [r3, #0]
 8001cba:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001cbc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001cc0:	3a23      	subs	r2, #35	@ 0x23
 8001cc2:	241f      	movs	r4, #31
 8001cc4:	fa04 f202 	lsl.w	r2, r4, r2
 8001cc8:	ea20 0202 	bic.w	r2, r0, r2
 8001ccc:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cce:	681d      	ldr	r5, [r3, #0]
 8001cd0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001cd2:	684a      	ldr	r2, [r1, #4]
 8001cd4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001cd8:	3a23      	subs	r2, #35	@ 0x23
 8001cda:	880c      	ldrh	r4, [r1, #0]
 8001cdc:	fa04 f202 	lsl.w	r2, r4, r2
 8001ce0:	4302      	orrs	r2, r0
 8001ce2:	632a      	str	r2, [r5, #48]	@ 0x30
 8001ce4:	e7c1      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ce6:	681d      	ldr	r5, [r3, #0]
 8001ce8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001cea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001cee:	3a41      	subs	r2, #65	@ 0x41
 8001cf0:	241f      	movs	r4, #31
 8001cf2:	fa04 f202 	lsl.w	r2, r4, r2
 8001cf6:	ea20 0202 	bic.w	r2, r0, r2
 8001cfa:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cfc:	681d      	ldr	r5, [r3, #0]
 8001cfe:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001d00:	684a      	ldr	r2, [r1, #4]
 8001d02:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d06:	3a41      	subs	r2, #65	@ 0x41
 8001d08:	880c      	ldrh	r4, [r1, #0]
 8001d0a:	fa04 f202 	lsl.w	r2, r4, r2
 8001d0e:	4302      	orrs	r2, r0
 8001d10:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8001d12:	e7aa      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d14:	680a      	ldr	r2, [r1, #0]
 8001d16:	2a12      	cmp	r2, #18
 8001d18:	d1ab      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d1a:	4814      	ldr	r0, [pc, #80]	@ (8001d6c <HAL_ADC_ConfigChannel+0x188>)
 8001d1c:	6842      	ldr	r2, [r0, #4]
 8001d1e:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001d22:	6042      	str	r2, [r0, #4]
 8001d24:	e7a5      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d26:	680a      	ldr	r2, [r1, #0]
 8001d28:	3a10      	subs	r2, #16
 8001d2a:	2a01      	cmp	r2, #1
 8001d2c:	d8a5      	bhi.n	8001c7a <HAL_ADC_ConfigChannel+0x96>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d2e:	480f      	ldr	r0, [pc, #60]	@ (8001d6c <HAL_ADC_ConfigChannel+0x188>)
 8001d30:	6842      	ldr	r2, [r0, #4]
 8001d32:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001d36:	6042      	str	r2, [r0, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d38:	680a      	ldr	r2, [r1, #0]
 8001d3a:	2a10      	cmp	r2, #16
 8001d3c:	d19d      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d70 <HAL_ADC_ConfigChannel+0x18c>)
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	490c      	ldr	r1, [pc, #48]	@ (8001d74 <HAL_ADC_ConfigChannel+0x190>)
 8001d44:	fba1 1202 	umull	r1, r2, r1, r2
 8001d48:	0c92      	lsrs	r2, r2, #18
 8001d4a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d4e:	0052      	lsls	r2, r2, #1
 8001d50:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001d52:	e002      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x176>
        counter--;
 8001d54:	9a01      	ldr	r2, [sp, #4]
 8001d56:	3a01      	subs	r2, #1
 8001d58:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001d5a:	9a01      	ldr	r2, [sp, #4]
 8001d5c:	2a00      	cmp	r2, #0
 8001d5e:	d1f9      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x170>
 8001d60:	e78b      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 8001d62:	2002      	movs	r0, #2
 8001d64:	e78c      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x9c>
 8001d66:	bf00      	nop
 8001d68:	40012000 	.word	0x40012000
 8001d6c:	40012300 	.word	0x40012300
 8001d70:	20000010 	.word	0x20000010
 8001d74:	431bde83 	.word	0x431bde83

08001d78 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	db07      	blt.n	8001d8c <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7c:	f000 021f 	and.w	r2, r0, #31
 8001d80:	0940      	lsrs	r0, r0, #5
 8001d82:	2301      	movs	r3, #1
 8001d84:	4093      	lsls	r3, r2
 8001d86:	4a02      	ldr	r2, [pc, #8]	@ (8001d90 <__NVIC_EnableIRQ+0x18>)
 8001d88:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8001d94:	2800      	cmp	r0, #0
 8001d96:	db08      	blt.n	8001daa <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	0109      	lsls	r1, r1, #4
 8001d9a:	b2c9      	uxtb	r1, r1
 8001d9c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001da0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001da4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001da8:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	f000 000f 	and.w	r0, r0, #15
 8001dae:	0109      	lsls	r1, r1, #4
 8001db0:	b2c9      	uxtb	r1, r1
 8001db2:	4b01      	ldr	r3, [pc, #4]	@ (8001db8 <__NVIC_SetPriority+0x24>)
 8001db4:	5419      	strb	r1, [r3, r0]
  }
}
 8001db6:	4770      	bx	lr
 8001db8:	e000ed14 	.word	0xe000ed14

08001dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbe:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc2:	f1c0 0c07 	rsb	ip, r0, #7
 8001dc6:	f1bc 0f04 	cmp.w	ip, #4
 8001dca:	bf28      	it	cs
 8001dcc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd0:	1d03      	adds	r3, r0, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d90f      	bls.n	8001df6 <NVIC_EncodePriority+0x3a>
 8001dd6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	f04f 3eff 	mov.w	lr, #4294967295
 8001ddc:	fa0e f00c 	lsl.w	r0, lr, ip
 8001de0:	ea21 0100 	bic.w	r1, r1, r0
 8001de4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de6:	fa0e fe03 	lsl.w	lr, lr, r3
 8001dea:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001dee:	ea41 0002 	orr.w	r0, r1, r2
 8001df2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	2300      	movs	r3, #0
 8001df8:	e7ee      	b.n	8001dd8 <NVIC_EncodePriority+0x1c>
	...

08001dfc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dfc:	4a07      	ldr	r2, [pc, #28]	@ (8001e1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001dfe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e00:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e08:	0200      	lsls	r0, r0, #8
 8001e0a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e0e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001e18:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e20:	b510      	push	{r4, lr}
 8001e22:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e24:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_NVIC_SetPriority+0x1c>)
 8001e26:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e28:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001e2c:	f7ff ffc6 	bl	8001dbc <NVIC_EncodePriority>
 8001e30:	4601      	mov	r1, r0
 8001e32:	4620      	mov	r0, r4
 8001e34:	f7ff ffae 	bl	8001d94 <__NVIC_SetPriority>
}
 8001e38:	bd10      	pop	{r4, pc}
 8001e3a:	bf00      	nop
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e40:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e42:	f7ff ff99 	bl	8001d78 <__NVIC_EnableIRQ>
}
 8001e46:	bd08      	pop	{r3, pc}

08001e48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e48:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e4a:	6803      	ldr	r3, [r0, #0]
 8001e4c:	b2d9      	uxtb	r1, r3
 8001e4e:	3910      	subs	r1, #16
 8001e50:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <DMA_CalcBaseAndBitshift+0x34>)
 8001e52:	fba2 4201 	umull	r4, r2, r2, r1
 8001e56:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e58:	4c09      	ldr	r4, [pc, #36]	@ (8001e80 <DMA_CalcBaseAndBitshift+0x38>)
 8001e5a:	5ca2      	ldrb	r2, [r4, r2]
 8001e5c:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e5e:	295f      	cmp	r1, #95	@ 0x5f
 8001e60:	d907      	bls.n	8001e72 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e62:	f36f 0309 	bfc	r3, #0, #10
 8001e66:	3304      	adds	r3, #4
 8001e68:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001e6a:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8001e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e70:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e72:	f36f 0309 	bfc	r3, #0, #10
 8001e76:	6583      	str	r3, [r0, #88]	@ 0x58
 8001e78:	e7f7      	b.n	8001e6a <DMA_CalcBaseAndBitshift+0x22>
 8001e7a:	bf00      	nop
 8001e7c:	aaaaaaab 	.word	0xaaaaaaab
 8001e80:	08008834 	.word	0x08008834

08001e84 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e84:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e86:	6982      	ldr	r2, [r0, #24]
 8001e88:	b992      	cbnz	r2, 8001eb0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d00a      	beq.n	8001ea4 <DMA_CheckFifoParam+0x20>
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d002      	beq.n	8001e98 <DMA_CheckFifoParam+0x14>
 8001e92:	b10b      	cbz	r3, 8001e98 <DMA_CheckFifoParam+0x14>
 8001e94:	2000      	movs	r0, #0
 8001e96:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e98:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001e9a:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001e9e:	d128      	bne.n	8001ef2 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ea4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001ea6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001eaa:	d024      	beq.n	8001ef6 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001eac:	2000      	movs	r0, #0
 8001eae:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eb0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001eb4:	d009      	beq.n	8001eca <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d925      	bls.n	8001f06 <DMA_CheckFifoParam+0x82>
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d125      	bne.n	8001f0a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ebe:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001ec0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001ec4:	d123      	bne.n	8001f0e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	4770      	bx	lr
    switch (tmp)
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d803      	bhi.n	8001ed6 <DMA_CheckFifoParam+0x52>
 8001ece:	e8df f003 	tbb	[pc, r3]
 8001ed2:	0414      	.short	0x0414
 8001ed4:	0a14      	.short	0x0a14
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eda:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001edc:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001ee0:	d10d      	bne.n	8001efe <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ee6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001ee8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001eec:	d009      	beq.n	8001f02 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001eee:	2000      	movs	r0, #0
 8001ef0:	4770      	bx	lr
        status = HAL_ERROR;
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	4770      	bx	lr
        status = HAL_ERROR;
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	4770      	bx	lr
      status = HAL_ERROR;
 8001efa:	2001      	movs	r0, #1
 8001efc:	4770      	bx	lr
        status = HAL_ERROR;
 8001efe:	2001      	movs	r0, #1
 8001f00:	4770      	bx	lr
        status = HAL_ERROR;
 8001f02:	2001      	movs	r0, #1
 8001f04:	4770      	bx	lr
      status = HAL_ERROR;
 8001f06:	2001      	movs	r0, #1
 8001f08:	4770      	bx	lr
    switch (tmp)
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001f0e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_DMA_Init>:
{
 8001f14:	b570      	push	{r4, r5, r6, lr}
 8001f16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff fd84 	bl	8001a24 <HAL_GetTick>
  if(hdma == NULL)
 8001f1c:	2c00      	cmp	r4, #0
 8001f1e:	d05b      	beq.n	8001fd8 <HAL_DMA_Init+0xc4>
 8001f20:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f22:	2302      	movs	r3, #2
 8001f24:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001f2e:	6822      	ldr	r2, [r4, #0]
 8001f30:	6813      	ldr	r3, [r2, #0]
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	f012 0f01 	tst.w	r2, #1
 8001f40:	d00a      	beq.n	8001f58 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f42:	f7ff fd6f 	bl	8001a24 <HAL_GetTick>
 8001f46:	1b43      	subs	r3, r0, r5
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d9f5      	bls.n	8001f38 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f50:	2003      	movs	r0, #3
 8001f52:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001f56:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001f58:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f5a:	4920      	ldr	r1, [pc, #128]	@ (8001fdc <HAL_DMA_Init+0xc8>)
 8001f5c:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f5e:	6862      	ldr	r2, [r4, #4]
 8001f60:	68a0      	ldr	r0, [r4, #8]
 8001f62:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f64:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f66:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f68:	6920      	ldr	r0, [r4, #16]
 8001f6a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6c:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f70:	69a0      	ldr	r0, [r4, #24]
 8001f72:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f74:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f76:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f78:	6a20      	ldr	r0, [r4, #32]
 8001f7a:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f7c:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f7e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001f80:	2904      	cmp	r1, #4
 8001f82:	d01e      	beq.n	8001fc2 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001f84:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001f86:	6826      	ldr	r6, [r4, #0]
 8001f88:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f8a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001f8e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f90:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d107      	bne.n	8001fa6 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001f96:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001f98:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f9a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001f9c:	b11b      	cbz	r3, 8001fa6 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff ff70 	bl	8001e84 <DMA_CheckFifoParam>
 8001fa4:	b990      	cbnz	r0, 8001fcc <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001fa6:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f7ff ff4d 	bl	8001e48 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fae:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001fb0:	233f      	movs	r3, #63	@ 0x3f
 8001fb2:	4093      	lsls	r3, r2
 8001fb4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001fc0:	e7c9      	b.n	8001f56 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001fc4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001fc6:	4301      	orrs	r1, r0
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	e7db      	b.n	8001f84 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fcc:	2340      	movs	r3, #64	@ 0x40
 8001fce:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001fd6:	e7be      	b.n	8001f56 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001fd8:	2001      	movs	r0, #1
 8001fda:	e7bc      	b.n	8001f56 <HAL_DMA_Init+0x42>
 8001fdc:	f010803f 	.word	0xf010803f

08001fe0 <HAL_DMA_IRQHandler>:
{
 8001fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fea:	4b72      	ldr	r3, [pc, #456]	@ (80021b4 <HAL_DMA_IRQHandler+0x1d4>)
 8001fec:	681d      	ldr	r5, [r3, #0]
 8001fee:	4b72      	ldr	r3, [pc, #456]	@ (80021b8 <HAL_DMA_IRQHandler+0x1d8>)
 8001ff0:	fba3 3505 	umull	r3, r5, r3, r5
 8001ff4:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff6:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8001ff8:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffa:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	4093      	lsls	r3, r2
 8002000:	4233      	tst	r3, r6
 8002002:	d010      	beq.n	8002026 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002004:	6803      	ldr	r3, [r0, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	f012 0f04 	tst.w	r2, #4
 800200c:	d00b      	beq.n	8002026 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	f022 0204 	bic.w	r2, r2, #4
 8002014:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002016:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002018:	2308      	movs	r3, #8
 800201a:	4093      	lsls	r3, r2
 800201c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800201e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002026:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002028:	2301      	movs	r3, #1
 800202a:	4093      	lsls	r3, r2
 800202c:	4233      	tst	r3, r6
 800202e:	d009      	beq.n	8002044 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002030:	6822      	ldr	r2, [r4, #0]
 8002032:	6952      	ldr	r2, [r2, #20]
 8002034:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002038:	d004      	beq.n	8002044 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800203a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800203c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800203e:	f043 0302 	orr.w	r3, r3, #2
 8002042:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002044:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002046:	2304      	movs	r3, #4
 8002048:	4093      	lsls	r3, r2
 800204a:	4233      	tst	r3, r6
 800204c:	d009      	beq.n	8002062 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800204e:	6822      	ldr	r2, [r4, #0]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	f012 0f02 	tst.w	r2, #2
 8002056:	d004      	beq.n	8002062 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002058:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800205a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800205c:	f043 0304 	orr.w	r3, r3, #4
 8002060:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002062:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002064:	2310      	movs	r3, #16
 8002066:	4093      	lsls	r3, r2
 8002068:	4233      	tst	r3, r6
 800206a:	d024      	beq.n	80020b6 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800206c:	6822      	ldr	r2, [r4, #0]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	f012 0f08 	tst.w	r2, #8
 8002074:	d01f      	beq.n	80020b6 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002076:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002078:	6823      	ldr	r3, [r4, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002080:	d00d      	beq.n	800209e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002088:	d104      	bne.n	8002094 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800208a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800208c:	b19b      	cbz	r3, 80020b6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800208e:	4620      	mov	r0, r4
 8002090:	4798      	blx	r3
 8002092:	e010      	b.n	80020b6 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002094:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002096:	b173      	cbz	r3, 80020b6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002098:	4620      	mov	r0, r4
 800209a:	4798      	blx	r3
 800209c:	e00b      	b.n	80020b6 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80020a4:	d103      	bne.n	80020ae <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	f022 0208 	bic.w	r2, r2, #8
 80020ac:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80020ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020b0:	b10b      	cbz	r3, 80020b6 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80020b2:	4620      	mov	r0, r4
 80020b4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020b6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80020b8:	2320      	movs	r3, #32
 80020ba:	4093      	lsls	r3, r2
 80020bc:	4233      	tst	r3, r6
 80020be:	d054      	beq.n	800216a <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020c0:	6822      	ldr	r2, [r4, #0]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	f012 0f10 	tst.w	r2, #16
 80020c8:	d04f      	beq.n	800216a <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ca:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020cc:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80020d0:	2b05      	cmp	r3, #5
 80020d2:	d00e      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80020dc:	d033      	beq.n	8002146 <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80020e4:	d12a      	bne.n	800213c <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 80020e6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d03e      	beq.n	800216a <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 80020ec:	4620      	mov	r0, r4
 80020ee:	4798      	blx	r3
 80020f0:	e03b      	b.n	800216a <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020f2:	6822      	ldr	r2, [r4, #0]
 80020f4:	6813      	ldr	r3, [r2, #0]
 80020f6:	f023 0316 	bic.w	r3, r3, #22
 80020fa:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020fc:	6822      	ldr	r2, [r4, #0]
 80020fe:	6953      	ldr	r3, [r2, #20]
 8002100:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002104:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002106:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002108:	b1a3      	cbz	r3, 8002134 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800210a:	6822      	ldr	r2, [r4, #0]
 800210c:	6813      	ldr	r3, [r2, #0]
 800210e:	f023 0308 	bic.w	r3, r3, #8
 8002112:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002114:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002116:	233f      	movs	r3, #63	@ 0x3f
 8002118:	4093      	lsls	r3, r2
 800211a:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800211c:	2301      	movs	r3, #1
 800211e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002122:	2300      	movs	r3, #0
 8002124:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8002128:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800212a:	2b00      	cmp	r3, #0
 800212c:	d03f      	beq.n	80021ae <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 800212e:	4620      	mov	r0, r4
 8002130:	4798      	blx	r3
        return;
 8002132:	e03c      	b.n	80021ae <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002134:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1e7      	bne.n	800210a <HAL_DMA_IRQHandler+0x12a>
 800213a:	e7eb      	b.n	8002114 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 800213c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800213e:	b1a3      	cbz	r3, 800216a <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8002140:	4620      	mov	r0, r4
 8002142:	4798      	blx	r3
 8002144:	e011      	b.n	800216a <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800214c:	d109      	bne.n	8002162 <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	f022 0210 	bic.w	r2, r2, #16
 8002154:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002156:	2301      	movs	r3, #1
 8002158:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800215c:	2300      	movs	r3, #0
 800215e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8002162:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002164:	b10b      	cbz	r3, 800216a <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 8002166:	4620      	mov	r0, r4
 8002168:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800216a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800216c:	b1fb      	cbz	r3, 80021ae <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800216e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002170:	f013 0f01 	tst.w	r3, #1
 8002174:	d017      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002176:	2305      	movs	r3, #5
 8002178:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800217c:	6822      	ldr	r2, [r4, #0]
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002186:	9b01      	ldr	r3, [sp, #4]
 8002188:	3301      	adds	r3, #1
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	42ab      	cmp	r3, r5
 800218e:	d804      	bhi.n	800219a <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f013 0f01 	tst.w	r3, #1
 8002198:	d1f5      	bne.n	8002186 <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 800219a:	2301      	movs	r3, #1
 800219c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80021a0:	2300      	movs	r3, #0
 80021a2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80021a6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80021a8:	b10b      	cbz	r3, 80021ae <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 80021aa:	4620      	mov	r0, r4
 80021ac:	4798      	blx	r3
}
 80021ae:	b003      	add	sp, #12
 80021b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000010 	.word	0x20000010
 80021b8:	1b4e81b5 	.word	0x1b4e81b5

080021bc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021bc:	2300      	movs	r3, #0
 80021be:	2b0f      	cmp	r3, #15
 80021c0:	f200 80d7 	bhi.w	8002372 <HAL_GPIO_Init+0x1b6>
{
 80021c4:	b570      	push	{r4, r5, r6, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	e065      	b.n	8002296 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ca:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021cc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80021d0:	2403      	movs	r4, #3
 80021d2:	fa04 f40e 	lsl.w	r4, r4, lr
 80021d6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021da:	68cc      	ldr	r4, [r1, #12]
 80021dc:	fa04 f40e 	lsl.w	r4, r4, lr
 80021e0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80021e2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ea:	684a      	ldr	r2, [r1, #4]
 80021ec:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80021f0:	409a      	lsls	r2, r3
 80021f2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80021f4:	6042      	str	r2, [r0, #4]
 80021f6:	e05c      	b.n	80022b2 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021f8:	08dc      	lsrs	r4, r3, #3
 80021fa:	3408      	adds	r4, #8
 80021fc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002200:	f003 0507 	and.w	r5, r3, #7
 8002204:	00ad      	lsls	r5, r5, #2
 8002206:	f04f 0e0f 	mov.w	lr, #15
 800220a:	fa0e fe05 	lsl.w	lr, lr, r5
 800220e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002212:	690a      	ldr	r2, [r1, #16]
 8002214:	40aa      	lsls	r2, r5
 8002216:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800221a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800221e:	e05c      	b.n	80022da <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002220:	2204      	movs	r2, #4
 8002222:	e000      	b.n	8002226 <HAL_GPIO_Init+0x6a>
 8002224:	2200      	movs	r2, #0
 8002226:	fa02 f20e 	lsl.w	r2, r2, lr
 800222a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800222c:	3402      	adds	r4, #2
 800222e:	4d51      	ldr	r5, [pc, #324]	@ (8002374 <HAL_GPIO_Init+0x1b8>)
 8002230:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002234:	4a50      	ldr	r2, [pc, #320]	@ (8002378 <HAL_GPIO_Init+0x1bc>)
 8002236:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002238:	ea6f 020c 	mvn.w	r2, ip
 800223c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002240:	684e      	ldr	r6, [r1, #4]
 8002242:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8002246:	d001      	beq.n	800224c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8002248:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 800224c:	4c4a      	ldr	r4, [pc, #296]	@ (8002378 <HAL_GPIO_Init+0x1bc>)
 800224e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8002250:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002252:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002256:	684e      	ldr	r6, [r1, #4]
 8002258:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 800225c:	d001      	beq.n	8002262 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800225e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8002262:	4c45      	ldr	r4, [pc, #276]	@ (8002378 <HAL_GPIO_Init+0x1bc>)
 8002264:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8002266:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002268:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800226c:	684e      	ldr	r6, [r1, #4]
 800226e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8002272:	d001      	beq.n	8002278 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8002274:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8002278:	4c3f      	ldr	r4, [pc, #252]	@ (8002378 <HAL_GPIO_Init+0x1bc>)
 800227a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800227e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002280:	684d      	ldr	r5, [r1, #4]
 8002282:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8002286:	d001      	beq.n	800228c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8002288:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 800228c:	4c3a      	ldr	r4, [pc, #232]	@ (8002378 <HAL_GPIO_Init+0x1bc>)
 800228e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002290:	3301      	adds	r3, #1
 8002292:	2b0f      	cmp	r3, #15
 8002294:	d86b      	bhi.n	800236e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8002296:	2201      	movs	r2, #1
 8002298:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229a:	680c      	ldr	r4, [r1, #0]
 800229c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80022a0:	ea32 0404 	bics.w	r4, r2, r4
 80022a4:	d1f4      	bne.n	8002290 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a6:	684c      	ldr	r4, [r1, #4]
 80022a8:	f004 0403 	and.w	r4, r4, #3
 80022ac:	3c01      	subs	r4, #1
 80022ae:	2c01      	cmp	r4, #1
 80022b0:	d98b      	bls.n	80021ca <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b2:	684a      	ldr	r2, [r1, #4]
 80022b4:	f002 0203 	and.w	r2, r2, #3
 80022b8:	2a03      	cmp	r2, #3
 80022ba:	d009      	beq.n	80022d0 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80022bc:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022be:	005d      	lsls	r5, r3, #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	40aa      	lsls	r2, r5
 80022c4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c8:	688a      	ldr	r2, [r1, #8]
 80022ca:	40aa      	lsls	r2, r5
 80022cc:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80022ce:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d0:	684a      	ldr	r2, [r1, #4]
 80022d2:	f002 0203 	and.w	r2, r2, #3
 80022d6:	2a02      	cmp	r2, #2
 80022d8:	d08e      	beq.n	80021f8 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80022da:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022dc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80022e0:	2203      	movs	r2, #3
 80022e2:	fa02 f20e 	lsl.w	r2, r2, lr
 80022e6:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ea:	684a      	ldr	r2, [r1, #4]
 80022ec:	f002 0203 	and.w	r2, r2, #3
 80022f0:	fa02 f20e 	lsl.w	r2, r2, lr
 80022f4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80022f6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022f8:	684a      	ldr	r2, [r1, #4]
 80022fa:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80022fe:	d0c7      	beq.n	8002290 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002300:	2200      	movs	r2, #0
 8002302:	9201      	str	r2, [sp, #4]
 8002304:	4a1d      	ldr	r2, [pc, #116]	@ (800237c <HAL_GPIO_Init+0x1c0>)
 8002306:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8002308:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800230c:	6454      	str	r4, [r2, #68]	@ 0x44
 800230e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002310:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002314:	9201      	str	r2, [sp, #4]
 8002316:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002318:	089c      	lsrs	r4, r3, #2
 800231a:	1ca5      	adds	r5, r4, #2
 800231c:	4a15      	ldr	r2, [pc, #84]	@ (8002374 <HAL_GPIO_Init+0x1b8>)
 800231e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002322:	f003 0e03 	and.w	lr, r3, #3
 8002326:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f20e 	lsl.w	r2, r2, lr
 8002330:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002334:	4a12      	ldr	r2, [pc, #72]	@ (8002380 <HAL_GPIO_Init+0x1c4>)
 8002336:	4290      	cmp	r0, r2
 8002338:	f43f af74 	beq.w	8002224 <HAL_GPIO_Init+0x68>
 800233c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002340:	4290      	cmp	r0, r2
 8002342:	d00e      	beq.n	8002362 <HAL_GPIO_Init+0x1a6>
 8002344:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002348:	4290      	cmp	r0, r2
 800234a:	d00c      	beq.n	8002366 <HAL_GPIO_Init+0x1aa>
 800234c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002350:	4290      	cmp	r0, r2
 8002352:	d00a      	beq.n	800236a <HAL_GPIO_Init+0x1ae>
 8002354:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002358:	4290      	cmp	r0, r2
 800235a:	f43f af61 	beq.w	8002220 <HAL_GPIO_Init+0x64>
 800235e:	2207      	movs	r2, #7
 8002360:	e761      	b.n	8002226 <HAL_GPIO_Init+0x6a>
 8002362:	2201      	movs	r2, #1
 8002364:	e75f      	b.n	8002226 <HAL_GPIO_Init+0x6a>
 8002366:	2202      	movs	r2, #2
 8002368:	e75d      	b.n	8002226 <HAL_GPIO_Init+0x6a>
 800236a:	2203      	movs	r2, #3
 800236c:	e75b      	b.n	8002226 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800236e:	b002      	add	sp, #8
 8002370:	bd70      	pop	{r4, r5, r6, pc}
 8002372:	4770      	bx	lr
 8002374:	40013800 	.word	0x40013800
 8002378:	40013c00 	.word	0x40013c00
 800237c:	40023800 	.word	0x40023800
 8002380:	40020000 	.word	0x40020000

08002384 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002384:	6903      	ldr	r3, [r0, #16]
 8002386:	4219      	tst	r1, r3
 8002388:	d001      	beq.n	800238e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800238a:	2001      	movs	r0, #1
 800238c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800238e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002390:	4770      	bx	lr

08002392 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002392:	b10a      	cbz	r2, 8002398 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002394:	6181      	str	r1, [r0, #24]
 8002396:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002398:	0409      	lsls	r1, r1, #16
 800239a:	6181      	str	r1, [r0, #24]
  }
}
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a0:	b500      	push	{lr}
 80023a2:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a4:	2200      	movs	r2, #0
 80023a6:	9200      	str	r2, [sp, #0]
 80023a8:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <HAL_MspInit+0x40>)
 80023aa:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80023ac:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80023b0:	6459      	str	r1, [r3, #68]	@ 0x44
 80023b2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80023b4:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80023b8:	9100      	str	r1, [sp, #0]
 80023ba:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023bc:	9201      	str	r2, [sp, #4]
 80023be:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80023c0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80023c4:	6419      	str	r1, [r3, #64]	@ 0x40
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023d0:	210f      	movs	r1, #15
 80023d2:	f06f 0001 	mvn.w	r0, #1
 80023d6:	f7ff fd23 	bl	8001e20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023da:	b003      	add	sp, #12
 80023dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80023e0:	40023800 	.word	0x40023800

080023e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023e8:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ea:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80023ee:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80023f2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80023f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d854      	bhi.n	80024a8 <PCD_WriteEmptyTxFifo+0xc4>
 80023fe:	4607      	mov	r7, r0
 8002400:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8002402:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8002404:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8002408:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800240c:	69d2      	ldr	r2, [r2, #28]
 800240e:	429a      	cmp	r2, r3
 8002410:	d300      	bcc.n	8002414 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8002412:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8002414:	f102 0903 	add.w	r9, r2, #3
 8002418:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800241c:	e015      	b.n	800244a <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 800241e:	f106 0903 	add.w	r9, r6, #3
 8002422:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 8002426:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002428:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 800242c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8002430:	6a29      	ldr	r1, [r5, #32]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	b2b3      	uxth	r3, r6
 8002436:	b2e2      	uxtb	r2, r4
 8002438:	4640      	mov	r0, r8
 800243a:	f002 f9dc 	bl	80047f6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800243e:	6a2b      	ldr	r3, [r5, #32]
 8002440:	4433      	add	r3, r6
 8002442:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8002444:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002446:	4433      	add	r3, r6
 8002448:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800244a:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 800244e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002456:	454b      	cmp	r3, r9
 8002458:	d312      	bcc.n	8002480 <PCD_WriteEmptyTxFifo+0x9c>
 800245a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800245e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8002462:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002466:	429a      	cmp	r2, r3
 8002468:	d20a      	bcs.n	8002480 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800246a:	b14b      	cbz	r3, 8002480 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 800246c:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 800246e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8002472:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8002476:	69d6      	ldr	r6, [r2, #28]
 8002478:	429e      	cmp	r6, r3
 800247a:	d3d0      	bcc.n	800241e <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 800247c:	461e      	mov	r6, r3
 800247e:	e7ce      	b.n	800241e <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002480:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002484:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8002488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800248a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248c:	429a      	cmp	r2, r3
 800248e:	d80f      	bhi.n	80024b0 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002490:	f004 040f 	and.w	r4, r4, #15
 8002494:	2201      	movs	r2, #1
 8002496:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002498:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 800249c:	ea23 0302 	bic.w	r3, r3, r2
 80024a0:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 80024a4:	2000      	movs	r0, #0
 80024a6:	e000      	b.n	80024aa <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 80024a8:	2001      	movs	r0, #1
}
 80024aa:	b003      	add	sp, #12
 80024ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 80024b0:	2000      	movs	r0, #0
 80024b2:	e7fa      	b.n	80024aa <PCD_WriteEmptyTxFifo+0xc6>

080024b4 <HAL_PCD_Init>:
{
 80024b4:	b530      	push	{r4, r5, lr}
 80024b6:	b083      	sub	sp, #12
  if (hpcd == NULL)
 80024b8:	2800      	cmp	r0, #0
 80024ba:	d07a      	beq.n	80025b2 <HAL_PCD_Init+0xfe>
 80024bc:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 80024be:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024c0:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 80024c4:	b1c3      	cbz	r3, 80024f8 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80024c6:	2303      	movs	r3, #3
 80024c8:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 80024cc:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 80024d0:	d017      	beq.n	8002502 <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 80024d2:	6820      	ldr	r0, [r4, #0]
 80024d4:	f001 ff40 	bl	8004358 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024d8:	7c23      	ldrb	r3, [r4, #16]
 80024da:	f88d 3000 	strb.w	r3, [sp]
 80024de:	1d23      	adds	r3, r4, #4
 80024e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e2:	6820      	ldr	r0, [r4, #0]
 80024e4:	f001 fe77 	bl	80041d6 <USB_CoreInit>
 80024e8:	b170      	cbz	r0, 8002508 <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ea:	2302      	movs	r3, #2
 80024ec:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80024f0:	2501      	movs	r5, #1
}
 80024f2:	4628      	mov	r0, r5
 80024f4:	b003      	add	sp, #12
 80024f6:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80024f8:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 80024fc:	f004 fa7a 	bl	80069f4 <HAL_PCD_MspInit>
 8002500:	e7e1      	b.n	80024c6 <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	71a3      	strb	r3, [r4, #6]
 8002506:	e7e4      	b.n	80024d2 <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002508:	2100      	movs	r1, #0
 800250a:	6820      	ldr	r0, [r4, #0]
 800250c:	f002 fb89 	bl	8004c22 <USB_SetCurrentMode>
 8002510:	4602      	mov	r2, r0
 8002512:	b9b8      	cbnz	r0, 8002544 <HAL_PCD_Init+0x90>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002514:	4603      	mov	r3, r0
 8002516:	7920      	ldrb	r0, [r4, #4]
 8002518:	4298      	cmp	r0, r3
 800251a:	d918      	bls.n	800254e <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 800251c:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8002520:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002524:	2001      	movs	r0, #1
 8002526:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8002528:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800252a:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800252c:	2000      	movs	r0, #0
 800252e:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002530:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002532:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002534:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8002538:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800253c:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253e:	3301      	adds	r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e7e8      	b.n	8002516 <HAL_PCD_Init+0x62>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002544:	2302      	movs	r3, #2
 8002546:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800254a:	2501      	movs	r5, #1
 800254c:	e7d1      	b.n	80024f2 <HAL_PCD_Init+0x3e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254e:	4290      	cmp	r0, r2
 8002550:	d917      	bls.n	8002582 <HAL_PCD_Init+0xce>
    hpcd->OUT_ep[i].is_in = 0U;
 8002552:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8002556:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800255a:	2100      	movs	r1, #0
 800255c:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8002560:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002564:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002568:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800256c:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002570:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8002574:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002578:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257c:	3201      	adds	r2, #1
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	e7e5      	b.n	800254e <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002582:	7c23      	ldrb	r3, [r4, #16]
 8002584:	f88d 3000 	strb.w	r3, [sp]
 8002588:	1d23      	adds	r3, r4, #4
 800258a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258c:	6820      	ldr	r0, [r4, #0]
 800258e:	f001 ff39 	bl	8004404 <USB_DevInit>
 8002592:	4605      	mov	r5, r0
 8002594:	b120      	cbz	r0, 80025a0 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002596:	2302      	movs	r3, #2
 8002598:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800259c:	2501      	movs	r5, #1
 800259e:	e7a8      	b.n	80024f2 <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025a4:	2301      	movs	r3, #1
 80025a6:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 80025aa:	6820      	ldr	r0, [r4, #0]
 80025ac:	f002 faf8 	bl	8004ba0 <USB_DevDisconnect>
  return HAL_OK;
 80025b0:	e79f      	b.n	80024f2 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 80025b2:	2501      	movs	r5, #1
 80025b4:	e79d      	b.n	80024f2 <HAL_PCD_Init+0x3e>

080025b6 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025b6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 80025b8:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 80025bc:	2a01      	cmp	r2, #1
 80025be:	d01a      	beq.n	80025f6 <HAL_PCD_Start+0x40>
{
 80025c0:	b510      	push	{r4, lr}
 80025c2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80025c4:	2201      	movs	r2, #1
 80025c6:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80025d0:	d002      	beq.n	80025d8 <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 80025d2:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80025d4:	2a01      	cmp	r2, #1
 80025d6:	d009      	beq.n	80025ec <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 80025d8:	6820      	ldr	r0, [r4, #0]
 80025da:	f001 feb7 	bl	800434c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025de:	6820      	ldr	r0, [r4, #0]
 80025e0:	f002 fad0 	bl	8004b84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025e4:	2000      	movs	r0, #0
 80025e6:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80025ea:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025ee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80025f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80025f4:	e7f0      	b.n	80025d8 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 80025f6:	2002      	movs	r0, #2
}
 80025f8:	4770      	bx	lr
	...

080025fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025fc:	b570      	push	{r4, r5, r6, lr}
 80025fe:	4604      	mov	r4, r0
 8002600:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002602:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002604:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002606:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800260a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800260e:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002610:	79a1      	ldrb	r1, [r4, #6]
 8002612:	2901      	cmp	r1, #1
 8002614:	d011      	beq.n	800263a <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002616:	4938      	ldr	r1, [pc, #224]	@ (80026f8 <PCD_EP_OutXfrComplete_int+0xfc>)
 8002618:	428e      	cmp	r6, r1
 800261a:	d056      	beq.n	80026ca <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800261c:	b93d      	cbnz	r5, 800262e <PCD_EP_OutXfrComplete_int+0x32>
 800261e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8002622:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002626:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800262a:	2b00      	cmp	r3, #0
 800262c:	d05e      	beq.n	80026ec <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800262e:	b2e9      	uxtb	r1, r5
 8002630:	4620      	mov	r0, r4
 8002632:	f004 fa2b 	bl	8006a8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8002636:	2000      	movs	r0, #0
 8002638:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800263a:	f012 0f08 	tst.w	r2, #8
 800263e:	d009      	beq.n	8002654 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002640:	492e      	ldr	r1, [pc, #184]	@ (80026fc <PCD_EP_OutXfrComplete_int+0x100>)
 8002642:	428e      	cmp	r6, r1
 8002644:	d9f7      	bls.n	8002636 <PCD_EP_OutXfrComplete_int+0x3a>
 8002646:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800264a:	d0f4      	beq.n	8002636 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800264c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	e7f0      	b.n	8002636 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002654:	f012 0f20 	tst.w	r2, #32
 8002658:	d002      	beq.n	8002660 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800265a:	2220      	movs	r2, #32
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	e7ea      	b.n	8002636 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002660:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8002664:	d1e7      	bne.n	8002636 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002666:	4925      	ldr	r1, [pc, #148]	@ (80026fc <PCD_EP_OutXfrComplete_int+0x100>)
 8002668:	428e      	cmp	r6, r1
 800266a:	d906      	bls.n	800267a <PCD_EP_OutXfrComplete_int+0x7e>
 800266c:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8002670:	d003      	beq.n	800267a <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002672:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	e7dd      	b.n	8002636 <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800267a:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800267e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002682:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268c:	1acb      	subs	r3, r1, r3
 800268e:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 8002692:	b97d      	cbnz	r5, 80026b4 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 8002694:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8002698:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800269c:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 80026a0:	b16a      	cbz	r2, 80026be <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 80026a2:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80026a6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80026aa:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 80026ae:	4419      	add	r1, r3
 80026b0:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026b4:	b2e9      	uxtb	r1, r5
 80026b6:	4620      	mov	r0, r4
 80026b8:	f004 f9e8 	bl	8006a8c <HAL_PCD_DataOutStageCallback>
 80026bc:	e7bb      	b.n	8002636 <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026be:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80026c2:	2101      	movs	r1, #1
 80026c4:	f002 faec 	bl	8004ca0 <USB_EP0_OutStart>
 80026c8:	e7f4      	b.n	80026b4 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026ca:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80026ce:	d003      	beq.n	80026d8 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	e7ae      	b.n	8002636 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026d8:	f012 0f20 	tst.w	r2, #32
 80026dc:	d001      	beq.n	80026e2 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026de:	2220      	movs	r2, #32
 80026e0:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026e2:	b2e9      	uxtb	r1, r5
 80026e4:	4620      	mov	r0, r4
 80026e6:	f004 f9d1 	bl	8006a8c <HAL_PCD_DataOutStageCallback>
 80026ea:	e7a4      	b.n	8002636 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026ec:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80026f0:	2100      	movs	r1, #0
 80026f2:	f002 fad5 	bl	8004ca0 <USB_EP0_OutStart>
 80026f6:	e79a      	b.n	800262e <PCD_EP_OutXfrComplete_int+0x32>
 80026f8:	4f54310a 	.word	0x4f54310a
 80026fc:	4f54300a 	.word	0x4f54300a

08002700 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002700:	b538      	push	{r3, r4, r5, lr}
 8002702:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002704:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002706:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002708:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800270c:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002710:	4a0e      	ldr	r2, [pc, #56]	@ (800274c <PCD_EP_OutSetupPacket_int+0x4c>)
 8002712:	4295      	cmp	r5, r2
 8002714:	d907      	bls.n	8002726 <PCD_EP_OutSetupPacket_int+0x26>
 8002716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800271a:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 800271e:	d002      	beq.n	8002726 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002720:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002724:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002726:	4620      	mov	r0, r4
 8002728:	f004 f9a8 	bl	8006a7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800272c:	4b07      	ldr	r3, [pc, #28]	@ (800274c <PCD_EP_OutSetupPacket_int+0x4c>)
 800272e:	429d      	cmp	r5, r3
 8002730:	d902      	bls.n	8002738 <PCD_EP_OutSetupPacket_int+0x38>
 8002732:	79a3      	ldrb	r3, [r4, #6]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d001      	beq.n	800273c <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8002738:	2000      	movs	r0, #0
 800273a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800273c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002740:	2101      	movs	r1, #1
 8002742:	6820      	ldr	r0, [r4, #0]
 8002744:	f002 faac 	bl	8004ca0 <USB_EP0_OutStart>
 8002748:	e7f6      	b.n	8002738 <PCD_EP_OutSetupPacket_int+0x38>
 800274a:	bf00      	nop
 800274c:	4f54300a 	.word	0x4f54300a

08002750 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002750:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8002754:	2b01      	cmp	r3, #1
 8002756:	d00c      	beq.n	8002772 <HAL_PCD_SetAddress+0x22>
{
 8002758:	b510      	push	{r4, lr}
 800275a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800275c:	2301      	movs	r3, #1
 800275e:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002762:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002764:	6800      	ldr	r0, [r0, #0]
 8002766:	f002 f9fd 	bl	8004b64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800276a:	2000      	movs	r0, #0
 800276c:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8002770:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002772:	2002      	movs	r0, #2
}
 8002774:	4770      	bx	lr

08002776 <HAL_PCD_EP_Open>:
{
 8002776:	b538      	push	{r3, r4, r5, lr}
 8002778:	4605      	mov	r5, r0
 800277a:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800277c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002780:	d12b      	bne.n	80027da <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002782:	f001 0e0f 	and.w	lr, r1, #15
 8002786:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 800278a:	00a4      	lsls	r4, r4, #2
 800278c:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 8002790:	4404      	add	r4, r0
 8002792:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8002794:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8002798:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800279c:	2000      	movs	r0, #0
 800279e:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80027a2:	f00c 0c0f 	and.w	ip, ip, #15
 80027a6:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80027aa:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80027ae:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80027b0:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 80027b2:	784a      	ldrb	r2, [r1, #1]
 80027b4:	b10a      	cbz	r2, 80027ba <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 80027b6:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d01c      	beq.n	80027f8 <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 80027be:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d01b      	beq.n	80027fe <HAL_PCD_EP_Open+0x88>
 80027c6:	2301      	movs	r3, #1
 80027c8:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027cc:	6828      	ldr	r0, [r5, #0]
 80027ce:	f001 fef6 	bl	80045be <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027d2:	2000      	movs	r0, #0
 80027d4:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 80027d8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027da:	f001 000f 	and.w	r0, r1, #15
 80027de:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 80027e2:	0089      	lsls	r1, r1, #2
 80027e4:	3110      	adds	r1, #16
 80027e6:	4429      	add	r1, r5
 80027e8:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80027ea:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80027ee:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80027f2:	2401      	movs	r4, #1
 80027f4:	7544      	strb	r4, [r0, #21]
 80027f6:	e7d4      	b.n	80027a2 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	714b      	strb	r3, [r1, #5]
 80027fc:	e7df      	b.n	80027be <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 80027fe:	2002      	movs	r0, #2
 8002800:	e7ea      	b.n	80027d8 <HAL_PCD_EP_Open+0x62>

08002802 <HAL_PCD_EP_Close>:
{
 8002802:	b510      	push	{r4, lr}
 8002804:	4604      	mov	r4, r0
 8002806:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002808:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800280c:	d120      	bne.n	8002850 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800280e:	f001 000f 	and.w	r0, r1, #15
 8002812:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800281c:	4423      	add	r3, r4
 800281e:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8002820:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8002824:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002828:	2300      	movs	r3, #0
 800282a:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 800282e:	f002 020f 	and.w	r2, r2, #15
 8002832:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002834:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002838:	2b01      	cmp	r3, #1
 800283a:	d018      	beq.n	800286e <HAL_PCD_EP_Close+0x6c>
 800283c:	2301      	movs	r3, #1
 800283e:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002842:	6820      	ldr	r0, [r4, #0]
 8002844:	f001 ff08 	bl	8004658 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002848:	2000      	movs	r0, #0
 800284a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800284e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002850:	f001 000f 	and.w	r0, r1, #15
 8002854:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	3310      	adds	r3, #16
 800285c:	4423      	add	r3, r4
 800285e:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8002860:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8002864:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002868:	2301      	movs	r3, #1
 800286a:	7543      	strb	r3, [r0, #21]
 800286c:	e7df      	b.n	800282e <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 800286e:	2002      	movs	r0, #2
 8002870:	e7ed      	b.n	800284e <HAL_PCD_EP_Close+0x4c>

08002872 <HAL_PCD_EP_Receive>:
{
 8002872:	b510      	push	{r4, lr}
 8002874:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002876:	f001 0c0f 	and.w	ip, r1, #15
 800287a:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 800287e:	0089      	lsls	r1, r1, #2
 8002880:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8002884:	4401      	add	r1, r0
 8002886:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8002888:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 800288c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8002890:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 8002894:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 800289e:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80028a2:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 80028a6:	7982      	ldrb	r2, [r0, #6]
 80028a8:	2a01      	cmp	r2, #1
 80028aa:	d004      	beq.n	80028b6 <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028ac:	6800      	ldr	r0, [r0, #0]
 80028ae:	f001 ffb9 	bl	8004824 <USB_EPStartXfer>
}
 80028b2:	2000      	movs	r0, #0
 80028b4:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80028b6:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 80028ba:	e7f7      	b.n	80028ac <HAL_PCD_EP_Receive+0x3a>

080028bc <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028bc:	f001 010f 	and.w	r1, r1, #15
 80028c0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80028c4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80028c8:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 80028cc:	4770      	bx	lr

080028ce <HAL_PCD_EP_Transmit>:
{
 80028ce:	b510      	push	{r4, lr}
 80028d0:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d2:	f001 0c0f 	and.w	ip, r1, #15
 80028d6:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80028da:	0089      	lsls	r1, r1, #2
 80028dc:	3110      	adds	r1, #16
 80028de:	4401      	add	r1, r0
 80028e0:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80028e2:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80028e6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80028ea:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 80028ee:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 80028f8:	2301      	movs	r3, #1
 80028fa:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028fe:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 8002902:	7982      	ldrb	r2, [r0, #6]
 8002904:	429a      	cmp	r2, r3
 8002906:	d004      	beq.n	8002912 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002908:	6800      	ldr	r0, [r0, #0]
 800290a:	f001 ff8b 	bl	8004824 <USB_EPStartXfer>
}
 800290e:	2000      	movs	r0, #0
 8002910:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002912:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 8002916:	e7f7      	b.n	8002908 <HAL_PCD_EP_Transmit+0x3a>

08002918 <HAL_PCD_EP_SetStall>:
{
 8002918:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800291a:	f001 050f 	and.w	r5, r1, #15
 800291e:	7902      	ldrb	r2, [r0, #4]
 8002920:	42aa      	cmp	r2, r5
 8002922:	d338      	bcc.n	8002996 <HAL_PCD_EP_SetStall+0x7e>
 8002924:	4604      	mov	r4, r0
 8002926:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8002928:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800292c:	d11f      	bne.n	800296e <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 800292e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002932:	0089      	lsls	r1, r1, #2
 8002934:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8002938:	4401      	add	r1, r0
 800293a:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800293c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002940:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 800294a:	2301      	movs	r3, #1
 800294c:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800294e:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002950:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002954:	2b01      	cmp	r3, #1
 8002956:	d020      	beq.n	800299a <HAL_PCD_EP_SetStall+0x82>
 8002958:	2301      	movs	r3, #1
 800295a:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800295e:	6820      	ldr	r0, [r4, #0]
 8002960:	f002 f8a5 	bl	8004aae <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002964:	b185      	cbz	r5, 8002988 <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 8002966:	2000      	movs	r0, #0
 8002968:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800296c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800296e:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8002972:	0089      	lsls	r1, r1, #2
 8002974:	3110      	adds	r1, #16
 8002976:	4401      	add	r1, r0
 8002978:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800297a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800297e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002982:	2201      	movs	r2, #1
 8002984:	755a      	strb	r2, [r3, #21]
 8002986:	e7e0      	b.n	800294a <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002988:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800298c:	79a1      	ldrb	r1, [r4, #6]
 800298e:	6820      	ldr	r0, [r4, #0]
 8002990:	f002 f986 	bl	8004ca0 <USB_EP0_OutStart>
 8002994:	e7e7      	b.n	8002966 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8002996:	2001      	movs	r0, #1
 8002998:	e7e8      	b.n	800296c <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 800299a:	2002      	movs	r0, #2
 800299c:	e7e6      	b.n	800296c <HAL_PCD_EP_SetStall+0x54>

0800299e <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800299e:	f001 030f 	and.w	r3, r1, #15
 80029a2:	7902      	ldrb	r2, [r0, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d330      	bcc.n	8002a0a <HAL_PCD_EP_ClrStall+0x6c>
{
 80029a8:	b510      	push	{r4, lr}
 80029aa:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80029ac:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80029b0:	d11e      	bne.n	80029f0 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029b2:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80029b6:	0089      	lsls	r1, r1, #2
 80029b8:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80029bc:	4401      	add	r1, r0
 80029be:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80029c0:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80029c4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80029c8:	2000      	movs	r0, #0
 80029ca:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 80029ce:	2200      	movs	r2, #0
 80029d0:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029d2:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80029d4:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d018      	beq.n	8002a0e <HAL_PCD_EP_ClrStall+0x70>
 80029dc:	2301      	movs	r3, #1
 80029de:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029e2:	6820      	ldr	r0, [r4, #0]
 80029e4:	f002 f890 	bl	8004b08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80029ee:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f0:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80029f4:	0089      	lsls	r1, r1, #2
 80029f6:	3110      	adds	r1, #16
 80029f8:	4401      	add	r1, r0
 80029fa:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80029fc:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002a00:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002a04:	2001      	movs	r0, #1
 8002a06:	7550      	strb	r0, [r2, #21]
 8002a08:	e7e1      	b.n	80029ce <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8002a0a:	2001      	movs	r0, #1
}
 8002a0c:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8002a0e:	2002      	movs	r0, #2
 8002a10:	e7ed      	b.n	80029ee <HAL_PCD_EP_ClrStall+0x50>

08002a12 <HAL_PCD_EP_Abort>:
{
 8002a12:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8002a14:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002a18:	d10c      	bne.n	8002a34 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a1a:	f001 010f 	and.w	r1, r1, #15
 8002a1e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002a22:	0089      	lsls	r1, r1, #2
 8002a24:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8002a28:	4401      	add	r1, r0
 8002a2a:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a2c:	6800      	ldr	r0, [r0, #0]
 8002a2e:	f001 fe83 	bl	8004738 <USB_EPStopXfer>
}
 8002a32:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a34:	f001 010f 	and.w	r1, r1, #15
 8002a38:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002a3c:	0089      	lsls	r1, r1, #2
 8002a3e:	3110      	adds	r1, #16
 8002a40:	4401      	add	r1, r0
 8002a42:	3104      	adds	r1, #4
 8002a44:	e7f2      	b.n	8002a2c <HAL_PCD_EP_Abort+0x1a>

08002a46 <HAL_PCD_IRQHandler>:
{
 8002a46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a4e:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a50:	4628      	mov	r0, r5
 8002a52:	f002 f8e2 	bl	8004c1a <USB_GetMode>
 8002a56:	b110      	cbz	r0, 8002a5e <HAL_PCD_IRQHandler+0x18>
}
 8002a58:	b003      	add	sp, #12
 8002a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a5e:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a60:	6820      	ldr	r0, [r4, #0]
 8002a62:	f002 f8ab 	bl	8004bbc <USB_ReadInterrupts>
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d0f6      	beq.n	8002a58 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a6a:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8002a74:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a78:	6820      	ldr	r0, [r4, #0]
 8002a7a:	f002 f89f 	bl	8004bbc <USB_ReadInterrupts>
 8002a7e:	f010 0f02 	tst.w	r0, #2
 8002a82:	d004      	beq.n	8002a8e <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a84:	6822      	ldr	r2, [r4, #0]
 8002a86:	6953      	ldr	r3, [r2, #20]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a8e:	6820      	ldr	r0, [r4, #0]
 8002a90:	f002 f894 	bl	8004bbc <USB_ReadInterrupts>
 8002a94:	f010 0f10 	tst.w	r0, #16
 8002a98:	d015      	beq.n	8002ac6 <HAL_PCD_IRQHandler+0x80>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a9a:	6822      	ldr	r2, [r4, #0]
 8002a9c:	6993      	ldr	r3, [r2, #24]
 8002a9e:	f023 0310 	bic.w	r3, r3, #16
 8002aa2:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8002aa4:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002aa8:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002aac:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 8002ab0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ab4:	d04c      	beq.n	8002b50 <HAL_PCD_IRQHandler+0x10a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ab6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002aba:	d06f      	beq.n	8002b9c <HAL_PCD_IRQHandler+0x156>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002abc:	6822      	ldr	r2, [r4, #0]
 8002abe:	6993      	ldr	r3, [r2, #24]
 8002ac0:	f043 0310 	orr.w	r3, r3, #16
 8002ac4:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ac6:	6820      	ldr	r0, [r4, #0]
 8002ac8:	f002 f878 	bl	8004bbc <USB_ReadInterrupts>
 8002acc:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8002ad0:	d176      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x17a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ad2:	6820      	ldr	r0, [r4, #0]
 8002ad4:	f002 f872 	bl	8004bbc <USB_ReadInterrupts>
 8002ad8:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8002adc:	f040 80e0 	bne.w	8002ca0 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ae0:	6820      	ldr	r0, [r4, #0]
 8002ae2:	f002 f86b 	bl	8004bbc <USB_ReadInterrupts>
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	f2c0 8161 	blt.w	8002dae <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002aec:	6820      	ldr	r0, [r4, #0]
 8002aee:	f002 f865 	bl	8004bbc <USB_ReadInterrupts>
 8002af2:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8002af6:	d009      	beq.n	8002b0c <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f013 0f01 	tst.w	r3, #1
 8002afe:	f040 816e 	bne.w	8002dde <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b02:	6822      	ldr	r2, [r4, #0]
 8002b04:	6953      	ldr	r3, [r2, #20]
 8002b06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b0a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b0c:	6820      	ldr	r0, [r4, #0]
 8002b0e:	f002 f855 	bl	8004bbc <USB_ReadInterrupts>
 8002b12:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8002b16:	f040 8166 	bne.w	8002de6 <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b1a:	6820      	ldr	r0, [r4, #0]
 8002b1c:	f002 f84e 	bl	8004bbc <USB_ReadInterrupts>
 8002b20:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8002b24:	f040 81b3 	bne.w	8002e8e <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b28:	6820      	ldr	r0, [r4, #0]
 8002b2a:	f002 f847 	bl	8004bbc <USB_ReadInterrupts>
 8002b2e:	f010 0f08 	tst.w	r0, #8
 8002b32:	f040 81c4 	bne.w	8002ebe <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b36:	6820      	ldr	r0, [r4, #0]
 8002b38:	f002 f840 	bl	8004bbc <USB_ReadInterrupts>
 8002b3c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8002b40:	f000 81d7 	beq.w	8002ef2 <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b44:	69ab      	ldr	r3, [r5, #24]
 8002b46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b4a:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b4c:	2601      	movs	r6, #1
 8002b4e:	e1c0      	b.n	8002ed2 <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b50:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002b54:	ea18 0f03 	tst.w	r8, r3
 8002b58:	d0b0      	beq.n	8002abc <HAL_PCD_IRQHandler+0x76>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b5a:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 8002b68:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8002b6c:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8002b70:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8002b74:	4628      	mov	r0, r5
 8002b76:	f001 ff77 	bl	8004a68 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b7a:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8002b7e:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8002b82:	4453      	add	r3, sl
 8002b84:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b88:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 8002b8c:	9a01      	ldr	r2, [sp, #4]
 8002b8e:	444a      	add	r2, r9
 8002b90:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002b94:	4453      	add	r3, sl
 8002b96:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8002b9a:	e78f      	b.n	8002abc <HAL_PCD_IRQHandler+0x76>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f001 ff60 	bl	8004a68 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ba8:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002bac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002bb0:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8002bb4:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8002bb8:	4442      	add	r2, r8
 8002bba:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 8002bbe:	e77d      	b.n	8002abc <HAL_PCD_IRQHandler+0x76>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bc0:	6820      	ldr	r0, [r4, #0]
 8002bc2:	f001 ffff 	bl	8004bc4 <USB_ReadDevAllOutEpInterrupt>
 8002bc6:	4680      	mov	r8, r0
      epnum = 0U;
 8002bc8:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002bca:	e035      	b.n	8002c38 <HAL_PCD_IRQHandler+0x1f2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002bcc:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f7ff fd0f 	bl	80025fc <PCD_EP_OutXfrComplete_int>
 8002bde:	e03c      	b.n	8002c5a <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002be0:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002be4:	2208      	movs	r2, #8
 8002be6:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bea:	4649      	mov	r1, r9
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7ff fd87 	bl	8002700 <PCD_EP_OutSetupPacket_int>
 8002bf2:	e035      	b.n	8002c60 <HAL_PCD_IRQHandler+0x21a>
            if (ep->is_iso_incomplete == 1U)
 8002bf4:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002bf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002bfc:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d041      	beq.n	8002c88 <HAL_PCD_IRQHandler+0x242>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c04:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c0e:	f01a 0f20 	tst.w	sl, #32
 8002c12:	d004      	beq.n	8002c1e <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c14:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c1e:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8002c22:	d005      	beq.n	8002c30 <HAL_PCD_IRQHandler+0x1ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c24:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002c28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c2c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8002c30:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002c34:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8002c38:	f1b8 0f00 	cmp.w	r8, #0
 8002c3c:	f43f af49 	beq.w	8002ad2 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 8002c40:	f018 0f01 	tst.w	r8, #1
 8002c44:	d0f4      	beq.n	8002c30 <HAL_PCD_IRQHandler+0x1ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c46:	fa5f fb89 	uxtb.w	fp, r9
 8002c4a:	4659      	mov	r1, fp
 8002c4c:	6820      	ldr	r0, [r4, #0]
 8002c4e:	f001 ffc9 	bl	8004be4 <USB_ReadDevOutEPInterrupt>
 8002c52:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c54:	f010 0f01 	tst.w	r0, #1
 8002c58:	d1b8      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x186>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c5a:	f01a 0f08 	tst.w	sl, #8
 8002c5e:	d1bf      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x19a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c60:	f01a 0f10 	tst.w	sl, #16
 8002c64:	d004      	beq.n	8002c70 <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c66:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c70:	f01a 0f02 	tst.w	sl, #2
 8002c74:	d0cb      	beq.n	8002c0e <HAL_PCD_IRQHandler+0x1c8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c76:	696b      	ldr	r3, [r5, #20]
 8002c78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002c7c:	d0ba      	beq.n	8002bf4 <HAL_PCD_IRQHandler+0x1ae>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	e7b5      	b.n	8002bf4 <HAL_PCD_IRQHandler+0x1ae>
              ep->is_iso_incomplete = 0U;
 8002c88:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002c8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c96:	4659      	mov	r1, fp
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f003 ff45 	bl	8006b28 <HAL_PCD_ISOOUTIncompleteCallback>
 8002c9e:	e7b1      	b.n	8002c04 <HAL_PCD_IRQHandler+0x1be>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ca0:	6820      	ldr	r0, [r4, #0]
 8002ca2:	f001 ff97 	bl	8004bd4 <USB_ReadDevAllInEpInterrupt>
 8002ca6:	4680      	mov	r8, r0
      epnum = 0U;
 8002ca8:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002caa:	e025      	b.n	8002cf8 <HAL_PCD_IRQHandler+0x2b2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cac:	4659      	mov	r1, fp
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f003 fef8 	bl	8006aa4 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cb4:	f01a 0f08 	tst.w	sl, #8
 8002cb8:	d004      	beq.n	8002cc4 <HAL_PCD_IRQHandler+0x27e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cba:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002cbe:	2208      	movs	r2, #8
 8002cc0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002cc4:	f01a 0f10 	tst.w	sl, #16
 8002cc8:	d004      	beq.n	8002cd4 <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cca:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002cce:	2210      	movs	r2, #16
 8002cd0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cd4:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8002cd8:	d004      	beq.n	8002ce4 <HAL_PCD_IRQHandler+0x29e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cda:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002cde:	2240      	movs	r2, #64	@ 0x40
 8002ce0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ce4:	f01a 0f02 	tst.w	sl, #2
 8002ce8:	d140      	bne.n	8002d6c <HAL_PCD_IRQHandler+0x326>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cea:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8002cee:	d159      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 8002cf0:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002cf4:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8002cf8:	f1b8 0f00 	cmp.w	r8, #0
 8002cfc:	f43f aef0 	beq.w	8002ae0 <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d00:	f018 0f01 	tst.w	r8, #1
 8002d04:	d0f4      	beq.n	8002cf0 <HAL_PCD_IRQHandler+0x2aa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d06:	fa5f fb89 	uxtb.w	fp, r9
 8002d0a:	4659      	mov	r1, fp
 8002d0c:	6820      	ldr	r0, [r4, #0]
 8002d0e:	f001 ff72 	bl	8004bf6 <USB_ReadDevInEPInterrupt>
 8002d12:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d14:	f010 0f01 	tst.w	r0, #1
 8002d18:	d0cc      	beq.n	8002cb4 <HAL_PCD_IRQHandler+0x26e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d1a:	f009 020f 	and.w	r2, r9, #15
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d26:	ea23 0302 	bic.w	r3, r3, r2
 8002d2a:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d2c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002d30:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8002d34:	79a3      	ldrb	r3, [r4, #6]
 8002d36:	428b      	cmp	r3, r1
 8002d38:	d1b8      	bne.n	8002cac <HAL_PCD_IRQHandler+0x266>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d3a:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002d3e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	69d9      	ldr	r1, [r3, #28]
 8002d46:	440a      	add	r2, r1
 8002d48:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d4a:	f1b9 0f00 	cmp.w	r9, #0
 8002d4e:	d1ad      	bne.n	8002cac <HAL_PCD_IRQHandler+0x266>
 8002d50:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002d54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1a6      	bne.n	8002cac <HAL_PCD_IRQHandler+0x266>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d5e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002d62:	2101      	movs	r1, #1
 8002d64:	6820      	ldr	r0, [r4, #0]
 8002d66:	f001 ff9b 	bl	8004ca0 <USB_EP0_OutStart>
 8002d6a:	e79f      	b.n	8002cac <HAL_PCD_IRQHandler+0x266>
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d6c:	4649      	mov	r1, r9
 8002d6e:	4628      	mov	r0, r5
 8002d70:	f001 faf8 	bl	8004364 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8002d74:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002d78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002d7c:	7ddb      	ldrb	r3, [r3, #23]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d005      	beq.n	8002d8e <HAL_PCD_IRQHandler+0x348>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d82:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002d86:	2202      	movs	r2, #2
 8002d88:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8002d8c:	e7ad      	b.n	8002cea <HAL_PCD_IRQHandler+0x2a4>
              ep->is_iso_incomplete = 0U;
 8002d8e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002d92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002d96:	2200      	movs	r2, #0
 8002d98:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d9a:	4659      	mov	r1, fp
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f003 fec9 	bl	8006b34 <HAL_PCD_ISOINIncompleteCallback>
 8002da2:	e7ee      	b.n	8002d82 <HAL_PCD_IRQHandler+0x33c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002da4:	4649      	mov	r1, r9
 8002da6:	4620      	mov	r0, r4
 8002da8:	f7ff fb1c 	bl	80023e4 <PCD_WriteEmptyTxFifo>
 8002dac:	e7a0      	b.n	8002cf0 <HAL_PCD_IRQHandler+0x2aa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8002db6:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d008      	beq.n	8002dd0 <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f003 feac 	bl	8006b1c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dc4:	6822      	ldr	r2, [r4, #0]
 8002dc6:	6953      	ldr	r3, [r2, #20]
 8002dc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dcc:	6153      	str	r3, [r2, #20]
 8002dce:	e68d      	b.n	8002aec <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	f000 f93f 	bl	800305a <HAL_PCDEx_LPM_Callback>
 8002ddc:	e7f2      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 8002dde:	4620      	mov	r0, r4
 8002de0:	f003 fe84 	bl	8006aec <HAL_PCD_SuspendCallback>
 8002de4:	e68d      	b.n	8002b02 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002dee:	2110      	movs	r1, #16
 8002df0:	6820      	ldr	r0, [r4, #0]
 8002df2:	f001 fab7 	bl	8004364 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df6:	e01a      	b.n	8002e2e <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002df8:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8002dfc:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8002e00:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e04:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002e08:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002e0c:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e10:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e14:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8002e18:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002e1c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e20:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8002e24:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8002e28:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2c:	3601      	adds	r6, #1
 8002e2e:	7923      	ldrb	r3, [r4, #4]
 8002e30:	42b3      	cmp	r3, r6
 8002e32:	d8e1      	bhi.n	8002df8 <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e3a:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e3c:	7be3      	ldrb	r3, [r4, #15]
 8002e3e:	b1db      	cbz	r3, 8002e78 <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e44:	f043 030b 	orr.w	r3, r3, #11
 8002e48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e4e:	f043 030b 	orr.w	r3, r3, #11
 8002e52:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e54:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 8002e58:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e5c:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e60:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002e64:	79a1      	ldrb	r1, [r4, #6]
 8002e66:	6820      	ldr	r0, [r4, #0]
 8002e68:	f001 ff1a 	bl	8004ca0 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e6c:	6822      	ldr	r2, [r4, #0]
 8002e6e:	6953      	ldr	r3, [r2, #20]
 8002e70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e74:	6153      	str	r3, [r2, #20]
 8002e76:	e650      	b.n	8002b1a <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e7e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002e82:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f043 030b 	orr.w	r3, r3, #11
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	e7e2      	b.n	8002e54 <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e8e:	6820      	ldr	r0, [r4, #0]
 8002e90:	f001 fef8 	bl	8004c84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e94:	6820      	ldr	r0, [r4, #0]
 8002e96:	f001 fb81 	bl	800459c <USB_GetDevSpeed>
 8002e9a:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e9c:	6826      	ldr	r6, [r4, #0]
 8002e9e:	f000 fbdd 	bl	800365c <HAL_RCC_GetHCLKFreq>
 8002ea2:	4601      	mov	r1, r0
 8002ea4:	79e2      	ldrb	r2, [r4, #7]
 8002ea6:	4630      	mov	r0, r6
 8002ea8:	f001 f9de 	bl	8004268 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8002eac:	4620      	mov	r0, r4
 8002eae:	f003 fe0a 	bl	8006ac6 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	6953      	ldr	r3, [r2, #20]
 8002eb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eba:	6153      	str	r3, [r2, #20]
 8002ebc:	e634      	b.n	8002b28 <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f003 fdfb 	bl	8006aba <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ec4:	6822      	ldr	r2, [r4, #0]
 8002ec6:	6953      	ldr	r3, [r2, #20]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	6153      	str	r3, [r2, #20]
 8002ece:	e632      	b.n	8002b36 <HAL_PCD_IRQHandler+0xf0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ed0:	3601      	adds	r6, #1
 8002ed2:	7923      	ldrb	r3, [r4, #4]
 8002ed4:	42b3      	cmp	r3, r6
 8002ed6:	d90c      	bls.n	8002ef2 <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ed8:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8002edc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002ee0:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d1f3      	bne.n	8002ed0 <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ee8:	b2f1      	uxtb	r1, r6
 8002eea:	4620      	mov	r0, r4
 8002eec:	f7ff fd91 	bl	8002a12 <HAL_PCD_EP_Abort>
 8002ef0:	e7ee      	b.n	8002ed0 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ef2:	6820      	ldr	r0, [r4, #0]
 8002ef4:	f001 fe62 	bl	8004bbc <USB_ReadInterrupts>
 8002ef8:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8002efc:	d125      	bne.n	8002f4a <HAL_PCD_IRQHandler+0x504>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002efe:	6820      	ldr	r0, [r4, #0]
 8002f00:	f001 fe5c 	bl	8004bbc <USB_ReadInterrupts>
 8002f04:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8002f08:	d059      	beq.n	8002fbe <HAL_PCD_IRQHandler+0x578>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e026      	b.n	8002f5c <HAL_PCD_IRQHandler+0x516>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f0e:	3601      	adds	r6, #1
 8002f10:	7923      	ldrb	r3, [r4, #4]
 8002f12:	42b3      	cmp	r3, r6
 8002f14:	d91b      	bls.n	8002f4e <HAL_PCD_IRQHandler+0x508>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f16:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8002f1a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f1e:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8002f22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002f26:	7e1b      	ldrb	r3, [r3, #24]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d1f0      	bne.n	8002f0e <HAL_PCD_IRQHandler+0x4c8>
 8002f2c:	2a00      	cmp	r2, #0
 8002f2e:	daee      	bge.n	8002f0e <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f30:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8002f34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002f38:	2201      	movs	r2, #1
 8002f3a:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f3c:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8002f40:	b2c9      	uxtb	r1, r1
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7ff fd65 	bl	8002a12 <HAL_PCD_EP_Abort>
 8002f48:	e7e1      	b.n	8002f0e <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f4a:	2601      	movs	r6, #1
 8002f4c:	e7e0      	b.n	8002f10 <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f4e:	6822      	ldr	r2, [r4, #0]
 8002f50:	6953      	ldr	r3, [r2, #20]
 8002f52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f56:	6153      	str	r3, [r2, #20]
 8002f58:	e7d1      	b.n	8002efe <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	7922      	ldrb	r2, [r4, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d928      	bls.n	8002fb4 <HAL_PCD_IRQHandler+0x56e>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f62:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002f66:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f6a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002f6e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002f72:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 8002f76:	2a01      	cmp	r2, #1
 8002f78:	d1ef      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x514>
 8002f7a:	2900      	cmp	r1, #0
 8002f7c:	daed      	bge.n	8002f5a <HAL_PCD_IRQHandler+0x514>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f7e:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 8002f82:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8002f86:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f8a:	4291      	cmp	r1, r2
 8002f8c:	d1e5      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x514>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f8e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002f92:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002f96:	2101      	movs	r1, #1
 8002f98:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f9c:	69aa      	ldr	r2, [r5, #24]
 8002f9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002fa2:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fa4:	696a      	ldr	r2, [r5, #20]
 8002fa6:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002faa:	d1d6      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x514>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fb2:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fb4:	6822      	ldr	r2, [r4, #0]
 8002fb6:	6953      	ldr	r3, [r2, #20]
 8002fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fbc:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fbe:	6820      	ldr	r0, [r4, #0]
 8002fc0:	f001 fdfc 	bl	8004bbc <USB_ReadInterrupts>
 8002fc4:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8002fc8:	d110      	bne.n	8002fec <HAL_PCD_IRQHandler+0x5a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fca:	6820      	ldr	r0, [r4, #0]
 8002fcc:	f001 fdf6 	bl	8004bbc <USB_ReadInterrupts>
 8002fd0:	f010 0f04 	tst.w	r0, #4
 8002fd4:	f43f ad40 	beq.w	8002a58 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fdc:	f015 0f04 	tst.w	r5, #4
 8002fe0:	d10d      	bne.n	8002ffe <HAL_PCD_IRQHandler+0x5b8>
      hpcd->Instance->GOTGINT |= RegVal;
 8002fe2:	6822      	ldr	r2, [r4, #0]
 8002fe4:	6853      	ldr	r3, [r2, #4]
 8002fe6:	432b      	orrs	r3, r5
 8002fe8:	6053      	str	r3, [r2, #4]
 8002fea:	e535      	b.n	8002a58 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8002fec:	4620      	mov	r0, r4
 8002fee:	f003 fda7 	bl	8006b40 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ff2:	6822      	ldr	r2, [r4, #0]
 8002ff4:	6953      	ldr	r3, [r2, #20]
 8002ff6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ffa:	6153      	str	r3, [r2, #20]
 8002ffc:	e7e5      	b.n	8002fca <HAL_PCD_IRQHandler+0x584>
        HAL_PCD_DisconnectCallback(hpcd);
 8002ffe:	4620      	mov	r0, r4
 8003000:	f003 fda4 	bl	8006b4c <HAL_PCD_DisconnectCallback>
 8003004:	e7ed      	b.n	8002fe2 <HAL_PCD_IRQHandler+0x59c>

08003006 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003006:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003008:	6804      	ldr	r4, [r0, #0]
 800300a:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 800300c:	b931      	cbnz	r1, 800301c <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800300e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003012:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003014:	2000      	movs	r0, #0
 8003016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800301e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003020:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003024:	2300      	movs	r3, #0
 8003026:	e008      	b.n	800303a <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003028:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800302c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003030:	6849      	ldr	r1, [r1, #4]
 8003032:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003036:	3301      	adds	r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800303e:	428b      	cmp	r3, r1
 8003040:	d3f2      	bcc.n	8003028 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003042:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003046:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 800304a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800304e:	6060      	str	r0, [r4, #4]
 8003050:	e7e0      	b.n	8003014 <HAL_PCDEx_SetTxFiFo+0xe>

08003052 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003052:	6803      	ldr	r3, [r0, #0]
 8003054:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8003056:	2000      	movs	r0, #0
 8003058:	4770      	bx	lr

0800305a <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800305a:	4770      	bx	lr

0800305c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800305c:	2800      	cmp	r0, #0
 800305e:	f000 81e0 	beq.w	8003422 <HAL_RCC_OscConfig+0x3c6>
{
 8003062:	b570      	push	{r4, r5, r6, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003068:	6803      	ldr	r3, [r0, #0]
 800306a:	f013 0f01 	tst.w	r3, #1
 800306e:	d03b      	beq.n	80030e8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003070:	4b9f      	ldr	r3, [pc, #636]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b04      	cmp	r3, #4
 800307a:	d02c      	beq.n	80030d6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307c:	4b9c      	ldr	r3, [pc, #624]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003084:	2b08      	cmp	r3, #8
 8003086:	d021      	beq.n	80030cc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003088:	6863      	ldr	r3, [r4, #4]
 800308a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800308e:	d04f      	beq.n	8003130 <HAL_RCC_OscConfig+0xd4>
 8003090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003094:	d052      	beq.n	800313c <HAL_RCC_OscConfig+0xe0>
 8003096:	4b96      	ldr	r3, [pc, #600]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a8:	6863      	ldr	r3, [r4, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d050      	beq.n	8003150 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fe fcb9 	bl	8001a24 <HAL_GetTick>
 80030b2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b4:	4b8e      	ldr	r3, [pc, #568]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80030bc:	d114      	bne.n	80030e8 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030be:	f7fe fcb1 	bl	8001a24 <HAL_GetTick>
 80030c2:	1b40      	subs	r0, r0, r5
 80030c4:	2864      	cmp	r0, #100	@ 0x64
 80030c6:	d9f5      	bls.n	80030b4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80030c8:	2003      	movs	r0, #3
 80030ca:	e1b1      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030cc:	4b88      	ldr	r3, [pc, #544]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80030d4:	d0d8      	beq.n	8003088 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d6:	4b86      	ldr	r3, [pc, #536]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80030de:	d003      	beq.n	80030e8 <HAL_RCC_OscConfig+0x8c>
 80030e0:	6863      	ldr	r3, [r4, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 819f 	beq.w	8003426 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	f013 0f02 	tst.w	r3, #2
 80030ee:	d054      	beq.n	800319a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030f0:	4b7f      	ldr	r3, [pc, #508]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f013 0f0c 	tst.w	r3, #12
 80030f8:	d03e      	beq.n	8003178 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030fa:	4b7d      	ldr	r3, [pc, #500]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003102:	2b08      	cmp	r3, #8
 8003104:	d033      	beq.n	800316e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003106:	68e3      	ldr	r3, [r4, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d068      	beq.n	80031de <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800310c:	4b79      	ldr	r3, [pc, #484]	@ (80032f4 <HAL_RCC_OscConfig+0x298>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003112:	f7fe fc87 	bl	8001a24 <HAL_GetTick>
 8003116:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003118:	4b75      	ldr	r3, [pc, #468]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f013 0f02 	tst.w	r3, #2
 8003120:	d154      	bne.n	80031cc <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003122:	f7fe fc7f 	bl	8001a24 <HAL_GetTick>
 8003126:	1b40      	subs	r0, r0, r5
 8003128:	2802      	cmp	r0, #2
 800312a:	d9f5      	bls.n	8003118 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800312c:	2003      	movs	r0, #3
 800312e:	e17f      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003130:	4a6f      	ldr	r2, [pc, #444]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 8003132:	6813      	ldr	r3, [r2, #0]
 8003134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e7b5      	b.n	80030a8 <HAL_RCC_OscConfig+0x4c>
 800313c:	4b6c      	ldr	r3, [pc, #432]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e7ab      	b.n	80030a8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8003150:	f7fe fc68 	bl	8001a24 <HAL_GetTick>
 8003154:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003156:	4b66      	ldr	r3, [pc, #408]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800315e:	d0c3      	beq.n	80030e8 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7fe fc60 	bl	8001a24 <HAL_GetTick>
 8003164:	1b40      	subs	r0, r0, r5
 8003166:	2864      	cmp	r0, #100	@ 0x64
 8003168:	d9f5      	bls.n	8003156 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800316a:	2003      	movs	r0, #3
 800316c:	e160      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316e:	4b60      	ldr	r3, [pc, #384]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003176:	d1c6      	bne.n	8003106 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003178:	4b5d      	ldr	r3, [pc, #372]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f013 0f02 	tst.w	r3, #2
 8003180:	d003      	beq.n	800318a <HAL_RCC_OscConfig+0x12e>
 8003182:	68e3      	ldr	r3, [r4, #12]
 8003184:	2b01      	cmp	r3, #1
 8003186:	f040 8150 	bne.w	800342a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318a:	4a59      	ldr	r2, [pc, #356]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 800318c:	6813      	ldr	r3, [r2, #0]
 800318e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003192:	6921      	ldr	r1, [r4, #16]
 8003194:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003198:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	f013 0f08 	tst.w	r3, #8
 80031a0:	d042      	beq.n	8003228 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031a2:	6963      	ldr	r3, [r4, #20]
 80031a4:	b36b      	cbz	r3, 8003202 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a6:	4b53      	ldr	r3, [pc, #332]	@ (80032f4 <HAL_RCC_OscConfig+0x298>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7fe fc39 	bl	8001a24 <HAL_GetTick>
 80031b2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b4:	4b4e      	ldr	r3, [pc, #312]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 80031b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031b8:	f013 0f02 	tst.w	r3, #2
 80031bc:	d134      	bne.n	8003228 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031be:	f7fe fc31 	bl	8001a24 <HAL_GetTick>
 80031c2:	1b40      	subs	r0, r0, r5
 80031c4:	2802      	cmp	r0, #2
 80031c6:	d9f5      	bls.n	80031b4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80031c8:	2003      	movs	r0, #3
 80031ca:	e131      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031cc:	4a48      	ldr	r2, [pc, #288]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 80031ce:	6813      	ldr	r3, [r2, #0]
 80031d0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80031d4:	6921      	ldr	r1, [r4, #16]
 80031d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	e7dd      	b.n	800319a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80031de:	4b45      	ldr	r3, [pc, #276]	@ (80032f4 <HAL_RCC_OscConfig+0x298>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031e4:	f7fe fc1e 	bl	8001a24 <HAL_GetTick>
 80031e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ea:	4b41      	ldr	r3, [pc, #260]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f013 0f02 	tst.w	r3, #2
 80031f2:	d0d2      	beq.n	800319a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f4:	f7fe fc16 	bl	8001a24 <HAL_GetTick>
 80031f8:	1b40      	subs	r0, r0, r5
 80031fa:	2802      	cmp	r0, #2
 80031fc:	d9f5      	bls.n	80031ea <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80031fe:	2003      	movs	r0, #3
 8003200:	e116      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003202:	4b3c      	ldr	r3, [pc, #240]	@ (80032f4 <HAL_RCC_OscConfig+0x298>)
 8003204:	2200      	movs	r2, #0
 8003206:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320a:	f7fe fc0b 	bl	8001a24 <HAL_GetTick>
 800320e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003210:	4b37      	ldr	r3, [pc, #220]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 8003212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003214:	f013 0f02 	tst.w	r3, #2
 8003218:	d006      	beq.n	8003228 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321a:	f7fe fc03 	bl	8001a24 <HAL_GetTick>
 800321e:	1b40      	subs	r0, r0, r5
 8003220:	2802      	cmp	r0, #2
 8003222:	d9f5      	bls.n	8003210 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8003224:	2003      	movs	r0, #3
 8003226:	e103      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	f013 0f04 	tst.w	r3, #4
 800322e:	d077      	beq.n	8003320 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003230:	4b2f      	ldr	r3, [pc, #188]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003238:	d133      	bne.n	80032a2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	9301      	str	r3, [sp, #4]
 800323e:	4b2c      	ldr	r3, [pc, #176]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 8003240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003242:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003252:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003254:	4b28      	ldr	r3, [pc, #160]	@ (80032f8 <HAL_RCC_OscConfig+0x29c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800325c:	d023      	beq.n	80032a6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325e:	68a3      	ldr	r3, [r4, #8]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d034      	beq.n	80032ce <HAL_RCC_OscConfig+0x272>
 8003264:	2b05      	cmp	r3, #5
 8003266:	d038      	beq.n	80032da <HAL_RCC_OscConfig+0x27e>
 8003268:	4b21      	ldr	r3, [pc, #132]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 800326a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	671a      	str	r2, [r3, #112]	@ 0x70
 8003272:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003274:	f022 0204 	bic.w	r2, r2, #4
 8003278:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800327a:	68a3      	ldr	r3, [r4, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d03d      	beq.n	80032fc <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fe fbd0 	bl	8001a24 <HAL_GetTick>
 8003284:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003286:	4b1a      	ldr	r3, [pc, #104]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328a:	f013 0f02 	tst.w	r3, #2
 800328e:	d146      	bne.n	800331e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003290:	f7fe fbc8 	bl	8001a24 <HAL_GetTick>
 8003294:	1b80      	subs	r0, r0, r6
 8003296:	f241 3388 	movw	r3, #5000	@ 0x1388
 800329a:	4298      	cmp	r0, r3
 800329c:	d9f3      	bls.n	8003286 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800329e:	2003      	movs	r0, #3
 80032a0:	e0c6      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80032a2:	2500      	movs	r5, #0
 80032a4:	e7d6      	b.n	8003254 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a6:	4a14      	ldr	r2, [pc, #80]	@ (80032f8 <HAL_RCC_OscConfig+0x29c>)
 80032a8:	6813      	ldr	r3, [r2, #0]
 80032aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ae:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80032b0:	f7fe fbb8 	bl	8001a24 <HAL_GetTick>
 80032b4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b6:	4b10      	ldr	r3, [pc, #64]	@ (80032f8 <HAL_RCC_OscConfig+0x29c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80032be:	d1ce      	bne.n	800325e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c0:	f7fe fbb0 	bl	8001a24 <HAL_GetTick>
 80032c4:	1b80      	subs	r0, r0, r6
 80032c6:	2802      	cmp	r0, #2
 80032c8:	d9f5      	bls.n	80032b6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80032ca:	2003      	movs	r0, #3
 80032cc:	e0b0      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ce:	4a08      	ldr	r2, [pc, #32]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 80032d0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d8:	e7cf      	b.n	800327a <HAL_RCC_OscConfig+0x21e>
 80032da:	4b05      	ldr	r3, [pc, #20]	@ (80032f0 <HAL_RCC_OscConfig+0x294>)
 80032dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032de:	f042 0204 	orr.w	r2, r2, #4
 80032e2:	671a      	str	r2, [r3, #112]	@ 0x70
 80032e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	671a      	str	r2, [r3, #112]	@ 0x70
 80032ec:	e7c5      	b.n	800327a <HAL_RCC_OscConfig+0x21e>
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	42470000 	.word	0x42470000
 80032f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fc:	f7fe fb92 	bl	8001a24 <HAL_GetTick>
 8003300:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003302:	4b52      	ldr	r3, [pc, #328]	@ (800344c <HAL_RCC_OscConfig+0x3f0>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003306:	f013 0f02 	tst.w	r3, #2
 800330a:	d008      	beq.n	800331e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330c:	f7fe fb8a 	bl	8001a24 <HAL_GetTick>
 8003310:	1b80      	subs	r0, r0, r6
 8003312:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003316:	4298      	cmp	r0, r3
 8003318:	d9f3      	bls.n	8003302 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800331a:	2003      	movs	r0, #3
 800331c:	e088      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800331e:	b9ed      	cbnz	r5, 800335c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003320:	69a3      	ldr	r3, [r4, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8083 	beq.w	800342e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003328:	4a48      	ldr	r2, [pc, #288]	@ (800344c <HAL_RCC_OscConfig+0x3f0>)
 800332a:	6892      	ldr	r2, [r2, #8]
 800332c:	f002 020c 	and.w	r2, r2, #12
 8003330:	2a08      	cmp	r2, #8
 8003332:	d051      	beq.n	80033d8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003334:	2b02      	cmp	r3, #2
 8003336:	d017      	beq.n	8003368 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003338:	4b45      	ldr	r3, [pc, #276]	@ (8003450 <HAL_RCC_OscConfig+0x3f4>)
 800333a:	2200      	movs	r2, #0
 800333c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333e:	f7fe fb71 	bl	8001a24 <HAL_GetTick>
 8003342:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003344:	4b41      	ldr	r3, [pc, #260]	@ (800344c <HAL_RCC_OscConfig+0x3f0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800334c:	d042      	beq.n	80033d4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334e:	f7fe fb69 	bl	8001a24 <HAL_GetTick>
 8003352:	1b00      	subs	r0, r0, r4
 8003354:	2802      	cmp	r0, #2
 8003356:	d9f5      	bls.n	8003344 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003358:	2003      	movs	r0, #3
 800335a:	e069      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800335c:	4a3b      	ldr	r2, [pc, #236]	@ (800344c <HAL_RCC_OscConfig+0x3f0>)
 800335e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003364:	6413      	str	r3, [r2, #64]	@ 0x40
 8003366:	e7db      	b.n	8003320 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8003368:	4b39      	ldr	r3, [pc, #228]	@ (8003450 <HAL_RCC_OscConfig+0x3f4>)
 800336a:	2200      	movs	r2, #0
 800336c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800336e:	f7fe fb59 	bl	8001a24 <HAL_GetTick>
 8003372:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003374:	4b35      	ldr	r3, [pc, #212]	@ (800344c <HAL_RCC_OscConfig+0x3f0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800337c:	d006      	beq.n	800338c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337e:	f7fe fb51 	bl	8001a24 <HAL_GetTick>
 8003382:	1b40      	subs	r0, r0, r5
 8003384:	2802      	cmp	r0, #2
 8003386:	d9f5      	bls.n	8003374 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8003388:	2003      	movs	r0, #3
 800338a:	e051      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800338c:	69e3      	ldr	r3, [r4, #28]
 800338e:	6a22      	ldr	r2, [r4, #32]
 8003390:	4313      	orrs	r3, r2
 8003392:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003394:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003398:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800339a:	0852      	lsrs	r2, r2, #1
 800339c:	3a01      	subs	r2, #1
 800339e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80033a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80033a8:	4a28      	ldr	r2, [pc, #160]	@ (800344c <HAL_RCC_OscConfig+0x3f0>)
 80033aa:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80033ac:	4b28      	ldr	r3, [pc, #160]	@ (8003450 <HAL_RCC_OscConfig+0x3f4>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80033b2:	f7fe fb37 	bl	8001a24 <HAL_GetTick>
 80033b6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b8:	4b24      	ldr	r3, [pc, #144]	@ (800344c <HAL_RCC_OscConfig+0x3f0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80033c0:	d106      	bne.n	80033d0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c2:	f7fe fb2f 	bl	8001a24 <HAL_GetTick>
 80033c6:	1b00      	subs	r0, r0, r4
 80033c8:	2802      	cmp	r0, #2
 80033ca:	d9f5      	bls.n	80033b8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80033cc:	2003      	movs	r0, #3
 80033ce:	e02f      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80033d0:	2000      	movs	r0, #0
 80033d2:	e02d      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
 80033d4:	2000      	movs	r0, #0
 80033d6:	e02b      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d02b      	beq.n	8003434 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80033dc:	4b1b      	ldr	r3, [pc, #108]	@ (800344c <HAL_RCC_OscConfig+0x3f0>)
 80033de:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80033e4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e6:	4291      	cmp	r1, r2
 80033e8:	d126      	bne.n	8003438 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033ee:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f0:	428a      	cmp	r2, r1
 80033f2:	d123      	bne.n	800343c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f6:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80033fa:	401a      	ands	r2, r3
 80033fc:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003400:	d11e      	bne.n	8003440 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003402:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8003406:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003408:	0852      	lsrs	r2, r2, #1
 800340a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800340c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003410:	d118      	bne.n	8003444 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003412:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8003416:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003418:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800341c:	d114      	bne.n	8003448 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800341e:	2000      	movs	r0, #0
 8003420:	e006      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8003422:	2001      	movs	r0, #1
}
 8003424:	4770      	bx	lr
        return HAL_ERROR;
 8003426:	2001      	movs	r0, #1
 8003428:	e002      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800342a:	2001      	movs	r0, #1
 800342c:	e000      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800342e:	2000      	movs	r0, #0
}
 8003430:	b002      	add	sp, #8
 8003432:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003434:	2001      	movs	r0, #1
 8003436:	e7fb      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8003438:	2001      	movs	r0, #1
 800343a:	e7f9      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
 800343c:	2001      	movs	r0, #1
 800343e:	e7f7      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
 8003440:	2001      	movs	r0, #1
 8003442:	e7f5      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
 8003444:	2001      	movs	r0, #1
 8003446:	e7f3      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
 8003448:	2001      	movs	r0, #1
 800344a:	e7f1      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
 800344c:	40023800 	.word	0x40023800
 8003450:	42470000 	.word	0x42470000

08003454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003454:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003456:	4b26      	ldr	r3, [pc, #152]	@ (80034f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b04      	cmp	r3, #4
 8003460:	d041      	beq.n	80034e6 <HAL_RCC_GetSysClockFreq+0x92>
 8003462:	2b08      	cmp	r3, #8
 8003464:	d141      	bne.n	80034ea <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003466:	4b22      	ldr	r3, [pc, #136]	@ (80034f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003474:	d012      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003476:	4b1e      	ldr	r3, [pc, #120]	@ (80034f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800347e:	481d      	ldr	r0, [pc, #116]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003480:	2300      	movs	r3, #0
 8003482:	fba1 0100 	umull	r0, r1, r1, r0
 8003486:	f7fc fee3 	bl	8000250 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800348a:	4b19      	ldr	r3, [pc, #100]	@ (80034f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003492:	3301      	adds	r3, #1
 8003494:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8003496:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800349a:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349c:	4b14      	ldr	r3, [pc, #80]	@ (80034f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800349e:	6858      	ldr	r0, [r3, #4]
 80034a0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80034a4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80034a8:	ebbc 0c00 	subs.w	ip, ip, r0
 80034ac:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80034b0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80034b4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80034b8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80034bc:	ebb1 010c 	subs.w	r1, r1, ip
 80034c0:	eb63 030e 	sbc.w	r3, r3, lr
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ca:	00c9      	lsls	r1, r1, #3
 80034cc:	eb11 0c00 	adds.w	ip, r1, r0
 80034d0:	f143 0300 	adc.w	r3, r3, #0
 80034d4:	0299      	lsls	r1, r3, #10
 80034d6:	2300      	movs	r3, #0
 80034d8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80034dc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80034e0:	f7fc feb6 	bl	8000250 <__aeabi_uldivmod>
 80034e4:	e7d1      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80034e6:	4803      	ldr	r0, [pc, #12]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034e8:	e7d7      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ea:	4803      	ldr	r0, [pc, #12]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 80034ec:	e7d5      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x46>
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800
 80034f4:	017d7840 	.word	0x017d7840
 80034f8:	00f42400 	.word	0x00f42400

080034fc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80034fc:	2800      	cmp	r0, #0
 80034fe:	f000 809b 	beq.w	8003638 <HAL_RCC_ClockConfig+0x13c>
{
 8003502:	b570      	push	{r4, r5, r6, lr}
 8003504:	460d      	mov	r5, r1
 8003506:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003508:	4b4f      	ldr	r3, [pc, #316]	@ (8003648 <HAL_RCC_ClockConfig+0x14c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	428b      	cmp	r3, r1
 8003512:	d208      	bcs.n	8003526 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003514:	b2cb      	uxtb	r3, r1
 8003516:	4a4c      	ldr	r2, [pc, #304]	@ (8003648 <HAL_RCC_ClockConfig+0x14c>)
 8003518:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351a:	6813      	ldr	r3, [r2, #0]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	428b      	cmp	r3, r1
 8003522:	f040 808b 	bne.w	800363c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	f013 0f02 	tst.w	r3, #2
 800352c:	d017      	beq.n	800355e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352e:	f013 0f04 	tst.w	r3, #4
 8003532:	d004      	beq.n	800353e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003534:	4a45      	ldr	r2, [pc, #276]	@ (800364c <HAL_RCC_ClockConfig+0x150>)
 8003536:	6893      	ldr	r3, [r2, #8]
 8003538:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800353c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	f013 0f08 	tst.w	r3, #8
 8003544:	d004      	beq.n	8003550 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003546:	4a41      	ldr	r2, [pc, #260]	@ (800364c <HAL_RCC_ClockConfig+0x150>)
 8003548:	6893      	ldr	r3, [r2, #8]
 800354a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800354e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003550:	4a3e      	ldr	r2, [pc, #248]	@ (800364c <HAL_RCC_ClockConfig+0x150>)
 8003552:	6893      	ldr	r3, [r2, #8]
 8003554:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003558:	68a1      	ldr	r1, [r4, #8]
 800355a:	430b      	orrs	r3, r1
 800355c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	f013 0f01 	tst.w	r3, #1
 8003564:	d032      	beq.n	80035cc <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003566:	6863      	ldr	r3, [r4, #4]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d021      	beq.n	80035b0 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356c:	1e9a      	subs	r2, r3, #2
 800356e:	2a01      	cmp	r2, #1
 8003570:	d925      	bls.n	80035be <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003572:	4a36      	ldr	r2, [pc, #216]	@ (800364c <HAL_RCC_ClockConfig+0x150>)
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	f012 0f02 	tst.w	r2, #2
 800357a:	d061      	beq.n	8003640 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357c:	4933      	ldr	r1, [pc, #204]	@ (800364c <HAL_RCC_ClockConfig+0x150>)
 800357e:	688a      	ldr	r2, [r1, #8]
 8003580:	f022 0203 	bic.w	r2, r2, #3
 8003584:	4313      	orrs	r3, r2
 8003586:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003588:	f7fe fa4c 	bl	8001a24 <HAL_GetTick>
 800358c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358e:	4b2f      	ldr	r3, [pc, #188]	@ (800364c <HAL_RCC_ClockConfig+0x150>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	6862      	ldr	r2, [r4, #4]
 8003598:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800359c:	d016      	beq.n	80035cc <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359e:	f7fe fa41 	bl	8001a24 <HAL_GetTick>
 80035a2:	1b80      	subs	r0, r0, r6
 80035a4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80035a8:	4298      	cmp	r0, r3
 80035aa:	d9f0      	bls.n	800358e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80035ac:	2003      	movs	r0, #3
 80035ae:	e042      	b.n	8003636 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b0:	4a26      	ldr	r2, [pc, #152]	@ (800364c <HAL_RCC_ClockConfig+0x150>)
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80035b8:	d1e0      	bne.n	800357c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80035ba:	2001      	movs	r0, #1
 80035bc:	e03b      	b.n	8003636 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035be:	4a23      	ldr	r2, [pc, #140]	@ (800364c <HAL_RCC_ClockConfig+0x150>)
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80035c6:	d1d9      	bne.n	800357c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80035c8:	2001      	movs	r0, #1
 80035ca:	e034      	b.n	8003636 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003648 <HAL_RCC_ClockConfig+0x14c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	42ab      	cmp	r3, r5
 80035d6:	d907      	bls.n	80035e8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d8:	b2ea      	uxtb	r2, r5
 80035da:	4b1b      	ldr	r3, [pc, #108]	@ (8003648 <HAL_RCC_ClockConfig+0x14c>)
 80035dc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	42ab      	cmp	r3, r5
 80035e6:	d12d      	bne.n	8003644 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	f013 0f04 	tst.w	r3, #4
 80035ee:	d006      	beq.n	80035fe <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f0:	4a16      	ldr	r2, [pc, #88]	@ (800364c <HAL_RCC_ClockConfig+0x150>)
 80035f2:	6893      	ldr	r3, [r2, #8]
 80035f4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80035f8:	68e1      	ldr	r1, [r4, #12]
 80035fa:	430b      	orrs	r3, r1
 80035fc:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	f013 0f08 	tst.w	r3, #8
 8003604:	d007      	beq.n	8003616 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003606:	4a11      	ldr	r2, [pc, #68]	@ (800364c <HAL_RCC_ClockConfig+0x150>)
 8003608:	6893      	ldr	r3, [r2, #8]
 800360a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800360e:	6921      	ldr	r1, [r4, #16]
 8003610:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003614:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003616:	f7ff ff1d 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 800361a:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <HAL_RCC_ClockConfig+0x150>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003622:	4a0b      	ldr	r2, [pc, #44]	@ (8003650 <HAL_RCC_ClockConfig+0x154>)
 8003624:	5cd3      	ldrb	r3, [r2, r3]
 8003626:	40d8      	lsrs	r0, r3
 8003628:	4b0a      	ldr	r3, [pc, #40]	@ (8003654 <HAL_RCC_ClockConfig+0x158>)
 800362a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800362c:	4b0a      	ldr	r3, [pc, #40]	@ (8003658 <HAL_RCC_ClockConfig+0x15c>)
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	f000 fd36 	bl	80040a0 <HAL_InitTick>
  return HAL_OK;
 8003634:	2000      	movs	r0, #0
}
 8003636:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003638:	2001      	movs	r0, #1
}
 800363a:	4770      	bx	lr
      return HAL_ERROR;
 800363c:	2001      	movs	r0, #1
 800363e:	e7fa      	b.n	8003636 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8003640:	2001      	movs	r0, #1
 8003642:	e7f8      	b.n	8003636 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003644:	2001      	movs	r0, #1
 8003646:	e7f6      	b.n	8003636 <HAL_RCC_ClockConfig+0x13a>
 8003648:	40023c00 	.word	0x40023c00
 800364c:	40023800 	.word	0x40023800
 8003650:	08008844 	.word	0x08008844
 8003654:	20000010 	.word	0x20000010
 8003658:	2000000c 	.word	0x2000000c

0800365c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800365c:	4b01      	ldr	r3, [pc, #4]	@ (8003664 <HAL_RCC_GetHCLKFreq+0x8>)
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20000010 	.word	0x20000010

08003668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003668:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800366a:	f7ff fff7 	bl	800365c <HAL_RCC_GetHCLKFreq>
 800366e:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003676:	4a03      	ldr	r2, [pc, #12]	@ (8003684 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003678:	5cd3      	ldrb	r3, [r2, r3]
}
 800367a:	40d8      	lsrs	r0, r3
 800367c:	bd08      	pop	{r3, pc}
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800
 8003684:	0800883c 	.word	0x0800883c

08003688 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003688:	230f      	movs	r3, #15
 800368a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800368c:	4b0b      	ldr	r3, [pc, #44]	@ (80036bc <HAL_RCC_GetClockConfig+0x34>)
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	f002 0203 	and.w	r2, r2, #3
 8003694:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800369c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80036a4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	08db      	lsrs	r3, r3, #3
 80036aa:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80036ae:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036b0:	4b03      	ldr	r3, [pc, #12]	@ (80036c0 <HAL_RCC_GetClockConfig+0x38>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	600b      	str	r3, [r1, #0]
}
 80036ba:	4770      	bx	lr
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40023c00 	.word	0x40023c00

080036c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c6:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c8:	6a03      	ldr	r3, [r0, #32]
 80036ca:	f023 0301 	bic.w	r3, r3, #1
 80036ce:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036d2:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036d4:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d8:	680c      	ldr	r4, [r1, #0]
 80036da:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036dc:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036e0:	688b      	ldr	r3, [r1, #8]
 80036e2:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003714 <TIM_OC1_SetConfig+0x50>)
 80036e6:	4290      	cmp	r0, r2
 80036e8:	d006      	beq.n	80036f8 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ea:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ec:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ee:	684a      	ldr	r2, [r1, #4]
 80036f0:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f2:	6203      	str	r3, [r0, #32]
}
 80036f4:	bc30      	pop	{r4, r5}
 80036f6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80036f8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80036fc:	68ca      	ldr	r2, [r1, #12]
 80036fe:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8003700:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003704:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003708:	694a      	ldr	r2, [r1, #20]
 800370a:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800370c:	698d      	ldr	r5, [r1, #24]
 800370e:	4315      	orrs	r5, r2
 8003710:	e7eb      	b.n	80036ea <TIM_OC1_SetConfig+0x26>
 8003712:	bf00      	nop
 8003714:	40010000 	.word	0x40010000

08003718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003718:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800371c:	6a02      	ldr	r2, [r0, #32]
 800371e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003722:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003724:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003726:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003728:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800372c:	680d      	ldr	r5, [r1, #0]
 800372e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003730:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003734:	688a      	ldr	r2, [r1, #8]
 8003736:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800373a:	4a0d      	ldr	r2, [pc, #52]	@ (8003770 <TIM_OC3_SetConfig+0x58>)
 800373c:	4290      	cmp	r0, r2
 800373e:	d006      	beq.n	800374e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003740:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003742:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003744:	684a      	ldr	r2, [r1, #4]
 8003746:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003748:	6203      	str	r3, [r0, #32]
}
 800374a:	bc30      	pop	{r4, r5}
 800374c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800374e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003752:	68ca      	ldr	r2, [r1, #12]
 8003754:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003758:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800375c:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003760:	694a      	ldr	r2, [r1, #20]
 8003762:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003766:	698a      	ldr	r2, [r1, #24]
 8003768:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 800376c:	e7e8      	b.n	8003740 <TIM_OC3_SetConfig+0x28>
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000

08003774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003774:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003776:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003778:	6a02      	ldr	r2, [r0, #32]
 800377a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800377e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003780:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003782:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003784:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003788:	680d      	ldr	r5, [r1, #0]
 800378a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800378e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003792:	688d      	ldr	r5, [r1, #8]
 8003794:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003798:	4d07      	ldr	r5, [pc, #28]	@ (80037b8 <TIM_OC4_SetConfig+0x44>)
 800379a:	42a8      	cmp	r0, r5
 800379c:	d006      	beq.n	80037ac <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800379e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037a0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037a2:	684a      	ldr	r2, [r1, #4]
 80037a4:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a6:	6203      	str	r3, [r0, #32]
}
 80037a8:	bc30      	pop	{r4, r5}
 80037aa:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037ac:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037b0:	694d      	ldr	r5, [r1, #20]
 80037b2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80037b6:	e7f2      	b.n	800379e <TIM_OC4_SetConfig+0x2a>
 80037b8:	40010000 	.word	0x40010000

080037bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037bc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037be:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037c0:	6a04      	ldr	r4, [r0, #32]
 80037c2:	f024 0401 	bic.w	r4, r4, #1
 80037c6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037c8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037ca:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037ce:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037d2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80037d6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037d8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80037da:	6203      	str	r3, [r0, #32]
}
 80037dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037e2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037e4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037e6:	6a04      	ldr	r4, [r0, #32]
 80037e8:	f024 0410 	bic.w	r4, r4, #16
 80037ec:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ee:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037f0:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037f4:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80037fc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003800:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003802:	6203      	str	r3, [r0, #32]
}
 8003804:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003808:	4770      	bx	lr

0800380a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800380a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800380c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003810:	430b      	orrs	r3, r1
 8003812:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003816:	6083      	str	r3, [r0, #8]
}
 8003818:	4770      	bx	lr
	...

0800381c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800381c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003820:	2b01      	cmp	r3, #1
 8003822:	d12f      	bne.n	8003884 <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	2302      	movs	r3, #2
 8003826:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800382a:	6802      	ldr	r2, [r0, #0]
 800382c:	68d3      	ldr	r3, [r2, #12]
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003834:	6803      	ldr	r3, [r0, #0]
 8003836:	4a15      	ldr	r2, [pc, #84]	@ (800388c <HAL_TIM_Base_Start_IT+0x70>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d018      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x52>
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003840:	d015      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x52>
 8003842:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003846:	4293      	cmp	r3, r2
 8003848:	d011      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x52>
 800384a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800384e:	4293      	cmp	r3, r2
 8003850:	d00d      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x52>
 8003852:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003856:	4293      	cmp	r3, r2
 8003858:	d009      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x52>
 800385a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800385e:	4293      	cmp	r3, r2
 8003860:	d005      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800386a:	2000      	movs	r0, #0
 800386c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003874:	2a06      	cmp	r2, #6
 8003876:	d007      	beq.n	8003888 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003880:	2000      	movs	r0, #0
 8003882:	4770      	bx	lr
    return HAL_ERROR;
 8003884:	2001      	movs	r0, #1
 8003886:	4770      	bx	lr
  return HAL_OK;
 8003888:	2000      	movs	r0, #0
}
 800388a:	4770      	bx	lr
 800388c:	40010000 	.word	0x40010000

08003890 <HAL_TIM_OC_MspInit>:
}
 8003890:	4770      	bx	lr

08003892 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003892:	4770      	bx	lr

08003894 <HAL_TIM_IC_CaptureCallback>:
}
 8003894:	4770      	bx	lr

08003896 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003896:	4770      	bx	lr

08003898 <HAL_TIM_TriggerCallback>:
}
 8003898:	4770      	bx	lr

0800389a <HAL_TIM_IRQHandler>:
{
 800389a:	b570      	push	{r4, r5, r6, lr}
 800389c:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800389e:	6803      	ldr	r3, [r0, #0]
 80038a0:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038a2:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038a4:	f015 0f02 	tst.w	r5, #2
 80038a8:	d010      	beq.n	80038cc <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038aa:	f016 0f02 	tst.w	r6, #2
 80038ae:	d00d      	beq.n	80038cc <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038b0:	f06f 0202 	mvn.w	r2, #2
 80038b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038b6:	2301      	movs	r3, #1
 80038b8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038ba:	6803      	ldr	r3, [r0, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	f013 0f03 	tst.w	r3, #3
 80038c2:	d05e      	beq.n	8003982 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80038c4:	f7ff ffe6 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c8:	2300      	movs	r3, #0
 80038ca:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038cc:	f015 0f04 	tst.w	r5, #4
 80038d0:	d012      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038d2:	f016 0f04 	tst.w	r6, #4
 80038d6:	d00f      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	f06f 0204 	mvn.w	r2, #4
 80038de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038e0:	2302      	movs	r3, #2
 80038e2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80038ec:	d04f      	beq.n	800398e <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80038ee:	4620      	mov	r0, r4
 80038f0:	f7ff ffd0 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f4:	2300      	movs	r3, #0
 80038f6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038f8:	f015 0f08 	tst.w	r5, #8
 80038fc:	d012      	beq.n	8003924 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038fe:	f016 0f08 	tst.w	r6, #8
 8003902:	d00f      	beq.n	8003924 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	f06f 0208 	mvn.w	r2, #8
 800390a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800390c:	2304      	movs	r3, #4
 800390e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	f013 0f03 	tst.w	r3, #3
 8003918:	d040      	beq.n	800399c <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800391a:	4620      	mov	r0, r4
 800391c:	f7ff ffba 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003920:	2300      	movs	r3, #0
 8003922:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003924:	f015 0f10 	tst.w	r5, #16
 8003928:	d012      	beq.n	8003950 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800392a:	f016 0f10 	tst.w	r6, #16
 800392e:	d00f      	beq.n	8003950 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	f06f 0210 	mvn.w	r2, #16
 8003936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003938:	2308      	movs	r3, #8
 800393a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003944:	d031      	beq.n	80039aa <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8003946:	4620      	mov	r0, r4
 8003948:	f7ff ffa4 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394c:	2300      	movs	r3, #0
 800394e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003950:	f015 0f01 	tst.w	r5, #1
 8003954:	d002      	beq.n	800395c <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003956:	f016 0f01 	tst.w	r6, #1
 800395a:	d12d      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800395c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003960:	d002      	beq.n	8003968 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003962:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8003966:	d12f      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003968:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800396c:	d002      	beq.n	8003974 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800396e:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8003972:	d131      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003974:	f015 0f20 	tst.w	r5, #32
 8003978:	d002      	beq.n	8003980 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800397a:	f016 0f20 	tst.w	r6, #32
 800397e:	d133      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x14e>
}
 8003980:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	f7ff ff86 	bl	8003892 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003986:	4620      	mov	r0, r4
 8003988:	f7ff ff85 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
 800398c:	e79c      	b.n	80038c8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398e:	4620      	mov	r0, r4
 8003990:	f7ff ff7f 	bl	8003892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003994:	4620      	mov	r0, r4
 8003996:	f7ff ff7e 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
 800399a:	e7ab      	b.n	80038f4 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399c:	4620      	mov	r0, r4
 800399e:	f7ff ff78 	bl	8003892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a2:	4620      	mov	r0, r4
 80039a4:	f7ff ff77 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
 80039a8:	e7ba      	b.n	8003920 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039aa:	4620      	mov	r0, r4
 80039ac:	f7ff ff71 	bl	8003892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b0:	4620      	mov	r0, r4
 80039b2:	f7ff ff70 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
 80039b6:	e7c9      	b.n	800394c <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	f06f 0201 	mvn.w	r2, #1
 80039be:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80039c0:	4620      	mov	r0, r4
 80039c2:	f7fd fa75 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
 80039c6:	e7c9      	b.n	800395c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80039d0:	4620      	mov	r0, r4
 80039d2:	f000 fb63 	bl	800409c <HAL_TIMEx_BreakCallback>
 80039d6:	e7c7      	b.n	8003968 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039de:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80039e0:	4620      	mov	r0, r4
 80039e2:	f7ff ff59 	bl	8003898 <HAL_TIM_TriggerCallback>
 80039e6:	e7c5      	b.n	8003974 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	f06f 0220 	mvn.w	r2, #32
 80039ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80039f0:	4620      	mov	r0, r4
 80039f2:	f000 fb52 	bl	800409a <HAL_TIMEx_CommutCallback>
}
 80039f6:	e7c3      	b.n	8003980 <HAL_TIM_IRQHandler+0xe6>

080039f8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80039f8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039fa:	4a29      	ldr	r2, [pc, #164]	@ (8003aa0 <TIM_Base_SetConfig+0xa8>)
 80039fc:	4290      	cmp	r0, r2
 80039fe:	d00e      	beq.n	8003a1e <TIM_Base_SetConfig+0x26>
 8003a00:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003a04:	d00b      	beq.n	8003a1e <TIM_Base_SetConfig+0x26>
 8003a06:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003a0a:	4290      	cmp	r0, r2
 8003a0c:	d007      	beq.n	8003a1e <TIM_Base_SetConfig+0x26>
 8003a0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a12:	4290      	cmp	r0, r2
 8003a14:	d003      	beq.n	8003a1e <TIM_Base_SetConfig+0x26>
 8003a16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a1a:	4290      	cmp	r0, r2
 8003a1c:	d103      	bne.n	8003a26 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a22:	684a      	ldr	r2, [r1, #4]
 8003a24:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a26:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa0 <TIM_Base_SetConfig+0xa8>)
 8003a28:	4290      	cmp	r0, r2
 8003a2a:	d01a      	beq.n	8003a62 <TIM_Base_SetConfig+0x6a>
 8003a2c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003a30:	d017      	beq.n	8003a62 <TIM_Base_SetConfig+0x6a>
 8003a32:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003a36:	4290      	cmp	r0, r2
 8003a38:	d013      	beq.n	8003a62 <TIM_Base_SetConfig+0x6a>
 8003a3a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a3e:	4290      	cmp	r0, r2
 8003a40:	d00f      	beq.n	8003a62 <TIM_Base_SetConfig+0x6a>
 8003a42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a46:	4290      	cmp	r0, r2
 8003a48:	d00b      	beq.n	8003a62 <TIM_Base_SetConfig+0x6a>
 8003a4a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8003a4e:	4290      	cmp	r0, r2
 8003a50:	d007      	beq.n	8003a62 <TIM_Base_SetConfig+0x6a>
 8003a52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a56:	4290      	cmp	r0, r2
 8003a58:	d003      	beq.n	8003a62 <TIM_Base_SetConfig+0x6a>
 8003a5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a5e:	4290      	cmp	r0, r2
 8003a60:	d103      	bne.n	8003a6a <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a66:	68ca      	ldr	r2, [r1, #12]
 8003a68:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a6e:	694a      	ldr	r2, [r1, #20]
 8003a70:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003a72:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a74:	688b      	ldr	r3, [r1, #8]
 8003a76:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a78:	680b      	ldr	r3, [r1, #0]
 8003a7a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a7c:	4b08      	ldr	r3, [pc, #32]	@ (8003aa0 <TIM_Base_SetConfig+0xa8>)
 8003a7e:	4298      	cmp	r0, r3
 8003a80:	d00a      	beq.n	8003a98 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8003a82:	2301      	movs	r3, #1
 8003a84:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a86:	6903      	ldr	r3, [r0, #16]
 8003a88:	f013 0f01 	tst.w	r3, #1
 8003a8c:	d003      	beq.n	8003a96 <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a8e:	6903      	ldr	r3, [r0, #16]
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	6103      	str	r3, [r0, #16]
}
 8003a96:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003a98:	690b      	ldr	r3, [r1, #16]
 8003a9a:	6303      	str	r3, [r0, #48]	@ 0x30
 8003a9c:	e7f1      	b.n	8003a82 <TIM_Base_SetConfig+0x8a>
 8003a9e:	bf00      	nop
 8003aa0:	40010000 	.word	0x40010000

08003aa4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003aa4:	b340      	cbz	r0, 8003af8 <HAL_TIM_Base_Init+0x54>
{
 8003aa6:	b510      	push	{r4, lr}
 8003aa8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003aaa:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003aae:	b1f3      	cbz	r3, 8003aee <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	f851 0b04 	ldr.w	r0, [r1], #4
 8003abc:	f7ff ff9c 	bl	80039f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003aca:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003ace:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003ad2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ade:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003ae2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003ae6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003aea:	2000      	movs	r0, #0
}
 8003aec:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003aee:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003af2:	f001 fedf 	bl	80058b4 <HAL_TIM_Base_MspInit>
 8003af6:	e7db      	b.n	8003ab0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003af8:	2001      	movs	r0, #1
}
 8003afa:	4770      	bx	lr

08003afc <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8003afc:	b340      	cbz	r0, 8003b50 <HAL_TIM_OC_Init+0x54>
{
 8003afe:	b510      	push	{r4, lr}
 8003b00:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b02:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003b06:	b1f3      	cbz	r3, 8003b46 <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003b0e:	4621      	mov	r1, r4
 8003b10:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b14:	f7ff ff70 	bl	80039f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b1e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003b22:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003b26:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003b2a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b2e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b36:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003b3a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003b3e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003b42:	2000      	movs	r0, #0
}
 8003b44:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003b46:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8003b4a:	f7ff fea1 	bl	8003890 <HAL_TIM_OC_MspInit>
 8003b4e:	e7db      	b.n	8003b08 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8003b50:	2001      	movs	r0, #1
}
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003b54:	b340      	cbz	r0, 8003ba8 <HAL_TIM_PWM_Init+0x54>
{
 8003b56:	b510      	push	{r4, lr}
 8003b58:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003b5e:	b1f3      	cbz	r3, 8003b9e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	2302      	movs	r3, #2
 8003b62:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b66:	4621      	mov	r1, r4
 8003b68:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b6c:	f7ff ff44 	bl	80039f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b76:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003b7a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003b7e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003b82:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b86:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b8e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003b92:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003b96:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003b9a:	2000      	movs	r0, #0
}
 8003b9c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003b9e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003ba2:	f001 fe53 	bl	800584c <HAL_TIM_PWM_MspInit>
 8003ba6:	e7db      	b.n	8003b60 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003ba8:	2001      	movs	r0, #1
}
 8003baa:	4770      	bx	lr

08003bac <TIM_OC2_SetConfig>:
{
 8003bac:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8003bae:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bb0:	6a02      	ldr	r2, [r0, #32]
 8003bb2:	f022 0210 	bic.w	r2, r2, #16
 8003bb6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003bb8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003bba:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bbc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc0:	680d      	ldr	r5, [r1, #0]
 8003bc2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003bc6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bca:	688d      	ldr	r5, [r1, #8]
 8003bcc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bd0:	4d0c      	ldr	r5, [pc, #48]	@ (8003c04 <TIM_OC2_SetConfig+0x58>)
 8003bd2:	42a8      	cmp	r0, r5
 8003bd4:	d006      	beq.n	8003be4 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8003bd6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003bd8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003bda:	684a      	ldr	r2, [r1, #4]
 8003bdc:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003bde:	6203      	str	r3, [r0, #32]
}
 8003be0:	bc30      	pop	{r4, r5}
 8003be2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003be4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003be8:	68cd      	ldr	r5, [r1, #12]
 8003bea:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bf2:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bf6:	694d      	ldr	r5, [r1, #20]
 8003bf8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bfc:	698d      	ldr	r5, [r1, #24]
 8003bfe:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003c02:	e7e8      	b.n	8003bd6 <TIM_OC2_SetConfig+0x2a>
 8003c04:	40010000 	.word	0x40010000

08003c08 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8003c08:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d028      	beq.n	8003c62 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8003c10:	b510      	push	{r4, lr}
 8003c12:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003c14:	2301      	movs	r3, #1
 8003c16:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003c1a:	2a0c      	cmp	r2, #12
 8003c1c:	d81c      	bhi.n	8003c58 <HAL_TIM_OC_ConfigChannel+0x50>
 8003c1e:	e8df f002 	tbb	[pc, r2]
 8003c22:	1b07      	.short	0x1b07
 8003c24:	1b0c1b1b 	.word	0x1b0c1b1b
 8003c28:	1b111b1b 	.word	0x1b111b1b
 8003c2c:	1b1b      	.short	0x1b1b
 8003c2e:	16          	.byte	0x16
 8003c2f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c30:	6800      	ldr	r0, [r0, #0]
 8003c32:	f7ff fd47 	bl	80036c4 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003c36:	2000      	movs	r0, #0
      break;
 8003c38:	e00f      	b.n	8003c5a <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c3a:	6800      	ldr	r0, [r0, #0]
 8003c3c:	f7ff ffb6 	bl	8003bac <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003c40:	2000      	movs	r0, #0
      break;
 8003c42:	e00a      	b.n	8003c5a <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c44:	6800      	ldr	r0, [r0, #0]
 8003c46:	f7ff fd67 	bl	8003718 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003c4a:	2000      	movs	r0, #0
      break;
 8003c4c:	e005      	b.n	8003c5a <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c4e:	6800      	ldr	r0, [r0, #0]
 8003c50:	f7ff fd90 	bl	8003774 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003c54:	2000      	movs	r0, #0
      break;
 8003c56:	e000      	b.n	8003c5a <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 8003c58:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003c60:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8003c62:	2002      	movs	r0, #2
}
 8003c64:	4770      	bx	lr

08003c66 <HAL_TIM_PWM_ConfigChannel>:
{
 8003c66:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003c68:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d066      	beq.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003c70:	4604      	mov	r4, r0
 8003c72:	460d      	mov	r5, r1
 8003c74:	2301      	movs	r3, #1
 8003c76:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003c7a:	2a0c      	cmp	r2, #12
 8003c7c:	d85a      	bhi.n	8003d34 <HAL_TIM_PWM_ConfigChannel+0xce>
 8003c7e:	e8df f002 	tbb	[pc, r2]
 8003c82:	5907      	.short	0x5907
 8003c84:	591b5959 	.word	0x591b5959
 8003c88:	59305959 	.word	0x59305959
 8003c8c:	5959      	.short	0x5959
 8003c8e:	44          	.byte	0x44
 8003c8f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c90:	6800      	ldr	r0, [r0, #0]
 8003c92:	f7ff fd17 	bl	80036c4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	6993      	ldr	r3, [r2, #24]
 8003c9a:	f043 0308 	orr.w	r3, r3, #8
 8003c9e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ca0:	6822      	ldr	r2, [r4, #0]
 8003ca2:	6993      	ldr	r3, [r2, #24]
 8003ca4:	f023 0304 	bic.w	r3, r3, #4
 8003ca8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003caa:	6822      	ldr	r2, [r4, #0]
 8003cac:	6993      	ldr	r3, [r2, #24]
 8003cae:	6929      	ldr	r1, [r5, #16]
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb4:	2000      	movs	r0, #0
      break;
 8003cb6:	e03e      	b.n	8003d36 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cb8:	6800      	ldr	r0, [r0, #0]
 8003cba:	f7ff ff77 	bl	8003bac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cbe:	6822      	ldr	r2, [r4, #0]
 8003cc0:	6993      	ldr	r3, [r2, #24]
 8003cc2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003cc6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cc8:	6822      	ldr	r2, [r4, #0]
 8003cca:	6993      	ldr	r3, [r2, #24]
 8003ccc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cd0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cd2:	6822      	ldr	r2, [r4, #0]
 8003cd4:	6993      	ldr	r3, [r2, #24]
 8003cd6:	6929      	ldr	r1, [r5, #16]
 8003cd8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003cdc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003cde:	2000      	movs	r0, #0
      break;
 8003ce0:	e029      	b.n	8003d36 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ce2:	6800      	ldr	r0, [r0, #0]
 8003ce4:	f7ff fd18 	bl	8003718 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ce8:	6822      	ldr	r2, [r4, #0]
 8003cea:	69d3      	ldr	r3, [r2, #28]
 8003cec:	f043 0308 	orr.w	r3, r3, #8
 8003cf0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cf2:	6822      	ldr	r2, [r4, #0]
 8003cf4:	69d3      	ldr	r3, [r2, #28]
 8003cf6:	f023 0304 	bic.w	r3, r3, #4
 8003cfa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cfc:	6822      	ldr	r2, [r4, #0]
 8003cfe:	69d3      	ldr	r3, [r2, #28]
 8003d00:	6929      	ldr	r1, [r5, #16]
 8003d02:	430b      	orrs	r3, r1
 8003d04:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003d06:	2000      	movs	r0, #0
      break;
 8003d08:	e015      	b.n	8003d36 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d0a:	6800      	ldr	r0, [r0, #0]
 8003d0c:	f7ff fd32 	bl	8003774 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d10:	6822      	ldr	r2, [r4, #0]
 8003d12:	69d3      	ldr	r3, [r2, #28]
 8003d14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d18:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d1a:	6822      	ldr	r2, [r4, #0]
 8003d1c:	69d3      	ldr	r3, [r2, #28]
 8003d1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d22:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d24:	6822      	ldr	r2, [r4, #0]
 8003d26:	69d3      	ldr	r3, [r2, #28]
 8003d28:	6929      	ldr	r1, [r5, #16]
 8003d2a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d2e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003d30:	2000      	movs	r0, #0
      break;
 8003d32:	e000      	b.n	8003d36 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003d34:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003d36:	2300      	movs	r3, #0
 8003d38:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003d3c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003d3e:	2002      	movs	r0, #2
 8003d40:	e7fc      	b.n	8003d3c <HAL_TIM_PWM_ConfigChannel+0xd6>

08003d42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d42:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d44:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d46:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d4a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d54:	6082      	str	r2, [r0, #8]
}
 8003d56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003d5c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d078      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0xfa>
{
 8003d64:	b510      	push	{r4, lr}
 8003d66:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003d74:	6802      	ldr	r2, [r0, #0]
 8003d76:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d78:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d7c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003d80:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003d82:	680b      	ldr	r3, [r1, #0]
 8003d84:	2b60      	cmp	r3, #96	@ 0x60
 8003d86:	d04c      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0xc6>
 8003d88:	d823      	bhi.n	8003dd2 <HAL_TIM_ConfigClockSource+0x76>
 8003d8a:	2b40      	cmp	r3, #64	@ 0x40
 8003d8c:	d054      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0xdc>
 8003d8e:	d811      	bhi.n	8003db4 <HAL_TIM_ConfigClockSource+0x58>
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d003      	beq.n	8003d9c <HAL_TIM_ConfigClockSource+0x40>
 8003d94:	d80a      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x50>
 8003d96:	b10b      	cbz	r3, 8003d9c <HAL_TIM_ConfigClockSource+0x40>
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d105      	bne.n	8003da8 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6820      	ldr	r0, [r4, #0]
 8003da0:	f7ff fd33 	bl	800380a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003da4:	2000      	movs	r0, #0
      break;
 8003da6:	e028      	b.n	8003dfa <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003da8:	2001      	movs	r0, #1
 8003daa:	e026      	b.n	8003dfa <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003dac:	2b30      	cmp	r3, #48	@ 0x30
 8003dae:	d0f5      	beq.n	8003d9c <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8003db0:	2001      	movs	r0, #1
 8003db2:	e022      	b.n	8003dfa <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003db4:	2b50      	cmp	r3, #80	@ 0x50
 8003db6:	d10a      	bne.n	8003dce <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db8:	68ca      	ldr	r2, [r1, #12]
 8003dba:	6849      	ldr	r1, [r1, #4]
 8003dbc:	6800      	ldr	r0, [r0, #0]
 8003dbe:	f7ff fcfd 	bl	80037bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dc2:	2150      	movs	r1, #80	@ 0x50
 8003dc4:	6820      	ldr	r0, [r4, #0]
 8003dc6:	f7ff fd20 	bl	800380a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003dca:	2000      	movs	r0, #0
      break;
 8003dcc:	e015      	b.n	8003dfa <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003dce:	2001      	movs	r0, #1
 8003dd0:	e013      	b.n	8003dfa <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd6:	d03a      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0xf2>
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ddc:	d014      	beq.n	8003e08 <HAL_TIM_ConfigClockSource+0xac>
 8003dde:	2b70      	cmp	r3, #112	@ 0x70
 8003de0:	d137      	bne.n	8003e52 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8003de2:	68cb      	ldr	r3, [r1, #12]
 8003de4:	684a      	ldr	r2, [r1, #4]
 8003de6:	6889      	ldr	r1, [r1, #8]
 8003de8:	6800      	ldr	r0, [r0, #0]
 8003dea:	f7ff ffaa 	bl	8003d42 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dee:	6822      	ldr	r2, [r4, #0]
 8003df0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003df2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003df6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003df8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003e00:	2300      	movs	r3, #0
 8003e02:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003e06:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8003e08:	68cb      	ldr	r3, [r1, #12]
 8003e0a:	684a      	ldr	r2, [r1, #4]
 8003e0c:	6889      	ldr	r1, [r1, #8]
 8003e0e:	6800      	ldr	r0, [r0, #0]
 8003e10:	f7ff ff97 	bl	8003d42 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e14:	6822      	ldr	r2, [r4, #0]
 8003e16:	6893      	ldr	r3, [r2, #8]
 8003e18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e1c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1e:	2000      	movs	r0, #0
      break;
 8003e20:	e7eb      	b.n	8003dfa <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e22:	68ca      	ldr	r2, [r1, #12]
 8003e24:	6849      	ldr	r1, [r1, #4]
 8003e26:	6800      	ldr	r0, [r0, #0]
 8003e28:	f7ff fcdb 	bl	80037e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e2c:	2160      	movs	r1, #96	@ 0x60
 8003e2e:	6820      	ldr	r0, [r4, #0]
 8003e30:	f7ff fceb 	bl	800380a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003e34:	2000      	movs	r0, #0
      break;
 8003e36:	e7e0      	b.n	8003dfa <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e38:	68ca      	ldr	r2, [r1, #12]
 8003e3a:	6849      	ldr	r1, [r1, #4]
 8003e3c:	6800      	ldr	r0, [r0, #0]
 8003e3e:	f7ff fcbd 	bl	80037bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e42:	2140      	movs	r1, #64	@ 0x40
 8003e44:	6820      	ldr	r0, [r4, #0]
 8003e46:	f7ff fce0 	bl	800380a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003e4a:	2000      	movs	r0, #0
      break;
 8003e4c:	e7d5      	b.n	8003dfa <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003e4e:	2000      	movs	r0, #0
 8003e50:	e7d3      	b.n	8003dfa <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003e52:	2001      	movs	r0, #1
 8003e54:	e7d1      	b.n	8003dfa <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8003e56:	2002      	movs	r0, #2
}
 8003e58:	4770      	bx	lr

08003e5a <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e5a:	f001 011f 	and.w	r1, r1, #31
 8003e5e:	f04f 0c01 	mov.w	ip, #1
 8003e62:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e66:	6a03      	ldr	r3, [r0, #32]
 8003e68:	ea23 030c 	bic.w	r3, r3, ip
 8003e6c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e6e:	6a03      	ldr	r3, [r0, #32]
 8003e70:	408a      	lsls	r2, r1
 8003e72:	4313      	orrs	r3, r2
 8003e74:	6203      	str	r3, [r0, #32]
}
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIM_OC_Start_IT>:
{
 8003e78:	b510      	push	{r4, lr}
 8003e7a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	2900      	cmp	r1, #0
 8003e80:	d137      	bne.n	8003ef2 <HAL_TIM_OC_Start_IT+0x7a>
 8003e82:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003e86:	3b01      	subs	r3, #1
 8003e88:	bf18      	it	ne
 8003e8a:	2301      	movne	r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f040 8095 	bne.w	8003fbc <HAL_TIM_OC_Start_IT+0x144>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d143      	bne.n	8003f1e <HAL_TIM_OC_Start_IT+0xa6>
 8003e96:	2302      	movs	r3, #2
 8003e98:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e9c:	6822      	ldr	r2, [r4, #0]
 8003e9e:	68d3      	ldr	r3, [r2, #12]
 8003ea0:	f043 0302 	orr.w	r3, r3, #2
 8003ea4:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	4601      	mov	r1, r0
 8003eaa:	6820      	ldr	r0, [r4, #0]
 8003eac:	f7ff ffd5 	bl	8003e5a <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	4a45      	ldr	r2, [pc, #276]	@ (8003fc8 <HAL_TIM_OC_Start_IT+0x150>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d071      	beq.n	8003f9c <HAL_TIM_OC_Start_IT+0x124>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	4a43      	ldr	r2, [pc, #268]	@ (8003fc8 <HAL_TIM_OC_Start_IT+0x150>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d072      	beq.n	8003fa6 <HAL_TIM_OC_Start_IT+0x12e>
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec4:	d06f      	beq.n	8003fa6 <HAL_TIM_OC_Start_IT+0x12e>
 8003ec6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d06b      	beq.n	8003fa6 <HAL_TIM_OC_Start_IT+0x12e>
 8003ece:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d067      	beq.n	8003fa6 <HAL_TIM_OC_Start_IT+0x12e>
 8003ed6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d063      	beq.n	8003fa6 <HAL_TIM_OC_Start_IT+0x12e>
 8003ede:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d05f      	beq.n	8003fa6 <HAL_TIM_OC_Start_IT+0x12e>
      __HAL_TIM_ENABLE(htim);
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	2000      	movs	r0, #0
 8003ef0:	e065      	b.n	8003fbe <HAL_TIM_OC_Start_IT+0x146>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ef2:	2904      	cmp	r1, #4
 8003ef4:	d007      	beq.n	8003f06 <HAL_TIM_OC_Start_IT+0x8e>
 8003ef6:	2908      	cmp	r1, #8
 8003ef8:	d00b      	beq.n	8003f12 <HAL_TIM_OC_Start_IT+0x9a>
 8003efa:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003efe:	3b01      	subs	r3, #1
 8003f00:	bf18      	it	ne
 8003f02:	2301      	movne	r3, #1
 8003f04:	e7c2      	b.n	8003e8c <HAL_TIM_OC_Start_IT+0x14>
 8003f06:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	bf18      	it	ne
 8003f0e:	2301      	movne	r3, #1
 8003f10:	e7bc      	b.n	8003e8c <HAL_TIM_OC_Start_IT+0x14>
 8003f12:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003f16:	3b01      	subs	r3, #1
 8003f18:	bf18      	it	ne
 8003f1a:	2301      	movne	r3, #1
 8003f1c:	e7b6      	b.n	8003e8c <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f1e:	2804      	cmp	r0, #4
 8003f20:	d024      	beq.n	8003f6c <HAL_TIM_OC_Start_IT+0xf4>
 8003f22:	2808      	cmp	r0, #8
 8003f24:	d02b      	beq.n	8003f7e <HAL_TIM_OC_Start_IT+0x106>
 8003f26:	2302      	movs	r3, #2
 8003f28:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  switch (Channel)
 8003f2c:	280c      	cmp	r0, #12
 8003f2e:	d847      	bhi.n	8003fc0 <HAL_TIM_OC_Start_IT+0x148>
 8003f30:	a301      	add	r3, pc, #4	@ (adr r3, 8003f38 <HAL_TIM_OC_Start_IT+0xc0>)
 8003f32:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08003e9d 	.word	0x08003e9d
 8003f3c:	08003fc1 	.word	0x08003fc1
 8003f40:	08003fc1 	.word	0x08003fc1
 8003f44:	08003fc1 	.word	0x08003fc1
 8003f48:	08003f73 	.word	0x08003f73
 8003f4c:	08003fc1 	.word	0x08003fc1
 8003f50:	08003fc1 	.word	0x08003fc1
 8003f54:	08003fc1 	.word	0x08003fc1
 8003f58:	08003f85 	.word	0x08003f85
 8003f5c:	08003fc1 	.word	0x08003fc1
 8003f60:	08003fc1 	.word	0x08003fc1
 8003f64:	08003fc1 	.word	0x08003fc1
 8003f68:	08003f91 	.word	0x08003f91
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f72:	6822      	ldr	r2, [r4, #0]
 8003f74:	68d3      	ldr	r3, [r2, #12]
 8003f76:	f043 0304 	orr.w	r3, r3, #4
 8003f7a:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8003f7c:	e793      	b.n	8003ea6 <HAL_TIM_OC_Start_IT+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f7e:	2302      	movs	r3, #2
 8003f80:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f84:	6822      	ldr	r2, [r4, #0]
 8003f86:	68d3      	ldr	r3, [r2, #12]
 8003f88:	f043 0308 	orr.w	r3, r3, #8
 8003f8c:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8003f8e:	e78a      	b.n	8003ea6 <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f90:	6822      	ldr	r2, [r4, #0]
 8003f92:	68d3      	ldr	r3, [r2, #12]
 8003f94:	f043 0310 	orr.w	r3, r3, #16
 8003f98:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8003f9a:	e784      	b.n	8003ea6 <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_MOE_ENABLE(htim);
 8003f9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fa2:	645a      	str	r2, [r3, #68]	@ 0x44
 8003fa4:	e788      	b.n	8003eb8 <HAL_TIM_OC_Start_IT+0x40>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fac:	2a06      	cmp	r2, #6
 8003fae:	d009      	beq.n	8003fc4 <HAL_TIM_OC_Start_IT+0x14c>
        __HAL_TIM_ENABLE(htim);
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	2000      	movs	r0, #0
 8003fba:	e000      	b.n	8003fbe <HAL_TIM_OC_Start_IT+0x146>
    return HAL_ERROR;
 8003fbc:	2001      	movs	r0, #1
}
 8003fbe:	bd10      	pop	{r4, pc}
  switch (Channel)
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	e7fc      	b.n	8003fbe <HAL_TIM_OC_Start_IT+0x146>
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	e7fa      	b.n	8003fbe <HAL_TIM_OC_Start_IT+0x146>
 8003fc8:	40010000 	.word	0x40010000

08003fcc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fcc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003fd0:	2a01      	cmp	r2, #1
 8003fd2:	d035      	beq.n	8004040 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8003fd4:	b410      	push	{r4}
 8003fd6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe4:	6802      	ldr	r2, [r0, #0]
 8003fe6:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe8:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fea:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fee:	6808      	ldr	r0, [r1, #0]
 8003ff0:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ff4:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4812      	ldr	r0, [pc, #72]	@ (8004044 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8003ffa:	4282      	cmp	r2, r0
 8003ffc:	d012      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003ffe:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004002:	d00f      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004004:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8004008:	4282      	cmp	r2, r0
 800400a:	d00b      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800400c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004010:	4282      	cmp	r2, r0
 8004012:	d007      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004014:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004018:	4282      	cmp	r2, r0
 800401a:	d003      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800401c:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8004020:	4282      	cmp	r2, r0
 8004022:	d104      	bne.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004024:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004028:	6849      	ldr	r1, [r1, #4]
 800402a:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800402c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004034:	2000      	movs	r0, #0
 8004036:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800403a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800403e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004040:	2002      	movs	r0, #2
}
 8004042:	4770      	bx	lr
 8004044:	40010000 	.word	0x40010000

08004048 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004048:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800404a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d021      	beq.n	8004096 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8004052:	2301      	movs	r3, #1
 8004054:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004058:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800405a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800405e:	6888      	ldr	r0, [r1, #8]
 8004060:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004062:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004066:	6848      	ldr	r0, [r1, #4]
 8004068:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800406a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800406e:	6808      	ldr	r0, [r1, #0]
 8004070:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004072:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004076:	6908      	ldr	r0, [r1, #16]
 8004078:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800407a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800407e:	6948      	ldr	r0, [r1, #20]
 8004080:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004082:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004086:	69c9      	ldr	r1, [r1, #28]
 8004088:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800408a:	6811      	ldr	r1, [r2, #0]
 800408c:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800408e:	2000      	movs	r0, #0
 8004090:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8004094:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004096:	2002      	movs	r0, #2
}
 8004098:	4770      	bx	lr

0800409a <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800409a:	4770      	bx	lr

0800409c <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800409c:	4770      	bx	lr
	...

080040a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040a0:	b530      	push	{r4, r5, lr}
 80040a2:	b089      	sub	sp, #36	@ 0x24
 80040a4:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80040a6:	2400      	movs	r4, #0
 80040a8:	9401      	str	r4, [sp, #4]
 80040aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <HAL_InitTick+0x80>)
 80040ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040ae:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80040b2:	645a      	str	r2, [r3, #68]	@ 0x44
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ba:	9301      	str	r3, [sp, #4]
 80040bc:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80040be:	a902      	add	r1, sp, #8
 80040c0:	a803      	add	r0, sp, #12
 80040c2:	f7ff fae1 	bl	8003688 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80040c6:	f7ff facf 	bl	8003668 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80040ca:	4a16      	ldr	r2, [pc, #88]	@ (8004124 <HAL_InitTick+0x84>)
 80040cc:	fba2 2300 	umull	r2, r3, r2, r0
 80040d0:	0c9b      	lsrs	r3, r3, #18
 80040d2:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80040d4:	4814      	ldr	r0, [pc, #80]	@ (8004128 <HAL_InitTick+0x88>)
 80040d6:	4a15      	ldr	r2, [pc, #84]	@ (800412c <HAL_InitTick+0x8c>)
 80040d8:	6002      	str	r2, [r0, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80040da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80040de:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80040e0:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 80040e2:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040e4:	6084      	str	r4, [r0, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040e6:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim11);
 80040e8:	f7ff fcdc 	bl	8003aa4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80040ec:	4604      	mov	r4, r0
 80040ee:	b110      	cbz	r0, 80040f6 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 80040f0:	4620      	mov	r0, r4
 80040f2:	b009      	add	sp, #36	@ 0x24
 80040f4:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim11);
 80040f6:	480c      	ldr	r0, [pc, #48]	@ (8004128 <HAL_InitTick+0x88>)
 80040f8:	f7ff fb90 	bl	800381c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80040fc:	4604      	mov	r4, r0
 80040fe:	2800      	cmp	r0, #0
 8004100:	d1f6      	bne.n	80040f0 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004102:	201a      	movs	r0, #26
 8004104:	f7fd fe9c 	bl	8001e40 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004108:	2d0f      	cmp	r5, #15
 800410a:	d901      	bls.n	8004110 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 800410c:	2401      	movs	r4, #1
 800410e:	e7ef      	b.n	80040f0 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8004110:	2200      	movs	r2, #0
 8004112:	4629      	mov	r1, r5
 8004114:	201a      	movs	r0, #26
 8004116:	f7fd fe83 	bl	8001e20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800411a:	4b05      	ldr	r3, [pc, #20]	@ (8004130 <HAL_InitTick+0x90>)
 800411c:	601d      	str	r5, [r3, #0]
 800411e:	e7e7      	b.n	80040f0 <HAL_InitTick+0x50>
 8004120:	40023800 	.word	0x40023800
 8004124:	431bde83 	.word	0x431bde83
 8004128:	20004600 	.word	0x20004600
 800412c:	40014800 	.word	0x40014800
 8004130:	2000000c 	.word	0x2000000c

08004134 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004134:	e7fe      	b.n	8004134 <NMI_Handler>

08004136 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004136:	e7fe      	b.n	8004136 <HardFault_Handler>

08004138 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004138:	e7fe      	b.n	8004138 <MemManage_Handler>

0800413a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800413a:	e7fe      	b.n	800413a <BusFault_Handler>

0800413c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800413c:	e7fe      	b.n	800413c <UsageFault_Handler>

0800413e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800413e:	4770      	bx	lr

08004140 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004140:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004142:	4803      	ldr	r0, [pc, #12]	@ (8004150 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004144:	f7ff fba9 	bl	800389a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004148:	4802      	ldr	r0, [pc, #8]	@ (8004154 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800414a:	f7ff fba6 	bl	800389a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800414e:	bd08      	pop	{r3, pc}
 8004150:	20004c24 	.word	0x20004c24
 8004154:	20004600 	.word	0x20004600

08004158 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004158:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  scheduler_timer_callback();
 800415a:	f001 ff8b 	bl	8006074 <scheduler_timer_callback>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800415e:	4802      	ldr	r0, [pc, #8]	@ (8004168 <TIM2_IRQHandler+0x10>)
 8004160:	f7ff fb9b 	bl	800389a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004164:	bd08      	pop	{r3, pc}
 8004166:	bf00      	nop
 8004168:	20004bdc 	.word	0x20004bdc

0800416c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800416c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800416e:	4802      	ldr	r0, [pc, #8]	@ (8004178 <DMA2_Stream0_IRQHandler+0xc>)
 8004170:	f7fd ff36 	bl	8001fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004174:	bd08      	pop	{r3, pc}
 8004176:	bf00      	nop
 8004178:	2000016c 	.word	0x2000016c

0800417c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800417c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800417e:	4802      	ldr	r0, [pc, #8]	@ (8004188 <OTG_FS_IRQHandler+0xc>)
 8004180:	f7fe fc61 	bl	8002a46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004184:	bd08      	pop	{r3, pc}
 8004186:	bf00      	nop
 8004188:	20005c3c 	.word	0x20005c3c

0800418c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800418c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004192:	9b01      	ldr	r3, [sp, #4]
 8004194:	3301      	adds	r3, #1
 8004196:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8004198:	9b01      	ldr	r3, [sp, #4]
 800419a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800419e:	d815      	bhi.n	80041cc <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041a0:	6903      	ldr	r3, [r0, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	daf5      	bge.n	8004192 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041aa:	6903      	ldr	r3, [r0, #16]
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 80041b2:	9b01      	ldr	r3, [sp, #4]
 80041b4:	3301      	adds	r3, #1
 80041b6:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80041b8:	9b01      	ldr	r3, [sp, #4]
 80041ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041be:	d808      	bhi.n	80041d2 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80041c0:	6903      	ldr	r3, [r0, #16]
 80041c2:	f013 0f01 	tst.w	r3, #1
 80041c6:	d1f4      	bne.n	80041b2 <USB_CoreReset+0x26>

  return HAL_OK;
 80041c8:	2000      	movs	r0, #0
 80041ca:	e000      	b.n	80041ce <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 80041cc:	2003      	movs	r0, #3
}
 80041ce:	b002      	add	sp, #8
 80041d0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80041d2:	2003      	movs	r0, #3
 80041d4:	e7fb      	b.n	80041ce <USB_CoreReset+0x42>

080041d6 <USB_CoreInit>:
{
 80041d6:	b084      	sub	sp, #16
 80041d8:	b510      	push	{r4, lr}
 80041da:	4604      	mov	r4, r0
 80041dc:	a803      	add	r0, sp, #12
 80041de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041e2:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d121      	bne.n	800422e <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041ea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80041ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f0:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041f2:	68e3      	ldr	r3, [r4, #12]
 80041f4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80041f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041fc:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041fe:	68e3      	ldr	r3, [r4, #12]
 8004200:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004204:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8004206:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d00a      	beq.n	8004224 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 800420e:	4620      	mov	r0, r4
 8004210:	f7ff ffbc 	bl	800418c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004214:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d01c      	beq.n	8004256 <USB_CoreInit+0x80>
}
 800421c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004220:	b004      	add	sp, #16
 8004222:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004224:	68e3      	ldr	r3, [r4, #12]
 8004226:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800422a:	60e3      	str	r3, [r4, #12]
 800422c:	e7ef      	b.n	800420e <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800422e:	68e3      	ldr	r3, [r4, #12]
 8004230:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004234:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8004236:	4620      	mov	r0, r4
 8004238:	f7ff ffa8 	bl	800418c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800423c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8004240:	b923      	cbnz	r3, 800424c <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004242:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004248:	63a3      	str	r3, [r4, #56]	@ 0x38
 800424a:	e7e3      	b.n	8004214 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800424c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800424e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004252:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004254:	e7de      	b.n	8004214 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004256:	68a3      	ldr	r3, [r4, #8]
 8004258:	f043 0306 	orr.w	r3, r3, #6
 800425c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800425e:	68a3      	ldr	r3, [r4, #8]
 8004260:	f043 0320 	orr.w	r3, r3, #32
 8004264:	60a3      	str	r3, [r4, #8]
 8004266:	e7d9      	b.n	800421c <USB_CoreInit+0x46>

08004268 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8004268:	2a02      	cmp	r2, #2
 800426a:	d00a      	beq.n	8004282 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800426c:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800426e:	68c3      	ldr	r3, [r0, #12]
 8004270:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8004274:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004276:	68c3      	ldr	r3, [r0, #12]
 8004278:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800427c:	60c3      	str	r3, [r0, #12]
}
 800427e:	2000      	movs	r0, #0
 8004280:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004282:	4b23      	ldr	r3, [pc, #140]	@ (8004310 <USB_SetTurnaroundTime+0xa8>)
 8004284:	440b      	add	r3, r1
 8004286:	4a23      	ldr	r2, [pc, #140]	@ (8004314 <USB_SetTurnaroundTime+0xac>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d92f      	bls.n	80042ec <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800428c:	4b22      	ldr	r3, [pc, #136]	@ (8004318 <USB_SetTurnaroundTime+0xb0>)
 800428e:	440b      	add	r3, r1
 8004290:	4a22      	ldr	r2, [pc, #136]	@ (800431c <USB_SetTurnaroundTime+0xb4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d92c      	bls.n	80042f0 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004296:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 800429a:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 800429e:	4a20      	ldr	r2, [pc, #128]	@ (8004320 <USB_SetTurnaroundTime+0xb8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d927      	bls.n	80042f4 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042a4:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 80042a8:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 80042ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004324 <USB_SetTurnaroundTime+0xbc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d322      	bcc.n	80042f8 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004328 <USB_SetTurnaroundTime+0xc0>)
 80042b4:	440b      	add	r3, r1
 80042b6:	4a1d      	ldr	r2, [pc, #116]	@ (800432c <USB_SetTurnaroundTime+0xc4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d91f      	bls.n	80042fc <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004330 <USB_SetTurnaroundTime+0xc8>)
 80042be:	440b      	add	r3, r1
 80042c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004334 <USB_SetTurnaroundTime+0xcc>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d31c      	bcc.n	8004300 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80042c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004338 <USB_SetTurnaroundTime+0xd0>)
 80042c8:	440b      	add	r3, r1
 80042ca:	4a1c      	ldr	r2, [pc, #112]	@ (800433c <USB_SetTurnaroundTime+0xd4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d319      	bcc.n	8004304 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80042d0:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 80042d4:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 80042d8:	4a19      	ldr	r2, [pc, #100]	@ (8004340 <USB_SetTurnaroundTime+0xd8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d314      	bcc.n	8004308 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80042de:	4b19      	ldr	r3, [pc, #100]	@ (8004344 <USB_SetTurnaroundTime+0xdc>)
 80042e0:	440b      	add	r3, r1
 80042e2:	4a19      	ldr	r2, [pc, #100]	@ (8004348 <USB_SetTurnaroundTime+0xe0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d211      	bcs.n	800430c <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 80042e8:	2207      	movs	r2, #7
 80042ea:	e7c0      	b.n	800426e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80042ec:	220f      	movs	r2, #15
 80042ee:	e7be      	b.n	800426e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80042f0:	220e      	movs	r2, #14
 80042f2:	e7bc      	b.n	800426e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80042f4:	220d      	movs	r2, #13
 80042f6:	e7ba      	b.n	800426e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80042f8:	220c      	movs	r2, #12
 80042fa:	e7b8      	b.n	800426e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80042fc:	220b      	movs	r2, #11
 80042fe:	e7b6      	b.n	800426e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8004300:	220a      	movs	r2, #10
 8004302:	e7b4      	b.n	800426e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8004304:	2209      	movs	r2, #9
 8004306:	e7b2      	b.n	800426e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8004308:	2208      	movs	r2, #8
 800430a:	e7b0      	b.n	800426e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 800430c:	2206      	movs	r2, #6
 800430e:	e7ae      	b.n	800426e <USB_SetTurnaroundTime+0x6>
 8004310:	ff275340 	.word	0xff275340
 8004314:	000c34ff 	.word	0x000c34ff
 8004318:	ff1b1e40 	.word	0xff1b1e40
 800431c:	000f423f 	.word	0x000f423f
 8004320:	00124f7f 	.word	0x00124f7f
 8004324:	0013d620 	.word	0x0013d620
 8004328:	fee5b660 	.word	0xfee5b660
 800432c:	0016e35f 	.word	0x0016e35f
 8004330:	feced300 	.word	0xfeced300
 8004334:	001b7740 	.word	0x001b7740
 8004338:	feb35bc0 	.word	0xfeb35bc0
 800433c:	002191c0 	.word	0x002191c0
 8004340:	00387520 	.word	0x00387520
 8004344:	fe5954e0 	.word	0xfe5954e0
 8004348:	00419ce0 	.word	0x00419ce0

0800434c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800434c:	6883      	ldr	r3, [r0, #8]
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	6083      	str	r3, [r0, #8]
}
 8004354:	2000      	movs	r0, #0
 8004356:	4770      	bx	lr

08004358 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004358:	6883      	ldr	r3, [r0, #8]
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	6083      	str	r3, [r0, #8]
}
 8004360:	2000      	movs	r0, #0
 8004362:	4770      	bx	lr

08004364 <USB_FlushTxFifo>:
{
 8004364:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	9301      	str	r3, [sp, #4]
    count++;
 800436a:	9b01      	ldr	r3, [sp, #4]
 800436c:	3301      	adds	r3, #1
 800436e:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004370:	9b01      	ldr	r3, [sp, #4]
 8004372:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004376:	d815      	bhi.n	80043a4 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004378:	6903      	ldr	r3, [r0, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	daf5      	bge.n	800436a <USB_FlushTxFifo+0x6>
  count = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004382:	0189      	lsls	r1, r1, #6
 8004384:	f041 0120 	orr.w	r1, r1, #32
 8004388:	6101      	str	r1, [r0, #16]
    count++;
 800438a:	9b01      	ldr	r3, [sp, #4]
 800438c:	3301      	adds	r3, #1
 800438e:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004390:	9b01      	ldr	r3, [sp, #4]
 8004392:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004396:	d808      	bhi.n	80043aa <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004398:	6903      	ldr	r3, [r0, #16]
 800439a:	f013 0f20 	tst.w	r3, #32
 800439e:	d1f4      	bne.n	800438a <USB_FlushTxFifo+0x26>
  return HAL_OK;
 80043a0:	2000      	movs	r0, #0
 80043a2:	e000      	b.n	80043a6 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 80043a4:	2003      	movs	r0, #3
}
 80043a6:	b002      	add	sp, #8
 80043a8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80043aa:	2003      	movs	r0, #3
 80043ac:	e7fb      	b.n	80043a6 <USB_FlushTxFifo+0x42>

080043ae <USB_FlushRxFifo>:
{
 80043ae:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	9301      	str	r3, [sp, #4]
    count++;
 80043b4:	9b01      	ldr	r3, [sp, #4]
 80043b6:	3301      	adds	r3, #1
 80043b8:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80043ba:	9b01      	ldr	r3, [sp, #4]
 80043bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043c0:	d813      	bhi.n	80043ea <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043c2:	6903      	ldr	r3, [r0, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	daf5      	bge.n	80043b4 <USB_FlushRxFifo+0x6>
  count = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043cc:	2310      	movs	r3, #16
 80043ce:	6103      	str	r3, [r0, #16]
    count++;
 80043d0:	9b01      	ldr	r3, [sp, #4]
 80043d2:	3301      	adds	r3, #1
 80043d4:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80043d6:	9b01      	ldr	r3, [sp, #4]
 80043d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043dc:	d808      	bhi.n	80043f0 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043de:	6903      	ldr	r3, [r0, #16]
 80043e0:	f013 0f10 	tst.w	r3, #16
 80043e4:	d1f4      	bne.n	80043d0 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 80043e6:	2000      	movs	r0, #0
 80043e8:	e000      	b.n	80043ec <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 80043ea:	2003      	movs	r0, #3
}
 80043ec:	b002      	add	sp, #8
 80043ee:	4770      	bx	lr
      return HAL_TIMEOUT;
 80043f0:	2003      	movs	r0, #3
 80043f2:	e7fb      	b.n	80043ec <USB_FlushRxFifo+0x3e>

080043f4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80043f4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 80043f8:	4319      	orrs	r1, r3
 80043fa:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 80043fe:	2000      	movs	r0, #0
 8004400:	4770      	bx	lr
	...

08004404 <USB_DevInit>:
{
 8004404:	b084      	sub	sp, #16
 8004406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004408:	4604      	mov	r4, r0
 800440a:	a807      	add	r0, sp, #28
 800440c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8004410:	2300      	movs	r3, #0
 8004412:	e006      	b.n	8004422 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8004414:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004418:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800441c:	2100      	movs	r1, #0
 800441e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8004420:	3301      	adds	r3, #1
 8004422:	2b0e      	cmp	r3, #14
 8004424:	d9f6      	bls.n	8004414 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 8004426:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 800442a:	bb06      	cbnz	r6, 800446e <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800442c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8004430:	f043 0302 	orr.w	r3, r3, #2
 8004434:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004438:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800443a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800443e:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004440:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004442:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004446:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004448:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800444a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800444e:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004456:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800445a:	2b01      	cmp	r3, #1
 800445c:	d115      	bne.n	800448a <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 800445e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004462:	b96b      	cbnz	r3, 8004480 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004464:	2100      	movs	r1, #0
 8004466:	4620      	mov	r0, r4
 8004468:	f7ff ffc4 	bl	80043f4 <USB_SetDevSpeed>
 800446c:	e011      	b.n	8004492 <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800446e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004470:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004474:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004476:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004478:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800447c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800447e:	e7e7      	b.n	8004450 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004480:	2101      	movs	r1, #1
 8004482:	4620      	mov	r0, r4
 8004484:	f7ff ffb6 	bl	80043f4 <USB_SetDevSpeed>
 8004488:	e003      	b.n	8004492 <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800448a:	2103      	movs	r1, #3
 800448c:	4620      	mov	r0, r4
 800448e:	f7ff ffb1 	bl	80043f4 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004492:	2110      	movs	r1, #16
 8004494:	4620      	mov	r0, r4
 8004496:	f7ff ff65 	bl	8004364 <USB_FlushTxFifo>
 800449a:	4605      	mov	r5, r0
 800449c:	b100      	cbz	r0, 80044a0 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 800449e:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044a0:	4620      	mov	r0, r4
 80044a2:	f7ff ff84 	bl	80043ae <USB_FlushRxFifo>
 80044a6:	b100      	cbz	r0, 80044aa <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 80044a8:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80044aa:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 80044ae:	2300      	movs	r3, #0
 80044b0:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044b4:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044b8:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044bc:	e00d      	b.n	80044da <USB_DevInit+0xd6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044c2:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 80044c6:	e002      	b.n	80044ce <USB_DevInit+0xca>
      USBx_INEP(i)->DIEPCTL = 0U;
 80044c8:	2000      	movs	r0, #0
 80044ca:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044ce:	2200      	movs	r2, #0
 80044d0:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044d2:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 80044d6:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044d8:	3301      	adds	r3, #1
 80044da:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80044de:	4299      	cmp	r1, r3
 80044e0:	d90e      	bls.n	8004500 <USB_DevInit+0xfc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044e2:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80044e6:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 80044ea:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 80044ee:	2800      	cmp	r0, #0
 80044f0:	daea      	bge.n	80044c8 <USB_DevInit+0xc4>
      if (i == 0U)
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e3      	bne.n	80044be <USB_DevInit+0xba>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044f6:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80044fa:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 80044fe:	e7e6      	b.n	80044ce <USB_DevInit+0xca>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004500:	2300      	movs	r3, #0
 8004502:	e00a      	b.n	800451a <USB_DevInit+0x116>
      if (i == 0U)
 8004504:	b1bb      	cbz	r3, 8004536 <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004506:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 800450a:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800450e:	2200      	movs	r2, #0
 8004510:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004512:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8004516:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004518:	3301      	adds	r3, #1
 800451a:	4299      	cmp	r1, r3
 800451c:	d910      	bls.n	8004540 <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800451e:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8004522:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8004526:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 800452a:	2f00      	cmp	r7, #0
 800452c:	dbea      	blt.n	8004504 <USB_DevInit+0x100>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800452e:	2700      	movs	r7, #0
 8004530:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8004534:	e7eb      	b.n	800450e <USB_DevInit+0x10a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004536:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 800453a:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 800453e:	e7e6      	b.n	800450e <USB_DevInit+0x10a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004540:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8004544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004548:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004550:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8004554:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8004556:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800455a:	b91b      	cbnz	r3, 8004564 <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800455c:	69a3      	ldr	r3, [r4, #24]
 800455e:	f043 0310 	orr.w	r3, r3, #16
 8004562:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004564:	69a2      	ldr	r2, [r4, #24]
 8004566:	4b0c      	ldr	r3, [pc, #48]	@ (8004598 <USB_DevInit+0x194>)
 8004568:	4313      	orrs	r3, r2
 800456a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800456c:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8004570:	b11b      	cbz	r3, 800457a <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004572:	69a3      	ldr	r3, [r4, #24]
 8004574:	f043 0308 	orr.w	r3, r3, #8
 8004578:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800457a:	2e01      	cmp	r6, #1
 800457c:	d004      	beq.n	8004588 <USB_DevInit+0x184>
}
 800457e:	4628      	mov	r0, r5
 8004580:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004584:	b004      	add	sp, #16
 8004586:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004588:	69a3      	ldr	r3, [r4, #24]
 800458a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800458e:	f043 0304 	orr.w	r3, r3, #4
 8004592:	61a3      	str	r3, [r4, #24]
 8004594:	e7f3      	b.n	800457e <USB_DevInit+0x17a>
 8004596:	bf00      	nop
 8004598:	803c3800 	.word	0x803c3800

0800459c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800459c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80045a0:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d004      	beq.n	80045b2 <USB_GetDevSpeed+0x16>
 80045a8:	2b06      	cmp	r3, #6
 80045aa:	d004      	beq.n	80045b6 <USB_GetDevSpeed+0x1a>
 80045ac:	b92b      	cbnz	r3, 80045ba <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045ae:	2000      	movs	r0, #0
 80045b0:	4770      	bx	lr
 80045b2:	2002      	movs	r0, #2
 80045b4:	4770      	bx	lr
 80045b6:	2002      	movs	r0, #2
 80045b8:	4770      	bx	lr
 80045ba:	200f      	movs	r0, #15
}
 80045bc:	4770      	bx	lr

080045be <USB_ActivateEndpoint>:
{
 80045be:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80045c0:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 80045c4:	784b      	ldrb	r3, [r1, #1]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d023      	beq.n	8004612 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80045ca:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 80045ce:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 80045d2:	f00c 040f 	and.w	r4, ip, #15
 80045d6:	2201      	movs	r2, #1
 80045d8:	40a2      	lsls	r2, r4
 80045da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045de:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045e2:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80045e6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80045ea:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80045ee:	d10e      	bne.n	800460e <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045f0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80045f4:	688a      	ldr	r2, [r1, #8]
 80045f6:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80045fa:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045fc:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8004600:	4313      	orrs	r3, r2
 8004602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800460a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800460e:	2000      	movs	r0, #0
 8004610:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004612:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8004616:	f00c 0e0f 	and.w	lr, ip, #15
 800461a:	fa03 f30e 	lsl.w	r3, r3, lr
 800461e:	b29b      	uxth	r3, r3
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004626:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800462a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800462e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004632:	d1ec      	bne.n	800460e <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004634:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004638:	688a      	ldr	r2, [r1, #8]
 800463a:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800463e:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004640:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004644:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004648:	4313      	orrs	r3, r2
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800464e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004652:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8004656:	e7da      	b.n	800460e <USB_ActivateEndpoint+0x50>

08004658 <USB_DeactivateEndpoint>:
{
 8004658:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800465a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800465c:	784a      	ldrb	r2, [r1, #1]
 800465e:	2a01      	cmp	r2, #1
 8004660:	d026      	beq.n	80046b0 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004662:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004666:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800466a:	2a00      	cmp	r2, #0
 800466c:	db52      	blt.n	8004714 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800466e:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8004672:	780a      	ldrb	r2, [r1, #0]
 8004674:	f002 020f 	and.w	r2, r2, #15
 8004678:	f04f 0c01 	mov.w	ip, #1
 800467c:	fa0c f202 	lsl.w	r2, ip, r2
 8004680:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8004684:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004688:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800468c:	7809      	ldrb	r1, [r1, #0]
 800468e:	f001 010f 	and.w	r1, r1, #15
 8004692:	fa0c fc01 	lsl.w	ip, ip, r1
 8004696:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 800469a:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800469e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 80046a2:	4a23      	ldr	r2, [pc, #140]	@ (8004730 <USB_DeactivateEndpoint+0xd8>)
 80046a4:	400a      	ands	r2, r1
 80046a6:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 80046aa:	2000      	movs	r0, #0
 80046ac:	bc30      	pop	{r4, r5}
 80046ae:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046b0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80046b4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80046b8:	2a00      	cmp	r2, #0
 80046ba:	db1e      	blt.n	80046fa <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046bc:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 80046c0:	780a      	ldrb	r2, [r1, #0]
 80046c2:	f002 020f 	and.w	r2, r2, #15
 80046c6:	2401      	movs	r4, #1
 80046c8:	fa04 f202 	lsl.w	r2, r4, r2
 80046cc:	b292      	uxth	r2, r2
 80046ce:	ea25 0202 	bic.w	r2, r5, r2
 80046d2:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046d6:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80046da:	7809      	ldrb	r1, [r1, #0]
 80046dc:	f001 010f 	and.w	r1, r1, #15
 80046e0:	408c      	lsls	r4, r1
 80046e2:	b2a4      	uxth	r4, r4
 80046e4:	ea22 0204 	bic.w	r2, r2, r4
 80046e8:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80046ec:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80046f0:	4a10      	ldr	r2, [pc, #64]	@ (8004734 <USB_DeactivateEndpoint+0xdc>)
 80046f2:	400a      	ands	r2, r1
 80046f4:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 80046f8:	e7d7      	b.n	80046aa <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80046fa:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80046fe:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8004702:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004706:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800470a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800470e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8004712:	e7d3      	b.n	80046bc <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004714:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8004718:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800471c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004720:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8004724:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004728:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 800472c:	e79f      	b.n	800466e <USB_DeactivateEndpoint+0x16>
 800472e:	bf00      	nop
 8004730:	eff37800 	.word	0xeff37800
 8004734:	ec337800 	.word	0xec337800

08004738 <USB_EPStopXfer>:
{
 8004738:	b410      	push	{r4}
 800473a:	b083      	sub	sp, #12
 800473c:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8004742:	7848      	ldrb	r0, [r1, #1]
 8004744:	2801      	cmp	r0, #1
 8004746:	d00b      	beq.n	8004760 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004748:	780b      	ldrb	r3, [r1, #0]
 800474a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800474e:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8004752:	2800      	cmp	r0, #0
 8004754:	db2d      	blt.n	80047b2 <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8004756:	2000      	movs	r0, #0
}
 8004758:	b003      	add	sp, #12
 800475a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800475e:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004760:	780b      	ldrb	r3, [r1, #0]
 8004762:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004766:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800476a:	2c00      	cmp	r4, #0
 800476c:	db01      	blt.n	8004772 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 800476e:	2000      	movs	r0, #0
 8004770:	e7f2      	b.n	8004758 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004772:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8004776:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 800477a:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800477e:	780b      	ldrb	r3, [r1, #0]
 8004780:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004784:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8004788:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 800478c:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8004790:	9b01      	ldr	r3, [sp, #4]
 8004792:	3301      	adds	r3, #1
 8004794:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8004796:	9c01      	ldr	r4, [sp, #4]
 8004798:	f242 7310 	movw	r3, #10000	@ 0x2710
 800479c:	429c      	cmp	r4, r3
 800479e:	d8db      	bhi.n	8004758 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80047a0:	780b      	ldrb	r3, [r1, #0]
 80047a2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80047a6:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	dbf0      	blt.n	8004790 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 80047ae:	2000      	movs	r0, #0
 80047b0:	e7d2      	b.n	8004758 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80047b2:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80047b6:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 80047ba:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80047be:	780b      	ldrb	r3, [r1, #0]
 80047c0:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80047c4:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80047c8:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80047cc:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 80047d0:	9b01      	ldr	r3, [sp, #4]
 80047d2:	3301      	adds	r3, #1
 80047d4:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80047d6:	9801      	ldr	r0, [sp, #4]
 80047d8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80047dc:	4298      	cmp	r0, r3
 80047de:	d808      	bhi.n	80047f2 <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80047e0:	780b      	ldrb	r3, [r1, #0]
 80047e2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80047e6:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	dbf0      	blt.n	80047d0 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 80047ee:	2000      	movs	r0, #0
 80047f0:	e7b2      	b.n	8004758 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 80047f2:	2001      	movs	r0, #1
 80047f4:	e7b0      	b.n	8004758 <USB_EPStopXfer+0x20>

080047f6 <USB_WritePacket>:
{
 80047f6:	b510      	push	{r4, lr}
 80047f8:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 80047fc:	b984      	cbnz	r4, 8004820 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 80047fe:	3303      	adds	r3, #3
 8004800:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8004804:	f04f 0c00 	mov.w	ip, #0
 8004808:	e008      	b.n	800481c <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800480a:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800480e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004812:	f851 4b04 	ldr.w	r4, [r1], #4
 8004816:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8004818:	f10c 0c01 	add.w	ip, ip, #1
 800481c:	45f4      	cmp	ip, lr
 800481e:	d3f4      	bcc.n	800480a <USB_WritePacket+0x14>
}
 8004820:	2000      	movs	r0, #0
 8004822:	bd10      	pop	{r4, pc}

08004824 <USB_EPStartXfer>:
{
 8004824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004826:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8004828:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800482a:	784b      	ldrb	r3, [r1, #1]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d02d      	beq.n	800488c <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004830:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8004834:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8004838:	691d      	ldr	r5, [r3, #16]
 800483a:	f36f 0512 	bfc	r5, #0, #19
 800483e:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004840:	691d      	ldr	r5, [r3, #16]
 8004842:	f36f 45dc 	bfc	r5, #19, #10
 8004846:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8004848:	2c00      	cmp	r4, #0
 800484a:	f040 80ce 	bne.w	80049ea <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 800484e:	690c      	ldr	r4, [r1, #16]
 8004850:	b10c      	cbz	r4, 8004856 <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8004852:	688c      	ldr	r4, [r1, #8]
 8004854:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8004856:	688c      	ldr	r4, [r1, #8]
 8004858:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800485a:	691d      	ldr	r5, [r3, #16]
 800485c:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004860:	432c      	orrs	r4, r5
 8004862:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004864:	691c      	ldr	r4, [r3, #16]
 8004866:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800486a:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800486c:	2a01      	cmp	r2, #1
 800486e:	f000 80df 	beq.w	8004a30 <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 8004872:	790b      	ldrb	r3, [r1, #4]
 8004874:	2b01      	cmp	r3, #1
 8004876:	f000 80e1 	beq.w	8004a3c <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800487a:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800487e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004882:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8004886:	2000      	movs	r0, #0
 8004888:	b003      	add	sp, #12
 800488a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 800488c:	690b      	ldr	r3, [r1, #16]
 800488e:	bb73      	cbnz	r3, 80048ee <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004890:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8004894:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8004898:	f36f 45dc 	bfc	r5, #19, #10
 800489c:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048a0:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 80048a4:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 80048a8:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048ac:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 80048b0:	f36f 0512 	bfc	r5, #0, #19
 80048b4:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 80048b8:	2a01      	cmp	r2, #1
 80048ba:	d054      	beq.n	8004966 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048bc:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80048c0:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80048c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80048c8:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 80048cc:	790b      	ldrb	r3, [r1, #4]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d072      	beq.n	80049b8 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 80048d2:	690b      	ldr	r3, [r1, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0d6      	beq.n	8004886 <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80048d8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 80048dc:	7809      	ldrb	r1, [r1, #0]
 80048de:	f001 010f 	and.w	r1, r1, #15
 80048e2:	2201      	movs	r2, #1
 80048e4:	408a      	lsls	r2, r1
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 80048ec:	e7cb      	b.n	8004886 <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048ee:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80048f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048f6:	691d      	ldr	r5, [r3, #16]
 80048f8:	f36f 0512 	bfc	r5, #0, #19
 80048fc:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048fe:	691d      	ldr	r5, [r3, #16]
 8004900:	f36f 45dc 	bfc	r5, #19, #10
 8004904:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8004906:	b984      	cbnz	r4, 800492a <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 8004908:	690e      	ldr	r6, [r1, #16]
 800490a:	688d      	ldr	r5, [r1, #8]
 800490c:	42ae      	cmp	r6, r5
 800490e:	d900      	bls.n	8004912 <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 8004910:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004912:	691d      	ldr	r5, [r3, #16]
 8004914:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8004918:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800491a:	691d      	ldr	r5, [r3, #16]
 800491c:	690e      	ldr	r6, [r1, #16]
 800491e:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8004922:	ea45 050c 	orr.w	r5, r5, ip
 8004926:	611d      	str	r5, [r3, #16]
 8004928:	e7c6      	b.n	80048b8 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800492a:	690d      	ldr	r5, [r1, #16]
 800492c:	688e      	ldr	r6, [r1, #8]
 800492e:	4435      	add	r5, r6
 8004930:	3d01      	subs	r5, #1
 8004932:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004936:	691e      	ldr	r6, [r3, #16]
 8004938:	fa1f fc85 	uxth.w	ip, r5
 800493c:	4f49      	ldr	r7, [pc, #292]	@ (8004a64 <USB_EPStartXfer+0x240>)
 800493e:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8004942:	4335      	orrs	r5, r6
 8004944:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8004946:	790d      	ldrb	r5, [r1, #4]
 8004948:	2d01      	cmp	r5, #1
 800494a:	d1e6      	bne.n	800491a <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800494c:	691d      	ldr	r5, [r3, #16]
 800494e:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8004952:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004954:	691d      	ldr	r5, [r3, #16]
 8004956:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 800495a:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 800495e:	ea45 050c 	orr.w	r5, r5, ip
 8004962:	611d      	str	r5, [r3, #16]
 8004964:	e7d9      	b.n	800491a <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8004966:	69cb      	ldr	r3, [r1, #28]
 8004968:	b11b      	cbz	r3, 8004972 <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800496a:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800496e:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8004972:	790b      	ldrb	r3, [r1, #4]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d008      	beq.n	800498a <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004978:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800497c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004980:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004984:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8004988:	e77d      	b.n	8004886 <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800498a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800498e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004992:	d108      	bne.n	80049a6 <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004994:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8004998:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 800499c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80049a0:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 80049a4:	e7e8      	b.n	8004978 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049a6:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 80049aa:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 80049ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049b2:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 80049b6:	e7df      	b.n	8004978 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049b8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80049bc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80049c0:	d10c      	bne.n	80049dc <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049c2:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80049c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80049ca:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80049ce:	9200      	str	r2, [sp, #0]
 80049d0:	8a0b      	ldrh	r3, [r1, #16]
 80049d2:	780a      	ldrb	r2, [r1, #0]
 80049d4:	68c9      	ldr	r1, [r1, #12]
 80049d6:	f7ff ff0e 	bl	80047f6 <USB_WritePacket>
 80049da:	e754      	b.n	8004886 <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049dc:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80049e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049e4:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 80049e8:	e7f1      	b.n	80049ce <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 80049ea:	690c      	ldr	r4, [r1, #16]
 80049ec:	b954      	cbnz	r4, 8004a04 <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80049ee:	691c      	ldr	r4, [r3, #16]
 80049f0:	688d      	ldr	r5, [r1, #8]
 80049f2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80049f6:	432c      	orrs	r4, r5
 80049f8:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049fa:	691c      	ldr	r4, [r3, #16]
 80049fc:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004a00:	611c      	str	r4, [r3, #16]
 8004a02:	e733      	b.n	800486c <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a04:	688d      	ldr	r5, [r1, #8]
 8004a06:	442c      	add	r4, r5
 8004a08:	3c01      	subs	r4, #1
 8004a0a:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004a0e:	b2a4      	uxth	r4, r4
 8004a10:	fb04 f505 	mul.w	r5, r4, r5
 8004a14:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004a16:	691d      	ldr	r5, [r3, #16]
 8004a18:	4e12      	ldr	r6, [pc, #72]	@ (8004a64 <USB_EPStartXfer+0x240>)
 8004a1a:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8004a1e:	432c      	orrs	r4, r5
 8004a20:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004a22:	691c      	ldr	r4, [r3, #16]
 8004a24:	6a0d      	ldr	r5, [r1, #32]
 8004a26:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004a2a:	432c      	orrs	r4, r5
 8004a2c:	611c      	str	r4, [r3, #16]
 8004a2e:	e71d      	b.n	800486c <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a30:	68ca      	ldr	r2, [r1, #12]
 8004a32:	2a00      	cmp	r2, #0
 8004a34:	f43f af1d 	beq.w	8004872 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a38:	615a      	str	r2, [r3, #20]
 8004a3a:	e71a      	b.n	8004872 <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a3c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004a40:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004a44:	d106      	bne.n	8004a54 <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a46:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8004a4a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a4e:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8004a52:	e712      	b.n	800487a <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a54:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8004a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a5c:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8004a60:	e70b      	b.n	800487a <USB_EPStartXfer+0x56>
 8004a62:	bf00      	nop
 8004a64:	1ff80000 	.word	0x1ff80000

08004a68 <USB_ReadPacket>:
{
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	4684      	mov	ip, r0
 8004a6c:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a6e:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8004a72:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8004a76:	2300      	movs	r3, #0
 8004a78:	e005      	b.n	8004a86 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a7a:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 8004a7e:	6809      	ldr	r1, [r1, #0]
 8004a80:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8004a84:	3301      	adds	r3, #1
 8004a86:	4573      	cmp	r3, lr
 8004a88:	d3f7      	bcc.n	8004a7a <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8004a8a:	b17a      	cbz	r2, 8004aac <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a8c:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8004a90:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8004a94:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a96:	b2cb      	uxtb	r3, r1
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	fa24 f303 	lsr.w	r3, r4, r3
 8004a9e:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8004aa2:	3101      	adds	r1, #1
      remaining_bytes--;
 8004aa4:	3a01      	subs	r2, #1
 8004aa6:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8004aa8:	2a00      	cmp	r2, #0
 8004aaa:	d1f4      	bne.n	8004a96 <USB_ReadPacket+0x2e>
}
 8004aac:	bd10      	pop	{r4, pc}

08004aae <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8004aae:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004ab0:	784a      	ldrb	r2, [r1, #1]
 8004ab2:	2a01      	cmp	r2, #1
 8004ab4:	d014      	beq.n	8004ae0 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ab6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004aba:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8004abe:	2a00      	cmp	r2, #0
 8004ac0:	db06      	blt.n	8004ad0 <USB_EPSetStall+0x22>
 8004ac2:	b12b      	cbz	r3, 8004ad0 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ac4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004ac8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004acc:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ad0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004ad4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ad8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004adc:	2000      	movs	r0, #0
 8004ade:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ae0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004ae4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8004ae8:	2a00      	cmp	r2, #0
 8004aea:	db06      	blt.n	8004afa <USB_EPSetStall+0x4c>
 8004aec:	b12b      	cbz	r3, 8004afa <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004aee:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004af2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004af6:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004afa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004afe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b02:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8004b06:	e7e9      	b.n	8004adc <USB_EPSetStall+0x2e>

08004b08 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8004b08:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004b0a:	784a      	ldrb	r2, [r1, #1]
 8004b0c:	2a01      	cmp	r2, #1
 8004b0e:	d00e      	beq.n	8004b2e <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b10:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004b14:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004b18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b1c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b20:	790b      	ldrb	r3, [r1, #4]
 8004b22:	3b02      	subs	r3, #2
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d915      	bls.n	8004b56 <USB_EPClearStall+0x4e>
}
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b2e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004b32:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004b36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b3a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b3e:	790b      	ldrb	r3, [r1, #4]
 8004b40:	3b02      	subs	r3, #2
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d8f0      	bhi.n	8004b2a <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b48:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b50:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8004b54:	e7e9      	b.n	8004b2a <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b56:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b5e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8004b62:	e7e2      	b.n	8004b2a <USB_EPClearStall+0x22>

08004b64 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004b64:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004b68:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004b6c:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004b70:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004b74:	0109      	lsls	r1, r1, #4
 8004b76:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8004b80:	2000      	movs	r0, #0
 8004b82:	4770      	bx	lr

08004b84 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b84:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8004b88:	f023 0303 	bic.w	r3, r3, #3
 8004b8c:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b90:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8004b94:	f023 0302 	bic.w	r3, r3, #2
 8004b98:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	4770      	bx	lr

08004ba0 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ba0:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8004ba4:	f023 0303 	bic.w	r3, r3, #3
 8004ba8:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bac:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8004bb0:	f043 0302 	orr.w	r3, r3, #2
 8004bb4:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8004bb8:	2000      	movs	r0, #0
 8004bba:	4770      	bx	lr

08004bbc <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004bbc:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004bbe:	6980      	ldr	r0, [r0, #24]
}
 8004bc0:	4010      	ands	r0, r2
 8004bc2:	4770      	bx	lr

08004bc4 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004bc4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004bc8:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bcc:	69c0      	ldr	r0, [r0, #28]
 8004bce:	4018      	ands	r0, r3
}
 8004bd0:	0c00      	lsrs	r0, r0, #16
 8004bd2:	4770      	bx	lr

08004bd4 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004bd4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004bd8:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bdc:	69c0      	ldr	r0, [r0, #28]
 8004bde:	4018      	ands	r0, r3
}
 8004be0:	b280      	uxth	r0, r0
 8004be2:	4770      	bx	lr

08004be4 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004be4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004be8:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004bec:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8004bf0:	6940      	ldr	r0, [r0, #20]
}
 8004bf2:	4010      	ands	r0, r2
 8004bf4:	4770      	bx	lr

08004bf6 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8004bf6:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004bfa:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004bfe:	f001 0c0f 	and.w	ip, r1, #15
 8004c02:	fa23 f30c 	lsr.w	r3, r3, ip
 8004c06:	01db      	lsls	r3, r3, #7
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c0c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8004c10:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8004c14:	6880      	ldr	r0, [r0, #8]
}
 8004c16:	4018      	ands	r0, r3
 8004c18:	4770      	bx	lr

08004c1a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004c1a:	6940      	ldr	r0, [r0, #20]
}
 8004c1c:	f000 0001 	and.w	r0, r0, #1
 8004c20:	4770      	bx	lr

08004c22 <USB_SetCurrentMode>:
{
 8004c22:	b538      	push	{r3, r4, r5, lr}
 8004c24:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c26:	68c3      	ldr	r3, [r0, #12]
 8004c28:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004c2c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004c2e:	2901      	cmp	r1, #1
 8004c30:	d013      	beq.n	8004c5a <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8004c32:	bb19      	cbnz	r1, 8004c7c <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c34:	68c3      	ldr	r3, [r0, #12]
 8004c36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c3a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004c3c:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8004c3e:	200a      	movs	r0, #10
 8004c40:	f7fc fef6 	bl	8001a30 <HAL_Delay>
      ms += 10U;
 8004c44:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c46:	4628      	mov	r0, r5
 8004c48:	f7ff ffe7 	bl	8004c1a <USB_GetMode>
 8004c4c:	b108      	cbz	r0, 8004c52 <USB_SetCurrentMode+0x30>
 8004c4e:	2cc7      	cmp	r4, #199	@ 0xc7
 8004c50:	d9f5      	bls.n	8004c3e <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004c52:	2cc8      	cmp	r4, #200	@ 0xc8
 8004c54:	d014      	beq.n	8004c80 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8004c56:	2000      	movs	r0, #0
}
 8004c58:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c5a:	68c3      	ldr	r3, [r0, #12]
 8004c5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c60:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004c62:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8004c64:	200a      	movs	r0, #10
 8004c66:	f7fc fee3 	bl	8001a30 <HAL_Delay>
      ms += 10U;
 8004c6a:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	f7ff ffd4 	bl	8004c1a <USB_GetMode>
 8004c72:	2801      	cmp	r0, #1
 8004c74:	d0ed      	beq.n	8004c52 <USB_SetCurrentMode+0x30>
 8004c76:	2cc7      	cmp	r4, #199	@ 0xc7
 8004c78:	d9f4      	bls.n	8004c64 <USB_SetCurrentMode+0x42>
 8004c7a:	e7ea      	b.n	8004c52 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	e7eb      	b.n	8004c58 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8004c80:	2001      	movs	r0, #1
 8004c82:	e7e9      	b.n	8004c58 <USB_SetCurrentMode+0x36>

08004c84 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c84:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004c88:	f36f 030a 	bfc	r3, #0, #11
 8004c8c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004c90:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8004c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c98:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	4770      	bx	lr

08004ca0 <USB_EP0_OutStart>:
{
 8004ca0:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ca2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ca4:	4b15      	ldr	r3, [pc, #84]	@ (8004cfc <USB_EP0_OutStart+0x5c>)
 8004ca6:	429c      	cmp	r4, r3
 8004ca8:	d903      	bls.n	8004cb2 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004caa:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	db16      	blt.n	8004ce0 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004cb2:	2400      	movs	r4, #0
 8004cb4:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cb8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8004cbc:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004cc0:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004cc4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8004cc8:	f044 0418 	orr.w	r4, r4, #24
 8004ccc:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004cd0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8004cd4:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8004cd8:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8004cdc:	2901      	cmp	r1, #1
 8004cde:	d003      	beq.n	8004ce8 <USB_EP0_OutStart+0x48>
}
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ce6:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ce8:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004cec:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004cf0:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004cf4:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8004cf8:	e7f2      	b.n	8004ce0 <USB_EP0_OutStart+0x40>
 8004cfa:	bf00      	nop
 8004cfc:	4f54300a 	.word	0x4f54300a

08004d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d00:	b510      	push	{r4, lr}
 8004d02:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d04:	4a0c      	ldr	r2, [pc, #48]	@ (8004d38 <_sbrk+0x38>)
 8004d06:	490d      	ldr	r1, [pc, #52]	@ (8004d3c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d08:	480d      	ldr	r0, [pc, #52]	@ (8004d40 <_sbrk+0x40>)
 8004d0a:	6800      	ldr	r0, [r0, #0]
 8004d0c:	b140      	cbz	r0, 8004d20 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d0e:	480c      	ldr	r0, [pc, #48]	@ (8004d40 <_sbrk+0x40>)
 8004d10:	6800      	ldr	r0, [r0, #0]
 8004d12:	4403      	add	r3, r0
 8004d14:	1a52      	subs	r2, r2, r1
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d806      	bhi.n	8004d28 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004d1a:	4a09      	ldr	r2, [pc, #36]	@ (8004d40 <_sbrk+0x40>)
 8004d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004d1e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004d20:	4807      	ldr	r0, [pc, #28]	@ (8004d40 <_sbrk+0x40>)
 8004d22:	4c08      	ldr	r4, [pc, #32]	@ (8004d44 <_sbrk+0x44>)
 8004d24:	6004      	str	r4, [r0, #0]
 8004d26:	e7f2      	b.n	8004d0e <_sbrk+0xe>
    errno = ENOMEM;
 8004d28:	f002 fea0 	bl	8007a6c <__errno>
 8004d2c:	230c      	movs	r3, #12
 8004d2e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295
 8004d34:	e7f3      	b.n	8004d1e <_sbrk+0x1e>
 8004d36:	bf00      	nop
 8004d38:	20010000 	.word	0x20010000
 8004d3c:	00000400 	.word	0x00000400
 8004d40:	20004648 	.word	0x20004648
 8004d44:	20006470 	.word	0x20006470

08004d48 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d48:	4a03      	ldr	r2, [pc, #12]	@ (8004d58 <SystemInit+0x10>)
 8004d4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004d4e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d52:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d56:	4770      	bx	lr
 8004d58:	e000ed00 	.word	0xe000ed00

08004d5c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d5c:	4b08      	ldr	r3, [pc, #32]	@ (8004d80 <prvResetNextTaskUnblockTime+0x24>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	b923      	cbnz	r3, 8004d6e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d64:	4b07      	ldr	r3, [pc, #28]	@ (8004d84 <prvResetNextTaskUnblockTime+0x28>)
 8004d66:	f04f 32ff 	mov.w	r2, #4294967295
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d6e:	4b04      	ldr	r3, [pc, #16]	@ (8004d80 <prvResetNextTaskUnblockTime+0x24>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	4b02      	ldr	r3, [pc, #8]	@ (8004d84 <prvResetNextTaskUnblockTime+0x28>)
 8004d7a:	601a      	str	r2, [r3, #0]
	}
}
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	200046bc 	.word	0x200046bc
 8004d84:	20004654 	.word	0x20004654

08004d88 <prvInitialiseNewTask>:
{
 8004d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d8c:	4680      	mov	r8, r0
 8004d8e:	460d      	mov	r5, r1
 8004d90:	4617      	mov	r7, r2
 8004d92:	4699      	mov	r9, r3
 8004d94:	9e08      	ldr	r6, [sp, #32]
 8004d96:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8004d9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d9c:	0092      	lsls	r2, r2, #2
 8004d9e:	21a5      	movs	r1, #165	@ 0xa5
 8004da0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004da2:	f002 fe5b 	bl	8007a5c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004da6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004da8:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8004dac:	3a01      	subs	r2, #1
 8004dae:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004db2:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8004db6:	b3a5      	cbz	r5, 8004e22 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004db8:	f04f 0c00 	mov.w	ip, #0
 8004dbc:	f1bc 0f0f 	cmp.w	ip, #15
 8004dc0:	d809      	bhi.n	8004dd6 <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004dc2:	f815 300c 	ldrb.w	r3, [r5, ip]
 8004dc6:	eb04 020c 	add.w	r2, r4, ip
 8004dca:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8004dce:	b113      	cbz	r3, 8004dd6 <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dd0:	f10c 0c01 	add.w	ip, ip, #1
 8004dd4:	e7f2      	b.n	8004dbc <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ddc:	2e37      	cmp	r6, #55	@ 0x37
 8004dde:	d900      	bls.n	8004de2 <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004de0:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8004de2:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004de4:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004de6:	2500      	movs	r5, #0
 8004de8:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dea:	1d20      	adds	r0, r4, #4
 8004dec:	f7fc f825 	bl	8000e3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004df0:	f104 0018 	add.w	r0, r4, #24
 8004df4:	f7fc f821 	bl	8000e3a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004df8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dfa:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8004dfe:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e00:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8004e02:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e04:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e08:	464a      	mov	r2, r9
 8004e0a:	4641      	mov	r1, r8
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	f7fc f90b 	bl	8001028 <pxPortInitialiseStack>
 8004e12:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004e14:	f1ba 0f00 	cmp.w	sl, #0
 8004e18:	d001      	beq.n	8004e1e <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e1a:	f8ca 4000 	str.w	r4, [sl]
}
 8004e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e22:	2300      	movs	r3, #0
 8004e24:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8004e28:	e7d8      	b.n	8004ddc <prvInitialiseNewTask+0x54>
	...

08004e2c <prvInitialiseTaskLists>:
{
 8004e2c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e2e:	2400      	movs	r4, #0
 8004e30:	e007      	b.n	8004e42 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e32:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004e36:	0093      	lsls	r3, r2, #2
 8004e38:	480e      	ldr	r0, [pc, #56]	@ (8004e74 <prvInitialiseTaskLists+0x48>)
 8004e3a:	4418      	add	r0, r3
 8004e3c:	f7fb fff2 	bl	8000e24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e40:	3401      	adds	r4, #1
 8004e42:	2c37      	cmp	r4, #55	@ 0x37
 8004e44:	d9f5      	bls.n	8004e32 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8004e46:	4d0c      	ldr	r5, [pc, #48]	@ (8004e78 <prvInitialiseTaskLists+0x4c>)
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f7fb ffeb 	bl	8000e24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e4e:	4c0b      	ldr	r4, [pc, #44]	@ (8004e7c <prvInitialiseTaskLists+0x50>)
 8004e50:	4620      	mov	r0, r4
 8004e52:	f7fb ffe7 	bl	8000e24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e56:	480a      	ldr	r0, [pc, #40]	@ (8004e80 <prvInitialiseTaskLists+0x54>)
 8004e58:	f7fb ffe4 	bl	8000e24 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004e5c:	4809      	ldr	r0, [pc, #36]	@ (8004e84 <prvInitialiseTaskLists+0x58>)
 8004e5e:	f7fb ffe1 	bl	8000e24 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004e62:	4809      	ldr	r0, [pc, #36]	@ (8004e88 <prvInitialiseTaskLists+0x5c>)
 8004e64:	f7fb ffde 	bl	8000e24 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e68:	4b08      	ldr	r3, [pc, #32]	@ (8004e8c <prvInitialiseTaskLists+0x60>)
 8004e6a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e6c:	4b08      	ldr	r3, [pc, #32]	@ (8004e90 <prvInitialiseTaskLists+0x64>)
 8004e6e:	601c      	str	r4, [r3, #0]
}
 8004e70:	bd38      	pop	{r3, r4, r5, pc}
 8004e72:	bf00      	nop
 8004e74:	200046e8 	.word	0x200046e8
 8004e78:	200046d4 	.word	0x200046d4
 8004e7c:	200046c0 	.word	0x200046c0
 8004e80:	200046a4 	.word	0x200046a4
 8004e84:	20004690 	.word	0x20004690
 8004e88:	20004678 	.word	0x20004678
 8004e8c:	200046bc 	.word	0x200046bc
 8004e90:	200046b8 	.word	0x200046b8

08004e94 <prvAddNewTaskToReadyList>:
{
 8004e94:	b510      	push	{r4, lr}
 8004e96:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004e98:	f7fc f8f4 	bl	8001084 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004e9c:	4a22      	ldr	r2, [pc, #136]	@ (8004f28 <prvAddNewTaskToReadyList+0x94>)
 8004e9e:	6813      	ldr	r3, [r2, #0]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ea4:	4b21      	ldr	r3, [pc, #132]	@ (8004f2c <prvAddNewTaskToReadyList+0x98>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	b15b      	cbz	r3, 8004ec2 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8004eaa:	4b21      	ldr	r3, [pc, #132]	@ (8004f30 <prvAddNewTaskToReadyList+0x9c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	b96b      	cbnz	r3, 8004ecc <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8004f2c <prvAddNewTaskToReadyList+0x98>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d807      	bhi.n	8004ecc <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8004ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f2c <prvAddNewTaskToReadyList+0x98>)
 8004ebe:	601c      	str	r4, [r3, #0]
 8004ec0:	e004      	b.n	8004ecc <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8004ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8004f2c <prvAddNewTaskToReadyList+0x98>)
 8004ec4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ec6:	6813      	ldr	r3, [r2, #0]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d029      	beq.n	8004f20 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8004ecc:	4a19      	ldr	r2, [pc, #100]	@ (8004f34 <prvAddNewTaskToReadyList+0xa0>)
 8004ece:	6813      	ldr	r3, [r2, #0]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ed4:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004ed6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004ed8:	4b17      	ldr	r3, [pc, #92]	@ (8004f38 <prvAddNewTaskToReadyList+0xa4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4298      	cmp	r0, r3
 8004ede:	d901      	bls.n	8004ee4 <prvAddNewTaskToReadyList+0x50>
 8004ee0:	4b15      	ldr	r3, [pc, #84]	@ (8004f38 <prvAddNewTaskToReadyList+0xa4>)
 8004ee2:	6018      	str	r0, [r3, #0]
 8004ee4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004ee8:	1d21      	adds	r1, r4, #4
 8004eea:	4b14      	ldr	r3, [pc, #80]	@ (8004f3c <prvAddNewTaskToReadyList+0xa8>)
 8004eec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004ef0:	f7fb ffa6 	bl	8000e40 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004ef4:	f7fc f8e8 	bl	80010c8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8004f30 <prvAddNewTaskToReadyList+0x9c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	b17b      	cbz	r3, 8004f1e <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004efe:	4b0b      	ldr	r3, [pc, #44]	@ (8004f2c <prvAddNewTaskToReadyList+0x98>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f04:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d209      	bcs.n	8004f1e <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8004f0a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f12:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	f3bf 8f6f 	isb	sy
}
 8004f1e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8004f20:	f7ff ff84 	bl	8004e2c <prvInitialiseTaskLists>
 8004f24:	e7d2      	b.n	8004ecc <prvAddNewTaskToReadyList+0x38>
 8004f26:	bf00      	nop
 8004f28:	20004674 	.word	0x20004674
 8004f2c:	20004b48 	.word	0x20004b48
 8004f30:	20004668 	.word	0x20004668
 8004f34:	20004658 	.word	0x20004658
 8004f38:	2000466c 	.word	0x2000466c
 8004f3c:	200046e8 	.word	0x200046e8

08004f40 <prvDeleteTCB>:
	{
 8004f40:	b510      	push	{r4, lr}
 8004f42:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f44:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 8004f48:	b163      	cbz	r3, 8004f64 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d011      	beq.n	8004f72 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d00e      	beq.n	8004f70 <prvDeleteTCB+0x30>
 8004f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	e7fe      	b.n	8004f62 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8004f64:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8004f66:	f7fb fdb9 	bl	8000adc <vPortFree>
				vPortFree( pxTCB );
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f7fb fdb6 	bl	8000adc <vPortFree>
	}
 8004f70:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8004f72:	f7fb fdb3 	bl	8000adc <vPortFree>
 8004f76:	e7fb      	b.n	8004f70 <prvDeleteTCB+0x30>

08004f78 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f78:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb8 <prvCheckTasksWaitingTermination+0x40>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	b1d3      	cbz	r3, 8004fb4 <prvCheckTasksWaitingTermination+0x3c>
{
 8004f7e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8004f80:	f7fc f880 	bl	8001084 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f84:	4b0d      	ldr	r3, [pc, #52]	@ (8004fbc <prvCheckTasksWaitingTermination+0x44>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f8a:	1d20      	adds	r0, r4, #4
 8004f8c:	f7fb ff7c 	bl	8000e88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f90:	4a0b      	ldr	r2, [pc, #44]	@ (8004fc0 <prvCheckTasksWaitingTermination+0x48>)
 8004f92:	6813      	ldr	r3, [r2, #0]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f98:	4a07      	ldr	r2, [pc, #28]	@ (8004fb8 <prvCheckTasksWaitingTermination+0x40>)
 8004f9a:	6813      	ldr	r3, [r2, #0]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8004fa0:	f7fc f892 	bl	80010c8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f7ff ffcb 	bl	8004f40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004faa:	4b03      	ldr	r3, [pc, #12]	@ (8004fb8 <prvCheckTasksWaitingTermination+0x40>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e6      	bne.n	8004f80 <prvCheckTasksWaitingTermination+0x8>
}
 8004fb2:	bd10      	pop	{r4, pc}
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	2000468c 	.word	0x2000468c
 8004fbc:	20004690 	.word	0x20004690
 8004fc0:	20004674 	.word	0x20004674

08004fc4 <prvIdleTask>:
{
 8004fc4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8004fc6:	f7ff ffd7 	bl	8004f78 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fca:	4b07      	ldr	r3, [pc, #28]	@ (8004fe8 <prvIdleTask+0x24>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d9f9      	bls.n	8004fc6 <prvIdleTask+0x2>
				taskYIELD();
 8004fd2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fda:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	e7ee      	b.n	8004fc6 <prvIdleTask+0x2>
 8004fe8:	200046e8 	.word	0x200046e8

08004fec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	4604      	mov	r4, r0
 8004ff0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ff2:	4b17      	ldr	r3, [pc, #92]	@ (8005050 <prvAddCurrentTaskToDelayedList+0x64>)
 8004ff4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ff6:	4b17      	ldr	r3, [pc, #92]	@ (8005054 <prvAddCurrentTaskToDelayedList+0x68>)
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	3004      	adds	r0, #4
 8004ffc:	f7fb ff44 	bl	8000e88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005000:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005004:	d00d      	beq.n	8005022 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005006:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005008:	4b12      	ldr	r3, [pc, #72]	@ (8005054 <prvAddCurrentTaskToDelayedList+0x68>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800500e:	42a6      	cmp	r6, r4
 8005010:	d910      	bls.n	8005034 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005012:	4b11      	ldr	r3, [pc, #68]	@ (8005058 <prvAddCurrentTaskToDelayedList+0x6c>)
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	4b0f      	ldr	r3, [pc, #60]	@ (8005054 <prvAddCurrentTaskToDelayedList+0x68>)
 8005018:	6819      	ldr	r1, [r3, #0]
 800501a:	3104      	adds	r1, #4
 800501c:	f7fb ff1b 	bl	8000e56 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005020:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005022:	2d00      	cmp	r5, #0
 8005024:	d0ef      	beq.n	8005006 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005026:	4b0b      	ldr	r3, [pc, #44]	@ (8005054 <prvAddCurrentTaskToDelayedList+0x68>)
 8005028:	6819      	ldr	r1, [r3, #0]
 800502a:	3104      	adds	r1, #4
 800502c:	480b      	ldr	r0, [pc, #44]	@ (800505c <prvAddCurrentTaskToDelayedList+0x70>)
 800502e:	f7fb ff07 	bl	8000e40 <vListInsertEnd>
 8005032:	e7f5      	b.n	8005020 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005034:	4b0a      	ldr	r3, [pc, #40]	@ (8005060 <prvAddCurrentTaskToDelayedList+0x74>)
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	4b06      	ldr	r3, [pc, #24]	@ (8005054 <prvAddCurrentTaskToDelayedList+0x68>)
 800503a:	6819      	ldr	r1, [r3, #0]
 800503c:	3104      	adds	r1, #4
 800503e:	f7fb ff0a 	bl	8000e56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005042:	4b08      	ldr	r3, [pc, #32]	@ (8005064 <prvAddCurrentTaskToDelayedList+0x78>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	42a3      	cmp	r3, r4
 8005048:	d9ea      	bls.n	8005020 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 800504a:	4b06      	ldr	r3, [pc, #24]	@ (8005064 <prvAddCurrentTaskToDelayedList+0x78>)
 800504c:	601c      	str	r4, [r3, #0]
}
 800504e:	e7e7      	b.n	8005020 <prvAddCurrentTaskToDelayedList+0x34>
 8005050:	20004670 	.word	0x20004670
 8005054:	20004b48 	.word	0x20004b48
 8005058:	200046b8 	.word	0x200046b8
 800505c:	20004678 	.word	0x20004678
 8005060:	200046bc 	.word	0x200046bc
 8005064:	20004654 	.word	0x20004654

08005068 <xTaskCreateStatic>:
	{
 8005068:	b530      	push	{r4, r5, lr}
 800506a:	b087      	sub	sp, #28
 800506c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800506e:	b17c      	cbz	r4, 8005090 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005070:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005072:	b1b5      	cbz	r5, 80050a2 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005074:	255c      	movs	r5, #92	@ 0x5c
 8005076:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005078:	9d04      	ldr	r5, [sp, #16]
 800507a:	2d5c      	cmp	r5, #92	@ 0x5c
 800507c:	d01a      	beq.n	80050b4 <xTaskCreateStatic+0x4c>
 800507e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	e7fe      	b.n	800508e <xTaskCreateStatic+0x26>
 8005090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80050a0:	e7fe      	b.n	80050a0 <xTaskCreateStatic+0x38>
 80050a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80050b2:	e7fe      	b.n	80050b2 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050b4:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050b6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80050b8:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050ba:	2402      	movs	r4, #2
 80050bc:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050c0:	2400      	movs	r4, #0
 80050c2:	9403      	str	r4, [sp, #12]
 80050c4:	9502      	str	r5, [sp, #8]
 80050c6:	ac05      	add	r4, sp, #20
 80050c8:	9401      	str	r4, [sp, #4]
 80050ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80050cc:	9400      	str	r4, [sp, #0]
 80050ce:	f7ff fe5b 	bl	8004d88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050d2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80050d4:	f7ff fede 	bl	8004e94 <prvAddNewTaskToReadyList>
	}
 80050d8:	9805      	ldr	r0, [sp, #20]
 80050da:	b007      	add	sp, #28
 80050dc:	bd30      	pop	{r4, r5, pc}

080050de <xTaskCreate>:
	{
 80050de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050e2:	b085      	sub	sp, #20
 80050e4:	4607      	mov	r7, r0
 80050e6:	4688      	mov	r8, r1
 80050e8:	4614      	mov	r4, r2
 80050ea:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050ec:	0090      	lsls	r0, r2, #2
 80050ee:	f7fb fc73 	bl	80009d8 <pvPortMalloc>
			if( pxStack != NULL )
 80050f2:	b308      	cbz	r0, 8005138 <xTaskCreate+0x5a>
 80050f4:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050f6:	205c      	movs	r0, #92	@ 0x5c
 80050f8:	f7fb fc6e 	bl	80009d8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80050fc:	4605      	mov	r5, r0
 80050fe:	b1a8      	cbz	r0, 800512c <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8005100:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005104:	2300      	movs	r3, #0
 8005106:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800510a:	9303      	str	r3, [sp, #12]
 800510c:	9002      	str	r0, [sp, #8]
 800510e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	4633      	mov	r3, r6
 8005118:	4622      	mov	r2, r4
 800511a:	4641      	mov	r1, r8
 800511c:	4638      	mov	r0, r7
 800511e:	f7ff fe33 	bl	8004d88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005122:	4628      	mov	r0, r5
 8005124:	f7ff feb6 	bl	8004e94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005128:	2001      	movs	r0, #1
 800512a:	e007      	b.n	800513c <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800512c:	4648      	mov	r0, r9
 800512e:	f7fb fcd5 	bl	8000adc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005132:	f04f 30ff 	mov.w	r0, #4294967295
 8005136:	e001      	b.n	800513c <xTaskCreate+0x5e>
 8005138:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800513c:	b005      	add	sp, #20
 800513e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08005144 <vTaskStartScheduler>:
{
 8005144:	b510      	push	{r4, lr}
 8005146:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005148:	2400      	movs	r4, #0
 800514a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800514c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800514e:	aa07      	add	r2, sp, #28
 8005150:	a906      	add	r1, sp, #24
 8005152:	a805      	add	r0, sp, #20
 8005154:	f7fb fa98 	bl	8000688 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005158:	9b05      	ldr	r3, [sp, #20]
 800515a:	9302      	str	r3, [sp, #8]
 800515c:	9b06      	ldr	r3, [sp, #24]
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	9400      	str	r4, [sp, #0]
 8005162:	4623      	mov	r3, r4
 8005164:	9a07      	ldr	r2, [sp, #28]
 8005166:	4917      	ldr	r1, [pc, #92]	@ (80051c4 <vTaskStartScheduler+0x80>)
 8005168:	4817      	ldr	r0, [pc, #92]	@ (80051c8 <vTaskStartScheduler+0x84>)
 800516a:	f7ff ff7d 	bl	8005068 <xTaskCreateStatic>
 800516e:	4b17      	ldr	r3, [pc, #92]	@ (80051cc <vTaskStartScheduler+0x88>)
 8005170:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8005172:	b1c0      	cbz	r0, 80051a6 <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 8005174:	f000 fd5c 	bl	8005c30 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8005178:	2801      	cmp	r0, #1
 800517a:	d115      	bne.n	80051a8 <vTaskStartScheduler+0x64>
 800517c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800518c:	4b10      	ldr	r3, [pc, #64]	@ (80051d0 <vTaskStartScheduler+0x8c>)
 800518e:	f04f 32ff 	mov.w	r2, #4294967295
 8005192:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005194:	4b0f      	ldr	r3, [pc, #60]	@ (80051d4 <vTaskStartScheduler+0x90>)
 8005196:	2201      	movs	r2, #1
 8005198:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800519a:	4b0f      	ldr	r3, [pc, #60]	@ (80051d8 <vTaskStartScheduler+0x94>)
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80051a0:	f7fc f80a 	bl	80011b8 <xPortStartScheduler>
		}
 80051a4:	e003      	b.n	80051ae <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 80051a6:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80051ac:	d001      	beq.n	80051b2 <vTaskStartScheduler+0x6e>
}
 80051ae:	b008      	add	sp, #32
 80051b0:	bd10      	pop	{r4, pc}
 80051b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051c2:	e7fe      	b.n	80051c2 <vTaskStartScheduler+0x7e>
 80051c4:	08008788 	.word	0x08008788
 80051c8:	08004fc5 	.word	0x08004fc5
 80051cc:	20004650 	.word	0x20004650
 80051d0:	20004654 	.word	0x20004654
 80051d4:	20004668 	.word	0x20004668
 80051d8:	20004670 	.word	0x20004670

080051dc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80051dc:	4a02      	ldr	r2, [pc, #8]	@ (80051e8 <vTaskSuspendAll+0xc>)
 80051de:	6813      	ldr	r3, [r2, #0]
 80051e0:	3301      	adds	r3, #1
 80051e2:	6013      	str	r3, [r2, #0]
}
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	2000464c 	.word	0x2000464c

080051ec <xTaskGetTickCount>:
		xTicks = xTickCount;
 80051ec:	4b01      	ldr	r3, [pc, #4]	@ (80051f4 <xTaskGetTickCount+0x8>)
 80051ee:	6818      	ldr	r0, [r3, #0]
}
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20004670 	.word	0x20004670

080051f8 <xTaskIncrementTick>:
{
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051fa:	4b3a      	ldr	r3, [pc, #232]	@ (80052e4 <xTaskIncrementTick+0xec>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d169      	bne.n	80052d6 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005202:	4b39      	ldr	r3, [pc, #228]	@ (80052e8 <xTaskIncrementTick+0xf0>)
 8005204:	681d      	ldr	r5, [r3, #0]
 8005206:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8005208:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800520a:	b9c5      	cbnz	r5, 800523e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800520c:	4b37      	ldr	r3, [pc, #220]	@ (80052ec <xTaskIncrementTick+0xf4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	b143      	cbz	r3, 8005226 <xTaskIncrementTick+0x2e>
 8005214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	e7fe      	b.n	8005224 <xTaskIncrementTick+0x2c>
 8005226:	4a31      	ldr	r2, [pc, #196]	@ (80052ec <xTaskIncrementTick+0xf4>)
 8005228:	6811      	ldr	r1, [r2, #0]
 800522a:	4b31      	ldr	r3, [pc, #196]	@ (80052f0 <xTaskIncrementTick+0xf8>)
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	6010      	str	r0, [r2, #0]
 8005230:	6019      	str	r1, [r3, #0]
 8005232:	4a30      	ldr	r2, [pc, #192]	@ (80052f4 <xTaskIncrementTick+0xfc>)
 8005234:	6813      	ldr	r3, [r2, #0]
 8005236:	3301      	adds	r3, #1
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	f7ff fd8f 	bl	8004d5c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800523e:	4b2e      	ldr	r3, [pc, #184]	@ (80052f8 <xTaskIncrementTick+0x100>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	42ab      	cmp	r3, r5
 8005244:	d93d      	bls.n	80052c2 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8005246:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005248:	4b2c      	ldr	r3, [pc, #176]	@ (80052fc <xTaskIncrementTick+0x104>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005252:	009a      	lsls	r2, r3, #2
 8005254:	4b2a      	ldr	r3, [pc, #168]	@ (8005300 <xTaskIncrementTick+0x108>)
 8005256:	589b      	ldr	r3, [r3, r2]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d900      	bls.n	800525e <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800525c:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800525e:	4b29      	ldr	r3, [pc, #164]	@ (8005304 <xTaskIncrementTick+0x10c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d03c      	beq.n	80052e0 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8005266:	2701      	movs	r7, #1
	return xSwitchRequired;
 8005268:	e03a      	b.n	80052e0 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800526a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800526c:	4b1f      	ldr	r3, [pc, #124]	@ (80052ec <xTaskIncrementTick+0xf4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	b343      	cbz	r3, 80052c6 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005274:	4b1d      	ldr	r3, [pc, #116]	@ (80052ec <xTaskIncrementTick+0xf4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800527c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800527e:	429d      	cmp	r5, r3
 8005280:	d326      	bcc.n	80052d0 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005282:	1d26      	adds	r6, r4, #4
 8005284:	4630      	mov	r0, r6
 8005286:	f7fb fdff 	bl	8000e88 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800528a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800528c:	b11b      	cbz	r3, 8005296 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800528e:	f104 0018 	add.w	r0, r4, #24
 8005292:	f7fb fdf9 	bl	8000e88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005296:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005298:	4a1b      	ldr	r2, [pc, #108]	@ (8005308 <xTaskIncrementTick+0x110>)
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	4293      	cmp	r3, r2
 800529e:	d901      	bls.n	80052a4 <xTaskIncrementTick+0xac>
 80052a0:	4a19      	ldr	r2, [pc, #100]	@ (8005308 <xTaskIncrementTick+0x110>)
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80052a8:	009a      	lsls	r2, r3, #2
 80052aa:	4631      	mov	r1, r6
 80052ac:	4814      	ldr	r0, [pc, #80]	@ (8005300 <xTaskIncrementTick+0x108>)
 80052ae:	4410      	add	r0, r2
 80052b0:	f7fb fdc6 	bl	8000e40 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052b4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80052b6:	4b11      	ldr	r3, [pc, #68]	@ (80052fc <xTaskIncrementTick+0x104>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052bc:	429a      	cmp	r2, r3
 80052be:	d2d4      	bcs.n	800526a <xTaskIncrementTick+0x72>
 80052c0:	e7d4      	b.n	800526c <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 80052c2:	2700      	movs	r7, #0
 80052c4:	e7d2      	b.n	800526c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c6:	4b0c      	ldr	r3, [pc, #48]	@ (80052f8 <xTaskIncrementTick+0x100>)
 80052c8:	f04f 32ff 	mov.w	r2, #4294967295
 80052cc:	601a      	str	r2, [r3, #0]
					break;
 80052ce:	e7bb      	b.n	8005248 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80052d0:	4a09      	ldr	r2, [pc, #36]	@ (80052f8 <xTaskIncrementTick+0x100>)
 80052d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052d4:	e7b8      	b.n	8005248 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 80052d6:	4a0d      	ldr	r2, [pc, #52]	@ (800530c <xTaskIncrementTick+0x114>)
 80052d8:	6813      	ldr	r3, [r2, #0]
 80052da:	3301      	adds	r3, #1
 80052dc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80052de:	2700      	movs	r7, #0
}
 80052e0:	4638      	mov	r0, r7
 80052e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052e4:	2000464c 	.word	0x2000464c
 80052e8:	20004670 	.word	0x20004670
 80052ec:	200046bc 	.word	0x200046bc
 80052f0:	200046b8 	.word	0x200046b8
 80052f4:	2000465c 	.word	0x2000465c
 80052f8:	20004654 	.word	0x20004654
 80052fc:	20004b48 	.word	0x20004b48
 8005300:	200046e8 	.word	0x200046e8
 8005304:	20004660 	.word	0x20004660
 8005308:	2000466c 	.word	0x2000466c
 800530c:	20004664 	.word	0x20004664

08005310 <xTaskResumeAll>:
{
 8005310:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8005312:	4b35      	ldr	r3, [pc, #212]	@ (80053e8 <xTaskResumeAll+0xd8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	b943      	cbnz	r3, 800532a <xTaskResumeAll+0x1a>
 8005318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	e7fe      	b.n	8005328 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800532a:	f7fb feab 	bl	8001084 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800532e:	4b2e      	ldr	r3, [pc, #184]	@ (80053e8 <xTaskResumeAll+0xd8>)
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	3a01      	subs	r2, #1
 8005334:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d14f      	bne.n	80053dc <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800533c:	4b2b      	ldr	r3, [pc, #172]	@ (80053ec <xTaskResumeAll+0xdc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	b90b      	cbnz	r3, 8005346 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8005342:	2400      	movs	r4, #0
 8005344:	e04b      	b.n	80053de <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8005346:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005348:	4b29      	ldr	r3, [pc, #164]	@ (80053f0 <xTaskResumeAll+0xe0>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	b31b      	cbz	r3, 8005396 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800534e:	4b28      	ldr	r3, [pc, #160]	@ (80053f0 <xTaskResumeAll+0xe0>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005354:	f104 0018 	add.w	r0, r4, #24
 8005358:	f7fb fd96 	bl	8000e88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800535c:	1d25      	adds	r5, r4, #4
 800535e:	4628      	mov	r0, r5
 8005360:	f7fb fd92 	bl	8000e88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005364:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005366:	4b23      	ldr	r3, [pc, #140]	@ (80053f4 <xTaskResumeAll+0xe4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4298      	cmp	r0, r3
 800536c:	d901      	bls.n	8005372 <xTaskResumeAll+0x62>
 800536e:	4b21      	ldr	r3, [pc, #132]	@ (80053f4 <xTaskResumeAll+0xe4>)
 8005370:	6018      	str	r0, [r3, #0]
 8005372:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005376:	4629      	mov	r1, r5
 8005378:	4b1f      	ldr	r3, [pc, #124]	@ (80053f8 <xTaskResumeAll+0xe8>)
 800537a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800537e:	f7fb fd5f 	bl	8000e40 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005382:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005384:	4b1d      	ldr	r3, [pc, #116]	@ (80053fc <xTaskResumeAll+0xec>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538a:	429a      	cmp	r2, r3
 800538c:	d3dc      	bcc.n	8005348 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800538e:	4b1c      	ldr	r3, [pc, #112]	@ (8005400 <xTaskResumeAll+0xf0>)
 8005390:	2201      	movs	r2, #1
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e7d8      	b.n	8005348 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8005396:	b10c      	cbz	r4, 800539c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8005398:	f7ff fce0 	bl	8004d5c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800539c:	4b19      	ldr	r3, [pc, #100]	@ (8005404 <xTaskResumeAll+0xf4>)
 800539e:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80053a0:	b984      	cbnz	r4, 80053c4 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 80053a2:	4b17      	ldr	r3, [pc, #92]	@ (8005400 <xTaskResumeAll+0xf0>)
 80053a4:	681c      	ldr	r4, [r3, #0]
 80053a6:	b1d4      	cbz	r4, 80053de <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 80053a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80053ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80053bc:	2401      	movs	r4, #1
 80053be:	e00e      	b.n	80053de <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053c0:	3c01      	subs	r4, #1
 80053c2:	d007      	beq.n	80053d4 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 80053c4:	f7ff ff18 	bl	80051f8 <xTaskIncrementTick>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	d0f9      	beq.n	80053c0 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 80053cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005400 <xTaskResumeAll+0xf0>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	e7f5      	b.n	80053c0 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 80053d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <xTaskResumeAll+0xf4>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	e7e2      	b.n	80053a2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 80053dc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80053de:	f7fb fe73 	bl	80010c8 <vPortExitCritical>
}
 80053e2:	4620      	mov	r0, r4
 80053e4:	bd38      	pop	{r3, r4, r5, pc}
 80053e6:	bf00      	nop
 80053e8:	2000464c 	.word	0x2000464c
 80053ec:	20004674 	.word	0x20004674
 80053f0:	200046a4 	.word	0x200046a4
 80053f4:	2000466c 	.word	0x2000466c
 80053f8:	200046e8 	.word	0x200046e8
 80053fc:	20004b48 	.word	0x20004b48
 8005400:	20004660 	.word	0x20004660
 8005404:	20004664 	.word	0x20004664

08005408 <vTaskDelay>:
	{
 8005408:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800540a:	b1a8      	cbz	r0, 8005438 <vTaskDelay+0x30>
 800540c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800540e:	4b10      	ldr	r3, [pc, #64]	@ (8005450 <vTaskDelay+0x48>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	b143      	cbz	r3, 8005426 <vTaskDelay+0x1e>
 8005414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	e7fe      	b.n	8005424 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005426:	f7ff fed9 	bl	80051dc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800542a:	2100      	movs	r1, #0
 800542c:	4620      	mov	r0, r4
 800542e:	f7ff fddd 	bl	8004fec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005432:	f7ff ff6d 	bl	8005310 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005436:	b948      	cbnz	r0, 800544c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8005438:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800543c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005440:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	f3bf 8f6f 	isb	sy
	}
 800544c:	bd10      	pop	{r4, pc}
 800544e:	bf00      	nop
 8005450:	2000464c 	.word	0x2000464c

08005454 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005454:	4b20      	ldr	r3, [pc, #128]	@ (80054d8 <vTaskSwitchContext+0x84>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	b11b      	cbz	r3, 8005462 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800545a:	4b20      	ldr	r3, [pc, #128]	@ (80054dc <vTaskSwitchContext+0x88>)
 800545c:	2201      	movs	r2, #1
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005462:	4b1e      	ldr	r3, [pc, #120]	@ (80054dc <vTaskSwitchContext+0x88>)
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005468:	4b1d      	ldr	r3, [pc, #116]	@ (80054e0 <vTaskSwitchContext+0x8c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005470:	008a      	lsls	r2, r1, #2
 8005472:	491c      	ldr	r1, [pc, #112]	@ (80054e4 <vTaskSwitchContext+0x90>)
 8005474:	588a      	ldr	r2, [r1, r2]
 8005476:	b95a      	cbnz	r2, 8005490 <vTaskSwitchContext+0x3c>
 8005478:	b10b      	cbz	r3, 800547e <vTaskSwitchContext+0x2a>
 800547a:	3b01      	subs	r3, #1
 800547c:	e7f6      	b.n	800546c <vTaskSwitchContext+0x18>
 800547e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	e7fe      	b.n	800548e <vTaskSwitchContext+0x3a>
 8005490:	4608      	mov	r0, r1
 8005492:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005496:	008a      	lsls	r2, r1, #2
 8005498:	4402      	add	r2, r0
 800549a:	6851      	ldr	r1, [r2, #4]
 800549c:	6849      	ldr	r1, [r1, #4]
 800549e:	6051      	str	r1, [r2, #4]
 80054a0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80054a4:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80054a8:	3208      	adds	r2, #8
 80054aa:	4402      	add	r2, r0
 80054ac:	4291      	cmp	r1, r2
 80054ae:	d00b      	beq.n	80054c8 <vTaskSwitchContext+0x74>
 80054b0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80054b4:	0091      	lsls	r1, r2, #2
 80054b6:	4a0b      	ldr	r2, [pc, #44]	@ (80054e4 <vTaskSwitchContext+0x90>)
 80054b8:	440a      	add	r2, r1
 80054ba:	6852      	ldr	r2, [r2, #4]
 80054bc:	68d1      	ldr	r1, [r2, #12]
 80054be:	4a0a      	ldr	r2, [pc, #40]	@ (80054e8 <vTaskSwitchContext+0x94>)
 80054c0:	6011      	str	r1, [r2, #0]
 80054c2:	4a07      	ldr	r2, [pc, #28]	@ (80054e0 <vTaskSwitchContext+0x8c>)
 80054c4:	6013      	str	r3, [r2, #0]
}
 80054c6:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c8:	6848      	ldr	r0, [r1, #4]
 80054ca:	4662      	mov	r2, ip
 80054cc:	0091      	lsls	r1, r2, #2
 80054ce:	4a05      	ldr	r2, [pc, #20]	@ (80054e4 <vTaskSwitchContext+0x90>)
 80054d0:	440a      	add	r2, r1
 80054d2:	6050      	str	r0, [r2, #4]
 80054d4:	e7ec      	b.n	80054b0 <vTaskSwitchContext+0x5c>
 80054d6:	bf00      	nop
 80054d8:	2000464c 	.word	0x2000464c
 80054dc:	20004660 	.word	0x20004660
 80054e0:	2000466c 	.word	0x2000466c
 80054e4:	200046e8 	.word	0x200046e8
 80054e8:	20004b48 	.word	0x20004b48

080054ec <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80054ec:	b158      	cbz	r0, 8005506 <vTaskPlaceOnEventList+0x1a>
{
 80054ee:	b510      	push	{r4, lr}
 80054f0:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054f2:	4a09      	ldr	r2, [pc, #36]	@ (8005518 <vTaskPlaceOnEventList+0x2c>)
 80054f4:	6811      	ldr	r1, [r2, #0]
 80054f6:	3118      	adds	r1, #24
 80054f8:	f7fb fcad 	bl	8000e56 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054fc:	2101      	movs	r1, #1
 80054fe:	4620      	mov	r0, r4
 8005500:	f7ff fd74 	bl	8004fec <prvAddCurrentTaskToDelayedList>
}
 8005504:	bd10      	pop	{r4, pc}
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8005516:	e7fe      	b.n	8005516 <vTaskPlaceOnEventList+0x2a>
 8005518:	20004b48 	.word	0x20004b48

0800551c <vTaskPlaceOnEventListRestricted>:
	{
 800551c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800551e:	b170      	cbz	r0, 800553e <vTaskPlaceOnEventListRestricted+0x22>
 8005520:	460d      	mov	r5, r1
 8005522:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005524:	4a0a      	ldr	r2, [pc, #40]	@ (8005550 <vTaskPlaceOnEventListRestricted+0x34>)
 8005526:	6811      	ldr	r1, [r2, #0]
 8005528:	3118      	adds	r1, #24
 800552a:	f7fb fc89 	bl	8000e40 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800552e:	b10c      	cbz	r4, 8005534 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8005530:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005534:	4621      	mov	r1, r4
 8005536:	4628      	mov	r0, r5
 8005538:	f7ff fd58 	bl	8004fec <prvAddCurrentTaskToDelayedList>
	}
 800553c:	bd38      	pop	{r3, r4, r5, pc}
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800554e:	e7fe      	b.n	800554e <vTaskPlaceOnEventListRestricted+0x32>
 8005550:	20004b48 	.word	0x20004b48

08005554 <xTaskRemoveFromEventList>:
{
 8005554:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005556:	68c3      	ldr	r3, [r0, #12]
 8005558:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800555a:	b324      	cbz	r4, 80055a6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800555c:	f104 0518 	add.w	r5, r4, #24
 8005560:	4628      	mov	r0, r5
 8005562:	f7fb fc91 	bl	8000e88 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005566:	4b18      	ldr	r3, [pc, #96]	@ (80055c8 <xTaskRemoveFromEventList+0x74>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	bb2b      	cbnz	r3, 80055b8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800556c:	1d25      	adds	r5, r4, #4
 800556e:	4628      	mov	r0, r5
 8005570:	f7fb fc8a 	bl	8000e88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005574:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005576:	4b15      	ldr	r3, [pc, #84]	@ (80055cc <xTaskRemoveFromEventList+0x78>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4298      	cmp	r0, r3
 800557c:	d901      	bls.n	8005582 <xTaskRemoveFromEventList+0x2e>
 800557e:	4b13      	ldr	r3, [pc, #76]	@ (80055cc <xTaskRemoveFromEventList+0x78>)
 8005580:	6018      	str	r0, [r3, #0]
 8005582:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005586:	4629      	mov	r1, r5
 8005588:	4b11      	ldr	r3, [pc, #68]	@ (80055d0 <xTaskRemoveFromEventList+0x7c>)
 800558a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800558e:	f7fb fc57 	bl	8000e40 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005592:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005594:	4b0f      	ldr	r3, [pc, #60]	@ (80055d4 <xTaskRemoveFromEventList+0x80>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	429a      	cmp	r2, r3
 800559c:	d911      	bls.n	80055c2 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800559e:	2001      	movs	r0, #1
 80055a0:	4b0d      	ldr	r3, [pc, #52]	@ (80055d8 <xTaskRemoveFromEventList+0x84>)
 80055a2:	6018      	str	r0, [r3, #0]
}
 80055a4:	bd38      	pop	{r3, r4, r5, pc}
 80055a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80055b6:	e7fe      	b.n	80055b6 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055b8:	4629      	mov	r1, r5
 80055ba:	4808      	ldr	r0, [pc, #32]	@ (80055dc <xTaskRemoveFromEventList+0x88>)
 80055bc:	f7fb fc40 	bl	8000e40 <vListInsertEnd>
 80055c0:	e7e7      	b.n	8005592 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 80055c2:	2000      	movs	r0, #0
	return xReturn;
 80055c4:	e7ee      	b.n	80055a4 <xTaskRemoveFromEventList+0x50>
 80055c6:	bf00      	nop
 80055c8:	2000464c 	.word	0x2000464c
 80055cc:	2000466c 	.word	0x2000466c
 80055d0:	200046e8 	.word	0x200046e8
 80055d4:	20004b48 	.word	0x20004b48
 80055d8:	20004660 	.word	0x20004660
 80055dc:	200046a4 	.word	0x200046a4

080055e0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055e0:	4b03      	ldr	r3, [pc, #12]	@ (80055f0 <vTaskInternalSetTimeOutState+0x10>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055e6:	4b03      	ldr	r3, [pc, #12]	@ (80055f4 <vTaskInternalSetTimeOutState+0x14>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6043      	str	r3, [r0, #4]
}
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	2000465c 	.word	0x2000465c
 80055f4:	20004670 	.word	0x20004670

080055f8 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 80055f8:	b1e0      	cbz	r0, 8005634 <xTaskCheckForTimeOut+0x3c>
{
 80055fa:	b570      	push	{r4, r5, r6, lr}
 80055fc:	460c      	mov	r4, r1
 80055fe:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8005600:	b309      	cbz	r1, 8005646 <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 8005602:	f7fb fd3f 	bl	8001084 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005606:	4b1c      	ldr	r3, [pc, #112]	@ (8005678 <xTaskCheckForTimeOut+0x80>)
 8005608:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800560a:	686b      	ldr	r3, [r5, #4]
 800560c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800560e:	6822      	ldr	r2, [r4, #0]
 8005610:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005614:	d028      	beq.n	8005668 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005616:	f8df c064 	ldr.w	ip, [pc, #100]	@ 800567c <xTaskCheckForTimeOut+0x84>
 800561a:	f8dc c000 	ldr.w	ip, [ip]
 800561e:	682e      	ldr	r6, [r5, #0]
 8005620:	4566      	cmp	r6, ip
 8005622:	d001      	beq.n	8005628 <xTaskCheckForTimeOut+0x30>
 8005624:	428b      	cmp	r3, r1
 8005626:	d924      	bls.n	8005672 <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005628:	4282      	cmp	r2, r0
 800562a:	d815      	bhi.n	8005658 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005630:	2401      	movs	r4, #1
 8005632:	e01a      	b.n	800566a <xTaskCheckForTimeOut+0x72>
 8005634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8005644:	e7fe      	b.n	8005644 <xTaskCheckForTimeOut+0x4c>
 8005646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8005656:	e7fe      	b.n	8005656 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 8005658:	1a5b      	subs	r3, r3, r1
 800565a:	4413      	add	r3, r2
 800565c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800565e:	4628      	mov	r0, r5
 8005660:	f7ff ffbe 	bl	80055e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005664:	2400      	movs	r4, #0
 8005666:	e000      	b.n	800566a <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 8005668:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800566a:	f7fb fd2d 	bl	80010c8 <vPortExitCritical>
}
 800566e:	4620      	mov	r0, r4
 8005670:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8005672:	2401      	movs	r4, #1
 8005674:	e7f9      	b.n	800566a <xTaskCheckForTimeOut+0x72>
 8005676:	bf00      	nop
 8005678:	20004670 	.word	0x20004670
 800567c:	2000465c 	.word	0x2000465c

08005680 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005680:	4b01      	ldr	r3, [pc, #4]	@ (8005688 <vTaskMissedYield+0x8>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]
}
 8005686:	4770      	bx	lr
 8005688:	20004660 	.word	0x20004660

0800568c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800568c:	4b05      	ldr	r3, [pc, #20]	@ (80056a4 <xTaskGetSchedulerState+0x18>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	b133      	cbz	r3, 80056a0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005692:	4b05      	ldr	r3, [pc, #20]	@ (80056a8 <xTaskGetSchedulerState+0x1c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	b10b      	cbz	r3, 800569c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8005698:	2000      	movs	r0, #0
	}
 800569a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800569c:	2002      	movs	r0, #2
 800569e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056a0:	2001      	movs	r0, #1
 80056a2:	4770      	bx	lr
 80056a4:	20004668 	.word	0x20004668
 80056a8:	2000464c 	.word	0x2000464c

080056ac <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d03b      	beq.n	8005728 <xTaskPriorityDisinherit+0x7c>
	{
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80056b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005730 <xTaskPriorityDisinherit+0x84>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4283      	cmp	r3, r0
 80056ba:	d008      	beq.n	80056ce <xTaskPriorityDisinherit+0x22>
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	e7fe      	b.n	80056cc <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80056ce:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80056d0:	b943      	cbnz	r3, 80056e4 <xTaskPriorityDisinherit+0x38>
 80056d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	e7fe      	b.n	80056e2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80056e4:	3b01      	subs	r3, #1
 80056e6:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056e8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80056ea:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80056ec:	4291      	cmp	r1, r2
 80056ee:	d01d      	beq.n	800572c <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056f0:	b10b      	cbz	r3, 80056f6 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80056f2:	2000      	movs	r0, #0
	}
 80056f4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056f6:	1d05      	adds	r5, r0, #4
 80056f8:	4628      	mov	r0, r5
 80056fa:	f7fb fbc5 	bl	8000e88 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056fe:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8005700:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005702:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8005706:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005708:	4b0a      	ldr	r3, [pc, #40]	@ (8005734 <xTaskPriorityDisinherit+0x88>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4298      	cmp	r0, r3
 800570e:	d901      	bls.n	8005714 <xTaskPriorityDisinherit+0x68>
 8005710:	4b08      	ldr	r3, [pc, #32]	@ (8005734 <xTaskPriorityDisinherit+0x88>)
 8005712:	6018      	str	r0, [r3, #0]
 8005714:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005718:	4629      	mov	r1, r5
 800571a:	4b07      	ldr	r3, [pc, #28]	@ (8005738 <xTaskPriorityDisinherit+0x8c>)
 800571c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005720:	f7fb fb8e 	bl	8000e40 <vListInsertEnd>
					xReturn = pdTRUE;
 8005724:	2001      	movs	r0, #1
 8005726:	e7e5      	b.n	80056f4 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8005728:	2000      	movs	r0, #0
	}
 800572a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800572c:	2000      	movs	r0, #0
 800572e:	e7e1      	b.n	80056f4 <xTaskPriorityDisinherit+0x48>
 8005730:	20004b48 	.word	0x20004b48
 8005734:	2000466c 	.word	0x2000466c
 8005738:	200046e8 	.word	0x200046e8

0800573c <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800573c:	b500      	push	{lr}
 800573e:	b08f      	sub	sp, #60	@ 0x3c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005740:	2300      	movs	r3, #0
 8005742:	930a      	str	r3, [sp, #40]	@ 0x28
 8005744:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005746:	930c      	str	r3, [sp, #48]	@ 0x30
 8005748:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800574a:	9308      	str	r3, [sp, #32]
 800574c:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	9302      	str	r3, [sp, #8]
 8005752:	9303      	str	r3, [sp, #12]
 8005754:	9304      	str	r3, [sp, #16]
 8005756:	9305      	str	r3, [sp, #20]
 8005758:	9306      	str	r3, [sp, #24]
 800575a:	9307      	str	r3, [sp, #28]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800575c:	481f      	ldr	r0, [pc, #124]	@ (80057dc <MX_TIM2_Init+0xa0>)
 800575e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005762:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 84-1;
 8005764:	2253      	movs	r2, #83	@ 0x53
 8005766:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005768:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 800576a:	f04f 32ff 	mov.w	r2, #4294967295
 800576e:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005770:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005772:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005774:	f7fe f996 	bl	8003aa4 <HAL_TIM_Base_Init>
 8005778:	bb00      	cbnz	r0, 80057bc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800577a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800577e:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005780:	a90a      	add	r1, sp, #40	@ 0x28
 8005782:	4816      	ldr	r0, [pc, #88]	@ (80057dc <MX_TIM2_Init+0xa0>)
 8005784:	f7fe faea 	bl	8003d5c <HAL_TIM_ConfigClockSource>
 8005788:	b9d8      	cbnz	r0, 80057c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800578a:	4814      	ldr	r0, [pc, #80]	@ (80057dc <MX_TIM2_Init+0xa0>)
 800578c:	f7fe f9b6 	bl	8003afc <HAL_TIM_OC_Init>
 8005790:	b9d0      	cbnz	r0, 80057c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005792:	2300      	movs	r3, #0
 8005794:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005796:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005798:	a908      	add	r1, sp, #32
 800579a:	4810      	ldr	r0, [pc, #64]	@ (80057dc <MX_TIM2_Init+0xa0>)
 800579c:	f7fe fc16 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 80057a0:	b9a8      	cbnz	r0, 80057ce <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80057a2:	2200      	movs	r2, #0
 80057a4:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 80057a6:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80057a8:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80057aa:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80057ac:	a901      	add	r1, sp, #4
 80057ae:	480b      	ldr	r0, [pc, #44]	@ (80057dc <MX_TIM2_Init+0xa0>)
 80057b0:	f7fe fa2a 	bl	8003c08 <HAL_TIM_OC_ConfigChannel>
 80057b4:	b970      	cbnz	r0, 80057d4 <MX_TIM2_Init+0x98>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80057b6:	b00f      	add	sp, #60	@ 0x3c
 80057b8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80057bc:	f7fb fb84 	bl	8000ec8 <Error_Handler>
 80057c0:	e7db      	b.n	800577a <MX_TIM2_Init+0x3e>
    Error_Handler();
 80057c2:	f7fb fb81 	bl	8000ec8 <Error_Handler>
 80057c6:	e7e0      	b.n	800578a <MX_TIM2_Init+0x4e>
    Error_Handler();
 80057c8:	f7fb fb7e 	bl	8000ec8 <Error_Handler>
 80057cc:	e7e1      	b.n	8005792 <MX_TIM2_Init+0x56>
    Error_Handler();
 80057ce:	f7fb fb7b 	bl	8000ec8 <Error_Handler>
 80057d2:	e7e6      	b.n	80057a2 <MX_TIM2_Init+0x66>
    Error_Handler();
 80057d4:	f7fb fb78 	bl	8000ec8 <Error_Handler>
}
 80057d8:	e7ed      	b.n	80057b6 <MX_TIM2_Init+0x7a>
 80057da:	bf00      	nop
 80057dc:	20004bdc 	.word	0x20004bdc

080057e0 <MX_TIM5_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80057e0:	b500      	push	{lr}
 80057e2:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057e4:	2300      	movs	r3, #0
 80057e6:	9302      	str	r3, [sp, #8]
 80057e8:	9303      	str	r3, [sp, #12]
 80057ea:	9304      	str	r3, [sp, #16]
 80057ec:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80057f2:	4814      	ldr	r0, [pc, #80]	@ (8005844 <MX_TIM5_Init+0x64>)
 80057f4:	4a14      	ldr	r2, [pc, #80]	@ (8005848 <MX_TIM5_Init+0x68>)
 80057f6:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 0;
 80057f8:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057fa:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 4294967295;
 80057fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005800:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005802:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005804:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005806:	f7fe f94d 	bl	8003aa4 <HAL_TIM_Base_Init>
 800580a:	b990      	cbnz	r0, 8005832 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800580c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005810:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005812:	a902      	add	r1, sp, #8
 8005814:	480b      	ldr	r0, [pc, #44]	@ (8005844 <MX_TIM5_Init+0x64>)
 8005816:	f7fe faa1 	bl	8003d5c <HAL_TIM_ConfigClockSource>
 800581a:	b968      	cbnz	r0, 8005838 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800581c:	2300      	movs	r3, #0
 800581e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005820:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005822:	4669      	mov	r1, sp
 8005824:	4807      	ldr	r0, [pc, #28]	@ (8005844 <MX_TIM5_Init+0x64>)
 8005826:	f7fe fbd1 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 800582a:	b940      	cbnz	r0, 800583e <MX_TIM5_Init+0x5e>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800582c:	b007      	add	sp, #28
 800582e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005832:	f7fb fb49 	bl	8000ec8 <Error_Handler>
 8005836:	e7e9      	b.n	800580c <MX_TIM5_Init+0x2c>
    Error_Handler();
 8005838:	f7fb fb46 	bl	8000ec8 <Error_Handler>
 800583c:	e7ee      	b.n	800581c <MX_TIM5_Init+0x3c>
    Error_Handler();
 800583e:	f7fb fb43 	bl	8000ec8 <Error_Handler>
}
 8005842:	e7f3      	b.n	800582c <MX_TIM5_Init+0x4c>
 8005844:	20004b4c 	.word	0x20004b4c
 8005848:	40000c00 	.word	0x40000c00

0800584c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800584c:	b500      	push	{lr}
 800584e:	b083      	sub	sp, #12

  if(tim_pwmHandle->Instance==TIM1)
 8005850:	6803      	ldr	r3, [r0, #0]
 8005852:	4a15      	ldr	r2, [pc, #84]	@ (80058a8 <HAL_TIM_PWM_MspInit+0x5c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d005      	beq.n	8005864 <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM3)
 8005858:	4a14      	ldr	r2, [pc, #80]	@ (80058ac <HAL_TIM_PWM_MspInit+0x60>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d016      	beq.n	800588c <HAL_TIM_PWM_MspInit+0x40>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800585e:	b003      	add	sp, #12
 8005860:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005864:	2200      	movs	r2, #0
 8005866:	9200      	str	r2, [sp, #0]
 8005868:	4b11      	ldr	r3, [pc, #68]	@ (80058b0 <HAL_TIM_PWM_MspInit+0x64>)
 800586a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800586c:	f041 0101 	orr.w	r1, r1, #1
 8005870:	6459      	str	r1, [r3, #68]	@ 0x44
 8005872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 800587c:	210f      	movs	r1, #15
 800587e:	201a      	movs	r0, #26
 8005880:	f7fc face 	bl	8001e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005884:	201a      	movs	r0, #26
 8005886:	f7fc fadb 	bl	8001e40 <HAL_NVIC_EnableIRQ>
 800588a:	e7e8      	b.n	800585e <HAL_TIM_PWM_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800588c:	2300      	movs	r3, #0
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	4b07      	ldr	r3, [pc, #28]	@ (80058b0 <HAL_TIM_PWM_MspInit+0x64>)
 8005892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005894:	f042 0202 	orr.w	r2, r2, #2
 8005898:	641a      	str	r2, [r3, #64]	@ 0x40
 800589a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	9b01      	ldr	r3, [sp, #4]
}
 80058a4:	e7db      	b.n	800585e <HAL_TIM_PWM_MspInit+0x12>
 80058a6:	bf00      	nop
 80058a8:	40010000 	.word	0x40010000
 80058ac:	40000400 	.word	0x40000400
 80058b0:	40023800 	.word	0x40023800

080058b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80058b4:	b500      	push	{lr}
 80058b6:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM2)
 80058b8:	6803      	ldr	r3, [r0, #0]
 80058ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058be:	d005      	beq.n	80058cc <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 80058c0:	4a13      	ldr	r2, [pc, #76]	@ (8005910 <HAL_TIM_Base_MspInit+0x5c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d017      	beq.n	80058f6 <HAL_TIM_Base_MspInit+0x42>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80058c6:	b003      	add	sp, #12
 80058c8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 80058cc:	2200      	movs	r2, #0
 80058ce:	9200      	str	r2, [sp, #0]
 80058d0:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 80058d4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80058d6:	f041 0101 	orr.w	r1, r1, #1
 80058da:	6419      	str	r1, [r3, #64]	@ 0x40
 80058dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80058e6:	2105      	movs	r1, #5
 80058e8:	201c      	movs	r0, #28
 80058ea:	f7fc fa99 	bl	8001e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80058ee:	201c      	movs	r0, #28
 80058f0:	f7fc faa6 	bl	8001e40 <HAL_NVIC_EnableIRQ>
 80058f4:	e7e7      	b.n	80058c6 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80058f6:	2300      	movs	r3, #0
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	4b06      	ldr	r3, [pc, #24]	@ (8005914 <HAL_TIM_Base_MspInit+0x60>)
 80058fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058fe:	f042 0208 	orr.w	r2, r2, #8
 8005902:	641a      	str	r2, [r3, #64]	@ 0x40
 8005904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	9301      	str	r3, [sp, #4]
 800590c:	9b01      	ldr	r3, [sp, #4]
}
 800590e:	e7da      	b.n	80058c6 <HAL_TIM_Base_MspInit+0x12>
 8005910:	40000c00 	.word	0x40000c00
 8005914:	40023800 	.word	0x40023800

08005918 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005918:	b500      	push	{lr}
 800591a:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800591c:	2300      	movs	r3, #0
 800591e:	9303      	str	r3, [sp, #12]
 8005920:	9304      	str	r3, [sp, #16]
 8005922:	9305      	str	r3, [sp, #20]
 8005924:	9306      	str	r3, [sp, #24]
 8005926:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 8005928:	6803      	ldr	r3, [r0, #0]
 800592a:	4a1c      	ldr	r2, [pc, #112]	@ (800599c <HAL_TIM_MspPostInit+0x84>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d005      	beq.n	800593c <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 8005930:	4a1b      	ldr	r2, [pc, #108]	@ (80059a0 <HAL_TIM_MspPostInit+0x88>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d01a      	beq.n	800596c <HAL_TIM_MspPostInit+0x54>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005936:	b009      	add	sp, #36	@ 0x24
 8005938:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800593c:	2300      	movs	r3, #0
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	4b18      	ldr	r3, [pc, #96]	@ (80059a4 <HAL_TIM_MspPostInit+0x8c>)
 8005942:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005944:	f042 0201 	orr.w	r2, r2, #1
 8005948:	631a      	str	r2, [r3, #48]	@ 0x30
 800594a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_OUT1_PIN_Pin|PWM_OUT2_PIN_Pin|PWM_OUT3_PIN_Pin;
 8005954:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8005958:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595a:	2302      	movs	r3, #2
 800595c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800595e:	2301      	movs	r3, #1
 8005960:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005962:	a903      	add	r1, sp, #12
 8005964:	4810      	ldr	r0, [pc, #64]	@ (80059a8 <HAL_TIM_MspPostInit+0x90>)
 8005966:	f7fc fc29 	bl	80021bc <HAL_GPIO_Init>
 800596a:	e7e4      	b.n	8005936 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800596c:	2300      	movs	r3, #0
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	4b0c      	ldr	r3, [pc, #48]	@ (80059a4 <HAL_TIM_MspPostInit+0x8c>)
 8005972:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005974:	f042 0204 	orr.w	r2, r2, #4
 8005978:	631a      	str	r2, [r3, #48]	@ 0x30
 800597a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	9302      	str	r3, [sp, #8]
 8005982:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ETB1_MOTOR1_Pin|ETB1_MOTOR2_Pin|ETB2_MOTOR1_Pin|ETB2_MOTOR2_Pin;
 8005984:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8005988:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800598a:	2302      	movs	r3, #2
 800598c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800598e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005990:	a903      	add	r1, sp, #12
 8005992:	4806      	ldr	r0, [pc, #24]	@ (80059ac <HAL_TIM_MspPostInit+0x94>)
 8005994:	f7fc fc12 	bl	80021bc <HAL_GPIO_Init>
}
 8005998:	e7cd      	b.n	8005936 <HAL_TIM_MspPostInit+0x1e>
 800599a:	bf00      	nop
 800599c:	40010000 	.word	0x40010000
 80059a0:	40000400 	.word	0x40000400
 80059a4:	40023800 	.word	0x40023800
 80059a8:	40020000 	.word	0x40020000
 80059ac:	40020800 	.word	0x40020800

080059b0 <MX_TIM1_Init>:
{
 80059b0:	b510      	push	{r4, lr}
 80059b2:	b092      	sub	sp, #72	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059b4:	2400      	movs	r4, #0
 80059b6:	9410      	str	r4, [sp, #64]	@ 0x40
 80059b8:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059ba:	9409      	str	r4, [sp, #36]	@ 0x24
 80059bc:	940a      	str	r4, [sp, #40]	@ 0x28
 80059be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80059c0:	940c      	str	r4, [sp, #48]	@ 0x30
 80059c2:	940d      	str	r4, [sp, #52]	@ 0x34
 80059c4:	940e      	str	r4, [sp, #56]	@ 0x38
 80059c6:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80059c8:	2220      	movs	r2, #32
 80059ca:	4621      	mov	r1, r4
 80059cc:	a801      	add	r0, sp, #4
 80059ce:	f002 f845 	bl	8007a5c <memset>
  htim1.Instance = TIM1;
 80059d2:	4831      	ldr	r0, [pc, #196]	@ (8005a98 <MX_TIM1_Init+0xe8>)
 80059d4:	4b31      	ldr	r3, [pc, #196]	@ (8005a9c <MX_TIM1_Init+0xec>)
 80059d6:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80059d8:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059da:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 65535;
 80059dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80059e0:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059e2:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80059e4:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059e6:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80059e8:	f7fe f8b4 	bl	8003b54 <HAL_TIM_PWM_Init>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d13d      	bne.n	8005a6c <MX_TIM1_Init+0xbc>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80059f0:	4829      	ldr	r0, [pc, #164]	@ (8005a98 <MX_TIM1_Init+0xe8>)
 80059f2:	f7fe f883 	bl	8003afc <HAL_TIM_OC_Init>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d13b      	bne.n	8005a72 <MX_TIM1_Init+0xc2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059fa:	2300      	movs	r3, #0
 80059fc:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059fe:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005a00:	a910      	add	r1, sp, #64	@ 0x40
 8005a02:	4825      	ldr	r0, [pc, #148]	@ (8005a98 <MX_TIM1_Init+0xe8>)
 8005a04:	f7fe fae2 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d135      	bne.n	8005a78 <MX_TIM1_Init+0xc8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a0c:	2360      	movs	r3, #96	@ 0x60
 8005a0e:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8005a10:	2200      	movs	r2, #0
 8005a12:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a14:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005a16:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a18:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005a1a:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005a1c:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a1e:	a909      	add	r1, sp, #36	@ 0x24
 8005a20:	481d      	ldr	r0, [pc, #116]	@ (8005a98 <MX_TIM1_Init+0xe8>)
 8005a22:	f7fe f920 	bl	8003c66 <HAL_TIM_PWM_ConfigChannel>
 8005a26:	bb50      	cbnz	r0, 8005a7e <MX_TIM1_Init+0xce>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005a28:	2204      	movs	r2, #4
 8005a2a:	a909      	add	r1, sp, #36	@ 0x24
 8005a2c:	481a      	ldr	r0, [pc, #104]	@ (8005a98 <MX_TIM1_Init+0xe8>)
 8005a2e:	f7fe f91a 	bl	8003c66 <HAL_TIM_PWM_ConfigChannel>
 8005a32:	bb38      	cbnz	r0, 8005a84 <MX_TIM1_Init+0xd4>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005a34:	2300      	movs	r3, #0
 8005a36:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005a38:	2208      	movs	r2, #8
 8005a3a:	a909      	add	r1, sp, #36	@ 0x24
 8005a3c:	4816      	ldr	r0, [pc, #88]	@ (8005a98 <MX_TIM1_Init+0xe8>)
 8005a3e:	f7fe f8e3 	bl	8003c08 <HAL_TIM_OC_ConfigChannel>
 8005a42:	bb10      	cbnz	r0, 8005a8a <MX_TIM1_Init+0xda>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005a44:	2300      	movs	r3, #0
 8005a46:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005a48:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005a4a:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005a4c:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005a4e:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005a50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a54:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005a56:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005a58:	a901      	add	r1, sp, #4
 8005a5a:	480f      	ldr	r0, [pc, #60]	@ (8005a98 <MX_TIM1_Init+0xe8>)
 8005a5c:	f7fe faf4 	bl	8004048 <HAL_TIMEx_ConfigBreakDeadTime>
 8005a60:	b9b0      	cbnz	r0, 8005a90 <MX_TIM1_Init+0xe0>
  HAL_TIM_MspPostInit(&htim1);
 8005a62:	480d      	ldr	r0, [pc, #52]	@ (8005a98 <MX_TIM1_Init+0xe8>)
 8005a64:	f7ff ff58 	bl	8005918 <HAL_TIM_MspPostInit>
}
 8005a68:	b012      	add	sp, #72	@ 0x48
 8005a6a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005a6c:	f7fb fa2c 	bl	8000ec8 <Error_Handler>
 8005a70:	e7be      	b.n	80059f0 <MX_TIM1_Init+0x40>
    Error_Handler();
 8005a72:	f7fb fa29 	bl	8000ec8 <Error_Handler>
 8005a76:	e7c0      	b.n	80059fa <MX_TIM1_Init+0x4a>
    Error_Handler();
 8005a78:	f7fb fa26 	bl	8000ec8 <Error_Handler>
 8005a7c:	e7c6      	b.n	8005a0c <MX_TIM1_Init+0x5c>
    Error_Handler();
 8005a7e:	f7fb fa23 	bl	8000ec8 <Error_Handler>
 8005a82:	e7d1      	b.n	8005a28 <MX_TIM1_Init+0x78>
    Error_Handler();
 8005a84:	f7fb fa20 	bl	8000ec8 <Error_Handler>
 8005a88:	e7d4      	b.n	8005a34 <MX_TIM1_Init+0x84>
    Error_Handler();
 8005a8a:	f7fb fa1d 	bl	8000ec8 <Error_Handler>
 8005a8e:	e7d9      	b.n	8005a44 <MX_TIM1_Init+0x94>
    Error_Handler();
 8005a90:	f7fb fa1a 	bl	8000ec8 <Error_Handler>
 8005a94:	e7e5      	b.n	8005a62 <MX_TIM1_Init+0xb2>
 8005a96:	bf00      	nop
 8005a98:	20004c24 	.word	0x20004c24
 8005a9c:	40010000 	.word	0x40010000

08005aa0 <MX_TIM3_Init>:
{
 8005aa0:	b500      	push	{lr}
 8005aa2:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9308      	str	r3, [sp, #32]
 8005aa8:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	9302      	str	r3, [sp, #8]
 8005aae:	9303      	str	r3, [sp, #12]
 8005ab0:	9304      	str	r3, [sp, #16]
 8005ab2:	9305      	str	r3, [sp, #20]
 8005ab4:	9306      	str	r3, [sp, #24]
 8005ab6:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8005ab8:	4825      	ldr	r0, [pc, #148]	@ (8005b50 <MX_TIM3_Init+0xb0>)
 8005aba:	4a26      	ldr	r2, [pc, #152]	@ (8005b54 <MX_TIM3_Init+0xb4>)
 8005abc:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8005abe:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ac0:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8005ac2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ac6:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ac8:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005aca:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005acc:	f7fe f842 	bl	8003b54 <HAL_TIM_PWM_Init>
 8005ad0:	bb58      	cbnz	r0, 8005b2a <MX_TIM3_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ad6:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ad8:	a908      	add	r1, sp, #32
 8005ada:	481d      	ldr	r0, [pc, #116]	@ (8005b50 <MX_TIM3_Init+0xb0>)
 8005adc:	f7fe fa76 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 8005ae0:	bb30      	cbnz	r0, 8005b30 <MX_TIM3_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ae2:	2360      	movs	r3, #96	@ 0x60
 8005ae4:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005aea:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005aec:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005aee:	a901      	add	r1, sp, #4
 8005af0:	4817      	ldr	r0, [pc, #92]	@ (8005b50 <MX_TIM3_Init+0xb0>)
 8005af2:	f7fe f8b8 	bl	8003c66 <HAL_TIM_PWM_ConfigChannel>
 8005af6:	b9f0      	cbnz	r0, 8005b36 <MX_TIM3_Init+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005af8:	2204      	movs	r2, #4
 8005afa:	eb0d 0102 	add.w	r1, sp, r2
 8005afe:	4814      	ldr	r0, [pc, #80]	@ (8005b50 <MX_TIM3_Init+0xb0>)
 8005b00:	f7fe f8b1 	bl	8003c66 <HAL_TIM_PWM_ConfigChannel>
 8005b04:	b9d0      	cbnz	r0, 8005b3c <MX_TIM3_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005b06:	2208      	movs	r2, #8
 8005b08:	a901      	add	r1, sp, #4
 8005b0a:	4811      	ldr	r0, [pc, #68]	@ (8005b50 <MX_TIM3_Init+0xb0>)
 8005b0c:	f7fe f8ab 	bl	8003c66 <HAL_TIM_PWM_ConfigChannel>
 8005b10:	b9b8      	cbnz	r0, 8005b42 <MX_TIM3_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005b12:	220c      	movs	r2, #12
 8005b14:	a901      	add	r1, sp, #4
 8005b16:	480e      	ldr	r0, [pc, #56]	@ (8005b50 <MX_TIM3_Init+0xb0>)
 8005b18:	f7fe f8a5 	bl	8003c66 <HAL_TIM_PWM_ConfigChannel>
 8005b1c:	b9a0      	cbnz	r0, 8005b48 <MX_TIM3_Init+0xa8>
  HAL_TIM_MspPostInit(&htim3);
 8005b1e:	480c      	ldr	r0, [pc, #48]	@ (8005b50 <MX_TIM3_Init+0xb0>)
 8005b20:	f7ff fefa 	bl	8005918 <HAL_TIM_MspPostInit>
}
 8005b24:	b00b      	add	sp, #44	@ 0x2c
 8005b26:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005b2a:	f7fb f9cd 	bl	8000ec8 <Error_Handler>
 8005b2e:	e7d0      	b.n	8005ad2 <MX_TIM3_Init+0x32>
    Error_Handler();
 8005b30:	f7fb f9ca 	bl	8000ec8 <Error_Handler>
 8005b34:	e7d5      	b.n	8005ae2 <MX_TIM3_Init+0x42>
    Error_Handler();
 8005b36:	f7fb f9c7 	bl	8000ec8 <Error_Handler>
 8005b3a:	e7dd      	b.n	8005af8 <MX_TIM3_Init+0x58>
    Error_Handler();
 8005b3c:	f7fb f9c4 	bl	8000ec8 <Error_Handler>
 8005b40:	e7e1      	b.n	8005b06 <MX_TIM3_Init+0x66>
    Error_Handler();
 8005b42:	f7fb f9c1 	bl	8000ec8 <Error_Handler>
 8005b46:	e7e4      	b.n	8005b12 <MX_TIM3_Init+0x72>
    Error_Handler();
 8005b48:	f7fb f9be 	bl	8000ec8 <Error_Handler>
 8005b4c:	e7e7      	b.n	8005b1e <MX_TIM3_Init+0x7e>
 8005b4e:	bf00      	nop
 8005b50:	20004b94 	.word	0x20004b94
 8005b54:	40000400 	.word	0x40000400

08005b58 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b58:	4b06      	ldr	r3, [pc, #24]	@ (8005b74 <prvGetNextExpireTime+0x1c>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	6813      	ldr	r3, [r2, #0]
 8005b5e:	b92b      	cbnz	r3, 8005b6c <prvGetNextExpireTime+0x14>
 8005b60:	2301      	movs	r3, #1
 8005b62:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b64:	b923      	cbnz	r3, 8005b70 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b66:	68d3      	ldr	r3, [r2, #12]
 8005b68:	6818      	ldr	r0, [r3, #0]
 8005b6a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e7f8      	b.n	8005b62 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b70:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8005b72:	4770      	bx	lr
 8005b74:	20004d6c 	.word	0x20004d6c

08005b78 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b78:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b7a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b7c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b7e:	4291      	cmp	r1, r2
 8005b80:	d80c      	bhi.n	8005b9c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b82:	1ad2      	subs	r2, r2, r3
 8005b84:	6983      	ldr	r3, [r0, #24]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d301      	bcc.n	8005b8e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b8a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8005b8c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b8e:	1d01      	adds	r1, r0, #4
 8005b90:	4b09      	ldr	r3, [pc, #36]	@ (8005bb8 <prvInsertTimerInActiveList+0x40>)
 8005b92:	6818      	ldr	r0, [r3, #0]
 8005b94:	f7fb f95f 	bl	8000e56 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005b98:	2000      	movs	r0, #0
 8005b9a:	e7f7      	b.n	8005b8c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d201      	bcs.n	8005ba4 <prvInsertTimerInActiveList+0x2c>
 8005ba0:	4299      	cmp	r1, r3
 8005ba2:	d206      	bcs.n	8005bb2 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ba4:	1d01      	adds	r1, r0, #4
 8005ba6:	4b05      	ldr	r3, [pc, #20]	@ (8005bbc <prvInsertTimerInActiveList+0x44>)
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	f7fb f954 	bl	8000e56 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005bae:	2000      	movs	r0, #0
 8005bb0:	e7ec      	b.n	8005b8c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8005bb2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8005bb4:	e7ea      	b.n	8005b8c <prvInsertTimerInActiveList+0x14>
 8005bb6:	bf00      	nop
 8005bb8:	20004d68 	.word	0x20004d68
 8005bbc:	20004d6c 	.word	0x20004d6c

08005bc0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005bc0:	b530      	push	{r4, r5, lr}
 8005bc2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005bc4:	f7fb fa5e 	bl	8001084 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005bc8:	4b11      	ldr	r3, [pc, #68]	@ (8005c10 <prvCheckForValidListAndQueue+0x50>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	b11b      	cbz	r3, 8005bd6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bce:	f7fb fa7b 	bl	80010c8 <vPortExitCritical>
}
 8005bd2:	b003      	add	sp, #12
 8005bd4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8005bd6:	4d0f      	ldr	r5, [pc, #60]	@ (8005c14 <prvCheckForValidListAndQueue+0x54>)
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f7fb f923 	bl	8000e24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005bde:	4c0e      	ldr	r4, [pc, #56]	@ (8005c18 <prvCheckForValidListAndQueue+0x58>)
 8005be0:	4620      	mov	r0, r4
 8005be2:	f7fb f91f 	bl	8000e24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005be6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c1c <prvCheckForValidListAndQueue+0x5c>)
 8005be8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005bea:	4b0d      	ldr	r3, [pc, #52]	@ (8005c20 <prvCheckForValidListAndQueue+0x60>)
 8005bec:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005bee:	2300      	movs	r3, #0
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8005c24 <prvCheckForValidListAndQueue+0x64>)
 8005bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8005c28 <prvCheckForValidListAndQueue+0x68>)
 8005bf6:	2110      	movs	r1, #16
 8005bf8:	200a      	movs	r0, #10
 8005bfa:	f7fb fc8a 	bl	8001512 <xQueueGenericCreateStatic>
 8005bfe:	4b04      	ldr	r3, [pc, #16]	@ (8005c10 <prvCheckForValidListAndQueue+0x50>)
 8005c00:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d0e3      	beq.n	8005bce <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c06:	4909      	ldr	r1, [pc, #36]	@ (8005c2c <prvCheckForValidListAndQueue+0x6c>)
 8005c08:	f7fb fea8 	bl	800195c <vQueueAddToRegistry>
 8005c0c:	e7df      	b.n	8005bce <prvCheckForValidListAndQueue+0xe>
 8005c0e:	bf00      	nop
 8005c10:	20004d64 	.word	0x20004d64
 8005c14:	20004d84 	.word	0x20004d84
 8005c18:	20004d70 	.word	0x20004d70
 8005c1c:	20004d6c 	.word	0x20004d6c
 8005c20:	20004d68 	.word	0x20004d68
 8005c24:	20004c6c 	.word	0x20004c6c
 8005c28:	20004cbc 	.word	0x20004cbc
 8005c2c:	08008790 	.word	0x08008790

08005c30 <xTimerCreateTimerTask>:
{
 8005c30:	b510      	push	{r4, lr}
 8005c32:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8005c34:	f7ff ffc4 	bl	8005bc0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005c38:	4b12      	ldr	r3, [pc, #72]	@ (8005c84 <xTimerCreateTimerTask+0x54>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	b1cb      	cbz	r3, 8005c72 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c3e:	2400      	movs	r4, #0
 8005c40:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c42:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c44:	aa07      	add	r2, sp, #28
 8005c46:	a906      	add	r1, sp, #24
 8005c48:	a805      	add	r0, sp, #20
 8005c4a:	f7fa fd29 	bl	80006a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c4e:	9b05      	ldr	r3, [sp, #20]
 8005c50:	9302      	str	r3, [sp, #8]
 8005c52:	9b06      	ldr	r3, [sp, #24]
 8005c54:	9301      	str	r3, [sp, #4]
 8005c56:	2302      	movs	r3, #2
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	4623      	mov	r3, r4
 8005c5c:	9a07      	ldr	r2, [sp, #28]
 8005c5e:	490a      	ldr	r1, [pc, #40]	@ (8005c88 <xTimerCreateTimerTask+0x58>)
 8005c60:	480a      	ldr	r0, [pc, #40]	@ (8005c8c <xTimerCreateTimerTask+0x5c>)
 8005c62:	f7ff fa01 	bl	8005068 <xTaskCreateStatic>
 8005c66:	4b0a      	ldr	r3, [pc, #40]	@ (8005c90 <xTimerCreateTimerTask+0x60>)
 8005c68:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8005c6a:	b110      	cbz	r0, 8005c72 <xTimerCreateTimerTask+0x42>
}
 8005c6c:	2001      	movs	r0, #1
 8005c6e:	b008      	add	sp, #32
 8005c70:	bd10      	pop	{r4, pc}
 8005c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8005c82:	e7fe      	b.n	8005c82 <xTimerCreateTimerTask+0x52>
 8005c84:	20004d64 	.word	0x20004d64
 8005c88:	08008798 	.word	0x08008798
 8005c8c:	08005f95 	.word	0x08005f95
 8005c90:	20004d60 	.word	0x20004d60

08005c94 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8005c94:	b1b8      	cbz	r0, 8005cc6 <xTimerGenericCommand+0x32>
 8005c96:	469c      	mov	ip, r3
 8005c98:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8005c9a:	4818      	ldr	r0, [pc, #96]	@ (8005cfc <xTimerGenericCommand+0x68>)
 8005c9c:	6800      	ldr	r0, [r0, #0]
 8005c9e:	b358      	cbz	r0, 8005cf8 <xTimerGenericCommand+0x64>
{
 8005ca0:	b500      	push	{lr}
 8005ca2:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8005ca4:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ca6:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ca8:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005caa:	2905      	cmp	r1, #5
 8005cac:	dc1c      	bgt.n	8005ce8 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005cae:	f7ff fced 	bl	800568c <xTaskGetSchedulerState>
 8005cb2:	2802      	cmp	r0, #2
 8005cb4:	d010      	beq.n	8005cd8 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	461a      	mov	r2, r3
 8005cba:	4669      	mov	r1, sp
 8005cbc:	480f      	ldr	r0, [pc, #60]	@ (8005cfc <xTimerGenericCommand+0x68>)
 8005cbe:	6800      	ldr	r0, [r0, #0]
 8005cc0:	f7fb fc71 	bl	80015a6 <xQueueGenericSend>
 8005cc4:	e015      	b.n	8005cf2 <xTimerGenericCommand+0x5e>
 8005cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8005cd6:	e7fe      	b.n	8005cd6 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005cd8:	2300      	movs	r3, #0
 8005cda:	9a06      	ldr	r2, [sp, #24]
 8005cdc:	4669      	mov	r1, sp
 8005cde:	4807      	ldr	r0, [pc, #28]	@ (8005cfc <xTimerGenericCommand+0x68>)
 8005ce0:	6800      	ldr	r0, [r0, #0]
 8005ce2:	f7fb fc60 	bl	80015a6 <xQueueGenericSend>
 8005ce6:	e004      	b.n	8005cf2 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4662      	mov	r2, ip
 8005cec:	4669      	mov	r1, sp
 8005cee:	f7fb fd1e 	bl	800172e <xQueueGenericSendFromISR>
}
 8005cf2:	b005      	add	sp, #20
 8005cf4:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8005cf8:	2000      	movs	r0, #0
}
 8005cfa:	4770      	bx	lr
 8005cfc:	20004d64 	.word	0x20004d64

08005d00 <prvSwitchTimerLists>:
{
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d04:	4b1b      	ldr	r3, [pc, #108]	@ (8005d74 <prvSwitchTimerLists+0x74>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	b362      	cbz	r2, 8005d66 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d10:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d12:	1d25      	adds	r5, r4, #4
 8005d14:	4628      	mov	r0, r5
 8005d16:	f7fb f8b7 	bl	8000e88 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d1a:	6a23      	ldr	r3, [r4, #32]
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d20:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005d24:	f013 0f04 	tst.w	r3, #4
 8005d28:	d0ec      	beq.n	8005d04 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d2a:	69a3      	ldr	r3, [r4, #24]
 8005d2c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8005d2e:	429e      	cmp	r6, r3
 8005d30:	d207      	bcs.n	8005d42 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d32:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d34:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d36:	4629      	mov	r1, r5
 8005d38:	4b0e      	ldr	r3, [pc, #56]	@ (8005d74 <prvSwitchTimerLists+0x74>)
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	f7fb f88b 	bl	8000e56 <vListInsert>
 8005d40:	e7e0      	b.n	8005d04 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d42:	2100      	movs	r1, #0
 8005d44:	9100      	str	r1, [sp, #0]
 8005d46:	460b      	mov	r3, r1
 8005d48:	4632      	mov	r2, r6
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f7ff ffa2 	bl	8005c94 <xTimerGenericCommand>
				configASSERT( xResult );
 8005d50:	2800      	cmp	r0, #0
 8005d52:	d1d7      	bne.n	8005d04 <prvSwitchTimerLists+0x4>
 8005d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	e7fe      	b.n	8005d64 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8005d66:	4a04      	ldr	r2, [pc, #16]	@ (8005d78 <prvSwitchTimerLists+0x78>)
 8005d68:	6810      	ldr	r0, [r2, #0]
 8005d6a:	4902      	ldr	r1, [pc, #8]	@ (8005d74 <prvSwitchTimerLists+0x74>)
 8005d6c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8005d6e:	6013      	str	r3, [r2, #0]
}
 8005d70:	b002      	add	sp, #8
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	20004d6c 	.word	0x20004d6c
 8005d78:	20004d68 	.word	0x20004d68

08005d7c <prvSampleTimeNow>:
{
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8005d80:	f7ff fa34 	bl	80051ec <xTaskGetTickCount>
 8005d84:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8005d86:	4b07      	ldr	r3, [pc, #28]	@ (8005da4 <prvSampleTimeNow+0x28>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4283      	cmp	r3, r0
 8005d8c:	d805      	bhi.n	8005d9a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8005d92:	4b04      	ldr	r3, [pc, #16]	@ (8005da4 <prvSampleTimeNow+0x28>)
 8005d94:	601c      	str	r4, [r3, #0]
}
 8005d96:	4620      	mov	r0, r4
 8005d98:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8005d9a:	f7ff ffb1 	bl	8005d00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	602b      	str	r3, [r5, #0]
 8005da2:	e7f6      	b.n	8005d92 <prvSampleTimeNow+0x16>
 8005da4:	20004d5c 	.word	0x20004d5c

08005da8 <prvProcessExpiredTimer>:
{
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	4606      	mov	r6, r0
 8005dae:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db0:	4917      	ldr	r1, [pc, #92]	@ (8005e10 <prvProcessExpiredTimer+0x68>)
 8005db2:	6809      	ldr	r1, [r1, #0]
 8005db4:	68c9      	ldr	r1, [r1, #12]
 8005db6:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005db8:	1d20      	adds	r0, r4, #4
 8005dba:	f7fb f865 	bl	8000e88 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dbe:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8005dc2:	f01c 0f04 	tst.w	ip, #4
 8005dc6:	d108      	bne.n	8005dda <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005dc8:	f02c 0c01 	bic.w	ip, ip, #1
 8005dcc:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dd0:	6a23      	ldr	r3, [r4, #32]
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	4798      	blx	r3
}
 8005dd6:	b002      	add	sp, #8
 8005dd8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005dda:	69a1      	ldr	r1, [r4, #24]
 8005ddc:	4633      	mov	r3, r6
 8005dde:	462a      	mov	r2, r5
 8005de0:	4431      	add	r1, r6
 8005de2:	4620      	mov	r0, r4
 8005de4:	f7ff fec8 	bl	8005b78 <prvInsertTimerInActiveList>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d0f1      	beq.n	8005dd0 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dec:	2100      	movs	r1, #0
 8005dee:	9100      	str	r1, [sp, #0]
 8005df0:	460b      	mov	r3, r1
 8005df2:	4632      	mov	r2, r6
 8005df4:	4620      	mov	r0, r4
 8005df6:	f7ff ff4d 	bl	8005c94 <xTimerGenericCommand>
			configASSERT( xResult );
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d1e8      	bne.n	8005dd0 <prvProcessExpiredTimer+0x28>
 8005dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	e7fe      	b.n	8005e0e <prvProcessExpiredTimer+0x66>
 8005e10:	20004d6c 	.word	0x20004d6c

08005e14 <prvProcessTimerOrBlockTask>:
{
 8005e14:	b570      	push	{r4, r5, r6, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	4606      	mov	r6, r0
 8005e1a:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8005e1c:	f7ff f9de 	bl	80051dc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e20:	a801      	add	r0, sp, #4
 8005e22:	f7ff ffab 	bl	8005d7c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8005e26:	9b01      	ldr	r3, [sp, #4]
 8005e28:	bb33      	cbnz	r3, 8005e78 <prvProcessTimerOrBlockTask+0x64>
 8005e2a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e2c:	b9e4      	cbnz	r4, 8005e68 <prvProcessTimerOrBlockTask+0x54>
 8005e2e:	42b0      	cmp	r0, r6
 8005e30:	d213      	bcs.n	8005e5a <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e32:	4622      	mov	r2, r4
 8005e34:	1b71      	subs	r1, r6, r5
 8005e36:	4b12      	ldr	r3, [pc, #72]	@ (8005e80 <prvProcessTimerOrBlockTask+0x6c>)
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	f7fb fda3 	bl	8001984 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e3e:	f7ff fa67 	bl	8005310 <xTaskResumeAll>
 8005e42:	b9d8      	cbnz	r0, 8005e7c <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8005e44:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e4c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	e010      	b.n	8005e7c <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8005e5a:	f7ff fa59 	bl	8005310 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e5e:	4629      	mov	r1, r5
 8005e60:	4630      	mov	r0, r6
 8005e62:	f7ff ffa1 	bl	8005da8 <prvProcessExpiredTimer>
 8005e66:	e009      	b.n	8005e7c <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e68:	4a06      	ldr	r2, [pc, #24]	@ (8005e84 <prvProcessTimerOrBlockTask+0x70>)
 8005e6a:	6812      	ldr	r2, [r2, #0]
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	b90a      	cbnz	r2, 8005e74 <prvProcessTimerOrBlockTask+0x60>
 8005e70:	2401      	movs	r4, #1
 8005e72:	e7de      	b.n	8005e32 <prvProcessTimerOrBlockTask+0x1e>
 8005e74:	461c      	mov	r4, r3
 8005e76:	e7dc      	b.n	8005e32 <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8005e78:	f7ff fa4a 	bl	8005310 <xTaskResumeAll>
}
 8005e7c:	b002      	add	sp, #8
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
 8005e80:	20004d64 	.word	0x20004d64
 8005e84:	20004d68 	.word	0x20004d68

08005e88 <prvProcessReceivedCommands>:
{
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e8c:	e002      	b.n	8005e94 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e8e:	9b04      	ldr	r3, [sp, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	da0f      	bge.n	8005eb4 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e94:	2200      	movs	r2, #0
 8005e96:	a904      	add	r1, sp, #16
 8005e98:	4b3d      	ldr	r3, [pc, #244]	@ (8005f90 <prvProcessReceivedCommands+0x108>)
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	f7fb fcae 	bl	80017fc <xQueueReceive>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	d072      	beq.n	8005f8a <prvProcessReceivedCommands+0x102>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ea4:	9b04      	ldr	r3, [sp, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	daf1      	bge.n	8005e8e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005eaa:	9907      	ldr	r1, [sp, #28]
 8005eac:	9806      	ldr	r0, [sp, #24]
 8005eae:	9b05      	ldr	r3, [sp, #20]
 8005eb0:	4798      	blx	r3
 8005eb2:	e7ec      	b.n	8005e8e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005eb4:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005eb6:	6963      	ldr	r3, [r4, #20]
 8005eb8:	b113      	cbz	r3, 8005ec0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005eba:	1d20      	adds	r0, r4, #4
 8005ebc:	f7fa ffe4 	bl	8000e88 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ec0:	a803      	add	r0, sp, #12
 8005ec2:	f7ff ff5b 	bl	8005d7c <prvSampleTimeNow>
 8005ec6:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8005ec8:	9b04      	ldr	r3, [sp, #16]
 8005eca:	2b09      	cmp	r3, #9
 8005ecc:	d8e2      	bhi.n	8005e94 <prvProcessReceivedCommands+0xc>
 8005ece:	e8df f003 	tbb	[pc, r3]
 8005ed2:	0505      	.short	0x0505
 8005ed4:	4e362f05 	.word	0x4e362f05
 8005ed8:	362f0505 	.word	0x362f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005edc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005ee0:	f043 0301 	orr.w	r3, r3, #1
 8005ee4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ee8:	9b05      	ldr	r3, [sp, #20]
 8005eea:	69a1      	ldr	r1, [r4, #24]
 8005eec:	4419      	add	r1, r3
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f7ff fe42 	bl	8005b78 <prvInsertTimerInActiveList>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d0cd      	beq.n	8005e94 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ef8:	6a23      	ldr	r3, [r4, #32]
 8005efa:	4620      	mov	r0, r4
 8005efc:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005efe:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005f02:	f013 0f04 	tst.w	r3, #4
 8005f06:	d0c5      	beq.n	8005e94 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f08:	69a2      	ldr	r2, [r4, #24]
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	9100      	str	r1, [sp, #0]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	9805      	ldr	r0, [sp, #20]
 8005f12:	4402      	add	r2, r0
 8005f14:	4620      	mov	r0, r4
 8005f16:	f7ff febd 	bl	8005c94 <xTimerGenericCommand>
							configASSERT( xResult );
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d1ba      	bne.n	8005e94 <prvProcessReceivedCommands+0xc>
 8005f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	e7fe      	b.n	8005f2e <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f30:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005f34:	f023 0301 	bic.w	r3, r3, #1
 8005f38:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8005f3c:	e7aa      	b.n	8005e94 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f3e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005f42:	f043 0301 	orr.w	r3, r3, #1
 8005f46:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f4a:	9905      	ldr	r1, [sp, #20]
 8005f4c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f4e:	b129      	cbz	r1, 8005f5c <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f50:	4603      	mov	r3, r0
 8005f52:	4401      	add	r1, r0
 8005f54:	4620      	mov	r0, r4
 8005f56:	f7ff fe0f 	bl	8005b78 <prvInsertTimerInActiveList>
					break;
 8005f5a:	e79b      	b.n	8005e94 <prvProcessReceivedCommands+0xc>
 8005f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f6c:	e7fe      	b.n	8005f6c <prvProcessReceivedCommands+0xe4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f6e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005f72:	f013 0f02 	tst.w	r3, #2
 8005f76:	d004      	beq.n	8005f82 <prvProcessReceivedCommands+0xfa>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f78:	f023 0301 	bic.w	r3, r3, #1
 8005f7c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8005f80:	e788      	b.n	8005e94 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8005f82:	4620      	mov	r0, r4
 8005f84:	f7fa fdaa 	bl	8000adc <vPortFree>
 8005f88:	e784      	b.n	8005e94 <prvProcessReceivedCommands+0xc>
}
 8005f8a:	b008      	add	sp, #32
 8005f8c:	bd10      	pop	{r4, pc}
 8005f8e:	bf00      	nop
 8005f90:	20004d64 	.word	0x20004d64

08005f94 <prvTimerTask>:
{
 8005f94:	b500      	push	{lr}
 8005f96:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f98:	a801      	add	r0, sp, #4
 8005f9a:	f7ff fddd 	bl	8005b58 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f9e:	9901      	ldr	r1, [sp, #4]
 8005fa0:	f7ff ff38 	bl	8005e14 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8005fa4:	f7ff ff70 	bl	8005e88 <prvProcessReceivedCommands>
	for( ;; )
 8005fa8:	e7f6      	b.n	8005f98 <prvTimerTask+0x4>
	...

08005fac <controller_timing_start>:

void update_next_event(void);

void controller_timing_start(TIM_HandleTypeDef *htim)
{
    if (htim == NULL)
 8005fac:	b320      	cbz	r0, 8005ff8 <controller_timing_start+0x4c>
{
 8005fae:	b510      	push	{r4, lr}
        /**
         * @todo throw an error
         */
        return;
    }
    timer = htim;
 8005fb0:	4c12      	ldr	r4, [pc, #72]	@ (8005ffc <controller_timing_start+0x50>)
 8005fb2:	6020      	str	r0, [r4, #0]
    
    /**
     * This assumes that sys clock is the same as timer clock
     */
    timer->Instance->PSC = (HAL_RCC_GetSysClockFreq() / 1000000UL) - 1;
 8005fb4:	f7fd fa4e 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8005fb8:	4b11      	ldr	r3, [pc, #68]	@ (8006000 <controller_timing_start+0x54>)
 8005fba:	fba3 2300 	umull	r2, r3, r3, r0
 8005fbe:	0c9b      	lsrs	r3, r3, #18
 8005fc0:	6820      	ldr	r0, [r4, #0]
 8005fc2:	6802      	ldr	r2, [r0, #0]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	6293      	str	r3, [r2, #40]	@ 0x28
    //timer->Instance->ARR = 100000;
    timer->Instance->EGR |= TIM_EGR_UG;  // Force an update event → immediately reloads PSC
 8005fc8:	6802      	ldr	r2, [r0, #0]
 8005fca:	6953      	ldr	r3, [r2, #20]
 8005fcc:	f043 0301 	orr.w	r3, r3, #1
 8005fd0:	6153      	str	r3, [r2, #20]

    HAL_TIM_Base_Start_IT(timer);
 8005fd2:	f7fd fc23 	bl	800381c <HAL_TIM_Base_Start_IT>
    HAL_TIM_OC_Start_IT(timer, TIM_CHANNEL_1);    
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	6820      	ldr	r0, [r4, #0]
 8005fda:	f7fd ff4d 	bl	8003e78 <HAL_TIM_OC_Start_IT>

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8005fde:	2300      	movs	r3, #0
 8005fe0:	2b13      	cmp	r3, #19
 8005fe2:	d808      	bhi.n	8005ff6 <controller_timing_start+0x4a>
    {
        event_queue[i].state = EVENT_STATE_INACTIVE;
 8005fe4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005fe8:	4a06      	ldr	r2, [pc, #24]	@ (8006004 <controller_timing_start+0x58>)
 8005fea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005fee:	2100      	movs	r1, #0
 8005ff0:	7411      	strb	r1, [r2, #16]
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	e7f4      	b.n	8005fe0 <controller_timing_start+0x34>
    }
    
}
 8005ff6:	bd10      	pop	{r4, pc}
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	20004f28 	.word	0x20004f28
 8006000:	431bde83 	.word	0x431bde83
 8006004:	20004d98 	.word	0x20004d98

08006008 <get_time_us>:

time_us_t get_time_us(void)
{
    return timer->Instance->CNT;
 8006008:	4b02      	ldr	r3, [pc, #8]	@ (8006014 <get_time_us+0xc>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	20004f28 	.word	0x20004f28

08006018 <update_next_event>:
{
    return timer->Instance->CNT / 1000U;
}

void update_next_event(void)
{
 8006018:	b410      	push	{r4}
    time_us_t nearest_time = 0xFFFFFFFF;
    bool found = false;

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 800601a:	2300      	movs	r3, #0
    bool found = false;
 800601c:	4618      	mov	r0, r3
    time_us_t nearest_time = 0xFFFFFFFF;
 800601e:	f04f 34ff 	mov.w	r4, #4294967295
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8006022:	e006      	b.n	8006032 <update_next_event+0x1a>
        
        /* This will handle wraparound safely aparantly, but i don't know how it works yet :( */
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
        {
            found = true;
            nearest_time = event_queue[i].timestamp_us;
 8006024:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006028:	008a      	lsls	r2, r1, #2
 800602a:	4910      	ldr	r1, [pc, #64]	@ (800606c <update_next_event+0x54>)
 800602c:	588c      	ldr	r4, [r1, r2]
            found = true;
 800602e:	2001      	movs	r0, #1
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8006030:	3301      	adds	r3, #1
 8006032:	2b13      	cmp	r3, #19
 8006034:	d812      	bhi.n	800605c <update_next_event+0x44>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 8006036:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800603a:	0091      	lsls	r1, r2, #2
 800603c:	4a0b      	ldr	r2, [pc, #44]	@ (800606c <update_next_event+0x54>)
 800603e:	440a      	add	r2, r1
 8006040:	7c12      	ldrb	r2, [r2, #16]
 8006042:	2a01      	cmp	r2, #1
 8006044:	d1f4      	bne.n	8006030 <update_next_event+0x18>
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
 8006046:	2800      	cmp	r0, #0
 8006048:	d0ec      	beq.n	8006024 <update_next_event+0xc>
 800604a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800604e:	008a      	lsls	r2, r1, #2
 8006050:	4906      	ldr	r1, [pc, #24]	@ (800606c <update_next_event+0x54>)
 8006052:	588a      	ldr	r2, [r1, r2]
 8006054:	1b12      	subs	r2, r2, r4
 8006056:	2a00      	cmp	r2, #0
 8006058:	daea      	bge.n	8006030 <update_next_event+0x18>
 800605a:	e7e3      	b.n	8006024 <update_next_event+0xc>
        }        
    }

    if (found) {
 800605c:	b118      	cbz	r0, 8006066 <update_next_event+0x4e>
        // Schedule next interrupt
        timer->Instance->CCR1 = nearest_time;
 800605e:	4b04      	ldr	r3, [pc, #16]	@ (8006070 <update_next_event+0x58>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	635c      	str	r4, [r3, #52]	@ 0x34
    } else {
        // No pending events — disable future interrupts or set a dummy compare
        /* Should i set a compare in the near future ?*/
        //timer->Instance->CCR1 = 0xFFFFFFFF;
    }
}
 8006066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	20004d98 	.word	0x20004d98
 8006070:	20004f28 	.word	0x20004f28

08006074 <scheduler_timer_callback>:

void scheduler_timer_callback()
{
 8006074:	b538      	push	{r3, r4, r5, lr}
    // Exit early if this wasn't a CCR1 match
    if (!(timer->Instance->SR & TIM_SR_CC1IF))
 8006076:	4b23      	ldr	r3, [pc, #140]	@ (8006104 <scheduler_timer_callback+0x90>)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	6813      	ldr	r3, [r2, #0]
 800607c:	6919      	ldr	r1, [r3, #16]
 800607e:	f011 0f02 	tst.w	r1, #2
 8006082:	d03e      	beq.n	8006102 <scheduler_timer_callback+0x8e>
    {
        return;
    }

    timer->Instance->SR &= ~TIM_SR_CC1IF;  // Clear the compare match flag
 8006084:	6919      	ldr	r1, [r3, #16]
 8006086:	f021 0102 	bic.w	r1, r1, #2
 800608a:	6119      	str	r1, [r3, #16]
    time_us_t time_now_us = timer->Instance->CNT; // I have avoided the function call overhead here. might be minimal anyways...
 800608c:	6813      	ldr	r3, [r2, #0]
 800608e:	6a5d      	ldr	r5, [r3, #36]	@ 0x24

    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8006090:	2400      	movs	r4, #0
 8006092:	e00e      	b.n	80060b2 <scheduler_timer_callback+0x3e>
        {
            event_queue[i].callback_arg(event_queue[i].arg);
        }
        else
        {
            event_queue[i].callback_noarg();
 8006094:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8006098:	009a      	lsls	r2, r3, #2
 800609a:	4b1b      	ldr	r3, [pc, #108]	@ (8006108 <scheduler_timer_callback+0x94>)
 800609c:	4413      	add	r3, r2
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	4798      	blx	r3
        }

        event_queue[i].state = EVENT_STATE_INACTIVE;
 80060a2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80060a6:	009a      	lsls	r2, r3, #2
 80060a8:	4b17      	ldr	r3, [pc, #92]	@ (8006108 <scheduler_timer_callback+0x94>)
 80060aa:	4413      	add	r3, r2
 80060ac:	2200      	movs	r2, #0
 80060ae:	741a      	strb	r2, [r3, #16]
    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 80060b0:	3401      	adds	r4, #1
 80060b2:	2c13      	cmp	r4, #19
 80060b4:	dc23      	bgt.n	80060fe <scheduler_timer_callback+0x8a>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 80060b6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80060ba:	009a      	lsls	r2, r3, #2
 80060bc:	4b12      	ldr	r3, [pc, #72]	@ (8006108 <scheduler_timer_callback+0x94>)
 80060be:	4413      	add	r3, r2
 80060c0:	7c1b      	ldrb	r3, [r3, #16]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d1f4      	bne.n	80060b0 <scheduler_timer_callback+0x3c>
        if ((int32_t)(time_now_us - event_queue[i].timestamp_us) < 0)
 80060c6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80060ca:	0093      	lsls	r3, r2, #2
 80060cc:	4a0e      	ldr	r2, [pc, #56]	@ (8006108 <scheduler_timer_callback+0x94>)
 80060ce:	58d3      	ldr	r3, [r2, r3]
 80060d0:	1aeb      	subs	r3, r5, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	dbec      	blt.n	80060b0 <scheduler_timer_callback+0x3c>
        event_queue[i].state = EVENT_STATE_ACTIVE;
 80060d6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80060da:	009a      	lsls	r2, r3, #2
 80060dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006108 <scheduler_timer_callback+0x94>)
 80060de:	4413      	add	r3, r2
 80060e0:	2202      	movs	r2, #2
 80060e2:	741a      	strb	r2, [r3, #16]
        if (event_queue[i].uses_arg)
 80060e4:	7c5b      	ldrb	r3, [r3, #17]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0d4      	beq.n	8006094 <scheduler_timer_callback+0x20>
            event_queue[i].callback_arg(event_queue[i].arg);
 80060ea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80060ee:	fa03 f202 	lsl.w	r2, r3, r2
 80060f2:	4b05      	ldr	r3, [pc, #20]	@ (8006108 <scheduler_timer_callback+0x94>)
 80060f4:	4413      	add	r3, r2
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	68d8      	ldr	r0, [r3, #12]
 80060fa:	4790      	blx	r2
 80060fc:	e7d1      	b.n	80060a2 <scheduler_timer_callback+0x2e>
    }

    update_next_event();  // Schedule the next event
 80060fe:	f7ff ff8b 	bl	8006018 <update_next_event>
}
 8006102:	bd38      	pop	{r3, r4, r5, pc}
 8006104:	20004f28 	.word	0x20004f28
 8006108:	20004d98 	.word	0x20004d98

0800610c <scheduler_schedule_event_with_arg>:


bool scheduler_schedule_event_with_arg(time_us_t timestamp_us, void (*callback)(void *), void *arg)
{
    if (callback == NULL) return false;
 800610c:	b311      	cbz	r1, 8006154 <scheduler_schedule_event_with_arg+0x48>
{
 800610e:	b510      	push	{r4, lr}
 8006110:	460c      	mov	r4, r1

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8006112:	2300      	movs	r3, #0
 8006114:	2b13      	cmp	r3, #19
 8006116:	d81b      	bhi.n	8006150 <scheduler_schedule_event_with_arg+0x44>
        if (event_queue[i].state == EVENT_STATE_INACTIVE) {
 8006118:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800611c:	490e      	ldr	r1, [pc, #56]	@ (8006158 <scheduler_schedule_event_with_arg+0x4c>)
 800611e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8006122:	7c09      	ldrb	r1, [r1, #16]
 8006124:	b109      	cbz	r1, 800612a <scheduler_schedule_event_with_arg+0x1e>
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8006126:	3301      	adds	r3, #1
 8006128:	e7f4      	b.n	8006114 <scheduler_schedule_event_with_arg+0x8>
            event_queue[i].timestamp_us = timestamp_us;
 800612a:	490b      	ldr	r1, [pc, #44]	@ (8006158 <scheduler_schedule_event_with_arg+0x4c>)
 800612c:	46e6      	mov	lr, ip
 800612e:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8006132:	f841 002e 	str.w	r0, [r1, lr, lsl #2]
            event_queue[i].callback_arg = callback;
 8006136:	f8cc 4004 	str.w	r4, [ip, #4]
            event_queue[i].arg = arg;
 800613a:	f8cc 200c 	str.w	r2, [ip, #12]
            event_queue[i].uses_arg = true;
 800613e:	2401      	movs	r4, #1
 8006140:	f88c 4011 	strb.w	r4, [ip, #17]
            event_queue[i].state = EVENT_STATE_PENDING;
 8006144:	f88c 4010 	strb.w	r4, [ip, #16]

            update_next_event();
 8006148:	f7ff ff66 	bl	8006018 <update_next_event>
            return true;
 800614c:	4620      	mov	r0, r4
        }
    }

    return false;
}
 800614e:	bd10      	pop	{r4, pc}
    return false;
 8006150:	2000      	movs	r0, #0
 8006152:	e7fc      	b.n	800614e <scheduler_schedule_event_with_arg+0x42>
    if (callback == NULL) return false;
 8006154:	2000      	movs	r0, #0
}
 8006156:	4770      	bx	lr
 8006158:	20004d98 	.word	0x20004d98

0800615c <set_filtering>:

trigger_s *trigger = NULL;

void set_filtering(trigger_s *trigger)
{
  switch (configuration.trigger.filtering)
 800615c:	4b0d      	ldr	r3, [pc, #52]	@ (8006194 <set_filtering+0x38>)
 800615e:	789b      	ldrb	r3, [r3, #2]
 8006160:	2b03      	cmp	r3, #3
 8006162:	d813      	bhi.n	800618c <set_filtering+0x30>
 8006164:	e8df f003 	tbb	[pc, r3]
 8006168:	0c090502 	.word	0x0c090502
  {
    case TF_FILTERING_NONE:
      trigger->_trigger_filter_time_us = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	6043      	str	r3, [r0, #4]
        break;
 8006170:	4770      	bx	lr
    case TF_FILTERING_LITE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 4U; 
 8006172:	6943      	ldr	r3, [r0, #20]
 8006174:	089b      	lsrs	r3, r3, #2
 8006176:	6043      	str	r3, [r0, #4]
        break;
 8006178:	4770      	bx	lr
    case TF_FILTERING_MEDIUM:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 1U;
 800617a:	6943      	ldr	r3, [r0, #20]
 800617c:	6043      	str	r3, [r0, #4]
        break;
 800617e:	4770      	bx	lr
    case TF_FILTERING_AGGRESSIVE:
      trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us * 3 / 4;
 8006180:	6943      	ldr	r3, [r0, #20]
 8006182:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006186:	089b      	lsrs	r3, r3, #2
 8006188:	6043      	str	r3, [r0, #4]
        break;
 800618a:	4770      	bx	lr
    default:
        // Handle invalid filtering level
        trigger->_trigger_filter_time_us = 0;
 800618c:	2300      	movs	r3, #0
 800618e:	6043      	str	r3, [r0, #4]
        break;
  }
}
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	2000090c 	.word	0x2000090c

08006198 <trigger_init>:

void trigger_init(trigger_s *instance)
{   
  bool temp_status = true;
  if (instance == NULL)
 8006198:	b1b8      	cbz	r0, 80061ca <trigger_init+0x32>
{   
 800619a:	b510      	push	{r4, lr}
    /**
     * @todo and maybe throw an error!
     */
    return;
  }
  trigger = instance;
 800619c:	4c0b      	ldr	r4, [pc, #44]	@ (80061cc <trigger_init+0x34>)
 800619e:	6020      	str	r0, [r4, #0]
  
  trigger->sync_status = TS_NOT_SYNCED;
 80061a0:	2200      	movs	r2, #0
 80061a2:	7042      	strb	r2, [r0, #1]
  set_filtering(trigger);
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	f7ff ffd9 	bl	800615c <set_filtering>
  trigger->_trigger_actual_teeth = configuration.trigger.full_teeth - configuration.trigger.missing_teeth;
 80061aa:	4b09      	ldr	r3, [pc, #36]	@ (80061d0 <trigger_init+0x38>)
 80061ac:	78da      	ldrb	r2, [r3, #3]
 80061ae:	7919      	ldrb	r1, [r3, #4]
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	1a50      	subs	r0, r2, r1
 80061b4:	f883 0022 	strb.w	r0, [r3, #34]	@ 0x22
    
  if (configuration.trigger.full_teeth == 0 || configuration.trigger.missing_teeth == 0)
 80061b8:	b112      	cbz	r2, 80061c0 <trigger_init+0x28>
 80061ba:	b121      	cbz	r1, 80061c6 <trigger_init+0x2e>
  bool temp_status = true;
 80061bc:	2201      	movs	r2, #1
 80061be:	e000      	b.n	80061c2 <trigger_init+0x2a>
  {
    temp_status = false;
 80061c0:	2200      	movs	r2, #0
  }
  trigger->initialized = temp_status;
 80061c2:	701a      	strb	r2, [r3, #0]
    
}
 80061c4:	bd10      	pop	{r4, pc}
    temp_status = false;
 80061c6:	2200      	movs	r2, #0
 80061c8:	e7fb      	b.n	80061c2 <trigger_init+0x2a>
 80061ca:	4770      	bx	lr
 80061cc:	20004f2c 	.word	0x20004f2c
 80061d0:	2000090c 	.word	0x2000090c

080061d4 <crankshaft_get_rpm>:


rpm_t crankshaft_get_rpm()
{
  return engine.rpm;
}
 80061d4:	4b01      	ldr	r3, [pc, #4]	@ (80061dc <crankshaft_get_rpm+0x8>)
 80061d6:	ed93 0a03 	vldr	s0, [r3, #12]
 80061da:	4770      	bx	lr
 80061dc:	200008d0 	.word	0x200008d0

080061e0 <crankshaft_get_angle>:
 * @note angle is updated on every trigger event!
 */
angle_t crankshaft_get_angle()
{
  return engine.crankshaft_angle;
}
 80061e0:	4b01      	ldr	r3, [pc, #4]	@ (80061e8 <crankshaft_get_angle+0x8>)
 80061e2:	ed93 0a01 	vldr	s0, [r3, #4]
 80061e6:	4770      	bx	lr
 80061e8:	200008d0 	.word	0x200008d0

080061ec <trigger_tooth_handle>:
{
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	ed2d 8b02 	vpush	{d8}
  if (!trigger->initialized)
 80061f2:	4b5a      	ldr	r3, [pc, #360]	@ (800635c <trigger_tooth_handle+0x170>)
 80061f4:	681c      	ldr	r4, [r3, #0]
 80061f6:	7825      	ldrb	r5, [r4, #0]
 80061f8:	b915      	cbnz	r5, 8006200 <trigger_tooth_handle+0x14>
}
 80061fa:	ecbd 8b02 	vpop	{d8}
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
  trigger->_tooth_time_us[0] = get_time_us();
 8006200:	f7ff ff02 	bl	8006008 <get_time_us>
 8006204:	60a0      	str	r0, [r4, #8]
  trigger->_current_tooth_gap_us = trigger->_tooth_time_us[0] - trigger->_tooth_time_us[1];
 8006206:	4b55      	ldr	r3, [pc, #340]	@ (800635c <trigger_tooth_handle+0x170>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	68d8      	ldr	r0, [r3, #12]
 800620e:	1a12      	subs	r2, r2, r0
 8006210:	615a      	str	r2, [r3, #20]
  if (trigger->_current_tooth_gap_us < trigger->_trigger_filter_time_us) // Pulses should never be less than _trigger_filter_time_us, so if they are it means a false trigger. (A 36-1 wheel at 8000rpm will have triggers approx. every 200uS)
 8006212:	6859      	ldr	r1, [r3, #4]
 8006214:	428a      	cmp	r2, r1
 8006216:	d3f0      	bcc.n	80061fa <trigger_tooth_handle+0xe>
  trigger->_counted_tooth++; //Increment the tooth counter
 8006218:	8c19      	ldrh	r1, [r3, #32]
 800621a:	3101      	adds	r1, #1
 800621c:	b289      	uxth	r1, r1
 800621e:	8419      	strh	r1, [r3, #32]
  previous_tooth_gap = trigger->_tooth_time_us[1] - trigger->_tooth_time_us[2];
 8006220:	691c      	ldr	r4, [r3, #16]
 8006222:	1b00      	subs	r0, r0, r4
  if (previous_tooth_gap < trigger->_current_tooth_gap_us) 
 8006224:	4282      	cmp	r2, r0
 8006226:	d965      	bls.n	80062f4 <trigger_tooth_handle+0x108>
    trigger->_shorter_tooth_gap = previous_tooth_gap;
 8006228:	6198      	str	r0, [r3, #24]
  if(configuration.trigger.missing_teeth == 1)
 800622a:	484d      	ldr	r0, [pc, #308]	@ (8006360 <trigger_tooth_handle+0x174>)
 800622c:	7900      	ldrb	r0, [r0, #4]
 800622e:	2801      	cmp	r0, #1
 8006230:	d062      	beq.n	80062f8 <trigger_tooth_handle+0x10c>
    trigger->_target_tooth_gap_us = trigger->_shorter_tooth_gap * configuration.trigger.missing_teeth;
 8006232:	699c      	ldr	r4, [r3, #24]
 8006234:	fb00 f404 	mul.w	r4, r0, r4
 8006238:	61dc      	str	r4, [r3, #28]
  if ((trigger->_current_tooth_gap_us > trigger->_target_tooth_gap_us) || (trigger->_counted_tooth > trigger->_trigger_actual_teeth))
 800623a:	69d8      	ldr	r0, [r3, #28]
 800623c:	4282      	cmp	r2, r0
 800623e:	d803      	bhi.n	8006248 <trigger_tooth_handle+0x5c>
 8006240:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8006244:	4291      	cmp	r1, r2
 8006246:	d968      	bls.n	800631a <trigger_tooth_handle+0x12e>
    if (trigger->_counted_tooth < trigger->_trigger_actual_teeth)
 8006248:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800624c:	4291      	cmp	r1, r2
 800624e:	d259      	bcs.n	8006304 <trigger_tooth_handle+0x118>
      trigger->sync_status = TS_NOT_SYNCED;
 8006250:	2200      	movs	r2, #0
 8006252:	705a      	strb	r2, [r3, #1]
      trigger->sync_loss_counter++;
 8006254:	4941      	ldr	r1, [pc, #260]	@ (800635c <trigger_tooth_handle+0x170>)
 8006256:	6808      	ldr	r0, [r1, #0]
 8006258:	8843      	ldrh	r3, [r0, #2]
 800625a:	3301      	adds	r3, #1
 800625c:	8043      	strh	r3, [r0, #2]
      engine.total_revolutions = 0;
 800625e:	4b41      	ldr	r3, [pc, #260]	@ (8006364 <trigger_tooth_handle+0x178>)
 8006260:	601a      	str	r2, [r3, #0]
      engine.rpm = 0;
 8006262:	2000      	movs	r0, #0
 8006264:	60d8      	str	r0, [r3, #12]
      trigger->_counted_tooth = 0;
 8006266:	680b      	ldr	r3, [r1, #0]
 8006268:	841a      	strh	r2, [r3, #32]
  engine.crankshaft_angle = 360.0f / (angle_t)configuration.trigger.full_teeth * (angle_t)trigger->_counted_tooth;
 800626a:	4b3d      	ldr	r3, [pc, #244]	@ (8006360 <trigger_tooth_handle+0x174>)
 800626c:	78d9      	ldrb	r1, [r3, #3]
 800626e:	ee07 1a90 	vmov	s15, r1
 8006272:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006276:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8006368 <trigger_tooth_handle+0x17c>
 800627a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800627e:	4b37      	ldr	r3, [pc, #220]	@ (800635c <trigger_tooth_handle+0x170>)
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	8c03      	ldrh	r3, [r0, #32]
 8006284:	ee07 3a10 	vmov	s14, r3
 8006288:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800628c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006290:	4a34      	ldr	r2, [pc, #208]	@ (8006364 <trigger_tooth_handle+0x178>)
 8006292:	edc2 7a01 	vstr	s15, [r2, #4]
  engine.rpm = (rpm_t)(CONVERSION_FACTOR_SECONDS_TO_MICROSECONDS * CONVERSION_FACTOR_MINUTES_TO_SECONDS / trigger->_shorter_tooth_gap / configuration.trigger.full_teeth);
 8006296:	6984      	ldr	r4, [r0, #24]
 8006298:	4b34      	ldr	r3, [pc, #208]	@ (800636c <trigger_tooth_handle+0x180>)
 800629a:	fbb3 f3f4 	udiv	r3, r3, r4
 800629e:	fbb3 f3f1 	udiv	r3, r3, r1
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062aa:	edc2 7a03 	vstr	s15, [r2, #12]
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= configuration.cranking_rpm_threshold)
 80062ae:	7843      	ldrb	r3, [r0, #1]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d034      	beq.n	800631e <trigger_tooth_handle+0x132>
  else if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < configuration.cranking_rpm_threshold)
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d03e      	beq.n	8006336 <trigger_tooth_handle+0x14a>
  else if (trigger->sync_status == TS_NOT_SYNCED)
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d148      	bne.n	800634e <trigger_tooth_handle+0x162>
    engine.spinning_state = SS_SPINNING_UP;
 80062bc:	4b29      	ldr	r3, [pc, #164]	@ (8006364 <trigger_tooth_handle+0x178>)
 80062be:	2201      	movs	r2, #1
 80062c0:	745a      	strb	r2, [r3, #17]
  if(is_missing_teeth == false)
 80062c2:	2d00      	cmp	r5, #0
 80062c4:	d047      	beq.n	8006356 <trigger_tooth_handle+0x16a>
  trigger->_tooth_time_us[2] = trigger->_tooth_time_us[1];
 80062c6:	4b25      	ldr	r3, [pc, #148]	@ (800635c <trigger_tooth_handle+0x170>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	611a      	str	r2, [r3, #16]
  trigger->_tooth_time_us[1] = trigger->_tooth_time_us[0];
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	60da      	str	r2, [r3, #12]
  ignition_trigger_event_handle(crankshaft_get_angle(), crankshaft_get_rpm(), get_time_us());
 80062d2:	f7ff ff85 	bl	80061e0 <crankshaft_get_angle>
 80062d6:	eeb0 8a40 	vmov.f32	s16, s0
 80062da:	f7ff ff7b 	bl	80061d4 <crankshaft_get_rpm>
 80062de:	eef0 8a40 	vmov.f32	s17, s0
 80062e2:	f7ff fe91 	bl	8006008 <get_time_us>
 80062e6:	eef0 0a68 	vmov.f32	s1, s17
 80062ea:	eeb0 0a48 	vmov.f32	s0, s16
 80062ee:	f7fa fcd3 	bl	8000c98 <ignition_trigger_event_handle>
 80062f2:	e782      	b.n	80061fa <trigger_tooth_handle+0xe>
    trigger->_shorter_tooth_gap = trigger->_current_tooth_gap_us;
 80062f4:	619a      	str	r2, [r3, #24]
 80062f6:	e798      	b.n	800622a <trigger_tooth_handle+0x3e>
    trigger->_target_tooth_gap_us = (3 * trigger->_shorter_tooth_gap) >> 1; 
 80062f8:	6998      	ldr	r0, [r3, #24]
 80062fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80062fe:	0840      	lsrs	r0, r0, #1
 8006300:	61d8      	str	r0, [r3, #28]
 8006302:	e79a      	b.n	800623a <trigger_tooth_handle+0x4e>
      trigger->sync_status = TS_FULLY_SYNCED;
 8006304:	2201      	movs	r2, #1
 8006306:	705a      	strb	r2, [r3, #1]
      engine.total_revolutions++;
 8006308:	4a16      	ldr	r2, [pc, #88]	@ (8006364 <trigger_tooth_handle+0x178>)
 800630a:	6813      	ldr	r3, [r2, #0]
 800630c:	3301      	adds	r3, #1
 800630e:	6013      	str	r3, [r2, #0]
      trigger->_counted_tooth = 0;
 8006310:	4b12      	ldr	r3, [pc, #72]	@ (800635c <trigger_tooth_handle+0x170>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2200      	movs	r2, #0
 8006316:	841a      	strh	r2, [r3, #32]
 8006318:	e7a7      	b.n	800626a <trigger_tooth_handle+0x7e>
  bool is_missing_teeth = false;
 800631a:	2500      	movs	r5, #0
 800631c:	e7a5      	b.n	800626a <trigger_tooth_handle+0x7e>
  if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm >= configuration.cranking_rpm_threshold)
 800631e:	4a10      	ldr	r2, [pc, #64]	@ (8006360 <trigger_tooth_handle+0x174>)
 8006320:	ed92 7a02 	vldr	s14, [r2, #8]
 8006324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632c:	dbc2      	blt.n	80062b4 <trigger_tooth_handle+0xc8>
    engine.spinning_state = SS_RUNNING;
 800632e:	4b0d      	ldr	r3, [pc, #52]	@ (8006364 <trigger_tooth_handle+0x178>)
 8006330:	2203      	movs	r2, #3
 8006332:	745a      	strb	r2, [r3, #17]
 8006334:	e7c5      	b.n	80062c2 <trigger_tooth_handle+0xd6>
  else if (trigger->sync_status == TS_FULLY_SYNCED && engine.rpm < configuration.cranking_rpm_threshold)
 8006336:	4a0a      	ldr	r2, [pc, #40]	@ (8006360 <trigger_tooth_handle+0x174>)
 8006338:	ed92 7a02 	vldr	s14, [r2, #8]
 800633c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006344:	d5b8      	bpl.n	80062b8 <trigger_tooth_handle+0xcc>
    engine.spinning_state = SS_CRANKING;
 8006346:	4b07      	ldr	r3, [pc, #28]	@ (8006364 <trigger_tooth_handle+0x178>)
 8006348:	2202      	movs	r2, #2
 800634a:	745a      	strb	r2, [r3, #17]
 800634c:	e7b9      	b.n	80062c2 <trigger_tooth_handle+0xd6>
    engine.spinning_state = SS_STOPPED;
 800634e:	4b05      	ldr	r3, [pc, #20]	@ (8006364 <trigger_tooth_handle+0x178>)
 8006350:	2200      	movs	r2, #0
 8006352:	745a      	strb	r2, [r3, #17]
 8006354:	e7b5      	b.n	80062c2 <trigger_tooth_handle+0xd6>
    set_filtering(trigger); 
 8006356:	f7ff ff01 	bl	800615c <set_filtering>
 800635a:	e7b4      	b.n	80062c6 <trigger_tooth_handle+0xda>
 800635c:	20004f2c 	.word	0x20004f2c
 8006360:	2000090c 	.word	0x2000090c
 8006364:	200008d0 	.word	0x200008d0
 8006368:	43b40000 	.word	0x43b40000
 800636c:	03938700 	.word	0x03938700

08006370 <trigger_simulator_init>:
uint8_t wheel_missing_teeth = 0;
void (*wheel_callback)(void) = NULL;

void trigger_simulator_init(uint8_t full_teeth, uint8_t missing_teeth, void (*callback)(void))
{
    wheel_full_teeth = full_teeth;
 8006370:	4b03      	ldr	r3, [pc, #12]	@ (8006380 <trigger_simulator_init+0x10>)
 8006372:	7018      	strb	r0, [r3, #0]
    wheel_missing_teeth = missing_teeth;
 8006374:	4b03      	ldr	r3, [pc, #12]	@ (8006384 <trigger_simulator_init+0x14>)
 8006376:	7019      	strb	r1, [r3, #0]
    wheel_callback = callback;
 8006378:	4b03      	ldr	r3, [pc, #12]	@ (8006388 <trigger_simulator_init+0x18>)
 800637a:	601a      	str	r2, [r3, #0]
}
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20004f3d 	.word	0x20004f3d
 8006384:	20004f3c 	.word	0x20004f3c
 8006388:	20004f38 	.word	0x20004f38

0800638c <trigger_simulator_update>:

void trigger_simulator_update(rpm_t rpm)
{
    if (wheel_callback == NULL)
 800638c:	4b20      	ldr	r3, [pc, #128]	@ (8006410 <trigger_simulator_update+0x84>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d03c      	beq.n	800640e <trigger_simulator_update+0x82>
{
 8006394:	b510      	push	{r4, lr}
    if (rpm == 0)
 8006396:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800639a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800639e:	d030      	beq.n	8006402 <trigger_simulator_update+0x76>
    return (time_us_t) 60.0f * 1e6f / (rpm * 360.0f);
 80063a0:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8006414 <trigger_simulator_update+0x88>
 80063a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80063a8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8006418 <trigger_simulator_update+0x8c>
 80063ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80063b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063b4:	ee17 4a90 	vmov	r4, s15
    {
        return;
    }

    time_us_t tooth_interval = microseconds_per_degree(rpm) * 360 / wheel_full_teeth;
 80063b8:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80063bc:	fb03 f404 	mul.w	r4, r3, r4
 80063c0:	4b16      	ldr	r3, [pc, #88]	@ (800641c <trigger_simulator_update+0x90>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	fbb4 f4f3 	udiv	r4, r4, r3

    time_us_t current_time = get_time_us();
 80063c8:	f7ff fe1e 	bl	8006008 <get_time_us>
    static time_us_t prev_time = 0;

    if ((int32_t)(current_time - prev_time) < tooth_interval)
 80063cc:	4b14      	ldr	r3, [pc, #80]	@ (8006420 <trigger_simulator_update+0x94>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	1ac3      	subs	r3, r0, r3
 80063d2:	42a3      	cmp	r3, r4
 80063d4:	d314      	bcc.n	8006400 <trigger_simulator_update+0x74>
    {
        return;
    }
    prev_time = current_time;
 80063d6:	4b12      	ldr	r3, [pc, #72]	@ (8006420 <trigger_simulator_update+0x94>)
 80063d8:	6018      	str	r0, [r3, #0]
    
    static uint8_t current_tooth_index = 0;

    if (current_tooth_index < wheel_missing_teeth)
 80063da:	4b12      	ldr	r3, [pc, #72]	@ (8006424 <trigger_simulator_update+0x98>)
 80063dc:	781a      	ldrb	r2, [r3, #0]
 80063de:	4b12      	ldr	r3, [pc, #72]	@ (8006428 <trigger_simulator_update+0x9c>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d302      	bcc.n	80063ec <trigger_simulator_update+0x60>
    {
        // welll do nothing!
    }
    else
    {
        wheel_callback();
 80063e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006410 <trigger_simulator_update+0x84>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4798      	blx	r3
    }
    

    if (current_tooth_index < (wheel_full_teeth - 1))
 80063ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006424 <trigger_simulator_update+0x98>)
 80063ee:	781a      	ldrb	r2, [r3, #0]
 80063f0:	4b0a      	ldr	r3, [pc, #40]	@ (800641c <trigger_simulator_update+0x90>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	429a      	cmp	r2, r3
 80063f8:	da05      	bge.n	8006406 <trigger_simulator_update+0x7a>
    {
        current_tooth_index++;
 80063fa:	3201      	adds	r2, #1
 80063fc:	4b09      	ldr	r3, [pc, #36]	@ (8006424 <trigger_simulator_update+0x98>)
 80063fe:	701a      	strb	r2, [r3, #0]
    {
        current_tooth_index = 0;
    }


}
 8006400:	bd10      	pop	{r4, pc}
        return 0;
 8006402:	2400      	movs	r4, #0
 8006404:	e7d8      	b.n	80063b8 <trigger_simulator_update+0x2c>
        current_tooth_index = 0;
 8006406:	4b07      	ldr	r3, [pc, #28]	@ (8006424 <trigger_simulator_update+0x98>)
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	e7f8      	b.n	8006400 <trigger_simulator_update+0x74>
 800640e:	4770      	bx	lr
 8006410:	20004f38 	.word	0x20004f38
 8006414:	43b40000 	.word	0x43b40000
 8006418:	4c64e1c0 	.word	0x4c64e1c0
 800641c:	20004f3d 	.word	0x20004f3d
 8006420:	20004f34 	.word	0x20004f34
 8006424:	20004f30 	.word	0x20004f30
 8006428:	20004f3c 	.word	0x20004f3c

0800642c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800642c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800642e:	2200      	movs	r2, #0
 8006430:	490f      	ldr	r1, [pc, #60]	@ (8006470 <MX_USB_DEVICE_Init+0x44>)
 8006432:	4810      	ldr	r0, [pc, #64]	@ (8006474 <MX_USB_DEVICE_Init+0x48>)
 8006434:	f000 fc32 	bl	8006c9c <USBD_Init>
 8006438:	b970      	cbnz	r0, 8006458 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800643a:	490f      	ldr	r1, [pc, #60]	@ (8006478 <MX_USB_DEVICE_Init+0x4c>)
 800643c:	480d      	ldr	r0, [pc, #52]	@ (8006474 <MX_USB_DEVICE_Init+0x48>)
 800643e:	f000 fc44 	bl	8006cca <USBD_RegisterClass>
 8006442:	b960      	cbnz	r0, 800645e <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006444:	490d      	ldr	r1, [pc, #52]	@ (800647c <MX_USB_DEVICE_Init+0x50>)
 8006446:	480b      	ldr	r0, [pc, #44]	@ (8006474 <MX_USB_DEVICE_Init+0x48>)
 8006448:	f000 fa39 	bl	80068be <USBD_CDC_RegisterInterface>
 800644c:	b950      	cbnz	r0, 8006464 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800644e:	4809      	ldr	r0, [pc, #36]	@ (8006474 <MX_USB_DEVICE_Init+0x48>)
 8006450:	f000 fc5b 	bl	8006d0a <USBD_Start>
 8006454:	b948      	cbnz	r0, 800646a <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006456:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006458:	f7fa fd36 	bl	8000ec8 <Error_Handler>
 800645c:	e7ed      	b.n	800643a <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800645e:	f7fa fd33 	bl	8000ec8 <Error_Handler>
 8006462:	e7ef      	b.n	8006444 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8006464:	f7fa fd30 	bl	8000ec8 <Error_Handler>
 8006468:	e7f1      	b.n	800644e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800646a:	f7fa fd2d 	bl	8000ec8 <Error_Handler>
}
 800646e:	e7f2      	b.n	8006456 <MX_USB_DEVICE_Init+0x2a>
 8006470:	200000e4 	.word	0x200000e4
 8006474:	20004f40 	.word	0x20004f40
 8006478:	20000058 	.word	0x20000058
 800647c:	2000009c 	.word	0x2000009c

08006480 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006480:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006482:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006486:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800648a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 800648e:	b18c      	cbz	r4, 80064b4 <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006490:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8006494:	6843      	ldr	r3, [r0, #4]
 8006496:	b17b      	cbz	r3, 80064b8 <USBD_CDC_EP0_RxReady+0x38>
 8006498:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 800649c:	28ff      	cmp	r0, #255	@ 0xff
 800649e:	d00d      	beq.n	80064bc <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 80064a6:	4621      	mov	r1, r4
 80064a8:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80064aa:	23ff      	movs	r3, #255	@ 0xff
 80064ac:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80064b0:	2000      	movs	r0, #0
}
 80064b2:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80064b4:	2003      	movs	r0, #3
 80064b6:	e7fc      	b.n	80064b2 <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 80064b8:	2000      	movs	r0, #0
 80064ba:	e7fa      	b.n	80064b2 <USBD_CDC_EP0_RxReady+0x32>
 80064bc:	2000      	movs	r0, #0
 80064be:	e7f8      	b.n	80064b2 <USBD_CDC_EP0_RxReady+0x32>

080064c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80064c0:	230a      	movs	r3, #10
 80064c2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80064c4:	4800      	ldr	r0, [pc, #0]	@ (80064c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80064c6:	4770      	bx	lr
 80064c8:	20000090 	.word	0x20000090

080064cc <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064d0:	4f0f      	ldr	r7, [pc, #60]	@ (8006510 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80064d2:	2182      	movs	r1, #130	@ 0x82
 80064d4:	4638      	mov	r0, r7
 80064d6:	f000 fdcb 	bl	8007070 <USBD_GetEpDesc>
 80064da:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064dc:	2101      	movs	r1, #1
 80064de:	4638      	mov	r0, r7
 80064e0:	f000 fdc6 	bl	8007070 <USBD_GetEpDesc>
 80064e4:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064e6:	2181      	movs	r1, #129	@ 0x81
 80064e8:	4638      	mov	r0, r7
 80064ea:	f000 fdc1 	bl	8007070 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80064ee:	b10d      	cbz	r5, 80064f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064f0:	2210      	movs	r2, #16
 80064f2:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80064f4:	b11c      	cbz	r4, 80064fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064f6:	2240      	movs	r2, #64	@ 0x40
 80064f8:	7122      	strb	r2, [r4, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80064fe:	b118      	cbz	r0, 8006508 <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006500:	2240      	movs	r2, #64	@ 0x40
 8006502:	7102      	strb	r2, [r0, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006508:	2343      	movs	r3, #67	@ 0x43
 800650a:	8033      	strh	r3, [r6, #0]
}
 800650c:	4800      	ldr	r0, [pc, #0]	@ (8006510 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800650e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006510:	20000014 	.word	0x20000014

08006514 <USBD_CDC_GetFSCfgDesc>:
{
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006518:	4f0f      	ldr	r7, [pc, #60]	@ (8006558 <USBD_CDC_GetFSCfgDesc+0x44>)
 800651a:	2182      	movs	r1, #130	@ 0x82
 800651c:	4638      	mov	r0, r7
 800651e:	f000 fda7 	bl	8007070 <USBD_GetEpDesc>
 8006522:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006524:	2101      	movs	r1, #1
 8006526:	4638      	mov	r0, r7
 8006528:	f000 fda2 	bl	8007070 <USBD_GetEpDesc>
 800652c:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800652e:	2181      	movs	r1, #129	@ 0x81
 8006530:	4638      	mov	r0, r7
 8006532:	f000 fd9d 	bl	8007070 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8006536:	b10d      	cbz	r5, 800653c <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006538:	2210      	movs	r2, #16
 800653a:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800653c:	b11c      	cbz	r4, 8006546 <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800653e:	2240      	movs	r2, #64	@ 0x40
 8006540:	7122      	strb	r2, [r4, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8006546:	b118      	cbz	r0, 8006550 <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006548:	2240      	movs	r2, #64	@ 0x40
 800654a:	7102      	strb	r2, [r0, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006550:	2343      	movs	r3, #67	@ 0x43
 8006552:	8033      	strh	r3, [r6, #0]
}
 8006554:	4800      	ldr	r0, [pc, #0]	@ (8006558 <USBD_CDC_GetFSCfgDesc+0x44>)
 8006556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006558:	20000014 	.word	0x20000014

0800655c <USBD_CDC_GetHSCfgDesc>:
{
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006560:	4f0f      	ldr	r7, [pc, #60]	@ (80065a0 <USBD_CDC_GetHSCfgDesc+0x44>)
 8006562:	2182      	movs	r1, #130	@ 0x82
 8006564:	4638      	mov	r0, r7
 8006566:	f000 fd83 	bl	8007070 <USBD_GetEpDesc>
 800656a:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800656c:	2101      	movs	r1, #1
 800656e:	4638      	mov	r0, r7
 8006570:	f000 fd7e 	bl	8007070 <USBD_GetEpDesc>
 8006574:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006576:	2181      	movs	r1, #129	@ 0x81
 8006578:	4638      	mov	r0, r7
 800657a:	f000 fd79 	bl	8007070 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800657e:	b10d      	cbz	r5, 8006584 <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006580:	2210      	movs	r2, #16
 8006582:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8006584:	b11c      	cbz	r4, 800658e <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006586:	2200      	movs	r2, #0
 8006588:	7122      	strb	r2, [r4, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800658e:	b118      	cbz	r0, 8006598 <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006590:	2200      	movs	r2, #0
 8006592:	7102      	strb	r2, [r0, #4]
 8006594:	2202      	movs	r2, #2
 8006596:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006598:	2343      	movs	r3, #67	@ 0x43
 800659a:	8033      	strh	r3, [r6, #0]
}
 800659c:	4800      	ldr	r0, [pc, #0]	@ (80065a0 <USBD_CDC_GetHSCfgDesc+0x44>)
 800659e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065a0:	20000014 	.word	0x20000014

080065a4 <USBD_CDC_DataOut>:
{
 80065a4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065a6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80065aa:	33b0      	adds	r3, #176	@ 0xb0
 80065ac:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065b0:	b195      	cbz	r5, 80065d8 <USBD_CDC_DataOut+0x34>
 80065b2:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80065b4:	f000 fb1a 	bl	8006bec <USBD_LL_GetRxDataSize>
 80065b8:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065bc:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80065c0:	33b0      	adds	r3, #176	@ 0xb0
 80065c2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80065c6:	6863      	ldr	r3, [r4, #4]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 80065ce:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 80065d2:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80065d4:	2000      	movs	r0, #0
}
 80065d6:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80065d8:	2003      	movs	r0, #3
 80065da:	e7fc      	b.n	80065d6 <USBD_CDC_DataOut+0x32>

080065dc <USBD_CDC_DataIn>:
{
 80065dc:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80065de:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065e2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80065e6:	33b0      	adds	r3, #176	@ 0xb0
 80065e8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80065ec:	b384      	cbz	r4, 8006650 <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80065ee:	f001 030f 	and.w	r3, r1, #15
 80065f2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80065f6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80065fa:	6992      	ldr	r2, [r2, #24]
 80065fc:	b14a      	cbz	r2, 8006612 <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80065fe:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 8006602:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8006606:	69ed      	ldr	r5, [r5, #28]
 8006608:	fbb2 fcf5 	udiv	ip, r2, r5
 800660c:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006610:	b192      	cbz	r2, 8006638 <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006618:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800661c:	33b0      	adds	r3, #176	@ 0xb0
 800661e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006622:	6843      	ldr	r3, [r0, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	b1ab      	cbz	r3, 8006654 <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006628:	460a      	mov	r2, r1
 800662a:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 800662e:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 8006632:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8006634:	2000      	movs	r0, #0
}
 8006636:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006638:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800663c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006640:	2400      	movs	r4, #0
 8006642:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006644:	4623      	mov	r3, r4
 8006646:	4622      	mov	r2, r4
 8006648:	f000 fb18 	bl	8006c7c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800664c:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800664e:	e7f2      	b.n	8006636 <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 8006650:	2003      	movs	r0, #3
 8006652:	e7f0      	b.n	8006636 <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 8006654:	2000      	movs	r0, #0
 8006656:	e7ee      	b.n	8006636 <USBD_CDC_DataIn+0x5a>

08006658 <USBD_CDC_Setup>:
{
 8006658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800665a:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800665c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006660:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8006664:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 8006668:	2200      	movs	r2, #0
 800666a:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 800666e:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 8006672:	2f00      	cmp	r7, #0
 8006674:	d078      	beq.n	8006768 <USBD_CDC_Setup+0x110>
 8006676:	4604      	mov	r4, r0
 8006678:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800667a:	7809      	ldrb	r1, [r1, #0]
 800667c:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 8006680:	d034      	beq.n	80066ec <USBD_CDC_Setup+0x94>
 8006682:	2e20      	cmp	r6, #32
 8006684:	d169      	bne.n	800675a <USBD_CDC_Setup+0x102>
      if (req->wLength != 0U)
 8006686:	88ea      	ldrh	r2, [r5, #6]
 8006688:	b32a      	cbz	r2, 80066d6 <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 800668a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800668e:	d10e      	bne.n	80066ae <USBD_CDC_Setup+0x56>
          hcdc->CmdOpCode = req->bRequest;
 8006690:	786b      	ldrb	r3, [r5, #1]
 8006692:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006696:	88ea      	ldrh	r2, [r5, #6]
 8006698:	2a3f      	cmp	r2, #63	@ 0x3f
 800669a:	d81a      	bhi.n	80066d2 <USBD_CDC_Setup+0x7a>
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80066a2:	4639      	mov	r1, r7
 80066a4:	4620      	mov	r0, r4
 80066a6:	f001 f94c 	bl	8007942 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 80066aa:	2600      	movs	r6, #0
 80066ac:	e059      	b.n	8006762 <USBD_CDC_Setup+0x10a>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066ae:	33b0      	adds	r3, #176	@ 0xb0
 80066b0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4639      	mov	r1, r7
 80066ba:	7868      	ldrb	r0, [r5, #1]
 80066bc:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80066be:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80066c0:	2a07      	cmp	r2, #7
 80066c2:	bf28      	it	cs
 80066c4:	2207      	movcs	r2, #7
 80066c6:	4639      	mov	r1, r7
 80066c8:	4620      	mov	r0, r4
 80066ca:	f001 f925 	bl	8007918 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80066ce:	2600      	movs	r6, #0
 80066d0:	e047      	b.n	8006762 <USBD_CDC_Setup+0x10a>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80066d2:	2240      	movs	r2, #64	@ 0x40
 80066d4:	e7e3      	b.n	800669e <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066d6:	33b0      	adds	r3, #176	@ 0xb0
 80066d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	2200      	movs	r2, #0
 80066e2:	4629      	mov	r1, r5
 80066e4:	7868      	ldrb	r0, [r5, #1]
 80066e6:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 80066e8:	2600      	movs	r6, #0
 80066ea:	e03a      	b.n	8006762 <USBD_CDC_Setup+0x10a>
      switch (req->bRequest)
 80066ec:	786f      	ldrb	r7, [r5, #1]
 80066ee:	2f0b      	cmp	r7, #11
 80066f0:	d82e      	bhi.n	8006750 <USBD_CDC_Setup+0xf8>
 80066f2:	e8df f007 	tbb	[pc, r7]
 80066f6:	3606      	.short	0x3606
 80066f8:	2d2d2d2d 	.word	0x2d2d2d2d
 80066fc:	2d2d2d2d 	.word	0x2d2d2d2d
 8006700:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006702:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006706:	2b03      	cmp	r3, #3
 8006708:	d004      	beq.n	8006714 <USBD_CDC_Setup+0xbc>
            USBD_CtlError(pdev, req);
 800670a:	4629      	mov	r1, r5
 800670c:	f000 fced 	bl	80070ea <USBD_CtlError>
            ret = USBD_FAIL;
 8006710:	2603      	movs	r6, #3
 8006712:	e026      	b.n	8006762 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006714:	2202      	movs	r2, #2
 8006716:	a901      	add	r1, sp, #4
 8006718:	f001 f8fe 	bl	8007918 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800671c:	463e      	mov	r6, r7
 800671e:	e020      	b.n	8006762 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006720:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006724:	2b03      	cmp	r3, #3
 8006726:	d004      	beq.n	8006732 <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 8006728:	4629      	mov	r1, r5
 800672a:	f000 fcde 	bl	80070ea <USBD_CtlError>
            ret = USBD_FAIL;
 800672e:	2603      	movs	r6, #3
 8006730:	e017      	b.n	8006762 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006732:	2201      	movs	r2, #1
 8006734:	f10d 0107 	add.w	r1, sp, #7
 8006738:	f001 f8ee 	bl	8007918 <USBD_CtlSendData>
 800673c:	e011      	b.n	8006762 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800673e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006742:	2b03      	cmp	r3, #3
 8006744:	d00d      	beq.n	8006762 <USBD_CDC_Setup+0x10a>
            USBD_CtlError(pdev, req);
 8006746:	4629      	mov	r1, r5
 8006748:	f000 fccf 	bl	80070ea <USBD_CtlError>
            ret = USBD_FAIL;
 800674c:	2603      	movs	r6, #3
 800674e:	e008      	b.n	8006762 <USBD_CDC_Setup+0x10a>
          USBD_CtlError(pdev, req);
 8006750:	4629      	mov	r1, r5
 8006752:	f000 fcca 	bl	80070ea <USBD_CtlError>
          ret = USBD_FAIL;
 8006756:	2603      	movs	r6, #3
          break;
 8006758:	e003      	b.n	8006762 <USBD_CDC_Setup+0x10a>
      USBD_CtlError(pdev, req);
 800675a:	4629      	mov	r1, r5
 800675c:	f000 fcc5 	bl	80070ea <USBD_CtlError>
      ret = USBD_FAIL;
 8006760:	2603      	movs	r6, #3
}
 8006762:	4630      	mov	r0, r6
 8006764:	b003      	add	sp, #12
 8006766:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8006768:	2603      	movs	r6, #3
 800676a:	e7fa      	b.n	8006762 <USBD_CDC_Setup+0x10a>

0800676c <USBD_CDC_DeInit>:
{
 800676c:	b538      	push	{r3, r4, r5, lr}
 800676e:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006770:	2181      	movs	r1, #129	@ 0x81
 8006772:	f000 fa63 	bl	8006c3c <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006776:	2500      	movs	r5, #0
 8006778:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800677a:	2101      	movs	r1, #1
 800677c:	4620      	mov	r0, r4
 800677e:	f000 fa5d 	bl	8006c3c <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006782:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006786:	2182      	movs	r1, #130	@ 0x82
 8006788:	4620      	mov	r0, r4
 800678a:	f000 fa57 	bl	8006c3c <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800678e:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006792:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006796:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800679a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800679e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067a2:	b19a      	cbz	r2, 80067cc <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80067a4:	33b0      	adds	r3, #176	@ 0xb0
 80067a6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80067b0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80067b4:	33b0      	adds	r3, #176	@ 0xb0
 80067b6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80067ba:	f000 fa21 	bl	8006c00 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80067be:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80067c2:	33b0      	adds	r3, #176	@ 0xb0
 80067c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 80067c8:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 80067cc:	2000      	movs	r0, #0
 80067ce:	bd38      	pop	{r3, r4, r5, pc}

080067d0 <USBD_CDC_Init>:
{
 80067d0:	b570      	push	{r4, r5, r6, lr}
 80067d2:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80067d4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80067d8:	f000 fa0e 	bl	8006bf8 <USBD_static_malloc>
  if (hcdc == NULL)
 80067dc:	2800      	cmp	r0, #0
 80067de:	d049      	beq.n	8006874 <USBD_CDC_Init+0xa4>
 80067e0:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80067e2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80067e6:	2100      	movs	r1, #0
 80067e8:	f001 f938 	bl	8007a5c <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80067ec:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80067f0:	33b0      	adds	r3, #176	@ 0xb0
 80067f2:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80067f6:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067fa:	7c23      	ldrb	r3, [r4, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d141      	bne.n	8006884 <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006800:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006804:	2202      	movs	r2, #2
 8006806:	2181      	movs	r1, #129	@ 0x81
 8006808:	4620      	mov	r0, r4
 800680a:	f000 fa0c 	bl	8006c26 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800680e:	2601      	movs	r6, #1
 8006810:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006812:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006816:	2202      	movs	r2, #2
 8006818:	4631      	mov	r1, r6
 800681a:	4620      	mov	r0, r4
 800681c:	f000 fa03 	bl	8006c26 <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006820:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006824:	2310      	movs	r3, #16
 8006826:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800682a:	2308      	movs	r3, #8
 800682c:	2203      	movs	r2, #3
 800682e:	2182      	movs	r1, #130	@ 0x82
 8006830:	4620      	mov	r0, r4
 8006832:	f000 f9f8 	bl	8006c26 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006836:	2301      	movs	r3, #1
 8006838:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
  hcdc->RxBuffer = NULL;
 800683c:	2600      	movs	r6, #0
 800683e:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006842:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8006846:	33b0      	adds	r3, #176	@ 0xb0
 8006848:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4798      	blx	r3
  hcdc->TxState = 0U;
 8006852:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006856:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 800685a:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 800685e:	b362      	cbz	r2, 80068ba <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006860:	7c25      	ldrb	r5, [r4, #16]
 8006862:	bb1d      	cbnz	r5, 80068ac <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006864:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006868:	2101      	movs	r1, #1
 800686a:	4620      	mov	r0, r4
 800686c:	f000 fa0e 	bl	8006c8c <USBD_LL_PrepareReceive>
}
 8006870:	4628      	mov	r0, r5
 8006872:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006874:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8006878:	33b0      	adds	r3, #176	@ 0xb0
 800687a:	2200      	movs	r2, #0
 800687c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006880:	2502      	movs	r5, #2
 8006882:	e7f5      	b.n	8006870 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006884:	2340      	movs	r3, #64	@ 0x40
 8006886:	2202      	movs	r2, #2
 8006888:	2181      	movs	r1, #129	@ 0x81
 800688a:	4620      	mov	r0, r4
 800688c:	f000 f9cb 	bl	8006c26 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006890:	2601      	movs	r6, #1
 8006892:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006894:	2340      	movs	r3, #64	@ 0x40
 8006896:	2202      	movs	r2, #2
 8006898:	4631      	mov	r1, r6
 800689a:	4620      	mov	r0, r4
 800689c:	f000 f9c3 	bl	8006c26 <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80068a0:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80068a4:	2310      	movs	r3, #16
 80068a6:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 80068aa:	e7be      	b.n	800682a <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068ac:	2340      	movs	r3, #64	@ 0x40
 80068ae:	2101      	movs	r1, #1
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 f9eb 	bl	8006c8c <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80068b6:	2500      	movs	r5, #0
 80068b8:	e7da      	b.n	8006870 <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 80068ba:	2502      	movs	r5, #2
 80068bc:	e7d8      	b.n	8006870 <USBD_CDC_Init+0xa0>

080068be <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 80068be:	b139      	cbz	r1, 80068d0 <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 80068c0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80068c4:	33b0      	adds	r3, #176	@ 0xb0
 80068c6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80068ca:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 80068cc:	2000      	movs	r0, #0
 80068ce:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80068d0:	2003      	movs	r0, #3
}
 80068d2:	4770      	bx	lr

080068d4 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068d4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80068d8:	33b0      	adds	r3, #176	@ 0xb0
 80068da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80068de:	b12b      	cbz	r3, 80068ec <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 80068e0:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80068e4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80068e8:	2000      	movs	r0, #0
 80068ea:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80068ec:	2003      	movs	r0, #3
}
 80068ee:	4770      	bx	lr

080068f0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068f0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80068f4:	33b0      	adds	r3, #176	@ 0xb0
 80068f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 80068fa:	b11b      	cbz	r3, 8006904 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 80068fc:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006900:	2000      	movs	r0, #0
 8006902:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006904:	2003      	movs	r0, #3
}
 8006906:	4770      	bx	lr

08006908 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006908:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800690a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800690e:	33b0      	adds	r3, #176	@ 0xb0
 8006910:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006914:	b18a      	cbz	r2, 800693a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8006916:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 800691a:	b10b      	cbz	r3, 8006920 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800691c:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800691e:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8006920:	2301      	movs	r3, #1
 8006922:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006926:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 800692a:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800692c:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8006930:	2181      	movs	r1, #129	@ 0x81
 8006932:	f000 f9a3 	bl	8006c7c <USBD_LL_Transmit>
    ret = USBD_OK;
 8006936:	2000      	movs	r0, #0
 8006938:	e7f1      	b.n	800691e <USBD_CDC_TransmitPacket+0x16>
    return (uint8_t)USBD_FAIL;
 800693a:	2003      	movs	r0, #3
 800693c:	e7ef      	b.n	800691e <USBD_CDC_TransmitPacket+0x16>

0800693e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800693e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006940:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006944:	33b0      	adds	r3, #176	@ 0xb0
 8006946:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800694a:	b192      	cbz	r2, 8006972 <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800694c:	7c04      	ldrb	r4, [r0, #16]
 800694e:	b944      	cbnz	r4, 8006962 <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006950:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006954:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8006958:	2101      	movs	r1, #1
 800695a:	f000 f997 	bl	8006c8c <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 800695e:	4620      	mov	r0, r4
 8006960:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006962:	2340      	movs	r3, #64	@ 0x40
 8006964:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8006968:	2101      	movs	r1, #1
 800696a:	f000 f98f 	bl	8006c8c <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800696e:	2400      	movs	r4, #0
 8006970:	e7f5      	b.n	800695e <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 8006972:	2403      	movs	r4, #3
 8006974:	e7f3      	b.n	800695e <USBD_CDC_ReceivePacket+0x20>

08006976 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006976:	2000      	movs	r0, #0
 8006978:	4770      	bx	lr

0800697a <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800697a:	2000      	movs	r0, #0
 800697c:	4770      	bx	lr

0800697e <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800697e:	2000      	movs	r0, #0
 8006980:	4770      	bx	lr
	...

08006984 <CDC_Receive_FS>:
{
 8006984:	b510      	push	{r4, lr}
 8006986:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006988:	4c04      	ldr	r4, [pc, #16]	@ (800699c <CDC_Receive_FS+0x18>)
 800698a:	4620      	mov	r0, r4
 800698c:	f7ff ffb0 	bl	80068f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006990:	4620      	mov	r0, r4
 8006992:	f7ff ffd4 	bl	800693e <USBD_CDC_ReceivePacket>
}
 8006996:	2000      	movs	r0, #0
 8006998:	bd10      	pop	{r4, pc}
 800699a:	bf00      	nop
 800699c:	20004f40 	.word	0x20004f40

080069a0 <CDC_Init_FS>:
{
 80069a0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80069a2:	4c06      	ldr	r4, [pc, #24]	@ (80069bc <CDC_Init_FS+0x1c>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	4906      	ldr	r1, [pc, #24]	@ (80069c0 <CDC_Init_FS+0x20>)
 80069a8:	4620      	mov	r0, r4
 80069aa:	f7ff ff93 	bl	80068d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80069ae:	4905      	ldr	r1, [pc, #20]	@ (80069c4 <CDC_Init_FS+0x24>)
 80069b0:	4620      	mov	r0, r4
 80069b2:	f7ff ff9d 	bl	80068f0 <USBD_CDC_SetRxBuffer>
}
 80069b6:	2000      	movs	r0, #0
 80069b8:	bd10      	pop	{r4, pc}
 80069ba:	bf00      	nop
 80069bc:	20004f40 	.word	0x20004f40
 80069c0:	2000521c 	.word	0x2000521c
 80069c4:	2000561c 	.word	0x2000561c

080069c8 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80069c8:	4b09      	ldr	r3, [pc, #36]	@ (80069f0 <CDC_Transmit_FS+0x28>)
 80069ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 80069ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80069d2:	b10b      	cbz	r3, 80069d8 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 80069d4:	2001      	movs	r0, #1
}
 80069d6:	4770      	bx	lr
{
 80069d8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80069da:	4c05      	ldr	r4, [pc, #20]	@ (80069f0 <CDC_Transmit_FS+0x28>)
 80069dc:	460a      	mov	r2, r1
 80069de:	4601      	mov	r1, r0
 80069e0:	4620      	mov	r0, r4
 80069e2:	f7ff ff77 	bl	80068d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80069e6:	4620      	mov	r0, r4
 80069e8:	f7ff ff8e 	bl	8006908 <USBD_CDC_TransmitPacket>
}
 80069ec:	bd10      	pop	{r4, pc}
 80069ee:	bf00      	nop
 80069f0:	20004f40 	.word	0x20004f40

080069f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80069f4:	b530      	push	{r4, r5, lr}
 80069f6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069f8:	2300      	movs	r3, #0
 80069fa:	9303      	str	r3, [sp, #12]
 80069fc:	9304      	str	r3, [sp, #16]
 80069fe:	9305      	str	r3, [sp, #20]
 8006a00:	9306      	str	r3, [sp, #24]
 8006a02:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006a04:	6803      	ldr	r3, [r0, #0]
 8006a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a0a:	d001      	beq.n	8006a10 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006a0c:	b009      	add	sp, #36	@ 0x24
 8006a0e:	bd30      	pop	{r4, r5, pc}
 8006a10:	aa03      	add	r2, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a12:	2500      	movs	r5, #0
 8006a14:	9501      	str	r5, [sp, #4]
 8006a16:	4c17      	ldr	r4, [pc, #92]	@ (8006a74 <HAL_PCD_MspInit+0x80>)
 8006a18:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006a1a:	f043 0301 	orr.w	r3, r3, #1
 8006a1e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006a2a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006a2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a30:	2302      	movs	r3, #2
 8006a32:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a34:	2303      	movs	r3, #3
 8006a36:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a38:	230a      	movs	r3, #10
 8006a3a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	480e      	ldr	r0, [pc, #56]	@ (8006a78 <HAL_PCD_MspInit+0x84>)
 8006a40:	f7fb fbbc 	bl	80021bc <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a4c:	9502      	str	r5, [sp, #8]
 8006a4e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006a50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a54:	6463      	str	r3, [r4, #68]	@ 0x44
 8006a56:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a5c:	9302      	str	r3, [sp, #8]
 8006a5e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8006a60:	462a      	mov	r2, r5
 8006a62:	2105      	movs	r1, #5
 8006a64:	2043      	movs	r0, #67	@ 0x43
 8006a66:	f7fb f9db 	bl	8001e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006a6a:	2043      	movs	r0, #67	@ 0x43
 8006a6c:	f7fb f9e8 	bl	8001e40 <HAL_NVIC_EnableIRQ>
}
 8006a70:	e7cc      	b.n	8006a0c <HAL_PCD_MspInit+0x18>
 8006a72:	bf00      	nop
 8006a74:	40023800 	.word	0x40023800
 8006a78:	40020000 	.word	0x40020000

08006a7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a7c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a7e:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8006a82:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006a86:	f000 f956 	bl	8006d36 <USBD_LL_SetupStage>
}
 8006a8a:	bd08      	pop	{r3, pc}

08006a8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a8c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a8e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8006a92:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006a96:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8006a9a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006a9e:	f000 fa17 	bl	8006ed0 <USBD_LL_DataOutStage>
}
 8006aa2:	bd08      	pop	{r3, pc}

08006aa4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aa4:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006aa6:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8006aaa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006aae:	6a1a      	ldr	r2, [r3, #32]
 8006ab0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006ab4:	f000 fa6c 	bl	8006f90 <USBD_LL_DataInStage>
}
 8006ab8:	bd08      	pop	{r3, pc}

08006aba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aba:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006abc:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006ac0:	f000 f9b4 	bl	8006e2c <USBD_LL_SOF>
}
 8006ac4:	bd08      	pop	{r3, pc}

08006ac6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ac6:	b510      	push	{r4, lr}
 8006ac8:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006aca:	79c3      	ldrb	r3, [r0, #7]
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d109      	bne.n	8006ae4 <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8006ad6:	f000 f98c 	bl	8006df2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006ada:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8006ade:	f000 f956 	bl	8006d8e <USBD_LL_Reset>
}
 8006ae2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006ae4:	f7fa f9f0 	bl	8000ec8 <Error_Handler>
 8006ae8:	e7f2      	b.n	8006ad0 <HAL_PCD_ResetCallback+0xa>
	...

08006aec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aec:	b510      	push	{r4, lr}
 8006aee:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006af0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006af4:	f000 f980 	bl	8006df8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006af8:	6822      	ldr	r2, [r4, #0]
 8006afa:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8006afe:	f043 0301 	orr.w	r3, r3, #1
 8006b02:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006b06:	7ae3      	ldrb	r3, [r4, #11]
 8006b08:	b123      	cbz	r3, 8006b14 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b0a:	4a03      	ldr	r2, [pc, #12]	@ (8006b18 <HAL_PCD_SuspendCallback+0x2c>)
 8006b0c:	6913      	ldr	r3, [r2, #16]
 8006b0e:	f043 0306 	orr.w	r3, r3, #6
 8006b12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006b14:	bd10      	pop	{r4, pc}
 8006b16:	bf00      	nop
 8006b18:	e000ed00 	.word	0xe000ed00

08006b1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b1e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006b22:	f000 f977 	bl	8006e14 <USBD_LL_Resume>
}
 8006b26:	bd08      	pop	{r3, pc}

08006b28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b28:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b2a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006b2e:	f000 f9a3 	bl	8006e78 <USBD_LL_IsoOUTIncomplete>
}
 8006b32:	bd08      	pop	{r3, pc}

08006b34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b34:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b36:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006b3a:	f000 f987 	bl	8006e4c <USBD_LL_IsoINIncomplete>
}
 8006b3e:	bd08      	pop	{r3, pc}

08006b40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b40:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b42:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006b46:	f000 f9ad 	bl	8006ea4 <USBD_LL_DevConnected>
}
 8006b4a:	bd08      	pop	{r3, pc}

08006b4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b4c:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b4e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006b52:	f000 f9a9 	bl	8006ea8 <USBD_LL_DevDisconnected>
}
 8006b56:	bd08      	pop	{r3, pc}

08006b58 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006b58:	7802      	ldrb	r2, [r0, #0]
 8006b5a:	b10a      	cbz	r2, 8006b60 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	4770      	bx	lr
{
 8006b60:	b510      	push	{r4, lr}
 8006b62:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8006b64:	4815      	ldr	r0, [pc, #84]	@ (8006bbc <USBD_LL_Init+0x64>)
 8006b66:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006b6a:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006b6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006b72:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006b74:	2304      	movs	r3, #4
 8006b76:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006b78:	2202      	movs	r2, #2
 8006b7a:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b80:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006b82:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006b84:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006b86:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006b88:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006b8a:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006b8c:	f7fb fc92 	bl	80024b4 <HAL_PCD_Init>
 8006b90:	b980      	cbnz	r0, 8006bb4 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006b92:	4c0a      	ldr	r4, [pc, #40]	@ (8006bbc <USBD_LL_Init+0x64>)
 8006b94:	2180      	movs	r1, #128	@ 0x80
 8006b96:	4620      	mov	r0, r4
 8006b98:	f7fc fa5b 	bl	8003052 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006b9c:	2240      	movs	r2, #64	@ 0x40
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f7fc fa30 	bl	8003006 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006ba6:	2280      	movs	r2, #128	@ 0x80
 8006ba8:	2101      	movs	r1, #1
 8006baa:	4620      	mov	r0, r4
 8006bac:	f7fc fa2b 	bl	8003006 <HAL_PCDEx_SetTxFiFo>
}
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006bb4:	f7fa f988 	bl	8000ec8 <Error_Handler>
 8006bb8:	e7eb      	b.n	8006b92 <USBD_LL_Init+0x3a>
 8006bba:	bf00      	nop
 8006bbc:	20005c3c 	.word	0x20005c3c

08006bc0 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006bc0:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8006bc4:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8006bc8:	d108      	bne.n	8006bdc <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006bca:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006bce:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006bd2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006bd6:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8006bda:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006bdc:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006be0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006be4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006be8:	7d98      	ldrb	r0, [r3, #22]
 8006bea:	4770      	bx	lr

08006bec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bec:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006bee:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006bf2:	f7fb fe63 	bl	80028bc <HAL_PCD_EP_GetRxCount>
}
 8006bf6:	bd08      	pop	{r3, pc}

08006bf8 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8006bf8:	4800      	ldr	r0, [pc, #0]	@ (8006bfc <USBD_static_malloc+0x4>)
 8006bfa:	4770      	bx	lr
 8006bfc:	20005a1c 	.word	0x20005a1c

08006c00 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8006c00:	4770      	bx	lr

08006c02 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006c02:	2803      	cmp	r0, #3
 8006c04:	d805      	bhi.n	8006c12 <USBD_Get_USB_Status+0x10>
 8006c06:	e8df f000 	tbb	[pc, r0]
 8006c0a:	0405      	.short	0x0405
 8006c0c:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c0e:	2001      	movs	r0, #1
    break;
 8006c10:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8006c12:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8006c14:	4770      	bx	lr

08006c16 <USBD_LL_Start>:
{
 8006c16:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006c18:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006c1c:	f7fb fccb 	bl	80025b6 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c20:	f7ff ffef 	bl	8006c02 <USBD_Get_USB_Status>
}
 8006c24:	bd08      	pop	{r3, pc}

08006c26 <USBD_LL_OpenEP>:
{
 8006c26:	b508      	push	{r3, lr}
 8006c28:	4694      	mov	ip, r2
 8006c2a:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c2c:	4663      	mov	r3, ip
 8006c2e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006c32:	f7fb fda0 	bl	8002776 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c36:	f7ff ffe4 	bl	8006c02 <USBD_Get_USB_Status>
}
 8006c3a:	bd08      	pop	{r3, pc}

08006c3c <USBD_LL_CloseEP>:
{
 8006c3c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c3e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006c42:	f7fb fdde 	bl	8002802 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c46:	f7ff ffdc 	bl	8006c02 <USBD_Get_USB_Status>
}
 8006c4a:	bd08      	pop	{r3, pc}

08006c4c <USBD_LL_StallEP>:
{
 8006c4c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c4e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006c52:	f7fb fe61 	bl	8002918 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c56:	f7ff ffd4 	bl	8006c02 <USBD_Get_USB_Status>
}
 8006c5a:	bd08      	pop	{r3, pc}

08006c5c <USBD_LL_ClearStallEP>:
{
 8006c5c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006c5e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006c62:	f7fb fe9c 	bl	800299e <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c66:	f7ff ffcc 	bl	8006c02 <USBD_Get_USB_Status>
}
 8006c6a:	bd08      	pop	{r3, pc}

08006c6c <USBD_LL_SetUSBAddress>:
{
 8006c6c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006c6e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006c72:	f7fb fd6d 	bl	8002750 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c76:	f7ff ffc4 	bl	8006c02 <USBD_Get_USB_Status>
}
 8006c7a:	bd08      	pop	{r3, pc}

08006c7c <USBD_LL_Transmit>:
{
 8006c7c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c7e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006c82:	f7fb fe24 	bl	80028ce <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c86:	f7ff ffbc 	bl	8006c02 <USBD_Get_USB_Status>
}
 8006c8a:	bd08      	pop	{r3, pc}

08006c8c <USBD_LL_PrepareReceive>:
{
 8006c8c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c8e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006c92:	f7fb fdee 	bl	8002872 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c96:	f7ff ffb4 	bl	8006c02 <USBD_Get_USB_Status>
}
 8006c9a:	bd08      	pop	{r3, pc}

08006c9c <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c9c:	b198      	cbz	r0, 8006cc6 <USBD_Init+0x2a>
{
 8006c9e:	b508      	push	{r3, lr}
 8006ca0:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006ca8:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006cac:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cb0:	b109      	cbz	r1, 8006cb6 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8006cb2:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006cbc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff ff4a 	bl	8006b58 <USBD_LL_Init>

  return ret;
}
 8006cc4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006cc6:	2003      	movs	r0, #3
}
 8006cc8:	4770      	bx	lr

08006cca <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cca:	b510      	push	{r4, lr}
 8006ccc:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8006cd4:	b1b9      	cbz	r1, 8006d06 <USBD_RegisterClass+0x3c>
 8006cd6:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006cd8:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006cdc:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8006ce0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8006ce2:	b143      	cbz	r3, 8006cf6 <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ce4:	32ae      	adds	r2, #174	@ 0xae
 8006ce6:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8006cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cec:	f10d 0006 	add.w	r0, sp, #6
 8006cf0:	4798      	blx	r3
 8006cf2:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006cf6:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8006d00:	2000      	movs	r0, #0
}
 8006d02:	b002      	add	sp, #8
 8006d04:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8006d06:	2003      	movs	r0, #3
 8006d08:	e7fb      	b.n	8006d02 <USBD_RegisterClass+0x38>

08006d0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d0a:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d0c:	f7ff ff83 	bl	8006c16 <USBD_LL_Start>
}
 8006d10:	bd08      	pop	{r3, pc}

08006d12 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d12:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d14:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006d18:	b113      	cbz	r3, 8006d20 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8006d1e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8006d20:	2000      	movs	r0, #0
 8006d22:	e7fc      	b.n	8006d1e <USBD_SetClassConfig+0xc>

08006d24 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d24:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d26:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	4798      	blx	r3
 8006d2e:	b900      	cbnz	r0, 8006d32 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8006d30:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 8006d32:	2003      	movs	r0, #3
 8006d34:	e7fc      	b.n	8006d30 <USBD_ClrClassConfig+0xc>

08006d36 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d36:	b538      	push	{r3, r4, r5, lr}
 8006d38:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d3a:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 f9bf 	bl	80070c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d4a:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8006d4e:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d52:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8006d56:	f001 031f 	and.w	r3, r1, #31
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d007      	beq.n	8006d6e <USBD_LL_SetupStage+0x38>
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d00a      	beq.n	8006d78 <USBD_LL_SetupStage+0x42>
 8006d62:	b973      	cbnz	r3, 8006d82 <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d64:	4629      	mov	r1, r5
 8006d66:	4620      	mov	r0, r4
 8006d68:	f000 fb80 	bl	800746c <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8006d6c:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d6e:	4629      	mov	r1, r5
 8006d70:	4620      	mov	r0, r4
 8006d72:	f000 fbb6 	bl	80074e2 <USBD_StdItfReq>
      break;
 8006d76:	e7f9      	b.n	8006d6c <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d78:	4629      	mov	r1, r5
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f000 fbf3 	bl	8007566 <USBD_StdEPReq>
      break;
 8006d80:	e7f4      	b.n	8006d6c <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d82:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8006d86:	4620      	mov	r0, r4
 8006d88:	f7ff ff60 	bl	8006c4c <USBD_LL_StallEP>
      break;
 8006d8c:	e7ee      	b.n	8006d6c <USBD_LL_SetupStage+0x36>

08006d8e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d90:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006d9e:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8006da0:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006da4:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006da8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006dac:	b1db      	cbz	r3, 8006de6 <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	b1db      	cbz	r3, 8006dea <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006db2:	2100      	movs	r1, #0
 8006db4:	4798      	blx	r3
 8006db6:	4607      	mov	r7, r0
 8006db8:	b9c8      	cbnz	r0, 8006dee <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dba:	2340      	movs	r3, #64	@ 0x40
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f7ff ff30 	bl	8006c26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006dc6:	2601      	movs	r6, #1
 8006dc8:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dcc:	2540      	movs	r5, #64	@ 0x40
 8006dce:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dd2:	462b      	mov	r3, r5
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2180      	movs	r1, #128	@ 0x80
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f7ff ff24 	bl	8006c26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dde:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006de0:	6225      	str	r5, [r4, #32]

  return ret;
}
 8006de2:	4638      	mov	r0, r7
 8006de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8006de6:	2700      	movs	r7, #0
 8006de8:	e7e7      	b.n	8006dba <USBD_LL_Reset+0x2c>
 8006dea:	2700      	movs	r7, #0
 8006dec:	e7e5      	b.n	8006dba <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8006dee:	2703      	movs	r7, #3
 8006df0:	e7e3      	b.n	8006dba <USBD_LL_Reset+0x2c>

08006df2 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006df2:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8006df4:	2000      	movs	r0, #0
 8006df6:	4770      	bx	lr

08006df8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006df8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d004      	beq.n	8006e0a <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006e00:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e0a:	2304      	movs	r3, #4
 8006e0c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8006e10:	2000      	movs	r0, #0
 8006e12:	4770      	bx	lr

08006e14 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e14:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d001      	beq.n	8006e20 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8006e20:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8006e2a:	e7f7      	b.n	8006e1c <USBD_LL_Resume+0x8>

08006e2c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e2c:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d001      	beq.n	8006e3a <USBD_LL_SOF+0xe>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8006e36:	2000      	movs	r0, #0
 8006e38:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 8006e3a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0f9      	beq.n	8006e36 <USBD_LL_SOF+0xa>
      if (pdev->pClass[0]->SOF != NULL)
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0f6      	beq.n	8006e36 <USBD_LL_SOF+0xa>
        (void)pdev->pClass[0]->SOF(pdev);
 8006e48:	4798      	blx	r3
 8006e4a:	e7f4      	b.n	8006e36 <USBD_LL_SOF+0xa>

08006e4c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e4c:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8006e4e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006e52:	33ae      	adds	r3, #174	@ 0xae
 8006e54:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006e58:	b153      	cbz	r3, 8006e70 <USBD_LL_IsoINIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e5a:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8006e5e:	2a03      	cmp	r2, #3
 8006e60:	d001      	beq.n	8006e66 <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8006e62:	2000      	movs	r0, #0
}
 8006e64:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	b123      	cbz	r3, 8006e74 <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006e6a:	4798      	blx	r3
  return USBD_OK;
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	e7f9      	b.n	8006e64 <USBD_LL_IsoINIncomplete+0x18>
    return USBD_FAIL;
 8006e70:	2003      	movs	r0, #3
 8006e72:	e7f7      	b.n	8006e64 <USBD_LL_IsoINIncomplete+0x18>
  return USBD_OK;
 8006e74:	2000      	movs	r0, #0
 8006e76:	e7f5      	b.n	8006e64 <USBD_LL_IsoINIncomplete+0x18>

08006e78 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e78:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8006e7a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006e7e:	33ae      	adds	r3, #174	@ 0xae
 8006e80:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006e84:	b153      	cbz	r3, 8006e9c <USBD_LL_IsoOUTIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e86:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8006e8a:	2a03      	cmp	r2, #3
 8006e8c:	d001      	beq.n	8006e92 <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8006e8e:	2000      	movs	r0, #0
}
 8006e90:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e94:	b123      	cbz	r3, 8006ea0 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e96:	4798      	blx	r3
  return USBD_OK;
 8006e98:	2000      	movs	r0, #0
 8006e9a:	e7f9      	b.n	8006e90 <USBD_LL_IsoOUTIncomplete+0x18>
    return USBD_FAIL;
 8006e9c:	2003      	movs	r0, #3
 8006e9e:	e7f7      	b.n	8006e90 <USBD_LL_IsoOUTIncomplete+0x18>
  return USBD_OK;
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	e7f5      	b.n	8006e90 <USBD_LL_IsoOUTIncomplete+0x18>

08006ea4 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	4770      	bx	lr

08006ea8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ea8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006eb0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006eb4:	b123      	cbz	r3, 8006ec0 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	7901      	ldrb	r1, [r0, #4]
 8006eba:	4798      	blx	r3
 8006ebc:	b910      	cbnz	r0, 8006ec4 <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8006ebe:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	e7fc      	b.n	8006ebe <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 8006ec4:	2003      	movs	r0, #3
 8006ec6:	e7fa      	b.n	8006ebe <USBD_LL_DevDisconnected+0x16>

08006ec8 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8006ec8:	2000      	movs	r0, #0
 8006eca:	4770      	bx	lr

08006ecc <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8006ecc:	2000      	movs	r0, #0
 8006ece:	4770      	bx	lr

08006ed0 <USBD_LL_DataOutStage>:
{
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4604      	mov	r4, r0
  if (epnum == 0U)
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	2900      	cmp	r1, #0
 8006ed8:	d141      	bne.n	8006f5e <USBD_LL_DataOutStage+0x8e>
 8006eda:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006edc:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8006ee0:	2a03      	cmp	r2, #3
 8006ee2:	d001      	beq.n	8006ee8 <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 8006ee4:	4608      	mov	r0, r1
}
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8006ee8:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 8006eec:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 8006ef0:	4291      	cmp	r1, r2
 8006ef2:	d809      	bhi.n	8006f08 <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 8006ef4:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 8006ef8:	f003 031f 	and.w	r3, r3, #31
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d00e      	beq.n	8006f1e <USBD_LL_DataOutStage+0x4e>
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d01a      	beq.n	8006f3a <USBD_LL_DataOutStage+0x6a>
 8006f04:	4628      	mov	r0, r5
 8006f06:	e00f      	b.n	8006f28 <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 8006f08:	1a89      	subs	r1, r1, r2
 8006f0a:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f0e:	428a      	cmp	r2, r1
 8006f10:	bf28      	it	cs
 8006f12:	460a      	movcs	r2, r1
 8006f14:	4619      	mov	r1, r3
 8006f16:	f000 fd23 	bl	8007960 <USBD_CtlContinueRx>
  return USBD_OK;
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	e7e3      	b.n	8006ee6 <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006f1e:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8006f22:	f7ff ffd1 	bl	8006ec8 <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006f26:	b918      	cbnz	r0, 8006f30 <USBD_LL_DataOutStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f28:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d009      	beq.n	8006f44 <USBD_LL_DataOutStage+0x74>
        (void)USBD_CtlSendStatus(pdev);
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 fd1d 	bl	8007970 <USBD_CtlSendStatus>
  return USBD_OK;
 8006f36:	4628      	mov	r0, r5
 8006f38:	e7d5      	b.n	8006ee6 <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006f3a:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8006f3e:	f7ff ffc5 	bl	8006ecc <USBD_CoreFindEP>
            break;
 8006f42:	e7f0      	b.n	8006f26 <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006f44:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8006f48:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006f4c:	691a      	ldr	r2, [r3, #16]
 8006f4e:	2a00      	cmp	r2, #0
 8006f50:	d0ee      	beq.n	8006f30 <USBD_LL_DataOutStage+0x60>
              pdev->classId = idx;
 8006f52:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	4620      	mov	r0, r4
 8006f5a:	4798      	blx	r3
 8006f5c:	e7e8      	b.n	8006f30 <USBD_LL_DataOutStage+0x60>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f5e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006f62:	f7ff ffb3 	bl	8006ecc <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f66:	b988      	cbnz	r0, 8006f8c <USBD_LL_DataOutStage+0xbc>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f68:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d1ba      	bne.n	8006ee6 <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f70:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8006f74:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006f78:	699a      	ldr	r2, [r3, #24]
 8006f7a:	2a00      	cmp	r2, #0
 8006f7c:	d0b3      	beq.n	8006ee6 <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 8006f7e:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	4629      	mov	r1, r5
 8006f86:	4620      	mov	r0, r4
 8006f88:	4798      	blx	r3
      if (ret != USBD_OK)
 8006f8a:	e7ac      	b.n	8006ee6 <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	e7aa      	b.n	8006ee6 <USBD_LL_DataOutStage+0x16>

08006f90 <USBD_LL_DataInStage>:
{
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4604      	mov	r4, r0
  if (epnum == 0U)
 8006f94:	460d      	mov	r5, r1
 8006f96:	2900      	cmp	r1, #0
 8006f98:	d14a      	bne.n	8007030 <USBD_LL_DataInStage+0xa0>
 8006f9a:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f9c:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8006fa0:	2a02      	cmp	r2, #2
 8006fa2:	d007      	beq.n	8006fb4 <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 8006fa4:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 8006fa8:	b118      	cbz	r0, 8006fb2 <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8006fb0:	4628      	mov	r0, r5
}
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8006fb4:	69c2      	ldr	r2, [r0, #28]
 8006fb6:	6a01      	ldr	r1, [r0, #32]
 8006fb8:	428a      	cmp	r2, r1
 8006fba:	d80d      	bhi.n	8006fd8 <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 8006fbc:	428a      	cmp	r2, r1
 8006fbe:	d017      	beq.n	8006ff0 <USBD_LL_DataInStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc0:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d027      	beq.n	8007018 <USBD_LL_DataInStage+0x88>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fc8:	2180      	movs	r1, #128	@ 0x80
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f7ff fe3e 	bl	8006c4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 fcd8 	bl	8007986 <USBD_CtlReceiveStatus>
 8006fd6:	e7e5      	b.n	8006fa4 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8006fd8:	1a52      	subs	r2, r2, r1
 8006fda:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006fdc:	4619      	mov	r1, r3
 8006fde:	f000 fca8 	bl	8007932 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f7ff fe4f 	bl	8006c8c <USBD_LL_PrepareReceive>
 8006fee:	e7d9      	b.n	8006fa4 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8006ff0:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ff2:	4299      	cmp	r1, r3
 8006ff4:	d8e4      	bhi.n	8006fc0 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 8006ff6:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d2e0      	bcs.n	8006fc0 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ffe:	2200      	movs	r2, #0
 8007000:	4611      	mov	r1, r2
 8007002:	f000 fc96 	bl	8007932 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007006:	2100      	movs	r1, #0
 8007008:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800700c:	460b      	mov	r3, r1
 800700e:	460a      	mov	r2, r1
 8007010:	4620      	mov	r0, r4
 8007012:	f7ff fe3b 	bl	8006c8c <USBD_LL_PrepareReceive>
 8007016:	e7c5      	b.n	8006fa4 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007018:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	2a00      	cmp	r2, #0
 8007020:	d0d2      	beq.n	8006fc8 <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 8007022:	2200      	movs	r2, #0
 8007024:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	4620      	mov	r0, r4
 800702c:	4798      	blx	r3
 800702e:	e7cb      	b.n	8006fc8 <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007030:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8007034:	f7ff ff4a 	bl	8006ecc <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007038:	b988      	cbnz	r0, 800705e <USBD_LL_DataInStage+0xce>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800703a:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800703e:	2b03      	cmp	r3, #3
 8007040:	d1b7      	bne.n	8006fb2 <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 8007042:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8007046:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800704a:	695a      	ldr	r2, [r3, #20]
 800704c:	2a00      	cmp	r2, #0
 800704e:	d0b0      	beq.n	8006fb2 <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 8007050:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	4629      	mov	r1, r5
 8007058:	4620      	mov	r0, r4
 800705a:	4798      	blx	r3
          if (ret != USBD_OK)
 800705c:	e7a9      	b.n	8006fb2 <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 800705e:	2000      	movs	r0, #0
 8007060:	e7a7      	b.n	8006fb2 <USBD_LL_DataInStage+0x22>

08007062 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8007062:	880b      	ldrh	r3, [r1, #0]
 8007064:	7802      	ldrb	r2, [r0, #0]
 8007066:	4413      	add	r3, r2
 8007068:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800706a:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 800706c:	4418      	add	r0, r3
 800706e:	4770      	bx	lr

08007070 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 8007070:	8842      	ldrh	r2, [r0, #2]
 8007072:	7803      	ldrb	r3, [r0, #0]
 8007074:	429a      	cmp	r2, r3
 8007076:	d918      	bls.n	80070aa <USBD_GetEpDesc+0x3a>
{
 8007078:	b530      	push	{r4, r5, lr}
 800707a:	b083      	sub	sp, #12
 800707c:	4604      	mov	r4, r0
 800707e:	460d      	mov	r5, r1
    ptr = desc->bLength;
 8007080:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 8007084:	8863      	ldrh	r3, [r4, #2]
 8007086:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800708a:	429a      	cmp	r2, r3
 800708c:	d20a      	bcs.n	80070a4 <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800708e:	f10d 0106 	add.w	r1, sp, #6
 8007092:	f7ff ffe6 	bl	8007062 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007096:	7843      	ldrb	r3, [r0, #1]
 8007098:	2b05      	cmp	r3, #5
 800709a:	d1f3      	bne.n	8007084 <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800709c:	7883      	ldrb	r3, [r0, #2]
 800709e:	42ab      	cmp	r3, r5
 80070a0:	d1f0      	bne.n	8007084 <USBD_GetEpDesc+0x14>
 80070a2:	e000      	b.n	80070a6 <USBD_GetEpDesc+0x36>
 80070a4:	2000      	movs	r0, #0
}
 80070a6:	b003      	add	sp, #12
 80070a8:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80070aa:	2000      	movs	r0, #0
}
 80070ac:	4770      	bx	lr

080070ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070ae:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80070b0:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80070b2:	e002      	b.n	80070ba <USBD_GetLen+0xc>
  {
    len++;
 80070b4:	3001      	adds	r0, #1
 80070b6:	b2c0      	uxtb	r0, r0
    pbuff++;
 80070b8:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 80070ba:	781a      	ldrb	r2, [r3, #0]
 80070bc:	2a00      	cmp	r2, #0
 80070be:	d1f9      	bne.n	80070b4 <USBD_GetLen+0x6>
  }

  return len;
}
 80070c0:	4770      	bx	lr

080070c2 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80070c2:	780b      	ldrb	r3, [r1, #0]
 80070c4:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80070c6:	784b      	ldrb	r3, [r1, #1]
 80070c8:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 80070ca:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80070cc:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 80070d2:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 80070d4:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 80070d6:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 80070dc:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 80070de:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 80070e0:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 80070e6:	80c3      	strh	r3, [r0, #6]
}
 80070e8:	4770      	bx	lr

080070ea <USBD_CtlError>:
{
 80070ea:	b510      	push	{r4, lr}
 80070ec:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80070ee:	2180      	movs	r1, #128	@ 0x80
 80070f0:	f7ff fdac 	bl	8006c4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80070f4:	2100      	movs	r1, #0
 80070f6:	4620      	mov	r0, r4
 80070f8:	f7ff fda8 	bl	8006c4c <USBD_LL_StallEP>
}
 80070fc:	bd10      	pop	{r4, pc}

080070fe <USBD_GetDescriptor>:
{
 80070fe:	b530      	push	{r4, r5, lr}
 8007100:	b083      	sub	sp, #12
 8007102:	4604      	mov	r4, r0
 8007104:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800710c:	884a      	ldrh	r2, [r1, #2]
 800710e:	0a13      	lsrs	r3, r2, #8
 8007110:	3b01      	subs	r3, #1
 8007112:	2b06      	cmp	r3, #6
 8007114:	f200 80aa 	bhi.w	800726c <USBD_GetDescriptor+0x16e>
 8007118:	e8df f003 	tbb	[pc, r3]
 800711c:	a8321e04 	.word	0xa8321e04
 8007120:	8ca8      	.short	0x8ca8
 8007122:	99          	.byte	0x99
 8007123:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007124:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f10d 0106 	add.w	r1, sp, #6
 800712e:	7c00      	ldrb	r0, [r0, #16]
 8007130:	4798      	blx	r3
  if (req->wLength != 0U)
 8007132:	88ea      	ldrh	r2, [r5, #6]
 8007134:	2a00      	cmp	r2, #0
 8007136:	f000 80a3 	beq.w	8007280 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 800713a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 8099 	beq.w	8007276 <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8007144:	429a      	cmp	r2, r3
 8007146:	bf28      	it	cs
 8007148:	461a      	movcs	r2, r3
 800714a:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800714e:	4601      	mov	r1, r0
 8007150:	4620      	mov	r0, r4
 8007152:	f000 fbe1 	bl	8007918 <USBD_CtlSendData>
 8007156:	e08c      	b.n	8007272 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007158:	7c03      	ldrb	r3, [r0, #16]
 800715a:	b943      	cbnz	r3, 800716e <USBD_GetDescriptor+0x70>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800715c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8007160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007162:	f10d 0006 	add.w	r0, sp, #6
 8007166:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007168:	2302      	movs	r3, #2
 800716a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800716c:	e7e1      	b.n	8007132 <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800716e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8007172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007174:	f10d 0006 	add.w	r0, sp, #6
 8007178:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800717a:	2302      	movs	r3, #2
 800717c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800717e:	e7d8      	b.n	8007132 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8007180:	b2d2      	uxtb	r2, r2
 8007182:	2a05      	cmp	r2, #5
 8007184:	d852      	bhi.n	800722c <USBD_GetDescriptor+0x12e>
 8007186:	e8df f002 	tbb	[pc, r2]
 800718a:	1003      	.short	0x1003
 800718c:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007190:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	b123      	cbz	r3, 80071a2 <USBD_GetDescriptor+0xa4>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007198:	f10d 0106 	add.w	r1, sp, #6
 800719c:	7c00      	ldrb	r0, [r0, #16]
 800719e:	4798      	blx	r3
  if (err != 0U)
 80071a0:	e7c7      	b.n	8007132 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80071a2:	4629      	mov	r1, r5
 80071a4:	f7ff ffa1 	bl	80070ea <USBD_CtlError>
  if (err != 0U)
 80071a8:	e063      	b.n	8007272 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	b123      	cbz	r3, 80071bc <USBD_GetDescriptor+0xbe>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071b2:	f10d 0106 	add.w	r1, sp, #6
 80071b6:	7c00      	ldrb	r0, [r0, #16]
 80071b8:	4798      	blx	r3
  if (err != 0U)
 80071ba:	e7ba      	b.n	8007132 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80071bc:	4629      	mov	r1, r5
 80071be:	f7ff ff94 	bl	80070ea <USBD_CtlError>
  if (err != 0U)
 80071c2:	e056      	b.n	8007272 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	b123      	cbz	r3, 80071d6 <USBD_GetDescriptor+0xd8>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071cc:	f10d 0106 	add.w	r1, sp, #6
 80071d0:	7c00      	ldrb	r0, [r0, #16]
 80071d2:	4798      	blx	r3
  if (err != 0U)
 80071d4:	e7ad      	b.n	8007132 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80071d6:	4629      	mov	r1, r5
 80071d8:	f7ff ff87 	bl	80070ea <USBD_CtlError>
  if (err != 0U)
 80071dc:	e049      	b.n	8007272 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	b123      	cbz	r3, 80071f0 <USBD_GetDescriptor+0xf2>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071e6:	f10d 0106 	add.w	r1, sp, #6
 80071ea:	7c00      	ldrb	r0, [r0, #16]
 80071ec:	4798      	blx	r3
  if (err != 0U)
 80071ee:	e7a0      	b.n	8007132 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80071f0:	4629      	mov	r1, r5
 80071f2:	f7ff ff7a 	bl	80070ea <USBD_CtlError>
  if (err != 0U)
 80071f6:	e03c      	b.n	8007272 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071f8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	b123      	cbz	r3, 800720a <USBD_GetDescriptor+0x10c>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007200:	f10d 0106 	add.w	r1, sp, #6
 8007204:	7c00      	ldrb	r0, [r0, #16]
 8007206:	4798      	blx	r3
  if (err != 0U)
 8007208:	e793      	b.n	8007132 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800720a:	4629      	mov	r1, r5
 800720c:	f7ff ff6d 	bl	80070ea <USBD_CtlError>
  if (err != 0U)
 8007210:	e02f      	b.n	8007272 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007212:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	b123      	cbz	r3, 8007224 <USBD_GetDescriptor+0x126>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800721a:	f10d 0106 	add.w	r1, sp, #6
 800721e:	7c00      	ldrb	r0, [r0, #16]
 8007220:	4798      	blx	r3
  if (err != 0U)
 8007222:	e786      	b.n	8007132 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8007224:	4629      	mov	r1, r5
 8007226:	f7ff ff60 	bl	80070ea <USBD_CtlError>
  if (err != 0U)
 800722a:	e022      	b.n	8007272 <USBD_GetDescriptor+0x174>
          USBD_CtlError(pdev, req);
 800722c:	4629      	mov	r1, r5
 800722e:	f7ff ff5c 	bl	80070ea <USBD_CtlError>
  if (err != 0U)
 8007232:	e01e      	b.n	8007272 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007234:	7c03      	ldrb	r3, [r0, #16]
 8007236:	b933      	cbnz	r3, 8007246 <USBD_GetDescriptor+0x148>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007238:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800723c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800723e:	f10d 0006 	add.w	r0, sp, #6
 8007242:	4798      	blx	r3
  if (err != 0U)
 8007244:	e775      	b.n	8007132 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8007246:	4629      	mov	r1, r5
 8007248:	f7ff ff4f 	bl	80070ea <USBD_CtlError>
  if (err != 0U)
 800724c:	e011      	b.n	8007272 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800724e:	7c03      	ldrb	r3, [r0, #16]
 8007250:	b943      	cbnz	r3, 8007264 <USBD_GetDescriptor+0x166>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007252:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8007256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007258:	f10d 0006 	add.w	r0, sp, #6
 800725c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800725e:	2307      	movs	r3, #7
 8007260:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007262:	e766      	b.n	8007132 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8007264:	4629      	mov	r1, r5
 8007266:	f7ff ff40 	bl	80070ea <USBD_CtlError>
  if (err != 0U)
 800726a:	e002      	b.n	8007272 <USBD_GetDescriptor+0x174>
      USBD_CtlError(pdev, req);
 800726c:	4629      	mov	r1, r5
 800726e:	f7ff ff3c 	bl	80070ea <USBD_CtlError>
}
 8007272:	b003      	add	sp, #12
 8007274:	bd30      	pop	{r4, r5, pc}
      USBD_CtlError(pdev, req);
 8007276:	4629      	mov	r1, r5
 8007278:	4620      	mov	r0, r4
 800727a:	f7ff ff36 	bl	80070ea <USBD_CtlError>
 800727e:	e7f8      	b.n	8007272 <USBD_GetDescriptor+0x174>
    (void)USBD_CtlSendStatus(pdev);
 8007280:	4620      	mov	r0, r4
 8007282:	f000 fb75 	bl	8007970 <USBD_CtlSendStatus>
 8007286:	e7f4      	b.n	8007272 <USBD_GetDescriptor+0x174>

08007288 <USBD_SetAddress>:
{
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800728c:	888b      	ldrh	r3, [r1, #4]
 800728e:	b9f3      	cbnz	r3, 80072ce <USBD_SetAddress+0x46>
 8007290:	88cb      	ldrh	r3, [r1, #6]
 8007292:	b9e3      	cbnz	r3, 80072ce <USBD_SetAddress+0x46>
 8007294:	884b      	ldrh	r3, [r1, #2]
 8007296:	2b7f      	cmp	r3, #127	@ 0x7f
 8007298:	d819      	bhi.n	80072ce <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800729a:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800729e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d00c      	beq.n	80072c0 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80072a6:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072aa:	4629      	mov	r1, r5
 80072ac:	f7ff fcde 	bl	8006c6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 fb5d 	bl	8007970 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80072b6:	b135      	cbz	r5, 80072c6 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072b8:	2302      	movs	r3, #2
 80072ba:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80072be:	e009      	b.n	80072d4 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80072c0:	f7ff ff13 	bl	80070ea <USBD_CtlError>
 80072c4:	e006      	b.n	80072d4 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072c6:	2301      	movs	r3, #1
 80072c8:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80072cc:	e002      	b.n	80072d4 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 80072ce:	4620      	mov	r0, r4
 80072d0:	f7ff ff0b 	bl	80070ea <USBD_CtlError>
}
 80072d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080072d8 <USBD_SetConfig>:
{
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	4604      	mov	r4, r0
 80072dc:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 80072de:	788d      	ldrb	r5, [r1, #2]
 80072e0:	4b2f      	ldr	r3, [pc, #188]	@ (80073a0 <USBD_SetConfig+0xc8>)
 80072e2:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80072e4:	2d01      	cmp	r5, #1
 80072e6:	d810      	bhi.n	800730a <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 80072e8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d00f      	beq.n	8007312 <USBD_SetConfig+0x3a>
 80072f2:	2a03      	cmp	r2, #3
 80072f4:	d026      	beq.n	8007344 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 80072f6:	f7ff fef8 	bl	80070ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072fa:	4b29      	ldr	r3, [pc, #164]	@ (80073a0 <USBD_SetConfig+0xc8>)
 80072fc:	7819      	ldrb	r1, [r3, #0]
 80072fe:	4620      	mov	r0, r4
 8007300:	f7ff fd10 	bl	8006d24 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007304:	2503      	movs	r5, #3
}
 8007306:	4628      	mov	r0, r5
 8007308:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800730a:	f7ff feee 	bl	80070ea <USBD_CtlError>
    return USBD_FAIL;
 800730e:	2503      	movs	r5, #3
 8007310:	e7f9      	b.n	8007306 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8007312:	b1a5      	cbz	r5, 800733e <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 8007314:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007316:	4629      	mov	r1, r5
 8007318:	f7ff fcfb 	bl	8006d12 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800731c:	4605      	mov	r5, r0
 800731e:	b138      	cbz	r0, 8007330 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 8007320:	4631      	mov	r1, r6
 8007322:	4620      	mov	r0, r4
 8007324:	f7ff fee1 	bl	80070ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007328:	2302      	movs	r3, #2
 800732a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800732e:	e7ea      	b.n	8007306 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8007330:	4620      	mov	r0, r4
 8007332:	f000 fb1d 	bl	8007970 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007336:	2303      	movs	r3, #3
 8007338:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800733c:	e7e3      	b.n	8007306 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800733e:	f000 fb17 	bl	8007970 <USBD_CtlSendStatus>
 8007342:	e7e0      	b.n	8007306 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8007344:	b1cd      	cbz	r5, 800737a <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 8007346:	6841      	ldr	r1, [r0, #4]
 8007348:	428d      	cmp	r5, r1
 800734a:	d025      	beq.n	8007398 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800734c:	b2c9      	uxtb	r1, r1
 800734e:	f7ff fce9 	bl	8006d24 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007352:	4b13      	ldr	r3, [pc, #76]	@ (80073a0 <USBD_SetConfig+0xc8>)
 8007354:	7819      	ldrb	r1, [r3, #0]
 8007356:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007358:	4620      	mov	r0, r4
 800735a:	f7ff fcda 	bl	8006d12 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800735e:	4605      	mov	r5, r0
 8007360:	b1b0      	cbz	r0, 8007390 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 8007362:	4631      	mov	r1, r6
 8007364:	4620      	mov	r0, r4
 8007366:	f7ff fec0 	bl	80070ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800736a:	7921      	ldrb	r1, [r4, #4]
 800736c:	4620      	mov	r0, r4
 800736e:	f7ff fcd9 	bl	8006d24 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007372:	2302      	movs	r3, #2
 8007374:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8007378:	e7c5      	b.n	8007306 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800737a:	2302      	movs	r3, #2
 800737c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007380:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007382:	4629      	mov	r1, r5
 8007384:	f7ff fcce 	bl	8006d24 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007388:	4620      	mov	r0, r4
 800738a:	f000 faf1 	bl	8007970 <USBD_CtlSendStatus>
 800738e:	e7ba      	b.n	8007306 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8007390:	4620      	mov	r0, r4
 8007392:	f000 faed 	bl	8007970 <USBD_CtlSendStatus>
 8007396:	e7b6      	b.n	8007306 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8007398:	f000 faea 	bl	8007970 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800739c:	2500      	movs	r5, #0
 800739e:	e7b2      	b.n	8007306 <USBD_SetConfig+0x2e>
 80073a0:	20006120 	.word	0x20006120

080073a4 <USBD_GetConfig>:
{
 80073a4:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80073a6:	88cb      	ldrh	r3, [r1, #6]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d10b      	bne.n	80073c4 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80073ac:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d909      	bls.n	80073ca <USBD_GetConfig+0x26>
 80073b6:	2a03      	cmp	r2, #3
 80073b8:	d111      	bne.n	80073de <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073ba:	2201      	movs	r2, #1
 80073bc:	1d01      	adds	r1, r0, #4
 80073be:	f000 faab 	bl	8007918 <USBD_CtlSendData>
        break;
 80073c2:	e001      	b.n	80073c8 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 80073c4:	f7ff fe91 	bl	80070ea <USBD_CtlError>
}
 80073c8:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80073ca:	b252      	sxtb	r2, r2
 80073cc:	b13a      	cbz	r2, 80073de <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 80073ce:	4601      	mov	r1, r0
 80073d0:	2300      	movs	r3, #0
 80073d2:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073d6:	2201      	movs	r2, #1
 80073d8:	f000 fa9e 	bl	8007918 <USBD_CtlSendData>
        break;
 80073dc:	e7f4      	b.n	80073c8 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 80073de:	f7ff fe84 	bl	80070ea <USBD_CtlError>
}
 80073e2:	e7f1      	b.n	80073c8 <USBD_GetConfig+0x24>

080073e4 <USBD_GetStatus>:
{
 80073e4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80073e6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80073ea:	3b01      	subs	r3, #1
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d812      	bhi.n	8007416 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80073f0:	88cb      	ldrh	r3, [r1, #6]
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d10c      	bne.n	8007410 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073f6:	2301      	movs	r3, #1
 80073f8:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 80073fa:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80073fe:	b10b      	cbz	r3, 8007404 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007400:	2303      	movs	r3, #3
 8007402:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007404:	2202      	movs	r2, #2
 8007406:	f100 010c 	add.w	r1, r0, #12
 800740a:	f000 fa85 	bl	8007918 <USBD_CtlSendData>
}
 800740e:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8007410:	f7ff fe6b 	bl	80070ea <USBD_CtlError>
        break;
 8007414:	e7fb      	b.n	800740e <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8007416:	f7ff fe68 	bl	80070ea <USBD_CtlError>
}
 800741a:	e7f8      	b.n	800740e <USBD_GetStatus+0x2a>

0800741c <USBD_SetFeature>:
{
 800741c:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800741e:	884b      	ldrh	r3, [r1, #2]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d004      	beq.n	800742e <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007424:	2b02      	cmp	r3, #2
 8007426:	d007      	beq.n	8007438 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 8007428:	f7ff fe5f 	bl	80070ea <USBD_CtlError>
}
 800742c:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800742e:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007432:	f000 fa9d 	bl	8007970 <USBD_CtlSendStatus>
 8007436:	e7f9      	b.n	800742c <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007438:	888b      	ldrh	r3, [r1, #4]
 800743a:	0a1b      	lsrs	r3, r3, #8
 800743c:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007440:	f000 fa96 	bl	8007970 <USBD_CtlSendStatus>
 8007444:	e7f2      	b.n	800742c <USBD_SetFeature+0x10>

08007446 <USBD_ClrFeature>:
{
 8007446:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8007448:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800744c:	3b01      	subs	r3, #1
 800744e:	2b02      	cmp	r3, #2
 8007450:	d809      	bhi.n	8007466 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007452:	884b      	ldrh	r3, [r1, #2]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d000      	beq.n	800745a <USBD_ClrFeature+0x14>
}
 8007458:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007460:	f000 fa86 	bl	8007970 <USBD_CtlSendStatus>
 8007464:	e7f8      	b.n	8007458 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8007466:	f7ff fe40 	bl	80070ea <USBD_CtlError>
}
 800746a:	e7f5      	b.n	8007458 <USBD_ClrFeature+0x12>

0800746c <USBD_StdDevReq>:
{
 800746c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800746e:	780c      	ldrb	r4, [r1, #0]
 8007470:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8007474:	2c20      	cmp	r4, #32
 8007476:	d006      	beq.n	8007486 <USBD_StdDevReq+0x1a>
 8007478:	2c40      	cmp	r4, #64	@ 0x40
 800747a:	d004      	beq.n	8007486 <USBD_StdDevReq+0x1a>
 800747c:	b16c      	cbz	r4, 800749a <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 800747e:	f7ff fe34 	bl	80070ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007482:	2400      	movs	r4, #0
      break;
 8007484:	e007      	b.n	8007496 <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007486:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800748a:	33ae      	adds	r3, #174	@ 0xae
 800748c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	4798      	blx	r3
 8007494:	4604      	mov	r4, r0
}
 8007496:	4620      	mov	r0, r4
 8007498:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800749a:	784d      	ldrb	r5, [r1, #1]
 800749c:	2d09      	cmp	r5, #9
 800749e:	d81d      	bhi.n	80074dc <USBD_StdDevReq+0x70>
 80074a0:	e8df f005 	tbb	[pc, r5]
 80074a4:	161c1912 	.word	0x161c1912
 80074a8:	1c05081c 	.word	0x1c05081c
 80074ac:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 80074ae:	f7ff fe26 	bl	80070fe <USBD_GetDescriptor>
          break;
 80074b2:	e7f0      	b.n	8007496 <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 80074b4:	f7ff fee8 	bl	8007288 <USBD_SetAddress>
          break;
 80074b8:	e7ed      	b.n	8007496 <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 80074ba:	f7ff ff0d 	bl	80072d8 <USBD_SetConfig>
 80074be:	4604      	mov	r4, r0
          break;
 80074c0:	e7e9      	b.n	8007496 <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 80074c2:	f7ff ff6f 	bl	80073a4 <USBD_GetConfig>
          break;
 80074c6:	e7e6      	b.n	8007496 <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 80074c8:	f7ff ff8c 	bl	80073e4 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80074cc:	462c      	mov	r4, r5
          break;
 80074ce:	e7e2      	b.n	8007496 <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 80074d0:	f7ff ffa4 	bl	800741c <USBD_SetFeature>
          break;
 80074d4:	e7df      	b.n	8007496 <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 80074d6:	f7ff ffb6 	bl	8007446 <USBD_ClrFeature>
          break;
 80074da:	e7dc      	b.n	8007496 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 80074dc:	f7ff fe05 	bl	80070ea <USBD_CtlError>
          break;
 80074e0:	e7d9      	b.n	8007496 <USBD_StdDevReq+0x2a>

080074e2 <USBD_StdItfReq>:
{
 80074e2:	b570      	push	{r4, r5, r6, lr}
 80074e4:	4605      	mov	r5, r0
 80074e6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074e8:	780b      	ldrb	r3, [r1, #0]
 80074ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	d007      	beq.n	8007502 <USBD_StdItfReq+0x20>
 80074f2:	2b40      	cmp	r3, #64	@ 0x40
 80074f4:	d005      	beq.n	8007502 <USBD_StdItfReq+0x20>
 80074f6:	b123      	cbz	r3, 8007502 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 80074f8:	f7ff fdf7 	bl	80070ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80074fc:	2600      	movs	r6, #0
}
 80074fe:	4630      	mov	r0, r6
 8007500:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8007502:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 8007506:	3b01      	subs	r3, #1
 8007508:	2b02      	cmp	r3, #2
 800750a:	d826      	bhi.n	800755a <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800750c:	7921      	ldrb	r1, [r4, #4]
 800750e:	2901      	cmp	r1, #1
 8007510:	d905      	bls.n	800751e <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 8007512:	4621      	mov	r1, r4
 8007514:	4628      	mov	r0, r5
 8007516:	f7ff fde8 	bl	80070ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800751a:	2600      	movs	r6, #0
 800751c:	e7ef      	b.n	80074fe <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800751e:	4628      	mov	r0, r5
 8007520:	f7ff fcd2 	bl	8006ec8 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007524:	b968      	cbnz	r0, 8007542 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 8007526:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 800752a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800752e:	6891      	ldr	r1, [r2, #8]
 8007530:	b189      	cbz	r1, 8007556 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 8007532:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007536:	6893      	ldr	r3, [r2, #8]
 8007538:	4621      	mov	r1, r4
 800753a:	4628      	mov	r0, r5
 800753c:	4798      	blx	r3
 800753e:	4606      	mov	r6, r0
 8007540:	e000      	b.n	8007544 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 8007542:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007544:	88e3      	ldrh	r3, [r4, #6]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1d9      	bne.n	80074fe <USBD_StdItfReq+0x1c>
 800754a:	2e00      	cmp	r6, #0
 800754c:	d1d7      	bne.n	80074fe <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800754e:	4628      	mov	r0, r5
 8007550:	f000 fa0e 	bl	8007970 <USBD_CtlSendStatus>
 8007554:	e7d3      	b.n	80074fe <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 8007556:	2603      	movs	r6, #3
 8007558:	e7f4      	b.n	8007544 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 800755a:	4621      	mov	r1, r4
 800755c:	4628      	mov	r0, r5
 800755e:	f7ff fdc4 	bl	80070ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007562:	2600      	movs	r6, #0
          break;
 8007564:	e7cb      	b.n	80074fe <USBD_StdItfReq+0x1c>

08007566 <USBD_StdEPReq>:
{
 8007566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800756a:	4606      	mov	r6, r0
 800756c:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800756e:	888b      	ldrh	r3, [r1, #4]
 8007570:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007572:	780c      	ldrb	r4, [r1, #0]
 8007574:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8007578:	2c20      	cmp	r4, #32
 800757a:	d008      	beq.n	800758e <USBD_StdEPReq+0x28>
 800757c:	2c40      	cmp	r4, #64	@ 0x40
 800757e:	d006      	beq.n	800758e <USBD_StdEPReq+0x28>
 8007580:	b1dc      	cbz	r4, 80075ba <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 8007582:	f7ff fdb2 	bl	80070ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007586:	2400      	movs	r4, #0
}
 8007588:	4620      	mov	r0, r4
 800758a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800758e:	4639      	mov	r1, r7
 8007590:	4630      	mov	r0, r6
 8007592:	f7ff fc9b 	bl	8006ecc <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007596:	4604      	mov	r4, r0
 8007598:	2800      	cmp	r0, #0
 800759a:	f040 80fc 	bne.w	8007796 <USBD_StdEPReq+0x230>
        pdev->classId = idx;
 800759e:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 80075a2:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80075a6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d0eb      	beq.n	8007588 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80075b0:	4629      	mov	r1, r5
 80075b2:	4630      	mov	r0, r6
 80075b4:	4798      	blx	r3
 80075b6:	4604      	mov	r4, r0
 80075b8:	e7e6      	b.n	8007588 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 80075ba:	f891 8001 	ldrb.w	r8, [r1, #1]
 80075be:	f1b8 0f01 	cmp.w	r8, #1
 80075c2:	d031      	beq.n	8007628 <USBD_StdEPReq+0xc2>
 80075c4:	f1b8 0f03 	cmp.w	r8, #3
 80075c8:	d005      	beq.n	80075d6 <USBD_StdEPReq+0x70>
 80075ca:	f1b8 0f00 	cmp.w	r8, #0
 80075ce:	d067      	beq.n	80076a0 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 80075d0:	f7ff fd8b 	bl	80070ea <USBD_CtlError>
          break;
 80075d4:	e7d8      	b.n	8007588 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 80075d6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d004      	beq.n	80075ea <USBD_StdEPReq+0x84>
 80075e0:	2a03      	cmp	r2, #3
 80075e2:	d012      	beq.n	800760a <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 80075e4:	f7ff fd81 	bl	80070ea <USBD_CtlError>
              break;
 80075e8:	e7ce      	b.n	8007588 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075ea:	b10f      	cbz	r7, 80075f0 <USBD_StdEPReq+0x8a>
 80075ec:	2f80      	cmp	r7, #128	@ 0x80
 80075ee:	d104      	bne.n	80075fa <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 80075f0:	4629      	mov	r1, r5
 80075f2:	4630      	mov	r0, r6
 80075f4:	f7ff fd79 	bl	80070ea <USBD_CtlError>
 80075f8:	e7c6      	b.n	8007588 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075fa:	4639      	mov	r1, r7
 80075fc:	f7ff fb26 	bl	8006c4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007600:	2180      	movs	r1, #128	@ 0x80
 8007602:	4630      	mov	r0, r6
 8007604:	f7ff fb22 	bl	8006c4c <USBD_LL_StallEP>
 8007608:	e7be      	b.n	8007588 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800760a:	884b      	ldrh	r3, [r1, #2]
 800760c:	b923      	cbnz	r3, 8007618 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800760e:	b11f      	cbz	r7, 8007618 <USBD_StdEPReq+0xb2>
 8007610:	2f80      	cmp	r7, #128	@ 0x80
 8007612:	d001      	beq.n	8007618 <USBD_StdEPReq+0xb2>
 8007614:	88cb      	ldrh	r3, [r1, #6]
 8007616:	b11b      	cbz	r3, 8007620 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 8007618:	4630      	mov	r0, r6
 800761a:	f000 f9a9 	bl	8007970 <USBD_CtlSendStatus>
              break;
 800761e:	e7b3      	b.n	8007588 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007620:	4639      	mov	r1, r7
 8007622:	f7ff fb13 	bl	8006c4c <USBD_LL_StallEP>
 8007626:	e7f7      	b.n	8007618 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 8007628:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800762c:	b2da      	uxtb	r2, r3
 800762e:	2b02      	cmp	r3, #2
 8007630:	d004      	beq.n	800763c <USBD_StdEPReq+0xd6>
 8007632:	2a03      	cmp	r2, #3
 8007634:	d012      	beq.n	800765c <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 8007636:	f7ff fd58 	bl	80070ea <USBD_CtlError>
              break;
 800763a:	e7a5      	b.n	8007588 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800763c:	b10f      	cbz	r7, 8007642 <USBD_StdEPReq+0xdc>
 800763e:	2f80      	cmp	r7, #128	@ 0x80
 8007640:	d104      	bne.n	800764c <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 8007642:	4629      	mov	r1, r5
 8007644:	4630      	mov	r0, r6
 8007646:	f7ff fd50 	bl	80070ea <USBD_CtlError>
 800764a:	e79d      	b.n	8007588 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800764c:	4639      	mov	r1, r7
 800764e:	f7ff fafd 	bl	8006c4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007652:	2180      	movs	r1, #128	@ 0x80
 8007654:	4630      	mov	r0, r6
 8007656:	f7ff faf9 	bl	8006c4c <USBD_LL_StallEP>
 800765a:	e795      	b.n	8007588 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800765c:	884b      	ldrh	r3, [r1, #2]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d192      	bne.n	8007588 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8007662:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 8007666:	d117      	bne.n	8007698 <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 8007668:	4630      	mov	r0, r6
 800766a:	f000 f981 	bl	8007970 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800766e:	4639      	mov	r1, r7
 8007670:	4630      	mov	r0, r6
 8007672:	f7ff fc2b 	bl	8006ecc <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007676:	2800      	cmp	r0, #0
 8007678:	d186      	bne.n	8007588 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 800767a:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800767e:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8007682:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8007686:	6892      	ldr	r2, [r2, #8]
 8007688:	2a00      	cmp	r2, #0
 800768a:	f000 8086 	beq.w	800779a <USBD_StdEPReq+0x234>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800768e:	4629      	mov	r1, r5
 8007690:	4630      	mov	r0, r6
 8007692:	4790      	blx	r2
 8007694:	4604      	mov	r4, r0
 8007696:	e777      	b.n	8007588 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007698:	4639      	mov	r1, r7
 800769a:	f7ff fadf 	bl	8006c5c <USBD_LL_ClearStallEP>
 800769e:	e7e3      	b.n	8007668 <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 80076a0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80076a4:	b2d1      	uxtb	r1, r2
 80076a6:	2a02      	cmp	r2, #2
 80076a8:	d006      	beq.n	80076b8 <USBD_StdEPReq+0x152>
 80076aa:	2903      	cmp	r1, #3
 80076ac:	d029      	beq.n	8007702 <USBD_StdEPReq+0x19c>
              USBD_CtlError(pdev, req);
 80076ae:	4629      	mov	r1, r5
 80076b0:	f7ff fd1b 	bl	80070ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80076b4:	4644      	mov	r4, r8
              break;
 80076b6:	e767      	b.n	8007588 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076b8:	b10f      	cbz	r7, 80076be <USBD_StdEPReq+0x158>
 80076ba:	2f80      	cmp	r7, #128	@ 0x80
 80076bc:	d113      	bne.n	80076e6 <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076be:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80076c2:	d115      	bne.n	80076f0 <USBD_StdEPReq+0x18a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076c4:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076c8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80076cc:	00b9      	lsls	r1, r7, #2
 80076ce:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 80076d2:	4431      	add	r1, r6
 80076d4:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076da:	2202      	movs	r2, #2
 80076dc:	4630      	mov	r0, r6
 80076de:	f000 f91b 	bl	8007918 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80076e2:	4644      	mov	r4, r8
              break;
 80076e4:	e750      	b.n	8007588 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 80076e6:	4629      	mov	r1, r5
 80076e8:	f7ff fcff 	bl	80070ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80076ec:	4644      	mov	r4, r8
                break;
 80076ee:	e74b      	b.n	8007588 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076f0:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 80076f4:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80076f8:	00b9      	lsls	r1, r7, #2
 80076fa:	3110      	adds	r1, #16
 80076fc:	4431      	add	r1, r6
 80076fe:	3104      	adds	r1, #4
 8007700:	e7e9      	b.n	80076d6 <USBD_StdEPReq+0x170>
              if ((ep_addr & 0x80U) == 0x80U)
 8007702:	b25b      	sxtb	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	db1f      	blt.n	8007748 <USBD_StdEPReq+0x1e2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007708:	f007 020f 	and.w	r2, r7, #15
 800770c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007710:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007714:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 8007718:	b322      	cbz	r2, 8007764 <USBD_StdEPReq+0x1fe>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800771a:	2b00      	cmp	r3, #0
 800771c:	db27      	blt.n	800776e <USBD_StdEPReq+0x208>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800771e:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007722:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007726:	009c      	lsls	r4, r3, #2
 8007728:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 800772c:	4434      	add	r4, r6
 800772e:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007730:	b10f      	cbz	r7, 8007736 <USBD_StdEPReq+0x1d0>
 8007732:	2f80      	cmp	r7, #128	@ 0x80
 8007734:	d124      	bne.n	8007780 <USBD_StdEPReq+0x21a>
                pep->status = 0x0000U;
 8007736:	2300      	movs	r3, #0
 8007738:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800773a:	2202      	movs	r2, #2
 800773c:	4621      	mov	r1, r4
 800773e:	4630      	mov	r0, r6
 8007740:	f000 f8ea 	bl	8007918 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8007744:	4644      	mov	r4, r8
              break;
 8007746:	e71f      	b.n	8007588 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007748:	f007 020f 	and.w	r2, r7, #15
 800774c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007750:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007754:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8007756:	2a00      	cmp	r2, #0
 8007758:	d1df      	bne.n	800771a <USBD_StdEPReq+0x1b4>
                  USBD_CtlError(pdev, req);
 800775a:	4629      	mov	r1, r5
 800775c:	f7ff fcc5 	bl	80070ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007760:	4644      	mov	r4, r8
                  break;
 8007762:	e711      	b.n	8007588 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8007764:	4629      	mov	r1, r5
 8007766:	f7ff fcc0 	bl	80070ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800776a:	4644      	mov	r4, r8
                  break;
 800776c:	e70c      	b.n	8007588 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800776e:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 8007772:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007776:	009c      	lsls	r4, r3, #2
 8007778:	3410      	adds	r4, #16
 800777a:	4434      	add	r4, r6
 800777c:	3404      	adds	r4, #4
 800777e:	e7d7      	b.n	8007730 <USBD_StdEPReq+0x1ca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007780:	4639      	mov	r1, r7
 8007782:	4630      	mov	r0, r6
 8007784:	f7ff fa1c 	bl	8006bc0 <USBD_LL_IsStallEP>
 8007788:	b110      	cbz	r0, 8007790 <USBD_StdEPReq+0x22a>
                pep->status = 0x0001U;
 800778a:	2301      	movs	r3, #1
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	e7d4      	b.n	800773a <USBD_StdEPReq+0x1d4>
                pep->status = 0x0000U;
 8007790:	2300      	movs	r3, #0
 8007792:	6023      	str	r3, [r4, #0]
 8007794:	e7d1      	b.n	800773a <USBD_StdEPReq+0x1d4>
  USBD_StatusTypeDef ret = USBD_OK;
 8007796:	2400      	movs	r4, #0
 8007798:	e6f6      	b.n	8007588 <USBD_StdEPReq+0x22>
 800779a:	4604      	mov	r4, r0
 800779c:	e6f4      	b.n	8007588 <USBD_StdEPReq+0x22>

0800779e <USBD_GetString>:
  if (desc == NULL)
 800779e:	b300      	cbz	r0, 80077e2 <USBD_GetString+0x44>
{
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	460d      	mov	r5, r1
 80077a4:	4616      	mov	r6, r2
 80077a6:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80077a8:	f7ff fc81 	bl	80070ae <USBD_GetLen>
 80077ac:	3001      	adds	r0, #1
 80077ae:	0043      	lsls	r3, r0, #1
 80077b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077b4:	d806      	bhi.n	80077c4 <USBD_GetString+0x26>
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 80077ba:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80077bc:	2303      	movs	r3, #3
 80077be:	706b      	strb	r3, [r5, #1]
  idx++;
 80077c0:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 80077c2:	e00a      	b.n	80077da <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80077c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077c8:	e7f6      	b.n	80077b8 <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 80077ca:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 80077cc:	3401      	adds	r4, #1
    idx++;
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 80077d2:	2100      	movs	r1, #0
 80077d4:	54a9      	strb	r1, [r5, r2]
    idx++;
 80077d6:	3302      	adds	r3, #2
 80077d8:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 80077da:	7822      	ldrb	r2, [r4, #0]
 80077dc:	2a00      	cmp	r2, #0
 80077de:	d1f4      	bne.n	80077ca <USBD_GetString+0x2c>
}
 80077e0:	bd70      	pop	{r4, r5, r6, pc}
 80077e2:	4770      	bx	lr

080077e4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077e4:	2312      	movs	r3, #18
 80077e6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80077e8:	4800      	ldr	r0, [pc, #0]	@ (80077ec <USBD_FS_DeviceDescriptor+0x8>)
 80077ea:	4770      	bx	lr
 80077ec:	200000d0 	.word	0x200000d0

080077f0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077f0:	2304      	movs	r3, #4
 80077f2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80077f4:	4800      	ldr	r0, [pc, #0]	@ (80077f8 <USBD_FS_LangIDStrDescriptor+0x8>)
 80077f6:	4770      	bx	lr
 80077f8:	200000cc 	.word	0x200000cc

080077fc <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80077fc:	2300      	movs	r3, #0
 80077fe:	4293      	cmp	r3, r2
 8007800:	d21e      	bcs.n	8007840 <IntToUnicode+0x44>
{
 8007802:	b500      	push	{lr}
 8007804:	e010      	b.n	8007828 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007806:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 800780a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800780e:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8007810:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007814:	f10c 0c01 	add.w	ip, ip, #1
 8007818:	f04f 0e00 	mov.w	lr, #0
 800781c:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8007820:	3301      	adds	r3, #1
 8007822:	b2db      	uxtb	r3, r3
 8007824:	4293      	cmp	r3, r2
 8007826:	d209      	bcs.n	800783c <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8007828:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800782c:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8007830:	d2e9      	bcs.n	8007806 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8007832:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8007836:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800783a:	e7e8      	b.n	800780e <IntToUnicode+0x12>
  }
}
 800783c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007840:	4770      	bx	lr
	...

08007844 <Get_SerialNum>:
{
 8007844:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007846:	4b0b      	ldr	r3, [pc, #44]	@ (8007874 <Get_SerialNum+0x30>)
 8007848:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800784c:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007850:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 8007854:	18c0      	adds	r0, r0, r3
 8007856:	d100      	bne.n	800785a <Get_SerialNum+0x16>
}
 8007858:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800785a:	4d07      	ldr	r5, [pc, #28]	@ (8007878 <Get_SerialNum+0x34>)
 800785c:	2208      	movs	r2, #8
 800785e:	4629      	mov	r1, r5
 8007860:	f7ff ffcc 	bl	80077fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007864:	2204      	movs	r2, #4
 8007866:	f105 0110 	add.w	r1, r5, #16
 800786a:	4620      	mov	r0, r4
 800786c:	f7ff ffc6 	bl	80077fc <IntToUnicode>
}
 8007870:	e7f2      	b.n	8007858 <Get_SerialNum+0x14>
 8007872:	bf00      	nop
 8007874:	1fff7000 	.word	0x1fff7000
 8007878:	200000b2 	.word	0x200000b2

0800787c <USBD_FS_SerialStrDescriptor>:
{
 800787c:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800787e:	231a      	movs	r3, #26
 8007880:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8007882:	f7ff ffdf 	bl	8007844 <Get_SerialNum>
}
 8007886:	4801      	ldr	r0, [pc, #4]	@ (800788c <USBD_FS_SerialStrDescriptor+0x10>)
 8007888:	bd08      	pop	{r3, pc}
 800788a:	bf00      	nop
 800788c:	200000b0 	.word	0x200000b0

08007890 <USBD_FS_ProductStrDescriptor>:
{
 8007890:	b508      	push	{r3, lr}
 8007892:	460a      	mov	r2, r1
  if(speed == 0)
 8007894:	b928      	cbnz	r0, 80078a2 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007896:	4905      	ldr	r1, [pc, #20]	@ (80078ac <USBD_FS_ProductStrDescriptor+0x1c>)
 8007898:	4805      	ldr	r0, [pc, #20]	@ (80078b0 <USBD_FS_ProductStrDescriptor+0x20>)
 800789a:	f7ff ff80 	bl	800779e <USBD_GetString>
}
 800789e:	4803      	ldr	r0, [pc, #12]	@ (80078ac <USBD_FS_ProductStrDescriptor+0x1c>)
 80078a0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078a2:	4902      	ldr	r1, [pc, #8]	@ (80078ac <USBD_FS_ProductStrDescriptor+0x1c>)
 80078a4:	4802      	ldr	r0, [pc, #8]	@ (80078b0 <USBD_FS_ProductStrDescriptor+0x20>)
 80078a6:	f7ff ff7a 	bl	800779e <USBD_GetString>
 80078aa:	e7f8      	b.n	800789e <USBD_FS_ProductStrDescriptor+0xe>
 80078ac:	20006124 	.word	0x20006124
 80078b0:	080087a0 	.word	0x080087a0

080078b4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80078b4:	b510      	push	{r4, lr}
 80078b6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078b8:	4c03      	ldr	r4, [pc, #12]	@ (80078c8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80078ba:	4621      	mov	r1, r4
 80078bc:	4803      	ldr	r0, [pc, #12]	@ (80078cc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80078be:	f7ff ff6e 	bl	800779e <USBD_GetString>
}
 80078c2:	4620      	mov	r0, r4
 80078c4:	bd10      	pop	{r4, pc}
 80078c6:	bf00      	nop
 80078c8:	20006124 	.word	0x20006124
 80078cc:	080087bc 	.word	0x080087bc

080078d0 <USBD_FS_ConfigStrDescriptor>:
{
 80078d0:	b508      	push	{r3, lr}
 80078d2:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80078d4:	b928      	cbnz	r0, 80078e2 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078d6:	4905      	ldr	r1, [pc, #20]	@ (80078ec <USBD_FS_ConfigStrDescriptor+0x1c>)
 80078d8:	4805      	ldr	r0, [pc, #20]	@ (80078f0 <USBD_FS_ConfigStrDescriptor+0x20>)
 80078da:	f7ff ff60 	bl	800779e <USBD_GetString>
}
 80078de:	4803      	ldr	r0, [pc, #12]	@ (80078ec <USBD_FS_ConfigStrDescriptor+0x1c>)
 80078e0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078e2:	4902      	ldr	r1, [pc, #8]	@ (80078ec <USBD_FS_ConfigStrDescriptor+0x1c>)
 80078e4:	4802      	ldr	r0, [pc, #8]	@ (80078f0 <USBD_FS_ConfigStrDescriptor+0x20>)
 80078e6:	f7ff ff5a 	bl	800779e <USBD_GetString>
 80078ea:	e7f8      	b.n	80078de <USBD_FS_ConfigStrDescriptor+0xe>
 80078ec:	20006124 	.word	0x20006124
 80078f0:	080087d0 	.word	0x080087d0

080078f4 <USBD_FS_InterfaceStrDescriptor>:
{
 80078f4:	b508      	push	{r3, lr}
 80078f6:	460a      	mov	r2, r1
  if(speed == 0)
 80078f8:	b928      	cbnz	r0, 8007906 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078fa:	4905      	ldr	r1, [pc, #20]	@ (8007910 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80078fc:	4805      	ldr	r0, [pc, #20]	@ (8007914 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80078fe:	f7ff ff4e 	bl	800779e <USBD_GetString>
}
 8007902:	4803      	ldr	r0, [pc, #12]	@ (8007910 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8007904:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007906:	4902      	ldr	r1, [pc, #8]	@ (8007910 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8007908:	4802      	ldr	r0, [pc, #8]	@ (8007914 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800790a:	f7ff ff48 	bl	800779e <USBD_GetString>
 800790e:	e7f8      	b.n	8007902 <USBD_FS_InterfaceStrDescriptor+0xe>
 8007910:	20006124 	.word	0x20006124
 8007914:	080087dc 	.word	0x080087dc

08007918 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007918:	b508      	push	{r3, lr}
 800791a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800791c:	2202      	movs	r2, #2
 800791e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007922:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007924:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007926:	460a      	mov	r2, r1
 8007928:	2100      	movs	r1, #0
 800792a:	f7ff f9a7 	bl	8006c7c <USBD_LL_Transmit>

  return USBD_OK;
}
 800792e:	2000      	movs	r0, #0
 8007930:	bd08      	pop	{r3, pc}

08007932 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007932:	b508      	push	{r3, lr}
 8007934:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007936:	460a      	mov	r2, r1
 8007938:	2100      	movs	r1, #0
 800793a:	f7ff f99f 	bl	8006c7c <USBD_LL_Transmit>

  return USBD_OK;
}
 800793e:	2000      	movs	r0, #0
 8007940:	bd08      	pop	{r3, pc}

08007942 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007942:	b508      	push	{r3, lr}
 8007944:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007946:	2203      	movs	r2, #3
 8007948:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800794c:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007950:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007954:	460a      	mov	r2, r1
 8007956:	2100      	movs	r1, #0
 8007958:	f7ff f998 	bl	8006c8c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800795c:	2000      	movs	r0, #0
 800795e:	bd08      	pop	{r3, pc}

08007960 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007960:	b508      	push	{r3, lr}
 8007962:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007964:	460a      	mov	r2, r1
 8007966:	2100      	movs	r1, #0
 8007968:	f7ff f990 	bl	8006c8c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800796c:	2000      	movs	r0, #0
 800796e:	bd08      	pop	{r3, pc}

08007970 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007970:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007972:	2204      	movs	r2, #4
 8007974:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007978:	2300      	movs	r3, #0
 800797a:	461a      	mov	r2, r3
 800797c:	4619      	mov	r1, r3
 800797e:	f7ff f97d 	bl	8006c7c <USBD_LL_Transmit>

  return USBD_OK;
}
 8007982:	2000      	movs	r0, #0
 8007984:	bd08      	pop	{r3, pc}

08007986 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007986:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007988:	2205      	movs	r2, #5
 800798a:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800798e:	2300      	movs	r3, #0
 8007990:	461a      	mov	r2, r3
 8007992:	4619      	mov	r1, r3
 8007994:	f7ff f97a 	bl	8006c8c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007998:	2000      	movs	r0, #0
 800799a:	bd08      	pop	{r3, pc}

0800799c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800799c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80079d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80079a0:	f7fd f9d2 	bl	8004d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80079a4:	480c      	ldr	r0, [pc, #48]	@ (80079d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80079a6:	490d      	ldr	r1, [pc, #52]	@ (80079dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80079a8:	4a0d      	ldr	r2, [pc, #52]	@ (80079e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80079aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80079ac:	e002      	b.n	80079b4 <LoopCopyDataInit>

080079ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80079ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80079b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80079b2:	3304      	adds	r3, #4

080079b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80079b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80079b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80079b8:	d3f9      	bcc.n	80079ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80079ba:	4a0a      	ldr	r2, [pc, #40]	@ (80079e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80079bc:	4c0a      	ldr	r4, [pc, #40]	@ (80079e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80079be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80079c0:	e001      	b.n	80079c6 <LoopFillZerobss>

080079c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80079c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80079c4:	3204      	adds	r2, #4

080079c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80079c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80079c8:	d3fb      	bcc.n	80079c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80079ca:	f000 f855 	bl	8007a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80079ce:	f7f9 fad3 	bl	8000f78 <main>
  bx  lr    
 80079d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80079d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80079d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80079dc:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 80079e0:	08008898 	.word	0x08008898
  ldr r2, =_sbss
 80079e4:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80079e8:	2000646c 	.word	0x2000646c

080079ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80079ec:	e7fe      	b.n	80079ec <ADC_IRQHandler>
	...

080079f0 <sniprintf>:
 80079f0:	b40c      	push	{r2, r3}
 80079f2:	b530      	push	{r4, r5, lr}
 80079f4:	4b18      	ldr	r3, [pc, #96]	@ (8007a58 <sniprintf+0x68>)
 80079f6:	1e0c      	subs	r4, r1, #0
 80079f8:	681d      	ldr	r5, [r3, #0]
 80079fa:	b09d      	sub	sp, #116	@ 0x74
 80079fc:	da08      	bge.n	8007a10 <sniprintf+0x20>
 80079fe:	238b      	movs	r3, #139	@ 0x8b
 8007a00:	602b      	str	r3, [r5, #0]
 8007a02:	f04f 30ff 	mov.w	r0, #4294967295
 8007a06:	b01d      	add	sp, #116	@ 0x74
 8007a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a0c:	b002      	add	sp, #8
 8007a0e:	4770      	bx	lr
 8007a10:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007a14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a18:	f04f 0300 	mov.w	r3, #0
 8007a1c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007a1e:	bf14      	ite	ne
 8007a20:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a24:	4623      	moveq	r3, r4
 8007a26:	9304      	str	r3, [sp, #16]
 8007a28:	9307      	str	r3, [sp, #28]
 8007a2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007a2e:	9002      	str	r0, [sp, #8]
 8007a30:	9006      	str	r0, [sp, #24]
 8007a32:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a36:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007a38:	ab21      	add	r3, sp, #132	@ 0x84
 8007a3a:	a902      	add	r1, sp, #8
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	f000 f9a6 	bl	8007d90 <_svfiprintf_r>
 8007a44:	1c43      	adds	r3, r0, #1
 8007a46:	bfbc      	itt	lt
 8007a48:	238b      	movlt	r3, #139	@ 0x8b
 8007a4a:	602b      	strlt	r3, [r5, #0]
 8007a4c:	2c00      	cmp	r4, #0
 8007a4e:	d0da      	beq.n	8007a06 <sniprintf+0x16>
 8007a50:	9b02      	ldr	r3, [sp, #8]
 8007a52:	2200      	movs	r2, #0
 8007a54:	701a      	strb	r2, [r3, #0]
 8007a56:	e7d6      	b.n	8007a06 <sniprintf+0x16>
 8007a58:	20000100 	.word	0x20000100

08007a5c <memset>:
 8007a5c:	4402      	add	r2, r0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d100      	bne.n	8007a66 <memset+0xa>
 8007a64:	4770      	bx	lr
 8007a66:	f803 1b01 	strb.w	r1, [r3], #1
 8007a6a:	e7f9      	b.n	8007a60 <memset+0x4>

08007a6c <__errno>:
 8007a6c:	4b01      	ldr	r3, [pc, #4]	@ (8007a74 <__errno+0x8>)
 8007a6e:	6818      	ldr	r0, [r3, #0]
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	20000100 	.word	0x20000100

08007a78 <__libc_init_array>:
 8007a78:	b570      	push	{r4, r5, r6, lr}
 8007a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab0 <__libc_init_array+0x38>)
 8007a7c:	4d0d      	ldr	r5, [pc, #52]	@ (8007ab4 <__libc_init_array+0x3c>)
 8007a7e:	1b5b      	subs	r3, r3, r5
 8007a80:	109c      	asrs	r4, r3, #2
 8007a82:	2600      	movs	r6, #0
 8007a84:	42a6      	cmp	r6, r4
 8007a86:	d109      	bne.n	8007a9c <__libc_init_array+0x24>
 8007a88:	f000 fde8 	bl	800865c <_init>
 8007a8c:	4d0a      	ldr	r5, [pc, #40]	@ (8007ab8 <__libc_init_array+0x40>)
 8007a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007abc <__libc_init_array+0x44>)
 8007a90:	1b5b      	subs	r3, r3, r5
 8007a92:	109c      	asrs	r4, r3, #2
 8007a94:	2600      	movs	r6, #0
 8007a96:	42a6      	cmp	r6, r4
 8007a98:	d105      	bne.n	8007aa6 <__libc_init_array+0x2e>
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
 8007a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa0:	4798      	blx	r3
 8007aa2:	3601      	adds	r6, #1
 8007aa4:	e7ee      	b.n	8007a84 <__libc_init_array+0xc>
 8007aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aaa:	4798      	blx	r3
 8007aac:	3601      	adds	r6, #1
 8007aae:	e7f2      	b.n	8007a96 <__libc_init_array+0x1e>
 8007ab0:	08008890 	.word	0x08008890
 8007ab4:	08008890 	.word	0x08008890
 8007ab8:	08008890 	.word	0x08008890
 8007abc:	08008894 	.word	0x08008894

08007ac0 <__retarget_lock_acquire_recursive>:
 8007ac0:	4770      	bx	lr

08007ac2 <__retarget_lock_release_recursive>:
 8007ac2:	4770      	bx	lr

08007ac4 <memcpy>:
 8007ac4:	440a      	add	r2, r1
 8007ac6:	4291      	cmp	r1, r2
 8007ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007acc:	d100      	bne.n	8007ad0 <memcpy+0xc>
 8007ace:	4770      	bx	lr
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ada:	4291      	cmp	r1, r2
 8007adc:	d1f9      	bne.n	8007ad2 <memcpy+0xe>
 8007ade:	bd10      	pop	{r4, pc}

08007ae0 <_free_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	2900      	cmp	r1, #0
 8007ae6:	d041      	beq.n	8007b6c <_free_r+0x8c>
 8007ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aec:	1f0c      	subs	r4, r1, #4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	bfb8      	it	lt
 8007af2:	18e4      	addlt	r4, r4, r3
 8007af4:	f000 f8e0 	bl	8007cb8 <__malloc_lock>
 8007af8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b70 <_free_r+0x90>)
 8007afa:	6813      	ldr	r3, [r2, #0]
 8007afc:	b933      	cbnz	r3, 8007b0c <_free_r+0x2c>
 8007afe:	6063      	str	r3, [r4, #4]
 8007b00:	6014      	str	r4, [r2, #0]
 8007b02:	4628      	mov	r0, r5
 8007b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b08:	f000 b8dc 	b.w	8007cc4 <__malloc_unlock>
 8007b0c:	42a3      	cmp	r3, r4
 8007b0e:	d908      	bls.n	8007b22 <_free_r+0x42>
 8007b10:	6820      	ldr	r0, [r4, #0]
 8007b12:	1821      	adds	r1, r4, r0
 8007b14:	428b      	cmp	r3, r1
 8007b16:	bf01      	itttt	eq
 8007b18:	6819      	ldreq	r1, [r3, #0]
 8007b1a:	685b      	ldreq	r3, [r3, #4]
 8007b1c:	1809      	addeq	r1, r1, r0
 8007b1e:	6021      	streq	r1, [r4, #0]
 8007b20:	e7ed      	b.n	8007afe <_free_r+0x1e>
 8007b22:	461a      	mov	r2, r3
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	b10b      	cbz	r3, 8007b2c <_free_r+0x4c>
 8007b28:	42a3      	cmp	r3, r4
 8007b2a:	d9fa      	bls.n	8007b22 <_free_r+0x42>
 8007b2c:	6811      	ldr	r1, [r2, #0]
 8007b2e:	1850      	adds	r0, r2, r1
 8007b30:	42a0      	cmp	r0, r4
 8007b32:	d10b      	bne.n	8007b4c <_free_r+0x6c>
 8007b34:	6820      	ldr	r0, [r4, #0]
 8007b36:	4401      	add	r1, r0
 8007b38:	1850      	adds	r0, r2, r1
 8007b3a:	4283      	cmp	r3, r0
 8007b3c:	6011      	str	r1, [r2, #0]
 8007b3e:	d1e0      	bne.n	8007b02 <_free_r+0x22>
 8007b40:	6818      	ldr	r0, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	6053      	str	r3, [r2, #4]
 8007b46:	4408      	add	r0, r1
 8007b48:	6010      	str	r0, [r2, #0]
 8007b4a:	e7da      	b.n	8007b02 <_free_r+0x22>
 8007b4c:	d902      	bls.n	8007b54 <_free_r+0x74>
 8007b4e:	230c      	movs	r3, #12
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	e7d6      	b.n	8007b02 <_free_r+0x22>
 8007b54:	6820      	ldr	r0, [r4, #0]
 8007b56:	1821      	adds	r1, r4, r0
 8007b58:	428b      	cmp	r3, r1
 8007b5a:	bf04      	itt	eq
 8007b5c:	6819      	ldreq	r1, [r3, #0]
 8007b5e:	685b      	ldreq	r3, [r3, #4]
 8007b60:	6063      	str	r3, [r4, #4]
 8007b62:	bf04      	itt	eq
 8007b64:	1809      	addeq	r1, r1, r0
 8007b66:	6021      	streq	r1, [r4, #0]
 8007b68:	6054      	str	r4, [r2, #4]
 8007b6a:	e7ca      	b.n	8007b02 <_free_r+0x22>
 8007b6c:	bd38      	pop	{r3, r4, r5, pc}
 8007b6e:	bf00      	nop
 8007b70:	20006468 	.word	0x20006468

08007b74 <sbrk_aligned>:
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	4e0f      	ldr	r6, [pc, #60]	@ (8007bb4 <sbrk_aligned+0x40>)
 8007b78:	460c      	mov	r4, r1
 8007b7a:	6831      	ldr	r1, [r6, #0]
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	b911      	cbnz	r1, 8007b86 <sbrk_aligned+0x12>
 8007b80:	f000 fbaa 	bl	80082d8 <_sbrk_r>
 8007b84:	6030      	str	r0, [r6, #0]
 8007b86:	4621      	mov	r1, r4
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f000 fba5 	bl	80082d8 <_sbrk_r>
 8007b8e:	1c43      	adds	r3, r0, #1
 8007b90:	d103      	bne.n	8007b9a <sbrk_aligned+0x26>
 8007b92:	f04f 34ff 	mov.w	r4, #4294967295
 8007b96:	4620      	mov	r0, r4
 8007b98:	bd70      	pop	{r4, r5, r6, pc}
 8007b9a:	1cc4      	adds	r4, r0, #3
 8007b9c:	f024 0403 	bic.w	r4, r4, #3
 8007ba0:	42a0      	cmp	r0, r4
 8007ba2:	d0f8      	beq.n	8007b96 <sbrk_aligned+0x22>
 8007ba4:	1a21      	subs	r1, r4, r0
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f000 fb96 	bl	80082d8 <_sbrk_r>
 8007bac:	3001      	adds	r0, #1
 8007bae:	d1f2      	bne.n	8007b96 <sbrk_aligned+0x22>
 8007bb0:	e7ef      	b.n	8007b92 <sbrk_aligned+0x1e>
 8007bb2:	bf00      	nop
 8007bb4:	20006464 	.word	0x20006464

08007bb8 <_malloc_r>:
 8007bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bbc:	1ccd      	adds	r5, r1, #3
 8007bbe:	f025 0503 	bic.w	r5, r5, #3
 8007bc2:	3508      	adds	r5, #8
 8007bc4:	2d0c      	cmp	r5, #12
 8007bc6:	bf38      	it	cc
 8007bc8:	250c      	movcc	r5, #12
 8007bca:	2d00      	cmp	r5, #0
 8007bcc:	4606      	mov	r6, r0
 8007bce:	db01      	blt.n	8007bd4 <_malloc_r+0x1c>
 8007bd0:	42a9      	cmp	r1, r5
 8007bd2:	d904      	bls.n	8007bde <_malloc_r+0x26>
 8007bd4:	230c      	movs	r3, #12
 8007bd6:	6033      	str	r3, [r6, #0]
 8007bd8:	2000      	movs	r0, #0
 8007bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007cb4 <_malloc_r+0xfc>
 8007be2:	f000 f869 	bl	8007cb8 <__malloc_lock>
 8007be6:	f8d8 3000 	ldr.w	r3, [r8]
 8007bea:	461c      	mov	r4, r3
 8007bec:	bb44      	cbnz	r4, 8007c40 <_malloc_r+0x88>
 8007bee:	4629      	mov	r1, r5
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f7ff ffbf 	bl	8007b74 <sbrk_aligned>
 8007bf6:	1c43      	adds	r3, r0, #1
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	d158      	bne.n	8007cae <_malloc_r+0xf6>
 8007bfc:	f8d8 4000 	ldr.w	r4, [r8]
 8007c00:	4627      	mov	r7, r4
 8007c02:	2f00      	cmp	r7, #0
 8007c04:	d143      	bne.n	8007c8e <_malloc_r+0xd6>
 8007c06:	2c00      	cmp	r4, #0
 8007c08:	d04b      	beq.n	8007ca2 <_malloc_r+0xea>
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	4639      	mov	r1, r7
 8007c0e:	4630      	mov	r0, r6
 8007c10:	eb04 0903 	add.w	r9, r4, r3
 8007c14:	f000 fb60 	bl	80082d8 <_sbrk_r>
 8007c18:	4581      	cmp	r9, r0
 8007c1a:	d142      	bne.n	8007ca2 <_malloc_r+0xea>
 8007c1c:	6821      	ldr	r1, [r4, #0]
 8007c1e:	1a6d      	subs	r5, r5, r1
 8007c20:	4629      	mov	r1, r5
 8007c22:	4630      	mov	r0, r6
 8007c24:	f7ff ffa6 	bl	8007b74 <sbrk_aligned>
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d03a      	beq.n	8007ca2 <_malloc_r+0xea>
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	442b      	add	r3, r5
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	f8d8 3000 	ldr.w	r3, [r8]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	bb62      	cbnz	r2, 8007c94 <_malloc_r+0xdc>
 8007c3a:	f8c8 7000 	str.w	r7, [r8]
 8007c3e:	e00f      	b.n	8007c60 <_malloc_r+0xa8>
 8007c40:	6822      	ldr	r2, [r4, #0]
 8007c42:	1b52      	subs	r2, r2, r5
 8007c44:	d420      	bmi.n	8007c88 <_malloc_r+0xd0>
 8007c46:	2a0b      	cmp	r2, #11
 8007c48:	d917      	bls.n	8007c7a <_malloc_r+0xc2>
 8007c4a:	1961      	adds	r1, r4, r5
 8007c4c:	42a3      	cmp	r3, r4
 8007c4e:	6025      	str	r5, [r4, #0]
 8007c50:	bf18      	it	ne
 8007c52:	6059      	strne	r1, [r3, #4]
 8007c54:	6863      	ldr	r3, [r4, #4]
 8007c56:	bf08      	it	eq
 8007c58:	f8c8 1000 	streq.w	r1, [r8]
 8007c5c:	5162      	str	r2, [r4, r5]
 8007c5e:	604b      	str	r3, [r1, #4]
 8007c60:	4630      	mov	r0, r6
 8007c62:	f000 f82f 	bl	8007cc4 <__malloc_unlock>
 8007c66:	f104 000b 	add.w	r0, r4, #11
 8007c6a:	1d23      	adds	r3, r4, #4
 8007c6c:	f020 0007 	bic.w	r0, r0, #7
 8007c70:	1ac2      	subs	r2, r0, r3
 8007c72:	bf1c      	itt	ne
 8007c74:	1a1b      	subne	r3, r3, r0
 8007c76:	50a3      	strne	r3, [r4, r2]
 8007c78:	e7af      	b.n	8007bda <_malloc_r+0x22>
 8007c7a:	6862      	ldr	r2, [r4, #4]
 8007c7c:	42a3      	cmp	r3, r4
 8007c7e:	bf0c      	ite	eq
 8007c80:	f8c8 2000 	streq.w	r2, [r8]
 8007c84:	605a      	strne	r2, [r3, #4]
 8007c86:	e7eb      	b.n	8007c60 <_malloc_r+0xa8>
 8007c88:	4623      	mov	r3, r4
 8007c8a:	6864      	ldr	r4, [r4, #4]
 8007c8c:	e7ae      	b.n	8007bec <_malloc_r+0x34>
 8007c8e:	463c      	mov	r4, r7
 8007c90:	687f      	ldr	r7, [r7, #4]
 8007c92:	e7b6      	b.n	8007c02 <_malloc_r+0x4a>
 8007c94:	461a      	mov	r2, r3
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	42a3      	cmp	r3, r4
 8007c9a:	d1fb      	bne.n	8007c94 <_malloc_r+0xdc>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	6053      	str	r3, [r2, #4]
 8007ca0:	e7de      	b.n	8007c60 <_malloc_r+0xa8>
 8007ca2:	230c      	movs	r3, #12
 8007ca4:	6033      	str	r3, [r6, #0]
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f000 f80c 	bl	8007cc4 <__malloc_unlock>
 8007cac:	e794      	b.n	8007bd8 <_malloc_r+0x20>
 8007cae:	6005      	str	r5, [r0, #0]
 8007cb0:	e7d6      	b.n	8007c60 <_malloc_r+0xa8>
 8007cb2:	bf00      	nop
 8007cb4:	20006468 	.word	0x20006468

08007cb8 <__malloc_lock>:
 8007cb8:	4801      	ldr	r0, [pc, #4]	@ (8007cc0 <__malloc_lock+0x8>)
 8007cba:	f7ff bf01 	b.w	8007ac0 <__retarget_lock_acquire_recursive>
 8007cbe:	bf00      	nop
 8007cc0:	20006460 	.word	0x20006460

08007cc4 <__malloc_unlock>:
 8007cc4:	4801      	ldr	r0, [pc, #4]	@ (8007ccc <__malloc_unlock+0x8>)
 8007cc6:	f7ff befc 	b.w	8007ac2 <__retarget_lock_release_recursive>
 8007cca:	bf00      	nop
 8007ccc:	20006460 	.word	0x20006460

08007cd0 <__ssputs_r>:
 8007cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd4:	688e      	ldr	r6, [r1, #8]
 8007cd6:	461f      	mov	r7, r3
 8007cd8:	42be      	cmp	r6, r7
 8007cda:	4682      	mov	sl, r0
 8007cdc:	460c      	mov	r4, r1
 8007cde:	4690      	mov	r8, r2
 8007ce0:	4633      	mov	r3, r6
 8007ce2:	d853      	bhi.n	8007d8c <__ssputs_r+0xbc>
 8007ce4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8007ce8:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 8007cec:	d02b      	beq.n	8007d46 <__ssputs_r+0x76>
 8007cee:	6965      	ldr	r5, [r4, #20]
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	6909      	ldr	r1, [r1, #16]
 8007cf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cf8:	eba3 0901 	sub.w	r9, r3, r1
 8007cfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d00:	1c7b      	adds	r3, r7, #1
 8007d02:	106d      	asrs	r5, r5, #1
 8007d04:	444b      	add	r3, r9
 8007d06:	42ab      	cmp	r3, r5
 8007d08:	462a      	mov	r2, r5
 8007d0a:	bf84      	itt	hi
 8007d0c:	461d      	movhi	r5, r3
 8007d0e:	462a      	movhi	r2, r5
 8007d10:	0543      	lsls	r3, r0, #21
 8007d12:	d527      	bpl.n	8007d64 <__ssputs_r+0x94>
 8007d14:	4611      	mov	r1, r2
 8007d16:	4650      	mov	r0, sl
 8007d18:	f7ff ff4e 	bl	8007bb8 <_malloc_r>
 8007d1c:	4606      	mov	r6, r0
 8007d1e:	b358      	cbz	r0, 8007d78 <__ssputs_r+0xa8>
 8007d20:	6921      	ldr	r1, [r4, #16]
 8007d22:	464a      	mov	r2, r9
 8007d24:	f7ff fece 	bl	8007ac4 <memcpy>
 8007d28:	89a3      	ldrh	r3, [r4, #12]
 8007d2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d32:	81a3      	strh	r3, [r4, #12]
 8007d34:	6126      	str	r6, [r4, #16]
 8007d36:	6165      	str	r5, [r4, #20]
 8007d38:	444e      	add	r6, r9
 8007d3a:	eba5 0509 	sub.w	r5, r5, r9
 8007d3e:	6026      	str	r6, [r4, #0]
 8007d40:	60a5      	str	r5, [r4, #8]
 8007d42:	463e      	mov	r6, r7
 8007d44:	463b      	mov	r3, r7
 8007d46:	461f      	mov	r7, r3
 8007d48:	6820      	ldr	r0, [r4, #0]
 8007d4a:	463a      	mov	r2, r7
 8007d4c:	4641      	mov	r1, r8
 8007d4e:	f000 faa9 	bl	80082a4 <memmove>
 8007d52:	68a3      	ldr	r3, [r4, #8]
 8007d54:	1b9b      	subs	r3, r3, r6
 8007d56:	60a3      	str	r3, [r4, #8]
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	443b      	add	r3, r7
 8007d5c:	6023      	str	r3, [r4, #0]
 8007d5e:	2000      	movs	r0, #0
 8007d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d64:	4650      	mov	r0, sl
 8007d66:	f000 fac7 	bl	80082f8 <_realloc_r>
 8007d6a:	4606      	mov	r6, r0
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d1e1      	bne.n	8007d34 <__ssputs_r+0x64>
 8007d70:	6921      	ldr	r1, [r4, #16]
 8007d72:	4650      	mov	r0, sl
 8007d74:	f7ff feb4 	bl	8007ae0 <_free_r>
 8007d78:	230c      	movs	r3, #12
 8007d7a:	f8ca 3000 	str.w	r3, [sl]
 8007d7e:	89a3      	ldrh	r3, [r4, #12]
 8007d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d84:	81a3      	strh	r3, [r4, #12]
 8007d86:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8a:	e7e9      	b.n	8007d60 <__ssputs_r+0x90>
 8007d8c:	463e      	mov	r6, r7
 8007d8e:	e7db      	b.n	8007d48 <__ssputs_r+0x78>

08007d90 <_svfiprintf_r>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	4698      	mov	r8, r3
 8007d96:	898b      	ldrh	r3, [r1, #12]
 8007d98:	061b      	lsls	r3, r3, #24
 8007d9a:	b09d      	sub	sp, #116	@ 0x74
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	460d      	mov	r5, r1
 8007da0:	4614      	mov	r4, r2
 8007da2:	d510      	bpl.n	8007dc6 <_svfiprintf_r+0x36>
 8007da4:	690b      	ldr	r3, [r1, #16]
 8007da6:	b973      	cbnz	r3, 8007dc6 <_svfiprintf_r+0x36>
 8007da8:	2140      	movs	r1, #64	@ 0x40
 8007daa:	f7ff ff05 	bl	8007bb8 <_malloc_r>
 8007dae:	6028      	str	r0, [r5, #0]
 8007db0:	6128      	str	r0, [r5, #16]
 8007db2:	b930      	cbnz	r0, 8007dc2 <_svfiprintf_r+0x32>
 8007db4:	230c      	movs	r3, #12
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	b01d      	add	sp, #116	@ 0x74
 8007dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc2:	2340      	movs	r3, #64	@ 0x40
 8007dc4:	616b      	str	r3, [r5, #20]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dca:	2320      	movs	r3, #32
 8007dcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dd4:	2330      	movs	r3, #48	@ 0x30
 8007dd6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f74 <_svfiprintf_r+0x1e4>
 8007dda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dde:	f04f 0901 	mov.w	r9, #1
 8007de2:	4623      	mov	r3, r4
 8007de4:	469a      	mov	sl, r3
 8007de6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dea:	b10a      	cbz	r2, 8007df0 <_svfiprintf_r+0x60>
 8007dec:	2a25      	cmp	r2, #37	@ 0x25
 8007dee:	d1f9      	bne.n	8007de4 <_svfiprintf_r+0x54>
 8007df0:	ebba 0b04 	subs.w	fp, sl, r4
 8007df4:	d00b      	beq.n	8007e0e <_svfiprintf_r+0x7e>
 8007df6:	465b      	mov	r3, fp
 8007df8:	4622      	mov	r2, r4
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	f7ff ff67 	bl	8007cd0 <__ssputs_r>
 8007e02:	3001      	adds	r0, #1
 8007e04:	f000 80a7 	beq.w	8007f56 <_svfiprintf_r+0x1c6>
 8007e08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e0a:	445a      	add	r2, fp
 8007e0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 809f 	beq.w	8007f56 <_svfiprintf_r+0x1c6>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e22:	f10a 0a01 	add.w	sl, sl, #1
 8007e26:	9304      	str	r3, [sp, #16]
 8007e28:	9307      	str	r3, [sp, #28]
 8007e2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e30:	4654      	mov	r4, sl
 8007e32:	2205      	movs	r2, #5
 8007e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e38:	484e      	ldr	r0, [pc, #312]	@ (8007f74 <_svfiprintf_r+0x1e4>)
 8007e3a:	f7f8 f9b9 	bl	80001b0 <memchr>
 8007e3e:	9a04      	ldr	r2, [sp, #16]
 8007e40:	b9d8      	cbnz	r0, 8007e7a <_svfiprintf_r+0xea>
 8007e42:	06d0      	lsls	r0, r2, #27
 8007e44:	bf44      	itt	mi
 8007e46:	2320      	movmi	r3, #32
 8007e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e4c:	0711      	lsls	r1, r2, #28
 8007e4e:	bf44      	itt	mi
 8007e50:	232b      	movmi	r3, #43	@ 0x2b
 8007e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e56:	f89a 3000 	ldrb.w	r3, [sl]
 8007e5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e5c:	d015      	beq.n	8007e8a <_svfiprintf_r+0xfa>
 8007e5e:	9a07      	ldr	r2, [sp, #28]
 8007e60:	4654      	mov	r4, sl
 8007e62:	2000      	movs	r0, #0
 8007e64:	f04f 0c0a 	mov.w	ip, #10
 8007e68:	4621      	mov	r1, r4
 8007e6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e6e:	3b30      	subs	r3, #48	@ 0x30
 8007e70:	2b09      	cmp	r3, #9
 8007e72:	d94b      	bls.n	8007f0c <_svfiprintf_r+0x17c>
 8007e74:	b1b0      	cbz	r0, 8007ea4 <_svfiprintf_r+0x114>
 8007e76:	9207      	str	r2, [sp, #28]
 8007e78:	e014      	b.n	8007ea4 <_svfiprintf_r+0x114>
 8007e7a:	eba0 0308 	sub.w	r3, r0, r8
 8007e7e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e82:	4313      	orrs	r3, r2
 8007e84:	9304      	str	r3, [sp, #16]
 8007e86:	46a2      	mov	sl, r4
 8007e88:	e7d2      	b.n	8007e30 <_svfiprintf_r+0xa0>
 8007e8a:	9b03      	ldr	r3, [sp, #12]
 8007e8c:	1d19      	adds	r1, r3, #4
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	9103      	str	r1, [sp, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bfbb      	ittet	lt
 8007e96:	425b      	neglt	r3, r3
 8007e98:	f042 0202 	orrlt.w	r2, r2, #2
 8007e9c:	9307      	strge	r3, [sp, #28]
 8007e9e:	9307      	strlt	r3, [sp, #28]
 8007ea0:	bfb8      	it	lt
 8007ea2:	9204      	strlt	r2, [sp, #16]
 8007ea4:	7823      	ldrb	r3, [r4, #0]
 8007ea6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ea8:	d10a      	bne.n	8007ec0 <_svfiprintf_r+0x130>
 8007eaa:	7863      	ldrb	r3, [r4, #1]
 8007eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eae:	d132      	bne.n	8007f16 <_svfiprintf_r+0x186>
 8007eb0:	9b03      	ldr	r3, [sp, #12]
 8007eb2:	1d1a      	adds	r2, r3, #4
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	9203      	str	r2, [sp, #12]
 8007eb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ebc:	3402      	adds	r4, #2
 8007ebe:	9305      	str	r3, [sp, #20]
 8007ec0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f84 <_svfiprintf_r+0x1f4>
 8007ec4:	7821      	ldrb	r1, [r4, #0]
 8007ec6:	2203      	movs	r2, #3
 8007ec8:	4650      	mov	r0, sl
 8007eca:	f7f8 f971 	bl	80001b0 <memchr>
 8007ece:	b138      	cbz	r0, 8007ee0 <_svfiprintf_r+0x150>
 8007ed0:	9b04      	ldr	r3, [sp, #16]
 8007ed2:	eba0 000a 	sub.w	r0, r0, sl
 8007ed6:	2240      	movs	r2, #64	@ 0x40
 8007ed8:	4082      	lsls	r2, r0
 8007eda:	4313      	orrs	r3, r2
 8007edc:	3401      	adds	r4, #1
 8007ede:	9304      	str	r3, [sp, #16]
 8007ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee4:	4824      	ldr	r0, [pc, #144]	@ (8007f78 <_svfiprintf_r+0x1e8>)
 8007ee6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007eea:	2206      	movs	r2, #6
 8007eec:	f7f8 f960 	bl	80001b0 <memchr>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d036      	beq.n	8007f62 <_svfiprintf_r+0x1d2>
 8007ef4:	4b21      	ldr	r3, [pc, #132]	@ (8007f7c <_svfiprintf_r+0x1ec>)
 8007ef6:	bb1b      	cbnz	r3, 8007f40 <_svfiprintf_r+0x1b0>
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	3307      	adds	r3, #7
 8007efc:	f023 0307 	bic.w	r3, r3, #7
 8007f00:	3308      	adds	r3, #8
 8007f02:	9303      	str	r3, [sp, #12]
 8007f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f06:	4433      	add	r3, r6
 8007f08:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f0a:	e76a      	b.n	8007de2 <_svfiprintf_r+0x52>
 8007f0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f10:	460c      	mov	r4, r1
 8007f12:	2001      	movs	r0, #1
 8007f14:	e7a8      	b.n	8007e68 <_svfiprintf_r+0xd8>
 8007f16:	2300      	movs	r3, #0
 8007f18:	3401      	adds	r4, #1
 8007f1a:	9305      	str	r3, [sp, #20]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	f04f 0c0a 	mov.w	ip, #10
 8007f22:	4620      	mov	r0, r4
 8007f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f28:	3a30      	subs	r2, #48	@ 0x30
 8007f2a:	2a09      	cmp	r2, #9
 8007f2c:	d903      	bls.n	8007f36 <_svfiprintf_r+0x1a6>
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0c6      	beq.n	8007ec0 <_svfiprintf_r+0x130>
 8007f32:	9105      	str	r1, [sp, #20]
 8007f34:	e7c4      	b.n	8007ec0 <_svfiprintf_r+0x130>
 8007f36:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e7f0      	b.n	8007f22 <_svfiprintf_r+0x192>
 8007f40:	ab03      	add	r3, sp, #12
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	462a      	mov	r2, r5
 8007f46:	4b0e      	ldr	r3, [pc, #56]	@ (8007f80 <_svfiprintf_r+0x1f0>)
 8007f48:	a904      	add	r1, sp, #16
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	f3af 8000 	nop.w
 8007f50:	1c42      	adds	r2, r0, #1
 8007f52:	4606      	mov	r6, r0
 8007f54:	d1d6      	bne.n	8007f04 <_svfiprintf_r+0x174>
 8007f56:	89ab      	ldrh	r3, [r5, #12]
 8007f58:	065b      	lsls	r3, r3, #25
 8007f5a:	f53f af2d 	bmi.w	8007db8 <_svfiprintf_r+0x28>
 8007f5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f60:	e72c      	b.n	8007dbc <_svfiprintf_r+0x2c>
 8007f62:	ab03      	add	r3, sp, #12
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	462a      	mov	r2, r5
 8007f68:	4b05      	ldr	r3, [pc, #20]	@ (8007f80 <_svfiprintf_r+0x1f0>)
 8007f6a:	a904      	add	r1, sp, #16
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	f000 f879 	bl	8008064 <_printf_i>
 8007f72:	e7ed      	b.n	8007f50 <_svfiprintf_r+0x1c0>
 8007f74:	08008854 	.word	0x08008854
 8007f78:	0800885e 	.word	0x0800885e
 8007f7c:	00000000 	.word	0x00000000
 8007f80:	08007cd1 	.word	0x08007cd1
 8007f84:	0800885a 	.word	0x0800885a

08007f88 <_printf_common>:
 8007f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f8c:	4616      	mov	r6, r2
 8007f8e:	4698      	mov	r8, r3
 8007f90:	688a      	ldr	r2, [r1, #8]
 8007f92:	690b      	ldr	r3, [r1, #16]
 8007f94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	bfb8      	it	lt
 8007f9c:	4613      	movlt	r3, r2
 8007f9e:	6033      	str	r3, [r6, #0]
 8007fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fa4:	4607      	mov	r7, r0
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	b10a      	cbz	r2, 8007fae <_printf_common+0x26>
 8007faa:	3301      	adds	r3, #1
 8007fac:	6033      	str	r3, [r6, #0]
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	0699      	lsls	r1, r3, #26
 8007fb2:	bf42      	ittt	mi
 8007fb4:	6833      	ldrmi	r3, [r6, #0]
 8007fb6:	3302      	addmi	r3, #2
 8007fb8:	6033      	strmi	r3, [r6, #0]
 8007fba:	6825      	ldr	r5, [r4, #0]
 8007fbc:	f015 0506 	ands.w	r5, r5, #6
 8007fc0:	d106      	bne.n	8007fd0 <_printf_common+0x48>
 8007fc2:	f104 0a19 	add.w	sl, r4, #25
 8007fc6:	68e3      	ldr	r3, [r4, #12]
 8007fc8:	6832      	ldr	r2, [r6, #0]
 8007fca:	1a9b      	subs	r3, r3, r2
 8007fcc:	42ab      	cmp	r3, r5
 8007fce:	dc26      	bgt.n	800801e <_printf_common+0x96>
 8007fd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007fd4:	6822      	ldr	r2, [r4, #0]
 8007fd6:	3b00      	subs	r3, #0
 8007fd8:	bf18      	it	ne
 8007fda:	2301      	movne	r3, #1
 8007fdc:	0692      	lsls	r2, r2, #26
 8007fde:	d42b      	bmi.n	8008038 <_printf_common+0xb0>
 8007fe0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fe4:	4641      	mov	r1, r8
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	47c8      	blx	r9
 8007fea:	3001      	adds	r0, #1
 8007fec:	d01e      	beq.n	800802c <_printf_common+0xa4>
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	6922      	ldr	r2, [r4, #16]
 8007ff2:	f003 0306 	and.w	r3, r3, #6
 8007ff6:	2b04      	cmp	r3, #4
 8007ff8:	bf02      	ittt	eq
 8007ffa:	68e5      	ldreq	r5, [r4, #12]
 8007ffc:	6833      	ldreq	r3, [r6, #0]
 8007ffe:	1aed      	subeq	r5, r5, r3
 8008000:	68a3      	ldr	r3, [r4, #8]
 8008002:	bf0c      	ite	eq
 8008004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008008:	2500      	movne	r5, #0
 800800a:	4293      	cmp	r3, r2
 800800c:	bfc4      	itt	gt
 800800e:	1a9b      	subgt	r3, r3, r2
 8008010:	18ed      	addgt	r5, r5, r3
 8008012:	2600      	movs	r6, #0
 8008014:	341a      	adds	r4, #26
 8008016:	42b5      	cmp	r5, r6
 8008018:	d11a      	bne.n	8008050 <_printf_common+0xc8>
 800801a:	2000      	movs	r0, #0
 800801c:	e008      	b.n	8008030 <_printf_common+0xa8>
 800801e:	2301      	movs	r3, #1
 8008020:	4652      	mov	r2, sl
 8008022:	4641      	mov	r1, r8
 8008024:	4638      	mov	r0, r7
 8008026:	47c8      	blx	r9
 8008028:	3001      	adds	r0, #1
 800802a:	d103      	bne.n	8008034 <_printf_common+0xac>
 800802c:	f04f 30ff 	mov.w	r0, #4294967295
 8008030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008034:	3501      	adds	r5, #1
 8008036:	e7c6      	b.n	8007fc6 <_printf_common+0x3e>
 8008038:	18e1      	adds	r1, r4, r3
 800803a:	1c5a      	adds	r2, r3, #1
 800803c:	2030      	movs	r0, #48	@ 0x30
 800803e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008042:	4422      	add	r2, r4
 8008044:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008048:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800804c:	3302      	adds	r3, #2
 800804e:	e7c7      	b.n	8007fe0 <_printf_common+0x58>
 8008050:	2301      	movs	r3, #1
 8008052:	4622      	mov	r2, r4
 8008054:	4641      	mov	r1, r8
 8008056:	4638      	mov	r0, r7
 8008058:	47c8      	blx	r9
 800805a:	3001      	adds	r0, #1
 800805c:	d0e6      	beq.n	800802c <_printf_common+0xa4>
 800805e:	3601      	adds	r6, #1
 8008060:	e7d9      	b.n	8008016 <_printf_common+0x8e>
	...

08008064 <_printf_i>:
 8008064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008068:	7e0f      	ldrb	r7, [r1, #24]
 800806a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800806c:	2f78      	cmp	r7, #120	@ 0x78
 800806e:	4691      	mov	r9, r2
 8008070:	4680      	mov	r8, r0
 8008072:	460c      	mov	r4, r1
 8008074:	469a      	mov	sl, r3
 8008076:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800807a:	d807      	bhi.n	800808c <_printf_i+0x28>
 800807c:	2f62      	cmp	r7, #98	@ 0x62
 800807e:	d80a      	bhi.n	8008096 <_printf_i+0x32>
 8008080:	2f00      	cmp	r7, #0
 8008082:	f000 80d2 	beq.w	800822a <_printf_i+0x1c6>
 8008086:	2f58      	cmp	r7, #88	@ 0x58
 8008088:	f000 80b7 	beq.w	80081fa <_printf_i+0x196>
 800808c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008090:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008094:	e03a      	b.n	800810c <_printf_i+0xa8>
 8008096:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800809a:	2b15      	cmp	r3, #21
 800809c:	d8f6      	bhi.n	800808c <_printf_i+0x28>
 800809e:	a101      	add	r1, pc, #4	@ (adr r1, 80080a4 <_printf_i+0x40>)
 80080a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080a4:	080080fd 	.word	0x080080fd
 80080a8:	08008111 	.word	0x08008111
 80080ac:	0800808d 	.word	0x0800808d
 80080b0:	0800808d 	.word	0x0800808d
 80080b4:	0800808d 	.word	0x0800808d
 80080b8:	0800808d 	.word	0x0800808d
 80080bc:	08008111 	.word	0x08008111
 80080c0:	0800808d 	.word	0x0800808d
 80080c4:	0800808d 	.word	0x0800808d
 80080c8:	0800808d 	.word	0x0800808d
 80080cc:	0800808d 	.word	0x0800808d
 80080d0:	08008211 	.word	0x08008211
 80080d4:	0800813b 	.word	0x0800813b
 80080d8:	080081c7 	.word	0x080081c7
 80080dc:	0800808d 	.word	0x0800808d
 80080e0:	0800808d 	.word	0x0800808d
 80080e4:	08008233 	.word	0x08008233
 80080e8:	0800808d 	.word	0x0800808d
 80080ec:	0800813b 	.word	0x0800813b
 80080f0:	0800808d 	.word	0x0800808d
 80080f4:	0800808d 	.word	0x0800808d
 80080f8:	080081cf 	.word	0x080081cf
 80080fc:	6833      	ldr	r3, [r6, #0]
 80080fe:	1d1a      	adds	r2, r3, #4
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6032      	str	r2, [r6, #0]
 8008104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008108:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800810c:	2301      	movs	r3, #1
 800810e:	e09d      	b.n	800824c <_printf_i+0x1e8>
 8008110:	6833      	ldr	r3, [r6, #0]
 8008112:	6820      	ldr	r0, [r4, #0]
 8008114:	1d19      	adds	r1, r3, #4
 8008116:	6031      	str	r1, [r6, #0]
 8008118:	0606      	lsls	r6, r0, #24
 800811a:	d501      	bpl.n	8008120 <_printf_i+0xbc>
 800811c:	681d      	ldr	r5, [r3, #0]
 800811e:	e003      	b.n	8008128 <_printf_i+0xc4>
 8008120:	0645      	lsls	r5, r0, #25
 8008122:	d5fb      	bpl.n	800811c <_printf_i+0xb8>
 8008124:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008128:	2d00      	cmp	r5, #0
 800812a:	da03      	bge.n	8008134 <_printf_i+0xd0>
 800812c:	232d      	movs	r3, #45	@ 0x2d
 800812e:	426d      	negs	r5, r5
 8008130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008134:	4859      	ldr	r0, [pc, #356]	@ (800829c <_printf_i+0x238>)
 8008136:	230a      	movs	r3, #10
 8008138:	e010      	b.n	800815c <_printf_i+0xf8>
 800813a:	6821      	ldr	r1, [r4, #0]
 800813c:	6833      	ldr	r3, [r6, #0]
 800813e:	0608      	lsls	r0, r1, #24
 8008140:	f853 5b04 	ldr.w	r5, [r3], #4
 8008144:	d402      	bmi.n	800814c <_printf_i+0xe8>
 8008146:	0649      	lsls	r1, r1, #25
 8008148:	bf48      	it	mi
 800814a:	b2ad      	uxthmi	r5, r5
 800814c:	2f6f      	cmp	r7, #111	@ 0x6f
 800814e:	4853      	ldr	r0, [pc, #332]	@ (800829c <_printf_i+0x238>)
 8008150:	6033      	str	r3, [r6, #0]
 8008152:	d159      	bne.n	8008208 <_printf_i+0x1a4>
 8008154:	2308      	movs	r3, #8
 8008156:	2100      	movs	r1, #0
 8008158:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800815c:	6866      	ldr	r6, [r4, #4]
 800815e:	60a6      	str	r6, [r4, #8]
 8008160:	2e00      	cmp	r6, #0
 8008162:	db05      	blt.n	8008170 <_printf_i+0x10c>
 8008164:	6821      	ldr	r1, [r4, #0]
 8008166:	432e      	orrs	r6, r5
 8008168:	f021 0104 	bic.w	r1, r1, #4
 800816c:	6021      	str	r1, [r4, #0]
 800816e:	d04d      	beq.n	800820c <_printf_i+0x1a8>
 8008170:	4616      	mov	r6, r2
 8008172:	fbb5 f1f3 	udiv	r1, r5, r3
 8008176:	fb03 5711 	mls	r7, r3, r1, r5
 800817a:	5dc7      	ldrb	r7, [r0, r7]
 800817c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008180:	462f      	mov	r7, r5
 8008182:	42bb      	cmp	r3, r7
 8008184:	460d      	mov	r5, r1
 8008186:	d9f4      	bls.n	8008172 <_printf_i+0x10e>
 8008188:	2b08      	cmp	r3, #8
 800818a:	d10b      	bne.n	80081a4 <_printf_i+0x140>
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	07df      	lsls	r7, r3, #31
 8008190:	d508      	bpl.n	80081a4 <_printf_i+0x140>
 8008192:	6923      	ldr	r3, [r4, #16]
 8008194:	6861      	ldr	r1, [r4, #4]
 8008196:	4299      	cmp	r1, r3
 8008198:	bfde      	ittt	le
 800819a:	2330      	movle	r3, #48	@ 0x30
 800819c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081a4:	1b92      	subs	r2, r2, r6
 80081a6:	6122      	str	r2, [r4, #16]
 80081a8:	f8cd a000 	str.w	sl, [sp]
 80081ac:	464b      	mov	r3, r9
 80081ae:	aa03      	add	r2, sp, #12
 80081b0:	4621      	mov	r1, r4
 80081b2:	4640      	mov	r0, r8
 80081b4:	f7ff fee8 	bl	8007f88 <_printf_common>
 80081b8:	3001      	adds	r0, #1
 80081ba:	d14c      	bne.n	8008256 <_printf_i+0x1f2>
 80081bc:	f04f 30ff 	mov.w	r0, #4294967295
 80081c0:	b004      	add	sp, #16
 80081c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	f043 0320 	orr.w	r3, r3, #32
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	4834      	ldr	r0, [pc, #208]	@ (80082a0 <_printf_i+0x23c>)
 80081d0:	2778      	movs	r7, #120	@ 0x78
 80081d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	6831      	ldr	r1, [r6, #0]
 80081da:	061f      	lsls	r7, r3, #24
 80081dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80081e0:	d402      	bmi.n	80081e8 <_printf_i+0x184>
 80081e2:	065f      	lsls	r7, r3, #25
 80081e4:	bf48      	it	mi
 80081e6:	b2ad      	uxthmi	r5, r5
 80081e8:	6031      	str	r1, [r6, #0]
 80081ea:	07d9      	lsls	r1, r3, #31
 80081ec:	bf44      	itt	mi
 80081ee:	f043 0320 	orrmi.w	r3, r3, #32
 80081f2:	6023      	strmi	r3, [r4, #0]
 80081f4:	b11d      	cbz	r5, 80081fe <_printf_i+0x19a>
 80081f6:	2310      	movs	r3, #16
 80081f8:	e7ad      	b.n	8008156 <_printf_i+0xf2>
 80081fa:	4828      	ldr	r0, [pc, #160]	@ (800829c <_printf_i+0x238>)
 80081fc:	e7e9      	b.n	80081d2 <_printf_i+0x16e>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	f023 0320 	bic.w	r3, r3, #32
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	e7f6      	b.n	80081f6 <_printf_i+0x192>
 8008208:	230a      	movs	r3, #10
 800820a:	e7a4      	b.n	8008156 <_printf_i+0xf2>
 800820c:	4616      	mov	r6, r2
 800820e:	e7bb      	b.n	8008188 <_printf_i+0x124>
 8008210:	6833      	ldr	r3, [r6, #0]
 8008212:	6825      	ldr	r5, [r4, #0]
 8008214:	6961      	ldr	r1, [r4, #20]
 8008216:	1d18      	adds	r0, r3, #4
 8008218:	6030      	str	r0, [r6, #0]
 800821a:	062e      	lsls	r6, r5, #24
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	d501      	bpl.n	8008224 <_printf_i+0x1c0>
 8008220:	6019      	str	r1, [r3, #0]
 8008222:	e002      	b.n	800822a <_printf_i+0x1c6>
 8008224:	0668      	lsls	r0, r5, #25
 8008226:	d5fb      	bpl.n	8008220 <_printf_i+0x1bc>
 8008228:	8019      	strh	r1, [r3, #0]
 800822a:	2300      	movs	r3, #0
 800822c:	6123      	str	r3, [r4, #16]
 800822e:	4616      	mov	r6, r2
 8008230:	e7ba      	b.n	80081a8 <_printf_i+0x144>
 8008232:	6833      	ldr	r3, [r6, #0]
 8008234:	1d1a      	adds	r2, r3, #4
 8008236:	6032      	str	r2, [r6, #0]
 8008238:	681e      	ldr	r6, [r3, #0]
 800823a:	6862      	ldr	r2, [r4, #4]
 800823c:	2100      	movs	r1, #0
 800823e:	4630      	mov	r0, r6
 8008240:	f7f7 ffb6 	bl	80001b0 <memchr>
 8008244:	b108      	cbz	r0, 800824a <_printf_i+0x1e6>
 8008246:	1b80      	subs	r0, r0, r6
 8008248:	6060      	str	r0, [r4, #4]
 800824a:	6863      	ldr	r3, [r4, #4]
 800824c:	6123      	str	r3, [r4, #16]
 800824e:	2300      	movs	r3, #0
 8008250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008254:	e7a8      	b.n	80081a8 <_printf_i+0x144>
 8008256:	6923      	ldr	r3, [r4, #16]
 8008258:	4632      	mov	r2, r6
 800825a:	4649      	mov	r1, r9
 800825c:	4640      	mov	r0, r8
 800825e:	47d0      	blx	sl
 8008260:	3001      	adds	r0, #1
 8008262:	d0ab      	beq.n	80081bc <_printf_i+0x158>
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	079b      	lsls	r3, r3, #30
 8008268:	d413      	bmi.n	8008292 <_printf_i+0x22e>
 800826a:	68e0      	ldr	r0, [r4, #12]
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	4298      	cmp	r0, r3
 8008270:	bfb8      	it	lt
 8008272:	4618      	movlt	r0, r3
 8008274:	e7a4      	b.n	80081c0 <_printf_i+0x15c>
 8008276:	2301      	movs	r3, #1
 8008278:	4632      	mov	r2, r6
 800827a:	4649      	mov	r1, r9
 800827c:	4640      	mov	r0, r8
 800827e:	47d0      	blx	sl
 8008280:	3001      	adds	r0, #1
 8008282:	d09b      	beq.n	80081bc <_printf_i+0x158>
 8008284:	3501      	adds	r5, #1
 8008286:	68e3      	ldr	r3, [r4, #12]
 8008288:	9903      	ldr	r1, [sp, #12]
 800828a:	1a5b      	subs	r3, r3, r1
 800828c:	42ab      	cmp	r3, r5
 800828e:	dcf2      	bgt.n	8008276 <_printf_i+0x212>
 8008290:	e7eb      	b.n	800826a <_printf_i+0x206>
 8008292:	2500      	movs	r5, #0
 8008294:	f104 0619 	add.w	r6, r4, #25
 8008298:	e7f5      	b.n	8008286 <_printf_i+0x222>
 800829a:	bf00      	nop
 800829c:	08008865 	.word	0x08008865
 80082a0:	08008876 	.word	0x08008876

080082a4 <memmove>:
 80082a4:	4288      	cmp	r0, r1
 80082a6:	b510      	push	{r4, lr}
 80082a8:	eb01 0402 	add.w	r4, r1, r2
 80082ac:	d902      	bls.n	80082b4 <memmove+0x10>
 80082ae:	4284      	cmp	r4, r0
 80082b0:	4623      	mov	r3, r4
 80082b2:	d807      	bhi.n	80082c4 <memmove+0x20>
 80082b4:	1e43      	subs	r3, r0, #1
 80082b6:	42a1      	cmp	r1, r4
 80082b8:	d007      	beq.n	80082ca <memmove+0x26>
 80082ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082c2:	e7f8      	b.n	80082b6 <memmove+0x12>
 80082c4:	4402      	add	r2, r0
 80082c6:	4282      	cmp	r2, r0
 80082c8:	d100      	bne.n	80082cc <memmove+0x28>
 80082ca:	bd10      	pop	{r4, pc}
 80082cc:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80082d0:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80082d4:	e7f7      	b.n	80082c6 <memmove+0x22>
	...

080082d8 <_sbrk_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4d06      	ldr	r5, [pc, #24]	@ (80082f4 <_sbrk_r+0x1c>)
 80082dc:	2300      	movs	r3, #0
 80082de:	4604      	mov	r4, r0
 80082e0:	4608      	mov	r0, r1
 80082e2:	602b      	str	r3, [r5, #0]
 80082e4:	f7fc fd0c 	bl	8004d00 <_sbrk>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d102      	bne.n	80082f2 <_sbrk_r+0x1a>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	b103      	cbz	r3, 80082f2 <_sbrk_r+0x1a>
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	2000645c 	.word	0x2000645c

080082f8 <_realloc_r>:
 80082f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082fc:	4607      	mov	r7, r0
 80082fe:	4614      	mov	r4, r2
 8008300:	460d      	mov	r5, r1
 8008302:	b921      	cbnz	r1, 800830e <_realloc_r+0x16>
 8008304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008308:	4611      	mov	r1, r2
 800830a:	f7ff bc55 	b.w	8007bb8 <_malloc_r>
 800830e:	b92a      	cbnz	r2, 800831c <_realloc_r+0x24>
 8008310:	f7ff fbe6 	bl	8007ae0 <_free_r>
 8008314:	4625      	mov	r5, r4
 8008316:	4628      	mov	r0, r5
 8008318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800831c:	f000 f81a 	bl	8008354 <_malloc_usable_size_r>
 8008320:	4284      	cmp	r4, r0
 8008322:	4606      	mov	r6, r0
 8008324:	d802      	bhi.n	800832c <_realloc_r+0x34>
 8008326:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800832a:	d8f4      	bhi.n	8008316 <_realloc_r+0x1e>
 800832c:	4621      	mov	r1, r4
 800832e:	4638      	mov	r0, r7
 8008330:	f7ff fc42 	bl	8007bb8 <_malloc_r>
 8008334:	4680      	mov	r8, r0
 8008336:	b908      	cbnz	r0, 800833c <_realloc_r+0x44>
 8008338:	4645      	mov	r5, r8
 800833a:	e7ec      	b.n	8008316 <_realloc_r+0x1e>
 800833c:	42b4      	cmp	r4, r6
 800833e:	4622      	mov	r2, r4
 8008340:	4629      	mov	r1, r5
 8008342:	bf28      	it	cs
 8008344:	4632      	movcs	r2, r6
 8008346:	f7ff fbbd 	bl	8007ac4 <memcpy>
 800834a:	4629      	mov	r1, r5
 800834c:	4638      	mov	r0, r7
 800834e:	f7ff fbc7 	bl	8007ae0 <_free_r>
 8008352:	e7f1      	b.n	8008338 <_realloc_r+0x40>

08008354 <_malloc_usable_size_r>:
 8008354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008358:	1f18      	subs	r0, r3, #4
 800835a:	2b00      	cmp	r3, #0
 800835c:	bfbc      	itt	lt
 800835e:	580b      	ldrlt	r3, [r1, r0]
 8008360:	18c0      	addlt	r0, r0, r3
 8008362:	4770      	bx	lr

08008364 <__udivmoddi4>:
 8008364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008368:	9d08      	ldr	r5, [sp, #32]
 800836a:	460f      	mov	r7, r1
 800836c:	4604      	mov	r4, r0
 800836e:	468c      	mov	ip, r1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d148      	bne.n	8008406 <__udivmoddi4+0xa2>
 8008374:	428a      	cmp	r2, r1
 8008376:	4616      	mov	r6, r2
 8008378:	d961      	bls.n	800843e <__udivmoddi4+0xda>
 800837a:	fab2 f382 	clz	r3, r2
 800837e:	b14b      	cbz	r3, 8008394 <__udivmoddi4+0x30>
 8008380:	f1c3 0220 	rsb	r2, r3, #32
 8008384:	fa01 fc03 	lsl.w	ip, r1, r3
 8008388:	fa20 f202 	lsr.w	r2, r0, r2
 800838c:	409e      	lsls	r6, r3
 800838e:	ea42 0c0c 	orr.w	ip, r2, ip
 8008392:	409c      	lsls	r4, r3
 8008394:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8008398:	b2b7      	uxth	r7, r6
 800839a:	fbbc f1fe 	udiv	r1, ip, lr
 800839e:	0c22      	lsrs	r2, r4, #16
 80083a0:	fb0e cc11 	mls	ip, lr, r1, ip
 80083a4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80083a8:	fb01 f007 	mul.w	r0, r1, r7
 80083ac:	4290      	cmp	r0, r2
 80083ae:	d909      	bls.n	80083c4 <__udivmoddi4+0x60>
 80083b0:	18b2      	adds	r2, r6, r2
 80083b2:	f101 3cff 	add.w	ip, r1, #4294967295
 80083b6:	f080 80ee 	bcs.w	8008596 <__udivmoddi4+0x232>
 80083ba:	4290      	cmp	r0, r2
 80083bc:	f240 80eb 	bls.w	8008596 <__udivmoddi4+0x232>
 80083c0:	3902      	subs	r1, #2
 80083c2:	4432      	add	r2, r6
 80083c4:	1a12      	subs	r2, r2, r0
 80083c6:	b2a4      	uxth	r4, r4
 80083c8:	fbb2 f0fe 	udiv	r0, r2, lr
 80083cc:	fb0e 2210 	mls	r2, lr, r0, r2
 80083d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80083d4:	fb00 f707 	mul.w	r7, r0, r7
 80083d8:	42a7      	cmp	r7, r4
 80083da:	d909      	bls.n	80083f0 <__udivmoddi4+0x8c>
 80083dc:	1934      	adds	r4, r6, r4
 80083de:	f100 32ff 	add.w	r2, r0, #4294967295
 80083e2:	f080 80da 	bcs.w	800859a <__udivmoddi4+0x236>
 80083e6:	42a7      	cmp	r7, r4
 80083e8:	f240 80d7 	bls.w	800859a <__udivmoddi4+0x236>
 80083ec:	4434      	add	r4, r6
 80083ee:	3802      	subs	r0, #2
 80083f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80083f4:	1be4      	subs	r4, r4, r7
 80083f6:	2100      	movs	r1, #0
 80083f8:	b11d      	cbz	r5, 8008402 <__udivmoddi4+0x9e>
 80083fa:	40dc      	lsrs	r4, r3
 80083fc:	2300      	movs	r3, #0
 80083fe:	e9c5 4300 	strd	r4, r3, [r5]
 8008402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008406:	428b      	cmp	r3, r1
 8008408:	d906      	bls.n	8008418 <__udivmoddi4+0xb4>
 800840a:	b10d      	cbz	r5, 8008410 <__udivmoddi4+0xac>
 800840c:	e9c5 0100 	strd	r0, r1, [r5]
 8008410:	2100      	movs	r1, #0
 8008412:	4608      	mov	r0, r1
 8008414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008418:	fab3 f183 	clz	r1, r3
 800841c:	2900      	cmp	r1, #0
 800841e:	d148      	bne.n	80084b2 <__udivmoddi4+0x14e>
 8008420:	42bb      	cmp	r3, r7
 8008422:	d302      	bcc.n	800842a <__udivmoddi4+0xc6>
 8008424:	4282      	cmp	r2, r0
 8008426:	f200 8107 	bhi.w	8008638 <__udivmoddi4+0x2d4>
 800842a:	1a84      	subs	r4, r0, r2
 800842c:	eb67 0203 	sbc.w	r2, r7, r3
 8008430:	2001      	movs	r0, #1
 8008432:	4694      	mov	ip, r2
 8008434:	2d00      	cmp	r5, #0
 8008436:	d0e4      	beq.n	8008402 <__udivmoddi4+0x9e>
 8008438:	e9c5 4c00 	strd	r4, ip, [r5]
 800843c:	e7e1      	b.n	8008402 <__udivmoddi4+0x9e>
 800843e:	2a00      	cmp	r2, #0
 8008440:	f000 8092 	beq.w	8008568 <__udivmoddi4+0x204>
 8008444:	fab2 f382 	clz	r3, r2
 8008448:	2b00      	cmp	r3, #0
 800844a:	f040 80a8 	bne.w	800859e <__udivmoddi4+0x23a>
 800844e:	1a8a      	subs	r2, r1, r2
 8008450:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8008454:	fa1f fc86 	uxth.w	ip, r6
 8008458:	2101      	movs	r1, #1
 800845a:	0c20      	lsrs	r0, r4, #16
 800845c:	fbb2 f7fe 	udiv	r7, r2, lr
 8008460:	fb0e 2217 	mls	r2, lr, r7, r2
 8008464:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8008468:	fb0c f007 	mul.w	r0, ip, r7
 800846c:	4290      	cmp	r0, r2
 800846e:	d907      	bls.n	8008480 <__udivmoddi4+0x11c>
 8008470:	18b2      	adds	r2, r6, r2
 8008472:	f107 38ff 	add.w	r8, r7, #4294967295
 8008476:	d202      	bcs.n	800847e <__udivmoddi4+0x11a>
 8008478:	4290      	cmp	r0, r2
 800847a:	f200 80e2 	bhi.w	8008642 <__udivmoddi4+0x2de>
 800847e:	4647      	mov	r7, r8
 8008480:	1a12      	subs	r2, r2, r0
 8008482:	b2a4      	uxth	r4, r4
 8008484:	fbb2 f0fe 	udiv	r0, r2, lr
 8008488:	fb0e 2210 	mls	r2, lr, r0, r2
 800848c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008490:	fb0c fc00 	mul.w	ip, ip, r0
 8008494:	45a4      	cmp	ip, r4
 8008496:	d907      	bls.n	80084a8 <__udivmoddi4+0x144>
 8008498:	1934      	adds	r4, r6, r4
 800849a:	f100 32ff 	add.w	r2, r0, #4294967295
 800849e:	d202      	bcs.n	80084a6 <__udivmoddi4+0x142>
 80084a0:	45a4      	cmp	ip, r4
 80084a2:	f200 80cb 	bhi.w	800863c <__udivmoddi4+0x2d8>
 80084a6:	4610      	mov	r0, r2
 80084a8:	eba4 040c 	sub.w	r4, r4, ip
 80084ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80084b0:	e7a2      	b.n	80083f8 <__udivmoddi4+0x94>
 80084b2:	f1c1 0620 	rsb	r6, r1, #32
 80084b6:	408b      	lsls	r3, r1
 80084b8:	fa22 fc06 	lsr.w	ip, r2, r6
 80084bc:	ea4c 0c03 	orr.w	ip, ip, r3
 80084c0:	fa07 f401 	lsl.w	r4, r7, r1
 80084c4:	fa20 f306 	lsr.w	r3, r0, r6
 80084c8:	40f7      	lsrs	r7, r6
 80084ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80084ce:	4323      	orrs	r3, r4
 80084d0:	fa00 f801 	lsl.w	r8, r0, r1
 80084d4:	fa1f fe8c 	uxth.w	lr, ip
 80084d8:	fbb7 f0f9 	udiv	r0, r7, r9
 80084dc:	0c1c      	lsrs	r4, r3, #16
 80084de:	fb09 7710 	mls	r7, r9, r0, r7
 80084e2:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80084e6:	fb00 f70e 	mul.w	r7, r0, lr
 80084ea:	42a7      	cmp	r7, r4
 80084ec:	fa02 f201 	lsl.w	r2, r2, r1
 80084f0:	d90a      	bls.n	8008508 <__udivmoddi4+0x1a4>
 80084f2:	eb1c 0404 	adds.w	r4, ip, r4
 80084f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80084fa:	f080 809b 	bcs.w	8008634 <__udivmoddi4+0x2d0>
 80084fe:	42a7      	cmp	r7, r4
 8008500:	f240 8098 	bls.w	8008634 <__udivmoddi4+0x2d0>
 8008504:	3802      	subs	r0, #2
 8008506:	4464      	add	r4, ip
 8008508:	1be4      	subs	r4, r4, r7
 800850a:	b29f      	uxth	r7, r3
 800850c:	fbb4 f3f9 	udiv	r3, r4, r9
 8008510:	fb09 4413 	mls	r4, r9, r3, r4
 8008514:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8008518:	fb03 fe0e 	mul.w	lr, r3, lr
 800851c:	45a6      	cmp	lr, r4
 800851e:	d909      	bls.n	8008534 <__udivmoddi4+0x1d0>
 8008520:	eb1c 0404 	adds.w	r4, ip, r4
 8008524:	f103 37ff 	add.w	r7, r3, #4294967295
 8008528:	f080 8082 	bcs.w	8008630 <__udivmoddi4+0x2cc>
 800852c:	45a6      	cmp	lr, r4
 800852e:	d97f      	bls.n	8008630 <__udivmoddi4+0x2cc>
 8008530:	3b02      	subs	r3, #2
 8008532:	4464      	add	r4, ip
 8008534:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008538:	eba4 040e 	sub.w	r4, r4, lr
 800853c:	fba0 e702 	umull	lr, r7, r0, r2
 8008540:	42bc      	cmp	r4, r7
 8008542:	4673      	mov	r3, lr
 8008544:	46b9      	mov	r9, r7
 8008546:	d363      	bcc.n	8008610 <__udivmoddi4+0x2ac>
 8008548:	d060      	beq.n	800860c <__udivmoddi4+0x2a8>
 800854a:	b15d      	cbz	r5, 8008564 <__udivmoddi4+0x200>
 800854c:	ebb8 0203 	subs.w	r2, r8, r3
 8008550:	eb64 0409 	sbc.w	r4, r4, r9
 8008554:	fa04 f606 	lsl.w	r6, r4, r6
 8008558:	fa22 f301 	lsr.w	r3, r2, r1
 800855c:	431e      	orrs	r6, r3
 800855e:	40cc      	lsrs	r4, r1
 8008560:	e9c5 6400 	strd	r6, r4, [r5]
 8008564:	2100      	movs	r1, #0
 8008566:	e74c      	b.n	8008402 <__udivmoddi4+0x9e>
 8008568:	0862      	lsrs	r2, r4, #1
 800856a:	0848      	lsrs	r0, r1, #1
 800856c:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8008570:	0c0b      	lsrs	r3, r1, #16
 8008572:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008576:	b28a      	uxth	r2, r1
 8008578:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800857c:	fbb3 f1f6 	udiv	r1, r3, r6
 8008580:	07e4      	lsls	r4, r4, #31
 8008582:	46b4      	mov	ip, r6
 8008584:	4637      	mov	r7, r6
 8008586:	46b6      	mov	lr, r6
 8008588:	231f      	movs	r3, #31
 800858a:	fbb0 f0f6 	udiv	r0, r0, r6
 800858e:	1bd2      	subs	r2, r2, r7
 8008590:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008594:	e761      	b.n	800845a <__udivmoddi4+0xf6>
 8008596:	4661      	mov	r1, ip
 8008598:	e714      	b.n	80083c4 <__udivmoddi4+0x60>
 800859a:	4610      	mov	r0, r2
 800859c:	e728      	b.n	80083f0 <__udivmoddi4+0x8c>
 800859e:	f1c3 0120 	rsb	r1, r3, #32
 80085a2:	fa20 f201 	lsr.w	r2, r0, r1
 80085a6:	409e      	lsls	r6, r3
 80085a8:	fa27 f101 	lsr.w	r1, r7, r1
 80085ac:	409f      	lsls	r7, r3
 80085ae:	433a      	orrs	r2, r7
 80085b0:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80085b4:	fa1f fc86 	uxth.w	ip, r6
 80085b8:	fbb1 f7fe 	udiv	r7, r1, lr
 80085bc:	fb0e 1017 	mls	r0, lr, r7, r1
 80085c0:	0c11      	lsrs	r1, r2, #16
 80085c2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085c6:	fb07 f80c 	mul.w	r8, r7, ip
 80085ca:	4588      	cmp	r8, r1
 80085cc:	fa04 f403 	lsl.w	r4, r4, r3
 80085d0:	d93a      	bls.n	8008648 <__udivmoddi4+0x2e4>
 80085d2:	1871      	adds	r1, r6, r1
 80085d4:	f107 30ff 	add.w	r0, r7, #4294967295
 80085d8:	d201      	bcs.n	80085de <__udivmoddi4+0x27a>
 80085da:	4588      	cmp	r8, r1
 80085dc:	d81f      	bhi.n	800861e <__udivmoddi4+0x2ba>
 80085de:	eba1 0108 	sub.w	r1, r1, r8
 80085e2:	fbb1 f8fe 	udiv	r8, r1, lr
 80085e6:	fb08 f70c 	mul.w	r7, r8, ip
 80085ea:	fb0e 1118 	mls	r1, lr, r8, r1
 80085ee:	b292      	uxth	r2, r2
 80085f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80085f4:	42ba      	cmp	r2, r7
 80085f6:	d22f      	bcs.n	8008658 <__udivmoddi4+0x2f4>
 80085f8:	18b2      	adds	r2, r6, r2
 80085fa:	f108 31ff 	add.w	r1, r8, #4294967295
 80085fe:	d2c6      	bcs.n	800858e <__udivmoddi4+0x22a>
 8008600:	42ba      	cmp	r2, r7
 8008602:	d2c4      	bcs.n	800858e <__udivmoddi4+0x22a>
 8008604:	f1a8 0102 	sub.w	r1, r8, #2
 8008608:	4432      	add	r2, r6
 800860a:	e7c0      	b.n	800858e <__udivmoddi4+0x22a>
 800860c:	45f0      	cmp	r8, lr
 800860e:	d29c      	bcs.n	800854a <__udivmoddi4+0x1e6>
 8008610:	ebbe 0302 	subs.w	r3, lr, r2
 8008614:	eb67 070c 	sbc.w	r7, r7, ip
 8008618:	3801      	subs	r0, #1
 800861a:	46b9      	mov	r9, r7
 800861c:	e795      	b.n	800854a <__udivmoddi4+0x1e6>
 800861e:	eba6 0808 	sub.w	r8, r6, r8
 8008622:	4441      	add	r1, r8
 8008624:	1eb8      	subs	r0, r7, #2
 8008626:	fbb1 f8fe 	udiv	r8, r1, lr
 800862a:	fb08 f70c 	mul.w	r7, r8, ip
 800862e:	e7dc      	b.n	80085ea <__udivmoddi4+0x286>
 8008630:	463b      	mov	r3, r7
 8008632:	e77f      	b.n	8008534 <__udivmoddi4+0x1d0>
 8008634:	4650      	mov	r0, sl
 8008636:	e767      	b.n	8008508 <__udivmoddi4+0x1a4>
 8008638:	4608      	mov	r0, r1
 800863a:	e6fb      	b.n	8008434 <__udivmoddi4+0xd0>
 800863c:	4434      	add	r4, r6
 800863e:	3802      	subs	r0, #2
 8008640:	e732      	b.n	80084a8 <__udivmoddi4+0x144>
 8008642:	3f02      	subs	r7, #2
 8008644:	4432      	add	r2, r6
 8008646:	e71b      	b.n	8008480 <__udivmoddi4+0x11c>
 8008648:	eba1 0108 	sub.w	r1, r1, r8
 800864c:	4638      	mov	r0, r7
 800864e:	fbb1 f8fe 	udiv	r8, r1, lr
 8008652:	fb08 f70c 	mul.w	r7, r8, ip
 8008656:	e7c8      	b.n	80085ea <__udivmoddi4+0x286>
 8008658:	4641      	mov	r1, r8
 800865a:	e798      	b.n	800858e <__udivmoddi4+0x22a>

0800865c <_init>:
 800865c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865e:	bf00      	nop
 8008660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008662:	bc08      	pop	{r3}
 8008664:	469e      	mov	lr, r3
 8008666:	4770      	bx	lr

08008668 <_fini>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	bf00      	nop
 800866c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866e:	bc08      	pop	{r3}
 8008670:	469e      	mov	lr, r3
 8008672:	4770      	bx	lr
